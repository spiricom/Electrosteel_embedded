
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0001ada8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000c2b0  0801b040  0801b040  0002b040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080272f0  080272f0  00059c80  2**0
                  CONTENTS
  4 .ARM          00000000  080272f0  080272f0  00059c80  2**0
                  CONTENTS
  5 .preinit_array 00000000  080272f0  080272f0  00059c80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080272f0  080272f0  000372f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080272f4  080272f4  000372f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000930  20000000  080272f8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d160  20000930  08027c28  00060930  2**3
                  ALLOC
 10 .sram1_bss    00040000  24040000  24040000  00060000  2**5
                  ALLOC
 11 .sram2_dma_bss 00000880  30000000  30000000  00060000  2**5
                  ALLOC
 12 .sram2_bss    00043180  30002000  30002000  00062000  2**5
                  ALLOC
 13 .sram3_bss    00000080  38000000  38000000  00060000  2**5
                  ALLOC
 14 .userflash    00000020  38800000  38800000  00060000  2**5
                  ALLOC
 15 .itcmram      00009880  00000400  08027c28  00050400  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .sdram_bss    02000000  60000000  60000000  00060000  2**5
                  ALLOC
 17 .heap         00000000  2001da90  2001da90  00059c80  2**0
                  CONTENTS
 18 .reserved_for_stack 00000000  2001da90  2001da90  00059c80  2**0
                  CONTENTS
 19 .ARM.attributes 0000002e  00000000  00000000  00059c80  2**0
                  CONTENTS, READONLY
 20 .comment      00000043  00000000  00000000  00059cae  2**0
                  CONTENTS, READONLY
 21 DISCARD       000000ca  2001da90  2001da90  00059cf4  2**2
                  CONTENTS, READONLY
 22 .debug_info   00097345  00000000  00000000  00059dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 0000b724  00000000  00000000  000f1103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 0005c089  00000000  00000000  000fc827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00004298  00000000  00000000  001588b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 00009c21  00000000  00000000  0015cb48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line   0006796a  00000000  00000000  00166769  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_str    00014f8c  00000000  00000000  001ce0d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_frame  0000eb3c  00000000  00000000  001e3060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000930 	.word	0x20000930
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801afb8 	.word	0x0801afb8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000934 	.word	0x20000934
 80002d4:	0801afb8 	.word	0x0801afb8

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <arm_atan2_f32>:
*/


arm_status arm_atan2_f32(float32_t y,float32_t x,float32_t *result)
{
    if (x > 0.0f)
 8000660:	eef5 0ac0 	vcmpe.f32	s1, #0.0
{
 8000664:	4603      	mov	r3, r0
    if (x > 0.0f)
 8000666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800066a:	dc12      	bgt.n	8000692 <arm_atan2_f32+0x32>
    {
        *result=arm_atan_f32(y/x);
        return(ARM_MATH_SUCCESS);
    }
    if (x < 0.0f)
 800066c:	d450      	bmi.n	8000710 <arm_atan2_f32+0xb0>
               *result= PI;
            }
        }
        return(ARM_MATH_SUCCESS);
    }
    if (x == 0.0f)
 800066e:	eef5 0a40 	vcmp.f32	s1, #0.0
 8000672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000676:	f040 8135 	bne.w	80008e4 <arm_atan2_f32+0x284>
    {
        if (y > 0.0f)
 800067a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800067e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000682:	f300 808e 	bgt.w	80007a2 <arm_atan2_f32+0x142>
        {
            *result=PIHALFF32;
            return(ARM_MATH_SUCCESS);
        }
        if (y < 0.0f)
 8000686:	f140 812d 	bpl.w	80008e4 <arm_atan2_f32+0x284>
        {
            *result=-PIHALFF32;
 800068a:	4aac      	ldr	r2, [pc, #688]	; (800093c <arm_atan2_f32+0x2dc>)
            return(ARM_MATH_SUCCESS);
 800068c:	2000      	movs	r0, #0
            *result=-PIHALFF32;
 800068e:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 8000690:	4770      	bx	lr
        *result=arm_atan_f32(y/x);
 8000692:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 8000696:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800069a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800069e:	f100 80a9 	bmi.w	80007f4 <arm_atan2_f32+0x194>
   int sign=0;
 80006a2:	2200      	movs	r2, #0
   if (x > 1.0f)
 80006a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80006a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80006ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b0:	dd7b      	ble.n	80007aa <arm_atan2_f32+0x14a>
      x = 1.0f / x;
 80006b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80006b6:	eddf 2aa2 	vldr	s5, [pc, #648]	; 8000940 <arm_atan2_f32+0x2e0>
 80006ba:	ed9f 3aa2 	vldr	s6, [pc, #648]	; 8000944 <arm_atan2_f32+0x2e4>
 80006be:	eddf 3aa2 	vldr	s7, [pc, #648]	; 8000948 <arm_atan2_f32+0x2e8>
 80006c2:	ed9f 4aa2 	vldr	s8, [pc, #648]	; 800094c <arm_atan2_f32+0x2ec>
 80006c6:	eddf 4aa2 	vldr	s9, [pc, #648]	; 8000950 <arm_atan2_f32+0x2f0>
 80006ca:	ed9f 5aa2 	vldr	s10, [pc, #648]	; 8000954 <arm_atan2_f32+0x2f4>
 80006ce:	eddf 5aa2 	vldr	s11, [pc, #648]	; 8000958 <arm_atan2_f32+0x2f8>
 80006d2:	ed9f 6aa2 	vldr	s12, [pc, #648]	; 800095c <arm_atan2_f32+0x2fc>
 80006d6:	eddf 6aa2 	vldr	s13, [pc, #648]	; 8000960 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80006da:	eddf 7aa2 	vldr	s15, [pc, #648]	; 8000964 <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80006de:	eea7 3a22 	vfma.f32	s6, s14, s5
 80006e2:	eee7 3a03 	vfma.f32	s7, s14, s6
 80006e6:	eea7 4a23 	vfma.f32	s8, s14, s7
 80006ea:	eee7 4a04 	vfma.f32	s9, s14, s8
 80006ee:	eea7 5a24 	vfma.f32	s10, s14, s9
 80006f2:	eee5 5a07 	vfma.f32	s11, s10, s14
 80006f6:	eea7 6a25 	vfma.f32	s12, s14, s11
 80006fa:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 80006fe:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 8000702:	b10a      	cbz	r2, 8000708 <arm_atan2_f32+0xa8>
     res = -res;
 8000704:	eef1 7a67 	vneg.f32	s15, s15
        return(ARM_MATH_SUCCESS);
 8000708:	2000      	movs	r0, #0
        *result=arm_atan_f32(y/x);
 800070a:	edc3 7a00 	vstr	s15, [r3]
        return(ARM_MATH_SUCCESS);
 800070e:	4770      	bx	lr
        if (y > 0.0f)
 8000710:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000718:	dd70      	ble.n	80007fc <arm_atan2_f32+0x19c>
           *result=arm_atan_f32(y/x) + PI;
 800071a:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 800071e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000726:	f100 80d9 	bmi.w	80008dc <arm_atan2_f32+0x27c>
   int sign=0;
 800072a:	2200      	movs	r2, #0
   if (x > 1.0f)
 800072c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000730:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000738:	f340 80a8 	ble.w	800088c <arm_atan2_f32+0x22c>
      x = 1.0f / x;
 800073c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000740:	eddf 2a7f 	vldr	s5, [pc, #508]	; 8000940 <arm_atan2_f32+0x2e0>
 8000744:	ed9f 3a7f 	vldr	s6, [pc, #508]	; 8000944 <arm_atan2_f32+0x2e4>
 8000748:	eddf 3a7f 	vldr	s7, [pc, #508]	; 8000948 <arm_atan2_f32+0x2e8>
 800074c:	ed9f 4a7f 	vldr	s8, [pc, #508]	; 800094c <arm_atan2_f32+0x2ec>
 8000750:	eddf 4a7f 	vldr	s9, [pc, #508]	; 8000950 <arm_atan2_f32+0x2f0>
 8000754:	ed9f 5a7f 	vldr	s10, [pc, #508]	; 8000954 <arm_atan2_f32+0x2f4>
 8000758:	eddf 5a7f 	vldr	s11, [pc, #508]	; 8000958 <arm_atan2_f32+0x2f8>
 800075c:	ed9f 6a7f 	vldr	s12, [pc, #508]	; 800095c <arm_atan2_f32+0x2fc>
 8000760:	eddf 6a7f 	vldr	s13, [pc, #508]	; 8000960 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000764:	eddf 7a7f 	vldr	s15, [pc, #508]	; 8000964 <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000768:	eea7 3a22 	vfma.f32	s6, s14, s5
 800076c:	eee7 3a03 	vfma.f32	s7, s14, s6
 8000770:	eea7 4a23 	vfma.f32	s8, s14, s7
 8000774:	eee7 4a04 	vfma.f32	s9, s14, s8
 8000778:	eea7 5a24 	vfma.f32	s10, s14, s9
 800077c:	eee7 5a05 	vfma.f32	s11, s14, s10
 8000780:	eea7 6a25 	vfma.f32	s12, s14, s11
 8000784:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000788:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 800078c:	b10a      	cbz	r2, 8000792 <arm_atan2_f32+0x132>
     res = -res;
 800078e:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) + PI;
 8000792:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8000968 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
 8000796:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) + PI;
 8000798:	ee77 7a87 	vadd.f32	s15, s15, s14
 800079c:	edc3 7a00 	vstr	s15, [r3]
 80007a0:	4770      	bx	lr
            *result=PIHALFF32;
 80007a2:	4a72      	ldr	r2, [pc, #456]	; (800096c <arm_atan2_f32+0x30c>)
            return(ARM_MATH_SUCCESS);
 80007a4:	2000      	movs	r0, #0
            *result=PIHALFF32;
 80007a6:	601a      	str	r2, [r3, #0]
            return(ARM_MATH_SUCCESS);
 80007a8:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80007aa:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8000940 <arm_atan2_f32+0x2e0>
 80007ae:	eddf 3a65 	vldr	s7, [pc, #404]	; 8000944 <arm_atan2_f32+0x2e4>
 80007b2:	ed9f 4a65 	vldr	s8, [pc, #404]	; 8000948 <arm_atan2_f32+0x2e8>
 80007b6:	eee7 3a87 	vfma.f32	s7, s15, s14
 80007ba:	eddf 4a64 	vldr	s9, [pc, #400]	; 800094c <arm_atan2_f32+0x2ec>
 80007be:	ed9f 5a64 	vldr	s10, [pc, #400]	; 8000950 <arm_atan2_f32+0x2f0>
 80007c2:	eddf 5a64 	vldr	s11, [pc, #400]	; 8000954 <arm_atan2_f32+0x2f4>
 80007c6:	ed9f 6a64 	vldr	s12, [pc, #400]	; 8000958 <arm_atan2_f32+0x2f8>
 80007ca:	eddf 6a64 	vldr	s13, [pc, #400]	; 800095c <arm_atan2_f32+0x2fc>
 80007ce:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8000960 <arm_atan2_f32+0x300>
 80007d2:	eea7 4aa3 	vfma.f32	s8, s15, s7
 80007d6:	eee7 4a84 	vfma.f32	s9, s15, s8
 80007da:	eea7 5aa4 	vfma.f32	s10, s15, s9
 80007de:	eee7 5a85 	vfma.f32	s11, s15, s10
 80007e2:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80007e6:	eee7 6a86 	vfma.f32	s13, s15, s12
 80007ea:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80007ee:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 80007f2:	e786      	b.n	8000702 <arm_atan2_f32+0xa2>
      x=-x;
 80007f4:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 80007f8:	2201      	movs	r2, #1
 80007fa:	e753      	b.n	80006a4 <arm_atan2_f32+0x44>
        else if (y < 0.0f)
 80007fc:	d403      	bmi.n	8000806 <arm_atan2_f32+0x1a6>
               *result= PI;
 80007fe:	4a5c      	ldr	r2, [pc, #368]	; (8000970 <arm_atan2_f32+0x310>)
        return(ARM_MATH_SUCCESS);
 8000800:	2000      	movs	r0, #0
               *result= PI;
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	4770      	bx	lr
           *result=arm_atan_f32(y/x) - PI;
 8000806:	eec0 7a20 	vdiv.f32	s15, s0, s1
   if (x < 0.0f)
 800080a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800080e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000812:	f100 808f 	bmi.w	8000934 <arm_atan2_f32+0x2d4>
   int sign=0;
 8000816:	2200      	movs	r2, #0
   if (x > 1.0f)
 8000818:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800081c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000824:	dd61      	ble.n	80008ea <arm_atan2_f32+0x28a>
      x = 1.0f / x;
 8000826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800082a:	eddf 2a45 	vldr	s5, [pc, #276]	; 8000940 <arm_atan2_f32+0x2e0>
 800082e:	ed9f 3a45 	vldr	s6, [pc, #276]	; 8000944 <arm_atan2_f32+0x2e4>
 8000832:	eddf 3a45 	vldr	s7, [pc, #276]	; 8000948 <arm_atan2_f32+0x2e8>
 8000836:	ed9f 4a45 	vldr	s8, [pc, #276]	; 800094c <arm_atan2_f32+0x2ec>
 800083a:	eddf 4a45 	vldr	s9, [pc, #276]	; 8000950 <arm_atan2_f32+0x2f0>
 800083e:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8000954 <arm_atan2_f32+0x2f4>
 8000842:	eddf 5a45 	vldr	s11, [pc, #276]	; 8000958 <arm_atan2_f32+0x2f8>
 8000846:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800095c <arm_atan2_f32+0x2fc>
 800084a:	eddf 6a45 	vldr	s13, [pc, #276]	; 8000960 <arm_atan2_f32+0x300>
      res = PIHALFF32 - arm_atan_limited_f32(x);
 800084e:	eddf 7a45 	vldr	s15, [pc, #276]	; 8000964 <arm_atan2_f32+0x304>
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 8000852:	eea7 3a22 	vfma.f32	s6, s14, s5
 8000856:	eee7 3a03 	vfma.f32	s7, s14, s6
 800085a:	eea7 4a23 	vfma.f32	s8, s14, s7
 800085e:	eee7 4a04 	vfma.f32	s9, s14, s8
 8000862:	eea7 5a24 	vfma.f32	s10, s14, s9
 8000866:	eee7 5a05 	vfma.f32	s11, s14, s10
 800086a:	eea7 6a25 	vfma.f32	s12, s14, s11
 800086e:	eee7 6a06 	vfma.f32	s13, s14, s12
      res = PIHALFF32 - arm_atan_limited_f32(x);
 8000872:	eee7 7a66 	vfms.f32	s15, s14, s13
   if (sign)
 8000876:	b10a      	cbz	r2, 800087c <arm_atan2_f32+0x21c>
     res = -res;
 8000878:	eef1 7a67 	vneg.f32	s15, s15
           *result=arm_atan_f32(y/x) - PI;
 800087c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8000968 <arm_atan2_f32+0x308>
        return(ARM_MATH_SUCCESS);
 8000880:	2000      	movs	r0, #0
           *result=arm_atan_f32(y/x) - PI;
 8000882:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000886:	edc3 7a00 	vstr	s15, [r3]
 800088a:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 800088c:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8000940 <arm_atan2_f32+0x2e0>
 8000890:	eddf 3a2c 	vldr	s7, [pc, #176]	; 8000944 <arm_atan2_f32+0x2e4>
 8000894:	ed9f 4a2c 	vldr	s8, [pc, #176]	; 8000948 <arm_atan2_f32+0x2e8>
 8000898:	eee7 3a87 	vfma.f32	s7, s15, s14
 800089c:	eddf 4a2b 	vldr	s9, [pc, #172]	; 800094c <arm_atan2_f32+0x2ec>
 80008a0:	ed9f 5a2b 	vldr	s10, [pc, #172]	; 8000950 <arm_atan2_f32+0x2f0>
 80008a4:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8000954 <arm_atan2_f32+0x2f4>
 80008a8:	ed9f 6a2b 	vldr	s12, [pc, #172]	; 8000958 <arm_atan2_f32+0x2f8>
 80008ac:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800095c <arm_atan2_f32+0x2fc>
 80008b0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000960 <arm_atan2_f32+0x300>
 80008b4:	eea7 4aa3 	vfma.f32	s8, s15, s7
 80008b8:	eee7 4a84 	vfma.f32	s9, s15, s8
 80008bc:	eea7 5aa4 	vfma.f32	s10, s15, s9
 80008c0:	eee7 5a85 	vfma.f32	s11, s15, s10
 80008c4:	eea7 6aa5 	vfma.f32	s12, s15, s11
 80008c8:	eee7 6a86 	vfma.f32	s13, s15, s12
 80008cc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80008d0:	ee67 7a87 	vmul.f32	s15, s15, s14
   if (sign)
 80008d4:	2a00      	cmp	r2, #0
 80008d6:	f43f af5c 	beq.w	8000792 <arm_atan2_f32+0x132>
 80008da:	e758      	b.n	800078e <arm_atan2_f32+0x12e>
      x=-x;
 80008dc:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 80008e0:	2201      	movs	r2, #1
 80008e2:	e723      	b.n	800072c <arm_atan2_f32+0xcc>
        }
    }
    

    return(ARM_MATH_NANINF);
 80008e4:	f06f 0003 	mvn.w	r0, #3

}
 80008e8:	4770      	bx	lr
        res = x*res + atan2_coefs_f32[ATAN2_NB_COEFS_F32-1-i];
 80008ea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000940 <arm_atan2_f32+0x2e0>
 80008ee:	eddf 3a15 	vldr	s7, [pc, #84]	; 8000944 <arm_atan2_f32+0x2e4>
 80008f2:	ed9f 4a15 	vldr	s8, [pc, #84]	; 8000948 <arm_atan2_f32+0x2e8>
 80008f6:	eee7 3a87 	vfma.f32	s7, s15, s14
 80008fa:	eddf 4a14 	vldr	s9, [pc, #80]	; 800094c <arm_atan2_f32+0x2ec>
 80008fe:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8000950 <arm_atan2_f32+0x2f0>
 8000902:	eddf 5a14 	vldr	s11, [pc, #80]	; 8000954 <arm_atan2_f32+0x2f4>
 8000906:	ed9f 6a14 	vldr	s12, [pc, #80]	; 8000958 <arm_atan2_f32+0x2f8>
 800090a:	eddf 6a14 	vldr	s13, [pc, #80]	; 800095c <arm_atan2_f32+0x2fc>
 800090e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000960 <arm_atan2_f32+0x300>
 8000912:	eea7 4aa3 	vfma.f32	s8, s15, s7
 8000916:	eee7 4a84 	vfma.f32	s9, s15, s8
 800091a:	eea7 5aa4 	vfma.f32	s10, s15, s9
 800091e:	eee7 5a85 	vfma.f32	s11, s15, s10
 8000922:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8000926:	eee7 6a86 	vfma.f32	s13, s15, s12
 800092a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800092e:	ee67 7a87 	vmul.f32	s15, s15, s14
    for(i=1;i<ATAN2_NB_COEFS_F32;i++)
 8000932:	e7a0      	b.n	8000876 <arm_atan2_f32+0x216>
      x=-x;
 8000934:	eef1 7a67 	vneg.f32	s15, s15
      sign=1;
 8000938:	2201      	movs	r2, #1
 800093a:	e76d      	b.n	8000818 <arm_atan2_f32+0x1b8>
 800093c:	bfc90fdb 	.word	0xbfc90fdb
 8000940:	bd0492a5 	.word	0xbd0492a5
 8000944:	3e0945e7 	.word	0x3e0945e7
 8000948:	be32b708 	.word	0xbe32b708
 800094c:	bca9fceb 	.word	0xbca9fceb
 8000950:	3e5d693c 	.word	0x3e5d693c
 8000954:	bb905643 	.word	0xbb905643
 8000958:	beaa65e5 	.word	0xbeaa65e5
 800095c:	b7c00cc9 	.word	0xb7c00cc9
 8000960:	3f800001 	.word	0x3f800001
 8000964:	3fc90fdb 	.word	0x3fc90fdb
 8000968:	40490fdb 	.word	0x40490fdb
 800096c:	3fc90fdb 	.word	0x3fc90fdb
 8000970:	40490fdb 	.word	0x40490fdb

08000974 <arm_cos_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 8000974:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8000978:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8000a04 <arm_cos_f32+0x90>

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 800097c:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000a08 <arm_cos_f32+0x94>
  in = x * 0.159154943092f + 0.25f;
 8000980:	eee0 7a07 	vfma.f32	s15, s0, s14
  if (in < 0.0f)
 8000984:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8000988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  n = (int32_t) in;
 800098c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
  if (in < 0.0f)
 8000990:	d504      	bpl.n	800099c <arm_cos_f32+0x28>
  {
    n--;
 8000992:	ee17 3a10 	vmov	r3, s14
 8000996:	3b01      	subs	r3, #1
 8000998:	ee07 3a10 	vmov	s14, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 800099c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80009a0:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8000a0c <arm_cos_f32+0x98>
  in = in - (float32_t) n;
 80009a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80009a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
  index = (uint16_t)findex;
 80009ac:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80009b0:	ee17 3a10 	vmov	r3, s14
 80009b4:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 80009b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ba:	d21a      	bcs.n	80009f2 <arm_cos_f32+0x7e>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 80009bc:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 80009c0:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 80009c2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80009c6:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 80009ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
 80009ce:	4a10      	ldr	r2, [pc, #64]	; (8000a10 <arm_cos_f32+0x9c>)
  b = sinTable_f32[index+1];
 80009d0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 80009d4:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
 80009d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  cosVal = (1.0f - fract) * a + fract * b;
 80009dc:	ed91 6a00 	vldr	s12, [r1]
 80009e0:	edd2 6a00 	vldr	s13, [r2]
 80009e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80009e8:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (cosVal);
}
 80009ec:	eea7 0a26 	vfma.f32	s0, s14, s13
 80009f0:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 80009f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80009f6:	2101      	movs	r1, #1
 80009f8:	2300      	movs	r3, #0
 80009fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000a14 <arm_cos_f32+0xa0>
 80009fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000a02:	e7e2      	b.n	80009ca <arm_cos_f32+0x56>
 8000a04:	3e22f983 	.word	0x3e22f983
 8000a08:	bfc90fdb 	.word	0xbfc90fdb
 8000a0c:	44000000 	.word	0x44000000
 8000a10:	0801b040 	.word	0x0801b040
 8000a14:	00000000 	.word	0x00000000

08000a18 <arm_fir_decimate_f32>:
void arm_fir_decimate_f32(
  const arm_fir_decimate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000a18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        float32_t *px0;                                /* Temporary pointer for state buffer */
  const float32_t *pb;                                 /* Temporary pointer for coefficient buffer */
        float32_t x0, c0;                              /* Temporary variables to hold state and coefficient values */
        float32_t acc0;                                /* Accumulator */
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8000a1c:	f890 9000 	ldrb.w	r9, [r0]
        float32_t acc1, acc2, acc3;
#endif

  /* S->pState buffer contains previous frame (numTaps - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (numTaps - 1U);
 8000a20:	f06f 4640 	mvn.w	r6, #3221225472	; 0xc0000000
        uint32_t numTaps = S->numTaps;                 /* Number of filter coefficients in the filter */
 8000a24:	8844      	ldrh	r4, [r0, #2]
        float32_t *pState = S->pState;                 /* State pointer */
 8000a26:	6885      	ldr	r5, [r0, #8]
  /* Initialize blkCnt with number of samples */
  blkCnt = outBlockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000a28:	4599      	cmp	r9, r3
  pStateCur = S->pState + (numTaps - 1U);
 8000a2a:	4426      	add	r6, r4
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000a2c:	f8d0 8004 	ldr.w	r8, [r0, #4]
        uint32_t i, tapCnt, blkCnt, outBlockSize = blockSize / S->M;  /* Loop counters */
 8000a30:	fbb3 f7f9 	udiv	r7, r3, r9
  pStateCur = S->pState + (numTaps - 1U);
 8000a34:	eb05 0686 	add.w	r6, r5, r6, lsl #2
  while (blkCnt > 0U)
 8000a38:	d837      	bhi.n	8000aaa <arm_fir_decimate_f32+0x92>
  {
    /* Copy decimation factor number of new input samples into the state buffer */
    i = S->M;
 8000a3a:	464b      	mov	r3, r9
 8000a3c:	46b6      	mov	lr, r6
 8000a3e:	468c      	mov	ip, r1

    do
    {
      *pStateCur++ = *pSrc++;
 8000a40:	ecfc 7a01 	vldmia	ip!, {s15}

    } while (--i);
 8000a44:	3b01      	subs	r3, #1
      *pStateCur++ = *pSrc++;
 8000a46:	ecee 7a01 	vstmia	lr!, {s15}
    } while (--i);
 8000a4a:	d1f9      	bne.n	8000a40 <arm_fir_decimate_f32+0x28>
      *pStateCur++ = *pSrc++;
 8000a4c:	eb01 0189 	add.w	r1, r1, r9, lsl #2
 8000a50:	eb06 0689 	add.w	r6, r6, r9, lsl #2
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

    while (tapCnt > 0U)
 8000a54:	b1b4      	cbz	r4, 8000a84 <arm_fir_decimate_f32+0x6c>
 8000a56:	4623      	mov	r3, r4
    pb = pCoeffs;
 8000a58:	46c6      	mov	lr, r8
    while (tapCnt > 0U)
 8000a5a:	46ac      	mov	ip, r5
    acc0 = 0.0f;
 8000a5c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8000ab0 <arm_fir_decimate_f32+0x98>

      /* Fetch 1 state variable */
      x0 = *px0++;

      /* Perform the multiply-accumulate */
      acc0 += x0 * c0;
 8000a60:	ecfe 6a01 	vldmia	lr!, {s13}
    while (tapCnt > 0U)
 8000a64:	3b01      	subs	r3, #1
      acc0 += x0 * c0;
 8000a66:	ecbc 7a01 	vldmia	ip!, {s14}
 8000a6a:	eee6 7a87 	vfma.f32	s15, s13, s14
    while (tapCnt > 0U)
 8000a6e:	d1f7      	bne.n	8000a60 <arm_fir_decimate_f32+0x48>
      tapCnt--;
    }

    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + S->M;
 8000a70:	7803      	ldrb	r3, [r0, #0]
  while (blkCnt > 0U)
 8000a72:	3f01      	subs	r7, #1

    /* The result is in the accumulator, store in the destination buffer. */
    *pDst++ = acc0;
 8000a74:	ece2 7a01 	vstmia	r2!, {s15}
    pState = pState + S->M;
 8000a78:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  while (blkCnt > 0U)
 8000a7c:	d00b      	beq.n	8000a96 <arm_fir_decimate_f32+0x7e>
    i = S->M;
 8000a7e:	f890 9000 	ldrb.w	r9, [r0]
 8000a82:	e7da      	b.n	8000a3a <arm_fir_decimate_f32+0x22>
    pState = pState + S->M;
 8000a84:	7803      	ldrb	r3, [r0, #0]
  while (blkCnt > 0U)
 8000a86:	3f01      	subs	r7, #1
    acc0 = 0.0f;
 8000a88:	eddf 7a09 	vldr	s15, [pc, #36]	; 8000ab0 <arm_fir_decimate_f32+0x98>
    pState = pState + S->M;
 8000a8c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    *pDst++ = acc0;
 8000a90:	ece2 7a01 	vstmia	r2!, {s15}
  while (blkCnt > 0U)
 8000a94:	d1f3      	bne.n	8000a7e <arm_fir_decimate_f32+0x66>
  /* Processing is complete.
     Now copy the last numTaps - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8000a96:	6883      	ldr	r3, [r0, #8]
 8000a98:	e003      	b.n	8000aa2 <arm_fir_decimate_f32+0x8a>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8000a9a:	f855 2b04 	ldr.w	r2, [r5], #4
 8000a9e:	f843 2b04 	str.w	r2, [r3], #4
  while (tapCnt > 0U)
 8000aa2:	3c01      	subs	r4, #1
 8000aa4:	d1f9      	bne.n	8000a9a <arm_fir_decimate_f32+0x82>

    /* Decrement loop counter */
    tapCnt--;
  }

}
 8000aa6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while (blkCnt > 0U)
 8000aaa:	462b      	mov	r3, r5
 8000aac:	e7f9      	b.n	8000aa2 <arm_fir_decimate_f32+0x8a>
 8000aae:	bf00      	nop
 8000ab0:	00000000 	.word	0x00000000

08000ab4 <arm_fir_decimate_init_f32>:
        uint16_t numTaps,
        uint8_t M,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ab6:	4616      	mov	r6, r2
 8000ab8:	e9dd 7206 	ldrd	r7, r2, [sp, #24]
  arm_status status;

  /* The size of the input block must be a multiple of the decimation factor */
  if ((blockSize % M) != 0U)
 8000abc:	fbb2 f4f6 	udiv	r4, r2, r6
 8000ac0:	fb06 2414 	mls	r4, r6, r4, r2
 8000ac4:	b96c      	cbnz	r4, 8000ae2 <arm_fir_decimate_init_f32+0x2e>
  {
    /* Assign filter taps */
    S->numTaps = numTaps;

    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8000ac6:	6043      	str	r3, [r0, #4]

    /* Clear the state buffer. The size is always (blockSize + numTaps - 1) */
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000ac8:	1e4b      	subs	r3, r1, #1
 8000aca:	4605      	mov	r5, r0
    S->numTaps = numTaps;
 8000acc:	8041      	strh	r1, [r0, #2]
    memset(pState, 0, (numTaps + (blockSize - 1U)) * sizeof(float32_t));
 8000ace:	441a      	add	r2, r3
 8000ad0:	4621      	mov	r1, r4
 8000ad2:	4638      	mov	r0, r7
 8000ad4:	0092      	lsls	r2, r2, #2
 8000ad6:	f017 ff85 	bl	80189e4 <memset>
    S->pState = pState;

    /* Assign Decimation Factor */
    S->M = M;

    status = ARM_MATH_SUCCESS;
 8000ada:	4620      	mov	r0, r4
    S->pState = pState;
 8000adc:	60af      	str	r7, [r5, #8]
    S->M = M;
 8000ade:	702e      	strb	r6, [r5, #0]
  }

  return (status);

}
 8000ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    status = ARM_MATH_LENGTH_ERROR;
 8000ae2:	f06f 0001 	mvn.w	r0, #1
}
 8000ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ae8 <arm_fir_interpolate_f32>:
void arm_fir_interpolate_f32(
  const arm_fir_interpolate_instance_f32 * S,
  const float32_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8000ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	4607      	mov	r7, r0
#if (1)
//#if !defined(ARM_MATH_CM0_FAMILY)

        float32_t *pState = S->pState;                 /* State pointer */
 8000aee:	f8d0 a008 	ldr.w	sl, [r0, #8]
{
 8000af2:	4691      	mov	r9, r2
        float32_t *pStateCur;                          /* Points to the current sample of the state */
        float32_t *ptr1;                               /* Temporary pointer for state buffer */
  const float32_t *ptr2;                               /* Temporary pointer for coefficient buffer */
        float32_t sum0;                                /* Accumulators */
        uint32_t i, blkCnt, tapCnt;                    /* Loop counters */
        uint32_t phaseLen = S->phaseLength;            /* Length of each polyphase filter component */
 8000af4:	8840      	ldrh	r0, [r0, #2]
        float32_t c0, c1, c2, c3;
#endif

  /* S->pState buffer contains previous frame (phaseLen - 1) samples */
  /* pStateCur points to the location where the new input data should be written */
  pStateCur = S->pState + (phaseLen - 1U);
 8000af6:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
{
 8000afa:	b085      	sub	sp, #20
  const float32_t *pCoeffs = S->pCoeffs;               /* Coefficient pointer */
 8000afc:	f8d7 8004 	ldr.w	r8, [r7, #4]
  pStateCur = S->pState + (phaseLen - 1U);
 8000b00:	4402      	add	r2, r0
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8000b02:	9302      	str	r3, [sp, #8]
  pStateCur = S->pState + (phaseLen - 1U);
 8000b04:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
  while (blkCnt > 0U)
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d05a      	beq.n	8000bc2 <arm_fir_interpolate_f32+0xda>
        float32_t *pState = S->pState;                 /* State pointer */
 8000b0c:	46d6      	mov	lr, sl
 8000b0e:	f8cd a00c 	str.w	sl, [sp, #12]
 8000b12:	468b      	mov	fp, r1
 8000b14:	469a      	mov	sl, r3
 8000b16:	9201      	str	r2, [sp, #4]
  {
    /* Copy new input sample into the state buffer */
    *pStateCur++ = *pSrc++;
 8000b18:	9a01      	ldr	r2, [sp, #4]
 8000b1a:	f85b 3b04 	ldr.w	r3, [fp], #4
 8000b1e:	f842 3b04 	str.w	r3, [r2], #4

    /* Address modifier index of coefficient buffer */
    j = 1U;

    /* Loop over the Interpolation factor. */
    i = S->L;
 8000b22:	783e      	ldrb	r6, [r7, #0]
    *pStateCur++ = *pSrc++;
 8000b24:	9201      	str	r2, [sp, #4]

    while (i > 0U)
 8000b26:	b376      	cbz	r6, 8000b86 <arm_fir_interpolate_f32+0x9e>
 8000b28:	4632      	mov	r2, r6
    j = 1U;
 8000b2a:	2501      	movs	r5, #1
    while (i > 0U)
 8000b2c:	46cc      	mov	ip, r9

      /* Initialize state pointer */
      ptr1 = pState;

      /* Initialize coefficient pointer */
      ptr2 = pCoeffs + (S->L - j);
 8000b2e:	1b53      	subs	r3, r2, r5
 8000b30:	eb08 0383 	add.w	r3, r8, r3, lsl #2
      /* Initialize tapCnt with number of samples */
      tapCnt = phaseLen;

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (tapCnt > 0U)
 8000b34:	b1e8      	cbz	r0, 8000b72 <arm_fir_interpolate_f32+0x8a>
 8000b36:	2a01      	cmp	r2, #1
        sum0 += *ptr1++ * *ptr2;

        /* Upsampling is done by stuffing L-1 zeros between each sample.
         * So instead of multiplying zeros with coefficients,
         * Increment the coefficient pointer by interpolation factor times. */
        ptr2 += S->L;
 8000b38:	ea4f 0482 	mov.w	r4, r2, lsl #2
      sum0 = 0.0f;
 8000b3c:	eddf 7a22 	vldr	s15, [pc, #136]	; 8000bc8 <arm_fir_interpolate_f32+0xe0>
        ptr2 += S->L;
 8000b40:	4602      	mov	r2, r0
 8000b42:	4671      	mov	r1, lr
 8000b44:	d133      	bne.n	8000bae <arm_fir_interpolate_f32+0xc6>
        sum0 += *ptr1++ * *ptr2;
 8000b46:	edd3 6a00 	vldr	s13, [r3]
      while (tapCnt > 0U)
 8000b4a:	3a01      	subs	r2, #1
        sum0 += *ptr1++ * *ptr2;
 8000b4c:	ecb1 7a01 	vldmia	r1!, {s14}
        ptr2 += S->L;
 8000b50:	4423      	add	r3, r4
        sum0 += *ptr1++ * *ptr2;
 8000b52:	eee6 7a87 	vfma.f32	s15, s13, s14
      while (tapCnt > 0U)
 8000b56:	d1f6      	bne.n	8000b46 <arm_fir_interpolate_f32+0x5e>
    while (i > 0U)
 8000b58:	42ae      	cmp	r6, r5

      /* The result is in the accumulator, store in the destination buffer. */
      *pDst++ = sum0;

      /* Increment the address modifier index of coefficient buffer */
      j++;
 8000b5a:	f105 0301 	add.w	r3, r5, #1
      *pDst++ = sum0;
 8000b5e:	ecec 7a01 	vstmia	ip!, {s15}
    while (i > 0U)
 8000b62:	d00e      	beq.n	8000b82 <arm_fir_interpolate_f32+0x9a>
      ptr2 = pCoeffs + (S->L - j);
 8000b64:	461d      	mov	r5, r3
 8000b66:	783a      	ldrb	r2, [r7, #0]
 8000b68:	1b53      	subs	r3, r2, r5
 8000b6a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
      while (tapCnt > 0U)
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d1e1      	bne.n	8000b36 <arm_fir_interpolate_f32+0x4e>
      sum0 = 0.0f;
 8000b72:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000bc8 <arm_fir_interpolate_f32+0xe0>
    while (i > 0U)
 8000b76:	42ae      	cmp	r6, r5
      j++;
 8000b78:	f105 0301 	add.w	r3, r5, #1
      *pDst++ = sum0;
 8000b7c:	ecec 7a01 	vstmia	ip!, {s15}
    while (i > 0U)
 8000b80:	d1f0      	bne.n	8000b64 <arm_fir_interpolate_f32+0x7c>
      *pDst++ = sum0;
 8000b82:	eb09 0986 	add.w	r9, r9, r6, lsl #2
  while (blkCnt > 0U)
 8000b86:	f1ba 0a01 	subs.w	sl, sl, #1
      i--;
    }

    /* Advance the state pointer by 1
     * to process the next group of interpolation factor number samples */
    pState = pState + 1;
 8000b8a:	f10e 0e04 	add.w	lr, lr, #4
  while (blkCnt > 0U)
 8000b8e:	d1c3      	bne.n	8000b18 <arm_fir_interpolate_f32+0x30>
    pState = pState + 1;
 8000b90:	e9dd 3a02 	ldrd	r3, sl, [sp, #8]
 8000b94:	eb0a 0a83 	add.w	sl, sl, r3, lsl #2
  /* Processing is complete.
     Now copy the last phaseLen - 1 samples to the satrt of the state buffer.
     This prepares the state buffer for the next function call. */

  /* Points to the start of the state buffer */
  pStateCur = S->pState;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	e003      	b.n	8000ba4 <arm_fir_interpolate_f32+0xbc>
#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  /* Copy data */
  while (tapCnt > 0U)
  {
    *pStateCur++ = *pState++;
 8000b9c:	f85a 2b04 	ldr.w	r2, [sl], #4
 8000ba0:	f843 2b04 	str.w	r2, [r3], #4
  while (tapCnt > 0U)
 8000ba4:	3801      	subs	r0, #1
 8000ba6:	d1f9      	bne.n	8000b9c <arm_fir_interpolate_f32+0xb4>
    tapCnt--;
  }

#endif /* #if !defined(ARM_MATH_CM0_FAMILY) */

}
 8000ba8:	b005      	add	sp, #20
 8000baa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        sum0 += *ptr1++ * *ptr2;
 8000bae:	ed93 7a00 	vldr	s14, [r3]
      while (tapCnt > 0U)
 8000bb2:	3a01      	subs	r2, #1
        sum0 += *ptr1++ * *ptr2;
 8000bb4:	ecf1 6a01 	vldmia	r1!, {s13}
        ptr2 += S->L;
 8000bb8:	4423      	add	r3, r4
        sum0 += *ptr1++ * *ptr2;
 8000bba:	eee6 7a87 	vfma.f32	s15, s13, s14
      while (tapCnt > 0U)
 8000bbe:	d1f6      	bne.n	8000bae <arm_fir_interpolate_f32+0xc6>
 8000bc0:	e7ca      	b.n	8000b58 <arm_fir_interpolate_f32+0x70>
  while (blkCnt > 0U)
 8000bc2:	4653      	mov	r3, sl
 8000bc4:	e7ee      	b.n	8000ba4 <arm_fir_interpolate_f32+0xbc>
 8000bc6:	bf00      	nop
 8000bc8:	00000000 	.word	0x00000000

08000bcc <arm_fir_interpolate_init_f32>:
        uint8_t L,
        uint16_t numTaps,
  const float32_t * pCoeffs,
        float32_t * pState,
        uint32_t blockSize)
{
 8000bcc:	b570      	push	{r4, r5, r6, lr}
 8000bce:	4605      	mov	r5, r0
 8000bd0:	9e04      	ldr	r6, [sp, #16]
  arm_status status;

  /* The filter length must be a multiple of the interpolation factor */
  if ((numTaps % L) != 0U)
 8000bd2:	fbb2 f0f1 	udiv	r0, r2, r1
 8000bd6:	fb01 2410 	mls	r4, r1, r0, r2
 8000bda:	b96c      	cbnz	r4, 8000bf8 <arm_fir_interpolate_init_f32+0x2c>
    status = ARM_MATH_LENGTH_ERROR;
  }
  else
  {
    /* Assign coefficient pointer */
    S->pCoeffs = pCoeffs;
 8000bdc:	606b      	str	r3, [r5, #4]

    /* Assign polyPhaseLength */
    S->phaseLength = numTaps / L;

    /* Clear state buffer and size of buffer is always phaseLength + blockSize - 1 */
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000bde:	9b05      	ldr	r3, [sp, #20]
    S->L = L;
 8000be0:	7029      	strb	r1, [r5, #0]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000be2:	4621      	mov	r1, r4
 8000be4:	1e5a      	subs	r2, r3, #1
    S->phaseLength = numTaps / L;
 8000be6:	8068      	strh	r0, [r5, #2]
    memset(pState, 0, (blockSize + ((uint32_t) S->phaseLength - 1U)) * sizeof(float32_t));
 8000be8:	4402      	add	r2, r0
 8000bea:	4630      	mov	r0, r6
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	f017 fef9 	bl	80189e4 <memset>

    /* Assign state pointer */
    S->pState = pState;

    status = ARM_MATH_SUCCESS;
 8000bf2:	4620      	mov	r0, r4
    S->pState = pState;
 8000bf4:	60ae      	str	r6, [r5, #8]
  }

  return (status);
}
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
    status = ARM_MATH_LENGTH_ERROR;
 8000bf8:	f06f 0001 	mvn.w	r0, #1
}
 8000bfc:	bd70      	pop	{r4, r5, r6, pc}
 8000bfe:	bf00      	nop

08000c00 <arm_sin_f32>:
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi */
  in = x * 0.159154943092f;
 8000c00:	eddf 7a21 	vldr	s15, [pc, #132]	; 8000c88 <arm_sin_f32+0x88>
 8000c04:	ee20 0a27 	vmul.f32	s0, s0, s15

  /* Calculation of floor value of input */
  n = (int32_t) in;

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 8000c08:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
  n = (int32_t) in;
 8000c0c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
  if (in < 0.0f)
 8000c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c14:	d504      	bpl.n	8000c20 <arm_sin_f32+0x20>
  {
    n--;
 8000c16:	ee17 3a90 	vmov	r3, s15
 8000c1a:	3b01      	subs	r3, #1
 8000c1c:	ee07 3a90 	vmov	s15, r3
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 8000c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000c24:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000c8c <arm_sin_f32+0x8c>
  in = in - (float32_t) n;
 8000c28:	ee30 0a67 	vsub.f32	s0, s0, s15
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 8000c2c:	ee60 7a26 	vmul.f32	s15, s0, s13
  index = (uint16_t)findex;
 8000c30:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8000c34:	ee17 3a10 	vmov	r3, s14
 8000c38:	b29b      	uxth	r3, r3

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 8000c3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c3e:	d21a      	bcs.n	8000c76 <arm_sin_f32+0x76>
    index = 0;
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8000c40:	ee07 3a10 	vmov	s14, r3

  /* Read two nearest values of input value from the sin table */
  a = sinTable_f32[index];
  b = sinTable_f32[index+1];
 8000c44:	1c59      	adds	r1, r3, #1
  fract = findex - (float32_t) index;
 8000c46:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8000c4a:	ee37 0ac7 	vsub.f32	s0, s15, s14

  /* Linear interpolation process */
  sinVal = (1.0f - fract) * a + fract * b;
 8000c4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
  a = sinTable_f32[index];
 8000c52:	4a0f      	ldr	r2, [pc, #60]	; (8000c90 <arm_sin_f32+0x90>)
  b = sinTable_f32[index+1];
 8000c54:	eb02 0181 	add.w	r1, r2, r1, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 8000c58:	ee37 7a26 	vadd.f32	s14, s14, s13
  a = sinTable_f32[index];
 8000c5c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
  sinVal = (1.0f - fract) * a + fract * b;
 8000c60:	ed91 6a00 	vldr	s12, [r1]
 8000c64:	edd2 6a00 	vldr	s13, [r2]
 8000c68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c6c:	ee20 0a06 	vmul.f32	s0, s0, s12

  /* Return output value */
  return (sinVal);
}
 8000c70:	eea7 0a26 	vfma.f32	s0, s14, s13
 8000c74:	4770      	bx	lr
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8000c76:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8000c7a:	2101      	movs	r1, #1
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000c94 <arm_sin_f32+0x94>
 8000c82:	eeb0 0a67 	vmov.f32	s0, s15
 8000c86:	e7e2      	b.n	8000c4e <arm_sin_f32+0x4e>
 8000c88:	3e22f983 	.word	0x3e22f983
 8000c8c:	44000000 	.word	0x44000000
 8000c90:	0801b040 	.word	0x0801b040
 8000c94:	00000000 	.word	0x00000000

08000c98 <dbToATableLookup>:
    uint32_t inAmpIndex = LEAF_clip (0, (in * atodbTableScalar) - atodbTableOffset, ATODB_TABLE_SIZE_MINUS_ONE);
    return atoDbTable[inAmpIndex];
}

float FORCE_INLINE dbToATableLookup(float in)
{
 8000c98:	b508      	push	{r3, lr}
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000c9a:	4a19      	ldr	r2, [pc, #100]	; (8000d00 <dbToATableLookup+0x68>)
{
 8000c9c:	eef0 7a40 	vmov.f32	s15, s0
    float floatIndex = LEAF_clip (0, (in * dbtoaTableScalar) - dbtoaTableOffset, DBTOA_TABLE_SIZE_MINUS_ONE);
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <dbToATableLookup+0x6c>)
 8000ca2:	edd2 0a00 	vldr	s1, [r2]
 8000ca6:	ed93 7a00 	vldr	s14, [r3]
 8000caa:	ed9f 1a17 	vldr	s2, [pc, #92]	; 8000d08 <dbToATableLookup+0x70>
 8000cae:	eed7 0a27 	vfnms.f32	s1, s14, s15
 8000cb2:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000d0c <dbToATableLookup+0x74>
 8000cb6:	f013 f92f 	bl	8013f18 <LEAF_clip>
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000cba:	eebc 7ac0 	vcvt.u32.f32	s14, s0
    if (inDBIndexPlusOne > DBTOA_TABLE_SIZE_MINUS_ONE)
    {
    	inDBIndexPlusOne = DBTOA_TABLE_SIZE_MINUS_ONE;
    }
    float alpha = floatIndex - (float)inDBIndex;
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000cbe:	f643 70ff 	movw	r0, #16383	; 0x3fff
 8000cc2:	4a13      	ldr	r2, [pc, #76]	; (8000d10 <dbToATableLookup+0x78>)
 8000cc4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    uint32_t inDBIndex = (uint32_t) floatIndex;
 8000cc8:	ee17 3a10 	vmov	r3, s14
    float alpha = floatIndex - (float)inDBIndex;
 8000ccc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    uint32_t inDBIndexPlusOne = inDBIndex + 1;
 8000cd0:	1c59      	adds	r1, r3, #1
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000cd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000cd6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8000cda:	4281      	cmp	r1, r0
    float alpha = floatIndex - (float)inDBIndex;
 8000cdc:	ee30 0a47 	vsub.f32	s0, s0, s14
    return ((dbtoATable[inDBIndex] * (1.0f - alpha)) + (dbtoATable[inDBIndexPlusOne] * alpha));
 8000ce0:	bf28      	it	cs
 8000ce2:	4601      	movcs	r1, r0
 8000ce4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ce8:	ed93 7a00 	vldr	s14, [r3]
 8000cec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000cf0:	edd2 6a00 	vldr	s13, [r2]
 8000cf4:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8000cf8:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000cfc:	bd08      	pop	{r3, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000f28 	.word	0x20000f28
 8000d04:	20000f2c 	.word	0x20000f2c
 8000d08:	467ffc00 	.word	0x467ffc00
 8000d0c:	00000000 	.word	0x00000000
 8000d10:	30002000 	.word	0x30002000

08000d14 <mtofTableLookup>:
}



float FORCE_INLINE mtofTableLookup(float tempMIDI)
{
 8000d14:	eef0 0a40 	vmov.f32	s1, s0
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 8000d18:	ed9f 1a16 	vldr	s2, [pc, #88]	; 8000d74 <mtofTableLookup+0x60>
 8000d1c:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8000d78 <mtofTableLookup+0x64>
{
 8000d20:	b508      	push	{r3, lr}
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 8000d22:	f013 f8f9 	bl	8013f18 <LEAF_clip>
 8000d26:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000d7c <mtofTableLookup+0x68>
 8000d2a:	eddf 7a15 	vldr	s15, [pc, #84]	; 8000d80 <mtofTableLookup+0x6c>
	int tempIndexI = (int)tempIndexF;
	tempIndexF = tempIndexF -tempIndexI;
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000d32:	4a14      	ldr	r2, [pc, #80]	; (8000d84 <mtofTableLookup+0x70>)
	float tempIndexF = ((LEAF_clip(-163.0f, tempMIDI, 163.0f) * 100.0f) + 16384.0f);
 8000d34:	eee0 7a26 	vfma.f32	s15, s0, s13
	int tempIndexI = (int)tempIndexF;
 8000d38:	eefd 6ae7 	vcvt.s32.f32	s13, s15
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000d3c:	ee37 7a67 	vsub.f32	s14, s14, s15
	int tempIndexI = (int)tempIndexF;
 8000d40:	ee16 3a90 	vmov	r3, s13
	tempIndexF = tempIndexF -tempIndexI;
 8000d44:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000d48:	1c59      	adds	r1, r3, #1
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000d4a:	f3c3 030e 	ubfx	r3, r3, #0, #15
	tempIndexF = tempIndexF -tempIndexI;
 8000d4e:	ee37 0ae6 	vsub.f32	s0, s15, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000d52:	f3c1 010e 	ubfx	r1, r1, #0, #15
	float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8000d56:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000d5a:	ee37 7a26 	vadd.f32	s14, s14, s13
	float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8000d5e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	return ((freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF));
 8000d62:	edd3 7a00 	vldr	s15, [r3]
 8000d66:	edd2 6a00 	vldr	s13, [r2]
 8000d6a:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 8000d6e:	eea7 0a27 	vfma.f32	s0, s14, s15
 8000d72:	bd08      	pop	{r3, pc}
 8000d74:	43230000 	.word	0x43230000
 8000d78:	c3230000 	.word	0xc3230000
 8000d7c:	42c80000 	.word	0x42c80000
 8000d80:	46800000 	.word	0x46800000
 8000d84:	30022000 	.word	0x30022000

08000d88 <audioInit>:


void audioInit()
{
 8000d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000d8c:	4da3      	ldr	r5, [pc, #652]	; (800101c <audioInit+0x294>)
 8000d8e:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000d92:	ed9f 0aa3 	vldr	s0, [pc, #652]	; 8001020 <audioInit+0x298>
 8000d96:	4628      	mov	r0, r5
 8000d98:	49a2      	ldr	r1, [pc, #648]	; (8001024 <audioInit+0x29c>)
 8000d9a:	4ba3      	ldr	r3, [pc, #652]	; (8001028 <audioInit+0x2a0>)
 8000d9c:	4ca3      	ldr	r4, [pc, #652]	; (800102c <audioInit+0x2a4>)
{
 8000d9e:	ed2d 8b04 	vpush	{d8-d9}
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000da2:	f017 fd8f 	bl	80188c4 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000da6:	462b      	mov	r3, r5
 8000da8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000dac:	49a0      	ldr	r1, [pc, #640]	; (8001030 <audioInit+0x2a8>)
 8000dae:	48a1      	ldr	r0, [pc, #644]	; (8001034 <audioInit+0x2ac>)
 8000db0:	f013 fcda 	bl	8014768 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000db4:	462b      	mov	r3, r5
 8000db6:	f04f 72f0 	mov.w	r2, #31457280	; 0x1e00000
 8000dba:	499f      	ldr	r1, [pc, #636]	; (8001038 <audioInit+0x2b0>)
 8000dbc:	489f      	ldr	r0, [pc, #636]	; (800103c <audioInit+0x2b4>)
 8000dbe:	f013 fcd3 	bl	8014768 <tMempool_init>

	leaf.clearOnAllocation = 1;
 8000dc2:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000dc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dc8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000dcc:	eddf 1a9c 	vldr	s3, [pc, #624]	; 8001040 <audioInit+0x2b8>
 8000dd0:	eddf 0a9c 	vldr	s1, [pc, #624]	; 8001044 <audioInit+0x2bc>
 8000dd4:	ed9f 0a9c 	vldr	s0, [pc, #624]	; 8001048 <audioInit+0x2c0>
 8000dd8:	489c      	ldr	r0, [pc, #624]	; (800104c <audioInit+0x2c4>)
	leaf.clearOnAllocation = 1;
 8000dda:	616b      	str	r3, [r5, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8000ddc:	f013 f928 	bl	8014030 <LEAF_generate_exp>
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;

	for (int i = 0; i < 12; i++)
	{
		previousStringInputs[i]	= 0;
 8000de0:	4b9b      	ldr	r3, [pc, #620]	; (8001050 <audioInit+0x2c8>)
 8000de2:	2200      	movs	r2, #0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000de4:	499b      	ldr	r1, [pc, #620]	; (8001054 <audioInit+0x2cc>)
 8000de6:	f504 6580 	add.w	r5, r4, #1024	; 0x400
		previousStringInputs[i]	= 0;
 8000dea:	801a      	strh	r2, [r3, #0]



	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000dec:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8001058 <audioInit+0x2d0>
		previousStringInputs[i]	= 0;
 8000df0:	805a      	strh	r2, [r3, #2]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000df2:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 800105c <audioInit+0x2d4>
		previousStringInputs[i]	= 0;
 8000df6:	809a      	strh	r2, [r3, #4]
 8000df8:	80da      	strh	r2, [r3, #6]
 8000dfa:	811a      	strh	r2, [r3, #8]
 8000dfc:	815a      	strh	r2, [r3, #10]
 8000dfe:	819a      	strh	r2, [r3, #12]
 8000e00:	81da      	strh	r2, [r3, #14]
 8000e02:	821a      	strh	r2, [r3, #16]
 8000e04:	825a      	strh	r2, [r3, #18]
 8000e06:	829a      	strh	r2, [r3, #20]
 8000e08:	82da      	strh	r2, [r3, #22]
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000e0a:	4b95      	ldr	r3, [pc, #596]	; (8001060 <audioInit+0x2d8>)
 8000e0c:	600b      	str	r3, [r1, #0]
		randomFactors[i] = (randomNumber() * 0.4f) + 0.8f;
 8000e0e:	f01a f8f7 	bl	801b000 <__randomNumber_veneer>
 8000e12:	eef0 7a48 	vmov.f32	s15, s16
 8000e16:	eee0 7a28 	vfma.f32	s15, s0, s17
 8000e1a:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
 8000e1e:	42ac      	cmp	r4, r5
 8000e20:	d1f5      	bne.n	8000e0e <audioInit+0x86>
	}
	LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
 8000e22:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8000e26:	ed9f 0a8f 	vldr	s0, [pc, #572]	; 8001064 <audioInit+0x2dc>
 8000e2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e2e:	488e      	ldr	r0, [pc, #568]	; (8001068 <audioInit+0x2e0>)
 8000e30:	f013 f968 	bl	8014104 <LEAF_generate_atodb>
	LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 50.0f);
 8000e34:	eddf 0a8d 	vldr	s1, [pc, #564]	; 800106c <audioInit+0x2e4>
 8000e38:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 8001070 <audioInit+0x2e8>
 8000e3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e40:	488c      	ldr	r0, [pc, #560]	; (8001074 <audioInit+0x2ec>)
 8000e42:	f013 f983 	bl	801414c <LEAF_generate_dbtoa>

	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 8000e46:	4b8c      	ldr	r3, [pc, #560]	; (8001078 <audioInit+0x2f0>)
 8000e48:	498c      	ldr	r1, [pc, #560]	; (800107c <audioInit+0x2f4>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000e4a:	4a8d      	ldr	r2, [pc, #564]	; (8001080 <audioInit+0x2f8>)
	atodbTableScalar = ATODB_TABLE_SIZE_MINUS_ONE/(1.0f-0.00001f);
 8000e4c:	6019      	str	r1, [r3, #0]
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000e4e:	498d      	ldr	r1, [pc, #564]	; (8001084 <audioInit+0x2fc>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000e50:	488d      	ldr	r0, [pc, #564]	; (8001088 <audioInit+0x300>)
 8000e52:	4c8e      	ldr	r4, [pc, #568]	; (800108c <audioInit+0x304>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000e54:	4b8e      	ldr	r3, [pc, #568]	; (8001090 <audioInit+0x308>)
	dbtoaTableScalar = DBTOA_TABLE_SIZE_MINUS_ONE/(50.0f+90.0f);
 8000e56:	6011      	str	r1, [r2, #0]

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000e58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000e5c:	4a8d      	ldr	r2, [pc, #564]	; (8001094 <audioInit+0x30c>)
	atodbTableOffset = 0.00001f * atodbTableScalar;
 8000e5e:	6004      	str	r4, [r0, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000e60:	eddf 0a8d 	vldr	s1, [pc, #564]	; 8001098 <audioInit+0x310>
 8000e64:	ed9f 0a8d 	vldr	s0, [pc, #564]	; 800109c <audioInit+0x314>
 8000e68:	488d      	ldr	r0, [pc, #564]	; (80010a0 <audioInit+0x318>)
	dbtoaTableOffset = -90.0f * dbtoaTableScalar;
 8000e6a:	601a      	str	r2, [r3, #0]
	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000e6c:	f013 f998 	bl	80141a0 <LEAF_generate_mtof>





	if (numStrings == 6)
 8000e70:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <audioInit+0x31c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b06      	cmp	r3, #6
 8000e76:	f000 80c4 	beq.w	8001002 <audioInit+0x27a>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 8000e7a:	2b0a      	cmp	r3, #10
 8000e7c:	f000 80b6 	beq.w	8000fec <audioInit+0x264>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000e80:	4a89      	ldr	r2, [pc, #548]	; (80010a8 <audioInit+0x320>)
 8000e82:	2302      	movs	r3, #2
 8000e84:	4989      	ldr	r1, [pc, #548]	; (80010ac <audioInit+0x324>)
 8000e86:	7812      	ldrb	r2, [r2, #0]
 8000e88:	0052      	lsls	r2, r2, #1
 8000e8a:	600a      	str	r2, [r1, #0]


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000e8c:	4e63      	ldr	r6, [pc, #396]	; (800101c <audioInit+0x294>)
 8000e8e:	eddf 8a88 	vldr	s17, [pc, #544]	; 80010b0 <audioInit+0x328>
 8000e92:	4c88      	ldr	r4, [pc, #544]	; (80010b4 <audioInit+0x32c>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000e94:	4631      	mov	r1, r6
		numStringsThisBoard = 1;
 8000e96:	4a88      	ldr	r2, [pc, #544]	; (80010b8 <audioInit+0x330>)
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000e98:	eef0 0a68 	vmov.f32	s1, s17
 8000e9c:	ed9f 0a69 	vldr	s0, [pc, #420]	; 8001044 <audioInit+0x2bc>
 8000ea0:	f104 0530 	add.w	r5, r4, #48	; 0x30
 8000ea4:	4885      	ldr	r0, [pc, #532]	; (80010bc <audioInit+0x334>)
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000ea6:	eeb0 8a40 	vmov.f32	s16, s0
		numStringsThisBoard = 1;
 8000eaa:	7013      	strb	r3, [r2, #0]
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000eac:	f010 f908 	bl	80110c0 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000eb0:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 8000eb2:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000eb4:	eef0 0a68 	vmov.f32	s1, s17
 8000eb8:	4631      	mov	r1, r6
 8000eba:	eeb0 0a48 	vmov.f32	s0, s16
 8000ebe:	f010 f8ff 	bl	80110c0 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 8000ec2:	42ac      	cmp	r4, r5
 8000ec4:	d1f4      	bne.n	8000eb0 <audioInit+0x128>
 8000ec6:	4c7e      	ldr	r4, [pc, #504]	; (80010c0 <audioInit+0x338>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000ec8:	4e54      	ldr	r6, [pc, #336]	; (800101c <audioInit+0x294>)
 8000eca:	eddf 8a79 	vldr	s17, [pc, #484]	; 80010b0 <audioInit+0x328>
 8000ece:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ed2:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 8001044 <audioInit+0x2bc>
 8000ed6:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000ed8:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000eda:	eef0 0a68 	vmov.f32	s1, s17
 8000ede:	4631      	mov	r1, r6
 8000ee0:	eeb0 0a48 	vmov.f32	s0, s16
 8000ee4:	f010 f8ec 	bl	80110c0 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000ee8:	42ac      	cmp	r4, r5
 8000eea:	d1f4      	bne.n	8000ed6 <audioInit+0x14e>
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000eec:	494b      	ldr	r1, [pc, #300]	; (800101c <audioInit+0x294>)
 8000eee:	eddf 0a75 	vldr	s1, [pc, #468]	; 80010c4 <audioInit+0x33c>
 8000ef2:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001044 <audioInit+0x2bc>
 8000ef6:	4874      	ldr	r0, [pc, #464]	; (80010c8 <audioInit+0x340>)
 8000ef8:	f010 f8e2 	bl	80110c0 <tExpSmooth_init>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000efc:	4947      	ldr	r1, [pc, #284]	; (800101c <audioInit+0x294>)
 8000efe:	eddf 0a73 	vldr	s1, [pc, #460]	; 80010cc <audioInit+0x344>
 8000f02:	ed9f 0a73 	vldr	s0, [pc, #460]	; 80010d0 <audioInit+0x348>
 8000f06:	4873      	ldr	r0, [pc, #460]	; (80010d4 <audioInit+0x34c>)
 8000f08:	f00e ffcc 	bl	800fea4 <tEnvelopeFollower_init>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000f0c:	4943      	ldr	r1, [pc, #268]	; (800101c <audioInit+0x294>)
 8000f0e:	4c72      	ldr	r4, [pc, #456]	; (80010d8 <audioInit+0x350>)

	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{


		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000f10:	460d      	mov	r5, r1
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000f12:	eddf 0a6c 	vldr	s1, [pc, #432]	; 80010c4 <audioInit+0x33c>
 8000f16:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 8001044 <audioInit+0x2bc>
 8000f1a:	f104 0808 	add.w	r8, r4, #8
 8000f1e:	486f      	ldr	r0, [pc, #444]	; (80010dc <audioInit+0x354>)
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000f20:	ed9f 9a6f 	vldr	s18, [pc, #444]	; 80010e0 <audioInit+0x358>
		tExpSmooth_init(&barSlideSmoother[i],0.000f, 0.01f, &leaf);
 8000f24:	f010 f8cc 	bl	80110c0 <tExpSmooth_init>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000f28:	eddf 8a46 	vldr	s17, [pc, #280]	; 8001044 <audioInit+0x2bc>
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000f2c:	4629      	mov	r1, r5
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000f2e:	ed9f 8a4f 	vldr	s16, [pc, #316]	; 800106c <audioInit+0x2e4>


		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000f32:	4f6c      	ldr	r7, [pc, #432]	; (80010e4 <audioInit+0x35c>)
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000f34:	4e6c      	ldr	r6, [pc, #432]	; (80010e8 <audioInit+0x360>)
		tEnvelopeFollower_init(&barNoiseSmoother[i],0.0001f, 0.9993f, &leaf);
 8000f36:	eddf 0a65 	vldr	s1, [pc, #404]	; 80010cc <audioInit+0x344>
 8000f3a:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80010d0 <audioInit+0x348>
 8000f3e:	486b      	ldr	r0, [pc, #428]	; (80010ec <audioInit+0x364>)
 8000f40:	f00e ffb0 	bl	800fea4 <tEnvelopeFollower_init>
	audioInitAdditive();
 8000f44:	f01a f848 	bl	801afd8 <__audioInitAdditive_veneer>
	audioInitString1();
 8000f48:	f01a f862 	bl	801b010 <__audioInitString1_veneer>
	audioInitVocal();
 8000f4c:	f01a f84c 	bl	801afe8 <__audioInitVocal_veneer>
	audioInitSynth();
 8000f50:	f002 fcce 	bl	80038f0 <audioInitSynth>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8000f54:	eef0 1a49 	vmov.f32	s3, s18
 8000f58:	462b      	mov	r3, r5
 8000f5a:	eeb0 1a68 	vmov.f32	s2, s17
 8000f5e:	4620      	mov	r0, r4
 8000f60:	eef0 0a48 	vmov.f32	s1, s16
 8000f64:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8001044 <audioInit+0x2bc>
 8000f68:	4938      	ldr	r1, [pc, #224]	; (800104c <audioInit+0x2c4>)
 8000f6a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6e:	f00f fd93 	bl	8010a98 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 8000f72:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8000f76:	462a      	mov	r2, r5
 8000f78:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 80010f0 <audioInit+0x368>
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	4638      	mov	r0, r7
 8000f80:	f011 f892 	bl	80120a8 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8000f84:	462a      	mov	r2, r5
 8000f86:	eddf 0a5b 	vldr	s1, [pc, #364]	; 80010f4 <audioInit+0x36c>
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 80010f8 <audioInit+0x370>
 8000f90:	4630      	mov	r0, r6
 8000f92:	f011 f889 	bl	80120a8 <tVZFilter_init>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
 8000f96:	4630      	mov	r0, r6
 8000f98:	ed9f 0a58 	vldr	s0, [pc, #352]	; 80010fc <audioInit+0x374>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000f9c:	3404      	adds	r4, #4
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
 8000f9e:	f011 f887 	bl	80120b0 <tVZFilter_setFreq>


		tVZFilter_setFreq(&noiseFilt, faster_mtof(0.9f * 128.0f));
 8000fa2:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001100 <audioInit+0x378>
 8000fa6:	f013 fa15 	bl	80143d4 <faster_mtof>
 8000faa:	4638      	mov	r0, r7
 8000fac:	f011 f880 	bl	80120b0 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(0.8f * 128.0f));
 8000fb0:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8001104 <audioInit+0x37c>
 8000fb4:	f013 fa0e 	bl	80143d4 <faster_mtof>
 8000fb8:	4630      	mov	r0, r6
 8000fba:	f011 f879 	bl	80120b0 <tVZFilter_setFreq>

		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4851      	ldr	r0, [pc, #324]	; (8001108 <audioInit+0x380>)
 8000fc4:	f013 ffbe 	bl	8014f44 <tNoise_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000fc8:	45a0      	cmp	r8, r4
 8000fca:	d1c3      	bne.n	8000f54 <audioInit+0x1cc>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{

			audioOutBuffer[ i] = (int32_t)(0.0f * TWO_TO_23);
 8000fcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	484e      	ldr	r0, [pc, #312]	; (800110c <audioInit+0x384>)
 8000fd4:	f017 fd06 	bl	80189e4 <memset>
	}

	audioFrameFunction = audioFrameSynth;
 8000fd8:	4b4d      	ldr	r3, [pc, #308]	; (8001110 <audioInit+0x388>)
 8000fda:	4a4e      	ldr	r2, [pc, #312]	; (8001114 <audioInit+0x38c>)
	HAL_Delay(1);
 8000fdc:	2001      	movs	r0, #1
	audioFrameFunction = audioFrameSynth;
 8000fde:	601a      	str	r2, [r3, #0]

}
 8000fe0:	ecbd 8b04 	vpop	{d8-d9}
 8000fe4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_Delay(1);
 8000fe8:	f003 ba46 	b.w	8004478 <HAL_Delay>
		if (boardNumber == 0)
 8000fec:	4b2e      	ldr	r3, [pc, #184]	; (80010a8 <audioInit+0x320>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	b16b      	cbz	r3, 800100e <audioInit+0x286>
		else if (boardNumber == 1)
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d00f      	beq.n	8001016 <audioInit+0x28e>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 8000ff6:	1e5a      	subs	r2, r3, #1
 8000ff8:	492c      	ldr	r1, [pc, #176]	; (80010ac <audioInit+0x324>)
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	0052      	lsls	r2, r2, #1
 8000ffe:	600a      	str	r2, [r1, #0]
			numStringsThisBoard = 2;
 8001000:	e744      	b.n	8000e8c <audioInit+0x104>
		firstString = boardNumber;
 8001002:	4929      	ldr	r1, [pc, #164]	; (80010a8 <audioInit+0x320>)
 8001004:	2301      	movs	r3, #1
 8001006:	4a29      	ldr	r2, [pc, #164]	; (80010ac <audioInit+0x324>)
 8001008:	7809      	ldrb	r1, [r1, #0]
 800100a:	6011      	str	r1, [r2, #0]
		numStringsThisBoard = 1;
 800100c:	e73e      	b.n	8000e8c <audioInit+0x104>
			firstString = 0;
 800100e:	4a27      	ldr	r2, [pc, #156]	; (80010ac <audioInit+0x324>)
 8001010:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	e73a      	b.n	8000e8c <audioInit+0x104>
			firstString = 1;
 8001016:	4a25      	ldr	r2, [pc, #148]	; (80010ac <audioInit+0x324>)
 8001018:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 1;
 800101a:	e737      	b.n	8000e8c <audioInit+0x104>
 800101c:	20004fc4 	.word	0x20004fc4
 8001020:	473b8000 	.word	0x473b8000
 8001024:	200054ac 	.word	0x200054ac
 8001028:	00001c41 	.word	0x00001c41
 800102c:	200050a8 	.word	0x200050a8
 8001030:	24040000 	.word	0x24040000
 8001034:	20005018 	.word	0x20005018
 8001038:	60000000 	.word	0x60000000
 800103c:	20004fc0 	.word	0x20004fc0
 8001040:	ba51b717 	.word	0xba51b717
 8001044:	00000000 	.word	0x00000000
 8001048:	3a83126f 	.word	0x3a83126f
 800104c:	20000f30 	.word	0x20000f30
 8001050:	20005090 	.word	0x20005090
 8001054:	20004f30 	.word	0x20004f30
 8001058:	3ecccccd 	.word	0x3ecccccd
 800105c:	3f4ccccd 	.word	0x3f4ccccd
 8001060:	457ff000 	.word	0x457ff000
 8001064:	3727c5ac 	.word	0x3727c5ac
 8001068:	30012000 	.word	0x30012000
 800106c:	42480000 	.word	0x42480000
 8001070:	c2b40000 	.word	0xc2b40000
 8001074:	30002000 	.word	0x30002000
 8001078:	20000f04 	.word	0x20000f04
 800107c:	467ffca8 	.word	0x467ffca8
 8001080:	20000f2c 	.word	0x20000f2c
 8001084:	42ea0af9 	.word	0x42ea0af9
 8001088:	20000f00 	.word	0x20000f00
 800108c:	3e27c37b 	.word	0x3e27c37b
 8001090:	20000f28 	.word	0x20000f28
 8001094:	c6248fb7 	.word	0xc6248fb7
 8001098:	4323d666 	.word	0x4323d666
 800109c:	c323d666 	.word	0xc323d666
 80010a0:	30022000 	.word	0x30022000
 80010a4:	200004b0 	.word	0x200004b0
 80010a8:	20014025 	.word	0x20014025
 80010ac:	20004f44 	.word	0x20004f44
 80010b0:	3a03126f 	.word	0x3a03126f
 80010b4:	20004f90 	.word	0x20004f90
 80010b8:	200004b1 	.word	0x200004b1
 80010bc:	20013f8c 	.word	0x20013f8c
 80010c0:	2000505c 	.word	0x2000505c
 80010c4:	3c23d70a 	.word	0x3c23d70a
 80010c8:	20000f1c 	.word	0x20000f1c
 80010cc:	3f7fd220 	.word	0x3f7fd220
 80010d0:	38d1b717 	.word	0x38d1b717
 80010d4:	20000f14 	.word	0x20000f14
 80010d8:	20004f3c 	.word	0x20004f3c
 80010dc:	20000f20 	.word	0x20000f20
 80010e0:	43480000 	.word	0x43480000
 80010e4:	20005024 	.word	0x20005024
 80010e8:	20005028 	.word	0x20005028
 80010ec:	20000f18 	.word	0x20000f18
 80010f0:	44bb8000 	.word	0x44bb8000
 80010f4:	3f666666 	.word	0x3f666666
 80010f8:	44480000 	.word	0x44480000
 80010fc:	45504000 	.word	0x45504000
 8001100:	42e66666 	.word	0x42e66666
 8001104:	42cccccd 	.word	0x42cccccd
 8001108:	2000501c 	.word	0x2000501c
 800110c:	30000000 	.word	0x30000000
 8001110:	20000f08 	.word	0x20000f08
 8001114:	00008fe1 	.word	0x00008fe1

08001118 <audioStart>:

void audioStart(SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8001118:	b510      	push	{r4, lr}
 800111a:	4604      	mov	r4, r0
	HAL_Delay(1);
 800111c:	2001      	movs	r0, #1
 800111e:	f003 f9ab 	bl	8004478 <HAL_Delay>
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8001122:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001126:	4903      	ldr	r1, [pc, #12]	; (8001134 <audioStart+0x1c>)
 8001128:	4620      	mov	r0, r4
 800112a:	f008 fbe7 	bl	80098fc <HAL_SAI_Transmit_DMA>
 800112e:	4b02      	ldr	r3, [pc, #8]	; (8001138 <audioStart+0x20>)
 8001130:	7018      	strb	r0, [r3, #0]
	//receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
}
 8001132:	bd10      	pop	{r4, pc}
 8001134:	30000000 	.word	0x30000000
 8001138:	20013f7c 	.word	0x20013f7c

0800113c <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800113c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001140:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8001142:	b082      	sub	sp, #8
 8001144:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001146:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800114a:	483b      	ldr	r0, [pc, #236]	; (8001238 <AudioCodec_init+0xfc>)
 800114c:	f005 f956 	bl	80063fc <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8001150:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8001152:	4c3a      	ldr	r4, [pc, #232]	; (800123c <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8001154:	f003 f990 	bl	8004478 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001158:	4f39      	ldr	r7, [pc, #228]	; (8001240 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 800115a:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800115e:	4e39      	ldr	r6, [pc, #228]	; (8001244 <AudioCodec_init+0x108>)
 8001160:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8001162:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001164:	2120      	movs	r1, #32
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4628      	mov	r0, r5
 800116a:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 800124c <AudioCodec_init+0x110>
 800116e:	9300      	str	r3, [sp, #0]
 8001170:	8833      	ldrh	r3, [r6, #0]
 8001172:	f005 fa63 	bl	800663c <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800117a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800117e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8001180:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001184:	2120      	movs	r1, #32
 8001186:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8001188:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800118a:	8833      	ldrh	r3, [r6, #0]
 800118c:	f005 fa56 	bl	800663c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001194:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001198:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 800119a:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800119c:	2120      	movs	r1, #32
 800119e:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 80011a0:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011a2:	8833      	ldrh	r3, [r6, #0]
 80011a4:	f005 fa4a 	bl	800663c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011ac:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011b0:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 80011b2:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011b6:	2120      	movs	r1, #32
 80011b8:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 80011ba:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011bc:	8833      	ldrh	r3, [r6, #0]
 80011be:	f005 fa3d 	bl	800663c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011c6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011ca:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 80011cc:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011d0:	2120      	movs	r1, #32
 80011d2:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 80011d4:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011d6:	8833      	ldrh	r3, [r6, #0]
 80011d8:	f005 fa30 	bl	800663c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011e0:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011e4:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 80011e6:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011ea:	2120      	movs	r1, #32
 80011ec:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 80011ee:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011f0:	8833      	ldrh	r3, [r6, #0]
 80011f2:	f005 fa23 	bl	800663c <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011fa:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80011fe:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8001200:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001204:	2120      	movs	r1, #32
 8001206:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8001208:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800120a:	8833      	ldrh	r3, [r6, #0]
 800120c:	f005 fa16 	bl	800663c <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001210:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8001212:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001216:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001218:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800121c:	4628      	mov	r0, r5
 800121e:	9200      	str	r2, [sp, #0]
 8001220:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8001222:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8001224:	2120      	movs	r1, #32
 8001226:	f005 fa09 	bl	800663c <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 800122a:	4b07      	ldr	r3, [pc, #28]	; (8001248 <AudioCodec_init+0x10c>)
 800122c:	2201      	movs	r2, #1
 800122e:	601a      	str	r2, [r3, #0]

}
 8001230:	b002      	add	sp, #8
 8001232:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001236:	bf00      	nop
 8001238:	58020800 	.word	0x58020800
 800123c:	20013f94 	.word	0x20013f94
 8001240:	2000071c 	.word	0x2000071c
 8001244:	20000720 	.word	0x20000720
 8001248:	20000f24 	.word	0x20000f24
 800124c:	20013f96 	.word	0x20013f96

08001250 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001250:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	210a      	movs	r1, #10
 8001256:	200c      	movs	r0, #12
{
 8001258:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 800125a:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 800125e:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001260:	f044 0401 	orr.w	r4, r4, #1
 8001264:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8001268:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	9301      	str	r3, [sp, #4]
 8001272:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 8001274:	f003 f934 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001278:	200c      	movs	r0, #12
 800127a:	f003 f96f 	bl	800455c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 800127e:	2200      	movs	r2, #0
 8001280:	2109      	movs	r1, #9
 8001282:	200d      	movs	r0, #13
 8001284:	f003 f92c 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001288:	200d      	movs	r0, #13
 800128a:	f003 f967 	bl	800455c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 800128e:	2200      	movs	r2, #0
 8001290:	2108      	movs	r1, #8
 8001292:	200e      	movs	r0, #14
 8001294:	f003 f924 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001298:	200e      	movs	r0, #14
 800129a:	f003 f95f 	bl	800455c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 800129e:	2200      	movs	r2, #0
 80012a0:	2107      	movs	r1, #7
 80012a2:	200f      	movs	r0, #15
 80012a4:	f003 f91c 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80012a8:	200f      	movs	r0, #15
 80012aa:	f003 f957 	bl	800455c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2010      	movs	r0, #16
 80012b2:	4611      	mov	r1, r2
 80012b4:	f003 f914 	bl	80044e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012b8:	2010      	movs	r0, #16

}
 80012ba:	b002      	add	sp, #8
 80012bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80012c0:	f003 b94c 	b.w	800455c <HAL_NVIC_EnableIRQ>
 80012c4:	58024400 	.word	0x58024400

080012c8 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012c8:	481b      	ldr	r0, [pc, #108]	; (8001338 <MX_FMC_Init+0x70>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80012ca:	2300      	movs	r3, #0
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 6;
 80012cc:	2206      	movs	r2, #6
  SdramTiming.LoadToActiveDelay = 2;
 80012ce:	2102      	movs	r1, #2
{
 80012d0:	b510      	push	{r4, lr}
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80012d2:	6043      	str	r3, [r0, #4]
{
 80012d4:	b088      	sub	sp, #32
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80012d6:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80012d8:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.SelfRefreshTime = 4;
 80012da:	2304      	movs	r3, #4
  SdramTiming.RowCycleDelay = 6;
 80012dc:	9203      	str	r2, [sp, #12]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012de:	4c17      	ldr	r4, [pc, #92]	; (800133c <MX_FMC_Init+0x74>)
  SdramTiming.LoadToActiveDelay = 2;
 80012e0:	9100      	str	r1, [sp, #0]
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 80012e2:	9106      	str	r1, [sp, #24]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80012e4:	4669      	mov	r1, sp
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012e6:	6004      	str	r4, [r0, #0]
  SdramTiming.SelfRefreshTime = 4;
 80012e8:	e9cd 2301 	strd	r2, r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 2;
 80012ec:	2202      	movs	r2, #2
 80012ee:	2302      	movs	r3, #2
 80012f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 80012f4:	2201      	movs	r2, #1
 80012f6:	2308      	movs	r3, #8
 80012f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012fc:	2210      	movs	r2, #16
 80012fe:	2340      	movs	r3, #64	; 0x40
 8001300:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8001304:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001308:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800130c:	6203      	str	r3, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800130e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8001312:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001314:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001316:	f009 fbd3 	bl	800aac0 <HAL_SDRAM_Init>
 800131a:	b928      	cbnz	r0, 8001328 <MX_FMC_Init+0x60>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800131c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001320:	f003 f8c2 	bl	80044a8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001324:	b008      	add	sp, #32
 8001326:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8001328:	f001 ff40 	bl	80031ac <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 800132c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001330:	f003 f8ba 	bl	80044a8 <HAL_SetFMCMemorySwappingConfig>
}
 8001334:	b008      	add	sp, #32
 8001336:	bd10      	pop	{r4, pc}
 8001338:	20013f9c 	.word	0x20013f9c
 800133c:	52004140 	.word	0x52004140

08001340 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8001340:	4836      	ldr	r0, [pc, #216]	; (800141c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001342:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8001344:	b5d0      	push	{r4, r6, r7, lr}
 8001346:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8001348:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800134e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8001352:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8001354:	b109      	cbz	r1, 800135a <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001356:	b038      	add	sp, #224	; 0xe0
 8001358:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 800135a:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800135c:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 800135e:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001360:	a80a      	add	r0, sp, #40	; 0x28
 8001362:	f017 fb3f 	bl	80189e4 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001366:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800136a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800136c:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800136e:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001372:	f006 fdc5 	bl	8007f00 <HAL_RCCEx_PeriphCLKConfig>
 8001376:	2800      	cmp	r0, #0
 8001378:	d14c      	bne.n	8001414 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 800137a:	4b29      	ldr	r3, [pc, #164]	; (8001420 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800137c:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8001380:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001382:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8001384:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001388:	2600      	movs	r6, #0
 800138a:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 800138c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001390:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8001394:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001398:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 800139a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800139e:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80013a2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013a4:	a902      	add	r1, sp, #8
 80013a6:	481f      	ldr	r0, [pc, #124]	; (8001424 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80013a8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ae:	f004 fed5 	bl	800615c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80013b2:	2219      	movs	r2, #25
 80013b4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b6:	a902      	add	r1, sp, #8
 80013b8:	481b      	ldr	r0, [pc, #108]	; (8001428 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ba:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 80013bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013c0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c4:	f004 feca 	bl	800615c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80013c8:	f248 1237 	movw	r2, #33079	; 0x8137
 80013cc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013ce:	a902      	add	r1, sp, #8
 80013d0:	4816      	ldr	r0, [pc, #88]	; (800142c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80013d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013d8:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013dc:	f004 febe 	bl	800615c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013e0:	f64f 7283 	movw	r2, #65411	; 0xff83
 80013e4:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e6:	a902      	add	r1, sp, #8
 80013e8:	4811      	ldr	r0, [pc, #68]	; (8001430 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80013ea:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80013f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f4:	f004 feb2 	bl	800615c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013f8:	f24c 7203 	movw	r2, #50947	; 0xc703
 80013fc:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	a902      	add	r1, sp, #8
 8001400:	480c      	ldr	r0, [pc, #48]	; (8001434 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001402:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001404:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8001408:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f004 fea6 	bl	800615c <HAL_GPIO_Init>
}
 8001410:	b038      	add	sp, #224	; 0xe0
 8001412:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8001414:	f001 feca 	bl	80031ac <Error_Handler>
 8001418:	e7af      	b.n	800137a <HAL_SDRAM_MspInit+0x3a>
 800141a:	bf00      	nop
 800141c:	20013f98 	.word	0x20013f98
 8001420:	58024400 	.word	0x58024400
 8001424:	58021400 	.word	0x58021400
 8001428:	58020800 	.word	0x58020800
 800142c:	58021800 	.word	0x58021800
 8001430:	58021000 	.word	0x58021000
 8001434:	58020c00 	.word	0x58020c00

08001438 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8001438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143c:	4b79      	ldr	r3, [pc, #484]	; (8001624 <MX_GPIO_Init+0x1ec>)
{
 800143e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001442:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800163c <MX_GPIO_Init+0x204>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001446:	4f78      	ldr	r7, [pc, #480]	; (8001628 <MX_GPIO_Init+0x1f0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001448:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144c:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800144e:	4640      	mov	r0, r8

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001450:	4e76      	ldr	r6, [pc, #472]	; (800162c <MX_GPIO_Init+0x1f4>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001452:	2501      	movs	r5, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8001458:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800145c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001460:	f042 0210 	orr.w	r2, r2, #16
 8001464:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001468:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800146c:	f002 0210 	and.w	r2, r2, #16
 8001470:	9200      	str	r2, [sp, #0]
 8001472:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001474:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001478:	f042 0204 	orr.w	r2, r2, #4
 800147c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001480:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001484:	f002 0204 	and.w	r2, r2, #4
 8001488:	9201      	str	r2, [sp, #4]
 800148a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800148c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001490:	f042 0220 	orr.w	r2, r2, #32
 8001494:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001498:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800149c:	f002 0220 	and.w	r2, r2, #32
 80014a0:	9202      	str	r2, [sp, #8]
 80014a2:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014a4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014a8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014ac:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014b4:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80014b8:	9203      	str	r2, [sp, #12]
 80014ba:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014bc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014c0:	f042 0201 	orr.w	r2, r2, #1
 80014c4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014c8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014cc:	f002 0201 	and.w	r2, r2, #1
 80014d0:	9204      	str	r2, [sp, #16]
 80014d2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014d8:	f042 0202 	orr.w	r2, r2, #2
 80014dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014e4:	f002 0202 	and.w	r2, r2, #2
 80014e8:	9205      	str	r2, [sp, #20]
 80014ea:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80014f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80014fc:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8001500:	9206      	str	r2, [sp, #24]
 8001502:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001504:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001508:	f042 0208 	orr.w	r2, r2, #8
 800150c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001510:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001516:	f003 0308 	and.w	r3, r3, #8
 800151a:	9307      	str	r3, [sp, #28]
 800151c:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800151e:	f004 ff6d 	bl	80063fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001522:	4622      	mov	r2, r4
 8001524:	4638      	mov	r0, r7
 8001526:	2102      	movs	r1, #2
 8001528:	f004 ff68 	bl	80063fc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800152c:	4622      	mov	r2, r4
 800152e:	4630      	mov	r0, r6
 8001530:	2110      	movs	r1, #16
 8001532:	f004 ff63 	bl	80063fc <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001536:	f242 0220 	movw	r2, #8224	; 0x2020
 800153a:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	a908      	add	r1, sp, #32
 800153e:	4640      	mov	r0, r8
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001540:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 8001542:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001546:	f004 fe09 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800154a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	a908      	add	r1, sp, #32
 8001550:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001552:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f004 fdff 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800155e:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8001562:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001564:	4640      	mov	r0, r8
 8001566:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 800156a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f004 fdf5 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001576:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001578:	a908      	add	r1, sp, #32
 800157a:	482d      	ldr	r0, [pc, #180]	; (8001630 <MX_GPIO_Init+0x1f8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800157e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001582:	f004 fdeb 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001586:	2201      	movs	r2, #1
 8001588:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800158a:	a908      	add	r1, sp, #32
 800158c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800158e:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001590:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001594:	f004 fde2 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001598:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159a:	a908      	add	r1, sp, #32
 800159c:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800159e:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	e9cd 5409 	strd	r5, r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a6:	f004 fdd9 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80015aa:	f649 720c 	movw	r2, #40716	; 0x9f0c
 80015ae:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b0:	4638      	mov	r0, r7
 80015b2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 80015b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015ba:	f004 fdcf 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB12 PB13
                           PB14 PB15 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80015be:	f24f 32e5 	movw	r2, #62437	; 0xf3e5
 80015c2:	2303      	movs	r3, #3
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015c4:	a908      	add	r1, sp, #32
 80015c6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13
 80015ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ce:	f004 fdc5 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015d2:	2202      	movs	r2, #2
 80015d4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d6:	a908      	add	r1, sp, #32
 80015d8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015da:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80015dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f004 fdbc 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80015e4:	f643 02f8 	movw	r2, #14584	; 0x38f8
 80015e8:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ea:	a908      	add	r1, sp, #32
 80015ec:	4811      	ldr	r0, [pc, #68]	; (8001634 <MX_GPIO_Init+0x1fc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 80015f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f4:	f004 fdb2 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 80015f8:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 80015fc:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	a908      	add	r1, sp, #32
 8001600:	480d      	ldr	r0, [pc, #52]	; (8001638 <MX_GPIO_Init+0x200>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8001604:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001608:	f004 fda8 	bl	800615c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800160c:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160e:	a908      	add	r1, sp, #32
 8001610:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001612:	e9cd 3508 	strd	r3, r5, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001616:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161a:	f004 fd9f 	bl	800615c <HAL_GPIO_Init>

}
 800161e:	b00e      	add	sp, #56	; 0x38
 8001620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001624:	58024400 	.word	0x58024400
 8001628:	58020000 	.word	0x58020000
 800162c:	58020400 	.word	0x58020400
 8001630:	58021400 	.word	0x58021400
 8001634:	58020c00 	.word	0x58020c00
 8001638:	58021800 	.word	0x58021800
 800163c:	58020800 	.word	0x58020800

08001640 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8001640:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001642:	4817      	ldr	r0, [pc, #92]	; (80016a0 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001644:	2300      	movs	r3, #0
 8001646:	4917      	ldr	r1, [pc, #92]	; (80016a4 <MX_I2C2_Init+0x64>)
 8001648:	2401      	movs	r4, #1
 800164a:	4a17      	ldr	r2, [pc, #92]	; (80016a8 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800164c:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164e:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 8001652:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001656:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800165a:	f004 ff91 	bl	8006580 <HAL_I2C_Init>
 800165e:	b950      	cbnz	r0, 8001676 <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001660:	2100      	movs	r1, #0
 8001662:	480f      	ldr	r0, [pc, #60]	; (80016a0 <MX_I2C2_Init+0x60>)
 8001664:	f005 fcfe 	bl	8007064 <HAL_I2CEx_ConfigAnalogFilter>
 8001668:	b968      	cbnz	r0, 8001686 <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800166a:	2100      	movs	r1, #0
 800166c:	480c      	ldr	r0, [pc, #48]	; (80016a0 <MX_I2C2_Init+0x60>)
 800166e:	f005 fd2d 	bl	80070cc <HAL_I2CEx_ConfigDigitalFilter>
 8001672:	b980      	cbnz	r0, 8001696 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001674:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001676:	f001 fd99 	bl	80031ac <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800167a:	2100      	movs	r1, #0
 800167c:	4808      	ldr	r0, [pc, #32]	; (80016a0 <MX_I2C2_Init+0x60>)
 800167e:	f005 fcf1 	bl	8007064 <HAL_I2CEx_ConfigAnalogFilter>
 8001682:	2800      	cmp	r0, #0
 8001684:	d0f1      	beq.n	800166a <MX_I2C2_Init+0x2a>
    Error_Handler();
 8001686:	f001 fd91 	bl	80031ac <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4804      	ldr	r0, [pc, #16]	; (80016a0 <MX_I2C2_Init+0x60>)
 800168e:	f005 fd1d 	bl	80070cc <HAL_I2CEx_ConfigDigitalFilter>
 8001692:	2800      	cmp	r0, #0
 8001694:	d0ee      	beq.n	8001674 <MX_I2C2_Init+0x34>
}
 8001696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800169a:	f001 bd87 	b.w	80031ac <Error_Handler>
 800169e:	bf00      	nop
 80016a0:	20013fd0 	.word	0x20013fd0
 80016a4:	40005800 	.word	0x40005800
 80016a8:	00b03fdb 	.word	0x00b03fdb
 80016ac:	00000000 	.word	0x00000000

080016b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b0:	b510      	push	{r4, lr}
 80016b2:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	2100      	movs	r1, #0
{
 80016b6:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016b8:	22c0      	movs	r2, #192	; 0xc0
 80016ba:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016bc:	9106      	str	r1, [sp, #24]
 80016be:	e9cd 1102 	strd	r1, r1, [sp, #8]
 80016c2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c6:	f017 f98d 	bl	80189e4 <memset>
  if(i2cHandle->Instance==I2C2)
 80016ca:	4b27      	ldr	r3, [pc, #156]	; (8001768 <HAL_I2C_MspInit+0xb8>)
 80016cc:	6822      	ldr	r2, [r4, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80016d2:	b038      	add	sp, #224	; 0xe0
 80016d4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016d6:	2208      	movs	r2, #8
 80016d8:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016da:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80016dc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016e0:	f006 fc0e 	bl	8007f00 <HAL_RCCEx_PeriphCLKConfig>
 80016e4:	2800      	cmp	r0, #0
 80016e6:	d138      	bne.n	800175a <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016e8:	4c20      	ldr	r4, [pc, #128]	; (800176c <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016ea:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ec:	a902      	add	r1, sp, #8
 80016ee:	4820      	ldr	r0, [pc, #128]	; (8001770 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 80016fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001700:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001702:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001704:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001708:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8001760 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800170c:	9300      	str	r3, [sp, #0]
 800170e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001710:	2303      	movs	r3, #3
 8001712:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001716:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f004 fd1f 	bl	800615c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800171e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001726:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800172a:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800172c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8001730:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8001734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001738:	9301      	str	r3, [sp, #4]
 800173a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800173c:	f002 fed0 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001740:	2021      	movs	r0, #33	; 0x21
 8001742:	f002 ff0b 	bl	800455c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 8001746:	2200      	movs	r2, #0
 8001748:	2101      	movs	r1, #1
 800174a:	2022      	movs	r0, #34	; 0x22
 800174c:	f002 fec8 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001750:	2022      	movs	r0, #34	; 0x22
 8001752:	f002 ff03 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 8001756:	b038      	add	sp, #224	; 0xe0
 8001758:	bd10      	pop	{r4, pc}
      Error_Handler();
 800175a:	f001 fd27 	bl	80031ac <Error_Handler>
 800175e:	e7c3      	b.n	80016e8 <HAL_I2C_MspInit+0x38>
 8001760:	00000c00 	.word	0x00000c00
 8001764:	00000012 	.word	0x00000012
 8001768:	40005800 	.word	0x40005800
 800176c:	58024400 	.word	0x58024400
 8001770:	58020400 	.word	0x58020400

08001774 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001774:	b530      	push	{r4, r5, lr}
 8001776:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001778:	224c      	movs	r2, #76	; 0x4c
 800177a:	2100      	movs	r1, #0
 800177c:	a80c      	add	r0, sp, #48	; 0x30
 800177e:	f017 f931 	bl	80189e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001782:	2220      	movs	r2, #32
 8001784:	2100      	movs	r1, #0
 8001786:	a804      	add	r0, sp, #16
 8001788:	f017 f92c 	bl	80189e4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800178c:	2002      	movs	r0, #2
 800178e:	f005 fcc9 	bl	8007124 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001792:	4b34      	ldr	r3, [pc, #208]	; (8001864 <SystemClock_Config+0xf0>)
 8001794:	2100      	movs	r1, #0
 8001796:	4a34      	ldr	r2, [pc, #208]	; (8001868 <SystemClock_Config+0xf4>)
 8001798:	9101      	str	r1, [sp, #4]
 800179a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800179c:	f021 0101 	bic.w	r1, r1, #1
 80017a0:	62d9      	str	r1, [r3, #44]	; 0x2c
 80017a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a4:	f003 0301 	and.w	r3, r3, #1
 80017a8:	9301      	str	r3, [sp, #4]
 80017aa:	6993      	ldr	r3, [r2, #24]
 80017ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b0:	6193      	str	r3, [r2, #24]
 80017b2:	6993      	ldr	r3, [r2, #24]
 80017b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017b8:	9301      	str	r3, [sp, #4]
 80017ba:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017bc:	6993      	ldr	r3, [r2, #24]
 80017be:	049c      	lsls	r4, r3, #18
 80017c0:	d5fc      	bpl.n	80017bc <SystemClock_Config+0x48>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <SystemClock_Config+0xf8>)
 80017c4:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 80017c8:	f041 0102 	orr.w	r1, r1, #2
 80017cc:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017d0:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d6:	f003 0302 	and.w	r3, r3, #2
 80017da:	9302      	str	r3, [sp, #8]
 80017dc:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017de:	9103      	str	r1, [sp, #12]
 80017e0:	6991      	ldr	r1, [r2, #24]
 80017e2:	4b20      	ldr	r3, [pc, #128]	; (8001864 <SystemClock_Config+0xf0>)
 80017e4:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 80017e8:	6191      	str	r1, [r2, #24]
 80017ea:	6992      	ldr	r2, [r2, #24]
 80017ec:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 80017f0:	9203      	str	r2, [sp, #12]
 80017f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <SystemClock_Config+0xf4>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80017f6:	f041 0101 	orr.w	r1, r1, #1
 80017fa:	62d9      	str	r1, [r3, #44]	; 0x2c
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	9303      	str	r3, [sp, #12]
 8001804:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001806:	6993      	ldr	r3, [r2, #24]
 8001808:	0498      	lsls	r0, r3, #18
 800180a:	d5fc      	bpl.n	8001806 <SystemClock_Config+0x92>
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800180c:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 192;
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800180e:	2508      	movs	r5, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001810:	2021      	movs	r0, #33	; 0x21
 8001812:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001816:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001818:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800181c:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8001820:	e9cd 351b 	strd	r3, r5, [sp, #108]	; 0x6c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001824:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8001826:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800182a:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 192;
 800182c:	2105      	movs	r1, #5
 800182e:	23c0      	movs	r3, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001832:	e9cd 1317 	strd	r1, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001836:	e9cd 441d 	strd	r4, r4, [sp, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800183a:	f005 fd1d 	bl	8007278 <HAL_RCC_OscConfig>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800183e:	213f      	movs	r1, #63	; 0x3f
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001840:	2340      	movs	r3, #64	; 0x40
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001842:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001846:	9104      	str	r1, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2103      	movs	r1, #3
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800184a:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800184e:	9105      	str	r1, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001850:	2104      	movs	r1, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001852:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001854:	e9cd 5307 	strd	r5, r3, [sp, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001858:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800185c:	f006 f8a0 	bl	80079a0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001860:	b021      	add	sp, #132	; 0x84
 8001862:	bd30      	pop	{r4, r5, pc}
 8001864:	58000400 	.word	0x58000400
 8001868:	58024800 	.word	0x58024800
 800186c:	58024400 	.word	0x58024400

08001870 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001870:	b500      	push	{lr}
 8001872:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001874:	22a4      	movs	r2, #164	; 0xa4
 8001876:	2100      	movs	r1, #0
 8001878:	a807      	add	r0, sp, #28
 800187a:	f017 f8b3 	bl	80189e4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 800187e:	2019      	movs	r0, #25
 8001880:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2N = 344;
  PeriphClkInitStruct.PLL2.PLL2P = 7;
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001884:	2302      	movs	r3, #2
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8001886:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001888:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800188a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800188e:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001890:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8001892:	ed9f 7b09 	vldr	d7, [pc, #36]	; 80018b8 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8001896:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800189a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800189e:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 80018a0:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80018a4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80018c0 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 80018a8:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 80018aa:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ae:	f006 fb27 	bl	8007f00 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80018b2:	b031      	add	sp, #196	; 0xc4
 80018b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80018b8:	00011100 	.word	0x00011100
 80018bc:	00000000 	.word	0x00000000
 80018c0:	00000007 	.word	0x00000007
 80018c4:	00000002 	.word	0x00000002

080018c8 <BSP_SD_IsDetected>:
}



uint8_t BSP_SD_IsDetected(void)
{
 80018c8:	b082      	sub	sp, #8
  __IO uint8_t status = SD_PRESENT;
 80018ca:	2301      	movs	r3, #1
 80018cc:	f88d 3007 	strb.w	r3, [sp, #7]
  //if (BSP_PlatformIsDetected() == 0x0)
  //{
  //  status = SD_NOT_PRESENT;
  //}

  return status;
 80018d0:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80018d4:	b002      	add	sp, #8
 80018d6:	4770      	bx	lr

080018d8 <getPresetNamesFromSDCard>:

void getPresetNamesFromSDCard(void)
{
 80018d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 80018dc:	2301      	movs	r3, #1
{
 80018de:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 80018e0:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 80018e4:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 80018e8:	b93b      	cbnz	r3, 80018fa <getPresetNamesFromSDCard+0x22>
 80018ea:	f8df a078 	ldr.w	sl, [pc, #120]	; 8001964 <getPresetNamesFromSDCard+0x8c>
			}

		}

	}
	diskBusy = 0;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f88a 3000 	strb.w	r3, [sl]
	return;
}
 80018f4:	b009      	add	sp, #36	; 0x24
 80018f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018fa:	4b14      	ldr	r3, [pc, #80]	; (800194c <getPresetNamesFromSDCard+0x74>)
 80018fc:	075a      	lsls	r2, r3, #29
 80018fe:	f040 82ed 	bne.w	8001edc <getPresetNamesFromSDCard+0x604>
			audioOutBuffer[i] = 0;
 8001902:	2000      	movs	r0, #0
 8001904:	2100      	movs	r1, #0
 8001906:	f503 6280 	add.w	r2, r3, #1024	; 0x400
 800190a:	e8e3 0102 	strd	r0, r1, [r3], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 800190e:	429a      	cmp	r2, r3
 8001910:	d1fb      	bne.n	800190a <getPresetNamesFromSDCard+0x32>
		loadFailed = 0;
 8001912:	2400      	movs	r4, #0
 8001914:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <getPresetNamesFromSDCard+0x78>)
		diskBusy = 1;
 8001916:	2501      	movs	r5, #1
 8001918:	f8df a048 	ldr.w	sl, [pc, #72]	; 8001964 <getPresetNamesFromSDCard+0x8c>
		disk_initialize(0);
 800191c:	4620      	mov	r0, r4
		loadFailed = 0;
 800191e:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8001920:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 8001924:	f00b fafa 	bl	800cf1c <disk_initialize>
	    disk_status(0);
 8001928:	4620      	mov	r0, r4
 800192a:	f00b faed 	bl	800cf08 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 800192e:	462a      	mov	r2, r5
 8001930:	4908      	ldr	r1, [pc, #32]	; (8001954 <getPresetNamesFromSDCard+0x7c>)
 8001932:	4809      	ldr	r0, [pc, #36]	; (8001958 <getPresetNamesFromSDCard+0x80>)
 8001934:	f00d fc94 	bl	800f260 <f_mount>
 8001938:	2800      	cmp	r0, #0
 800193a:	d1d8      	bne.n	80018ee <getPresetNamesFromSDCard+0x16>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 800193c:	4605      	mov	r5, r0
 800193e:	4e07      	ldr	r6, [pc, #28]	; (800195c <getPresetNamesFromSDCard+0x84>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001940:	f8df 9010 	ldr.w	r9, [pc, #16]	; 8001954 <getPresetNamesFromSDCard+0x7c>
 8001944:	f8df 8020 	ldr.w	r8, [pc, #32]	; 8001968 <getPresetNamesFromSDCard+0x90>
 8001948:	4f05      	ldr	r7, [pc, #20]	; (8001960 <getPresetNamesFromSDCard+0x88>)
 800194a:	e027      	b.n	800199c <getPresetNamesFromSDCard+0xc4>
 800194c:	30000000 	.word	0x30000000
 8001950:	2001822c 	.word	0x2001822c
 8001954:	2001d71c 	.word	0x2001d71c
 8001958:	2001d2b8 	.word	0x2001d2b8
 800195c:	0801b844 	.word	0x0801b844
 8001960:	20014040 	.word	0x20014040
 8001964:	20014078 	.word	0x20014078
 8001968:	200160e0 	.word	0x200160e0
					strcat(charBuf, "*.ebp");
 800196c:	aa02      	add	r2, sp, #8
 800196e:	6830      	ldr	r0, [r6, #0]
 8001970:	88b1      	ldrh	r1, [r6, #4]
 8001972:	f10d 0c08 	add.w	ip, sp, #8
 8001976:	18d4      	adds	r4, r2, r3
					strcpy(finalString, charBuf);
 8001978:	1d9a      	adds	r2, r3, #6
					strcat(charBuf, "*.ebp");
 800197a:	f84c 0003 	str.w	r0, [ip, r3]
					strcpy(finalString, charBuf);
 800197e:	a805      	add	r0, sp, #20
					strcat(charBuf, "*.ebp");
 8001980:	80a1      	strh	r1, [r4, #4]
					strcpy(finalString, charBuf);
 8001982:	4661      	mov	r1, ip
 8001984:	f017 f85a 	bl	8018a3c <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8001988:	ab05      	add	r3, sp, #20
 800198a:	464a      	mov	r2, r9
 800198c:	4641      	mov	r1, r8
 800198e:	4638      	mov	r0, r7
 8001990:	f00e f9ae 	bl	800fcf0 <f_findfirst>
				if(res == FR_OK)
 8001994:	b358      	cbz	r0, 80019ee <getPresetNamesFromSDCard+0x116>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8001996:	3501      	adds	r5, #1
 8001998:	2d40      	cmp	r5, #64	; 0x40
 800199a:	d0a8      	beq.n	80018ee <getPresetNamesFromSDCard+0x16>
				itoa(i, charBuf, 10);
 800199c:	220a      	movs	r2, #10
 800199e:	a902      	add	r1, sp, #8
 80019a0:	4628      	mov	r0, r5
 80019a2:	f016 ffdb 	bl	801895c <itoa>
				int len = ((strlen(charBuf)));
 80019a6:	a802      	add	r0, sp, #8
 80019a8:	f7fe fc96 	bl	80002d8 <strlen>
				if (len == 1)
 80019ac:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80019ae:	4603      	mov	r3, r0
				if (len == 1)
 80019b0:	d1dc      	bne.n	800196c <getPresetNamesFromSDCard+0x94>
					finalString[2] = charBuf[1];
 80019b2:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 80019b6:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 80019b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, "*.ebp");
 80019bc:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 80019be:	f88d 1016 	strb.w	r1, [sp, #22]
					strcat(finalString, "*.ebp");
 80019c2:	ac05      	add	r4, sp, #20
					finalString[1] = charBuf[0];
 80019c4:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 80019c8:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, "*.ebp");
 80019cc:	f7fe fc84 	bl	80002d8 <strlen>
 80019d0:	a905      	add	r1, sp, #20
 80019d2:	4603      	mov	r3, r0
 80019d4:	88b2      	ldrh	r2, [r6, #4]
 80019d6:	4419      	add	r1, r3
 80019d8:	6830      	ldr	r0, [r6, #0]
 80019da:	50e0      	str	r0, [r4, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80019dc:	ab05      	add	r3, sp, #20
					strcat(finalString, "*.ebp");
 80019de:	808a      	strh	r2, [r1, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 80019e0:	4638      	mov	r0, r7
 80019e2:	464a      	mov	r2, r9
 80019e4:	4641      	mov	r1, r8
 80019e6:	f00e f983 	bl	800fcf0 <f_findfirst>
				if(res == FR_OK)
 80019ea:	2800      	cmp	r0, #0
 80019ec:	d1d3      	bne.n	8001996 <getPresetNamesFromSDCard+0xbe>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80019ee:	f8df b354 	ldr.w	fp, [pc, #852]	; 8001d44 <getPresetNamesFromSDCard+0x46c>
 80019f2:	2211      	movs	r2, #17
 80019f4:	49d0      	ldr	r1, [pc, #832]	; (8001d38 <getPresetNamesFromSDCard+0x460>)
 80019f6:	4658      	mov	r0, fp
 80019f8:	f00d fc7e 	bl	800f2f8 <f_open>
 80019fc:	2800      	cmp	r0, #0
 80019fe:	d1ca      	bne.n	8001996 <getPresetNamesFromSDCard+0xbe>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8001a00:	4cce      	ldr	r4, [pc, #824]	; (8001d3c <getPresetNamesFromSDCard+0x464>)
 8001a02:	ab01      	add	r3, sp, #4
 8001a04:	f8db 200c 	ldr.w	r2, [fp, #12]
 8001a08:	4658      	mov	r0, fp
 8001a0a:	4621      	mov	r1, r4
 8001a0c:	f00d fdd8 	bl	800f5c0 <f_read>
						f_close(&SDFile);
 8001a10:	4658      	mov	r0, fp
 8001a12:	f00e f86d 	bl	800faf0 <f_close>
						if (buffer[bufferIndex] == 17)
 8001a16:	7820      	ldrb	r0, [r4, #0]
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001a18:	ebc5 02c5 	rsb	r2, r5, r5, lsl #3
 8001a1c:	49c8      	ldr	r1, [pc, #800]	; (8001d40 <getPresetNamesFromSDCard+0x468>)
						if (buffer[bufferIndex] == 17)
 8001a1e:	f1a0 0011 	sub.w	r0, r0, #17
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001a22:	f8df c324 	ldr.w	ip, [pc, #804]	; 8001d48 <getPresetNamesFromSDCard+0x470>
						if (buffer[bufferIndex] == 17)
 8001a26:	fab0 f080 	clz	r0, r0
 8001a2a:	0940      	lsrs	r0, r0, #5
 8001a2c:	0083      	lsls	r3, r0, #2
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001a2e:	f814 0020 	ldrb.w	r0, [r4, r0, lsl #2]
 8001a32:	f801 0012 	strb.w	r0, [r1, r2, lsl #1]
 8001a36:	1c58      	adds	r0, r3, #1
 8001a38:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8001a3c:	5c20      	ldrb	r0, [r4, r0]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001a3e:	ebc5 1205 	rsb	r2, r5, r5, lsl #4
							presetNamesArray[i][j] = buffer[bufferIndex];
 8001a42:	7048      	strb	r0, [r1, #1]
 8001a44:	1c98      	adds	r0, r3, #2
 8001a46:	5c20      	ldrb	r0, [r4, r0]
 8001a48:	7088      	strb	r0, [r1, #2]
 8001a4a:	1cd8      	adds	r0, r3, #3
 8001a4c:	5c20      	ldrb	r0, [r4, r0]
 8001a4e:	70c8      	strb	r0, [r1, #3]
 8001a50:	1d18      	adds	r0, r3, #4
 8001a52:	5c20      	ldrb	r0, [r4, r0]
 8001a54:	7108      	strb	r0, [r1, #4]
 8001a56:	1d58      	adds	r0, r3, #5
 8001a58:	5c20      	ldrb	r0, [r4, r0]
 8001a5a:	7148      	strb	r0, [r1, #5]
 8001a5c:	1d98      	adds	r0, r3, #6
 8001a5e:	5c20      	ldrb	r0, [r4, r0]
 8001a60:	7188      	strb	r0, [r1, #6]
 8001a62:	1dd8      	adds	r0, r3, #7
 8001a64:	5c20      	ldrb	r0, [r4, r0]
 8001a66:	71c8      	strb	r0, [r1, #7]
 8001a68:	f103 0008 	add.w	r0, r3, #8
 8001a6c:	5c20      	ldrb	r0, [r4, r0]
 8001a6e:	7208      	strb	r0, [r1, #8]
 8001a70:	f103 0009 	add.w	r0, r3, #9
 8001a74:	5c20      	ldrb	r0, [r4, r0]
 8001a76:	7248      	strb	r0, [r1, #9]
 8001a78:	f103 000a 	add.w	r0, r3, #10
 8001a7c:	5c20      	ldrb	r0, [r4, r0]
 8001a7e:	7288      	strb	r0, [r1, #10]
 8001a80:	f103 000b 	add.w	r0, r3, #11
 8001a84:	5c20      	ldrb	r0, [r4, r0]
 8001a86:	72c8      	strb	r0, [r1, #11]
 8001a88:	f103 000c 	add.w	r0, r3, #12
 8001a8c:	5c20      	ldrb	r0, [r4, r0]
 8001a8e:	7308      	strb	r0, [r1, #12]
 8001a90:	f103 000d 	add.w	r0, r3, #13
 8001a94:	5c20      	ldrb	r0, [r4, r0]
 8001a96:	7348      	strb	r0, [r1, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8001a98:	f103 010e 	add.w	r1, r3, #14
 8001a9c:	5c61      	ldrb	r1, [r4, r1]
 8001a9e:	f80c 1032 	strb.w	r1, [ip, r2, lsl #3]
 8001aa2:	f103 010f 	add.w	r1, r3, #15
 8001aa6:	eb0c 02c2 	add.w	r2, ip, r2, lsl #3
 8001aaa:	5c61      	ldrb	r1, [r4, r1]
 8001aac:	7051      	strb	r1, [r2, #1]
 8001aae:	f103 0110 	add.w	r1, r3, #16
 8001ab2:	5c61      	ldrb	r1, [r4, r1]
 8001ab4:	7091      	strb	r1, [r2, #2]
 8001ab6:	f103 0111 	add.w	r1, r3, #17
 8001aba:	5c61      	ldrb	r1, [r4, r1]
 8001abc:	70d1      	strb	r1, [r2, #3]
 8001abe:	f103 0112 	add.w	r1, r3, #18
 8001ac2:	5c61      	ldrb	r1, [r4, r1]
 8001ac4:	7111      	strb	r1, [r2, #4]
 8001ac6:	f103 0113 	add.w	r1, r3, #19
 8001aca:	5c61      	ldrb	r1, [r4, r1]
 8001acc:	7151      	strb	r1, [r2, #5]
 8001ace:	f103 0114 	add.w	r1, r3, #20
 8001ad2:	5c61      	ldrb	r1, [r4, r1]
 8001ad4:	7191      	strb	r1, [r2, #6]
 8001ad6:	f103 0115 	add.w	r1, r3, #21
 8001ada:	5c61      	ldrb	r1, [r4, r1]
 8001adc:	71d1      	strb	r1, [r2, #7]
 8001ade:	f103 0116 	add.w	r1, r3, #22
 8001ae2:	5c61      	ldrb	r1, [r4, r1]
 8001ae4:	7211      	strb	r1, [r2, #8]
 8001ae6:	f103 0117 	add.w	r1, r3, #23
 8001aea:	5c61      	ldrb	r1, [r4, r1]
 8001aec:	7291      	strb	r1, [r2, #10]
 8001aee:	f103 0118 	add.w	r1, r3, #24
 8001af2:	5c61      	ldrb	r1, [r4, r1]
 8001af4:	72d1      	strb	r1, [r2, #11]
 8001af6:	f103 0119 	add.w	r1, r3, #25
 8001afa:	5c61      	ldrb	r1, [r4, r1]
 8001afc:	7311      	strb	r1, [r2, #12]
 8001afe:	f103 011a 	add.w	r1, r3, #26
 8001b02:	5c61      	ldrb	r1, [r4, r1]
 8001b04:	7351      	strb	r1, [r2, #13]
 8001b06:	f103 011b 	add.w	r1, r3, #27
 8001b0a:	5c61      	ldrb	r1, [r4, r1]
 8001b0c:	7391      	strb	r1, [r2, #14]
 8001b0e:	f103 011c 	add.w	r1, r3, #28
 8001b12:	5c61      	ldrb	r1, [r4, r1]
 8001b14:	73d1      	strb	r1, [r2, #15]
 8001b16:	f103 011d 	add.w	r1, r3, #29
 8001b1a:	5c61      	ldrb	r1, [r4, r1]
 8001b1c:	7411      	strb	r1, [r2, #16]
 8001b1e:	f103 011e 	add.w	r1, r3, #30
 8001b22:	5c61      	ldrb	r1, [r4, r1]
 8001b24:	7451      	strb	r1, [r2, #17]
 8001b26:	f103 011f 	add.w	r1, r3, #31
 8001b2a:	5c61      	ldrb	r1, [r4, r1]
 8001b2c:	7491      	strb	r1, [r2, #18]
 8001b2e:	f103 0120 	add.w	r1, r3, #32
 8001b32:	5c61      	ldrb	r1, [r4, r1]
 8001b34:	7511      	strb	r1, [r2, #20]
 8001b36:	f103 0121 	add.w	r1, r3, #33	; 0x21
 8001b3a:	5c61      	ldrb	r1, [r4, r1]
 8001b3c:	7551      	strb	r1, [r2, #21]
 8001b3e:	f103 0122 	add.w	r1, r3, #34	; 0x22
 8001b42:	5c61      	ldrb	r1, [r4, r1]
 8001b44:	7591      	strb	r1, [r2, #22]
 8001b46:	f103 0123 	add.w	r1, r3, #35	; 0x23
 8001b4a:	5c61      	ldrb	r1, [r4, r1]
 8001b4c:	75d1      	strb	r1, [r2, #23]
 8001b4e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8001b52:	5c61      	ldrb	r1, [r4, r1]
 8001b54:	7611      	strb	r1, [r2, #24]
 8001b56:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8001b5a:	5c61      	ldrb	r1, [r4, r1]
 8001b5c:	7651      	strb	r1, [r2, #25]
 8001b5e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8001b62:	5c61      	ldrb	r1, [r4, r1]
 8001b64:	7691      	strb	r1, [r2, #26]
 8001b66:	f103 0127 	add.w	r1, r3, #39	; 0x27
 8001b6a:	5c61      	ldrb	r1, [r4, r1]
 8001b6c:	76d1      	strb	r1, [r2, #27]
 8001b6e:	f103 0128 	add.w	r1, r3, #40	; 0x28
 8001b72:	5c61      	ldrb	r1, [r4, r1]
 8001b74:	7711      	strb	r1, [r2, #28]
 8001b76:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8001b7a:	5c61      	ldrb	r1, [r4, r1]
 8001b7c:	7791      	strb	r1, [r2, #30]
 8001b7e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8001b82:	5c61      	ldrb	r1, [r4, r1]
 8001b84:	77d1      	strb	r1, [r2, #31]
 8001b86:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 8001b8a:	5c61      	ldrb	r1, [r4, r1]
 8001b8c:	f882 1020 	strb.w	r1, [r2, #32]
 8001b90:	f103 012c 	add.w	r1, r3, #44	; 0x2c
 8001b94:	5c61      	ldrb	r1, [r4, r1]
 8001b96:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
 8001b9a:	f103 012d 	add.w	r1, r3, #45	; 0x2d
 8001b9e:	5c61      	ldrb	r1, [r4, r1]
 8001ba0:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
 8001ba4:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 8001ba8:	5c61      	ldrb	r1, [r4, r1]
 8001baa:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8001bae:	f103 012f 	add.w	r1, r3, #47	; 0x2f
 8001bb2:	5c61      	ldrb	r1, [r4, r1]
 8001bb4:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
 8001bb8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8001bbc:	5c61      	ldrb	r1, [r4, r1]
 8001bbe:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
 8001bc2:	f103 0131 	add.w	r1, r3, #49	; 0x31
 8001bc6:	5c61      	ldrb	r1, [r4, r1]
 8001bc8:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
 8001bcc:	f103 0132 	add.w	r1, r3, #50	; 0x32
 8001bd0:	5c61      	ldrb	r1, [r4, r1]
 8001bd2:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
 8001bd6:	f103 0133 	add.w	r1, r3, #51	; 0x33
 8001bda:	5c61      	ldrb	r1, [r4, r1]
 8001bdc:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
 8001be0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001be4:	5c61      	ldrb	r1, [r4, r1]
 8001be6:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
 8001bea:	f103 0135 	add.w	r1, r3, #53	; 0x35
 8001bee:	5c61      	ldrb	r1, [r4, r1]
 8001bf0:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
 8001bf4:	f103 0136 	add.w	r1, r3, #54	; 0x36
 8001bf8:	5c61      	ldrb	r1, [r4, r1]
 8001bfa:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
 8001bfe:	f103 0137 	add.w	r1, r3, #55	; 0x37
 8001c02:	5c61      	ldrb	r1, [r4, r1]
 8001c04:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
 8001c08:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001c0c:	5c61      	ldrb	r1, [r4, r1]
 8001c0e:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
 8001c12:	f103 0139 	add.w	r1, r3, #57	; 0x39
 8001c16:	5c61      	ldrb	r1, [r4, r1]
 8001c18:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
 8001c1c:	f103 013a 	add.w	r1, r3, #58	; 0x3a
 8001c20:	5c61      	ldrb	r1, [r4, r1]
 8001c22:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
 8001c26:	f103 013b 	add.w	r1, r3, #59	; 0x3b
 8001c2a:	5c61      	ldrb	r1, [r4, r1]
 8001c2c:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
 8001c30:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8001c34:	5c61      	ldrb	r1, [r4, r1]
 8001c36:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
 8001c3a:	f103 013d 	add.w	r1, r3, #61	; 0x3d
 8001c3e:	5c61      	ldrb	r1, [r4, r1]
 8001c40:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
 8001c44:	f103 013e 	add.w	r1, r3, #62	; 0x3e
 8001c48:	5c61      	ldrb	r1, [r4, r1]
 8001c4a:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
 8001c4e:	f103 013f 	add.w	r1, r3, #63	; 0x3f
 8001c52:	5c61      	ldrb	r1, [r4, r1]
 8001c54:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
 8001c58:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8001c5c:	5c61      	ldrb	r1, [r4, r1]
 8001c5e:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
 8001c62:	f103 0141 	add.w	r1, r3, #65	; 0x41
 8001c66:	5c61      	ldrb	r1, [r4, r1]
 8001c68:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
 8001c6c:	f103 0142 	add.w	r1, r3, #66	; 0x42
 8001c70:	5c61      	ldrb	r1, [r4, r1]
 8001c72:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
 8001c76:	f103 0143 	add.w	r1, r3, #67	; 0x43
 8001c7a:	5c61      	ldrb	r1, [r4, r1]
 8001c7c:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
 8001c80:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8001c84:	5c61      	ldrb	r1, [r4, r1]
 8001c86:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
 8001c8a:	f103 0145 	add.w	r1, r3, #69	; 0x45
 8001c8e:	5c61      	ldrb	r1, [r4, r1]
 8001c90:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
 8001c94:	f103 0146 	add.w	r1, r3, #70	; 0x46
 8001c98:	5c61      	ldrb	r1, [r4, r1]
 8001c9a:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
 8001c9e:	f103 0147 	add.w	r1, r3, #71	; 0x47
 8001ca2:	5c61      	ldrb	r1, [r4, r1]
 8001ca4:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
 8001ca8:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8001cac:	5c61      	ldrb	r1, [r4, r1]
 8001cae:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
 8001cb2:	f103 0149 	add.w	r1, r3, #73	; 0x49
 8001cb6:	5c61      	ldrb	r1, [r4, r1]
 8001cb8:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
 8001cbc:	f103 014a 	add.w	r1, r3, #74	; 0x4a
 8001cc0:	5c61      	ldrb	r1, [r4, r1]
 8001cc2:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
 8001cc6:	f103 014b 	add.w	r1, r3, #75	; 0x4b
 8001cca:	5c61      	ldrb	r1, [r4, r1]
 8001ccc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001cd0:	f103 014c 	add.w	r1, r3, #76	; 0x4c
 8001cd4:	5c61      	ldrb	r1, [r4, r1]
 8001cd6:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
 8001cda:	f103 014d 	add.w	r1, r3, #77	; 0x4d
 8001cde:	5c61      	ldrb	r1, [r4, r1]
 8001ce0:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
 8001ce4:	f103 014e 	add.w	r1, r3, #78	; 0x4e
 8001ce8:	5c61      	ldrb	r1, [r4, r1]
 8001cea:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
 8001cee:	f103 014f 	add.w	r1, r3, #79	; 0x4f
 8001cf2:	5c61      	ldrb	r1, [r4, r1]
 8001cf4:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
 8001cf8:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8001cfc:	5c61      	ldrb	r1, [r4, r1]
 8001cfe:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
 8001d02:	f103 0151 	add.w	r1, r3, #81	; 0x51
 8001d06:	5c61      	ldrb	r1, [r4, r1]
 8001d08:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
 8001d0c:	f103 0152 	add.w	r1, r3, #82	; 0x52
 8001d10:	5c61      	ldrb	r1, [r4, r1]
 8001d12:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
 8001d16:	f103 0153 	add.w	r1, r3, #83	; 0x53
 8001d1a:	5c61      	ldrb	r1, [r4, r1]
 8001d1c:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
 8001d20:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8001d24:	5c61      	ldrb	r1, [r4, r1]
 8001d26:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
 8001d2a:	f103 0155 	add.w	r1, r3, #85	; 0x55
 8001d2e:	5c61      	ldrb	r1, [r4, r1]
 8001d30:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
 8001d34:	e00a      	b.n	8001d4c <getPresetNamesFromSDCard+0x474>
 8001d36:	bf00      	nop
 8001d38:	200160f6 	.word	0x200160f6
 8001d3c:	30042380 	.word	0x30042380
 8001d40:	30042000 	.word	0x30042000
 8001d44:	2001d4ec 	.word	0x2001d4ec
 8001d48:	30043380 	.word	0x30043380
								macroNamesArray[i][j+8][k] = buffer[bufferIndex];
 8001d4c:	f103 0156 	add.w	r1, r3, #86	; 0x56
 8001d50:	5c61      	ldrb	r1, [r4, r1]
 8001d52:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
 8001d56:	f103 0157 	add.w	r1, r3, #87	; 0x57
 8001d5a:	5c61      	ldrb	r1, [r4, r1]
 8001d5c:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
 8001d60:	f103 0158 	add.w	r1, r3, #88	; 0x58
 8001d64:	5c61      	ldrb	r1, [r4, r1]
 8001d66:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
 8001d6a:	f103 0159 	add.w	r1, r3, #89	; 0x59
 8001d6e:	5c61      	ldrb	r1, [r4, r1]
 8001d70:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8001d74:	f103 015a 	add.w	r1, r3, #90	; 0x5a
 8001d78:	5c61      	ldrb	r1, [r4, r1]
 8001d7a:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
 8001d7e:	f103 015b 	add.w	r1, r3, #91	; 0x5b
 8001d82:	5c61      	ldrb	r1, [r4, r1]
 8001d84:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
 8001d88:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8001d8c:	5c61      	ldrb	r1, [r4, r1]
 8001d8e:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
 8001d92:	f103 015d 	add.w	r1, r3, #93	; 0x5d
 8001d96:	5c61      	ldrb	r1, [r4, r1]
 8001d98:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
 8001d9c:	f103 015e 	add.w	r1, r3, #94	; 0x5e
 8001da0:	5c61      	ldrb	r1, [r4, r1]
 8001da2:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
 8001da6:	f103 015f 	add.w	r1, r3, #95	; 0x5f
 8001daa:	5c61      	ldrb	r1, [r4, r1]
 8001dac:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
 8001db0:	f103 0160 	add.w	r1, r3, #96	; 0x60
 8001db4:	5c61      	ldrb	r1, [r4, r1]
 8001db6:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
 8001dba:	f103 0161 	add.w	r1, r3, #97	; 0x61
 8001dbe:	5c61      	ldrb	r1, [r4, r1]
 8001dc0:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
 8001dc4:	f103 0162 	add.w	r1, r3, #98	; 0x62
 8001dc8:	5c61      	ldrb	r1, [r4, r1]
 8001dca:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
 8001dce:	f103 0163 	add.w	r1, r3, #99	; 0x63
 8001dd2:	5c61      	ldrb	r1, [r4, r1]
 8001dd4:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
 8001dd8:	f103 0164 	add.w	r1, r3, #100	; 0x64
 8001ddc:	5c61      	ldrb	r1, [r4, r1]
 8001dde:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
 8001de2:	f103 0165 	add.w	r1, r3, #101	; 0x65
 8001de6:	5c61      	ldrb	r1, [r4, r1]
 8001de8:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
 8001dec:	f103 0166 	add.w	r1, r3, #102	; 0x66
 8001df0:	5c61      	ldrb	r1, [r4, r1]
 8001df2:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
 8001df6:	f103 0167 	add.w	r1, r3, #103	; 0x67
 8001dfa:	5c61      	ldrb	r1, [r4, r1]
 8001dfc:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
 8001e00:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8001e04:	5c61      	ldrb	r1, [r4, r1]
 8001e06:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
 8001e0a:	f103 0169 	add.w	r1, r3, #105	; 0x69
 8001e0e:	5c61      	ldrb	r1, [r4, r1]
 8001e10:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
 8001e14:	f103 016a 	add.w	r1, r3, #106	; 0x6a
 8001e18:	5c61      	ldrb	r1, [r4, r1]
 8001e1a:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
 8001e1e:	f103 016b 	add.w	r1, r3, #107	; 0x6b
 8001e22:	5c61      	ldrb	r1, [r4, r1]
 8001e24:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
 8001e28:	f103 016c 	add.w	r1, r3, #108	; 0x6c
 8001e2c:	5c61      	ldrb	r1, [r4, r1]
 8001e2e:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
 8001e32:	f103 016d 	add.w	r1, r3, #109	; 0x6d
 8001e36:	5c61      	ldrb	r1, [r4, r1]
 8001e38:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
 8001e3c:	f103 016e 	add.w	r1, r3, #110	; 0x6e
 8001e40:	5c61      	ldrb	r1, [r4, r1]
 8001e42:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
 8001e46:	f103 016f 	add.w	r1, r3, #111	; 0x6f
 8001e4a:	5c61      	ldrb	r1, [r4, r1]
 8001e4c:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
 8001e50:	f103 0170 	add.w	r1, r3, #112	; 0x70
 8001e54:	5c61      	ldrb	r1, [r4, r1]
 8001e56:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
 8001e5a:	f103 0171 	add.w	r1, r3, #113	; 0x71
 8001e5e:	5c61      	ldrb	r1, [r4, r1]
 8001e60:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
 8001e64:	f103 0172 	add.w	r1, r3, #114	; 0x72
 8001e68:	5c61      	ldrb	r1, [r4, r1]
 8001e6a:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
 8001e6e:	f103 0173 	add.w	r1, r3, #115	; 0x73
 8001e72:	5c61      	ldrb	r1, [r4, r1]
 8001e74:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
 8001e78:	f103 0174 	add.w	r1, r3, #116	; 0x74
 8001e7c:	5c61      	ldrb	r1, [r4, r1]
 8001e7e:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
 8001e82:	f103 0175 	add.w	r1, r3, #117	; 0x75
 8001e86:	5c61      	ldrb	r1, [r4, r1]
 8001e88:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
 8001e8c:	f103 0176 	add.w	r1, r3, #118	; 0x76
 8001e90:	5c61      	ldrb	r1, [r4, r1]
 8001e92:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
 8001e96:	f103 0177 	add.w	r1, r3, #119	; 0x77
 8001e9a:	5c61      	ldrb	r1, [r4, r1]
 8001e9c:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
 8001ea0:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8001ea4:	5c61      	ldrb	r1, [r4, r1]
 8001ea6:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
 8001eaa:	f103 0179 	add.w	r1, r3, #121	; 0x79
 8001eae:	5c61      	ldrb	r1, [r4, r1]
 8001eb0:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
 8001eb4:	f103 017a 	add.w	r1, r3, #122	; 0x7a
 8001eb8:	5c61      	ldrb	r1, [r4, r1]
 8001eba:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
 8001ebe:	f103 017b 	add.w	r1, r3, #123	; 0x7b
 8001ec2:	5c61      	ldrb	r1, [r4, r1]
 8001ec4:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
 8001ec8:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8001ecc:	337d      	adds	r3, #125	; 0x7d
 8001ece:	5c61      	ldrb	r1, [r4, r1]
 8001ed0:	5ce3      	ldrb	r3, [r4, r3]
 8001ed2:	f882 1076 	strb.w	r1, [r2, #118]	; 0x76
 8001ed6:	f882 3077 	strb.w	r3, [r2, #119]	; 0x77
						for (int j = 0; j < 4; j++)
 8001eda:	e55c      	b.n	8001996 <getPresetNamesFromSDCard+0xbe>
			audioOutBuffer[i] = 0;
 8001edc:	2200      	movs	r2, #0
 8001ede:	f503 6180 	add.w	r1, r3, #1024	; 0x400
			audioOutBuffer[i + 1] = 0;
 8001ee2:	e9c3 2200 	strd	r2, r2, [r3]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8001ee6:	3308      	adds	r3, #8
 8001ee8:	4299      	cmp	r1, r3
 8001eea:	d1fa      	bne.n	8001ee2 <getPresetNamesFromSDCard+0x60a>
 8001eec:	e511      	b.n	8001912 <getPresetNamesFromSDCard+0x3a>
 8001eee:	bf00      	nop

08001ef0 <SDRAM_init>:
#define SDRAM_MODEREG_WRITEBURST_MODE_PROG_BURST ((0 << 9))

#define SDRAM_MODEREG_OPERATING_MODE_STANDARD ((0 << 13)|(0 << 14))

void SDRAM_init()
{
 8001ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001ef4:	4c21      	ldr	r4, [pc, #132]	; (8001f7c <SDRAM_init+0x8c>)
{
 8001ef6:	b086      	sub	sp, #24
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8001ef8:	2501      	movs	r5, #1
	        __IO uint32_t tmpmrd = 0;
 8001efa:	2600      	movs	r6, #0
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001efc:	2710      	movs	r7, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001efe:	a902      	add	r1, sp, #8
 8001f00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f04:	4620      	mov	r0, r4
	        /* Step 4: Insert 100 us delay */
	        HAL_Delay(1);


	        /* Step 5: Configure a PALL (precharge all) command */
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f06:	f04f 0802 	mov.w	r8, #2
	        __IO uint32_t tmpmrd = 0;
 8001f0a:	9601      	str	r6, [sp, #4]
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8001f0c:	e9cd 5702 	strd	r5, r7, [sp, #8]
	        Command.ModeRegisterDefinition = 0;
 8001f10:	e9cd 5604 	strd	r5, r6, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f14:	f008 fdfe 	bl	800ab14 <HAL_SDRAM_SendCommand>
	        HAL_Delay(1);
 8001f18:	4628      	mov	r0, r5
 8001f1a:	f002 faad 	bl	8004478 <HAL_Delay>
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f1e:	a902      	add	r1, sp, #8
 8001f20:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f24:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 8001f26:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8001f28:	f8cd 8008 	str.w	r8, [sp, #8]
	        Command.AutoRefreshNumber      = 1;
 8001f2c:	e9cd 7503 	strd	r7, r5, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f30:	f008 fdf0 	bl	800ab14 <HAL_SDRAM_SendCommand>

	        /* Step 6 : Configure a Auto-Refresh command */
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f34:	2303      	movs	r3, #3
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 2;
	        Command.ModeRegisterDefinition = 0;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f36:	a902      	add	r1, sp, #8
 8001f38:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f3c:	4620      	mov	r0, r4
	        Command.ModeRegisterDefinition = 0;
 8001f3e:	9605      	str	r6, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001f40:	9302      	str	r3, [sp, #8]
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
	                 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL | SDRAM_MODEREG_CAS_LATENCY_2
	                 | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE | SDRAM_MODEREG_OPERATING_MODE_STANDARD;
	        // // Used in example, but can't find reference except for "Test Mode"

	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f42:	2604      	movs	r6, #4
	        Command.AutoRefreshNumber      = 2;
 8001f44:	e9cd 7803 	strd	r7, r8, [sp, #12]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f48:	f008 fde4 	bl	800ab14 <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001f4c:	f240 2322 	movw	r3, #546	; 0x222
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f50:	2710      	movs	r7, #16
	        Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
	        Command.AutoRefreshNumber      = 1;
	        Command.ModeRegisterDefinition = tmpmrd;

	        /* Send the command */
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f52:	a902      	add	r1, sp, #8
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 8001f54:	9301      	str	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f56:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 8001f5a:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f5c:	4620      	mov	r0, r4
	        Command.AutoRefreshNumber      = 1;
 8001f5e:	9504      	str	r5, [sp, #16]
	        Command.ModeRegisterDefinition = tmpmrd;
 8001f60:	9305      	str	r3, [sp, #20]
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8001f62:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8001f66:	f008 fdd5 	bl	800ab14 <HAL_SDRAM_SendCommand>

	        //HAL_SDRAM_ProgramRefreshRate(hsdram, 0x56A - 20);
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 762); // ((64ms / 8192) * 100MHz) - 20
 8001f6a:	f240 21fa 	movw	r1, #762	; 0x2fa
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f008 fdf0 	bl	800ab54 <HAL_SDRAM_ProgramRefreshRate>
	        //8192 is 2^numberofrows (which is 13 in the case of the sdram)

}
 8001f74:	b006      	add	sp, #24
 8001f76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20013f9c 	.word	0x20013f9c

08001f80 <setEffectsFunctions>:
	;
}

void setEffectsFunctions(FXType effectType, int i)
{
	effectsActive[i] = 1;
 8001f80:	4ba1      	ldr	r3, [pc, #644]	; (8002208 <setEffectsFunctions+0x288>)
 8001f82:	2201      	movs	r2, #1
{
 8001f84:	b410      	push	{r4}
	effectsActive[i] = 1;
 8001f86:	545a      	strb	r2, [r3, r1]
	switch (effectType)
 8001f88:	2815      	cmp	r0, #21
 8001f8a:	d82b      	bhi.n	8001fe4 <setEffectsFunctions+0x64>
 8001f8c:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001f90:	0217022b 	.word	0x0217022b
 8001f94:	01ef0203 	.word	0x01ef0203
 8001f98:	01d601e9 	.word	0x01d601e9
 8001f9c:	012601c2 	.word	0x012601c2
 8001fa0:	01010111 	.word	0x01010111
 8001fa4:	001600f1 	.word	0x001600f1
 8001fa8:	00c900dc 	.word	0x00c900dc
 8001fac:	00a300b6 	.word	0x00a300b6
 8001fb0:	007c0090 	.word	0x007c0090
 8001fb4:	00540068 	.word	0x00540068
 8001fb8:	002d0040 	.word	0x002d0040
			  effectSetters[i].setParam3 = &tiltParam3;
			  effectSetters[i].setParam4 = &tiltParam4;
			  effectSetters[i].setParam5 = &param5Linear;
			  break;
		  case Wavefolder:
			  effectTick[i] = &wavefolderTick;
 8001fbc:	4b93      	ldr	r3, [pc, #588]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001fbe:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &wavefolderTick;
 8001fc2:	4c93      	ldr	r4, [pc, #588]	; (8002210 <setEffectsFunctions+0x290>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001fc4:	4a93      	ldr	r2, [pc, #588]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &wavefolderTick;
 8001fc6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001fca:	4993      	ldr	r1, [pc, #588]	; (8002218 <setEffectsFunctions+0x298>)
 8001fcc:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &offsetParam2;
 8001fd0:	4c92      	ldr	r4, [pc, #584]	; (800221c <setEffectsFunctions+0x29c>)
			  effectSetters[i].setParam1 = &wavefolderParam1;
 8001fd2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &wavefolderParam3;
 8001fd6:	4892      	ldr	r0, [pc, #584]	; (8002220 <setEffectsFunctions+0x2a0>)
			  effectSetters[i].setParam4 = &param4Linear;
 8001fd8:	4992      	ldr	r1, [pc, #584]	; (8002224 <setEffectsFunctions+0x2a4>)
			  effectSetters[i].setParam5 = &param5Linear;
 8001fda:	4a93      	ldr	r2, [pc, #588]	; (8002228 <setEffectsFunctions+0x2a8>)
			  effectSetters[i].setParam3 = &tiltParam3;
 8001fdc:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &param5Linear;
 8001fe0:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
			  break;
		  default:
			  break;
	}
}
 8001fe4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fe8:	4770      	bx	lr
			  effectTick[i] = &FXLadderLowpassTick;
 8001fea:	4b88      	ldr	r3, [pc, #544]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001fec:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXLadderLowpassTick;
 8001ff0:	4a8e      	ldr	r2, [pc, #568]	; (800222c <setEffectsFunctions+0x2ac>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001ff2:	4888      	ldr	r0, [pc, #544]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXLadderLowpassTick;
 8001ff4:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8001ff8:	498d      	ldr	r1, [pc, #564]	; (8002230 <setEffectsFunctions+0x2b0>)
 8001ffa:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;;
 8001ffe:	4a8d      	ldr	r2, [pc, #564]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLadderParam1;;
 8002000:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8002004:	498c      	ldr	r1, [pc, #560]	; (8002238 <setEffectsFunctions+0x2b8>)
			  effectSetters[i].setParam2 = &blankFunction;;
 8002006:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLadderParam3;;
 8002008:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 800200a:	e9c3 2203 	strd	r2, r2, [r3, #12]
}
 800200e:	e7e9      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZbandrejectTick;
 8002010:	4b7e      	ldr	r3, [pc, #504]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8002012:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZbandrejectTick;
 8002016:	4a89      	ldr	r2, [pc, #548]	; (800223c <setEffectsFunctions+0x2bc>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8002018:	487e      	ldr	r0, [pc, #504]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZbandrejectTick;
 800201a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 800201e:	4988      	ldr	r1, [pc, #544]	; (8002240 <setEffectsFunctions+0x2c0>)
 8002020:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 8002024:	4a83      	ldr	r2, [pc, #524]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXNotchParam1;;
 8002026:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXNotchParam2;;
 800202a:	4886      	ldr	r0, [pc, #536]	; (8002244 <setEffectsFunctions+0x2c4>)
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 800202c:	4986      	ldr	r1, [pc, #536]	; (8002248 <setEffectsFunctions+0x2c8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 800202e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8002030:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXNotchParam3;;
 8002032:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8002036:	e7d5      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = FXVZhighshelfTick;
 8002038:	4b74      	ldr	r3, [pc, #464]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 800203a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = FXVZhighshelfTick;
 800203e:	4a83      	ldr	r2, [pc, #524]	; (800224c <setEffectsFunctions+0x2cc>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8002040:	4874      	ldr	r0, [pc, #464]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = FXVZhighshelfTick;
 8002042:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8002046:	4982      	ldr	r1, [pc, #520]	; (8002250 <setEffectsFunctions+0x2d0>)
 8002048:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;;
 800204c:	4a79      	ldr	r2, [pc, #484]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 800204e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8002052:	4880      	ldr	r0, [pc, #512]	; (8002254 <setEffectsFunctions+0x2d4>)
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8002054:	4980      	ldr	r1, [pc, #512]	; (8002258 <setEffectsFunctions+0x2d8>)
			  effectSetters[i].setParam4 = &blankFunction;;
 8002056:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;;
 8002058:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 800205a:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 800205e:	e7c1      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZlowshelfTick;
 8002060:	4b6a      	ldr	r3, [pc, #424]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8002062:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZlowshelfTick;
 8002066:	4a7d      	ldr	r2, [pc, #500]	; (800225c <setEffectsFunctions+0x2dc>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8002068:	486a      	ldr	r0, [pc, #424]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZlowshelfTick;
 800206a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 800206e:	497c      	ldr	r1, [pc, #496]	; (8002260 <setEffectsFunctions+0x2e0>)
 8002070:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8002074:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowShelfParam1;
 8002076:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXLowShelfParam2;
 800207a:	487a      	ldr	r0, [pc, #488]	; (8002264 <setEffectsFunctions+0x2e4>)
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 800207c:	497a      	ldr	r1, [pc, #488]	; (8002268 <setEffectsFunctions+0x2e8>)
			  effectSetters[i].setParam4 = &blankFunction;
 800207e:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8002080:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8002082:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8002086:	e7ad      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXVZpeakTick;
 8002088:	4b60      	ldr	r3, [pc, #384]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 800208a:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXVZpeakTick;
 800208e:	4a77      	ldr	r2, [pc, #476]	; (800226c <setEffectsFunctions+0x2ec>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8002090:	4860      	ldr	r0, [pc, #384]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXVZpeakTick;
 8002092:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXPeakParam1;
 8002096:	4976      	ldr	r1, [pc, #472]	; (8002270 <setEffectsFunctions+0x2f0>)
 8002098:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 800209c:	4a65      	ldr	r2, [pc, #404]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXPeakParam1;
 800209e:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &FXPeakParam2;
 80020a2:	4874      	ldr	r0, [pc, #464]	; (8002274 <setEffectsFunctions+0x2f4>)
			  effectSetters[i].setParam3 = &FXPeakParam3;
 80020a4:	4974      	ldr	r1, [pc, #464]	; (8002278 <setEffectsFunctions+0x2f8>)
			  effectSetters[i].setParam4 = &blankFunction;
 80020a6:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80020a8:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &FXPeakParam3;
 80020aa:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 80020ae:	e799      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXdiodeLowpassTick;
 80020b0:	4b56      	ldr	r3, [pc, #344]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 80020b2:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXdiodeLowpassTick;
 80020b6:	4a71      	ldr	r2, [pc, #452]	; (800227c <setEffectsFunctions+0x2fc>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 80020b8:	4856      	ldr	r0, [pc, #344]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXdiodeLowpassTick;
 80020ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 80020be:	4970      	ldr	r1, [pc, #448]	; (8002280 <setEffectsFunctions+0x300>)
 80020c0:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 80020c4:	4a5b      	ldr	r2, [pc, #364]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXDiodeParam1;
 80020c6:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 80020ca:	496e      	ldr	r1, [pc, #440]	; (8002284 <setEffectsFunctions+0x304>)
			  effectSetters[i].setParam2 = &blankFunction;
 80020cc:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXDiodeParam3;
 80020ce:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 80020d0:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 80020d4:	e786      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXbandpassTick;
 80020d6:	4b4d      	ldr	r3, [pc, #308]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 80020d8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXbandpassTick;
 80020dc:	4a6a      	ldr	r2, [pc, #424]	; (8002288 <setEffectsFunctions+0x308>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 80020de:	484d      	ldr	r0, [pc, #308]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXbandpassTick;
 80020e0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 80020e4:	4969      	ldr	r1, [pc, #420]	; (800228c <setEffectsFunctions+0x30c>)
 80020e6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 80020ea:	4a52      	ldr	r2, [pc, #328]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXBandpassParam1;
 80020ec:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 80020f0:	4967      	ldr	r1, [pc, #412]	; (8002290 <setEffectsFunctions+0x310>)
			  effectSetters[i].setParam2 = &blankFunction;
 80020f2:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXBandpassParam3;
 80020f4:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 80020f6:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 80020fa:	e773      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXhighpassTick;
 80020fc:	4b43      	ldr	r3, [pc, #268]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 80020fe:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXhighpassTick;
 8002102:	4a64      	ldr	r2, [pc, #400]	; (8002294 <setEffectsFunctions+0x314>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8002104:	4843      	ldr	r0, [pc, #268]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXhighpassTick;
 8002106:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 800210a:	4963      	ldr	r1, [pc, #396]	; (8002298 <setEffectsFunctions+0x318>)
 800210c:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8002110:	4a48      	ldr	r2, [pc, #288]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXHighpassParam1;
 8002112:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 8002116:	4961      	ldr	r1, [pc, #388]	; (800229c <setEffectsFunctions+0x31c>)
			  effectSetters[i].setParam2 = &blankFunction;
 8002118:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXHighpassParam3;
 800211a:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;
 800211c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8002120:	e760      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &FXlowpassTick;
 8002122:	4b3a      	ldr	r3, [pc, #232]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8002124:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &FXlowpassTick;
 8002128:	4a5d      	ldr	r2, [pc, #372]	; (80022a0 <setEffectsFunctions+0x320>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 800212a:	483a      	ldr	r0, [pc, #232]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &FXlowpassTick;
 800212c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8002130:	495c      	ldr	r1, [pc, #368]	; (80022a4 <setEffectsFunctions+0x324>)
 8002132:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam2 = &blankFunction;
 8002136:	4a3f      	ldr	r2, [pc, #252]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam1 = &FXLowpassParam1;
 8002138:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 800213c:	495a      	ldr	r1, [pc, #360]	; (80022a8 <setEffectsFunctions+0x328>)
			  effectSetters[i].setParam2 = &blankFunction;
 800213e:	605a      	str	r2, [r3, #4]
			  effectSetters[i].setParam3 = &FXLowpassParam3;
 8002140:	6099      	str	r1, [r3, #8]
			  effectSetters[i].setParam5 = &blankFunction;;
 8002142:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8002146:	e74d      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &delayTick;
 8002148:	4b30      	ldr	r3, [pc, #192]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &delayParam1;
 800214a:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &delayTick;
 800214e:	4c57      	ldr	r4, [pc, #348]	; (80022ac <setEffectsFunctions+0x32c>)
			  effectSetters[i].setParam1 = &delayParam1;
 8002150:	4a30      	ldr	r2, [pc, #192]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &delayTick;
 8002152:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &delayParam1;
 8002156:	4956      	ldr	r1, [pc, #344]	; (80022b0 <setEffectsFunctions+0x330>)
 8002158:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &delayParam2;
 800215c:	4c55      	ldr	r4, [pc, #340]	; (80022b4 <setEffectsFunctions+0x334>)
			  effectSetters[i].setParam1 = &delayParam1;
 800215e:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &delayParam3;
 8002162:	4855      	ldr	r0, [pc, #340]	; (80022b8 <setEffectsFunctions+0x338>)
			  effectSetters[i].setParam4 = &delayParam4;
 8002164:	4955      	ldr	r1, [pc, #340]	; (80022bc <setEffectsFunctions+0x33c>)
			  effectSetters[i].setParam5 = &delayParam5;
 8002166:	4a56      	ldr	r2, [pc, #344]	; (80022c0 <setEffectsFunctions+0x340>)
			  effectSetters[i].setParam3 = &delayParam3;
 8002168:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &delayParam5;
 800216c:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8002170:	e738      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &tiltFilterTick;
 8002172:	4b26      	ldr	r3, [pc, #152]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8002174:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &tiltFilterTick;
 8002178:	4c52      	ldr	r4, [pc, #328]	; (80022c4 <setEffectsFunctions+0x344>)
			  effectSetters[i].setParam1 = &tiltParam1;
 800217a:	4a26      	ldr	r2, [pc, #152]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &tiltFilterTick;
 800217c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &tiltParam1;
 8002180:	4951      	ldr	r1, [pc, #324]	; (80022c8 <setEffectsFunctions+0x348>)
 8002182:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &tiltParam2;
 8002186:	4c51      	ldr	r4, [pc, #324]	; (80022cc <setEffectsFunctions+0x34c>)
			  effectSetters[i].setParam1 = &tiltParam1;
 8002188:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &tiltParam3;
 800218c:	4850      	ldr	r0, [pc, #320]	; (80022d0 <setEffectsFunctions+0x350>)
			  effectSetters[i].setParam4 = &tiltParam4;
 800218e:	4951      	ldr	r1, [pc, #324]	; (80022d4 <setEffectsFunctions+0x354>)
 8002190:	e723      	b.n	8001fda <setEffectsFunctions+0x5a>
			  effectTick[i] = &bcTick;
 8002192:	4b1e      	ldr	r3, [pc, #120]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002194:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &bcTick;
 8002198:	4c4f      	ldr	r4, [pc, #316]	; (80022d8 <setEffectsFunctions+0x358>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800219a:	4a1e      	ldr	r2, [pc, #120]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &bcTick;
 800219c:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80021a0:	494e      	ldr	r1, [pc, #312]	; (80022dc <setEffectsFunctions+0x35c>)
 80021a2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &param2Linear;
 80021a6:	4c4e      	ldr	r4, [pc, #312]	; (80022e0 <setEffectsFunctions+0x360>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80021a8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &param3BC;
 80021ac:	484d      	ldr	r0, [pc, #308]	; (80022e4 <setEffectsFunctions+0x364>)
			  effectSetters[i].setParam4 = &param4Linear;
 80021ae:	491d      	ldr	r1, [pc, #116]	; (8002224 <setEffectsFunctions+0x2a4>)
 80021b0:	e713      	b.n	8001fda <setEffectsFunctions+0x5a>
			  effectTick[i] = &chorusTick;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &chorusParam1;
 80021b4:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &chorusTick;
 80021b8:	4c4b      	ldr	r4, [pc, #300]	; (80022e8 <setEffectsFunctions+0x368>)
			  effectSetters[i].setParam1 = &chorusParam1;
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &chorusTick;
 80021bc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &chorusParam1;
 80021c0:	494a      	ldr	r1, [pc, #296]	; (80022ec <setEffectsFunctions+0x36c>)
 80021c2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &chorusParam2;
 80021c6:	4c4a      	ldr	r4, [pc, #296]	; (80022f0 <setEffectsFunctions+0x370>)
			  effectSetters[i].setParam1 = &chorusParam1;
 80021c8:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &chorusParam3;
 80021cc:	4849      	ldr	r0, [pc, #292]	; (80022f4 <setEffectsFunctions+0x374>)
			  effectSetters[i].setParam4 = &chorusParam4;
 80021ce:	494a      	ldr	r1, [pc, #296]	; (80022f8 <setEffectsFunctions+0x378>)
			  effectSetters[i].setParam5 = &blankFunction;
 80021d0:	4a18      	ldr	r2, [pc, #96]	; (8002234 <setEffectsFunctions+0x2b4>)
			  effectSetters[i].setParam3 = &chorusParam3;
 80021d2:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 80021d6:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 80021da:	e703      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &compressorTick;
 80021dc:	4b0b      	ldr	r3, [pc, #44]	; (800220c <setEffectsFunctions+0x28c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 80021de:	eb01 0081 	add.w	r0, r1, r1, lsl #2
			  effectTick[i] = &compressorTick;
 80021e2:	4c46      	ldr	r4, [pc, #280]	; (80022fc <setEffectsFunctions+0x37c>)
			  effectSetters[i].setParam1 = &compressorParam1;
 80021e4:	4a0b      	ldr	r2, [pc, #44]	; (8002214 <setEffectsFunctions+0x294>)
			  effectTick[i] = &compressorTick;
 80021e6:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &compressorParam1;
 80021ea:	4945      	ldr	r1, [pc, #276]	; (8002300 <setEffectsFunctions+0x380>)
 80021ec:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			  effectSetters[i].setParam2 = &compressorParam2;
 80021f0:	4c44      	ldr	r4, [pc, #272]	; (8002304 <setEffectsFunctions+0x384>)
			  effectSetters[i].setParam1 = &compressorParam1;
 80021f2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			  effectSetters[i].setParam3 = &compressorParam3;
 80021f6:	4844      	ldr	r0, [pc, #272]	; (8002308 <setEffectsFunctions+0x388>)
			  effectSetters[i].setParam4 = &compressorParam4;
 80021f8:	4944      	ldr	r1, [pc, #272]	; (800230c <setEffectsFunctions+0x38c>)
			  effectSetters[i].setParam5 = &compressorParam5;
 80021fa:	4a45      	ldr	r2, [pc, #276]	; (8002310 <setEffectsFunctions+0x390>)
			  effectSetters[i].setParam3 = &compressorParam3;
 80021fc:	e9c3 4001 	strd	r4, r0, [r3, #4]
			  effectSetters[i].setParam5 = &compressorParam5;
 8002200:	e9c3 1203 	strd	r1, r2, [r3, #12]
			  break;
 8002204:	e6ee      	b.n	8001fe4 <setEffectsFunctions+0x64>
 8002206:	bf00      	nop
 8002208:	200140cc 	.word	0x200140cc
 800220c:	2001caa4 	.word	0x2001caa4
 8002210:	00007b01 	.word	0x00007b01
 8002214:	2001407c 	.word	0x2001407c
 8002218:	00007541 	.word	0x00007541
 800221c:	00007801 	.word	0x00007801
 8002220:	00007581 	.word	0x00007581
 8002224:	000079c1 	.word	0x000079c1
 8002228:	000079e1 	.word	0x000079e1
 800222c:	00008361 	.word	0x00008361
 8002230:	00008581 	.word	0x00008581
 8002234:	00001a01 	.word	0x00001a01
 8002238:	000087c1 	.word	0x000087c1
 800223c:	00008341 	.word	0x00008341
 8002240:	00008541 	.word	0x00008541
 8002244:	00008681 	.word	0x00008681
 8002248:	000087a1 	.word	0x000087a1
 800224c:	00008321 	.word	0x00008321
 8002250:	00008501 	.word	0x00008501
 8002254:	00008641 	.word	0x00008641
 8002258:	00008781 	.word	0x00008781
 800225c:	00008301 	.word	0x00008301
 8002260:	000084c1 	.word	0x000084c1
 8002264:	00008601 	.word	0x00008601
 8002268:	00008761 	.word	0x00008761
 800226c:	000082e1 	.word	0x000082e1
 8002270:	00008481 	.word	0x00008481
 8002274:	000085c1 	.word	0x000085c1
 8002278:	00008741 	.word	0x00008741
 800227c:	000082c1 	.word	0x000082c1
 8002280:	00008441 	.word	0x00008441
 8002284:	00008721 	.word	0x00008721
 8002288:	000082a1 	.word	0x000082a1
 800228c:	00008401 	.word	0x00008401
 8002290:	00008701 	.word	0x00008701
 8002294:	00008281 	.word	0x00008281
 8002298:	000083c1 	.word	0x000083c1
 800229c:	000086e1 	.word	0x000086e1
 80022a0:	00008261 	.word	0x00008261
 80022a4:	00008381 	.word	0x00008381
 80022a8:	000086c1 	.word	0x000086c1
 80022ac:	08004259 	.word	0x08004259
 80022b0:	00007d01 	.word	0x00007d01
 80022b4:	00007d41 	.word	0x00007d41
 80022b8:	00007d81 	.word	0x00007d81
 80022bc:	00007da1 	.word	0x00007da1
 80022c0:	00007dc1 	.word	0x00007dc1
 80022c4:	00007f41 	.word	0x00007f41
 80022c8:	000075c1 	.word	0x000075c1
 80022cc:	00007621 	.word	0x00007621
 80022d0:	00007681 	.word	0x00007681
 80022d4:	000076c1 	.word	0x000076c1
 80022d8:	00008201 	.word	0x00008201
 80022dc:	00007501 	.word	0x00007501
 80022e0:	00007821 	.word	0x00007821
 80022e4:	00007a21 	.word	0x00007a21
 80022e8:	00007de1 	.word	0x00007de1
 80022ec:	00007c21 	.word	0x00007c21
 80022f0:	00007c61 	.word	0x00007c61
 80022f4:	00007c81 	.word	0x00007c81
 80022f8:	00007cc1 	.word	0x00007cc1
 80022fc:	00008241 	.word	0x00008241
 8002300:	00007701 	.word	0x00007701
 8002304:	00007721 	.word	0x00007721
 8002308:	00007761 	.word	0x00007761
 800230c:	00007781 	.word	0x00007781
 8002310:	000077c1 	.word	0x000077c1
			  effectTick[i] = &shaperTick;
 8002314:	4b3d      	ldr	r3, [pc, #244]	; (800240c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002316:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &shaperTick;
 800231a:	4a3d      	ldr	r2, [pc, #244]	; (8002410 <setEffectsFunctions+0x490>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800231c:	483d      	ldr	r0, [pc, #244]	; (8002414 <setEffectsFunctions+0x494>)
			  effectTick[i] = &shaperTick;
 800231e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002322:	493d      	ldr	r1, [pc, #244]	; (8002418 <setEffectsFunctions+0x498>)
 8002324:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8002328:	4a3c      	ldr	r2, [pc, #240]	; (800241c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800232a:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 800232e:	483c      	ldr	r0, [pc, #240]	; (8002420 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Linear;
 8002330:	493c      	ldr	r1, [pc, #240]	; (8002424 <setEffectsFunctions+0x4a4>)
			  effectSetters[i].setParam4 = &blankFunction;
 8002332:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 8002334:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Linear;
 8002336:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 800233a:	e653      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 800233c:	4835      	ldr	r0, [pc, #212]	; (8002414 <setEffectsFunctions+0x494>)
 800233e:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &tanhTick;
 8002342:	4b32      	ldr	r3, [pc, #200]	; (800240c <setEffectsFunctions+0x48c>)
 8002344:	4a38      	ldr	r2, [pc, #224]	; (8002428 <setEffectsFunctions+0x4a8>)
 8002346:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 800234a:	eb00 038c 	add.w	r3, r0, ip, lsl #2
 800234e:	4932      	ldr	r1, [pc, #200]	; (8002418 <setEffectsFunctions+0x498>)
			  effectSetters[i].setParam3 = &blankFunction;
 8002350:	4a32      	ldr	r2, [pc, #200]	; (800241c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002352:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8002356:	4932      	ldr	r1, [pc, #200]	; (8002420 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &blankFunction;
 8002358:	609a      	str	r2, [r3, #8]
			  effectSetters[i].setParam2 = &offsetParam2;
 800235a:	6059      	str	r1, [r3, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 800235c:	e9c3 2203 	strd	r2, r2, [r3, #12]
			  break;
 8002360:	e640      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002362:	482c      	ldr	r0, [pc, #176]	; (8002414 <setEffectsFunctions+0x494>)
 8002364:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &satTick;
 8002368:	4b28      	ldr	r3, [pc, #160]	; (800240c <setEffectsFunctions+0x48c>)
 800236a:	4a30      	ldr	r2, [pc, #192]	; (800242c <setEffectsFunctions+0x4ac>)
 800236c:	e7eb      	b.n	8002346 <setEffectsFunctions+0x3c6>
			  effectTick[i] = &polynomialShaperTick;
 800236e:	4b27      	ldr	r3, [pc, #156]	; (800240c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002370:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &polynomialShaperTick;
 8002374:	4a2e      	ldr	r2, [pc, #184]	; (8002430 <setEffectsFunctions+0x4b0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002376:	4827      	ldr	r0, [pc, #156]	; (8002414 <setEffectsFunctions+0x494>)
			  effectTick[i] = &polynomialShaperTick;
 8002378:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 800237c:	4926      	ldr	r1, [pc, #152]	; (8002418 <setEffectsFunctions+0x498>)
 800237e:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 8002382:	4a26      	ldr	r2, [pc, #152]	; (800241c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002384:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 8002388:	4825      	ldr	r0, [pc, #148]	; (8002420 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Poly;
 800238a:	492a      	ldr	r1, [pc, #168]	; (8002434 <setEffectsFunctions+0x4b4>)
			  effectSetters[i].setParam4 = &blankFunction;
 800238c:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 800238e:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Poly;
 8002390:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 8002394:	e626      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &hardClipTick;
 8002396:	4b1d      	ldr	r3, [pc, #116]	; (800240c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 8002398:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &hardClipTick;
 800239c:	4a26      	ldr	r2, [pc, #152]	; (8002438 <setEffectsFunctions+0x4b8>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 800239e:	481d      	ldr	r0, [pc, #116]	; (8002414 <setEffectsFunctions+0x494>)
			  effectTick[i] = &hardClipTick;
 80023a0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80023a4:	491c      	ldr	r1, [pc, #112]	; (8002418 <setEffectsFunctions+0x498>)
 80023a6:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 80023aa:	4a1c      	ldr	r2, [pc, #112]	; (800241c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80023ac:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80023b0:	481b      	ldr	r0, [pc, #108]	; (8002420 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Hard;
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <setEffectsFunctions+0x4bc>)
			  effectSetters[i].setParam4 = &blankFunction;
 80023b4:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80023b6:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Hard;
 80023b8:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 80023bc:	e612      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectTick[i] = &softClipTick;
 80023be:	4b13      	ldr	r3, [pc, #76]	; (800240c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80023c0:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
			  effectTick[i] = &softClipTick;
 80023c4:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <setEffectsFunctions+0x4c0>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80023c6:	4813      	ldr	r0, [pc, #76]	; (8002414 <setEffectsFunctions+0x494>)
			  effectTick[i] = &softClipTick;
 80023c8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
			  effectSetters[i].setParam1 = &clipperGainSet;
 80023cc:	4912      	ldr	r1, [pc, #72]	; (8002418 <setEffectsFunctions+0x498>)
 80023ce:	eb00 038c 	add.w	r3, r0, ip, lsl #2
			  effectSetters[i].setParam4 = &blankFunction;
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <setEffectsFunctions+0x49c>)
			  effectSetters[i].setParam1 = &clipperGainSet;
 80023d4:	f840 102c 	str.w	r1, [r0, ip, lsl #2]
			  effectSetters[i].setParam2 = &offsetParam2;
 80023d8:	4811      	ldr	r0, [pc, #68]	; (8002420 <setEffectsFunctions+0x4a0>)
			  effectSetters[i].setParam3 = &param3Soft;
 80023da:	491a      	ldr	r1, [pc, #104]	; (8002444 <setEffectsFunctions+0x4c4>)
			  effectSetters[i].setParam4 = &blankFunction;
 80023dc:	60da      	str	r2, [r3, #12]
			  effectSetters[i].setParam5 = &blankFunction;
 80023de:	611a      	str	r2, [r3, #16]
			  effectSetters[i].setParam3 = &param3Soft;
 80023e0:	e9c3 0101 	strd	r0, r1, [r3, #4]
			  break;
 80023e4:	e5fe      	b.n	8001fe4 <setEffectsFunctions+0x64>
			  effectSetters[i].setParam1 = &blankFunction;
 80023e6:	480d      	ldr	r0, [pc, #52]	; (800241c <setEffectsFunctions+0x49c>)
 80023e8:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 80023ec:	4a09      	ldr	r2, [pc, #36]	; (8002414 <setEffectsFunctions+0x494>)
			  effectTick[i] = &blankTick;
 80023ee:	4c07      	ldr	r4, [pc, #28]	; (800240c <setEffectsFunctions+0x48c>)
			  effectSetters[i].setParam1 = &blankFunction;
 80023f0:	f842 002c 	str.w	r0, [r2, ip, lsl #2]
 80023f4:	eb02 028c 	add.w	r2, r2, ip, lsl #2
			  effectSetters[i].setParam3 = &blankFunction;
 80023f8:	e9c2 0001 	strd	r0, r0, [r2, #4]
			  effectSetters[i].setParam5 = &blankFunction;
 80023fc:	e9c2 0003 	strd	r0, r0, [r2, #12]
			  effectsActive[i] = 0;
 8002400:	2200      	movs	r2, #0
 8002402:	545a      	strb	r2, [r3, r1]
			  effectTick[i] = &blankTick;
 8002404:	4b10      	ldr	r3, [pc, #64]	; (8002448 <setEffectsFunctions+0x4c8>)
 8002406:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
			  break;
 800240a:	e5eb      	b.n	8001fe4 <setEffectsFunctions+0x64>
 800240c:	2001caa4 	.word	0x2001caa4
 8002410:	00007ec1 	.word	0x00007ec1
 8002414:	2001407c 	.word	0x2001407c
 8002418:	00007501 	.word	0x00007501
 800241c:	00001a01 	.word	0x00001a01
 8002420:	00007801 	.word	0x00007801
 8002424:	00007841 	.word	0x00007841
 8002428:	00007f81 	.word	0x00007f81
 800242c:	00008181 	.word	0x00008181
 8002430:	000080e1 	.word	0x000080e1
 8002434:	00007941 	.word	0x00007941
 8002438:	00008041 	.word	0x00008041
 800243c:	000078c1 	.word	0x000078c1
 8002440:	00007fe1 	.word	0x00007fe1
 8002444:	00007861 	.word	0x00007861
 8002448:	00007f21 	.word	0x00007f21

0800244c <setFilterTypes>:
		  default:
			  break;
	}
}
void setFilterTypes(int filterType, int i)
{
 800244c:	b410      	push	{r4}
	switch (filterType)
 800244e:	2808      	cmp	r0, #8
 8002450:	d812      	bhi.n	8002478 <setFilterTypes+0x2c>
 8002452:	e8df f000 	tbb	[pc, r0]
 8002456:	3223      	.short	0x3223
 8002458:	6e5f5041 	.word	0x6e5f5041
 800245c:	057d      	.short	0x057d
 800245e:	14          	.byte	0x14
 800245f:	00          	.byte	0x00
				  filterSetters[i].setQ = &VZhighshelfSetQ;
				  filterSetters[i].setGain = &VZhighshelfSetGain;
				  break;
			  case 7:
				  filterTick[i] = &VZbandrejectTick;
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8002460:	4b43      	ldr	r3, [pc, #268]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &VZbandrejectTick;
 8002462:	4a44      	ldr	r2, [pc, #272]	; (8002574 <setFilterTypes+0x128>)
 8002464:	4844      	ldr	r0, [pc, #272]	; (8002578 <setFilterTypes+0x12c>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8002466:	4c45      	ldr	r4, [pc, #276]	; (800257c <setFilterTypes+0x130>)
				  filterTick[i] = &VZbandrejectTick;
 8002468:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 800246c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002470:	4843      	ldr	r0, [pc, #268]	; (8002580 <setFilterTypes+0x134>)
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8002472:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8002476:	6050      	str	r0, [r2, #4]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
				  break;
			  default:
				  break;
		}
}
 8002478:	f85d 4b04 	ldr.w	r4, [sp], #4
 800247c:	4770      	bx	lr
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &LadderLowpassTick;
 8002480:	4a3c      	ldr	r2, [pc, #240]	; (8002574 <setFilterTypes+0x128>)
 8002482:	4840      	ldr	r0, [pc, #256]	; (8002584 <setFilterTypes+0x138>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8002484:	4c40      	ldr	r4, [pc, #256]	; (8002588 <setFilterTypes+0x13c>)
				  filterTick[i] = &LadderLowpassTick;
 8002486:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 800248a:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 800248e:	483f      	ldr	r0, [pc, #252]	; (800258c <setFilterTypes+0x140>)
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8002490:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8002494:	6050      	str	r0, [r2, #4]
}
 8002496:	f85d 4b04 	ldr.w	r4, [sp], #4
 800249a:	4770      	bx	lr
				  filterSetters[i].setQ = &lowpassSetQ;
 800249c:	4b34      	ldr	r3, [pc, #208]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &lowpassTick;
 800249e:	4a35      	ldr	r2, [pc, #212]	; (8002574 <setFilterTypes+0x128>)
 80024a0:	483b      	ldr	r0, [pc, #236]	; (8002590 <setFilterTypes+0x144>)
				  filterSetters[i].setQ = &lowpassSetQ;
 80024a2:	4c3c      	ldr	r4, [pc, #240]	; (8002594 <setFilterTypes+0x148>)
				  filterTick[i] = &lowpassTick;
 80024a4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &lowpassSetGain;
 80024a8:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80024ac:	483a      	ldr	r0, [pc, #232]	; (8002598 <setFilterTypes+0x14c>)
				  filterSetters[i].setQ = &lowpassSetQ;
 80024ae:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &lowpassSetGain;
 80024b2:	6050      	str	r0, [r2, #4]
}
 80024b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024b8:	4770      	bx	lr
				  filterSetters[i].setQ = &highpassSetQ;
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &highpassTick;
 80024bc:	4a2d      	ldr	r2, [pc, #180]	; (8002574 <setFilterTypes+0x128>)
 80024be:	4837      	ldr	r0, [pc, #220]	; (800259c <setFilterTypes+0x150>)
				  filterSetters[i].setQ = &highpassSetQ;
 80024c0:	4c37      	ldr	r4, [pc, #220]	; (80025a0 <setFilterTypes+0x154>)
				  filterTick[i] = &highpassTick;
 80024c2:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &highpassSetGain;
 80024c6:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80024ca:	4836      	ldr	r0, [pc, #216]	; (80025a4 <setFilterTypes+0x158>)
				  filterSetters[i].setQ = &highpassSetQ;
 80024cc:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &highpassSetGain;
 80024d0:	6050      	str	r0, [r2, #4]
}
 80024d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024d6:	4770      	bx	lr
				  filterSetters[i].setQ = &bandpassSetQ;
 80024d8:	4b25      	ldr	r3, [pc, #148]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &bandpassTick;
 80024da:	4a26      	ldr	r2, [pc, #152]	; (8002574 <setFilterTypes+0x128>)
 80024dc:	4832      	ldr	r0, [pc, #200]	; (80025a8 <setFilterTypes+0x15c>)
				  filterSetters[i].setQ = &bandpassSetQ;
 80024de:	4c33      	ldr	r4, [pc, #204]	; (80025ac <setFilterTypes+0x160>)
				  filterTick[i] = &bandpassTick;
 80024e0:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &bandpassSetGain;
 80024e4:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 80024e8:	4831      	ldr	r0, [pc, #196]	; (80025b0 <setFilterTypes+0x164>)
				  filterSetters[i].setQ = &bandpassSetQ;
 80024ea:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &bandpassSetGain;
 80024ee:	6050      	str	r0, [r2, #4]
}
 80024f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80024f4:	4770      	bx	lr
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 80024f6:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &diodeLowpassTick;
 80024f8:	4a1e      	ldr	r2, [pc, #120]	; (8002574 <setFilterTypes+0x128>)
 80024fa:	482e      	ldr	r0, [pc, #184]	; (80025b4 <setFilterTypes+0x168>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 80024fc:	4c2e      	ldr	r4, [pc, #184]	; (80025b8 <setFilterTypes+0x16c>)
				  filterTick[i] = &diodeLowpassTick;
 80024fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8002502:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002506:	482d      	ldr	r0, [pc, #180]	; (80025bc <setFilterTypes+0x170>)
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8002508:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 800250c:	6050      	str	r0, [r2, #4]
}
 800250e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002512:	4770      	bx	lr
				  filterSetters[i].setQ = &VZpeakSetQ;
 8002514:	4b16      	ldr	r3, [pc, #88]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &VZpeakTick;
 8002516:	4a17      	ldr	r2, [pc, #92]	; (8002574 <setFilterTypes+0x128>)
 8002518:	4829      	ldr	r0, [pc, #164]	; (80025c0 <setFilterTypes+0x174>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 800251a:	4c2a      	ldr	r4, [pc, #168]	; (80025c4 <setFilterTypes+0x178>)
				  filterTick[i] = &VZpeakTick;
 800251c:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8002520:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002524:	4828      	ldr	r0, [pc, #160]	; (80025c8 <setFilterTypes+0x17c>)
				  filterSetters[i].setQ = &VZpeakSetQ;
 8002526:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZpeakSetGain;
 800252a:	6050      	str	r0, [r2, #4]
}
 800252c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002530:	4770      	bx	lr
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &VZlowshelfTick;
 8002534:	4a0f      	ldr	r2, [pc, #60]	; (8002574 <setFilterTypes+0x128>)
 8002536:	4825      	ldr	r0, [pc, #148]	; (80025cc <setFilterTypes+0x180>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8002538:	4c25      	ldr	r4, [pc, #148]	; (80025d0 <setFilterTypes+0x184>)
				  filterTick[i] = &VZlowshelfTick;
 800253a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 800253e:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002542:	4824      	ldr	r0, [pc, #144]	; (80025d4 <setFilterTypes+0x188>)
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8002544:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8002548:	6050      	str	r0, [r2, #4]
}
 800254a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800254e:	4770      	bx	lr
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8002550:	4b07      	ldr	r3, [pc, #28]	; (8002570 <setFilterTypes+0x124>)
				  filterTick[i] = &VZhighshelfTick;
 8002552:	4a08      	ldr	r2, [pc, #32]	; (8002574 <setFilterTypes+0x128>)
 8002554:	4820      	ldr	r0, [pc, #128]	; (80025d8 <setFilterTypes+0x18c>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8002556:	4c21      	ldr	r4, [pc, #132]	; (80025dc <setFilterTypes+0x190>)
				  filterTick[i] = &VZhighshelfTick;
 8002558:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 800255c:	eb03 02c1 	add.w	r2, r3, r1, lsl #3
 8002560:	481f      	ldr	r0, [pc, #124]	; (80025e0 <setFilterTypes+0x194>)
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8002562:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8002566:	6050      	str	r0, [r2, #4]
}
 8002568:	f85d 4b04 	ldr.w	r4, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200160d0 	.word	0x200160d0
 8002574:	2001cb18 	.word	0x2001cb18
 8002578:	00006901 	.word	0x00006901
 800257c:	00006b81 	.word	0x00006b81
 8002580:	00006d81 	.word	0x00006d81
 8002584:	00006961 	.word	0x00006961
 8002588:	00006ba1 	.word	0x00006ba1
 800258c:	00006dc1 	.word	0x00006dc1
 8002590:	000066c1 	.word	0x000066c1
 8002594:	00006aa1 	.word	0x00006aa1
 8002598:	00006bc1 	.word	0x00006bc1
 800259c:	00006721 	.word	0x00006721
 80025a0:	00006ac1 	.word	0x00006ac1
 80025a4:	00006c01 	.word	0x00006c01
 80025a8:	00006781 	.word	0x00006781
 80025ac:	00006ae1 	.word	0x00006ae1
 80025b0:	00006c41 	.word	0x00006c41
 80025b4:	000067e1 	.word	0x000067e1
 80025b8:	00006b01 	.word	0x00006b01
 80025bc:	00006c81 	.word	0x00006c81
 80025c0:	00006841 	.word	0x00006841
 80025c4:	00006b21 	.word	0x00006b21
 80025c8:	00006cc1 	.word	0x00006cc1
 80025cc:	00006881 	.word	0x00006881
 80025d0:	00006b41 	.word	0x00006b41
 80025d4:	00006d01 	.word	0x00006d01
 80025d8:	000068c1 	.word	0x000068c1
 80025dc:	00006b61 	.word	0x00006b61
 80025e0:	00006d41 	.word	0x00006d41

080025e4 <setLFOShapes>:

void setLFOShapes(int LFOShape, int i)
{
 80025e4:	b410      	push	{r4}
	switch(LFOShape)
 80025e6:	2805      	cmp	r0, #5
 80025e8:	d814      	bhi.n	8002614 <setLFOShapes+0x30>
 80025ea:	e8df f000 	tbb	[pc, r0]
 80025ee:	3c29      	.short	0x3c29
 80025f0:	1603624f 	.word	0x1603624f
			lfoSetters[i].setRate = &lfoTriSetRate;
			lfoSetters[i].setShape = &lfoTriSetShape;
			lfoSetters[i].setPhase = &lfoTriSetPhase;
			break;
		case SawLFOShapeSet:
			lfoShapeTick[i] = &lfoSawTick;
 80025f4:	4b38      	ldr	r3, [pc, #224]	; (80026d8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 80025f6:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawTick;
 80025fa:	4c38      	ldr	r4, [pc, #224]	; (80026dc <setLFOShapes+0xf8>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 80025fc:	4a38      	ldr	r2, [pc, #224]	; (80026e0 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawTick;
 80025fe:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSetRate;
 8002602:	4c38      	ldr	r4, [pc, #224]	; (80026e4 <setLFOShapes+0x100>)
 8002604:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSetShape;
 8002608:	4937      	ldr	r1, [pc, #220]	; (80026e8 <setLFOShapes+0x104>)
			lfoSetters[i].setRate = &lfoSawSetRate;
 800260a:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSetPhase;
 800260e:	4a37      	ldr	r2, [pc, #220]	; (80026ec <setLFOShapes+0x108>)
 8002610:	e9c3 1201 	strd	r1, r2, [r3, #4]
			lfoSetters[i].setRate = &lfoPulseSetRate;
			lfoSetters[i].setShape = &lfoPulseSetShape;
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
			break;
	}
}
 8002614:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002618:	4770      	bx	lr
			lfoShapeTick[i] = &lfoPulseTick;
 800261a:	4b2f      	ldr	r3, [pc, #188]	; (80026d8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 800261c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoPulseTick;
 8002620:	4c33      	ldr	r4, [pc, #204]	; (80026f0 <setLFOShapes+0x10c>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002622:	4a2f      	ldr	r2, [pc, #188]	; (80026e0 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoPulseTick;
 8002624:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002628:	4c32      	ldr	r4, [pc, #200]	; (80026f4 <setLFOShapes+0x110>)
 800262a:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoPulseSetShape;
 800262e:	4932      	ldr	r1, [pc, #200]	; (80026f8 <setLFOShapes+0x114>)
			lfoSetters[i].setRate = &lfoPulseSetRate;
 8002630:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8002634:	4a31      	ldr	r2, [pc, #196]	; (80026fc <setLFOShapes+0x118>)
 8002636:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 800263a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800263e:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTriTick;
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8002642:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTriTick;
 8002646:	4c2e      	ldr	r4, [pc, #184]	; (8002700 <setLFOShapes+0x11c>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8002648:	4a25      	ldr	r2, [pc, #148]	; (80026e0 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTriTick;
 800264a:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 800264e:	4c2d      	ldr	r4, [pc, #180]	; (8002704 <setLFOShapes+0x120>)
 8002650:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineTriSetShape;
 8002654:	492c      	ldr	r1, [pc, #176]	; (8002708 <setLFOShapes+0x124>)
			lfoSetters[i].setRate = &lfoSineTriSetRate;
 8002656:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 800265a:	4a2c      	ldr	r2, [pc, #176]	; (800270c <setLFOShapes+0x128>)
 800265c:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002660:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002664:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSawSquareTick;
 8002666:	4b1c      	ldr	r3, [pc, #112]	; (80026d8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8002668:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSawSquareTick;
 800266c:	4c28      	ldr	r4, [pc, #160]	; (8002710 <setLFOShapes+0x12c>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800266e:	4a1c      	ldr	r2, [pc, #112]	; (80026e0 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSawSquareTick;
 8002670:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8002674:	4c27      	ldr	r4, [pc, #156]	; (8002714 <setLFOShapes+0x130>)
 8002676:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSawSquareSetShape;
 800267a:	4927      	ldr	r1, [pc, #156]	; (8002718 <setLFOShapes+0x134>)
			lfoSetters[i].setRate = &lfoSawSquareSetRate;
 800267c:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8002680:	4a26      	ldr	r2, [pc, #152]	; (800271c <setLFOShapes+0x138>)
 8002682:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 8002686:	f85d 4b04 	ldr.w	r4, [sp], #4
 800268a:	4770      	bx	lr
			lfoShapeTick[i] = &lfoSineTick;
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 800268e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoSineTick;
 8002692:	4c23      	ldr	r4, [pc, #140]	; (8002720 <setLFOShapes+0x13c>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 8002694:	4a12      	ldr	r2, [pc, #72]	; (80026e0 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoSineTick;
 8002696:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoSineSetRate;
 800269a:	4c22      	ldr	r4, [pc, #136]	; (8002724 <setLFOShapes+0x140>)
 800269c:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoSineSetShape;
 80026a0:	4921      	ldr	r1, [pc, #132]	; (8002728 <setLFOShapes+0x144>)
			lfoSetters[i].setRate = &lfoSineSetRate;
 80026a2:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoSineSetPhase;
 80026a6:	4a21      	ldr	r2, [pc, #132]	; (800272c <setLFOShapes+0x148>)
 80026a8:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80026ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026b0:	4770      	bx	lr
			lfoShapeTick[i] = &lfoTriTick;
 80026b2:	4b09      	ldr	r3, [pc, #36]	; (80026d8 <setLFOShapes+0xf4>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 80026b4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
			lfoShapeTick[i] = &lfoTriTick;
 80026b8:	4c1d      	ldr	r4, [pc, #116]	; (8002730 <setLFOShapes+0x14c>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 80026ba:	4a09      	ldr	r2, [pc, #36]	; (80026e0 <setLFOShapes+0xfc>)
			lfoShapeTick[i] = &lfoTriTick;
 80026bc:	f843 4021 	str.w	r4, [r3, r1, lsl #2]
			lfoSetters[i].setRate = &lfoTriSetRate;
 80026c0:	4c1c      	ldr	r4, [pc, #112]	; (8002734 <setLFOShapes+0x150>)
 80026c2:	eb02 0380 	add.w	r3, r2, r0, lsl #2
			lfoSetters[i].setShape = &lfoTriSetShape;
 80026c6:	491c      	ldr	r1, [pc, #112]	; (8002738 <setLFOShapes+0x154>)
			lfoSetters[i].setRate = &lfoTriSetRate;
 80026c8:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
			lfoSetters[i].setPhase = &lfoTriSetPhase;
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <setLFOShapes+0x158>)
 80026ce:	e9c3 1201 	strd	r1, r2, [r3, #4]
}
 80026d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	2001cc9c 	.word	0x2001cc9c
 80026dc:	00007261 	.word	0x00007261
 80026e0:	200181fc 	.word	0x200181fc
 80026e4:	00007341 	.word	0x00007341
 80026e8:	000074c1 	.word	0x000074c1
 80026ec:	00007401 	.word	0x00007401
 80026f0:	000072a1 	.word	0x000072a1
 80026f4:	00007361 	.word	0x00007361
 80026f8:	000074e1 	.word	0x000074e1
 80026fc:	00007421 	.word	0x00007421
 8002700:	00007201 	.word	0x00007201
 8002704:	000072e1 	.word	0x000072e1
 8002708:	00007461 	.word	0x00007461
 800270c:	000073a1 	.word	0x000073a1
 8002710:	000071e1 	.word	0x000071e1
 8002714:	000072c1 	.word	0x000072c1
 8002718:	00007441 	.word	0x00007441
 800271c:	00007381 	.word	0x00007381
 8002720:	00007221 	.word	0x00007221
 8002724:	00007301 	.word	0x00007301
 8002728:	00007481 	.word	0x00007481
 800272c:	000073c1 	.word	0x000073c1
 8002730:	00007241 	.word	0x00007241
 8002734:	00007321 	.word	0x00007321
 8002738:	000074a1 	.word	0x000074a1
 800273c:	000073e1 	.word	0x000073e1

08002740 <main>:
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002740:	4bbe      	ldr	r3, [pc, #760]	; (8002a3c <main+0x2fc>)
{
 8002742:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002746:	ed2d 8b04 	vpush	{d8-d9}
 800274a:	695a      	ldr	r2, [r3, #20]
 800274c:	b08f      	sub	sp, #60	; 0x3c
 800274e:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8002752:	d111      	bne.n	8002778 <main+0x38>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002754:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002758:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800275c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002760:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002764:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002768:	695a      	ldr	r2, [r3, #20]
 800276a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800276e:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002770:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002774:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002778:	48b0      	ldr	r0, [pc, #704]	; (8002a3c <main+0x2fc>)
 800277a:	6943      	ldr	r3, [r0, #20]
 800277c:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 8002780:	d124      	bne.n	80027cc <main+0x8c>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002782:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002786:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800278a:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800278e:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002792:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002796:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 800279a:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800279c:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80027a0:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80027a2:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80027a6:	3b01      	subs	r3, #1
 80027a8:	1c5f      	adds	r7, r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80027aa:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80027ae:	d1f8      	bne.n	80027a2 <main+0x62>
    } while(sets-- != 0U);
 80027b0:	3c20      	subs	r4, #32
 80027b2:	f114 0f20 	cmn.w	r4, #32
 80027b6:	d1f1      	bne.n	800279c <main+0x5c>
 80027b8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80027bc:	6943      	ldr	r3, [r0, #20]
 80027be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c2:	6143      	str	r3, [r0, #20]
 80027c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80027c8:	f3bf 8f6f 	isb	sy

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027cc:	2400      	movs	r4, #0
  HAL_Init();
 80027ce:	f001 fe11 	bl	80043f4 <HAL_Init>
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027d2:	2501      	movs	r5, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80027d4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
 80027d8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
  HAL_MPU_Disable();
 80027dc:	f001 fee2 	bl	80045a4 <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80027e0:	f248 721f 	movw	r2, #34591	; 0x871f
 80027e4:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027e8:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027ea:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80027ee:	930d      	str	r3, [sp, #52]	; 0x34
 80027f0:	e9cd 420b 	strd	r4, r2, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027f4:	f001 fef4 	bl	80045e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 80027f8:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 80027fc:	4b90      	ldr	r3, [pc, #576]	; (8002a40 <main+0x300>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027fe:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8002800:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8002804:	e9cd 230b 	strd	r2, r3, [sp, #44]	; 0x2c
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002808:	f001 feea 	bl	80045e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 800280c:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002810:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002812:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8002814:	930b      	str	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8002816:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8002818:	f88d 2029 	strb.w	r2, [sp, #41]	; 0x29
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800281c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002820:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002824:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002828:	f001 feda 	bl	80045e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800282c:	2103      	movs	r1, #3
  MPU_InitStruct.BaseAddress = 0x60000000;
 800282e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8002832:	2318      	movs	r3, #24
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002834:	a80a      	add	r0, sp, #40	; 0x28
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8002836:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
  MPU_InitStruct.BaseAddress = 0x60000000;
 800283a:	920b      	str	r2, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800283c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002840:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002844:	f001 fecc 	bl	80045e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002848:	2004      	movs	r0, #4
 800284a:	f001 feb9 	bl	80045c0 <HAL_MPU_Enable>
  \details Enables IRQ interrupts by clearing special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 800284e:	b662      	cpsie	i
  SystemClock_Config();
 8002850:	f7fe ff90 	bl	8001774 <SystemClock_Config>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8002854:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 8002b0c <main+0x3cc>
  PeriphCommonClock_Config();
 8002858:	f7ff f80a 	bl	8001870 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800285c:	f7fe fdec 	bl	8001438 <MX_GPIO_Init>
  MX_DMA_Init();
 8002860:	f7fe fcf6 	bl	8001250 <MX_DMA_Init>
  MX_FMC_Init();
 8002864:	f7fe fd30 	bl	80012c8 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8002868:	f000 fddc 	bl	8003424 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800286c:	f00a fa60 	bl	800cd30 <MX_FATFS_Init>
  MX_SAI1_Init();
 8002870:	f000 fcde 	bl	8003230 <MX_SAI1_Init>
  MX_RNG_Init();
 8002874:	f000 fc9c 	bl	80031b0 <MX_RNG_Init>
  MX_I2C2_Init();
 8002878:	f7fe fee2 	bl	8001640 <MX_I2C2_Init>
  MX_SPI1_Init();
 800287c:	f000 fe48 	bl	8003510 <MX_SPI1_Init>
  MX_SPI5_Init();
 8002880:	f000 fe72 	bl	8003568 <MX_SPI5_Init>
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8002884:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002888:	486e      	ldr	r0, [pc, #440]	; (8002a44 <main+0x304>)
 800288a:	f003 fdb1 	bl	80063f0 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 800288e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8002892:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_14);
 8002894:	486b      	ldr	r0, [pc, #428]	; (8002a44 <main+0x304>)
 8002896:	f003 fdab 	bl	80063f0 <HAL_GPIO_ReadPin>
 800289a:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2);
 800289c:	2104      	movs	r1, #4
 800289e:	486a      	ldr	r0, [pc, #424]	; (8002a48 <main+0x308>)
 80028a0:	f003 fda6 	bl	80063f0 <HAL_GPIO_ReadPin>
 80028a4:	4602      	mov	r2, r0
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80028a6:	00a3      	lsls	r3, r4, #2
	HAL_Delay(500);
 80028a8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 80028ac:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80028b0:	4413      	add	r3, r2
 80028b2:	f888 3000 	strb.w	r3, [r8]
	HAL_Delay(500);
 80028b6:	f001 fddf 	bl	8004478 <HAL_Delay>
   PWR->CR1 |= PWR_CR1_DBP;
 80028ba:	4a64      	ldr	r2, [pc, #400]	; (8002a4c <main+0x30c>)
 80028bc:	6813      	ldr	r3, [r2, #0]
 80028be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028c2:	6013      	str	r3, [r2, #0]
   while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80028c4:	6813      	ldr	r3, [r2, #0]
 80028c6:	05d9      	lsls	r1, r3, #23
 80028c8:	d5fc      	bpl.n	80028c4 <main+0x184>
   __HAL_RCC_BKPRAM_CLK_ENABLE();
 80028ca:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <main+0x310>)
 80028cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80028d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80028d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028e0:	9305      	str	r3, [sp, #20]
 80028e2:	9b05      	ldr	r3, [sp, #20]
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_get_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  return __builtin_arm_get_fpscr();
 80028e4:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 80028e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
     (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
#if __has_builtin(__builtin_arm_set_fpscr)
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
 80028ec:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80028f0:	4952      	ldr	r1, [pc, #328]	; (8002a3c <main+0x2fc>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 80028f2:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <main+0x314>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80028f4:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
 80028f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fc:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8002900:	f8d2 3fb4 	ldr.w	r3, [r2, #4020]	; 0xfb4
 8002904:	07db      	lsls	r3, r3, #31
 8002906:	d502      	bpl.n	800290e <main+0x1ce>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 8002908:	4b53      	ldr	r3, [pc, #332]	; (8002a58 <main+0x318>)
 800290a:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
  DWT->CYCCNT = 0;
 800290e:	4b51      	ldr	r3, [pc, #324]	; (8002a54 <main+0x314>)
 8002910:	2100      	movs	r1, #0
  DWT->CTRL = 0x40000001;
 8002912:	4a52      	ldr	r2, [pc, #328]	; (8002a5c <main+0x31c>)
	  buffer[i] = 0;
 8002914:	4c52      	ldr	r4, [pc, #328]	; (8002a60 <main+0x320>)
  DWT->CYCCNT = 0;
 8002916:	6059      	str	r1, [r3, #4]
	  SPI_PLUCK_TX[i] = 0;
 8002918:	4852      	ldr	r0, [pc, #328]	; (8002a64 <main+0x324>)
  DWT->CTRL = 0x40000001;
 800291a:	601a      	str	r2, [r3, #0]
	  SPI_PLUCK_TX[i] = 0;
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	f016 f861 	bl	80189e4 <memset>
	  buffer[i] = 0;
 8002922:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002926:	2100      	movs	r1, #0
 8002928:	4620      	mov	r0, r4
 800292a:	f016 f85b 	bl	80189e4 <memset>
  buffer[15+112] = NUM_PARAMS;
 800292e:	239c      	movs	r3, #156	; 0x9c
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 8002930:	f64e 72ef 	movw	r2, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8002934:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15+112] = NUM_PARAMS;
 8002938:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
  buffer[NUM_PARAMS*2+19+112] = 1;
 800293c:	2301      	movs	r3, #1
  buffer[NUM_PARAMS*2+16+112] = 0xef;
 800293e:	f8a4 21b8 	strh.w	r2, [r4, #440]	; 0x1b8
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 8002942:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19+112] = 1;
 8002946:	f884 31bb 	strb.w	r3, [r4, #443]	; 0x1bb
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 800294a:	f64f 63fe 	movw	r3, #65278	; 0xfefe
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800294e:	ed9f 0a46 	vldr	s0, [pc, #280]	; 8002a68 <main+0x328>
 8002952:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25+112] = 0xfe;
 8002956:	f8a4 31c1 	strh.w	r3, [r4, #449]	; 0x1c1
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 800295a:	4844      	ldr	r0, [pc, #272]	; (8002a6c <main+0x32c>)
 800295c:	f011 fb90 	bl	8014080 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 8002960:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002964:	ed9f 1a42 	vldr	s2, [pc, #264]	; 8002a70 <main+0x330>
 8002968:	eddf 0a42 	vldr	s1, [pc, #264]	; 8002a74 <main+0x334>
 800296c:	ed9f 0a42 	vldr	s0, [pc, #264]	; 8002a78 <main+0x338>
 8002970:	4842      	ldr	r0, [pc, #264]	; (8002a7c <main+0x33c>)
 8002972:	f011 fb85 	bl	8014080 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 8002976:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 800297a:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 800297e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002982:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8002a78 <main+0x338>
 8002986:	483e      	ldr	r0, [pc, #248]	; (8002a80 <main+0x340>)
 8002988:	f011 fb7a 	bl	8014080 <LEAF_generate_table_skew_non_sym>
  if (boardNumber == 0)
 800298c:	f898 3000 	ldrb.w	r3, [r8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8404 	beq.w	800319e <main+0xa5e>
	  diskBusy = 1;
 8002996:	2301      	movs	r3, #1
 8002998:	4a3a      	ldr	r2, [pc, #232]	; (8002a84 <main+0x344>)
  specialModeNames[0] = "PHYS STR1     ";
 800299a:	4d3b      	ldr	r5, [pc, #236]	; (8002a88 <main+0x348>)
  specialModeMacroNames[2][11] = "         ";
 800299c:	243f      	movs	r4, #63	; 0x3f
	  diskBusy = 1;
 800299e:	7013      	strb	r3, [r2, #0]
  SDRAM_init();
 80029a0:	f7ff faa6 	bl	8001ef0 <SDRAM_init>
  audioInit();
 80029a4:	f7fe f9f0 	bl	8000d88 <audioInit>
  specialModeNames[0] = "PHYS STR1     ";
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <main+0x34c>)
  specialModeMacroNames[1][3] = "Decay     ";
 80029aa:	4839      	ldr	r0, [pc, #228]	; (8002a90 <main+0x350>)
  specialModeNames[0] = "PHYS STR1     ";
 80029ac:	602b      	str	r3, [r5, #0]
  specialModeMacroNames[0][0] = "Feedback  ";
 80029ae:	4b39      	ldr	r3, [pc, #228]	; (8002a94 <main+0x354>)
  specialModeMacroNames[0][5] = "          ";
 80029b0:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <main+0x358>)
  specialModeMacroNames[1][3] = "Decay     ";
 80029b2:	63d8      	str	r0, [r3, #60]	; 0x3c
  specialModeMacroNames[2][3] = "Decay     ";
 80029b4:	66d8      	str	r0, [r3, #108]	; 0x6c
  specialModeMacroNames[0][0] = "Feedback  ";
 80029b6:	4839      	ldr	r0, [pc, #228]	; (8002a9c <main+0x35c>)
  specialModeMacroNames[0][10] = "         ";
 80029b8:	4939      	ldr	r1, [pc, #228]	; (8002aa0 <main+0x360>)
  specialModeMacroNames[0][0] = "Feedback  ";
 80029ba:	6018      	str	r0, [r3, #0]
  specialModeMacroNames[0][1] = "SlideNois ";
 80029bc:	4839      	ldr	r0, [pc, #228]	; (8002aa4 <main+0x364>)
  specialModeMacroNames[0][9] = "          ";
 80029be:	625a      	str	r2, [r3, #36]	; 0x24
  specialModeMacroNames[0][1] = "SlideNois ";
 80029c0:	6058      	str	r0, [r3, #4]
  specialModeMacroNames[0][2] = "PluckWidt ";
 80029c2:	4839      	ldr	r0, [pc, #228]	; (8002aa8 <main+0x368>)
 80029c4:	4f39      	ldr	r7, [pc, #228]	; (8002aac <main+0x36c>)
 80029c6:	6098      	str	r0, [r3, #8]
  specialModeMacroNames[0][3] = "PickNoise ";
 80029c8:	4839      	ldr	r0, [pc, #228]	; (8002ab0 <main+0x370>)
 80029ca:	4e3a      	ldr	r6, [pc, #232]	; (8002ab4 <main+0x374>)
 80029cc:	60d8      	str	r0, [r3, #12]
  specialModeMacroNames[0][4] = "PickupSim";
 80029ce:	483a      	ldr	r0, [pc, #232]	; (8002ab8 <main+0x378>)
 80029d0:	6118      	str	r0, [r3, #16]
  specialModeNames[1] = "PHYS STR2     ";
 80029d2:	483a      	ldr	r0, [pc, #232]	; (8002abc <main+0x37c>)
 80029d4:	6068      	str	r0, [r5, #4]
  specialModeMacroNames[1][0] = "PrepIndex ";
 80029d6:	483a      	ldr	r0, [pc, #232]	; (8002ac0 <main+0x380>)
 80029d8:	6318      	str	r0, [r3, #48]	; 0x30
  specialModeMacroNames[1][1] = "SlideNoise";
 80029da:	483a      	ldr	r0, [pc, #232]	; (8002ac4 <main+0x384>)
 80029dc:	6358      	str	r0, [r3, #52]	; 0x34
  specialModeMacroNames[1][2] = "PluckPos  ";
 80029de:	483a      	ldr	r0, [pc, #232]	; (8002ac8 <main+0x388>)
 80029e0:	6398      	str	r0, [r3, #56]	; 0x38
  specialModeMacroNames[1][4] = "Touch     ";
 80029e2:	483a      	ldr	r0, [pc, #232]	; (8002acc <main+0x38c>)
 80029e4:	6418      	str	r0, [r3, #64]	; 0x40
  specialModeMacroNames[1][5] = "PickupPos ";
 80029e6:	483a      	ldr	r0, [pc, #232]	; (8002ad0 <main+0x390>)
 80029e8:	6458      	str	r0, [r3, #68]	; 0x44
  specialModeMacroNames[1][6] = "DampFreq  ";
 80029ea:	483a      	ldr	r0, [pc, #232]	; (8002ad4 <main+0x394>)
 80029ec:	6498      	str	r0, [r3, #72]	; 0x48
  specialModeMacroNames[1][7] = "FFAmount  ";
 80029ee:	483a      	ldr	r0, [pc, #232]	; (8002ad8 <main+0x398>)
 80029f0:	64d8      	str	r0, [r3, #76]	; 0x4c
  specialModeMacroNames[1][8] = "FBAmount  ";
 80029f2:	483a      	ldr	r0, [pc, #232]	; (8002adc <main+0x39c>)
 80029f4:	6518      	str	r0, [r3, #80]	; 0x50
  specialModeMacroNames[1][9] = "foldDepth ";
 80029f6:	483a      	ldr	r0, [pc, #232]	; (8002ae0 <main+0x3a0>)
 80029f8:	6558      	str	r0, [r3, #84]	; 0x54
  specialModeMacroNames[1][10] = "prepPosX ";
 80029fa:	483a      	ldr	r0, [pc, #232]	; (8002ae4 <main+0x3a4>)
 80029fc:	6598      	str	r0, [r3, #88]	; 0x58
  specialModeMacroNames[1][11] = "prepPosY ";
 80029fe:	483a      	ldr	r0, [pc, #232]	; (8002ae8 <main+0x3a8>)
 8002a00:	65d8      	str	r0, [r3, #92]	; 0x5c
  specialModeNames[2] = "ADDITIVE      ";
 8002a02:	483a      	ldr	r0, [pc, #232]	; (8002aec <main+0x3ac>)
 8002a04:	60a8      	str	r0, [r5, #8]
  specialModeMacroNames[2][0] = "Noise1    ";
 8002a06:	483a      	ldr	r0, [pc, #232]	; (8002af0 <main+0x3b0>)
 8002a08:	6618      	str	r0, [r3, #96]	; 0x60
  specialModeMacroNames[2][1] = "Noise2    ";
 8002a0a:	483a      	ldr	r0, [pc, #232]	; (8002af4 <main+0x3b4>)
 8002a0c:	6658      	str	r0, [r3, #100]	; 0x64
  specialModeMacroNames[2][2] = "Tone      ";
 8002a0e:	483a      	ldr	r0, [pc, #232]	; (8002af8 <main+0x3b8>)
 8002a10:	6698      	str	r0, [r3, #104]	; 0x68
  specialModeMacroNames[2][4] = "Stretch   ";
 8002a12:	483a      	ldr	r0, [pc, #232]	; (8002afc <main+0x3bc>)
 8002a14:	6718      	str	r0, [r3, #112]	; 0x70
  specialModeMacroNames[2][5] = "RandDecy  ";
 8002a16:	483a      	ldr	r0, [pc, #232]	; (8002b00 <main+0x3c0>)
  specialModeMacroNames[0][6] = "          ";
 8002a18:	e9c3 2205 	strd	r2, r2, [r3, #20]
  specialModeMacroNames[0][8] = "          ";
 8002a1c:	e9c3 2207 	strd	r2, r2, [r3, #28]
  specialModeMacroNames[0][11] = "         ";
 8002a20:	e9c3 110a 	strd	r1, r1, [r3, #40]	; 0x28
  specialModeMacroNames[2][5] = "RandDecy  ";
 8002a24:	6758      	str	r0, [r3, #116]	; 0x74
  specialModeMacroNames[2][11] = "         ";
 8002a26:	2050      	movs	r0, #80	; 0x50
  specialModeMacroNames[2][9] = "          ";
 8002a28:	e9c3 2220 	strd	r2, r2, [r3, #128]	; 0x80
  specialModeMacroNames[2][6] = "RandGain  ";
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <main+0x3c4>)
 8002a2e:	679a      	str	r2, [r3, #120]	; 0x78
  specialModeMacroNames[2][7] = "NoiseVol  ";
 8002a30:	4a35      	ldr	r2, [pc, #212]	; (8002b08 <main+0x3c8>)
 8002a32:	67da      	str	r2, [r3, #124]	; 0x7c
  for (int i = 0; i < 3; i++)
 8002a34:	461a      	mov	r2, r3
  specialModeMacroNames[2][11] = "         ";
 8002a36:	e9c3 1122 	strd	r1, r1, [r3, #136]	; 0x88
 8002a3a:	e069      	b.n	8002b10 <main+0x3d0>
 8002a3c:	e000ed00 	.word	0xe000ed00
 8002a40:	03010011 	.word	0x03010011
 8002a44:	58020400 	.word	0x58020400
 8002a48:	58020000 	.word	0x58020000
 8002a4c:	58024800 	.word	0x58024800
 8002a50:	58024400 	.word	0x58024400
 8002a54:	e0001000 	.word	0xe0001000
 8002a58:	c5acce55 	.word	0xc5acce55
 8002a5c:	40000001 	.word	0x40000001
 8002a60:	30042380 	.word	0x30042380
 8002a64:	38000000 	.word	0x38000000
 8002a68:	3c23d70a 	.word	0x3c23d70a
 8002a6c:	2001a114 	.word	0x2001a114
 8002a70:	457a0000 	.word	0x457a0000
 8002a74:	469c4000 	.word	0x469c4000
 8002a78:	00000000 	.word	0x00000000
 8002a7c:	200140d0 	.word	0x200140d0
 8002a80:	200161fc 	.word	0x200161fc
 8002a84:	20014078 	.word	0x20014078
 8002a88:	2001c1a4 	.word	0x2001c1a4
 8002a8c:	0801b84c 	.word	0x0801b84c
 8002a90:	0801b8e4 	.word	0x0801b8e4
 8002a94:	2001c114 	.word	0x2001c114
 8002a98:	0801b898 	.word	0x0801b898
 8002a9c:	0801b85c 	.word	0x0801b85c
 8002aa0:	0801b8a4 	.word	0x0801b8a4
 8002aa4:	0801b868 	.word	0x0801b868
 8002aa8:	0801b874 	.word	0x0801b874
 8002aac:	30042000 	.word	0x30042000
 8002ab0:	0801b880 	.word	0x0801b880
 8002ab4:	30043380 	.word	0x30043380
 8002ab8:	0801b88c 	.word	0x0801b88c
 8002abc:	0801b8b0 	.word	0x0801b8b0
 8002ac0:	0801b8c0 	.word	0x0801b8c0
 8002ac4:	0801b8cc 	.word	0x0801b8cc
 8002ac8:	0801b8d8 	.word	0x0801b8d8
 8002acc:	0801b8f0 	.word	0x0801b8f0
 8002ad0:	0801b8fc 	.word	0x0801b8fc
 8002ad4:	0801b908 	.word	0x0801b908
 8002ad8:	0801b914 	.word	0x0801b914
 8002adc:	0801b920 	.word	0x0801b920
 8002ae0:	0801b92c 	.word	0x0801b92c
 8002ae4:	0801b938 	.word	0x0801b938
 8002ae8:	0801b944 	.word	0x0801b944
 8002aec:	0801b950 	.word	0x0801b950
 8002af0:	0801b960 	.word	0x0801b960
 8002af4:	0801b96c 	.word	0x0801b96c
 8002af8:	0801b978 	.word	0x0801b978
 8002afc:	0801b984 	.word	0x0801b984
 8002b00:	0801b990 	.word	0x0801b990
 8002b04:	0801b99c 	.word	0x0801b99c
 8002b08:	0801b9a8 	.word	0x0801b9a8
 8002b0c:	20014025 	.word	0x20014025
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002b10:	f855 1b04 	ldr.w	r1, [r5], #4
 8002b14:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002b18:	f8d2 c000 	ldr.w	ip, [r2]
  for (int i = 0; i < 3; i++)
 8002b1c:	3230      	adds	r2, #48	; 0x30
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002b1e:	f807 0013 	strb.w	r0, [r7, r3, lsl #1]
 8002b22:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8002b26:	7848      	ldrb	r0, [r1, #1]
 8002b28:	7058      	strb	r0, [r3, #1]
 8002b2a:	7888      	ldrb	r0, [r1, #2]
 8002b2c:	7098      	strb	r0, [r3, #2]
 8002b2e:	78c8      	ldrb	r0, [r1, #3]
 8002b30:	70d8      	strb	r0, [r3, #3]
 8002b32:	7908      	ldrb	r0, [r1, #4]
 8002b34:	7118      	strb	r0, [r3, #4]
 8002b36:	7948      	ldrb	r0, [r1, #5]
 8002b38:	7158      	strb	r0, [r3, #5]
 8002b3a:	7988      	ldrb	r0, [r1, #6]
 8002b3c:	7198      	strb	r0, [r3, #6]
 8002b3e:	79c8      	ldrb	r0, [r1, #7]
 8002b40:	71d8      	strb	r0, [r3, #7]
 8002b42:	7a08      	ldrb	r0, [r1, #8]
 8002b44:	7218      	strb	r0, [r3, #8]
 8002b46:	7a48      	ldrb	r0, [r1, #9]
 8002b48:	7258      	strb	r0, [r3, #9]
 8002b4a:	7a88      	ldrb	r0, [r1, #10]
 8002b4c:	7298      	strb	r0, [r3, #10]
 8002b4e:	7ac8      	ldrb	r0, [r1, #11]
 8002b50:	72d8      	strb	r0, [r3, #11]
 8002b52:	7b08      	ldrb	r0, [r1, #12]
 8002b54:	7318      	strb	r0, [r3, #12]
 8002b56:	7b49      	ldrb	r1, [r1, #13]
 8002b58:	7359      	strb	r1, [r3, #13]
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002b5a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
 8002b5e:	f89c 1000 	ldrb.w	r1, [ip]
  for (int i = 0; i < 3; i++)
 8002b62:	3c01      	subs	r4, #1
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002b64:	f806 1033 	strb.w	r1, [r6, r3, lsl #3]
 8002b68:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 8002b6c:	f89c 1001 	ldrb.w	r1, [ip, #1]
  for (int i = 0; i < 3; i++)
 8002b70:	2c3c      	cmp	r4, #60	; 0x3c
			  macroNamesArray[63-i][k][j] = specialModeMacroNames[i][k][j];
 8002b72:	7059      	strb	r1, [r3, #1]
 8002b74:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8002b78:	f852 0c2c 	ldr.w	r0, [r2, #-44]
 8002b7c:	7099      	strb	r1, [r3, #2]
 8002b7e:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8002b82:	70d9      	strb	r1, [r3, #3]
 8002b84:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8002b88:	7119      	strb	r1, [r3, #4]
 8002b8a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8002b8e:	7159      	strb	r1, [r3, #5]
 8002b90:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8002b94:	7199      	strb	r1, [r3, #6]
 8002b96:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8002b9a:	71d9      	strb	r1, [r3, #7]
 8002b9c:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8002ba0:	7219      	strb	r1, [r3, #8]
 8002ba2:	f89c 1009 	ldrb.w	r1, [ip, #9]
 8002ba6:	7259      	strb	r1, [r3, #9]
 8002ba8:	7801      	ldrb	r1, [r0, #0]
 8002baa:	7299      	strb	r1, [r3, #10]
 8002bac:	7841      	ldrb	r1, [r0, #1]
 8002bae:	72d9      	strb	r1, [r3, #11]
 8002bb0:	7881      	ldrb	r1, [r0, #2]
 8002bb2:	7319      	strb	r1, [r3, #12]
 8002bb4:	78c1      	ldrb	r1, [r0, #3]
 8002bb6:	7359      	strb	r1, [r3, #13]
 8002bb8:	7901      	ldrb	r1, [r0, #4]
 8002bba:	7399      	strb	r1, [r3, #14]
 8002bbc:	7941      	ldrb	r1, [r0, #5]
 8002bbe:	73d9      	strb	r1, [r3, #15]
 8002bc0:	7981      	ldrb	r1, [r0, #6]
 8002bc2:	7419      	strb	r1, [r3, #16]
 8002bc4:	79c1      	ldrb	r1, [r0, #7]
 8002bc6:	7459      	strb	r1, [r3, #17]
 8002bc8:	7a01      	ldrb	r1, [r0, #8]
 8002bca:	7499      	strb	r1, [r3, #18]
 8002bcc:	f852 1c28 	ldr.w	r1, [r2, #-40]
 8002bd0:	7a40      	ldrb	r0, [r0, #9]
 8002bd2:	74d8      	strb	r0, [r3, #19]
 8002bd4:	7808      	ldrb	r0, [r1, #0]
 8002bd6:	7518      	strb	r0, [r3, #20]
 8002bd8:	7848      	ldrb	r0, [r1, #1]
 8002bda:	7558      	strb	r0, [r3, #21]
 8002bdc:	7888      	ldrb	r0, [r1, #2]
 8002bde:	7598      	strb	r0, [r3, #22]
 8002be0:	78c8      	ldrb	r0, [r1, #3]
 8002be2:	75d8      	strb	r0, [r3, #23]
 8002be4:	7908      	ldrb	r0, [r1, #4]
 8002be6:	7618      	strb	r0, [r3, #24]
 8002be8:	7948      	ldrb	r0, [r1, #5]
 8002bea:	7658      	strb	r0, [r3, #25]
 8002bec:	7988      	ldrb	r0, [r1, #6]
 8002bee:	7698      	strb	r0, [r3, #26]
 8002bf0:	79c8      	ldrb	r0, [r1, #7]
 8002bf2:	76d8      	strb	r0, [r3, #27]
 8002bf4:	7a08      	ldrb	r0, [r1, #8]
 8002bf6:	7718      	strb	r0, [r3, #28]
 8002bf8:	f852 0c24 	ldr.w	r0, [r2, #-36]
 8002bfc:	7a49      	ldrb	r1, [r1, #9]
 8002bfe:	7759      	strb	r1, [r3, #29]
 8002c00:	7801      	ldrb	r1, [r0, #0]
 8002c02:	7799      	strb	r1, [r3, #30]
 8002c04:	7841      	ldrb	r1, [r0, #1]
 8002c06:	77d9      	strb	r1, [r3, #31]
 8002c08:	7881      	ldrb	r1, [r0, #2]
 8002c0a:	f883 1020 	strb.w	r1, [r3, #32]
 8002c0e:	78c1      	ldrb	r1, [r0, #3]
 8002c10:	f883 1021 	strb.w	r1, [r3, #33]	; 0x21
 8002c14:	7901      	ldrb	r1, [r0, #4]
 8002c16:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
 8002c1a:	7941      	ldrb	r1, [r0, #5]
 8002c1c:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
 8002c20:	7981      	ldrb	r1, [r0, #6]
 8002c22:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
 8002c26:	79c1      	ldrb	r1, [r0, #7]
 8002c28:	f883 1025 	strb.w	r1, [r3, #37]	; 0x25
 8002c2c:	7a01      	ldrb	r1, [r0, #8]
 8002c2e:	f883 1026 	strb.w	r1, [r3, #38]	; 0x26
 8002c32:	f852 1c20 	ldr.w	r1, [r2, #-32]
 8002c36:	7a40      	ldrb	r0, [r0, #9]
 8002c38:	f883 0027 	strb.w	r0, [r3, #39]	; 0x27
 8002c3c:	7808      	ldrb	r0, [r1, #0]
 8002c3e:	f883 0028 	strb.w	r0, [r3, #40]	; 0x28
 8002c42:	7848      	ldrb	r0, [r1, #1]
 8002c44:	f883 0029 	strb.w	r0, [r3, #41]	; 0x29
 8002c48:	7888      	ldrb	r0, [r1, #2]
 8002c4a:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
 8002c4e:	78c8      	ldrb	r0, [r1, #3]
 8002c50:	f883 002b 	strb.w	r0, [r3, #43]	; 0x2b
 8002c54:	7908      	ldrb	r0, [r1, #4]
 8002c56:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
 8002c5a:	7948      	ldrb	r0, [r1, #5]
 8002c5c:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
 8002c60:	7988      	ldrb	r0, [r1, #6]
 8002c62:	f883 002e 	strb.w	r0, [r3, #46]	; 0x2e
 8002c66:	79c8      	ldrb	r0, [r1, #7]
 8002c68:	f883 002f 	strb.w	r0, [r3, #47]	; 0x2f
 8002c6c:	7a08      	ldrb	r0, [r1, #8]
 8002c6e:	f883 0030 	strb.w	r0, [r3, #48]	; 0x30
 8002c72:	7a48      	ldrb	r0, [r1, #9]
 8002c74:	f852 1c1c 	ldr.w	r1, [r2, #-28]
 8002c78:	f883 0031 	strb.w	r0, [r3, #49]	; 0x31
 8002c7c:	f891 c000 	ldrb.w	ip, [r1]
 8002c80:	f852 0c18 	ldr.w	r0, [r2, #-24]
 8002c84:	f883 c032 	strb.w	ip, [r3, #50]	; 0x32
 8002c88:	f891 c001 	ldrb.w	ip, [r1, #1]
 8002c8c:	f883 c033 	strb.w	ip, [r3, #51]	; 0x33
 8002c90:	f891 c002 	ldrb.w	ip, [r1, #2]
 8002c94:	f883 c034 	strb.w	ip, [r3, #52]	; 0x34
 8002c98:	f891 c003 	ldrb.w	ip, [r1, #3]
 8002c9c:	f883 c035 	strb.w	ip, [r3, #53]	; 0x35
 8002ca0:	f891 c004 	ldrb.w	ip, [r1, #4]
 8002ca4:	f883 c036 	strb.w	ip, [r3, #54]	; 0x36
 8002ca8:	f891 c005 	ldrb.w	ip, [r1, #5]
 8002cac:	f883 c037 	strb.w	ip, [r3, #55]	; 0x37
 8002cb0:	f891 c006 	ldrb.w	ip, [r1, #6]
 8002cb4:	f883 c038 	strb.w	ip, [r3, #56]	; 0x38
 8002cb8:	f891 c007 	ldrb.w	ip, [r1, #7]
 8002cbc:	f883 c039 	strb.w	ip, [r3, #57]	; 0x39
 8002cc0:	f891 c008 	ldrb.w	ip, [r1, #8]
 8002cc4:	f883 c03a 	strb.w	ip, [r3, #58]	; 0x3a
 8002cc8:	7a49      	ldrb	r1, [r1, #9]
 8002cca:	f883 103b 	strb.w	r1, [r3, #59]	; 0x3b
 8002cce:	7801      	ldrb	r1, [r0, #0]
 8002cd0:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
 8002cd4:	7841      	ldrb	r1, [r0, #1]
 8002cd6:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
 8002cda:	7881      	ldrb	r1, [r0, #2]
 8002cdc:	f883 103e 	strb.w	r1, [r3, #62]	; 0x3e
 8002ce0:	78c1      	ldrb	r1, [r0, #3]
 8002ce2:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
 8002ce6:	7901      	ldrb	r1, [r0, #4]
 8002ce8:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
 8002cec:	7941      	ldrb	r1, [r0, #5]
 8002cee:	f883 1041 	strb.w	r1, [r3, #65]	; 0x41
 8002cf2:	7981      	ldrb	r1, [r0, #6]
 8002cf4:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
 8002cf8:	79c1      	ldrb	r1, [r0, #7]
 8002cfa:	f883 1043 	strb.w	r1, [r3, #67]	; 0x43
 8002cfe:	7a01      	ldrb	r1, [r0, #8]
 8002d00:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
 8002d04:	f852 1c14 	ldr.w	r1, [r2, #-20]
 8002d08:	7a40      	ldrb	r0, [r0, #9]
 8002d0a:	f883 0045 	strb.w	r0, [r3, #69]	; 0x45
 8002d0e:	7808      	ldrb	r0, [r1, #0]
 8002d10:	f883 0046 	strb.w	r0, [r3, #70]	; 0x46
 8002d14:	7848      	ldrb	r0, [r1, #1]
 8002d16:	f883 0047 	strb.w	r0, [r3, #71]	; 0x47
 8002d1a:	7888      	ldrb	r0, [r1, #2]
 8002d1c:	f883 0048 	strb.w	r0, [r3, #72]	; 0x48
 8002d20:	78c8      	ldrb	r0, [r1, #3]
 8002d22:	f883 0049 	strb.w	r0, [r3, #73]	; 0x49
 8002d26:	7908      	ldrb	r0, [r1, #4]
 8002d28:	f883 004a 	strb.w	r0, [r3, #74]	; 0x4a
 8002d2c:	7948      	ldrb	r0, [r1, #5]
 8002d2e:	f883 004b 	strb.w	r0, [r3, #75]	; 0x4b
 8002d32:	7988      	ldrb	r0, [r1, #6]
 8002d34:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
 8002d38:	79c8      	ldrb	r0, [r1, #7]
 8002d3a:	f883 004d 	strb.w	r0, [r3, #77]	; 0x4d
 8002d3e:	7a08      	ldrb	r0, [r1, #8]
 8002d40:	f883 004e 	strb.w	r0, [r3, #78]	; 0x4e
 8002d44:	7a49      	ldrb	r1, [r1, #9]
 8002d46:	f883 104f 	strb.w	r1, [r3, #79]	; 0x4f
 8002d4a:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8002d4e:	7801      	ldrb	r1, [r0, #0]
 8002d50:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
 8002d54:	7841      	ldrb	r1, [r0, #1]
 8002d56:	f883 1051 	strb.w	r1, [r3, #81]	; 0x51
 8002d5a:	7881      	ldrb	r1, [r0, #2]
 8002d5c:	f883 1052 	strb.w	r1, [r3, #82]	; 0x52
 8002d60:	78c1      	ldrb	r1, [r0, #3]
 8002d62:	f883 1053 	strb.w	r1, [r3, #83]	; 0x53
 8002d66:	7901      	ldrb	r1, [r0, #4]
 8002d68:	f883 1054 	strb.w	r1, [r3, #84]	; 0x54
 8002d6c:	7941      	ldrb	r1, [r0, #5]
 8002d6e:	f883 1055 	strb.w	r1, [r3, #85]	; 0x55
 8002d72:	7981      	ldrb	r1, [r0, #6]
 8002d74:	f883 1056 	strb.w	r1, [r3, #86]	; 0x56
 8002d78:	79c1      	ldrb	r1, [r0, #7]
 8002d7a:	f883 1057 	strb.w	r1, [r3, #87]	; 0x57
 8002d7e:	7a01      	ldrb	r1, [r0, #8]
 8002d80:	f883 1058 	strb.w	r1, [r3, #88]	; 0x58
 8002d84:	f852 1c0c 	ldr.w	r1, [r2, #-12]
 8002d88:	7a40      	ldrb	r0, [r0, #9]
 8002d8a:	f883 0059 	strb.w	r0, [r3, #89]	; 0x59
 8002d8e:	7808      	ldrb	r0, [r1, #0]
 8002d90:	f883 005a 	strb.w	r0, [r3, #90]	; 0x5a
 8002d94:	7848      	ldrb	r0, [r1, #1]
 8002d96:	f883 005b 	strb.w	r0, [r3, #91]	; 0x5b
 8002d9a:	7888      	ldrb	r0, [r1, #2]
 8002d9c:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
 8002da0:	78c8      	ldrb	r0, [r1, #3]
 8002da2:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
 8002da6:	7908      	ldrb	r0, [r1, #4]
 8002da8:	f883 005e 	strb.w	r0, [r3, #94]	; 0x5e
 8002dac:	7948      	ldrb	r0, [r1, #5]
 8002dae:	f883 005f 	strb.w	r0, [r3, #95]	; 0x5f
 8002db2:	7988      	ldrb	r0, [r1, #6]
 8002db4:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
 8002db8:	79c8      	ldrb	r0, [r1, #7]
 8002dba:	f883 0061 	strb.w	r0, [r3, #97]	; 0x61
 8002dbe:	7a08      	ldrb	r0, [r1, #8]
 8002dc0:	f883 0062 	strb.w	r0, [r3, #98]	; 0x62
 8002dc4:	f852 0c08 	ldr.w	r0, [r2, #-8]
 8002dc8:	7a49      	ldrb	r1, [r1, #9]
 8002dca:	f883 1063 	strb.w	r1, [r3, #99]	; 0x63
 8002dce:	7801      	ldrb	r1, [r0, #0]
 8002dd0:	f883 1064 	strb.w	r1, [r3, #100]	; 0x64
 8002dd4:	7841      	ldrb	r1, [r0, #1]
 8002dd6:	f883 1065 	strb.w	r1, [r3, #101]	; 0x65
 8002dda:	7881      	ldrb	r1, [r0, #2]
 8002ddc:	f883 1066 	strb.w	r1, [r3, #102]	; 0x66
 8002de0:	78c1      	ldrb	r1, [r0, #3]
 8002de2:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
 8002de6:	7901      	ldrb	r1, [r0, #4]
 8002de8:	f883 1068 	strb.w	r1, [r3, #104]	; 0x68
 8002dec:	7941      	ldrb	r1, [r0, #5]
 8002dee:	f883 1069 	strb.w	r1, [r3, #105]	; 0x69
 8002df2:	7981      	ldrb	r1, [r0, #6]
 8002df4:	f883 106a 	strb.w	r1, [r3, #106]	; 0x6a
 8002df8:	79c1      	ldrb	r1, [r0, #7]
 8002dfa:	f883 106b 	strb.w	r1, [r3, #107]	; 0x6b
 8002dfe:	7a01      	ldrb	r1, [r0, #8]
 8002e00:	f883 106c 	strb.w	r1, [r3, #108]	; 0x6c
 8002e04:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8002e08:	7a40      	ldrb	r0, [r0, #9]
 8002e0a:	f883 006d 	strb.w	r0, [r3, #109]	; 0x6d
 8002e0e:	7808      	ldrb	r0, [r1, #0]
 8002e10:	f883 006e 	strb.w	r0, [r3, #110]	; 0x6e
 8002e14:	7848      	ldrb	r0, [r1, #1]
 8002e16:	f883 006f 	strb.w	r0, [r3, #111]	; 0x6f
 8002e1a:	7888      	ldrb	r0, [r1, #2]
 8002e1c:	f883 0070 	strb.w	r0, [r3, #112]	; 0x70
 8002e20:	78c8      	ldrb	r0, [r1, #3]
 8002e22:	f883 0071 	strb.w	r0, [r3, #113]	; 0x71
 8002e26:	7908      	ldrb	r0, [r1, #4]
 8002e28:	f883 0072 	strb.w	r0, [r3, #114]	; 0x72
 8002e2c:	7948      	ldrb	r0, [r1, #5]
 8002e2e:	f883 0073 	strb.w	r0, [r3, #115]	; 0x73
 8002e32:	7988      	ldrb	r0, [r1, #6]
 8002e34:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
 8002e38:	79c8      	ldrb	r0, [r1, #7]
 8002e3a:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
 8002e3e:	7a08      	ldrb	r0, [r1, #8]
 8002e40:	f883 0076 	strb.w	r0, [r3, #118]	; 0x76
 8002e44:	7a49      	ldrb	r1, [r1, #9]
 8002e46:	f883 1077 	strb.w	r1, [r3, #119]	; 0x77
  for (int i = 0; i < 3; i++)
 8002e4a:	d002      	beq.n	8002e52 <main+0x712>
		  presetNamesArray[63-i][j] = specialModeNames[i][j];
 8002e4c:	682b      	ldr	r3, [r5, #0]
 8002e4e:	7818      	ldrb	r0, [r3, #0]
 8002e50:	e65e      	b.n	8002b10 <main+0x3d0>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8002e52:	2240      	movs	r2, #64	; 0x40
 8002e54:	49a4      	ldr	r1, [pc, #656]	; (80030e8 <main+0x9a8>)
 8002e56:	48a5      	ldr	r0, [pc, #660]	; (80030ec <main+0x9ac>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002e58:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 8002e5c:	f007 fffc 	bl	800ae58 <HAL_SPI_Receive_DMA>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002e60:	4aa3      	ldr	r2, [pc, #652]	; (80030f0 <main+0x9b0>)
 8002e62:	2340      	movs	r3, #64	; 0x40
 8002e64:	48a3      	ldr	r0, [pc, #652]	; (80030f4 <main+0x9b4>)
	  if (rand > TWO_TO_31)
 8002e66:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 80030f8 <main+0x9b8>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002e6a:	18d1      	adds	r1, r2, r3
	  if (rand > TWO_TO_31)
 8002e6c:	ed9f 9aa3 	vldr	s18, [pc, #652]	; 80030fc <main+0x9bc>
  HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
 8002e70:	f008 f8d2 	bl	800b018 <HAL_SPI_TransmitReceive_DMA>
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002e74:	49a2      	ldr	r1, [pc, #648]	; (8003100 <main+0x9c0>)
 8002e76:	48a3      	ldr	r0, [pc, #652]	; (8003104 <main+0x9c4>)
	  if (rand > TWO_TO_31)
 8002e78:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    audioStart(&hsai_BlockA1, &hsai_BlockB1);
 8002e7c:	f7fe f94c 	bl	8001118 <audioStart>
	AudioCodec_init(&hi2c2);
 8002e80:	48a1      	ldr	r0, [pc, #644]	; (8003108 <main+0x9c8>)
 8002e82:	f7fe f95b 	bl	800113c <AudioCodec_init>
 8002e86:	4ba1      	ldr	r3, [pc, #644]	; (800310c <main+0x9cc>)
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002e88:	eddf 7aa1 	vldr	s15, [pc, #644]	; 8003110 <main+0x9d0>
 8002e8c:	f003 0207 	and.w	r2, r3, #7
 8002e90:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8003164 <main+0xa24>
 8002e94:	eee8 8a27 	vfma.f32	s17, s16, s15
 8002e98:	f503 6480 	add.w	r4, r3, #1024	; 0x400
 8002e9c:	4f9d      	ldr	r7, [pc, #628]	; (8003114 <main+0x9d4>)
 8002e9e:	4e9e      	ldr	r6, [pc, #632]	; (8003118 <main+0x9d8>)
 8002ea0:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8003168 <main+0xa28>
 8002ea4:	4d9d      	ldr	r5, [pc, #628]	; (800311c <main+0x9dc>)
 8002ea6:	f8df 92c4 	ldr.w	r9, [pc, #708]	; 800316c <main+0xa2c>
 8002eaa:	9203      	str	r2, [sp, #12]
 8002eac:	e014      	b.n	8002ed8 <main+0x798>
	  if ((stringInputs[0] == 0) && (stringInputs[1] == 0))
 8002eae:	8833      	ldrh	r3, [r6, #0]
 8002eb0:	b29b      	uxth	r3, r3
 8002eb2:	b903      	cbnz	r3, 8002eb6 <main+0x776>
 8002eb4:	8873      	ldrh	r3, [r6, #2]
	  if (rand > TWO_TO_31)
 8002eb6:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8002eba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ebe:	dd04      	ble.n	8002eca <main+0x78a>
		  myTestInt++;
 8002ec0:	f8da 3000 	ldr.w	r3, [sl]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f8ca 3000 	str.w	r3, [sl]
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 8002eca:	782b      	ldrb	r3, [r5, #0]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8002ed2:	702a      	strb	r2, [r5, #0]
 8002ed4:	edc3 8a00 	vstr	s17, [r3]
	  if (boardNumber == 0)
 8002ed8:	f898 3000 	ldrb.w	r3, [r8]
 8002edc:	b943      	cbnz	r3, 8002ef0 <main+0x7b0>
		  if (presetWaitingToLoad > 0)
 8002ede:	f8db 1000 	ldr.w	r1, [fp]
 8002ee2:	b171      	cbz	r1, 8002f02 <main+0x7c2>
			  if (!i2cSending)
 8002ee4:	4b8e      	ldr	r3, [pc, #568]	; (8003120 <main+0x9e0>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d058      	beq.n	8002fa2 <main+0x862>
	  if (presetWaitingToParse > 0)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d0db      	beq.n	8002eae <main+0x76e>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	; (8003124 <main+0x9e4>)
 8002ef8:	6838      	ldr	r0, [r7, #0]
 8002efa:	7819      	ldrb	r1, [r3, #0]
 8002efc:	f018 f870 	bl	801afe0 <__parsePreset_veneer>
 8002f00:	e7d5      	b.n	8002eae <main+0x76e>
		  else if (presetWaitingToWrite > 0)
 8002f02:	4b89      	ldr	r3, [pc, #548]	; (8003128 <main+0x9e8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d0f2      	beq.n	8002ef0 <main+0x7b0>
				  writePresetToSDCard(presetWaitingToWrite);
 8002f0a:	4b87      	ldr	r3, [pc, #540]	; (8003128 <main+0x9e8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
 8002f10:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 8002f12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f16:	487d      	ldr	r0, [pc, #500]	; (800310c <main+0x9cc>)
 8002f18:	9101      	str	r1, [sp, #4]
 8002f1a:	f015 fd63 	bl	80189e4 <memset>
  __IO uint8_t status = SD_PRESENT;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f88d 3013 	strb.w	r3, [sp, #19]
  return status;
 8002f24:	f89d 3013 	ldrb.w	r3, [sp, #19]
	if(BSP_SD_IsDetected())
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d033      	beq.n	8002f94 <main+0x854>
 8002f2c:	9b03      	ldr	r3, [sp, #12]
 8002f2e:	9901      	ldr	r1, [sp, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 80d1 	bne.w	80030d8 <main+0x998>
 8002f36:	4b75      	ldr	r3, [pc, #468]	; (800310c <main+0x9cc>)
					audioOutBuffer[i] = 0;
 8002f38:	2000      	movs	r0, #0
 8002f3a:	2100      	movs	r1, #0
 8002f3c:	e8e3 0102 	strd	r0, r1, [r3], #8
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002f40:	42a3      	cmp	r3, r4
 8002f42:	d1fb      	bne.n	8002f3c <main+0x7fc>
				diskBusy = 1;
 8002f44:	2301      	movs	r3, #1
 8002f46:	4a79      	ldr	r2, [pc, #484]	; (800312c <main+0x9ec>)
 8002f48:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 8002f4a:	4a79      	ldr	r2, [pc, #484]	; (8003130 <main+0x9f0>)
 8002f4c:	7813      	ldrb	r3, [r2, #0]
 8002f4e:	2b63      	cmp	r3, #99	; 0x63
 8002f50:	d901      	bls.n	8002f56 <main+0x816>
			        presetNumberToSave = 99;
 8002f52:	2363      	movs	r3, #99	; 0x63
 8002f54:	7013      	strb	r3, [r2, #0]
				itoa(presetNumberToSave, charBuf, 10);
 8002f56:	4b76      	ldr	r3, [pc, #472]	; (8003130 <main+0x9f0>)
 8002f58:	220a      	movs	r2, #10
 8002f5a:	a907      	add	r1, sp, #28
 8002f5c:	7818      	ldrb	r0, [r3, #0]
 8002f5e:	f015 fcfd 	bl	801895c <itoa>
				int len = ((strlen(charBuf)));
 8002f62:	a807      	add	r0, sp, #28
 8002f64:	f7fd f9b8 	bl	80002d8 <strlen>
				if (len == 1)
 8002f68:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8002f6a:	4602      	mov	r2, r0
				if (len == 1)
 8002f6c:	d04f      	beq.n	800300e <main+0x8ce>
					strcat(charBuf, ".ebp");
 8002f6e:	4971      	ldr	r1, [pc, #452]	; (8003134 <main+0x9f4>)
 8002f70:	ab07      	add	r3, sp, #28
 8002f72:	6808      	ldr	r0, [r1, #0]
 8002f74:	7909      	ldrb	r1, [r1, #4]
 8002f76:	5098      	str	r0, [r3, r2]
 8002f78:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 8002f7a:	a80a      	add	r0, sp, #40	; 0x28
 8002f7c:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8002f7e:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 8002f80:	a907      	add	r1, sp, #28
 8002f82:	f015 fd5b 	bl	8018a3c <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8002f86:	220a      	movs	r2, #10
 8002f88:	a90a      	add	r1, sp, #40	; 0x28
 8002f8a:	486b      	ldr	r0, [pc, #428]	; (8003138 <main+0x9f8>)
 8002f8c:	f00c f9b4 	bl	800f2f8 <f_open>
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d053      	beq.n	800303c <main+0x8fc>
	presetWaitingToWrite = 0;
 8002f94:	2300      	movs	r3, #0
 8002f96:	4a64      	ldr	r2, [pc, #400]	; (8003128 <main+0x9e8>)
 8002f98:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8002f9a:	4a64      	ldr	r2, [pc, #400]	; (800312c <main+0x9ec>)
 8002f9c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002f9e:	b662      	cpsie	i
}
 8002fa0:	e7a6      	b.n	8002ef0 <main+0x7b0>
				  checkForSDCardPreset(presetNumberToLoad);
 8002fa2:	4b60      	ldr	r3, [pc, #384]	; (8003124 <main+0x9e4>)
	prevVoice = numberToLoad;
 8002fa4:	4a65      	ldr	r2, [pc, #404]	; (800313c <main+0x9fc>)
				  checkForSDCardPreset(presetNumberToLoad);
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	b2db      	uxtb	r3, r3
	prevVoice = numberToLoad;
 8002faa:	6013      	str	r3, [r2, #0]
	voice = numberToLoad;
 8002fac:	4a64      	ldr	r2, [pc, #400]	; (8003140 <main+0xa00>)
 8002fae:	6013      	str	r3, [r2, #0]
  __IO uint8_t status = SD_PRESENT;
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f88d 2012 	strb.w	r2, [sp, #18]
  return status;
 8002fb6:	f89d 2012 	ldrb.w	r2, [sp, #18]
	if(BSP_SD_IsDetected())
 8002fba:	b30a      	cbz	r2, 8003000 <main+0x8c0>
 8002fbc:	9a03      	ldr	r2, [sp, #12]
 8002fbe:	2a00      	cmp	r2, #0
 8002fc0:	f040 8083 	bne.w	80030ca <main+0x98a>
 8002fc4:	4a51      	ldr	r2, [pc, #324]	; (800310c <main+0x9cc>)
			audioOutBuffer[i] = 0;
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	2100      	movs	r1, #0
 8002fca:	e8e2 0102 	strd	r0, r1, [r2], #8
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 8002fce:	4294      	cmp	r4, r2
 8002fd0:	d1fb      	bne.n	8002fca <main+0x88a>
		loadFailed = 0;
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	9301      	str	r3, [sp, #4]
 8002fd6:	4b5b      	ldr	r3, [pc, #364]	; (8003144 <main+0xa04>)
		diskBusy = 1;
 8002fd8:	2201      	movs	r2, #1
		disk_initialize(0);
 8002fda:	4608      	mov	r0, r1
		presetWaitingToLoad = 0;
 8002fdc:	f8cb 1000 	str.w	r1, [fp]
		loadFailed = 0;
 8002fe0:	7019      	strb	r1, [r3, #0]
		diskBusy = 1;
 8002fe2:	4b52      	ldr	r3, [pc, #328]	; (800312c <main+0x9ec>)
 8002fe4:	701a      	strb	r2, [r3, #0]
		disk_initialize(0);
 8002fe6:	f009 ff99 	bl	800cf1c <disk_initialize>
	    disk_status(0);
 8002fea:	2100      	movs	r1, #0
 8002fec:	4608      	mov	r0, r1
 8002fee:	f009 ff8b 	bl	800cf08 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	4954      	ldr	r1, [pc, #336]	; (8003148 <main+0xa08>)
 8002ff6:	4855      	ldr	r0, [pc, #340]	; (800314c <main+0xa0c>)
 8002ff8:	f00c f932 	bl	800f260 <f_mount>
 8002ffc:	9b01      	ldr	r3, [sp, #4]
 8002ffe:	b338      	cbz	r0, 8003050 <main+0x910>
		loadFailed = 1;
 8003000:	2301      	movs	r3, #1
 8003002:	4a50      	ldr	r2, [pc, #320]	; (8003144 <main+0xa04>)
 8003004:	7013      	strb	r3, [r2, #0]
	diskBusy = 0;
 8003006:	2300      	movs	r3, #0
 8003008:	4a48      	ldr	r2, [pc, #288]	; (800312c <main+0x9ec>)
 800300a:	7013      	strb	r3, [r2, #0]
	return found;
 800300c:	e770      	b.n	8002ef0 <main+0x7b0>
					finalString[2] = charBuf[1];
 800300e:	f89d 301d 	ldrb.w	r3, [sp, #29]
					strcat(finalString, ".ebp");
 8003012:	a80a      	add	r0, sp, #40	; 0x28
					finalString[2] = charBuf[1];
 8003014:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
					finalString[1] = charBuf[0];
 8003018:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800301c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
					finalString[0] = '0';
 8003020:	2330      	movs	r3, #48	; 0x30
 8003022:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
					strcat(finalString, ".ebp");
 8003026:	f7fd f957 	bl	80002d8 <strlen>
 800302a:	4a42      	ldr	r2, [pc, #264]	; (8003134 <main+0x9f4>)
 800302c:	4603      	mov	r3, r0
 800302e:	a90a      	add	r1, sp, #40	; 0x28
 8003030:	6810      	ldr	r0, [r2, #0]
 8003032:	7912      	ldrb	r2, [r2, #4]
 8003034:	50c8      	str	r0, [r1, r3]
 8003036:	440b      	add	r3, r1
 8003038:	711a      	strb	r2, [r3, #4]
 800303a:	e7a4      	b.n	8002f86 <main+0x846>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 800303c:	9a02      	ldr	r2, [sp, #8]
 800303e:	ab06      	add	r3, sp, #24
 8003040:	4943      	ldr	r1, [pc, #268]	; (8003150 <main+0xa10>)
 8003042:	483d      	ldr	r0, [pc, #244]	; (8003138 <main+0x9f8>)
 8003044:	f00c fbf8 	bl	800f838 <f_write>
					f_close(&SDFile);
 8003048:	483b      	ldr	r0, [pc, #236]	; (8003138 <main+0x9f8>)
 800304a:	f00c fd51 	bl	800faf0 <f_close>
 800304e:	e7a1      	b.n	8002f94 <main+0x854>
			itoa(numberToLoad, charBuf, 10);
 8003050:	220a      	movs	r2, #10
 8003052:	4618      	mov	r0, r3
 8003054:	a907      	add	r1, sp, #28
 8003056:	f015 fc81 	bl	801895c <itoa>
			int len = ((strlen(charBuf)));
 800305a:	a807      	add	r0, sp, #28
 800305c:	f7fd f93c 	bl	80002d8 <strlen>
			if (len == 1)
 8003060:	2801      	cmp	r0, #1
			int len = ((strlen(charBuf)));
 8003062:	4602      	mov	r2, r0
			if (len == 1)
 8003064:	f000 8084 	beq.w	8003170 <main+0xa30>
				strcat(charBuf, "*.ebp");
 8003068:	493a      	ldr	r1, [pc, #232]	; (8003154 <main+0xa14>)
 800306a:	ab07      	add	r3, sp, #28
 800306c:	6808      	ldr	r0, [r1, #0]
 800306e:	8889      	ldrh	r1, [r1, #4]
 8003070:	5098      	str	r0, [r3, r2]
 8003072:	4413      	add	r3, r2
				strcpy(finalString, charBuf);
 8003074:	a80a      	add	r0, sp, #40	; 0x28
 8003076:	3206      	adds	r2, #6
				strcat(charBuf, "*.ebp");
 8003078:	8099      	strh	r1, [r3, #4]
				strcpy(finalString, charBuf);
 800307a:	a907      	add	r1, sp, #28
 800307c:	f015 fcde 	bl	8018a3c <memcpy>
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 8003080:	ab0a      	add	r3, sp, #40	; 0x28
 8003082:	4a31      	ldr	r2, [pc, #196]	; (8003148 <main+0xa08>)
 8003084:	4934      	ldr	r1, [pc, #208]	; (8003158 <main+0xa18>)
 8003086:	4835      	ldr	r0, [pc, #212]	; (800315c <main+0xa1c>)
 8003088:	f00c fe32 	bl	800fcf0 <f_findfirst>
			if(res == FR_OK)
 800308c:	2800      	cmp	r0, #0
 800308e:	d1b7      	bne.n	8003000 <main+0x8c0>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8003090:	2211      	movs	r2, #17
 8003092:	4933      	ldr	r1, [pc, #204]	; (8003160 <main+0xa20>)
 8003094:	4828      	ldr	r0, [pc, #160]	; (8003138 <main+0x9f8>)
 8003096:	f00c f92f 	bl	800f2f8 <f_open>
 800309a:	9001      	str	r0, [sp, #4]
 800309c:	2800      	cmp	r0, #0
 800309e:	d1af      	bne.n	8003000 <main+0x8c0>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 80030a0:	4a25      	ldr	r2, [pc, #148]	; (8003138 <main+0x9f8>)
 80030a2:	ab06      	add	r3, sp, #24
 80030a4:	492a      	ldr	r1, [pc, #168]	; (8003150 <main+0xa10>)
 80030a6:	68d2      	ldr	r2, [r2, #12]
 80030a8:	4823      	ldr	r0, [pc, #140]	; (8003138 <main+0x9f8>)
 80030aa:	f00c fa89 	bl	800f5c0 <f_read>
					presetWaitingToParse = bytesRead;
 80030ae:	9b06      	ldr	r3, [sp, #24]
					f_close(&SDFile);
 80030b0:	4821      	ldr	r0, [pc, #132]	; (8003138 <main+0x9f8>)
					presetWaitingToParse = bytesRead;
 80030b2:	603b      	str	r3, [r7, #0]
					f_close(&SDFile);
 80030b4:	f00c fd1c 	bl	800faf0 <f_close>
	  	  i2cSending = 1;
 80030b8:	2301      	movs	r3, #1
 80030ba:	4a19      	ldr	r2, [pc, #100]	; (8003120 <main+0x9e0>)
 80030bc:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80030be:	b672      	cpsid	i
  __ASM volatile ("cpsie i" : : : "memory");
 80030c0:	b662      	cpsie	i
	  	i2cSending = 0;
 80030c2:	4613      	mov	r3, r2
 80030c4:	9a01      	ldr	r2, [sp, #4]
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e79d      	b.n	8003006 <main+0x8c6>
 80030ca:	4a10      	ldr	r2, [pc, #64]	; (800310c <main+0x9cc>)
			audioOutBuffer[i + 1] = 0;
 80030cc:	e9c2 1100 	strd	r1, r1, [r2]
		for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80030d0:	3208      	adds	r2, #8
 80030d2:	42a2      	cmp	r2, r4
 80030d4:	d1fa      	bne.n	80030cc <main+0x98c>
 80030d6:	e77c      	b.n	8002fd2 <main+0x892>
 80030d8:	4b0c      	ldr	r3, [pc, #48]	; (800310c <main+0x9cc>)
					audioOutBuffer[i + 1] = 0;
 80030da:	e9c3 1100 	strd	r1, r1, [r3]
				for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
 80030de:	3308      	adds	r3, #8
 80030e0:	429c      	cmp	r4, r3
 80030e2:	d1fa      	bne.n	80030da <main+0x99a>
 80030e4:	e72e      	b.n	8002f44 <main+0x804>
 80030e6:	bf00      	nop
 80030e8:	38000040 	.word	0x38000040
 80030ec:	2001c658 	.word	0x2001c658
 80030f0:	30000800 	.word	0x30000800
 80030f4:	2001c5d0 	.word	0x2001c5d0
 80030f8:	00000000 	.word	0x00000000
 80030fc:	4f000000 	.word	0x4f000000
 8003100:	2001c354 	.word	0x2001c354
 8003104:	2001c2bc 	.word	0x2001c2bc
 8003108:	20013fd0 	.word	0x20013fd0
 800310c:	30000000 	.word	0x30000000
 8003110:	3000000d 	.word	0x3000000d
 8003114:	20019cfc 	.word	0x20019cfc
 8003118:	20013f3c 	.word	0x20013f3c
 800311c:	2001403e 	.word	0x2001403e
 8003120:	200161fa 	.word	0x200161fa
 8003124:	20019cf6 	.word	0x20019cf6
 8003128:	20019d00 	.word	0x20019d00
 800312c:	20014078 	.word	0x20014078
 8003130:	20019cf7 	.word	0x20019cf7
 8003134:	0801b9b4 	.word	0x0801b9b4
 8003138:	2001d4ec 	.word	0x2001d4ec
 800313c:	200004b8 	.word	0x200004b8
 8003140:	20013f80 	.word	0x20013f80
 8003144:	2001822c 	.word	0x2001822c
 8003148:	2001d71c 	.word	0x2001d71c
 800314c:	2001d2b8 	.word	0x2001d2b8
 8003150:	30042380 	.word	0x30042380
 8003154:	0801b844 	.word	0x0801b844
 8003158:	200160e0 	.word	0x200160e0
 800315c:	20014040 	.word	0x20014040
 8003160:	200160f6 	.word	0x200160f6
 8003164:	20019cf8 	.word	0x20019cf8
 8003168:	20018bb8 	.word	0x20018bb8
 800316c:	20019d10 	.word	0x20019d10
				finalString[2] = charBuf[1];
 8003170:	f89d 301d 	ldrb.w	r3, [sp, #29]
				strcat(finalString, "*.ebp");
 8003174:	a80a      	add	r0, sp, #40	; 0x28
				finalString[2] = charBuf[1];
 8003176:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
				finalString[1] = charBuf[0];
 800317a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800317e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
				finalString[0] = '0';
 8003182:	2330      	movs	r3, #48	; 0x30
 8003184:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
				strcat(finalString, "*.ebp");
 8003188:	f7fd f8a6 	bl	80002d8 <strlen>
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <main+0xa68>)
 800318e:	4603      	mov	r3, r0
 8003190:	a90a      	add	r1, sp, #40	; 0x28
 8003192:	6810      	ldr	r0, [r2, #0]
 8003194:	8892      	ldrh	r2, [r2, #4]
 8003196:	50c8      	str	r0, [r1, r3]
 8003198:	440b      	add	r3, r1
 800319a:	809a      	strh	r2, [r3, #4]
 800319c:	e770      	b.n	8003080 <main+0x940>
	  getPresetNamesFromSDCard();
 800319e:	f7fe fb9b 	bl	80018d8 <getPresetNamesFromSDCard>
	  diskBusy = 1;
 80031a2:	f7ff bbf8 	b.w	8002996 <main+0x256>
 80031a6:	bf00      	nop
 80031a8:	0801b844 	.word	0x0801b844

080031ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop

080031b0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80031b0:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80031b2:	4806      	ldr	r0, [pc, #24]	; (80031cc <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	4a06      	ldr	r2, [pc, #24]	; (80031d0 <MX_RNG_Init+0x20>)
 80031b8:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80031bc:	f006 f894 	bl	80092e8 <HAL_RNG_Init>
 80031c0:	b900      	cbnz	r0, 80031c4 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80031c2:	bd08      	pop	{r3, pc}
 80031c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80031c8:	f7ff bff0 	b.w	80031ac <Error_Handler>
 80031cc:	2001c1b4 	.word	0x2001c1b4
 80031d0:	48021800 	.word	0x48021800

080031d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80031d4:	b510      	push	{r4, lr}
 80031d6:	b0b2      	sub	sp, #200	; 0xc8
 80031d8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031da:	22c0      	movs	r2, #192	; 0xc0
 80031dc:	2100      	movs	r1, #0
 80031de:	a802      	add	r0, sp, #8
 80031e0:	f015 fc00 	bl	80189e4 <memset>
  if(rngHandle->Instance==RNG)
 80031e4:	4b10      	ldr	r3, [pc, #64]	; (8003228 <HAL_RNG_MspInit+0x54>)
 80031e6:	6822      	ldr	r2, [r4, #0]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d001      	beq.n	80031f0 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80031ec:	b032      	add	sp, #200	; 0xc8
 80031ee:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80031f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031f4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031f6:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80031f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031fc:	f004 fe80 	bl	8007f00 <HAL_RCCEx_PeriphCLKConfig>
 8003200:	b970      	cbnz	r0, 8003220 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8003202:	4b0a      	ldr	r3, [pc, #40]	; (800322c <HAL_RNG_MspInit+0x58>)
 8003204:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8003208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800320c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8003210:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003218:	9301      	str	r3, [sp, #4]
 800321a:	9b01      	ldr	r3, [sp, #4]
}
 800321c:	b032      	add	sp, #200	; 0xc8
 800321e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8003220:	f7ff ffc4 	bl	80031ac <Error_Handler>
 8003224:	e7ed      	b.n	8003202 <HAL_RNG_MspInit+0x2e>
 8003226:	bf00      	nop
 8003228:	48021800 	.word	0x48021800
 800322c:	58024400 	.word	0x58024400

08003230 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8003230:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8003232:	4818      	ldr	r0, [pc, #96]	; (8003294 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8003234:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8003236:	4c18      	ldr	r4, [pc, #96]	; (8003298 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8003238:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800323a:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800323c:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800323e:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003240:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003242:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003244:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8003246:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800324a:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800324e:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8003252:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8003254:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003258:	f006 fa96 	bl	8009788 <HAL_SAI_InitProtocol>
 800325c:	b998      	cbnz	r0, 8003286 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 800325e:	480f      	ldr	r0, [pc, #60]	; (800329c <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8003260:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8003262:	4c0f      	ldr	r4, [pc, #60]	; (80032a0 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003264:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003266:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8003268:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 800326a:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800326c:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800326e:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8003270:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8003272:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8003274:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8003276:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8003278:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800327a:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800327e:	f006 fa83 	bl	8009788 <HAL_SAI_InitProtocol>
 8003282:	b918      	cbnz	r0, 800328c <MX_SAI1_Init+0x5c>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8003284:	bd10      	pop	{r4, pc}
    Error_Handler();
 8003286:	f7ff ff91 	bl	80031ac <Error_Handler>
 800328a:	e7e8      	b.n	800325e <MX_SAI1_Init+0x2e>
}
 800328c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003290:	f7ff bf8c 	b.w	80031ac <Error_Handler>
 8003294:	2001c2bc 	.word	0x2001c2bc
 8003298:	40015804 	.word	0x40015804
 800329c:	2001c354 	.word	0x2001c354
 80032a0:	40015824 	.word	0x40015824
 80032a4:	00000000 	.word	0x00000000

080032a8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80032a8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80032aa:	4a55      	ldr	r2, [pc, #340]	; (8003400 <HAL_SAI_MspInit+0x158>)
{
 80032ac:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 80032ae:	6803      	ldr	r3, [r0, #0]
{
 80032b0:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80032b6:	4a53      	ldr	r2, [pc, #332]	; (8003404 <HAL_SAI_MspInit+0x15c>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d03f      	beq.n	800333c <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80032bc:	b009      	add	sp, #36	; 0x24
 80032be:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80032c0:	4b51      	ldr	r3, [pc, #324]	; (8003408 <HAL_SAI_MspInit+0x160>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2a00      	cmp	r2, #0
 80032c6:	f000 8081 	beq.w	80033cc <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 80032ca:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80032cc:	2074      	movs	r0, #116	; 0x74
 80032ce:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 80032d0:	4d4e      	ldr	r5, [pc, #312]	; (800340c <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 80032d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80032d4:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80032d6:	ed9f 7b48 	vldr	d7, [pc, #288]	; 80033f8 <HAL_SAI_MspInit+0x150>
 80032da:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032de:	a902      	add	r1, sp, #8
 80032e0:	484b      	ldr	r0, [pc, #300]	; (8003410 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80032e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80032e4:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032e8:	f002 ff38 	bl	800615c <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 80032ec:	4949      	ldr	r1, [pc, #292]	; (8003414 <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80032ee:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80032f2:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80032f4:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80032f6:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80032f8:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80032fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003300:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003302:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8003306:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003308:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800330c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003310:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003312:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003316:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800331a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800331e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003322:	2304      	movs	r3, #4
 8003324:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8003326:	f001 fa6d 	bl	8004804 <HAL_DMA_Init>
 800332a:	2800      	cmp	r0, #0
 800332c:	d15c      	bne.n	80033e8 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 800332e:	4a35      	ldr	r2, [pc, #212]	; (8003404 <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8003330:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8003332:	6823      	ldr	r3, [r4, #0]
 8003334:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8003336:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 800333a:	d1bf      	bne.n	80032bc <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 800333c:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_SAI_MspInit+0x160>)
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	b3b2      	cbz	r2, 80033b0 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8003342:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003344:	2008      	movs	r0, #8
 8003346:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8003348:	4d33      	ldr	r5, [pc, #204]	; (8003418 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 800334a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800334c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800334e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80033f8 <HAL_SAI_MspInit+0x150>
 8003352:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003356:	a902      	add	r1, sp, #8
 8003358:	482d      	ldr	r0, [pc, #180]	; (8003410 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800335a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800335c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003360:	f002 fefc 	bl	800615c <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8003364:	492d      	ldr	r1, [pc, #180]	; (800341c <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8003366:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003368:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800336a:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800336c:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800336e:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8003372:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003376:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800337a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800337e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003382:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8003386:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800338a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800338e:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003392:	2304      	movs	r3, #4
 8003394:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003398:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800339c:	f001 fa32 	bl	8004804 <HAL_DMA_Init>
 80033a0:	bb28      	cbnz	r0, 80033ee <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80033a2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80033a6:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80033a8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80033ac:	b009      	add	sp, #36	; 0x24
 80033ae:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80033b0:	491b      	ldr	r1, [pc, #108]	; (8003420 <HAL_SAI_MspInit+0x178>)
 80033b2:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80033b6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80033ba:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80033be:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80033c2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033c6:	9101      	str	r1, [sp, #4]
 80033c8:	9901      	ldr	r1, [sp, #4]
 80033ca:	e7ba      	b.n	8003342 <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80033cc:	4914      	ldr	r1, [pc, #80]	; (8003420 <HAL_SAI_MspInit+0x178>)
 80033ce:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80033d2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80033d6:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80033da:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80033de:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80033e2:	9100      	str	r1, [sp, #0]
 80033e4:	9900      	ldr	r1, [sp, #0]
 80033e6:	e770      	b.n	80032ca <HAL_SAI_MspInit+0x22>
      Error_Handler();
 80033e8:	f7ff fee0 	bl	80031ac <Error_Handler>
 80033ec:	e79f      	b.n	800332e <HAL_SAI_MspInit+0x86>
      Error_Handler();
 80033ee:	f7ff fedd 	bl	80031ac <Error_Handler>
 80033f2:	e7d6      	b.n	80033a2 <HAL_SAI_MspInit+0xfa>
 80033f4:	f3af 8000 	nop.w
 80033f8:	00000000 	.word	0x00000000
 80033fc:	00000003 	.word	0x00000003
 8003400:	40015804 	.word	0x40015804
 8003404:	40015824 	.word	0x40015824
 8003408:	2001c1c8 	.word	0x2001c1c8
 800340c:	2001c1cc 	.word	0x2001c1cc
 8003410:	58021000 	.word	0x58021000
 8003414:	40020028 	.word	0x40020028
 8003418:	2001c244 	.word	0x2001c244
 800341c:	40020040 	.word	0x40020040
 8003420:	58024400 	.word	0x58024400

08003424 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8003424:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003426:	4b07      	ldr	r3, [pc, #28]	; (8003444 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003428:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 800342a:	4c07      	ldr	r4, [pc, #28]	; (8003448 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800342c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8003430:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8003432:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003436:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 800343a:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800343e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	2001c3ec 	.word	0x2001c3ec
 8003448:	52007000 	.word	0x52007000

0800344c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800344c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 800344e:	4b2b      	ldr	r3, [pc, #172]	; (80034fc <HAL_SD_MspInit+0xb0>)
{
 8003450:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 8003452:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003454:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8003456:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	9408      	str	r4, [sp, #32]
 800345a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800345e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8003462:	d001      	beq.n	8003468 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8003464:	b00b      	add	sp, #44	; 0x2c
 8003466:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003468:	4b25      	ldr	r3, [pc, #148]	; (8003500 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800346a:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800346c:	2601      	movs	r6, #1
 800346e:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003470:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003474:	4823      	ldr	r0, [pc, #140]	; (8003504 <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003476:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800347a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800347e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8003482:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8003486:	9201      	str	r2, [sp, #4]
 8003488:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800348a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800348e:	f042 0204 	orr.w	r2, r2, #4
 8003492:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003496:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800349a:	f002 0204 	and.w	r2, r2, #4
 800349e:	9202      	str	r2, [sp, #8]
 80034a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80034a6:	f042 0208 	orr.w	r2, r2, #8
 80034aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80034ae:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80034b6:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80034be:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034c0:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80034c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034c8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80034cc:	f002 fe46 	bl	800615c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034d0:	2302      	movs	r3, #2
 80034d2:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034d4:	a904      	add	r1, sp, #16
 80034d6:	480c      	ldr	r0, [pc, #48]	; (8003508 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80034d8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80034da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80034de:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80034e2:	f002 fe3b 	bl	800615c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80034e6:	4622      	mov	r2, r4
 80034e8:	4621      	mov	r1, r4
 80034ea:	2031      	movs	r0, #49	; 0x31
 80034ec:	f000 fff8 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80034f0:	2031      	movs	r0, #49	; 0x31
 80034f2:	f001 f833 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 80034f6:	b00b      	add	sp, #44	; 0x2c
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	bf00      	nop
 80034fc:	52007000 	.word	0x52007000
 8003500:	58024400 	.word	0x58024400
 8003504:	58020800 	.word	0x58020800
 8003508:	58020c00 	.word	0x58020c00
 800350c:	00000000 	.word	0x00000000

08003510 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8003510:	4813      	ldr	r0, [pc, #76]	; (8003560 <MX_SPI1_Init+0x50>)
 8003512:	4a14      	ldr	r2, [pc, #80]	; (8003564 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003514:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8003558 <MX_SPI1_Init+0x48>
{
 8003518:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800351a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 800351c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800351e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8003520:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003522:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003524:	ed80 7b08 	vstr	d7, [r0, #32]
 8003528:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800352c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003530:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003534:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003538:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800353c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003540:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8003544:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003548:	f007 fbba 	bl	800acc0 <HAL_SPI_Init>
 800354c:	b900      	cbnz	r0, 8003550 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800354e:	bd08      	pop	{r3, pc}
 8003550:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8003554:	f7ff be2a 	b.w	80031ac <Error_Handler>
	...
 8003560:	2001c5d0 	.word	0x2001c5d0
 8003564:	40013000 	.word	0x40013000

08003568 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8003568:	4813      	ldr	r0, [pc, #76]	; (80035b8 <MX_SPI5_Init+0x50>)
 800356a:	4a14      	ldr	r2, [pc, #80]	; (80035bc <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800356c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80035b0 <MX_SPI5_Init+0x48>
{
 8003570:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 8003572:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 8003574:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003576:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 8003578:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800357a:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800357c:	ed80 7b08 	vstr	d7, [r0, #32]
 8003580:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8003584:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003588:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800358c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003590:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8003594:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8003598:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800359c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80035a0:	f007 fb8e 	bl	800acc0 <HAL_SPI_Init>
 80035a4:	b900      	cbnz	r0, 80035a8 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80035a6:	bd08      	pop	{r3, pc}
 80035a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80035ac:	f7ff bdfe 	b.w	80031ac <Error_Handler>
	...
 80035b8:	2001c658 	.word	0x2001c658
 80035bc:	40015000 	.word	0x40015000

080035c0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80035c0:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035c2:	2400      	movs	r4, #0
{
 80035c4:	b0bb      	sub	sp, #236	; 0xec
 80035c6:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035c8:	22c0      	movs	r2, #192	; 0xc0
 80035ca:	4621      	mov	r1, r4
 80035cc:	a80a      	add	r0, sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ce:	9408      	str	r4, [sp, #32]
 80035d0:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80035d4:	e9cd 4406 	strd	r4, r4, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80035d8:	f015 fa04 	bl	80189e4 <memset>
  if(spiHandle->Instance==SPI1)
 80035dc:	682b      	ldr	r3, [r5, #0]
 80035de:	4a70      	ldr	r2, [pc, #448]	; (80037a0 <HAL_SPI_MspInit+0x1e0>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d004      	beq.n	80035ee <HAL_SPI_MspInit+0x2e>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 80035e4:	4a6f      	ldr	r2, [pc, #444]	; (80037a4 <HAL_SPI_MspInit+0x1e4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d071      	beq.n	80036ce <HAL_SPI_MspInit+0x10e>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80035ea:	b03b      	add	sp, #236	; 0xec
 80035ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035ee:	4b6e      	ldr	r3, [pc, #440]	; (80037a8 <HAL_SPI_MspInit+0x1e8>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	a904      	add	r1, sp, #16
    hdma_spi1_rx.Instance = DMA1_Stream4;
 80035f2:	4e6e      	ldr	r6, [pc, #440]	; (80037ac <HAL_SPI_MspInit+0x1ec>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80035f4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80035f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035fc:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8003600:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003604:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003608:	9200      	str	r2, [sp, #0]
 800360a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003610:	f042 0201 	orr.w	r2, r2, #1
 8003614:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003618:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800361a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003624:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003626:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003628:	4861      	ldr	r0, [pc, #388]	; (80037b0 <HAL_SPI_MspInit+0x1f0>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800362a:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800362e:	2203      	movs	r2, #3
 8003630:	2305      	movs	r3, #5
 8003632:	e9cd 2307 	strd	r2, r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003636:	f002 fd91 	bl	800615c <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800363a:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800363c:	4a5d      	ldr	r2, [pc, #372]	; (80037b4 <HAL_SPI_MspInit+0x1f4>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800363e:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8003640:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003642:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8003646:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003648:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800364c:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800364e:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8003650:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003652:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8003654:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003658:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800365a:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800365e:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003660:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003664:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003666:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8003668:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800366a:	f001 f8cb 	bl	8004804 <HAL_DMA_Init>
 800366e:	2800      	cmp	r0, #0
 8003670:	f040 808d 	bne.w	800378e <HAL_SPI_MspInit+0x1ce>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8003674:	4c50      	ldr	r4, [pc, #320]	; (80037b8 <HAL_SPI_MspInit+0x1f8>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8003676:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8003678:	4950      	ldr	r1, [pc, #320]	; (80037bc <HAL_SPI_MspInit+0x1fc>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800367a:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800367c:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800367e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8003682:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003684:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003686:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003688:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800368c:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800368e:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003690:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003692:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8003694:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003698:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800369a:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800369c:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800369e:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80036a0:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80036a2:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80036a4:	67ee      	str	r6, [r5, #124]	; 0x7c
 80036a6:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 80036a8:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 80036aa:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80036ae:	f001 f8a9 	bl	8004804 <HAL_DMA_Init>
 80036b2:	2800      	cmp	r0, #0
 80036b4:	d168      	bne.n	8003788 <HAL_SPI_MspInit+0x1c8>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80036b6:	2200      	movs	r2, #0
 80036b8:	2102      	movs	r1, #2
 80036ba:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80036bc:	67ac      	str	r4, [r5, #120]	; 0x78
 80036be:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 80036c0:	f000 ff0e 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80036c4:	2023      	movs	r0, #35	; 0x23
 80036c6:	f000 ff49 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 80036ca:	b03b      	add	sp, #236	; 0xec
 80036cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80036ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036d2:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036d4:	a80a      	add	r0, sp, #40	; 0x28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 80036d6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036da:	f004 fc11 	bl	8007f00 <HAL_RCCEx_PeriphCLKConfig>
 80036de:	2800      	cmp	r0, #0
 80036e0:	d158      	bne.n	8003794 <HAL_SPI_MspInit+0x1d4>
    __HAL_RCC_SPI5_CLK_ENABLE();
 80036e2:	4b31      	ldr	r3, [pc, #196]	; (80037a8 <HAL_SPI_MspInit+0x1e8>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036e4:	2402      	movs	r4, #2
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 80036e6:	f44f 7130 	mov.w	r1, #704	; 0x2c0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ea:	2600      	movs	r6, #0
    __HAL_RCC_SPI5_CLK_ENABLE();
 80036ec:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80036f0:	2705      	movs	r7, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036f2:	4833      	ldr	r0, [pc, #204]	; (80037c0 <HAL_SPI_MspInit+0x200>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 80036f4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80036f8:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 80036fc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003700:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003704:	9202      	str	r2, [sp, #8]
 8003706:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003708:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800370c:	f042 0220 	orr.w	r2, r2, #32
 8003710:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8003714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003718:	9407      	str	r4, [sp, #28]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800371a:	f003 0320 	and.w	r3, r3, #32
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800371e:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003720:	9708      	str	r7, [sp, #32]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003722:	9303      	str	r3, [sp, #12]
 8003724:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003726:	e9cd 1404 	strd	r1, r4, [sp, #16]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800372a:	a904      	add	r1, sp, #16
 800372c:	f002 fd16 	bl	800615c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003730:	f44f 7380 	mov.w	r3, #256	; 0x100
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003734:	4822      	ldr	r0, [pc, #136]	; (80037c0 <HAL_SPI_MspInit+0x200>)
 8003736:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003738:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800373a:	9304      	str	r3, [sp, #16]
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800373c:	4c21      	ldr	r4, [pc, #132]	; (80037c4 <HAL_SPI_MspInit+0x204>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800373e:	9708      	str	r7, [sp, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003740:	e9cd 6606 	strd	r6, r6, [sp, #24]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003744:	f002 fd0a 	bl	800615c <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8003748:	4a1f      	ldr	r2, [pc, #124]	; (80037c8 <HAL_SPI_MspInit+0x208>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800374a:	2355      	movs	r3, #85	; 0x55
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800374c:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800374e:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8003750:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003754:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003758:	f44f 3340 	mov.w	r3, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800375c:	e9c4 6602 	strd	r6, r6, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003760:	e9c4 6605 	strd	r6, r6, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003764:	6122      	str	r2, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003766:	e9c4 6307 	strd	r6, r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800376a:	f001 f84b 	bl	8004804 <HAL_DMA_Init>
 800376e:	b9a0      	cbnz	r0, 800379a <HAL_SPI_MspInit+0x1da>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8003770:	2200      	movs	r2, #0
 8003772:	2104      	movs	r1, #4
 8003774:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8003776:	67ec      	str	r4, [r5, #124]	; 0x7c
 8003778:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 800377a:	f000 feb1 	bl	80044e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800377e:	2055      	movs	r0, #85	; 0x55
 8003780:	f000 feec 	bl	800455c <HAL_NVIC_EnableIRQ>
}
 8003784:	b03b      	add	sp, #236	; 0xec
 8003786:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8003788:	f7ff fd10 	bl	80031ac <Error_Handler>
 800378c:	e793      	b.n	80036b6 <HAL_SPI_MspInit+0xf6>
      Error_Handler();
 800378e:	f7ff fd0d 	bl	80031ac <Error_Handler>
 8003792:	e76f      	b.n	8003674 <HAL_SPI_MspInit+0xb4>
      Error_Handler();
 8003794:	f7ff fd0a 	bl	80031ac <Error_Handler>
 8003798:	e7a3      	b.n	80036e2 <HAL_SPI_MspInit+0x122>
      Error_Handler();
 800379a:	f7ff fd07 	bl	80031ac <Error_Handler>
 800379e:	e7e7      	b.n	8003770 <HAL_SPI_MspInit+0x1b0>
 80037a0:	40013000 	.word	0x40013000
 80037a4:	40015000 	.word	0x40015000
 80037a8:	58024400 	.word	0x58024400
 80037ac:	2001c468 	.word	0x2001c468
 80037b0:	58020000 	.word	0x58020000
 80037b4:	40020070 	.word	0x40020070
 80037b8:	2001c4e0 	.word	0x2001c4e0
 80037bc:	40020088 	.word	0x40020088
 80037c0:	58021400 	.word	0x58021400
 80037c4:	2001c558 	.word	0x2001c558
 80037c8:	40020058 	.word	0x40020058

080037cc <Default_Handler>:
void __attribute__((naked, noreturn)) Default_Handler()
{
	//If you get stuck here, your code is missing a handler for some interrupt.
	//Define a 'DEBUG_DEFAULT_INTERRUPT_HANDLERS' macro via VisualGDB Project Properties and rebuild your project.
	//This will pinpoint a specific missing vector.
	for (;;) ;
 80037cc:	e7fe      	b.n	80037cc <Default_Handler>
 80037ce:	bf00      	nop

080037d0 <Reset_Handler>:
	for (pSource = &_sidata, pDest = &_sdata; pDest != &_edata; pSource++, pDest++)
 80037d0:	480f      	ldr	r0, [pc, #60]	; (8003810 <Reset_Handler+0x40>)
 80037d2:	4a10      	ldr	r2, [pc, #64]	; (8003814 <Reset_Handler+0x44>)
 80037d4:	4290      	cmp	r0, r2
 80037d6:	d003      	beq.n	80037e0 <Reset_Handler+0x10>
		*pDest = *pSource;
 80037d8:	1a12      	subs	r2, r2, r0
 80037da:	490f      	ldr	r1, [pc, #60]	; (8003818 <Reset_Handler+0x48>)
 80037dc:	f015 f92e 	bl	8018a3c <memcpy>
	for (pDest = &_sbss; pDest != &_ebss; pDest++)
 80037e0:	480e      	ldr	r0, [pc, #56]	; (800381c <Reset_Handler+0x4c>)
 80037e2:	4a0f      	ldr	r2, [pc, #60]	; (8003820 <Reset_Handler+0x50>)
 80037e4:	4290      	cmp	r0, r2
 80037e6:	d003      	beq.n	80037f0 <Reset_Handler+0x20>
		*pDest = 0;
 80037e8:	1a12      	subs	r2, r2, r0
 80037ea:	2100      	movs	r1, #0
 80037ec:	f015 f8fa 	bl	80189e4 <memset>
	for (pSource = &_siitcmram, pDest = &_sitcmram; pDest != &_eitcmram; pSource++, pDest++)
 80037f0:	480c      	ldr	r0, [pc, #48]	; (8003824 <Reset_Handler+0x54>)
 80037f2:	4a0d      	ldr	r2, [pc, #52]	; (8003828 <Reset_Handler+0x58>)
 80037f4:	4290      	cmp	r0, r2
 80037f6:	d003      	beq.n	8003800 <Reset_Handler+0x30>
		*pDest = *pSource;
 80037f8:	1a12      	subs	r2, r2, r0
 80037fa:	490c      	ldr	r1, [pc, #48]	; (800382c <Reset_Handler+0x5c>)
 80037fc:	f015 f91e 	bl	8018a3c <memcpy>
	SystemInit();
 8003800:	f000 fd6c 	bl	80042dc <SystemInit>
	__libc_init_array();
 8003804:	f015 f8f6 	bl	80189f4 <__libc_init_array>
	(void)main();
 8003808:	f7fe ff9a 	bl	8002740 <main>
	for (;;) ;
 800380c:	e7fe      	b.n	800380c <Reset_Handler+0x3c>
 800380e:	bf00      	nop
 8003810:	20000000 	.word	0x20000000
 8003814:	20000930 	.word	0x20000930
 8003818:	080272f8 	.word	0x080272f8
 800381c:	20000930 	.word	0x20000930
 8003820:	2001da90 	.word	0x2001da90
 8003824:	00000400 	.word	0x00000400
 8003828:	00009c80 	.word	0x00009c80
 800382c:	08027c28 	.word	0x08027c28

08003830 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003830:	4b07      	ldr	r3, [pc, #28]	; (8003850 <HAL_MspInit+0x20>)
{
 8003832:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003834:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8003838:	f042 0202 	orr.w	r2, r2, #2
 800383c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8003840:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800384c:	b002      	add	sp, #8
 800384e:	4770      	bx	lr
 8003850:	58024400 	.word	0x58024400

08003854 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003854:	e7fe      	b.n	8003854 <NMI_Handler>
 8003856:	bf00      	nop

08003858 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003858:	e7fe      	b.n	8003858 <HardFault_Handler>
 800385a:	bf00      	nop

0800385c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800385c:	e7fe      	b.n	800385c <MemManage_Handler>
 800385e:	bf00      	nop

08003860 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003860:	e7fe      	b.n	8003860 <BusFault_Handler>
 8003862:	bf00      	nop

08003864 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003864:	e7fe      	b.n	8003864 <UsageFault_Handler>
 8003866:	bf00      	nop

08003868 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop

0800386c <DebugMon_Handler>:
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop

08003870 <PendSV_Handler>:
 8003870:	4770      	bx	lr
 8003872:	bf00      	nop

08003874 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003874:	f000 bdee 	b.w	8004454 <HAL_IncTick>

08003878 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8003878:	4801      	ldr	r0, [pc, #4]	; (8003880 <DMA1_Stream1_IRQHandler+0x8>)
 800387a:	f002 b82f 	b.w	80058dc <HAL_DMA_IRQHandler>
 800387e:	bf00      	nop
 8003880:	2001c1cc 	.word	0x2001c1cc

08003884 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8003884:	4801      	ldr	r0, [pc, #4]	; (800388c <DMA1_Stream2_IRQHandler+0x8>)
 8003886:	f002 b829 	b.w	80058dc <HAL_DMA_IRQHandler>
 800388a:	bf00      	nop
 800388c:	2001c244 	.word	0x2001c244

08003890 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8003890:	4801      	ldr	r0, [pc, #4]	; (8003898 <DMA1_Stream3_IRQHandler+0x8>)
 8003892:	f002 b823 	b.w	80058dc <HAL_DMA_IRQHandler>
 8003896:	bf00      	nop
 8003898:	2001c558 	.word	0x2001c558

0800389c <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <DMA1_Stream4_IRQHandler+0x8>)
 800389e:	f002 b81d 	b.w	80058dc <HAL_DMA_IRQHandler>
 80038a2:	bf00      	nop
 80038a4:	2001c468 	.word	0x2001c468

080038a8 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <DMA1_Stream5_IRQHandler+0x8>)
 80038aa:	f002 b817 	b.w	80058dc <HAL_DMA_IRQHandler>
 80038ae:	bf00      	nop
 80038b0:	2001c4e0 	.word	0x2001c4e0

080038b4 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80038b4:	4801      	ldr	r0, [pc, #4]	; (80038bc <I2C2_EV_IRQHandler+0x8>)
 80038b6:	f003 b88d 	b.w	80069d4 <HAL_I2C_EV_IRQHandler>
 80038ba:	bf00      	nop
 80038bc:	20013fd0 	.word	0x20013fd0

080038c0 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80038c0:	4801      	ldr	r0, [pc, #4]	; (80038c8 <I2C2_ER_IRQHandler+0x8>)
 80038c2:	f003 b9ff 	b.w	8006cc4 <HAL_I2C_ER_IRQHandler>
 80038c6:	bf00      	nop
 80038c8:	20013fd0 	.word	0x20013fd0

080038cc <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80038cc:	4801      	ldr	r0, [pc, #4]	; (80038d4 <SPI1_IRQHandler+0x8>)
 80038ce:	f007 be1d 	b.w	800b50c <HAL_SPI_IRQHandler>
 80038d2:	bf00      	nop
 80038d4:	2001c5d0 	.word	0x2001c5d0

080038d8 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80038d8:	4801      	ldr	r0, [pc, #4]	; (80038e0 <SDMMC1_IRQHandler+0x8>)
 80038da:	f006 bfb9 	b.w	800a850 <HAL_SD_IRQHandler>
 80038de:	bf00      	nop
 80038e0:	2001c3ec 	.word	0x2001c3ec

080038e4 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80038e4:	4801      	ldr	r0, [pc, #4]	; (80038ec <SPI5_IRQHandler+0x8>)
 80038e6:	f007 be11 	b.w	800b50c <HAL_SPI_IRQHandler>
 80038ea:	bf00      	nop
 80038ec:	2001c658 	.word	0x2001c658

080038f0 <audioInitSynth>:
 float polyDivider[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
 float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void audioInitSynth()
{
 80038f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038f4:	ed2d 8b0a 	vpush	{d8-d12}

			tPBSineTriangle_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);

			freqMult[i][v] = 1.0f;
 80038f8:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
{
 80038fc:	b087      	sub	sp, #28
 80038fe:	2600      	movs	r6, #0
 8003900:	4be1      	ldr	r3, [pc, #900]	; (8003c88 <audioInitSynth+0x398>)
 8003902:	f8df b46c 	ldr.w	fp, [pc, #1132]	; 8003d70 <audioInitSynth+0x480>
			tPBSaw_init(&saw[i][v], &leaf);
 8003906:	4ce1      	ldr	r4, [pc, #900]	; (8003c8c <audioInitSynth+0x39c>)
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 8003908:	ed9f 9ae1 	vldr	s18, [pc, #900]	; 8003c90 <audioInitSynth+0x3a0>
 800390c:	eddf bae1 	vldr	s23, [pc, #900]	; 8003c94 <audioInitSynth+0x3a4>
		{
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 8003910:	ed9f bae1 	vldr	s22, [pc, #900]	; 8003c98 <audioInitSynth+0x3a8>
		}


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8003914:	ed9f aae1 	vldr	s20, [pc, #900]	; 8003c9c <audioInitSynth+0x3ac>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003918:	e9cd 3602 	strd	r3, r6, [sp, #8]
		for(int i = 0; i < NUM_OSC; i++)
 800391c:	4be0      	ldr	r3, [pc, #896]	; (8003ca0 <audioInitSynth+0x3b0>)
{
 800391e:	4635      	mov	r5, r6
 8003920:	f106 0818 	add.w	r8, r6, #24
			midiAdd[i][v] = 0.0f;
 8003924:	f04f 0a00 	mov.w	sl, #0
 8003928:	eb03 0906 	add.w	r9, r3, r6
 800392c:	4bdd      	ldr	r3, [pc, #884]	; (8003ca4 <audioInitSynth+0x3b4>)
 800392e:	199f      	adds	r7, r3, r6
			tPBSaw_init(&saw[i][v], &leaf);
 8003930:	4648      	mov	r0, r9
 8003932:	4621      	mov	r1, r4
 8003934:	f011 fa36 	bl	8014da4 <tPBSaw_init>
			tPBPulse_init(&pulse[i][v], &leaf);
 8003938:	4638      	mov	r0, r7
 800393a:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 800393c:	f109 0908 	add.w	r9, r9, #8
			tPBPulse_init(&pulse[i][v], &leaf);
 8003940:	f011 f9a2 	bl	8014c88 <tPBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8003944:	4bd8      	ldr	r3, [pc, #864]	; (8003ca8 <audioInitSynth+0x3b8>)
 8003946:	4621      	mov	r1, r4
		for(int i = 0; i < NUM_OSC; i++)
 8003948:	3708      	adds	r7, #8
			tCycle_init(&sine[i][v],  &leaf);
 800394a:	1958      	adds	r0, r3, r5
 800394c:	f010 ff2c 	bl	80147a8 <tCycle_init>
			tPBTriangle_init(&tri[i][v],  &leaf);
 8003950:	4bd6      	ldr	r3, [pc, #856]	; (8003cac <audioInitSynth+0x3bc>)
 8003952:	4621      	mov	r1, r4
 8003954:	1958      	adds	r0, r3, r5
 8003956:	f010 ffbf 	bl	80148d8 <tPBTriangle_init>
			tPBSawSquare_init(&sawPaired[i][v], &leaf);
 800395a:	4bd5      	ldr	r3, [pc, #852]	; (8003cb0 <audioInitSynth+0x3c0>)
 800395c:	4621      	mov	r1, r4
 800395e:	1958      	adds	r0, r3, r5
 8003960:	f011 fa70 	bl	8014e44 <tPBSawSquare_init>
			tPBSineTriangle_init(&sinePaired[i][v],&leaf);
 8003964:	4bd3      	ldr	r3, [pc, #844]	; (8003cb4 <audioInitSynth+0x3c4>)
 8003966:	4621      	mov	r1, r4
 8003968:	1958      	adds	r0, r3, r5
 800396a:	f011 f88b 	bl	8014a84 <tPBSineTriangle_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.005f, &leaf);
 800396e:	4bd2      	ldr	r3, [pc, #840]	; (8003cb8 <audioInitSynth+0x3c8>)
 8003970:	eef0 0a49 	vmov.f32	s1, s18
 8003974:	4621      	mov	r1, r4
 8003976:	1958      	adds	r0, r3, r5
 8003978:	eeb0 0a6b 	vmov.f32	s0, s23
 800397c:	f00d fba0 	bl	80110c0 <tExpSmooth_init>
			freqMult[i][v] = 1.0f;
 8003980:	4bce      	ldr	r3, [pc, #824]	; (8003cbc <audioInitSynth+0x3cc>)
 8003982:	442b      	add	r3, r5
 8003984:	ed83 ca00 	vstr	s24, [r3]
			midiAdd[i][v] = 0.0f;
 8003988:	4bcd      	ldr	r3, [pc, #820]	; (8003cc0 <audioInitSynth+0x3d0>)
 800398a:	442b      	add	r3, r5
		for(int i = 0; i < NUM_OSC; i++)
 800398c:	3508      	adds	r5, #8
 800398e:	4545      	cmp	r5, r8
			midiAdd[i][v] = 0.0f;
 8003990:	f8c3 a000 	str.w	sl, [r3]
		for(int i = 0; i < NUM_OSC; i++)
 8003994:	d1cc      	bne.n	8003930 <audioInitSynth+0x40>
 8003996:	4635      	mov	r5, r6
 8003998:	f106 0710 	add.w	r7, r6, #16
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800399c:	eddf 8ac9 	vldr	s17, [pc, #804]	; 8003cc4 <audioInitSynth+0x3d4>
 80039a0:	ed9f 8ac9 	vldr	s16, [pc, #804]	; 8003cc8 <audioInitSynth+0x3d8>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 80039a4:	eddf 9ac9 	vldr	s19, [pc, #804]	; 8003ccc <audioInitSynth+0x3dc>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80039a8:	4bc9      	ldr	r3, [pc, #804]	; (8003cd0 <audioInitSynth+0x3e0>)
 80039aa:	eef0 0a68 	vmov.f32	s1, s17
 80039ae:	eeb0 0a48 	vmov.f32	s0, s16
 80039b2:	2101      	movs	r1, #1
 80039b4:	1958      	adds	r0, r3, r5
 80039b6:	4622      	mov	r2, r4
 80039b8:	f00d fefc 	bl	80117b4 <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80039bc:	4bc5      	ldr	r3, [pc, #788]	; (8003cd4 <audioInitSynth+0x3e4>)
 80039be:	eef0 0a68 	vmov.f32	s1, s17
 80039c2:	4622      	mov	r2, r4
 80039c4:	1958      	adds	r0, r3, r5
 80039c6:	eeb0 0a48 	vmov.f32	s0, s16
 80039ca:	2100      	movs	r1, #0
 80039cc:	f00d fef2 	bl	80117b4 <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80039d0:	4bc1      	ldr	r3, [pc, #772]	; (8003cd8 <audioInitSynth+0x3e8>)
 80039d2:	4622      	mov	r2, r4
 80039d4:	eef0 0a68 	vmov.f32	s1, s17
 80039d8:	1958      	adds	r0, r3, r5
 80039da:	eeb0 0a48 	vmov.f32	s0, s16
 80039de:	2102      	movs	r1, #2
 80039e0:	f00d fee8 	bl	80117b4 <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 80039e4:	4bbd      	ldr	r3, [pc, #756]	; (8003cdc <audioInitSynth+0x3ec>)
 80039e6:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 80039ea:	4621      	mov	r1, r4
 80039ec:	1958      	adds	r0, r3, r5
 80039ee:	eeb0 0a48 	vmov.f32	s0, s16
 80039f2:	f00f fa91 	bl	8012f18 <tDiodeFilter_init>
			tVZFilterBell_init(&VZfilterPeak[i][v], 2000.f, 1.9f, 1.0f, &leaf);
 80039f6:	4bba      	ldr	r3, [pc, #744]	; (8003ce0 <audioInitSynth+0x3f0>)
 80039f8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80039fc:	4621      	mov	r1, r4
 80039fe:	1958      	adds	r0, r3, r5
 8003a00:	eef0 0a4b 	vmov.f32	s1, s22
 8003a04:	eeb0 0a48 	vmov.f32	s0, s16
 8003a08:	f00f f8c8 	bl	8012b9c <tVZFilterBell_init>
			tVZFilterLS_init(&VZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003a0c:	4bb5      	ldr	r3, [pc, #724]	; (8003ce4 <audioInitSynth+0x3f4>)
 8003a0e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a12:	4621      	mov	r1, r4
 8003a14:	1958      	adds	r0, r3, r5
 8003a16:	eef0 0a69 	vmov.f32	s1, s19
 8003a1a:	eeb0 0a48 	vmov.f32	s0, s16
 8003a1e:	f00e fdb3 	bl	8012588 <tVZFilterLS_init>
			tVZFilterHS_init(&VZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003a22:	4bb1      	ldr	r3, [pc, #708]	; (8003ce8 <audioInitSynth+0x3f8>)
 8003a24:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003a28:	4621      	mov	r1, r4
 8003a2a:	1958      	adds	r0, r3, r5
 8003a2c:	eef0 0a69 	vmov.f32	s1, s19
 8003a30:	eeb0 0a48 	vmov.f32	s0, s16
 8003a34:	f00e ff1c 	bl	8012870 <tVZFilterHS_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003a38:	4bac      	ldr	r3, [pc, #688]	; (8003cec <audioInitSynth+0x3fc>)
 8003a3a:	4622      	mov	r2, r4
 8003a3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a40:	1958      	adds	r0, r3, r5
 8003a42:	eeb0 0a48 	vmov.f32	s0, s16
 8003a46:	2104      	movs	r1, #4
 8003a48:	f00e fb2e 	bl	80120a8 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003a4c:	4ba8      	ldr	r3, [pc, #672]	; (8003cf0 <audioInitSynth+0x400>)
 8003a4e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a52:	4621      	mov	r1, r4
 8003a54:	1958      	adds	r0, r3, r5
 8003a56:	eeb0 0a48 	vmov.f32	s0, s16
 8003a5a:	f00f ff0d 	bl	8013878 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003a5e:	4ba5      	ldr	r3, [pc, #660]	; (8003cf4 <audioInitSynth+0x404>)
 8003a60:	eeb0 0a6b 	vmov.f32	s0, s23
 8003a64:	4621      	mov	r1, r4
 8003a66:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 8003a68:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 8003a6a:	eddf 0aa3 	vldr	s1, [pc, #652]	; 8003cf8 <audioInitSynth+0x408>
 8003a6e:	f00d fb27 	bl	80110c0 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 8003a72:	42bd      	cmp	r5, r7
 8003a74:	d198      	bne.n	80039a8 <audioInitSynth+0xb8>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8003a76:	4ba1      	ldr	r3, [pc, #644]	; (8003cfc <audioInitSynth+0x40c>)
 8003a78:	2500      	movs	r5, #0
 8003a7a:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003a7e:	4ba0      	ldr	r3, [pc, #640]	; (8003d00 <audioInitSynth+0x410>)
 8003a80:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 8003a82:	eb08 0005 	add.w	r0, r8, r5
 8003a86:	4621      	mov	r1, r4
 8003a88:	f011 fad2 	bl	8015030 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 8003a8c:	1978      	adds	r0, r7, r5
 8003a8e:	4621      	mov	r1, r4
 8003a90:	f011 fb14 	bl	80150bc <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8003a94:	4b9b      	ldr	r3, [pc, #620]	; (8003d04 <audioInitSynth+0x414>)
 8003a96:	4621      	mov	r1, r4
 8003a98:	1998      	adds	r0, r3, r6
 8003a9a:	4428      	add	r0, r5
 8003a9c:	f010 fe84 	bl	80147a8 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 8003aa0:	4b99      	ldr	r3, [pc, #612]	; (8003d08 <audioInitSynth+0x418>)
 8003aa2:	4621      	mov	r1, r4
 8003aa4:	1998      	adds	r0, r3, r6
 8003aa6:	4428      	add	r0, r5
 8003aa8:	f011 fcfa 	bl	80154a0 <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 8003aac:	4b97      	ldr	r3, [pc, #604]	; (8003d0c <audioInitSynth+0x41c>)
 8003aae:	4621      	mov	r1, r4
 8003ab0:	1998      	adds	r0, r3, r6
 8003ab2:	4428      	add	r0, r5
 8003ab4:	f011 fd50 	bl	8015558 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8003ab8:	4b95      	ldr	r3, [pc, #596]	; (8003d10 <audioInitSynth+0x420>)
 8003aba:	4621      	mov	r1, r4
 8003abc:	1998      	adds	r0, r3, r6
 8003abe:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 8003ac0:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8003ac2:	f011 fc29 	bl	8015318 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8003ac6:	2d20      	cmp	r5, #32
 8003ac8:	d1db      	bne.n	8003a82 <audioInitSynth+0x192>
 8003aca:	9f02      	ldr	r7, [sp, #8]
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8003acc:	eddf 8a91 	vldr	s17, [pc, #580]	; 8003d14 <audioInitSynth+0x424>
 8003ad0:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8003ad4:	ed9f 8a90 	vldr	s16, [pc, #576]	; 8003d18 <audioInitSynth+0x428>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8003ad8:	4628      	mov	r0, r5
 8003ada:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8003ade:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8003ae2:	4623      	mov	r3, r4
 8003ae4:	eef0 0a4a 	vmov.f32	s1, s20
 8003ae8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003aec:	eeb0 0a68 	vmov.f32	s0, s17
 8003af0:	498a      	ldr	r1, [pc, #552]	; (8003d1c <audioInitSynth+0x42c>)
 8003af2:	f00c ffd1 	bl	8010a98 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8003af6:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 8003af8:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 8003afa:	eeb0 0a48 	vmov.f32	s0, s16
 8003afe:	f00d f879 	bl	8010bf4 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 8003b02:	42bd      	cmp	r5, r7
 8003b04:	d1e8      	bne.n	8003ad8 <audioInitSynth+0x1e8>
		}

		//noise
		tVZFilterLS_init(&noiseShelf1[v], 80.0f, 0.5f, 1.0f, &leaf);
 8003b06:	4b86      	ldr	r3, [pc, #536]	; (8003d20 <audioInitSynth+0x430>)
 8003b08:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003b0c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003b10:	ed9f 0a84 	vldr	s0, [pc, #528]	; 8003d24 <audioInitSynth+0x434>
 8003b14:	1998      	adds	r0, r3, r6
 8003b16:	4621      	mov	r1, r4
 8003b18:	f00e fd36 	bl	8012588 <tVZFilterLS_init>
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003b1c:	4b82      	ldr	r3, [pc, #520]	; (8003d28 <audioInitSynth+0x438>)
 8003b1e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003b22:	4621      	mov	r1, r4
 8003b24:	1998      	adds	r0, r3, r6
 8003b26:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003b2a:	ed9f 0a80 	vldr	s0, [pc, #512]	; 8003d2c <audioInitSynth+0x43c>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003b2e:	4635      	mov	r5, r6
		tVZFilterHS_init(&noiseShelf2[v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003b30:	f00e fe9e 	bl	8012870 <tVZFilterHS_init>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003b34:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <audioInitSynth+0x440>)
 8003b36:	4a7f      	ldr	r2, [pc, #508]	; (8003d34 <audioInitSynth+0x444>)
 8003b38:	eef0 0a4b 	vmov.f32	s1, s22
 8003b3c:	eb03 0a06 	add.w	sl, r3, r6
 8003b40:	4b7d      	ldr	r3, [pc, #500]	; (8003d38 <audioInitSynth+0x448>)
 8003b42:	1990      	adds	r0, r2, r6
 8003b44:	eeb0 0a4a 	vmov.f32	s0, s20
 8003b48:	199f      	adds	r7, r3, r6
 8003b4a:	f106 0320 	add.w	r3, r6, #32
 8003b4e:	4621      	mov	r1, r4
 8003b50:	ed9f 1a7a 	vldr	s2, [pc, #488]	; 8003d3c <audioInitSynth+0x44c>
 8003b54:	9304      	str	r3, [sp, #16]
 8003b56:	f00f f821 	bl	8012b9c <tVZFilterBell_init>

		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003b5a:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8003d40 <audioInitSynth+0x450>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003b5e:	9605      	str	r6, [sp, #20]

	        //tTapeDelay_initToPool(&tapeDelay[i][v], 15000.0f, 30000, &largePool);
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003b60:	eddf 9a58 	vldr	s19, [pc, #352]	; 8003cc4 <audioInitSynth+0x3d4>
 8003b64:	eddf 8a58 	vldr	s17, [pc, #352]	; 8003cc8 <audioInitSynth+0x3d8>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003b68:	eddf aa58 	vldr	s21, [pc, #352]	; 8003ccc <audioInitSynth+0x3dc>
		tVZFilterBell_init(&noiseBell1[v],1000.0f, 1.9f, 1.09f, &leaf);
 8003b6c:	9e04      	ldr	r6, [sp, #16]
			tCrusher_init(&bc[i][v],&leaf);
 8003b6e:	4650      	mov	r0, sl
 8003b70:	4621      	mov	r1, r4
 8003b72:	f00c fd73 	bl	801065c <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 8003b76:	4b73      	ldr	r3, [pc, #460]	; (8003d44 <audioInitSynth+0x454>)
 8003b78:	4621      	mov	r1, r4
 8003b7a:	4638      	mov	r0, r7
 8003b7c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003b80:	eb03 0905 	add.w	r9, r3, r5
 8003b84:	f00e f802 	bl	8011b8c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003b88:	4638      	mov	r0, r7
 8003b8a:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003b8e:	f10a 0a08 	add.w	sl, sl, #8
			tHighpass_setSampleRate(&dcBlock1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003b92:	f00e f85b 	bl	8011c4c <tHighpass_setSampleRate>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 8003b96:	4b6c      	ldr	r3, [pc, #432]	; (8003d48 <audioInitSynth+0x458>)
 8003b98:	4621      	mov	r1, r4
 8003b9a:	4648      	mov	r0, r9
 8003b9c:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8003ba0:	eb03 0805 	add.w	r8, r3, r5
 8003ba4:	f00d fff2 	bl	8011b8c <tHighpass_init>
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003ba8:	4648      	mov	r0, r9
 8003baa:	eeb0 0a48 	vmov.f32	s0, s16
		for (int i = 0; i < NUM_EFFECT; i++)
 8003bae:	3708      	adds	r7, #8
			tHighpass_setSampleRate(&dcBlock2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003bb0:	f00e f84c 	bl	8011c4c <tHighpass_setSampleRate>
			tVZFilterLS_init(&shelf1[i][v], 80.0f, 0.5f, 1.0f,&leaf);
 8003bb4:	4b65      	ldr	r3, [pc, #404]	; (8003d4c <audioInitSynth+0x45c>)
 8003bb6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003bba:	4621      	mov	r1, r4
 8003bbc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003bc0:	4640      	mov	r0, r8
 8003bc2:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8003d24 <audioInitSynth+0x434>
 8003bc6:	eb03 0905 	add.w	r9, r3, r5
 8003bca:	f00e fcdd 	bl	8012588 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003bce:	4640      	mov	r0, r8
 8003bd0:	eeb0 0a48 	vmov.f32	s0, s16
 8003bd4:	f00e fcdc 	bl	8012590 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&shelf2[i][v], 12000.0f, 0.5f, 1.0f, &leaf);
 8003bd8:	4b5d      	ldr	r3, [pc, #372]	; (8003d50 <audioInitSynth+0x460>)
 8003bda:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003bde:	4621      	mov	r1, r4
 8003be0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8003be4:	4648      	mov	r0, r9
 8003be6:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8003d2c <audioInitSynth+0x43c>
 8003bea:	eb03 0805 	add.w	r8, r3, r5
 8003bee:	f00e fe3f 	bl	8012870 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003bf2:	4648      	mov	r0, r9
 8003bf4:	eeb0 0a48 	vmov.f32	s0, s16
 8003bf8:	f00e fe3e 	bl	8012878 <tVZFilterHS_setSampleRate>
			tVZFilterBell_init(&bell1[i][v], 1000.0f, 1.9f, 1.0f, &leaf);
 8003bfc:	4b55      	ldr	r3, [pc, #340]	; (8003d54 <audioInitSynth+0x464>)
 8003bfe:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003c02:	4621      	mov	r1, r4
 8003c04:	eb03 0905 	add.w	r9, r3, r5
 8003c08:	eef0 0a4b 	vmov.f32	s1, s22
 8003c0c:	4640      	mov	r0, r8
 8003c0e:	eeb0 0a4a 	vmov.f32	s0, s20
 8003c12:	f00e ffc3 	bl	8012b9c <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003c16:	eeb0 0a48 	vmov.f32	s0, s16
 8003c1a:	4640      	mov	r0, r8
 8003c1c:	f00e ffc2 	bl	8012ba4 <tVZFilterBell_setSampleRate>
			tCompressor_init(&comp[i][v], &leaf);
 8003c20:	4648      	mov	r0, r9
 8003c22:	4621      	mov	r1, r4
 8003c24:	f00c fdd6 	bl	80107d4 <tCompressor_init>
			tCompressor_setTables(&comp[i][v], atoDbTable, dbtoATable, 0.00001f, 4.0f, -90.0f, 30.0f, ATODB_TABLE_SIZE, DBTOA_TABLE_SIZE);
 8003c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003c2c:	494a      	ldr	r1, [pc, #296]	; (8003d58 <audioInitSynth+0x468>)
 8003c2e:	eef3 1a0e 	vmov.f32	s3, #62	; 0x41f00000  30.0
 8003c32:	eef1 0a00 	vmov.f32	s1, #16	; 0x40800000  4.0
 8003c36:	ed9f 1a49 	vldr	s2, [pc, #292]	; 8003d5c <audioInitSynth+0x46c>
 8003c3a:	4a49      	ldr	r2, [pc, #292]	; (8003d60 <audioInitSynth+0x470>)
 8003c3c:	eb01 0805 	add.w	r8, r1, r5
 8003c40:	4648      	mov	r0, r9
 8003c42:	4948      	ldr	r1, [pc, #288]	; (8003d64 <audioInitSynth+0x474>)
 8003c44:	9300      	str	r3, [sp, #0]
 8003c46:	ed9f 0a48 	vldr	s0, [pc, #288]	; 8003d68 <audioInitSynth+0x478>
 8003c4a:	f00c fe6b 	bl	8010924 <tCompressor_setTables>
			tCompressor_setSampleRate(&comp[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003c4e:	eeb0 0a48 	vmov.f32	s0, s16
 8003c52:	4648      	mov	r0, r9
 8003c54:	f00c fe8c 	bl	8010970 <tCompressor_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 8003c58:	4b44      	ldr	r3, [pc, #272]	; (8003d6c <audioInitSynth+0x47c>)
 8003c5a:	4621      	mov	r1, r4
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	eb03 0905 	add.w	r9, r3, r5
 8003c62:	f010 fda1 	bl	80147a8 <tCycle_init>
			tCycle_setSampleRate(&mod1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003c66:	eeb0 0a48 	vmov.f32	s0, s16
 8003c6a:	4640      	mov	r0, r8
 8003c6c:	f010 fe1c 	bl	80148a8 <tCycle_setSampleRate>
			tCycle_init(&mod2[i][v], &leaf);
 8003c70:	4621      	mov	r1, r4
 8003c72:	4648      	mov	r0, r9
 8003c74:	f010 fd98 	bl	80147a8 <tCycle_init>
			tCycle_setSampleRate(&mod2[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003c78:	4648      	mov	r0, r9
 8003c7a:	eeb0 0a48 	vmov.f32	s0, s16
 8003c7e:	f010 fe13 	bl	80148a8 <tCycle_setSampleRate>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 8003c82:	4640      	mov	r0, r8
 8003c84:	e07a      	b.n	8003d7c <audioInitSynth+0x48c>
 8003c86:	bf00      	nop
 8003c88:	2001cad8 	.word	0x2001cad8
 8003c8c:	20004fc4 	.word	0x20004fc4
 8003c90:	3ba3d70a 	.word	0x3ba3d70a
 8003c94:	42800000 	.word	0x42800000
 8003c98:	3ff33333 	.word	0x3ff33333
 8003c9c:	447a0000 	.word	0x447a0000
 8003ca0:	2001d004 	.word	0x2001d004
 8003ca4:	2001cfe8 	.word	0x2001cfe8
 8003ca8:	2001d0c0 	.word	0x2001d0c0
 8003cac:	2001d270 	.word	0x2001d270
 8003cb0:	2001d01c 	.word	0x2001d01c
 8003cb4:	2001d0d8 	.word	0x2001d0d8
 8003cb8:	2001cfac 	.word	0x2001cfac
 8003cbc:	2001cb30 	.word	0x2001cb30
 8003cc0:	2001ce1c 	.word	0x2001ce1c
 8003cc4:	3f333333 	.word	0x3f333333
 8003cc8:	44fa0000 	.word	0x44fa0000
 8003ccc:	3f19999a 	.word	0x3f19999a
 8003cd0:	2001cd0c 	.word	0x2001cd0c
 8003cd4:	2001cb88 	.word	0x2001cb88
 8003cd8:	2001c87c 	.word	0x2001c87c
 8003cdc:	2001ca94 	.word	0x2001ca94
 8003ce0:	2001c864 	.word	0x2001c864
 8003ce4:	2001c854 	.word	0x2001c854
 8003ce8:	2001c844 	.word	0x2001c844
 8003cec:	2001c834 	.word	0x2001c834
 8003cf0:	2001c824 	.word	0x2001c824
 8003cf4:	2001caf8 	.word	0x2001caf8
 8003cf8:	3c23d70a 	.word	0x3c23d70a
 8003cfc:	2001cc5c 	.word	0x2001cc5c
 8003d00:	2001cc3c 	.word	0x2001cc3c
 8003d04:	2001ccac 	.word	0x2001ccac
 8003d08:	2001ccec 	.word	0x2001ccec
 8003d0c:	2001cccc 	.word	0x2001cccc
 8003d10:	2001cc7c 	.word	0x2001cc7c
 8003d14:	3dcccccd 	.word	0x3dcccccd
 8003d18:	3f7fffac 	.word	0x3f7fffac
 8003d1c:	20000f30 	.word	0x20000f30
 8003d20:	2001ce90 	.word	0x2001ce90
 8003d24:	42a00000 	.word	0x42a00000
 8003d28:	2001ce98 	.word	0x2001ce98
 8003d2c:	463b8000 	.word	0x463b8000
 8003d30:	2001c88c 	.word	0x2001c88c
 8003d34:	2001ce74 	.word	0x2001ce74
 8003d38:	2001c8ec 	.word	0x2001c8ec
 8003d3c:	3f8b851f 	.word	0x3f8b851f
 8003d40:	47bb8000 	.word	0x47bb8000
 8003d44:	2001c90c 	.word	0x2001c90c
 8003d48:	2001d080 	.word	0x2001d080
 8003d4c:	2001d0a0 	.word	0x2001d0a0
 8003d50:	2001c8ac 	.word	0x2001c8ac
 8003d54:	2001c8cc 	.word	0x2001c8cc
 8003d58:	2001ce34 	.word	0x2001ce34
 8003d5c:	c2b40000 	.word	0xc2b40000
 8003d60:	30002000 	.word	0x30002000
 8003d64:	30012000 	.word	0x30012000
 8003d68:	3727c5ac 	.word	0x3727c5ac
 8003d6c:	2001ce54 	.word	0x2001ce54
 8003d70:	2001ce1c 	.word	0x2001ce1c
 8003d74:	3e4ccccd 	.word	0x3e4ccccd
 8003d78:	3e638e39 	.word	0x3e638e39
 8003d7c:	ed1f 0a03 	vldr	s0, [pc, #-12]	; 8003d74 <audioInitSynth+0x484>
 8003d80:	f010 fd74 	bl	801486c <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 8003d84:	4648      	mov	r0, r9
 8003d86:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8003d78 <audioInitSynth+0x488>
 8003d8a:	f010 fd6f 	bl	801486c <tCycle_setFreq>
	        tFeedbackLeveler_init(&feedbackControl[i][v], .99f, 0.01f, 0.125f, 0, &leaf);
 8003d8e:	4b78      	ldr	r3, [pc, #480]	; (8003f70 <audioInitSynth+0x680>)
 8003d90:	eeb4 1a00 	vmov.f32	s2, #64	; 0x3e000000  0.125
 8003d94:	4622      	mov	r2, r4
 8003d96:	eb03 0805 	add.w	r8, r3, r5
 8003d9a:	4b76      	ldr	r3, [pc, #472]	; (8003f74 <audioInitSynth+0x684>)
 8003d9c:	eddf 0a76 	vldr	s1, [pc, #472]	; 8003f78 <audioInitSynth+0x688>
 8003da0:	2100      	movs	r1, #0
 8003da2:	1958      	adds	r0, r3, r5
 8003da4:	ed9f 0a75 	vldr	s0, [pc, #468]	; 8003f7c <audioInitSynth+0x68c>
 8003da8:	f00c fde6 	bl	8010978 <tFeedbackLeveler_init>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8003dac:	4b74      	ldr	r3, [pc, #464]	; (8003f80 <audioInitSynth+0x690>)
 8003dae:	eef0 0a69 	vmov.f32	s1, s19
 8003db2:	4622      	mov	r2, r4
 8003db4:	2101      	movs	r1, #1
 8003db6:	4640      	mov	r0, r8
 8003db8:	eeb0 0a68 	vmov.f32	s0, s17
 8003dbc:	eb03 0905 	add.w	r9, r3, r5
 8003dc0:	f00d fcf8 	bl	80117b4 <tSVF_init>
			tSVF_setSampleRate(&FXlowpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003dc4:	4640      	mov	r0, r8
 8003dc6:	eeb0 0a48 	vmov.f32	s0, s16
 8003dca:	f00d fed5 	bl	8011b78 <tSVF_setSampleRate>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8003dce:	4b6d      	ldr	r3, [pc, #436]	; (8003f84 <audioInitSynth+0x694>)
 8003dd0:	eef0 0a69 	vmov.f32	s1, s19
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	2100      	movs	r1, #0
 8003dd8:	4648      	mov	r0, r9
 8003dda:	eeb0 0a68 	vmov.f32	s0, s17
 8003dde:	eb03 0805 	add.w	r8, r3, r5
 8003de2:	f00d fce7 	bl	80117b4 <tSVF_init>
			tSVF_setSampleRate(&FXhighpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003de6:	4648      	mov	r0, r9
 8003de8:	eeb0 0a48 	vmov.f32	s0, s16
 8003dec:	f00d fec4 	bl	8011b78 <tSVF_setSampleRate>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8003df0:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <audioInitSynth+0x698>)
 8003df2:	4622      	mov	r2, r4
 8003df4:	eef0 0a69 	vmov.f32	s1, s19
 8003df8:	2102      	movs	r1, #2
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	eeb0 0a68 	vmov.f32	s0, s17
 8003e00:	eb03 0905 	add.w	r9, r3, r5
 8003e04:	f00d fcd6 	bl	80117b4 <tSVF_init>
			tSVF_setSampleRate(&FXbandpass[i][v],SAMPLE_RATE * OVERSAMPLE);
 8003e08:	4640      	mov	r0, r8
 8003e0a:	eeb0 0a48 	vmov.f32	s0, s16
 8003e0e:	f00d feb3 	bl	8011b78 <tSVF_setSampleRate>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 8003e12:	4b5e      	ldr	r3, [pc, #376]	; (8003f8c <audioInitSynth+0x69c>)
 8003e14:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e18:	4621      	mov	r1, r4
 8003e1a:	4648      	mov	r0, r9
 8003e1c:	eeb0 0a68 	vmov.f32	s0, s17
 8003e20:	eb03 0805 	add.w	r8, r3, r5
 8003e24:	f00f f878 	bl	8012f18 <tDiodeFilter_init>
			tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003e28:	4648      	mov	r0, r9
 8003e2a:	eeb0 0a48 	vmov.f32	s0, s16
 8003e2e:	f00f fd09 	bl	8013844 <tDiodeFilter_setSampleRate>
			tVZFilterBell_init(&FXVZfilterPeak[i][v], 2000.f, 1.6f, 1.0f, &leaf);
 8003e32:	4b57      	ldr	r3, [pc, #348]	; (8003f90 <audioInitSynth+0x6a0>)
 8003e34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e38:	eddf 0a56 	vldr	s1, [pc, #344]	; 8003f94 <audioInitSynth+0x6a4>
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	4640      	mov	r0, r8
 8003e40:	eeb0 0a68 	vmov.f32	s0, s17
 8003e44:	eb03 0905 	add.w	r9, r3, r5
 8003e48:	f00e fea8 	bl	8012b9c <tVZFilterBell_init>
			tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003e4c:	4640      	mov	r0, r8
 8003e4e:	eeb0 0a48 	vmov.f32	s0, s16
 8003e52:	f00e fea7 	bl	8012ba4 <tVZFilterBell_setSampleRate>
			tVZFilterLS_init(&FXVZfilterLS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003e56:	4b50      	ldr	r3, [pc, #320]	; (8003f98 <audioInitSynth+0x6a8>)
 8003e58:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e5c:	4621      	mov	r1, r4
 8003e5e:	eef0 0a6a 	vmov.f32	s1, s21
 8003e62:	4648      	mov	r0, r9
 8003e64:	eeb0 0a68 	vmov.f32	s0, s17
 8003e68:	eb03 0805 	add.w	r8, r3, r5
 8003e6c:	f00e fb8c 	bl	8012588 <tVZFilterLS_init>
			tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003e70:	4648      	mov	r0, r9
 8003e72:	eeb0 0a48 	vmov.f32	s0, s16
 8003e76:	f00e fb8b 	bl	8012590 <tVZFilterLS_setSampleRate>
			tVZFilterHS_init(&FXVZfilterHS[i][v], 2000.f, 0.6f, 1.0f, &leaf);
 8003e7a:	4b48      	ldr	r3, [pc, #288]	; (8003f9c <audioInitSynth+0x6ac>)
 8003e7c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e80:	4621      	mov	r1, r4
 8003e82:	eef0 0a6a 	vmov.f32	s1, s21
 8003e86:	4640      	mov	r0, r8
 8003e88:	eeb0 0a68 	vmov.f32	s0, s17
 8003e8c:	eb03 0905 	add.w	r9, r3, r5
 8003e90:	f00e fcee 	bl	8012870 <tVZFilterHS_init>
			tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003e94:	4640      	mov	r0, r8
 8003e96:	eeb0 0a48 	vmov.f32	s0, s16
 8003e9a:	f00e fced 	bl	8012878 <tVZFilterHS_setSampleRate>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 8003e9e:	4b40      	ldr	r3, [pc, #256]	; (8003fa0 <audioInitSynth+0x6b0>)
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ea6:	eb03 0805 	add.w	r8, r3, r5
 8003eaa:	2104      	movs	r1, #4
 8003eac:	eeb0 0a68 	vmov.f32	s0, s17
 8003eb0:	4648      	mov	r0, r9
 8003eb2:	f00e f8f9 	bl	80120a8 <tVZFilter_init>
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003eb6:	eeb0 0a48 	vmov.f32	s0, s16
 8003eba:	4648      	mov	r0, r9
		for (int i = 0; i < NUM_EFFECT; i++)
 8003ebc:	3508      	adds	r5, #8
			tVZFilter_setSampleRate(&FXVZfilterBR[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003ebe:	f00e fab1 	bl	8012424 <tVZFilter_setSampleRate>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 8003ec2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003ec6:	eeb0 0a68 	vmov.f32	s0, s17
 8003eca:	4621      	mov	r1, r4
 8003ecc:	4640      	mov	r0, r8
 8003ece:	f00f fcd3 	bl	8013878 <tLadderFilter_init>
			tLadderFilter_setSampleRate(&FXLadderfilter[i][v], SAMPLE_RATE * OVERSAMPLE);
 8003ed2:	eeb0 0a48 	vmov.f32	s0, s16
 8003ed6:	4640      	mov	r0, r8
 8003ed8:	f00f fe96 	bl	8013c08 <tLadderFilter_setSampleRate>
		for (int i = 0; i < NUM_EFFECT; i++)
 8003edc:	42ae      	cmp	r6, r5
 8003ede:	f47f ae46 	bne.w	8003b6e <audioInitSynth+0x27e>
 8003ee2:	9e05      	ldr	r6, [sp, #20]
 8003ee4:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 8003ee8:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8003fa4 <audioInitSynth+0x6b4>
 8003eec:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003eee:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.005f, &leaf);
 8003ef0:	eef0 0a49 	vmov.f32	s1, s18
 8003ef4:	4621      	mov	r1, r4
 8003ef6:	eeb0 0a48 	vmov.f32	s0, s16
 8003efa:	f00d f8e1 	bl	80110c0 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8003efe:	45ab      	cmp	fp, r5
 8003f00:	d1f4      	bne.n	8003eec <audioInitSynth+0x5fc>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003f02:	9b02      	ldr	r3, [sp, #8]
 8003f04:	eb06 0746 	add.w	r7, r6, r6, lsl #1
		}

		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003f08:	4a27      	ldr	r2, [pc, #156]	; (8003fa8 <audioInitSynth+0x6b8>)
 8003f0a:	2501      	movs	r5, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003f0c:	3304      	adds	r3, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003f0e:	4827      	ldr	r0, [pc, #156]	; (8003fac <audioInitSynth+0x6bc>)
 8003f10:	2102      	movs	r1, #2
 8003f12:	9501      	str	r5, [sp, #4]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003f14:	9302      	str	r3, [sp, #8]
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003f16:	4438      	add	r0, r7
 8003f18:	9b03      	ldr	r3, [sp, #12]
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003f1a:	f10b 0b04 	add.w	fp, fp, #4
		arm_fir_interpolate_init_f32(&osI[v],2,32,__leaf_table_fir2XLow, intState[v],1);
 8003f1e:	eb02 1383 	add.w	r3, r2, r3, lsl #6
 8003f22:	2220      	movs	r2, #32
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	4b22      	ldr	r3, [pc, #136]	; (8003fb0 <audioInitSynth+0x6c0>)
 8003f28:	f7fc fe50 	bl	8000bcc <arm_fir_interpolate_init_f32>
		arm_fir_decimate_init_f32(&osD[v],32, 2,__leaf_table_fir2XLow, decState[v],2);
 8003f2c:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <audioInitSynth+0x6c4>)
 8003f2e:	eb06 1346 	add.w	r3, r6, r6, lsl #5
 8003f32:	2120      	movs	r1, #32
 8003f34:	19d0      	adds	r0, r2, r7
 8003f36:	4a20      	ldr	r2, [pc, #128]	; (8003fb8 <audioInitSynth+0x6c8>)
 8003f38:	4413      	add	r3, r2
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	9300      	str	r3, [sp, #0]
 8003f3e:	9201      	str	r2, [sp, #4]
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <audioInitSynth+0x6c0>)
 8003f42:	f7fc fdb7 	bl	8000ab4 <arm_fir_decimate_init_f32>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003f46:	491d      	ldr	r1, [pc, #116]	; (8003fbc <audioInitSynth+0x6cc>)
 8003f48:	4622      	mov	r2, r4
 8003f4a:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003fc0 <audioInitSynth+0x6d0>
 8003f4e:	1988      	adds	r0, r1, r6
 8003f50:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8003fc4 <audioInitSynth+0x6d4>
 8003f54:	4629      	mov	r1, r5
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003f56:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 8003f58:	f00d fc2c 	bl	80117b4 <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8003f5c:	9b03      	ldr	r3, [sp, #12]
 8003f5e:	b90b      	cbnz	r3, 8003f64 <audioInitSynth+0x674>
 8003f60:	9503      	str	r5, [sp, #12]
 8003f62:	e4db      	b.n	800391c <audioInitSynth+0x2c>
	}

}
 8003f64:	b007      	add	sp, #28
 8003f66:	ecbd 8b0a 	vpop	{d8-d12}
 8003f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f6e:	bf00      	nop
 8003f70:	2001c804 	.word	0x2001c804
 8003f74:	2001cad8 	.word	0x2001cad8
 8003f78:	3c23d70a 	.word	0x3c23d70a
 8003f7c:	3f7d70a4 	.word	0x3f7d70a4
 8003f80:	2001c7e4 	.word	0x2001c7e4
 8003f84:	2001c7a4 	.word	0x2001c7a4
 8003f88:	2001c7c4 	.word	0x2001c7c4
 8003f8c:	2001c784 	.word	0x2001c784
 8003f90:	2001c764 	.word	0x2001c764
 8003f94:	3fcccccd 	.word	0x3fcccccd
 8003f98:	2001c744 	.word	0x2001c744
 8003f9c:	2001c724 	.word	0x2001c724
 8003fa0:	2001c704 	.word	0x2001c704
 8003fa4:	00000000 	.word	0x00000000
 8003fa8:	2001cb98 	.word	0x2001cb98
 8003fac:	2001ceb8 	.word	0x2001ceb8
 8003fb0:	08023e3c 	.word	0x08023e3c
 8003fb4:	2001cea0 	.word	0x2001cea0
 8003fb8:	2001c92c 	.word	0x2001c92c
 8003fbc:	2001cb20 	.word	0x2001cb20
 8003fc0:	3e99999a 	.word	0x3e99999a
 8003fc4:	46947000 	.word	0x46947000

08003fc8 <changeOversampling>:



void changeOversampling(uint32_t newOS)
{
	if (newOS != prevOversample)
 8003fc8:	4b8f      	ldr	r3, [pc, #572]	; (8004208 <changeOversampling+0x240>)
{
 8003fca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fce:	ed2d 8b02 	vpush	{d8}
	if (newOS != prevOversample)
 8003fd2:	681b      	ldr	r3, [r3, #0]
{
 8003fd4:	b089      	sub	sp, #36	; 0x24
	if (newOS != prevOversample)
 8003fd6:	4283      	cmp	r3, r0
{
 8003fd8:	9007      	str	r0, [sp, #28]
	if (newOS != prevOversample)
 8003fda:	f000 810c 	beq.w	80041f6 <changeOversampling+0x22e>
	{
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
		for (int v = 0; v < numStringsThisBoard; v++)
 8003fde:	4b8b      	ldr	r3, [pc, #556]	; (800420c <changeOversampling+0x244>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8107 	beq.w	80041f6 <changeOversampling+0x22e>
 8003fe8:	4603      	mov	r3, r0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003fea:	eddf 7a89 	vldr	s15, [pc, #548]	; 8004210 <changeOversampling+0x248>
		{
			for (int i = 0; i < NUM_EFFECT; i++)
			{
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003fee:	2200      	movs	r2, #0
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003ff0:	3301      	adds	r3, #1
		for (int v = 0; v < numStringsThisBoard; v++)
 8003ff2:	9205      	str	r2, [sp, #20]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003ff4:	ee07 3a10 	vmov	s14, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003ff8:	2320      	movs	r3, #32
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8003ffa:	eeb8 8a47 	vcvt.f32.u32	s16, s14
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8003ffe:	9304      	str	r3, [sp, #16]
		uint32_t osMult = (newOS + 1) * SAMPLE_RATE; // change os to 1-2 range
 8004000:	ee28 8a27 	vmul.f32	s16, s16, s15
 8004004:	eebc 8ac8 	vcvt.u32.f32	s16, s16
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8004008:	eeb8 8a48 	vcvt.f32.u32	s16, s16
 800400c:	4b81      	ldr	r3, [pc, #516]	; (8004214 <changeOversampling+0x24c>)
		for (int v = 0; v < numStringsThisBoard; v++)
 800400e:	4614      	mov	r4, r2
 8004010:	9904      	ldr	r1, [sp, #16]
 8004012:	9206      	str	r2, [sp, #24]
 8004014:	eb03 0a01 	add.w	sl, r3, r1
 8004018:	4b7f      	ldr	r3, [pc, #508]	; (8004218 <changeOversampling+0x250>)
 800401a:	eb03 0902 	add.w	r9, r3, r2
 800401e:	4b7f      	ldr	r3, [pc, #508]	; (800421c <changeOversampling+0x254>)
 8004020:	eb03 0802 	add.w	r8, r3, r2
 8004024:	4b7e      	ldr	r3, [pc, #504]	; (8004220 <changeOversampling+0x258>)
 8004026:	189f      	adds	r7, r3, r2
 8004028:	4b7e      	ldr	r3, [pc, #504]	; (8004224 <changeOversampling+0x25c>)
 800402a:	189e      	adds	r6, r3, r2
 800402c:	4b7e      	ldr	r3, [pc, #504]	; (8004228 <changeOversampling+0x260>)
 800402e:	189d      	adds	r5, r3, r2
 8004030:	4b7e      	ldr	r3, [pc, #504]	; (800422c <changeOversampling+0x264>)
 8004032:	4413      	add	r3, r2
 8004034:	469b      	mov	fp, r3
				tHighpass_setSampleRate(&dcBlock1[i][v], osMult);
 8004036:	4b7e      	ldr	r3, [pc, #504]	; (8004230 <changeOversampling+0x268>)
 8004038:	eeb0 0a48 	vmov.f32	s0, s16
 800403c:	1918      	adds	r0, r3, r4
 800403e:	f00d fe05 	bl	8011c4c <tHighpass_setSampleRate>
				tHighpass_setSampleRate(&dcBlock2[i][v], osMult);
 8004042:	4b7c      	ldr	r3, [pc, #496]	; (8004234 <changeOversampling+0x26c>)
 8004044:	eeb0 0a48 	vmov.f32	s0, s16
 8004048:	1918      	adds	r0, r3, r4
 800404a:	f00d fdff 	bl	8011c4c <tHighpass_setSampleRate>
				tVZFilterLS_setSampleRate(&shelf1[i][v], osMult);
 800404e:	4650      	mov	r0, sl
 8004050:	eeb0 0a48 	vmov.f32	s0, s16
 8004054:	f00e fa9c 	bl	8012590 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8004058:	f8da 3000 	ldr.w	r3, [sl]
 800405c:	4650      	mov	r0, sl
			for (int i = 0; i < NUM_EFFECT; i++)
 800405e:	f10a 0a08 	add.w	sl, sl, #8
				tVZFilterLS_setFreqFast(&shelf1[i][v], shelf1[i][v]->cutoffMIDI);
 8004062:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8004066:	f00e fae1 	bl	801262c <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&shelf2[i][v], osMult);
 800406a:	4648      	mov	r0, r9
 800406c:	eeb0 0a48 	vmov.f32	s0, s16
 8004070:	f00e fc02 	bl	8012878 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 8004074:	f8d9 3000 	ldr.w	r3, [r9]
 8004078:	4648      	mov	r0, r9
			for (int i = 0; i < NUM_EFFECT; i++)
 800407a:	f109 0908 	add.w	r9, r9, #8
				tVZFilterHS_setFreqFast(&shelf2[i][v], shelf2[i][v]->cutoffMIDI);
 800407e:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8004082:	f00e fc47 	bl	8012914 <tVZFilterHS_setFreqFast>
				tVZFilterBell_setSampleRate(&bell1[i][v], osMult);
 8004086:	4640      	mov	r0, r8
 8004088:	eeb0 0a48 	vmov.f32	s0, s16
 800408c:	f00e fd8a 	bl	8012ba4 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 8004090:	f8d8 3000 	ldr.w	r3, [r8]
 8004094:	4640      	mov	r0, r8
			for (int i = 0; i < NUM_EFFECT; i++)
 8004096:	f108 0808 	add.w	r8, r8, #8
				tVZFilterBell_setFreqFast(&bell1[i][v], bell1[i][v]->cutoffMIDI);
 800409a:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 800409e:	f00e fe73 	bl	8012d88 <tVZFilterBell_setFreqFast>
				tCompressor_setSampleRate(&comp[i][v], osMult);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <changeOversampling+0x270>)
 80040a4:	eeb0 0a48 	vmov.f32	s0, s16
 80040a8:	1918      	adds	r0, r3, r4
 80040aa:	f00c fc61 	bl	8010970 <tCompressor_setSampleRate>
				tCycle_setSampleRate(&mod1[i][v], osMult);
 80040ae:	4b63      	ldr	r3, [pc, #396]	; (800423c <changeOversampling+0x274>)
 80040b0:	eeb0 0a48 	vmov.f32	s0, s16
 80040b4:	1918      	adds	r0, r3, r4
 80040b6:	f010 fbf7 	bl	80148a8 <tCycle_setSampleRate>
				tCycle_setSampleRate(&mod2[i][v], osMult);
 80040ba:	4b61      	ldr	r3, [pc, #388]	; (8004240 <changeOversampling+0x278>)
 80040bc:	eeb0 0a48 	vmov.f32	s0, s16
 80040c0:	1918      	adds	r0, r3, r4
 80040c2:	f010 fbf1 	bl	80148a8 <tCycle_setSampleRate>
				tSVF_setSampleRate(&FXlowpass[i][v],osMult);
 80040c6:	4638      	mov	r0, r7
 80040c8:	eeb0 0a48 	vmov.f32	s0, s16
 80040cc:	f00d fd54 	bl	8011b78 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	4638      	mov	r0, r7
			for (int i = 0; i < NUM_EFFECT; i++)
 80040d4:	3708      	adds	r7, #8
				tSVF_setFreqFast(&FXlowpass[i][v], FXlowpass[i][v]->cutoffMIDI);
 80040d6:	ed93 0a04 	vldr	s0, [r3, #16]
 80040da:	f00d fced 	bl	8011ab8 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXhighpass[i][v],osMult);
 80040de:	4630      	mov	r0, r6
 80040e0:	eeb0 0a48 	vmov.f32	s0, s16
 80040e4:	f00d fd48 	bl	8011b78 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 80040e8:	6833      	ldr	r3, [r6, #0]
 80040ea:	4630      	mov	r0, r6
			for (int i = 0; i < NUM_EFFECT; i++)
 80040ec:	3608      	adds	r6, #8
				tSVF_setFreqFast(&FXhighpass[i][v], FXhighpass[i][v]->cutoffMIDI);
 80040ee:	ed93 0a04 	vldr	s0, [r3, #16]
 80040f2:	f00d fce1 	bl	8011ab8 <tSVF_setFreqFast>
				tSVF_setSampleRate(&FXbandpass[i][v],osMult);
 80040f6:	4628      	mov	r0, r5
 80040f8:	eeb0 0a48 	vmov.f32	s0, s16
 80040fc:	f00d fd3c 	bl	8011b78 <tSVF_setSampleRate>
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8004100:	682b      	ldr	r3, [r5, #0]
 8004102:	4628      	mov	r0, r5
			for (int i = 0; i < NUM_EFFECT; i++)
 8004104:	3508      	adds	r5, #8
				tSVF_setFreqFast(&FXbandpass[i][v], FXbandpass[i][v]->cutoffMIDI);
 8004106:	ed93 0a04 	vldr	s0, [r3, #16]
 800410a:	f00d fcd5 	bl	8011ab8 <tSVF_setFreqFast>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], osMult);
 800410e:	4658      	mov	r0, fp
 8004110:	eeb0 0a48 	vmov.f32	s0, s16
 8004114:	f00f fb96 	bl	8013844 <tDiodeFilter_setSampleRate>
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8004118:	f8db 3000 	ldr.w	r3, [fp]
 800411c:	4658      	mov	r0, fp
			for (int i = 0; i < NUM_EFFECT; i++)
 800411e:	f10b 0b08 	add.w	fp, fp, #8
				tDiodeFilter_setSampleRate(&FXdiodeFilters[i][v], FXdiodeFilters[i][v]->cutoffMIDI);
 8004122:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8004126:	4b47      	ldr	r3, [pc, #284]	; (8004244 <changeOversampling+0x27c>)
 8004128:	4423      	add	r3, r4
 800412a:	9300      	str	r3, [sp, #0]
 800412c:	f00f fb8a 	bl	8013844 <tDiodeFilter_setSampleRate>
				tVZFilterBell_setSampleRate(&FXVZfilterPeak[i][v], osMult);
 8004130:	9b00      	ldr	r3, [sp, #0]
 8004132:	eeb0 0a48 	vmov.f32	s0, s16
 8004136:	4618      	mov	r0, r3
 8004138:	f00e fd34 	bl	8012ba4 <tVZFilterBell_setSampleRate>
				tVZFilterBell_setFreqFast(&FXVZfilterPeak[i][v], FXVZfilterPeak[i][v]->cutoffMIDI);
 800413c:	9b00      	ldr	r3, [sp, #0]
 800413e:	4618      	mov	r0, r3
 8004140:	4b40      	ldr	r3, [pc, #256]	; (8004244 <changeOversampling+0x27c>)
 8004142:	591b      	ldr	r3, [r3, r4]
 8004144:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 8004148:	f00e fe1e 	bl	8012d88 <tVZFilterBell_setFreqFast>
				tVZFilterLS_setSampleRate(&FXVZfilterLS[i][v], osMult);
 800414c:	4a3e      	ldr	r2, [pc, #248]	; (8004248 <changeOversampling+0x280>)
 800414e:	4b3f      	ldr	r3, [pc, #252]	; (800424c <changeOversampling+0x284>)
 8004150:	eeb0 0a48 	vmov.f32	s0, s16
 8004154:	1911      	adds	r1, r2, r4
 8004156:	1918      	adds	r0, r3, r4
 8004158:	4b3d      	ldr	r3, [pc, #244]	; (8004250 <changeOversampling+0x288>)
 800415a:	9103      	str	r1, [sp, #12]
 800415c:	493d      	ldr	r1, [pc, #244]	; (8004254 <changeOversampling+0x28c>)
 800415e:	4423      	add	r3, r4
 8004160:	190a      	adds	r2, r1, r4
 8004162:	e9cd 0300 	strd	r0, r3, [sp]
 8004166:	9202      	str	r2, [sp, #8]
 8004168:	f00e fa12 	bl	8012590 <tVZFilterLS_setSampleRate>
				tVZFilterLS_setFreqFast(&FXVZfilterLS[i][v], FXVZfilterLS[i][v]->cutoffMIDI);
 800416c:	4b37      	ldr	r3, [pc, #220]	; (800424c <changeOversampling+0x284>)
 800416e:	9800      	ldr	r0, [sp, #0]
 8004170:	591b      	ldr	r3, [r3, r4]
 8004172:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8004176:	f00e fa59 	bl	801262c <tVZFilterLS_setFreqFast>
				tVZFilterHS_setSampleRate(&FXVZfilterHS[i][v], osMult);
 800417a:	9903      	ldr	r1, [sp, #12]
 800417c:	eeb0 0a48 	vmov.f32	s0, s16
 8004180:	4608      	mov	r0, r1
 8004182:	9100      	str	r1, [sp, #0]
 8004184:	f00e fb78 	bl	8012878 <tVZFilterHS_setSampleRate>
				tVZFilterHS_setFreqFast(&FXVZfilterHS[i][v], FXVZfilterHS[i][v]->cutoffMIDI);
 8004188:	9900      	ldr	r1, [sp, #0]
 800418a:	4a2f      	ldr	r2, [pc, #188]	; (8004248 <changeOversampling+0x280>)
 800418c:	4608      	mov	r0, r1
 800418e:	5911      	ldr	r1, [r2, r4]
 8004190:	ed91 0a11 	vldr	s0, [r1, #68]	; 0x44
 8004194:	f00e fbbe 	bl	8012914 <tVZFilterHS_setFreqFast>
				tVZFilter_setSampleRate(&FXVZfilterBR[i][v], osMult);
 8004198:	9a02      	ldr	r2, [sp, #8]
 800419a:	eeb0 0a48 	vmov.f32	s0, s16
 800419e:	4610      	mov	r0, r2
 80041a0:	9200      	str	r2, [sp, #0]
 80041a2:	f00e f93f 	bl	8012424 <tVZFilter_setSampleRate>
				tVZFilter_setFreq(&FXVZfilterBR[i][v], FXVZfilterBR[i][v]->fc);
 80041a6:	492b      	ldr	r1, [pc, #172]	; (8004254 <changeOversampling+0x28c>)
 80041a8:	9a00      	ldr	r2, [sp, #0]
 80041aa:	4610      	mov	r0, r2
 80041ac:	590a      	ldr	r2, [r1, r4]
 80041ae:	ed92 0a0a 	vldr	s0, [r2, #40]	; 0x28
 80041b2:	f00d ff7d 	bl	80120b0 <tVZFilter_setFreq>
				tLadderFilter_setSampleRate(&FXLadderfilter[i][v], osMult);
 80041b6:	9b01      	ldr	r3, [sp, #4]
 80041b8:	eeb0 0a48 	vmov.f32	s0, s16
 80041bc:	4618      	mov	r0, r3
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	f00f fd22 	bl	8013c08 <tLadderFilter_setSampleRate>
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 80041c4:	9b00      	ldr	r3, [sp, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	4b21      	ldr	r3, [pc, #132]	; (8004250 <changeOversampling+0x288>)
 80041ca:	591b      	ldr	r3, [r3, r4]
			for (int i = 0; i < NUM_EFFECT; i++)
 80041cc:	3408      	adds	r4, #8
				tLadderFilter_setFreqFast(&FXLadderfilter[i][v], FXLadderfilter[i][v]->cutoffMIDI);
 80041ce:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80041d2:	f00f fcd7 	bl	8013b84 <tLadderFilter_setFreqFast>
			for (int i = 0; i < NUM_EFFECT; i++)
 80041d6:	9b04      	ldr	r3, [sp, #16]
 80041d8:	429c      	cmp	r4, r3
 80041da:	f47f af2c 	bne.w	8004036 <changeOversampling+0x6e>
		for (int v = 0; v < numStringsThisBoard; v++)
 80041de:	3304      	adds	r3, #4
 80041e0:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 80041e4:	9304      	str	r3, [sp, #16]
 80041e6:	4b09      	ldr	r3, [pc, #36]	; (800420c <changeOversampling+0x244>)
 80041e8:	3101      	adds	r1, #1
 80041ea:	3204      	adds	r2, #4
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	9105      	str	r1, [sp, #20]
 80041f0:	428b      	cmp	r3, r1
 80041f2:	f73f af0b 	bgt.w	800400c <changeOversampling+0x44>
			}
		}
	}
	prevOversample = newOS;
 80041f6:	4b04      	ldr	r3, [pc, #16]	; (8004208 <changeOversampling+0x240>)
 80041f8:	9a07      	ldr	r2, [sp, #28]
 80041fa:	601a      	str	r2, [r3, #0]
}
 80041fc:	b009      	add	sp, #36	; 0x24
 80041fe:	ecbd 8b02 	vpop	{d8}
 8004202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004206:	bf00      	nop
 8004208:	2001cfe4 	.word	0x2001cfe4
 800420c:	200004b1 	.word	0x200004b1
 8004210:	473b8000 	.word	0x473b8000
 8004214:	2001d060 	.word	0x2001d060
 8004218:	2001d0a0 	.word	0x2001d0a0
 800421c:	2001c8ac 	.word	0x2001c8ac
 8004220:	2001c804 	.word	0x2001c804
 8004224:	2001c7e4 	.word	0x2001c7e4
 8004228:	2001c7a4 	.word	0x2001c7a4
 800422c:	2001c7c4 	.word	0x2001c7c4
 8004230:	2001c8ec 	.word	0x2001c8ec
 8004234:	2001c90c 	.word	0x2001c90c
 8004238:	2001c8cc 	.word	0x2001c8cc
 800423c:	2001ce34 	.word	0x2001ce34
 8004240:	2001ce54 	.word	0x2001ce54
 8004244:	2001c784 	.word	0x2001c784
 8004248:	2001c744 	.word	0x2001c744
 800424c:	2001c764 	.word	0x2001c764
 8004250:	2001c704 	.word	0x2001c704
 8004254:	2001c724 	.word	0x2001c724

08004258 <delayTick>:
{
	param5[v][string] = (value * 1.5f) + 1.0f;
}

float delayTick(float sample, int v, int string)
{
 8004258:	b538      	push	{r3, r4, r5, lr}
    sample *= param5[v][string];
 800425a:	eb01 0140 	add.w	r1, r1, r0, lsl #1

    sample = sample + (delayFB[v][string] * param2[v][string]);
 800425e:	4d18      	ldr	r5, [pc, #96]	; (80042c0 <delayTick+0x68>)
 8004260:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <delayTick+0x6c>)
 8004262:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    sample *= param5[v][string];
 8004266:	4b18      	ldr	r3, [pc, #96]	; (80042c8 <delayTick+0x70>)
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8004268:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800426c:	edd5 7a00 	vldr	s15, [r5]
    sample *= param5[v][string];
 8004270:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 8004274:	ed92 7a00 	vldr	s14, [r2]
    sample *= param5[v][string];
 8004278:	008c      	lsls	r4, r1, #2
    sample = sample + (delayFB[v][string] * param2[v][string]);
 800427a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800427e:	ed93 7a00 	vldr	s14, [r3]

    sample = fast_tanh5(sample);
 8004282:	eee7 7a00 	vfma.f32	s15, s14, s0
 8004286:	eeb0 0a67 	vmov.f32	s0, s15
 800428a:	f00f fe9d 	bl	8013fc8 <fast_tanh5>

    sample = tFeedbackLeveler_tick(&feedbackControl[v][string], sample);
 800428e:	480f      	ldr	r0, [pc, #60]	; (80042cc <delayTick+0x74>)
 8004290:	4420      	add	r0, r4
 8004292:	f00c fbd9 	bl	8010a48 <tFeedbackLeveler_tick>

    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 8004296:	480e      	ldr	r0, [pc, #56]	; (80042d0 <delayTick+0x78>)
 8004298:	4420      	add	r0, r4
 800429a:	f00c f953 	bl	8010544 <tTapeDelay_tick>
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 800429e:	480d      	ldr	r0, [pc, #52]	; (80042d4 <delayTick+0x7c>)
    delayFB[v][string] = tTapeDelay_tick(&tapeDelay[v][string], sample);
 80042a0:	ed85 0a00 	vstr	s0, [r5]
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 80042a4:	4420      	add	r0, r4
 80042a6:	f00d fb99 	bl	80119dc <tSVF_tick>
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 80042aa:	480b      	ldr	r0, [pc, #44]	; (80042d8 <delayTick+0x80>)
    delayFB[v][string] = tSVF_tick(&FXlowpass[v][string], delayFB[v][string]);
 80042ac:	ed85 0a00 	vstr	s0, [r5]
    sample = tSVF_tick(&FXhighpass[v][string], delayFB[v][string]);
 80042b0:	4420      	add	r0, r4
 80042b2:	f00d fb93 	bl	80119dc <tSVF_tick>
    sample = fast_tanh5(sample);
 80042b6:	f00f fe87 	bl	8013fc8 <fast_tanh5>
    delayFB[v][string] = sample;
 80042ba:	ed85 0a00 	vstr	s0, [r5]
    return sample;
}
 80042be:	bd38      	pop	{r3, r4, r5, pc}
 80042c0:	2001ca74 	.word	0x2001ca74
 80042c4:	2001cf2c 	.word	0x2001cf2c
 80042c8:	2001cf8c 	.word	0x2001cf8c
 80042cc:	2001cad8 	.word	0x2001cad8
 80042d0:	2001d220 	.word	0x2001d220
 80042d4:	2001c804 	.word	0x2001c804
 80042d8:	2001c7e4 	.word	0x2001c7e4

080042dc <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042dc:	4927      	ldr	r1, [pc, #156]	; (800437c <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042de:	4a28      	ldr	r2, [pc, #160]	; (8004380 <SystemInit+0xa4>)
{
 80042e0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042e2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80042e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80042ee:	6813      	ldr	r3, [r2, #0]
 80042f0:	f003 030f 	and.w	r3, r3, #15
 80042f4:	2b06      	cmp	r3, #6
 80042f6:	d805      	bhi.n	8004304 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80042f8:	6813      	ldr	r3, [r2, #0]
 80042fa:	f023 030f 	bic.w	r3, r3, #15
 80042fe:	f043 0307 	orr.w	r3, r3, #7
 8004302:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004304:	4b1f      	ldr	r3, [pc, #124]	; (8004384 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004306:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004308:	4a1f      	ldr	r2, [pc, #124]	; (8004388 <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 800430a:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800430c:	481c      	ldr	r0, [pc, #112]	; (8004380 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 800430e:	f041 0101 	orr.w	r1, r1, #1
 8004312:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8004314:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	400a      	ands	r2, r1
 800431a:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800431c:	6803      	ldr	r3, [r0, #0]
 800431e:	071b      	lsls	r3, r3, #28
 8004320:	d505      	bpl.n	800432e <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004322:	6803      	ldr	r3, [r0, #0]
 8004324:	f023 030f 	bic.w	r3, r3, #15
 8004328:	f043 0307 	orr.w	r3, r3, #7
 800432c:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800432e:	4b15      	ldr	r3, [pc, #84]	; (8004384 <SystemInit+0xa8>)
 8004330:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004332:	4916      	ldr	r1, [pc, #88]	; (800438c <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8004334:	4c16      	ldr	r4, [pc, #88]	; (8004390 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8004336:	4817      	ldr	r0, [pc, #92]	; (8004394 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8004338:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800433a:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800433c:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 800433e:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8004340:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8004342:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004346:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004348:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800434a:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800434c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800434e:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004350:	4c11      	ldr	r4, [pc, #68]	; (8004398 <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8004352:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004356:	4911      	ldr	r1, [pc, #68]	; (800439c <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8004358:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800435a:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	4019      	ands	r1, r3
 8004360:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004364:	d203      	bcs.n	800436e <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004366:	4b0e      	ldr	r3, [pc, #56]	; (80043a0 <SystemInit+0xc4>)
 8004368:	2201      	movs	r2, #1
 800436a:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <SystemInit+0xc8>)
 8004370:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004374:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8004376:	f85d 4b04 	ldr.w	r4, [sp], #4
 800437a:	4770      	bx	lr
 800437c:	e000ed00 	.word	0xe000ed00
 8004380:	52002000 	.word	0x52002000
 8004384:	58024400 	.word	0x58024400
 8004388:	eaf6ed7f 	.word	0xeaf6ed7f
 800438c:	01010280 	.word	0x01010280
 8004390:	02020200 	.word	0x02020200
 8004394:	01ff0000 	.word	0x01ff0000
 8004398:	5c001000 	.word	0x5c001000
 800439c:	ffff0000 	.word	0xffff0000
 80043a0:	51008000 	.word	0x51008000
 80043a4:	52004000 	.word	0x52004000

080043a8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80043a8:	4b0f      	ldr	r3, [pc, #60]	; (80043e8 <HAL_InitTick+0x40>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	b90b      	cbnz	r3, 80043b2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80043ae:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80043b0:	4770      	bx	lr
{
 80043b2:	b510      	push	{r4, lr}
 80043b4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80043b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80043ba:	4a0c      	ldr	r2, [pc, #48]	; (80043ec <HAL_InitTick+0x44>)
 80043bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c0:	6810      	ldr	r0, [r2, #0]
 80043c2:	fbb0 f0f3 	udiv	r0, r0, r3
 80043c6:	f000 f8d7 	bl	8004578 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043ca:	2c0f      	cmp	r4, #15
 80043cc:	d800      	bhi.n	80043d0 <HAL_InitTick+0x28>
 80043ce:	b108      	cbz	r0, 80043d4 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 80043d0:	2001      	movs	r0, #1
}
 80043d2:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043d4:	2200      	movs	r2, #0
 80043d6:	4621      	mov	r1, r4
 80043d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80043dc:	f000 f880 	bl	80044e0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043e0:	4b03      	ldr	r3, [pc, #12]	; (80043f0 <HAL_InitTick+0x48>)
 80043e2:	2000      	movs	r0, #0
 80043e4:	601c      	str	r4, [r3, #0]
}
 80043e6:	bd10      	pop	{r4, pc}
 80043e8:	200008c8 	.word	0x200008c8
 80043ec:	200008bc 	.word	0x200008bc
 80043f0:	200008cc 	.word	0x200008cc

080043f4 <HAL_Init>:
{
 80043f4:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043f6:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80043f8:	4c12      	ldr	r4, [pc, #72]	; (8004444 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043fa:	f000 f85f 	bl	80044bc <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043fe:	f003 fa2d 	bl	800785c <HAL_RCC_GetSysClockFreq>
 8004402:	4b11      	ldr	r3, [pc, #68]	; (8004448 <HAL_Init+0x54>)
 8004404:	4911      	ldr	r1, [pc, #68]	; (800444c <HAL_Init+0x58>)
 8004406:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004408:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800440a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800440e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004412:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004414:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004416:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800441a:	490d      	ldr	r1, [pc, #52]	; (8004450 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800441c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004420:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004422:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8004426:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004428:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800442a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800442c:	f7ff ffbc 	bl	80043a8 <HAL_InitTick>
 8004430:	b110      	cbz	r0, 8004438 <HAL_Init+0x44>
    return HAL_ERROR;
 8004432:	2401      	movs	r4, #1
}
 8004434:	4620      	mov	r0, r4
 8004436:	bd10      	pop	{r4, pc}
 8004438:	4604      	mov	r4, r0
  HAL_MspInit();
 800443a:	f7ff f9f9 	bl	8003830 <HAL_MspInit>
}
 800443e:	4620      	mov	r0, r4
 8004440:	bd10      	pop	{r4, pc}
 8004442:	bf00      	nop
 8004444:	200008c0 	.word	0x200008c0
 8004448:	58024400 	.word	0x58024400
 800444c:	0801b9bc 	.word	0x0801b9bc
 8004450:	200008bc 	.word	0x200008bc

08004454 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8004454:	4a03      	ldr	r2, [pc, #12]	; (8004464 <HAL_IncTick+0x10>)
 8004456:	4b04      	ldr	r3, [pc, #16]	; (8004468 <HAL_IncTick+0x14>)
 8004458:	6811      	ldr	r1, [r2, #0]
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	440b      	add	r3, r1
 800445e:	6013      	str	r3, [r2, #0]
}
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	2001d2b4 	.word	0x2001d2b4
 8004468:	200008c8 	.word	0x200008c8

0800446c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800446c:	4b01      	ldr	r3, [pc, #4]	; (8004474 <HAL_GetTick+0x8>)
 800446e:	6818      	ldr	r0, [r3, #0]
}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	2001d2b4 	.word	0x2001d2b4

08004478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800447c:	f7ff fff6 	bl	800446c <HAL_GetTick>
 8004480:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004482:	1c63      	adds	r3, r4, #1
 8004484:	d002      	beq.n	800448c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8004486:	4b04      	ldr	r3, [pc, #16]	; (8004498 <HAL_Delay+0x20>)
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800448c:	f7ff ffee 	bl	800446c <HAL_GetTick>
 8004490:	1b43      	subs	r3, r0, r5
 8004492:	42a3      	cmp	r3, r4
 8004494:	d3fa      	bcc.n	800448c <HAL_Delay+0x14>
  {
  }
}
 8004496:	bd38      	pop	{r3, r4, r5, pc}
 8004498:	200008c8 	.word	0x200008c8

0800449c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 800449c:	4b01      	ldr	r3, [pc, #4]	; (80044a4 <HAL_GetREVID+0x8>)
 800449e:	6818      	ldr	r0, [r3, #0]
}
 80044a0:	0c00      	lsrs	r0, r0, #16
 80044a2:	4770      	bx	lr
 80044a4:	5c001000 	.word	0x5c001000

080044a8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80044a8:	4a03      	ldr	r2, [pc, #12]	; (80044b8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80044aa:	6813      	ldr	r3, [r2, #0]
 80044ac:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80044b0:	4318      	orrs	r0, r3
 80044b2:	6010      	str	r0, [r2, #0]
}
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	52004000 	.word	0x52004000

080044bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044bc:	4906      	ldr	r1, [pc, #24]	; (80044d8 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044be:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80044c4:	4b05      	ldr	r3, [pc, #20]	; (80044dc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044c6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044c8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044cc:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044d0:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 80044d2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80044d4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00
 80044dc:	05fa0000 	.word	0x05fa0000

080044e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e0:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e2:	b500      	push	{lr}
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044ea:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044ee:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f2:	f1be 0f04 	cmp.w	lr, #4
 80044f6:	bf28      	it	cs
 80044f8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80044fc:	f1bc 0f06 	cmp.w	ip, #6
 8004500:	d91a      	bls.n	8004538 <HAL_NVIC_SetPriority+0x58>
 8004502:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004504:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004508:	fa0c fc03 	lsl.w	ip, ip, r3
 800450c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004510:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8004514:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004516:	fa0c fc0e 	lsl.w	ip, ip, lr
 800451a:	ea21 010c 	bic.w	r1, r1, ip
 800451e:	fa01 f103 	lsl.w	r1, r1, r3
 8004522:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004526:	db0a      	blt.n	800453e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004528:	0109      	lsls	r1, r1, #4
 800452a:	4b0a      	ldr	r3, [pc, #40]	; (8004554 <HAL_NVIC_SetPriority+0x74>)
 800452c:	b2c9      	uxtb	r1, r1
 800452e:	4403      	add	r3, r0
 8004530:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004534:	f85d fb04 	ldr.w	pc, [sp], #4
 8004538:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800453a:	4613      	mov	r3, r2
 800453c:	e7e8      	b.n	8004510 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453e:	f000 000f 	and.w	r0, r0, #15
 8004542:	0109      	lsls	r1, r1, #4
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <HAL_NVIC_SetPriority+0x78>)
 8004546:	b2c9      	uxtb	r1, r1
 8004548:	4403      	add	r3, r0
 800454a:	7619      	strb	r1, [r3, #24]
 800454c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004550:	e000ed00 	.word	0xe000ed00
 8004554:	e000e100 	.word	0xe000e100
 8004558:	e000ecfc 	.word	0xe000ecfc

0800455c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800455c:	2800      	cmp	r0, #0
 800455e:	db07      	blt.n	8004570 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004560:	2301      	movs	r3, #1
 8004562:	f000 011f 	and.w	r1, r0, #31
 8004566:	4a03      	ldr	r2, [pc, #12]	; (8004574 <HAL_NVIC_EnableIRQ+0x18>)
 8004568:	0940      	lsrs	r0, r0, #5
 800456a:	408b      	lsls	r3, r1
 800456c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	e000e100 	.word	0xe000e100

08004578 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004578:	1e43      	subs	r3, r0, #1
 800457a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800457e:	d20c      	bcs.n	800459a <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004580:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004584:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004586:	4906      	ldr	r1, [pc, #24]	; (80045a0 <HAL_SYSTICK_Config+0x28>)
 8004588:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800458c:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800458e:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004590:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004594:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004596:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004598:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800459a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	e000ed00 	.word	0xe000ed00

080045a4 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80045a4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80045a8:	4b04      	ldr	r3, [pc, #16]	; (80045bc <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80045aa:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80045ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80045b2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 80045b4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	e000ed00 	.word	0xe000ed00

080045c0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80045c0:	4b06      	ldr	r3, [pc, #24]	; (80045dc <HAL_MPU_Enable+0x1c>)
 80045c2:	f040 0001 	orr.w	r0, r0, #1
 80045c6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80045ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045cc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80045d0:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80045d2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80045d6:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80045da:	4770      	bx	lr
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80045e0:	7843      	ldrb	r3, [r0, #1]
 80045e2:	4a16      	ldr	r2, [pc, #88]	; (800463c <HAL_MPU_ConfigRegion+0x5c>)
 80045e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 80045e8:	7803      	ldrb	r3, [r0, #0]
 80045ea:	b313      	cbz	r3, 8004632 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80045ec:	6843      	ldr	r3, [r0, #4]
 80045ee:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80045f2:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045f4:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80045f8:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80045fa:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80045fc:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8004600:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004604:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8004606:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004608:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800460c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004610:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8004614:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8004616:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800461a:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800461e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8004622:	7a01      	ldrb	r1, [r0, #8]
 8004624:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8004628:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800462c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8004630:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8004632:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8004636:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 800463a:	4770      	bx	lr
 800463c:	e000ed00 	.word	0xe000ed00

08004640 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004640:	4b33      	ldr	r3, [pc, #204]	; (8004710 <DMA_CalcBaseAndBitshift+0xd0>)
{
 8004642:	4601      	mov	r1, r0
 8004644:	b470      	push	{r4, r5, r6}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004646:	4e33      	ldr	r6, [pc, #204]	; (8004714 <DMA_CalcBaseAndBitshift+0xd4>)
 8004648:	6802      	ldr	r2, [r0, #0]
 800464a:	4d33      	ldr	r5, [pc, #204]	; (8004718 <DMA_CalcBaseAndBitshift+0xd8>)
 800464c:	42b2      	cmp	r2, r6
 800464e:	bf18      	it	ne
 8004650:	429a      	cmpne	r2, r3
 8004652:	4c32      	ldr	r4, [pc, #200]	; (800471c <DMA_CalcBaseAndBitshift+0xdc>)
 8004654:	4832      	ldr	r0, [pc, #200]	; (8004720 <DMA_CalcBaseAndBitshift+0xe0>)
 8004656:	bf0c      	ite	eq
 8004658:	2301      	moveq	r3, #1
 800465a:	2300      	movne	r3, #0
 800465c:	42aa      	cmp	r2, r5
 800465e:	bf08      	it	eq
 8004660:	f043 0301 	orreq.w	r3, r3, #1
 8004664:	42a2      	cmp	r2, r4
 8004666:	bf08      	it	eq
 8004668:	f043 0301 	orreq.w	r3, r3, #1
 800466c:	3430      	adds	r4, #48	; 0x30
 800466e:	4282      	cmp	r2, r0
 8004670:	bf08      	it	eq
 8004672:	f043 0301 	orreq.w	r3, r3, #1
 8004676:	3030      	adds	r0, #48	; 0x30
 8004678:	42a2      	cmp	r2, r4
 800467a:	bf08      	it	eq
 800467c:	f043 0301 	orreq.w	r3, r3, #1
 8004680:	3430      	adds	r4, #48	; 0x30
 8004682:	4282      	cmp	r2, r0
 8004684:	bf08      	it	eq
 8004686:	f043 0301 	orreq.w	r3, r3, #1
 800468a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800468e:	42a2      	cmp	r2, r4
 8004690:	bf08      	it	eq
 8004692:	f043 0301 	orreq.w	r3, r3, #1
 8004696:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800469a:	4282      	cmp	r2, r0
 800469c:	bf08      	it	eq
 800469e:	f043 0301 	orreq.w	r3, r3, #1
 80046a2:	3030      	adds	r0, #48	; 0x30
 80046a4:	42a2      	cmp	r2, r4
 80046a6:	bf08      	it	eq
 80046a8:	f043 0301 	orreq.w	r3, r3, #1
 80046ac:	3430      	adds	r4, #48	; 0x30
 80046ae:	4282      	cmp	r2, r0
 80046b0:	bf08      	it	eq
 80046b2:	f043 0301 	orreq.w	r3, r3, #1
 80046b6:	3030      	adds	r0, #48	; 0x30
 80046b8:	42a2      	cmp	r2, r4
 80046ba:	bf08      	it	eq
 80046bc:	f043 0301 	orreq.w	r3, r3, #1
 80046c0:	3430      	adds	r4, #48	; 0x30
 80046c2:	4282      	cmp	r2, r0
 80046c4:	bf08      	it	eq
 80046c6:	f043 0301 	orreq.w	r3, r3, #1
 80046ca:	3030      	adds	r0, #48	; 0x30
 80046cc:	42a2      	cmp	r2, r4
 80046ce:	bf08      	it	eq
 80046d0:	f043 0301 	orreq.w	r3, r3, #1
 80046d4:	4282      	cmp	r2, r0
 80046d6:	bf08      	it	eq
 80046d8:	f043 0301 	orreq.w	r3, r3, #1
 80046dc:	b913      	cbnz	r3, 80046e4 <DMA_CalcBaseAndBitshift+0xa4>
 80046de:	4b11      	ldr	r3, [pc, #68]	; (8004724 <DMA_CalcBaseAndBitshift+0xe4>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d112      	bne.n	800470a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046e4:	b2d3      	uxtb	r3, r2
 80046e6:	4810      	ldr	r0, [pc, #64]	; (8004728 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80046e8:	4c10      	ldr	r4, [pc, #64]	; (800472c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046ea:	3b10      	subs	r3, #16
 80046ec:	fba0 5003 	umull	r5, r0, r0, r3

    if (stream_number > 3U)
 80046f0:	2b5f      	cmp	r3, #95	; 0x5f
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80046f2:	ea4f 1010 	mov.w	r0, r0, lsr #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80046f6:	5c20      	ldrb	r0, [r4, r0]
 80046f8:	65c8      	str	r0, [r1, #92]	; 0x5c
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80046fa:	480d      	ldr	r0, [pc, #52]	; (8004730 <DMA_CalcBaseAndBitshift+0xf0>)
 80046fc:	ea00 0002 	and.w	r0, r0, r2
 8004700:	bf88      	it	hi
 8004702:	3004      	addhi	r0, #4
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8004704:	6588      	str	r0, [r1, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8004706:	bc70      	pop	{r4, r5, r6}
 8004708:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800470a:	f022 00ff 	bic.w	r0, r2, #255	; 0xff
 800470e:	e7f9      	b.n	8004704 <DMA_CalcBaseAndBitshift+0xc4>
 8004710:	40020010 	.word	0x40020010
 8004714:	40020028 	.word	0x40020028
 8004718:	40020040 	.word	0x40020040
 800471c:	40020058 	.word	0x40020058
 8004720:	40020070 	.word	0x40020070
 8004724:	400204b8 	.word	0x400204b8
 8004728:	aaaaaaab 	.word	0xaaaaaaab
 800472c:	0801b9cc 	.word	0x0801b9cc
 8004730:	fffffc00 	.word	0xfffffc00

08004734 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004734:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004736:	4a27      	ldr	r2, [pc, #156]	; (80047d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xa0>)
 8004738:	4927      	ldr	r1, [pc, #156]	; (80047d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xa4>)
{
 800473a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800473c:	4d27      	ldr	r5, [pc, #156]	; (80047dc <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 800473e:	4c28      	ldr	r4, [pc, #160]	; (80047e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
 8004740:	42ab      	cmp	r3, r5
 8004742:	bf18      	it	ne
 8004744:	4293      	cmpne	r3, r2
 8004746:	bf0c      	ite	eq
 8004748:	2201      	moveq	r2, #1
 800474a:	2200      	movne	r2, #0
 800474c:	428b      	cmp	r3, r1
 800474e:	bf08      	it	eq
 8004750:	f042 0201 	orreq.w	r2, r2, #1
 8004754:	3128      	adds	r1, #40	; 0x28
 8004756:	42a3      	cmp	r3, r4
 8004758:	bf08      	it	eq
 800475a:	f042 0201 	orreq.w	r2, r2, #1
 800475e:	3428      	adds	r4, #40	; 0x28
 8004760:	428b      	cmp	r3, r1
 8004762:	bf08      	it	eq
 8004764:	f042 0201 	orreq.w	r2, r2, #1
 8004768:	3128      	adds	r1, #40	; 0x28
 800476a:	42a3      	cmp	r3, r4
 800476c:	bf08      	it	eq
 800476e:	f042 0201 	orreq.w	r2, r2, #1
 8004772:	428b      	cmp	r3, r1
 8004774:	bf08      	it	eq
 8004776:	f042 0201 	orreq.w	r2, r2, #1
 800477a:	b912      	cbnz	r2, 8004782 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 800477c:	4a19      	ldr	r2, [pc, #100]	; (80047e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d113      	bne.n	80047aa <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004782:	b2db      	uxtb	r3, r3
 8004784:	4918      	ldr	r1, [pc, #96]	; (80047e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004786:	4a19      	ldr	r2, [pc, #100]	; (80047ec <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004788:	3b08      	subs	r3, #8
 800478a:	4c19      	ldr	r4, [pc, #100]	; (80047f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
 800478c:	fba1 1303 	umull	r1, r3, r1, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004790:	2101      	movs	r1, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004792:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004796:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800479a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800479c:	fa01 f303 	lsl.w	r3, r1, r3
 80047a0:	6683      	str	r3, [r0, #104]	; 0x68
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80047a2:	e9c0 2418 	strd	r2, r4, [r0, #96]	; 0x60
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80047a6:	bc30      	pop	{r4, r5}
 80047a8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047aa:	b2d9      	uxtb	r1, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047ac:	4a11      	ldr	r2, [pc, #68]	; (80047f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047ae:	4c12      	ldr	r4, [pc, #72]	; (80047f8 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
 80047b0:	3910      	subs	r1, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047b2:	441a      	add	r2, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047b4:	fba4 4101 	umull	r4, r1, r4, r1
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047b8:	2aa8      	cmp	r2, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80047ba:	ea4f 1111 	mov.w	r1, r1, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80047be:	d800      	bhi.n	80047c2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80047c0:	3108      	adds	r1, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047c4:	f001 041f 	and.w	r4, r1, #31
 80047c8:	2301      	movs	r3, #1
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047ca:	440a      	add	r2, r1
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047cc:	40a3      	lsls	r3, r4
 80047ce:	4c0c      	ldr	r4, [pc, #48]	; (8004800 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80047d0:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80047d2:	e7e5      	b.n	80047a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>
 80047d4:	58025408 	.word	0x58025408
 80047d8:	58025430 	.word	0x58025430
 80047dc:	5802541c 	.word	0x5802541c
 80047e0:	58025444 	.word	0x58025444
 80047e4:	58025494 	.word	0x58025494
 80047e8:	cccccccd 	.word	0xcccccccd
 80047ec:	16009600 	.word	0x16009600
 80047f0:	58025880 	.word	0x58025880
 80047f4:	bffdfbf0 	.word	0xbffdfbf0
 80047f8:	aaaaaaab 	.word	0xaaaaaaab
 80047fc:	10008200 	.word	0x10008200
 8004800:	40020880 	.word	0x40020880

08004804 <HAL_DMA_Init>:
{
 8004804:	b538      	push	{r3, r4, r5, lr}
 8004806:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004808:	f7ff fe30 	bl	800446c <HAL_GetTick>
  if(hdma == NULL)
 800480c:	2c00      	cmp	r4, #0
 800480e:	f000 816a 	beq.w	8004ae6 <HAL_DMA_Init+0x2e2>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	4605      	mov	r5, r0
 8004816:	4ba3      	ldr	r3, [pc, #652]	; (8004aa4 <HAL_DMA_Init+0x2a0>)
 8004818:	429a      	cmp	r2, r3
 800481a:	d048      	beq.n	80048ae <HAL_DMA_Init+0xaa>
 800481c:	3318      	adds	r3, #24
 800481e:	429a      	cmp	r2, r3
 8004820:	d045      	beq.n	80048ae <HAL_DMA_Init+0xaa>
 8004822:	3330      	adds	r3, #48	; 0x30
 8004824:	49a0      	ldr	r1, [pc, #640]	; (8004aa8 <HAL_DMA_Init+0x2a4>)
 8004826:	428a      	cmp	r2, r1
 8004828:	bf18      	it	ne
 800482a:	429a      	cmpne	r2, r3
 800482c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004830:	bf0c      	ite	eq
 8004832:	2301      	moveq	r3, #1
 8004834:	2300      	movne	r3, #0
 8004836:	428a      	cmp	r2, r1
 8004838:	bf08      	it	eq
 800483a:	f043 0301 	orreq.w	r3, r3, #1
 800483e:	3118      	adds	r1, #24
 8004840:	428a      	cmp	r2, r1
 8004842:	bf08      	it	eq
 8004844:	f043 0301 	orreq.w	r3, r3, #1
 8004848:	3118      	adds	r1, #24
 800484a:	428a      	cmp	r2, r1
 800484c:	bf08      	it	eq
 800484e:	f043 0301 	orreq.w	r3, r3, #1
 8004852:	3118      	adds	r1, #24
 8004854:	428a      	cmp	r2, r1
 8004856:	bf08      	it	eq
 8004858:	f043 0301 	orreq.w	r3, r3, #1
 800485c:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8004860:	428a      	cmp	r2, r1
 8004862:	bf08      	it	eq
 8004864:	f043 0301 	orreq.w	r3, r3, #1
 8004868:	3118      	adds	r1, #24
 800486a:	428a      	cmp	r2, r1
 800486c:	bf08      	it	eq
 800486e:	f043 0301 	orreq.w	r3, r3, #1
 8004872:	3118      	adds	r1, #24
 8004874:	428a      	cmp	r2, r1
 8004876:	bf08      	it	eq
 8004878:	f043 0301 	orreq.w	r3, r3, #1
 800487c:	3118      	adds	r1, #24
 800487e:	428a      	cmp	r2, r1
 8004880:	bf08      	it	eq
 8004882:	f043 0301 	orreq.w	r3, r3, #1
 8004886:	3118      	adds	r1, #24
 8004888:	428a      	cmp	r2, r1
 800488a:	bf08      	it	eq
 800488c:	f043 0301 	orreq.w	r3, r3, #1
 8004890:	3118      	adds	r1, #24
 8004892:	428a      	cmp	r2, r1
 8004894:	bf08      	it	eq
 8004896:	f043 0301 	orreq.w	r3, r3, #1
 800489a:	3118      	adds	r1, #24
 800489c:	428a      	cmp	r2, r1
 800489e:	bf08      	it	eq
 80048a0:	f043 0301 	orreq.w	r3, r3, #1
 80048a4:	b91b      	cbnz	r3, 80048ae <HAL_DMA_Init+0xaa>
 80048a6:	4b81      	ldr	r3, [pc, #516]	; (8004aac <HAL_DMA_Init+0x2a8>)
 80048a8:	429a      	cmp	r2, r3
 80048aa:	f040 8184 	bne.w	8004bb6 <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ae:	2302      	movs	r3, #2
 80048b0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80048b4:	2300      	movs	r3, #0
 80048b6:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80048ba:	6813      	ldr	r3, [r2, #0]
 80048bc:	f023 0301 	bic.w	r3, r3, #1
 80048c0:	6013      	str	r3, [r2, #0]
 80048c2:	e005      	b.n	80048d0 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048c4:	f7ff fdd2 	bl	800446c <HAL_GetTick>
 80048c8:	1b43      	subs	r3, r0, r5
 80048ca:	2b05      	cmp	r3, #5
 80048cc:	f200 80fe 	bhi.w	8004acc <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048d0:	6823      	ldr	r3, [r4, #0]
 80048d2:	681a      	ldr	r2, [r3, #0]
 80048d4:	07d0      	lsls	r0, r2, #31
 80048d6:	d4f5      	bmi.n	80048c4 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 80048d8:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048dc:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 80048de:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048e0:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e4:	430a      	orrs	r2, r1
 80048e6:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048e8:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048ea:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ee:	69a1      	ldr	r1, [r4, #24]
 80048f0:	ea42 0201 	orr.w	r2, r2, r1
 80048f4:	69e1      	ldr	r1, [r4, #28]
 80048f6:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 80048fa:	6a21      	ldr	r1, [r4, #32]
 80048fc:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004900:	496b      	ldr	r1, [pc, #428]	; (8004ab0 <HAL_DMA_Init+0x2ac>)
 8004902:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8004906:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800490a:	d103      	bne.n	8004914 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800490c:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8004910:	4301      	orrs	r1, r0
 8004912:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004914:	4867      	ldr	r0, [pc, #412]	; (8004ab4 <HAL_DMA_Init+0x2b0>)
 8004916:	4968      	ldr	r1, [pc, #416]	; (8004ab8 <HAL_DMA_Init+0x2b4>)
 8004918:	6800      	ldr	r0, [r0, #0]
 800491a:	4001      	ands	r1, r0
 800491c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8004920:	d30a      	bcc.n	8004938 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004922:	6861      	ldr	r1, [r4, #4]
 8004924:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8004928:	281f      	cmp	r0, #31
 800492a:	f240 80d6 	bls.w	8004ada <HAL_DMA_Init+0x2d6>
 800492e:	394f      	subs	r1, #79	; 0x4f
 8004930:	2903      	cmp	r1, #3
 8004932:	d801      	bhi.n	8004938 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 8004934:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004938:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800493a:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 800493c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800493e:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004940:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004942:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 8004946:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800494a:	d10e      	bne.n	800496a <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800494c:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8004950:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004952:	b150      	cbz	r0, 800496a <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004954:	69a5      	ldr	r5, [r4, #24]
 8004956:	2d00      	cmp	r5, #0
 8004958:	f040 8107 	bne.w	8004b6a <HAL_DMA_Init+0x366>
    switch (hdma->Init.FIFOThreshold)
 800495c:	2a01      	cmp	r2, #1
 800495e:	f000 8125 	beq.w	8004bac <HAL_DMA_Init+0x3a8>
 8004962:	f032 0202 	bics.w	r2, r2, #2
 8004966:	f000 8108 	beq.w	8004b7a <HAL_DMA_Init+0x376>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800496a:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800496c:	4620      	mov	r0, r4
 800496e:	f7ff fe67 	bl	8004640 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004972:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004974:	233f      	movs	r3, #63	; 0x3f
 8004976:	f002 021f 	and.w	r2, r2, #31
 800497a:	4093      	lsls	r3, r2
 800497c:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	4b48      	ldr	r3, [pc, #288]	; (8004aa4 <HAL_DMA_Init+0x2a0>)
 8004982:	484e      	ldr	r0, [pc, #312]	; (8004abc <HAL_DMA_Init+0x2b8>)
 8004984:	4948      	ldr	r1, [pc, #288]	; (8004aa8 <HAL_DMA_Init+0x2a4>)
 8004986:	4282      	cmp	r2, r0
 8004988:	bf18      	it	ne
 800498a:	429a      	cmpne	r2, r3
 800498c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8004990:	bf0c      	ite	eq
 8004992:	2301      	moveq	r3, #1
 8004994:	2300      	movne	r3, #0
 8004996:	428a      	cmp	r2, r1
 8004998:	bf08      	it	eq
 800499a:	f043 0301 	orreq.w	r3, r3, #1
 800499e:	3130      	adds	r1, #48	; 0x30
 80049a0:	4282      	cmp	r2, r0
 80049a2:	bf08      	it	eq
 80049a4:	f043 0301 	orreq.w	r3, r3, #1
 80049a8:	3030      	adds	r0, #48	; 0x30
 80049aa:	428a      	cmp	r2, r1
 80049ac:	bf08      	it	eq
 80049ae:	f043 0301 	orreq.w	r3, r3, #1
 80049b2:	3130      	adds	r1, #48	; 0x30
 80049b4:	4282      	cmp	r2, r0
 80049b6:	bf08      	it	eq
 80049b8:	f043 0301 	orreq.w	r3, r3, #1
 80049bc:	3030      	adds	r0, #48	; 0x30
 80049be:	428a      	cmp	r2, r1
 80049c0:	bf08      	it	eq
 80049c2:	f043 0301 	orreq.w	r3, r3, #1
 80049c6:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80049ca:	4282      	cmp	r2, r0
 80049cc:	bf08      	it	eq
 80049ce:	f043 0301 	orreq.w	r3, r3, #1
 80049d2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80049d6:	428a      	cmp	r2, r1
 80049d8:	bf08      	it	eq
 80049da:	f043 0301 	orreq.w	r3, r3, #1
 80049de:	3130      	adds	r1, #48	; 0x30
 80049e0:	4282      	cmp	r2, r0
 80049e2:	bf08      	it	eq
 80049e4:	f043 0301 	orreq.w	r3, r3, #1
 80049e8:	3030      	adds	r0, #48	; 0x30
 80049ea:	428a      	cmp	r2, r1
 80049ec:	bf08      	it	eq
 80049ee:	f043 0301 	orreq.w	r3, r3, #1
 80049f2:	3130      	adds	r1, #48	; 0x30
 80049f4:	4282      	cmp	r2, r0
 80049f6:	bf08      	it	eq
 80049f8:	f043 0301 	orreq.w	r3, r3, #1
 80049fc:	3030      	adds	r0, #48	; 0x30
 80049fe:	428a      	cmp	r2, r1
 8004a00:	bf08      	it	eq
 8004a02:	f043 0301 	orreq.w	r3, r3, #1
 8004a06:	3130      	adds	r1, #48	; 0x30
 8004a08:	4282      	cmp	r2, r0
 8004a0a:	bf08      	it	eq
 8004a0c:	f043 0301 	orreq.w	r3, r3, #1
 8004a10:	3030      	adds	r0, #48	; 0x30
 8004a12:	428a      	cmp	r2, r1
 8004a14:	bf08      	it	eq
 8004a16:	f043 0301 	orreq.w	r3, r3, #1
 8004a1a:	4929      	ldr	r1, [pc, #164]	; (8004ac0 <HAL_DMA_Init+0x2bc>)
 8004a1c:	4282      	cmp	r2, r0
 8004a1e:	bf08      	it	eq
 8004a20:	f043 0301 	orreq.w	r3, r3, #1
 8004a24:	4827      	ldr	r0, [pc, #156]	; (8004ac4 <HAL_DMA_Init+0x2c0>)
 8004a26:	428a      	cmp	r2, r1
 8004a28:	bf08      	it	eq
 8004a2a:	f043 0301 	orreq.w	r3, r3, #1
 8004a2e:	3128      	adds	r1, #40	; 0x28
 8004a30:	4282      	cmp	r2, r0
 8004a32:	bf08      	it	eq
 8004a34:	f043 0301 	orreq.w	r3, r3, #1
 8004a38:	3028      	adds	r0, #40	; 0x28
 8004a3a:	428a      	cmp	r2, r1
 8004a3c:	bf08      	it	eq
 8004a3e:	f043 0301 	orreq.w	r3, r3, #1
 8004a42:	3128      	adds	r1, #40	; 0x28
 8004a44:	4282      	cmp	r2, r0
 8004a46:	bf08      	it	eq
 8004a48:	f043 0301 	orreq.w	r3, r3, #1
 8004a4c:	3028      	adds	r0, #40	; 0x28
 8004a4e:	428a      	cmp	r2, r1
 8004a50:	bf08      	it	eq
 8004a52:	f043 0301 	orreq.w	r3, r3, #1
 8004a56:	3128      	adds	r1, #40	; 0x28
 8004a58:	4282      	cmp	r2, r0
 8004a5a:	bf08      	it	eq
 8004a5c:	f043 0301 	orreq.w	r3, r3, #1
 8004a60:	428a      	cmp	r2, r1
 8004a62:	bf08      	it	eq
 8004a64:	f043 0301 	orreq.w	r3, r3, #1
 8004a68:	b913      	cbnz	r3, 8004a70 <HAL_DMA_Init+0x26c>
 8004a6a:	4b17      	ldr	r3, [pc, #92]	; (8004ac8 <HAL_DMA_Init+0x2c4>)
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d113      	bne.n	8004a98 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004a70:	4620      	mov	r0, r4
 8004a72:	f7ff fe5f 	bl	8004734 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a76:	68a3      	ldr	r3, [r4, #8]
 8004a78:	2b80      	cmp	r3, #128	; 0x80
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_Init+0x2e6>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004a7c:	7922      	ldrb	r2, [r4, #4]
 8004a7e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004a80:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a82:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 8004a86:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004a88:	6861      	ldr	r1, [r4, #4]
 8004a8a:	1e4b      	subs	r3, r1, #1
 8004a8c:	2b07      	cmp	r3, #7
 8004a8e:	d930      	bls.n	8004af2 <HAL_DMA_Init+0x2ee>
      hdma->DMAmuxRequestGen = 0U;
 8004a90:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 8004a92:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004a96:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a98:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004a9a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a9c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004a9e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004aa2:	bd38      	pop	{r3, r4, r5, pc}
 8004aa4:	40020010 	.word	0x40020010
 8004aa8:	40020040 	.word	0x40020040
 8004aac:	400204b8 	.word	0x400204b8
 8004ab0:	fe10803f 	.word	0xfe10803f
 8004ab4:	5c001000 	.word	0x5c001000
 8004ab8:	ffff0000 	.word	0xffff0000
 8004abc:	40020028 	.word	0x40020028
 8004ac0:	58025408 	.word	0x58025408
 8004ac4:	5802541c 	.word	0x5802541c
 8004ac8:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004acc:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ace:	2303      	movs	r3, #3
        return HAL_ERROR;
 8004ad0:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004ad2:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ad4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004ad8:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004ada:	496b      	ldr	r1, [pc, #428]	; (8004c88 <HAL_DMA_Init+0x484>)
 8004adc:	40c1      	lsrs	r1, r0
 8004ade:	07c9      	lsls	r1, r1, #31
 8004ae0:	f57f af2a 	bpl.w	8004938 <HAL_DMA_Init+0x134>
 8004ae4:	e726      	b.n	8004934 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 8004ae6:	2001      	movs	r0, #1
}
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004aea:	2300      	movs	r3, #0
 8004aec:	461a      	mov	r2, r3
 8004aee:	6063      	str	r3, [r4, #4]
 8004af0:	e7c5      	b.n	8004a7e <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004af2:	6820      	ldr	r0, [r4, #0]
 8004af4:	4a65      	ldr	r2, [pc, #404]	; (8004c8c <HAL_DMA_Init+0x488>)
 8004af6:	4d66      	ldr	r5, [pc, #408]	; (8004c90 <HAL_DMA_Init+0x48c>)
 8004af8:	42a8      	cmp	r0, r5
 8004afa:	bf18      	it	ne
 8004afc:	4290      	cmpne	r0, r2
 8004afe:	f105 0514 	add.w	r5, r5, #20
 8004b02:	bf0c      	ite	eq
 8004b04:	2201      	moveq	r2, #1
 8004b06:	2200      	movne	r2, #0
 8004b08:	42a8      	cmp	r0, r5
 8004b0a:	bf08      	it	eq
 8004b0c:	f042 0201 	orreq.w	r2, r2, #1
 8004b10:	3514      	adds	r5, #20
 8004b12:	42a8      	cmp	r0, r5
 8004b14:	bf08      	it	eq
 8004b16:	f042 0201 	orreq.w	r2, r2, #1
 8004b1a:	3514      	adds	r5, #20
 8004b1c:	42a8      	cmp	r0, r5
 8004b1e:	bf08      	it	eq
 8004b20:	f042 0201 	orreq.w	r2, r2, #1
 8004b24:	3514      	adds	r5, #20
 8004b26:	42a8      	cmp	r0, r5
 8004b28:	bf08      	it	eq
 8004b2a:	f042 0201 	orreq.w	r2, r2, #1
 8004b2e:	3514      	adds	r5, #20
 8004b30:	42a8      	cmp	r0, r5
 8004b32:	bf08      	it	eq
 8004b34:	f042 0201 	orreq.w	r2, r2, #1
 8004b38:	b93a      	cbnz	r2, 8004b4a <HAL_DMA_Init+0x346>
 8004b3a:	4a56      	ldr	r2, [pc, #344]	; (8004c94 <HAL_DMA_Init+0x490>)
 8004b3c:	4290      	cmp	r0, r2
 8004b3e:	d004      	beq.n	8004b4a <HAL_DMA_Init+0x346>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b40:	4a55      	ldr	r2, [pc, #340]	; (8004c98 <HAL_DMA_Init+0x494>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b42:	4856      	ldr	r0, [pc, #344]	; (8004c9c <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b44:	440a      	add	r2, r1
 8004b46:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004b48:	e003      	b.n	8004b52 <HAL_DMA_Init+0x34e>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b4a:	4a55      	ldr	r2, [pc, #340]	; (8004ca0 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004b4c:	4855      	ldr	r0, [pc, #340]	; (8004ca4 <HAL_DMA_Init+0x4a0>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004b4e:	440a      	add	r2, r1
 8004b50:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b52:	2101      	movs	r1, #1
 8004b54:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b58:	2100      	movs	r1, #0
 8004b5a:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004b5e:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b60:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b62:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8004b66:	605a      	str	r2, [r3, #4]
 8004b68:	e796      	b.n	8004a98 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b6a:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8004b6e:	d00e      	beq.n	8004b8e <HAL_DMA_Init+0x38a>
    switch (hdma->Init.FIFOThreshold)
 8004b70:	2a02      	cmp	r2, #2
 8004b72:	d905      	bls.n	8004b80 <HAL_DMA_Init+0x37c>
 8004b74:	2a03      	cmp	r2, #3
 8004b76:	f47f aef8 	bne.w	800496a <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b7a:	01c2      	lsls	r2, r0, #7
 8004b7c:	f57f aef5 	bpl.w	800496a <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8004b80:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b82:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8004b84:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b86:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8004b88:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8004b8e:	2a03      	cmp	r2, #3
 8004b90:	f63f aeeb 	bhi.w	800496a <HAL_DMA_Init+0x166>
 8004b94:	a501      	add	r5, pc, #4	; (adr r5, 8004b9c <HAL_DMA_Init+0x398>)
 8004b96:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8004b9a:	bf00      	nop
 8004b9c:	08004b81 	.word	0x08004b81
 8004ba0:	08004b7b 	.word	0x08004b7b
 8004ba4:	08004b81 	.word	0x08004b81
 8004ba8:	08004bad 	.word	0x08004bad
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bac:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8004bb0:	f47f aedb 	bne.w	800496a <HAL_DMA_Init+0x166>
 8004bb4:	e7e4      	b.n	8004b80 <HAL_DMA_Init+0x37c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004bb6:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <HAL_DMA_Init+0x488>)
 8004bb8:	4835      	ldr	r0, [pc, #212]	; (8004c90 <HAL_DMA_Init+0x48c>)
 8004bba:	493b      	ldr	r1, [pc, #236]	; (8004ca8 <HAL_DMA_Init+0x4a4>)
 8004bbc:	4282      	cmp	r2, r0
 8004bbe:	bf18      	it	ne
 8004bc0:	429a      	cmpne	r2, r3
 8004bc2:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8004bc6:	bf0c      	ite	eq
 8004bc8:	2301      	moveq	r3, #1
 8004bca:	2300      	movne	r3, #0
 8004bcc:	428a      	cmp	r2, r1
 8004bce:	bf08      	it	eq
 8004bd0:	f043 0301 	orreq.w	r3, r3, #1
 8004bd4:	3128      	adds	r1, #40	; 0x28
 8004bd6:	4282      	cmp	r2, r0
 8004bd8:	bf08      	it	eq
 8004bda:	f043 0301 	orreq.w	r3, r3, #1
 8004bde:	3028      	adds	r0, #40	; 0x28
 8004be0:	428a      	cmp	r2, r1
 8004be2:	bf08      	it	eq
 8004be4:	f043 0301 	orreq.w	r3, r3, #1
 8004be8:	3128      	adds	r1, #40	; 0x28
 8004bea:	4282      	cmp	r2, r0
 8004bec:	bf08      	it	eq
 8004bee:	f043 0301 	orreq.w	r3, r3, #1
 8004bf2:	428a      	cmp	r2, r1
 8004bf4:	bf08      	it	eq
 8004bf6:	f043 0301 	orreq.w	r3, r3, #1
 8004bfa:	b913      	cbnz	r3, 8004c02 <HAL_DMA_Init+0x3fe>
 8004bfc:	4b25      	ldr	r3, [pc, #148]	; (8004c94 <HAL_DMA_Init+0x490>)
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d13a      	bne.n	8004c78 <HAL_DMA_Init+0x474>
    __HAL_UNLOCK(hdma);
 8004c02:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c04:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c06:	4929      	ldr	r1, [pc, #164]	; (8004cac <HAL_DMA_Init+0x4a8>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c08:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8004c0c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004c10:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004c12:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c14:	68a3      	ldr	r3, [r4, #8]
 8004c16:	2b40      	cmp	r3, #64	; 0x40
 8004c18:	d02c      	beq.n	8004c74 <HAL_DMA_Init+0x470>
 8004c1a:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
 8004c1e:	fab3 f383 	clz	r3, r3
 8004c22:	095b      	lsrs	r3, r3, #5
 8004c24:	0398      	lsls	r0, r3, #14
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c26:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8004c2a:	08db      	lsrs	r3, r3, #3
 8004c2c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c30:	6965      	ldr	r5, [r4, #20]
 8004c32:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c36:	69a5      	ldr	r5, [r4, #24]
 8004c38:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c3c:	69e5      	ldr	r5, [r4, #28]
 8004c3e:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c42:	6a25      	ldr	r5, [r4, #32]
 8004c44:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8004c48:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c4a:	4919      	ldr	r1, [pc, #100]	; (8004cb0 <HAL_DMA_Init+0x4ac>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c4c:	4318      	orrs	r0, r3
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c4e:	4b19      	ldr	r3, [pc, #100]	; (8004cb4 <HAL_DMA_Init+0x4b0>)
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c50:	6010      	str	r0, [r2, #0]
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c52:	4620      	mov	r0, r4
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c54:	6822      	ldr	r2, [r4, #0]
 8004c56:	4411      	add	r1, r2
 8004c58:	fba3 2301 	umull	r2, r3, r3, r1
 8004c5c:	091b      	lsrs	r3, r3, #4
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c62:	f7ff fced 	bl	8004640 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004c66:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004c68:	2301      	movs	r3, #1
 8004c6a:	f002 021f 	and.w	r2, r2, #31
 8004c6e:	4093      	lsls	r3, r2
 8004c70:	6043      	str	r3, [r0, #4]
 8004c72:	e684      	b.n	800497e <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c74:	2010      	movs	r0, #16
 8004c76:	e7d6      	b.n	8004c26 <HAL_DMA_Init+0x422>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c78:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c7a:	2303      	movs	r3, #3
    return HAL_ERROR;
 8004c7c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c7e:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004c80:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004c84:	bd38      	pop	{r3, r4, r5, pc}
 8004c86:	bf00      	nop
 8004c88:	c3c0003f 	.word	0xc3c0003f
 8004c8c:	58025408 	.word	0x58025408
 8004c90:	5802541c 	.word	0x5802541c
 8004c94:	58025494 	.word	0x58025494
 8004c98:	1000823f 	.word	0x1000823f
 8004c9c:	40020940 	.word	0x40020940
 8004ca0:	1600963f 	.word	0x1600963f
 8004ca4:	58025940 	.word	0x58025940
 8004ca8:	58025430 	.word	0x58025430
 8004cac:	fffe000f 	.word	0xfffe000f
 8004cb0:	a7fdabf8 	.word	0xa7fdabf8
 8004cb4:	cccccccd 	.word	0xcccccccd

08004cb8 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f000 8270 	beq.w	800519e <HAL_DMA_Start_IT+0x4e6>
 8004cbe:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8004cc0:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8004cc4:	2801      	cmp	r0, #1
 8004cc6:	f000 826c 	beq.w	80051a2 <HAL_DMA_Start_IT+0x4ea>
 8004cca:	2001      	movs	r0, #1
{
 8004ccc:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cce:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8004cd2:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd6:	4284      	cmp	r4, r0
 8004cd8:	d008      	beq.n	8004cec <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8004cde:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004ce0:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8004ce4:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8004ce8:	bc70      	pop	{r4, r5, r6}
 8004cea:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cec:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8004cee:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cf2:	4ea2      	ldr	r6, [pc, #648]	; (8004f7c <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cf4:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cf8:	2000      	movs	r0, #0
 8004cfa:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8004cfe:	6820      	ldr	r0, [r4, #0]
 8004d00:	f020 0001 	bic.w	r0, r0, #1
 8004d04:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d06:	489e      	ldr	r0, [pc, #632]	; (8004f80 <HAL_DMA_Start_IT+0x2c8>)
 8004d08:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d0c:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004d10:	42b4      	cmp	r4, r6
 8004d12:	bf18      	it	ne
 8004d14:	4284      	cmpne	r4, r0
 8004d16:	f106 0618 	add.w	r6, r6, #24
 8004d1a:	bf0c      	ite	eq
 8004d1c:	2001      	moveq	r0, #1
 8004d1e:	2000      	movne	r0, #0
 8004d20:	42b4      	cmp	r4, r6
 8004d22:	bf08      	it	eq
 8004d24:	f040 0001 	orreq.w	r0, r0, #1
 8004d28:	3618      	adds	r6, #24
 8004d2a:	42b4      	cmp	r4, r6
 8004d2c:	bf08      	it	eq
 8004d2e:	f040 0001 	orreq.w	r0, r0, #1
 8004d32:	3618      	adds	r6, #24
 8004d34:	42b4      	cmp	r4, r6
 8004d36:	bf08      	it	eq
 8004d38:	f040 0001 	orreq.w	r0, r0, #1
 8004d3c:	3618      	adds	r6, #24
 8004d3e:	42b4      	cmp	r4, r6
 8004d40:	bf08      	it	eq
 8004d42:	f040 0001 	orreq.w	r0, r0, #1
 8004d46:	3618      	adds	r6, #24
 8004d48:	42b4      	cmp	r4, r6
 8004d4a:	bf08      	it	eq
 8004d4c:	f040 0001 	orreq.w	r0, r0, #1
 8004d50:	3618      	adds	r6, #24
 8004d52:	42b4      	cmp	r4, r6
 8004d54:	bf08      	it	eq
 8004d56:	f040 0001 	orreq.w	r0, r0, #1
 8004d5a:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004d5e:	42b4      	cmp	r4, r6
 8004d60:	bf08      	it	eq
 8004d62:	f040 0001 	orreq.w	r0, r0, #1
 8004d66:	3618      	adds	r6, #24
 8004d68:	42b4      	cmp	r4, r6
 8004d6a:	bf08      	it	eq
 8004d6c:	f040 0001 	orreq.w	r0, r0, #1
 8004d70:	3618      	adds	r6, #24
 8004d72:	42b4      	cmp	r4, r6
 8004d74:	bf08      	it	eq
 8004d76:	f040 0001 	orreq.w	r0, r0, #1
 8004d7a:	3618      	adds	r6, #24
 8004d7c:	42b4      	cmp	r4, r6
 8004d7e:	bf08      	it	eq
 8004d80:	f040 0001 	orreq.w	r0, r0, #1
 8004d84:	3618      	adds	r6, #24
 8004d86:	42b4      	cmp	r4, r6
 8004d88:	bf08      	it	eq
 8004d8a:	f040 0001 	orreq.w	r0, r0, #1
 8004d8e:	3618      	adds	r6, #24
 8004d90:	42b4      	cmp	r4, r6
 8004d92:	bf08      	it	eq
 8004d94:	f040 0001 	orreq.w	r0, r0, #1
 8004d98:	3618      	adds	r6, #24
 8004d9a:	42b4      	cmp	r4, r6
 8004d9c:	bf08      	it	eq
 8004d9e:	f040 0001 	orreq.w	r0, r0, #1
 8004da2:	3618      	adds	r6, #24
 8004da4:	42b4      	cmp	r4, r6
 8004da6:	bf08      	it	eq
 8004da8:	f040 0001 	orreq.w	r0, r0, #1
 8004dac:	4e75      	ldr	r6, [pc, #468]	; (8004f84 <HAL_DMA_Start_IT+0x2cc>)
 8004dae:	42b4      	cmp	r4, r6
 8004db0:	bf08      	it	eq
 8004db2:	f040 0001 	orreq.w	r0, r0, #1
 8004db6:	3614      	adds	r6, #20
 8004db8:	42b4      	cmp	r4, r6
 8004dba:	bf08      	it	eq
 8004dbc:	f040 0001 	orreq.w	r0, r0, #1
 8004dc0:	3614      	adds	r6, #20
 8004dc2:	42b4      	cmp	r4, r6
 8004dc4:	bf08      	it	eq
 8004dc6:	f040 0001 	orreq.w	r0, r0, #1
 8004dca:	3614      	adds	r6, #20
 8004dcc:	42b4      	cmp	r4, r6
 8004dce:	bf08      	it	eq
 8004dd0:	f040 0001 	orreq.w	r0, r0, #1
 8004dd4:	3614      	adds	r6, #20
 8004dd6:	42b4      	cmp	r4, r6
 8004dd8:	bf08      	it	eq
 8004dda:	f040 0001 	orreq.w	r0, r0, #1
 8004dde:	3614      	adds	r6, #20
 8004de0:	42b4      	cmp	r4, r6
 8004de2:	bf08      	it	eq
 8004de4:	f040 0001 	orreq.w	r0, r0, #1
 8004de8:	3614      	adds	r6, #20
 8004dea:	42b4      	cmp	r4, r6
 8004dec:	bf08      	it	eq
 8004dee:	f040 0001 	orreq.w	r0, r0, #1
 8004df2:	b910      	cbnz	r0, 8004dfa <HAL_DMA_Start_IT+0x142>
 8004df4:	4864      	ldr	r0, [pc, #400]	; (8004f88 <HAL_DMA_Start_IT+0x2d0>)
 8004df6:	4284      	cmp	r4, r0
 8004df8:	d10a      	bne.n	8004e10 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dfa:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8004dfe:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8004e00:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8004e04:	b110      	cbz	r0, 8004e0c <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e06:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8004e0a:	6044      	str	r4, [r0, #4]
 8004e0c:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e10:	485b      	ldr	r0, [pc, #364]	; (8004f80 <HAL_DMA_Start_IT+0x2c8>)
 8004e12:	4e5a      	ldr	r6, [pc, #360]	; (8004f7c <HAL_DMA_Start_IT+0x2c4>)
 8004e14:	42b4      	cmp	r4, r6
 8004e16:	bf18      	it	ne
 8004e18:	4284      	cmpne	r4, r0
 8004e1a:	f106 0618 	add.w	r6, r6, #24
 8004e1e:	bf0c      	ite	eq
 8004e20:	2001      	moveq	r0, #1
 8004e22:	2000      	movne	r0, #0
 8004e24:	42b4      	cmp	r4, r6
 8004e26:	bf08      	it	eq
 8004e28:	f040 0001 	orreq.w	r0, r0, #1
 8004e2c:	3618      	adds	r6, #24
 8004e2e:	42b4      	cmp	r4, r6
 8004e30:	bf08      	it	eq
 8004e32:	f040 0001 	orreq.w	r0, r0, #1
 8004e36:	3618      	adds	r6, #24
 8004e38:	42b4      	cmp	r4, r6
 8004e3a:	bf08      	it	eq
 8004e3c:	f040 0001 	orreq.w	r0, r0, #1
 8004e40:	3618      	adds	r6, #24
 8004e42:	42b4      	cmp	r4, r6
 8004e44:	bf08      	it	eq
 8004e46:	f040 0001 	orreq.w	r0, r0, #1
 8004e4a:	3618      	adds	r6, #24
 8004e4c:	42b4      	cmp	r4, r6
 8004e4e:	bf08      	it	eq
 8004e50:	f040 0001 	orreq.w	r0, r0, #1
 8004e54:	3618      	adds	r6, #24
 8004e56:	42b4      	cmp	r4, r6
 8004e58:	bf08      	it	eq
 8004e5a:	f040 0001 	orreq.w	r0, r0, #1
 8004e5e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8004e62:	42b4      	cmp	r4, r6
 8004e64:	bf08      	it	eq
 8004e66:	f040 0001 	orreq.w	r0, r0, #1
 8004e6a:	3618      	adds	r6, #24
 8004e6c:	42b4      	cmp	r4, r6
 8004e6e:	bf08      	it	eq
 8004e70:	f040 0001 	orreq.w	r0, r0, #1
 8004e74:	3618      	adds	r6, #24
 8004e76:	42b4      	cmp	r4, r6
 8004e78:	bf08      	it	eq
 8004e7a:	f040 0001 	orreq.w	r0, r0, #1
 8004e7e:	3618      	adds	r6, #24
 8004e80:	42b4      	cmp	r4, r6
 8004e82:	bf08      	it	eq
 8004e84:	f040 0001 	orreq.w	r0, r0, #1
 8004e88:	3618      	adds	r6, #24
 8004e8a:	42b4      	cmp	r4, r6
 8004e8c:	bf08      	it	eq
 8004e8e:	f040 0001 	orreq.w	r0, r0, #1
 8004e92:	3618      	adds	r6, #24
 8004e94:	42b4      	cmp	r4, r6
 8004e96:	bf08      	it	eq
 8004e98:	f040 0001 	orreq.w	r0, r0, #1
 8004e9c:	3618      	adds	r6, #24
 8004e9e:	42b4      	cmp	r4, r6
 8004ea0:	bf08      	it	eq
 8004ea2:	f040 0001 	orreq.w	r0, r0, #1
 8004ea6:	b918      	cbnz	r0, 8004eb0 <HAL_DMA_Start_IT+0x1f8>
 8004ea8:	4838      	ldr	r0, [pc, #224]	; (8004f8c <HAL_DMA_Start_IT+0x2d4>)
 8004eaa:	4284      	cmp	r4, r0
 8004eac:	f040 817b 	bne.w	80051a6 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004eb0:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8004eb4:	f000 041f 	and.w	r4, r0, #31
 8004eb8:	203f      	movs	r0, #63	; 0x3f
 8004eba:	40a0      	lsls	r0, r4
 8004ebc:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004ebe:	f8dc 4000 	ldr.w	r4, [ip]
 8004ec2:	6820      	ldr	r0, [r4, #0]
 8004ec4:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8004ec8:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004eca:	f8dc 0000 	ldr.w	r0, [ip]
 8004ece:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ed0:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8004ed4:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004ed6:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004eda:	f000 815b 	beq.w	8005194 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8004ede:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004ee0:	f8dc 3000 	ldr.w	r3, [ip]
 8004ee4:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004ee6:	f8dc 4000 	ldr.w	r4, [ip]
 8004eea:	4b25      	ldr	r3, [pc, #148]	; (8004f80 <HAL_DMA_Start_IT+0x2c8>)
 8004eec:	4923      	ldr	r1, [pc, #140]	; (8004f7c <HAL_DMA_Start_IT+0x2c4>)
 8004eee:	4a28      	ldr	r2, [pc, #160]	; (8004f90 <HAL_DMA_Start_IT+0x2d8>)
 8004ef0:	428c      	cmp	r4, r1
 8004ef2:	bf18      	it	ne
 8004ef4:	429c      	cmpne	r4, r3
 8004ef6:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004efa:	bf0c      	ite	eq
 8004efc:	2301      	moveq	r3, #1
 8004efe:	2300      	movne	r3, #0
 8004f00:	4294      	cmp	r4, r2
 8004f02:	bf08      	it	eq
 8004f04:	f043 0301 	orreq.w	r3, r3, #1
 8004f08:	3230      	adds	r2, #48	; 0x30
 8004f0a:	428c      	cmp	r4, r1
 8004f0c:	bf08      	it	eq
 8004f0e:	f043 0301 	orreq.w	r3, r3, #1
 8004f12:	3130      	adds	r1, #48	; 0x30
 8004f14:	4294      	cmp	r4, r2
 8004f16:	bf08      	it	eq
 8004f18:	f043 0301 	orreq.w	r3, r3, #1
 8004f1c:	3230      	adds	r2, #48	; 0x30
 8004f1e:	428c      	cmp	r4, r1
 8004f20:	bf08      	it	eq
 8004f22:	f043 0301 	orreq.w	r3, r3, #1
 8004f26:	3130      	adds	r1, #48	; 0x30
 8004f28:	4294      	cmp	r4, r2
 8004f2a:	bf08      	it	eq
 8004f2c:	f043 0301 	orreq.w	r3, r3, #1
 8004f30:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8004f34:	428c      	cmp	r4, r1
 8004f36:	bf08      	it	eq
 8004f38:	f043 0301 	orreq.w	r3, r3, #1
 8004f3c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8004f40:	4294      	cmp	r4, r2
 8004f42:	bf08      	it	eq
 8004f44:	f043 0301 	orreq.w	r3, r3, #1
 8004f48:	3230      	adds	r2, #48	; 0x30
 8004f4a:	428c      	cmp	r4, r1
 8004f4c:	bf08      	it	eq
 8004f4e:	f043 0301 	orreq.w	r3, r3, #1
 8004f52:	3130      	adds	r1, #48	; 0x30
 8004f54:	4294      	cmp	r4, r2
 8004f56:	bf08      	it	eq
 8004f58:	f043 0301 	orreq.w	r3, r3, #1
 8004f5c:	3230      	adds	r2, #48	; 0x30
 8004f5e:	428c      	cmp	r4, r1
 8004f60:	bf08      	it	eq
 8004f62:	f043 0301 	orreq.w	r3, r3, #1
 8004f66:	3130      	adds	r1, #48	; 0x30
 8004f68:	4294      	cmp	r4, r2
 8004f6a:	bf08      	it	eq
 8004f6c:	f043 0301 	orreq.w	r3, r3, #1
 8004f70:	3230      	adds	r2, #48	; 0x30
 8004f72:	428c      	cmp	r4, r1
 8004f74:	bf08      	it	eq
 8004f76:	f043 0301 	orreq.w	r3, r3, #1
 8004f7a:	e00b      	b.n	8004f94 <HAL_DMA_Start_IT+0x2dc>
 8004f7c:	40020028 	.word	0x40020028
 8004f80:	40020010 	.word	0x40020010
 8004f84:	58025408 	.word	0x58025408
 8004f88:	58025494 	.word	0x58025494
 8004f8c:	400204b8 	.word	0x400204b8
 8004f90:	40020040 	.word	0x40020040
 8004f94:	4294      	cmp	r4, r2
 8004f96:	bf08      	it	eq
 8004f98:	f043 0301 	orreq.w	r3, r3, #1
 8004f9c:	b91b      	cbnz	r3, 8004fa6 <HAL_DMA_Start_IT+0x2ee>
 8004f9e:	4b9b      	ldr	r3, [pc, #620]	; (800520c <HAL_DMA_Start_IT+0x554>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	f040 8143 	bne.w	800522c <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004fa6:	6823      	ldr	r3, [r4, #0]
 8004fa8:	f023 031e 	bic.w	r3, r3, #30
 8004fac:	f043 0316 	orr.w	r3, r3, #22
 8004fb0:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8004fb2:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8004fb6:	b12b      	cbz	r3, 8004fc4 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004fb8:	f8dc 2000 	ldr.w	r2, [ip]
 8004fbc:	6813      	ldr	r3, [r2, #0]
 8004fbe:	f043 0308 	orr.w	r3, r3, #8
 8004fc2:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fc4:	f8dc 4000 	ldr.w	r4, [ip]
 8004fc8:	4b91      	ldr	r3, [pc, #580]	; (8005210 <HAL_DMA_Start_IT+0x558>)
 8004fca:	4992      	ldr	r1, [pc, #584]	; (8005214 <HAL_DMA_Start_IT+0x55c>)
 8004fcc:	4a92      	ldr	r2, [pc, #584]	; (8005218 <HAL_DMA_Start_IT+0x560>)
 8004fce:	428c      	cmp	r4, r1
 8004fd0:	bf18      	it	ne
 8004fd2:	429c      	cmpne	r4, r3
 8004fd4:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004fd8:	bf0c      	ite	eq
 8004fda:	2301      	moveq	r3, #1
 8004fdc:	2300      	movne	r3, #0
 8004fde:	4294      	cmp	r4, r2
 8004fe0:	bf08      	it	eq
 8004fe2:	f043 0301 	orreq.w	r3, r3, #1
 8004fe6:	3230      	adds	r2, #48	; 0x30
 8004fe8:	428c      	cmp	r4, r1
 8004fea:	bf08      	it	eq
 8004fec:	f043 0301 	orreq.w	r3, r3, #1
 8004ff0:	3130      	adds	r1, #48	; 0x30
 8004ff2:	4294      	cmp	r4, r2
 8004ff4:	bf08      	it	eq
 8004ff6:	f043 0301 	orreq.w	r3, r3, #1
 8004ffa:	3230      	adds	r2, #48	; 0x30
 8004ffc:	428c      	cmp	r4, r1
 8004ffe:	bf08      	it	eq
 8005000:	f043 0301 	orreq.w	r3, r3, #1
 8005004:	3130      	adds	r1, #48	; 0x30
 8005006:	4294      	cmp	r4, r2
 8005008:	bf08      	it	eq
 800500a:	f043 0301 	orreq.w	r3, r3, #1
 800500e:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8005012:	428c      	cmp	r4, r1
 8005014:	bf08      	it	eq
 8005016:	f043 0301 	orreq.w	r3, r3, #1
 800501a:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800501e:	4294      	cmp	r4, r2
 8005020:	bf08      	it	eq
 8005022:	f043 0301 	orreq.w	r3, r3, #1
 8005026:	3230      	adds	r2, #48	; 0x30
 8005028:	428c      	cmp	r4, r1
 800502a:	bf08      	it	eq
 800502c:	f043 0301 	orreq.w	r3, r3, #1
 8005030:	3130      	adds	r1, #48	; 0x30
 8005032:	4294      	cmp	r4, r2
 8005034:	bf08      	it	eq
 8005036:	f043 0301 	orreq.w	r3, r3, #1
 800503a:	3230      	adds	r2, #48	; 0x30
 800503c:	428c      	cmp	r4, r1
 800503e:	bf08      	it	eq
 8005040:	f043 0301 	orreq.w	r3, r3, #1
 8005044:	3130      	adds	r1, #48	; 0x30
 8005046:	4294      	cmp	r4, r2
 8005048:	bf08      	it	eq
 800504a:	f043 0301 	orreq.w	r3, r3, #1
 800504e:	3230      	adds	r2, #48	; 0x30
 8005050:	428c      	cmp	r4, r1
 8005052:	bf08      	it	eq
 8005054:	f043 0301 	orreq.w	r3, r3, #1
 8005058:	3130      	adds	r1, #48	; 0x30
 800505a:	4294      	cmp	r4, r2
 800505c:	bf08      	it	eq
 800505e:	f043 0301 	orreq.w	r3, r3, #1
 8005062:	4a6e      	ldr	r2, [pc, #440]	; (800521c <HAL_DMA_Start_IT+0x564>)
 8005064:	428c      	cmp	r4, r1
 8005066:	bf08      	it	eq
 8005068:	f043 0301 	orreq.w	r3, r3, #1
 800506c:	496c      	ldr	r1, [pc, #432]	; (8005220 <HAL_DMA_Start_IT+0x568>)
 800506e:	4294      	cmp	r4, r2
 8005070:	bf08      	it	eq
 8005072:	f043 0301 	orreq.w	r3, r3, #1
 8005076:	3228      	adds	r2, #40	; 0x28
 8005078:	428c      	cmp	r4, r1
 800507a:	bf08      	it	eq
 800507c:	f043 0301 	orreq.w	r3, r3, #1
 8005080:	3128      	adds	r1, #40	; 0x28
 8005082:	4294      	cmp	r4, r2
 8005084:	bf08      	it	eq
 8005086:	f043 0301 	orreq.w	r3, r3, #1
 800508a:	3228      	adds	r2, #40	; 0x28
 800508c:	428c      	cmp	r4, r1
 800508e:	bf08      	it	eq
 8005090:	f043 0301 	orreq.w	r3, r3, #1
 8005094:	3128      	adds	r1, #40	; 0x28
 8005096:	4294      	cmp	r4, r2
 8005098:	bf08      	it	eq
 800509a:	f043 0301 	orreq.w	r3, r3, #1
 800509e:	3228      	adds	r2, #40	; 0x28
 80050a0:	428c      	cmp	r4, r1
 80050a2:	bf08      	it	eq
 80050a4:	f043 0301 	orreq.w	r3, r3, #1
 80050a8:	4294      	cmp	r4, r2
 80050aa:	bf08      	it	eq
 80050ac:	f043 0301 	orreq.w	r3, r3, #1
 80050b0:	b913      	cbnz	r3, 80050b8 <HAL_DMA_Start_IT+0x400>
 80050b2:	4b5c      	ldr	r3, [pc, #368]	; (8005224 <HAL_DMA_Start_IT+0x56c>)
 80050b4:	429c      	cmp	r4, r3
 80050b6:	d111      	bne.n	80050dc <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050b8:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	03d2      	lsls	r2, r2, #15
 80050c0:	d503      	bpl.n	80050ca <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050c8:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 80050ca:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 80050ce:	b11b      	cbz	r3, 80050d8 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050d6:	601a      	str	r2, [r3, #0]
 80050d8:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 80050dc:	4b4c      	ldr	r3, [pc, #304]	; (8005210 <HAL_DMA_Start_IT+0x558>)
 80050de:	494d      	ldr	r1, [pc, #308]	; (8005214 <HAL_DMA_Start_IT+0x55c>)
 80050e0:	4a4d      	ldr	r2, [pc, #308]	; (8005218 <HAL_DMA_Start_IT+0x560>)
 80050e2:	428c      	cmp	r4, r1
 80050e4:	bf18      	it	ne
 80050e6:	429c      	cmpne	r4, r3
 80050e8:	484f      	ldr	r0, [pc, #316]	; (8005228 <HAL_DMA_Start_IT+0x570>)
 80050ea:	f101 0160 	add.w	r1, r1, #96	; 0x60
 80050ee:	bf0c      	ite	eq
 80050f0:	2301      	moveq	r3, #1
 80050f2:	2300      	movne	r3, #0
 80050f4:	4294      	cmp	r4, r2
 80050f6:	bf08      	it	eq
 80050f8:	f043 0301 	orreq.w	r3, r3, #1
 80050fc:	3230      	adds	r2, #48	; 0x30
 80050fe:	4284      	cmp	r4, r0
 8005100:	bf08      	it	eq
 8005102:	f043 0301 	orreq.w	r3, r3, #1
 8005106:	3060      	adds	r0, #96	; 0x60
 8005108:	4294      	cmp	r4, r2
 800510a:	bf08      	it	eq
 800510c:	f043 0301 	orreq.w	r3, r3, #1
 8005110:	3230      	adds	r2, #48	; 0x30
 8005112:	428c      	cmp	r4, r1
 8005114:	bf08      	it	eq
 8005116:	f043 0301 	orreq.w	r3, r3, #1
 800511a:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 800511e:	4294      	cmp	r4, r2
 8005120:	bf08      	it	eq
 8005122:	f043 0301 	orreq.w	r3, r3, #1
 8005126:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800512a:	4284      	cmp	r4, r0
 800512c:	bf08      	it	eq
 800512e:	f043 0301 	orreq.w	r3, r3, #1
 8005132:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8005136:	4294      	cmp	r4, r2
 8005138:	bf08      	it	eq
 800513a:	f043 0301 	orreq.w	r3, r3, #1
 800513e:	3230      	adds	r2, #48	; 0x30
 8005140:	428c      	cmp	r4, r1
 8005142:	bf08      	it	eq
 8005144:	f043 0301 	orreq.w	r3, r3, #1
 8005148:	3160      	adds	r1, #96	; 0x60
 800514a:	4294      	cmp	r4, r2
 800514c:	bf08      	it	eq
 800514e:	f043 0301 	orreq.w	r3, r3, #1
 8005152:	3230      	adds	r2, #48	; 0x30
 8005154:	4284      	cmp	r4, r0
 8005156:	bf08      	it	eq
 8005158:	f043 0301 	orreq.w	r3, r3, #1
 800515c:	4294      	cmp	r4, r2
 800515e:	bf08      	it	eq
 8005160:	f043 0301 	orreq.w	r3, r3, #1
 8005164:	3230      	adds	r2, #48	; 0x30
 8005166:	428c      	cmp	r4, r1
 8005168:	bf08      	it	eq
 800516a:	f043 0301 	orreq.w	r3, r3, #1
 800516e:	4294      	cmp	r4, r2
 8005170:	bf08      	it	eq
 8005172:	f043 0301 	orreq.w	r3, r3, #1
 8005176:	b933      	cbnz	r3, 8005186 <HAL_DMA_Start_IT+0x4ce>
 8005178:	3060      	adds	r0, #96	; 0x60
 800517a:	1a20      	subs	r0, r4, r0
 800517c:	fab0 f080 	clz	r0, r0
 8005180:	0940      	lsrs	r0, r0, #5
 8005182:	2800      	cmp	r0, #0
 8005184:	d03d      	beq.n	8005202 <HAL_DMA_Start_IT+0x54a>
 8005186:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005188:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6023      	str	r3, [r4, #0]
}
 8005190:	bc70      	pop	{r4, r5, r6}
 8005192:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005194:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005196:	f8dc 3000 	ldr.w	r3, [ip]
 800519a:	60d9      	str	r1, [r3, #12]
 800519c:	e6a3      	b.n	8004ee6 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 800519e:	2001      	movs	r0, #1
 80051a0:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80051a2:	2002      	movs	r0, #2
}
 80051a4:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80051a6:	481d      	ldr	r0, [pc, #116]	; (800521c <HAL_DMA_Start_IT+0x564>)
 80051a8:	4e1d      	ldr	r6, [pc, #116]	; (8005220 <HAL_DMA_Start_IT+0x568>)
 80051aa:	42b4      	cmp	r4, r6
 80051ac:	bf18      	it	ne
 80051ae:	4284      	cmpne	r4, r0
 80051b0:	f106 0614 	add.w	r6, r6, #20
 80051b4:	bf0c      	ite	eq
 80051b6:	2001      	moveq	r0, #1
 80051b8:	2000      	movne	r0, #0
 80051ba:	42b4      	cmp	r4, r6
 80051bc:	bf08      	it	eq
 80051be:	f040 0001 	orreq.w	r0, r0, #1
 80051c2:	3614      	adds	r6, #20
 80051c4:	42b4      	cmp	r4, r6
 80051c6:	bf08      	it	eq
 80051c8:	f040 0001 	orreq.w	r0, r0, #1
 80051cc:	3614      	adds	r6, #20
 80051ce:	42b4      	cmp	r4, r6
 80051d0:	bf08      	it	eq
 80051d2:	f040 0001 	orreq.w	r0, r0, #1
 80051d6:	3614      	adds	r6, #20
 80051d8:	42b4      	cmp	r4, r6
 80051da:	bf08      	it	eq
 80051dc:	f040 0001 	orreq.w	r0, r0, #1
 80051e0:	3614      	adds	r6, #20
 80051e2:	42b4      	cmp	r4, r6
 80051e4:	bf08      	it	eq
 80051e6:	f040 0001 	orreq.w	r0, r0, #1
 80051ea:	b910      	cbnz	r0, 80051f2 <HAL_DMA_Start_IT+0x53a>
 80051ec:	480d      	ldr	r0, [pc, #52]	; (8005224 <HAL_DMA_Start_IT+0x56c>)
 80051ee:	4284      	cmp	r4, r0
 80051f0:	d11c      	bne.n	800522c <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051f2:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 80051f6:	f000 041f 	and.w	r4, r0, #31
 80051fa:	2001      	movs	r0, #1
 80051fc:	40a0      	lsls	r0, r4
 80051fe:	6068      	str	r0, [r5, #4]
 8005200:	e663      	b.n	8004eca <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8005202:	6823      	ldr	r3, [r4, #0]
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	6023      	str	r3, [r4, #0]
 800520a:	e56d      	b.n	8004ce8 <HAL_DMA_Start_IT+0x30>
 800520c:	400204b8 	.word	0x400204b8
 8005210:	40020010 	.word	0x40020010
 8005214:	40020028 	.word	0x40020028
 8005218:	40020040 	.word	0x40020040
 800521c:	58025408 	.word	0x58025408
 8005220:	5802541c 	.word	0x5802541c
 8005224:	58025494 	.word	0x58025494
 8005228:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	f023 030e 	bic.w	r3, r3, #14
 8005232:	f043 030a 	orr.w	r3, r3, #10
 8005236:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8005238:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 800523c:	2b00      	cmp	r3, #0
 800523e:	f43f aec1 	beq.w	8004fc4 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005242:	f8dc 2000 	ldr.w	r2, [ip]
 8005246:	6813      	ldr	r3, [r2, #0]
 8005248:	f043 0304 	orr.w	r3, r3, #4
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e6b9      	b.n	8004fc4 <HAL_DMA_Start_IT+0x30c>

08005250 <HAL_DMA_Abort>:
{
 8005250:	b570      	push	{r4, r5, r6, lr}
 8005252:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8005254:	f7ff f90a 	bl	800446c <HAL_GetTick>
  if(hdma == NULL)
 8005258:	2e00      	cmp	r6, #0
 800525a:	f000 81ef 	beq.w	800563c <HAL_DMA_Abort+0x3ec>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800525e:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
 8005262:	2b02      	cmp	r3, #2
 8005264:	f040 81d9 	bne.w	800561a <HAL_DMA_Abort+0x3ca>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005268:	6832      	ldr	r2, [r6, #0]
 800526a:	4604      	mov	r4, r0
 800526c:	4b6e      	ldr	r3, [pc, #440]	; (8005428 <HAL_DMA_Abort+0x1d8>)
 800526e:	496f      	ldr	r1, [pc, #444]	; (800542c <HAL_DMA_Abort+0x1dc>)
 8005270:	428a      	cmp	r2, r1
 8005272:	bf18      	it	ne
 8005274:	429a      	cmpne	r2, r3
 8005276:	f101 0118 	add.w	r1, r1, #24
 800527a:	bf0c      	ite	eq
 800527c:	2301      	moveq	r3, #1
 800527e:	2300      	movne	r3, #0
 8005280:	428a      	cmp	r2, r1
 8005282:	bf08      	it	eq
 8005284:	f043 0301 	orreq.w	r3, r3, #1
 8005288:	3118      	adds	r1, #24
 800528a:	428a      	cmp	r2, r1
 800528c:	bf08      	it	eq
 800528e:	f043 0301 	orreq.w	r3, r3, #1
 8005292:	3118      	adds	r1, #24
 8005294:	428a      	cmp	r2, r1
 8005296:	bf08      	it	eq
 8005298:	f043 0301 	orreq.w	r3, r3, #1
 800529c:	3118      	adds	r1, #24
 800529e:	428a      	cmp	r2, r1
 80052a0:	bf08      	it	eq
 80052a2:	f043 0301 	orreq.w	r3, r3, #1
 80052a6:	3118      	adds	r1, #24
 80052a8:	428a      	cmp	r2, r1
 80052aa:	bf08      	it	eq
 80052ac:	f043 0301 	orreq.w	r3, r3, #1
 80052b0:	3118      	adds	r1, #24
 80052b2:	428a      	cmp	r2, r1
 80052b4:	bf08      	it	eq
 80052b6:	f043 0301 	orreq.w	r3, r3, #1
 80052ba:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80052be:	428a      	cmp	r2, r1
 80052c0:	bf08      	it	eq
 80052c2:	f043 0301 	orreq.w	r3, r3, #1
 80052c6:	3118      	adds	r1, #24
 80052c8:	428a      	cmp	r2, r1
 80052ca:	bf08      	it	eq
 80052cc:	f043 0301 	orreq.w	r3, r3, #1
 80052d0:	3118      	adds	r1, #24
 80052d2:	428a      	cmp	r2, r1
 80052d4:	bf08      	it	eq
 80052d6:	f043 0301 	orreq.w	r3, r3, #1
 80052da:	3118      	adds	r1, #24
 80052dc:	428a      	cmp	r2, r1
 80052de:	bf08      	it	eq
 80052e0:	f043 0301 	orreq.w	r3, r3, #1
 80052e4:	3118      	adds	r1, #24
 80052e6:	428a      	cmp	r2, r1
 80052e8:	bf08      	it	eq
 80052ea:	f043 0301 	orreq.w	r3, r3, #1
 80052ee:	3118      	adds	r1, #24
 80052f0:	428a      	cmp	r2, r1
 80052f2:	bf08      	it	eq
 80052f4:	f043 0301 	orreq.w	r3, r3, #1
 80052f8:	3118      	adds	r1, #24
 80052fa:	428a      	cmp	r2, r1
 80052fc:	bf08      	it	eq
 80052fe:	f043 0301 	orreq.w	r3, r3, #1
 8005302:	b91b      	cbnz	r3, 800530c <HAL_DMA_Abort+0xbc>
 8005304:	4b4a      	ldr	r3, [pc, #296]	; (8005430 <HAL_DMA_Abort+0x1e0>)
 8005306:	429a      	cmp	r2, r3
 8005308:	f040 81a2 	bne.w	8005650 <HAL_DMA_Abort+0x400>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800530c:	6813      	ldr	r3, [r2, #0]
 800530e:	f023 031e 	bic.w	r3, r3, #30
 8005312:	6013      	str	r3, [r2, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005314:	6832      	ldr	r2, [r6, #0]
 8005316:	6953      	ldr	r3, [r2, #20]
 8005318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800531c:	6153      	str	r3, [r2, #20]
      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800531e:	6832      	ldr	r2, [r6, #0]
 8005320:	4615      	mov	r5, r2
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005322:	4b41      	ldr	r3, [pc, #260]	; (8005428 <HAL_DMA_Abort+0x1d8>)
 8005324:	4941      	ldr	r1, [pc, #260]	; (800542c <HAL_DMA_Abort+0x1dc>)
 8005326:	428a      	cmp	r2, r1
 8005328:	bf18      	it	ne
 800532a:	429a      	cmpne	r2, r3
 800532c:	f101 0118 	add.w	r1, r1, #24
 8005330:	bf0c      	ite	eq
 8005332:	2301      	moveq	r3, #1
 8005334:	2300      	movne	r3, #0
 8005336:	428a      	cmp	r2, r1
 8005338:	bf08      	it	eq
 800533a:	f043 0301 	orreq.w	r3, r3, #1
 800533e:	3118      	adds	r1, #24
 8005340:	428a      	cmp	r2, r1
 8005342:	bf08      	it	eq
 8005344:	f043 0301 	orreq.w	r3, r3, #1
 8005348:	3118      	adds	r1, #24
 800534a:	428a      	cmp	r2, r1
 800534c:	bf08      	it	eq
 800534e:	f043 0301 	orreq.w	r3, r3, #1
 8005352:	3118      	adds	r1, #24
 8005354:	428a      	cmp	r2, r1
 8005356:	bf08      	it	eq
 8005358:	f043 0301 	orreq.w	r3, r3, #1
 800535c:	3118      	adds	r1, #24
 800535e:	428a      	cmp	r2, r1
 8005360:	bf08      	it	eq
 8005362:	f043 0301 	orreq.w	r3, r3, #1
 8005366:	3118      	adds	r1, #24
 8005368:	428a      	cmp	r2, r1
 800536a:	bf08      	it	eq
 800536c:	f043 0301 	orreq.w	r3, r3, #1
 8005370:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8005374:	428a      	cmp	r2, r1
 8005376:	bf08      	it	eq
 8005378:	f043 0301 	orreq.w	r3, r3, #1
 800537c:	3118      	adds	r1, #24
 800537e:	428a      	cmp	r2, r1
 8005380:	bf08      	it	eq
 8005382:	f043 0301 	orreq.w	r3, r3, #1
 8005386:	3118      	adds	r1, #24
 8005388:	428a      	cmp	r2, r1
 800538a:	bf08      	it	eq
 800538c:	f043 0301 	orreq.w	r3, r3, #1
 8005390:	3118      	adds	r1, #24
 8005392:	428a      	cmp	r2, r1
 8005394:	bf08      	it	eq
 8005396:	f043 0301 	orreq.w	r3, r3, #1
 800539a:	3118      	adds	r1, #24
 800539c:	428a      	cmp	r2, r1
 800539e:	bf08      	it	eq
 80053a0:	f043 0301 	orreq.w	r3, r3, #1
 80053a4:	3118      	adds	r1, #24
 80053a6:	428a      	cmp	r2, r1
 80053a8:	bf08      	it	eq
 80053aa:	f043 0301 	orreq.w	r3, r3, #1
 80053ae:	3118      	adds	r1, #24
 80053b0:	428a      	cmp	r2, r1
 80053b2:	bf08      	it	eq
 80053b4:	f043 0301 	orreq.w	r3, r3, #1
 80053b8:	3118      	adds	r1, #24
 80053ba:	428a      	cmp	r2, r1
 80053bc:	bf08      	it	eq
 80053be:	f043 0301 	orreq.w	r3, r3, #1
 80053c2:	491c      	ldr	r1, [pc, #112]	; (8005434 <HAL_DMA_Abort+0x1e4>)
 80053c4:	428a      	cmp	r2, r1
 80053c6:	bf08      	it	eq
 80053c8:	f043 0301 	orreq.w	r3, r3, #1
 80053cc:	3114      	adds	r1, #20
 80053ce:	428a      	cmp	r2, r1
 80053d0:	bf08      	it	eq
 80053d2:	f043 0301 	orreq.w	r3, r3, #1
 80053d6:	3114      	adds	r1, #20
 80053d8:	428a      	cmp	r2, r1
 80053da:	bf08      	it	eq
 80053dc:	f043 0301 	orreq.w	r3, r3, #1
 80053e0:	3114      	adds	r1, #20
 80053e2:	428a      	cmp	r2, r1
 80053e4:	bf08      	it	eq
 80053e6:	f043 0301 	orreq.w	r3, r3, #1
 80053ea:	3114      	adds	r1, #20
 80053ec:	428a      	cmp	r2, r1
 80053ee:	bf08      	it	eq
 80053f0:	f043 0301 	orreq.w	r3, r3, #1
 80053f4:	3114      	adds	r1, #20
 80053f6:	428a      	cmp	r2, r1
 80053f8:	bf08      	it	eq
 80053fa:	f043 0301 	orreq.w	r3, r3, #1
 80053fe:	3114      	adds	r1, #20
 8005400:	428a      	cmp	r2, r1
 8005402:	bf08      	it	eq
 8005404:	f043 0301 	orreq.w	r3, r3, #1
 8005408:	b913      	cbnz	r3, 8005410 <HAL_DMA_Abort+0x1c0>
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <HAL_DMA_Abort+0x1e8>)
 800540c:	429a      	cmp	r2, r3
 800540e:	d105      	bne.n	800541c <HAL_DMA_Abort+0x1cc>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005410:	6e32      	ldr	r2, [r6, #96]	; 0x60
 8005412:	6813      	ldr	r3, [r2, #0]
 8005414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	6832      	ldr	r2, [r6, #0]
    __HAL_DMA_DISABLE(hdma);
 800541c:	6813      	ldr	r3, [r2, #0]
 800541e:	f023 0301 	bic.w	r3, r3, #1
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	e010      	b.n	8005448 <HAL_DMA_Abort+0x1f8>
 8005426:	bf00      	nop
 8005428:	40020010 	.word	0x40020010
 800542c:	40020028 	.word	0x40020028
 8005430:	400204b8 	.word	0x400204b8
 8005434:	58025408 	.word	0x58025408
 8005438:	58025494 	.word	0x58025494
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800543c:	f7ff f816 	bl	800446c <HAL_GetTick>
 8005440:	1b00      	subs	r0, r0, r4
 8005442:	2805      	cmp	r0, #5
 8005444:	f200 80f0 	bhi.w	8005628 <HAL_DMA_Abort+0x3d8>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	07db      	lsls	r3, r3, #31
 800544c:	d4f6      	bmi.n	800543c <HAL_DMA_Abort+0x1ec>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800544e:	6832      	ldr	r2, [r6, #0]
 8005450:	4b83      	ldr	r3, [pc, #524]	; (8005660 <HAL_DMA_Abort+0x410>)
 8005452:	4884      	ldr	r0, [pc, #528]	; (8005664 <HAL_DMA_Abort+0x414>)
 8005454:	4984      	ldr	r1, [pc, #528]	; (8005668 <HAL_DMA_Abort+0x418>)
 8005456:	4282      	cmp	r2, r0
 8005458:	bf18      	it	ne
 800545a:	429a      	cmpne	r2, r3
 800545c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005460:	bf0c      	ite	eq
 8005462:	2301      	moveq	r3, #1
 8005464:	2300      	movne	r3, #0
 8005466:	428a      	cmp	r2, r1
 8005468:	bf08      	it	eq
 800546a:	f043 0301 	orreq.w	r3, r3, #1
 800546e:	3130      	adds	r1, #48	; 0x30
 8005470:	4282      	cmp	r2, r0
 8005472:	bf08      	it	eq
 8005474:	f043 0301 	orreq.w	r3, r3, #1
 8005478:	3030      	adds	r0, #48	; 0x30
 800547a:	428a      	cmp	r2, r1
 800547c:	bf08      	it	eq
 800547e:	f043 0301 	orreq.w	r3, r3, #1
 8005482:	3130      	adds	r1, #48	; 0x30
 8005484:	4282      	cmp	r2, r0
 8005486:	bf08      	it	eq
 8005488:	f043 0301 	orreq.w	r3, r3, #1
 800548c:	3030      	adds	r0, #48	; 0x30
 800548e:	428a      	cmp	r2, r1
 8005490:	bf08      	it	eq
 8005492:	f043 0301 	orreq.w	r3, r3, #1
 8005496:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800549a:	4282      	cmp	r2, r0
 800549c:	bf08      	it	eq
 800549e:	f043 0301 	orreq.w	r3, r3, #1
 80054a2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80054a6:	428a      	cmp	r2, r1
 80054a8:	bf08      	it	eq
 80054aa:	f043 0301 	orreq.w	r3, r3, #1
 80054ae:	3130      	adds	r1, #48	; 0x30
 80054b0:	4282      	cmp	r2, r0
 80054b2:	bf08      	it	eq
 80054b4:	f043 0301 	orreq.w	r3, r3, #1
 80054b8:	3030      	adds	r0, #48	; 0x30
 80054ba:	428a      	cmp	r2, r1
 80054bc:	bf08      	it	eq
 80054be:	f043 0301 	orreq.w	r3, r3, #1
 80054c2:	3130      	adds	r1, #48	; 0x30
 80054c4:	4282      	cmp	r2, r0
 80054c6:	bf08      	it	eq
 80054c8:	f043 0301 	orreq.w	r3, r3, #1
 80054cc:	3030      	adds	r0, #48	; 0x30
 80054ce:	428a      	cmp	r2, r1
 80054d0:	bf08      	it	eq
 80054d2:	f043 0301 	orreq.w	r3, r3, #1
 80054d6:	3130      	adds	r1, #48	; 0x30
 80054d8:	4282      	cmp	r2, r0
 80054da:	bf08      	it	eq
 80054dc:	f043 0301 	orreq.w	r3, r3, #1
 80054e0:	428a      	cmp	r2, r1
 80054e2:	bf08      	it	eq
 80054e4:	f043 0301 	orreq.w	r3, r3, #1
 80054e8:	b91b      	cbnz	r3, 80054f2 <HAL_DMA_Abort+0x2a2>
 80054ea:	4b60      	ldr	r3, [pc, #384]	; (800566c <HAL_DMA_Abort+0x41c>)
 80054ec:	429a      	cmp	r2, r3
 80054ee:	f040 80a7 	bne.w	8005640 <HAL_DMA_Abort+0x3f0>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054f2:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 80054f4:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054f6:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80054f8:	f002 021f 	and.w	r2, r2, #31
 80054fc:	4093      	lsls	r3, r2
 80054fe:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005500:	6832      	ldr	r2, [r6, #0]
 8005502:	4b57      	ldr	r3, [pc, #348]	; (8005660 <HAL_DMA_Abort+0x410>)
 8005504:	4857      	ldr	r0, [pc, #348]	; (8005664 <HAL_DMA_Abort+0x414>)
 8005506:	4958      	ldr	r1, [pc, #352]	; (8005668 <HAL_DMA_Abort+0x418>)
 8005508:	4282      	cmp	r2, r0
 800550a:	bf18      	it	ne
 800550c:	429a      	cmpne	r2, r3
 800550e:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005512:	bf0c      	ite	eq
 8005514:	2301      	moveq	r3, #1
 8005516:	2300      	movne	r3, #0
 8005518:	428a      	cmp	r2, r1
 800551a:	bf08      	it	eq
 800551c:	f043 0301 	orreq.w	r3, r3, #1
 8005520:	3130      	adds	r1, #48	; 0x30
 8005522:	4282      	cmp	r2, r0
 8005524:	bf08      	it	eq
 8005526:	f043 0301 	orreq.w	r3, r3, #1
 800552a:	3030      	adds	r0, #48	; 0x30
 800552c:	428a      	cmp	r2, r1
 800552e:	bf08      	it	eq
 8005530:	f043 0301 	orreq.w	r3, r3, #1
 8005534:	3130      	adds	r1, #48	; 0x30
 8005536:	4282      	cmp	r2, r0
 8005538:	bf08      	it	eq
 800553a:	f043 0301 	orreq.w	r3, r3, #1
 800553e:	3030      	adds	r0, #48	; 0x30
 8005540:	428a      	cmp	r2, r1
 8005542:	bf08      	it	eq
 8005544:	f043 0301 	orreq.w	r3, r3, #1
 8005548:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800554c:	4282      	cmp	r2, r0
 800554e:	bf08      	it	eq
 8005550:	f043 0301 	orreq.w	r3, r3, #1
 8005554:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005558:	428a      	cmp	r2, r1
 800555a:	bf08      	it	eq
 800555c:	f043 0301 	orreq.w	r3, r3, #1
 8005560:	3130      	adds	r1, #48	; 0x30
 8005562:	4282      	cmp	r2, r0
 8005564:	bf08      	it	eq
 8005566:	f043 0301 	orreq.w	r3, r3, #1
 800556a:	3030      	adds	r0, #48	; 0x30
 800556c:	428a      	cmp	r2, r1
 800556e:	bf08      	it	eq
 8005570:	f043 0301 	orreq.w	r3, r3, #1
 8005574:	3130      	adds	r1, #48	; 0x30
 8005576:	4282      	cmp	r2, r0
 8005578:	bf08      	it	eq
 800557a:	f043 0301 	orreq.w	r3, r3, #1
 800557e:	3030      	adds	r0, #48	; 0x30
 8005580:	428a      	cmp	r2, r1
 8005582:	bf08      	it	eq
 8005584:	f043 0301 	orreq.w	r3, r3, #1
 8005588:	3130      	adds	r1, #48	; 0x30
 800558a:	4282      	cmp	r2, r0
 800558c:	bf08      	it	eq
 800558e:	f043 0301 	orreq.w	r3, r3, #1
 8005592:	3030      	adds	r0, #48	; 0x30
 8005594:	428a      	cmp	r2, r1
 8005596:	bf08      	it	eq
 8005598:	f043 0301 	orreq.w	r3, r3, #1
 800559c:	4934      	ldr	r1, [pc, #208]	; (8005670 <HAL_DMA_Abort+0x420>)
 800559e:	4282      	cmp	r2, r0
 80055a0:	bf08      	it	eq
 80055a2:	f043 0301 	orreq.w	r3, r3, #1
 80055a6:	4833      	ldr	r0, [pc, #204]	; (8005674 <HAL_DMA_Abort+0x424>)
 80055a8:	428a      	cmp	r2, r1
 80055aa:	bf08      	it	eq
 80055ac:	f043 0301 	orreq.w	r3, r3, #1
 80055b0:	3128      	adds	r1, #40	; 0x28
 80055b2:	4282      	cmp	r2, r0
 80055b4:	bf08      	it	eq
 80055b6:	f043 0301 	orreq.w	r3, r3, #1
 80055ba:	3028      	adds	r0, #40	; 0x28
 80055bc:	428a      	cmp	r2, r1
 80055be:	bf08      	it	eq
 80055c0:	f043 0301 	orreq.w	r3, r3, #1
 80055c4:	3128      	adds	r1, #40	; 0x28
 80055c6:	4282      	cmp	r2, r0
 80055c8:	bf08      	it	eq
 80055ca:	f043 0301 	orreq.w	r3, r3, #1
 80055ce:	3028      	adds	r0, #40	; 0x28
 80055d0:	428a      	cmp	r2, r1
 80055d2:	bf08      	it	eq
 80055d4:	f043 0301 	orreq.w	r3, r3, #1
 80055d8:	3128      	adds	r1, #40	; 0x28
 80055da:	4282      	cmp	r2, r0
 80055dc:	bf08      	it	eq
 80055de:	f043 0301 	orreq.w	r3, r3, #1
 80055e2:	428a      	cmp	r2, r1
 80055e4:	bf08      	it	eq
 80055e6:	f043 0301 	orreq.w	r3, r3, #1
 80055ea:	b913      	cbnz	r3, 80055f2 <HAL_DMA_Abort+0x3a2>
 80055ec:	4b22      	ldr	r3, [pc, #136]	; (8005678 <HAL_DMA_Abort+0x428>)
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d10b      	bne.n	800560a <HAL_DMA_Abort+0x3ba>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80055f2:	e9d6 3219 	ldrd	r3, r2, [r6, #100]	; 0x64
 80055f6:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80055f8:	6ef3      	ldr	r3, [r6, #108]	; 0x6c
 80055fa:	b133      	cbz	r3, 800560a <HAL_DMA_Abort+0x3ba>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005602:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005604:	e9d6 321c 	ldrd	r3, r2, [r6, #112]	; 0x70
 8005608:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hdma);
 800560a:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
 800560c:	2201      	movs	r2, #1
  return HAL_OK;
 800560e:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
 8005610:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005614:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8005618:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800561a:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 800561c:	2300      	movs	r3, #0
    return HAL_ERROR;
 800561e:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005620:	6572      	str	r2, [r6, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8005622:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
}
 8005626:	bd70      	pop	{r4, r5, r6, pc}
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005628:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800562a:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
 800562c:	2300      	movs	r3, #0
        return HAL_ERROR;
 800562e:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005630:	6571      	str	r1, [r6, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005632:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
 8005636:	f886 2035 	strb.w	r2, [r6, #53]	; 0x35
}
 800563a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800563c:	2001      	movs	r0, #1
}
 800563e:	bd70      	pop	{r4, r5, r6, pc}
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005640:	6df2      	ldr	r2, [r6, #92]	; 0x5c
 8005642:	2301      	movs	r3, #1
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005644:	6db1      	ldr	r1, [r6, #88]	; 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005646:	f002 021f 	and.w	r2, r2, #31
 800564a:	4093      	lsls	r3, r2
 800564c:	604b      	str	r3, [r1, #4]
 800564e:	e757      	b.n	8005500 <HAL_DMA_Abort+0x2b0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005650:	6813      	ldr	r3, [r2, #0]
 8005652:	f023 030e 	bic.w	r3, r3, #14
 8005656:	6013      	str	r3, [r2, #0]
      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8005658:	6832      	ldr	r2, [r6, #0]
 800565a:	4615      	mov	r5, r2
 800565c:	e661      	b.n	8005322 <HAL_DMA_Abort+0xd2>
 800565e:	bf00      	nop
 8005660:	40020010 	.word	0x40020010
 8005664:	40020028 	.word	0x40020028
 8005668:	40020040 	.word	0x40020040
 800566c:	400204b8 	.word	0x400204b8
 8005670:	58025408 	.word	0x58025408
 8005674:	5802541c 	.word	0x5802541c
 8005678:	58025494 	.word	0x58025494

0800567c <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 800567c:	2800      	cmp	r0, #0
 800567e:	d065      	beq.n	800574c <HAL_DMA_Abort_IT+0xd0>
{
 8005680:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005684:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8005688:	4603      	mov	r3, r0
 800568a:	2a02      	cmp	r2, #2
 800568c:	d159      	bne.n	8005742 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800568e:	6801      	ldr	r1, [r0, #0]
 8005690:	4883      	ldr	r0, [pc, #524]	; (80058a0 <HAL_DMA_Abort_IT+0x224>)
 8005692:	4281      	cmp	r1, r0
 8005694:	d04b      	beq.n	800572e <HAL_DMA_Abort_IT+0xb2>
 8005696:	4c83      	ldr	r4, [pc, #524]	; (80058a4 <HAL_DMA_Abort_IT+0x228>)
 8005698:	42a1      	cmp	r1, r4
 800569a:	d048      	beq.n	800572e <HAL_DMA_Abort_IT+0xb2>
 800569c:	f8df a228 	ldr.w	sl, [pc, #552]	; 80058c8 <HAL_DMA_Abort_IT+0x24c>
 80056a0:	f8df b214 	ldr.w	fp, [pc, #532]	; 80058b8 <HAL_DMA_Abort_IT+0x23c>
 80056a4:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80058cc <HAL_DMA_Abort_IT+0x250>
 80056a8:	4559      	cmp	r1, fp
 80056aa:	bf18      	it	ne
 80056ac:	4551      	cmpne	r1, sl
 80056ae:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80058d0 <HAL_DMA_Abort_IT+0x254>
 80056b2:	f8df e220 	ldr.w	lr, [pc, #544]	; 80058d4 <HAL_DMA_Abort_IT+0x258>
 80056b6:	bf0c      	ite	eq
 80056b8:	2201      	moveq	r2, #1
 80056ba:	2200      	movne	r2, #0
 80056bc:	f8df c218 	ldr.w	ip, [pc, #536]	; 80058d8 <HAL_DMA_Abort_IT+0x25c>
 80056c0:	4549      	cmp	r1, r9
 80056c2:	bf08      	it	eq
 80056c4:	f042 0201 	orreq.w	r2, r2, #1
 80056c8:	4d77      	ldr	r5, [pc, #476]	; (80058a8 <HAL_DMA_Abort_IT+0x22c>)
 80056ca:	4f78      	ldr	r7, [pc, #480]	; (80058ac <HAL_DMA_Abort_IT+0x230>)
 80056cc:	4541      	cmp	r1, r8
 80056ce:	bf08      	it	eq
 80056d0:	f042 0201 	orreq.w	r2, r2, #1
 80056d4:	4e76      	ldr	r6, [pc, #472]	; (80058b0 <HAL_DMA_Abort_IT+0x234>)
 80056d6:	4571      	cmp	r1, lr
 80056d8:	bf08      	it	eq
 80056da:	f042 0201 	orreq.w	r2, r2, #1
 80056de:	4561      	cmp	r1, ip
 80056e0:	bf08      	it	eq
 80056e2:	f042 0201 	orreq.w	r2, r2, #1
 80056e6:	42a9      	cmp	r1, r5
 80056e8:	bf08      	it	eq
 80056ea:	f042 0201 	orreq.w	r2, r2, #1
 80056ee:	3518      	adds	r5, #24
 80056f0:	42a9      	cmp	r1, r5
 80056f2:	bf08      	it	eq
 80056f4:	f042 0201 	orreq.w	r2, r2, #1
 80056f8:	3518      	adds	r5, #24
 80056fa:	42a9      	cmp	r1, r5
 80056fc:	bf08      	it	eq
 80056fe:	f042 0201 	orreq.w	r2, r2, #1
 8005702:	3518      	adds	r5, #24
 8005704:	42a9      	cmp	r1, r5
 8005706:	bf08      	it	eq
 8005708:	f042 0201 	orreq.w	r2, r2, #1
 800570c:	3548      	adds	r5, #72	; 0x48
 800570e:	42b9      	cmp	r1, r7
 8005710:	bf08      	it	eq
 8005712:	f042 0201 	orreq.w	r2, r2, #1
 8005716:	42b1      	cmp	r1, r6
 8005718:	bf08      	it	eq
 800571a:	f042 0201 	orreq.w	r2, r2, #1
 800571e:	42a9      	cmp	r1, r5
 8005720:	bf08      	it	eq
 8005722:	f042 0201 	orreq.w	r2, r2, #1
 8005726:	b912      	cbnz	r2, 800572e <HAL_DMA_Abort_IT+0xb2>
 8005728:	4a62      	ldr	r2, [pc, #392]	; (80058b4 <HAL_DMA_Abort_IT+0x238>)
 800572a:	4291      	cmp	r1, r2
 800572c:	d110      	bne.n	8005750 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 800572e:	2204      	movs	r2, #4
  return HAL_OK;
 8005730:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8005732:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8005736:	680b      	ldr	r3, [r1, #0]
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	600b      	str	r3, [r1, #0]
}
 800573e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005742:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8005744:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005746:	655a      	str	r2, [r3, #84]	; 0x54
}
 8005748:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 800574c:	2001      	movs	r0, #1
}
 800574e:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005750:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005752:	4c54      	ldr	r4, [pc, #336]	; (80058a4 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005754:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005758:	4857      	ldr	r0, [pc, #348]	; (80058b8 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800575a:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 800575c:	6819      	ldr	r1, [r3, #0]
 800575e:	680a      	ldr	r2, [r1, #0]
 8005760:	f022 0201 	bic.w	r2, r2, #1
 8005764:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005766:	4a4e      	ldr	r2, [pc, #312]	; (80058a0 <HAL_DMA_Abort_IT+0x224>)
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	42a1      	cmp	r1, r4
 800576c:	bf18      	it	ne
 800576e:	4291      	cmpne	r1, r2
 8005770:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8005774:	bf0c      	ite	eq
 8005776:	2201      	moveq	r2, #1
 8005778:	2200      	movne	r2, #0
 800577a:	4281      	cmp	r1, r0
 800577c:	bf08      	it	eq
 800577e:	f042 0201 	orreq.w	r2, r2, #1
 8005782:	3030      	adds	r0, #48	; 0x30
 8005784:	42a1      	cmp	r1, r4
 8005786:	bf08      	it	eq
 8005788:	f042 0201 	orreq.w	r2, r2, #1
 800578c:	3430      	adds	r4, #48	; 0x30
 800578e:	4281      	cmp	r1, r0
 8005790:	bf08      	it	eq
 8005792:	f042 0201 	orreq.w	r2, r2, #1
 8005796:	3030      	adds	r0, #48	; 0x30
 8005798:	42a1      	cmp	r1, r4
 800579a:	bf08      	it	eq
 800579c:	f042 0201 	orreq.w	r2, r2, #1
 80057a0:	3430      	adds	r4, #48	; 0x30
 80057a2:	4281      	cmp	r1, r0
 80057a4:	bf08      	it	eq
 80057a6:	f042 0201 	orreq.w	r2, r2, #1
 80057aa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80057ae:	42a1      	cmp	r1, r4
 80057b0:	bf08      	it	eq
 80057b2:	f042 0201 	orreq.w	r2, r2, #1
 80057b6:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80057ba:	4281      	cmp	r1, r0
 80057bc:	bf08      	it	eq
 80057be:	f042 0201 	orreq.w	r2, r2, #1
 80057c2:	3030      	adds	r0, #48	; 0x30
 80057c4:	42a1      	cmp	r1, r4
 80057c6:	bf08      	it	eq
 80057c8:	f042 0201 	orreq.w	r2, r2, #1
 80057cc:	3430      	adds	r4, #48	; 0x30
 80057ce:	4281      	cmp	r1, r0
 80057d0:	bf08      	it	eq
 80057d2:	f042 0201 	orreq.w	r2, r2, #1
 80057d6:	3030      	adds	r0, #48	; 0x30
 80057d8:	42a1      	cmp	r1, r4
 80057da:	bf08      	it	eq
 80057dc:	f042 0201 	orreq.w	r2, r2, #1
 80057e0:	3430      	adds	r4, #48	; 0x30
 80057e2:	4281      	cmp	r1, r0
 80057e4:	bf08      	it	eq
 80057e6:	f042 0201 	orreq.w	r2, r2, #1
 80057ea:	3030      	adds	r0, #48	; 0x30
 80057ec:	42a1      	cmp	r1, r4
 80057ee:	bf08      	it	eq
 80057f0:	f042 0201 	orreq.w	r2, r2, #1
 80057f4:	3430      	adds	r4, #48	; 0x30
 80057f6:	4281      	cmp	r1, r0
 80057f8:	bf08      	it	eq
 80057fa:	f042 0201 	orreq.w	r2, r2, #1
 80057fe:	482f      	ldr	r0, [pc, #188]	; (80058bc <HAL_DMA_Abort_IT+0x240>)
 8005800:	42a1      	cmp	r1, r4
 8005802:	bf08      	it	eq
 8005804:	f042 0201 	orreq.w	r2, r2, #1
 8005808:	4c2d      	ldr	r4, [pc, #180]	; (80058c0 <HAL_DMA_Abort_IT+0x244>)
 800580a:	4281      	cmp	r1, r0
 800580c:	bf08      	it	eq
 800580e:	f042 0201 	orreq.w	r2, r2, #1
 8005812:	3028      	adds	r0, #40	; 0x28
 8005814:	42a1      	cmp	r1, r4
 8005816:	bf08      	it	eq
 8005818:	f042 0201 	orreq.w	r2, r2, #1
 800581c:	3428      	adds	r4, #40	; 0x28
 800581e:	4281      	cmp	r1, r0
 8005820:	bf08      	it	eq
 8005822:	f042 0201 	orreq.w	r2, r2, #1
 8005826:	3028      	adds	r0, #40	; 0x28
 8005828:	42a1      	cmp	r1, r4
 800582a:	bf08      	it	eq
 800582c:	f042 0201 	orreq.w	r2, r2, #1
 8005830:	3428      	adds	r4, #40	; 0x28
 8005832:	4281      	cmp	r1, r0
 8005834:	bf08      	it	eq
 8005836:	f042 0201 	orreq.w	r2, r2, #1
 800583a:	3028      	adds	r0, #40	; 0x28
 800583c:	42a1      	cmp	r1, r4
 800583e:	bf08      	it	eq
 8005840:	f042 0201 	orreq.w	r2, r2, #1
 8005844:	4281      	cmp	r1, r0
 8005846:	bf08      	it	eq
 8005848:	f042 0201 	orreq.w	r2, r2, #1
 800584c:	b912      	cbnz	r2, 8005854 <HAL_DMA_Abort_IT+0x1d8>
 800584e:	4a1d      	ldr	r2, [pc, #116]	; (80058c4 <HAL_DMA_Abort_IT+0x248>)
 8005850:	4291      	cmp	r1, r2
 8005852:	d117      	bne.n	8005884 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005854:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005856:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005858:	6801      	ldr	r1, [r0, #0]
 800585a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800585e:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005860:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005864:	f001 011f 	and.w	r1, r1, #31
 8005868:	408a      	lsls	r2, r1
 800586a:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800586c:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8005870:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8005872:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005874:	b132      	cbz	r2, 8005884 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005876:	6811      	ldr	r1, [r2, #0]
 8005878:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800587c:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800587e:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8005882:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8005884:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8005886:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8005888:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 800588a:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 800588e:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8005892:	b11a      	cbz	r2, 800589c <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8005894:	4618      	mov	r0, r3
 8005896:	4790      	blx	r2
  return HAL_OK;
 8005898:	4620      	mov	r0, r4
 800589a:	e755      	b.n	8005748 <HAL_DMA_Abort_IT+0xcc>
 800589c:	4610      	mov	r0, r2
 800589e:	e753      	b.n	8005748 <HAL_DMA_Abort_IT+0xcc>
 80058a0:	40020010 	.word	0x40020010
 80058a4:	40020028 	.word	0x40020028
 80058a8:	40020410 	.word	0x40020410
 80058ac:	40020470 	.word	0x40020470
 80058b0:	40020488 	.word	0x40020488
 80058b4:	400204b8 	.word	0x400204b8
 80058b8:	40020040 	.word	0x40020040
 80058bc:	58025408 	.word	0x58025408
 80058c0:	5802541c 	.word	0x5802541c
 80058c4:	58025494 	.word	0x58025494
 80058c8:	40020058 	.word	0x40020058
 80058cc:	40020070 	.word	0x40020070
 80058d0:	40020088 	.word	0x40020088
 80058d4:	400200a0 	.word	0x400200a0
 80058d8:	400200b8 	.word	0x400200b8

080058dc <HAL_DMA_IRQHandler>:
{
 80058dc:	b5f0      	push	{r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80058de:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e0:	4b9a      	ldr	r3, [pc, #616]	; (8005b4c <HAL_DMA_IRQHandler+0x270>)
{
 80058e2:	b083      	sub	sp, #12
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058e4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e6:	681f      	ldr	r7, [r3, #0]
{
 80058e8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80058ea:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80058ec:	6803      	ldr	r3, [r0, #0]
 80058ee:	4a98      	ldr	r2, [pc, #608]	; (8005b50 <HAL_DMA_IRQHandler+0x274>)
  tmpisr_dma  = regs_dma->ISR;
 80058f0:	6835      	ldr	r5, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80058f2:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 80058f4:	6831      	ldr	r1, [r6, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80058f6:	d048      	beq.n	800598a <HAL_DMA_IRQHandler+0xae>
 80058f8:	3218      	adds	r2, #24
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d045      	beq.n	800598a <HAL_DMA_IRQHandler+0xae>
 80058fe:	3218      	adds	r2, #24
 8005900:	4894      	ldr	r0, [pc, #592]	; (8005b54 <HAL_DMA_IRQHandler+0x278>)
 8005902:	4283      	cmp	r3, r0
 8005904:	bf18      	it	ne
 8005906:	4293      	cmpne	r3, r2
 8005908:	f100 0018 	add.w	r0, r0, #24
 800590c:	bf0c      	ite	eq
 800590e:	2201      	moveq	r2, #1
 8005910:	2200      	movne	r2, #0
 8005912:	4283      	cmp	r3, r0
 8005914:	bf08      	it	eq
 8005916:	f042 0201 	orreq.w	r2, r2, #1
 800591a:	3018      	adds	r0, #24
 800591c:	4283      	cmp	r3, r0
 800591e:	bf08      	it	eq
 8005920:	f042 0201 	orreq.w	r2, r2, #1
 8005924:	3018      	adds	r0, #24
 8005926:	4283      	cmp	r3, r0
 8005928:	bf08      	it	eq
 800592a:	f042 0201 	orreq.w	r2, r2, #1
 800592e:	3018      	adds	r0, #24
 8005930:	4283      	cmp	r3, r0
 8005932:	bf08      	it	eq
 8005934:	f042 0201 	orreq.w	r2, r2, #1
 8005938:	f500 7056 	add.w	r0, r0, #856	; 0x358
 800593c:	4283      	cmp	r3, r0
 800593e:	bf08      	it	eq
 8005940:	f042 0201 	orreq.w	r2, r2, #1
 8005944:	3018      	adds	r0, #24
 8005946:	4283      	cmp	r3, r0
 8005948:	bf08      	it	eq
 800594a:	f042 0201 	orreq.w	r2, r2, #1
 800594e:	3018      	adds	r0, #24
 8005950:	4283      	cmp	r3, r0
 8005952:	bf08      	it	eq
 8005954:	f042 0201 	orreq.w	r2, r2, #1
 8005958:	3018      	adds	r0, #24
 800595a:	4283      	cmp	r3, r0
 800595c:	bf08      	it	eq
 800595e:	f042 0201 	orreq.w	r2, r2, #1
 8005962:	3018      	adds	r0, #24
 8005964:	4283      	cmp	r3, r0
 8005966:	bf08      	it	eq
 8005968:	f042 0201 	orreq.w	r2, r2, #1
 800596c:	3018      	adds	r0, #24
 800596e:	4283      	cmp	r3, r0
 8005970:	bf08      	it	eq
 8005972:	f042 0201 	orreq.w	r2, r2, #1
 8005976:	3018      	adds	r0, #24
 8005978:	4283      	cmp	r3, r0
 800597a:	bf08      	it	eq
 800597c:	f042 0201 	orreq.w	r2, r2, #1
 8005980:	b91a      	cbnz	r2, 800598a <HAL_DMA_IRQHandler+0xae>
 8005982:	4a75      	ldr	r2, [pc, #468]	; (8005b58 <HAL_DMA_IRQHandler+0x27c>)
 8005984:	4293      	cmp	r3, r2
 8005986:	f040 8294 	bne.w	8005eb2 <HAL_DMA_IRQHandler+0x5d6>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800598a:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
 800598e:	2208      	movs	r2, #8
 8005990:	f00e 011f 	and.w	r1, lr, #31
 8005994:	408a      	lsls	r2, r1
 8005996:	422a      	tst	r2, r5
 8005998:	f040 8193 	bne.w	8005cc2 <HAL_DMA_IRQHandler+0x3e6>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800599c:	fa25 f201 	lsr.w	r2, r5, r1
 80059a0:	07d2      	lsls	r2, r2, #31
 80059a2:	d50e      	bpl.n	80059c2 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80059a4:	695a      	ldr	r2, [r3, #20]
 80059a6:	0612      	lsls	r2, r2, #24
 80059a8:	f140 824d 	bpl.w	8005e46 <HAL_DMA_IRQHandler+0x56a>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80059ac:	2301      	movs	r3, #1
 80059ae:	408b      	lsls	r3, r1
 80059b0:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059b2:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059b4:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059b8:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059bc:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80059c0:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80059c2:	f04f 0c04 	mov.w	ip, #4
 80059c6:	fa0c fc01 	lsl.w	ip, ip, r1
 80059ca:	ea1c 0f05 	tst.w	ip, r5
 80059ce:	d05f      	beq.n	8005a90 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80059d0:	6822      	ldr	r2, [r4, #0]
 80059d2:	485f      	ldr	r0, [pc, #380]	; (8005b50 <HAL_DMA_IRQHandler+0x274>)
 80059d4:	4b61      	ldr	r3, [pc, #388]	; (8005b5c <HAL_DMA_IRQHandler+0x280>)
 80059d6:	429a      	cmp	r2, r3
 80059d8:	bf18      	it	ne
 80059da:	4282      	cmpne	r2, r0
 80059dc:	f103 0318 	add.w	r3, r3, #24
 80059e0:	bf0c      	ite	eq
 80059e2:	2001      	moveq	r0, #1
 80059e4:	2000      	movne	r0, #0
 80059e6:	429a      	cmp	r2, r3
 80059e8:	bf08      	it	eq
 80059ea:	f040 0001 	orreq.w	r0, r0, #1
 80059ee:	3318      	adds	r3, #24
 80059f0:	429a      	cmp	r2, r3
 80059f2:	bf08      	it	eq
 80059f4:	f040 0001 	orreq.w	r0, r0, #1
 80059f8:	3318      	adds	r3, #24
 80059fa:	429a      	cmp	r2, r3
 80059fc:	bf08      	it	eq
 80059fe:	f040 0001 	orreq.w	r0, r0, #1
 8005a02:	3318      	adds	r3, #24
 8005a04:	429a      	cmp	r2, r3
 8005a06:	bf08      	it	eq
 8005a08:	f040 0001 	orreq.w	r0, r0, #1
 8005a0c:	3318      	adds	r3, #24
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	bf08      	it	eq
 8005a12:	f040 0001 	orreq.w	r0, r0, #1
 8005a16:	3318      	adds	r3, #24
 8005a18:	429a      	cmp	r2, r3
 8005a1a:	bf08      	it	eq
 8005a1c:	f040 0001 	orreq.w	r0, r0, #1
 8005a20:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005a24:	429a      	cmp	r2, r3
 8005a26:	bf08      	it	eq
 8005a28:	f040 0001 	orreq.w	r0, r0, #1
 8005a2c:	3318      	adds	r3, #24
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	bf08      	it	eq
 8005a32:	f040 0001 	orreq.w	r0, r0, #1
 8005a36:	3318      	adds	r3, #24
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	bf08      	it	eq
 8005a3c:	f040 0001 	orreq.w	r0, r0, #1
 8005a40:	3318      	adds	r3, #24
 8005a42:	429a      	cmp	r2, r3
 8005a44:	bf08      	it	eq
 8005a46:	f040 0001 	orreq.w	r0, r0, #1
 8005a4a:	3318      	adds	r3, #24
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	bf08      	it	eq
 8005a50:	f040 0001 	orreq.w	r0, r0, #1
 8005a54:	3318      	adds	r3, #24
 8005a56:	429a      	cmp	r2, r3
 8005a58:	bf08      	it	eq
 8005a5a:	f040 0001 	orreq.w	r0, r0, #1
 8005a5e:	3318      	adds	r3, #24
 8005a60:	429a      	cmp	r2, r3
 8005a62:	bf08      	it	eq
 8005a64:	f040 0001 	orreq.w	r0, r0, #1
 8005a68:	4613      	mov	r3, r2
 8005a6a:	b918      	cbnz	r0, 8005a74 <HAL_DMA_IRQHandler+0x198>
 8005a6c:	483a      	ldr	r0, [pc, #232]	; (8005b58 <HAL_DMA_IRQHandler+0x27c>)
 8005a6e:	4282      	cmp	r2, r0
 8005a70:	f040 825a 	bne.w	8005f28 <HAL_DMA_IRQHandler+0x64c>
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	0790      	lsls	r0, r2, #30
 8005a78:	f140 81f1 	bpl.w	8005e5e <HAL_DMA_IRQHandler+0x582>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a7c:	f8c6 c008 	str.w	ip, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a80:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a82:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a86:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a8a:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005a8e:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a90:	f04f 0c10 	mov.w	ip, #16
 8005a94:	fa0c fc01 	lsl.w	ip, ip, r1
 8005a98:	ea1c 0f05 	tst.w	ip, r5
 8005a9c:	d075      	beq.n	8005b8a <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005a9e:	6822      	ldr	r2, [r4, #0]
 8005aa0:	482b      	ldr	r0, [pc, #172]	; (8005b50 <HAL_DMA_IRQHandler+0x274>)
 8005aa2:	4b2e      	ldr	r3, [pc, #184]	; (8005b5c <HAL_DMA_IRQHandler+0x280>)
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	bf18      	it	ne
 8005aa8:	4282      	cmpne	r2, r0
 8005aaa:	f103 0318 	add.w	r3, r3, #24
 8005aae:	bf0c      	ite	eq
 8005ab0:	2001      	moveq	r0, #1
 8005ab2:	2000      	movne	r0, #0
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	bf08      	it	eq
 8005ab8:	f040 0001 	orreq.w	r0, r0, #1
 8005abc:	3318      	adds	r3, #24
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	bf08      	it	eq
 8005ac2:	f040 0001 	orreq.w	r0, r0, #1
 8005ac6:	3318      	adds	r3, #24
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	bf08      	it	eq
 8005acc:	f040 0001 	orreq.w	r0, r0, #1
 8005ad0:	3318      	adds	r3, #24
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	bf08      	it	eq
 8005ad6:	f040 0001 	orreq.w	r0, r0, #1
 8005ada:	3318      	adds	r3, #24
 8005adc:	429a      	cmp	r2, r3
 8005ade:	bf08      	it	eq
 8005ae0:	f040 0001 	orreq.w	r0, r0, #1
 8005ae4:	3318      	adds	r3, #24
 8005ae6:	429a      	cmp	r2, r3
 8005ae8:	bf08      	it	eq
 8005aea:	f040 0001 	orreq.w	r0, r0, #1
 8005aee:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005af2:	429a      	cmp	r2, r3
 8005af4:	bf08      	it	eq
 8005af6:	f040 0001 	orreq.w	r0, r0, #1
 8005afa:	3318      	adds	r3, #24
 8005afc:	429a      	cmp	r2, r3
 8005afe:	bf08      	it	eq
 8005b00:	f040 0001 	orreq.w	r0, r0, #1
 8005b04:	3318      	adds	r3, #24
 8005b06:	429a      	cmp	r2, r3
 8005b08:	bf08      	it	eq
 8005b0a:	f040 0001 	orreq.w	r0, r0, #1
 8005b0e:	3318      	adds	r3, #24
 8005b10:	429a      	cmp	r2, r3
 8005b12:	bf08      	it	eq
 8005b14:	f040 0001 	orreq.w	r0, r0, #1
 8005b18:	3318      	adds	r3, #24
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	bf08      	it	eq
 8005b1e:	f040 0001 	orreq.w	r0, r0, #1
 8005b22:	3318      	adds	r3, #24
 8005b24:	429a      	cmp	r2, r3
 8005b26:	bf08      	it	eq
 8005b28:	f040 0001 	orreq.w	r0, r0, #1
 8005b2c:	3318      	adds	r3, #24
 8005b2e:	429a      	cmp	r2, r3
 8005b30:	bf08      	it	eq
 8005b32:	f040 0001 	orreq.w	r0, r0, #1
 8005b36:	4613      	mov	r3, r2
 8005b38:	b918      	cbnz	r0, 8005b42 <HAL_DMA_IRQHandler+0x266>
 8005b3a:	4807      	ldr	r0, [pc, #28]	; (8005b58 <HAL_DMA_IRQHandler+0x27c>)
 8005b3c:	4282      	cmp	r2, r0
 8005b3e:	f040 813c 	bne.w	8005dba <HAL_DMA_IRQHandler+0x4de>
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	0712      	lsls	r2, r2, #28
 8005b46:	f140 8177 	bpl.w	8005e38 <HAL_DMA_IRQHandler+0x55c>
 8005b4a:	e009      	b.n	8005b60 <HAL_DMA_IRQHandler+0x284>
 8005b4c:	200008bc 	.word	0x200008bc
 8005b50:	40020010 	.word	0x40020010
 8005b54:	40020058 	.word	0x40020058
 8005b58:	400204b8 	.word	0x400204b8
 8005b5c:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005b60:	f8c6 c008 	str.w	ip, [r6, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005b64:	6823      	ldr	r3, [r4, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	0350      	lsls	r0, r2, #13
 8005b6a:	f100 8181 	bmi.w	8005e70 <HAL_DMA_IRQHandler+0x594>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b6e:	681a      	ldr	r2, [r3, #0]
 8005b70:	05d2      	lsls	r2, r2, #23
 8005b72:	d403      	bmi.n	8005b7c <HAL_DMA_IRQHandler+0x2a0>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	f022 0208 	bic.w	r2, r2, #8
 8005b7a:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8005b7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b7e:	b10b      	cbz	r3, 8005b84 <HAL_DMA_IRQHandler+0x2a8>
            hdma->XferHalfCpltCallback(hdma);
 8005b80:	4620      	mov	r0, r4
 8005b82:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005b84:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005b86:	f001 011f 	and.w	r1, r1, #31
 8005b8a:	2320      	movs	r3, #32
 8005b8c:	fa03 f101 	lsl.w	r1, r3, r1
 8005b90:	4229      	tst	r1, r5
 8005b92:	d066      	beq.n	8005c62 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005b94:	6823      	ldr	r3, [r4, #0]
 8005b96:	4a92      	ldr	r2, [pc, #584]	; (8005de0 <HAL_DMA_IRQHandler+0x504>)
 8005b98:	4892      	ldr	r0, [pc, #584]	; (8005de4 <HAL_DMA_IRQHandler+0x508>)
 8005b9a:	4283      	cmp	r3, r0
 8005b9c:	bf18      	it	ne
 8005b9e:	4293      	cmpne	r3, r2
 8005ba0:	f100 0018 	add.w	r0, r0, #24
 8005ba4:	bf0c      	ite	eq
 8005ba6:	2201      	moveq	r2, #1
 8005ba8:	2200      	movne	r2, #0
 8005baa:	4283      	cmp	r3, r0
 8005bac:	bf08      	it	eq
 8005bae:	f042 0201 	orreq.w	r2, r2, #1
 8005bb2:	3018      	adds	r0, #24
 8005bb4:	4283      	cmp	r3, r0
 8005bb6:	bf08      	it	eq
 8005bb8:	f042 0201 	orreq.w	r2, r2, #1
 8005bbc:	3018      	adds	r0, #24
 8005bbe:	4283      	cmp	r3, r0
 8005bc0:	bf08      	it	eq
 8005bc2:	f042 0201 	orreq.w	r2, r2, #1
 8005bc6:	3018      	adds	r0, #24
 8005bc8:	4283      	cmp	r3, r0
 8005bca:	bf08      	it	eq
 8005bcc:	f042 0201 	orreq.w	r2, r2, #1
 8005bd0:	3018      	adds	r0, #24
 8005bd2:	4283      	cmp	r3, r0
 8005bd4:	bf08      	it	eq
 8005bd6:	f042 0201 	orreq.w	r2, r2, #1
 8005bda:	3018      	adds	r0, #24
 8005bdc:	4283      	cmp	r3, r0
 8005bde:	bf08      	it	eq
 8005be0:	f042 0201 	orreq.w	r2, r2, #1
 8005be4:	f500 7056 	add.w	r0, r0, #856	; 0x358
 8005be8:	4283      	cmp	r3, r0
 8005bea:	bf08      	it	eq
 8005bec:	f042 0201 	orreq.w	r2, r2, #1
 8005bf0:	3018      	adds	r0, #24
 8005bf2:	4283      	cmp	r3, r0
 8005bf4:	bf08      	it	eq
 8005bf6:	f042 0201 	orreq.w	r2, r2, #1
 8005bfa:	3018      	adds	r0, #24
 8005bfc:	4283      	cmp	r3, r0
 8005bfe:	bf08      	it	eq
 8005c00:	f042 0201 	orreq.w	r2, r2, #1
 8005c04:	3018      	adds	r0, #24
 8005c06:	4283      	cmp	r3, r0
 8005c08:	bf08      	it	eq
 8005c0a:	f042 0201 	orreq.w	r2, r2, #1
 8005c0e:	3018      	adds	r0, #24
 8005c10:	4283      	cmp	r3, r0
 8005c12:	bf08      	it	eq
 8005c14:	f042 0201 	orreq.w	r2, r2, #1
 8005c18:	3018      	adds	r0, #24
 8005c1a:	4283      	cmp	r3, r0
 8005c1c:	bf08      	it	eq
 8005c1e:	f042 0201 	orreq.w	r2, r2, #1
 8005c22:	3018      	adds	r0, #24
 8005c24:	4283      	cmp	r3, r0
 8005c26:	bf08      	it	eq
 8005c28:	f042 0201 	orreq.w	r2, r2, #1
 8005c2c:	b91a      	cbnz	r2, 8005c36 <HAL_DMA_IRQHandler+0x35a>
 8005c2e:	4a6e      	ldr	r2, [pc, #440]	; (8005de8 <HAL_DMA_IRQHandler+0x50c>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	f040 80cf 	bne.w	8005dd4 <HAL_DMA_IRQHandler+0x4f8>
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	06dd      	lsls	r5, r3, #27
 8005c3a:	d512      	bpl.n	8005c62 <HAL_DMA_IRQHandler+0x386>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005c3c:	60b1      	str	r1, [r6, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005c3e:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005c42:	2b04      	cmp	r3, #4
 8005c44:	f000 80d4 	beq.w	8005df0 <HAL_DMA_IRQHandler+0x514>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c48:	6823      	ldr	r3, [r4, #0]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	0352      	lsls	r2, r2, #13
 8005c4e:	f140 8118 	bpl.w	8005e82 <HAL_DMA_IRQHandler+0x5a6>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	031e      	lsls	r6, r3, #12
 8005c56:	f140 8123 	bpl.w	8005ea0 <HAL_DMA_IRQHandler+0x5c4>
          if(hdma->XferCpltCallback != NULL)
 8005c5a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005c5c:	b10b      	cbz	r3, 8005c62 <HAL_DMA_IRQHandler+0x386>
            hdma->XferCpltCallback(hdma);
 8005c5e:	4620      	mov	r0, r4
 8005c60:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005c62:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f000 80e5 	beq.w	8005e34 <HAL_DMA_IRQHandler+0x558>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005c6a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005c6c:	07dd      	lsls	r5, r3, #31
 8005c6e:	d51f      	bpl.n	8005cb0 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_DMA_DISABLE(hdma);
 8005c70:	6822      	ldr	r2, [r4, #0]
        hdma->State = HAL_DMA_STATE_ABORT;
 8005c72:	2104      	movs	r1, #4
 8005c74:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 8005c78:	6813      	ldr	r3, [r2, #0]
 8005c7a:	f023 0301 	bic.w	r3, r3, #1
 8005c7e:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c80:	4a5a      	ldr	r2, [pc, #360]	; (8005dec <HAL_DMA_IRQHandler+0x510>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c82:	6821      	ldr	r1, [r4, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c84:	fba2 7207 	umull	r7, r2, r2, r7
 8005c88:	0a92      	lsrs	r2, r2, #10
 8005c8a:	e002      	b.n	8005c92 <HAL_DMA_IRQHandler+0x3b6>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c8c:	680b      	ldr	r3, [r1, #0]
 8005c8e:	07d8      	lsls	r0, r3, #31
 8005c90:	d504      	bpl.n	8005c9c <HAL_DMA_IRQHandler+0x3c0>
          if (++count > timeout)
 8005c92:	9b01      	ldr	r3, [sp, #4]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4293      	cmp	r3, r2
 8005c98:	9301      	str	r3, [sp, #4]
 8005c9a:	d9f7      	bls.n	8005c8c <HAL_DMA_IRQHandler+0x3b0>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c9c:	680b      	ldr	r3, [r1, #0]
 8005c9e:	07db      	lsls	r3, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 8005ca0:	bf4c      	ite	mi
 8005ca2:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 8005ca4:	2301      	movpl	r3, #1
 8005ca6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8005caa:	2300      	movs	r3, #0
 8005cac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 8005cb0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f000 80be 	beq.w	8005e34 <HAL_DMA_IRQHandler+0x558>
        hdma->XferErrorCallback(hdma);
 8005cb8:	4620      	mov	r0, r4
}
 8005cba:	b003      	add	sp, #12
 8005cbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        hdma->XferErrorCallback(hdma);
 8005cc0:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005cc2:	681a      	ldr	r2, [r3, #0]
 8005cc4:	0752      	lsls	r2, r2, #29
 8005cc6:	d511      	bpl.n	8005cec <HAL_DMA_IRQHandler+0x410>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	f022 0204 	bic.w	r2, r2, #4
 8005cce:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005cd0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005cd2:	f003 021f 	and.w	r2, r3, #31
 8005cd6:	2308      	movs	r3, #8
 8005cd8:	4093      	lsls	r3, r2
 8005cda:	60b3      	str	r3, [r6, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cdc:	6d63      	ldr	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cde:	f8d4 e05c 	ldr.w	lr, [r4, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005ce2:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005ce6:	f00e 011f 	and.w	r1, lr, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005cea:	6563      	str	r3, [r4, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cec:	fa25 f301 	lsr.w	r3, r5, r1
 8005cf0:	07d8      	lsls	r0, r3, #31
 8005cf2:	f57f ae66 	bpl.w	80059c2 <HAL_DMA_IRQHandler+0xe6>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005cf6:	6822      	ldr	r2, [r4, #0]
 8005cf8:	4839      	ldr	r0, [pc, #228]	; (8005de0 <HAL_DMA_IRQHandler+0x504>)
 8005cfa:	4b3a      	ldr	r3, [pc, #232]	; (8005de4 <HAL_DMA_IRQHandler+0x508>)
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	bf18      	it	ne
 8005d00:	4282      	cmpne	r2, r0
 8005d02:	f103 0318 	add.w	r3, r3, #24
 8005d06:	bf0c      	ite	eq
 8005d08:	2001      	moveq	r0, #1
 8005d0a:	2000      	movne	r0, #0
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	bf08      	it	eq
 8005d10:	f040 0001 	orreq.w	r0, r0, #1
 8005d14:	3318      	adds	r3, #24
 8005d16:	429a      	cmp	r2, r3
 8005d18:	bf08      	it	eq
 8005d1a:	f040 0001 	orreq.w	r0, r0, #1
 8005d1e:	3318      	adds	r3, #24
 8005d20:	429a      	cmp	r2, r3
 8005d22:	bf08      	it	eq
 8005d24:	f040 0001 	orreq.w	r0, r0, #1
 8005d28:	3318      	adds	r3, #24
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	bf08      	it	eq
 8005d2e:	f040 0001 	orreq.w	r0, r0, #1
 8005d32:	3318      	adds	r3, #24
 8005d34:	429a      	cmp	r2, r3
 8005d36:	bf08      	it	eq
 8005d38:	f040 0001 	orreq.w	r0, r0, #1
 8005d3c:	3318      	adds	r3, #24
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	bf08      	it	eq
 8005d42:	f040 0001 	orreq.w	r0, r0, #1
 8005d46:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf08      	it	eq
 8005d4e:	f040 0001 	orreq.w	r0, r0, #1
 8005d52:	3318      	adds	r3, #24
 8005d54:	429a      	cmp	r2, r3
 8005d56:	bf08      	it	eq
 8005d58:	f040 0001 	orreq.w	r0, r0, #1
 8005d5c:	3318      	adds	r3, #24
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	bf08      	it	eq
 8005d62:	f040 0001 	orreq.w	r0, r0, #1
 8005d66:	3318      	adds	r3, #24
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	bf08      	it	eq
 8005d6c:	f040 0001 	orreq.w	r0, r0, #1
 8005d70:	3318      	adds	r3, #24
 8005d72:	429a      	cmp	r2, r3
 8005d74:	bf08      	it	eq
 8005d76:	f040 0001 	orreq.w	r0, r0, #1
 8005d7a:	3318      	adds	r3, #24
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	bf08      	it	eq
 8005d80:	f040 0001 	orreq.w	r0, r0, #1
 8005d84:	3318      	adds	r3, #24
 8005d86:	429a      	cmp	r2, r3
 8005d88:	bf08      	it	eq
 8005d8a:	f040 0001 	orreq.w	r0, r0, #1
 8005d8e:	4613      	mov	r3, r2
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f47f ae07 	bne.w	80059a4 <HAL_DMA_IRQHandler+0xc8>
 8005d96:	4814      	ldr	r0, [pc, #80]	; (8005de8 <HAL_DMA_IRQHandler+0x50c>)
 8005d98:	4282      	cmp	r2, r0
 8005d9a:	f43f ae03 	beq.w	80059a4 <HAL_DMA_IRQHandler+0xc8>
 8005d9e:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005da0:	2304      	movs	r3, #4
 8005da2:	408b      	lsls	r3, r1
 8005da4:	422b      	tst	r3, r5
 8005da6:	f040 80bf 	bne.w	8005f28 <HAL_DMA_IRQHandler+0x64c>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005daa:	f04f 0c10 	mov.w	ip, #16
 8005dae:	fa0c fc01 	lsl.w	ip, ip, r1
 8005db2:	ea15 0f0c 	tst.w	r5, ip
 8005db6:	f43f aee8 	beq.w	8005b8a <HAL_DMA_IRQHandler+0x2ae>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005dba:	6813      	ldr	r3, [r2, #0]
 8005dbc:	075b      	lsls	r3, r3, #29
 8005dbe:	f53f aecf 	bmi.w	8005b60 <HAL_DMA_IRQHandler+0x284>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dc2:	f00e 0e1f 	and.w	lr, lr, #31
 8005dc6:	2120      	movs	r1, #32
 8005dc8:	fa01 f10e 	lsl.w	r1, r1, lr
 8005dcc:	420d      	tst	r5, r1
 8005dce:	f43f af48 	beq.w	8005c62 <HAL_DMA_IRQHandler+0x386>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	0798      	lsls	r0, r3, #30
 8005dd8:	f57f af43 	bpl.w	8005c62 <HAL_DMA_IRQHandler+0x386>
 8005ddc:	e72e      	b.n	8005c3c <HAL_DMA_IRQHandler+0x360>
 8005dde:	bf00      	nop
 8005de0:	40020010 	.word	0x40020010
 8005de4:	40020028 	.word	0x40020028
 8005de8:	400204b8 	.word	0x400204b8
 8005dec:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	f023 0316 	bic.w	r3, r3, #22
 8005df8:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005dfa:	6822      	ldr	r2, [r4, #0]
 8005dfc:	6953      	ldr	r3, [r2, #20]
 8005dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e02:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d04f      	beq.n	8005eaa <HAL_DMA_IRQHandler+0x5ce>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005e0a:	6822      	ldr	r2, [r4, #0]
 8005e0c:	6813      	ldr	r3, [r2, #0]
 8005e0e:	f023 0308 	bic.w	r3, r3, #8
 8005e12:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e14:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8005e16:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 8005e18:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e1a:	f002 021f 	and.w	r2, r2, #31
 8005e1e:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 8005e20:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e22:	60b3      	str	r3, [r6, #8]
          if(hdma->XferAbortCallback != NULL)
 8005e24:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 8005e26:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8005e2a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	f47f af42 	bne.w	8005cb8 <HAL_DMA_IRQHandler+0x3dc>
}
 8005e34:	b003      	add	sp, #12
 8005e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e38:	2220      	movs	r2, #32
 8005e3a:	fa02 f101 	lsl.w	r1, r2, r1
 8005e3e:	420d      	tst	r5, r1
 8005e40:	f47f aef9 	bne.w	8005c36 <HAL_DMA_IRQHandler+0x35a>
 8005e44:	e70d      	b.n	8005c62 <HAL_DMA_IRQHandler+0x386>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e46:	f04f 0c04 	mov.w	ip, #4
 8005e4a:	fa0c fc01 	lsl.w	ip, ip, r1
 8005e4e:	ea15 0f0c 	tst.w	r5, ip
 8005e52:	f43f ae1d 	beq.w	8005a90 <HAL_DMA_IRQHandler+0x1b4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	0790      	lsls	r0, r2, #30
 8005e5a:	f53f ae0f 	bmi.w	8005a7c <HAL_DMA_IRQHandler+0x1a0>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e5e:	f04f 0c10 	mov.w	ip, #16
 8005e62:	fa0c fc01 	lsl.w	ip, ip, r1
 8005e66:	ea15 0f0c 	tst.w	r5, ip
 8005e6a:	f47f ae6a 	bne.w	8005b42 <HAL_DMA_IRQHandler+0x266>
 8005e6e:	e68c      	b.n	8005b8a <HAL_DMA_IRQHandler+0x2ae>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	0319      	lsls	r1, r3, #12
 8005e74:	f57f ae82 	bpl.w	8005b7c <HAL_DMA_IRQHandler+0x2a0>
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005e78:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	f47f ae80 	bne.w	8005b80 <HAL_DMA_IRQHandler+0x2a4>
 8005e80:	e680      	b.n	8005b84 <HAL_DMA_IRQHandler+0x2a8>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 8005e88:	f47f aee7 	bne.w	8005c5a <HAL_DMA_IRQHandler+0x37e>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005e8c:	6819      	ldr	r1, [r3, #0]
 8005e8e:	f021 0110 	bic.w	r1, r1, #16
 8005e92:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 8005e94:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 8005e96:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 8005e9a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 8005e9e:	e6dc      	b.n	8005c5a <HAL_DMA_IRQHandler+0x37e>
            if(hdma->XferM1CpltCallback != NULL)
 8005ea0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	f47f aedb 	bne.w	8005c5e <HAL_DMA_IRQHandler+0x382>
 8005ea8:	e6db      	b.n	8005c62 <HAL_DMA_IRQHandler+0x386>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005eaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ac      	bne.n	8005e0a <HAL_DMA_IRQHandler+0x52e>
 8005eb0:	e7b0      	b.n	8005e14 <HAL_DMA_IRQHandler+0x538>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005eb2:	4a9b      	ldr	r2, [pc, #620]	; (8006120 <HAL_DMA_IRQHandler+0x844>)
 8005eb4:	489b      	ldr	r0, [pc, #620]	; (8006124 <HAL_DMA_IRQHandler+0x848>)
 8005eb6:	4283      	cmp	r3, r0
 8005eb8:	bf18      	it	ne
 8005eba:	4293      	cmpne	r3, r2
 8005ebc:	f100 0014 	add.w	r0, r0, #20
 8005ec0:	bf0c      	ite	eq
 8005ec2:	2201      	moveq	r2, #1
 8005ec4:	2200      	movne	r2, #0
 8005ec6:	4283      	cmp	r3, r0
 8005ec8:	bf08      	it	eq
 8005eca:	f042 0201 	orreq.w	r2, r2, #1
 8005ece:	3014      	adds	r0, #20
 8005ed0:	4283      	cmp	r3, r0
 8005ed2:	bf08      	it	eq
 8005ed4:	f042 0201 	orreq.w	r2, r2, #1
 8005ed8:	3014      	adds	r0, #20
 8005eda:	4283      	cmp	r3, r0
 8005edc:	bf08      	it	eq
 8005ede:	f042 0201 	orreq.w	r2, r2, #1
 8005ee2:	3014      	adds	r0, #20
 8005ee4:	4283      	cmp	r3, r0
 8005ee6:	bf08      	it	eq
 8005ee8:	f042 0201 	orreq.w	r2, r2, #1
 8005eec:	3014      	adds	r0, #20
 8005eee:	4283      	cmp	r3, r0
 8005ef0:	bf08      	it	eq
 8005ef2:	f042 0201 	orreq.w	r2, r2, #1
 8005ef6:	b912      	cbnz	r2, 8005efe <HAL_DMA_IRQHandler+0x622>
 8005ef8:	4a8b      	ldr	r2, [pc, #556]	; (8006128 <HAL_DMA_IRQHandler+0x84c>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d19a      	bne.n	8005e34 <HAL_DMA_IRQHandler+0x558>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005efe:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8005f00:	2504      	movs	r5, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005f02:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005f04:	f000 001f 	and.w	r0, r0, #31
 8005f08:	4085      	lsls	r5, r0
 8005f0a:	420d      	tst	r5, r1
 8005f0c:	d018      	beq.n	8005f40 <HAL_DMA_IRQHandler+0x664>
 8005f0e:	0757      	lsls	r7, r2, #29
 8005f10:	d516      	bpl.n	8005f40 <HAL_DMA_IRQHandler+0x664>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f12:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005f14:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f16:	d544      	bpl.n	8005fa2 <HAL_DMA_IRQHandler+0x6c6>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f18:	03d2      	lsls	r2, r2, #15
 8005f1a:	f100 8099 	bmi.w	8006050 <HAL_DMA_IRQHandler+0x774>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005f1e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f47f aec9 	bne.w	8005cb8 <HAL_DMA_IRQHandler+0x3dc>
 8005f26:	e785      	b.n	8005e34 <HAL_DMA_IRQHandler+0x558>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f28:	f00e 011f 	and.w	r1, lr, #31
 8005f2c:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f30:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f32:	fa0c fc01 	lsl.w	ip, ip, r1
 8005f36:	ea15 0f0c 	tst.w	r5, ip
 8005f3a:	f47f af3e 	bne.w	8005dba <HAL_DMA_IRQHandler+0x4de>
 8005f3e:	e624      	b.n	8005b8a <HAL_DMA_IRQHandler+0x2ae>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005f40:	2502      	movs	r5, #2
 8005f42:	4085      	lsls	r5, r0
 8005f44:	420d      	tst	r5, r1
 8005f46:	d00d      	beq.n	8005f64 <HAL_DMA_IRQHandler+0x688>
 8005f48:	0797      	lsls	r7, r2, #30
 8005f4a:	d50b      	bpl.n	8005f64 <HAL_DMA_IRQHandler+0x688>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005f4c:	6075      	str	r5, [r6, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f4e:	0416      	lsls	r6, r2, #16
 8005f50:	f140 8083 	bpl.w	800605a <HAL_DMA_IRQHandler+0x77e>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f54:	03d5      	lsls	r5, r2, #15
 8005f56:	f100 80dd 	bmi.w	8006114 <HAL_DMA_IRQHandler+0x838>
          if(hdma->XferM1CpltCallback != NULL)
 8005f5a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f47f aeab 	bne.w	8005cb8 <HAL_DMA_IRQHandler+0x3dc>
 8005f62:	e767      	b.n	8005e34 <HAL_DMA_IRQHandler+0x558>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005f64:	2508      	movs	r5, #8
 8005f66:	fa05 f000 	lsl.w	r0, r5, r0
 8005f6a:	4208      	tst	r0, r1
 8005f6c:	f43f af62 	beq.w	8005e34 <HAL_DMA_IRQHandler+0x558>
 8005f70:	0711      	lsls	r1, r2, #28
 8005f72:	f57f af5f 	bpl.w	8005e34 <HAL_DMA_IRQHandler+0x558>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f76:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f78:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005f7a:	f021 010e 	bic.w	r1, r1, #14
 8005f7e:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8005f80:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f82:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8c:	6073      	str	r3, [r6, #4]
      if (hdma->XferErrorCallback != NULL)
 8005f8e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005f90:	6562      	str	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8005f92:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8005f96:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	f47f ae8c 	bne.w	8005cb8 <HAL_DMA_IRQHandler+0x3dc>
 8005fa0:	e748      	b.n	8005e34 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005fa2:	0693      	lsls	r3, r2, #26
 8005fa4:	d454      	bmi.n	8006050 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005fa6:	6822      	ldr	r2, [r4, #0]
 8005fa8:	4b60      	ldr	r3, [pc, #384]	; (800612c <HAL_DMA_IRQHandler+0x850>)
 8005faa:	4861      	ldr	r0, [pc, #388]	; (8006130 <HAL_DMA_IRQHandler+0x854>)
 8005fac:	4961      	ldr	r1, [pc, #388]	; (8006134 <HAL_DMA_IRQHandler+0x858>)
 8005fae:	4282      	cmp	r2, r0
 8005fb0:	bf18      	it	ne
 8005fb2:	429a      	cmpne	r2, r3
 8005fb4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8005fb8:	bf0c      	ite	eq
 8005fba:	2301      	moveq	r3, #1
 8005fbc:	2300      	movne	r3, #0
 8005fbe:	428a      	cmp	r2, r1
 8005fc0:	bf08      	it	eq
 8005fc2:	f043 0301 	orreq.w	r3, r3, #1
 8005fc6:	3130      	adds	r1, #48	; 0x30
 8005fc8:	4282      	cmp	r2, r0
 8005fca:	bf08      	it	eq
 8005fcc:	f043 0301 	orreq.w	r3, r3, #1
 8005fd0:	3030      	adds	r0, #48	; 0x30
 8005fd2:	428a      	cmp	r2, r1
 8005fd4:	bf08      	it	eq
 8005fd6:	f043 0301 	orreq.w	r3, r3, #1
 8005fda:	3130      	adds	r1, #48	; 0x30
 8005fdc:	4282      	cmp	r2, r0
 8005fde:	bf08      	it	eq
 8005fe0:	f043 0301 	orreq.w	r3, r3, #1
 8005fe4:	3030      	adds	r0, #48	; 0x30
 8005fe6:	428a      	cmp	r2, r1
 8005fe8:	bf08      	it	eq
 8005fea:	f043 0301 	orreq.w	r3, r3, #1
 8005fee:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8005ff2:	4282      	cmp	r2, r0
 8005ff4:	bf08      	it	eq
 8005ff6:	f043 0301 	orreq.w	r3, r3, #1
 8005ffa:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8005ffe:	428a      	cmp	r2, r1
 8006000:	bf08      	it	eq
 8006002:	f043 0301 	orreq.w	r3, r3, #1
 8006006:	3130      	adds	r1, #48	; 0x30
 8006008:	4282      	cmp	r2, r0
 800600a:	bf08      	it	eq
 800600c:	f043 0301 	orreq.w	r3, r3, #1
 8006010:	3030      	adds	r0, #48	; 0x30
 8006012:	428a      	cmp	r2, r1
 8006014:	bf08      	it	eq
 8006016:	f043 0301 	orreq.w	r3, r3, #1
 800601a:	3130      	adds	r1, #48	; 0x30
 800601c:	4282      	cmp	r2, r0
 800601e:	bf08      	it	eq
 8006020:	f043 0301 	orreq.w	r3, r3, #1
 8006024:	3030      	adds	r0, #48	; 0x30
 8006026:	428a      	cmp	r2, r1
 8006028:	bf08      	it	eq
 800602a:	f043 0301 	orreq.w	r3, r3, #1
 800602e:	3130      	adds	r1, #48	; 0x30
 8006030:	4282      	cmp	r2, r0
 8006032:	bf08      	it	eq
 8006034:	f043 0301 	orreq.w	r3, r3, #1
 8006038:	428a      	cmp	r2, r1
 800603a:	bf08      	it	eq
 800603c:	f043 0301 	orreq.w	r3, r3, #1
 8006040:	b913      	cbnz	r3, 8006048 <HAL_DMA_IRQHandler+0x76c>
 8006042:	4b3d      	ldr	r3, [pc, #244]	; (8006138 <HAL_DMA_IRQHandler+0x85c>)
 8006044:	429a      	cmp	r2, r3
 8006046:	d179      	bne.n	800613c <HAL_DMA_IRQHandler+0x860>
 8006048:	6813      	ldr	r3, [r2, #0]
 800604a:	f023 0308 	bic.w	r3, r3, #8
 800604e:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8006050:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006052:	2b00      	cmp	r3, #0
 8006054:	f47f ae30 	bne.w	8005cb8 <HAL_DMA_IRQHandler+0x3dc>
 8006058:	e6ec      	b.n	8005e34 <HAL_DMA_IRQHandler+0x558>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800605a:	0690      	lsls	r0, r2, #26
 800605c:	d45a      	bmi.n	8006114 <HAL_DMA_IRQHandler+0x838>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800605e:	6822      	ldr	r2, [r4, #0]
 8006060:	4b32      	ldr	r3, [pc, #200]	; (800612c <HAL_DMA_IRQHandler+0x850>)
 8006062:	4833      	ldr	r0, [pc, #204]	; (8006130 <HAL_DMA_IRQHandler+0x854>)
 8006064:	4933      	ldr	r1, [pc, #204]	; (8006134 <HAL_DMA_IRQHandler+0x858>)
 8006066:	4282      	cmp	r2, r0
 8006068:	bf18      	it	ne
 800606a:	429a      	cmpne	r2, r3
 800606c:	f100 0030 	add.w	r0, r0, #48	; 0x30
 8006070:	bf0c      	ite	eq
 8006072:	2301      	moveq	r3, #1
 8006074:	2300      	movne	r3, #0
 8006076:	428a      	cmp	r2, r1
 8006078:	bf08      	it	eq
 800607a:	f043 0301 	orreq.w	r3, r3, #1
 800607e:	3130      	adds	r1, #48	; 0x30
 8006080:	4282      	cmp	r2, r0
 8006082:	bf08      	it	eq
 8006084:	f043 0301 	orreq.w	r3, r3, #1
 8006088:	3030      	adds	r0, #48	; 0x30
 800608a:	428a      	cmp	r2, r1
 800608c:	bf08      	it	eq
 800608e:	f043 0301 	orreq.w	r3, r3, #1
 8006092:	3130      	adds	r1, #48	; 0x30
 8006094:	4282      	cmp	r2, r0
 8006096:	bf08      	it	eq
 8006098:	f043 0301 	orreq.w	r3, r3, #1
 800609c:	3030      	adds	r0, #48	; 0x30
 800609e:	428a      	cmp	r2, r1
 80060a0:	bf08      	it	eq
 80060a2:	f043 0301 	orreq.w	r3, r3, #1
 80060a6:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80060aa:	4282      	cmp	r2, r0
 80060ac:	bf08      	it	eq
 80060ae:	f043 0301 	orreq.w	r3, r3, #1
 80060b2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80060b6:	428a      	cmp	r2, r1
 80060b8:	bf08      	it	eq
 80060ba:	f043 0301 	orreq.w	r3, r3, #1
 80060be:	3130      	adds	r1, #48	; 0x30
 80060c0:	4282      	cmp	r2, r0
 80060c2:	bf08      	it	eq
 80060c4:	f043 0301 	orreq.w	r3, r3, #1
 80060c8:	3030      	adds	r0, #48	; 0x30
 80060ca:	428a      	cmp	r2, r1
 80060cc:	bf08      	it	eq
 80060ce:	f043 0301 	orreq.w	r3, r3, #1
 80060d2:	3130      	adds	r1, #48	; 0x30
 80060d4:	4282      	cmp	r2, r0
 80060d6:	bf08      	it	eq
 80060d8:	f043 0301 	orreq.w	r3, r3, #1
 80060dc:	3030      	adds	r0, #48	; 0x30
 80060de:	428a      	cmp	r2, r1
 80060e0:	bf08      	it	eq
 80060e2:	f043 0301 	orreq.w	r3, r3, #1
 80060e6:	3130      	adds	r1, #48	; 0x30
 80060e8:	4282      	cmp	r2, r0
 80060ea:	bf08      	it	eq
 80060ec:	f043 0301 	orreq.w	r3, r3, #1
 80060f0:	428a      	cmp	r2, r1
 80060f2:	bf08      	it	eq
 80060f4:	f043 0301 	orreq.w	r3, r3, #1
 80060f8:	b913      	cbnz	r3, 8006100 <HAL_DMA_IRQHandler+0x824>
 80060fa:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <HAL_DMA_IRQHandler+0x85c>)
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d122      	bne.n	8006146 <HAL_DMA_IRQHandler+0x86a>
 8006100:	6813      	ldr	r3, [r2, #0]
 8006102:	f023 0314 	bic.w	r3, r3, #20
 8006106:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8006108:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800610a:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 800610c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 8006110:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 8006114:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	f47f adce 	bne.w	8005cb8 <HAL_DMA_IRQHandler+0x3dc>
 800611c:	e68a      	b.n	8005e34 <HAL_DMA_IRQHandler+0x558>
 800611e:	bf00      	nop
 8006120:	58025408 	.word	0x58025408
 8006124:	5802541c 	.word	0x5802541c
 8006128:	58025494 	.word	0x58025494
 800612c:	40020010 	.word	0x40020010
 8006130:	40020028 	.word	0x40020028
 8006134:	40020040 	.word	0x40020040
 8006138:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800613c:	6813      	ldr	r3, [r2, #0]
 800613e:	f023 0304 	bic.w	r3, r3, #4
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	e784      	b.n	8006050 <HAL_DMA_IRQHandler+0x774>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006146:	6813      	ldr	r3, [r2, #0]
 8006148:	f023 030a 	bic.w	r3, r3, #10
 800614c:	6013      	str	r3, [r2, #0]
 800614e:	e7db      	b.n	8006108 <HAL_DMA_IRQHandler+0x82c>

08006150 <HAL_DMA_GetState>:
  return hdma->State;
 8006150:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop

08006158 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8006158:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800615a:	4770      	bx	lr

0800615c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800615c:	680b      	ldr	r3, [r1, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	f000 8119 	beq.w	8006396 <HAL_GPIO_Init+0x23a>
 8006164:	f04f 0c00 	mov.w	ip, #0
{
 8006168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800616c:	4662      	mov	r2, ip
{
 800616e:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006170:	4d94      	ldr	r5, [pc, #592]	; (80063c4 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006172:	4f95      	ldr	r7, [pc, #596]	; (80063c8 <HAL_GPIO_Init+0x26c>)
 8006174:	f8df 8268 	ldr.w	r8, [pc, #616]	; 80063e0 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006178:	f04f 0901 	mov.w	r9, #1
 800617c:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 8006180:	ea19 0e03 	ands.w	lr, r9, r3
 8006184:	f000 80c1 	beq.w	800630a <HAL_GPIO_Init+0x1ae>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006188:	684b      	ldr	r3, [r1, #4]
 800618a:	f003 0303 	and.w	r3, r3, #3
 800618e:	1e5c      	subs	r4, r3, #1
 8006190:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006192:	f04f 0403 	mov.w	r4, #3
 8006196:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800619a:	f240 80c0 	bls.w	800631e <HAL_GPIO_Init+0x1c2>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800619e:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061a0:	2b03      	cmp	r3, #3
 80061a2:	d026      	beq.n	80061f2 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 80061a4:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061a6:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061aa:	688b      	ldr	r3, [r1, #8]
 80061ac:	fa03 f30c 	lsl.w	r3, r3, ip
 80061b0:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 80061b4:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061b6:	684b      	ldr	r3, [r1, #4]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d118      	bne.n	80061f2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3U];
 80061c0:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061c4:	f002 0b07 	and.w	fp, r2, #7
 80061c8:	230f      	movs	r3, #15
 80061ca:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 80061ce:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80061d2:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80061d6:	fa03 f30b 	lsl.w	r3, r3, fp
 80061da:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80061de:	690b      	ldr	r3, [r1, #16]
 80061e0:	fa03 f30b 	lsl.w	r3, r3, fp
 80061e4:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 80061e8:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061ec:	684b      	ldr	r3, [r1, #4]
 80061ee:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 80061f2:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061f6:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061fa:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061fe:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 8006200:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006202:	684b      	ldr	r3, [r1, #4]
 8006204:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 8006208:	d07e      	beq.n	8006308 <HAL_GPIO_Init+0x1ac>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800620a:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800620e:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006212:	f002 0903 	and.w	r9, r2, #3
 8006216:	f04f 0a0f 	mov.w	sl, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800621a:	f043 0302 	orr.w	r3, r3, #2
 800621e:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006222:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006226:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006228:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800622c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8006230:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006234:	fa0a fa09 	lsl.w	sl, sl, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006240:	68a3      	ldr	r3, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006242:	ea23 030a 	bic.w	r3, r3, sl
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006246:	d02b      	beq.n	80062a0 <HAL_GPIO_Init+0x144>
 8006248:	4540      	cmp	r0, r8
 800624a:	f000 8088 	beq.w	800635e <HAL_GPIO_Init+0x202>
 800624e:	4e5f      	ldr	r6, [pc, #380]	; (80063cc <HAL_GPIO_Init+0x270>)
 8006250:	42b0      	cmp	r0, r6
 8006252:	f000 808b 	beq.w	800636c <HAL_GPIO_Init+0x210>
 8006256:	4e5e      	ldr	r6, [pc, #376]	; (80063d0 <HAL_GPIO_Init+0x274>)
 8006258:	42b0      	cmp	r0, r6
 800625a:	d079      	beq.n	8006350 <HAL_GPIO_Init+0x1f4>
 800625c:	4e5d      	ldr	r6, [pc, #372]	; (80063d4 <HAL_GPIO_Init+0x278>)
 800625e:	42b0      	cmp	r0, r6
 8006260:	f000 8092 	beq.w	8006388 <HAL_GPIO_Init+0x22c>
 8006264:	4e5c      	ldr	r6, [pc, #368]	; (80063d8 <HAL_GPIO_Init+0x27c>)
 8006266:	42b0      	cmp	r0, r6
 8006268:	f000 8096 	beq.w	8006398 <HAL_GPIO_Init+0x23c>
 800626c:	4e5b      	ldr	r6, [pc, #364]	; (80063dc <HAL_GPIO_Init+0x280>)
 800626e:	42b0      	cmp	r0, r6
 8006270:	f000 8083 	beq.w	800637a <HAL_GPIO_Init+0x21e>
 8006274:	f8df a16c 	ldr.w	sl, [pc, #364]	; 80063e4 <HAL_GPIO_Init+0x288>
 8006278:	4550      	cmp	r0, sl
 800627a:	f000 8094 	beq.w	80063a6 <HAL_GPIO_Init+0x24a>
 800627e:	f8df a168 	ldr.w	sl, [pc, #360]	; 80063e8 <HAL_GPIO_Init+0x28c>
 8006282:	4550      	cmp	r0, sl
 8006284:	f000 8096 	beq.w	80063b4 <HAL_GPIO_Init+0x258>
 8006288:	f8df a160 	ldr.w	sl, [pc, #352]	; 80063ec <HAL_GPIO_Init+0x290>
 800628c:	4550      	cmp	r0, sl
 800628e:	bf0c      	ite	eq
 8006290:	f04f 0a09 	moveq.w	sl, #9
 8006294:	f04f 0a0a 	movne.w	sl, #10
 8006298:	fa0a f909 	lsl.w	r9, sl, r9
 800629c:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062a0:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062a6:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 80062a8:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 80062ac:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80062ae:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80062b2:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 80062b4:	bf54      	ite	pl
 80062b6:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80062b8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 80062bc:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062c0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 80062c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80062c6:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062ca:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 80062cc:	bf54      	ite	pl
 80062ce:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80062d0:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 80062d4:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062d8:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80062da:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80062de:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062e2:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 80062e4:	bf54      	ite	pl
 80062e6:	4023      	andpl	r3, r4
          temp |= iocurrent;
 80062e8:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 80062ec:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f0:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 80062f2:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80062f6:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 80062f8:	bf54      	ite	pl
 80062fa:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 80062fc:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006300:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 8006304:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006308:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 800630a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800630c:	f10c 0c02 	add.w	ip, ip, #2
 8006310:	fa33 f402 	lsrs.w	r4, r3, r2
 8006314:	f47f af30 	bne.w	8006178 <HAL_GPIO_Init+0x1c>
  }
}
 8006318:	b003      	add	sp, #12
 800631a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800631e:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006320:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006324:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006326:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006328:	fa03 f30c 	lsl.w	r3, r3, ip
 800632c:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 8006330:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006332:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 8006334:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006338:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800633c:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006340:	4093      	lsls	r3, r2
 8006342:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 8006346:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006348:	684b      	ldr	r3, [r1, #4]
 800634a:	f003 0303 	and.w	r3, r3, #3
 800634e:	e727      	b.n	80061a0 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006350:	f04f 0a03 	mov.w	sl, #3
 8006354:	fa0a f909 	lsl.w	r9, sl, r9
 8006358:	ea43 0309 	orr.w	r3, r3, r9
 800635c:	e7a0      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 800635e:	f04f 0a01 	mov.w	sl, #1
 8006362:	fa0a f909 	lsl.w	r9, sl, r9
 8006366:	ea43 0309 	orr.w	r3, r3, r9
 800636a:	e799      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 800636c:	f04f 0a02 	mov.w	sl, #2
 8006370:	fa0a f909 	lsl.w	r9, sl, r9
 8006374:	ea43 0309 	orr.w	r3, r3, r9
 8006378:	e792      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 800637a:	f04f 0a06 	mov.w	sl, #6
 800637e:	fa0a f909 	lsl.w	r9, sl, r9
 8006382:	ea43 0309 	orr.w	r3, r3, r9
 8006386:	e78b      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 8006388:	f04f 0a04 	mov.w	sl, #4
 800638c:	fa0a f909 	lsl.w	r9, sl, r9
 8006390:	ea43 0309 	orr.w	r3, r3, r9
 8006394:	e784      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 8006396:	4770      	bx	lr
 8006398:	f04f 0a05 	mov.w	sl, #5
 800639c:	fa0a f909 	lsl.w	r9, sl, r9
 80063a0:	ea43 0309 	orr.w	r3, r3, r9
 80063a4:	e77c      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 80063a6:	f04f 0a07 	mov.w	sl, #7
 80063aa:	fa0a f909 	lsl.w	r9, sl, r9
 80063ae:	ea43 0309 	orr.w	r3, r3, r9
 80063b2:	e775      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 80063b4:	f04f 0a08 	mov.w	sl, #8
 80063b8:	fa0a f909 	lsl.w	r9, sl, r9
 80063bc:	ea43 0309 	orr.w	r3, r3, r9
 80063c0:	e76e      	b.n	80062a0 <HAL_GPIO_Init+0x144>
 80063c2:	bf00      	nop
 80063c4:	58024400 	.word	0x58024400
 80063c8:	58020000 	.word	0x58020000
 80063cc:	58020800 	.word	0x58020800
 80063d0:	58020c00 	.word	0x58020c00
 80063d4:	58021000 	.word	0x58021000
 80063d8:	58021400 	.word	0x58021400
 80063dc:	58021800 	.word	0x58021800
 80063e0:	58020400 	.word	0x58020400
 80063e4:	58021c00 	.word	0x58021c00
 80063e8:	58022000 	.word	0x58022000
 80063ec:	58022400 	.word	0x58022400

080063f0 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80063f0:	6903      	ldr	r3, [r0, #16]
 80063f2:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80063f4:	bf14      	ite	ne
 80063f6:	2001      	movne	r0, #1
 80063f8:	2000      	moveq	r0, #0
 80063fa:	4770      	bx	lr

080063fc <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063fc:	b902      	cbnz	r2, 8006400 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063fe:	0409      	lsls	r1, r1, #16
 8006400:	6181      	str	r1, [r0, #24]
  }
}
 8006402:	4770      	bx	lr

08006404 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006408:	6803      	ldr	r3, [r0, #0]
{
 800640a:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	0694      	lsls	r4, r2, #26
 8006410:	d46d      	bmi.n	80064ee <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 8006412:	4605      	mov	r5, r0
 8006414:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006416:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800641a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800641c:	f014 0410 	ands.w	r4, r4, #16
 8006420:	d068      	beq.n	80064f4 <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 8006422:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006424:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8006428:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800642a:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800642c:	46b2      	mov	sl, r6
 800642e:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006430:	699a      	ldr	r2, [r3, #24]
 8006432:	d161      	bne.n	80064f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 8006434:	0690      	lsls	r0, r2, #26
 8006436:	f100 8085 	bmi.w	8006544 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800643a:	f1ba 0f00 	cmp.w	sl, #0
 800643e:	d105      	bne.n	800644c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 8006440:	699c      	ldr	r4, [r3, #24]
 8006442:	06a1      	lsls	r1, r4, #26
 8006444:	d5fc      	bpl.n	8006440 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006446:	2220      	movs	r2, #32
 8006448:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800644a:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 800644c:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 8006450:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8006452:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006454:	05d0      	lsls	r0, r2, #23
 8006456:	d535      	bpl.n	80064c4 <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006458:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800645c:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800645e:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006462:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006464:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006466:	d505      	bpl.n	8006474 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006468:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800646c:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006470:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006472:	682b      	ldr	r3, [r5, #0]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006474:	0597      	lsls	r7, r2, #22
 8006476:	d505      	bpl.n	8006484 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006478:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800647c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006480:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006482:	682b      	ldr	r3, [r5, #0]
 8006484:	699a      	ldr	r2, [r3, #24]
 8006486:	0790      	lsls	r0, r2, #30
 8006488:	d502      	bpl.n	8006490 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800648a:	2200      	movs	r2, #0
 800648c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800648e:	682b      	ldr	r3, [r5, #0]
 8006490:	699a      	ldr	r2, [r3, #24]
 8006492:	07d1      	lsls	r1, r2, #31
 8006494:	d404      	bmi.n	80064a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	f042 0201 	orr.w	r2, r2, #1
 800649c:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800649e:	682b      	ldr	r3, [r5, #0]
 80064a0:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 80064a4:	4835      	ldr	r0, [pc, #212]	; (800657c <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 80064a6:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 80064a8:	4002      	ands	r2, r0
      return HAL_ERROR;
 80064aa:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80064ac:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80064ae:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064b0:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 80064b4:	4323      	orrs	r3, r4
 80064b6:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80064b8:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064bc:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 80064c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064c4:	0550      	lsls	r0, r2, #21
 80064c6:	d4cf      	bmi.n	8006468 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064c8:	0596      	lsls	r6, r2, #22
 80064ca:	d4d5      	bmi.n	8006478 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 80064cc:	2900      	cmp	r1, #0
 80064ce:	d1d9      	bne.n	8006484 <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d0:	f7fd ffcc 	bl	800446c <HAL_GetTick>
 80064d4:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064d8:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064da:	42b8      	cmp	r0, r7
 80064dc:	d800      	bhi.n	80064e0 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 80064de:	b91f      	cbnz	r7, 80064e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80064e0:	699a      	ldr	r2, [r3, #24]
 80064e2:	f012 0220 	ands.w	r2, r2, #32
 80064e6:	d032      	beq.n	800654e <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064e8:	699a      	ldr	r2, [r3, #24]
 80064ea:	0692      	lsls	r2, r2, #26
 80064ec:	d595      	bpl.n	800641a <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80064ee:	2000      	movs	r0, #0
}
 80064f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 80064f4:	4621      	mov	r1, r4
 80064f6:	e7ac      	b.n	8006452 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064f8:	0692      	lsls	r2, r2, #26
 80064fa:	d423      	bmi.n	8006544 <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 80064fc:	f1ba 0f00 	cmp.w	sl, #0
 8006500:	d1a4      	bne.n	800644c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006502:	f7fd ffb3 	bl	800446c <HAL_GetTick>
 8006506:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006508:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800650a:	4287      	cmp	r7, r0
 800650c:	d301      	bcc.n	8006512 <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 800650e:	2f00      	cmp	r7, #0
 8006510:	d18d      	bne.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006512:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006514:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006518:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800651a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800651c:	0409      	lsls	r1, r1, #16
 800651e:	d503      	bpl.n	8006528 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 8006520:	0441      	lsls	r1, r0, #17
 8006522:	d401      	bmi.n	8006528 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 8006524:	2a20      	cmp	r2, #32
 8006526:	d11f      	bne.n	8006568 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006528:	699a      	ldr	r2, [r3, #24]
 800652a:	0690      	lsls	r0, r2, #26
 800652c:	f53f af7f 	bmi.w	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006530:	f7fd ff9c 	bl	800446c <HAL_GetTick>
 8006534:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006536:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006538:	2819      	cmp	r0, #25
 800653a:	d9f5      	bls.n	8006528 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800653c:	2620      	movs	r6, #32
              status = HAL_ERROR;
 800653e:	f04f 0a01 	mov.w	sl, #1
 8006542:	e774      	b.n	800642e <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 8006544:	f1ba 0f00 	cmp.w	sl, #0
 8006548:	f43f af7d 	beq.w	8006446 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800654c:	e77e      	b.n	800644c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800654e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006550:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 8006552:	2001      	movs	r0, #1
 8006554:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006558:	430b      	orrs	r3, r1
 800655a:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800655c:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006560:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8006564:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006568:	685a      	ldr	r2, [r3, #4]
 800656a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800656e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8006570:	f7fd ff7c 	bl	800446c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006574:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 8006576:	4604      	mov	r4, r0
 8006578:	e7d6      	b.n	8006528 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800657a:	bf00      	nop
 800657c:	fe00e800 	.word	0xfe00e800

08006580 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006580:	2800      	cmp	r0, #0
 8006582:	d056      	beq.n	8006632 <HAL_I2C_Init+0xb2>
{
 8006584:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006586:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800658a:	4604      	mov	r4, r0
 800658c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006590:	2b00      	cmp	r3, #0
 8006592:	d049      	beq.n	8006628 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8006594:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006596:	2324      	movs	r3, #36	; 0x24
 8006598:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800659c:	6813      	ldr	r3, [r2, #0]
 800659e:	f023 0301 	bic.w	r3, r3, #1
 80065a2:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80065a4:	e9d4 2300 	ldrd	r2, r3, [r4]
 80065a8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80065ac:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80065ae:	6822      	ldr	r2, [r4, #0]
 80065b0:	6893      	ldr	r3, [r2, #8]
 80065b2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065b6:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065b8:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065ba:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80065bc:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80065be:	68a3      	ldr	r3, [r4, #8]
 80065c0:	bf0c      	ite	eq
 80065c2:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065c6:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 80065ca:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065cc:	68e3      	ldr	r3, [r4, #12]
 80065ce:	2b02      	cmp	r3, #2
 80065d0:	d103      	bne.n	80065da <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065d2:	6823      	ldr	r3, [r4, #0]
 80065d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065d8:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065da:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80065dc:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065e0:	4b15      	ldr	r3, [pc, #84]	; (8006638 <HAL_I2C_Init+0xb8>)
 80065e2:	6851      	ldr	r1, [r2, #4]
 80065e4:	430b      	orrs	r3, r1
 80065e6:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065e8:	6822      	ldr	r2, [r4, #0]
 80065ea:	68d3      	ldr	r3, [r2, #12]
 80065ec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065f0:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 80065f2:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065f4:	6821      	ldr	r1, [r4, #0]
 80065f6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80065fa:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065fc:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80065fe:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8006602:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006604:	6821      	ldr	r1, [r4, #0]
 8006606:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800660a:	4303      	orrs	r3, r0
  return HAL_OK;
 800660c:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800660e:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 8006610:	6821      	ldr	r1, [r4, #0]
 8006612:	680b      	ldr	r3, [r1, #0]
 8006614:	f043 0301 	orr.w	r3, r3, #1
 8006618:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661a:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800661c:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006620:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006622:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8006626:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8006628:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800662c:	f7fb f840 	bl	80016b0 <HAL_I2C_MspInit>
 8006630:	e7b0      	b.n	8006594 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8006632:	2001      	movs	r0, #1
}
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	02008000 	.word	0x02008000

0800663c <HAL_I2C_Master_Transmit>:
{
 800663c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006640:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006642:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006646:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006648:	2b20      	cmp	r3, #32
 800664a:	d12c      	bne.n	80066a6 <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 800664c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8006650:	4683      	mov	fp, r0
 8006652:	2b01      	cmp	r3, #1
 8006654:	d027      	beq.n	80066a6 <HAL_I2C_Master_Transmit+0x6a>
 8006656:	2301      	movs	r3, #1
 8006658:	468a      	mov	sl, r1
 800665a:	4616      	mov	r6, r2
 800665c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8006660:	f7fd ff04 	bl	800446c <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006664:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 8006668:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800666a:	699a      	ldr	r2, [r3, #24]
 800666c:	0417      	lsls	r7, r2, #16
 800666e:	d51d      	bpl.n	80066ac <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006670:	f7fd fefc 	bl	800446c <HAL_GetTick>
 8006674:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006678:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800667c:	2819      	cmp	r0, #25
 800667e:	d9f4      	bls.n	800666a <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006680:	699a      	ldr	r2, [r3, #24]
 8006682:	0410      	lsls	r0, r2, #16
 8006684:	d5f1      	bpl.n	800666a <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006686:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800668a:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800668c:	2200      	movs	r2, #0
      return HAL_ERROR;
 800668e:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006690:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 8006692:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006696:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800669a:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800669e:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 80066a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 80066a6:	2002      	movs	r0, #2
}
 80066a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066ac:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066ae:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 80066b0:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80066b4:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066b8:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 80066ba:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80066be:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066c2:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 80066c6:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066ca:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 80066ce:	b292      	uxth	r2, r2
 80066d0:	2aff      	cmp	r2, #255	; 0xff
 80066d2:	d87e      	bhi.n	80067d2 <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 80066d4:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80066d8:	49ad      	ldr	r1, [pc, #692]	; (8006990 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 80066da:	b292      	uxth	r2, r2
 80066dc:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80066e0:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 80066e2:	6858      	ldr	r0, [r3, #4]
 80066e4:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80066e6:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80066ea:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80066ee:	4301      	orrs	r1, r0
 80066f0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80066f4:	49a7      	ldr	r1, [pc, #668]	; (8006994 <HAL_I2C_Master_Transmit+0x358>)
 80066f6:	4311      	orrs	r1, r2
 80066f8:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80066fa:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 80066fe:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8006702:	b29b      	uxth	r3, r3
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 8107 	beq.w	8006918 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800670a:	f8db 3000 	ldr.w	r3, [fp]
 800670e:	699c      	ldr	r4, [r3, #24]
 8006710:	f014 0402 	ands.w	r4, r4, #2
 8006714:	f040 80c5 	bne.w	80068a2 <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 8006718:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800671a:	f012 0210 	ands.w	r2, r2, #16
 800671e:	f000 808d 	beq.w	800683c <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006722:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 8006724:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 8006726:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006728:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800672a:	f8db 3000 	ldr.w	r3, [fp]
 800672e:	1c69      	adds	r1, r5, #1
 8006730:	699a      	ldr	r2, [r3, #24]
 8006732:	f040 8085 	bne.w	8006840 <HAL_I2C_Master_Transmit+0x204>
 8006736:	0690      	lsls	r0, r2, #26
 8006738:	f100 8106 	bmi.w	8006948 <HAL_I2C_Master_Transmit+0x30c>
 800673c:	b937      	cbnz	r7, 800674c <HAL_I2C_Master_Transmit+0x110>
 800673e:	699a      	ldr	r2, [r3, #24]
 8006740:	0691      	lsls	r1, r2, #26
 8006742:	d5fc      	bpl.n	800673e <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006744:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 8006748:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 800674c:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 8006750:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8006752:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006754:	05ce      	lsls	r6, r1, #23
 8006756:	d54b      	bpl.n	80067f0 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006758:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800675c:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800675e:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006762:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006764:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006768:	d506      	bpl.n	8006778 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800676a:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800676e:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006772:	61d8      	str	r0, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006774:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006778:	0589      	lsls	r1, r1, #22
 800677a:	d506      	bpl.n	800678a <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800677c:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8006780:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006784:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006786:	f8db 3000 	ldr.w	r3, [fp]
 800678a:	6999      	ldr	r1, [r3, #24]
 800678c:	078e      	lsls	r6, r1, #30
 800678e:	d503      	bpl.n	8006798 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 8006790:	2100      	movs	r1, #0
 8006792:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006794:	f8db 3000 	ldr.w	r3, [fp]
 8006798:	6999      	ldr	r1, [r3, #24]
 800679a:	07cd      	lsls	r5, r1, #31
 800679c:	d405      	bmi.n	80067aa <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800679e:	6999      	ldr	r1, [r3, #24]
 80067a0:	f041 0101 	orr.w	r1, r1, #1
 80067a4:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 80067a6:	f8db 3000 	ldr.w	r3, [fp]
 80067aa:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ac:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 80067ae:	487a      	ldr	r0, [pc, #488]	; (8006998 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 80067b0:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 80067b2:	4001      	ands	r1, r0
        return HAL_ERROR;
 80067b4:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 80067b6:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 80067b8:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80067bc:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 80067c0:	4313      	orrs	r3, r2
 80067c2:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80067c6:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ca:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 80067ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067d2:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80067d4:	496e      	ldr	r1, [pc, #440]	; (8006990 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067d6:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067de:	f3ca 0109 	ubfx	r1, sl, #0, #10
 80067e2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 80067e6:	4311      	orrs	r1, r2
 80067e8:	4a6c      	ldr	r2, [pc, #432]	; (800699c <HAL_I2C_Master_Transmit+0x360>)
 80067ea:	430a      	orrs	r2, r1
 80067ec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80067ee:	e784      	b.n	80066fa <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80067f0:	054c      	lsls	r4, r1, #21
 80067f2:	d4ba      	bmi.n	800676a <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80067f4:	058f      	lsls	r7, r1, #22
 80067f6:	d4c1      	bmi.n	800677c <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 80067f8:	2800      	cmp	r0, #0
 80067fa:	d1c6      	bne.n	800678a <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 80067fc:	1c6c      	adds	r4, r5, #1
 80067fe:	d086      	beq.n	800670e <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006800:	f7fd fe34 	bl	800446c <HAL_GetTick>
 8006804:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006808:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680c:	4285      	cmp	r5, r0
 800680e:	d302      	bcc.n	8006816 <HAL_I2C_Master_Transmit+0x1da>
 8006810:	2d00      	cmp	r5, #0
 8006812:	f47f af7c 	bne.w	800670e <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8006816:	699a      	ldr	r2, [r3, #24]
 8006818:	f012 0202 	ands.w	r2, r2, #2
 800681c:	f47f af77 	bne.w	800670e <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006820:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006824:	2120      	movs	r1, #32
        return HAL_ERROR;
 8006826:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8006828:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800682c:	430b      	orrs	r3, r1
 800682e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006832:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006836:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 800683a:	e735      	b.n	80066a8 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800683c:	4610      	mov	r0, r2
 800683e:	e788      	b.n	8006752 <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006840:	0692      	lsls	r2, r2, #26
 8006842:	f100 8081 	bmi.w	8006948 <HAL_I2C_Master_Transmit+0x30c>
 8006846:	2f00      	cmp	r7, #0
 8006848:	d180      	bne.n	800674c <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800684a:	f7fd fe0f 	bl	800446c <HAL_GetTick>
 800684e:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006850:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006854:	4285      	cmp	r5, r0
 8006856:	d302      	bcc.n	800685e <HAL_I2C_Master_Transmit+0x222>
 8006858:	2d00      	cmp	r5, #0
 800685a:	f47f af68 	bne.w	800672e <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800685e:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8006860:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006864:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 8006866:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006868:	0409      	lsls	r1, r1, #16
 800686a:	d50c      	bpl.n	8006886 <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 800686c:	0441      	lsls	r1, r0, #17
 800686e:	d40a      	bmi.n	8006886 <HAL_I2C_Master_Transmit+0x24a>
 8006870:	2a20      	cmp	r2, #32
 8006872:	d008      	beq.n	8006886 <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800687a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800687c:	f7fd fdf6 	bl	800446c <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006880:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 8006884:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	0690      	lsls	r0, r2, #26
 800688a:	f53f af50 	bmi.w	800672e <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800688e:	f7fd fded 	bl	800446c <HAL_GetTick>
 8006892:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006894:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006898:	2819      	cmp	r0, #25
 800689a:	d9f4      	bls.n	8006886 <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800689c:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800689e:	2701      	movs	r7, #1
 80068a0:	e745      	b.n	800672e <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068a2:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 80068a6:	7812      	ldrb	r2, [r2, #0]
 80068a8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80068aa:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 80068ae:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 80068b2:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80068b4:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 80068b8:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 80068ba:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 80068bc:	3101      	adds	r1, #1
      hi2c->XferSize--;
 80068be:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 80068c0:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068c4:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80068c8:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068cc:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 80068ce:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	f47f af13 	bne.w	80066fe <HAL_I2C_Master_Transmit+0xc2>
 80068d8:	2a00      	cmp	r2, #0
 80068da:	f43f af10 	beq.w	80066fe <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80068de:	f8db 2000 	ldr.w	r2, [fp]
 80068e2:	1c68      	adds	r0, r5, #1
 80068e4:	d134      	bne.n	8006950 <HAL_I2C_Master_Transmit+0x314>
 80068e6:	6993      	ldr	r3, [r2, #24]
 80068e8:	0619      	lsls	r1, r3, #24
 80068ea:	d5fc      	bpl.n	80068e6 <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068ec:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 80068f0:	b29b      	uxth	r3, r3
 80068f2:	2bff      	cmp	r3, #255	; 0xff
 80068f4:	d958      	bls.n	80069a8 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068f6:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 80068f8:	4929      	ldr	r1, [pc, #164]	; (80069a0 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80068fa:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80068fe:	6853      	ldr	r3, [r2, #4]
 8006900:	400b      	ands	r3, r1
 8006902:	4928      	ldr	r1, [pc, #160]	; (80069a4 <HAL_I2C_Master_Transmit+0x368>)
 8006904:	ea4a 0303 	orr.w	r3, sl, r3
 8006908:	4319      	orrs	r1, r3
 800690a:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 800690c:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 8006910:	b29b      	uxth	r3, r3
 8006912:	2b00      	cmp	r3, #0
 8006914:	f47f aef9 	bne.w	800670a <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006918:	4642      	mov	r2, r8
 800691a:	4629      	mov	r1, r5
 800691c:	4658      	mov	r0, fp
 800691e:	f7ff fd71 	bl	8006404 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006922:	2800      	cmp	r0, #0
 8006924:	d151      	bne.n	80069ca <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006926:	f8db 3000 	ldr.w	r3, [fp]
 800692a:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 800692c:	4c1a      	ldr	r4, [pc, #104]	; (8006998 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800692e:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8006930:	f8db 1000 	ldr.w	r1, [fp]
 8006934:	684b      	ldr	r3, [r1, #4]
 8006936:	4023      	ands	r3, r4
 8006938:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800693a:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800693e:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006942:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 8006946:	e6af      	b.n	80066a8 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 8006948:	2f00      	cmp	r7, #0
 800694a:	f43f aefb 	beq.w	8006744 <HAL_I2C_Master_Transmit+0x108>
 800694e:	e6fd      	b.n	800674c <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006950:	6993      	ldr	r3, [r2, #24]
 8006952:	061b      	lsls	r3, r3, #24
 8006954:	d4ca      	bmi.n	80068ec <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006956:	f7fd fd89 	bl	800446c <HAL_GetTick>
 800695a:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800695e:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006962:	4285      	cmp	r5, r0
 8006964:	d301      	bcc.n	800696a <HAL_I2C_Master_Transmit+0x32e>
 8006966:	2d00      	cmp	r5, #0
 8006968:	d1bb      	bne.n	80068e2 <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800696a:	6993      	ldr	r3, [r2, #24]
 800696c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8006970:	d1b7      	bne.n	80068e2 <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006972:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006976:	2120      	movs	r1, #32
          return HAL_ERROR;
 8006978:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800697a:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800697e:	430a      	orrs	r2, r1
 8006980:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006984:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006988:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 800698c:	e68c      	b.n	80066a8 <HAL_I2C_Master_Transmit+0x6c>
 800698e:	bf00      	nop
 8006990:	fc009800 	.word	0xfc009800
 8006994:	02002000 	.word	0x02002000
 8006998:	fe00e800 	.word	0xfe00e800
 800699c:	01ff2000 	.word	0x01ff2000
 80069a0:	fc009c00 	.word	0xfc009c00
 80069a4:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 80069a8:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 80069ac:	4808      	ldr	r0, [pc, #32]	; (80069d0 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 80069ae:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80069b0:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 80069b2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 80069b6:	6853      	ldr	r3, [r2, #4]
 80069b8:	4003      	ands	r3, r0
 80069ba:	ea4a 0303 	orr.w	r3, sl, r3
 80069be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80069c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80069c6:	6053      	str	r3, [r2, #4]
}
 80069c8:	e699      	b.n	80066fe <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 80069ca:	2001      	movs	r0, #1
 80069cc:	e66c      	b.n	80066a8 <HAL_I2C_Master_Transmit+0x6c>
 80069ce:	bf00      	nop
 80069d0:	fc009c00 	.word	0xfc009c00

080069d4 <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069d4:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 80069d6:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069d8:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069da:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 80069dc:	b103      	cbz	r3, 80069e0 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 80069de:	4718      	bx	r3
}
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop

080069e4 <HAL_I2C_SlaveTxCpltCallback>:
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop

080069e8 <I2C_ITSlaveSeqCplt>:
{
 80069e8:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80069ea:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069ec:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80069ee:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80069f0:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80069f4:	0451      	lsls	r1, r2, #17
 80069f6:	d526      	bpl.n	8006a46 <I2C_ITSlaveSeqCplt+0x5e>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80069fe:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a00:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006a04:	2b29      	cmp	r3, #41	; 0x29
 8006a06:	d028      	beq.n	8006a5a <I2C_ITSlaveSeqCplt+0x72>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a08:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a0e:	d000      	beq.n	8006a12 <I2C_ITSlaveSeqCplt+0x2a>
}
 8006a10:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a12:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a14:	2322      	movs	r3, #34	; 0x22
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a16:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8006a18:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a1c:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006a20:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a22:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a26:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a28:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006a2c:	2a28      	cmp	r2, #40	; 0x28
 8006a2e:	bf0c      	ite	eq
 8006a30:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 8006a34:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a38:	4013      	ands	r3, r2
 8006a3a:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006a3c:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a40:	f014 fada 	bl	801aff8 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8006a44:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006a46:	0412      	lsls	r2, r2, #16
 8006a48:	d5da      	bpl.n	8006a00 <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006a50:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006a52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006a56:	2b29      	cmp	r3, #41	; 0x29
 8006a58:	d1d6      	bne.n	8006a08 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a5a:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a5c:	2321      	movs	r3, #33	; 0x21
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a5e:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 8006a60:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006a64:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a68:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a6a:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a6e:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006a70:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8006a74:	2a28      	cmp	r2, #40	; 0x28
 8006a76:	bf0c      	ite	eq
 8006a78:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 8006a7c:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006a80:	4013      	ands	r3, r2
 8006a82:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 8006a84:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a88:	f7ff ffac 	bl	80069e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006a8c:	bd08      	pop	{r3, pc}
 8006a8e:	bf00      	nop

08006a90 <HAL_I2C_AddrCallback>:
}
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop

08006a94 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006a94:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8006a96:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006a98:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006a9a:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8006a9c:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006a9e:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006aa0:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006aa2:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 8006aa4:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006aa8:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006aac:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006aae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006ab2:	d10f      	bne.n	8006ad4 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006ab4:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006ab8:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006abc:	f013 0306 	ands.w	r3, r3, #6
 8006ac0:	d106      	bne.n	8006ad0 <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 8006ac2:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8006ac4:	3501      	adds	r5, #1
 8006ac6:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006ac8:	6c85      	ldr	r5, [r0, #72]	; 0x48
 8006aca:	2d02      	cmp	r5, #2
 8006acc:	d00c      	beq.n	8006ae8 <I2C_ITAddrCplt.part.0+0x54>
}
 8006ace:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ad0:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 8006ada:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 8006adc:	2300      	movs	r3, #0
 8006ade:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006ae2:	f7ff ffd5 	bl	8006a90 <HAL_I2C_AddrCallback>
}
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006ae8:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 8006aea:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006aec:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 8006aee:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006af2:	f7ff ffcd 	bl	8006a90 <HAL_I2C_AddrCallback>
}
 8006af6:	bd70      	pop	{r4, r5, r6, pc}

08006af8 <HAL_I2C_ListenCpltCallback>:
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop

08006afc <HAL_I2C_AbortCpltCallback>:
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <I2C_DMAAbort>:
{
 8006b00:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8006b02:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8006b04:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8006b06:	b10b      	cbz	r3, 8006b0c <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006b08:	2200      	movs	r2, #0
 8006b0a:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 8006b0c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8006b0e:	b10b      	cbz	r3, 8006b14 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006b10:	2200      	movs	r2, #0
 8006b12:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b14:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8006b18:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b1a:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006b1e:	d005      	beq.n	8006b2c <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b20:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006b22:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006b26:	f014 fa83 	bl	801b030 <__HAL_I2C_ErrorCallback_veneer>
}
 8006b2a:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006b2c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8006b2e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006b32:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006b36:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006b38:	f7ff ffe0 	bl	8006afc <HAL_I2C_AbortCpltCallback>
}
 8006b3c:	bd08      	pop	{r3, pc}
 8006b3e:	bf00      	nop

08006b40 <I2C_ITError>:
{
 8006b40:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b42:	4a5d      	ldr	r2, [pc, #372]	; (8006cb8 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b44:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006b46:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8006b4a:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b4c:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b50:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b52:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006b54:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8006b56:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b58:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 8006b5a:	ea41 0102 	orr.w	r1, r1, r2
 8006b5e:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006b60:	d874      	bhi.n	8006c4c <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b62:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b66:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b6a:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b6e:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b70:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b74:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b76:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b78:	bf14      	ite	ne
 8006b7a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 8006b7e:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b82:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b84:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b88:	bf18      	it	ne
 8006b8a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006b8e:	4013      	ands	r3, r2
 8006b90:	4a4a      	ldr	r2, [pc, #296]	; (8006cbc <I2C_ITError+0x17c>)
 8006b92:	6003      	str	r3, [r0, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006b94:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006b98:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8006b9a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006b9c:	6362      	str	r2, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006b9e:	b118      	cbz	r0, 8006ba8 <I2C_ITError+0x68>
 8006ba0:	2b11      	cmp	r3, #17
 8006ba2:	d01e      	beq.n	8006be2 <I2C_ITError+0xa2>
 8006ba4:	2b21      	cmp	r3, #33	; 0x21
 8006ba6:	d01c      	beq.n	8006be2 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8006ba8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006baa:	b118      	cbz	r0, 8006bb4 <I2C_ITError+0x74>
 8006bac:	2b12      	cmp	r3, #18
 8006bae:	d030      	beq.n	8006c12 <I2C_ITError+0xd2>
 8006bb0:	2b22      	cmp	r3, #34	; 0x22
 8006bb2:	d02e      	beq.n	8006c12 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bb4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006bb8:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bba:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006bbe:	d006      	beq.n	8006bce <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 8006bc0:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bc2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006bc4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8006bc8:	f014 fa32 	bl	801b030 <__HAL_I2C_ErrorCallback_veneer>
}
 8006bcc:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8006bce:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bd0:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006bd2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8006bd6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006bda:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8006bdc:	f7ff ff8e 	bl	8006afc <HAL_I2C_AbortCpltCallback>
}
 8006be0:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006be2:	6823      	ldr	r3, [r4, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	0451      	lsls	r1, r2, #17
 8006be8:	d45f      	bmi.n	8006caa <I2C_ITError+0x16a>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006bea:	f7ff fab1 	bl	8006150 <HAL_DMA_GetState>
 8006bee:	2801      	cmp	r0, #1
 8006bf0:	d0e0      	beq.n	8006bb4 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006bf2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8006bf4:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006bf6:	4932      	ldr	r1, [pc, #200]	; (8006cc0 <I2C_ITError+0x180>)
 8006bf8:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006bfa:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006bfe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006c00:	f7fe fd3c 	bl	800567c <HAL_DMA_Abort_IT>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	d0e1      	beq.n	8006bcc <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 8006c0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006c0e:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c10:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	0412      	lsls	r2, r2, #16
 8006c18:	d504      	bpl.n	8006c24 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c20:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c22:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c24:	f7ff fa94 	bl	8006150 <HAL_DMA_GetState>
 8006c28:	2801      	cmp	r0, #1
 8006c2a:	d0c3      	beq.n	8006bb4 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c2c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 8006c2e:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c30:	4923      	ldr	r1, [pc, #140]	; (8006cc0 <I2C_ITError+0x180>)
 8006c32:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 8006c34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c38:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8006c3a:	f7fe fd1f 	bl	800567c <HAL_DMA_Abort_IT>
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	d0c4      	beq.n	8006bcc <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 8006c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c48:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8006c4a:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c4c:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c4e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c52:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006c56:	6813      	ldr	r3, [r2, #0]
 8006c58:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006c5c:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c5e:	6803      	ldr	r3, [r0, #0]
 8006c60:	699a      	ldr	r2, [r3, #24]
 8006c62:	0792      	lsls	r2, r2, #30
 8006c64:	d501      	bpl.n	8006c6a <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8006c66:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c68:	6803      	ldr	r3, [r0, #0]
 8006c6a:	699a      	ldr	r2, [r3, #24]
 8006c6c:	07d6      	lsls	r6, r2, #31
 8006c6e:	d403      	bmi.n	8006c78 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c70:	699a      	ldr	r2, [r3, #24]
 8006c72:	f042 0201 	orr.w	r2, r2, #1
 8006c76:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006c78:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006c7c:	2b60      	cmp	r3, #96	; 0x60
 8006c7e:	d012      	beq.n	8006ca6 <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c80:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c82:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 8006c84:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c88:	699a      	ldr	r2, [r3, #24]
 8006c8a:	0695      	lsls	r5, r2, #26
 8006c8c:	d50b      	bpl.n	8006ca6 <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c8e:	699a      	ldr	r2, [r3, #24]
 8006c90:	06d0      	lsls	r0, r2, #27
 8006c92:	d506      	bpl.n	8006ca2 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c94:	2210      	movs	r2, #16
 8006c96:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c98:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c9a:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c9c:	f042 0204 	orr.w	r2, r2, #4
 8006ca0:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ca2:	2220      	movs	r2, #32
 8006ca4:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	e776      	b.n	8006b98 <I2C_ITError+0x58>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006cb0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006cb4:	e799      	b.n	8006bea <I2C_ITError+0xaa>
 8006cb6:	bf00      	nop
 8006cb8:	ffff0000 	.word	0xffff0000
 8006cbc:	08006ebd 	.word	0x08006ebd
 8006cc0:	08006b01 	.word	0x08006b01

08006cc4 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006cc4:	6803      	ldr	r3, [r0, #0]
{
 8006cc6:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006ccc:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006cce:	f412 7f80 	tst.w	r2, #256	; 0x100
 8006cd2:	d032      	beq.n	8006d3a <HAL_I2C_ER_IRQHandler+0x76>
 8006cd4:	f011 0f80 	tst.w	r1, #128	; 0x80
 8006cd8:	d021      	beq.n	8006d1e <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006cda:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006cdc:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006ce0:	f041 0101 	orr.w	r1, r1, #1
 8006ce4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ce6:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006ce8:	0553      	lsls	r3, r2, #21
 8006cea:	d507      	bpl.n	8006cfc <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cec:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006cee:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cf0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006cf4:	f041 0108 	orr.w	r1, r1, #8
 8006cf8:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006cfa:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006cfc:	0592      	lsls	r2, r2, #22
 8006cfe:	d507      	bpl.n	8006d10 <HAL_I2C_ER_IRQHandler+0x4c>
 8006d00:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d02:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d04:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006d08:	f043 0302 	orr.w	r3, r3, #2
 8006d0c:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006d0e:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 8006d10:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006d12:	f011 0f0b 	tst.w	r1, #11
 8006d16:	d10c      	bne.n	8006d32 <HAL_I2C_ER_IRQHandler+0x6e>
}
 8006d18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d1c:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d1e:	0553      	lsls	r3, r2, #21
 8006d20:	d4f6      	bmi.n	8006d10 <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006d22:	0593      	lsls	r3, r2, #22
 8006d24:	d5f4      	bpl.n	8006d10 <HAL_I2C_ER_IRQHandler+0x4c>
 8006d26:	060a      	lsls	r2, r1, #24
 8006d28:	d4eb      	bmi.n	8006d02 <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 8006d2a:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006d2c:	f011 0f0b 	tst.w	r1, #11
 8006d30:	d0f2      	beq.n	8006d18 <HAL_I2C_ER_IRQHandler+0x54>
}
 8006d32:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 8006d36:	f7ff bf03 	b.w	8006b40 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006d3a:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8006d3e:	d0f0      	beq.n	8006d22 <HAL_I2C_ER_IRQHandler+0x5e>
 8006d40:	0609      	lsls	r1, r1, #24
 8006d42:	d5e5      	bpl.n	8006d10 <HAL_I2C_ER_IRQHandler+0x4c>
 8006d44:	e7d3      	b.n	8006cee <HAL_I2C_ER_IRQHandler+0x2a>
 8006d46:	bf00      	nop

08006d48 <I2C_ITSlaveCplt.constprop.0>:
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8006d48:	b570      	push	{r4, r5, r6, lr}
 8006d4a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d4c:	6802      	ldr	r2, [r0, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d4e:	2520      	movs	r5, #32
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006d50:	6810      	ldr	r0, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006d52:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006d56:	61d5      	str	r5, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006d58:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
 8006d5c:	2b21      	cmp	r3, #33	; 0x21
 8006d5e:	d16d      	bne.n	8006e3c <I2C_ITSlaveCplt.constprop.0+0xf4>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d60:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d62:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006d66:	682a      	ldr	r2, [r5, #0]
 8006d68:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 8006d6c:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006d6e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d70:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 8006d72:	4d50      	ldr	r5, [pc, #320]	; (8006eb4 <I2C_ITSlaveCplt.constprop.0+0x16c>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d74:	6853      	ldr	r3, [r2, #4]
 8006d76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d7a:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8006d7c:	6822      	ldr	r2, [r4, #0]
 8006d7e:	6853      	ldr	r3, [r2, #4]
 8006d80:	402b      	ands	r3, r5
 8006d82:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d84:	6823      	ldr	r3, [r4, #0]
 8006d86:	699a      	ldr	r2, [r3, #24]
 8006d88:	0792      	lsls	r2, r2, #30
 8006d8a:	d502      	bpl.n	8006d92 <I2C_ITSlaveCplt.constprop.0+0x4a>
    hi2c->Instance->TXDR = 0x00U;
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	699a      	ldr	r2, [r3, #24]
 8006d94:	07d6      	lsls	r6, r2, #31
 8006d96:	d403      	bmi.n	8006da0 <I2C_ITSlaveCplt.constprop.0+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	f042 0201 	orr.w	r2, r2, #1
 8006d9e:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006da0:	0445      	lsls	r5, r0, #17
 8006da2:	d556      	bpl.n	8006e52 <I2C_ITSlaveCplt.constprop.0+0x10a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006da4:	6822      	ldr	r2, [r4, #0]
 8006da6:	6813      	ldr	r3, [r2, #0]
 8006da8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006dac:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8006dae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006db0:	b11b      	cbz	r3, 8006dba <I2C_ITSlaveCplt.constprop.0+0x72>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	6853      	ldr	r3, [r2, #4]
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006dba:	074b      	lsls	r3, r1, #29
 8006dbc:	d508      	bpl.n	8006dd0 <I2C_ITSlaveCplt.constprop.0+0x88>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006dbe:	6822      	ldr	r2, [r4, #0]
 8006dc0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dc2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006dc4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006dc6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006dc8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8006dca:	3301      	adds	r3, #1
 8006dcc:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8006dce:	bb72      	cbnz	r2, 8006e2e <I2C_ITSlaveCplt.constprop.0+0xe6>
  if (hi2c->XferCount != 0U)
 8006dd0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	b11b      	cbz	r3, 8006dde <I2C_ITSlaveCplt.constprop.0+0x96>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006dd6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006dd8:	f043 0304 	orr.w	r3, r3, #4
 8006ddc:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dde:	2600      	movs	r6, #0
 8006de0:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006de4:	6c65      	ldr	r5, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8006de6:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006de8:	2d00      	cmp	r5, #0
 8006dea:	d13d      	bne.n	8006e68 <I2C_ITSlaveCplt.constprop.0+0x120>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006dec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006dee:	4e32      	ldr	r6, [pc, #200]	; (8006eb8 <I2C_ITSlaveCplt.constprop.0+0x170>)
 8006df0:	42b3      	cmp	r3, r6
 8006df2:	d10e      	bne.n	8006e12 <I2C_ITSlaveCplt.constprop.0+0xca>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006df4:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006df8:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 8006dfa:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006dfe:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 8006e00:	f04f 0320 	mov.w	r3, #32
 8006e04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e08:	6325      	str	r5, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e0a:	d050      	beq.n	8006eae <I2C_ITSlaveCplt.constprop.0+0x166>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006e0c:	f7ff fdea 	bl	80069e4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006e10:	bd70      	pop	{r4, r5, r6, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 8006e12:	4620      	mov	r0, r4
 8006e14:	f7ff fde8 	bl	80069e8 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e18:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e1a:	62e6      	str	r6, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e1c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 8006e1e:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8006e22:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e26:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e28:	f7ff fe66 	bl	8006af8 <HAL_I2C_ListenCpltCallback>
}
 8006e2c:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->XferCount--;
 8006e2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006e30:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006e32:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8006e34:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	8563      	strh	r3, [r4, #42]	; 0x2a
 8006e3a:	e7c9      	b.n	8006dd0 <I2C_ITSlaveCplt.constprop.0+0x88>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006e3c:	2b22      	cmp	r3, #34	; 0x22
 8006e3e:	d197      	bne.n	8006d70 <I2C_ITSlaveCplt.constprop.0+0x28>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e40:	6825      	ldr	r5, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e42:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e46:	682a      	ldr	r2, [r5, #0]
 8006e48:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 8006e4c:	602a      	str	r2, [r5, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006e4e:	6323      	str	r3, [r4, #48]	; 0x30
 8006e50:	e78e      	b.n	8006d70 <I2C_ITSlaveCplt.constprop.0+0x28>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006e52:	0402      	lsls	r2, r0, #16
 8006e54:	d5b1      	bpl.n	8006dba <I2C_ITSlaveCplt.constprop.0+0x72>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006e56:	6822      	ldr	r2, [r4, #0]
 8006e58:	6813      	ldr	r3, [r2, #0]
 8006e5a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e5e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8006e60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1a5      	bne.n	8006db2 <I2C_ITSlaveCplt.constprop.0+0x6a>
 8006e66:	e7a8      	b.n	8006dba <I2C_ITSlaveCplt.constprop.0+0x72>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e68:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006e6a:	4620      	mov	r0, r4
 8006e6c:	f7ff fe68 	bl	8006b40 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e70:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006e74:	2b28      	cmp	r3, #40	; 0x28
 8006e76:	d1cb      	bne.n	8006e10 <I2C_ITSlaveCplt.constprop.0+0xc8>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e78:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8006e7a:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e7c:	490e      	ldr	r1, [pc, #56]	; (8006eb8 <I2C_ITSlaveCplt.constprop.0+0x170>)
  HAL_I2C_ListenCpltCallback(hi2c);
 8006e7e:	4620      	mov	r0, r4
  hi2c->XferISR = NULL;
 8006e80:	6366      	str	r6, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e82:	62e1      	str	r1, [r4, #44]	; 0x2c
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e84:	2110      	movs	r1, #16
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e86:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006e88:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e8c:	f884 6042 	strb.w	r6, [r4, #66]	; 0x42
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e90:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006e94:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006e98:	6813      	ldr	r3, [r2, #0]
 8006e9a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 8006e9e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea0:	6823      	ldr	r3, [r4, #0]
 8006ea2:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8006ea4:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8006ea8:	f7ff fe26 	bl	8006af8 <HAL_I2C_ListenCpltCallback>
}
 8006eac:	bd70      	pop	{r4, r5, r6, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006eae:	f014 f8a3 	bl	801aff8 <__HAL_I2C_SlaveRxCpltCallback_veneer>
}
 8006eb2:	bd70      	pop	{r4, r5, r6, pc}
 8006eb4:	fe00e800 	.word	0xfe00e800
 8006eb8:	ffff0000 	.word	0xffff0000

08006ebc <I2C_Slave_ISR_IT>:
{
 8006ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 8006ebe:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 8006ec2:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f000 8081 	beq.w	8006fcc <I2C_Slave_ISR_IT+0x110>
 8006eca:	4617      	mov	r7, r2
 8006ecc:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ece:	068a      	lsls	r2, r1, #26
 8006ed0:	4604      	mov	r4, r0
 8006ed2:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 8006ed4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006ed8:	d501      	bpl.n	8006ede <I2C_Slave_ISR_IT+0x22>
 8006eda:	06bb      	lsls	r3, r7, #26
 8006edc:	d462      	bmi.n	8006fa4 <I2C_Slave_ISR_IT+0xe8>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006ede:	06ea      	lsls	r2, r5, #27
 8006ee0:	d51c      	bpl.n	8006f1c <I2C_Slave_ISR_IT+0x60>
 8006ee2:	06fb      	lsls	r3, r7, #27
 8006ee4:	d51a      	bpl.n	8006f1c <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount == 0U)
 8006ee6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d15f      	bne.n	8006fae <I2C_Slave_ISR_IT+0xf2>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006eee:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006ef2:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	d101      	bne.n	8006efe <I2C_Slave_ISR_IT+0x42>
 8006efa:	2a28      	cmp	r2, #40	; 0x28
 8006efc:	d07f      	beq.n	8006ffe <I2C_Slave_ISR_IT+0x142>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006efe:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f02:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f04:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f06:	6823      	ldr	r3, [r4, #0]
 8006f08:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006f0a:	d102      	bne.n	8006f12 <I2C_Slave_ISR_IT+0x56>
 8006f0c:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006f10:	d162      	bne.n	8006fd8 <I2C_Slave_ISR_IT+0x11c>
  __HAL_UNLOCK(hi2c);
 8006f12:	2300      	movs	r3, #0
  return HAL_OK;
 8006f14:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 8006f16:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 8006f1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f1c:	076a      	lsls	r2, r5, #29
 8006f1e:	d40d      	bmi.n	8006f3c <I2C_Slave_ISR_IT+0x80>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f20:	0728      	lsls	r0, r5, #28
 8006f22:	d529      	bpl.n	8006f78 <I2C_Slave_ISR_IT+0xbc>
 8006f24:	0739      	lsls	r1, r7, #28
 8006f26:	d527      	bpl.n	8006f78 <I2C_Slave_ISR_IT+0xbc>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f28:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006f2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f30:	2b28      	cmp	r3, #40	; 0x28
 8006f32:	d060      	beq.n	8006ff6 <I2C_Slave_ISR_IT+0x13a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	2208      	movs	r2, #8
 8006f38:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006f3a:	e7ea      	b.n	8006f12 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006f3c:	077b      	lsls	r3, r7, #29
 8006f3e:	d5ef      	bpl.n	8006f20 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 8006f40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f42:	b29b      	uxth	r3, r3
 8006f44:	b16b      	cbz	r3, 8006f62 <I2C_Slave_ISR_IT+0xa6>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006f46:	6822      	ldr	r2, [r4, #0]
 8006f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f4a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006f4c:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8006f4e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006f50:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006f52:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f54:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006f56:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006f58:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006f5a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006f5c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006f5e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f60:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8006f62:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f64:	b29b      	uxth	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d1d3      	bne.n	8006f12 <I2C_Slave_ISR_IT+0x56>
 8006f6a:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 8006f6e:	d0d0      	beq.n	8006f12 <I2C_Slave_ISR_IT+0x56>
        I2C_ITSlaveSeqCplt(hi2c);
 8006f70:	4620      	mov	r0, r4
 8006f72:	f7ff fd39 	bl	80069e8 <I2C_ITSlaveSeqCplt>
 8006f76:	e7cc      	b.n	8006f12 <I2C_Slave_ISR_IT+0x56>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f78:	07aa      	lsls	r2, r5, #30
 8006f7a:	d5ca      	bpl.n	8006f12 <I2C_Slave_ISR_IT+0x56>
 8006f7c:	07bb      	lsls	r3, r7, #30
 8006f7e:	d5c8      	bpl.n	8006f12 <I2C_Slave_ISR_IT+0x56>
    if (hi2c->XferCount > 0U)
 8006f80:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	b323      	cbz	r3, 8006fd0 <I2C_Slave_ISR_IT+0x114>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f86:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006f88:	6823      	ldr	r3, [r4, #0]
 8006f8a:	7812      	ldrb	r2, [r2, #0]
 8006f8c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f8e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006f90:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006f92:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006f94:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8006f96:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8006f98:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8006f9a:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 8006f9c:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006f9e:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8006fa0:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8006fa2:	e7b6      	b.n	8006f12 <I2C_Slave_ISR_IT+0x56>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006fa4:	f7ff fed0 	bl	8006d48 <I2C_ITSlaveCplt.constprop.0>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006fa8:	06ea      	lsls	r2, r5, #27
 8006faa:	d5b7      	bpl.n	8006f1c <I2C_Slave_ISR_IT+0x60>
 8006fac:	e799      	b.n	8006ee2 <I2C_Slave_ISR_IT+0x26>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fae:	6823      	ldr	r3, [r4, #0]
 8006fb0:	2210      	movs	r2, #16
 8006fb2:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006fb4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006fb6:	f043 0304 	orr.w	r3, r3, #4
 8006fba:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006fbc:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006fc0:	d1a7      	bne.n	8006f12 <I2C_Slave_ISR_IT+0x56>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006fc2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f7ff fdbb 	bl	8006b40 <I2C_ITError>
 8006fca:	e7a2      	b.n	8006f12 <I2C_Slave_ISR_IT+0x56>
  __HAL_LOCK(hi2c);
 8006fcc:	2002      	movs	r0, #2
}
 8006fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006fd0:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 8006fd4:	d19d      	bne.n	8006f12 <I2C_Slave_ISR_IT+0x56>
 8006fd6:	e7cb      	b.n	8006f70 <I2C_Slave_ISR_IT+0xb4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	699a      	ldr	r2, [r3, #24]
 8006fdc:	0790      	lsls	r0, r2, #30
 8006fde:	d502      	bpl.n	8006fe6 <I2C_Slave_ISR_IT+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	699a      	ldr	r2, [r3, #24]
 8006fe8:	07d1      	lsls	r1, r2, #31
 8006fea:	d4c1      	bmi.n	8006f70 <I2C_Slave_ISR_IT+0xb4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006fec:	699a      	ldr	r2, [r3, #24]
 8006fee:	f042 0201 	orr.w	r2, r2, #1
 8006ff2:	619a      	str	r2, [r3, #24]
 8006ff4:	e7bc      	b.n	8006f70 <I2C_Slave_ISR_IT+0xb4>
 8006ff6:	4620      	mov	r0, r4
 8006ff8:	f7ff fd4c 	bl	8006a94 <I2C_ITAddrCplt.part.0>
 8006ffc:	e789      	b.n	8006f12 <I2C_Slave_ISR_IT+0x56>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ffe:	4918      	ldr	r1, [pc, #96]	; (8007060 <I2C_Slave_ISR_IT+0x1a4>)
  hi2c->State = HAL_I2C_STATE_READY;
 8007000:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007002:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 8007004:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007006:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007008:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800700a:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800700e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007012:	d512      	bpl.n	800703a <I2C_Slave_ISR_IT+0x17e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007014:	6822      	ldr	r2, [r4, #0]
 8007016:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800701a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800701c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800701e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 8007020:	3301      	adds	r3, #1
 8007022:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8007024:	b14a      	cbz	r2, 800703a <I2C_Slave_ISR_IT+0x17e>
      hi2c->XferCount--;
 8007026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8007028:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800702a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800702c:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800702e:	b29b      	uxth	r3, r3
 8007030:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007032:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007034:	f043 0304 	orr.w	r3, r3, #4
 8007038:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800703a:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800703c:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800703e:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 8007042:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8007044:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007048:	6813      	ldr	r3, [r2, #0]
 800704a:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800704e:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007050:	6823      	ldr	r3, [r4, #0]
 8007052:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 8007054:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 8007056:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800705a:	f7ff fd4d 	bl	8006af8 <HAL_I2C_ListenCpltCallback>
}
 800705e:	e758      	b.n	8006f12 <I2C_Slave_ISR_IT+0x56>
 8007060:	ffff0000 	.word	0xffff0000

08007064 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007064:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007068:	2a20      	cmp	r2, #32
 800706a:	d129      	bne.n	80070c0 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 800706c:	4603      	mov	r3, r0
{
 800706e:	b500      	push	{lr}
 8007070:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007074:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8007078:	2a01      	cmp	r2, #1
 800707a:	d023      	beq.n	80070c4 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 800707c:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800707e:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007080:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8007084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007088:	2224      	movs	r2, #36	; 0x24
 800708a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800708e:	6802      	ldr	r2, [r0, #0]
 8007090:	f022 0201 	bic.w	r2, r2, #1
 8007094:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007096:	6818      	ldr	r0, [r3, #0]
 8007098:	6802      	ldr	r2, [r0, #0]
 800709a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800709e:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 80070a0:	6818      	ldr	r0, [r3, #0]
 80070a2:	6802      	ldr	r2, [r0, #0]
 80070a4:	4311      	orrs	r1, r2
 80070a6:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80070a8:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 80070aa:	6819      	ldr	r1, [r3, #0]
 80070ac:	680a      	ldr	r2, [r1, #0]
 80070ae:	f042 0201 	orr.w	r2, r2, #1
 80070b2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80070b4:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80070b8:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80070bc:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80070c0:	2002      	movs	r0, #2
}
 80070c2:	4770      	bx	lr
    return HAL_BUSY;
 80070c4:	2002      	movs	r0, #2
}
 80070c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ca:	bf00      	nop

080070cc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070cc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
{
 80070d0:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80070d2:	2a20      	cmp	r2, #32
 80070d4:	fa5f fc82 	uxtb.w	ip, r2
 80070d8:	d121      	bne.n	800711e <HAL_I2CEx_ConfigDigitalFilter+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070da:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80070de:	2a01      	cmp	r2, #1
 80070e0:	d01d      	beq.n	800711e <HAL_I2CEx_ConfigDigitalFilter+0x52>
 80070e2:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070e4:	6800      	ldr	r0, [r0, #0]
    __HAL_LOCK(hi2c);
 80070e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80070ea:	2224      	movs	r2, #36	; 0x24
 80070ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80070f0:	6802      	ldr	r2, [r0, #0]
 80070f2:	f022 0201 	bic.w	r2, r2, #1
 80070f6:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80070f8:	6818      	ldr	r0, [r3, #0]
 80070fa:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80070fc:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007100:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007104:	2100      	movs	r1, #0
    hi2c->Instance->CR1 = tmpreg;
 8007106:	6002      	str	r2, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007108:	6818      	ldr	r0, [r3, #0]
 800710a:	6802      	ldr	r2, [r0, #0]
 800710c:	f042 0201 	orr.w	r2, r2, #1
 8007110:	6002      	str	r2, [r0, #0]

    return HAL_OK;
 8007112:	4608      	mov	r0, r1
    hi2c->State = HAL_I2C_STATE_READY;
 8007114:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8007118:	f883 1040 	strb.w	r1, [r3, #64]	; 0x40
    return HAL_OK;
 800711c:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 800711e:	2002      	movs	r0, #2
  }
}
 8007120:	4770      	bx	lr
 8007122:	bf00      	nop

08007124 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007124:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007126:	4c10      	ldr	r4, [pc, #64]	; (8007168 <HAL_PWREx_ConfigSupply+0x44>)
 8007128:	68e3      	ldr	r3, [r4, #12]
 800712a:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800712e:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007130:	d105      	bne.n	800713e <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007132:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007136:	1a18      	subs	r0, r3, r0
 8007138:	bf18      	it	ne
 800713a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800713c:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800713e:	f023 0307 	bic.w	r3, r3, #7
 8007142:	4303      	orrs	r3, r0
 8007144:	60e3      	str	r3, [r4, #12]
  tickstart = HAL_GetTick ();
 8007146:	f7fd f991 	bl	800446c <HAL_GetTick>
 800714a:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800714c:	e005      	b.n	800715a <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800714e:	f7fd f98d 	bl	800446c <HAL_GetTick>
 8007152:	1b40      	subs	r0, r0, r5
 8007154:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8007158:	d804      	bhi.n	8007164 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800715a:	6863      	ldr	r3, [r4, #4]
 800715c:	049b      	lsls	r3, r3, #18
 800715e:	d5f6      	bpl.n	800714e <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 8007160:	2000      	movs	r0, #0
}
 8007162:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007164:	2001      	movs	r0, #1
}
 8007166:	bd38      	pop	{r3, r4, r5, pc}
 8007168:	58024800 	.word	0x58024800

0800716c <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800716c:	4b3c      	ldr	r3, [pc, #240]	; (8007260 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800716e:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007170:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007172:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007174:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 8007176:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800717a:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800717c:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 8007180:	d038      	beq.n	80071f4 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007182:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007186:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800718a:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800718e:	fb05 f101 	mul.w	r1, r5, r1
 8007192:	2a01      	cmp	r2, #1
 8007194:	ee07 1a90 	vmov	s15, r1
 8007198:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800719c:	d002      	beq.n	80071a4 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800719e:	2a02      	cmp	r2, #2
 80071a0:	d050      	beq.n	8007244 <HAL_RCC_GetSysClockFreq.part.0+0xd8>
 80071a2:	b34a      	cbz	r2, 80071f8 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80071a4:	ee07 0a90 	vmov	s15, r0
 80071a8:	ed9f 5a2e 	vldr	s10, [pc, #184]	; 8007264 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80071ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b2:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80071b6:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 8007268 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 80071ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071be:	ee07 3a90 	vmov	s15, r3
 80071c2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80071c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80071ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80071ce:	eee7 7a06 	vfma.f32	s15, s14, s12
 80071d2:	ee66 6aa7 	vmul.f32	s13, s13, s15
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80071d6:	4b22      	ldr	r3, [pc, #136]	; (8007260 <HAL_RCC_GetSysClockFreq.part.0+0xf4>)
 80071d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071da:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80071de:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80071e0:	ee07 3a90 	vmov	s15, r3
 80071e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80071e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80071ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80071f0:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 80071f4:	bc30      	pop	{r4, r5}
 80071f6:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	0692      	lsls	r2, r2, #26
 80071fc:	d529      	bpl.n	8007252 <HAL_RCC_GetSysClockFreq.part.0+0xe6>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80071fe:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007200:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007204:	4a19      	ldr	r2, [pc, #100]	; (800726c <HAL_RCC_GetSysClockFreq.part.0+0x100>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007206:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800720a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800720c:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007210:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007214:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8007268 <HAL_RCC_GetSysClockFreq.part.0+0xfc>
 8007218:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800721c:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800721e:	ee06 3a10 	vmov	s12, r3
 8007222:	ee05 2a90 	vmov	s11, r2
 8007226:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 800722a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800722e:	ee36 6a26 	vadd.f32	s12, s12, s13
 8007232:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8007236:	eef0 7a46 	vmov.f32	s15, s12
 800723a:	eee7 7a05 	vfma.f32	s15, s14, s10
 800723e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007242:	e7c8      	b.n	80071d6 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007244:	ee07 0a90 	vmov	s15, r0
 8007248:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8007270 <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800724c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007250:	e7ae      	b.n	80071b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007252:	ee07 0a90 	vmov	s15, r0
 8007256:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8007274 <HAL_RCC_GetSysClockFreq.part.0+0x108>
 800725a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800725e:	e7a7      	b.n	80071b0 <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8007260:	58024400 	.word	0x58024400
 8007264:	4a742400 	.word	0x4a742400
 8007268:	39000000 	.word	0x39000000
 800726c:	03d09000 	.word	0x03d09000
 8007270:	4bbebc20 	.word	0x4bbebc20
 8007274:	4c742400 	.word	0x4c742400

08007278 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8007278:	2800      	cmp	r0, #0
 800727a:	f000 81ef 	beq.w	800765c <HAL_RCC_OscConfig+0x3e4>
{
 800727e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007280:	6803      	ldr	r3, [r0, #0]
 8007282:	4604      	mov	r4, r0
 8007284:	07d9      	lsls	r1, r3, #31
 8007286:	d52e      	bpl.n	80072e6 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007288:	49a4      	ldr	r1, [pc, #656]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 800728a:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800728c:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800728e:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007292:	2a10      	cmp	r2, #16
 8007294:	f000 8107 	beq.w	80074a6 <HAL_RCC_OscConfig+0x22e>
 8007298:	2a18      	cmp	r2, #24
 800729a:	f000 80ff 	beq.w	800749c <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800729e:	6863      	ldr	r3, [r4, #4]
 80072a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072a4:	f000 812a 	beq.w	80074fc <HAL_RCC_OscConfig+0x284>
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	f040 8188 	bne.w	80075be <HAL_RCC_OscConfig+0x346>
 80072ae:	4b9b      	ldr	r3, [pc, #620]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80072b6:	601a      	str	r2, [r3, #0]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80072be:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80072c0:	6863      	ldr	r3, [r4, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f000 815c 	beq.w	8007580 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 80072c8:	f7fd f8d0 	bl	800446c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072cc:	4e93      	ldr	r6, [pc, #588]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 80072ce:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072d0:	e005      	b.n	80072de <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80072d2:	f7fd f8cb 	bl	800446c <HAL_GetTick>
 80072d6:	1b40      	subs	r0, r0, r5
 80072d8:	2864      	cmp	r0, #100	; 0x64
 80072da:	f200 814f 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80072de:	6833      	ldr	r3, [r6, #0]
 80072e0:	039b      	lsls	r3, r3, #14
 80072e2:	d5f6      	bpl.n	80072d2 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80072e4:	6823      	ldr	r3, [r4, #0]
 80072e6:	079d      	lsls	r5, r3, #30
 80072e8:	f100 808a 	bmi.w	8007400 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80072ec:	06d9      	lsls	r1, r3, #27
 80072ee:	d533      	bpl.n	8007358 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072f0:	4a8a      	ldr	r2, [pc, #552]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80072f2:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80072f4:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80072f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	f000 80e3 	beq.w	80074c6 <HAL_RCC_OscConfig+0x24e>
 8007300:	2b18      	cmp	r3, #24
 8007302:	f000 80db 	beq.w	80074bc <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007306:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 8007308:	4d84      	ldr	r5, [pc, #528]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 8176 	beq.w	80075fc <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 8007310:	682b      	ldr	r3, [r5, #0]
 8007312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007316:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007318:	f7fd f8a8 	bl	800446c <HAL_GetTick>
 800731c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800731e:	e005      	b.n	800732c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007320:	f7fd f8a4 	bl	800446c <HAL_GetTick>
 8007324:	1b80      	subs	r0, r0, r6
 8007326:	2802      	cmp	r0, #2
 8007328:	f200 8128 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800732c:	682b      	ldr	r3, [r5, #0]
 800732e:	05db      	lsls	r3, r3, #23
 8007330:	d5f6      	bpl.n	8007320 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007332:	f7fd f8b3 	bl	800449c <HAL_GetREVID>
 8007336:	f241 0303 	movw	r3, #4099	; 0x1003
 800733a:	4298      	cmp	r0, r3
 800733c:	f200 8266 	bhi.w	800780c <HAL_RCC_OscConfig+0x594>
 8007340:	6a22      	ldr	r2, [r4, #32]
 8007342:	686b      	ldr	r3, [r5, #4]
 8007344:	2a20      	cmp	r2, #32
 8007346:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800734a:	bf0c      	ite	eq
 800734c:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8007350:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8007354:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	071d      	lsls	r5, r3, #28
 800735a:	d516      	bpl.n	800738a <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800735c:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800735e:	4d6f      	ldr	r5, [pc, #444]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 811b 	beq.w	800759c <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 8007366:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800736e:	f7fd f87d 	bl	800446c <HAL_GetTick>
 8007372:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007374:	e005      	b.n	8007382 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007376:	f7fd f879 	bl	800446c <HAL_GetTick>
 800737a:	1b80      	subs	r0, r0, r6
 800737c:	2802      	cmp	r0, #2
 800737e:	f200 80fd 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007382:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8007384:	0798      	lsls	r0, r3, #30
 8007386:	d5f6      	bpl.n	8007376 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007388:	6823      	ldr	r3, [r4, #0]
 800738a:	069a      	lsls	r2, r3, #26
 800738c:	d516      	bpl.n	80073bc <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800738e:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8007390:	4d62      	ldr	r5, [pc, #392]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007392:	2b00      	cmp	r3, #0
 8007394:	f000 8121 	beq.w	80075da <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800739e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80073a0:	f7fd f864 	bl	800446c <HAL_GetTick>
 80073a4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073a6:	e005      	b.n	80073b4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80073a8:	f7fd f860 	bl	800446c <HAL_GetTick>
 80073ac:	1b80      	subs	r0, r0, r6
 80073ae:	2802      	cmp	r0, #2
 80073b0:	f200 80e4 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80073b4:	682b      	ldr	r3, [r5, #0]
 80073b6:	049f      	lsls	r7, r3, #18
 80073b8:	d5f6      	bpl.n	80073a8 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80073ba:	6823      	ldr	r3, [r4, #0]
 80073bc:	0759      	lsls	r1, r3, #29
 80073be:	f100 80a3 	bmi.w	8007508 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80073c4:	b1d0      	cbz	r0, 80073fc <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80073c6:	4d55      	ldr	r5, [pc, #340]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80073c8:	692b      	ldr	r3, [r5, #16]
 80073ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80073ce:	2b18      	cmp	r3, #24
 80073d0:	f000 81b6 	beq.w	8007740 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 80073d4:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073d6:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80073d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073dc:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80073de:	f000 8149 	beq.w	8007674 <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 80073e2:	f7fd f843 	bl	800446c <HAL_GetTick>
 80073e6:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073e8:	e005      	b.n	80073f6 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073ea:	f7fd f83f 	bl	800446c <HAL_GetTick>
 80073ee:	1b00      	subs	r0, r0, r4
 80073f0:	2802      	cmp	r0, #2
 80073f2:	f200 80c3 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80073f6:	682b      	ldr	r3, [r5, #0]
 80073f8:	019b      	lsls	r3, r3, #6
 80073fa:	d4f6      	bmi.n	80073ea <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 80073fc:	2000      	movs	r0, #0
}
 80073fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007400:	4a46      	ldr	r2, [pc, #280]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 8007402:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007404:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007406:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800740a:	d12d      	bne.n	8007468 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800740c:	4b43      	ldr	r3, [pc, #268]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 800740e:	68e2      	ldr	r2, [r4, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	0759      	lsls	r1, r3, #29
 8007414:	d501      	bpl.n	800741a <HAL_RCC_OscConfig+0x1a2>
 8007416:	2a00      	cmp	r2, #0
 8007418:	d04e      	beq.n	80074b8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800741a:	4d40      	ldr	r5, [pc, #256]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 800741c:	682b      	ldr	r3, [r5, #0]
 800741e:	f023 0319 	bic.w	r3, r3, #25
 8007422:	4313      	orrs	r3, r2
 8007424:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007426:	f7fd f821 	bl	800446c <HAL_GetTick>
 800742a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800742c:	e005      	b.n	800743a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800742e:	f7fd f81d 	bl	800446c <HAL_GetTick>
 8007432:	1b80      	subs	r0, r0, r6
 8007434:	2802      	cmp	r0, #2
 8007436:	f200 80a1 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800743a:	682b      	ldr	r3, [r5, #0]
 800743c:	075b      	lsls	r3, r3, #29
 800743e:	d5f6      	bpl.n	800742e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007440:	f7fd f82c 	bl	800449c <HAL_GetREVID>
 8007444:	f241 0303 	movw	r3, #4099	; 0x1003
 8007448:	4298      	cmp	r0, r3
 800744a:	f200 80fe 	bhi.w	800764a <HAL_RCC_OscConfig+0x3d2>
 800744e:	6922      	ldr	r2, [r4, #16]
 8007450:	686b      	ldr	r3, [r5, #4]
 8007452:	2a40      	cmp	r2, #64	; 0x40
 8007454:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007458:	bf0c      	ite	eq
 800745a:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800745e:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8007462:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	e741      	b.n	80072ec <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007468:	2b18      	cmp	r3, #24
 800746a:	f000 80ea 	beq.w	8007642 <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800746e:	4d2b      	ldr	r5, [pc, #172]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007470:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007472:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007474:	2a00      	cmp	r2, #0
 8007476:	f000 80d3 	beq.w	8007620 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800747a:	f023 0319 	bic.w	r3, r3, #25
 800747e:	4313      	orrs	r3, r2
 8007480:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007482:	f7fc fff3 	bl	800446c <HAL_GetTick>
 8007486:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007488:	e004      	b.n	8007494 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800748a:	f7fc ffef 	bl	800446c <HAL_GetTick>
 800748e:	1b80      	subs	r0, r0, r6
 8007490:	2802      	cmp	r0, #2
 8007492:	d873      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007494:	682b      	ldr	r3, [r5, #0]
 8007496:	075f      	lsls	r7, r3, #29
 8007498:	d5f7      	bpl.n	800748a <HAL_RCC_OscConfig+0x212>
 800749a:	e7d1      	b.n	8007440 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800749c:	f001 0103 	and.w	r1, r1, #3
 80074a0:	2902      	cmp	r1, #2
 80074a2:	f47f aefc 	bne.w	800729e <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074a6:	4a1d      	ldr	r2, [pc, #116]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80074a8:	6812      	ldr	r2, [r2, #0]
 80074aa:	0392      	lsls	r2, r2, #14
 80074ac:	f57f af1b 	bpl.w	80072e6 <HAL_RCC_OscConfig+0x6e>
 80074b0:	6862      	ldr	r2, [r4, #4]
 80074b2:	2a00      	cmp	r2, #0
 80074b4:	f47f af17 	bne.w	80072e6 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 80074b8:	2001      	movs	r0, #1
}
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80074bc:	f002 0203 	and.w	r2, r2, #3
 80074c0:	2a01      	cmp	r2, #1
 80074c2:	f47f af20 	bne.w	8007306 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80074c6:	4b15      	ldr	r3, [pc, #84]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	05da      	lsls	r2, r3, #23
 80074cc:	d502      	bpl.n	80074d4 <HAL_RCC_OscConfig+0x25c>
 80074ce:	69e3      	ldr	r3, [r4, #28]
 80074d0:	2b80      	cmp	r3, #128	; 0x80
 80074d2:	d1f1      	bne.n	80074b8 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80074d4:	f7fc ffe2 	bl	800449c <HAL_GetREVID>
 80074d8:	f241 0303 	movw	r3, #4099	; 0x1003
 80074dc:	4298      	cmp	r0, r3
 80074de:	f200 80bf 	bhi.w	8007660 <HAL_RCC_OscConfig+0x3e8>
 80074e2:	6a22      	ldr	r2, [r4, #32]
 80074e4:	2a20      	cmp	r2, #32
 80074e6:	f000 81ad 	beq.w	8007844 <HAL_RCC_OscConfig+0x5cc>
 80074ea:	490c      	ldr	r1, [pc, #48]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80074ec:	684b      	ldr	r3, [r1, #4]
 80074ee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80074f2:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 80074f6:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	e72d      	b.n	8007358 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074fc:	4a07      	ldr	r2, [pc, #28]	; (800751c <HAL_RCC_OscConfig+0x2a4>)
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007504:	6013      	str	r3, [r2, #0]
 8007506:	e6db      	b.n	80072c0 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 8007508:	4d05      	ldr	r5, [pc, #20]	; (8007520 <HAL_RCC_OscConfig+0x2a8>)
 800750a:	682b      	ldr	r3, [r5, #0]
 800750c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007510:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007512:	f7fc ffab 	bl	800446c <HAL_GetTick>
 8007516:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007518:	e009      	b.n	800752e <HAL_RCC_OscConfig+0x2b6>
 800751a:	bf00      	nop
 800751c:	58024400 	.word	0x58024400
 8007520:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007524:	f7fc ffa2 	bl	800446c <HAL_GetTick>
 8007528:	1b80      	subs	r0, r0, r6
 800752a:	2864      	cmp	r0, #100	; 0x64
 800752c:	d826      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800752e:	682b      	ldr	r3, [r5, #0]
 8007530:	05da      	lsls	r2, r3, #23
 8007532:	d5f7      	bpl.n	8007524 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007534:	68a3      	ldr	r3, [r4, #8]
 8007536:	2b01      	cmp	r3, #1
 8007538:	f000 8171 	beq.w	800781e <HAL_RCC_OscConfig+0x5a6>
 800753c:	2b00      	cmp	r3, #0
 800753e:	f040 8174 	bne.w	800782a <HAL_RCC_OscConfig+0x5b2>
 8007542:	4baa      	ldr	r3, [pc, #680]	; (80077ec <HAL_RCC_OscConfig+0x574>)
 8007544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007546:	f022 0201 	bic.w	r2, r2, #1
 800754a:	671a      	str	r2, [r3, #112]	; 0x70
 800754c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800754e:	f022 0204 	bic.w	r2, r2, #4
 8007552:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007554:	68a3      	ldr	r3, [r4, #8]
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8140 	beq.w	80077dc <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 800755c:	f7fc ff86 	bl	800446c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007560:	4ea2      	ldr	r6, [pc, #648]	; (80077ec <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007562:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8007566:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007568:	e004      	b.n	8007574 <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800756a:	f7fc ff7f 	bl	800446c <HAL_GetTick>
 800756e:	1b40      	subs	r0, r0, r5
 8007570:	42b8      	cmp	r0, r7
 8007572:	d803      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007574:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007576:	079b      	lsls	r3, r3, #30
 8007578:	d5f7      	bpl.n	800756a <HAL_RCC_OscConfig+0x2f2>
 800757a:	e722      	b.n	80073c2 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800757c:	2003      	movs	r0, #3
}
 800757e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8007580:	f7fc ff74 	bl	800446c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007584:	4e99      	ldr	r6, [pc, #612]	; (80077ec <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 8007586:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007588:	e004      	b.n	8007594 <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800758a:	f7fc ff6f 	bl	800446c <HAL_GetTick>
 800758e:	1b40      	subs	r0, r0, r5
 8007590:	2864      	cmp	r0, #100	; 0x64
 8007592:	d8f3      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007594:	6833      	ldr	r3, [r6, #0]
 8007596:	039f      	lsls	r7, r3, #14
 8007598:	d4f7      	bmi.n	800758a <HAL_RCC_OscConfig+0x312>
 800759a:	e6a3      	b.n	80072e4 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800759c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800759e:	f023 0301 	bic.w	r3, r3, #1
 80075a2:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80075a4:	f7fc ff62 	bl	800446c <HAL_GetTick>
 80075a8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075aa:	e004      	b.n	80075b6 <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80075ac:	f7fc ff5e 	bl	800446c <HAL_GetTick>
 80075b0:	1b80      	subs	r0, r0, r6
 80075b2:	2802      	cmp	r0, #2
 80075b4:	d8e2      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80075b6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80075b8:	0799      	lsls	r1, r3, #30
 80075ba:	d4f7      	bmi.n	80075ac <HAL_RCC_OscConfig+0x334>
 80075bc:	e6e4      	b.n	8007388 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075c2:	4b8a      	ldr	r3, [pc, #552]	; (80077ec <HAL_RCC_OscConfig+0x574>)
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	f47f ae74 	bne.w	80072b2 <HAL_RCC_OscConfig+0x3a>
 80075ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	e672      	b.n	80072c0 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 80075da:	682b      	ldr	r3, [r5, #0]
 80075dc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075e0:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80075e2:	f7fc ff43 	bl	800446c <HAL_GetTick>
 80075e6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075e8:	e004      	b.n	80075f4 <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80075ea:	f7fc ff3f 	bl	800446c <HAL_GetTick>
 80075ee:	1b80      	subs	r0, r0, r6
 80075f0:	2802      	cmp	r0, #2
 80075f2:	d8c3      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80075f4:	682b      	ldr	r3, [r5, #0]
 80075f6:	0498      	lsls	r0, r3, #18
 80075f8:	d4f7      	bmi.n	80075ea <HAL_RCC_OscConfig+0x372>
 80075fa:	e6de      	b.n	80073ba <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007602:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007604:	f7fc ff32 	bl	800446c <HAL_GetTick>
 8007608:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800760a:	e004      	b.n	8007616 <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800760c:	f7fc ff2e 	bl	800446c <HAL_GetTick>
 8007610:	1b80      	subs	r0, r0, r6
 8007612:	2802      	cmp	r0, #2
 8007614:	d8b2      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007616:	682b      	ldr	r3, [r5, #0]
 8007618:	05df      	lsls	r7, r3, #23
 800761a:	d4f7      	bmi.n	800760c <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800761c:	6823      	ldr	r3, [r4, #0]
 800761e:	e69b      	b.n	8007358 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 8007620:	f023 0301 	bic.w	r3, r3, #1
 8007624:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007626:	f7fc ff21 	bl	800446c <HAL_GetTick>
 800762a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800762c:	e004      	b.n	8007638 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800762e:	f7fc ff1d 	bl	800446c <HAL_GetTick>
 8007632:	1b80      	subs	r0, r0, r6
 8007634:	2802      	cmp	r0, #2
 8007636:	d8a1      	bhi.n	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007638:	682b      	ldr	r3, [r5, #0]
 800763a:	0758      	lsls	r0, r3, #29
 800763c:	d4f7      	bmi.n	800762e <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	e654      	b.n	80072ec <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007642:	0790      	lsls	r0, r2, #30
 8007644:	f47f af13 	bne.w	800746e <HAL_RCC_OscConfig+0x1f6>
 8007648:	e6e0      	b.n	800740c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800764a:	686b      	ldr	r3, [r5, #4]
 800764c:	6922      	ldr	r2, [r4, #16]
 800764e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8007652:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007656:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	e647      	b.n	80072ec <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800765c:	2001      	movs	r0, #1
}
 800765e:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007660:	4a62      	ldr	r2, [pc, #392]	; (80077ec <HAL_RCC_OscConfig+0x574>)
 8007662:	6a21      	ldr	r1, [r4, #32]
 8007664:	68d3      	ldr	r3, [r2, #12]
 8007666:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800766a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800766e:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	e671      	b.n	8007358 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 8007674:	f7fc fefa 	bl	800446c <HAL_GetTick>
 8007678:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800767a:	e005      	b.n	8007688 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800767c:	f7fc fef6 	bl	800446c <HAL_GetTick>
 8007680:	1b80      	subs	r0, r0, r6
 8007682:	2802      	cmp	r0, #2
 8007684:	f63f af7a 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	0199      	lsls	r1, r3, #6
 800768c:	d4f6      	bmi.n	800767c <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800768e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8007690:	4b57      	ldr	r3, [pc, #348]	; (80077f0 <HAL_RCC_OscConfig+0x578>)
 8007692:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007694:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007696:	4957      	ldr	r1, [pc, #348]	; (80077f4 <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007698:	4e54      	ldr	r6, [pc, #336]	; (80077ec <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800769a:	4313      	orrs	r3, r2
 800769c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800769e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80076a2:	62ab      	str	r3, [r5, #40]	; 0x28
 80076a4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 80076a8:	3b01      	subs	r3, #1
 80076aa:	3a01      	subs	r2, #1
 80076ac:	025b      	lsls	r3, r3, #9
 80076ae:	0412      	lsls	r2, r2, #16
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80076b6:	4313      	orrs	r3, r2
 80076b8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80076ba:	3a01      	subs	r2, #1
 80076bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076c0:	4313      	orrs	r3, r2
 80076c2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80076c4:	3a01      	subs	r2, #1
 80076c6:	0612      	lsls	r2, r2, #24
 80076c8:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80076cc:	4313      	orrs	r3, r2
 80076ce:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 80076d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076d2:	f023 0301 	bic.w	r3, r3, #1
 80076d6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80076d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80076da:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80076dc:	4011      	ands	r1, r2
 80076de:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80076e2:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80076e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80076e8:	f023 030c 	bic.w	r3, r3, #12
 80076ec:	4313      	orrs	r3, r2
 80076ee:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80076f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076f2:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80076f4:	f023 0302 	bic.w	r3, r3, #2
 80076f8:	4313      	orrs	r3, r2
 80076fa:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80076fc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80076fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007702:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007704:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800770a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800770c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800770e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007712:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8007714:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8007716:	f043 0301 	orr.w	r3, r3, #1
 800771a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007722:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007724:	f7fc fea2 	bl	800446c <HAL_GetTick>
 8007728:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800772a:	e005      	b.n	8007738 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800772c:	f7fc fe9e 	bl	800446c <HAL_GetTick>
 8007730:	1b00      	subs	r0, r0, r4
 8007732:	2802      	cmp	r0, #2
 8007734:	f63f af22 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007738:	6833      	ldr	r3, [r6, #0]
 800773a:	019a      	lsls	r2, r3, #6
 800773c:	d5f6      	bpl.n	800772c <HAL_RCC_OscConfig+0x4b4>
 800773e:	e65d      	b.n	80073fc <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007740:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007742:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007744:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007746:	f43f ae5a 	beq.w	80073fe <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800774a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800774e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8007750:	428b      	cmp	r3, r1
 8007752:	f47f aeb1 	bne.w	80074b8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007756:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800775a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800775c:	429a      	cmp	r2, r3
 800775e:	f47f aeab 	bne.w	80074b8 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007762:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007764:	f3c6 0208 	ubfx	r2, r6, #0, #9
 8007768:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800776a:	429a      	cmp	r2, r3
 800776c:	f47f aea4 	bne.w	80074b8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007770:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007772:	f3c6 2246 	ubfx	r2, r6, #9, #7
 8007776:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007778:	429a      	cmp	r2, r3
 800777a:	f47f ae9d 	bne.w	80074b8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800777e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8007780:	f3c6 4206 	ubfx	r2, r6, #16, #7
 8007784:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007786:	429a      	cmp	r2, r3
 8007788:	f47f ae96 	bne.w	80074b8 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800778c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800778e:	f3c6 6606 	ubfx	r6, r6, #24, #7
 8007792:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007794:	429e      	cmp	r6, r3
 8007796:	f47f ae8f 	bne.w	80074b8 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800779a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800779c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800779e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f43f ae2a 	beq.w	80073fc <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 80077a8:	4a10      	ldr	r2, [pc, #64]	; (80077ec <HAL_RCC_OscConfig+0x574>)
 80077aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077ac:	f023 0301 	bic.w	r3, r3, #1
 80077b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 80077b2:	f7fc fe5b 	bl	800446c <HAL_GetTick>
 80077b6:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80077b8:	f7fc fe58 	bl	800446c <HAL_GetTick>
 80077bc:	42a8      	cmp	r0, r5
 80077be:	d0fb      	beq.n	80077b8 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077c0:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 80077c2:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80077c4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <HAL_RCC_OscConfig+0x57c>)
 80077c8:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80077ca:	4023      	ands	r3, r4
 80077cc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80077d0:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 80077d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80077d4:	f043 0301 	orr.w	r3, r3, #1
 80077d8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80077da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 80077dc:	f7fc fe46 	bl	800446c <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077e0:	4e02      	ldr	r6, [pc, #8]	; (80077ec <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077e2:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80077e6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80077e8:	e00c      	b.n	8007804 <HAL_RCC_OscConfig+0x58c>
 80077ea:	bf00      	nop
 80077ec:	58024400 	.word	0x58024400
 80077f0:	fffffc0c 	.word	0xfffffc0c
 80077f4:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077f8:	f7fc fe38 	bl	800446c <HAL_GetTick>
 80077fc:	1b40      	subs	r0, r0, r5
 80077fe:	42b8      	cmp	r0, r7
 8007800:	f63f aebc 	bhi.w	800757c <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007804:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8007806:	0798      	lsls	r0, r3, #30
 8007808:	d4f6      	bmi.n	80077f8 <HAL_RCC_OscConfig+0x580>
 800780a:	e5da      	b.n	80073c2 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800780c:	68eb      	ldr	r3, [r5, #12]
 800780e:	6a22      	ldr	r2, [r4, #32]
 8007810:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8007814:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007818:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800781a:	6823      	ldr	r3, [r4, #0]
 800781c:	e59c      	b.n	8007358 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800781e:	4a0e      	ldr	r2, [pc, #56]	; (8007858 <HAL_RCC_OscConfig+0x5e0>)
 8007820:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8007822:	f043 0301 	orr.w	r3, r3, #1
 8007826:	6713      	str	r3, [r2, #112]	; 0x70
 8007828:	e694      	b.n	8007554 <HAL_RCC_OscConfig+0x2dc>
 800782a:	2b05      	cmp	r3, #5
 800782c:	4b0a      	ldr	r3, [pc, #40]	; (8007858 <HAL_RCC_OscConfig+0x5e0>)
 800782e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007830:	f47f ae89 	bne.w	8007546 <HAL_RCC_OscConfig+0x2ce>
 8007834:	f042 0204 	orr.w	r2, r2, #4
 8007838:	671a      	str	r2, [r3, #112]	; 0x70
 800783a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800783c:	f042 0201 	orr.w	r2, r2, #1
 8007840:	671a      	str	r2, [r3, #112]	; 0x70
 8007842:	e687      	b.n	8007554 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007844:	4a04      	ldr	r2, [pc, #16]	; (8007858 <HAL_RCC_OscConfig+0x5e0>)
 8007846:	6853      	ldr	r3, [r2, #4]
 8007848:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800784c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007850:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	e580      	b.n	8007358 <HAL_RCC_OscConfig+0xe0>
 8007856:	bf00      	nop
 8007858:	58024400 	.word	0x58024400

0800785c <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800785c:	4a48      	ldr	r2, [pc, #288]	; (8007980 <HAL_RCC_GetSysClockFreq+0x124>)
 800785e:	6913      	ldr	r3, [r2, #16]
 8007860:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007864:	2b10      	cmp	r3, #16
 8007866:	d004      	beq.n	8007872 <HAL_RCC_GetSysClockFreq+0x16>
 8007868:	2b18      	cmp	r3, #24
 800786a:	d00d      	beq.n	8007888 <HAL_RCC_GetSysClockFreq+0x2c>
 800786c:	b11b      	cbz	r3, 8007876 <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800786e:	4845      	ldr	r0, [pc, #276]	; (8007984 <HAL_RCC_GetSysClockFreq+0x128>)
 8007870:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007872:	4845      	ldr	r0, [pc, #276]	; (8007988 <HAL_RCC_GetSysClockFreq+0x12c>)
 8007874:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007876:	6813      	ldr	r3, [r2, #0]
 8007878:	0699      	lsls	r1, r3, #26
 800787a:	d54a      	bpl.n	8007912 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800787c:	6813      	ldr	r3, [r2, #0]
 800787e:	4843      	ldr	r0, [pc, #268]	; (800798c <HAL_RCC_GetSysClockFreq+0x130>)
 8007880:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007884:	40d8      	lsrs	r0, r3
 8007886:	4770      	bx	lr
{
 8007888:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800788a:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800788c:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800788e:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 8007890:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007894:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8007896:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800789a:	d038      	beq.n	800790e <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800789c:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80078a0:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80078a4:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80078a8:	fb05 f101 	mul.w	r1, r5, r1
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	ee07 1a90 	vmov	s15, r1
 80078b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 80078b6:	d002      	beq.n	80078be <HAL_RCC_GetSysClockFreq+0x62>
 80078b8:	2b02      	cmp	r3, #2
 80078ba:	d02c      	beq.n	8007916 <HAL_RCC_GetSysClockFreq+0xba>
 80078bc:	b393      	cbz	r3, 8007924 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80078be:	ee07 0a90 	vmov	s15, r0
 80078c2:	ed9f 5a33 	vldr	s10, [pc, #204]	; 8007990 <HAL_RCC_GetSysClockFreq+0x134>
 80078c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80078cc:	eec5 6a27 	vdiv.f32	s13, s10, s15
 80078d0:	ed9f 6a30 	vldr	s12, [pc, #192]	; 8007994 <HAL_RCC_GetSysClockFreq+0x138>
 80078d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d8:	ee07 3a90 	vmov	s15, r3
 80078dc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80078e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80078e4:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80078e8:	eee7 7a06 	vfma.f32	s15, s14, s12
 80078ec:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80078f0:	4b23      	ldr	r3, [pc, #140]	; (8007980 <HAL_RCC_GetSysClockFreq+0x124>)
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80078f8:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80078fa:	ee07 3a90 	vmov	s15, r3
 80078fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800790a:	ee17 0a90 	vmov	r0, s15
}
 800790e:	bc30      	pop	{r4, r5}
 8007910:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007912:	481e      	ldr	r0, [pc, #120]	; (800798c <HAL_RCC_GetSysClockFreq+0x130>)
}
 8007914:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007916:	ee07 0a90 	vmov	s15, r0
 800791a:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 8007998 <HAL_RCC_GetSysClockFreq+0x13c>
 800791e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007922:	e7d2      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007924:	6813      	ldr	r3, [r2, #0]
 8007926:	069b      	lsls	r3, r3, #26
 8007928:	d522      	bpl.n	8007970 <HAL_RCC_GetSysClockFreq+0x114>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800792a:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800792c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007930:	4916      	ldr	r1, [pc, #88]	; (800798c <HAL_RCC_GetSysClockFreq+0x130>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007936:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007938:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800793c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007940:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8007994 <HAL_RCC_GetSysClockFreq+0x138>
 8007944:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007948:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800794a:	ee06 3a10 	vmov	s12, r3
 800794e:	ee05 1a90 	vmov	s11, r1
 8007952:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8007956:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800795a:	ee36 6a26 	vadd.f32	s12, s12, s13
 800795e:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8007962:	eef0 7a46 	vmov.f32	s15, s12
 8007966:	eee7 7a05 	vfma.f32	s15, s14, s10
 800796a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800796e:	e7bf      	b.n	80078f0 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007970:	ee07 0a90 	vmov	s15, r0
 8007974:	ed9f 5a09 	vldr	s10, [pc, #36]	; 800799c <HAL_RCC_GetSysClockFreq+0x140>
 8007978:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800797c:	e7a5      	b.n	80078ca <HAL_RCC_GetSysClockFreq+0x6e>
 800797e:	bf00      	nop
 8007980:	58024400 	.word	0x58024400
 8007984:	003d0900 	.word	0x003d0900
 8007988:	017d7840 	.word	0x017d7840
 800798c:	03d09000 	.word	0x03d09000
 8007990:	4a742400 	.word	0x4a742400
 8007994:	39000000 	.word	0x39000000
 8007998:	4bbebc20 	.word	0x4bbebc20
 800799c:	4c742400 	.word	0x4c742400

080079a0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80079a0:	2800      	cmp	r0, #0
 80079a2:	f000 811a 	beq.w	8007bda <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079a6:	4a92      	ldr	r2, [pc, #584]	; (8007bf0 <HAL_RCC_ClockConfig+0x250>)
{
 80079a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80079ac:	6813      	ldr	r3, [r2, #0]
 80079ae:	4604      	mov	r4, r0
 80079b0:	460d      	mov	r5, r1
 80079b2:	f003 030f 	and.w	r3, r3, #15
 80079b6:	428b      	cmp	r3, r1
 80079b8:	d20c      	bcs.n	80079d4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079ba:	6813      	ldr	r3, [r2, #0]
 80079bc:	f023 030f 	bic.w	r3, r3, #15
 80079c0:	430b      	orrs	r3, r1
 80079c2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079c4:	6813      	ldr	r3, [r2, #0]
 80079c6:	f003 030f 	and.w	r3, r3, #15
 80079ca:	428b      	cmp	r3, r1
 80079cc:	d002      	beq.n	80079d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80079ce:	2001      	movs	r0, #1
}
 80079d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	075f      	lsls	r7, r3, #29
 80079d8:	d50c      	bpl.n	80079f4 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80079da:	4986      	ldr	r1, [pc, #536]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 80079dc:	6920      	ldr	r0, [r4, #16]
 80079de:	698a      	ldr	r2, [r1, #24]
 80079e0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80079e4:	4290      	cmp	r0, r2
 80079e6:	d905      	bls.n	80079f4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80079e8:	698b      	ldr	r3, [r1, #24]
 80079ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079ee:	4303      	orrs	r3, r0
 80079f0:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079f2:	6823      	ldr	r3, [r4, #0]
 80079f4:	071e      	lsls	r6, r3, #28
 80079f6:	d50c      	bpl.n	8007a12 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80079f8:	497e      	ldr	r1, [pc, #504]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 80079fa:	6960      	ldr	r0, [r4, #20]
 80079fc:	69ca      	ldr	r2, [r1, #28]
 80079fe:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007a02:	4290      	cmp	r0, r2
 8007a04:	d905      	bls.n	8007a12 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007a06:	69cb      	ldr	r3, [r1, #28]
 8007a08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a0c:	4303      	orrs	r3, r0
 8007a0e:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	06d8      	lsls	r0, r3, #27
 8007a14:	d50c      	bpl.n	8007a30 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007a16:	4977      	ldr	r1, [pc, #476]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007a18:	69a0      	ldr	r0, [r4, #24]
 8007a1a:	69ca      	ldr	r2, [r1, #28]
 8007a1c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007a20:	4290      	cmp	r0, r2
 8007a22:	d905      	bls.n	8007a30 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007a24:	69cb      	ldr	r3, [r1, #28]
 8007a26:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007a2a:	4303      	orrs	r3, r0
 8007a2c:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	0699      	lsls	r1, r3, #26
 8007a32:	d50c      	bpl.n	8007a4e <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007a34:	496f      	ldr	r1, [pc, #444]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007a36:	69e0      	ldr	r0, [r4, #28]
 8007a38:	6a0a      	ldr	r2, [r1, #32]
 8007a3a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007a3e:	4290      	cmp	r0, r2
 8007a40:	d905      	bls.n	8007a4e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007a42:	6a0b      	ldr	r3, [r1, #32]
 8007a44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a48:	4303      	orrs	r3, r0
 8007a4a:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	079a      	lsls	r2, r3, #30
 8007a50:	f140 8083 	bpl.w	8007b5a <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a54:	4867      	ldr	r0, [pc, #412]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007a56:	68e1      	ldr	r1, [r4, #12]
 8007a58:	6982      	ldr	r2, [r0, #24]
 8007a5a:	f002 020f 	and.w	r2, r2, #15
 8007a5e:	4291      	cmp	r1, r2
 8007a60:	f240 80a9 	bls.w	8007bb6 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007a64:	6983      	ldr	r3, [r0, #24]
 8007a66:	f023 030f 	bic.w	r3, r3, #15
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	6183      	str	r3, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007a6e:	6823      	ldr	r3, [r4, #0]
 8007a70:	07df      	lsls	r7, r3, #31
 8007a72:	d474      	bmi.n	8007b5e <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007a74:	079f      	lsls	r7, r3, #30
 8007a76:	d507      	bpl.n	8007a88 <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007a78:	4a5e      	ldr	r2, [pc, #376]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007a7a:	68e1      	ldr	r1, [r4, #12]
 8007a7c:	6993      	ldr	r3, [r2, #24]
 8007a7e:	f003 030f 	and.w	r3, r3, #15
 8007a82:	428b      	cmp	r3, r1
 8007a84:	f200 80a0 	bhi.w	8007bc8 <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a88:	4a59      	ldr	r2, [pc, #356]	; (8007bf0 <HAL_RCC_ClockConfig+0x250>)
 8007a8a:	6813      	ldr	r3, [r2, #0]
 8007a8c:	f003 030f 	and.w	r3, r3, #15
 8007a90:	42ab      	cmp	r3, r5
 8007a92:	d909      	bls.n	8007aa8 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a94:	6813      	ldr	r3, [r2, #0]
 8007a96:	f023 030f 	bic.w	r3, r3, #15
 8007a9a:	432b      	orrs	r3, r5
 8007a9c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a9e:	6813      	ldr	r3, [r2, #0]
 8007aa0:	f003 030f 	and.w	r3, r3, #15
 8007aa4:	42ab      	cmp	r3, r5
 8007aa6:	d192      	bne.n	80079ce <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007aa8:	6823      	ldr	r3, [r4, #0]
 8007aaa:	075e      	lsls	r6, r3, #29
 8007aac:	d50c      	bpl.n	8007ac8 <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007aae:	4951      	ldr	r1, [pc, #324]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007ab0:	6920      	ldr	r0, [r4, #16]
 8007ab2:	698a      	ldr	r2, [r1, #24]
 8007ab4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007ab8:	4290      	cmp	r0, r2
 8007aba:	d205      	bcs.n	8007ac8 <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007abc:	698b      	ldr	r3, [r1, #24]
 8007abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ac2:	4303      	orrs	r3, r0
 8007ac4:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ac6:	6823      	ldr	r3, [r4, #0]
 8007ac8:	071d      	lsls	r5, r3, #28
 8007aca:	d50c      	bpl.n	8007ae6 <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007acc:	4949      	ldr	r1, [pc, #292]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007ace:	6960      	ldr	r0, [r4, #20]
 8007ad0:	69ca      	ldr	r2, [r1, #28]
 8007ad2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8007ad6:	4290      	cmp	r0, r2
 8007ad8:	d205      	bcs.n	8007ae6 <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007ada:	69cb      	ldr	r3, [r1, #28]
 8007adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ae0:	4303      	orrs	r3, r0
 8007ae2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ae4:	6823      	ldr	r3, [r4, #0]
 8007ae6:	06d8      	lsls	r0, r3, #27
 8007ae8:	d50c      	bpl.n	8007b04 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8007aea:	4942      	ldr	r1, [pc, #264]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007aec:	69a0      	ldr	r0, [r4, #24]
 8007aee:	69ca      	ldr	r2, [r1, #28]
 8007af0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007af4:	4290      	cmp	r0, r2
 8007af6:	d205      	bcs.n	8007b04 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8007af8:	69cb      	ldr	r3, [r1, #28]
 8007afa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8007afe:	4303      	orrs	r3, r0
 8007b00:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	0699      	lsls	r1, r3, #26
 8007b06:	d50b      	bpl.n	8007b20 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007b08:	4a3a      	ldr	r2, [pc, #232]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007b0a:	69e1      	ldr	r1, [r4, #28]
 8007b0c:	6a13      	ldr	r3, [r2, #32]
 8007b0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007b12:	4299      	cmp	r1, r3
 8007b14:	d204      	bcs.n	8007b20 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007b16:	6a13      	ldr	r3, [r2, #32]
 8007b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b1c:	430b      	orrs	r3, r1
 8007b1e:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b20:	f7ff fe9c 	bl	800785c <HAL_RCC_GetSysClockFreq>
 8007b24:	4a33      	ldr	r2, [pc, #204]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007b26:	4603      	mov	r3, r0
 8007b28:	4833      	ldr	r0, [pc, #204]	; (8007bf8 <HAL_RCC_ClockConfig+0x258>)
 8007b2a:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b2c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b2e:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8007b32:	4d32      	ldr	r5, [pc, #200]	; (8007bfc <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b34:	f002 020f 	and.w	r2, r2, #15
 8007b38:	4c31      	ldr	r4, [pc, #196]	; (8007c00 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b3a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b3c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b3e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 8007b42:	4830      	ldr	r0, [pc, #192]	; (8007c04 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b44:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007b48:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 8007b4a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8007b4c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007b4e:	40d3      	lsrs	r3, r2
 8007b50:	6023      	str	r3, [r4, #0]
}
 8007b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 8007b56:	f7fc bc27 	b.w	80043a8 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d594      	bpl.n	8007a88 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007b5e:	4a25      	ldr	r2, [pc, #148]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007b60:	68a1      	ldr	r1, [r4, #8]
 8007b62:	6993      	ldr	r3, [r2, #24]
 8007b64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007b68:	430b      	orrs	r3, r1
 8007b6a:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b6c:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b6e:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b70:	2902      	cmp	r1, #2
 8007b72:	d034      	beq.n	8007bde <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b74:	2903      	cmp	r1, #3
 8007b76:	d02d      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007b78:	2901      	cmp	r1, #1
 8007b7a:	d035      	beq.n	8007be8 <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b7c:	075b      	lsls	r3, r3, #29
 8007b7e:	f57f af26 	bpl.w	80079ce <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b82:	4e1c      	ldr	r6, [pc, #112]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b84:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007b88:	6933      	ldr	r3, [r6, #16]
 8007b8a:	f023 0307 	bic.w	r3, r3, #7
 8007b8e:	430b      	orrs	r3, r1
 8007b90:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 8007b92:	f7fc fc6b 	bl	800446c <HAL_GetTick>
 8007b96:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b98:	e004      	b.n	8007ba4 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b9a:	f7fc fc67 	bl	800446c <HAL_GetTick>
 8007b9e:	1bc0      	subs	r0, r0, r7
 8007ba0:	4540      	cmp	r0, r8
 8007ba2:	d81f      	bhi.n	8007be4 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ba4:	6933      	ldr	r3, [r6, #16]
 8007ba6:	6862      	ldr	r2, [r4, #4]
 8007ba8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007bac:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8007bb0:	d1f3      	bne.n	8007b9a <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	e75e      	b.n	8007a74 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bb6:	07da      	lsls	r2, r3, #31
 8007bb8:	d4d1      	bmi.n	8007b5e <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007bba:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <HAL_RCC_ClockConfig+0x254>)
 8007bbc:	6993      	ldr	r3, [r2, #24]
 8007bbe:	f003 030f 	and.w	r3, r3, #15
 8007bc2:	428b      	cmp	r3, r1
 8007bc4:	f67f af60 	bls.w	8007a88 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bc8:	6993      	ldr	r3, [r2, #24]
 8007bca:	f023 030f 	bic.w	r3, r3, #15
 8007bce:	430b      	orrs	r3, r1
 8007bd0:	6193      	str	r3, [r2, #24]
 8007bd2:	e759      	b.n	8007a88 <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007bd4:	0198      	lsls	r0, r3, #6
 8007bd6:	d4d4      	bmi.n	8007b82 <HAL_RCC_ClockConfig+0x1e2>
 8007bd8:	e6f9      	b.n	80079ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007bda:	2001      	movs	r0, #1
}
 8007bdc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bde:	039e      	lsls	r6, r3, #14
 8007be0:	d4cf      	bmi.n	8007b82 <HAL_RCC_ClockConfig+0x1e2>
 8007be2:	e6f4      	b.n	80079ce <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007be4:	2003      	movs	r0, #3
 8007be6:	e6f3      	b.n	80079d0 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007be8:	05da      	lsls	r2, r3, #23
 8007bea:	d4ca      	bmi.n	8007b82 <HAL_RCC_ClockConfig+0x1e2>
 8007bec:	e6ef      	b.n	80079ce <HAL_RCC_ClockConfig+0x2e>
 8007bee:	bf00      	nop
 8007bf0:	52002000 	.word	0x52002000
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	0801b9bc 	.word	0x0801b9bc
 8007bfc:	200008bc 	.word	0x200008bc
 8007c00:	200008c0 	.word	0x200008c0
 8007c04:	200008cc 	.word	0x200008cc

08007c08 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c0a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c0c:	6913      	ldr	r3, [r2, #16]
 8007c0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c12:	2b10      	cmp	r3, #16
 8007c14:	d01a      	beq.n	8007c4c <HAL_RCC_GetHCLKFreq+0x44>
 8007c16:	2b18      	cmp	r3, #24
 8007c18:	d023      	beq.n	8007c62 <HAL_RCC_GetHCLKFreq+0x5a>
 8007c1a:	b1cb      	cbz	r3, 8007c50 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 8007c1c:	4814      	ldr	r0, [pc, #80]	; (8007c70 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c1e:	4b13      	ldr	r3, [pc, #76]	; (8007c6c <HAL_RCC_GetHCLKFreq+0x64>)
 8007c20:	4914      	ldr	r1, [pc, #80]	; (8007c74 <HAL_RCC_GetHCLKFreq+0x6c>)
 8007c22:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c24:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c26:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c2a:	4c13      	ldr	r4, [pc, #76]	; (8007c78 <HAL_RCC_GetHCLKFreq+0x70>)
 8007c2c:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007c30:	4d12      	ldr	r5, [pc, #72]	; (8007c7c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c32:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c34:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c36:	f002 021f 	and.w	r2, r2, #31
 8007c3a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c3e:	f003 001f 	and.w	r0, r3, #31
 8007c42:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8007c46:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007c48:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8007c4a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c4c:	480c      	ldr	r0, [pc, #48]	; (8007c80 <HAL_RCC_GetHCLKFreq+0x78>)
 8007c4e:	e7e6      	b.n	8007c1e <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007c50:	6813      	ldr	r3, [r2, #0]
 8007c52:	069b      	lsls	r3, r3, #26
 8007c54:	d508      	bpl.n	8007c68 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007c56:	6813      	ldr	r3, [r2, #0]
 8007c58:	480a      	ldr	r0, [pc, #40]	; (8007c84 <HAL_RCC_GetHCLKFreq+0x7c>)
 8007c5a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007c5e:	40d8      	lsrs	r0, r3
 8007c60:	e7dd      	b.n	8007c1e <HAL_RCC_GetHCLKFreq+0x16>
 8007c62:	f7ff fa83 	bl	800716c <HAL_RCC_GetSysClockFreq.part.0>
 8007c66:	e7da      	b.n	8007c1e <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007c68:	4806      	ldr	r0, [pc, #24]	; (8007c84 <HAL_RCC_GetHCLKFreq+0x7c>)
 8007c6a:	e7d8      	b.n	8007c1e <HAL_RCC_GetHCLKFreq+0x16>
 8007c6c:	58024400 	.word	0x58024400
 8007c70:	003d0900 	.word	0x003d0900
 8007c74:	0801b9bc 	.word	0x0801b9bc
 8007c78:	200008c0 	.word	0x200008c0
 8007c7c:	200008bc 	.word	0x200008bc
 8007c80:	017d7840 	.word	0x017d7840
 8007c84:	03d09000 	.word	0x03d09000

08007c88 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c88:	4a1c      	ldr	r2, [pc, #112]	; (8007cfc <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c8a:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c8c:	6913      	ldr	r3, [r2, #16]
 8007c8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c92:	2b10      	cmp	r3, #16
 8007c94:	d021      	beq.n	8007cda <HAL_RCC_GetPCLK1Freq+0x52>
 8007c96:	2b18      	cmp	r3, #24
 8007c98:	d02a      	beq.n	8007cf0 <HAL_RCC_GetPCLK1Freq+0x68>
 8007c9a:	b303      	cbz	r3, 8007cde <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 8007c9c:	4818      	ldr	r0, [pc, #96]	; (8007d00 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007c9e:	4a17      	ldr	r2, [pc, #92]	; (8007cfc <HAL_RCC_GetPCLK1Freq+0x74>)
 8007ca0:	4918      	ldr	r1, [pc, #96]	; (8007d04 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8007ca2:	6993      	ldr	r3, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007ca4:	4c18      	ldr	r4, [pc, #96]	; (8007d08 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007ca6:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemCoreClock = common_system_clock;
 8007caa:	4d18      	ldr	r5, [pc, #96]	; (8007d0c <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007cac:	5ccb      	ldrb	r3, [r1, r3]
 8007cae:	f003 031f 	and.w	r3, r3, #31
 8007cb2:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cb4:	6993      	ldr	r3, [r2, #24]
 8007cb6:	f003 030f 	and.w	r3, r3, #15
  SystemCoreClock = common_system_clock;
 8007cba:	6028      	str	r0, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007cbc:	5ccb      	ldrb	r3, [r1, r3]
 8007cbe:	f003 031f 	and.w	r3, r3, #31
 8007cc2:	fa20 f303 	lsr.w	r3, r0, r3
 8007cc6:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8007cc8:	69d2      	ldr	r2, [r2, #28]
 8007cca:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8007cce:	5c88      	ldrb	r0, [r1, r2]
 8007cd0:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007cd4:	fa23 f000 	lsr.w	r0, r3, r0
 8007cd8:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cda:	480d      	ldr	r0, [pc, #52]	; (8007d10 <HAL_RCC_GetPCLK1Freq+0x88>)
 8007cdc:	e7df      	b.n	8007c9e <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cde:	6813      	ldr	r3, [r2, #0]
 8007ce0:	069b      	lsls	r3, r3, #26
 8007ce2:	d508      	bpl.n	8007cf6 <HAL_RCC_GetPCLK1Freq+0x6e>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8007ce4:	6813      	ldr	r3, [r2, #0]
 8007ce6:	480b      	ldr	r0, [pc, #44]	; (8007d14 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8007ce8:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8007cec:	40d8      	lsrs	r0, r3
 8007cee:	e7d6      	b.n	8007c9e <HAL_RCC_GetPCLK1Freq+0x16>
 8007cf0:	f7ff fa3c 	bl	800716c <HAL_RCC_GetSysClockFreq.part.0>
 8007cf4:	e7d3      	b.n	8007c9e <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007cf6:	4807      	ldr	r0, [pc, #28]	; (8007d14 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8007cf8:	e7d1      	b.n	8007c9e <HAL_RCC_GetPCLK1Freq+0x16>
 8007cfa:	bf00      	nop
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	003d0900 	.word	0x003d0900
 8007d04:	0801b9bc 	.word	0x0801b9bc
 8007d08:	200008c0 	.word	0x200008c0
 8007d0c:	200008bc 	.word	0x200008bc
 8007d10:	017d7840 	.word	0x017d7840
 8007d14:	03d09000 	.word	0x03d09000

08007d18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d1a:	4c3a      	ldr	r4, [pc, #232]	; (8007e04 <RCCEx_PLL2_Config+0xec>)
 8007d1c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d1e:	f003 0303 	and.w	r3, r3, #3
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d067      	beq.n	8007df6 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d26:	6823      	ldr	r3, [r4, #0]
 8007d28:	4606      	mov	r6, r0
 8007d2a:	460f      	mov	r7, r1
 8007d2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d30:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d32:	f7fc fb9b 	bl	800446c <HAL_GetTick>
 8007d36:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d38:	e004      	b.n	8007d44 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007d3a:	f7fc fb97 	bl	800446c <HAL_GetTick>
 8007d3e:	1b43      	subs	r3, r0, r5
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d856      	bhi.n	8007df2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d44:	6823      	ldr	r3, [r4, #0]
 8007d46:	011a      	lsls	r2, r3, #4
 8007d48:	d4f7      	bmi.n	8007d3a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d4a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007d4c:	6832      	ldr	r2, [r6, #0]
 8007d4e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007d52:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8007d56:	62a3      	str	r3, [r4, #40]	; 0x28
 8007d58:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	3a01      	subs	r2, #1
 8007d60:	025b      	lsls	r3, r3, #9
 8007d62:	0412      	lsls	r2, r2, #16
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	6872      	ldr	r2, [r6, #4]
 8007d6e:	3a01      	subs	r2, #1
 8007d70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007d74:	4313      	orrs	r3, r2
 8007d76:	6932      	ldr	r2, [r6, #16]
 8007d78:	3a01      	subs	r2, #1
 8007d7a:	0612      	lsls	r2, r2, #24
 8007d7c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007d80:	4313      	orrs	r3, r2
 8007d82:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007d84:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007d86:	6972      	ldr	r2, [r6, #20]
 8007d88:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d90:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007d92:	69b3      	ldr	r3, [r6, #24]
 8007d94:	f022 0220 	bic.w	r2, r2, #32
 8007d98:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007d9a:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007d9c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007d9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007da0:	f022 0210 	bic.w	r2, r2, #16
 8007da4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007da6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007da8:	69f2      	ldr	r2, [r6, #28]
 8007daa:	400b      	ands	r3, r1
 8007dac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007db0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007db2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007db4:	f043 0310 	orr.w	r3, r3, #16
 8007db8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007dba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007dbc:	b1ef      	cbz	r7, 8007dfa <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007dbe:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007dc0:	bf0c      	ite	eq
 8007dc2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007dc6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 8007dca:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007dcc:	4c0d      	ldr	r4, [pc, #52]	; (8007e04 <RCCEx_PLL2_Config+0xec>)
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007dd4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dd6:	f7fc fb49 	bl	800446c <HAL_GetTick>
 8007dda:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ddc:	e004      	b.n	8007de8 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8007dde:	f7fc fb45 	bl	800446c <HAL_GetTick>
 8007de2:	1b40      	subs	r0, r0, r5
 8007de4:	2802      	cmp	r0, #2
 8007de6:	d804      	bhi.n	8007df2 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	011b      	lsls	r3, r3, #4
 8007dec:	d5f7      	bpl.n	8007dde <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 8007dee:	2000      	movs	r0, #0
}
 8007df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007df2:	2003      	movs	r0, #3
}
 8007df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007df6:	2001      	movs	r0, #1
}
 8007df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007dfa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e00:	e7e4      	b.n	8007dcc <RCCEx_PLL2_Config+0xb4>
 8007e02:	bf00      	nop
 8007e04:	58024400 	.word	0x58024400
 8007e08:	ffff0007 	.word	0xffff0007

08007e0c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e0e:	4c3a      	ldr	r4, [pc, #232]	; (8007ef8 <RCCEx_PLL3_Config+0xec>)
 8007e10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e12:	f003 0303 	and.w	r3, r3, #3
 8007e16:	2b03      	cmp	r3, #3
 8007e18:	d067      	beq.n	8007eea <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e1a:	6823      	ldr	r3, [r4, #0]
 8007e1c:	4606      	mov	r6, r0
 8007e1e:	460f      	mov	r7, r1
 8007e20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e24:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fc fb21 	bl	800446c <HAL_GetTick>
 8007e2a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e2c:	e004      	b.n	8007e38 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007e2e:	f7fc fb1d 	bl	800446c <HAL_GetTick>
 8007e32:	1b43      	subs	r3, r0, r5
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d856      	bhi.n	8007ee6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007e38:	6823      	ldr	r3, [r4, #0]
 8007e3a:	009a      	lsls	r2, r3, #2
 8007e3c:	d4f7      	bmi.n	8007e2e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007e3e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e40:	6832      	ldr	r2, [r6, #0]
 8007e42:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8007e46:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8007e4a:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e4c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8007e50:	3b01      	subs	r3, #1
 8007e52:	3a01      	subs	r2, #1
 8007e54:	025b      	lsls	r3, r3, #9
 8007e56:	0412      	lsls	r2, r2, #16
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	6872      	ldr	r2, [r6, #4]
 8007e62:	3a01      	subs	r2, #1
 8007e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	6932      	ldr	r2, [r6, #16]
 8007e6c:	3a01      	subs	r2, #1
 8007e6e:	0612      	lsls	r2, r2, #24
 8007e70:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007e74:	4313      	orrs	r3, r2
 8007e76:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007e78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007e7a:	6972      	ldr	r2, [r6, #20]
 8007e7c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007e80:	4313      	orrs	r3, r2
 8007e82:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e84:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e86:	69b3      	ldr	r3, [r6, #24]
 8007e88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007e8c:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e8e:	4b1b      	ldr	r3, [pc, #108]	; (8007efc <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007e90:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007e92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007e94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e98:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007e9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e9c:	69f2      	ldr	r2, [r6, #28]
 8007e9e:	400b      	ands	r3, r1
 8007ea0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007ea4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007ea6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8007ea8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007eac:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007eae:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 8007eb0:	b1ef      	cbz	r7, 8007eee <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007eb2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007eb4:	bf0c      	ite	eq
 8007eb6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007eba:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 8007ebe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007ec0:	4c0d      	ldr	r4, [pc, #52]	; (8007ef8 <RCCEx_PLL3_Config+0xec>)
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ec8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eca:	f7fc facf 	bl	800446c <HAL_GetTick>
 8007ece:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007ed0:	e004      	b.n	8007edc <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007ed2:	f7fc facb 	bl	800446c <HAL_GetTick>
 8007ed6:	1b40      	subs	r0, r0, r5
 8007ed8:	2802      	cmp	r0, #2
 8007eda:	d804      	bhi.n	8007ee6 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	d5f7      	bpl.n	8007ed2 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8007ee2:	2000      	movs	r0, #0
}
 8007ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8007ee6:	2003      	movs	r0, #3
}
 8007ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8007eea:	2001      	movs	r0, #1
}
 8007eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007eee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ef2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ef4:	e7e4      	b.n	8007ec0 <RCCEx_PLL3_Config+0xb4>
 8007ef6:	bf00      	nop
 8007ef8:	58024400 	.word	0x58024400
 8007efc:	ffff0007 	.word	0xffff0007

08007f00 <HAL_RCCEx_PeriphCLKConfig>:
{
 8007f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f04:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8007f08:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f0a:	011d      	lsls	r5, r3, #4
 8007f0c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 8007f10:	d521      	bpl.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f12:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8007f14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007f18:	f000 8577 	beq.w	8008a0a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007f1c:	d80e      	bhi.n	8007f3c <HAL_RCCEx_PeriphCLKConfig+0x3c>
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	f000 85d2 	beq.w	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
 8007f24:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8007f28:	f040 85cb 	bne.w	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007f2c:	2102      	movs	r1, #2
 8007f2e:	3008      	adds	r0, #8
 8007f30:	f7ff fef2 	bl	8007d18 <RCCEx_PLL2_Config>
 8007f34:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8007f36:	b966      	cbnz	r6, 8007f52 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f38:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8007f3a:	e003      	b.n	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8007f3c:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 8007f40:	f040 85bf 	bne.w	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0xbc2>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8007f44:	4aa3      	ldr	r2, [pc, #652]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007f46:	2600      	movs	r6, #0
 8007f48:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8007f4a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007f4e:	430b      	orrs	r3, r1
 8007f50:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007f52:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007f56:	05d8      	lsls	r0, r3, #23
 8007f58:	d50a      	bpl.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 8007f5a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007f5c:	2904      	cmp	r1, #4
 8007f5e:	d806      	bhi.n	8007f6e <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8007f60:	e8df f011 	tbh	[pc, r1, lsl #1]
 8007f64:	0564055d 	.word	0x0564055d
 8007f68:	0310057b 	.word	0x0310057b
 8007f6c:	0310      	.short	0x0310
 8007f6e:	2601      	movs	r6, #1
 8007f70:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007f72:	0599      	lsls	r1, r3, #22
 8007f74:	d517      	bpl.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 8007f76:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007f78:	2980      	cmp	r1, #128	; 0x80
 8007f7a:	f000 8575 	beq.w	8008a68 <HAL_RCCEx_PeriphCLKConfig+0xb68>
 8007f7e:	f200 80e1 	bhi.w	8008144 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8007f82:	2900      	cmp	r1, #0
 8007f84:	f000 8446 	beq.w	8008814 <HAL_RCCEx_PeriphCLKConfig+0x914>
 8007f88:	2940      	cmp	r1, #64	; 0x40
 8007f8a:	f040 80e2 	bne.w	8008152 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007f8e:	2100      	movs	r1, #0
 8007f90:	f104 0008 	add.w	r0, r4, #8
 8007f94:	f7ff fec0 	bl	8007d18 <RCCEx_PLL2_Config>
 8007f98:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007f9a:	2d00      	cmp	r5, #0
 8007f9c:	f000 83f6 	beq.w	800878c <HAL_RCCEx_PeriphCLKConfig+0x88c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007fa0:	462e      	mov	r6, r5
 8007fa2:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fa6:	055f      	lsls	r7, r3, #21
 8007fa8:	d51a      	bpl.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 8007faa:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 8007fae:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8007fb2:	f000 8522 	beq.w	80089fa <HAL_RCCEx_PeriphCLKConfig+0xafa>
 8007fb6:	f200 80cf 	bhi.w	8008158 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8007fba:	2900      	cmp	r1, #0
 8007fbc:	f000 8431 	beq.w	8008822 <HAL_RCCEx_PeriphCLKConfig+0x922>
 8007fc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007fc4:	f040 80d0 	bne.w	8008168 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007fc8:	2100      	movs	r1, #0
 8007fca:	f104 0008 	add.w	r0, r4, #8
 8007fce:	f7ff fea3 	bl	8007d18 <RCCEx_PLL2_Config>
 8007fd2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8007fd4:	2d00      	cmp	r5, #0
 8007fd6:	f000 83f8 	beq.w	80087ca <HAL_RCCEx_PeriphCLKConfig+0x8ca>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007fda:	462e      	mov	r6, r5
 8007fdc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8007fe0:	0518      	lsls	r0, r3, #20
 8007fe2:	d51a      	bpl.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 8007fe4:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 8007fe8:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8007fec:	f000 852d 	beq.w	8008a4a <HAL_RCCEx_PeriphCLKConfig+0xb4a>
 8007ff0:	f200 80bd 	bhi.w	800816e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007ff4:	2900      	cmp	r1, #0
 8007ff6:	f000 8406 	beq.w	8008806 <HAL_RCCEx_PeriphCLKConfig+0x906>
 8007ffa:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8007ffe:	f040 80be 	bne.w	800817e <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008002:	2100      	movs	r1, #0
 8008004:	f104 0008 	add.w	r0, r4, #8
 8008008:	f7ff fe86 	bl	8007d18 <RCCEx_PLL2_Config>
 800800c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800800e:	2d00      	cmp	r5, #0
 8008010:	f000 83b1 	beq.w	8008776 <HAL_RCCEx_PeriphCLKConfig+0x876>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008014:	462e      	mov	r6, r5
 8008016:	e9d4 3200 	ldrd	r3, r2, [r4]
 800801a:	0199      	lsls	r1, r3, #6
 800801c:	d51a      	bpl.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800801e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008020:	2920      	cmp	r1, #32
 8008022:	f000 84b4 	beq.w	800898e <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8008026:	f200 80ad 	bhi.w	8008184 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800802a:	b139      	cbz	r1, 800803c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800802c:	2910      	cmp	r1, #16
 800802e:	f040 80ac 	bne.w	800818a <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008032:	4a68      	ldr	r2, [pc, #416]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008034:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008036:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800803a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800803c:	2d00      	cmp	r5, #0
 800803e:	f040 8418 	bne.w	8008872 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008042:	4a64      	ldr	r2, [pc, #400]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008044:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008046:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008048:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800804c:	430b      	orrs	r3, r1
 800804e:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008050:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008054:	04df      	lsls	r7, r3, #19
 8008056:	d519      	bpl.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 8008058:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800805a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800805e:	f000 84ec 	beq.w	8008a3a <HAL_RCCEx_PeriphCLKConfig+0xb3a>
 8008062:	f200 8095 	bhi.w	8008190 <HAL_RCCEx_PeriphCLKConfig+0x290>
 8008066:	2900      	cmp	r1, #0
 8008068:	f000 83c7 	beq.w	80087fa <HAL_RCCEx_PeriphCLKConfig+0x8fa>
 800806c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008070:	f040 8096 	bne.w	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008074:	2100      	movs	r1, #0
 8008076:	f104 0008 	add.w	r0, r4, #8
 800807a:	f7ff fe4d 	bl	8007d18 <RCCEx_PLL2_Config>
 800807e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008080:	2d00      	cmp	r5, #0
 8008082:	f000 838d 	beq.w	80087a0 <HAL_RCCEx_PeriphCLKConfig+0x8a0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008086:	462e      	mov	r6, r5
 8008088:	e9d4 3200 	ldrd	r3, r2, [r4]
 800808c:	0498      	lsls	r0, r3, #18
 800808e:	d51d      	bpl.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 8008090:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8008092:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 8008096:	f000 8466 	beq.w	8008966 <HAL_RCCEx_PeriphCLKConfig+0xa66>
 800809a:	f200 8084 	bhi.w	80081a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800809e:	b149      	cbz	r1, 80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80080a0:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80080a4:	f040 8088 	bne.w	80081b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080a8:	2101      	movs	r1, #1
 80080aa:	f104 0008 	add.w	r0, r4, #8
 80080ae:	f7ff fe33 	bl	8007d18 <RCCEx_PLL2_Config>
 80080b2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80080b4:	2d00      	cmp	r5, #0
 80080b6:	f040 83eb 	bne.w	8008890 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80080ba:	4a46      	ldr	r2, [pc, #280]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080bc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80080be:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80080c0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80080c4:	430b      	orrs	r3, r1
 80080c6:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80080c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80080cc:	0459      	lsls	r1, r3, #17
 80080ce:	d51d      	bpl.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 80080d0:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80080d4:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80080d8:	f000 844f 	beq.w	800897a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80080dc:	d86f      	bhi.n	80081be <HAL_RCCEx_PeriphCLKConfig+0x2be>
 80080de:	b141      	cbz	r1, 80080f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80080e0:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80080e4:	d173      	bne.n	80081ce <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80080e6:	2101      	movs	r1, #1
 80080e8:	f104 0008 	add.w	r0, r4, #8
 80080ec:	f7ff fe14 	bl	8007d18 <RCCEx_PLL2_Config>
 80080f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80080f2:	2d00      	cmp	r5, #0
 80080f4:	f040 83d4 	bne.w	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80080f8:	4a36      	ldr	r2, [pc, #216]	; (80081d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80080fa:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 80080fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008100:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008104:	430b      	orrs	r3, r1
 8008106:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008108:	e9d4 3200 	ldrd	r3, r2, [r4]
 800810c:	041f      	lsls	r7, r3, #16
 800810e:	d50d      	bpl.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 8008110:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8008112:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 8008116:	f000 841d 	beq.w	8008954 <HAL_RCCEx_PeriphCLKConfig+0xa54>
 800811a:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800811e:	f000 8239 	beq.w	8008594 <HAL_RCCEx_PeriphCLKConfig+0x694>
 8008122:	2900      	cmp	r1, #0
 8008124:	f000 823c 	beq.w	80085a0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
 8008128:	2601      	movs	r6, #1
 800812a:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800812c:	01d8      	lsls	r0, r3, #7
 800812e:	d55e      	bpl.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->FmcClockSelection)
 8008130:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008132:	2903      	cmp	r1, #3
 8008134:	f200 84f3 	bhi.w	8008b1e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008138:	e8df f011 	tbh	[pc, r1, lsl #1]
 800813c:	004e0053 	.word	0x004e0053
 8008140:	0053043d 	.word	0x0053043d
    switch (PeriphClkInit->Sai23ClockSelection)
 8008144:	29c0      	cmp	r1, #192	; 0xc0
 8008146:	f43f af28 	beq.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800814a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800814e:	f43f af24 	beq.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
 8008152:	2601      	movs	r6, #1
 8008154:	4635      	mov	r5, r6
 8008156:	e726      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 8008158:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800815c:	f43f af3a 	beq.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008160:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8008164:	f43f af36 	beq.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008168:	2601      	movs	r6, #1
 800816a:	4635      	mov	r5, r6
 800816c:	e738      	b.n	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800816e:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8008172:	f43f af4c 	beq.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8008176:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800817a:	f43f af48 	beq.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800817e:	2601      	movs	r6, #1
 8008180:	4635      	mov	r5, r6
 8008182:	e74a      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 8008184:	2930      	cmp	r1, #48	; 0x30
 8008186:	f43f af59 	beq.w	800803c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800818a:	2601      	movs	r6, #1
 800818c:	4635      	mov	r5, r6
 800818e:	e761      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 8008190:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 8008194:	f43f af74 	beq.w	8008080 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8008198:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800819c:	f43f af70 	beq.w	8008080 <HAL_RCCEx_PeriphCLKConfig+0x180>
 80081a0:	2601      	movs	r6, #1
 80081a2:	4635      	mov	r5, r6
 80081a4:	e772      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 80081a6:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 80081aa:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 80081ae:	d081      	beq.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80081b0:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 80081b4:	f43f af7e 	beq.w	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80081b8:	2601      	movs	r6, #1
 80081ba:	4635      	mov	r5, r6
 80081bc:	e786      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 80081be:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 80081c2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80081c6:	d094      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80081c8:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 80081cc:	d091      	beq.n	80080f2 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 80081ce:	2601      	movs	r6, #1
 80081d0:	4635      	mov	r5, r6
 80081d2:	e79b      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x20c>
 80081d4:	58024400 	.word	0x58024400
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80081d8:	4a34      	ldr	r2, [pc, #208]	; (80082ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>)
 80081da:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80081dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80081e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80081e2:	2d00      	cmp	r5, #0
 80081e4:	f000 834a 	beq.w	800887c <HAL_RCCEx_PeriphCLKConfig+0x97c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80081e8:	462e      	mov	r6, r5
 80081ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 80081ee:	0259      	lsls	r1, r3, #9
 80081f0:	f100 826f 	bmi.w	80086d2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80081f4:	07d8      	lsls	r0, r3, #31
 80081f6:	d52f      	bpl.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x358>
    switch (PeriphClkInit->Usart16ClockSelection)
 80081f8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80081fa:	2928      	cmp	r1, #40	; 0x28
 80081fc:	d82a      	bhi.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x354>
 80081fe:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008202:	020d      	.short	0x020d
 8008204:	00290029 	.word	0x00290029
 8008208:	00290029 	.word	0x00290029
 800820c:	00290029 	.word	0x00290029
 8008210:	02070029 	.word	0x02070029
 8008214:	00290029 	.word	0x00290029
 8008218:	00290029 	.word	0x00290029
 800821c:	00290029 	.word	0x00290029
 8008220:	04500029 	.word	0x04500029
 8008224:	00290029 	.word	0x00290029
 8008228:	00290029 	.word	0x00290029
 800822c:	00290029 	.word	0x00290029
 8008230:	020d0029 	.word	0x020d0029
 8008234:	00290029 	.word	0x00290029
 8008238:	00290029 	.word	0x00290029
 800823c:	00290029 	.word	0x00290029
 8008240:	020d0029 	.word	0x020d0029
 8008244:	00290029 	.word	0x00290029
 8008248:	00290029 	.word	0x00290029
 800824c:	00290029 	.word	0x00290029
 8008250:	020d0029 	.word	0x020d0029
 8008254:	2601      	movs	r6, #1
 8008256:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008258:	0799      	lsls	r1, r3, #30
 800825a:	d517      	bpl.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x38c>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800825c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800825e:	2905      	cmp	r1, #5
 8008260:	f200 8465 	bhi.w	8008b2e <HAL_RCCEx_PeriphCLKConfig+0xc2e>
 8008264:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008268:	0006000c 	.word	0x0006000c
 800826c:	000c0412 	.word	0x000c0412
 8008270:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008274:	2101      	movs	r1, #1
 8008276:	f104 0008 	add.w	r0, r4, #8
 800827a:	f7ff fd4d 	bl	8007d18 <RCCEx_PLL2_Config>
 800827e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008280:	2d00      	cmp	r5, #0
 8008282:	f000 82dd 	beq.w	8008840 <HAL_RCCEx_PeriphCLKConfig+0x940>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008286:	462e      	mov	r6, r5
 8008288:	e9d4 3200 	ldrd	r3, r2, [r4]
 800828c:	075f      	lsls	r7, r3, #29
 800828e:	d51b      	bpl.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008290:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 8008294:	2905      	cmp	r1, #5
 8008296:	f200 8446 	bhi.w	8008b26 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 800829a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800829e:	000f      	.short	0x000f
 80082a0:	03ed0009 	.word	0x03ed0009
 80082a4:	000f000f 	.word	0x000f000f
 80082a8:	000f      	.short	0x000f
 80082aa:	bf00      	nop
 80082ac:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80082b0:	2101      	movs	r1, #1
 80082b2:	f104 0008 	add.w	r0, r4, #8
 80082b6:	f7ff fd2f 	bl	8007d18 <RCCEx_PLL2_Config>
 80082ba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80082bc:	2d00      	cmp	r5, #0
 80082be:	f000 82c9 	beq.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0x954>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082c2:	462e      	mov	r6, r5
 80082c4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80082c8:	0698      	lsls	r0, r3, #26
 80082ca:	d51f      	bpl.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim1ClockSelection)
 80082cc:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80082d0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80082d4:	f000 8365 	beq.w	80089a2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80082d8:	f200 811c 	bhi.w	8008514 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80082dc:	b149      	cbz	r1, 80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 80082de:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 80082e2:	f040 8121 	bne.w	8008528 <HAL_RCCEx_PeriphCLKConfig+0x628>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80082e6:	2100      	movs	r1, #0
 80082e8:	f104 0008 	add.w	r0, r4, #8
 80082ec:	f7ff fd14 	bl	8007d18 <RCCEx_PLL2_Config>
 80082f0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80082f2:	2d00      	cmp	r5, #0
 80082f4:	f040 82b9 	bne.w	800886a <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80082f8:	4ab0      	ldr	r2, [pc, #704]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80082fa:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 80082fe:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008300:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8008304:	430b      	orrs	r3, r1
 8008306:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008308:	e9d4 3200 	ldrd	r3, r2, [r4]
 800830c:	0659      	lsls	r1, r3, #25
 800830e:	d51f      	bpl.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim2ClockSelection)
 8008310:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8008314:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8008318:	f000 8308 	beq.w	800892c <HAL_RCCEx_PeriphCLKConfig+0xa2c>
 800831c:	f200 8107 	bhi.w	800852e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8008320:	b149      	cbz	r1, 8008336 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008322:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008326:	f040 810c 	bne.w	8008542 <HAL_RCCEx_PeriphCLKConfig+0x642>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800832a:	2100      	movs	r1, #0
 800832c:	f104 0008 	add.w	r0, r4, #8
 8008330:	f7ff fcf2 	bl	8007d18 <RCCEx_PLL2_Config>
 8008334:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008336:	2d00      	cmp	r5, #0
 8008338:	f040 82b6 	bne.w	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800833c:	4a9f      	ldr	r2, [pc, #636]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800833e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 8008342:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008344:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8008348:	430b      	orrs	r3, r1
 800834a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800834c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008350:	061f      	lsls	r7, r3, #24
 8008352:	d51f      	bpl.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008354:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8008358:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800835c:	f000 82f0 	beq.w	8008940 <HAL_RCCEx_PeriphCLKConfig+0xa40>
 8008360:	f200 80f2 	bhi.w	8008548 <HAL_RCCEx_PeriphCLKConfig+0x648>
 8008364:	b149      	cbz	r1, 800837a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008366:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800836a:	f040 80f7 	bne.w	800855c <HAL_RCCEx_PeriphCLKConfig+0x65c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800836e:	2100      	movs	r1, #0
 8008370:	f104 0008 	add.w	r0, r4, #8
 8008374:	f7ff fcd0 	bl	8007d18 <RCCEx_PLL2_Config>
 8008378:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800837a:	2d00      	cmp	r5, #0
 800837c:	f040 828c 	bne.w	8008898 <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008380:	4a8e      	ldr	r2, [pc, #568]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008382:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 8008386:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008388:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800838c:	430b      	orrs	r3, r1
 800838e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008390:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008394:	0718      	lsls	r0, r3, #28
 8008396:	d50d      	bpl.n	80083b4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8008398:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800839c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80083a0:	f000 8313 	beq.w	80089ca <HAL_RCCEx_PeriphCLKConfig+0xaca>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80083a4:	4985      	ldr	r1, [pc, #532]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80083a6:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80083a8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80083ac:	4313      	orrs	r3, r2
 80083ae:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80083b4:	06d9      	lsls	r1, r3, #27
 80083b6:	d50d      	bpl.n	80083d4 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80083b8:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 80083bc:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80083c0:	f000 830f 	beq.w	80089e2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80083c4:	497d      	ldr	r1, [pc, #500]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80083c6:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80083c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083cc:	4313      	orrs	r3, r2
 80083ce:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80083d0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80083d4:	031f      	lsls	r7, r3, #12
 80083d6:	d50e      	bpl.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
    switch (PeriphClkInit->AdcClockSelection)
 80083d8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80083dc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80083e0:	f000 8102 	beq.w	80085e8 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
 80083e4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80083e8:	f000 8104 	beq.w	80085f4 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
 80083ec:	2900      	cmp	r1, #0
 80083ee:	f000 8292 	beq.w	8008916 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 80083f2:	2601      	movs	r6, #1
 80083f4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80083f6:	0358      	lsls	r0, r3, #13
 80083f8:	d50f      	bpl.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x51a>
    switch (PeriphClkInit->UsbClockSelection)
 80083fa:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80083fe:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8008402:	f000 80dd 	beq.w	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
 8008406:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800840a:	f000 80df 	beq.w	80085cc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
 800840e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8008412:	f000 8277 	beq.w	8008904 <HAL_RCCEx_PeriphCLKConfig+0xa04>
 8008416:	2601      	movs	r6, #1
 8008418:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800841a:	03d9      	lsls	r1, r3, #15
 800841c:	d509      	bpl.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x532>
    switch (PeriphClkInit->SdmmcClockSelection)
 800841e:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8008420:	2900      	cmp	r1, #0
 8008422:	f000 825a 	beq.w	80088da <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8008426:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800842a:	f000 81da 	beq.w	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800842e:	2601      	movs	r6, #1
 8008430:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008432:	009f      	lsls	r7, r3, #2
 8008434:	f100 80ff 	bmi.w	8008636 <HAL_RCCEx_PeriphCLKConfig+0x736>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008438:	0398      	lsls	r0, r3, #14
 800843a:	d50e      	bpl.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->RngClockSelection)
 800843c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008440:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8008444:	f000 8240 	beq.w	80088c8 <HAL_RCCEx_PeriphCLKConfig+0x9c8>
 8008448:	f240 808b 	bls.w	8008562 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800844c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008450:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008454:	f000 8088 	beq.w	8008568 <HAL_RCCEx_PeriphCLKConfig+0x668>
 8008458:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800845a:	02d9      	lsls	r1, r3, #11
 800845c:	d508      	bpl.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x570>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800845e:	4a57      	ldr	r2, [pc, #348]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008460:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8008462:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008464:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008468:	430b      	orrs	r3, r1
 800846a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800846c:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008470:	00df      	lsls	r7, r3, #3
 8008472:	d509      	bpl.n	8008488 <HAL_RCCEx_PeriphCLKConfig+0x588>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8008474:	4a51      	ldr	r2, [pc, #324]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008476:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800847a:	6913      	ldr	r3, [r2, #16]
 800847c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008480:	430b      	orrs	r3, r1
 8008482:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008484:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008488:	029d      	lsls	r5, r3, #10
 800848a:	d508      	bpl.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x59e>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800848c:	4a4b      	ldr	r2, [pc, #300]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 800848e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8008490:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008492:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008496:	430b      	orrs	r3, r1
 8008498:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800849a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800849e:	0058      	lsls	r0, r3, #1
 80084a0:	d50b      	bpl.n	80084ba <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084a2:	4b46      	ldr	r3, [pc, #280]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80084a4:	691a      	ldr	r2, [r3, #16]
 80084a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80084aa:	611a      	str	r2, [r3, #16]
 80084ac:	691a      	ldr	r2, [r3, #16]
 80084ae:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 80084b2:	430a      	orrs	r2, r1
 80084b4:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80084b6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	da08      	bge.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80084be:	4a3f      	ldr	r2, [pc, #252]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80084c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80084c2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80084c4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80084c8:	430b      	orrs	r3, r1
 80084ca:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80084cc:	e9d4 3200 	ldrd	r3, r2, [r4]
 80084d0:	0219      	lsls	r1, r3, #8
 80084d2:	d508      	bpl.n	80084e6 <HAL_RCCEx_PeriphCLKConfig+0x5e6>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80084d4:	4a39      	ldr	r2, [pc, #228]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80084d6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 80084da:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80084dc:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80084e0:	430b      	orrs	r3, r1
 80084e2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80084e4:	6862      	ldr	r2, [r4, #4]
 80084e6:	07d3      	lsls	r3, r2, #31
 80084e8:	f100 80b1 	bmi.w	800864e <HAL_RCCEx_PeriphCLKConfig+0x74e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80084ec:	0797      	lsls	r7, r2, #30
 80084ee:	f100 80bb 	bmi.w	8008668 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80084f2:	0755      	lsls	r5, r2, #29
 80084f4:	f100 80c5 	bmi.w	8008682 <HAL_RCCEx_PeriphCLKConfig+0x782>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80084f8:	0710      	lsls	r0, r2, #28
 80084fa:	f100 80cf 	bmi.w	800869c <HAL_RCCEx_PeriphCLKConfig+0x79c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80084fe:	06d1      	lsls	r1, r2, #27
 8008500:	f100 80d9 	bmi.w	80086b6 <HAL_RCCEx_PeriphCLKConfig+0x7b6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008504:	0692      	lsls	r2, r2, #26
 8008506:	f100 812a 	bmi.w	800875e <HAL_RCCEx_PeriphCLKConfig+0x85e>
    return HAL_OK;
 800850a:	1e30      	subs	r0, r6, #0
 800850c:	bf18      	it	ne
 800850e:	2001      	movne	r0, #1
}
 8008510:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 8008514:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 8008518:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800851c:	f43f aee9 	beq.w	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008520:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 8008524:	f43f aee5 	beq.w	80082f2 <HAL_RCCEx_PeriphCLKConfig+0x3f2>
 8008528:	2601      	movs	r6, #1
 800852a:	4635      	mov	r5, r6
 800852c:	e6ee      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x40c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800852e:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 8008532:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 8008536:	f43f aefe 	beq.w	8008336 <HAL_RCCEx_PeriphCLKConfig+0x436>
 800853a:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800853e:	f43f aefa 	beq.w	8008336 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8008542:	2601      	movs	r6, #1
 8008544:	4635      	mov	r5, r6
 8008546:	e703      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x450>
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008548:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800854c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8008550:	f43f af13 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8008554:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 8008558:	f43f af0f 	beq.w	800837a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800855c:	2601      	movs	r6, #1
 800855e:	4635      	mov	r5, r6
 8008560:	e718      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x494>
    switch (PeriphClkInit->RngClockSelection)
 8008562:	2900      	cmp	r1, #0
 8008564:	f47f af78 	bne.w	8008458 <HAL_RCCEx_PeriphCLKConfig+0x558>
    if (ret == HAL_OK)
 8008568:	2d00      	cmp	r5, #0
 800856a:	f040 81c7 	bne.w	80088fc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 8008570:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 8008574:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800857a:	430b      	orrs	r3, r1
 800857c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800857e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008582:	e76a      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->Sai1ClockSelection)
 8008584:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 8008586:	2d00      	cmp	r5, #0
 8008588:	f000 8114 	beq.w	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800858c:	462e      	mov	r6, r5
 800858e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008592:	e4ee      	b.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008594:	2101      	movs	r1, #1
 8008596:	f104 0008 	add.w	r0, r4, #8
 800859a:	f7ff fbbd 	bl	8007d18 <RCCEx_PLL2_Config>
 800859e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80085a0:	2d00      	cmp	r5, #0
 80085a2:	f040 8149 	bne.w	8008838 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085a6:	4a05      	ldr	r2, [pc, #20]	; (80085bc <HAL_RCCEx_PeriphCLKConfig+0x6bc>)
 80085a8:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80085aa:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80085ac:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80085b0:	430b      	orrs	r3, r1
 80085b2:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80085b4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80085b8:	e5b8      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x22c>
 80085ba:	bf00      	nop
 80085bc:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80085c0:	2101      	movs	r1, #1
 80085c2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80085c6:	f7ff fc21 	bl	8007e0c <RCCEx_PLL3_Config>
 80085ca:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80085cc:	2d00      	cmp	r5, #0
 80085ce:	f040 8173 	bne.w	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085d2:	4abb      	ldr	r2, [pc, #748]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80085d4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80085d8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80085da:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80085de:	430b      	orrs	r3, r1
 80085e0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80085e2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80085e6:	e718      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x51a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80085e8:	2102      	movs	r1, #2
 80085ea:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80085ee:	f7ff fc0d 	bl	8007e0c <RCCEx_PLL3_Config>
 80085f2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80085f4:	2d00      	cmp	r5, #0
 80085f6:	f040 815b 	bne.w	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80085fa:	4ab1      	ldr	r2, [pc, #708]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80085fc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 8008600:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8008602:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8008606:	430b      	orrs	r3, r1
 8008608:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800860a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800860e:	e6f2      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008610:	2101      	movs	r1, #1
 8008612:	f104 0008 	add.w	r0, r4, #8
 8008616:	f7ff fb7f 	bl	8007d18 <RCCEx_PLL2_Config>
 800861a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800861c:	2d00      	cmp	r5, #0
 800861e:	f040 8107 	bne.w	8008830 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008622:	4aa7      	ldr	r2, [pc, #668]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008624:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8008626:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008628:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800862c:	430b      	orrs	r3, r1
 800862e:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008630:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008634:	e610      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x358>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008636:	2102      	movs	r1, #2
 8008638:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800863c:	f7ff fbe6 	bl	8007e0c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008640:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8008644:	2800      	cmp	r0, #0
 8008646:	f43f aef7 	beq.w	8008438 <HAL_RCCEx_PeriphCLKConfig+0x538>
      status = HAL_ERROR;
 800864a:	2601      	movs	r6, #1
 800864c:	e6f4      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x538>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800864e:	2100      	movs	r1, #0
 8008650:	f104 0008 	add.w	r0, r4, #8
 8008654:	f7ff fb60 	bl	8007d18 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008658:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800865a:	2800      	cmp	r0, #0
 800865c:	f43f af46 	beq.w	80084ec <HAL_RCCEx_PeriphCLKConfig+0x5ec>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8008660:	0797      	lsls	r7, r2, #30
 8008662:	4606      	mov	r6, r0
 8008664:	f57f af45 	bpl.w	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008668:	2101      	movs	r1, #1
 800866a:	f104 0008 	add.w	r0, r4, #8
 800866e:	f7ff fb53 	bl	8007d18 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008672:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 8008674:	2800      	cmp	r0, #0
 8008676:	f43f af3c 	beq.w	80084f2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800867a:	0755      	lsls	r5, r2, #29
 800867c:	4606      	mov	r6, r0
 800867e:	f57f af3b 	bpl.w	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008682:	2102      	movs	r1, #2
 8008684:	f104 0008 	add.w	r0, r4, #8
 8008688:	f7ff fb46 	bl	8007d18 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800868c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800868e:	2800      	cmp	r0, #0
 8008690:	f43f af32 	beq.w	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008694:	4606      	mov	r6, r0
 8008696:	0710      	lsls	r0, r2, #28
 8008698:	f57f af31 	bpl.w	80084fe <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800869c:	2100      	movs	r1, #0
 800869e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80086a2:	f7ff fbb3 	bl	8007e0c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086a6:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 80086a8:	2800      	cmp	r0, #0
 80086aa:	f43f af28 	beq.w	80084fe <HAL_RCCEx_PeriphCLKConfig+0x5fe>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80086ae:	06d1      	lsls	r1, r2, #27
 80086b0:	4606      	mov	r6, r0
 80086b2:	f57f af27 	bpl.w	8008504 <HAL_RCCEx_PeriphCLKConfig+0x604>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086b6:	f104 0528 	add.w	r5, r4, #40	; 0x28
 80086ba:	2101      	movs	r1, #1
 80086bc:	4628      	mov	r0, r5
 80086be:	f7ff fba5 	bl	8007e0c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 80086c2:	2800      	cmp	r0, #0
 80086c4:	f000 8130 	beq.w	8008928 <HAL_RCCEx_PeriphCLKConfig+0xa28>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80086c8:	6863      	ldr	r3, [r4, #4]
 80086ca:	069b      	lsls	r3, r3, #26
 80086cc:	d550      	bpl.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x870>
 80086ce:	4606      	mov	r6, r0
 80086d0:	e047      	b.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x862>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80086d2:	4f7c      	ldr	r7, [pc, #496]	; (80088c4 <HAL_RCCEx_PeriphCLKConfig+0x9c4>)
 80086d4:	683b      	ldr	r3, [r7, #0]
 80086d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086da:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 80086dc:	f7fb fec6 	bl	800446c <HAL_GetTick>
 80086e0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086e2:	e006      	b.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x7f2>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80086e4:	f7fb fec2 	bl	800446c <HAL_GetTick>
 80086e8:	eba0 0008 	sub.w	r0, r0, r8
 80086ec:	2864      	cmp	r0, #100	; 0x64
 80086ee:	f200 81e2 	bhi.w	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	05da      	lsls	r2, r3, #23
 80086f6:	d5f5      	bpl.n	80086e4 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
    if (ret == HAL_OK)
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	f040 820b 	bne.w	8008b14 <HAL_RCCEx_PeriphCLKConfig+0xc14>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80086fe:	4b70      	ldr	r3, [pc, #448]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008700:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8008704:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8008706:	4051      	eors	r1, r2
 8008708:	f411 7f40 	tst.w	r1, #768	; 0x300
 800870c:	d00d      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0x82a>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800870e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8008710:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008712:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 8008716:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800871a:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800871c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800871e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8008722:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8008724:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008726:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800872a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800872e:	f000 81d3 	beq.w	8008ad8 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008732:	f402 7340 	and.w	r3, r2, #768	; 0x300
 8008736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800873a:	f000 81e1 	beq.w	8008b00 <HAL_RCCEx_PeriphCLKConfig+0xc00>
 800873e:	4a60      	ldr	r2, [pc, #384]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008740:	6913      	ldr	r3, [r2, #16]
 8008742:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008746:	6113      	str	r3, [r2, #16]
 8008748:	4a5d      	ldr	r2, [pc, #372]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800874a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800874e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8008750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008754:	430b      	orrs	r3, r1
 8008756:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008758:	e9d4 3200 	ldrd	r3, r2, [r4]
 800875c:	e54a      	b.n	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800875e:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008762:	2102      	movs	r1, #2
 8008764:	4628      	mov	r0, r5
 8008766:	f7ff fb51 	bl	8007e0c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800876a:	2800      	cmp	r0, #0
 800876c:	f43f aecd 	beq.w	800850a <HAL_RCCEx_PeriphCLKConfig+0x60a>
  return HAL_ERROR;
 8008770:	2001      	movs	r0, #1
}
 8008772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008776:	4a52      	ldr	r2, [pc, #328]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008778:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800877c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800877e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008782:	430b      	orrs	r3, r1
 8008784:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008786:	e9d4 3200 	ldrd	r3, r2, [r4]
 800878a:	e446      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800878c:	4a4c      	ldr	r2, [pc, #304]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800878e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008790:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008792:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 8008796:	430b      	orrs	r3, r1
 8008798:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800879a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800879e:	e402      	b.n	8007fa6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80087a0:	4a47      	ldr	r2, [pc, #284]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80087a2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80087a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80087a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80087aa:	430b      	orrs	r3, r1
 80087ac:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80087ae:	e9d4 3200 	ldrd	r3, r2, [r4]
 80087b2:	e46b      	b.n	800808c <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80087b4:	4a42      	ldr	r2, [pc, #264]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80087b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80087b8:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80087ba:	f023 0307 	bic.w	r3, r3, #7
 80087be:	430b      	orrs	r3, r1
 80087c0:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80087c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 80087c6:	f7ff bbd4 	b.w	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80087ca:	4a3d      	ldr	r2, [pc, #244]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80087cc:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80087d0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80087d2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80087d6:	430b      	orrs	r3, r1
 80087d8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80087da:	e9d4 3200 	ldrd	r3, r2, [r4]
 80087de:	f7ff bbff 	b.w	8007fe0 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80087e2:	2102      	movs	r1, #2
 80087e4:	f104 0008 	add.w	r0, r4, #8
 80087e8:	f7ff fa96 	bl	8007d18 <RCCEx_PLL2_Config>
 80087ec:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	d07a      	beq.n	80088e8 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087f2:	462e      	mov	r6, r5
 80087f4:	e9d4 3200 	ldrd	r3, r2, [r4]
 80087f8:	e61b      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x532>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087fa:	4a31      	ldr	r2, [pc, #196]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 80087fc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80087fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008802:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8008804:	e43c      	b.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008806:	4a2e      	ldr	r2, [pc, #184]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008808:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800880a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880e:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8008810:	f7ff bbfd 	b.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008814:	4a2a      	ldr	r2, [pc, #168]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008816:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800881c:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800881e:	f7ff bbbc 	b.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008822:	4a27      	ldr	r2, [pc, #156]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008824:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800882a:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800882c:	f7ff bbd2 	b.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008830:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008834:	462e      	mov	r6, r5
 8008836:	e50f      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x358>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008838:	e9d4 3200 	ldrd	r3, r2, [r4]
 800883c:	462e      	mov	r6, r5
 800883e:	e475      	b.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008840:	4a1f      	ldr	r2, [pc, #124]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008842:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8008844:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8008846:	f023 0307 	bic.w	r3, r3, #7
 800884a:	430b      	orrs	r3, r1
 800884c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800884e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008852:	e51b      	b.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x38c>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008854:	4a1a      	ldr	r2, [pc, #104]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 8008856:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800885a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800885c:	f023 0307 	bic.w	r3, r3, #7
 8008860:	430b      	orrs	r3, r1
 8008862:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008864:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008868:	e52e      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800886a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800886e:	462e      	mov	r6, r5
 8008870:	e54c      	b.n	800830c <HAL_RCCEx_PeriphCLKConfig+0x40c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008872:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008876:	462e      	mov	r6, r5
 8008878:	f7ff bbec 	b.w	8008054 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800887c:	4a10      	ldr	r2, [pc, #64]	; (80088c0 <HAL_RCCEx_PeriphCLKConfig+0x9c0>)
 800887e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008880:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8008882:	f023 0303 	bic.w	r3, r3, #3
 8008886:	430b      	orrs	r3, r1
 8008888:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800888a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800888e:	e4ae      	b.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008890:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008894:	462e      	mov	r6, r5
 8008896:	e419      	b.n	80080cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008898:	e9d4 3200 	ldrd	r3, r2, [r4]
 800889c:	462e      	mov	r6, r5
 800889e:	e579      	b.n	8008394 <HAL_RCCEx_PeriphCLKConfig+0x494>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80088a0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088a4:	462e      	mov	r6, r5
 80088a6:	e431      	b.n	800810c <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80088a8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088ac:	462e      	mov	r6, r5
 80088ae:	e54f      	b.n	8008350 <HAL_RCCEx_PeriphCLKConfig+0x450>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80088b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088b4:	462e      	mov	r6, r5
 80088b6:	e59e      	b.n	80083f6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80088b8:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088bc:	462e      	mov	r6, r5
 80088be:	e5ac      	b.n	800841a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80088c0:	58024400 	.word	0x58024400
 80088c4:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088c8:	4a9b      	ldr	r2, [pc, #620]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80088ca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80088cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	f43f ae4b 	beq.w	800856e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80088d8:	e010      	b.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x9fc>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80088da:	4a97      	ldr	r2, [pc, #604]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80088dc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80088de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80088e2:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 80088e4:	2d00      	cmp	r5, #0
 80088e6:	d184      	bne.n	80087f2 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80088e8:	4a93      	ldr	r2, [pc, #588]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 80088ea:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80088ec:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80088ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088f2:	430b      	orrs	r3, r1
 80088f4:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80088f6:	e9d4 3200 	ldrd	r3, r2, [r4]
 80088fa:	e59a      	b.n	8008432 <HAL_RCCEx_PeriphCLKConfig+0x532>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80088fc:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008900:	462e      	mov	r6, r5
 8008902:	e5aa      	b.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008904:	4a8c      	ldr	r2, [pc, #560]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008906:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800890e:	2d00      	cmp	r5, #0
 8008910:	f43f ae5f 	beq.w	80085d2 <HAL_RCCEx_PeriphCLKConfig+0x6d2>
 8008914:	e7d0      	b.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008916:	f104 0008 	add.w	r0, r4, #8
 800891a:	f7ff f9fd 	bl	8007d18 <RCCEx_PLL2_Config>
 800891e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008920:	2d00      	cmp	r5, #0
 8008922:	f43f ae6a 	beq.w	80085fa <HAL_RCCEx_PeriphCLKConfig+0x6fa>
 8008926:	e7c3      	b.n	80088b0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008928:	6862      	ldr	r2, [r4, #4]
 800892a:	e5eb      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x604>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800892c:	2102      	movs	r1, #2
 800892e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008932:	f7ff fa6b 	bl	8007e0c <RCCEx_PLL3_Config>
 8008936:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008938:	2d00      	cmp	r5, #0
 800893a:	f43f acff 	beq.w	800833c <HAL_RCCEx_PeriphCLKConfig+0x43c>
 800893e:	e7b3      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008940:	2102      	movs	r1, #2
 8008942:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008946:	f7ff fa61 	bl	8007e0c <RCCEx_PLL3_Config>
 800894a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800894c:	2d00      	cmp	r5, #0
 800894e:	f43f ad17 	beq.w	8008380 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008952:	e7a1      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x998>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008954:	4a78      	ldr	r2, [pc, #480]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008956:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008958:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800895c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800895e:	2d00      	cmp	r5, #0
 8008960:	f43f ae21 	beq.w	80085a6 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
 8008964:	e768      	b.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x938>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008966:	2101      	movs	r1, #1
 8008968:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800896c:	f7ff fa4e 	bl	8007e0c <RCCEx_PLL3_Config>
 8008970:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008972:	2d00      	cmp	r5, #0
 8008974:	f43f aba1 	beq.w	80080ba <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 8008978:	e78a      	b.n	8008890 <HAL_RCCEx_PeriphCLKConfig+0x990>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800897a:	2101      	movs	r1, #1
 800897c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008980:	f7ff fa44 	bl	8007e0c <RCCEx_PLL3_Config>
 8008984:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008986:	2d00      	cmp	r5, #0
 8008988:	f43f abb6 	beq.w	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800898c:	e788      	b.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800898e:	2102      	movs	r1, #2
 8008990:	f104 0008 	add.w	r0, r4, #8
 8008994:	f7ff f9c0 	bl	8007d18 <RCCEx_PLL2_Config>
 8008998:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800899a:	2d00      	cmp	r5, #0
 800899c:	f43f ab51 	beq.w	8008042 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80089a0:	e767      	b.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x972>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80089a2:	2102      	movs	r1, #2
 80089a4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80089a8:	f7ff fa30 	bl	8007e0c <RCCEx_PLL3_Config>
 80089ac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	f43f aca2 	beq.w	80082f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80089b4:	e759      	b.n	800886a <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089b6:	2102      	movs	r1, #2
 80089b8:	f104 0008 	add.w	r0, r4, #8
 80089bc:	f7ff f9ac 	bl	8007d18 <RCCEx_PLL2_Config>
 80089c0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 80089c2:	2d00      	cmp	r5, #0
 80089c4:	f43f af5a 	beq.w	800887c <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80089c8:	e40e      	b.n	80081e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089ca:	2102      	movs	r1, #2
 80089cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80089d0:	f7ff fa1c 	bl	8007e0c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80089d4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089d8:	2800      	cmp	r0, #0
 80089da:	f43f ace3 	beq.w	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
        status = HAL_ERROR;
 80089de:	2601      	movs	r6, #1
 80089e0:	e4e0      	b.n	80083a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089e2:	2102      	movs	r1, #2
 80089e4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 80089e8:	f7ff fa10 	bl	8007e0c <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80089ec:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80089f0:	2800      	cmp	r0, #0
 80089f2:	f43f ace7 	beq.w	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        status = HAL_ERROR;
 80089f6:	2601      	movs	r6, #1
 80089f8:	e4e4      	b.n	80083c4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089fa:	2100      	movs	r1, #0
 80089fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a00:	f7ff fa04 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a04:	4605      	mov	r5, r0
        break;
 8008a06:	f7ff bae5 	b.w	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a0a:	2102      	movs	r1, #2
 8008a0c:	3028      	adds	r0, #40	; 0x28
 8008a0e:	f7ff f9fd 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a12:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 8008a14:	2e00      	cmp	r6, #0
 8008a16:	f43f aa8f 	beq.w	8007f38 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8008a1a:	f7ff ba9a 	b.w	8007f52 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a1e:	4a46      	ldr	r2, [pc, #280]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
        break;
 8008a20:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a22:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008a24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a28:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 8008a2a:	e5ac      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a2c:	2100      	movs	r1, #0
 8008a2e:	f104 0008 	add.w	r0, r4, #8
 8008a32:	f7ff f971 	bl	8007d18 <RCCEx_PLL2_Config>
 8008a36:	4605      	mov	r5, r0
        break;
 8008a38:	e5a5      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a40:	f7ff f9e4 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a44:	4605      	mov	r5, r0
        break;
 8008a46:	f7ff bb1b 	b.w	8008080 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a4a:	2100      	movs	r1, #0
 8008a4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a50:	f7ff f9dc 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a54:	4605      	mov	r5, r0
        break;
 8008a56:	f7ff bada 	b.w	800800e <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a5a:	2100      	movs	r1, #0
 8008a5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a60:	f7ff f9d4 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a64:	4605      	mov	r5, r0
        break;
 8008a66:	e58e      	b.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0x686>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a68:	2100      	movs	r1, #0
 8008a6a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a6e:	f7ff f9cd 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a72:	4605      	mov	r5, r0
        break;
 8008a74:	f7ff ba91 	b.w	8007f9a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a78:	2101      	movs	r1, #1
 8008a7a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a7e:	f7ff f9c5 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a82:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008a84:	2d00      	cmp	r5, #0
 8008a86:	f43f aee5 	beq.w	8008854 <HAL_RCCEx_PeriphCLKConfig+0x954>
 8008a8a:	e41a      	b.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008a92:	f7ff f9bb 	bl	8007e0c <RCCEx_PLL3_Config>
 8008a96:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008a98:	2d00      	cmp	r5, #0
 8008a9a:	f43f aed1 	beq.w	8008840 <HAL_RCCEx_PeriphCLKConfig+0x940>
 8008a9e:	f7ff bbf2 	b.w	8008286 <HAL_RCCEx_PeriphCLKConfig+0x386>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008aa2:	2101      	movs	r1, #1
 8008aa4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8008aa8:	f7ff f9b0 	bl	8007e0c <RCCEx_PLL3_Config>
 8008aac:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 8008aae:	2d00      	cmp	r5, #0
 8008ab0:	f43f adb7 	beq.w	8008622 <HAL_RCCEx_PeriphCLKConfig+0x722>
 8008ab4:	e6bc      	b.n	8008830 <HAL_RCCEx_PeriphCLKConfig+0x930>
        status = ret;
 8008ab6:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008ab8:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008abc:	4635      	mov	r5, r6
 8008abe:	f7ff bb99 	b.w	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ac2:	2601      	movs	r6, #1
 8008ac4:	f7ff ba47 	b.w	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac8:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008aca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8008acc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad0:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ad2:	6e81      	ldr	r1, [r0, #104]	; 0x68
 8008ad4:	f7ff ba36 	b.w	8007f44 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 8008ad8:	f7fb fcc8 	bl	800446c <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008adc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>
        tickstart = HAL_GetTick();
 8008ae0:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae2:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008ae6:	e004      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0xbf2>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ae8:	f7fb fcc0 	bl	800446c <HAL_GetTick>
 8008aec:	1bc0      	subs	r0, r0, r7
 8008aee:	4548      	cmp	r0, r9
 8008af0:	d8e1      	bhi.n	8008ab6 <HAL_RCCEx_PeriphCLKConfig+0xbb6>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008af2:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8008af6:	079b      	lsls	r3, r3, #30
 8008af8:	d5f6      	bpl.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xbe8>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008afa:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 8008afe:	e618      	b.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x832>
 8008b00:	490d      	ldr	r1, [pc, #52]	; (8008b38 <HAL_RCCEx_PeriphCLKConfig+0xc38>)
 8008b02:	4b0e      	ldr	r3, [pc, #56]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0xc3c>)
 8008b04:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8008b08:	690a      	ldr	r2, [r1, #16]
 8008b0a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	610b      	str	r3, [r1, #16]
 8008b12:	e619      	b.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x848>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008b14:	e9d4 3200 	ldrd	r3, r2, [r4]
 8008b18:	462e      	mov	r6, r5
 8008b1a:	f7ff bb6b 	b.w	80081f4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
    switch (PeriphClkInit->FmcClockSelection)
 8008b1e:	2601      	movs	r6, #1
 8008b20:	4635      	mov	r5, r6
 8008b22:	f7ff bb64 	b.w	80081ee <HAL_RCCEx_PeriphCLKConfig+0x2ee>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008b26:	2601      	movs	r6, #1
 8008b28:	4635      	mov	r5, r6
 8008b2a:	f7ff bbcd 	b.w	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
    switch (PeriphClkInit->Usart234578ClockSelection)
 8008b2e:	2601      	movs	r6, #1
 8008b30:	4635      	mov	r5, r6
 8008b32:	f7ff bbab 	b.w	800828c <HAL_RCCEx_PeriphCLKConfig+0x38c>
 8008b36:	bf00      	nop
 8008b38:	58024400 	.word	0x58024400
 8008b3c:	00ffffcf 	.word	0x00ffffcf

08008b40 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b40:	4a50      	ldr	r2, [pc, #320]	; (8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
{
 8008b42:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b44:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b46:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b48:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll2m != 0U)
 8008b4a:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8008b4e:	f3c5 3305 	ubfx	r3, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b52:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
  if (pll2m != 0U)
 8008b54:	d05d      	beq.n	8008c12 <HAL_RCCEx_GetPLL2ClockFreq+0xd2>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b56:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008b5a:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008b5e:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b62:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008b66:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8008b68:	ee07 4a90 	vmov	s15, r4
 8008b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008b70:	d003      	beq.n	8008b7a <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8008b72:	2902      	cmp	r1, #2
 8008b74:	d078      	beq.n	8008c68 <HAL_RCCEx_GetPLL2ClockFreq+0x128>
 8008b76:	2900      	cmp	r1, #0
 8008b78:	d050      	beq.n	8008c1c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b7a:	ee07 3a90 	vmov	s15, r3
 8008b7e:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008c88 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8008b82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008b86:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008b88:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008b8c:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8008c8c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b94:	ee07 3a90 	vmov	s15, r3
 8008b98:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008b9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ba0:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008ba4:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008ba8:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008bac:	4a35      	ldr	r2, [pc, #212]	; (8008c84 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
 8008bae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008bb2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008bb4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008bb8:	ee07 3a90 	vmov	s15, r3
 8008bbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008bc0:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008bc2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008bc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008bca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008bce:	ed80 7a00 	vstr	s14, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8008bd2:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008bd4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008bd8:	ee07 3a90 	vmov	s15, r3
 8008bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008be0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008be4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be8:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008bec:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008bf0:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8008bf2:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008bf6:	ee07 3a10 	vmov	s14, r3
 8008bfa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008bfe:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008c02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c0a:	ee17 3a90 	vmov	r3, s15
 8008c0e:	6083      	str	r3, [r0, #8]
}
 8008c10:	4770      	bx	lr
 8008c12:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008c14:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8008c18:	6083      	str	r3, [r0, #8]
}
 8008c1a:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c1c:	6811      	ldr	r1, [r2, #0]
 8008c1e:	0689      	lsls	r1, r1, #26
 8008c20:	d529      	bpl.n	8008c76 <HAL_RCCEx_GetPLL2ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c22:	6814      	ldr	r4, [r2, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c24:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c28:	4919      	ldr	r1, [pc, #100]	; (8008c90 <HAL_RCCEx_GetPLL2ClockFreq+0x150>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c2e:	6b93      	ldr	r3, [r2, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c30:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c38:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008c8c <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 8008c3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c40:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c42:	ee06 3a10 	vmov	s12, r3
 8008c46:	ee05 1a90 	vmov	s11, r1
 8008c4a:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008c4e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008c52:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008c56:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008c5a:	eef0 7a46 	vmov.f32	s15, s12
 8008c5e:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008c62:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008c66:	e7a1      	b.n	8008bac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c68:	ee07 3a90 	vmov	s15, r3
 8008c6c:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008c94 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8008c70:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c74:	e787      	b.n	8008b86 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c76:	ee07 3a90 	vmov	s15, r3
 8008c7a:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008c98 <HAL_RCCEx_GetPLL2ClockFreq+0x158>
 8008c7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008c82:	e780      	b.n	8008b86 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8008c84:	58024400 	.word	0x58024400
 8008c88:	4a742400 	.word	0x4a742400
 8008c8c:	39000000 	.word	0x39000000
 8008c90:	03d09000 	.word	0x03d09000
 8008c94:	4bbebc20 	.word	0x4bbebc20
 8008c98:	4c742400 	.word	0x4c742400

08008c9c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c9c:	4a50      	ldr	r2, [pc, #320]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
{
 8008c9e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008ca0:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008ca2:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008ca4:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll3m != 0U)
 8008ca6:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8008caa:	f3c5 5305 	ubfx	r3, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008cae:	6c54      	ldr	r4, [r2, #68]	; 0x44
  if (pll3m != 0U)
 8008cb0:	d05d      	beq.n	8008d6e <HAL_RCCEx_GetPLL3ClockFreq+0xd2>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008cb2:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008cb6:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008cba:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008cbe:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008cc2:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008cc4:	ee07 4a90 	vmov	s15, r4
 8008cc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008ccc:	d003      	beq.n	8008cd6 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8008cce:	2902      	cmp	r1, #2
 8008cd0:	d078      	beq.n	8008dc4 <HAL_RCCEx_GetPLL3ClockFreq+0x128>
 8008cd2:	2900      	cmp	r1, #0
 8008cd4:	d050      	beq.n	8008d78 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008de4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8008cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ce2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008ce4:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008ce8:	ed9f 6a3f 	vldr	s12, [pc, #252]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8008cec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cf0:	ee07 3a90 	vmov	s15, r3
 8008cf4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008cfc:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008d00:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008d04:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d08:	4a35      	ldr	r2, [pc, #212]	; (8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
 8008d0a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008d0e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008d10:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008d14:	ee07 3a90 	vmov	s15, r3
 8008d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008d1c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008d1e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008d22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d26:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008d2a:	ed80 7a00 	vstr	s14, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8008d2e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008d30:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008d34:	ee07 3a90 	vmov	s15, r3
 8008d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d3c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008d40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d44:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008d48:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d4c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8008d4e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008d52:	ee07 3a10 	vmov	s14, r3
 8008d56:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008d5a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008d5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008d66:	ee17 3a90 	vmov	r3, s15
 8008d6a:	6083      	str	r3, [r0, #8]
}
 8008d6c:	4770      	bx	lr
 8008d6e:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008d70:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8008d74:	6083      	str	r3, [r0, #8]
}
 8008d76:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008d78:	6811      	ldr	r1, [r2, #0]
 8008d7a:	0689      	lsls	r1, r1, #26
 8008d7c:	d529      	bpl.n	8008dd2 <HAL_RCCEx_GetPLL3ClockFreq+0x136>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d7e:	6814      	ldr	r4, [r2, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d80:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d84:	4919      	ldr	r1, [pc, #100]	; (8008dec <HAL_RCCEx_GetPLL3ClockFreq+0x150>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008d8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d8c:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d94:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8008de8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 8008d98:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d9c:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008d9e:	ee06 3a10 	vmov	s12, r3
 8008da2:	ee05 1a90 	vmov	s11, r1
 8008da6:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008daa:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008dae:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008db2:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008db6:	eef0 7a46 	vmov.f32	s15, s12
 8008dba:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008dbe:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008dc2:	e7a1      	b.n	8008d08 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dc4:	ee07 3a90 	vmov	s15, r3
 8008dc8:	ed9f 5a09 	vldr	s10, [pc, #36]	; 8008df0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8008dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dd0:	e787      	b.n	8008ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dd2:	ee07 3a90 	vmov	s15, r3
 8008dd6:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008df4 <HAL_RCCEx_GetPLL3ClockFreq+0x158>
 8008dda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008dde:	e780      	b.n	8008ce2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8008de0:	58024400 	.word	0x58024400
 8008de4:	4a742400 	.word	0x4a742400
 8008de8:	39000000 	.word	0x39000000
 8008dec:	03d09000 	.word	0x03d09000
 8008df0:	4bbebc20 	.word	0x4bbebc20
 8008df4:	4c742400 	.word	0x4c742400

08008df8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008df8:	4a51      	ldr	r2, [pc, #324]	; (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
{
 8008dfa:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008dfc:	6a91      	ldr	r1, [r2, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008dfe:	6a95      	ldr	r5, [r2, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e00:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
  if (pll1m != 0U)
 8008e02:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8008e06:	f3c5 1305 	ubfx	r3, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e0a:	6b54      	ldr	r4, [r2, #52]	; 0x34
  if (pll1m != 0U)
 8008e0c:	d05e      	beq.n	8008ecc <HAL_RCCEx_GetPLL1ClockFreq+0xd4>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e0e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8008e12:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008e16:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e1a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8008e1e:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008e20:	ee07 4a90 	vmov	s15, r4
 8008e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8008e28:	f000 8082 	beq.w	8008f30 <HAL_RCCEx_GetPLL1ClockFreq+0x138>
 8008e2c:	2902      	cmp	r1, #2
 8008e2e:	d078      	beq.n	8008f22 <HAL_RCCEx_GetPLL1ClockFreq+0x12a>
 8008e30:	2900      	cmp	r1, #0
 8008e32:	d050      	beq.n	8008ed6 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008e34:	ee07 3a90 	vmov	s15, r3
 8008e38:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008f44 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8008e3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e40:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008e42:	eec5 6a27 	vdiv.f32	s13, s10, s15
 8008e46:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e4e:	ee07 3a90 	vmov	s15, r3
 8008e52:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8008e56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e5a:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008e5e:	eee7 7a06 	vfma.f32	s15, s14, s12
 8008e62:	ee66 6aa7 	vmul.f32	s13, s13, s15
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e66:	4a36      	ldr	r2, [pc, #216]	; (8008f40 <HAL_RCCEx_GetPLL1ClockFreq+0x148>)
 8008e68:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008e6c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008e6e:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8008e72:	ee07 3a90 	vmov	s15, r3
 8008e76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8008e7a:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8008e7c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e84:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008e88:	ed80 7a00 	vstr	s14, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8008e8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008e8e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8008e92:	ee07 3a90 	vmov	s15, r3
 8008e96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008e9a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ea2:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8008ea6:	ed80 7a01 	vstr	s14, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008eaa:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8008eac:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8008eb0:	ee07 3a10 	vmov	s14, r3
 8008eb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008eb8:	ee37 7a06 	vadd.f32	s14, s14, s12
 8008ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ec4:	ee17 3a90 	vmov	r3, s15
 8008ec8:	6083      	str	r3, [r0, #8]
}
 8008eca:	4770      	bx	lr
 8008ecc:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008ece:	e9c0 3300 	strd	r3, r3, [r0]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8008ed2:	6083      	str	r3, [r0, #8]
}
 8008ed4:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008ed6:	6811      	ldr	r1, [r2, #0]
 8008ed8:	0689      	lsls	r1, r1, #26
 8008eda:	d5ab      	bpl.n	8008e34 <HAL_RCCEx_GetPLL1ClockFreq+0x3c>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008edc:	6814      	ldr	r4, [r2, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ede:	ee07 3a90 	vmov	s15, r3
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ee2:	491a      	ldr	r1, [pc, #104]	; (8008f4c <HAL_RCCEx_GetPLL1ClockFreq+0x154>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008ee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ee8:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008eea:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008ef2:	ed9f 5a15 	vldr	s10, [pc, #84]	; 8008f48 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8008ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008efa:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008efc:	ee06 3a10 	vmov	s12, r3
 8008f00:	ee05 1a90 	vmov	s11, r1
 8008f04:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8008f08:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8008f0c:	ee36 6a26 	vadd.f32	s12, s12, s13
 8008f10:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8008f14:	eef0 7a46 	vmov.f32	s15, s12
 8008f18:	eee7 7a05 	vfma.f32	s15, s14, s10
 8008f1c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8008f20:	e7a1      	b.n	8008e66 <HAL_RCCEx_GetPLL1ClockFreq+0x6e>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f22:	ee07 3a90 	vmov	s15, r3
 8008f26:	ed9f 5a0a 	vldr	s10, [pc, #40]	; 8008f50 <HAL_RCCEx_GetPLL1ClockFreq+0x158>
 8008f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f2e:	e787      	b.n	8008e40 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008f30:	ee07 3a90 	vmov	s15, r3
 8008f34:	ed9f 5a07 	vldr	s10, [pc, #28]	; 8008f54 <HAL_RCCEx_GetPLL1ClockFreq+0x15c>
 8008f38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f3c:	e780      	b.n	8008e40 <HAL_RCCEx_GetPLL1ClockFreq+0x48>
 8008f3e:	bf00      	nop
 8008f40:	58024400 	.word	0x58024400
 8008f44:	4c742400 	.word	0x4c742400
 8008f48:	39000000 	.word	0x39000000
 8008f4c:	03d09000 	.word	0x03d09000
 8008f50:	4bbebc20 	.word	0x4bbebc20
 8008f54:	4a742400 	.word	0x4a742400

08008f58 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f58:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 8008f5c:	430b      	orrs	r3, r1
{
 8008f5e:	b500      	push	{lr}
 8008f60:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008f62:	f000 8083 	beq.w	800906c <HAL_RCCEx_GetPeriphCLKFreq+0x114>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008f66:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 8008f6a:	430b      	orrs	r3, r1
 8008f6c:	d038      	beq.n	8008fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008f6e:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 8008f72:	430b      	orrs	r3, r1
 8008f74:	f000 80e6 	beq.w	8009144 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f78:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 8008f7c:	430b      	orrs	r3, r1
 8008f7e:	f000 8089 	beq.w	8009094 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8008f82:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 8008f86:	430b      	orrs	r3, r1
 8008f88:	d060      	beq.n	800904c <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8008f8a:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	f000 8112 	beq.w	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8008f94:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 8008f98:	430b      	orrs	r3, r1
 8008f9a:	f000 80a3 	beq.w	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008f9e:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 8008fa2:	430b      	orrs	r3, r1
 8008fa4:	f000 80fa 	beq.w	800919c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8008fa8:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 8008fac:	430b      	orrs	r3, r1
 8008fae:	f000 8143 	beq.w	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8008fb2:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 8008fb6:	4308      	orrs	r0, r1
 8008fb8:	d137      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8008fba:	4a9a      	ldr	r2, [pc, #616]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fbc:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008fbe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 8008fc2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc6:	f000 8084 	beq.w	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8008fca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fce:	f000 8157 	beq.w	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8008fd2:	bb53      	cbnz	r3, 800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8008fd4:	6810      	ldr	r0, [r2, #0]
 8008fd6:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8008fda:	d044      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = HSE_VALUE;
 8008fdc:	4892      	ldr	r0, [pc, #584]	; (8009228 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8008fde:	e042      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008fe0:	4a90      	ldr	r2, [pc, #576]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8008fe2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8008fe4:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 8008fe8:	2b80      	cmp	r3, #128	; 0x80
 8008fea:	f000 80a6 	beq.w	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8008fee:	d920      	bls.n	8009032 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8008ff0:	2bc0      	cmp	r3, #192	; 0xc0
 8008ff2:	d037      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 8008ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ff8:	d117      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ffa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ffc:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009002:	0749      	lsls	r1, r1, #29
 8009004:	d502      	bpl.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8009006:	2b00      	cmp	r3, #0
 8009008:	f000 80c2 	beq.w	8009190 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800900c:	4a85      	ldr	r2, [pc, #532]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800900e:	6812      	ldr	r2, [r2, #0]
 8009010:	05d0      	lsls	r0, r2, #23
 8009012:	d503      	bpl.n	800901c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 8009014:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009018:	f000 8102 	beq.w	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800901c:	4a81      	ldr	r2, [pc, #516]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800901e:	6812      	ldr	r2, [r2, #0]
 8009020:	0391      	lsls	r1, r2, #14
 8009022:	d502      	bpl.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8009024:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009028:	d0d8      	beq.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 800902a:	2000      	movs	r0, #0
}
 800902c:	b005      	add	sp, #20
 800902e:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 8009032:	2b00      	cmp	r3, #0
 8009034:	d04d      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009036:	2b40      	cmp	r3, #64	; 0x40
 8009038:	d1f7      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800903a:	6810      	ldr	r0, [r2, #0]
 800903c:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009040:	d011      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009042:	a801      	add	r0, sp, #4
 8009044:	f7ff fd7c 	bl	8008b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009048:	9801      	ldr	r0, [sp, #4]
 800904a:	e00c      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800904c:	4a75      	ldr	r2, [pc, #468]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800904e:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8009050:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 8009054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009058:	d06f      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800905a:	d938      	bls.n	80090ce <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800905c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009060:	f040 8088 	bne.w	8009174 <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009064:	4871      	ldr	r0, [pc, #452]	; (800922c <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 8009066:	b005      	add	sp, #20
 8009068:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800906c:	4b6d      	ldr	r3, [pc, #436]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800906e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009070:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 8009074:	2b04      	cmp	r3, #4
 8009076:	d8d8      	bhi.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8009078:	a201      	add	r2, pc, #4	; (adr r2, 8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	08009123 	.word	0x08009123
 8009084:	080090ff 	.word	0x080090ff
 8009088:	0800910f 	.word	0x0800910f
 800908c:	08009065 	.word	0x08009065
 8009090:	0800910b 	.word	0x0800910b
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8009094:	4a63      	ldr	r2, [pc, #396]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009096:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009098:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800909c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090a0:	d04b      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 80090a2:	d944      	bls.n	800912e <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 80090a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80090a8:	d0dc      	beq.n	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 80090aa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80090ae:	d1bc      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090b0:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b2:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80090b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80090b8:	0752      	lsls	r2, r2, #29
 80090ba:	d5a7      	bpl.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1a5      	bne.n	800900c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80090c0:	4b58      	ldr	r3, [pc, #352]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090c2:	485b      	ldr	r0, [pc, #364]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80090ca:	40d8      	lsrs	r0, r3
 80090cc:	e7cb      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d154      	bne.n	800917c <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090d2:	6810      	ldr	r0, [r2, #0]
 80090d4:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 80090d8:	d0c5      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090da:	a801      	add	r0, sp, #4
 80090dc:	f7ff fe8c 	bl	8008df8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80090e0:	9802      	ldr	r0, [sp, #8]
 80090e2:	e7c0      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80090e4:	4a4f      	ldr	r2, [pc, #316]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80090e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80090e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 80090ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80090f0:	f000 80d0 	beq.w	8009294 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 80090f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80090f8:	d0da      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d195      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80090fe:	4b49      	ldr	r3, [pc, #292]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009100:	6818      	ldr	r0, [r3, #0]
 8009102:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009106:	d0ae      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8009108:	e79b      	b.n	8009042 <HAL_RCCEx_GetPeriphCLKFreq+0xea>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800910a:	4a46      	ldr	r2, [pc, #280]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800910c:	e775      	b.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800910e:	4b45      	ldr	r3, [pc, #276]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009110:	6818      	ldr	r0, [r3, #0]
 8009112:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009116:	d0a6      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009118:	a801      	add	r0, sp, #4
 800911a:	f7ff fdbf 	bl	8008c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800911e:	9801      	ldr	r0, [sp, #4]
 8009120:	e7a1      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009122:	4b40      	ldr	r3, [pc, #256]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800912a:	d09c      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800912c:	e7d5      	b.n	80090da <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800912e:	2b00      	cmp	r3, #0
 8009130:	d0cf      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009132:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009136:	d080      	beq.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8009138:	e777      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800913a:	6810      	ldr	r0, [r2, #0]
 800913c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8009140:	d091      	beq.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8009142:	e7e9      	b.n	8009118 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009144:	4a37      	ldr	r2, [pc, #220]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8009146:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8009148:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800914c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009150:	d0f3      	beq.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 8009152:	d806      	bhi.n	8009162 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0bc      	beq.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800915c:	f43f af6d 	beq.w	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8009160:	e763      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8009162:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009166:	f43f af7d 	beq.w	8009064 <HAL_RCCEx_GetPeriphCLKFreq+0x10c>
 800916a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800916e:	f43f af44 	beq.w	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
 8009172:	e75a      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
    switch (srcclk)
 8009174:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009178:	d09a      	beq.n	80090b0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800917a:	e756      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800917c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009180:	f43f af5b 	beq.w	800903a <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
 8009184:	e751      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009186:	6810      	ldr	r0, [r2, #0]
 8009188:	f010 0004 	ands.w	r0, r0, #4
 800918c:	f43f af6b 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009190:	6813      	ldr	r3, [r2, #0]
 8009192:	4827      	ldr	r0, [pc, #156]	; (8009230 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8009194:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8009198:	40d8      	lsrs	r0, r3
 800919a:	e764      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800919c:	4b21      	ldr	r3, [pc, #132]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800919e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 80091a0:	03d2      	lsls	r2, r2, #15
 80091a2:	d5bf      	bpl.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80091a4:	6818      	ldr	r0, [r3, #0]
 80091a6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80091aa:	f43f af5c 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091ae:	a801      	add	r0, sp, #4
 80091b0:	f7ff fcc6 	bl	8008b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80091b4:	9803      	ldr	r0, [sp, #12]
 80091b6:	e756      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80091b8:	4a1a      	ldr	r2, [pc, #104]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091ba:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80091bc:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 80091c0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80091c4:	d0df      	beq.n	8009186 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80091c6:	d810      	bhi.n	80091ea <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 80091c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091cc:	d058      	beq.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80091ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091d2:	d118      	bne.n	8009206 <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80091d4:	4b13      	ldr	r3, [pc, #76]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091d6:	6818      	ldr	r0, [r3, #0]
 80091d8:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80091dc:	f43f af43 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091e0:	a801      	add	r0, sp, #4
 80091e2:	f7ff fd5b 	bl	8008c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80091e6:	9802      	ldr	r0, [sp, #8]
 80091e8:	e73d      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 80091ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091ee:	d012      	beq.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 80091f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f4:	f47f af19 	bne.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 80091fa:	6818      	ldr	r0, [r3, #0]
 80091fc:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8009200:	f43f af31 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8009204:	e6ea      	b.n	8008fdc <HAL_RCCEx_GetPeriphCLKFreq+0x84>
    switch (srcclk)
 8009206:	2b00      	cmp	r3, #0
 8009208:	f47f af0f 	bne.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
}
 800920c:	b005      	add	sp, #20
 800920e:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 8009212:	f7fe bd39 	b.w	8007c88 <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009216:	6810      	ldr	r0, [r2, #0]
 8009218:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800921c:	f43f af23 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = CSI_VALUE;
 8009220:	4804      	ldr	r0, [pc, #16]	; (8009234 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8009222:	e720      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 8009224:	58024400 	.word	0x58024400
 8009228:	017d7840 	.word	0x017d7840
 800922c:	00bb8000 	.word	0x00bb8000
 8009230:	03d09000 	.word	0x03d09000
 8009234:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009238:	4b28      	ldr	r3, [pc, #160]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800923a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 8009240:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009244:	d037      	beq.n	80092b6 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 8009246:	d814      	bhi.n	8009272 <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 8009248:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800924c:	d03f      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800924e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009252:	d0bf      	beq.n	80091d4 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 8009254:	2b00      	cmp	r3, #0
 8009256:	f47f aee8 	bne.w	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800925a:	f7fe fcd5 	bl	8007c08 <HAL_RCC_GetHCLKFreq>
 800925e:	4b1f      	ldr	r3, [pc, #124]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 8009260:	4a1f      	ldr	r2, [pc, #124]	; (80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 8009262:	6a1b      	ldr	r3, [r3, #32]
 8009264:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8009268:	5cd3      	ldrb	r3, [r2, r3]
 800926a:	f003 031f 	and.w	r3, r3, #31
 800926e:	40d8      	lsrs	r0, r3
        break;
 8009270:	e6f9      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
    switch (srcclk)
 8009272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009276:	d017      	beq.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 8009278:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800927c:	d0bc      	beq.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800927e:	e6d4      	b.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009280:	6810      	ldr	r0, [r2, #0]
 8009282:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8009286:	f43f aeee 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800928a:	a801      	add	r0, sp, #4
 800928c:	f7ff fc58 	bl	8008b40 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009290:	9802      	ldr	r0, [sp, #8]
 8009292:	e6e8      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009294:	6810      	ldr	r0, [r2, #0]
 8009296:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800929a:	f43f aee4 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800929e:	a801      	add	r0, sp, #4
 80092a0:	f7ff fcfc 	bl	8008c9c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80092a4:	9803      	ldr	r0, [sp, #12]
 80092a6:	e6de      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092a8:	4b0c      	ldr	r3, [pc, #48]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80092aa:	6818      	ldr	r0, [r3, #0]
 80092ac:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80092b0:	f43f aed9 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80092b4:	e7b4      	b.n	8009220 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80092b6:	4b09      	ldr	r3, [pc, #36]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80092b8:	6818      	ldr	r0, [r3, #0]
 80092ba:	f010 0004 	ands.w	r0, r0, #4
 80092be:	f43f aed2 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4807      	ldr	r0, [pc, #28]	; (80092e4 <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 80092c6:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 80092ca:	40d8      	lsrs	r0, r3
 80092cc:	e6cb      	b.n	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80092ce:	4b03      	ldr	r3, [pc, #12]	; (80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 80092d0:	6818      	ldr	r0, [r3, #0]
 80092d2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80092d6:	f43f aec6 	beq.w	8009066 <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 80092da:	e7d6      	b.n	800928a <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 80092dc:	58024400 	.word	0x58024400
 80092e0:	0801b9bc 	.word	0x0801b9bc
 80092e4:	03d09000 	.word	0x03d09000

080092e8 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80092e8:	2800      	cmp	r0, #0
 80092ea:	d03c      	beq.n	8009366 <HAL_RNG_Init+0x7e>
{
 80092ec:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80092ee:	7a43      	ldrb	r3, [r0, #9]
 80092f0:	4604      	mov	r4, r0
 80092f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d031      	beq.n	800935e <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80092fa:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80092fc:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 80092fe:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 8009300:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8009302:	6813      	ldr	r3, [r2, #0]
 8009304:	f023 0320 	bic.w	r3, r3, #32
 8009308:	430b      	orrs	r3, r1
 800930a:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800930c:	6822      	ldr	r2, [r4, #0]
 800930e:	6813      	ldr	r3, [r2, #0]
 8009310:	f043 0304 	orr.w	r3, r3, #4
 8009314:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	685b      	ldr	r3, [r3, #4]
 800931a:	0658      	lsls	r0, r3, #25
 800931c:	d503      	bpl.n	8009326 <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800931e:	2304      	movs	r3, #4
    return HAL_ERROR;
 8009320:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8009322:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8009324:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8009326:	f7fb f8a1 	bl	800446c <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800932a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800932c:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	0759      	lsls	r1, r3, #29
 8009332:	d50e      	bpl.n	8009352 <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009334:	f7fb f89a 	bl	800446c <HAL_GetTick>
 8009338:	1b43      	subs	r3, r0, r5
 800933a:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800933c:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800933e:	d9f6      	bls.n	800932e <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8009340:	685a      	ldr	r2, [r3, #4]
 8009342:	0752      	lsls	r2, r2, #29
 8009344:	d5f3      	bpl.n	800932e <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 8009346:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009348:	2302      	movs	r3, #2
        return HAL_ERROR;
 800934a:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800934c:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800934e:	60e3      	str	r3, [r4, #12]
}
 8009350:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009352:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 8009354:	2201      	movs	r2, #1
  return HAL_OK;
 8009356:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8009358:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800935a:	60e3      	str	r3, [r4, #12]
}
 800935c:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800935e:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 8009360:	f7f9 ff38 	bl	80031d4 <HAL_RNG_MspInit>
 8009364:	e7c9      	b.n	80092fa <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 8009366:	2001      	movs	r0, #1
}
 8009368:	4770      	bx	lr
 800936a:	bf00      	nop

0800936c <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800936e:	7a03      	ldrb	r3, [r0, #8]
 8009370:	2b01      	cmp	r3, #1
 8009372:	d027      	beq.n	80093c4 <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009374:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8009376:	2201      	movs	r2, #1
 8009378:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800937a:	4293      	cmp	r3, r2
 800937c:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800937e:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 8009380:	d006      	beq.n	8009390 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009382:	2304      	movs	r3, #4
    status = HAL_ERROR;
 8009384:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009386:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009388:	2300      	movs	r3, #0
 800938a:	7223      	strb	r3, [r4, #8]

  return status;
}
 800938c:	4630      	mov	r0, r6
 800938e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 8009390:	2302      	movs	r3, #2
 8009392:	460d      	mov	r5, r1
 8009394:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 8009396:	f7fb f869 	bl	800446c <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800939a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800939c:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	07d2      	lsls	r2, r2, #31
 80093a2:	d412      	bmi.n	80093ca <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80093a4:	f7fb f862 	bl	800446c <HAL_GetTick>
 80093a8:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80093aa:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80093ac:	2802      	cmp	r0, #2
 80093ae:	d9f6      	bls.n	800939e <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80093b0:	685a      	ldr	r2, [r3, #4]
 80093b2:	f012 0201 	ands.w	r2, r2, #1
 80093b6:	d1f2      	bne.n	800939e <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 80093b8:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80093ba:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 80093bc:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 80093be:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80093c0:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 80093c2:	e7e3      	b.n	800938c <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 80093c4:	2602      	movs	r6, #2
}
 80093c6:	4630      	mov	r0, r6
 80093c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 80093ca:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80093cc:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80093ce:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80093d0:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80093d2:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80093d4:	7262      	strb	r2, [r4, #9]
 80093d6:	e7d7      	b.n	8009388 <HAL_RNG_GenerateRandomNumber+0x1c>

080093d8 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 80093d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093da:	4ba3      	ldr	r3, [pc, #652]	; (8009668 <HAL_SAI_Init.part.0+0x290>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 80093dc:	4605      	mov	r5, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80093de:	6802      	ldr	r2, [r0, #0]
 80093e0:	429a      	cmp	r2, r3
 80093e2:	d01c      	beq.n	800941e <HAL_SAI_Init.part.0+0x46>
 80093e4:	3320      	adds	r3, #32
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d019      	beq.n	800941e <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80093ea:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80093ee:	429a      	cmp	r2, r3
 80093f0:	d04d      	beq.n	800948e <HAL_SAI_Init.part.0+0xb6>
 80093f2:	3320      	adds	r3, #32
 80093f4:	429a      	cmp	r2, r3
 80093f6:	d04a      	beq.n	800948e <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80093f8:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 80093fc:	429a      	cmp	r2, r3
 80093fe:	f000 812f 	beq.w	8009660 <HAL_SAI_Init.part.0+0x288>
 8009402:	3320      	adds	r3, #32
 8009404:	429a      	cmp	r2, r3
 8009406:	f000 812b 	beq.w	8009660 <HAL_SAI_Init.part.0+0x288>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800940a:	4b98      	ldr	r3, [pc, #608]	; (800966c <HAL_SAI_Init.part.0+0x294>)
 800940c:	429a      	cmp	r2, r3
 800940e:	f000 8129 	beq.w	8009664 <HAL_SAI_Init.part.0+0x28c>
 8009412:	3320      	adds	r3, #32
 8009414:	429a      	cmp	r2, r3
 8009416:	f000 8125 	beq.w	8009664 <HAL_SAI_Init.part.0+0x28c>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800941a:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800941c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800941e:	4c94      	ldr	r4, [pc, #592]	; (8009670 <HAL_SAI_Init.part.0+0x298>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8009420:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
 8009424:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8009428:	2b00      	cmp	r3, #0
 800942a:	d037      	beq.n	800949c <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800942c:	4b91      	ldr	r3, [pc, #580]	; (8009674 <HAL_SAI_Init.part.0+0x29c>)
 800942e:	4992      	ldr	r1, [pc, #584]	; (8009678 <HAL_SAI_Init.part.0+0x2a0>)
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009436:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009438:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800943a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800943e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8009440:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8009442:	2b00      	cmp	r3, #0
 8009444:	d031      	beq.n	80094aa <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009446:	682a      	ldr	r2, [r5, #0]
    count--;
 8009448:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800944a:	6812      	ldr	r2, [r2, #0]
 800944c:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8009450:	d1f7      	bne.n	8009442 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 8009452:	68eb      	ldr	r3, [r5, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8009454:	2102      	movs	r1, #2
  switch (hsai->Init.SynchroExt)
 8009456:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8009458:	f885 1091 	strb.w	r1, [r5, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800945c:	f000 8150 	beq.w	8009700 <HAL_SAI_Init.part.0+0x328>
 8009460:	428b      	cmp	r3, r1
 8009462:	bf19      	ittee	ne
 8009464:	460e      	movne	r6, r1
 8009466:	2003      	movne	r0, #3
 8009468:	2023      	moveq	r0, #35	; 0x23
 800946a:	2622      	moveq	r6, #34	; 0x22
 800946c:	bf15      	itete	ne
 800946e:	2701      	movne	r7, #1
 8009470:	2721      	moveq	r7, #33	; 0x21
 8009472:	2100      	movne	r1, #0
 8009474:	2120      	moveq	r1, #32
  switch (hsai->Init.Synchro)
 8009476:	68ab      	ldr	r3, [r5, #8]
 8009478:	3b01      	subs	r3, #1
 800947a:	2b04      	cmp	r3, #4
 800947c:	f200 8180 	bhi.w	8009780 <HAL_SAI_Init.part.0+0x3a8>
 8009480:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009484:	001c00e3 	.word	0x001c00e3
 8009488:	001b00ea 	.word	0x001b00ea
 800948c:	00e6      	.short	0x00e6
  if (hsai->State == HAL_SAI_STATE_RESET)
 800948e:	f895 3091 	ldrb.w	r3, [r5, #145]	; 0x91
    SaiBaseAddress = SAI2;
 8009492:	4c7a      	ldr	r4, [pc, #488]	; (800967c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8009494:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8009498:	2b00      	cmp	r3, #0
 800949a:	d1c7      	bne.n	800942c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800949c:	4628      	mov	r0, r5
    hsai->Lock = HAL_UNLOCKED;
 800949e:	f885 1090 	strb.w	r1, [r5, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80094a2:	f7f9 ff01 	bl	80032a8 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 80094a6:	682a      	ldr	r2, [r5, #0]
 80094a8:	e7c0      	b.n	800942c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80094aa:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
    return HAL_ERROR;
 80094ae:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80094b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b4:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
}
 80094b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80094ba:	4631      	mov	r1, r6
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80094bc:	f44f 6600 	mov.w	r6, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 80094c0:	6021      	str	r1, [r4, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80094c2:	6a2b      	ldr	r3, [r5, #32]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d046      	beq.n	8009556 <HAL_SAI_Init.part.0+0x17e>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	4967      	ldr	r1, [pc, #412]	; (8009668 <HAL_SAI_Init.part.0+0x290>)
 80094cc:	428b      	cmp	r3, r1
 80094ce:	f000 812b 	beq.w	8009728 <HAL_SAI_Init.part.0+0x350>
 80094d2:	3120      	adds	r1, #32
 80094d4:	428b      	cmp	r3, r1
 80094d6:	f000 8127 	beq.w	8009728 <HAL_SAI_Init.part.0+0x350>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80094da:	4969      	ldr	r1, [pc, #420]	; (8009680 <HAL_SAI_Init.part.0+0x2a8>)
 80094dc:	428b      	cmp	r3, r1
 80094de:	f000 8133 	beq.w	8009748 <HAL_SAI_Init.part.0+0x370>
 80094e2:	3120      	adds	r1, #32
 80094e4:	428b      	cmp	r3, r1
 80094e6:	f000 812f 	beq.w	8009748 <HAL_SAI_Init.part.0+0x370>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80094ea:	4966      	ldr	r1, [pc, #408]	; (8009684 <HAL_SAI_Init.part.0+0x2ac>)
 80094ec:	428b      	cmp	r3, r1
 80094ee:	f000 8123 	beq.w	8009738 <HAL_SAI_Init.part.0+0x360>
 80094f2:	3120      	adds	r1, #32
 80094f4:	428b      	cmp	r3, r1
 80094f6:	f000 811f 	beq.w	8009738 <HAL_SAI_Init.part.0+0x360>
    if (hsai->Instance == SAI4_Block_A)
 80094fa:	495c      	ldr	r1, [pc, #368]	; (800966c <HAL_SAI_Init.part.0+0x294>)
 80094fc:	428b      	cmp	r3, r1
 80094fe:	f000 8135 	beq.w	800976c <HAL_SAI_Init.part.0+0x394>
    if (hsai->Instance == SAI4_Block_B)
 8009502:	4961      	ldr	r1, [pc, #388]	; (8009688 <HAL_SAI_Init.part.0+0x2b0>)
 8009504:	428b      	cmp	r3, r1
 8009506:	f000 812a 	beq.w	800975e <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800950a:	69ab      	ldr	r3, [r5, #24]
 800950c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009510:	f000 80fb 	beq.w	800970a <HAL_SAI_Init.part.0+0x332>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009514:	6aab      	ldr	r3, [r5, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009516:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800951a:	6a29      	ldr	r1, [r5, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800951c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009520:	ea4f 0342 	mov.w	r3, r2, lsl #1
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8009524:	bf0c      	ite	eq
 8009526:	2202      	moveq	r2, #2
 8009528:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800952a:	fb01 f202 	mul.w	r2, r1, r2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800952e:	6c69      	ldr	r1, [r5, #68]	; 0x44
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8009530:	0212      	lsls	r2, r2, #8
 8009532:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 8009536:	4a55      	ldr	r2, [pc, #340]	; (800968c <HAL_SAI_Init.part.0+0x2b4>)
 8009538:	fba2 0203 	umull	r0, r2, r2, r3
 800953c:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800953e:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8009542:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8009546:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8009548:	bf08      	it	eq
 800954a:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800954c:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800954e:	626a      	str	r2, [r5, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009550:	d101      	bne.n	8009556 <HAL_SAI_Init.part.0+0x17e>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009552:	0852      	lsrs	r2, r2, #1
 8009554:	626a      	str	r2, [r5, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009556:	686b      	ldr	r3, [r5, #4]
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009558:	6d2f      	ldr	r7, [r5, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800955a:	f033 0302 	bics.w	r3, r3, #2
 800955e:	f040 80c8 	bne.w	80096f2 <HAL_SAI_Init.part.0+0x31a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8009562:	3f01      	subs	r7, #1
 8009564:	bf18      	it	ne
 8009566:	2701      	movne	r7, #1
 8009568:	027f      	lsls	r7, r7, #9
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800956a:	f7fa ff97 	bl	800449c <HAL_GetREVID>
 800956e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009572:	682a      	ldr	r2, [r5, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8009574:	f0c0 80a9 	bcc.w	80096ca <HAL_SAI_Init.part.0+0x2f2>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009578:	6811      	ldr	r1, [r2, #0]
 800957a:	4b45      	ldr	r3, [pc, #276]	; (8009690 <HAL_SAI_Init.part.0+0x2b8>)
 800957c:	400b      	ands	r3, r1
 800957e:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009580:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009582:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009586:	430b      	orrs	r3, r1
 8009588:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 800958a:	430b      	orrs	r3, r1
 800958c:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 800958e:	430b      	orrs	r3, r1
 8009590:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8009592:	430b      	orrs	r3, r1
 8009594:	6969      	ldr	r1, [r5, #20]
 8009596:	430b      	orrs	r3, r1
 8009598:	69a9      	ldr	r1, [r5, #24]
 800959a:	430b      	orrs	r3, r1
 800959c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800959e:	430b      	orrs	r3, r1
 80095a0:	6929      	ldr	r1, [r5, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095a2:	430b      	orrs	r3, r1
 80095a4:	6811      	ldr	r1, [r2, #0]
 80095a6:	430b      	orrs	r3, r1
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80095a8:	6a69      	ldr	r1, [r5, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80095aa:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 80095ae:	4333      	orrs	r3, r6
 80095b0:	433b      	orrs	r3, r7
 80095b2:	6013      	str	r3, [r2, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80095b4:	682a      	ldr	r2, [r5, #0]
 80095b6:	4b37      	ldr	r3, [pc, #220]	; (8009694 <HAL_SAI_Init.part.0+0x2bc>)
 80095b8:	6851      	ldr	r1, [r2, #4]
 80095ba:	400b      	ands	r3, r1
 80095bc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80095be:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80095c0:	69eb      	ldr	r3, [r5, #28]
 80095c2:	682a      	ldr	r2, [r5, #0]
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6851      	ldr	r1, [r2, #4]
 80095cc:	430b      	orrs	r3, r1
 80095ce:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80095d0:	682a      	ldr	r2, [r5, #0]
 80095d2:	4b31      	ldr	r3, [pc, #196]	; (8009698 <HAL_SAI_Init.part.0+0x2c0>)
 80095d4:	6891      	ldr	r1, [r2, #8]
 80095d6:	400b      	ands	r3, r1
 80095d8:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80095da:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 80095dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095de:	6829      	ldr	r1, [r5, #0]
 80095e0:	4313      	orrs	r3, r2
 80095e2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
 80095e4:	6888      	ldr	r0, [r1, #8]
 80095e6:	4313      	orrs	r3, r2
 80095e8:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 80095ea:	4303      	orrs	r3, r0
 80095ec:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80095ee:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80095f2:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80095f4:	6daa      	ldr	r2, [r5, #88]	; 0x58
 80095f6:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80095f8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80095fc:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80095fe:	682a      	ldr	r2, [r5, #0]
 8009600:	68d3      	ldr	r3, [r2, #12]
 8009602:	4003      	ands	r3, r0
 8009604:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009606:	6829      	ldr	r1, [r5, #0]
 8009608:	e9d5 301a 	ldrd	r3, r0, [r5, #104]	; 0x68
 800960c:	68ca      	ldr	r2, [r1, #12]
 800960e:	4303      	orrs	r3, r0
 8009610:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009612:	6f6a      	ldr	r2, [r5, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009614:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8009618:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800961a:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800961c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009620:	4a11      	ldr	r2, [pc, #68]	; (8009668 <HAL_SAI_Init.part.0+0x290>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8009622:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	4293      	cmp	r3, r2
 8009628:	d03c      	beq.n	80096a4 <HAL_SAI_Init.part.0+0x2cc>
 800962a:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800962e:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8009632:	4293      	cmp	r3, r2
 8009634:	d036      	beq.n	80096a4 <HAL_SAI_Init.part.0+0x2cc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009636:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8009638:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800963a:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
  return HAL_OK;
 800963e:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 8009640:	f885 2091 	strb.w	r2, [r5, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 8009644:	f885 3090 	strb.w	r3, [r5, #144]	; 0x90
}
 8009648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800964a:	f44f 6680 	mov.w	r6, #1024	; 0x400
 800964e:	e737      	b.n	80094c0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 8009650:	4601      	mov	r1, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009652:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 8009656:	e733      	b.n	80094c0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009658:	4639      	mov	r1, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800965a:	f44f 6600 	mov.w	r6, #2048	; 0x800
      break;
 800965e:	e72f      	b.n	80094c0 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 8009660:	4c0e      	ldr	r4, [pc, #56]	; (800969c <HAL_SAI_Init.part.0+0x2c4>)
 8009662:	e6dd      	b.n	8009420 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 8009664:	4c0e      	ldr	r4, [pc, #56]	; (80096a0 <HAL_SAI_Init.part.0+0x2c8>)
 8009666:	e6db      	b.n	8009420 <HAL_SAI_Init.part.0+0x48>
 8009668:	40015804 	.word	0x40015804
 800966c:	58005404 	.word	0x58005404
 8009670:	40015800 	.word	0x40015800
 8009674:	200008bc 	.word	0x200008bc
 8009678:	95cbec1b 	.word	0x95cbec1b
 800967c:	40015c00 	.word	0x40015c00
 8009680:	40015c04 	.word	0x40015c04
 8009684:	40016004 	.word	0x40016004
 8009688:	58005424 	.word	0x58005424
 800968c:	cccccccd 	.word	0xcccccccd
 8009690:	f005c010 	.word	0xf005c010
 8009694:	ffff1ff0 	.word	0xffff1ff0
 8009698:	fff88000 	.word	0xfff88000
 800969c:	40016000 	.word	0x40016000
 80096a0:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80096a4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096a6:	f023 0301 	bic.w	r3, r3, #1
 80096aa:	6463      	str	r3, [r4, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80096ac:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d1c0      	bne.n	8009636 <HAL_SAI_Init.part.0+0x25e>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80096b4:	e9d5 230f 	ldrd	r2, r3, [r5, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80096b8:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80096ba:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80096be:	6463      	str	r3, [r4, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80096c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80096c2:	f043 0301 	orr.w	r3, r3, #1
 80096c6:	6463      	str	r3, [r4, #68]	; 0x44
 80096c8:	e7b5      	b.n	8009636 <HAL_SAI_Init.part.0+0x25e>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80096ca:	6811      	ldr	r1, [r2, #0]
 80096cc:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <HAL_SAI_Init.part.0+0x3ac>)
 80096ce:	400b      	ands	r3, r1
 80096d0:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80096d2:	6c69      	ldr	r1, [r5, #68]	; 0x44
 80096d4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096d8:	430b      	orrs	r3, r1
 80096da:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 80096dc:	430b      	orrs	r3, r1
 80096de:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 80096e0:	430b      	orrs	r3, r1
 80096e2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 80096e4:	430b      	orrs	r3, r1
 80096e6:	6969      	ldr	r1, [r5, #20]
 80096e8:	430b      	orrs	r3, r1
 80096ea:	69a9      	ldr	r1, [r5, #24]
 80096ec:	430b      	orrs	r3, r1
 80096ee:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 80096f0:	e757      	b.n	80095a2 <HAL_SAI_Init.part.0+0x1ca>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 80096f2:	f1a7 0701 	sub.w	r7, r7, #1
 80096f6:	fab7 f787 	clz	r7, r7
 80096fa:	097f      	lsrs	r7, r7, #5
 80096fc:	027f      	lsls	r7, r7, #9
 80096fe:	e734      	b.n	800956a <HAL_SAI_Init.part.0+0x192>
  switch (hsai->Init.SynchroExt)
 8009700:	2013      	movs	r0, #19
 8009702:	2612      	movs	r6, #18
 8009704:	2711      	movs	r7, #17
 8009706:	2110      	movs	r1, #16
 8009708:	e6b5      	b.n	8009476 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800970a:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800970c:	2904      	cmp	r1, #4
 800970e:	d035      	beq.n	800977c <HAL_SAI_Init.part.0+0x3a4>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8009710:	2908      	cmp	r1, #8
 8009712:	d021      	beq.n	8009758 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
 8009714:	6d68      	ldr	r0, [r5, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8009716:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800971a:	0053      	lsls	r3, r2, #1
 800971c:	6a2a      	ldr	r2, [r5, #32]
 800971e:	fb00 f202 	mul.w	r2, r0, r2
 8009722:	fbb3 f3f2 	udiv	r3, r3, r2
 8009726:	e706      	b.n	8009536 <HAL_SAI_Init.part.0+0x15e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009728:	f44f 7080 	mov.w	r0, #256	; 0x100
 800972c:	2100      	movs	r1, #0
 800972e:	f7ff fc13 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009732:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009734:	4602      	mov	r2, r0
 8009736:	e6d0      	b.n	80094da <HAL_SAI_Init.part.0+0x102>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009738:	f44f 7000 	mov.w	r0, #512	; 0x200
 800973c:	2100      	movs	r1, #0
 800973e:	f7ff fc0b 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8009742:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8009744:	4602      	mov	r2, r0
 8009746:	e6d8      	b.n	80094fa <HAL_SAI_Init.part.0+0x122>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009748:	f44f 7000 	mov.w	r0, #512	; 0x200
 800974c:	2100      	movs	r1, #0
 800974e:	f7ff fc03 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8009752:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009754:	4602      	mov	r2, r0
 8009756:	e6c8      	b.n	80094ea <HAL_SAI_Init.part.0+0x112>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8009758:	f44f 7080 	mov.w	r0, #256	; 0x100
 800975c:	e7db      	b.n	8009716 <HAL_SAI_Init.part.0+0x33e>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800975e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009762:	2100      	movs	r1, #0
 8009764:	f7ff fbf8 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
 8009768:	4602      	mov	r2, r0
 800976a:	e6ce      	b.n	800950a <HAL_SAI_Init.part.0+0x132>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800976c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8009770:	2100      	movs	r1, #0
 8009772:	f7ff fbf1 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8009776:	682b      	ldr	r3, [r5, #0]
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8009778:	4602      	mov	r2, r0
 800977a:	e6c2      	b.n	8009502 <HAL_SAI_Init.part.0+0x12a>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800977c:	2040      	movs	r0, #64	; 0x40
 800977e:	e7ca      	b.n	8009716 <HAL_SAI_Init.part.0+0x33e>
      syncen_bits = 0;
 8009780:	2600      	movs	r6, #0
 8009782:	e69d      	b.n	80094c0 <HAL_SAI_Init.part.0+0xe8>
 8009784:	f805c010 	.word	0xf805c010

08009788 <HAL_SAI_InitProtocol>:
  switch (protocol)
 8009788:	2902      	cmp	r1, #2
{
 800978a:	b538      	push	{r3, r4, r5, lr}
 800978c:	4604      	mov	r4, r0
  switch (protocol)
 800978e:	d935      	bls.n	80097fc <HAL_SAI_InitProtocol+0x74>
 8009790:	1ec8      	subs	r0, r1, #3
 8009792:	2801      	cmp	r0, #1
 8009794:	d830      	bhi.n	80097f8 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009796:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8009798:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800979a:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800979c:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800979e:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 80097a0:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80097a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80097a6:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80097a8:	6860      	ldr	r0, [r4, #4]
 80097aa:	f030 0002 	bics.w	r0, r0, #2
 80097ae:	bf0c      	ite	eq
 80097b0:	2501      	moveq	r5, #1
 80097b2:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 80097b4:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80097b6:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80097ba:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 80097bc:	bf0c      	ite	eq
 80097be:	2001      	moveq	r0, #1
 80097c0:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80097c2:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80097c4:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80097c8:	65a0      	str	r0, [r4, #88]	; 0x58
 80097ca:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 80097cc:	2a03      	cmp	r2, #3
 80097ce:	d813      	bhi.n	80097f8 <HAL_SAI_InitProtocol+0x70>
 80097d0:	e8df f002 	tbb	[pc, r2]
 80097d4:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80097d8:	6823      	ldr	r3, [r4, #0]
 80097da:	4a47      	ldr	r2, [pc, #284]	; (80098f8 <HAL_SAI_InitProtocol+0x170>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d005      	beq.n	80097ec <HAL_SAI_InitProtocol+0x64>
 80097e0:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80097e4:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 80097e8:	4293      	cmp	r3, r2
 80097ea:	d105      	bne.n	80097f8 <HAL_SAI_InitProtocol+0x70>
 80097ec:	6863      	ldr	r3, [r4, #4]
 80097ee:	2b01      	cmp	r3, #1
 80097f0:	d102      	bne.n	80097f8 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 80097f2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d037      	beq.n	8009868 <HAL_SAI_InitProtocol+0xe0>
}
 80097f8:	2001      	movs	r0, #1
 80097fa:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80097fc:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80097fe:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009800:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009802:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 8009804:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009806:	6860      	ldr	r0, [r4, #4]
 8009808:	f030 0002 	bics.w	r0, r0, #2
 800980c:	bf14      	ite	ne
 800980e:	2001      	movne	r0, #1
 8009810:	2000      	moveq	r0, #0
 8009812:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009814:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8009818:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800981a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800981e:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8009820:	f013 0001 	ands.w	r0, r3, #1
 8009824:	d1e8      	bne.n	80097f8 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 8009826:	b949      	cbnz	r1, 800983c <HAL_SAI_InitProtocol+0xb4>
 8009828:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800982c:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 8009830:	2a03      	cmp	r2, #3
 8009832:	d8e1      	bhi.n	80097f8 <HAL_SAI_InitProtocol+0x70>
 8009834:	e8df f002 	tbb	[pc, r2]
 8009838:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800983c:	6660      	str	r0, [r4, #100]	; 0x64
 800983e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8009842:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 8009844:	2a03      	cmp	r2, #3
 8009846:	d8d7      	bhi.n	80097f8 <HAL_SAI_InitProtocol+0x70>
 8009848:	e8df f002 	tbb	[pc, r2]
 800984c:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009850:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009852:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009854:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009856:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009858:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800985a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800985c:	f7fa fe1e 	bl	800449c <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8009860:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8009864:	2b01      	cmp	r3, #1
 8009866:	d0b7      	beq.n	80097d8 <HAL_SAI_InitProtocol+0x50>
 8009868:	4620      	mov	r0, r4
}
 800986a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800986e:	f7ff bdb3 	b.w	80093d8 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009872:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009874:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009876:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009878:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800987a:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800987c:	e7ee      	b.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800987e:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009880:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009882:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009884:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009886:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009888:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800988a:	e7e7      	b.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800988c:	21e0      	movs	r1, #224	; 0xe0
 800988e:	e7f7      	b.n	8009880 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009890:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009892:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009894:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009896:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009898:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800989a:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800989c:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800989e:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098a2:	e7db      	b.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098a4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80098a6:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098a8:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098aa:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098ac:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80098b0:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098b2:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098b6:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098b8:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098ba:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098bc:	d1ce      	bne.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 80098be:	2308      	movs	r3, #8
 80098c0:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80098c2:	e7cb      	b.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098c4:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80098c6:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098c8:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80098ca:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80098ce:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098d0:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80098d4:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80098d6:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098da:	d1bf      	bne.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 80098dc:	2310      	movs	r3, #16
 80098de:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80098e0:	e7bc      	b.n	800985c <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80098e2:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80098e4:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80098e6:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80098e8:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80098ea:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80098ec:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80098ee:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80098f0:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80098f4:	e7b2      	b.n	800985c <HAL_SAI_InitProtocol+0xd4>
 80098f6:	bf00      	nop
 80098f8:	40015804 	.word	0x40015804

080098fc <HAL_SAI_Transmit_DMA>:
{
 80098fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009900:	4615      	mov	r5, r2
 8009902:	f04f 0800 	mov.w	r8, #0
 8009906:	460f      	mov	r7, r1
 8009908:	4604      	mov	r4, r0
 800990a:	f365 080f 	bfi	r8, r5, #0, #16
  uint32_t tickstart = HAL_GetTick();
 800990e:	f7fa fdad 	bl	800446c <HAL_GetTick>
 8009912:	f365 481f 	bfi	r8, r5, #16, #16
  if ((pData == NULL) || (Size == 0U))
 8009916:	2f00      	cmp	r7, #0
 8009918:	d066      	beq.n	80099e8 <HAL_SAI_Transmit_DMA+0xec>
 800991a:	fab5 f985 	clz	r9, r5
 800991e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8009922:	2d00      	cmp	r5, #0
 8009924:	d060      	beq.n	80099e8 <HAL_SAI_Transmit_DMA+0xec>
  if (hsai->State == HAL_SAI_STATE_READY)
 8009926:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800992a:	2b01      	cmp	r3, #1
 800992c:	fa5f fa83 	uxtb.w	sl, r3
 8009930:	d155      	bne.n	80099de <HAL_SAI_Transmit_DMA+0xe2>
    __HAL_LOCK(hsai);
 8009932:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8009936:	2b01      	cmp	r3, #1
 8009938:	d051      	beq.n	80099de <HAL_SAI_Transmit_DMA+0xe2>
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800993a:	2312      	movs	r3, #18
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800993c:	f8c4 9094 	str.w	r9, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009940:	4a39      	ldr	r2, [pc, #228]	; (8009a28 <HAL_SAI_Transmit_DMA+0x12c>)
 8009942:	4606      	mov	r6, r0
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009944:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009948:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
    __HAL_LOCK(hsai);
 800994c:	f884 a090 	strb.w	sl, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 8009950:	e9c4 781e 	strd	r7, r8, [r4, #120]	; 0x78
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009954:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009956:	4a35      	ldr	r2, [pc, #212]	; (8009a2c <HAL_SAI_Transmit_DMA+0x130>)
 8009958:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800995c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800995e:	4a34      	ldr	r2, [pc, #208]	; (8009a30 <HAL_SAI_Transmit_DMA+0x134>)
 8009960:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8009964:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 8009966:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800996a:	f8c3 9050 	str.w	r9, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800996e:	6822      	ldr	r2, [r4, #0]
 8009970:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 8009974:	321c      	adds	r2, #28
 8009976:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8009978:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800997c:	f7fb f99c 	bl	8004cb8 <HAL_DMA_Start_IT>
 8009980:	2800      	cmp	r0, #0
 8009982:	d13f      	bne.n	8009a04 <HAL_SAI_Transmit_DMA+0x108>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009984:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8009986:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009988:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800998a:	d032      	beq.n	80099f2 <HAL_SAI_Transmit_DMA+0xf6>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800998c:	2205      	movs	r2, #5
 800998e:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009990:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009992:	2b01      	cmp	r3, #1
 8009994:	bf98      	it	ls
 8009996:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009998:	6821      	ldr	r1, [r4, #0]
 800999a:	690b      	ldr	r3, [r1, #16]
 800999c:	4313      	orrs	r3, r2
 800999e:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80099a0:	6822      	ldr	r2, [r4, #0]
 80099a2:	6813      	ldr	r3, [r2, #0]
 80099a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099a8:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80099aa:	e005      	b.n	80099b8 <HAL_SAI_Transmit_DMA+0xbc>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80099ac:	f7fa fd5e 	bl	800446c <HAL_GetTick>
 80099b0:	1b83      	subs	r3, r0, r6
 80099b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099b6:	d82a      	bhi.n	8009a0e <HAL_SAI_Transmit_DMA+0x112>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80099b8:	6822      	ldr	r2, [r4, #0]
 80099ba:	6955      	ldr	r5, [r2, #20]
 80099bc:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 80099c0:	d0f4      	beq.n	80099ac <HAL_SAI_Transmit_DMA+0xb0>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80099c2:	6813      	ldr	r3, [r2, #0]
 80099c4:	03db      	lsls	r3, r3, #15
 80099c6:	d403      	bmi.n	80099d0 <HAL_SAI_Transmit_DMA+0xd4>
      __HAL_SAI_ENABLE(hsai);
 80099c8:	6813      	ldr	r3, [r2, #0]
 80099ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ce:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80099d0:	2300      	movs	r3, #0
    return HAL_OK;
 80099d2:	469a      	mov	sl, r3
    __HAL_UNLOCK(hsai);
 80099d4:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80099d8:	4650      	mov	r0, sl
 80099da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80099de:	f04f 0a02 	mov.w	sl, #2
}
 80099e2:	4650      	mov	r0, sl
 80099e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return  HAL_ERROR;
 80099e8:	f04f 0a01 	mov.w	sl, #1
}
 80099ec:	4650      	mov	r0, sl
 80099ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80099f2:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80099f6:	2a01      	cmp	r2, #1
 80099f8:	bf0b      	itete	eq
 80099fa:	2215      	moveq	r2, #21
 80099fc:	2205      	movne	r2, #5
 80099fe:	2171      	moveq	r1, #113	; 0x71
 8009a00:	2161      	movne	r1, #97	; 0x61
 8009a02:	e7c5      	b.n	8009990 <HAL_SAI_Transmit_DMA+0x94>
}
 8009a04:	4650      	mov	r0, sl
      __HAL_UNLOCK(hsai);
 8009a06:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
}
 8009a0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009a0e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8009a12:	f04f 0a03 	mov.w	sl, #3
        __HAL_UNLOCK(hsai);
 8009a16:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8009a1e:	4650      	mov	r0, sl
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009a20:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8009a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a28:	08009a99 	.word	0x08009a99
 8009a2c:	08009a35 	.word	0x08009a35
 8009a30:	08009aa5 	.word	0x08009aa5

08009a34 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009a34:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009a36:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a38:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a3e:	d01b      	beq.n	8009a78 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009a40:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8009a42:	2300      	movs	r3, #0
 8009a44:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009a48:	6813      	ldr	r3, [r2, #0]
 8009a4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009a4e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8009a52:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a54:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a56:	d012      	beq.n	8009a7e <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a58:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8009a5c:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009a60:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a62:	3b02      	subs	r3, #2
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	bf98      	it	ls
 8009a68:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009a6a:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009a6c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009a70:	4013      	ands	r3, r2
 8009a72:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8009a74:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009a78:	f011 face 	bl	801b018 <__HAL_SAI_TxCpltCallback_veneer>
#endif
}
 8009a7c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009a7e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009a82:	2a01      	cmp	r2, #1
 8009a84:	bf0b      	itete	eq
 8009a86:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8009a8a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8009a8e:	f06f 0215 	mvneq.w	r2, #21
 8009a92:	f06f 0205 	mvnne.w	r2, #5
 8009a96:	e7e3      	b.n	8009a60 <SAI_DMATxCplt+0x2c>

08009a98 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a98:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009a9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8009a9c:	f011 facc 	bl	801b038 <__HAL_SAI_TxHalfCpltCallback_veneer>
#endif
}
 8009aa0:	bd08      	pop	{r3, pc}
 8009aa2:	bf00      	nop

08009aa4 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009aa4:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009aa6:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8009aa8:	f7fc fb56 	bl	8006158 <HAL_DMA_GetError>
 8009aac:	2802      	cmp	r0, #2
 8009aae:	d025      	beq.n	8009afc <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009ab0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009ab4:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009aba:	4814      	ldr	r0, [pc, #80]	; (8009b0c <SAI_DMAError+0x68>)
 8009abc:	4a14      	ldr	r2, [pc, #80]	; (8009b10 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009abe:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009ac2:	680b      	ldr	r3, [r1, #0]
 8009ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ac8:	600b      	str	r3, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009aca:	6803      	ldr	r3, [r0, #0]
  __HAL_SAI_DISABLE(hsai);
 8009acc:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009ace:	fba2 2303 	umull	r2, r3, r2, r3
  __HAL_SAI_DISABLE(hsai);
 8009ad2:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009ad4:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8009ad6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009ada:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8009adc:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8009ade:	b173      	cbz	r3, 8009afe <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009ae0:	6822      	ldr	r2, [r4, #0]
    count--;
 8009ae2:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8009ae4:	6812      	ldr	r2, [r2, #0]
 8009ae6:	03d2      	lsls	r2, r2, #15
 8009ae8:	d4f9      	bmi.n	8009ade <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009aea:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009aec:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8009aee:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8009af0:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8009af4:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8009af8:	f011 fa92 	bl	801b020 <__HAL_SAI_ErrorCallback_veneer>
#endif
  }
}
 8009afc:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009afe:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8009b02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b06:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 8009b0a:	e7ee      	b.n	8009aea <SAI_DMAError+0x46>
 8009b0c:	200008bc 	.word	0x200008bc
 8009b10:	95cbec1b 	.word	0x95cbec1b

08009b14 <HAL_SD_GetCardStatus.part.0>:
  * @param  hsd: Pointer to SD handle
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	4604      	mov	r4, r0
 8009b1a:	b096      	sub	sp, #88	; 0x58
 8009b1c:	460d      	mov	r5, r1
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009b1e:	f7fa fca5 	bl	800446c <HAL_GetTick>
  uint32_t count;
  uint32_t *pData = pSDstatus;

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b22:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8009b24:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b26:	6820      	ldr	r0, [r4, #0]
 8009b28:	f001 feec 	bl	800b904 <SDMMC_GetResponse>
 8009b2c:	0181      	lsls	r1, r0, #6
 8009b2e:	d45a      	bmi.n	8009be6 <HAL_SD_GetCardStatus.part.0+0xd2>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009b30:	2140      	movs	r1, #64	; 0x40
 8009b32:	6820      	ldr	r0, [r4, #0]
 8009b34:	f001 ff00 	bl	800b938 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b38:	b1e8      	cbz	r0, 8009b76 <HAL_SD_GetCardStatus.part.0+0x62>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
  if (errorstate != HAL_SD_ERROR_NONE)
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009b3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b3c:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b3e:	6823      	ldr	r3, [r4, #0]
 8009b40:	4955      	ldr	r1, [pc, #340]	; (8009c98 <HAL_SD_GetCardStatus.part.0+0x184>)
    hsd->State = HAL_SD_STATE_READY;
 8009b42:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b44:	6399      	str	r1, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8009b46:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 8009b48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b4a:	4303      	orrs	r3, r0
 8009b4c:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009b4e:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009b56:	6820      	ldr	r0, [r4, #0]
 8009b58:	f001 feee 	bl	800b938 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b5c:	b138      	cbz	r0, 8009b6e <HAL_SD_GetCardStatus.part.0+0x5a>
    hsd->State = HAL_SD_STATE_READY;
 8009b5e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b60:	6822      	ldr	r2, [r4, #0]
 8009b62:	494d      	ldr	r1, [pc, #308]	; (8009c98 <HAL_SD_GetCardStatus.part.0+0x184>)
    status = HAL_ERROR;
 8009b64:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009b66:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8009b68:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8009b6a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 8009b6e:	4630      	mov	r0, r6
 8009b70:	b016      	add	sp, #88	; 0x58
 8009b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b76:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8009b78:	6820      	ldr	r0, [r4, #0]
 8009b7a:	0409      	lsls	r1, r1, #16
 8009b7c:	f002 fc64 	bl	800c448 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009b80:	2800      	cmp	r0, #0
 8009b82:	d1da      	bne.n	8009b3a <HAL_SD_GetCardStatus.part.0+0x26>
  config.DataLength    = 64U;
 8009b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009b88:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009b8a:	4669      	mov	r1, sp
 8009b8c:	6820      	ldr	r0, [r4, #0]
  config.DataLength    = 64U;
 8009b8e:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009b92:	2260      	movs	r2, #96	; 0x60
 8009b94:	2302      	movs	r3, #2
 8009b96:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009ba2:	f001 feb3 	bl	800b90c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	f003 f81a 	bl	800cbe0 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d1c4      	bne.n	8009b3a <HAL_SD_GetCardStatus.part.0+0x26>
  uint32_t *pData = pSDstatus;
 8009bb0:	ae06      	add	r6, sp, #24
 8009bb2:	e004      	b.n	8009bbe <HAL_SD_GetCardStatus.part.0+0xaa>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
        pData++;
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009bb4:	f7fa fc5a 	bl	800446c <HAL_GetTick>
 8009bb8:	1bc0      	subs	r0, r0, r7
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d017      	beq.n	8009bee <HAL_SD_GetCardStatus.part.0+0xda>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bc2:	f412 7f95 	tst.w	r2, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009bc8:	d114      	bne.n	8009bf4 <HAL_SD_GetCardStatus.part.0+0xe0>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009bca:	0412      	lsls	r2, r2, #16
 8009bcc:	d5f2      	bpl.n	8009bb4 <HAL_SD_GetCardStatus.part.0+0xa0>
 8009bce:	f106 0820 	add.w	r8, r6, #32
 8009bd2:	e000      	b.n	8009bd6 <HAL_SD_GetCardStatus.part.0+0xc2>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f001 fe7e 	bl	800b8d8 <SDMMC_ReadFIFO>
 8009bdc:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8009be0:	4546      	cmp	r6, r8
 8009be2:	d1f7      	bne.n	8009bd4 <HAL_SD_GetCardStatus.part.0+0xc0>
 8009be4:	e7e6      	b.n	8009bb4 <HAL_SD_GetCardStatus.part.0+0xa0>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8009be6:	6823      	ldr	r3, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009be8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8009bec:	e7a8      	b.n	8009b40 <HAL_SD_GetCardStatus.part.0+0x2c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009bee:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8009bf2:	e7a4      	b.n	8009b3e <HAL_SD_GetCardStatus.part.0+0x2a>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009bf4:	0710      	lsls	r0, r2, #28
 8009bf6:	d449      	bmi.n	8009c8c <HAL_SD_GetCardStatus.part.0+0x178>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009bf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009bfa:	0791      	lsls	r1, r2, #30
 8009bfc:	d448      	bmi.n	8009c90 <HAL_SD_GetCardStatus.part.0+0x17c>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009bfe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009c00:	0692      	lsls	r2, r2, #26
 8009c02:	d50a      	bpl.n	8009c1a <HAL_SD_GetCardStatus.part.0+0x106>
 8009c04:	e046      	b.n	8009c94 <HAL_SD_GetCardStatus.part.0+0x180>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c06:	f001 fe67 	bl	800b8d8 <SDMMC_ReadFIFO>
 8009c0a:	f846 0b04 	str.w	r0, [r6], #4
    pData++;

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009c0e:	f7fa fc2d 	bl	800446c <HAL_GetTick>
 8009c12:	1bc0      	subs	r0, r0, r7
 8009c14:	3001      	adds	r0, #1
 8009c16:	d0ea      	beq.n	8009bee <HAL_SD_GetCardStatus.part.0+0xda>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009c18:	6823      	ldr	r3, [r4, #0]
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009c1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009c1c:	4618      	mov	r0, r3
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009c1e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009c22:	d1f0      	bne.n	8009c06 <HAL_SD_GetCardStatus.part.0+0xf2>
      return HAL_SD_ERROR_TIMEOUT;
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c24:	491d      	ldr	r1, [pc, #116]	; (8009c9c <HAL_SD_GetCardStatus.part.0+0x188>)
  HAL_StatusTypeDef status = HAL_OK;
 8009c26:	4616      	mov	r6, r2
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009c28:	6399      	str	r1, [r3, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8009c2a:	9b06      	ldr	r3, [sp, #24]
 8009c2c:	f3c3 1281 	ubfx	r2, r3, #6, #2
 8009c30:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8009c32:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8009c36:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8009c38:	0a1a      	lsrs	r2, r3, #8
 8009c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009c3e:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8009c42:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 8009c46:	b292      	uxth	r2, r2
 8009c48:	ba09      	rev	r1, r1
 8009c4a:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009c4c:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009c4e:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009c50:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009c52:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009c56:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009c5a:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009c5c:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009c60:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8009c62:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8009c64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c6a:	b2d0      	uxtb	r0, r2
 8009c6c:	4303      	orrs	r3, r0
 8009c6e:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009c70:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8009c74:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009c76:	f3c2 2301 	ubfx	r3, r2, #8, #2
 8009c7a:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009c7c:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009c80:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009c84:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009c86:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009c88:	74a9      	strb	r1, [r5, #18]
 8009c8a:	e762      	b.n	8009b52 <HAL_SD_GetCardStatus.part.0+0x3e>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009c8c:	2008      	movs	r0, #8
 8009c8e:	e757      	b.n	8009b40 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009c90:	2002      	movs	r0, #2
 8009c92:	e755      	b.n	8009b40 <HAL_SD_GetCardStatus.part.0+0x2c>
    return HAL_SD_ERROR_RX_OVERRUN;
 8009c94:	2020      	movs	r0, #32
 8009c96:	e753      	b.n	8009b40 <HAL_SD_GetCardStatus.part.0+0x2c>
 8009c98:	1fe00fff 	.word	0x1fe00fff
 8009c9c:	18000f3a 	.word	0x18000f3a

08009ca0 <SD_FindSCR.constprop.0>:
  * @brief  Finds the SD card SCR register value.
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
 8009ca0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	b086      	sub	sp, #24
 8009ca8:	460f      	mov	r7, r1
{
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009caa:	f7fa fbdf 	bl	800446c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cae:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8009cb0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009cb2:	6828      	ldr	r0, [r5, #0]
 8009cb4:	f001 fe40 	bl	800b938 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cb8:	4604      	mov	r4, r0
 8009cba:	b118      	cbz	r0, 8009cc4 <SD_FindSCR.constprop.0+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8009cbc:	4620      	mov	r0, r4
 8009cbe:	b006      	add	sp, #24
 8009cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009cc4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8009cc6:	6828      	ldr	r0, [r5, #0]
 8009cc8:	0409      	lsls	r1, r1, #16
 8009cca:	f002 fbbd 	bl	800c448 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cce:	4604      	mov	r4, r0
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d1f3      	bne.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
  config.DataLength    = 8U;
 8009cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009cd8:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cda:	4669      	mov	r1, sp
 8009cdc:	6828      	ldr	r0, [r5, #0]
  config.DataLength    = 8U;
 8009cde:	e9cd 2300 	strd	r2, r3, [sp]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009ce2:	2230      	movs	r2, #48	; 0x30
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	e9cd 2302 	strd	r2, r3, [sp, #8]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009cea:	2200      	movs	r2, #0
 8009cec:	2301      	movs	r3, #1
 8009cee:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cf2:	f001 fe0b 	bl	800b90c <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009cf6:	6828      	ldr	r0, [r5, #0]
 8009cf8:	f002 fd3e 	bl	800c778 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8009cfc:	4604      	mov	r4, r0
 8009cfe:	2800      	cmp	r0, #0
 8009d00:	d1dc      	bne.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009d02:	4682      	mov	sl, r0
 8009d04:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009d06:	f240 582a 	movw	r8, #1322	; 0x52a
 8009d0a:	e004      	b.n	8009d16 <SD_FindSCR.constprop.0+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d0c:	f7fa fbae 	bl	800446c <HAL_GetTick>
 8009d10:	1b83      	subs	r3, r0, r6
 8009d12:	3301      	adds	r3, #1
 8009d14:	d024      	beq.n	8009d60 <SD_FindSCR.constprop.0+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009d16:	6828      	ldr	r0, [r5, #0]
 8009d18:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d1a:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009d1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8009d20:	d10c      	bne.n	8009d3c <SD_FindSCR.constprop.0+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009d22:	0319      	lsls	r1, r3, #12
 8009d24:	d4f2      	bmi.n	8009d0c <SD_FindSCR.constprop.0+0x6c>
 8009d26:	2c00      	cmp	r4, #0
 8009d28:	d1f0      	bne.n	8009d0c <SD_FindSCR.constprop.0+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009d2a:	f001 fdd5 	bl	800b8d8 <SDMMC_ReadFIFO>
 8009d2e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009d30:	6828      	ldr	r0, [r5, #0]
      index++;
 8009d32:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009d34:	f001 fdd0 	bl	800b8d8 <SDMMC_ReadFIFO>
 8009d38:	4682      	mov	sl, r0
      index++;
 8009d3a:	e7e7      	b.n	8009d0c <SD_FindSCR.constprop.0+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d3c:	071a      	lsls	r2, r3, #28
 8009d3e:	d416      	bmi.n	8009d6e <SD_FindSCR.constprop.0+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d40:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009d42:	079b      	lsls	r3, r3, #30
 8009d44:	d40f      	bmi.n	8009d66 <SD_FindSCR.constprop.0+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d46:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8009d48:	f014 0420 	ands.w	r4, r4, #32
 8009d4c:	d113      	bne.n	8009d76 <SD_FindSCR.constprop.0+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009d4e:	fa9a f28a 	rev.w	r2, sl
 8009d52:	fa99 f389 	rev.w	r3, r9
 8009d56:	490a      	ldr	r1, [pc, #40]	; (8009d80 <SD_FindSCR.constprop.0+0xe0>)
 8009d58:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8009d5a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8009d5e:	e7ad      	b.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8009d60:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009d64:	e7aa      	b.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d66:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d68:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d6a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d6c:	e7a6      	b.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d6e:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d70:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d72:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d74:	e7a2      	b.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d76:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8009d78:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d7a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8009d7c:	e79e      	b.n	8009cbc <SD_FindSCR.constprop.0+0x1c>
 8009d7e:	bf00      	nop
 8009d80:	18000f3a 	.word	0x18000f3a

08009d84 <HAL_SD_ReadBlocks>:
{
 8009d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d88:	460d      	mov	r5, r1
 8009d8a:	b087      	sub	sp, #28
 8009d8c:	4604      	mov	r4, r0
 8009d8e:	4692      	mov	sl, r2
 8009d90:	461f      	mov	r7, r3
 8009d92:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8009d96:	f7fa fb69 	bl	800446c <HAL_GetTick>
  if (NULL == pData)
 8009d9a:	2d00      	cmp	r5, #0
 8009d9c:	d069      	beq.n	8009e72 <HAL_SD_ReadBlocks+0xee>
  if (hsd->State == HAL_SD_STATE_READY)
 8009d9e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009da2:	2b01      	cmp	r3, #1
 8009da4:	fa5f f983 	uxtb.w	r9, r3
 8009da8:	d152      	bne.n	8009e50 <HAL_SD_ReadBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009daa:	eb0a 0307 	add.w	r3, sl, r7
 8009dae:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009db0:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009db2:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009db4:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009db6:	d866      	bhi.n	8009e86 <HAL_SD_ReadBlocks+0x102>
    hsd->State = HAL_SD_STATE_BUSY;
 8009db8:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009dba:	f04f 0b02 	mov.w	fp, #2
 8009dbe:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 8009dc0:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009dc4:	6823      	ldr	r3, [r4, #0]
 8009dc6:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dc8:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009dca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dcc:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009dce:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009dd0:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009dd4:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009dd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8009ddc:	bf18      	it	ne
 8009dde:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009de2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009de4:	027b      	lsls	r3, r7, #9
 8009de6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009de8:	2390      	movs	r3, #144	; 0x90
 8009dea:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009dee:	f001 fd8d 	bl	800b90c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009df2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009df4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009df6:	68d3      	ldr	r3, [r2, #12]
 8009df8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009dfc:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8009dfe:	d931      	bls.n	8009e64 <HAL_SD_ReadBlocks+0xe0>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009e00:	4651      	mov	r1, sl
 8009e02:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8009e04:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8009e08:	f001 fef2 	bl	800bbf0 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009e0c:	2800      	cmp	r0, #0
 8009e0e:	d142      	bne.n	8009e96 <HAL_SD_ReadBlocks+0x112>
    dataremaining = config.DataLength;
 8009e10:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e14:	e004      	b.n	8009e20 <HAL_SD_ReadBlocks+0x9c>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009e16:	f7fa fb29 	bl	800446c <HAL_GetTick>
 8009e1a:	1b80      	subs	r0, r0, r6
 8009e1c:	4540      	cmp	r0, r8
 8009e1e:	d267      	bcs.n	8009ef0 <HAL_SD_ReadBlocks+0x16c>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e24:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8009e28:	d141      	bne.n	8009eae <HAL_SD_ReadBlocks+0x12a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8009e2a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009e2c:	041a      	lsls	r2, r3, #16
 8009e2e:	d5f2      	bpl.n	8009e16 <HAL_SD_ReadBlocks+0x92>
 8009e30:	f1bb 0f1f 	cmp.w	fp, #31
 8009e34:	d9ef      	bls.n	8009e16 <HAL_SD_ReadBlocks+0x92>
 8009e36:	f105 0a20 	add.w	sl, r5, #32
 8009e3a:	e000      	b.n	8009e3e <HAL_SD_ReadBlocks+0xba>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8009e3c:	6820      	ldr	r0, [r4, #0]
 8009e3e:	f001 fd4b 	bl	800b8d8 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)(data & 0xFFU);
 8009e42:	f845 0b04 	str.w	r0, [r5], #4
        for (count = 0U; count < 8U; count++)
 8009e46:	45aa      	cmp	sl, r5
 8009e48:	d1f8      	bne.n	8009e3c <HAL_SD_ReadBlocks+0xb8>
        dataremaining -= 32U;
 8009e4a:	f1ab 0b20 	sub.w	fp, fp, #32
 8009e4e:	e7e2      	b.n	8009e16 <HAL_SD_ReadBlocks+0x92>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009e52:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8009e56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009e5a:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009e5c:	4648      	mov	r0, r9
 8009e5e:	b007      	add	sp, #28
 8009e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009e64:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009e66:	4651      	mov	r1, sl
 8009e68:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8009e6a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8009e6c:	f001 fe12 	bl	800ba94 <SDMMC_CmdReadSingleBlock>
 8009e70:	e7cc      	b.n	8009e0c <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e72:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 8009e74:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e78:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8009e7c:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009e7e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009e80:	b007      	add	sp, #28
 8009e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e86:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 8009e88:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8009e8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e8e:	6363      	str	r3, [r4, #52]	; 0x34
}
 8009e90:	b007      	add	sp, #28
 8009e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	4a30      	ldr	r2, [pc, #192]	; (8009f5c <HAL_SD_ReadBlocks+0x1d8>)
 8009e9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8009e9c:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8009e9e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ea0:	4303      	orrs	r3, r0
 8009ea2:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8009ea4:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 8009ea6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 8009eaa:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 8009eac:	e7d6      	b.n	8009e5c <HAL_SD_ReadBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8009eae:	68c3      	ldr	r3, [r0, #12]
 8009eb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009eb4:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8009eb6:	6820      	ldr	r0, [r4, #0]
 8009eb8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009eba:	05db      	lsls	r3, r3, #23
 8009ebc:	d501      	bpl.n	8009ec2 <HAL_SD_ReadBlocks+0x13e>
 8009ebe:	2f01      	cmp	r7, #1
 8009ec0:	d825      	bhi.n	8009f0e <HAL_SD_ReadBlocks+0x18a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009ec2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ec4:	f013 0308 	ands.w	r3, r3, #8
 8009ec8:	d135      	bne.n	8009f36 <HAL_SD_ReadBlocks+0x1b2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009eca:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8009ecc:	f012 0202 	ands.w	r2, r2, #2
 8009ed0:	d126      	bne.n	8009f20 <HAL_SD_ReadBlocks+0x19c>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009ed2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8009ed4:	f013 0320 	ands.w	r3, r3, #32
 8009ed8:	d039      	beq.n	8009f4e <HAL_SD_ReadBlocks+0x1ca>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009eda:	4b20      	ldr	r3, [pc, #128]	; (8009f5c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009edc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ede:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8009ee0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009ee2:	f043 0320 	orr.w	r3, r3, #32
 8009ee6:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009ee8:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009eec:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009eee:	e7b5      	b.n	8009e5c <HAL_SD_ReadBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ef0:	6823      	ldr	r3, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 8009ef2:	2101      	movs	r1, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009ef4:	4819      	ldr	r0, [pc, #100]	; (8009f5c <HAL_SD_ReadBlocks+0x1d8>)
        hsd->Context = SD_CONTEXT_NONE;
 8009ef6:	2200      	movs	r2, #0
        return HAL_TIMEOUT;
 8009ef8:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009efc:	6398      	str	r0, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8009efe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009f04:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 8009f06:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 8009f0a:	62e2      	str	r2, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 8009f0c:	e7a6      	b.n	8009e5c <HAL_SD_ReadBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8009f0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009f10:	2b03      	cmp	r3, #3
 8009f12:	d0d6      	beq.n	8009ec2 <HAL_SD_ReadBlocks+0x13e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8009f14:	f002 f876 	bl	800c004 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8009f18:	2800      	cmp	r0, #0
 8009f1a:	d1bc      	bne.n	8009e96 <HAL_SD_ReadBlocks+0x112>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f1c:	6820      	ldr	r0, [r4, #0]
 8009f1e:	e7d0      	b.n	8009ec2 <HAL_SD_ReadBlocks+0x13e>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f20:	4a0e      	ldr	r2, [pc, #56]	; (8009f5c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009f22:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f24:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8009f26:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8009f28:	f042 0202 	orr.w	r2, r2, #2
 8009f2c:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8009f2e:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f32:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009f34:	e792      	b.n	8009e5c <HAL_SD_ReadBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f36:	4b09      	ldr	r3, [pc, #36]	; (8009f5c <HAL_SD_ReadBlocks+0x1d8>)
      hsd->State = HAL_SD_STATE_READY;
 8009f38:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009f3a:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8009f3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f3e:	f043 0308 	orr.w	r3, r3, #8
 8009f42:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8009f44:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8009f46:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8009f4a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 8009f4c:	e786      	b.n	8009e5c <HAL_SD_ReadBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f4e:	4904      	ldr	r1, [pc, #16]	; (8009f60 <HAL_SD_ReadBlocks+0x1dc>)
    hsd->State = HAL_SD_STATE_READY;
 8009f50:	2201      	movs	r2, #1
    return HAL_OK;
 8009f52:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009f54:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8009f56:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 8009f5a:	e77f      	b.n	8009e5c <HAL_SD_ReadBlocks+0xd8>
 8009f5c:	1fe00fff 	.word	0x1fe00fff
 8009f60:	18000f3a 	.word	0x18000f3a

08009f64 <HAL_SD_WriteBlocks>:
{
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	460d      	mov	r5, r1
 8009f6a:	b089      	sub	sp, #36	; 0x24
 8009f6c:	4604      	mov	r4, r0
 8009f6e:	4692      	mov	sl, r2
 8009f70:	461f      	mov	r7, r3
 8009f72:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8009f76:	f7fa fa79 	bl	800446c <HAL_GetTick>
  if (NULL == pData)
 8009f7a:	2d00      	cmp	r5, #0
 8009f7c:	d068      	beq.n	800a050 <HAL_SD_WriteBlocks+0xec>
  if (hsd->State == HAL_SD_STATE_READY)
 8009f7e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8009f82:	2b01      	cmp	r3, #1
 8009f84:	fa5f f983 	uxtb.w	r9, r3
 8009f88:	d152      	bne.n	800a030 <HAL_SD_WriteBlocks+0xcc>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f8a:	eb0a 0307 	add.w	r3, sl, r7
 8009f8e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f90:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f92:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8009f94:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8009f96:	d865      	bhi.n	800a064 <HAL_SD_WriteBlocks+0x100>
    hsd->State = HAL_SD_STATE_BUSY;
 8009f98:	2303      	movs	r3, #3
 8009f9a:	4606      	mov	r6, r0
 8009f9c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 8009fa0:	6823      	ldr	r3, [r4, #0]
 8009fa2:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fa4:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009fa6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fa8:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8009faa:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8009fac:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009fb0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8009fb4:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8009fba:	bf18      	it	ne
 8009fbc:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009fc0:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8009fc2:	027b      	lsls	r3, r7, #9
 8009fc4:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8009fc6:	2390      	movs	r3, #144	; 0x90
 8009fc8:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009fca:	f001 fc9f 	bl	800b90c <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009fce:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8009fd0:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009fd2:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8009fd4:	68d3      	ldr	r3, [r2, #12]
 8009fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fda:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8009fdc:	d932      	bls.n	800a044 <HAL_SD_WriteBlocks+0xe0>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009fde:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009fe0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8009fe2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8009fe4:	f001 ff60 	bl	800bea8 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8009fe8:	2800      	cmp	r0, #0
 8009fea:	d143      	bne.n	800a074 <HAL_SD_WriteBlocks+0x110>
    dataremaining = config.DataLength;
 8009fec:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009ff0:	e004      	b.n	8009ffc <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8009ff2:	f7fa fa3b 	bl	800446c <HAL_GetTick>
 8009ff6:	1b80      	subs	r0, r0, r6
 8009ff8:	4540      	cmp	r0, r8
 8009ffa:	d268      	bcs.n	800a0ce <HAL_SD_WriteBlocks+0x16a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8009ffc:	6820      	ldr	r0, [r4, #0]
 8009ffe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a000:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800a004:	d142      	bne.n	800a08c <HAL_SD_WriteBlocks+0x128>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800a006:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a008:	045a      	lsls	r2, r3, #17
 800a00a:	d5f2      	bpl.n	8009ff2 <HAL_SD_WriteBlocks+0x8e>
 800a00c:	f1bb 0f1f 	cmp.w	fp, #31
 800a010:	d9ef      	bls.n	8009ff2 <HAL_SD_WriteBlocks+0x8e>
 800a012:	f105 0a20 	add.w	sl, r5, #32
 800a016:	e000      	b.n	800a01a <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a018:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a01a:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a01e:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800a020:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800a022:	f001 fc5d 	bl	800b8e0 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800a026:	4555      	cmp	r5, sl
 800a028:	d1f6      	bne.n	800a018 <HAL_SD_WriteBlocks+0xb4>
        dataremaining -= 32U;
 800a02a:	f1ab 0b20 	sub.w	fp, fp, #32
 800a02e:	e7e0      	b.n	8009ff2 <HAL_SD_WriteBlocks+0x8e>
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a030:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a032:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800a036:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a03a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a03c:	4648      	mov	r0, r9
 800a03e:	b009      	add	sp, #36	; 0x24
 800a040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a044:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a046:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800a048:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a04a:	f001 fe7f 	bl	800bd4c <SDMMC_CmdWriteSingleBlock>
 800a04e:	e7cb      	b.n	8009fe8 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a050:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800a052:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a056:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800a05a:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a05c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a05e:	b009      	add	sp, #36	; 0x24
 800a060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a064:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800a066:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a068:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a06c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a06e:	b009      	add	sp, #36	; 0x24
 800a070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	4a30      	ldr	r2, [pc, #192]	; (800a138 <HAL_SD_WriteBlocks+0x1d4>)
 800a078:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800a07a:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800a07c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a07e:	4303      	orrs	r3, r0
 800a080:	6363      	str	r3, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800a082:	2300      	movs	r3, #0
          hsd->State = HAL_SD_STATE_READY;
 800a084:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800a088:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800a08a:	e7d7      	b.n	800a03c <HAL_SD_WriteBlocks+0xd8>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a08c:	68c3      	ldr	r3, [r0, #12]
 800a08e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a092:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800a094:	6820      	ldr	r0, [r4, #0]
 800a096:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a098:	05db      	lsls	r3, r3, #23
 800a09a:	d501      	bpl.n	800a0a0 <HAL_SD_WriteBlocks+0x13c>
 800a09c:	2f01      	cmp	r7, #1
 800a09e:	d823      	bhi.n	800a0e8 <HAL_SD_WriteBlocks+0x184>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800a0a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a0a2:	f013 0308 	ands.w	r3, r3, #8
 800a0a6:	d133      	bne.n	800a110 <HAL_SD_WriteBlocks+0x1ac>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800a0a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800a0aa:	f012 0202 	ands.w	r2, r2, #2
 800a0ae:	d124      	bne.n	800a0fa <HAL_SD_WriteBlocks+0x196>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800a0b0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a0b2:	f013 0310 	ands.w	r3, r3, #16
 800a0b6:	d037      	beq.n	800a128 <HAL_SD_WriteBlocks+0x1c4>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0b8:	4b1f      	ldr	r3, [pc, #124]	; (800a138 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800a0ba:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0bc:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a0be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0c0:	f043 0310 	orr.w	r3, r3, #16
 800a0c4:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a0c6:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a0ca:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800a0cc:	e7b6      	b.n	800a03c <HAL_SD_WriteBlocks+0xd8>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0ce:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a0d0:	2201      	movs	r2, #1
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0d2:	4819      	ldr	r0, [pc, #100]	; (800a138 <HAL_SD_WriteBlocks+0x1d4>)
        hsd->Context = SD_CONTEXT_NONE;
 800a0d4:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 800a0d6:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0da:	6388      	str	r0, [r1, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0de:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800a0e0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800a0e4:	62e3      	str	r3, [r4, #44]	; 0x2c
        return HAL_TIMEOUT;
 800a0e6:	e7a9      	b.n	800a03c <HAL_SD_WriteBlocks+0xd8>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800a0e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a0ea:	2b03      	cmp	r3, #3
 800a0ec:	d0d8      	beq.n	800a0a0 <HAL_SD_WriteBlocks+0x13c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a0ee:	f001 ff89 	bl	800c004 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800a0f2:	2800      	cmp	r0, #0
 800a0f4:	d1be      	bne.n	800a074 <HAL_SD_WriteBlocks+0x110>
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0f6:	6820      	ldr	r0, [r4, #0]
 800a0f8:	e7d2      	b.n	800a0a0 <HAL_SD_WriteBlocks+0x13c>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0fa:	4a0f      	ldr	r2, [pc, #60]	; (800a138 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800a0fc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a0fe:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a100:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a102:	f042 0202 	orr.w	r2, r2, #2
 800a106:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a108:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a10c:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800a10e:	e795      	b.n	800a03c <HAL_SD_WriteBlocks+0xd8>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a110:	4b09      	ldr	r3, [pc, #36]	; (800a138 <HAL_SD_WriteBlocks+0x1d4>)
      hsd->State = HAL_SD_STATE_READY;
 800a112:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a114:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a118:	f043 0308 	orr.w	r3, r3, #8
 800a11c:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a11e:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800a120:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a124:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800a126:	e789      	b.n	800a03c <HAL_SD_WriteBlocks+0xd8>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a128:	4904      	ldr	r1, [pc, #16]	; (800a13c <HAL_SD_WriteBlocks+0x1d8>)
    hsd->State = HAL_SD_STATE_READY;
 800a12a:	2201      	movs	r2, #1
    return HAL_OK;
 800a12c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a12e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a130:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800a134:	e782      	b.n	800a03c <HAL_SD_WriteBlocks+0xd8>
 800a136:	bf00      	nop
 800a138:	1fe00fff 	.word	0x1fe00fff
 800a13c:	18000f3a 	.word	0x18000f3a

0800a140 <HAL_SD_ErrorCallback>:
 800a140:	4770      	bx	lr
 800a142:	bf00      	nop

0800a144 <HAL_SD_GetCardCSD>:
{
 800a144:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a146:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a148:	f04f 0c00 	mov.w	ip, #0
{
 800a14c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a14e:	0f92      	lsrs	r2, r2, #30
 800a150:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a152:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800a154:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800a158:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a15a:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800a15e:	f002 0203 	and.w	r2, r2, #3
 800a162:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a164:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800a168:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a16a:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800a16e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a170:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800a174:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a176:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a178:	0d12      	lsrs	r2, r2, #20
 800a17a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a17c:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800a180:	f002 020f 	and.w	r2, r2, #15
 800a184:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a186:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a188:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800a18c:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a18e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a190:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800a194:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a196:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a198:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800a19c:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a19e:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a1a0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800a1a4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a1a6:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800a1aa:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	f040 808a 	bne.w	800a2c6 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a1b2:	6e04      	ldr	r4, [r0, #96]	; 0x60
 800a1b4:	f640 72fc 	movw	r2, #4092	; 0xffc
 800a1b8:	6e40      	ldr	r0, [r0, #100]	; 0x64
 800a1ba:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800a1be:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800a1c2:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a1c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a1c6:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800a1ca:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a1cc:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800a1d0:	f002 0207 	and.w	r2, r2, #7
 800a1d4:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a1d6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a1d8:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800a1dc:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a1de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a1e0:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800a1e4:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a1e6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a1e8:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800a1ec:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a1ee:	690a      	ldr	r2, [r1, #16]
 800a1f0:	3201      	adds	r2, #1
 800a1f2:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a1f4:	7e08      	ldrb	r0, [r1, #24]
 800a1f6:	f000 0007 	and.w	r0, r0, #7
 800a1fa:	3002      	adds	r0, #2
 800a1fc:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a1fe:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a200:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a202:	f891 c008 	ldrb.w	ip, [r1, #8]
 800a206:	f00c 0c0f 	and.w	ip, ip, #15
 800a20a:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a20e:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a212:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800a214:	fb02 f20c 	mul.w	r2, r2, ip
 800a218:	651a      	str	r2, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a21a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
    hsd->SdCard.LogBlockSize = 512U;
 800a21c:	f44f 7400 	mov.w	r4, #512	; 0x200
  pCSD->Reserved3 = 0;
 800a220:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800a222:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a226:	f3c2 3280 	ubfx	r2, r2, #14, #1
    hsd->SdCard.LogBlockSize = 512U;
 800a22a:	655c      	str	r4, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800a22c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800a22e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a230:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800a234:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800a236:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800a238:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800a23c:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800a23e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a240:	0fd2      	lsrs	r2, r2, #31
 800a242:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800a244:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a246:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800a24a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800a24c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a24e:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800a252:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800a254:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a256:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800a25a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800a25c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a25e:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800a262:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800a266:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800a26a:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800a26e:	ea02 020c 	and.w	r2, r2, ip
 800a272:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800a276:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a278:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800a27c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800a280:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a282:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800a286:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800a28a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a28c:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800a290:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800a294:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a296:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800a29a:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800a29e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a2a0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800a2a4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800a2a8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a2aa:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800a2ae:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800a2b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a2b4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800a2b8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800a2bc:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800a2c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2c4:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800a2c6:	2a01      	cmp	r2, #1
 800a2c8:	d110      	bne.n	800a2ec <HAL_SD_GetCardCSD+0x1a8>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a2ca:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800a2cc:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800a2d0:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800a2d4:	0412      	lsls	r2, r2, #16
 800a2d6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800a2da:	4322      	orrs	r2, r4
 800a2dc:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2de:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800a2e0:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800a2e2:	3201      	adds	r2, #1
 800a2e4:	0292      	lsls	r2, r2, #10
 800a2e6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800a2e8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800a2ea:	e796      	b.n	800a21a <HAL_SD_GetCardCSD+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2ec:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a2ee:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2f0:	4805      	ldr	r0, [pc, #20]	; (800a308 <HAL_SD_GetCardCSD+0x1c4>)
 800a2f2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800a2f4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a2f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a2f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800a2fc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a2fe:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800a302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a306:	4770      	bx	lr
 800a308:	1fe00fff 	.word	0x1fe00fff

0800a30c <HAL_SD_InitCard>:
{
 800a30c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a30e:	2200      	movs	r2, #0
{
 800a310:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a312:	2300      	movs	r3, #0
{
 800a314:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a316:	2100      	movs	r1, #0
 800a318:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a31c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a320:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a324:	f7fe fe18 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800a328:	b940      	cbnz	r0, 800a33c <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800a32a:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a32c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800a330:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800a334:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a336:	4630      	mov	r0, r6
 800a338:	b015      	add	sp, #84	; 0x54
 800a33a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a33c:	0a06      	lsrs	r6, r0, #8
 800a33e:	4b8e      	ldr	r3, [pc, #568]	; (800a578 <HAL_SD_InitCard+0x26c>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800a340:	aa07      	add	r2, sp, #28
 800a342:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a344:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800a348:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800a34a:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800a34c:	9608      	str	r6, [sp, #32]
 800a34e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a352:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a356:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a358:	6820      	ldr	r0, [r4, #0]
 800a35a:	f001 faa1 	bl	800b8a0 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a35e:	6820      	ldr	r0, [r4, #0]
 800a360:	f001 fac4 	bl	800b8ec <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800a364:	4b85      	ldr	r3, [pc, #532]	; (800a57c <HAL_SD_InitCard+0x270>)
 800a366:	429d      	cmp	r5, r3
 800a368:	d902      	bls.n	800a370 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800a36a:	0076      	lsls	r6, r6, #1
 800a36c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800a370:	4883      	ldr	r0, [pc, #524]	; (800a580 <HAL_SD_InitCard+0x274>)
 800a372:	fbb0 f0f5 	udiv	r0, r0, r5
 800a376:	3001      	adds	r0, #1
 800a378:	f7fa f87e 	bl	8004478 <HAL_Delay>
  __IO uint32_t count = 0U;
 800a37c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a37e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800a380:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a382:	f001 fff5 	bl	800c370 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a386:	4605      	mov	r5, r0
 800a388:	b140      	cbz	r0, 800a39c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800a38a:	2601      	movs	r6, #1
 800a38c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800a390:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800a392:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a394:	432b      	orrs	r3, r5
 800a396:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a398:	b015      	add	sp, #84	; 0x54
 800a39a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800a39c:	6820      	ldr	r0, [r4, #0]
 800a39e:	f002 f813 	bl	800c3c8 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800a3a2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800a3a6:	f000 80ce 	beq.w	800a546 <HAL_SD_InitCard+0x23a>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	6820      	ldr	r0, [r4, #0]
 800a3b2:	f002 f849 	bl	800c448 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3b6:	bb08      	cbnz	r0, 800a3fc <HAL_SD_InitCard+0xf0>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800a3be:	42b3      	cmp	r3, r6
 800a3c0:	f200 80d3 	bhi.w	800a56a <HAL_SD_InitCard+0x25e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a3c4:	4f6f      	ldr	r7, [pc, #444]	; (800a584 <HAL_SD_InitCard+0x278>)
 800a3c6:	e010      	b.n	800a3ea <HAL_SD_InitCard+0xde>
 800a3c8:	6820      	ldr	r0, [r4, #0]
 800a3ca:	f002 f8eb 	bl	800c5a4 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3ce:	4601      	mov	r1, r0
 800a3d0:	b9a0      	cbnz	r0, 800a3fc <HAL_SD_InitCard+0xf0>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a3d2:	6820      	ldr	r0, [r4, #0]
 800a3d4:	f001 fa96 	bl	800b904 <SDMMC_GetResponse>
    count++;
 800a3d8:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3da:	2800      	cmp	r0, #0
    count++;
 800a3dc:	f103 0301 	add.w	r3, r3, #1
 800a3e0:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800a3e2:	9b03      	ldr	r3, [sp, #12]
 800a3e4:	db0d      	blt.n	800a402 <HAL_SD_InitCard+0xf6>
 800a3e6:	42b3      	cmp	r3, r6
 800a3e8:	d80b      	bhi.n	800a402 <HAL_SD_InitCard+0xf6>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800a3ea:	2100      	movs	r1, #0
 800a3ec:	6820      	ldr	r0, [r4, #0]
 800a3ee:	f002 f82b 	bl	800c448 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800a3f2:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d0e7      	beq.n	800a3c8 <HAL_SD_InitCard+0xbc>
 800a3f8:	4605      	mov	r5, r0
 800a3fa:	e7c6      	b.n	800a38a <HAL_SD_InitCard+0x7e>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a3fc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800a400:	e7c3      	b.n	800a38a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a402:	9a03      	ldr	r2, [sp, #12]
 800a404:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800a408:	429a      	cmp	r2, r3
 800a40a:	f200 80b2 	bhi.w	800a572 <HAL_SD_InitCard+0x266>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a40e:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
  hsd->SdCard.CardType = CARD_SDSC;
 800a412:	f04f 0300 	mov.w	r3, #0
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800a416:	bf18      	it	ne
 800a418:	2501      	movne	r5, #1
  hsd->SdCard.CardType = CARD_SDSC;
 800a41a:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	63a5      	str	r5, [r4, #56]	; 0x38
 800a420:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800a424:	f7fa f822 	bl	800446c <HAL_GetTick>
 800a428:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800a42a:	6820      	ldr	r0, [r4, #0]
 800a42c:	f001 fa66 	bl	800b8fc <SDMMC_GetPowerState>
 800a430:	b350      	cbz	r0, 800a488 <HAL_SD_InitCard+0x17c>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a432:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800a434:	2b03      	cmp	r3, #3
 800a436:	d132      	bne.n	800a49e <HAL_SD_InitCard+0x192>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a438:	2104      	movs	r1, #4
 800a43a:	6820      	ldr	r0, [r4, #0]
 800a43c:	f001 fa62 	bl	800b904 <SDMMC_GetResponse>
 800a440:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a442:	a909      	add	r1, sp, #36	; 0x24
 800a444:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800a446:	0d1b      	lsrs	r3, r3, #20
 800a448:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800a44a:	f7ff fe7b 	bl	800a144 <HAL_SD_GetCardCSD>
 800a44e:	4606      	mov	r6, r0
 800a450:	2800      	cmp	r0, #0
 800a452:	f040 8084 	bne.w	800a55e <HAL_SD_InitCard+0x252>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800a456:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a458:	6820      	ldr	r0, [r4, #0]
 800a45a:	0409      	lsls	r1, r1, #16
 800a45c:	f001 feda 	bl	800c214 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a460:	b9a0      	cbnz	r0, 800a48c <HAL_SD_InitCard+0x180>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a462:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a466:	6820      	ldr	r0, [r4, #0]
 800a468:	f001 fa66 	bl	800b938 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a46c:	2800      	cmp	r0, #0
 800a46e:	f43f af62 	beq.w	800a336 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a472:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800a474:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a476:	4944      	ldr	r1, [pc, #272]	; (800a588 <HAL_SD_InitCard+0x27c>)
    return HAL_ERROR;
 800a478:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a47a:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a47c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a47e:	4310      	orrs	r0, r2
 800a480:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800a482:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800a486:	e756      	b.n	800a336 <HAL_SD_InitCard+0x2a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a488:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800a48c:	2601      	movs	r6, #1
 800a48e:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800a492:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a494:	4303      	orrs	r3, r0
}
 800a496:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800a498:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a49a:	b015      	add	sp, #84	; 0x54
 800a49c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800a49e:	6820      	ldr	r0, [r4, #0]
 800a4a0:	f002 fa12 	bl	800c8c8 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a4a4:	2800      	cmp	r0, #0
 800a4a6:	d1f1      	bne.n	800a48c <HAL_SD_InitCard+0x180>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4a8:	4601      	mov	r1, r0
 800a4aa:	6820      	ldr	r0, [r4, #0]
 800a4ac:	f001 fa2a 	bl	800b904 <SDMMC_GetResponse>
 800a4b0:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4b2:	2104      	movs	r1, #4
 800a4b4:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a4b6:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4b8:	f001 fa24 	bl	800b904 <SDMMC_GetResponse>
 800a4bc:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4be:	2108      	movs	r1, #8
 800a4c0:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a4c2:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4c4:	f001 fa1e 	bl	800b904 <SDMMC_GetResponse>
 800a4c8:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a4ca:	210c      	movs	r1, #12
 800a4cc:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a4ce:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a4d0:	f001 fa18 	bl	800b904 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a4d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a4d6:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a4d8:	2b03      	cmp	r3, #3
 800a4da:	d0ad      	beq.n	800a438 <HAL_SD_InitCard+0x12c>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a4dc:	f241 3687 	movw	r6, #4999	; 0x1387
 800a4e0:	e009      	b.n	800a4f6 <HAL_SD_InitCard+0x1ea>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a4e2:	6820      	ldr	r0, [r4, #0]
 800a4e4:	f002 fa6e 	bl	800c9c4 <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800a4e8:	2800      	cmp	r0, #0
 800a4ea:	d1cf      	bne.n	800a48c <HAL_SD_InitCard+0x180>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800a4ec:	f7f9 ffbe 	bl	800446c <HAL_GetTick>
 800a4f0:	1b43      	subs	r3, r0, r5
 800a4f2:	42b3      	cmp	r3, r6
 800a4f4:	d836      	bhi.n	800a564 <HAL_SD_InitCard+0x258>
    while (sd_rca == 0U)
 800a4f6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800a4fa:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d0ef      	beq.n	800a4e2 <HAL_SD_InitCard+0x1d6>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a502:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800a504:	2a03      	cmp	r2, #3
 800a506:	d097      	beq.n	800a438 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a508:	0419      	lsls	r1, r3, #16
 800a50a:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800a50c:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a50e:	f002 fa19 	bl	800c944 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a512:	2800      	cmp	r0, #0
 800a514:	d1ba      	bne.n	800a48c <HAL_SD_InitCard+0x180>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a516:	4601      	mov	r1, r0
 800a518:	6820      	ldr	r0, [r4, #0]
 800a51a:	f001 f9f3 	bl	800b904 <SDMMC_GetResponse>
 800a51e:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a520:	2104      	movs	r1, #4
 800a522:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a524:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a526:	f001 f9ed 	bl	800b904 <SDMMC_GetResponse>
 800a52a:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a52c:	2108      	movs	r1, #8
 800a52e:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800a530:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a532:	f001 f9e7 	bl	800b904 <SDMMC_GetResponse>
 800a536:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a538:	210c      	movs	r1, #12
 800a53a:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800a53c:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800a53e:	f001 f9e1 	bl	800b904 <SDMMC_GetResponse>
 800a542:	66a0      	str	r0, [r4, #104]	; 0x68
 800a544:	e778      	b.n	800a438 <HAL_SD_InitCard+0x12c>
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a546:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.CardVersion = CARD_V1_X;
 800a548:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800a54a:	f001 ff11 	bl	800c370 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a54e:	2800      	cmp	r0, #0
 800a550:	f47f af52 	bne.w	800a3f8 <HAL_SD_InitCard+0xec>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800a554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800a556:	2b01      	cmp	r3, #1
 800a558:	f47f af2e 	bne.w	800a3b8 <HAL_SD_InitCard+0xac>
 800a55c:	e727      	b.n	800a3ae <HAL_SD_InitCard+0xa2>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a55e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800a562:	e793      	b.n	800a48c <HAL_SD_InitCard+0x180>
        return HAL_SD_ERROR_TIMEOUT;
 800a564:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800a568:	e790      	b.n	800a48c <HAL_SD_InitCard+0x180>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800a56a:	9b03      	ldr	r3, [sp, #12]
 800a56c:	42b3      	cmp	r3, r6
 800a56e:	f67f af55 	bls.w	800a41c <HAL_SD_InitCard+0x110>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800a572:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800a576:	e708      	b.n	800a38a <HAL_SD_InitCard+0x7e>
 800a578:	014f8b59 	.word	0x014f8b59
 800a57c:	000c34ff 	.word	0x000c34ff
 800a580:	00012110 	.word	0x00012110
 800a584:	c1100000 	.word	0xc1100000
 800a588:	1fe00fff 	.word	0x1fe00fff

0800a58c <HAL_SD_GetCardInfo>:
{
 800a58c:	4603      	mov	r3, r0
}
 800a58e:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800a590:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a592:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800a594:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a596:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800a598:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a59a:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800a59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a59e:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800a5a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5a2:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800a5a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a5a6:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800a5a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5aa:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800a5ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5ae:	61cb      	str	r3, [r1, #28]
}
 800a5b0:	4770      	bx	lr
 800a5b2:	bf00      	nop

0800a5b4 <HAL_SD_ConfigWideBusOperation>:
{
 800a5b4:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800a5b6:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800a5ba:	b089      	sub	sp, #36	; 0x24
 800a5bc:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5be:	4293      	cmp	r3, r2
{
 800a5c0:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800a5c2:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800a5c6:	d040      	beq.n	800a64a <HAL_SD_ConfigWideBusOperation+0x96>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800a5c8:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800a5cc:	d03d      	beq.n	800a64a <HAL_SD_ConfigWideBusOperation+0x96>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800a5ce:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800a5d2:	d07d      	beq.n	800a6d0 <HAL_SD_ConfigWideBusOperation+0x11c>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800a5d4:	2900      	cmp	r1, #0
 800a5d6:	d05c      	beq.n	800a692 <HAL_SD_ConfigWideBusOperation+0xde>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a5d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a5da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a5de:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a5e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d138      	bne.n	800a658 <HAL_SD_ConfigWideBusOperation+0xa4>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800a5e6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800a5ea:	2100      	movs	r1, #0
 800a5ec:	f7fe fcb4 	bl	8008f58 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800a5f0:	2800      	cmp	r0, #0
 800a5f2:	d048      	beq.n	800a686 <HAL_SD_ConfigWideBusOperation+0xd2>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a5f4:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a5f6:	4b50      	ldr	r3, [pc, #320]	; (800a738 <HAL_SD_ConfigWideBusOperation+0x184>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a5f8:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800a5fa:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800a5fc:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a5fe:	fba3 5300 	umull	r5, r3, r3, r0
 800a602:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800a604:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a606:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a60a:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a60c:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800a610:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800a612:	d20e      	bcs.n	800a632 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800a614:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800a616:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a61a:	d00a      	beq.n	800a632 <HAL_SD_ConfigWideBusOperation+0x7e>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800a61c:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800a620:	d078      	beq.n	800a714 <HAL_SD_ConfigWideBusOperation+0x160>
        if (hsd->Init.ClockDiv == 0U)
 800a622:	b112      	cbz	r2, 800a62a <HAL_SD_ConfigWideBusOperation+0x76>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800a624:	0053      	lsls	r3, r2, #1
 800a626:	fbb0 f0f3 	udiv	r0, r0, r3
 800a62a:	4b44      	ldr	r3, [pc, #272]	; (800a73c <HAL_SD_ConfigWideBusOperation+0x188>)
 800a62c:	4298      	cmp	r0, r3
 800a62e:	bf88      	it	hi
 800a630:	462a      	movhi	r2, r5
      (void)SDMMC_Init(hsd->Instance, Init);
 800a632:	a905      	add	r1, sp, #20
        Init.ClockDiv = hsd->Init.ClockDiv;
 800a634:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800a636:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800a638:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800a63a:	c903      	ldmia	r1, {r0, r1}
 800a63c:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a640:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a642:	6820      	ldr	r0, [r4, #0]
 800a644:	f001 f92c 	bl	800b8a0 <SDMMC_Init>
 800a648:	e00a      	b.n	800a660 <HAL_SD_ConfigWideBusOperation+0xac>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800a64a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a64c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a650:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a652:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a654:	2b00      	cmp	r3, #0
 800a656:	d0c6      	beq.n	800a5e6 <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a658:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a65a:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a65c:	4a38      	ldr	r2, [pc, #224]	; (800a740 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a65e:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a660:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a664:	6820      	ldr	r0, [r4, #0]
 800a666:	f001 f967 	bl	800b938 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a66a:	b130      	cbz	r0, 800a67a <HAL_SD_ConfigWideBusOperation+0xc6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a66c:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800a66e:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a670:	4a33      	ldr	r2, [pc, #204]	; (800a740 <HAL_SD_ConfigWideBusOperation+0x18c>)
 800a672:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a674:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a676:	4303      	orrs	r3, r0
 800a678:	6363      	str	r3, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800a67a:	2301      	movs	r3, #1
}
 800a67c:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800a67e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800a682:	b009      	add	sp, #36	; 0x24
 800a684:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a686:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a688:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800a68a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a68e:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800a690:	e7e6      	b.n	800a660 <HAL_SD_ConfigWideBusOperation+0xac>
  uint32_t scr[2U] = {0UL, 0UL};
 800a692:	2200      	movs	r2, #0
 800a694:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a696:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a698:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a69c:	f001 f932 	bl	800b904 <SDMMC_GetResponse>
 800a6a0:	0182      	lsls	r2, r0, #6
 800a6a2:	d434      	bmi.n	800a70e <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a6a4:	a902      	add	r1, sp, #8
 800a6a6:	4620      	mov	r0, r4
 800a6a8:	f7ff fafa 	bl	8009ca0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6ac:	b960      	cbnz	r0, 800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6ae:	9b03      	ldr	r3, [sp, #12]
 800a6b0:	03db      	lsls	r3, r3, #15
 800a6b2:	d535      	bpl.n	800a720 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6b4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a6b6:	6820      	ldr	r0, [r4, #0]
 800a6b8:	0409      	lsls	r1, r1, #16
 800a6ba:	f001 fec5 	bl	800c448 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a6be:	b918      	cbnz	r0, 800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800a6c0:	4601      	mov	r1, r0
 800a6c2:	6820      	ldr	r0, [r4, #0]
 800a6c4:	f001 ffaa 	bl	800c61c <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800a6c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6ca:	4303      	orrs	r3, r0
 800a6cc:	6363      	str	r3, [r4, #52]	; 0x34
 800a6ce:	e7c0      	b.n	800a652 <HAL_SD_ConfigWideBusOperation+0x9e>
  uint32_t scr[2U] = {0UL, 0UL};
 800a6d0:	2200      	movs	r2, #0
 800a6d2:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800a6d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800a6dc:	f001 f912 	bl	800b904 <SDMMC_GetResponse>
 800a6e0:	0180      	lsls	r0, r0, #6
 800a6e2:	d414      	bmi.n	800a70e <HAL_SD_ConfigWideBusOperation+0x15a>
  errorstate = SD_FindSCR(hsd, scr);
 800a6e4:	a902      	add	r1, sp, #8
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f7ff fada 	bl	8009ca0 <SD_FindSCR.constprop.0>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a6ec:	2800      	cmp	r0, #0
 800a6ee:	d1eb      	bne.n	800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800a6f0:	9b03      	ldr	r3, [sp, #12]
 800a6f2:	0359      	lsls	r1, r3, #13
 800a6f4:	d514      	bpl.n	800a720 <HAL_SD_ConfigWideBusOperation+0x16c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a6f6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a6f8:	6820      	ldr	r0, [r4, #0]
 800a6fa:	0409      	lsls	r1, r1, #16
 800a6fc:	f001 fea4 	bl	800c448 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a700:	2800      	cmp	r0, #0
 800a702:	d1e1      	bne.n	800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800a704:	2102      	movs	r1, #2
 800a706:	6820      	ldr	r0, [r4, #0]
 800a708:	f001 ff88 	bl	800c61c <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800a70c:	e7dc      	b.n	800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800a70e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a712:	e7d9      	b.n	800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
        if (hsd->Init.ClockDiv == 0U)
 800a714:	b93a      	cbnz	r2, 800a726 <HAL_SD_ConfigWideBusOperation+0x172>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800a716:	490b      	ldr	r1, [pc, #44]	; (800a744 <HAL_SD_ConfigWideBusOperation+0x190>)
 800a718:	4288      	cmp	r0, r1
 800a71a:	d98a      	bls.n	800a632 <HAL_SD_ConfigWideBusOperation+0x7e>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800a71c:	0e5a      	lsrs	r2, r3, #25
 800a71e:	e788      	b.n	800a632 <HAL_SD_ConfigWideBusOperation+0x7e>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800a720:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800a724:	e7d0      	b.n	800a6c8 <HAL_SD_ConfigWideBusOperation+0x114>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800a726:	0051      	lsls	r1, r2, #1
 800a728:	fbb0 f1f1 	udiv	r1, r0, r1
 800a72c:	4805      	ldr	r0, [pc, #20]	; (800a744 <HAL_SD_ConfigWideBusOperation+0x190>)
 800a72e:	4281      	cmp	r1, r0
 800a730:	f67f af7f 	bls.w	800a632 <HAL_SD_ConfigWideBusOperation+0x7e>
 800a734:	e7f2      	b.n	800a71c <HAL_SD_ConfigWideBusOperation+0x168>
 800a736:	bf00      	nop
 800a738:	55e63b89 	.word	0x55e63b89
 800a73c:	017d7840 	.word	0x017d7840
 800a740:	1fe00fff 	.word	0x1fe00fff
 800a744:	02faf080 	.word	0x02faf080

0800a748 <HAL_SD_Init>:
{
 800a748:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a74a:	b087      	sub	sp, #28
  if (hsd == NULL)
 800a74c:	2800      	cmp	r0, #0
 800a74e:	d045      	beq.n	800a7dc <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_RESET)
 800a750:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800a754:	4604      	mov	r4, r0
 800a756:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d042      	beq.n	800a7e4 <HAL_SD_Init+0x9c>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a75e:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a760:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800a762:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a766:	f7ff fdd1 	bl	800a30c <HAL_SD_InitCard>
 800a76a:	2800      	cmp	r0, #0
 800a76c:	d136      	bne.n	800a7dc <HAL_SD_Init+0x94>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800a76e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800a772:	2b03      	cmp	r3, #3
 800a774:	d032      	beq.n	800a7dc <HAL_SD_Init+0x94>
 800a776:	a901      	add	r1, sp, #4
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff f9cb 	bl	8009b14 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800a77e:	bb68      	cbnz	r0, 800a7dc <HAL_SD_Init+0x94>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a780:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800a782:	f89d 3014 	ldrb.w	r3, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a786:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a788:	f89d 2015 	ldrb.w	r2, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800a78c:	b2db      	uxtb	r3, r3
  unitsize = CardStatus.UhsAllocationUnitSize;
 800a78e:	b2d2      	uxtb	r2, r2
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a790:	d02c      	beq.n	800a7ec <HAL_SD_Init+0xa4>
 800a792:	4603      	mov	r3, r0
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a794:	68e1      	ldr	r1, [r4, #12]
 800a796:	4620      	mov	r0, r4
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800a798:	65a3      	str	r3, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800a79a:	f7ff ff0b 	bl	800a5b4 <HAL_SD_ConfigWideBusOperation>
 800a79e:	4606      	mov	r6, r0
 800a7a0:	b9e0      	cbnz	r0, 800a7dc <HAL_SD_Init+0x94>
  tickstart = HAL_GetTick();
 800a7a2:	f7f9 fe63 	bl	800446c <HAL_GetTick>
 800a7a6:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a7a8:	e00c      	b.n	800a7c4 <HAL_SD_Init+0x7c>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a7aa:	6820      	ldr	r0, [r4, #0]
 800a7ac:	4629      	mov	r1, r5
 800a7ae:	f001 f8a9 	bl	800b904 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a7b2:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800a7b6:	2804      	cmp	r0, #4
 800a7b8:	d01f      	beq.n	800a7fa <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800a7ba:	f7f9 fe57 	bl	800446c <HAL_GetTick>
 800a7be:	1bc3      	subs	r3, r0, r7
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	d020      	beq.n	800a806 <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a7c4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800a7c6:	6820      	ldr	r0, [r4, #0]
 800a7c8:	0409      	lsls	r1, r1, #16
 800a7ca:	f002 f95b 	bl	800ca84 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a7ce:	4605      	mov	r5, r0
 800a7d0:	2800      	cmp	r0, #0
 800a7d2:	d0ea      	beq.n	800a7aa <HAL_SD_Init+0x62>
    hsd->ErrorCode |= errorstate;
 800a7d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a7d6:	4303      	orrs	r3, r0
 800a7d8:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800a7da:	e7ee      	b.n	800a7ba <HAL_SD_Init+0x72>
    return HAL_ERROR;
 800a7dc:	2601      	movs	r6, #1
}
 800a7de:	4630      	mov	r0, r6
 800a7e0:	b007      	add	sp, #28
 800a7e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800a7e4:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800a7e6:	f7f8 fe31 	bl	800344c <HAL_SD_MspInit>
 800a7ea:	e7b8      	b.n	800a75e <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800a7ec:	4313      	orrs	r3, r2
 800a7ee:	bf0c      	ite	eq
 800a7f0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800a7f4:	f44f 7300 	movne.w	r3, #512	; 0x200
 800a7f8:	e7cc      	b.n	800a794 <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800a7fa:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a7fc:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800a7fe:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800a800:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800a804:	e7eb      	b.n	800a7de <HAL_SD_Init+0x96>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a806:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800a80a:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800a80c:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800a80e:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800a810:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800a814:	e7e3      	b.n	800a7de <HAL_SD_Init+0x96>
 800a816:	bf00      	nop

0800a818 <HAL_SD_GetCardState>:
{
 800a818:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a81a:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800a81c:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800a81e:	6800      	ldr	r0, [r0, #0]
 800a820:	0409      	lsls	r1, r1, #16
 800a822:	f002 f92f 	bl	800ca84 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800a826:	4601      	mov	r1, r0
 800a828:	b120      	cbz	r0, 800a834 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800a82a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a82c:	2000      	movs	r0, #0
 800a82e:	430b      	orrs	r3, r1
 800a830:	6363      	str	r3, [r4, #52]	; 0x34
}
 800a832:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800a834:	6820      	ldr	r0, [r4, #0]
 800a836:	f001 f865 	bl	800b904 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800a83a:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800a83e:	bd10      	pop	{r4, pc}

0800a840 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800a840:	4770      	bx	lr
 800a842:	bf00      	nop

0800a844 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800a844:	4770      	bx	lr
 800a846:	bf00      	nop

0800a848 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop

0800a84c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800a84c:	4770      	bx	lr
 800a84e:	bf00      	nop

0800a850 <HAL_SD_IRQHandler>:
{
 800a850:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a852:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a854:	6800      	ldr	r0, [r0, #0]
{
 800a856:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800a858:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a85a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a85c:	041b      	lsls	r3, r3, #16
 800a85e:	d502      	bpl.n	800a866 <HAL_SD_IRQHandler+0x16>
 800a860:	072f      	lsls	r7, r5, #28
 800a862:	f100 80b4 	bmi.w	800a9ce <HAL_SD_IRQHandler+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a866:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a868:	05de      	lsls	r6, r3, #23
 800a86a:	d529      	bpl.n	800a8c0 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a86c:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a870:	4b91      	ldr	r3, [pc, #580]	; (800aab8 <HAL_SD_IRQHandler+0x268>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a872:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a874:	6822      	ldr	r2, [r4, #0]
 800a876:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800a878:	400b      	ands	r3, r1
 800a87a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a87c:	6822      	ldr	r2, [r4, #0]
 800a87e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a880:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a884:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a886:	6822      	ldr	r2, [r4, #0]
 800a888:	68d3      	ldr	r3, [r2, #12]
 800a88a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a88e:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800a890:	f015 0308 	ands.w	r3, r5, #8
 800a894:	d076      	beq.n	800a984 <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a896:	f015 0f22 	tst.w	r5, #34	; 0x22
 800a89a:	f040 80d9 	bne.w	800aa50 <HAL_SD_IRQHandler+0x200>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a89e:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800a8a0:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8a2:	4986      	ldr	r1, [pc, #536]	; (800aabc <HAL_SD_IRQHandler+0x26c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8a4:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a8a6:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800a8a8:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800a8ac:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a8b0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a8b2:	f000 80a0 	beq.w	800a9f6 <HAL_SD_IRQHandler+0x1a6>
        HAL_SD_RxCpltCallback(hsd);
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f002 fa86 	bl	800cdc8 <HAL_SD_RxCpltCallback>
}
 800a8bc:	b003      	add	sp, #12
 800a8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a8c0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a8c2:	045b      	lsls	r3, r3, #17
 800a8c4:	d502      	bpl.n	800a8cc <HAL_SD_IRQHandler+0x7c>
 800a8c6:	072f      	lsls	r7, r5, #28
 800a8c8:	f100 809a 	bmi.w	800aa00 <HAL_SD_IRQHandler+0x1b0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a8cc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a8ce:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a8d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800a8d4:	d06c      	beq.n	800a9b0 <HAL_SD_IRQHandler+0x160>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800a8d6:	079e      	lsls	r6, r3, #30
 800a8d8:	d503      	bpl.n	800a8e2 <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a8da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8dc:	f043 0302 	orr.w	r3, r3, #2
 800a8e0:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800a8e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a8e4:	0719      	lsls	r1, r3, #28
 800a8e6:	d503      	bpl.n	800a8f0 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a8e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8ea:	f043 0308 	orr.w	r3, r3, #8
 800a8ee:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800a8f0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a8f2:	069a      	lsls	r2, r3, #26
 800a8f4:	d503      	bpl.n	800a8fe <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a8f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a8f8:	f043 0320 	orr.w	r3, r3, #32
 800a8fc:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800a8fe:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800a900:	06db      	lsls	r3, r3, #27
 800a902:	d503      	bpl.n	800a90c <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a904:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a906:	f043 0310 	orr.w	r3, r3, #16
 800a90a:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a90c:	4b6b      	ldr	r3, [pc, #428]	; (800aabc <HAL_SD_IRQHandler+0x26c>)
 800a90e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800a910:	6822      	ldr	r2, [r4, #0]
 800a912:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800a914:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800a918:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800a91a:	6822      	ldr	r2, [r4, #0]
 800a91c:	68d3      	ldr	r3, [r2, #12]
 800a91e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a922:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800a924:	6822      	ldr	r2, [r4, #0]
 800a926:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800a928:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800a92c:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800a92e:	6822      	ldr	r2, [r4, #0]
 800a930:	68d3      	ldr	r3, [r2, #12]
 800a932:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a936:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a938:	6820      	ldr	r0, [r4, #0]
 800a93a:	f001 fb63 	bl	800c004 <SDMMC_CmdStopTransfer>
 800a93e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a940:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a942:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a946:	4318      	orrs	r0, r3
 800a948:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800a94a:	68d3      	ldr	r3, [r2, #12]
 800a94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a950:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800a952:	6823      	ldr	r3, [r4, #0]
 800a954:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800a956:	f015 0308 	ands.w	r3, r5, #8
 800a95a:	f040 8087 	bne.w	800aa6c <HAL_SD_IRQHandler+0x21c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a95e:	062f      	lsls	r7, r5, #24
 800a960:	d5ac      	bpl.n	800a8bc <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800a962:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800a964:	2a00      	cmp	r2, #0
 800a966:	d0a9      	beq.n	800a8bc <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a968:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800a96a:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800a96c:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800a96e:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800a970:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800a974:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a976:	6822      	ldr	r2, [r4, #0]
 800a978:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800a97a:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800a97e:	f7ff fbdf 	bl	800a140 <HAL_SD_ErrorCallback>
 800a982:	e79b      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800a984:	0629      	lsls	r1, r5, #24
 800a986:	d599      	bpl.n	800a8bc <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800a988:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a98a:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800a98e:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800a990:	6822      	ldr	r2, [r4, #0]
 800a992:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800a994:	6822      	ldr	r2, [r4, #0]
 800a996:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a998:	d176      	bne.n	800aa88 <HAL_SD_IRQHandler+0x238>
      hsd->State = HAL_SD_STATE_READY;
 800a99a:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800a99c:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a99e:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800a9a2:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800a9a6:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a9a8:	d17b      	bne.n	800aaa2 <HAL_SD_IRQHandler+0x252>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a9aa:	07aa      	lsls	r2, r5, #30
 800a9ac:	d086      	beq.n	800a8bc <HAL_SD_IRQHandler+0x6c>
 800a9ae:	e782      	b.n	800a8b6 <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800a9b0:	00de      	lsls	r6, r3, #3
 800a9b2:	d583      	bpl.n	800a8bc <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800a9b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800a9b8:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a9ba:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800a9bc:	6823      	ldr	r3, [r4, #0]
 800a9be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c0:	0759      	lsls	r1, r3, #29
 800a9c2:	d45c      	bmi.n	800aa7e <HAL_SD_IRQHandler+0x22e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a9c4:	06aa      	lsls	r2, r5, #26
 800a9c6:	d573      	bpl.n	800aab0 <HAL_SD_IRQHandler+0x260>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800a9c8:	f7ff ff40 	bl	800a84c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800a9cc:	e776      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800a9ce:	e9d4 5309 	ldrd	r5, r3, [r4, #36]	; 0x24
  if (hsd->RxXferSize >= 32U)
 800a9d2:	2b1f      	cmp	r3, #31
 800a9d4:	f67f af72 	bls.w	800a8bc <HAL_SD_IRQHandler+0x6c>
 800a9d8:	f105 0620 	add.w	r6, r5, #32
 800a9dc:	e000      	b.n	800a9e0 <HAL_SD_IRQHandler+0x190>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800a9de:	6820      	ldr	r0, [r4, #0]
 800a9e0:	f000 ff7a 	bl	800b8d8 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)(data & 0xFFU);
 800a9e4:	f845 0b04 	str.w	r0, [r5], #4
    for (count = 0U; count < 8U; count++)
 800a9e8:	42ae      	cmp	r6, r5
 800a9ea:	d1f8      	bne.n	800a9de <HAL_SD_IRQHandler+0x18e>
    hsd->RxXferSize -= 32U;
 800a9ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    hsd->pRxBuffPtr = tmp;
 800a9ee:	6266      	str	r6, [r4, #36]	; 0x24
    hsd->RxXferSize -= 32U;
 800a9f0:	3b20      	subs	r3, #32
 800a9f2:	62a3      	str	r3, [r4, #40]	; 0x28
 800a9f4:	e762      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800a9f6:	4620      	mov	r0, r4
 800a9f8:	f002 f9e0 	bl	800cdbc <HAL_SD_TxCpltCallback>
}
 800a9fc:	b003      	add	sp, #12
 800a9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800aa00:	6a23      	ldr	r3, [r4, #32]
 800aa02:	2b1f      	cmp	r3, #31
 800aa04:	f67f af5a 	bls.w	800a8bc <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800aa08:	69e6      	ldr	r6, [r4, #28]
 800aa0a:	1d37      	adds	r7, r6, #4
 800aa0c:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800aa10:	e000      	b.n	800aa14 <HAL_SD_IRQHandler+0x1c4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800aa12:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800aa14:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800aa18:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800aa1a:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800aa1c:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800aa1e:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800aa22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800aa26:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800aa28:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800aa2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aa30:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800aa32:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800aa36:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800aa3a:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800aa3c:	f000 ff50 	bl	800b8e0 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800aa40:	42af      	cmp	r7, r5
 800aa42:	d1e6      	bne.n	800aa12 <HAL_SD_IRQHandler+0x1c2>
    hsd->TxXferSize -= 32U;
 800aa44:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800aa46:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800aa48:	3b20      	subs	r3, #32
 800aa4a:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800aa4e:	e735      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa50:	6820      	ldr	r0, [r4, #0]
 800aa52:	f001 fad7 	bl	800c004 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800aa56:	4603      	mov	r3, r0
 800aa58:	2800      	cmp	r0, #0
 800aa5a:	f43f af20 	beq.w	800a89e <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800aa5e:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800aa60:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800aa62:	4313      	orrs	r3, r2
 800aa64:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800aa66:	f7ff fb6b 	bl	800a140 <HAL_SD_ErrorCallback>
 800aa6a:	e718      	b.n	800a89e <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800aa6c:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800aa6e:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800aa70:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800aa72:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800aa76:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800aa78:	f7ff fb62 	bl	800a140 <HAL_SD_ErrorCallback>
 800aa7c:	e71e      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800aa7e:	06ab      	lsls	r3, r5, #26
 800aa80:	d513      	bpl.n	800aaaa <HAL_SD_IRQHandler+0x25a>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800aa82:	f7ff fee1 	bl	800a848 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800aa86:	e719      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800aa88:	6820      	ldr	r0, [r4, #0]
 800aa8a:	f001 fabb 	bl	800c004 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d082      	beq.n	800a99a <HAL_SD_IRQHandler+0x14a>
          hsd->ErrorCode |= errorstate;
 800aa94:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800aa96:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800aa9c:	f7ff fb50 	bl	800a140 <HAL_SD_ErrorCallback>
 800aaa0:	e77b      	b.n	800a99a <HAL_SD_IRQHandler+0x14a>
        HAL_SD_TxCpltCallback(hsd);
 800aaa2:	4620      	mov	r0, r4
 800aaa4:	f002 f98a 	bl	800cdbc <HAL_SD_TxCpltCallback>
 800aaa8:	e77f      	b.n	800a9aa <HAL_SD_IRQHandler+0x15a>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800aaaa:	f7ff fec9 	bl	800a840 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800aaae:	e705      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800aab0:	f7ff fec8 	bl	800a844 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800aab4:	e702      	b.n	800a8bc <HAL_SD_IRQHandler+0x6c>
 800aab6:	bf00      	nop
 800aab8:	ffff3ec5 	.word	0xffff3ec5
 800aabc:	18000f3a 	.word	0x18000f3a

0800aac0 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800aac0:	b318      	cbz	r0, 800ab0a <HAL_SDRAM_Init+0x4a>
{
 800aac2:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800aac4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800aac8:	4604      	mov	r4, r0
 800aaca:	460d      	mov	r5, r1
 800aacc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800aad0:	b1b3      	cbz	r3, 800ab00 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aad2:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800aad4:	2302      	movs	r3, #2
 800aad6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800aada:	f851 0b04 	ldr.w	r0, [r1], #4
 800aade:	f000 fe2d 	bl	800b73c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800aae2:	6862      	ldr	r2, [r4, #4]
 800aae4:	4629      	mov	r1, r5
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	f000 fe66 	bl	800b7b8 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800aaec:	4a08      	ldr	r2, [pc, #32]	; (800ab10 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aaee:	2101      	movs	r1, #1

  return HAL_OK;
 800aaf0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800aaf2:	6813      	ldr	r3, [r2, #0]
 800aaf4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800aaf8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800aafa:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800aafe:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800ab00:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800ab04:	f7f6 fc1c 	bl	8001340 <HAL_SDRAM_MspInit>
 800ab08:	e7e3      	b.n	800aad2 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800ab0a:	2001      	movs	r0, #1
}
 800ab0c:	4770      	bx	lr
 800ab0e:	bf00      	nop
 800ab10:	52004000 	.word	0x52004000

0800ab14 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800ab14:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ab16:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800ab1a:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800ab1c:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800ab1e:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800ab20:	d004      	beq.n	800ab2c <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800ab22:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800ab26:	2e01      	cmp	r6, #1
 800ab28:	d001      	beq.n	800ab2e <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800ab2a:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800ab2c:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab2e:	2302      	movs	r3, #2
 800ab30:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab32:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab34:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800ab38:	f000 fe8c 	bl	800b854 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800ab3c:	682b      	ldr	r3, [r5, #0]
 800ab3e:	2b02      	cmp	r3, #2
 800ab40:	d003      	beq.n	800ab4a <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800ab42:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800ab44:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800ab48:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ab4a:	2305      	movs	r3, #5
  return HAL_OK;
 800ab4c:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800ab4e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800ab52:	bd70      	pop	{r4, r5, r6, pc}

0800ab54 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800ab54:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab56:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800ab5a:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800ab5c:	2b02      	cmp	r3, #2
 800ab5e:	b2d8      	uxtb	r0, r3
 800ab60:	d005      	beq.n	800ab6e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800ab62:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	b2dd      	uxtb	r5, r3
 800ab6a:	d001      	beq.n	800ab70 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800ab6c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab70:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ab72:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800ab74:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800ab78:	f000 fe84 	bl	800b884 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800ab7c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800ab7e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800ab82:	bd38      	pop	{r3, r4, r5, pc}

0800ab84 <SPI_AbortTransfer>:
  * @retval None
  */
static void SPI_AbortTransfer(SPI_HandleTypeDef *hspi)
{
  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab84:	6801      	ldr	r1, [r0, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab86:	4b1b      	ldr	r3, [pc, #108]	; (800abf4 <SPI_AbortTransfer+0x70>)
  __HAL_SPI_DISABLE(hspi);
 800ab88:	680a      	ldr	r2, [r1, #0]
 800ab8a:	f022 0201 	bic.w	r2, r2, #1
 800ab8e:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab90:	6802      	ldr	r2, [r0, #0]
 800ab92:	6911      	ldr	r1, [r2, #16]
 800ab94:	400b      	ands	r3, r1
 800ab96:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Clear the Status flags in the SR register */
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800ab98:	6802      	ldr	r2, [r0, #0]
 800ab9a:	6993      	ldr	r3, [r2, #24]
 800ab9c:	f043 0308 	orr.w	r3, r3, #8
 800aba0:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aba2:	6802      	ldr	r2, [r0, #0]
 800aba4:	6993      	ldr	r3, [r2, #24]
 800aba6:	f043 0310 	orr.w	r3, r3, #16
 800abaa:	6193      	str	r3, [r2, #24]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800abac:	6802      	ldr	r2, [r0, #0]
 800abae:	6893      	ldr	r3, [r2, #8]
 800abb0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800abb4:	6093      	str	r3, [r2, #8]

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800abb6:	6802      	ldr	r2, [r0, #0]
 800abb8:	6993      	ldr	r3, [r2, #24]
 800abba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800abbe:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800abc0:	6802      	ldr	r2, [r0, #0]
 800abc2:	6993      	ldr	r3, [r2, #24]
 800abc4:	f043 0320 	orr.w	r3, r3, #32
 800abc8:	6193      	str	r3, [r2, #24]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abca:	6802      	ldr	r2, [r0, #0]
 800abcc:	6993      	ldr	r3, [r2, #24]
 800abce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800abd2:	6193      	str	r3, [r2, #24]

#if (USE_SPI_CRC != 0U)
  __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
#endif /* USE_SPI_CRC */

  hspi->TxXferCount = (uint16_t)0UL;
 800abd4:	2200      	movs	r2, #0
  __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abd6:	6801      	ldr	r1, [r0, #0]
 800abd8:	698b      	ldr	r3, [r1, #24]
 800abda:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800abde:	618b      	str	r3, [r1, #24]
  __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800abe0:	6801      	ldr	r1, [r0, #0]
 800abe2:	698b      	ldr	r3, [r1, #24]
 800abe4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800abe8:	618b      	str	r3, [r1, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800abea:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800abee:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
}
 800abf2:	4770      	bx	lr
 800abf4:	fffffc90 	.word	0xfffffc90

0800abf8 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800abf8:	6802      	ldr	r2, [r0, #0]
{
 800abfa:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800abfc:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800abfe:	6991      	ldr	r1, [r2, #24]
 800ac00:	f041 0108 	orr.w	r1, r1, #8
 800ac04:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800ac06:	6801      	ldr	r1, [r0, #0]
 800ac08:	698a      	ldr	r2, [r1, #24]
 800ac0a:	f042 0210 	orr.w	r2, r2, #16
 800ac0e:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ac10:	6801      	ldr	r1, [r0, #0]
 800ac12:	680a      	ldr	r2, [r1, #0]
 800ac14:	f022 0201 	bic.w	r2, r2, #1
 800ac18:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ac1a:	6801      	ldr	r1, [r0, #0]
 800ac1c:	4a27      	ldr	r2, [pc, #156]	; (800acbc <SPI_CloseTransfer+0xc4>)
 800ac1e:	690c      	ldr	r4, [r1, #16]
 800ac20:	4022      	ands	r2, r4
 800ac22:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ac24:	6801      	ldr	r1, [r0, #0]
 800ac26:	688a      	ldr	r2, [r1, #8]
 800ac28:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ac2c:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ac2e:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ac32:	2a04      	cmp	r2, #4
 800ac34:	d001      	beq.n	800ac3a <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ac36:	069c      	lsls	r4, r3, #26
 800ac38:	d433      	bmi.n	800aca2 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ac3a:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800ac3e:	2a03      	cmp	r2, #3
 800ac40:	d001      	beq.n	800ac46 <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ac42:	0659      	lsls	r1, r3, #25
 800ac44:	d421      	bmi.n	800ac8a <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800ac46:	059a      	lsls	r2, r3, #22
 800ac48:	d50a      	bpl.n	800ac60 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac4a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac4e:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ac50:	f042 0201 	orr.w	r2, r2, #1
 800ac54:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ac58:	698a      	ldr	r2, [r1, #24]
 800ac5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac5e:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800ac60:	05db      	lsls	r3, r3, #23
 800ac62:	d50a      	bpl.n	800ac7a <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac64:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac68:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ac6a:	f043 0308 	orr.w	r3, r3, #8
 800ac6e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ac72:	6993      	ldr	r3, [r2, #24]
 800ac74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac78:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800ac7a:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800ac7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800ac80:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ac84:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800ac88:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac8a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac8e:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ac90:	f042 0204 	orr.w	r2, r2, #4
 800ac94:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac98:	698a      	ldr	r2, [r1, #24]
 800ac9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac9e:	618a      	str	r2, [r1, #24]
 800aca0:	e7d1      	b.n	800ac46 <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aca2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800aca6:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800aca8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800acac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800acb0:	698a      	ldr	r2, [r1, #24]
 800acb2:	f042 0220 	orr.w	r2, r2, #32
 800acb6:	618a      	str	r2, [r1, #24]
 800acb8:	e7bf      	b.n	800ac3a <SPI_CloseTransfer+0x42>
 800acba:	bf00      	nop
 800acbc:	fffffc90 	.word	0xfffffc90

0800acc0 <HAL_SPI_Init>:
  if (hspi == NULL)
 800acc0:	2800      	cmp	r0, #0
 800acc2:	f000 80be 	beq.w	800ae42 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800acc6:	4a62      	ldr	r2, [pc, #392]	; (800ae50 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acc8:	2100      	movs	r1, #0
{
 800acca:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800accc:	6803      	ldr	r3, [r0, #0]
 800acce:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800acd0:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800acd2:	4293      	cmp	r3, r2
 800acd4:	d015      	beq.n	800ad02 <HAL_SPI_Init+0x42>
 800acd6:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800acda:	4293      	cmp	r3, r2
 800acdc:	d011      	beq.n	800ad02 <HAL_SPI_Init+0x42>
 800acde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ace2:	4293      	cmp	r3, r2
 800ace4:	68c2      	ldr	r2, [r0, #12]
 800ace6:	f000 80a5 	beq.w	800ae34 <HAL_SPI_Init+0x174>
 800acea:	2a0f      	cmp	r2, #15
 800acec:	d807      	bhi.n	800acfe <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acee:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800acf0:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800acf2:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800acf4:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800acf6:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800acfa:	2a08      	cmp	r2, #8
 800acfc:	d914      	bls.n	800ad28 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800acfe:	2001      	movs	r0, #1
}
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800ad02:	68e2      	ldr	r2, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800ad06:	3208      	adds	r2, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad08:	4851      	ldr	r0, [pc, #324]	; (800ae50 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ad0a:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800ad0c:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800ad0e:	fb01 2202 	mla	r2, r1, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800ad12:	4950      	ldr	r1, [pc, #320]	; (800ae54 <HAL_SPI_Init+0x194>)
 800ad14:	428b      	cmp	r3, r1
 800ad16:	bf18      	it	ne
 800ad18:	4283      	cmpne	r3, r0
 800ad1a:	d003      	beq.n	800ad24 <HAL_SPI_Init+0x64>
 800ad1c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ad20:	428b      	cmp	r3, r1
 800ad22:	d101      	bne.n	800ad28 <HAL_SPI_Init+0x68>
 800ad24:	2a10      	cmp	r2, #16
 800ad26:	d8ea      	bhi.n	800acfe <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800ad28:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800ad2c:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800ad30:	2a00      	cmp	r2, #0
 800ad32:	d078      	beq.n	800ae26 <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800ad34:	2202      	movs	r2, #2
 800ad36:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	f022 0201 	bic.w	r2, r2, #1
 800ad40:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad42:	69a1      	ldr	r1, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad44:	6823      	ldr	r3, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad46:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800ad4a:	6861      	ldr	r1, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800ad4c:	689a      	ldr	r2, [r3, #8]
 800ad4e:	f402 12f8 	and.w	r2, r2, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ad52:	d058      	beq.n	800ae06 <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800ad54:	0249      	lsls	r1, r1, #9
 800ad56:	d502      	bpl.n	800ad5e <HAL_SPI_Init+0x9e>
 800ad58:	68e1      	ldr	r1, [r4, #12]
 800ad5a:	2906      	cmp	r1, #6
 800ad5c:	d84c      	bhi.n	800adf8 <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ad5e:	6819      	ldr	r1, [r3, #0]
 800ad60:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800ad64:	6019      	str	r1, [r3, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ad66:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800ad68:	69e3      	ldr	r3, [r4, #28]
 800ad6a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800ad6c:	432b      	orrs	r3, r5
 800ad6e:	6821      	ldr	r1, [r4, #0]
 800ad70:	4303      	orrs	r3, r0
 800ad72:	68e0      	ldr	r0, [r4, #12]
 800ad74:	4303      	orrs	r3, r0
 800ad76:	4313      	orrs	r3, r2
 800ad78:	608b      	str	r3, [r1, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ad7a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ad7c:	69a0      	ldr	r0, [r4, #24]
 800ad7e:	6822      	ldr	r2, [r4, #0]
 800ad80:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800ad84:	432b      	orrs	r3, r5
 800ad86:	430b      	orrs	r3, r1
 800ad88:	6921      	ldr	r1, [r4, #16]
 800ad8a:	4303      	orrs	r3, r0
 800ad8c:	6960      	ldr	r0, [r4, #20]
 800ad8e:	430b      	orrs	r3, r1
 800ad90:	6a21      	ldr	r1, [r4, #32]
 800ad92:	4303      	orrs	r3, r0
 800ad94:	6860      	ldr	r0, [r4, #4]
 800ad96:	430b      	orrs	r3, r1
 800ad98:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800ad9a:	4303      	orrs	r3, r0
 800ad9c:	68a0      	ldr	r0, [r4, #8]
 800ad9e:	430b      	orrs	r3, r1
 800ada0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800ada2:	4303      	orrs	r3, r0
 800ada4:	430b      	orrs	r3, r1
 800ada6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ada8:	430b      	orrs	r3, r1
 800adaa:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800adac:	6863      	ldr	r3, [r4, #4]
 800adae:	b96b      	cbnz	r3, 800adcc <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800adb0:	6822      	ldr	r2, [r4, #0]
 800adb2:	6893      	ldr	r3, [r2, #8]
 800adb4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800adb8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800adbc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800adbe:	6822      	ldr	r2, [r4, #0]
 800adc0:	6893      	ldr	r3, [r2, #8]
 800adc2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800adc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800adca:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800adcc:	6822      	ldr	r2, [r4, #0]
 800adce:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800add0:	f023 0301 	bic.w	r3, r3, #1
 800add4:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800add6:	6863      	ldr	r3, [r4, #4]
 800add8:	025b      	lsls	r3, r3, #9
 800adda:	d506      	bpl.n	800adea <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800addc:	6822      	ldr	r2, [r4, #0]
 800adde:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800ade0:	68d3      	ldr	r3, [r2, #12]
 800ade2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ade6:	430b      	orrs	r3, r1
 800ade8:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800adea:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800adec:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800adee:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800adf2:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800adf6:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800adf8:	6819      	ldr	r1, [r3, #0]
 800adfa:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800adfc:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800ae00:	4301      	orrs	r1, r0
 800ae02:	6019      	str	r1, [r3, #0]
 800ae04:	e7af      	b.n	800ad66 <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae06:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800ae0a:	d01c      	beq.n	800ae46 <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800ae0c:	2900      	cmp	r1, #0
 800ae0e:	d1a1      	bne.n	800ad54 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800ae10:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae12:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800ae16:	d1a2      	bne.n	800ad5e <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ae18:	6819      	ldr	r1, [r3, #0]
 800ae1a:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800ae1e:	6019      	str	r1, [r3, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800ae20:	e9d4 3100 	ldrd	r3, r1, [r4]
 800ae24:	e796      	b.n	800ad54 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800ae26:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800ae28:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800ae2c:	f7f8 fbc8 	bl	80035c0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800ae30:	6823      	ldr	r3, [r4, #0]
 800ae32:	e77f      	b.n	800ad34 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae34:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800ae36:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ae38:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800ae3a:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800ae3c:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800ae40:	e770      	b.n	800ad24 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800ae42:	2001      	movs	r0, #1
}
 800ae44:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800ae46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ae48:	2900      	cmp	r1, #0
 800ae4a:	d0e5      	beq.n	800ae18 <HAL_SPI_Init+0x158>
 800ae4c:	e784      	b.n	800ad58 <HAL_SPI_Init+0x98>
 800ae4e:	bf00      	nop
 800ae50:	40013000 	.word	0x40013000
 800ae54:	40003800 	.word	0x40003800

0800ae58 <HAL_SPI_Receive_DMA>:
{
 800ae58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800ae5a:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	f000 80a9 	beq.w	800afb6 <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800ae64:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800ae68:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800ae6e:	b2de      	uxtb	r6, r3
 800ae70:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800ae72:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800ae76:	f040 8093 	bne.w	800afa0 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800ae7a:	2900      	cmp	r1, #0
 800ae7c:	f000 808b 	beq.w	800af96 <HAL_SPI_Receive_DMA+0x13e>
 800ae80:	fab5 f385 	clz	r3, r5
 800ae84:	095b      	lsrs	r3, r3, #5
 800ae86:	2d00      	cmp	r5, #0
 800ae88:	f000 8085 	beq.w	800af96 <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae8c:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800ae8e:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae90:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ae92:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800ae96:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ae9a:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800ae9e:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aea0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800aea4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800aea8:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aeac:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800aeb0:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aeb4:	d07a      	beq.n	800afac <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800aeb6:	68d3      	ldr	r3, [r2, #12]
 800aeb8:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800aebc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800aec0:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800aec2:	68e3      	ldr	r3, [r4, #12]
 800aec4:	2b0f      	cmp	r3, #15
 800aec6:	d861      	bhi.n	800af8c <HAL_SPI_Receive_DMA+0x134>
 800aec8:	2b07      	cmp	r3, #7
 800aeca:	f200 8092 	bhi.w	800aff2 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800aece:	6822      	ldr	r2, [r4, #0]
 800aed0:	6893      	ldr	r3, [r2, #8]
 800aed2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800aed6:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800aed8:	68e3      	ldr	r3, [r4, #12]
 800aeda:	2b07      	cmp	r3, #7
 800aedc:	d86e      	bhi.n	800afbc <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800aede:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aee0:	699a      	ldr	r2, [r3, #24]
 800aee2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800aee6:	d107      	bne.n	800aef8 <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800aee8:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800aeec:	b292      	uxth	r2, r2
 800aeee:	3201      	adds	r2, #1
 800aef0:	0852      	lsrs	r2, r2, #1
 800aef2:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800aef6:	699a      	ldr	r2, [r3, #24]
 800aef8:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800aefc:	d106      	bne.n	800af0c <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800aefe:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800af02:	b292      	uxth	r2, r2
 800af04:	3203      	adds	r2, #3
 800af06:	0892      	lsrs	r2, r2, #2
 800af08:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af0c:	4a3e      	ldr	r2, [pc, #248]	; (800b008 <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800af0e:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800af10:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800af12:	4a3e      	ldr	r2, [pc, #248]	; (800b00c <HAL_SPI_Receive_DMA+0x1b4>)
 800af14:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800af16:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800af18:	4a3d      	ldr	r2, [pc, #244]	; (800b010 <HAL_SPI_Receive_DMA+0x1b8>)
 800af1a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800af1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800af1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800af20:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800af22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800af26:	6821      	ldr	r1, [r4, #0]
 800af28:	b29b      	uxth	r3, r3
 800af2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af2c:	3130      	adds	r1, #48	; 0x30
 800af2e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800af30:	f7f9 fec2 	bl	8004cb8 <HAL_DMA_Start_IT>
 800af34:	2800      	cmp	r0, #0
 800af36:	d150      	bne.n	800afda <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800af38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800af3a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800af3c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800af3e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800af40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800af44:	4b33      	ldr	r3, [pc, #204]	; (800b014 <HAL_SPI_Receive_DMA+0x1bc>)
 800af46:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800af4a:	bf18      	it	ne
 800af4c:	432b      	orrne	r3, r5
 800af4e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800af50:	6822      	ldr	r2, [r4, #0]
 800af52:	6893      	ldr	r3, [r2, #8]
 800af54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af58:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800af5a:	6822      	ldr	r2, [r4, #0]
 800af5c:	6913      	ldr	r3, [r2, #16]
 800af5e:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800af62:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800af64:	6822      	ldr	r2, [r4, #0]
 800af66:	6813      	ldr	r3, [r2, #0]
 800af68:	f043 0301 	orr.w	r3, r3, #1
 800af6c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800af6e:	6863      	ldr	r3, [r4, #4]
 800af70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af74:	d104      	bne.n	800af80 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	6813      	ldr	r3, [r2, #0]
 800af7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af7e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800af80:	2300      	movs	r3, #0
  return errorcode;
 800af82:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800af84:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800af88:	4630      	mov	r0, r6
 800af8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800af8c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af94:	d09b      	beq.n	800aece <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800af96:	2300      	movs	r3, #0
 800af98:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800af9c:	4630      	mov	r0, r6
 800af9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800afa0:	2300      	movs	r3, #0
    return errorcode;
 800afa2:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800afa4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800afa8:	4630      	mov	r0, r6
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800afac:	6813      	ldr	r3, [r2, #0]
 800afae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800afb2:	6013      	str	r3, [r2, #0]
 800afb4:	e785      	b.n	800aec2 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800afb6:	2602      	movs	r6, #2
}
 800afb8:	4630      	mov	r0, r6
 800afba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800afbc:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afbe:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800afc0:	d8a4      	bhi.n	800af0c <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800afc2:	699a      	ldr	r2, [r3, #24]
 800afc4:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800afc8:	d1a0      	bne.n	800af0c <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800afca:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800afce:	b292      	uxth	r2, r2
 800afd0:	3201      	adds	r2, #1
 800afd2:	0852      	lsrs	r2, r2, #1
 800afd4:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800afd8:	e798      	b.n	800af0c <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afda:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800afde:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800afe0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800afe4:	f043 0310 	orr.w	r3, r3, #16
 800afe8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800afec:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800aff0:	e7d4      	b.n	800af9c <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800aff2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800aff4:	699b      	ldr	r3, [r3, #24]
 800aff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800affa:	f43f af68 	beq.w	800aece <HAL_SPI_Receive_DMA+0x76>
 800affe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b002:	d1c8      	bne.n	800af96 <HAL_SPI_Receive_DMA+0x13e>
 800b004:	e763      	b.n	800aece <HAL_SPI_Receive_DMA+0x76>
 800b006:	bf00      	nop
 800b008:	0800b3e9 	.word	0x0800b3e9
 800b00c:	0800b399 	.word	0x0800b399
 800b010:	0800b405 	.word	0x0800b405
 800b014:	ffff0000 	.word	0xffff0000

0800b018 <HAL_SPI_TransmitReceive_DMA>:
{
 800b018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b01c:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800b01e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b022:	2b01      	cmp	r3, #1
 800b024:	f000 809a 	beq.w	800b15c <HAL_SPI_TransmitReceive_DMA+0x144>
 800b028:	2301      	movs	r3, #1
 800b02a:	4604      	mov	r4, r0
 800b02c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800b030:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b034:	2b01      	cmp	r3, #1
 800b036:	b2de      	uxtb	r6, r3
 800b038:	d158      	bne.n	800b0ec <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	bf18      	it	ne
 800b03e:	2a00      	cmpne	r2, #0
 800b040:	d04e      	beq.n	800b0e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
 800b042:	fab1 f381 	clz	r3, r1
 800b046:	095b      	lsrs	r3, r3, #5
 800b048:	2900      	cmp	r1, #0
 800b04a:	d049      	beq.n	800b0e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800b04c:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b04e:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b050:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800b052:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800b054:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800b058:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b05c:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800b060:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800b064:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800b068:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800b06c:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800b070:	68d3      	ldr	r3, [r2, #12]
 800b072:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800b076:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b078:	6802      	ldr	r2, [r0, #0]
 800b07a:	6893      	ldr	r3, [r2, #8]
 800b07c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b080:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b082:	68c3      	ldr	r3, [r0, #12]
 800b084:	2b0f      	cmp	r3, #15
 800b086:	d938      	bls.n	800b0fa <HAL_SPI_TransmitReceive_DMA+0xe2>
 800b088:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b08a:	699a      	ldr	r2, [r3, #24]
 800b08c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b090:	d126      	bne.n	800b0e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b092:	4a6c      	ldr	r2, [pc, #432]	; (800b244 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800b094:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b098:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800b250 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800b09c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800b09e:	4a6a      	ldr	r2, [pc, #424]	; (800b248 <HAL_SPI_TransmitReceive_DMA+0x230>)
 800b0a0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b0a2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800b0a4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b0a6:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800b0aa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b0ac:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800b0b0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800b0b4:	6821      	ldr	r1, [r4, #0]
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b0ba:	3130      	adds	r1, #48	; 0x30
 800b0bc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b0be:	f7f9 fdfb 	bl	8004cb8 <HAL_DMA_Start_IT>
 800b0c2:	4607      	mov	r7, r0
 800b0c4:	2800      	cmp	r0, #0
 800b0c6:	d04d      	beq.n	800b164 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b0c8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b0cc:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800b0ce:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b0d2:	f043 0310 	orr.w	r3, r3, #16
 800b0d6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b0da:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800b0de:	e002      	b.n	800b0e6 <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800b0e6:	4630      	mov	r0, r6
 800b0e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800b0ec:	2300      	movs	r3, #0
    return errorcode;
 800b0ee:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800b0f0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800b0f4:	4630      	mov	r0, r6
 800b0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800b0fa:	2b07      	cmp	r3, #7
 800b0fc:	d87f      	bhi.n	800b1fe <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b0fe:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800b100:	6993      	ldr	r3, [r2, #24]
 800b102:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b106:	d107      	bne.n	800b118 <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b108:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800b10c:	b29b      	uxth	r3, r3
 800b10e:	3301      	adds	r3, #1
 800b110:	085b      	lsrs	r3, r3, #1
 800b112:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b116:	6993      	ldr	r3, [r2, #24]
 800b118:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b11c:	d106      	bne.n	800b12c <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800b11e:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800b122:	b29b      	uxth	r3, r3
 800b124:	3303      	adds	r3, #3
 800b126:	089b      	lsrs	r3, r3, #2
 800b128:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b12c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b12e:	699a      	ldr	r2, [r3, #24]
 800b130:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b134:	d107      	bne.n	800b146 <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b136:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800b13a:	b292      	uxth	r2, r2
 800b13c:	3201      	adds	r2, #1
 800b13e:	0852      	lsrs	r2, r2, #1
 800b140:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b144:	699a      	ldr	r2, [r3, #24]
 800b146:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b14a:	d1a2      	bne.n	800b092 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800b14c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800b150:	b292      	uxth	r2, r2
 800b152:	3203      	adds	r2, #3
 800b154:	0892      	lsrs	r2, r2, #2
 800b156:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800b15a:	e79a      	b.n	800b092 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800b15c:	2602      	movs	r6, #2
}
 800b15e:	4630      	mov	r0, r6
 800b160:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800b164:	6822      	ldr	r2, [r4, #0]
 800b166:	6893      	ldr	r3, [r2, #8]
 800b168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b16c:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800b16e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b170:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800b172:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b174:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800b176:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b178:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800b17a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b17c:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800b180:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800b184:	6822      	ldr	r2, [r4, #0]
 800b186:	b29b      	uxth	r3, r3
 800b188:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b18a:	3220      	adds	r2, #32
 800b18c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b18e:	f7f9 fd93 	bl	8004cb8 <HAL_DMA_Start_IT>
 800b192:	bb40      	cbnz	r0, 800b1e6 <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b194:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b196:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b198:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b19a:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b19c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800b1a0:	4b2a      	ldr	r3, [pc, #168]	; (800b24c <HAL_SPI_TransmitReceive_DMA+0x234>)
 800b1a2:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800b1a6:	bf18      	it	ne
 800b1a8:	432b      	orrne	r3, r5
 800b1aa:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800b1ac:	6822      	ldr	r2, [r4, #0]
 800b1ae:	6893      	ldr	r3, [r2, #8]
 800b1b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1b4:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800b1b6:	6822      	ldr	r2, [r4, #0]
 800b1b8:	6913      	ldr	r3, [r2, #16]
 800b1ba:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800b1be:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800b1c0:	6822      	ldr	r2, [r4, #0]
 800b1c2:	6813      	ldr	r3, [r2, #0]
 800b1c4:	f043 0301 	orr.w	r3, r3, #1
 800b1c8:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b1ca:	6863      	ldr	r3, [r4, #4]
 800b1cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1d0:	d104      	bne.n	800b1dc <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800b1d2:	6822      	ldr	r2, [r4, #0]
 800b1d4:	6813      	ldr	r3, [r2, #0]
 800b1d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b1da:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800b1dc:	2300      	movs	r3, #0
  return errorcode;
 800b1de:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800b1e0:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800b1e4:	e77f      	b.n	800b0e6 <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b1ea:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800b1ec:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1f0:	f043 0310 	orr.w	r3, r3, #16
 800b1f4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b1f8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800b1fc:	e773      	b.n	800b0e6 <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800b1fe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b200:	699a      	ldr	r2, [r3, #24]
 800b202:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800b206:	d003      	beq.n	800b210 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800b208:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b20c:	f47f af68 	bne.w	800b0e0 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b210:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800b212:	6989      	ldr	r1, [r1, #24]
 800b214:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800b218:	d107      	bne.n	800b22a <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800b21a:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800b21e:	b292      	uxth	r2, r2
 800b220:	3201      	adds	r2, #1
 800b222:	0852      	lsrs	r2, r2, #1
 800b224:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800b228:	699a      	ldr	r2, [r3, #24]
 800b22a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800b22e:	f47f af30 	bne.w	800b092 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800b232:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800b236:	b292      	uxth	r2, r2
 800b238:	3201      	adds	r2, #1
 800b23a:	0852      	lsrs	r2, r2, #1
 800b23c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800b240:	e727      	b.n	800b092 <HAL_SPI_TransmitReceive_DMA+0x7a>
 800b242:	bf00      	nop
 800b244:	0800b3f5 	.word	0x0800b3f5
 800b248:	0800b3c1 	.word	0x0800b3c1
 800b24c:	ffff0000 	.word	0xffff0000
 800b250:	0800b405 	.word	0x0800b405

0800b254 <HAL_SPI_Abort>:
  __HAL_LOCK(hspi);
 800b254:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800b258:	2b01      	cmp	r3, #1
 800b25a:	f000 8095 	beq.w	800b388 <HAL_SPI_Abort+0x134>
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800b25e:	4b4b      	ldr	r3, [pc, #300]	; (800b38c <HAL_SPI_Abort+0x138>)
 800b260:	2164      	movs	r1, #100	; 0x64
 800b262:	4a4b      	ldr	r2, [pc, #300]	; (800b390 <HAL_SPI_Abort+0x13c>)
{
 800b264:	b510      	push	{r4, lr}
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 800b26a:	2001      	movs	r0, #1
{
 800b26c:	b082      	sub	sp, #8
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800b272:	6822      	ldr	r2, [r4, #0]
  __HAL_LOCK(hspi);
 800b274:	f884 0080 	strb.w	r0, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_ABORT;
 800b278:	2007      	movs	r0, #7
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800b27a:	0a5b      	lsrs	r3, r3, #9
  hspi->State = HAL_SPI_STATE_ABORT;
 800b27c:	f884 0081 	strb.w	r0, [r4, #129]	; 0x81
  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24UL / 1000UL);
 800b280:	fb01 f303 	mul.w	r3, r1, r3
 800b284:	9301      	str	r3, [sp, #4]
  if (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART))
 800b286:	6813      	ldr	r3, [r2, #0]
 800b288:	0598      	lsls	r0, r3, #22
 800b28a:	d53e      	bpl.n	800b30a <HAL_SPI_Abort+0xb6>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b28c:	6913      	ldr	r3, [r2, #16]
 800b28e:	f023 0308 	bic.w	r3, r3, #8
 800b292:	6113      	str	r3, [r2, #16]
    while (HAL_IS_BIT_SET(hspi->Instance->IER, SPI_IT_EOT));
 800b294:	6822      	ldr	r2, [r4, #0]
 800b296:	e002      	b.n	800b29e <HAL_SPI_Abort+0x4a>
 800b298:	6913      	ldr	r3, [r2, #16]
 800b29a:	0719      	lsls	r1, r3, #28
 800b29c:	d50b      	bpl.n	800b2b6 <HAL_SPI_Abort+0x62>
      count--;
 800b29e:	9b01      	ldr	r3, [sp, #4]
 800b2a0:	3b01      	subs	r3, #1
 800b2a2:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800b2a4:	9b01      	ldr	r3, [sp, #4]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d1f6      	bne.n	800b298 <HAL_SPI_Abort+0x44>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSUSP);
 800b2b6:	6813      	ldr	r3, [r2, #0]
 800b2b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b2bc:	6013      	str	r3, [r2, #0]
    while (HAL_IS_BIT_SET(hspi->Instance->CR1, SPI_CR1_CSTART));
 800b2be:	6822      	ldr	r2, [r4, #0]
 800b2c0:	e002      	b.n	800b2c8 <HAL_SPI_Abort+0x74>
 800b2c2:	6813      	ldr	r3, [r2, #0]
 800b2c4:	059b      	lsls	r3, r3, #22
 800b2c6:	d50b      	bpl.n	800b2e0 <HAL_SPI_Abort+0x8c>
      count--;
 800b2c8:	9b01      	ldr	r3, [sp, #4]
 800b2ca:	3b01      	subs	r3, #1
 800b2cc:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800b2ce:	9b01      	ldr	r3, [sp, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d1f6      	bne.n	800b2c2 <HAL_SPI_Abort+0x6e>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2d4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2dc:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b2e0:	6993      	ldr	r3, [r2, #24]
 800b2e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b2e6:	6193      	str	r3, [r2, #24]
    while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_SUSP));
 800b2e8:	6822      	ldr	r2, [r4, #0]
 800b2ea:	e002      	b.n	800b2f2 <HAL_SPI_Abort+0x9e>
 800b2ec:	6953      	ldr	r3, [r2, #20]
 800b2ee:	0518      	lsls	r0, r3, #20
 800b2f0:	d50b      	bpl.n	800b30a <HAL_SPI_Abort+0xb6>
      count--;
 800b2f2:	9b01      	ldr	r3, [sp, #4]
 800b2f4:	3b01      	subs	r3, #1
 800b2f6:	9301      	str	r3, [sp, #4]
      if (count == 0UL)
 800b2f8:	9b01      	ldr	r3, [sp, #4]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d1f6      	bne.n	800b2ec <HAL_SPI_Abort+0x98>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b2fe:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b302:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b306:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN))
 800b30a:	6893      	ldr	r3, [r2, #8]
 800b30c:	0419      	lsls	r1, r3, #16
 800b30e:	d508      	bpl.n	800b322 <HAL_SPI_Abort+0xce>
    if (hspi->hdmatx != NULL)
 800b310:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b312:	b133      	cbz	r3, 800b322 <HAL_SPI_Abort+0xce>
      hspi->hdmatx->XferAbortCallback = NULL;
 800b314:	2200      	movs	r2, #0
 800b316:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmatx) != HAL_OK)
 800b318:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b31a:	f7f9 ff99 	bl	8005250 <HAL_DMA_Abort>
 800b31e:	bb00      	cbnz	r0, 800b362 <HAL_SPI_Abort+0x10e>
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800b320:	6822      	ldr	r2, [r4, #0]
 800b322:	6893      	ldr	r3, [r2, #8]
 800b324:	045b      	lsls	r3, r3, #17
 800b326:	d507      	bpl.n	800b338 <HAL_SPI_Abort+0xe4>
    if (hspi->hdmarx != NULL)
 800b328:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b32a:	b12b      	cbz	r3, 800b338 <HAL_SPI_Abort+0xe4>
      hspi->hdmarx->XferAbortCallback = NULL;
 800b32c:	2200      	movs	r2, #0
 800b32e:	651a      	str	r2, [r3, #80]	; 0x50
      if (HAL_DMA_Abort(hspi->hdmarx) != HAL_OK)
 800b330:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b332:	f7f9 ff8d 	bl	8005250 <HAL_DMA_Abort>
 800b336:	b9f0      	cbnz	r0, 800b376 <HAL_SPI_Abort+0x122>
  SPI_AbortTransfer(hspi);
 800b338:	4620      	mov	r0, r4
 800b33a:	f7ff fc23 	bl	800ab84 <SPI_AbortTransfer>
  if (HAL_IS_BIT_SET(hspi->ErrorCode, HAL_SPI_ERROR_ABORT))
 800b33e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b342:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800b346:	d10a      	bne.n	800b35e <HAL_SPI_Abort+0x10a>
  errorcode = HAL_OK;
 800b348:	4618      	mov	r0, r3
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b34a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  __HAL_UNLOCK(hspi);
 800b34e:	2200      	movs	r2, #0
  hspi->State = HAL_SPI_STATE_READY;
 800b350:	2301      	movs	r3, #1
  __HAL_UNLOCK(hspi);
 800b352:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
  hspi->State = HAL_SPI_STATE_READY;
 800b356:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800b35a:	b002      	add	sp, #8
 800b35c:	bd10      	pop	{r4, pc}
    errorcode = HAL_ERROR;
 800b35e:	2001      	movs	r0, #1
 800b360:	e7f5      	b.n	800b34e <HAL_SPI_Abort+0xfa>
        if (HAL_DMA_GetError(hspi->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800b362:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b364:	f7fa fef8 	bl	8006158 <HAL_DMA_GetError>
 800b368:	2820      	cmp	r0, #32
 800b36a:	d1d9      	bne.n	800b320 <HAL_SPI_Abort+0xcc>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b36c:	2340      	movs	r3, #64	; 0x40
  if (HAL_IS_BIT_SET(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN))
 800b36e:	6822      	ldr	r2, [r4, #0]
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b370:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b374:	e7d5      	b.n	800b322 <HAL_SPI_Abort+0xce>
        if (HAL_DMA_GetError(hspi->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b376:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b378:	f7fa feee 	bl	8006158 <HAL_DMA_GetError>
 800b37c:	2820      	cmp	r0, #32
 800b37e:	d1db      	bne.n	800b338 <HAL_SPI_Abort+0xe4>
          hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b380:	2340      	movs	r3, #64	; 0x40
 800b382:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b386:	e7d7      	b.n	800b338 <HAL_SPI_Abort+0xe4>
  __HAL_LOCK(hspi);
 800b388:	2002      	movs	r0, #2
}
 800b38a:	4770      	bx	lr
 800b38c:	200008bc 	.word	0x200008bc
 800b390:	057619f1 	.word	0x057619f1

0800b394 <HAL_SPI_TxCpltCallback>:
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop

0800b398 <SPI_DMAReceiveCplt>:
{
 800b398:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b39a:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b39c:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b3a0:	2b07      	cmp	r3, #7
 800b3a2:	d009      	beq.n	800b3b8 <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b3a4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800b3a6:	69db      	ldr	r3, [r3, #28]
 800b3a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3ac:	d005      	beq.n	800b3ba <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b3ae:	6802      	ldr	r2, [r0, #0]
 800b3b0:	6913      	ldr	r3, [r2, #16]
 800b3b2:	f043 0308 	orr.w	r3, r3, #8
 800b3b6:	6113      	str	r3, [r2, #16]
}
 800b3b8:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800b3ba:	f00f fe35 	bl	801b028 <__HAL_SPI_RxCpltCallback_veneer>
}
 800b3be:	bd08      	pop	{r3, pc}

0800b3c0 <SPI_DMATransmitReceiveCplt>:
{
 800b3c0:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3c2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800b3c4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800b3c8:	2b07      	cmp	r3, #7
 800b3ca:	d009      	beq.n	800b3e0 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800b3cc:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800b3ce:	69db      	ldr	r3, [r3, #28]
 800b3d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3d4:	d005      	beq.n	800b3e2 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800b3d6:	6802      	ldr	r2, [r0, #0]
 800b3d8:	6913      	ldr	r3, [r2, #16]
 800b3da:	f043 0308 	orr.w	r3, r3, #8
 800b3de:	6113      	str	r3, [r2, #16]
}
 800b3e0:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800b3e2:	f00f fdf5 	bl	801afd0 <__HAL_SPI_TxRxCpltCallback_veneer>
}
 800b3e6:	bd08      	pop	{r3, pc}

0800b3e8 <SPI_DMAHalfReceiveCplt>:
{
 800b3e8:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b3ea:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b3ec:	f00f fe0c 	bl	801b008 <__HAL_SPI_RxHalfCpltCallback_veneer>
}
 800b3f0:	bd08      	pop	{r3, pc}
 800b3f2:	bf00      	nop

0800b3f4 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800b3f4:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b3f6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800b3f8:	f00f fdfa 	bl	801aff0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>
}
 800b3fc:	bd08      	pop	{r3, pc}
 800b3fe:	bf00      	nop

0800b400 <HAL_SPI_ErrorCallback>:
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop

0800b404 <SPI_DMAError>:
{
 800b404:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b406:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800b408:	f7fa fea6 	bl	8006158 <HAL_DMA_GetError>
 800b40c:	2802      	cmp	r0, #2
 800b40e:	d100      	bne.n	800b412 <SPI_DMAError+0xe>
}
 800b410:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800b412:	6822      	ldr	r2, [r4, #0]
 800b414:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b416:	6991      	ldr	r1, [r2, #24]
 800b418:	f041 0108 	orr.w	r1, r1, #8
 800b41c:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b41e:	6821      	ldr	r1, [r4, #0]
 800b420:	698a      	ldr	r2, [r1, #24]
 800b422:	f042 0210 	orr.w	r2, r2, #16
 800b426:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800b428:	6821      	ldr	r1, [r4, #0]
 800b42a:	680a      	ldr	r2, [r1, #0]
 800b42c:	f022 0201 	bic.w	r2, r2, #1
 800b430:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800b432:	6821      	ldr	r1, [r4, #0]
 800b434:	4a2c      	ldr	r2, [pc, #176]	; (800b4e8 <SPI_DMAError+0xe4>)
 800b436:	6908      	ldr	r0, [r1, #16]
 800b438:	4002      	ands	r2, r0
 800b43a:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b43c:	6821      	ldr	r1, [r4, #0]
 800b43e:	688a      	ldr	r2, [r1, #8]
 800b440:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800b444:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b446:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800b44a:	2a04      	cmp	r2, #4
 800b44c:	d001      	beq.n	800b452 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800b44e:	0698      	lsls	r0, r3, #26
 800b450:	d43d      	bmi.n	800b4ce <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b452:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800b456:	2a03      	cmp	r2, #3
 800b458:	d001      	beq.n	800b45e <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800b45a:	0659      	lsls	r1, r3, #25
 800b45c:	d42b      	bmi.n	800b4b6 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800b45e:	059a      	lsls	r2, r3, #22
 800b460:	d50a      	bpl.n	800b478 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b462:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b466:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b468:	f042 0201 	orr.w	r2, r2, #1
 800b46c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b470:	698a      	ldr	r2, [r1, #24]
 800b472:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b476:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800b478:	05db      	lsls	r3, r3, #23
 800b47a:	d50a      	bpl.n	800b492 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b47c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b480:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b482:	f043 0308 	orr.w	r3, r3, #8
 800b486:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b48a:	6993      	ldr	r3, [r2, #24]
 800b48c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b490:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800b492:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800b494:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800b496:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800b498:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800b49c:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b4a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b4a4:	f043 0310 	orr.w	r3, r3, #16
 800b4a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800b4ac:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800b4b0:	f7ff ffa6 	bl	800b400 <HAL_SPI_ErrorCallback>
}
 800b4b4:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b4b6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4ba:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b4bc:	f042 0204 	orr.w	r2, r2, #4
 800b4c0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b4c4:	698a      	ldr	r2, [r1, #24]
 800b4c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b4ca:	618a      	str	r2, [r1, #24]
 800b4cc:	e7c7      	b.n	800b45e <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b4ce:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4d2:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b4d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b4d8:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b4dc:	698a      	ldr	r2, [r1, #24]
 800b4de:	f042 0220 	orr.w	r2, r2, #32
 800b4e2:	618a      	str	r2, [r1, #24]
 800b4e4:	e7b5      	b.n	800b452 <SPI_DMAError+0x4e>
 800b4e6:	bf00      	nop
 800b4e8:	fffffc90 	.word	0xfffffc90

0800b4ec <SPI_DMAAbortOnError>:
{
 800b4ec:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800b4ee:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b4f0:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800b4f8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800b4fc:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800b500:	f7ff ff7e 	bl	800b400 <HAL_SPI_ErrorCallback>
}
 800b504:	bd08      	pop	{r3, pc}
 800b506:	bf00      	nop

0800b508 <HAL_SPI_SuspendCallback>:
 800b508:	4770      	bx	lr
 800b50a:	bf00      	nop

0800b50c <HAL_SPI_IRQHandler>:
{
 800b50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800b510:	6802      	ldr	r2, [r0, #0]
{
 800b512:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800b514:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800b516:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800b518:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800b51a:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800b51e:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b522:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800b524:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800b526:	d502      	bpl.n	800b52e <HAL_SPI_IRQHandler+0x22>
 800b528:	0709      	lsls	r1, r1, #28
 800b52a:	f100 80e1 	bmi.w	800b6f0 <HAL_SPI_IRQHandler+0x1e4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800b52e:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800b532:	2b04      	cmp	r3, #4
 800b534:	d044      	beq.n	800b5c0 <HAL_SPI_IRQHandler+0xb4>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b536:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800b53a:	2b01      	cmp	r3, #1
 800b53c:	d04a      	beq.n	800b5d4 <HAL_SPI_IRQHandler+0xc8>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b53e:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800b542:	2b02      	cmp	r3, #2
 800b544:	f000 80ea 	beq.w	800b71c <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800b548:	072b      	lsls	r3, r5, #28
 800b54a:	d563      	bpl.n	800b614 <HAL_SPI_IRQHandler+0x108>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800b54c:	6993      	ldr	r3, [r2, #24]
 800b54e:	f043 0308 	orr.w	r3, r3, #8
 800b552:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800b554:	6821      	ldr	r1, [r4, #0]
 800b556:	698b      	ldr	r3, [r1, #24]
 800b558:	f043 0310 	orr.w	r3, r3, #16
 800b55c:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b55e:	6821      	ldr	r1, [r4, #0]
 800b560:	698b      	ldr	r3, [r1, #24]
 800b562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b566:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800b568:	6821      	ldr	r1, [r4, #0]
 800b56a:	690b      	ldr	r3, [r1, #16]
 800b56c:	f023 0308 	bic.w	r3, r3, #8
 800b570:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800b57a:	d135      	bne.n	800b5e8 <HAL_SPI_IRQHandler+0xdc>
      while (hspi->RxXferCount != 0UL)
 800b57c:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b580:	b29b      	uxth	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d030      	beq.n	800b5e8 <HAL_SPI_IRQHandler+0xdc>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800b586:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b588:	e00f      	b.n	800b5aa <HAL_SPI_IRQHandler+0x9e>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b58e:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b590:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b592:	3104      	adds	r1, #4
        hspi->RxXferCount--;
 800b594:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800b598:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800b59a:	3b01      	subs	r3, #1
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800b5a2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800b5a6:	b29b      	uxth	r3, r3
 800b5a8:	b1f3      	cbz	r3, 800b5e8 <HAL_SPI_IRQHandler+0xdc>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800b5aa:	68e3      	ldr	r3, [r4, #12]
 800b5ac:	2b0f      	cmp	r3, #15
 800b5ae:	d8ec      	bhi.n	800b58a <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b5b0:	2b07      	cmp	r3, #7
 800b5b2:	f240 80ac 	bls.w	800b70e <HAL_SPI_IRQHandler+0x202>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800b5b6:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800b5b8:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800b5ba:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b5bc:	3102      	adds	r1, #2
 800b5be:	e7e9      	b.n	800b594 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b5c4:	4798      	blx	r3
    hspi->RxISR(hspi);
 800b5c6:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800b5cc:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800b5d0:	2b01      	cmp	r3, #1
 800b5d2:	d102      	bne.n	800b5da <HAL_SPI_IRQHandler+0xce>
    hspi->RxISR(hspi);
 800b5d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800b5da:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800b5de:	2d02      	cmp	r5, #2
 800b5e0:	f000 809c 	beq.w	800b71c <HAL_SPI_IRQHandler+0x210>
}
 800b5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800b5e8:	4620      	mov	r0, r4
 800b5ea:	f7ff fb05 	bl	800abf8 <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b5f4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	f040 8085 	bne.w	800b708 <HAL_SPI_IRQHandler+0x1fc>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800b5fe:	2e05      	cmp	r6, #5
 800b600:	f000 8091 	beq.w	800b726 <HAL_SPI_IRQHandler+0x21a>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800b604:	2e04      	cmp	r6, #4
 800b606:	f000 8091 	beq.w	800b72c <HAL_SPI_IRQHandler+0x220>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800b60a:	2e03      	cmp	r6, #3
 800b60c:	d1ea      	bne.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_TxCpltCallback(hspi);
 800b60e:	f7ff fec1 	bl	800b394 <HAL_SPI_TxCpltCallback>
 800b612:	e7e7      	b.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800b614:	f415 7f58 	tst.w	r5, #864	; 0x360
 800b618:	d0e4      	beq.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800b61a:	0668      	lsls	r0, r5, #25
 800b61c:	d509      	bpl.n	800b632 <HAL_SPI_IRQHandler+0x126>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b61e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b622:	f043 0304 	orr.w	r3, r3, #4
 800b626:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b62a:	6993      	ldr	r3, [r2, #24]
 800b62c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b630:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800b632:	05a9      	lsls	r1, r5, #22
 800b634:	d50a      	bpl.n	800b64c <HAL_SPI_IRQHandler+0x140>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b636:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b63a:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b63c:	f043 0301 	orr.w	r3, r3, #1
 800b640:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b644:	6993      	ldr	r3, [r2, #24]
 800b646:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b64a:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800b64c:	05ea      	lsls	r2, r5, #23
 800b64e:	d50a      	bpl.n	800b666 <HAL_SPI_IRQHandler+0x15a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b650:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b654:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b656:	f043 0308 	orr.w	r3, r3, #8
 800b65a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b65e:	6993      	ldr	r3, [r2, #24]
 800b660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b664:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800b666:	06ab      	lsls	r3, r5, #26
 800b668:	d50a      	bpl.n	800b680 <HAL_SPI_IRQHandler+0x174>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b66a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b66e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800b670:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b674:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800b678:	6993      	ldr	r3, [r2, #24]
 800b67a:	f043 0320 	orr.w	r3, r3, #32
 800b67e:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b680:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b684:	2b00      	cmp	r3, #0
 800b686:	d0ad      	beq.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
      __HAL_SPI_DISABLE(hspi);
 800b688:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b68a:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b68e:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b690:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800b694:	f023 0301 	bic.w	r3, r3, #1
 800b698:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800b69a:	6822      	ldr	r2, [r4, #0]
 800b69c:	4b25      	ldr	r3, [pc, #148]	; (800b734 <HAL_SPI_IRQHandler+0x228>)
 800b69e:	6911      	ldr	r1, [r2, #16]
 800b6a0:	ea03 0301 	and.w	r3, r3, r1
 800b6a4:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800b6a6:	d12b      	bne.n	800b700 <HAL_SPI_IRQHandler+0x1f4>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800b6a8:	6822      	ldr	r2, [r4, #0]
 800b6aa:	6893      	ldr	r3, [r2, #8]
 800b6ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b6b0:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800b6b2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800b6b4:	b15b      	cbz	r3, 800b6ce <HAL_SPI_IRQHandler+0x1c2>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b6b6:	4a20      	ldr	r2, [pc, #128]	; (800b738 <HAL_SPI_IRQHandler+0x22c>)
 800b6b8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b6ba:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800b6bc:	f7f9 ffde 	bl	800567c <HAL_DMA_Abort_IT>
 800b6c0:	b128      	cbz	r0, 800b6ce <HAL_SPI_IRQHandler+0x1c2>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b6c2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b6c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ca:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800b6ce:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d087      	beq.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b6d4:	4a18      	ldr	r2, [pc, #96]	; (800b738 <HAL_SPI_IRQHandler+0x22c>)
 800b6d6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b6d8:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800b6da:	f7f9 ffcf 	bl	800567c <HAL_DMA_Abort_IT>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d080      	beq.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b6e2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800b6e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6ea:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800b6ee:	e779      	b.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800b6f0:	6993      	ldr	r3, [r2, #24]
 800b6f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800b6f6:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800b6f8:	f7ff ff06 	bl	800b508 <HAL_SPI_SuspendCallback>
}
 800b6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800b700:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800b702:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800b704:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800b708:	f7ff fe7a 	bl	800b400 <HAL_SPI_ErrorCallback>
 800b70c:	e76a      	b.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800b70e:	6823      	ldr	r3, [r4, #0]
 800b710:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b714:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800b716:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800b718:	3101      	adds	r1, #1
 800b71a:	e73b      	b.n	800b594 <HAL_SPI_IRQHandler+0x88>
    hspi->TxISR(hspi);
 800b71c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800b71e:	4620      	mov	r0, r4
}
 800b720:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800b724:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800b726:	f00f fc53 	bl	801afd0 <__HAL_SPI_TxRxCpltCallback_veneer>
 800b72a:	e75b      	b.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
      HAL_SPI_RxCpltCallback(hspi);
 800b72c:	f00f fc7c 	bl	801b028 <__HAL_SPI_RxCpltCallback_veneer>
 800b730:	e758      	b.n	800b5e4 <HAL_SPI_IRQHandler+0xd8>
 800b732:	bf00      	nop
 800b734:	fffffc94 	.word	0xfffffc94
 800b738:	0800b4ed 	.word	0x0800b4ed

0800b73c <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b73c:	680b      	ldr	r3, [r1, #0]
{
 800b73e:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800b740:	b9d3      	cbnz	r3, 800b778 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b742:	6804      	ldr	r4, [r0, #0]
 800b744:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800b748:	684a      	ldr	r2, [r1, #4]
 800b74a:	4023      	ands	r3, r4
 800b74c:	4313      	orrs	r3, r2
 800b74e:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b752:	4323      	orrs	r3, r4
 800b754:	4313      	orrs	r3, r2
 800b756:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800b75a:	4323      	orrs	r3, r4
 800b75c:	4313      	orrs	r3, r2
 800b75e:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800b762:	4323      	orrs	r3, r4
 800b764:	4313      	orrs	r3, r2
 800b766:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800b76a:	4323      	orrs	r3, r4
 800b76c:	4313      	orrs	r3, r2
 800b76e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800b770:	2000      	movs	r0, #0
 800b772:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b776:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b778:	6802      	ldr	r2, [r0, #0]
 800b77a:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800b77e:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800b782:	4322      	orrs	r2, r4
 800b784:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800b786:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b788:	4b0a      	ldr	r3, [pc, #40]	; (800b7b4 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800b78a:	4322      	orrs	r2, r4
 800b78c:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800b78e:	6842      	ldr	r2, [r0, #4]
 800b790:	4013      	ands	r3, r2
 800b792:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800b796:	4323      	orrs	r3, r4
 800b798:	4313      	orrs	r3, r2
 800b79a:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800b79e:	4323      	orrs	r3, r4
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800b7a6:	4323      	orrs	r3, r4
 800b7a8:	4313      	orrs	r3, r2
 800b7aa:	6043      	str	r3, [r0, #4]
}
 800b7ac:	2000      	movs	r0, #0
 800b7ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7b2:	4770      	bx	lr
 800b7b4:	ffff8000 	.word	0xffff8000

0800b7b8 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b7b8:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800b7ba:	bb0a      	cbnz	r2, 800b800 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b7bc:	6883      	ldr	r3, [r0, #8]
 800b7be:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b7c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b7c6:	3c01      	subs	r4, #1
 800b7c8:	3a01      	subs	r2, #1
 800b7ca:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b7ce:	4313      	orrs	r3, r2
 800b7d0:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800b7d4:	3c01      	subs	r4, #1
 800b7d6:	3a01      	subs	r2, #1
 800b7d8:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
 800b7dc:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
 800b7e0:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b7e4:	698a      	ldr	r2, [r1, #24]
 800b7e6:	3d01      	subs	r5, #1
 800b7e8:	1e61      	subs	r1, r4, #1
 800b7ea:	3a01      	subs	r2, #1
 800b7ec:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 800b7f0:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800b7f4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b7f8:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800b7fa:	2000      	movs	r0, #0
 800b7fc:	bc30      	pop	{r4, r5}
 800b7fe:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800b800:	6885      	ldr	r5, [r0, #8]
 800b802:	68ca      	ldr	r2, [r1, #12]
 800b804:	4b12      	ldr	r3, [pc, #72]	; (800b850 <FMC_SDRAM_Timing_Init+0x98>)
 800b806:	1e54      	subs	r4, r2, #1
 800b808:	694a      	ldr	r2, [r1, #20]
 800b80a:	402b      	ands	r3, r5
 800b80c:	3a01      	subs	r2, #1
 800b80e:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800b812:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b816:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800b818:	68c3      	ldr	r3, [r0, #12]
 800b81a:	688d      	ldr	r5, [r1, #8]
 800b81c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b820:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 800b824:	e9d1 2400 	ldrd	r2, r4, [r1]
 800b828:	3c01      	subs	r4, #1
 800b82a:	3a01      	subs	r2, #1
 800b82c:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800b830:	690c      	ldr	r4, [r1, #16]
 800b832:	4313      	orrs	r3, r2
 800b834:	698a      	ldr	r2, [r1, #24]
 800b836:	1e61      	subs	r1, r4, #1
 800b838:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800b83c:	3a01      	subs	r2, #1
 800b83e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b842:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b846:	60c3      	str	r3, [r0, #12]
}
 800b848:	2000      	movs	r0, #0
 800b84a:	bc30      	pop	{r4, r5}
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	ff0f0fff 	.word	0xff0f0fff

0800b854 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b854:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b856:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800b85a:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b85c:	6900      	ldr	r0, [r0, #16]
 800b85e:	4323      	orrs	r3, r4
 800b860:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800b864:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800b868:	4c05      	ldr	r4, [pc, #20]	; (800b880 <FMC_SDRAM_SendCommand+0x2c>)
 800b86a:	3901      	subs	r1, #1
 800b86c:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800b86e:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800b870:	4323      	orrs	r3, r4
 800b872:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800b876:	6113      	str	r3, [r2, #16]
}
 800b878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b87c:	4770      	bx	lr
 800b87e:	bf00      	nop
 800b880:	ffc00000 	.word	0xffc00000

0800b884 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b884:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b886:	4b05      	ldr	r3, [pc, #20]	; (800b89c <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800b888:	2000      	movs	r0, #0
{
 800b88a:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800b88c:	6954      	ldr	r4, [r2, #20]
 800b88e:	4023      	ands	r3, r4
 800b890:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800b894:	6151      	str	r1, [r2, #20]
}
 800b896:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b89a:	4770      	bx	lr
 800b89c:	ffffc001 	.word	0xffffc001

0800b8a0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b8a0:	b084      	sub	sp, #16
 800b8a2:	b410      	push	{r4}
 800b8a4:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800b8a8:	4614      	mov	r4, r2
{
 800b8aa:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800b8ae:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800b8b0:	9904      	ldr	r1, [sp, #16]
{
 800b8b2:	4602      	mov	r2, r0
             Init.BusWide             | \
 800b8b4:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800b8b6:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b8b8:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800b8ba:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800b8bc:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800b8be:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800b8c0:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800b8c2:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b8c4:	4903      	ldr	r1, [pc, #12]	; (800b8d4 <SDMMC_Init+0x34>)
 800b8c6:	4021      	ands	r1, r4
 800b8c8:	430b      	orrs	r3, r1
 800b8ca:	6053      	str	r3, [r2, #4]
}
 800b8cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d0:	b004      	add	sp, #16
 800b8d2:	4770      	bx	lr
 800b8d4:	ffc02c00 	.word	0xffc02c00

0800b8d8 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b8d8:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800b8dc:	4770      	bx	lr
 800b8de:	bf00      	nop

0800b8e0 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b8e0:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b8e2:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800b8e4:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800b8e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800b8ea:	4770      	bx	lr

0800b8ec <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b8ec:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800b8ee:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	f042 0203 	orr.w	r2, r2, #3
 800b8f6:	601a      	str	r2, [r3, #0]
}
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop

0800b8fc <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b8fc:	6800      	ldr	r0, [r0, #0]
}
 800b8fe:	f000 0003 	and.w	r0, r0, #3
 800b902:	4770      	bx	lr

0800b904 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b904:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800b906:	5840      	ldr	r0, [r0, r1]
}
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop

0800b90c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800b90c:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b90e:	680b      	ldr	r3, [r1, #0]
{
 800b910:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b912:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b914:	684b      	ldr	r3, [r1, #4]
 800b916:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800b918:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b91a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800b91c:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800b920:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800b922:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b924:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800b928:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800b92a:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800b92c:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b92e:	430b      	orrs	r3, r1
 800b930:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800b932:	bc30      	pop	{r4, r5}
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop

0800b938 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b938:	4a50      	ldr	r2, [pc, #320]	; (800ba7c <SDMMC_CmdBlockLength+0x144>)
{
 800b93a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b93c:	4b50      	ldr	r3, [pc, #320]	; (800ba80 <SDMMC_CmdBlockLength+0x148>)
 800b93e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800b940:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b944:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b948:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800b94c:	484d      	ldr	r0, [pc, #308]	; (800ba84 <SDMMC_CmdBlockLength+0x14c>)
 800b94e:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b952:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b954:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b956:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b95a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800b95c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b960:	f8cc 300c 	str.w	r3, [ip, #12]

  do
  {
    if (count-- == 0U)
 800b964:	1e53      	subs	r3, r2, #1
 800b966:	b14a      	cbz	r2, 800b97c <SDMMC_CmdBlockLength+0x44>
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800b968:	4947      	ldr	r1, [pc, #284]	; (800ba88 <SDMMC_CmdBlockLength+0x150>)
    sta_reg = SDMMCx->STA;
 800b96a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800b96e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800b970:	420a      	tst	r2, r1
 800b972:	d001      	beq.n	800b978 <SDMMC_CmdBlockLength+0x40>
 800b974:	0492      	lsls	r2, r2, #18
 800b976:	d504      	bpl.n	800b982 <SDMMC_CmdBlockLength+0x4a>
    if (count-- == 0U)
 800b978:	1c58      	adds	r0, r3, #1
 800b97a:	d1f6      	bne.n	800b96a <SDMMC_CmdBlockLength+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800b97c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800b980:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b982:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800b986:	0758      	lsls	r0, r3, #29
 800b988:	d445      	bmi.n	800ba16 <SDMMC_CmdBlockLength+0xde>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b98a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800b98e:	f010 0001 	ands.w	r0, r0, #1
 800b992:	d137      	bne.n	800ba04 <SDMMC_CmdBlockLength+0xcc>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b994:	4b3d      	ldr	r3, [pc, #244]	; (800ba8c <SDMMC_CmdBlockLength+0x154>)
 800b996:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800b99a:	f8dc 3010 	ldr.w	r3, [ip, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b99e:	b2db      	uxtb	r3, r3
 800b9a0:	2b10      	cmp	r3, #16
 800b9a2:	d136      	bne.n	800ba12 <SDMMC_CmdBlockLength+0xda>
  return (*(__IO uint32_t *) tmp);
 800b9a4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b9a8:	4839      	ldr	r0, [pc, #228]	; (800ba90 <SDMMC_CmdBlockLength+0x158>)
 800b9aa:	4018      	ands	r0, r3
 800b9ac:	2800      	cmp	r0, #0
 800b9ae:	d02f      	beq.n	800ba10 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	db35      	blt.n	800ba20 <SDMMC_CmdBlockLength+0xe8>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b9b4:	0059      	lsls	r1, r3, #1
 800b9b6:	d436      	bmi.n	800ba26 <SDMMC_CmdBlockLength+0xee>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b9b8:	009a      	lsls	r2, r3, #2
 800b9ba:	d436      	bmi.n	800ba2a <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b9bc:	00d9      	lsls	r1, r3, #3
 800b9be:	d436      	bmi.n	800ba2e <SDMMC_CmdBlockLength+0xf6>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b9c0:	011a      	lsls	r2, r3, #4
 800b9c2:	d437      	bmi.n	800ba34 <SDMMC_CmdBlockLength+0xfc>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b9c4:	0159      	lsls	r1, r3, #5
 800b9c6:	d438      	bmi.n	800ba3a <SDMMC_CmdBlockLength+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b9c8:	01da      	lsls	r2, r3, #7
 800b9ca:	d439      	bmi.n	800ba40 <SDMMC_CmdBlockLength+0x108>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b9cc:	0219      	lsls	r1, r3, #8
 800b9ce:	d43a      	bmi.n	800ba46 <SDMMC_CmdBlockLength+0x10e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b9d0:	025a      	lsls	r2, r3, #9
 800b9d2:	d43b      	bmi.n	800ba4c <SDMMC_CmdBlockLength+0x114>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b9d4:	0299      	lsls	r1, r3, #10
 800b9d6:	d445      	bmi.n	800ba64 <SDMMC_CmdBlockLength+0x12c>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b9d8:	02da      	lsls	r2, r3, #11
 800b9da:	d440      	bmi.n	800ba5e <SDMMC_CmdBlockLength+0x126>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b9dc:	0359      	lsls	r1, r3, #13
 800b9de:	d43b      	bmi.n	800ba58 <SDMMC_CmdBlockLength+0x120>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b9e0:	039a      	lsls	r2, r3, #14
 800b9e2:	d436      	bmi.n	800ba52 <SDMMC_CmdBlockLength+0x11a>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b9e4:	03d9      	lsls	r1, r3, #15
 800b9e6:	d446      	bmi.n	800ba76 <SDMMC_CmdBlockLength+0x13e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b9e8:	041a      	lsls	r2, r3, #16
 800b9ea:	d441      	bmi.n	800ba70 <SDMMC_CmdBlockLength+0x138>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b9ec:	0459      	lsls	r1, r3, #17
 800b9ee:	d43c      	bmi.n	800ba6a <SDMMC_CmdBlockLength+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b9f0:	049a      	lsls	r2, r3, #18
 800b9f2:	d40b      	bmi.n	800ba0c <SDMMC_CmdBlockLength+0xd4>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b9f4:	f013 0f08 	tst.w	r3, #8
 800b9f8:	bf14      	ite	ne
 800b9fa:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800b9fe:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ba02:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba04:	2301      	movs	r3, #1
 800ba06:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba0a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800ba0c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800ba10:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba12:	2001      	movs	r0, #1
 800ba14:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba16:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba18:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba1a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba1e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ba20:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ba24:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ba26:	2040      	movs	r0, #64	; 0x40
 800ba28:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ba2a:	2080      	movs	r0, #128	; 0x80
 800ba2c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ba2e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ba32:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ba34:	f44f 7000 	mov.w	r0, #512	; 0x200
 800ba38:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ba3a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ba3e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ba40:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ba44:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ba46:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ba4a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ba4c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ba50:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800ba52:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ba56:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ba58:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ba5c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800ba5e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ba62:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ba64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ba68:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800ba6a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800ba6e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800ba70:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800ba74:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800ba76:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800ba7a:	4770      	bx	lr
 800ba7c:	200008bc 	.word	0x200008bc
 800ba80:	10624dd3 	.word	0x10624dd3
 800ba84:	fffee0c0 	.word	0xfffee0c0
 800ba88:	00200045 	.word	0x00200045
 800ba8c:	002000c5 	.word	0x002000c5
 800ba90:	fdffe008 	.word	0xfdffe008

0800ba94 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba94:	4a50      	ldr	r2, [pc, #320]	; (800bbd8 <SDMMC_CmdReadSingleBlock+0x144>)
{
 800ba96:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ba98:	4b50      	ldr	r3, [pc, #320]	; (800bbdc <SDMMC_CmdReadSingleBlock+0x148>)
 800ba9a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ba9c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800baa0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800baa4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800baa8:	484d      	ldr	r0, [pc, #308]	; (800bbe0 <SDMMC_CmdReadSingleBlock+0x14c>)
 800baaa:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800baae:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bab0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bab2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bab6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bab8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800babc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bac0:	1e53      	subs	r3, r2, #1
 800bac2:	b14a      	cbz	r2, 800bad8 <SDMMC_CmdReadSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bac4:	4947      	ldr	r1, [pc, #284]	; (800bbe4 <SDMMC_CmdReadSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800bac6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800baca:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bacc:	420a      	tst	r2, r1
 800bace:	d001      	beq.n	800bad4 <SDMMC_CmdReadSingleBlock+0x40>
 800bad0:	0492      	lsls	r2, r2, #18
 800bad2:	d504      	bpl.n	800bade <SDMMC_CmdReadSingleBlock+0x4a>
    if (count-- == 0U)
 800bad4:	1c58      	adds	r0, r3, #1
 800bad6:	d1f6      	bne.n	800bac6 <SDMMC_CmdReadSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bad8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800badc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bade:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bae2:	0758      	lsls	r0, r3, #29
 800bae4:	d445      	bmi.n	800bb72 <SDMMC_CmdReadSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bae6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800baea:	f010 0001 	ands.w	r0, r0, #1
 800baee:	d137      	bne.n	800bb60 <SDMMC_CmdReadSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800baf0:	4b3d      	ldr	r3, [pc, #244]	; (800bbe8 <SDMMC_CmdReadSingleBlock+0x154>)
 800baf2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800baf6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bafa:	b2db      	uxtb	r3, r3
 800bafc:	2b11      	cmp	r3, #17
 800bafe:	d136      	bne.n	800bb6e <SDMMC_CmdReadSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800bb00:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bb04:	4839      	ldr	r0, [pc, #228]	; (800bbec <SDMMC_CmdReadSingleBlock+0x158>)
 800bb06:	4018      	ands	r0, r3
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d02f      	beq.n	800bb6c <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	db35      	blt.n	800bb7c <SDMMC_CmdReadSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bb10:	0059      	lsls	r1, r3, #1
 800bb12:	d436      	bmi.n	800bb82 <SDMMC_CmdReadSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bb14:	009a      	lsls	r2, r3, #2
 800bb16:	d436      	bmi.n	800bb86 <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bb18:	00d9      	lsls	r1, r3, #3
 800bb1a:	d436      	bmi.n	800bb8a <SDMMC_CmdReadSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bb1c:	011a      	lsls	r2, r3, #4
 800bb1e:	d437      	bmi.n	800bb90 <SDMMC_CmdReadSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bb20:	0159      	lsls	r1, r3, #5
 800bb22:	d438      	bmi.n	800bb96 <SDMMC_CmdReadSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb24:	01da      	lsls	r2, r3, #7
 800bb26:	d439      	bmi.n	800bb9c <SDMMC_CmdReadSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb28:	0219      	lsls	r1, r3, #8
 800bb2a:	d43a      	bmi.n	800bba2 <SDMMC_CmdReadSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb2c:	025a      	lsls	r2, r3, #9
 800bb2e:	d43b      	bmi.n	800bba8 <SDMMC_CmdReadSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb30:	0299      	lsls	r1, r3, #10
 800bb32:	d445      	bmi.n	800bbc0 <SDMMC_CmdReadSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb34:	02da      	lsls	r2, r3, #11
 800bb36:	d440      	bmi.n	800bbba <SDMMC_CmdReadSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb38:	0359      	lsls	r1, r3, #13
 800bb3a:	d43b      	bmi.n	800bbb4 <SDMMC_CmdReadSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb3c:	039a      	lsls	r2, r3, #14
 800bb3e:	d436      	bmi.n	800bbae <SDMMC_CmdReadSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb40:	03d9      	lsls	r1, r3, #15
 800bb42:	d446      	bmi.n	800bbd2 <SDMMC_CmdReadSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb44:	041a      	lsls	r2, r3, #16
 800bb46:	d441      	bmi.n	800bbcc <SDMMC_CmdReadSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb48:	0459      	lsls	r1, r3, #17
 800bb4a:	d43c      	bmi.n	800bbc6 <SDMMC_CmdReadSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bb4c:	049a      	lsls	r2, r3, #18
 800bb4e:	d40b      	bmi.n	800bb68 <SDMMC_CmdReadSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bb50:	f013 0f08 	tst.w	r3, #8
 800bb54:	bf14      	ite	ne
 800bb56:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bb5a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bb5e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bb60:	2301      	movs	r3, #1
 800bb62:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb66:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bb68:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bb6c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bb6e:	2001      	movs	r0, #1
 800bb70:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb72:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb74:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bb76:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bb7a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bb7c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bb80:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bb82:	2040      	movs	r0, #64	; 0x40
 800bb84:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bb86:	2080      	movs	r0, #128	; 0x80
 800bb88:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bb8a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bb8e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bb90:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb94:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bb96:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bb9a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb9c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bba0:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bba2:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bba6:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bba8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bbac:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bbae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bbb2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bbb4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bbb8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bbba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bbbe:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bbc0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bbc4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bbc6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bbca:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bbcc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bbd0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bbd2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bbd6:	4770      	bx	lr
 800bbd8:	200008bc 	.word	0x200008bc
 800bbdc:	10624dd3 	.word	0x10624dd3
 800bbe0:	fffee0c0 	.word	0xfffee0c0
 800bbe4:	00200045 	.word	0x00200045
 800bbe8:	002000c5 	.word	0x002000c5
 800bbec:	fdffe008 	.word	0xfdffe008

0800bbf0 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbf0:	4a50      	ldr	r2, [pc, #320]	; (800bd34 <SDMMC_CmdReadMultiBlock+0x144>)
{
 800bbf2:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbf4:	4b50      	ldr	r3, [pc, #320]	; (800bd38 <SDMMC_CmdReadMultiBlock+0x148>)
 800bbf6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bbf8:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bbfc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc00:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bc04:	484d      	ldr	r0, [pc, #308]	; (800bd3c <SDMMC_CmdReadMultiBlock+0x14c>)
 800bc06:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bc0a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc0c:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bc0e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc12:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bc14:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bc18:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bc1c:	1e53      	subs	r3, r2, #1
 800bc1e:	b14a      	cbz	r2, 800bc34 <SDMMC_CmdReadMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bc20:	4947      	ldr	r1, [pc, #284]	; (800bd40 <SDMMC_CmdReadMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800bc22:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bc26:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bc28:	420a      	tst	r2, r1
 800bc2a:	d001      	beq.n	800bc30 <SDMMC_CmdReadMultiBlock+0x40>
 800bc2c:	0492      	lsls	r2, r2, #18
 800bc2e:	d504      	bpl.n	800bc3a <SDMMC_CmdReadMultiBlock+0x4a>
    if (count-- == 0U)
 800bc30:	1c58      	adds	r0, r3, #1
 800bc32:	d1f6      	bne.n	800bc22 <SDMMC_CmdReadMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bc34:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bc38:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc3a:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bc3e:	0758      	lsls	r0, r3, #29
 800bc40:	d445      	bmi.n	800bcce <SDMMC_CmdReadMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc42:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bc46:	f010 0001 	ands.w	r0, r0, #1
 800bc4a:	d137      	bne.n	800bcbc <SDMMC_CmdReadMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc4c:	4b3d      	ldr	r3, [pc, #244]	; (800bd44 <SDMMC_CmdReadMultiBlock+0x154>)
 800bc4e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bc52:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b12      	cmp	r3, #18
 800bc5a:	d136      	bne.n	800bcca <SDMMC_CmdReadMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800bc5c:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bc60:	4839      	ldr	r0, [pc, #228]	; (800bd48 <SDMMC_CmdReadMultiBlock+0x158>)
 800bc62:	4018      	ands	r0, r3
 800bc64:	2800      	cmp	r0, #0
 800bc66:	d02f      	beq.n	800bcc8 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	db35      	blt.n	800bcd8 <SDMMC_CmdReadMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bc6c:	0059      	lsls	r1, r3, #1
 800bc6e:	d436      	bmi.n	800bcde <SDMMC_CmdReadMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bc70:	009a      	lsls	r2, r3, #2
 800bc72:	d436      	bmi.n	800bce2 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bc74:	00d9      	lsls	r1, r3, #3
 800bc76:	d436      	bmi.n	800bce6 <SDMMC_CmdReadMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bc78:	011a      	lsls	r2, r3, #4
 800bc7a:	d437      	bmi.n	800bcec <SDMMC_CmdReadMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bc7c:	0159      	lsls	r1, r3, #5
 800bc7e:	d438      	bmi.n	800bcf2 <SDMMC_CmdReadMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bc80:	01da      	lsls	r2, r3, #7
 800bc82:	d439      	bmi.n	800bcf8 <SDMMC_CmdReadMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bc84:	0219      	lsls	r1, r3, #8
 800bc86:	d43a      	bmi.n	800bcfe <SDMMC_CmdReadMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bc88:	025a      	lsls	r2, r3, #9
 800bc8a:	d43b      	bmi.n	800bd04 <SDMMC_CmdReadMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bc8c:	0299      	lsls	r1, r3, #10
 800bc8e:	d445      	bmi.n	800bd1c <SDMMC_CmdReadMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bc90:	02da      	lsls	r2, r3, #11
 800bc92:	d440      	bmi.n	800bd16 <SDMMC_CmdReadMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bc94:	0359      	lsls	r1, r3, #13
 800bc96:	d43b      	bmi.n	800bd10 <SDMMC_CmdReadMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bc98:	039a      	lsls	r2, r3, #14
 800bc9a:	d436      	bmi.n	800bd0a <SDMMC_CmdReadMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bc9c:	03d9      	lsls	r1, r3, #15
 800bc9e:	d446      	bmi.n	800bd2e <SDMMC_CmdReadMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bca0:	041a      	lsls	r2, r3, #16
 800bca2:	d441      	bmi.n	800bd28 <SDMMC_CmdReadMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bca4:	0459      	lsls	r1, r3, #17
 800bca6:	d43c      	bmi.n	800bd22 <SDMMC_CmdReadMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bca8:	049a      	lsls	r2, r3, #18
 800bcaa:	d40b      	bmi.n	800bcc4 <SDMMC_CmdReadMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bcac:	f013 0f08 	tst.w	r3, #8
 800bcb0:	bf14      	ite	ne
 800bcb2:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bcb6:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bcba:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bcbc:	2301      	movs	r3, #1
 800bcbe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcc2:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bcc4:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bcc8:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bcca:	2001      	movs	r0, #1
 800bccc:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcce:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcd0:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bcd2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcd6:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bcd8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bcdc:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bcde:	2040      	movs	r0, #64	; 0x40
 800bce0:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bce2:	2080      	movs	r0, #128	; 0x80
 800bce4:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bce6:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bcea:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bcec:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bcf0:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bcf2:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bcf6:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bcf8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bcfc:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bcfe:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bd02:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bd04:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bd08:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bd0a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bd0e:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bd10:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bd14:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bd16:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bd1a:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bd1c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bd20:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bd22:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bd26:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bd28:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bd2c:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bd2e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bd32:	4770      	bx	lr
 800bd34:	200008bc 	.word	0x200008bc
 800bd38:	10624dd3 	.word	0x10624dd3
 800bd3c:	fffee0c0 	.word	0xfffee0c0
 800bd40:	00200045 	.word	0x00200045
 800bd44:	002000c5 	.word	0x002000c5
 800bd48:	fdffe008 	.word	0xfdffe008

0800bd4c <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd4c:	4a50      	ldr	r2, [pc, #320]	; (800be90 <SDMMC_CmdWriteSingleBlock+0x144>)
{
 800bd4e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd50:	4b50      	ldr	r3, [pc, #320]	; (800be94 <SDMMC_CmdWriteSingleBlock+0x148>)
 800bd52:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800bd54:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd58:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd5c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bd60:	484d      	ldr	r0, [pc, #308]	; (800be98 <SDMMC_CmdWriteSingleBlock+0x14c>)
 800bd62:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd66:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd68:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd6a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd6e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bd70:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bd74:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bd78:	1e53      	subs	r3, r2, #1
 800bd7a:	b14a      	cbz	r2, 800bd90 <SDMMC_CmdWriteSingleBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bd7c:	4947      	ldr	r1, [pc, #284]	; (800be9c <SDMMC_CmdWriteSingleBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800bd7e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bd82:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bd84:	420a      	tst	r2, r1
 800bd86:	d001      	beq.n	800bd8c <SDMMC_CmdWriteSingleBlock+0x40>
 800bd88:	0492      	lsls	r2, r2, #18
 800bd8a:	d504      	bpl.n	800bd96 <SDMMC_CmdWriteSingleBlock+0x4a>
    if (count-- == 0U)
 800bd8c:	1c58      	adds	r0, r3, #1
 800bd8e:	d1f6      	bne.n	800bd7e <SDMMC_CmdWriteSingleBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800bd90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bd94:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd96:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bd9a:	0758      	lsls	r0, r3, #29
 800bd9c:	d445      	bmi.n	800be2a <SDMMC_CmdWriteSingleBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd9e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800bda2:	f010 0001 	ands.w	r0, r0, #1
 800bda6:	d137      	bne.n	800be18 <SDMMC_CmdWriteSingleBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bda8:	4b3d      	ldr	r3, [pc, #244]	; (800bea0 <SDMMC_CmdWriteSingleBlock+0x154>)
 800bdaa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bdae:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bdb2:	b2db      	uxtb	r3, r3
 800bdb4:	2b18      	cmp	r3, #24
 800bdb6:	d136      	bne.n	800be26 <SDMMC_CmdWriteSingleBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800bdb8:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bdbc:	4839      	ldr	r0, [pc, #228]	; (800bea4 <SDMMC_CmdWriteSingleBlock+0x158>)
 800bdbe:	4018      	ands	r0, r3
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d02f      	beq.n	800be24 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	db35      	blt.n	800be34 <SDMMC_CmdWriteSingleBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bdc8:	0059      	lsls	r1, r3, #1
 800bdca:	d436      	bmi.n	800be3a <SDMMC_CmdWriteSingleBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bdcc:	009a      	lsls	r2, r3, #2
 800bdce:	d436      	bmi.n	800be3e <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bdd0:	00d9      	lsls	r1, r3, #3
 800bdd2:	d436      	bmi.n	800be42 <SDMMC_CmdWriteSingleBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bdd4:	011a      	lsls	r2, r3, #4
 800bdd6:	d437      	bmi.n	800be48 <SDMMC_CmdWriteSingleBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bdd8:	0159      	lsls	r1, r3, #5
 800bdda:	d438      	bmi.n	800be4e <SDMMC_CmdWriteSingleBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bddc:	01da      	lsls	r2, r3, #7
 800bdde:	d439      	bmi.n	800be54 <SDMMC_CmdWriteSingleBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bde0:	0219      	lsls	r1, r3, #8
 800bde2:	d43a      	bmi.n	800be5a <SDMMC_CmdWriteSingleBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bde4:	025a      	lsls	r2, r3, #9
 800bde6:	d43b      	bmi.n	800be60 <SDMMC_CmdWriteSingleBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bde8:	0299      	lsls	r1, r3, #10
 800bdea:	d445      	bmi.n	800be78 <SDMMC_CmdWriteSingleBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bdec:	02da      	lsls	r2, r3, #11
 800bdee:	d440      	bmi.n	800be72 <SDMMC_CmdWriteSingleBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bdf0:	0359      	lsls	r1, r3, #13
 800bdf2:	d43b      	bmi.n	800be6c <SDMMC_CmdWriteSingleBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bdf4:	039a      	lsls	r2, r3, #14
 800bdf6:	d436      	bmi.n	800be66 <SDMMC_CmdWriteSingleBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bdf8:	03d9      	lsls	r1, r3, #15
 800bdfa:	d446      	bmi.n	800be8a <SDMMC_CmdWriteSingleBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bdfc:	041a      	lsls	r2, r3, #16
 800bdfe:	d441      	bmi.n	800be84 <SDMMC_CmdWriteSingleBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800be00:	0459      	lsls	r1, r3, #17
 800be02:	d43c      	bmi.n	800be7e <SDMMC_CmdWriteSingleBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800be04:	049a      	lsls	r2, r3, #18
 800be06:	d40b      	bmi.n	800be20 <SDMMC_CmdWriteSingleBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800be08:	f013 0f08 	tst.w	r3, #8
 800be0c:	bf14      	ite	ne
 800be0e:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800be12:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800be16:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be18:	2301      	movs	r3, #1
 800be1a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be1e:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800be20:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800be24:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be26:	2001      	movs	r0, #1
 800be28:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be2a:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be2c:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be2e:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be32:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800be34:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800be38:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800be3a:	2040      	movs	r0, #64	; 0x40
 800be3c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800be3e:	2080      	movs	r0, #128	; 0x80
 800be40:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800be42:	f44f 7080 	mov.w	r0, #256	; 0x100
 800be46:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800be48:	f44f 7000 	mov.w	r0, #512	; 0x200
 800be4c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800be4e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800be52:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800be54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800be58:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800be5a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800be5e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800be60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800be64:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800be66:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800be6a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800be6c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800be70:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800be72:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800be76:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800be78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800be7c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800be7e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800be82:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800be84:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800be88:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800be8a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800be8e:	4770      	bx	lr
 800be90:	200008bc 	.word	0x200008bc
 800be94:	10624dd3 	.word	0x10624dd3
 800be98:	fffee0c0 	.word	0xfffee0c0
 800be9c:	00200045 	.word	0x00200045
 800bea0:	002000c5 	.word	0x002000c5
 800bea4:	fdffe008 	.word	0xfdffe008

0800bea8 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bea8:	4a50      	ldr	r2, [pc, #320]	; (800bfec <SDMMC_CmdWriteMultiBlock+0x144>)
{
 800beaa:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800beac:	4b50      	ldr	r3, [pc, #320]	; (800bff0 <SDMMC_CmdWriteMultiBlock+0x148>)
 800beae:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800beb0:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800beb4:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800beb8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800bebc:	484d      	ldr	r0, [pc, #308]	; (800bff4 <SDMMC_CmdWriteMultiBlock+0x14c>)
 800bebe:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bec2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bec4:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800bec6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800beca:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800becc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800bed0:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800bed4:	1e53      	subs	r3, r2, #1
 800bed6:	b14a      	cbz	r2, 800beec <SDMMC_CmdWriteMultiBlock+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800bed8:	4947      	ldr	r1, [pc, #284]	; (800bff8 <SDMMC_CmdWriteMultiBlock+0x150>)
    sta_reg = SDMMCx->STA;
 800beda:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800bede:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800bee0:	420a      	tst	r2, r1
 800bee2:	d001      	beq.n	800bee8 <SDMMC_CmdWriteMultiBlock+0x40>
 800bee4:	0492      	lsls	r2, r2, #18
 800bee6:	d504      	bpl.n	800bef2 <SDMMC_CmdWriteMultiBlock+0x4a>
    if (count-- == 0U)
 800bee8:	1c58      	adds	r0, r3, #1
 800beea:	d1f6      	bne.n	800beda <SDMMC_CmdWriteMultiBlock+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800beec:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800bef0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bef2:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800bef6:	0758      	lsls	r0, r3, #29
 800bef8:	d445      	bmi.n	800bf86 <SDMMC_CmdWriteMultiBlock+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800befa:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800befe:	f010 0001 	ands.w	r0, r0, #1
 800bf02:	d137      	bne.n	800bf74 <SDMMC_CmdWriteMultiBlock+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bf04:	4b3d      	ldr	r3, [pc, #244]	; (800bffc <SDMMC_CmdWriteMultiBlock+0x154>)
 800bf06:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800bf0a:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bf0e:	b2db      	uxtb	r3, r3
 800bf10:	2b19      	cmp	r3, #25
 800bf12:	d136      	bne.n	800bf82 <SDMMC_CmdWriteMultiBlock+0xda>
  return (*(__IO uint32_t *) tmp);
 800bf14:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800bf18:	4839      	ldr	r0, [pc, #228]	; (800c000 <SDMMC_CmdWriteMultiBlock+0x158>)
 800bf1a:	4018      	ands	r0, r3
 800bf1c:	2800      	cmp	r0, #0
 800bf1e:	d02f      	beq.n	800bf80 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	db35      	blt.n	800bf90 <SDMMC_CmdWriteMultiBlock+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bf24:	0059      	lsls	r1, r3, #1
 800bf26:	d436      	bmi.n	800bf96 <SDMMC_CmdWriteMultiBlock+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bf28:	009a      	lsls	r2, r3, #2
 800bf2a:	d436      	bmi.n	800bf9a <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bf2c:	00d9      	lsls	r1, r3, #3
 800bf2e:	d436      	bmi.n	800bf9e <SDMMC_CmdWriteMultiBlock+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bf30:	011a      	lsls	r2, r3, #4
 800bf32:	d437      	bmi.n	800bfa4 <SDMMC_CmdWriteMultiBlock+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800bf34:	0159      	lsls	r1, r3, #5
 800bf36:	d438      	bmi.n	800bfaa <SDMMC_CmdWriteMultiBlock+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bf38:	01da      	lsls	r2, r3, #7
 800bf3a:	d439      	bmi.n	800bfb0 <SDMMC_CmdWriteMultiBlock+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bf3c:	0219      	lsls	r1, r3, #8
 800bf3e:	d43a      	bmi.n	800bfb6 <SDMMC_CmdWriteMultiBlock+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bf40:	025a      	lsls	r2, r3, #9
 800bf42:	d43b      	bmi.n	800bfbc <SDMMC_CmdWriteMultiBlock+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bf44:	0299      	lsls	r1, r3, #10
 800bf46:	d445      	bmi.n	800bfd4 <SDMMC_CmdWriteMultiBlock+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bf48:	02da      	lsls	r2, r3, #11
 800bf4a:	d440      	bmi.n	800bfce <SDMMC_CmdWriteMultiBlock+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bf4c:	0359      	lsls	r1, r3, #13
 800bf4e:	d43b      	bmi.n	800bfc8 <SDMMC_CmdWriteMultiBlock+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bf50:	039a      	lsls	r2, r3, #14
 800bf52:	d436      	bmi.n	800bfc2 <SDMMC_CmdWriteMultiBlock+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bf54:	03d9      	lsls	r1, r3, #15
 800bf56:	d446      	bmi.n	800bfe6 <SDMMC_CmdWriteMultiBlock+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bf58:	041a      	lsls	r2, r3, #16
 800bf5a:	d441      	bmi.n	800bfe0 <SDMMC_CmdWriteMultiBlock+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bf5c:	0459      	lsls	r1, r3, #17
 800bf5e:	d43c      	bmi.n	800bfda <SDMMC_CmdWriteMultiBlock+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bf60:	049a      	lsls	r2, r3, #18
 800bf62:	d40b      	bmi.n	800bf7c <SDMMC_CmdWriteMultiBlock+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bf64:	f013 0f08 	tst.w	r3, #8
 800bf68:	bf14      	ite	ne
 800bf6a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800bf6e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800bf72:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bf74:	2301      	movs	r3, #1
 800bf76:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf7a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800bf7c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800bf80:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bf82:	2001      	movs	r0, #1
 800bf84:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf86:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf88:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bf8a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bf8e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bf90:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800bf94:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bf96:	2040      	movs	r0, #64	; 0x40
 800bf98:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bf9a:	2080      	movs	r0, #128	; 0x80
 800bf9c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800bf9e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800bfa2:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800bfa4:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bfa8:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bfaa:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bfae:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bfb0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bfb4:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bfb6:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800bfba:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bfbc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800bfc0:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bfc2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800bfc6:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bfc8:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800bfcc:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800bfce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bfd2:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bfd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800bfd8:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bfda:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800bfde:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bfe0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800bfe4:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bfe6:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800bfea:	4770      	bx	lr
 800bfec:	200008bc 	.word	0x200008bc
 800bff0:	10624dd3 	.word	0x10624dd3
 800bff4:	fffee0c0 	.word	0xfffee0c0
 800bff8:	00200045 	.word	0x00200045
 800bffc:	002000c5 	.word	0x002000c5
 800c000:	fdffe008 	.word	0xfdffe008

0800c004 <SDMMC_CmdStopTransfer>:
{
 800c004:	b430      	push	{r4, r5}
 800c006:	4601      	mov	r1, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c008:	4b7b      	ldr	r3, [pc, #492]	; (800c1f8 <SDMMC_CmdStopTransfer+0x1f4>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c00a:	68c0      	ldr	r0, [r0, #12]
  SDMMCx->ARG = Command->Argument;
 800c00c:	2500      	movs	r5, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c00e:	4c7b      	ldr	r4, [pc, #492]	; (800c1fc <SDMMC_CmdStopTransfer+0x1f8>)
 800c010:	681a      	ldr	r2, [r3, #0]
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c012:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c016:	4b7a      	ldr	r3, [pc, #488]	; (800c200 <SDMMC_CmdStopTransfer+0x1fc>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800c018:	60c8      	str	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c01a:	fba4 4202 	umull	r4, r2, r4, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c01e:	68c8      	ldr	r0, [r1, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c020:	4c78      	ldr	r4, [pc, #480]	; (800c204 <SDMMC_CmdStopTransfer+0x200>)
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c022:	f020 0040 	bic.w	r0, r0, #64	; 0x40
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c026:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800c028:	60c8      	str	r0, [r1, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c02a:	f241 100c 	movw	r0, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 800c02e:	608d      	str	r5, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c030:	fb04 f202 	mul.w	r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c034:	68cc      	ldr	r4, [r1, #12]
 800c036:	4023      	ands	r3, r4
 800c038:	4318      	orrs	r0, r3
 800c03a:	60c8      	str	r0, [r1, #12]
    if (count-- == 0U)
 800c03c:	b14a      	cbz	r2, 800c052 <SDMMC_CmdStopTransfer+0x4e>
 800c03e:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c040:	4871      	ldr	r0, [pc, #452]	; (800c208 <SDMMC_CmdStopTransfer+0x204>)
    sta_reg = SDMMCx->STA;
 800c042:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c044:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c046:	4202      	tst	r2, r0
 800c048:	d001      	beq.n	800c04e <SDMMC_CmdStopTransfer+0x4a>
 800c04a:	0492      	lsls	r2, r2, #18
 800c04c:	d509      	bpl.n	800c062 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 800c04e:	1c5c      	adds	r4, r3, #1
 800c050:	d1f7      	bne.n	800c042 <SDMMC_CmdStopTransfer+0x3e>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c052:	68cb      	ldr	r3, [r1, #12]
 800c054:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c05c:	60cb      	str	r3, [r1, #12]
}
 800c05e:	bc30      	pop	{r4, r5}
 800c060:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c062:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c064:	075b      	lsls	r3, r3, #29
 800c066:	d452      	bmi.n	800c10e <SDMMC_CmdStopTransfer+0x10a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c068:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c06a:	f010 0001 	ands.w	r0, r0, #1
 800c06e:	d13b      	bne.n	800c0e8 <SDMMC_CmdStopTransfer+0xe4>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c070:	4b66      	ldr	r3, [pc, #408]	; (800c20c <SDMMC_CmdStopTransfer+0x208>)
 800c072:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c074:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c076:	b2db      	uxtb	r3, r3
 800c078:	2b0c      	cmp	r3, #12
 800c07a:	d142      	bne.n	800c102 <SDMMC_CmdStopTransfer+0xfe>
  return (*(__IO uint32_t *) tmp);
 800c07c:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c07e:	4a64      	ldr	r2, [pc, #400]	; (800c210 <SDMMC_CmdStopTransfer+0x20c>)
 800c080:	401a      	ands	r2, r3
 800c082:	2a00      	cmp	r2, #0
 800c084:	d037      	beq.n	800c0f6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c086:	2b00      	cmp	r3, #0
 800c088:	db35      	blt.n	800c0f6 <SDMMC_CmdStopTransfer+0xf2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c08a:	005d      	lsls	r5, r3, #1
 800c08c:	d446      	bmi.n	800c11c <SDMMC_CmdStopTransfer+0x118>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c08e:	009c      	lsls	r4, r3, #2
 800c090:	d44a      	bmi.n	800c128 <SDMMC_CmdStopTransfer+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c092:	00d8      	lsls	r0, r3, #3
 800c094:	d44e      	bmi.n	800c134 <SDMMC_CmdStopTransfer+0x130>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c096:	011a      	lsls	r2, r3, #4
 800c098:	d453      	bmi.n	800c142 <SDMMC_CmdStopTransfer+0x13e>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c09a:	015d      	lsls	r5, r3, #5
 800c09c:	d458      	bmi.n	800c150 <SDMMC_CmdStopTransfer+0x14c>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c09e:	01dc      	lsls	r4, r3, #7
 800c0a0:	d464      	bmi.n	800c16c <SDMMC_CmdStopTransfer+0x168>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c0a2:	0218      	lsls	r0, r3, #8
 800c0a4:	d45b      	bmi.n	800c15e <SDMMC_CmdStopTransfer+0x15a>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c0a6:	025a      	lsls	r2, r3, #9
 800c0a8:	d46e      	bmi.n	800c188 <SDMMC_CmdStopTransfer+0x184>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c0aa:	029d      	lsls	r5, r3, #10
 800c0ac:	d465      	bmi.n	800c17a <SDMMC_CmdStopTransfer+0x176>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c0ae:	02dc      	lsls	r4, r3, #11
 800c0b0:	d47f      	bmi.n	800c1b2 <SDMMC_CmdStopTransfer+0x1ae>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c0b2:	0358      	lsls	r0, r3, #13
 800c0b4:	d476      	bmi.n	800c1a4 <SDMMC_CmdStopTransfer+0x1a0>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c0b6:	039a      	lsls	r2, r3, #14
 800c0b8:	d46d      	bmi.n	800c196 <SDMMC_CmdStopTransfer+0x192>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c0ba:	03dd      	lsls	r5, r3, #15
 800c0bc:	f100 8095 	bmi.w	800c1ea <SDMMC_CmdStopTransfer+0x1e6>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c0c0:	041c      	lsls	r4, r3, #16
 800c0c2:	f100 8084 	bmi.w	800c1ce <SDMMC_CmdStopTransfer+0x1ca>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c0c6:	0458      	lsls	r0, r3, #17
 800c0c8:	d47a      	bmi.n	800c1c0 <SDMMC_CmdStopTransfer+0x1bc>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c0ca:	049a      	lsls	r2, r3, #18
 800c0cc:	f100 8086 	bmi.w	800c1dc <SDMMC_CmdStopTransfer+0x1d8>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800c0d0:	f013 0f08 	tst.w	r3, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c0d4:	68cb      	ldr	r3, [r1, #12]
 800c0d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800c0da:	bf14      	ite	ne
 800c0dc:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c0e0:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c0e4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c0e6:	e7ba      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	638b      	str	r3, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c0ec:	68cb      	ldr	r3, [r1, #12]
 800c0ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0f2:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c0f4:	e7b3      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c0f6:	68cb      	ldr	r3, [r1, #12]
 800c0f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c0fc:	60cb      	str	r3, [r1, #12]
}
 800c0fe:	bc30      	pop	{r4, r5}
 800c100:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c102:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c104:	2001      	movs	r0, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c106:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c10a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c10c:	e7a7      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c10e:	2004      	movs	r0, #4
 800c110:	6388      	str	r0, [r1, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c112:	68cb      	ldr	r3, [r1, #12]
 800c114:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c118:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c11a:	e7a0      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c11c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c11e:	2040      	movs	r0, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c124:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c126:	e79a      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c128:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c12a:	2080      	movs	r0, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c12c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c130:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c132:	e794      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c134:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c136:	f44f 7080 	mov.w	r0, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c13a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c13e:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c140:	e78d      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c142:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c144:	f44f 7000 	mov.w	r0, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c148:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c14c:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c14e:	e786      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c150:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c152:	f44f 6080 	mov.w	r0, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c156:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c15a:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c15c:	e77f      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c15e:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c160:	f44f 5080 	mov.w	r0, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c168:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c16a:	e778      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c16c:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c16e:	f44f 6000 	mov.w	r0, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c172:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c176:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c178:	e771      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c17a:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c17c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c184:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c186:	e76a      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c188:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c18a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c18e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c192:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c194:	e763      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c196:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c198:	f44f 2080 	mov.w	r0, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c19c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1a0:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1a2:	e75c      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1a4:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c1a6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ae:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1b0:	e755      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1b2:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CC_ERR;
 800c1b4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1bc:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1be:	e74e      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1c0:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c1c2:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1ca:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1cc:	e747      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1ce:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c1d0:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1d8:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1da:	e740      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1dc:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_ERASE_RESET;
 800c1de:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1e6:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1e8:	e739      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1ea:	68cb      	ldr	r3, [r1, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c1ec:	f44f 2000 	mov.w	r0, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800c1f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1f4:	60cb      	str	r3, [r1, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800c1f6:	e732      	b.n	800c05e <SDMMC_CmdStopTransfer+0x5a>
 800c1f8:	200008bc 	.word	0x200008bc
 800c1fc:	10624dd3 	.word	0x10624dd3
 800c200:	fffee0c0 	.word	0xfffee0c0
 800c204:	05f5e100 	.word	0x05f5e100
 800c208:	00200045 	.word	0x00200045
 800c20c:	002000c5 	.word	0x002000c5
 800c210:	fdffe008 	.word	0xfdffe008

0800c214 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c214:	4a50      	ldr	r2, [pc, #320]	; (800c358 <SDMMC_CmdSelDesel+0x144>)
{
 800c216:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c218:	4b50      	ldr	r3, [pc, #320]	; (800c35c <SDMMC_CmdSelDesel+0x148>)
 800c21a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c21c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c220:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c224:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c228:	484d      	ldr	r0, [pc, #308]	; (800c360 <SDMMC_CmdSelDesel+0x14c>)
 800c22a:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c22e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c230:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c232:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c236:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c238:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c23c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c240:	1e53      	subs	r3, r2, #1
 800c242:	b14a      	cbz	r2, 800c258 <SDMMC_CmdSelDesel+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c244:	4947      	ldr	r1, [pc, #284]	; (800c364 <SDMMC_CmdSelDesel+0x150>)
    sta_reg = SDMMCx->STA;
 800c246:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c24a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c24c:	420a      	tst	r2, r1
 800c24e:	d001      	beq.n	800c254 <SDMMC_CmdSelDesel+0x40>
 800c250:	0492      	lsls	r2, r2, #18
 800c252:	d504      	bpl.n	800c25e <SDMMC_CmdSelDesel+0x4a>
    if (count-- == 0U)
 800c254:	1c58      	adds	r0, r3, #1
 800c256:	d1f6      	bne.n	800c246 <SDMMC_CmdSelDesel+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c258:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c25c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c25e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c262:	0758      	lsls	r0, r3, #29
 800c264:	d445      	bmi.n	800c2f2 <SDMMC_CmdSelDesel+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c266:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c26a:	f010 0001 	ands.w	r0, r0, #1
 800c26e:	d137      	bne.n	800c2e0 <SDMMC_CmdSelDesel+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c270:	4b3d      	ldr	r3, [pc, #244]	; (800c368 <SDMMC_CmdSelDesel+0x154>)
 800c272:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c276:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c27a:	b2db      	uxtb	r3, r3
 800c27c:	2b07      	cmp	r3, #7
 800c27e:	d136      	bne.n	800c2ee <SDMMC_CmdSelDesel+0xda>
  return (*(__IO uint32_t *) tmp);
 800c280:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c284:	4839      	ldr	r0, [pc, #228]	; (800c36c <SDMMC_CmdSelDesel+0x158>)
 800c286:	4018      	ands	r0, r3
 800c288:	2800      	cmp	r0, #0
 800c28a:	d02f      	beq.n	800c2ec <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	db35      	blt.n	800c2fc <SDMMC_CmdSelDesel+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c290:	0059      	lsls	r1, r3, #1
 800c292:	d436      	bmi.n	800c302 <SDMMC_CmdSelDesel+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c294:	009a      	lsls	r2, r3, #2
 800c296:	d436      	bmi.n	800c306 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c298:	00d9      	lsls	r1, r3, #3
 800c29a:	d436      	bmi.n	800c30a <SDMMC_CmdSelDesel+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c29c:	011a      	lsls	r2, r3, #4
 800c29e:	d437      	bmi.n	800c310 <SDMMC_CmdSelDesel+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c2a0:	0159      	lsls	r1, r3, #5
 800c2a2:	d438      	bmi.n	800c316 <SDMMC_CmdSelDesel+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c2a4:	01da      	lsls	r2, r3, #7
 800c2a6:	d439      	bmi.n	800c31c <SDMMC_CmdSelDesel+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c2a8:	0219      	lsls	r1, r3, #8
 800c2aa:	d43a      	bmi.n	800c322 <SDMMC_CmdSelDesel+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c2ac:	025a      	lsls	r2, r3, #9
 800c2ae:	d43b      	bmi.n	800c328 <SDMMC_CmdSelDesel+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c2b0:	0299      	lsls	r1, r3, #10
 800c2b2:	d445      	bmi.n	800c340 <SDMMC_CmdSelDesel+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c2b4:	02da      	lsls	r2, r3, #11
 800c2b6:	d440      	bmi.n	800c33a <SDMMC_CmdSelDesel+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c2b8:	0359      	lsls	r1, r3, #13
 800c2ba:	d43b      	bmi.n	800c334 <SDMMC_CmdSelDesel+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c2bc:	039a      	lsls	r2, r3, #14
 800c2be:	d436      	bmi.n	800c32e <SDMMC_CmdSelDesel+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c2c0:	03d9      	lsls	r1, r3, #15
 800c2c2:	d446      	bmi.n	800c352 <SDMMC_CmdSelDesel+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c2c4:	041a      	lsls	r2, r3, #16
 800c2c6:	d441      	bmi.n	800c34c <SDMMC_CmdSelDesel+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c2c8:	0459      	lsls	r1, r3, #17
 800c2ca:	d43c      	bmi.n	800c346 <SDMMC_CmdSelDesel+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c2cc:	049a      	lsls	r2, r3, #18
 800c2ce:	d40b      	bmi.n	800c2e8 <SDMMC_CmdSelDesel+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c2d0:	f013 0f08 	tst.w	r3, #8
 800c2d4:	bf14      	ite	ne
 800c2d6:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c2da:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c2de:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2e6:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c2e8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c2ec:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c2ee:	2001      	movs	r0, #1
 800c2f0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2f2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2f4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c2f6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c2fa:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c2fc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c300:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c302:	2040      	movs	r0, #64	; 0x40
 800c304:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c306:	2080      	movs	r0, #128	; 0x80
 800c308:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c30a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c30e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c310:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c314:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c316:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c31a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c31c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c320:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c322:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c326:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c328:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c32c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c32e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c332:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c334:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c338:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c33a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c33e:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c340:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c344:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c346:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c34a:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c34c:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c350:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c352:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c356:	4770      	bx	lr
 800c358:	200008bc 	.word	0x200008bc
 800c35c:	10624dd3 	.word	0x10624dd3
 800c360:	fffee0c0 	.word	0xfffee0c0
 800c364:	00200045 	.word	0x00200045
 800c368:	002000c5 	.word	0x002000c5
 800c36c:	fdffe008 	.word	0xfdffe008

0800c370 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c370:	4b11      	ldr	r3, [pc, #68]	; (800c3b8 <SDMMC_CmdGoIdleState+0x48>)
{
 800c372:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c374:	4a11      	ldr	r2, [pc, #68]	; (800c3bc <SDMMC_CmdGoIdleState+0x4c>)
{
 800c376:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c378:	4c11      	ldr	r4, [pc, #68]	; (800c3c0 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 800c37a:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c37c:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 800c37e:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c380:	fba4 4303 	umull	r4, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c384:	68c4      	ldr	r4, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c386:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c38a:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c38c:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c38e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c392:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c396:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c398:	e002      	b.n	800c3a0 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800c39a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800c39c:	0612      	lsls	r2, r2, #24
 800c39e:	d405      	bmi.n	800c3ac <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	d2fa      	bcs.n	800c39a <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800c3a4:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c3a8:	bc30      	pop	{r4, r5}
 800c3aa:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3ac:	4b05      	ldr	r3, [pc, #20]	; (800c3c4 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 800c3ae:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c3b0:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c3b2:	bc30      	pop	{r4, r5}
 800c3b4:	4770      	bx	lr
 800c3b6:	bf00      	nop
 800c3b8:	200008bc 	.word	0x200008bc
 800c3bc:	fffee0c0 	.word	0xfffee0c0
 800c3c0:	10624dd3 	.word	0x10624dd3
 800c3c4:	002000c5 	.word	0x002000c5

0800c3c8 <SDMMC_CmdOperCond>:
{
 800c3c8:	b410      	push	{r4}
 800c3ca:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c3cc:	f44f 74d5 	mov.w	r4, #426	; 0x1aa
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3d0:	4a1a      	ldr	r2, [pc, #104]	; (800c43c <SDMMC_CmdOperCond+0x74>)
 800c3d2:	4b1b      	ldr	r3, [pc, #108]	; (800c440 <SDMMC_CmdOperCond+0x78>)
  SDMMCx->ARG = Command->Argument;
 800c3d4:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3d6:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3d8:	68cc      	ldr	r4, [r1, #12]
 800c3da:	481a      	ldr	r0, [pc, #104]	; (800c444 <SDMMC_CmdOperCond+0x7c>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3dc:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3e0:	f241 1308 	movw	r3, #4360	; 0x1108
 800c3e4:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3e6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3e8:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c3ea:	f241 3088 	movw	r0, #5000	; 0x1388
 800c3ee:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c3f2:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c3f4:	b14a      	cbz	r2, 800c40a <SDMMC_CmdOperCond+0x42>
 800c3f6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c3f8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c3fa:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c3fc:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c400:	d001      	beq.n	800c406 <SDMMC_CmdOperCond+0x3e>
 800c402:	0490      	lsls	r0, r2, #18
 800c404:	d506      	bpl.n	800c414 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 800c406:	1c5c      	adds	r4, r3, #1
 800c408:	d1f6      	bne.n	800c3f8 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c40a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c40e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c412:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c414:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c416:	075a      	lsls	r2, r3, #29
 800c418:	d40c      	bmi.n	800c434 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c41a:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c41c:	f010 0001 	ands.w	r0, r0, #1
 800c420:	d105      	bne.n	800c42e <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800c422:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c424:	065b      	lsls	r3, r3, #25
 800c426:	d5f2      	bpl.n	800c40e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800c428:	2340      	movs	r3, #64	; 0x40
 800c42a:	638b      	str	r3, [r1, #56]	; 0x38
 800c42c:	e7ef      	b.n	800c40e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c42e:	2301      	movs	r3, #1
 800c430:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c432:	e7ec      	b.n	800c40e <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c434:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c436:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c438:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c43a:	e7e8      	b.n	800c40e <SDMMC_CmdOperCond+0x46>
 800c43c:	200008bc 	.word	0x200008bc
 800c440:	10624dd3 	.word	0x10624dd3
 800c444:	fffee0c0 	.word	0xfffee0c0

0800c448 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c448:	4a50      	ldr	r2, [pc, #320]	; (800c58c <SDMMC_CmdAppCommand+0x144>)
{
 800c44a:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c44c:	4b50      	ldr	r3, [pc, #320]	; (800c590 <SDMMC_CmdAppCommand+0x148>)
 800c44e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c450:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c454:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c458:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c45c:	484d      	ldr	r0, [pc, #308]	; (800c594 <SDMMC_CmdAppCommand+0x14c>)
 800c45e:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c462:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c464:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c466:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c46a:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c46c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c470:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c474:	1e53      	subs	r3, r2, #1
 800c476:	b14a      	cbz	r2, 800c48c <SDMMC_CmdAppCommand+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c478:	4947      	ldr	r1, [pc, #284]	; (800c598 <SDMMC_CmdAppCommand+0x150>)
    sta_reg = SDMMCx->STA;
 800c47a:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c47e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c480:	420a      	tst	r2, r1
 800c482:	d001      	beq.n	800c488 <SDMMC_CmdAppCommand+0x40>
 800c484:	0492      	lsls	r2, r2, #18
 800c486:	d504      	bpl.n	800c492 <SDMMC_CmdAppCommand+0x4a>
    if (count-- == 0U)
 800c488:	1c58      	adds	r0, r3, #1
 800c48a:	d1f6      	bne.n	800c47a <SDMMC_CmdAppCommand+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c48c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c490:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c492:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c496:	0758      	lsls	r0, r3, #29
 800c498:	d445      	bmi.n	800c526 <SDMMC_CmdAppCommand+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c49a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c49e:	f010 0001 	ands.w	r0, r0, #1
 800c4a2:	d137      	bne.n	800c514 <SDMMC_CmdAppCommand+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c4a4:	4b3d      	ldr	r3, [pc, #244]	; (800c59c <SDMMC_CmdAppCommand+0x154>)
 800c4a6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c4aa:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c4ae:	b2db      	uxtb	r3, r3
 800c4b0:	2b37      	cmp	r3, #55	; 0x37
 800c4b2:	d136      	bne.n	800c522 <SDMMC_CmdAppCommand+0xda>
  return (*(__IO uint32_t *) tmp);
 800c4b4:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c4b8:	4839      	ldr	r0, [pc, #228]	; (800c5a0 <SDMMC_CmdAppCommand+0x158>)
 800c4ba:	4018      	ands	r0, r3
 800c4bc:	2800      	cmp	r0, #0
 800c4be:	d02f      	beq.n	800c520 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	db35      	blt.n	800c530 <SDMMC_CmdAppCommand+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c4c4:	0059      	lsls	r1, r3, #1
 800c4c6:	d436      	bmi.n	800c536 <SDMMC_CmdAppCommand+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c4c8:	009a      	lsls	r2, r3, #2
 800c4ca:	d436      	bmi.n	800c53a <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c4cc:	00d9      	lsls	r1, r3, #3
 800c4ce:	d436      	bmi.n	800c53e <SDMMC_CmdAppCommand+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c4d0:	011a      	lsls	r2, r3, #4
 800c4d2:	d437      	bmi.n	800c544 <SDMMC_CmdAppCommand+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c4d4:	0159      	lsls	r1, r3, #5
 800c4d6:	d438      	bmi.n	800c54a <SDMMC_CmdAppCommand+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c4d8:	01da      	lsls	r2, r3, #7
 800c4da:	d439      	bmi.n	800c550 <SDMMC_CmdAppCommand+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c4dc:	0219      	lsls	r1, r3, #8
 800c4de:	d43a      	bmi.n	800c556 <SDMMC_CmdAppCommand+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c4e0:	025a      	lsls	r2, r3, #9
 800c4e2:	d43b      	bmi.n	800c55c <SDMMC_CmdAppCommand+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c4e4:	0299      	lsls	r1, r3, #10
 800c4e6:	d445      	bmi.n	800c574 <SDMMC_CmdAppCommand+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c4e8:	02da      	lsls	r2, r3, #11
 800c4ea:	d440      	bmi.n	800c56e <SDMMC_CmdAppCommand+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c4ec:	0359      	lsls	r1, r3, #13
 800c4ee:	d43b      	bmi.n	800c568 <SDMMC_CmdAppCommand+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c4f0:	039a      	lsls	r2, r3, #14
 800c4f2:	d436      	bmi.n	800c562 <SDMMC_CmdAppCommand+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c4f4:	03d9      	lsls	r1, r3, #15
 800c4f6:	d446      	bmi.n	800c586 <SDMMC_CmdAppCommand+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c4f8:	041a      	lsls	r2, r3, #16
 800c4fa:	d441      	bmi.n	800c580 <SDMMC_CmdAppCommand+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c4fc:	0459      	lsls	r1, r3, #17
 800c4fe:	d43c      	bmi.n	800c57a <SDMMC_CmdAppCommand+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c500:	049a      	lsls	r2, r3, #18
 800c502:	d40b      	bmi.n	800c51c <SDMMC_CmdAppCommand+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c504:	f013 0f08 	tst.w	r3, #8
 800c508:	bf14      	ite	ne
 800c50a:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c50e:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c512:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c514:	2301      	movs	r3, #1
 800c516:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c51a:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c51c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c520:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c522:	2001      	movs	r0, #1
 800c524:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c526:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c528:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c52a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c52e:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c530:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c534:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c536:	2040      	movs	r0, #64	; 0x40
 800c538:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c53a:	2080      	movs	r0, #128	; 0x80
 800c53c:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c53e:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c542:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c544:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c548:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c54a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c54e:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c550:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c554:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c556:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c55a:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c55c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c560:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c562:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c566:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c568:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c56c:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c56e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c572:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c574:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c578:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c57a:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c57e:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c580:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c584:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c586:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c58a:	4770      	bx	lr
 800c58c:	200008bc 	.word	0x200008bc
 800c590:	10624dd3 	.word	0x10624dd3
 800c594:	fffee0c0 	.word	0xfffee0c0
 800c598:	00200045 	.word	0x00200045
 800c59c:	002000c5 	.word	0x002000c5
 800c5a0:	fdffe008 	.word	0xfdffe008

0800c5a4 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5a4:	4a19      	ldr	r2, [pc, #100]	; (800c60c <SDMMC_CmdAppOperCommand+0x68>)
{
 800c5a6:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5a8:	4b19      	ldr	r3, [pc, #100]	; (800c610 <SDMMC_CmdAppOperCommand+0x6c>)
 800c5aa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c5ac:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5b0:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5b4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c5b8:	4816      	ldr	r0, [pc, #88]	; (800c614 <SDMMC_CmdAppOperCommand+0x70>)
 800c5ba:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5be:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5c0:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5c2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5c6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c5c8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c5cc:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c5d0:	1e53      	subs	r3, r2, #1
 800c5d2:	b14a      	cbz	r2, 800c5e8 <SDMMC_CmdAppOperCommand+0x44>
    sta_reg = SDMMCx->STA;
 800c5d4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c5d8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c5da:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c5de:	d001      	beq.n	800c5e4 <SDMMC_CmdAppOperCommand+0x40>
 800c5e0:	0492      	lsls	r2, r2, #18
 800c5e2:	d504      	bpl.n	800c5ee <SDMMC_CmdAppOperCommand+0x4a>
    if (count-- == 0U)
 800c5e4:	1c59      	adds	r1, r3, #1
 800c5e6:	d1f5      	bne.n	800c5d4 <SDMMC_CmdAppOperCommand+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c5e8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c5ec:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c5ee:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c5f2:	f010 0004 	ands.w	r0, r0, #4
 800c5f6:	d103      	bne.n	800c600 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c5f8:	4b07      	ldr	r3, [pc, #28]	; (800c618 <SDMMC_CmdAppOperCommand+0x74>)
 800c5fa:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c5fe:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c600:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c602:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c604:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c608:	4770      	bx	lr
 800c60a:	bf00      	nop
 800c60c:	200008bc 	.word	0x200008bc
 800c610:	10624dd3 	.word	0x10624dd3
 800c614:	fffee0c0 	.word	0xfffee0c0
 800c618:	002000c5 	.word	0x002000c5

0800c61c <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c61c:	4a50      	ldr	r2, [pc, #320]	; (800c760 <SDMMC_CmdBusWidth+0x144>)
{
 800c61e:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c620:	4b50      	ldr	r3, [pc, #320]	; (800c764 <SDMMC_CmdBusWidth+0x148>)
 800c622:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c624:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c628:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c62c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c630:	484d      	ldr	r0, [pc, #308]	; (800c768 <SDMMC_CmdBusWidth+0x14c>)
 800c632:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c636:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c638:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c63a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c63e:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c640:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c644:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c648:	1e53      	subs	r3, r2, #1
 800c64a:	b14a      	cbz	r2, 800c660 <SDMMC_CmdBusWidth+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c64c:	4947      	ldr	r1, [pc, #284]	; (800c76c <SDMMC_CmdBusWidth+0x150>)
    sta_reg = SDMMCx->STA;
 800c64e:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c652:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c654:	420a      	tst	r2, r1
 800c656:	d001      	beq.n	800c65c <SDMMC_CmdBusWidth+0x40>
 800c658:	0492      	lsls	r2, r2, #18
 800c65a:	d504      	bpl.n	800c666 <SDMMC_CmdBusWidth+0x4a>
    if (count-- == 0U)
 800c65c:	1c58      	adds	r0, r3, #1
 800c65e:	d1f6      	bne.n	800c64e <SDMMC_CmdBusWidth+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800c660:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800c664:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c666:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c66a:	0758      	lsls	r0, r3, #29
 800c66c:	d445      	bmi.n	800c6fa <SDMMC_CmdBusWidth+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c66e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c672:	f010 0001 	ands.w	r0, r0, #1
 800c676:	d137      	bne.n	800c6e8 <SDMMC_CmdBusWidth+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c678:	4b3d      	ldr	r3, [pc, #244]	; (800c770 <SDMMC_CmdBusWidth+0x154>)
 800c67a:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c67e:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c682:	b2db      	uxtb	r3, r3
 800c684:	2b06      	cmp	r3, #6
 800c686:	d136      	bne.n	800c6f6 <SDMMC_CmdBusWidth+0xda>
  return (*(__IO uint32_t *) tmp);
 800c688:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c68c:	4839      	ldr	r0, [pc, #228]	; (800c774 <SDMMC_CmdBusWidth+0x158>)
 800c68e:	4018      	ands	r0, r3
 800c690:	2800      	cmp	r0, #0
 800c692:	d02f      	beq.n	800c6f4 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c694:	2b00      	cmp	r3, #0
 800c696:	db35      	blt.n	800c704 <SDMMC_CmdBusWidth+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c698:	0059      	lsls	r1, r3, #1
 800c69a:	d436      	bmi.n	800c70a <SDMMC_CmdBusWidth+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c69c:	009a      	lsls	r2, r3, #2
 800c69e:	d436      	bmi.n	800c70e <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c6a0:	00d9      	lsls	r1, r3, #3
 800c6a2:	d436      	bmi.n	800c712 <SDMMC_CmdBusWidth+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c6a4:	011a      	lsls	r2, r3, #4
 800c6a6:	d437      	bmi.n	800c718 <SDMMC_CmdBusWidth+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c6a8:	0159      	lsls	r1, r3, #5
 800c6aa:	d438      	bmi.n	800c71e <SDMMC_CmdBusWidth+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c6ac:	01da      	lsls	r2, r3, #7
 800c6ae:	d439      	bmi.n	800c724 <SDMMC_CmdBusWidth+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c6b0:	0219      	lsls	r1, r3, #8
 800c6b2:	d43a      	bmi.n	800c72a <SDMMC_CmdBusWidth+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c6b4:	025a      	lsls	r2, r3, #9
 800c6b6:	d43b      	bmi.n	800c730 <SDMMC_CmdBusWidth+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c6b8:	0299      	lsls	r1, r3, #10
 800c6ba:	d445      	bmi.n	800c748 <SDMMC_CmdBusWidth+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c6bc:	02da      	lsls	r2, r3, #11
 800c6be:	d440      	bmi.n	800c742 <SDMMC_CmdBusWidth+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c6c0:	0359      	lsls	r1, r3, #13
 800c6c2:	d43b      	bmi.n	800c73c <SDMMC_CmdBusWidth+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c6c4:	039a      	lsls	r2, r3, #14
 800c6c6:	d436      	bmi.n	800c736 <SDMMC_CmdBusWidth+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c6c8:	03d9      	lsls	r1, r3, #15
 800c6ca:	d446      	bmi.n	800c75a <SDMMC_CmdBusWidth+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c6cc:	041a      	lsls	r2, r3, #16
 800c6ce:	d441      	bmi.n	800c754 <SDMMC_CmdBusWidth+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c6d0:	0459      	lsls	r1, r3, #17
 800c6d2:	d43c      	bmi.n	800c74e <SDMMC_CmdBusWidth+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c6d4:	049a      	lsls	r2, r3, #18
 800c6d6:	d40b      	bmi.n	800c6f0 <SDMMC_CmdBusWidth+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c6d8:	f013 0f08 	tst.w	r3, #8
 800c6dc:	bf14      	ite	ne
 800c6de:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c6e2:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c6e6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c6e8:	2301      	movs	r3, #1
 800c6ea:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6ee:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800c6f0:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800c6f4:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c6f6:	2001      	movs	r0, #1
 800c6f8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6fa:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c6fc:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c6fe:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c702:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c704:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c708:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c70a:	2040      	movs	r0, #64	; 0x40
 800c70c:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c70e:	2080      	movs	r0, #128	; 0x80
 800c710:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c712:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c716:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c718:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c71c:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c71e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c722:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c724:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c728:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c72a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c72e:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c730:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c734:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c736:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c73a:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c73c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c740:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800c742:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c746:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c748:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c74c:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c74e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c752:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c754:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c758:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c75a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c75e:	4770      	bx	lr
 800c760:	200008bc 	.word	0x200008bc
 800c764:	10624dd3 	.word	0x10624dd3
 800c768:	fffee0c0 	.word	0xfffee0c0
 800c76c:	00200045 	.word	0x00200045
 800c770:	002000c5 	.word	0x002000c5
 800c774:	fdffe008 	.word	0xfdffe008

0800c778 <SDMMC_CmdSendSCR>:
{
 800c778:	b410      	push	{r4}
 800c77a:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c77c:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c77e:	4a4c      	ldr	r2, [pc, #304]	; (800c8b0 <SDMMC_CmdSendSCR+0x138>)
 800c780:	4b4c      	ldr	r3, [pc, #304]	; (800c8b4 <SDMMC_CmdSendSCR+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800c782:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c784:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c786:	68cc      	ldr	r4, [r1, #12]
 800c788:	484b      	ldr	r0, [pc, #300]	; (800c8b8 <SDMMC_CmdSendSCR+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c78a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c78e:	f241 1333 	movw	r3, #4403	; 0x1133
 800c792:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c794:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c796:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800c798:	f241 3088 	movw	r0, #5000	; 0x1388
 800c79c:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c7a0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c7a2:	b14a      	cbz	r2, 800c7b8 <SDMMC_CmdSendSCR+0x40>
 800c7a4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800c7a6:	4845      	ldr	r0, [pc, #276]	; (800c8bc <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800c7a8:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c7aa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800c7ac:	4202      	tst	r2, r0
 800c7ae:	d001      	beq.n	800c7b4 <SDMMC_CmdSendSCR+0x3c>
 800c7b0:	0494      	lsls	r4, r2, #18
 800c7b2:	d506      	bpl.n	800c7c2 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 800c7b4:	1c5a      	adds	r2, r3, #1
 800c7b6:	d1f7      	bne.n	800c7a8 <SDMMC_CmdSendSCR+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c7b8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c7bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c7c2:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c7c4:	0758      	lsls	r0, r3, #29
 800c7c6:	d43d      	bmi.n	800c844 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c7c8:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c7ca:	f010 0001 	ands.w	r0, r0, #1
 800c7ce:	d134      	bne.n	800c83a <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c7d0:	4b3b      	ldr	r3, [pc, #236]	; (800c8c0 <SDMMC_CmdSendSCR+0x148>)
 800c7d2:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800c7d4:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800c7d6:	b2db      	uxtb	r3, r3
 800c7d8:	2b33      	cmp	r3, #51	; 0x33
 800c7da:	d131      	bne.n	800c840 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 800c7dc:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800c7de:	4839      	ldr	r0, [pc, #228]	; (800c8c4 <SDMMC_CmdSendSCR+0x14c>)
 800c7e0:	4018      	ands	r0, r3
 800c7e2:	2800      	cmp	r0, #0
 800c7e4:	d0ea      	beq.n	800c7bc <SDMMC_CmdSendSCR+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	db30      	blt.n	800c84c <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800c7ea:	005a      	lsls	r2, r3, #1
 800c7ec:	d431      	bmi.n	800c852 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800c7ee:	009c      	lsls	r4, r3, #2
 800c7f0:	d431      	bmi.n	800c856 <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800c7f2:	00d9      	lsls	r1, r3, #3
 800c7f4:	d431      	bmi.n	800c85a <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800c7f6:	011a      	lsls	r2, r3, #4
 800c7f8:	d432      	bmi.n	800c860 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800c7fa:	015c      	lsls	r4, r3, #5
 800c7fc:	d433      	bmi.n	800c866 <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800c7fe:	01d9      	lsls	r1, r3, #7
 800c800:	d434      	bmi.n	800c86c <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800c802:	021a      	lsls	r2, r3, #8
 800c804:	d435      	bmi.n	800c872 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800c806:	025c      	lsls	r4, r3, #9
 800c808:	d436      	bmi.n	800c878 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800c80a:	0299      	lsls	r1, r3, #10
 800c80c:	d440      	bmi.n	800c890 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800c80e:	02da      	lsls	r2, r3, #11
 800c810:	d43b      	bmi.n	800c88a <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800c812:	035c      	lsls	r4, r3, #13
 800c814:	d436      	bmi.n	800c884 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800c816:	0399      	lsls	r1, r3, #14
 800c818:	d431      	bmi.n	800c87e <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800c81a:	03da      	lsls	r2, r3, #15
 800c81c:	d444      	bmi.n	800c8a8 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800c81e:	041c      	lsls	r4, r3, #16
 800c820:	d43f      	bmi.n	800c8a2 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800c822:	0459      	lsls	r1, r3, #17
 800c824:	d43a      	bmi.n	800c89c <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800c826:	049a      	lsls	r2, r3, #18
 800c828:	d435      	bmi.n	800c896 <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800c82a:	f013 0f08 	tst.w	r3, #8
 800c82e:	bf14      	ite	ne
 800c830:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800c834:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c838:	e7c0      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c83a:	2301      	movs	r3, #1
 800c83c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c83e:	e7bd      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800c840:	2001      	movs	r0, #1
 800c842:	e7bb      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c844:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c846:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c848:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c84a:	e7b7      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800c84c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800c850:	e7b4      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800c852:	2040      	movs	r0, #64	; 0x40
 800c854:	e7b2      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800c856:	2080      	movs	r0, #128	; 0x80
 800c858:	e7b0      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800c85a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800c85e:	e7ad      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800c860:	f44f 7000 	mov.w	r0, #512	; 0x200
 800c864:	e7aa      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800c866:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800c86a:	e7a7      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800c86c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800c870:	e7a4      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800c872:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c876:	e7a1      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800c878:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c87c:	e79e      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800c87e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800c882:	e79b      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800c884:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800c888:	e798      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CC_ERR;
 800c88a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800c88e:	e795      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800c890:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800c894:	e792      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800c896:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800c89a:	e78f      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800c89c:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800c8a0:	e78c      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800c8a2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800c8a6:	e789      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800c8a8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800c8ac:	e786      	b.n	800c7bc <SDMMC_CmdSendSCR+0x44>
 800c8ae:	bf00      	nop
 800c8b0:	200008bc 	.word	0x200008bc
 800c8b4:	10624dd3 	.word	0x10624dd3
 800c8b8:	fffee0c0 	.word	0xfffee0c0
 800c8bc:	00200045 	.word	0x00200045
 800c8c0:	002000c5 	.word	0x002000c5
 800c8c4:	fdffe008 	.word	0xfdffe008

0800c8c8 <SDMMC_CmdSendCID>:
{
 800c8c8:	b410      	push	{r4}
 800c8ca:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800c8cc:	2400      	movs	r4, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8ce:	4a19      	ldr	r2, [pc, #100]	; (800c934 <SDMMC_CmdSendCID+0x6c>)
 800c8d0:	4b19      	ldr	r3, [pc, #100]	; (800c938 <SDMMC_CmdSendCID+0x70>)
  SDMMCx->ARG = Command->Argument;
 800c8d2:	608c      	str	r4, [r1, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8d4:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8d6:	68cc      	ldr	r4, [r1, #12]
 800c8d8:	4818      	ldr	r0, [pc, #96]	; (800c93c <SDMMC_CmdSendCID+0x74>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8da:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8de:	f241 3302 	movw	r3, #4866	; 0x1302
 800c8e2:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8e4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8e6:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c8e8:	f241 3088 	movw	r0, #5000	; 0x1388
 800c8ec:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c8f0:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800c8f2:	b14a      	cbz	r2, 800c908 <SDMMC_CmdSendCID+0x40>
 800c8f4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c8f6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800c8f8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c8fa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c8fe:	d001      	beq.n	800c904 <SDMMC_CmdSendCID+0x3c>
 800c900:	0492      	lsls	r2, r2, #18
 800c902:	d506      	bpl.n	800c912 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 800c904:	1c58      	adds	r0, r3, #1
 800c906:	d1f6      	bne.n	800c8f6 <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800c908:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c90c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c910:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c912:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800c914:	075b      	lsls	r3, r3, #29
 800c916:	d409      	bmi.n	800c92c <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c918:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800c91a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c91e:	bf14      	ite	ne
 800c920:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c922:	4b07      	ldreq	r3, [pc, #28]	; (800c940 <SDMMC_CmdSendCID+0x78>)
 800c924:	638b      	str	r3, [r1, #56]	; 0x38
}
 800c926:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c92a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c92c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c92e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c930:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c932:	e7eb      	b.n	800c90c <SDMMC_CmdSendCID+0x44>
 800c934:	200008bc 	.word	0x200008bc
 800c938:	10624dd3 	.word	0x10624dd3
 800c93c:	fffee0c0 	.word	0xfffee0c0
 800c940:	002000c5 	.word	0x002000c5

0800c944 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c944:	4a1b      	ldr	r2, [pc, #108]	; (800c9b4 <SDMMC_CmdSendCSD+0x70>)
{
 800c946:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c948:	4b1b      	ldr	r3, [pc, #108]	; (800c9b8 <SDMMC_CmdSendCSD+0x74>)
 800c94a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800c94c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c950:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c954:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800c958:	4818      	ldr	r0, [pc, #96]	; (800c9bc <SDMMC_CmdSendCSD+0x78>)
 800c95a:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c95e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c960:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c962:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c966:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c968:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c96c:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c970:	1e53      	subs	r3, r2, #1
 800c972:	b14a      	cbz	r2, 800c988 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 800c974:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c978:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c97a:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c97e:	d001      	beq.n	800c984 <SDMMC_CmdSendCSD+0x40>
 800c980:	0492      	lsls	r2, r2, #18
 800c982:	d504      	bpl.n	800c98e <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 800c984:	1c59      	adds	r1, r3, #1
 800c986:	d1f5      	bne.n	800c974 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800c988:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800c98c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800c98e:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800c992:	075b      	lsls	r3, r3, #29
 800c994:	d409      	bmi.n	800c9aa <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800c996:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800c99a:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800c99e:	bf14      	ite	ne
 800c9a0:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800c9a2:	4b07      	ldreq	r3, [pc, #28]	; (800c9c0 <SDMMC_CmdSendCSD+0x7c>)
 800c9a4:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800c9a8:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9aa:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9ac:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800c9ae:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800c9b2:	4770      	bx	lr
 800c9b4:	200008bc 	.word	0x200008bc
 800c9b8:	10624dd3 	.word	0x10624dd3
 800c9bc:	fffee0c0 	.word	0xfffee0c0
 800c9c0:	002000c5 	.word	0x002000c5

0800c9c4 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 800c9c4:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9c6:	4a2b      	ldr	r2, [pc, #172]	; (800ca74 <SDMMC_CmdSetRelAdd+0xb0>)
{
 800c9c8:	4684      	mov	ip, r0
 800c9ca:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800c9cc:	6083      	str	r3, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9ce:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9d0:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9d2:	4829      	ldr	r0, [pc, #164]	; (800ca78 <SDMMC_CmdSetRelAdd+0xb4>)
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9d4:	4c29      	ldr	r4, [pc, #164]	; (800ca7c <SDMMC_CmdSetRelAdd+0xb8>)
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9d6:	fba0 0202 	umull	r0, r2, r0, r2
 800c9da:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9de:	401c      	ands	r4, r3
 800c9e0:	f241 1303 	movw	r3, #4355	; 0x1103
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9e4:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9e6:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800c9e8:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800c9ec:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800c9f0:	b152      	cbz	r2, 800ca08 <SDMMC_CmdSetRelAdd+0x44>
 800c9f2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 800c9f4:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800c9f8:	3b01      	subs	r3, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800c9fa:	f012 0f45 	tst.w	r2, #69	; 0x45
 800c9fe:	d001      	beq.n	800ca04 <SDMMC_CmdSetRelAdd+0x40>
 800ca00:	0494      	lsls	r4, r2, #18
 800ca02:	d506      	bpl.n	800ca12 <SDMMC_CmdSetRelAdd+0x4e>
    if (count-- == 0U)
 800ca04:	1c5a      	adds	r2, r3, #1
 800ca06:	d1f5      	bne.n	800c9f4 <SDMMC_CmdSetRelAdd+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800ca08:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800ca0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca10:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ca12:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800ca16:	0758      	lsls	r0, r3, #29
 800ca18:	d421      	bmi.n	800ca5e <SDMMC_CmdSetRelAdd+0x9a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ca1a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800ca1e:	f010 0001 	ands.w	r0, r0, #1
 800ca22:	d116      	bne.n	800ca52 <SDMMC_CmdSetRelAdd+0x8e>
  return (uint8_t)(SDMMCx->RESPCMD);
 800ca24:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	2b03      	cmp	r3, #3
 800ca2c:	d115      	bne.n	800ca5a <SDMMC_CmdSetRelAdd+0x96>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ca2e:	4b14      	ldr	r3, [pc, #80]	; (800ca80 <SDMMC_CmdSetRelAdd+0xbc>)
 800ca30:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 800ca34:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 800ca38:	f413 4060 	ands.w	r0, r3, #57344	; 0xe000
 800ca3c:	d017      	beq.n	800ca6e <SDMMC_CmdSetRelAdd+0xaa>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800ca3e:	045a      	lsls	r2, r3, #17
 800ca40:	d412      	bmi.n	800ca68 <SDMMC_CmdSetRelAdd+0xa4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800ca42:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 800ca46:	bf14      	ite	ne
 800ca48:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 800ca4c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800ca50:	e7dc      	b.n	800ca0c <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ca52:	2301      	movs	r3, #1
 800ca54:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca58:	e7d8      	b.n	800ca0c <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ca5a:	2001      	movs	r0, #1
 800ca5c:	e7d6      	b.n	800ca0c <SDMMC_CmdSetRelAdd+0x48>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca5e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca60:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ca62:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ca66:	e7d1      	b.n	800ca0c <SDMMC_CmdSetRelAdd+0x48>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800ca68:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800ca6c:	e7ce      	b.n	800ca0c <SDMMC_CmdSetRelAdd+0x48>
    *pRCA = (uint16_t)(response_r1 >> 16);
 800ca6e:	0c1b      	lsrs	r3, r3, #16
 800ca70:	800b      	strh	r3, [r1, #0]
    return SDMMC_ERROR_NONE;
 800ca72:	e7cb      	b.n	800ca0c <SDMMC_CmdSetRelAdd+0x48>
 800ca74:	200008bc 	.word	0x200008bc
 800ca78:	10624dd3 	.word	0x10624dd3
 800ca7c:	fffee0c0 	.word	0xfffee0c0
 800ca80:	002000c5 	.word	0x002000c5

0800ca84 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca84:	4a50      	ldr	r2, [pc, #320]	; (800cbc8 <SDMMC_CmdSendStatus+0x144>)
{
 800ca86:	4684      	mov	ip, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca88:	4b50      	ldr	r3, [pc, #320]	; (800cbcc <SDMMC_CmdSendStatus+0x148>)
 800ca8a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ca8c:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca90:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ca94:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800ca98:	484d      	ldr	r0, [pc, #308]	; (800cbd0 <SDMMC_CmdSendStatus+0x14c>)
 800ca9a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ca9e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800caa0:	4008      	ands	r0, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800caa2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800caa6:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800caa8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800caac:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 800cab0:	1e53      	subs	r3, r2, #1
 800cab2:	b14a      	cbz	r2, 800cac8 <SDMMC_CmdSendStatus+0x44>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cab4:	4947      	ldr	r1, [pc, #284]	; (800cbd4 <SDMMC_CmdSendStatus+0x150>)
    sta_reg = SDMMCx->STA;
 800cab6:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800caba:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cabc:	420a      	tst	r2, r1
 800cabe:	d001      	beq.n	800cac4 <SDMMC_CmdSendStatus+0x40>
 800cac0:	0492      	lsls	r2, r2, #18
 800cac2:	d504      	bpl.n	800cace <SDMMC_CmdSendStatus+0x4a>
    if (count-- == 0U)
 800cac4:	1c58      	adds	r0, r3, #1
 800cac6:	d1f6      	bne.n	800cab6 <SDMMC_CmdSendStatus+0x32>
      return SDMMC_ERROR_TIMEOUT;
 800cac8:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800cacc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cace:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 800cad2:	0758      	lsls	r0, r3, #29
 800cad4:	d445      	bmi.n	800cb62 <SDMMC_CmdSendStatus+0xde>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cad6:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800cada:	f010 0001 	ands.w	r0, r0, #1
 800cade:	d137      	bne.n	800cb50 <SDMMC_CmdSendStatus+0xcc>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cae0:	4b3d      	ldr	r3, [pc, #244]	; (800cbd8 <SDMMC_CmdSendStatus+0x154>)
 800cae2:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cae6:	f8dc 3010 	ldr.w	r3, [ip, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b0d      	cmp	r3, #13
 800caee:	d136      	bne.n	800cb5e <SDMMC_CmdSendStatus+0xda>
  return (*(__IO uint32_t *) tmp);
 800caf0:	f8dc 3014 	ldr.w	r3, [ip, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800caf4:	4839      	ldr	r0, [pc, #228]	; (800cbdc <SDMMC_CmdSendStatus+0x158>)
 800caf6:	4018      	ands	r0, r3
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d02f      	beq.n	800cb5c <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	db35      	blt.n	800cb6c <SDMMC_CmdSendStatus+0xe8>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cb00:	0059      	lsls	r1, r3, #1
 800cb02:	d436      	bmi.n	800cb72 <SDMMC_CmdSendStatus+0xee>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cb04:	009a      	lsls	r2, r3, #2
 800cb06:	d436      	bmi.n	800cb76 <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cb08:	00d9      	lsls	r1, r3, #3
 800cb0a:	d436      	bmi.n	800cb7a <SDMMC_CmdSendStatus+0xf6>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cb0c:	011a      	lsls	r2, r3, #4
 800cb0e:	d437      	bmi.n	800cb80 <SDMMC_CmdSendStatus+0xfc>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cb10:	0159      	lsls	r1, r3, #5
 800cb12:	d438      	bmi.n	800cb86 <SDMMC_CmdSendStatus+0x102>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cb14:	01da      	lsls	r2, r3, #7
 800cb16:	d439      	bmi.n	800cb8c <SDMMC_CmdSendStatus+0x108>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cb18:	0219      	lsls	r1, r3, #8
 800cb1a:	d43a      	bmi.n	800cb92 <SDMMC_CmdSendStatus+0x10e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cb1c:	025a      	lsls	r2, r3, #9
 800cb1e:	d43b      	bmi.n	800cb98 <SDMMC_CmdSendStatus+0x114>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cb20:	0299      	lsls	r1, r3, #10
 800cb22:	d445      	bmi.n	800cbb0 <SDMMC_CmdSendStatus+0x12c>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cb24:	02da      	lsls	r2, r3, #11
 800cb26:	d440      	bmi.n	800cbaa <SDMMC_CmdSendStatus+0x126>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cb28:	0359      	lsls	r1, r3, #13
 800cb2a:	d43b      	bmi.n	800cba4 <SDMMC_CmdSendStatus+0x120>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cb2c:	039a      	lsls	r2, r3, #14
 800cb2e:	d436      	bmi.n	800cb9e <SDMMC_CmdSendStatus+0x11a>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cb30:	03d9      	lsls	r1, r3, #15
 800cb32:	d446      	bmi.n	800cbc2 <SDMMC_CmdSendStatus+0x13e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cb34:	041a      	lsls	r2, r3, #16
 800cb36:	d441      	bmi.n	800cbbc <SDMMC_CmdSendStatus+0x138>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cb38:	0459      	lsls	r1, r3, #17
 800cb3a:	d43c      	bmi.n	800cbb6 <SDMMC_CmdSendStatus+0x132>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cb3c:	049a      	lsls	r2, r3, #18
 800cb3e:	d40b      	bmi.n	800cb58 <SDMMC_CmdSendStatus+0xd4>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cb40:	f013 0f08 	tst.w	r3, #8
 800cb44:	bf14      	ite	ne
 800cb46:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800cb4a:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cb4e:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cb50:	2301      	movs	r3, #1
 800cb52:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb56:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_RESET;
 800cb58:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
}
 800cb5c:	4770      	bx	lr
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cb5e:	2001      	movs	r0, #1
 800cb60:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb62:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb64:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cb66:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cb6a:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cb6c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800cb70:	4770      	bx	lr
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cb72:	2040      	movs	r0, #64	; 0x40
 800cb74:	4770      	bx	lr
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cb76:	2080      	movs	r0, #128	; 0x80
 800cb78:	4770      	bx	lr
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cb7a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800cb7e:	4770      	bx	lr
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cb80:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cb84:	4770      	bx	lr
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cb86:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800cb8a:	4770      	bx	lr
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cb8c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800cb90:	4770      	bx	lr
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cb92:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800cb96:	4770      	bx	lr
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cb98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cb9c:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cb9e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800cba2:	4770      	bx	lr
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cba4:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800cba8:	4770      	bx	lr
    return SDMMC_ERROR_CC_ERR;
 800cbaa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800cbae:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cbb0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800cbb4:	4770      	bx	lr
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cbb6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cbba:	4770      	bx	lr
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cbbc:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cbc0:	4770      	bx	lr
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cbc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cbc6:	4770      	bx	lr
 800cbc8:	200008bc 	.word	0x200008bc
 800cbcc:	10624dd3 	.word	0x10624dd3
 800cbd0:	fffee0c0 	.word	0xfffee0c0
 800cbd4:	00200045 	.word	0x00200045
 800cbd8:	002000c5 	.word	0x002000c5
 800cbdc:	fdffe008 	.word	0xfdffe008

0800cbe0 <SDMMC_CmdStatusRegister>:
{
 800cbe0:	b410      	push	{r4}
 800cbe2:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 800cbe4:	2400      	movs	r4, #0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbe6:	4a4c      	ldr	r2, [pc, #304]	; (800cd18 <SDMMC_CmdStatusRegister+0x138>)
 800cbe8:	4b4c      	ldr	r3, [pc, #304]	; (800cd1c <SDMMC_CmdStatusRegister+0x13c>)
  SDMMCx->ARG = Command->Argument;
 800cbea:	608c      	str	r4, [r1, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbec:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbee:	68cc      	ldr	r4, [r1, #12]
 800cbf0:	484b      	ldr	r0, [pc, #300]	; (800cd20 <SDMMC_CmdStatusRegister+0x140>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbf2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbf6:	f241 130d 	movw	r3, #4365	; 0x110d
 800cbfa:	4020      	ands	r0, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cbfc:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cbfe:	4303      	orrs	r3, r0
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800cc00:	f241 3088 	movw	r0, #5000	; 0x1388
 800cc04:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800cc08:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 800cc0a:	b14a      	cbz	r2, 800cc20 <SDMMC_CmdStatusRegister+0x40>
 800cc0c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800cc0e:	4845      	ldr	r0, [pc, #276]	; (800cd24 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 800cc10:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 800cc12:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800cc14:	4202      	tst	r2, r0
 800cc16:	d001      	beq.n	800cc1c <SDMMC_CmdStatusRegister+0x3c>
 800cc18:	0494      	lsls	r4, r2, #18
 800cc1a:	d506      	bpl.n	800cc2a <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 800cc1c:	1c5a      	adds	r2, r3, #1
 800cc1e:	d1f7      	bne.n	800cc10 <SDMMC_CmdStatusRegister+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800cc20:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 800cc24:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc28:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cc2a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800cc2c:	0758      	lsls	r0, r3, #29
 800cc2e:	d43d      	bmi.n	800ccac <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cc30:	6b48      	ldr	r0, [r1, #52]	; 0x34
 800cc32:	f010 0001 	ands.w	r0, r0, #1
 800cc36:	d134      	bne.n	800cca2 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cc38:	4b3b      	ldr	r3, [pc, #236]	; (800cd28 <SDMMC_CmdStatusRegister+0x148>)
 800cc3a:	638b      	str	r3, [r1, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800cc3c:	690b      	ldr	r3, [r1, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cc3e:	b2db      	uxtb	r3, r3
 800cc40:	2b0d      	cmp	r3, #13
 800cc42:	d131      	bne.n	800cca8 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 800cc44:	694b      	ldr	r3, [r1, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cc46:	4839      	ldr	r0, [pc, #228]	; (800cd2c <SDMMC_CmdStatusRegister+0x14c>)
 800cc48:	4018      	ands	r0, r3
 800cc4a:	2800      	cmp	r0, #0
 800cc4c:	d0ea      	beq.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	db30      	blt.n	800ccb4 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cc52:	005a      	lsls	r2, r3, #1
 800cc54:	d431      	bmi.n	800ccba <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cc56:	009c      	lsls	r4, r3, #2
 800cc58:	d431      	bmi.n	800ccbe <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cc5a:	00d9      	lsls	r1, r3, #3
 800cc5c:	d431      	bmi.n	800ccc2 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cc5e:	011a      	lsls	r2, r3, #4
 800cc60:	d432      	bmi.n	800ccc8 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cc62:	015c      	lsls	r4, r3, #5
 800cc64:	d433      	bmi.n	800ccce <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cc66:	01d9      	lsls	r1, r3, #7
 800cc68:	d434      	bmi.n	800ccd4 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cc6a:	021a      	lsls	r2, r3, #8
 800cc6c:	d435      	bmi.n	800ccda <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cc6e:	025c      	lsls	r4, r3, #9
 800cc70:	d436      	bmi.n	800cce0 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cc72:	0299      	lsls	r1, r3, #10
 800cc74:	d440      	bmi.n	800ccf8 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cc76:	02da      	lsls	r2, r3, #11
 800cc78:	d43b      	bmi.n	800ccf2 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cc7a:	035c      	lsls	r4, r3, #13
 800cc7c:	d436      	bmi.n	800ccec <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cc7e:	0399      	lsls	r1, r3, #14
 800cc80:	d431      	bmi.n	800cce6 <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cc82:	03da      	lsls	r2, r3, #15
 800cc84:	d444      	bmi.n	800cd10 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cc86:	041c      	lsls	r4, r3, #16
 800cc88:	d43f      	bmi.n	800cd0a <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800cc8a:	0459      	lsls	r1, r3, #17
 800cc8c:	d43a      	bmi.n	800cd04 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800cc8e:	049a      	lsls	r2, r3, #18
 800cc90:	d435      	bmi.n	800ccfe <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800cc92:	f013 0f08 	tst.w	r3, #8
 800cc96:	bf14      	ite	ne
 800cc98:	f44f 0000 	movne.w	r0, #8388608	; 0x800000
 800cc9c:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800cca0:	e7c0      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cca2:	2301      	movs	r3, #1
 800cca4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cca6:	e7bd      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cca8:	2001      	movs	r0, #1
 800ccaa:	e7bb      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccac:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccae:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ccb0:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ccb2:	e7b7      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800ccb4:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 800ccb8:	e7b4      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800ccba:	2040      	movs	r0, #64	; 0x40
 800ccbc:	e7b2      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800ccbe:	2080      	movs	r0, #128	; 0x80
 800ccc0:	e7b0      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800ccc2:	f44f 7080 	mov.w	r0, #256	; 0x100
 800ccc6:	e7ad      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800ccc8:	f44f 7000 	mov.w	r0, #512	; 0x200
 800cccc:	e7aa      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800ccce:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800ccd2:	e7a7      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800ccd4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ccd8:	e7a4      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_COM_CRC_FAILED;
 800ccda:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800ccde:	e7a1      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cce0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800cce4:	e79e      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cce6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800ccea:	e79b      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800ccec:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800ccf0:	e798      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CC_ERR;
 800ccf2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800ccf6:	e795      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800ccf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800ccfc:	e792      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_ERASE_RESET;
 800ccfe:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 800cd02:	e78f      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800cd04:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800cd08:	e78c      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cd0a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800cd0e:	e789      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cd10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800cd14:	e786      	b.n	800cc24 <SDMMC_CmdStatusRegister+0x44>
 800cd16:	bf00      	nop
 800cd18:	200008bc 	.word	0x200008bc
 800cd1c:	10624dd3 	.word	0x10624dd3
 800cd20:	fffee0c0 	.word	0xfffee0c0
 800cd24:	00200045 	.word	0x00200045
 800cd28:	002000c5 	.word	0x002000c5
 800cd2c:	fdffe008 	.word	0xfdffe008

0800cd30 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800cd30:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800cd32:	4903      	ldr	r1, [pc, #12]	; (800cd40 <MX_FATFS_Init+0x10>)
 800cd34:	4803      	ldr	r0, [pc, #12]	; (800cd44 <MX_FATFS_Init+0x14>)
 800cd36:	f003 f825 	bl	800fd84 <FATFS_LinkDriver>
 800cd3a:	4b03      	ldr	r3, [pc, #12]	; (800cd48 <MX_FATFS_Init+0x18>)
 800cd3c:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800cd3e:	bd08      	pop	{r3, pc}
 800cd40:	2001d71c 	.word	0x2001d71c
 800cd44:	0801b9d4 	.word	0x0801b9d4
 800cd48:	2001d720 	.word	0x2001d720

0800cd4c <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 800cd4c:	2000      	movs	r0, #0
 800cd4e:	4770      	bx	lr

0800cd50 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd50:	b510      	push	{r4, lr}
 800cd52:	4694      	mov	ip, r2
 800cd54:	b082      	sub	sp, #8
 800cd56:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd58:	460a      	mov	r2, r1
 800cd5a:	4663      	mov	r3, ip
 800cd5c:	4601      	mov	r1, r0
 800cd5e:	9400      	str	r4, [sp, #0]
 800cd60:	4803      	ldr	r0, [pc, #12]	; (800cd70 <BSP_SD_ReadBlocks+0x20>)
 800cd62:	f7fd f80f 	bl	8009d84 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800cd66:	3800      	subs	r0, #0
 800cd68:	bf18      	it	ne
 800cd6a:	2001      	movne	r0, #1
 800cd6c:	b002      	add	sp, #8
 800cd6e:	bd10      	pop	{r4, pc}
 800cd70:	2001c3ec 	.word	0x2001c3ec

0800cd74 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cd74:	b510      	push	{r4, lr}
 800cd76:	4694      	mov	ip, r2
 800cd78:	b082      	sub	sp, #8
 800cd7a:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cd7c:	460a      	mov	r2, r1
 800cd7e:	4663      	mov	r3, ip
 800cd80:	4601      	mov	r1, r0
 800cd82:	9400      	str	r4, [sp, #0]
 800cd84:	4803      	ldr	r0, [pc, #12]	; (800cd94 <BSP_SD_WriteBlocks+0x20>)
 800cd86:	f7fd f8ed 	bl	8009f64 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 800cd8a:	3800      	subs	r0, #0
 800cd8c:	bf18      	it	ne
 800cd8e:	2001      	movne	r0, #1
 800cd90:	b002      	add	sp, #8
 800cd92:	bd10      	pop	{r4, pc}
 800cd94:	2001c3ec 	.word	0x2001c3ec

0800cd98 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cd98:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cd9a:	4803      	ldr	r0, [pc, #12]	; (800cda8 <BSP_SD_GetCardState+0x10>)
 800cd9c:	f7fd fd3c 	bl	800a818 <HAL_SD_GetCardState>
}
 800cda0:	3804      	subs	r0, #4
 800cda2:	bf18      	it	ne
 800cda4:	2001      	movne	r0, #1
 800cda6:	bd08      	pop	{r3, pc}
 800cda8:	2001c3ec 	.word	0x2001c3ec

0800cdac <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cdac:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cdae:	4801      	ldr	r0, [pc, #4]	; (800cdb4 <BSP_SD_GetCardInfo+0x8>)
 800cdb0:	f7fd bbec 	b.w	800a58c <HAL_SD_GetCardInfo>
 800cdb4:	2001c3ec 	.word	0x2001c3ec

0800cdb8 <BSP_SD_WriteCpltCallback>:
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop

0800cdbc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cdbc:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 800cdbe:	f7ff fffb 	bl	800cdb8 <BSP_SD_WriteCpltCallback>
}
 800cdc2:	bd08      	pop	{r3, pc}

0800cdc4 <BSP_SD_ReadCpltCallback>:
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop

0800cdc8 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800cdc8:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 800cdca:	f7ff fffb 	bl	800cdc4 <BSP_SD_ReadCpltCallback>
}
 800cdce:	bd08      	pop	{r3, pc}

0800cdd0 <BSP_SD_Init>:
{
 800cdd0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800cdd2:	f7f4 fd79 	bl	80018c8 <BSP_SD_IsDetected>
 800cdd6:	2801      	cmp	r0, #1
 800cdd8:	d001      	beq.n	800cdde <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 800cdda:	2002      	movs	r0, #2
}
 800cddc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 800cdde:	4807      	ldr	r0, [pc, #28]	; (800cdfc <BSP_SD_Init+0x2c>)
 800cde0:	f7fd fcb2 	bl	800a748 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 800cde4:	2800      	cmp	r0, #0
 800cde6:	d1f9      	bne.n	800cddc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800cde8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800cdec:	4803      	ldr	r0, [pc, #12]	; (800cdfc <BSP_SD_Init+0x2c>)
 800cdee:	f7fd fbe1 	bl	800a5b4 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 800cdf2:	3800      	subs	r0, #0
 800cdf4:	bf18      	it	ne
 800cdf6:	2001      	movne	r0, #1
}
 800cdf8:	bd08      	pop	{r3, pc}
 800cdfa:	bf00      	nop
 800cdfc:	2001c3ec 	.word	0x2001c3ec

0800ce00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800ce00:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800ce02:	4c0a      	ldr	r4, [pc, #40]	; (800ce2c <SD_initialize+0x2c>)
 800ce04:	2501      	movs	r5, #1
 800ce06:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800ce08:	f7ff ffe2 	bl	800cdd0 <BSP_SD_Init>
 800ce0c:	b108      	cbz	r0, 800ce12 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800ce0e:	7820      	ldrb	r0, [r4, #0]
}
 800ce10:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800ce12:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ce14:	f7ff ffc0 	bl	800cd98 <BSP_SD_GetCardState>
 800ce18:	b918      	cbnz	r0, 800ce22 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800ce1a:	7823      	ldrb	r3, [r4, #0]
 800ce1c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ce20:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ce22:	7823      	ldrb	r3, [r4, #0]
 800ce24:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800ce26:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ce28:	7820      	ldrb	r0, [r4, #0]
}
 800ce2a:	bd38      	pop	{r3, r4, r5, pc}
 800ce2c:	200008d0 	.word	0x200008d0

0800ce30 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800ce30:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800ce32:	2301      	movs	r3, #1
 800ce34:	4c05      	ldr	r4, [pc, #20]	; (800ce4c <SD_status+0x1c>)
 800ce36:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800ce38:	f7ff ffae 	bl	800cd98 <BSP_SD_GetCardState>
 800ce3c:	b918      	cbnz	r0, 800ce46 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800ce3e:	7823      	ldrb	r3, [r4, #0]
 800ce40:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800ce44:	7023      	strb	r3, [r4, #0]
  return Stat;
 800ce46:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800ce48:	bd10      	pop	{r4, pc}
 800ce4a:	bf00      	nop
 800ce4c:	200008d0 	.word	0x200008d0

0800ce50 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800ce50:	b508      	push	{r3, lr}
 800ce52:	4608      	mov	r0, r1
 800ce54:	4611      	mov	r1, r2
 800ce56:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800ce58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce5c:	f7ff ff78 	bl	800cd50 <BSP_SD_ReadBlocks>
 800ce60:	b108      	cbz	r0, 800ce66 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800ce62:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800ce64:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800ce66:	f7ff ff97 	bl	800cd98 <BSP_SD_GetCardState>
 800ce6a:	2800      	cmp	r0, #0
 800ce6c:	d0fa      	beq.n	800ce64 <SD_read+0x14>
 800ce6e:	f7ff ff93 	bl	800cd98 <BSP_SD_GetCardState>
 800ce72:	2800      	cmp	r0, #0
 800ce74:	d1f7      	bne.n	800ce66 <SD_read+0x16>
 800ce76:	e7f5      	b.n	800ce64 <SD_read+0x14>

0800ce78 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce78:	4b18      	ldr	r3, [pc, #96]	; (800cedc <SD_ioctl+0x64>)
{
 800ce7a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce7c:	7818      	ldrb	r0, [r3, #0]
{
 800ce7e:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce80:	f010 0401 	ands.w	r4, r0, #1
 800ce84:	d106      	bne.n	800ce94 <SD_ioctl+0x1c>
 800ce86:	4615      	mov	r5, r2

  switch (cmd)
 800ce88:	2903      	cmp	r1, #3
 800ce8a:	d824      	bhi.n	800ced6 <SD_ioctl+0x5e>
 800ce8c:	e8df f001 	tbb	[pc, r1]
 800ce90:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ce94:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800ce96:	4620      	mov	r0, r4
 800ce98:	b00b      	add	sp, #44	; 0x2c
 800ce9a:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800ce9c:	460c      	mov	r4, r1
}
 800ce9e:	4620      	mov	r0, r4
 800cea0:	b00b      	add	sp, #44	; 0x2c
 800cea2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cea4:	a801      	add	r0, sp, #4
 800cea6:	f7ff ff81 	bl	800cdac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ceaa:	9b07      	ldr	r3, [sp, #28]
}
 800ceac:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ceae:	602b      	str	r3, [r5, #0]
}
 800ceb0:	b00b      	add	sp, #44	; 0x2c
 800ceb2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800ceb4:	a801      	add	r0, sp, #4
 800ceb6:	f7ff ff79 	bl	800cdac <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800ceba:	9b08      	ldr	r3, [sp, #32]
}
 800cebc:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cebe:	802b      	strh	r3, [r5, #0]
}
 800cec0:	b00b      	add	sp, #44	; 0x2c
 800cec2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800cec4:	a801      	add	r0, sp, #4
 800cec6:	f7ff ff71 	bl	800cdac <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800ceca:	9b08      	ldr	r3, [sp, #32]
}
 800cecc:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cece:	0a5b      	lsrs	r3, r3, #9
 800ced0:	602b      	str	r3, [r5, #0]
}
 800ced2:	b00b      	add	sp, #44	; 0x2c
 800ced4:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800ced6:	2404      	movs	r4, #4
 800ced8:	e7dd      	b.n	800ce96 <SD_ioctl+0x1e>
 800ceda:	bf00      	nop
 800cedc:	200008d0 	.word	0x200008d0

0800cee0 <SD_write>:
{
 800cee0:	b508      	push	{r3, lr}
 800cee2:	4608      	mov	r0, r1
 800cee4:	4611      	mov	r1, r2
 800cee6:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ceec:	f7ff ff42 	bl	800cd74 <BSP_SD_WriteBlocks>
 800cef0:	b108      	cbz	r0, 800cef6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800cef2:	2001      	movs	r0, #1
}
 800cef4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cef6:	f7ff ff4f 	bl	800cd98 <BSP_SD_GetCardState>
 800cefa:	2800      	cmp	r0, #0
 800cefc:	d0fa      	beq.n	800cef4 <SD_write+0x14>
 800cefe:	f7ff ff4b 	bl	800cd98 <BSP_SD_GetCardState>
 800cf02:	2800      	cmp	r0, #0
 800cf04:	d1f7      	bne.n	800cef6 <SD_write+0x16>
 800cf06:	e7f5      	b.n	800cef4 <SD_write+0x14>

0800cf08 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800cf08:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <disk_status+0x10>)
 800cf0a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800cf0e:	4418      	add	r0, r3
 800cf10:	6853      	ldr	r3, [r2, #4]
 800cf12:	7a00      	ldrb	r0, [r0, #8]
 800cf14:	685b      	ldr	r3, [r3, #4]
 800cf16:	4718      	bx	r3
 800cf18:	2001d94c 	.word	0x2001d94c

0800cf1c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 800cf1c:	4b07      	ldr	r3, [pc, #28]	; (800cf3c <disk_initialize+0x20>)
 800cf1e:	5c1a      	ldrb	r2, [r3, r0]
 800cf20:	b952      	cbnz	r2, 800cf38 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf22:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 800cf26:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 800cf28:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf2c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 800cf2e:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cf32:	7a08      	ldrb	r0, [r1, #8]
 800cf34:	6813      	ldr	r3, [r2, #0]
 800cf36:	4718      	bx	r3
  }
  return stat;
}
 800cf38:	2000      	movs	r0, #0
 800cf3a:	4770      	bx	lr
 800cf3c:	2001d94c 	.word	0x2001d94c

0800cf40 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cf40:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf42:	4c06      	ldr	r4, [pc, #24]	; (800cf5c <disk_read+0x1c>)
 800cf44:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800cf48:	4420      	add	r0, r4
 800cf4a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800cf4e:	7a00      	ldrb	r0, [r0, #8]
 800cf50:	68a4      	ldr	r4, [r4, #8]
 800cf52:	46a4      	mov	ip, r4
  return res;
}
 800cf54:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cf58:	4760      	bx	ip
 800cf5a:	bf00      	nop
 800cf5c:	2001d94c 	.word	0x2001d94c

0800cf60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cf60:	b410      	push	{r4}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf62:	4c06      	ldr	r4, [pc, #24]	; (800cf7c <disk_write+0x1c>)
 800cf64:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800cf68:	4420      	add	r0, r4
 800cf6a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800cf6e:	7a00      	ldrb	r0, [r0, #8]
 800cf70:	68e4      	ldr	r4, [r4, #12]
 800cf72:	46a4      	mov	ip, r4
  return res;
}
 800cf74:	f85d 4b04 	ldr.w	r4, [sp], #4
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cf78:	4760      	bx	ip
 800cf7a:	bf00      	nop
 800cf7c:	2001d94c 	.word	0x2001d94c

0800cf80 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cf80:	4b04      	ldr	r3, [pc, #16]	; (800cf94 <disk_ioctl+0x14>)
 800cf82:	eb03 0c00 	add.w	ip, r3, r0
 800cf86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf8a:	6843      	ldr	r3, [r0, #4]
 800cf8c:	f89c 0008 	ldrb.w	r0, [ip, #8]
 800cf90:	691b      	ldr	r3, [r3, #16]
 800cf92:	4718      	bx	r3
 800cf94:	2001d94c 	.word	0x2001d94c

0800cf98 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 800cf98:	4b2a      	ldr	r3, [pc, #168]	; (800d044 <inc_lock+0xac>)
{
 800cf9a:	4684      	mov	ip, r0
 800cf9c:	b470      	push	{r4, r5, r6}
		if (Files[i].fs == dp->obj.fs &&
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	6804      	ldr	r4, [r0, #0]
 800cfa2:	4294      	cmp	r4, r2
 800cfa4:	d01c      	beq.n	800cfe0 <inc_lock+0x48>
 800cfa6:	6918      	ldr	r0, [r3, #16]
 800cfa8:	42a0      	cmp	r0, r4
 800cfaa:	d005      	beq.n	800cfb8 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cfac:	b372      	cbz	r2, 800d00c <inc_lock+0x74>
 800cfae:	2800      	cmp	r0, #0
 800cfb0:	d044      	beq.n	800d03c <inc_lock+0xa4>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800cfb2:	2000      	movs	r0, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 800cfb4:	bc70      	pop	{r4, r5, r6}
 800cfb6:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 800cfb8:	695d      	ldr	r5, [r3, #20]
 800cfba:	f8dc 6008 	ldr.w	r6, [ip, #8]
 800cfbe:	42b5      	cmp	r5, r6
 800cfc0:	d1f4      	bne.n	800cfac <inc_lock+0x14>
			Files[i].clu == dp->obj.sclust &&
 800cfc2:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800cfc6:	699e      	ldr	r6, [r3, #24]
 800cfc8:	42ae      	cmp	r6, r5
 800cfca:	d1ef      	bne.n	800cfac <inc_lock+0x14>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfcc:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cfce:	b999      	cbnz	r1, 800cff8 <inc_lock+0x60>
 800cfd0:	eb03 1402 	add.w	r4, r3, r2, lsl #4
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cfd4:	1c50      	adds	r0, r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cfd6:	0111      	lsls	r1, r2, #4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cfd8:	89a2      	ldrh	r2, [r4, #12]
 800cfda:	3201      	adds	r2, #1
 800cfdc:	b292      	uxth	r2, r2
 800cfde:	e029      	b.n	800d034 <inc_lock+0x9c>
		if (Files[i].fs == dp->obj.fs &&
 800cfe0:	6880      	ldr	r0, [r0, #8]
 800cfe2:	685d      	ldr	r5, [r3, #4]
 800cfe4:	4285      	cmp	r5, r0
 800cfe6:	d1de      	bne.n	800cfa6 <inc_lock+0xe>
			Files[i].clu == dp->obj.sclust &&
 800cfe8:	f8dc 5014 	ldr.w	r5, [ip, #20]
 800cfec:	6898      	ldr	r0, [r3, #8]
 800cfee:	4285      	cmp	r5, r0
 800cff0:	d1d9      	bne.n	800cfa6 <inc_lock+0xe>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800cff2:	2200      	movs	r2, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cff4:	2900      	cmp	r1, #0
 800cff6:	d0eb      	beq.n	800cfd0 <inc_lock+0x38>
 800cff8:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800cffc:	0111      	lsls	r1, r2, #4
 800cffe:	8980      	ldrh	r0, [r0, #12]
 800d000:	2800      	cmp	r0, #0
 800d002:	d1d6      	bne.n	800cfb2 <inc_lock+0x1a>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d004:	1c50      	adds	r0, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d00a:	e013      	b.n	800d034 <inc_lock+0x9c>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d00c:	2001      	movs	r0, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d00e:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 800d010:	ea4f 1102 	mov.w	r1, r2, lsl #4
 800d014:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 800d018:	505c      	str	r4, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 800d01a:	f8dc 4014 	ldr.w	r4, [ip, #20]
 800d01e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 800d022:	e9c2 5401 	strd	r5, r4, [r2, #4]
		Files[i].ctr = 0;
 800d026:	f04f 0400 	mov.w	r4, #0
 800d02a:	8194      	strh	r4, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800d02c:	bf14      	ite	ne
 800d02e:	f44f 7280 	movne.w	r2, #256	; 0x100
 800d032:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800d034:	440b      	add	r3, r1
 800d036:	819a      	strh	r2, [r3, #12]
}
 800d038:	bc70      	pop	{r4, r5, r6}
 800d03a:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d03c:	2002      	movs	r0, #2
 800d03e:	2201      	movs	r2, #1
 800d040:	e7e5      	b.n	800d00e <inc_lock+0x76>
 800d042:	bf00      	nop
 800d044:	2001d728 	.word	0x2001d728

0800d048 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 800d048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d04c:	440a      	add	r2, r1
 800d04e:	460d      	mov	r5, r1
 800d050:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d052:	4f37      	ldr	r7, [pc, #220]	; (800d130 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 800d054:	42aa      	cmp	r2, r5
 800d056:	d012      	beq.n	800d07e <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d058:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d05c:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d060:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d064:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d068:	2919      	cmp	r1, #25
 800d06a:	d9f3      	bls.n	800d054 <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d06c:	2c7f      	cmp	r4, #127	; 0x7f
 800d06e:	bf88      	it	hi
 800d070:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 800d074:	2c00      	cmp	r4, #0
 800d076:	d1ed      	bne.n	800d054 <pattern_matching+0xc>
 800d078:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 800d07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d07e:	1e1f      	subs	r7, r3, #0
 800d080:	f896 8000 	ldrb.w	r8, [r6]
 800d084:	bf18      	it	ne
 800d086:	2701      	movne	r7, #1
 800d088:	f1b8 0f00 	cmp.w	r8, #0
 800d08c:	d100      	bne.n	800d090 <pattern_matching+0x48>
 800d08e:	bb8f      	cbnz	r7, 800d0f4 <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d090:	4c27      	ldr	r4, [pc, #156]	; (800d130 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d092:	4630      	mov	r0, r6
{
 800d094:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 800d096:	46a9      	mov	r9, r5
 800d098:	e010      	b.n	800d0bc <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d09a:	3a20      	subs	r2, #32
 800d09c:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d09e:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d0a2:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d0a6:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d0a8:	f1bc 0f19 	cmp.w	ip, #25
 800d0ac:	d815      	bhi.n	800d0da <pattern_matching+0x92>
 800d0ae:	3b20      	subs	r3, #32
 800d0b0:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d118      	bne.n	800d0e8 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800d0b6:	b1eb      	cbz	r3, 800d0f4 <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800d0b8:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800d0bc:	2b3f      	cmp	r3, #63	; 0x3f
 800d0be:	d01c      	beq.n	800d0fa <pattern_matching+0xb2>
 800d0c0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0c2:	d01a      	beq.n	800d0fa <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d0c4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d0c8:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800d0ca:	2919      	cmp	r1, #25
 800d0cc:	d9e5      	bls.n	800d09a <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800d0ce:	2a7f      	cmp	r2, #127	; 0x7f
 800d0d0:	d9e5      	bls.n	800d09e <pattern_matching+0x56>
 800d0d2:	4423      	add	r3, r4
 800d0d4:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800d0d8:	e7e1      	b.n	800d09e <pattern_matching+0x56>
 800d0da:	2b7f      	cmp	r3, #127	; 0x7f
 800d0dc:	d9e9      	bls.n	800d0b2 <pattern_matching+0x6a>
 800d0de:	4421      	add	r1, r4
 800d0e0:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	d0e6      	beq.n	800d0b6 <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800d0e8:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d0c4      	beq.n	800d078 <pattern_matching+0x30>
 800d0ee:	2f00      	cmp	r7, #0
 800d0f0:	d1cf      	bne.n	800d092 <pattern_matching+0x4a>
 800d0f2:	e7c1      	b.n	800d078 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 800d0f4:	2001      	movs	r0, #1
}
 800d0f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0fa:	4601      	mov	r1, r0
				nm = nx = 0;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	f811 cb01 	ldrb.w	ip, [r1], #1
 800d102:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800d104:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800d108:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 800d10a:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800d10e:	bf0c      	ite	eq
 800d110:	3201      	addeq	r2, #1
 800d112:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800d114:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 800d118:	d0f4      	beq.n	800d104 <pattern_matching+0xbc>
 800d11a:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 800d11e:	d0f1      	beq.n	800d104 <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800d120:	4649      	mov	r1, r9
 800d122:	f7ff ff91 	bl	800d048 <pattern_matching>
 800d126:	2800      	cmp	r0, #0
 800d128:	d1e4      	bne.n	800d0f4 <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 800d12a:	f899 3000 	ldrb.w	r3, [r9]
 800d12e:	e7db      	b.n	800d0e8 <pattern_matching+0xa0>
 800d130:	0801b9fc 	.word	0x0801b9fc

0800d134 <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 800d134:	2300      	movs	r3, #0
{
 800d136:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 800d13a:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 800d13e:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800d140:	69c2      	ldr	r2, [r0, #28]
 800d142:	2a00      	cmp	r2, #0
 800d144:	d063      	beq.n	800d20e <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800d146:	6b02      	ldr	r2, [r0, #48]	; 0x30
 800d148:	4604      	mov	r4, r0
 800d14a:	460d      	mov	r5, r1
 800d14c:	3201      	adds	r2, #1
 800d14e:	d01f      	beq.n	800d190 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d150:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d154:	8818      	ldrh	r0, [r3, #0]
 800d156:	2800      	cmp	r0, #0
 800d158:	d063      	beq.n	800d222 <get_fileinfo+0xee>
 800d15a:	f101 0715 	add.w	r7, r1, #21
 800d15e:	2601      	movs	r6, #1
 800d160:	e000      	b.n	800d164 <get_fileinfo+0x30>
 800d162:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800d164:	2100      	movs	r1, #0
 800d166:	f002 fe33 	bl	800fdd0 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d16a:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800d16c:	2800      	cmp	r0, #0
 800d16e:	d058      	beq.n	800d222 <get_fileinfo+0xee>
 800d170:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800d174:	d055      	beq.n	800d222 <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 800d176:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800d17a:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800d17e:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 800d182:	2800      	cmp	r0, #0
 800d184:	d1ed      	bne.n	800d162 <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d186:	442e      	add	r6, r5
 800d188:	2300      	movs	r3, #0
 800d18a:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d18c:	7da8      	ldrb	r0, [r5, #22]
 800d18e:	e000      	b.n	800d192 <get_fileinfo+0x5e>
 800d190:	4618      	mov	r0, r3
	i = j = 0;
 800d192:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 800d196:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 800d198:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 800d19a:	6a21      	ldr	r1, [r4, #32]
 800d19c:	5c8b      	ldrb	r3, [r1, r2]
 800d19e:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 800d1a0:	2b20      	cmp	r3, #32
 800d1a2:	d01b      	beq.n	800d1dc <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800d1a4:	2b05      	cmp	r3, #5
 800d1a6:	bf08      	it	eq
 800d1a8:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 800d1aa:	2a09      	cmp	r2, #9
 800d1ac:	d031      	beq.n	800d212 <get_fileinfo+0xde>
		fno->altname[j] = c;
 800d1ae:	eb05 010c 	add.w	r1, r5, ip
 800d1b2:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 800d1b4:	b980      	cbnz	r0, 800d1d8 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800d1b6:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 800d1ba:	2e19      	cmp	r6, #25
 800d1bc:	d80b      	bhi.n	800d1d6 <get_fileinfo+0xa2>
 800d1be:	6a26      	ldr	r6, [r4, #32]
 800d1c0:	2a08      	cmp	r2, #8
 800d1c2:	f896 e00c 	ldrb.w	lr, [r6, #12]
 800d1c6:	bf8c      	ite	hi
 800d1c8:	2610      	movhi	r6, #16
 800d1ca:	2608      	movls	r6, #8
 800d1cc:	ea1e 0f06 	tst.w	lr, r6
 800d1d0:	d001      	beq.n	800d1d6 <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 800d1d2:	3320      	adds	r3, #32
 800d1d4:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 800d1d6:	758b      	strb	r3, [r1, #22]
		j++;
 800d1d8:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 800d1dc:	2a0b      	cmp	r2, #11
 800d1de:	d1dc      	bne.n	800d19a <get_fileinfo+0x66>
		fno->fname[j] = 0;
 800d1e0:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 800d1e4:	b928      	cbnz	r0, 800d1f2 <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 800d1e6:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800d1e8:	6a23      	ldr	r3, [r4, #32]
 800d1ea:	7b1b      	ldrb	r3, [r3, #12]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	bf08      	it	eq
 800d1f0:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800d1f6:	6a23      	ldr	r3, [r4, #32]
 800d1f8:	7adb      	ldrb	r3, [r3, #11]
 800d1fa:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 800d1fc:	6a23      	ldr	r3, [r4, #32]
 800d1fe:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800d200:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 800d202:	6a23      	ldr	r3, [r4, #32]
 800d204:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800d208:	0c1a      	lsrs	r2, r3, #16
 800d20a:	80eb      	strh	r3, [r5, #6]
 800d20c:	80aa      	strh	r2, [r5, #4]
}
 800d20e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 800d212:	eb05 010c 	add.w	r1, r5, ip
 800d216:	b900      	cbnz	r0, 800d21a <get_fileinfo+0xe6>
 800d218:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 800d21a:	f10c 0c01 	add.w	ip, ip, #1
 800d21e:	724f      	strb	r7, [r1, #9]
 800d220:	e7c5      	b.n	800d1ae <get_fileinfo+0x7a>
			i = j = 0;
 800d222:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 800d224:	2300      	movs	r3, #0
 800d226:	442e      	add	r6, r5
 800d228:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800d22a:	7da8      	ldrb	r0, [r5, #22]
 800d22c:	e7b1      	b.n	800d192 <get_fileinfo+0x5e>
 800d22e:	bf00      	nop

0800d230 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d230:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d232:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800d236:	2300      	movs	r3, #0
{
 800d238:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d23a:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d23c:	70c3      	strb	r3, [r0, #3]
 800d23e:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d240:	d00c      	beq.n	800d25c <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d242:	460d      	mov	r5, r1
 800d244:	460a      	mov	r2, r1
 800d246:	2301      	movs	r3, #1
 800d248:	f100 0134 	add.w	r1, r0, #52	; 0x34
 800d24c:	7840      	ldrb	r0, [r0, #1]
 800d24e:	f7ff fe77 	bl	800cf40 <disk_read>
 800d252:	b110      	cbz	r0, 800d25a <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d254:	2004      	movs	r0, #4
			fs->winsect = sector;
 800d256:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 800d258:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 800d25a:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d25c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d260:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 800d264:	429a      	cmp	r2, r3
 800d266:	d11a      	bne.n	800d29e <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d268:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800d26c:	2be9      	cmp	r3, #233	; 0xe9
 800d26e:	d007      	beq.n	800d280 <check_fs+0x50>
 800d270:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d272:	4a0d      	ldr	r2, [pc, #52]	; (800d2a8 <check_fs+0x78>)
 800d274:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 800d278:	4293      	cmp	r3, r2
 800d27a:	d001      	beq.n	800d280 <check_fs+0x50>
	return 2;
 800d27c:	2002      	movs	r0, #2
}
 800d27e:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 800d280:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d284:	4a09      	ldr	r2, [pc, #36]	; (800d2ac <check_fs+0x7c>)
 800d286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800d28a:	4293      	cmp	r3, r2
 800d28c:	d009      	beq.n	800d2a2 <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 800d28e:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d292:	4b07      	ldr	r3, [pc, #28]	; (800d2b0 <check_fs+0x80>)
 800d294:	1ac0      	subs	r0, r0, r3
 800d296:	bf18      	it	ne
 800d298:	2001      	movne	r0, #1
 800d29a:	0040      	lsls	r0, r0, #1
}
 800d29c:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d29e:	2003      	movs	r0, #3
}
 800d2a0:	bd70      	pop	{r4, r5, r6, pc}
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d2a2:	2000      	movs	r0, #0
}
 800d2a4:	bd70      	pop	{r4, r5, r6, pc}
 800d2a6:	bf00      	nop
 800d2a8:	009000eb 	.word	0x009000eb
 800d2ac:	00544146 	.word	0x00544146
 800d2b0:	33544146 	.word	0x33544146

0800d2b4 <move_window>:
{
 800d2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d2b6:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
 800d2b8:	b083      	sub	sp, #12
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d2ba:	428e      	cmp	r6, r1
 800d2bc:	d024      	beq.n	800d308 <move_window+0x54>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2be:	78c3      	ldrb	r3, [r0, #3]
 800d2c0:	460d      	mov	r5, r1
 800d2c2:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2c4:	f100 0134 	add.w	r1, r0, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d2c8:	b963      	cbnz	r3, 800d2e4 <move_window+0x30>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	462a      	mov	r2, r5
 800d2ce:	7860      	ldrb	r0, [r4, #1]
 800d2d0:	f7ff fe36 	bl	800cf40 <disk_read>
 800d2d4:	b910      	cbnz	r0, 800d2dc <move_window+0x28>
			fs->winsect = sector;
 800d2d6:	6325      	str	r5, [r4, #48]	; 0x30
}
 800d2d8:	b003      	add	sp, #12
 800d2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 800d2dc:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d2de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800d2e2:	e7f8      	b.n	800d2d6 <move_window+0x22>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d2e4:	2301      	movs	r3, #1
 800d2e6:	4632      	mov	r2, r6
 800d2e8:	7840      	ldrb	r0, [r0, #1]
 800d2ea:	9101      	str	r1, [sp, #4]
 800d2ec:	f7ff fe38 	bl	800cf60 <disk_write>
 800d2f0:	b9d0      	cbnz	r0, 800d328 <move_window+0x74>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800d2f4:	69e3      	ldr	r3, [r4, #28]
 800d2f6:	1ab2      	subs	r2, r6, r2
 800d2f8:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 800d2fa:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d2fc:	429a      	cmp	r2, r3
 800d2fe:	d2e4      	bcs.n	800d2ca <move_window+0x16>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d300:	78a7      	ldrb	r7, [r4, #2]
 800d302:	2f01      	cmp	r7, #1
 800d304:	d804      	bhi.n	800d310 <move_window+0x5c>
 800d306:	e7e0      	b.n	800d2ca <move_window+0x16>
	FRESULT res = FR_OK;
 800d308:	2000      	movs	r0, #0
}
 800d30a:	b003      	add	sp, #12
 800d30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
					wsect += fs->fsize;
 800d30e:	69e3      	ldr	r3, [r4, #28]
 800d310:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d312:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800d314:	2301      	movs	r3, #1
 800d316:	7860      	ldrb	r0, [r4, #1]
 800d318:	4632      	mov	r2, r6
 800d31a:	9101      	str	r1, [sp, #4]
 800d31c:	f7ff fe20 	bl	800cf60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d320:	2f01      	cmp	r7, #1
 800d322:	9901      	ldr	r1, [sp, #4]
 800d324:	d1f3      	bne.n	800d30e <move_window+0x5a>
 800d326:	e7d0      	b.n	800d2ca <move_window+0x16>
			res = FR_DISK_ERR;
 800d328:	2001      	movs	r0, #1
}
 800d32a:	b003      	add	sp, #12
 800d32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d32e:	bf00      	nop

0800d330 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d330:	2300      	movs	r3, #0
{
 800d332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 800d336:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 800d338:	6804      	ldr	r4, [r0, #0]
 800d33a:	b18c      	cbz	r4, 800d360 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d33c:	7825      	ldrb	r5, [r4, #0]
 800d33e:	2d1f      	cmp	r5, #31
 800d340:	d912      	bls.n	800d368 <find_volume+0x38>
 800d342:	2d3a      	cmp	r5, #58	; 0x3a
 800d344:	d010      	beq.n	800d368 <find_volume+0x38>
 800d346:	46a4      	mov	ip, r4
 800d348:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 800d34c:	2b1f      	cmp	r3, #31
 800d34e:	d90d      	bls.n	800d36c <find_volume+0x3c>
 800d350:	2b3a      	cmp	r3, #58	; 0x3a
 800d352:	d1f9      	bne.n	800d348 <find_volume+0x18>
			i = *tp++ - '0';
 800d354:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d356:	45a4      	cmp	ip, r4
 800d358:	d102      	bne.n	800d360 <find_volume+0x30>
 800d35a:	2d30      	cmp	r5, #48	; 0x30
 800d35c:	f000 80da 	beq.w	800d514 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 800d360:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 800d362:	4620      	mov	r0, r4
 800d364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d368:	462b      	mov	r3, r5
 800d36a:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d36c:	2b3a      	cmp	r3, #58	; 0x3a
 800d36e:	d0f1      	beq.n	800d354 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d370:	4ba3      	ldr	r3, [pc, #652]	; (800d600 <find_volume+0x2d0>)
 800d372:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d374:	2d00      	cmp	r5, #0
 800d376:	f000 80c9 	beq.w	800d50c <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 800d37a:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d37c:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d380:	782b      	ldrb	r3, [r5, #0]
 800d382:	b17b      	cbz	r3, 800d3a4 <find_volume+0x74>
		stat = disk_status(fs->drv);
 800d384:	7868      	ldrb	r0, [r5, #1]
 800d386:	f7ff fdbf 	bl	800cf08 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d38a:	07c1      	lsls	r1, r0, #31
 800d38c:	d40a      	bmi.n	800d3a4 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d38e:	2c00      	cmp	r4, #0
 800d390:	f000 80ab 	beq.w	800d4ea <find_volume+0x1ba>
 800d394:	f010 0404 	ands.w	r4, r0, #4
 800d398:	f000 80a7 	beq.w	800d4ea <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 800d39c:	240a      	movs	r4, #10
}
 800d39e:	4620      	mov	r0, r4
 800d3a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 800d3a4:	2000      	movs	r0, #0
 800d3a6:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d3a8:	f7ff fdb8 	bl	800cf1c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d3ac:	07c2      	lsls	r2, r0, #31
 800d3ae:	f100 809f 	bmi.w	800d4f0 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d3b2:	b10c      	cbz	r4, 800d3b8 <find_volume+0x88>
 800d3b4:	0743      	lsls	r3, r0, #29
 800d3b6:	d4f1      	bmi.n	800d39c <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d3b8:	2100      	movs	r1, #0
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f7ff ff38 	bl	800d230 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d3c0:	2802      	cmp	r0, #2
 800d3c2:	d077      	beq.n	800d4b4 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d3c4:	2804      	cmp	r0, #4
 800d3c6:	f000 809f 	beq.w	800d508 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d3ca:	2801      	cmp	r0, #1
 800d3cc:	f200 808c 	bhi.w	800d4e8 <find_volume+0x1b8>
	bsect = 0;
 800d3d0:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d3d2:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 800d3d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d3da:	f040 8085 	bne.w	800d4e8 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d3de:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d3e2:	b902      	cbnz	r2, 800d3e6 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 800d3e4:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d3e6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 800d3ea:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d3ec:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d3ee:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d3f0:	2901      	cmp	r1, #1
 800d3f2:	d879      	bhi.n	800d4e8 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d3f4:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 800d3f8:	b288      	uxth	r0, r1
 800d3fa:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d3fc:	2800      	cmp	r0, #0
 800d3fe:	d073      	beq.n	800d4e8 <find_volume+0x1b8>
 800d400:	1e48      	subs	r0, r1, #1
 800d402:	4208      	tst	r0, r1
 800d404:	d170      	bne.n	800d4e8 <find_volume+0x1b8>
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d406:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d40a:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d40e:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d412:	d169      	bne.n	800d4e8 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d414:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d418:	b900      	cbnz	r0, 800d41c <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 800d41a:	6d68      	ldr	r0, [r5, #84]	; 0x54
		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d41c:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d420:	2f00      	cmp	r7, #0
 800d422:	d061      	beq.n	800d4e8 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d424:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d428:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 800d42c:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d42e:	42b0      	cmp	r0, r6
 800d430:	d35a      	bcc.n	800d4e8 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d432:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d436:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d438:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d43c:	d354      	bcc.n	800d4e8 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d43e:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 800d442:	4288      	cmp	r0, r1
 800d444:	f200 8084 	bhi.w	800d550 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d448:	f640 71f5 	movw	r1, #4085	; 0xff5
 800d44c:	4288      	cmp	r0, r1
 800d44e:	f200 80a3 	bhi.w	800d598 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d452:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d454:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d456:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800d458:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d45a:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800d45c:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d45e:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d460:	f1bc 0f00 	cmp.w	ip, #0
 800d464:	d040      	beq.n	800d4e8 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d466:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 800d46a:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d46e:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d470:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 800d474:	2001      	movs	r0, #1
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d476:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d47a:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d47c:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 800d480:	d332      	bcc.n	800d4e8 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d482:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d486:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d488:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 800d48c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 800d48e:	495d      	ldr	r1, [pc, #372]	; (800d604 <find_volume+0x2d4>)
	fs->fs_type = fmt;		/* FAT sub-type */
 800d490:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d492:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d494:	485c      	ldr	r0, [pc, #368]	; (800d608 <find_volume+0x2d8>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d496:	4a5d      	ldr	r2, [pc, #372]	; (800d60c <find_volume+0x2dc>)
	fs->id = ++Fsid;		/* File system mount ID */
 800d498:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 800d49a:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d49c:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d49e:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d4a0:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 800d4a2:	800b      	strh	r3, [r1, #0]
 800d4a4:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d4a6:	f000 8085 	beq.w	800d5b4 <find_volume+0x284>
 800d4aa:	6913      	ldr	r3, [r2, #16]
 800d4ac:	429d      	cmp	r5, r3
 800d4ae:	d06f      	beq.n	800d590 <find_volume+0x260>
	return FR_OK;
 800d4b0:	2400      	movs	r4, #0
 800d4b2:	e01a      	b.n	800d4ea <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4b4:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 800d4b8:	b10e      	cbz	r6, 800d4be <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 800d4ba:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4be:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 800d4c2:	b10c      	cbz	r4, 800d4c8 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 800d4c4:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4c8:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 800d4cc:	b303      	cbz	r3, 800d510 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 800d4ce:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d4d2:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 800d4d6:	b10f      	cbz	r7, 800d4dc <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 800d4d8:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4dc:	b9f6      	cbnz	r6, 800d51c <find_volume+0x1ec>
 800d4de:	bb2c      	cbnz	r4, 800d52c <find_volume+0x1fc>
 800d4e0:	f1b8 0f00 	cmp.w	r8, #0
 800d4e4:	d12c      	bne.n	800d540 <find_volume+0x210>
 800d4e6:	b93f      	cbnz	r7, 800d4f8 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d4e8:	240d      	movs	r4, #13
}
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d4f0:	2403      	movs	r4, #3
}
 800d4f2:	4620      	mov	r0, r4
 800d4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4f8:	4639      	mov	r1, r7
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	f7ff fe98 	bl	800d230 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d500:	2801      	cmp	r0, #1
 800d502:	d95a      	bls.n	800d5ba <find_volume+0x28a>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d504:	2804      	cmp	r0, #4
 800d506:	d1ef      	bne.n	800d4e8 <find_volume+0x1b8>
 800d508:	2401      	movs	r4, #1
 800d50a:	e7ee      	b.n	800d4ea <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d50c:	240c      	movs	r4, #12
 800d50e:	e7ec      	b.n	800d4ea <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d510:	4698      	mov	r8, r3
 800d512:	e7de      	b.n	800d4d2 <find_volume+0x1a2>
					*path = ++tt;
 800d514:	f10c 0301 	add.w	r3, ip, #1
 800d518:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d51a:	e729      	b.n	800d370 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d51c:	4631      	mov	r1, r6
 800d51e:	4628      	mov	r0, r5
 800d520:	f7ff fe86 	bl	800d230 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d524:	2801      	cmp	r0, #1
 800d526:	d8da      	bhi.n	800d4de <find_volume+0x1ae>
 800d528:	4634      	mov	r4, r6
 800d52a:	e752      	b.n	800d3d2 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d52c:	4621      	mov	r1, r4
 800d52e:	4628      	mov	r0, r5
 800d530:	f7ff fe7e 	bl	800d230 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d534:	2801      	cmp	r0, #1
 800d536:	f67f af4c 	bls.w	800d3d2 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d53a:	f1b8 0f00 	cmp.w	r8, #0
 800d53e:	d0d2      	beq.n	800d4e6 <find_volume+0x1b6>
 800d540:	4641      	mov	r1, r8
 800d542:	4628      	mov	r0, r5
 800d544:	f7ff fe74 	bl	800d230 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d548:	2801      	cmp	r0, #1
 800d54a:	d8cc      	bhi.n	800d4e6 <find_volume+0x1b6>
 800d54c:	4644      	mov	r4, r8
 800d54e:	e740      	b.n	800d3d2 <find_volume+0xa2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d550:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d554:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d556:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d558:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d55a:	ea5c 0303 	orrs.w	r3, ip, r3
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d55e:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d560:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800d562:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 800d564:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d566:	d1bf      	bne.n	800d4e8 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d568:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 800d56a:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d56c:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d570:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d572:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 800d576:	d3b7      	bcc.n	800d4e8 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d578:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d57c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 800d580:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d582:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 800d584:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d586:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d58a:	d018      	beq.n	800d5be <find_volume+0x28e>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d58c:	2003      	movs	r0, #3
 800d58e:	e77e      	b.n	800d48e <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d590:	2300      	movs	r3, #0
	return FR_OK;
 800d592:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d594:	6113      	str	r3, [r2, #16]
 800d596:	e7a8      	b.n	800d4ea <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d598:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d59a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 800d59c:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 800d59e:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d5a0:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 800d5a2:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d5a4:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d5a6:	f1bc 0f00 	cmp.w	ip, #0
 800d5aa:	d09d      	beq.n	800d4e8 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d5ac:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d5ae:	0049      	lsls	r1, r1, #1
 800d5b0:	2002      	movs	r0, #2
 800d5b2:	e760      	b.n	800d476 <find_volume+0x146>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800d5b4:	2300      	movs	r3, #0
 800d5b6:	6013      	str	r3, [r2, #0]
 800d5b8:	e777      	b.n	800d4aa <find_volume+0x17a>
 800d5ba:	463c      	mov	r4, r7
 800d5bc:	e709      	b.n	800d3d2 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d5be:	1c61      	adds	r1, r4, #1
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	f7ff fe77 	bl	800d2b4 <move_window>
 800d5c6:	2800      	cmp	r0, #0
 800d5c8:	d1e0      	bne.n	800d58c <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d5ca:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800d5ce:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 800d5d2:	7128      	strb	r0, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d5d4:	429a      	cmp	r2, r3
 800d5d6:	d1d9      	bne.n	800d58c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 800d5d8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d5da:	4b0d      	ldr	r3, [pc, #52]	; (800d610 <find_volume+0x2e0>)
 800d5dc:	429a      	cmp	r2, r3
 800d5de:	d1d5      	bne.n	800d58c <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d5e0:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 800d5e4:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d5e8:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800d5ec:	3320      	adds	r3, #32
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d1cc      	bne.n	800d58c <find_volume+0x25c>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d5f2:	2003      	movs	r0, #3
 800d5f4:	e9d5 3287 	ldrd	r3, r2, [r5, #540]	; 0x21c
 800d5f8:	e9c5 2304 	strd	r2, r3, [r5, #16]
 800d5fc:	e747      	b.n	800d48e <find_volume+0x15e>
 800d5fe:	bf00      	nop
 800d600:	2001d724 	.word	0x2001d724
 800d604:	2001d748 	.word	0x2001d748
 800d608:	2001d74c 	.word	0x2001d74c
 800d60c:	2001d728 	.word	0x2001d728
 800d610:	41615252 	.word	0x41615252

0800d614 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800d614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		switch (fs->fs_type) {
 800d618:	7806      	ldrb	r6, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 800d61a:	4604      	mov	r4, r0
 800d61c:	460d      	mov	r5, r1
 800d61e:	4690      	mov	r8, r2
		switch (fs->fs_type) {
 800d620:	2e02      	cmp	r6, #2
 800d622:	d007      	beq.n	800d634 <put_fat.part.0+0x20>
 800d624:	2e03      	cmp	r6, #3
 800d626:	d041      	beq.n	800d6ac <put_fat.part.0+0x98>
 800d628:	2e01      	cmp	r6, #1
 800d62a:	d01b      	beq.n	800d664 <put_fat.part.0+0x50>
 800d62c:	2702      	movs	r7, #2
}
 800d62e:	4638      	mov	r0, r7
 800d630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d634:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d636:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800d63a:	f7ff fe3b 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800d63e:	4607      	mov	r7, r0
 800d640:	2800      	cmp	r0, #0
 800d642:	d1f4      	bne.n	800d62e <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d644:	006d      	lsls	r5, r5, #1
 800d646:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 800d64a:	f3c8 2207 	ubfx	r2, r8, #8, #8
			fs->wflag = 1;
 800d64e:	2101      	movs	r1, #1
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d650:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
}
 800d654:	4638      	mov	r0, r7
	*ptr++ = (BYTE)val; val >>= 8;
 800d656:	f803 8005 	strb.w	r8, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d65a:	442b      	add	r3, r5
	*ptr++ = (BYTE)val;
 800d65c:	705a      	strb	r2, [r3, #1]
			fs->wflag = 1;
 800d65e:	70e1      	strb	r1, [r4, #3]
}
 800d660:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d664:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d666:	eb05 0955 	add.w	r9, r5, r5, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d66a:	eb01 2159 	add.w	r1, r1, r9, lsr #9
 800d66e:	f7ff fe21 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800d672:	4607      	mov	r7, r0
 800d674:	2800      	cmp	r0, #0
 800d676:	d1da      	bne.n	800d62e <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d678:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 800d67a:	f109 0b01 	add.w	fp, r9, #1
 800d67e:	f104 0a34 	add.w	sl, r4, #52	; 0x34
 800d682:	f3c9 0908 	ubfx	r9, r9, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d686:	d52a      	bpl.n	800d6de <put_fat.part.0+0xca>
 800d688:	f81a 3009 	ldrb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d68c:	4620      	mov	r0, r4
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d68e:	f003 030f 	and.w	r3, r3, #15
 800d692:	ea43 1308 	orr.w	r3, r3, r8, lsl #4
 800d696:	f80a 3009 	strb.w	r3, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d69a:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d69c:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d69e:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d6a2:	f7ff fe07 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800d6a6:	b3a0      	cbz	r0, 800d712 <put_fat.part.0+0xfe>
 800d6a8:	4607      	mov	r7, r0
	return res;
 800d6aa:	e7c0      	b.n	800d62e <put_fat.part.0+0x1a>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d6ac:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d6ae:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800d6b2:	f7ff fdff 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800d6b6:	4607      	mov	r7, r0
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d1b8      	bne.n	800d62e <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6bc:	00ad      	lsls	r5, r5, #2
 800d6be:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800d6c2:	f028 4270 	bic.w	r2, r8, #4026531840	; 0xf0000000
			fs->wflag = 1;
 800d6c6:	2001      	movs	r0, #1
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6c8:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d6cc:	594b      	ldr	r3, [r1, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d6ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800d6d2:	4313      	orrs	r3, r2
	*ptr++ = (BYTE)val; val >>= 8;
 800d6d4:	514b      	str	r3, [r1, r5]
			fs->wflag = 1;
 800d6d6:	70e0      	strb	r0, [r4, #3]
}
 800d6d8:	4638      	mov	r0, r7
 800d6da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d6de:	f80a 8009 	strb.w	r8, [sl, r9]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 800d6e6:	70e6      	strb	r6, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d6e8:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800d6ec:	f7ff fde2 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d1d9      	bne.n	800d6a8 <put_fat.part.0+0x94>
			p = fs->win + bc % SS(fs);
 800d6f4:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d6f8:	f3c8 2203 	ubfx	r2, r8, #8, #4
 800d6fc:	f81a 300b 	ldrb.w	r3, [sl, fp]
			p = fs->win + bc % SS(fs);
 800d700:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d702:	f023 030f 	bic.w	r3, r3, #15
 800d706:	4313      	orrs	r3, r2
			fs->wflag = 1;
 800d708:	2201      	movs	r2, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d70a:	f88a 3000 	strb.w	r3, [sl]
			fs->wflag = 1;
 800d70e:	70e2      	strb	r2, [r4, #3]
			break;
 800d710:	e78d      	b.n	800d62e <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 800d712:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d716:	f3c8 1307 	ubfx	r3, r8, #4, #8
			p = fs->win + bc % SS(fs);
 800d71a:	44da      	add	sl, fp
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d71c:	e7f4      	b.n	800d708 <put_fat.part.0+0xf4>
 800d71e:	bf00      	nop

0800d720 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d720:	2901      	cmp	r1, #1
 800d722:	d90e      	bls.n	800d742 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 800d724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d726:	6983      	ldr	r3, [r0, #24]
 800d728:	460c      	mov	r4, r1
 800d72a:	4605      	mov	r5, r0
 800d72c:	4299      	cmp	r1, r3
 800d72e:	d206      	bcs.n	800d73e <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 800d730:	7803      	ldrb	r3, [r0, #0]
 800d732:	2b02      	cmp	r3, #2
 800d734:	d021      	beq.n	800d77a <get_fat.isra.0+0x5a>
 800d736:	2b03      	cmp	r3, #3
 800d738:	d010      	beq.n	800d75c <get_fat.isra.0+0x3c>
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d003      	beq.n	800d746 <get_fat.isra.0+0x26>
 800d73e:	2001      	movs	r0, #1
}
 800d740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 800d742:	2001      	movs	r0, #1
}
 800d744:	4770      	bx	lr
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d746:	6a41      	ldr	r1, [r0, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800d748:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d74c:	eb01 2157 	add.w	r1, r1, r7, lsr #9
 800d750:	f7ff fdb0 	bl	800d2b4 <move_window>
 800d754:	b1f0      	cbz	r0, 800d794 <get_fat.isra.0+0x74>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 800d75a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d75c:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d75e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800d762:	f7ff fda7 	bl	800d2b4 <move_window>
 800d766:	2800      	cmp	r0, #0
 800d768:	d1f5      	bne.n	800d756 <get_fat.isra.0+0x36>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d76a:	00a4      	lsls	r4, r4, #2
 800d76c:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800d770:	4425      	add	r5, r4
 800d772:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d774:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 800d778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d77a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800d77c:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800d780:	f7ff fd98 	bl	800d2b4 <move_window>
 800d784:	2800      	cmp	r0, #0
 800d786:	d1e6      	bne.n	800d756 <get_fat.isra.0+0x36>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d788:	0063      	lsls	r3, r4, #1
 800d78a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800d78e:	442b      	add	r3, r5
 800d790:	8e98      	ldrh	r0, [r3, #52]	; 0x34
}
 800d792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			wc = fs->win[bc++ % SS(fs)];
 800d794:	f3c7 0308 	ubfx	r3, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d798:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800d79a:	3701      	adds	r7, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d79c:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800d79e:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7a0:	eb01 2157 	add.w	r1, r1, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800d7a4:	f893 6034 	ldrb.w	r6, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d7a8:	f7ff fd84 	bl	800d2b4 <move_window>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d1d2      	bne.n	800d756 <get_fat.isra.0+0x36>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d7b0:	f3c7 0708 	ubfx	r7, r7, #0, #9
 800d7b4:	442f      	add	r7, r5
 800d7b6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800d7ba:	ea46 2003 	orr.w	r0, r6, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d7be:	07e3      	lsls	r3, r4, #31
 800d7c0:	bf4c      	ite	mi
 800d7c2:	0900      	lsrmi	r0, r0, #4
 800d7c4:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
}
 800d7c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d7ca:	bf00      	nop

0800d7cc <dir_read>:
{
 800d7cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 800d7d0:	69c6      	ldr	r6, [r0, #28]
{
 800d7d2:	b083      	sub	sp, #12
 800d7d4:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800d7d6:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 800d7d8:	2e00      	cmp	r6, #0
 800d7da:	d064      	beq.n	800d8a6 <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 800d7dc:	23ff      	movs	r3, #255	; 0xff
 800d7de:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d7e0:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 800d7e4:	4698      	mov	r8, r3
 800d7e6:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 800d7e8:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800d7ea:	42b5      	cmp	r5, r6
 800d7ec:	d014      	beq.n	800d818 <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800d7ee:	78fb      	ldrb	r3, [r7, #3]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	f040 80d1 	bne.w	800d998 <dir_read+0x1cc>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	4632      	mov	r2, r6
 800d7fa:	4649      	mov	r1, r9
 800d7fc:	7878      	ldrb	r0, [r7, #1]
 800d7fe:	f7ff fb9f 	bl	800cf40 <disk_read>
 800d802:	b140      	cbz	r0, 800d816 <dir_read+0x4a>
			fs->winsect = sector;
 800d804:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800d808:	2001      	movs	r0, #1
			fs->winsect = sector;
 800d80a:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800d80c:	2300      	movs	r3, #0
 800d80e:	61e3      	str	r3, [r4, #28]
}
 800d810:	b003      	add	sp, #12
 800d812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800d816:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800d818:	6a21      	ldr	r1, [r4, #32]
 800d81a:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 800d81c:	2a00      	cmp	r2, #0
 800d81e:	d042      	beq.n	800d8a6 <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d820:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d822:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800d824:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d828:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800d82a:	d00a      	beq.n	800d842 <dir_read+0x76>
 800d82c:	2a2e      	cmp	r2, #46	; 0x2e
 800d82e:	d008      	beq.n	800d842 <dir_read+0x76>
 800d830:	f023 0020 	bic.w	r0, r3, #32
 800d834:	f1a0 0008 	sub.w	r0, r0, #8
 800d838:	fab0 f080 	clz	r0, r0
 800d83c:	0940      	lsrs	r0, r0, #5
 800d83e:	4550      	cmp	r0, sl
 800d840:	d038      	beq.n	800d8b4 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d842:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d846:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800d848:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d84a:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d84c:	69e6      	ldr	r6, [r4, #28]
 800d84e:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800d852:	d228      	bcs.n	800d8a6 <dir_read+0xda>
 800d854:	b33e      	cbz	r6, 800d8a6 <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d856:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800d85a:	bb32      	cbnz	r2, 800d8aa <dir_read+0xde>
		dp->sect++;				/* Next sector */
 800d85c:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800d85e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800d860:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800d862:	b961      	cbnz	r1, 800d87e <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d864:	891a      	ldrh	r2, [r3, #8]
 800d866:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 800d86a:	d91c      	bls.n	800d8a6 <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d86c:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d86e:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d870:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d872:	2e00      	cmp	r6, #0
 800d874:	d1b8      	bne.n	800d7e8 <dir_read+0x1c>
		res = move_window(fs, dp->sect);
 800d876:	2000      	movs	r0, #0
}
 800d878:	b003      	add	sp, #12
 800d87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d87e:	895a      	ldrh	r2, [r3, #10]
 800d880:	3a01      	subs	r2, #1
 800d882:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 800d886:	d1f1      	bne.n	800d86c <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d888:	4618      	mov	r0, r3
 800d88a:	9301      	str	r3, [sp, #4]
 800d88c:	f7ff ff48 	bl	800d720 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d890:	2801      	cmp	r0, #1
 800d892:	f240 80b5 	bls.w	800da00 <dir_read+0x234>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d896:	1c43      	adds	r3, r0, #1
 800d898:	f000 8085 	beq.w	800d9a6 <dir_read+0x1da>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d89c:	9b01      	ldr	r3, [sp, #4]
 800d89e:	699a      	ldr	r2, [r3, #24]
 800d8a0:	4290      	cmp	r0, r2
 800d8a2:	f0c0 80a1 	bcc.w	800d9e8 <dir_read+0x21c>
	FRESULT res = FR_NO_FILE;
 800d8a6:	2004      	movs	r0, #4
 800d8a8:	e7b0      	b.n	800d80c <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d8aa:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800d8ac:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d8ae:	4413      	add	r3, r2
 800d8b0:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800d8b2:	e799      	b.n	800d7e8 <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 800d8b4:	2b0f      	cmp	r3, #15
 800d8b6:	f040 80ab 	bne.w	800da10 <dir_read+0x244>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800d8ba:	0650      	lsls	r0, r2, #25
 800d8bc:	d575      	bpl.n	800d9aa <dir_read+0x1de>
						sum = dp->dir[LDIR_Chksum];
 800d8be:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 800d8c0:	f002 08bf 	and.w	r8, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800d8c4:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 800d8c6:	6963      	ldr	r3, [r4, #20]
 800d8c8:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d8ca:	7b4b      	ldrb	r3, [r1, #13]
 800d8cc:	9a00      	ldr	r2, [sp, #0]
 800d8ce:	4293      	cmp	r3, r2
 800d8d0:	d1b7      	bne.n	800d842 <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800d8d2:	8b4b      	ldrh	r3, [r1, #26]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1b4      	bne.n	800d842 <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800d8d8:	780b      	ldrb	r3, [r1, #0]
 800d8da:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 800d8de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8e2:	3b01      	subs	r3, #1
 800d8e4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800d8e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800d8ec:	2bfe      	cmp	r3, #254	; 0xfe
 800d8ee:	d8a8      	bhi.n	800d842 <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d8f0:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 800d8f2:	1c5a      	adds	r2, r3, #1
 800d8f4:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 800d8f8:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f040 8090 	bne.w	800da22 <dir_read+0x256>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d902:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d906:	429e      	cmp	r6, r3
 800d908:	d19b      	bne.n	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d90a:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d90e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d912:	459e      	cmp	lr, r3
 800d914:	d195      	bne.n	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d916:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d91a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d91e:	459c      	cmp	ip, r3
 800d920:	d18f      	bne.n	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d922:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d92a:	429e      	cmp	r6, r3
 800d92c:	d189      	bne.n	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d92e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d932:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d936:	459c      	cmp	ip, r3
 800d938:	d183      	bne.n	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d93a:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d93e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d942:	459e      	cmp	lr, r3
 800d944:	f47f af7d 	bne.w	800d842 <dir_read+0x76>
	rv = rv << 8 | ptr[0];
 800d948:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d94a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d94e:	429e      	cmp	r6, r3
 800d950:	f47f af77 	bne.w	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d954:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d958:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d95c:	459c      	cmp	ip, r3
 800d95e:	f47f af70 	bne.w	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d962:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d968:	429e      	cmp	r6, r3
 800d96a:	f47f af6a 	bne.w	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d96e:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d972:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d976:	459c      	cmp	ip, r3
 800d978:	f47f af63 	bne.w	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d97c:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d97e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d982:	429e      	cmp	r6, r3
 800d984:	f47f af5d 	bne.w	800d842 <dir_read+0x76>
	rv = ptr[1];
 800d988:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800d98c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d990:	459c      	cmp	ip, r3
 800d992:	f000 80ca 	beq.w	800db2a <dir_read+0x35e>
 800d996:	e754      	b.n	800d842 <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d998:	2301      	movs	r3, #1
 800d99a:	462a      	mov	r2, r5
 800d99c:	4649      	mov	r1, r9
 800d99e:	7878      	ldrb	r0, [r7, #1]
 800d9a0:	f7ff fade 	bl	800cf60 <disk_write>
 800d9a4:	b128      	cbz	r0, 800d9b2 <dir_read+0x1e6>
	FRESULT res = FR_NO_FILE;
 800d9a6:	2001      	movs	r0, #1
 800d9a8:	e730      	b.n	800d80c <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800d9aa:	4542      	cmp	r2, r8
 800d9ac:	f47f af49 	bne.w	800d842 <dir_read+0x76>
 800d9b0:	e78b      	b.n	800d8ca <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d9b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800d9b4:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d9b6:	1aea      	subs	r2, r5, r3
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	f4bf af1b 	bcs.w	800d7f6 <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9c0:	f897 b002 	ldrb.w	fp, [r7, #2]
 800d9c4:	f1bb 0f01 	cmp.w	fp, #1
 800d9c8:	d801      	bhi.n	800d9ce <dir_read+0x202>
 800d9ca:	e714      	b.n	800d7f6 <dir_read+0x2a>
					wsect += fs->fsize;
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9d0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800d9d4:	2301      	movs	r3, #1
 800d9d6:	4649      	mov	r1, r9
 800d9d8:	462a      	mov	r2, r5
 800d9da:	7878      	ldrb	r0, [r7, #1]
 800d9dc:	f7ff fac0 	bl	800cf60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d9e0:	f1bb 0f01 	cmp.w	fp, #1
 800d9e4:	d1f2      	bne.n	800d9cc <dir_read+0x200>
 800d9e6:	e706      	b.n	800d7f6 <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 800d9e8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800d9ea:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d9ec:	699a      	ldr	r2, [r3, #24]
 800d9ee:	3a02      	subs	r2, #2
 800d9f0:	4290      	cmp	r0, r2
 800d9f2:	d207      	bcs.n	800da04 <dir_read+0x238>
	return clst * fs->csize + fs->database;
 800d9f4:	895a      	ldrh	r2, [r3, #10]
 800d9f6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800d9f8:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 800d9fc:	61e6      	str	r6, [r4, #28]
 800d9fe:	e735      	b.n	800d86c <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800da00:	2002      	movs	r0, #2
 800da02:	e703      	b.n	800d80c <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da04:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 800da06:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 800da0a:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800da0c:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 800da0e:	e732      	b.n	800d876 <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800da10:	f1b8 0f00 	cmp.w	r8, #0
 800da14:	f000 8096 	beq.w	800db44 <dir_read+0x378>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800da18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800da1c:	2000      	movs	r0, #0
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800da1e:	6323      	str	r3, [r4, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800da20:	e6f6      	b.n	800d810 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da22:	2aff      	cmp	r2, #255	; 0xff
 800da24:	f000 80d9 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da28:	f825 6012 	strh.w	r6, [r5, r2, lsl #1]
 800da2c:	0050      	lsls	r0, r2, #1
 800da2e:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 800da32:	1c9a      	adds	r2, r3, #2
		if (wc) {
 800da34:	2e00      	cmp	r6, #0
 800da36:	f43f af6a 	beq.w	800d90e <dir_read+0x142>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da3a:	2aff      	cmp	r2, #255	; 0xff
 800da3c:	f000 80cd 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da40:	4428      	add	r0, r5
 800da42:	1cda      	adds	r2, r3, #3
 800da44:	f8a0 e002 	strh.w	lr, [r0, #2]
 800da48:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 800da4c:	f1be 0f00 	cmp.w	lr, #0
 800da50:	f43f af63 	beq.w	800d91a <dir_read+0x14e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da54:	2aff      	cmp	r2, #255	; 0xff
 800da56:	f000 80c0 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da5a:	f8a0 c004 	strh.w	ip, [r0, #4]
 800da5e:	1d1a      	adds	r2, r3, #4
	rv = ptr[1];
 800da60:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 800da64:	f1bc 0f00 	cmp.w	ip, #0
 800da68:	f43f af5d 	beq.w	800d926 <dir_read+0x15a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da6c:	2aff      	cmp	r2, #255	; 0xff
 800da6e:	f000 80b4 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da72:	80c6      	strh	r6, [r0, #6]
 800da74:	1d5a      	adds	r2, r3, #5
	rv = ptr[1];
 800da76:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 800da7a:	2e00      	cmp	r6, #0
 800da7c:	f43f af59 	beq.w	800d932 <dir_read+0x166>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da80:	2aff      	cmp	r2, #255	; 0xff
 800da82:	f000 80aa 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da86:	f8a0 c008 	strh.w	ip, [r0, #8]
 800da8a:	1d9a      	adds	r2, r3, #6
	rv = ptr[1];
 800da8c:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 800da90:	f1bc 0f00 	cmp.w	ip, #0
 800da94:	f43f af53 	beq.w	800d93e <dir_read+0x172>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800da98:	2aff      	cmp	r2, #255	; 0xff
 800da9a:	f000 809e 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800da9e:	f8a0 e00a 	strh.w	lr, [r0, #10]
 800daa2:	1dda      	adds	r2, r3, #7
	rv = ptr[1];
 800daa4:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 800daa6:	f1be 0f00 	cmp.w	lr, #0
 800daaa:	f43f af4e 	beq.w	800d94a <dir_read+0x17e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800daae:	2aff      	cmp	r2, #255	; 0xff
 800dab0:	f000 8093 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800dab4:	8186      	strh	r6, [r0, #12]
 800dab6:	f103 0208 	add.w	r2, r3, #8
	rv = ptr[1];
 800daba:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 800dabe:	2e00      	cmp	r6, #0
 800dac0:	f43f af4a 	beq.w	800d958 <dir_read+0x18c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800dac4:	2aff      	cmp	r2, #255	; 0xff
 800dac6:	f000 8088 	beq.w	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800daca:	f8a0 c00e 	strh.w	ip, [r0, #14]
 800dace:	f103 0209 	add.w	r2, r3, #9
	rv = ptr[1];
 800dad2:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 800dad4:	f1bc 0f00 	cmp.w	ip, #0
 800dad8:	f43f af44 	beq.w	800d964 <dir_read+0x198>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800dadc:	2aff      	cmp	r2, #255	; 0xff
 800dade:	d07c      	beq.n	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800dae0:	8206      	strh	r6, [r0, #16]
 800dae2:	f103 020a 	add.w	r2, r3, #10
	rv = ptr[1];
 800dae6:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 800daea:	2e00      	cmp	r6, #0
 800daec:	f43f af41 	beq.w	800d972 <dir_read+0x1a6>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800daf0:	2aff      	cmp	r2, #255	; 0xff
 800daf2:	d072      	beq.n	800dbda <dir_read+0x40e>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800daf4:	f8a0 c012 	strh.w	ip, [r0, #18]
 800daf8:	f103 020b 	add.w	r2, r3, #11
	rv = ptr[1];
 800dafc:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 800dafe:	f1bc 0f00 	cmp.w	ip, #0
 800db02:	f43f af3c 	beq.w	800d97e <dir_read+0x1b2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800db06:	2aff      	cmp	r2, #255	; 0xff
 800db08:	f43f ae9b 	beq.w	800d842 <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800db0c:	8286      	strh	r6, [r0, #20]
 800db0e:	f103 020c 	add.w	r2, r3, #12
	rv = ptr[1];
 800db12:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 800db16:	2e00      	cmp	r6, #0
 800db18:	f43f af38 	beq.w	800d98c <dir_read+0x1c0>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800db1c:	2aff      	cmp	r2, #255	; 0xff
 800db1e:	f43f ae90 	beq.w	800d842 <dir_read+0x76>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800db22:	f103 020d 	add.w	r2, r3, #13
 800db26:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800db2a:	780b      	ldrb	r3, [r1, #0]
 800db2c:	0659      	lsls	r1, r3, #25
 800db2e:	d504      	bpl.n	800db3a <dir_read+0x36e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800db30:	2aff      	cmp	r2, #255	; 0xff
 800db32:	d052      	beq.n	800dbda <dir_read+0x40e>
		lfnbuf[i] = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	f825 3012 	strh.w	r3, [r5, r2, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800db3a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800db3e:	fa5f f888 	uxtb.w	r8, r8
 800db42:	e680      	b.n	800d846 <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800db44:	780b      	ldrb	r3, [r1, #0]
 800db46:	01da      	lsls	r2, r3, #7
 800db48:	ea42 0253 	orr.w	r2, r2, r3, lsr #1
 800db4c:	784b      	ldrb	r3, [r1, #1]
 800db4e:	441a      	add	r2, r3
 800db50:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800db54:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800db58:	788a      	ldrb	r2, [r1, #2]
 800db5a:	fa52 f383 	uxtab	r3, r2, r3
 800db5e:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800db62:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800db66:	78cb      	ldrb	r3, [r1, #3]
 800db68:	fa53 f282 	uxtab	r2, r3, r2
 800db6c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800db70:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800db74:	790a      	ldrb	r2, [r1, #4]
 800db76:	fa52 f383 	uxtab	r3, r2, r3
 800db7a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800db7e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800db82:	794b      	ldrb	r3, [r1, #5]
 800db84:	fa53 f282 	uxtab	r2, r3, r2
 800db88:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800db8c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800db90:	798a      	ldrb	r2, [r1, #6]
 800db92:	fa52 f383 	uxtab	r3, r2, r3
 800db96:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800db9a:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800db9e:	79cb      	ldrb	r3, [r1, #7]
 800dba0:	fa53 f282 	uxtab	r2, r3, r2
 800dba4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800dba8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800dbac:	7a0a      	ldrb	r2, [r1, #8]
 800dbae:	fa52 f383 	uxtab	r3, r2, r3
 800dbb2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800dbb6:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800dbba:	7a4b      	ldrb	r3, [r1, #9]
 800dbbc:	7a89      	ldrb	r1, [r1, #10]
 800dbbe:	fa53 f282 	uxtab	r2, r3, r2
 800dbc2:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800dbc6:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dbca:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800dbcc:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	4293      	cmp	r3, r2
 800dbd4:	f47f af20 	bne.w	800da18 <dir_read+0x24c>
 800dbd8:	e64d      	b.n	800d876 <dir_read+0xaa>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800dbda:	4690      	mov	r8, r2
 800dbdc:	e633      	b.n	800d846 <dir_read+0x7a>
 800dbde:	bf00      	nop

0800dbe0 <sync_fs>:
{
 800dbe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dbe2:	78c3      	ldrb	r3, [r0, #3]
{
 800dbe4:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dbe6:	b95b      	cbnz	r3, 800dc00 <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dbe8:	7823      	ldrb	r3, [r4, #0]
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d029      	beq.n	800dc42 <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dbee:	2200      	movs	r2, #0
 800dbf0:	7860      	ldrb	r0, [r4, #1]
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	f7ff f9c4 	bl	800cf80 <disk_ioctl>
			res = FR_DISK_ERR;
 800dbf8:	3800      	subs	r0, #0
 800dbfa:	bf18      	it	ne
 800dbfc:	2001      	movne	r0, #1
}
 800dbfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 800dc00:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dc02:	f100 0734 	add.w	r7, r0, #52	; 0x34
 800dc06:	2301      	movs	r3, #1
 800dc08:	7840      	ldrb	r0, [r0, #1]
 800dc0a:	462a      	mov	r2, r5
 800dc0c:	4639      	mov	r1, r7
 800dc0e:	f7ff f9a7 	bl	800cf60 <disk_write>
 800dc12:	2800      	cmp	r0, #0
 800dc14:	d13e      	bne.n	800dc94 <sync_fs+0xb4>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc16:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800dc18:	69e3      	ldr	r3, [r4, #28]
 800dc1a:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 800dc1c:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d2e2      	bcs.n	800dbe8 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc22:	78a6      	ldrb	r6, [r4, #2]
 800dc24:	2e01      	cmp	r6, #1
 800dc26:	d801      	bhi.n	800dc2c <sync_fs+0x4c>
 800dc28:	e7de      	b.n	800dbe8 <sync_fs+0x8>
					wsect += fs->fsize;
 800dc2a:	69e3      	ldr	r3, [r4, #28]
 800dc2c:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc2e:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc30:	2301      	movs	r3, #1
 800dc32:	4639      	mov	r1, r7
 800dc34:	462a      	mov	r2, r5
 800dc36:	7860      	ldrb	r0, [r4, #1]
 800dc38:	f7ff f992 	bl	800cf60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc3c:	2e01      	cmp	r6, #1
 800dc3e:	d1f4      	bne.n	800dc2a <sync_fs+0x4a>
 800dc40:	e7d2      	b.n	800dbe8 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dc42:	7925      	ldrb	r5, [r4, #4]
 800dc44:	2d01      	cmp	r5, #1
 800dc46:	d1d2      	bne.n	800dbee <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 800dc48:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 800dc4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dc50:	2100      	movs	r1, #0
 800dc52:	4630      	mov	r0, r6
 800dc54:	f00a fec6 	bl	80189e4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 800dc58:	480f      	ldr	r0, [pc, #60]	; (800dc98 <sync_fs+0xb8>)
	*ptr++ = (BYTE)val; val >>= 8;
 800dc5a:	f64a 2355 	movw	r3, #43605	; 0xaa55
	*ptr++ = (BYTE)val; val >>= 8;
 800dc5e:	6360      	str	r0, [r4, #52]	; 0x34
 800dc60:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
	*ptr++ = (BYTE)val; val >>= 8;
 800dc64:	f8a4 3232 	strh.w	r3, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc68:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800dc6a:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 800dc6e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
 800dc72:	3020      	adds	r0, #32
 800dc74:	f8c4 221c 	str.w	r2, [r4, #540]	; 0x21c
			fs->winsect = fs->volbase + 1;
 800dc78:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 800dc7a:	f8c4 1220 	str.w	r1, [r4, #544]	; 0x220
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc7e:	4631      	mov	r1, r6
			fs->winsect = fs->volbase + 1;
 800dc80:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800dc82:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc86:	7860      	ldrb	r0, [r4, #1]
			fs->winsect = fs->volbase + 1;
 800dc88:	6322      	str	r2, [r4, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dc8a:	f7ff f969 	bl	800cf60 <disk_write>
			fs->fsi_flag = 0;
 800dc8e:	2300      	movs	r3, #0
 800dc90:	7123      	strb	r3, [r4, #4]
 800dc92:	e7ac      	b.n	800dbee <sync_fs+0xe>
			res = FR_DISK_ERR;
 800dc94:	2001      	movs	r0, #1
}
 800dc96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc98:	41615252 	.word	0x41615252

0800dc9c <create_chain>:
{
 800dc9c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dca0:	4681      	mov	r9, r0
	if (clst == 0) {	/* Create a new chain */
 800dca2:	460f      	mov	r7, r1
	FATFS *fs = obj->fs;
 800dca4:	f8d0 8000 	ldr.w	r8, [r0]
	if (clst == 0) {	/* Create a new chain */
 800dca8:	2900      	cmp	r1, #0
 800dcaa:	f040 80a7 	bne.w	800ddfc <create_chain+0x160>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800dcae:	f8d8 6010 	ldr.w	r6, [r8, #16]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dcb2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dcb6:	b9c6      	cbnz	r6, 800dcea <create_chain+0x4e>
 800dcb8:	2601      	movs	r6, #1
 800dcba:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 800dcbc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800dcbe:	429c      	cmp	r4, r3
 800dcc0:	d317      	bcc.n	800dcf2 <create_chain+0x56>
				if (ncl > scl) return 0;	/* No free cluster */
 800dcc2:	2e01      	cmp	r6, #1
 800dcc4:	f000 8096 	beq.w	800ddf4 <create_chain+0x158>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800dcc8:	f8d9 5000 	ldr.w	r5, [r9]
				ncl = 2;
 800dccc:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dcce:	69ab      	ldr	r3, [r5, #24]
 800dcd0:	42a3      	cmp	r3, r4
 800dcd2:	d906      	bls.n	800dce2 <create_chain+0x46>
		switch (fs->fs_type) {
 800dcd4:	782b      	ldrb	r3, [r5, #0]
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	d07e      	beq.n	800ddd8 <create_chain+0x13c>
 800dcda:	2b03      	cmp	r3, #3
 800dcdc:	d064      	beq.n	800dda8 <create_chain+0x10c>
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d00c      	beq.n	800dcfc <create_chain+0x60>
 800dce2:	2401      	movs	r4, #1
}
 800dce4:	4620      	mov	r0, r4
 800dce6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800dcea:	42b3      	cmp	r3, r6
 800dcec:	bf98      	it	ls
 800dcee:	2601      	movls	r6, #1
 800dcf0:	e7e3      	b.n	800dcba <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dcf2:	2c01      	cmp	r4, #1
 800dcf4:	f8d9 5000 	ldr.w	r5, [r9]
 800dcf8:	d9f3      	bls.n	800dce2 <create_chain+0x46>
 800dcfa:	e7e8      	b.n	800dcce <create_chain+0x32>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dcfc:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800dcfe:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd02:	4628      	mov	r0, r5
 800dd04:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800dd08:	f7ff fad4 	bl	800d2b4 <move_window>
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	d146      	bne.n	800dd9e <create_chain+0x102>
			wc = fs->win[bc++ % SS(fs)];
 800dd10:	f3cb 0308 	ubfx	r3, fp, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd14:	6a69      	ldr	r1, [r5, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800dd16:	f10b 0b01 	add.w	fp, fp, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd1a:	4628      	mov	r0, r5
			wc = fs->win[bc++ % SS(fs)];
 800dd1c:	442b      	add	r3, r5
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd1e:	eb01 215b 	add.w	r1, r1, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800dd22:	f893 a034 	ldrb.w	sl, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800dd26:	f7ff fac5 	bl	800d2b4 <move_window>
 800dd2a:	bbc0      	cbnz	r0, 800dd9e <create_chain+0x102>
			wc |= fs->win[bc % SS(fs)] << 8;
 800dd2c:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dd30:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800dd32:	44ab      	add	fp, r5
 800dd34:	f89b 3034 	ldrb.w	r3, [fp, #52]	; 0x34
 800dd38:	ea4a 2303 	orr.w	r3, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dd3c:	bf4c      	ite	mi
 800dd3e:	091b      	lsrmi	r3, r3, #4
 800dd40:	f3c3 030b 	ubfxpl	r3, r3, #0, #12
			if (cs == 0) break;				/* Found a free cluster */
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d140      	bne.n	800ddca <create_chain+0x12e>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd48:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dd4c:	42a3      	cmp	r3, r4
 800dd4e:	d9c8      	bls.n	800dce2 <create_chain+0x46>
 800dd50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dd54:	4621      	mov	r1, r4
 800dd56:	4640      	mov	r0, r8
 800dd58:	f7ff fc5c 	bl	800d614 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 800dd5c:	b958      	cbnz	r0, 800dd76 <create_chain+0xda>
 800dd5e:	b157      	cbz	r7, 800dd76 <create_chain+0xda>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800dd60:	2f01      	cmp	r7, #1
 800dd62:	d0be      	beq.n	800dce2 <create_chain+0x46>
 800dd64:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800dd68:	429f      	cmp	r7, r3
 800dd6a:	d2ba      	bcs.n	800dce2 <create_chain+0x46>
 800dd6c:	4622      	mov	r2, r4
 800dd6e:	4639      	mov	r1, r7
 800dd70:	4640      	mov	r0, r8
 800dd72:	f7ff fc4f 	bl	800d614 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800dd76:	b980      	cbnz	r0, 800dd9a <create_chain+0xfe>
		fs->last_clst = ncl;
 800dd78:	f8c8 4010 	str.w	r4, [r8, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800dd7c:	e9d8 2305 	ldrd	r2, r3, [r8, #20]
 800dd80:	3b02      	subs	r3, #2
 800dd82:	429a      	cmp	r2, r3
 800dd84:	d802      	bhi.n	800dd8c <create_chain+0xf0>
 800dd86:	3a01      	subs	r2, #1
 800dd88:	f8c8 2014 	str.w	r2, [r8, #20]
		fs->fsi_flag |= 1;
 800dd8c:	f898 3004 	ldrb.w	r3, [r8, #4]
 800dd90:	f043 0301 	orr.w	r3, r3, #1
 800dd94:	f888 3004 	strb.w	r3, [r8, #4]
 800dd98:	e7a4      	b.n	800dce4 <create_chain+0x48>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800dd9a:	2801      	cmp	r0, #1
 800dd9c:	d1a1      	bne.n	800dce2 <create_chain+0x46>
 800dd9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 800dda2:	4620      	mov	r0, r4
 800dda4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800dda8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800ddaa:	4628      	mov	r0, r5
 800ddac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800ddb0:	f7ff fa80 	bl	800d2b4 <move_window>
 800ddb4:	2800      	cmp	r0, #0
 800ddb6:	d1f2      	bne.n	800dd9e <create_chain+0x102>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ddb8:	00a3      	lsls	r3, r4, #2
 800ddba:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800ddbe:	441d      	add	r5, r3
 800ddc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ddc2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d0be      	beq.n	800dd48 <create_chain+0xac>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d089      	beq.n	800dce2 <create_chain+0x46>
			if (ncl == scl) return 0;		/* No free cluster */
 800ddce:	42a6      	cmp	r6, r4
 800ddd0:	d010      	beq.n	800ddf4 <create_chain+0x158>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ddd2:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800ddd6:	e771      	b.n	800dcbc <create_chain+0x20>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ddd8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800ddda:	4628      	mov	r0, r5
 800dddc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800dde0:	f7ff fa68 	bl	800d2b4 <move_window>
 800dde4:	2800      	cmp	r0, #0
 800dde6:	d1da      	bne.n	800dd9e <create_chain+0x102>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800dde8:	0063      	lsls	r3, r4, #1
 800ddea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ddee:	442b      	add	r3, r5
 800ddf0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
			break;
 800ddf2:	e7a7      	b.n	800dd44 <create_chain+0xa8>
				if (ncl > scl) return 0;	/* No free cluster */
 800ddf4:	2400      	movs	r4, #0
}
 800ddf6:	4620      	mov	r0, r4
 800ddf8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	f7ff fc8f 	bl	800d720 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 800de02:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800de04:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 800de06:	f67f af6c 	bls.w	800dce2 <create_chain+0x46>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800de0a:	1c41      	adds	r1, r0, #1
 800de0c:	d0c7      	beq.n	800dd9e <create_chain+0x102>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800de0e:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800de12:	4283      	cmp	r3, r0
 800de14:	f63f af66 	bhi.w	800dce4 <create_chain+0x48>
 800de18:	463e      	mov	r6, r7
 800de1a:	e74e      	b.n	800dcba <create_chain+0x1e>

0800de1c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800de1c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
{
 800de20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	FATFS *fs = dp->obj.fs;
 800de24:	f8d0 8000 	ldr.w	r8, [r0]
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800de28:	d24e      	bcs.n	800dec8 <dir_sdi+0xac>
 800de2a:	06ca      	lsls	r2, r1, #27
 800de2c:	460c      	mov	r4, r1
 800de2e:	d14b      	bne.n	800dec8 <dir_sdi+0xac>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800de30:	6885      	ldr	r5, [r0, #8]
 800de32:	4606      	mov	r6, r0
	dp->dptr = ofs;				/* Set current offset */
 800de34:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800de36:	2d00      	cmp	r5, #0
 800de38:	d049      	beq.n	800dece <dir_sdi+0xb2>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de3a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 800de3e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800de42:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 800de46:	f0c0 8084 	bcc.w	800df52 <dir_sdi+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800de4a:	2d01      	cmp	r5, #1
 800de4c:	d03c      	beq.n	800dec8 <dir_sdi+0xac>
 800de4e:	4647      	mov	r7, r8
 800de50:	e037      	b.n	800dec2 <dir_sdi+0xa6>
		switch (fs->fs_type) {
 800de52:	783b      	ldrb	r3, [r7, #0]
 800de54:	2b02      	cmp	r3, #2
 800de56:	d06e      	beq.n	800df36 <dir_sdi+0x11a>
 800de58:	2b03      	cmp	r3, #3
 800de5a:	d05c      	beq.n	800df16 <dir_sdi+0xfa>
 800de5c:	2b01      	cmp	r3, #1
 800de5e:	d133      	bne.n	800dec8 <dir_sdi+0xac>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de60:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800de62:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de66:	4638      	mov	r0, r7
 800de68:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800de6c:	f7ff fa22 	bl	800d2b4 <move_window>
 800de70:	2800      	cmp	r0, #0
 800de72:	d14d      	bne.n	800df10 <dir_sdi+0xf4>
			wc = fs->win[bc++ % SS(fs)];
 800de74:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de78:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800de7a:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de7e:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800de80:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de82:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800de86:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de8a:	f7ff fa13 	bl	800d2b4 <move_window>
 800de8e:	2800      	cmp	r0, #0
 800de90:	d13e      	bne.n	800df10 <dir_sdi+0xf4>
			wc |= fs->win[bc % SS(fs)] << 8;
 800de92:	f3ca 0a08 	ubfx	sl, sl, #0, #9
 800de96:	44ba      	add	sl, r7
 800de98:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800de9c:	ea4b 2b03 	orr.w	fp, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800dea0:	07eb      	lsls	r3, r5, #31
 800dea2:	bf4c      	ite	mi
 800dea4:	ea4f 151b 	movmi.w	r5, fp, lsr #4
 800dea8:	f3cb 050b 	ubfxpl	r5, fp, #0, #12
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800deac:	2d01      	cmp	r5, #1
 800deae:	d90b      	bls.n	800dec8 <dir_sdi+0xac>
 800deb0:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800deb4:	42ab      	cmp	r3, r5
 800deb6:	d907      	bls.n	800dec8 <dir_sdi+0xac>
			ofs -= csz;
 800deb8:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 800debc:	45a1      	cmp	r9, r4
 800debe:	d84a      	bhi.n	800df56 <dir_sdi+0x13a>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800dec0:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800dec2:	69bb      	ldr	r3, [r7, #24]
 800dec4:	42ab      	cmp	r3, r5
 800dec6:	d8c4      	bhi.n	800de52 <dir_sdi+0x36>
		switch (fs->fs_type) {
 800dec8:	2002      	movs	r0, #2
}
 800deca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800dece:	f898 3000 	ldrb.w	r3, [r8]
 800ded2:	2b02      	cmp	r3, #2
 800ded4:	d816      	bhi.n	800df04 <dir_sdi+0xe8>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ded6:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 800deda:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 800dede:	d9f3      	bls.n	800dec8 <dir_sdi+0xac>
		dp->sect = fs->dirbase;
 800dee0:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	dp->clust = clst;					/* Current cluster# */
 800dee4:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d0ed      	beq.n	800dec8 <dir_sdi+0xac>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800deec:	f108 0834 	add.w	r8, r8, #52	; 0x34
 800def0:	f3c4 0108 	ubfx	r1, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800def4:	eb03 2354 	add.w	r3, r3, r4, lsr #9
	return FR_OK;
 800def8:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800defa:	4441      	add	r1, r8
 800defc:	e9c6 3107 	strd	r3, r1, [r6, #28]
}
 800df00:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		clst = fs->dirbase;
 800df04:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d0e4      	beq.n	800ded6 <dir_sdi+0xba>
 800df0c:	461d      	mov	r5, r3
 800df0e:	e794      	b.n	800de3a <dir_sdi+0x1e>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800df10:	2001      	movs	r0, #1
}
 800df12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df18:	4638      	mov	r0, r7
 800df1a:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
 800df1e:	f7ff f9c9 	bl	800d2b4 <move_window>
 800df22:	2800      	cmp	r0, #0
 800df24:	d1f4      	bne.n	800df10 <dir_sdi+0xf4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800df26:	00ab      	lsls	r3, r5, #2
 800df28:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800df2c:	443b      	add	r3, r7
 800df2e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800df30:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 800df34:	e7ba      	b.n	800deac <dir_sdi+0x90>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800df38:	4638      	mov	r0, r7
 800df3a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 800df3e:	f7ff f9b9 	bl	800d2b4 <move_window>
 800df42:	2800      	cmp	r0, #0
 800df44:	d1e4      	bne.n	800df10 <dir_sdi+0xf4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800df46:	006b      	lsls	r3, r5, #1
 800df48:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800df4c:	443b      	add	r3, r7
 800df4e:	8e9d      	ldrh	r5, [r3, #52]	; 0x34
			break;
 800df50:	e7ac      	b.n	800deac <dir_sdi+0x90>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800df52:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800df56:	3b02      	subs	r3, #2
	clst -= 2;
 800df58:	1eaa      	subs	r2, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800df5a:	429a      	cmp	r2, r3
 800df5c:	d206      	bcs.n	800df6c <dir_sdi+0x150>
	return clst * fs->csize + fs->database;
 800df5e:	f8b8 100a 	ldrh.w	r1, [r8, #10]
 800df62:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800df66:	fb02 3301 	mla	r3, r2, r1, r3
 800df6a:	e7bb      	b.n	800dee4 <dir_sdi+0xc8>
		dp->sect = fs->dirbase;
 800df6c:	2300      	movs	r3, #0
 800df6e:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 800df72:	e7a9      	b.n	800dec8 <dir_sdi+0xac>

0800df74 <dir_find>:
{
 800df74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df78:	2100      	movs	r1, #0
{
 800df7a:	b085      	sub	sp, #20
 800df7c:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800df7e:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800df82:	f7ff ff4b 	bl	800de1c <dir_sdi>
	if (res != FR_OK) return res;
 800df86:	4607      	mov	r7, r0
 800df88:	b9e8      	cbnz	r0, 800dfc6 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df8a:	f04f 09ff 	mov.w	r9, #255	; 0xff
 800df8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 800df92:	69e6      	ldr	r6, [r4, #28]
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800df94:	464f      	mov	r7, r9
 800df96:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 800df98:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 800df9c:	42b5      	cmp	r5, r6
 800df9e:	d018      	beq.n	800dfd2 <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dfa0:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dfa4:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	f040 8085 	bne.w	800e0b8 <dir_find+0x144>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dfae:	2301      	movs	r3, #1
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	f898 0001 	ldrb.w	r0, [r8, #1]
 800dfb6:	f7fe ffc3 	bl	800cf40 <disk_read>
 800dfba:	b140      	cbz	r0, 800dfce <dir_find+0x5a>
			fs->winsect = sector;
 800dfbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 800dfc0:	2701      	movs	r7, #1
			fs->winsect = sector;
 800dfc2:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	b005      	add	sp, #20
 800dfca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 800dfce:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 800dfd2:	6a25      	ldr	r5, [r4, #32]
 800dfd4:	782e      	ldrb	r6, [r5, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800dfd6:	b346      	cbz	r6, 800e02a <dir_find+0xb6>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dfd8:	7aeb      	ldrb	r3, [r5, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dfda:	2ee5      	cmp	r6, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800dfdc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800dfe0:	71a2      	strb	r2, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800dfe2:	d004      	beq.n	800dfee <dir_find+0x7a>
 800dfe4:	071b      	lsls	r3, r3, #28
 800dfe6:	d525      	bpl.n	800e034 <dir_find+0xc0>
 800dfe8:	2a0f      	cmp	r2, #15
 800dfea:	f000 8093 	beq.w	800e114 <dir_find+0x1a0>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800dfee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dff2:	27ff      	movs	r7, #255	; 0xff
 800dff4:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dff6:	6965      	ldr	r5, [r4, #20]
	FATFS *fs = dp->obj.fs;
 800dff8:	6823      	ldr	r3, [r4, #0]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800dffa:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800dffc:	69e6      	ldr	r6, [r4, #28]
 800dffe:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800e002:	d212      	bcs.n	800e02a <dir_find+0xb6>
 800e004:	b18e      	cbz	r6, 800e02a <dir_find+0xb6>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e006:	f3c5 0208 	ubfx	r2, r5, #0, #9
 800e00a:	b94a      	cbnz	r2, 800e020 <dir_find+0xac>
		dp->sect++;				/* Next sector */
 800e00c:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 800e00e:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 800e010:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 800e012:	2900      	cmp	r1, #0
 800e014:	d15c      	bne.n	800e0d0 <dir_find+0x15c>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e016:	8919      	ldrh	r1, [r3, #8]
 800e018:	ebb1 1f55 	cmp.w	r1, r5, lsr #5
 800e01c:	f240 813a 	bls.w	800e294 <dir_find+0x320>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e020:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 800e022:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e024:	4413      	add	r3, r2
 800e026:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 800e028:	e7b6      	b.n	800df98 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e02a:	2704      	movs	r7, #4
}
 800e02c:	4638      	mov	r0, r7
 800e02e:	b005      	add	sp, #20
 800e030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 800e034:	2a0f      	cmp	r2, #15
 800e036:	d06d      	beq.n	800e114 <dir_find+0x1a0>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e038:	2f00      	cmp	r7, #0
 800e03a:	f000 80d9 	beq.w	800e1f0 <dir_find+0x27c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e03e:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
 800e042:	f017 0701 	ands.w	r7, r7, #1
 800e046:	d1d2      	bne.n	800dfee <dir_find+0x7a>
	} while (--cnt && r == 0);
 800e048:	782a      	ldrb	r2, [r5, #0]
 800e04a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800e04e:	429a      	cmp	r2, r3
 800e050:	d1cd      	bne.n	800dfee <dir_find+0x7a>
 800e052:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 800e056:	786b      	ldrb	r3, [r5, #1]
 800e058:	429a      	cmp	r2, r3
 800e05a:	d1c8      	bne.n	800dfee <dir_find+0x7a>
 800e05c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800e060:	78ab      	ldrb	r3, [r5, #2]
 800e062:	429a      	cmp	r2, r3
 800e064:	d1c3      	bne.n	800dfee <dir_find+0x7a>
 800e066:	78ea      	ldrb	r2, [r5, #3]
 800e068:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d1be      	bne.n	800dfee <dir_find+0x7a>
 800e070:	792a      	ldrb	r2, [r5, #4]
 800e072:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800e076:	429a      	cmp	r2, r3
 800e078:	d1b9      	bne.n	800dfee <dir_find+0x7a>
 800e07a:	796a      	ldrb	r2, [r5, #5]
 800e07c:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 800e080:	429a      	cmp	r2, r3
 800e082:	d1b4      	bne.n	800dfee <dir_find+0x7a>
 800e084:	79aa      	ldrb	r2, [r5, #6]
 800e086:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800e08a:	429a      	cmp	r2, r3
 800e08c:	d1af      	bne.n	800dfee <dir_find+0x7a>
 800e08e:	79ea      	ldrb	r2, [r5, #7]
 800e090:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 800e094:	429a      	cmp	r2, r3
 800e096:	d1aa      	bne.n	800dfee <dir_find+0x7a>
 800e098:	7a2a      	ldrb	r2, [r5, #8]
 800e09a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800e09e:	429a      	cmp	r2, r3
 800e0a0:	d1a5      	bne.n	800dfee <dir_find+0x7a>
 800e0a2:	7a6a      	ldrb	r2, [r5, #9]
 800e0a4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800e0a8:	429a      	cmp	r2, r3
 800e0aa:	d1a0      	bne.n	800dfee <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800e0ac:	7aaa      	ldrb	r2, [r5, #10]
 800e0ae:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	d19b      	bne.n	800dfee <dir_find+0x7a>
 800e0b6:	e786      	b.n	800dfc6 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e0b8:	2301      	movs	r3, #1
 800e0ba:	462a      	mov	r2, r5
 800e0bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e0c0:	9100      	str	r1, [sp, #0]
 800e0c2:	f7fe ff4d 	bl	800cf60 <disk_write>
 800e0c6:	9900      	ldr	r1, [sp, #0]
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	d06e      	beq.n	800e1aa <dir_find+0x236>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e0cc:	2701      	movs	r7, #1
 800e0ce:	e77a      	b.n	800dfc6 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e0d0:	8958      	ldrh	r0, [r3, #10]
 800e0d2:	3801      	subs	r0, #1
 800e0d4:	ea10 2055 	ands.w	r0, r0, r5, lsr #9
 800e0d8:	d1a2      	bne.n	800e020 <dir_find+0xac>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e0da:	4618      	mov	r0, r3
 800e0dc:	9201      	str	r2, [sp, #4]
 800e0de:	9300      	str	r3, [sp, #0]
 800e0e0:	f7ff fb1e 	bl	800d720 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e0e4:	2801      	cmp	r0, #1
 800e0e6:	f240 80d9 	bls.w	800e29c <dir_find+0x328>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e0ea:	1c43      	adds	r3, r0, #1
 800e0ec:	d0ee      	beq.n	800e0cc <dir_find+0x158>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e0ee:	9b00      	ldr	r3, [sp, #0]
 800e0f0:	6999      	ldr	r1, [r3, #24]
 800e0f2:	4288      	cmp	r0, r1
 800e0f4:	f080 80ce 	bcs.w	800e294 <dir_find+0x320>
				dp->clust = clst;		/* Initialize data for new cluster */
 800e0f8:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 800e0fa:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e0fc:	6999      	ldr	r1, [r3, #24]
 800e0fe:	9a01      	ldr	r2, [sp, #4]
 800e100:	3902      	subs	r1, #2
 800e102:	4288      	cmp	r0, r1
 800e104:	f080 80cc 	bcs.w	800e2a0 <dir_find+0x32c>
	return clst * fs->csize + fs->database;
 800e108:	8959      	ldrh	r1, [r3, #10]
 800e10a:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 800e10c:	fb00 6601 	mla	r6, r0, r1, r6
				dp->sect = clust2sect(fs, clst);
 800e110:	61e6      	str	r6, [r4, #28]
 800e112:	e785      	b.n	800e020 <dir_find+0xac>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800e114:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800e118:	0658      	lsls	r0, r3, #25
 800e11a:	f53f af6c 	bmi.w	800dff6 <dir_find+0x82>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800e11e:	0671      	lsls	r1, r6, #25
 800e120:	f140 80b3 	bpl.w	800e28a <dir_find+0x316>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e124:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800e126:	f006 06bf 	and.w	r6, r6, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 800e12a:	f895 900d 	ldrb.w	r9, [r5, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800e12e:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e130:	7b6b      	ldrb	r3, [r5, #13]
 800e132:	454b      	cmp	r3, r9
 800e134:	f040 80ac 	bne.w	800e290 <dir_find+0x31c>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e138:	8b6b      	ldrh	r3, [r5, #26]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	f040 80a8 	bne.w	800e290 <dir_find+0x31c>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e140:	782f      	ldrb	r7, [r5, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e142:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e144:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e148:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 800e14c:	f8df a178 	ldr.w	sl, [pc, #376]	; 800e2c8 <dir_find+0x354>
 800e150:	9602      	str	r6, [sp, #8]
 800e152:	462e      	mov	r6, r5
 800e154:	3f01      	subs	r7, #1
 800e156:	f10a 0b0d 	add.w	fp, sl, #13
 800e15a:	4615      	mov	r5, r2
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e15c:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e15e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 800e162:	f8cd 8000 	str.w	r8, [sp]
 800e166:	9401      	str	r4, [sp, #4]
 800e168:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e16c:	e010      	b.n	800e190 <dir_find+0x21c>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e16e:	2ffe      	cmp	r7, #254	; 0xfe
 800e170:	4620      	mov	r0, r4
 800e172:	d816      	bhi.n	800e1a2 <dir_find+0x22e>
 800e174:	f001 fe4a 	bl	800fe0c <ff_wtoupper>
 800e178:	4680      	mov	r8, r0
 800e17a:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 800e17e:	3701      	adds	r7, #1
 800e180:	f001 fe44 	bl	800fe0c <ff_wtoupper>
 800e184:	4580      	cmp	r8, r0
 800e186:	4621      	mov	r1, r4
 800e188:	d10b      	bne.n	800e1a2 <dir_find+0x22e>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e18a:	45d3      	cmp	fp, sl
 800e18c:	f000 808a 	beq.w	800e2a4 <dir_find+0x330>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e190:	f81a 3b01 	ldrb.w	r3, [sl], #1
 800e194:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 800e196:	2900      	cmp	r1, #0
 800e198:	d1e9      	bne.n	800e16e <dir_find+0x1fa>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e19a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e19e:	429c      	cmp	r4, r3
 800e1a0:	d0f3      	beq.n	800e18a <dir_find+0x216>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e1a2:	e9dd 8400 	ldrd	r8, r4, [sp]
 800e1a6:	27ff      	movs	r7, #255	; 0xff
 800e1a8:	e725      	b.n	800dff6 <dir_find+0x82>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e1aa:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 800e1ae:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e1b2:	1aea      	subs	r2, r5, r3
 800e1b4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	f4bf aef8 	bcs.w	800dfae <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e1be:	f898 a002 	ldrb.w	sl, [r8, #2]
 800e1c2:	f1ba 0f01 	cmp.w	sl, #1
 800e1c6:	f67f aef2 	bls.w	800dfae <dir_find+0x3a>
 800e1ca:	468b      	mov	fp, r1
 800e1cc:	e001      	b.n	800e1d2 <dir_find+0x25e>
					wsect += fs->fsize;
 800e1ce:	f8d8 301c 	ldr.w	r3, [r8, #28]
 800e1d2:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e1d4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800e1d8:	2301      	movs	r3, #1
 800e1da:	4659      	mov	r1, fp
 800e1dc:	462a      	mov	r2, r5
 800e1de:	f898 0001 	ldrb.w	r0, [r8, #1]
 800e1e2:	f7fe febd 	bl	800cf60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e1e6:	f1ba 0f01 	cmp.w	sl, #1
 800e1ea:	d1f0      	bne.n	800e1ce <dir_find+0x25a>
 800e1ec:	4659      	mov	r1, fp
 800e1ee:	e6de      	b.n	800dfae <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800e1f0:	782a      	ldrb	r2, [r5, #0]
 800e1f2:	7869      	ldrb	r1, [r5, #1]
 800e1f4:	01d0      	lsls	r0, r2, #7
 800e1f6:	78ae      	ldrb	r6, [r5, #2]
 800e1f8:	78eb      	ldrb	r3, [r5, #3]
 800e1fa:	ea40 0052 	orr.w	r0, r0, r2, lsr #1
 800e1fe:	792a      	ldrb	r2, [r5, #4]
 800e200:	f895 a005 	ldrb.w	sl, [r5, #5]
 800e204:	4408      	add	r0, r1
 800e206:	f895 e006 	ldrb.w	lr, [r5, #6]
 800e20a:	f895 c007 	ldrb.w	ip, [r5, #7]
 800e20e:	f3c0 0146 	ubfx	r1, r0, #1, #7
 800e212:	ea41 11c0 	orr.w	r1, r1, r0, lsl #7
 800e216:	7a68      	ldrb	r0, [r5, #9]
 800e218:	fa56 f181 	uxtab	r1, r6, r1
 800e21c:	7a2e      	ldrb	r6, [r5, #8]
 800e21e:	f3c1 0b46 	ubfx	fp, r1, #1, #7
 800e222:	ea4b 1bc1 	orr.w	fp, fp, r1, lsl #7
 800e226:	7aa9      	ldrb	r1, [r5, #10]
 800e228:	fa53 fb8b 	uxtab	fp, r3, fp
 800e22c:	f3cb 0346 	ubfx	r3, fp, #1, #7
 800e230:	ea43 13cb 	orr.w	r3, r3, fp, lsl #7
 800e234:	fa52 f383 	uxtab	r3, r2, r3
 800e238:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e23c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e240:	fa5a f282 	uxtab	r2, sl, r2
 800e244:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e248:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e24c:	fa5e f383 	uxtab	r3, lr, r3
 800e250:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e254:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e258:	fa5c f282 	uxtab	r2, ip, r2
 800e25c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e260:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e264:	fa56 f383 	uxtab	r3, r6, r3
 800e268:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800e26c:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800e270:	fa50 f282 	uxtab	r2, r0, r2
 800e274:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800e278:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800e27c:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800e280:	b2db      	uxtb	r3, r3
 800e282:	4599      	cmp	r9, r3
 800e284:	f47f aedb 	bne.w	800e03e <dir_find+0xca>
 800e288:	e69d      	b.n	800dfc6 <dir_find+0x52>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e28a:	42b7      	cmp	r7, r6
 800e28c:	f43f af50 	beq.w	800e130 <dir_find+0x1bc>
 800e290:	27ff      	movs	r7, #255	; 0xff
 800e292:	e6b0      	b.n	800dff6 <dir_find+0x82>
				dp->sect = 0; return FR_NO_FILE;
 800e294:	2300      	movs	r3, #0
 800e296:	2704      	movs	r7, #4
 800e298:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 800e29a:	e694      	b.n	800dfc6 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e29c:	2702      	movs	r7, #2
 800e29e:	e692      	b.n	800dfc6 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e2a0:	4616      	mov	r6, r2
 800e2a2:	e735      	b.n	800e110 <dir_find+0x19c>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e2a4:	4635      	mov	r5, r6
 800e2a6:	f8dd 8000 	ldr.w	r8, [sp]
 800e2aa:	782b      	ldrb	r3, [r5, #0]
 800e2ac:	065a      	lsls	r2, r3, #25
 800e2ae:	e9dd 4601 	ldrd	r4, r6, [sp, #4]
 800e2b2:	d500      	bpl.n	800e2b6 <dir_find+0x342>
 800e2b4:	b911      	cbnz	r1, 800e2bc <dir_find+0x348>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800e2b6:	3e01      	subs	r6, #1
 800e2b8:	b2f7      	uxtb	r7, r6
 800e2ba:	e69c      	b.n	800dff6 <dir_find+0x82>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e2bc:	9b03      	ldr	r3, [sp, #12]
 800e2be:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d0f7      	beq.n	800e2b6 <dir_find+0x342>
 800e2c6:	e7e3      	b.n	800e290 <dir_find+0x31c>
 800e2c8:	0801ba7c 	.word	0x0801ba7c

0800e2cc <follow_path>:
{
 800e2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2d0:	780b      	ldrb	r3, [r1, #0]
{
 800e2d2:	b083      	sub	sp, #12
 800e2d4:	4688      	mov	r8, r1
 800e2d6:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2d8:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 800e2da:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800e2de:	d103      	bne.n	800e2e8 <follow_path+0x1c>
 800e2e0:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 800e2e4:	2b2f      	cmp	r3, #47	; 0x2f
 800e2e6:	d0fb      	beq.n	800e2e0 <follow_path+0x14>
 800e2e8:	2b5c      	cmp	r3, #92	; 0x5c
 800e2ea:	d0f9      	beq.n	800e2e0 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800e2f0:	f898 3000 	ldrb.w	r3, [r8]
 800e2f4:	2b1f      	cmp	r3, #31
 800e2f6:	f240 8147 	bls.w	800e588 <follow_path+0x2bc>
 800e2fa:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 800e2fc:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e2fe:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 800e300:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 800e302:	d929      	bls.n	800e358 <follow_path+0x8c>
 800e304:	f1a5 0902 	sub.w	r9, r5, #2
 800e308:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 800e30a:	2401      	movs	r4, #1
 800e30c:	e008      	b.n	800e320 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 800e30e:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 800e312:	1c63      	adds	r3, r4, #1
 800e314:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 800e318:	281f      	cmp	r0, #31
 800e31a:	f240 80f6 	bls.w	800e50a <follow_path+0x23e>
		w = p[si++];					/* Get a character */
 800e31e:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800e320:	282f      	cmp	r0, #47	; 0x2f
 800e322:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 800e326:	d01d      	beq.n	800e364 <follow_path+0x98>
 800e328:	285c      	cmp	r0, #92	; 0x5c
 800e32a:	d01b      	beq.n	800e364 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800e32c:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 800e330:	d00e      	beq.n	800e350 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800e332:	2101      	movs	r1, #1
 800e334:	f001 fd4c 	bl	800fdd0 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800e338:	b150      	cbz	r0, 800e350 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800e33a:	287f      	cmp	r0, #127	; 0x7f
 800e33c:	d8e7      	bhi.n	800e30e <follow_path+0x42>
	while (*str && *str != chr) str++;
 800e33e:	2322      	movs	r3, #34	; 0x22
 800e340:	4aa5      	ldr	r2, [pc, #660]	; (800e5d8 <follow_path+0x30c>)
 800e342:	e003      	b.n	800e34c <follow_path+0x80>
 800e344:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d0e0      	beq.n	800e30e <follow_path+0x42>
 800e34c:	4298      	cmp	r0, r3
 800e34e:	d1f9      	bne.n	800e344 <follow_path+0x78>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e350:	2006      	movs	r0, #6
}
 800e352:	b003      	add	sp, #12
 800e354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 800e358:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800e35a:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 800e35c:	802b      	strh	r3, [r5, #0]
}
 800e35e:	b003      	add	sp, #12
 800e360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e364:	f818 3004 	ldrb.w	r3, [r8, r4]
 800e368:	eb08 0204 	add.w	r2, r8, r4
 800e36c:	2b2f      	cmp	r3, #47	; 0x2f
 800e36e:	d002      	beq.n	800e376 <follow_path+0xaa>
 800e370:	2b5c      	cmp	r3, #92	; 0x5c
 800e372:	f040 811e 	bne.w	800e5b2 <follow_path+0x2e6>
 800e376:	1c63      	adds	r3, r4, #1
 800e378:	4443      	add	r3, r8
 800e37a:	4698      	mov	r8, r3
 800e37c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e380:	2a2f      	cmp	r2, #47	; 0x2f
 800e382:	d0fa      	beq.n	800e37a <follow_path+0xae>
 800e384:	2a5c      	cmp	r2, #92	; 0x5c
 800e386:	d0f8      	beq.n	800e37a <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e388:	f1ba 0f00 	cmp.w	sl, #0
 800e38c:	d0e4      	beq.n	800e358 <follow_path+0x8c>
 800e38e:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e390:	2400      	movs	r4, #0
 800e392:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 800e396:	e002      	b.n	800e39e <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800e398:	f1ba 0a01 	subs.w	sl, sl, #1
 800e39c:	d0dc      	beq.n	800e358 <follow_path+0x8c>
		w = lfn[di - 1];
 800e39e:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 800e3a2:	2b20      	cmp	r3, #32
 800e3a4:	d0f8      	beq.n	800e398 <follow_path+0xcc>
 800e3a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e3a8:	d0f6      	beq.n	800e398 <follow_path+0xcc>
		*d++ = (BYTE)val;
 800e3aa:	f04f 3320 	mov.w	r3, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 800e3ae:	2100      	movs	r1, #0
		*d++ = (BYTE)val;
 800e3b0:	f242 0220 	movw	r2, #8224	; 0x2020
	lfn[di] = 0;						/* LFN is created */
 800e3b4:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 800e3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800e3ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800e3bc:	2320      	movs	r3, #32
 800e3be:	85ba      	strh	r2, [r7, #44]	; 0x2c
 800e3c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e3c4:	8828      	ldrh	r0, [r5, #0]
 800e3c6:	282e      	cmp	r0, #46	; 0x2e
 800e3c8:	d002      	beq.n	800e3d0 <follow_path+0x104>
 800e3ca:	4298      	cmp	r0, r3
 800e3cc:	f040 80e5 	bne.w	800e59a <follow_path+0x2ce>
 800e3d0:	462a      	mov	r2, r5
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 800e3d8:	461c      	mov	r4, r3
 800e3da:	3301      	adds	r3, #1
 800e3dc:	2820      	cmp	r0, #32
 800e3de:	d0f9      	beq.n	800e3d4 <follow_path+0x108>
 800e3e0:	282e      	cmp	r0, #46	; 0x2e
 800e3e2:	d0f7      	beq.n	800e3d4 <follow_path+0x108>
		w = lfn[si++];					/* Get an LFN character */
 800e3e4:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800e3e6:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 800e3ea:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 800e3ee:	2a2e      	cmp	r2, #46	; 0x2e
 800e3f0:	d002      	beq.n	800e3f8 <follow_path+0x12c>
 800e3f2:	f1ba 0a01 	subs.w	sl, sl, #1
 800e3f6:	d1f8      	bne.n	800e3ea <follow_path+0x11e>
		if (!w) break;					/* Break on end of the LFN */
 800e3f8:	b3b0      	cbz	r0, 800e468 <follow_path+0x19c>
 800e3fa:	2208      	movs	r2, #8
 800e3fc:	4641      	mov	r1, r8
 800e3fe:	2300      	movs	r3, #0
 800e400:	46b8      	mov	r8, r7
 800e402:	462f      	mov	r7, r5
 800e404:	4615      	mov	r5, r2
 800e406:	4699      	mov	r9, r3
 800e408:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800e40a:	2820      	cmp	r0, #32
 800e40c:	d003      	beq.n	800e416 <follow_path+0x14a>
 800e40e:	282e      	cmp	r0, #46	; 0x2e
 800e410:	d14d      	bne.n	800e4ae <follow_path+0x1e2>
 800e412:	45a2      	cmp	sl, r4
 800e414:	d04b      	beq.n	800e4ae <follow_path+0x1e2>
			cf |= NS_LOSS | NS_LFN; continue;
 800e416:	f046 0603 	orr.w	r6, r6, #3
 800e41a:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 800e41c:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800e420:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 800e422:	2800      	cmp	r0, #0
 800e424:	d1f1      	bne.n	800e40a <follow_path+0x13e>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e426:	4647      	mov	r7, r8
 800e428:	4690      	mov	r8, r2
 800e42a:	462a      	mov	r2, r5
 800e42c:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 800e430:	29e5      	cmp	r1, #229	; 0xe5
 800e432:	d102      	bne.n	800e43a <follow_path+0x16e>
 800e434:	2105      	movs	r1, #5
 800e436:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800e43a:	2a08      	cmp	r2, #8
 800e43c:	f000 8093 	beq.w	800e566 <follow_path+0x29a>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e440:	f003 020c 	and.w	r2, r3, #12
 800e444:	2a0c      	cmp	r2, #12
 800e446:	d065      	beq.n	800e514 <follow_path+0x248>
 800e448:	f003 0303 	and.w	r3, r3, #3
 800e44c:	2b03      	cmp	r3, #3
 800e44e:	d061      	beq.n	800e514 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e450:	07b1      	lsls	r1, r6, #30
 800e452:	d409      	bmi.n	800e468 <follow_path+0x19c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800e454:	2b01      	cmp	r3, #1
 800e456:	d102      	bne.n	800e45e <follow_path+0x192>
 800e458:	f046 0610 	orr.w	r6, r6, #16
 800e45c:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800e45e:	2a04      	cmp	r2, #4
 800e460:	d102      	bne.n	800e468 <follow_path+0x19c>
 800e462:	f046 0608 	orr.w	r6, r6, #8
 800e466:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 800e468:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e46a:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800e46e:	f7ff fd81 	bl	800df74 <dir_find>
			ns = dp->fn[NSFLAG];
 800e472:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800e476:	2800      	cmp	r0, #0
 800e478:	d158      	bne.n	800e52c <follow_path+0x260>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800e47a:	075a      	lsls	r2, r3, #29
 800e47c:	f53f af69 	bmi.w	800e352 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800e480:	79bb      	ldrb	r3, [r7, #6]
 800e482:	06db      	lsls	r3, r3, #27
 800e484:	f140 8097 	bpl.w	800e5b6 <follow_path+0x2ea>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 800e48e:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e492:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 800e496:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e498:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 800e49a:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800e49c:	d102      	bne.n	800e4a4 <follow_path+0x1d8>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e49e:	8a9b      	ldrh	r3, [r3, #20]
 800e4a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800e4a4:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800e4a6:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 800e4a8:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800e4ac:	e726      	b.n	800e2fc <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800e4ae:	454d      	cmp	r5, r9
 800e4b0:	d91c      	bls.n	800e4ec <follow_path+0x220>
 800e4b2:	ebaa 0104 	sub.w	r1, sl, r4
 800e4b6:	fab1 f181 	clz	r1, r1
 800e4ba:	0949      	lsrs	r1, r1, #5
 800e4bc:	b9b1      	cbnz	r1, 800e4ec <follow_path+0x220>
		if (w >= 0x80) {				/* Non ASCII character */
 800e4be:	287f      	cmp	r0, #127	; 0x7f
 800e4c0:	d83c      	bhi.n	800e53c <follow_path+0x270>
	while (*str && *str != chr) str++;
 800e4c2:	212b      	movs	r1, #43	; 0x2b
 800e4c4:	f8df c118 	ldr.w	ip, [pc, #280]	; 800e5e0 <follow_path+0x314>
 800e4c8:	e003      	b.n	800e4d2 <follow_path+0x206>
 800e4ca:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 800e4ce:	2900      	cmp	r1, #0
 800e4d0:	d052      	beq.n	800e578 <follow_path+0x2ac>
 800e4d2:	4281      	cmp	r1, r0
 800e4d4:	d1f9      	bne.n	800e4ca <follow_path+0x1fe>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800e4d6:	f046 0603 	orr.w	r6, r6, #3
 800e4da:	205f      	movs	r0, #95	; 0x5f
 800e4dc:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 800e4de:	eb08 0109 	add.w	r1, r8, r9
 800e4e2:	f109 0901 	add.w	r9, r9, #1
 800e4e6:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 800e4ea:	e797      	b.n	800e41c <follow_path+0x150>
			if (ni == 11) {				/* Long extension */
 800e4ec:	2d0b      	cmp	r5, #11
 800e4ee:	d064      	beq.n	800e5ba <follow_path+0x2ee>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800e4f0:	45a2      	cmp	sl, r4
 800e4f2:	d003      	beq.n	800e4fc <follow_path+0x230>
 800e4f4:	f046 0603 	orr.w	r6, r6, #3
 800e4f8:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 800e4fa:	d394      	bcc.n	800e426 <follow_path+0x15a>
			b <<= 2; continue;
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800e500:	250b      	movs	r5, #11
 800e502:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 800e506:	b2db      	uxtb	r3, r3
 800e508:	e788      	b.n	800e41c <follow_path+0x150>
	*path = &p[si];						/* Return pointer to the next segment */
 800e50a:	46a2      	mov	sl, r4
 800e50c:	4498      	add	r8, r3
 800e50e:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800e510:	2404      	movs	r4, #4
 800e512:	e73e      	b.n	800e392 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e514:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 800e518:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e51a:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800e51c:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 800e520:	f7ff fd28 	bl	800df74 <dir_find>
			ns = dp->fn[NSFLAG];
 800e524:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 800e528:	2800      	cmp	r0, #0
 800e52a:	d0a6      	beq.n	800e47a <follow_path+0x1ae>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800e52c:	2804      	cmp	r0, #4
 800e52e:	f47f af10 	bne.w	800e352 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e532:	f013 0f04 	tst.w	r3, #4
 800e536:	bf08      	it	eq
 800e538:	2005      	moveq	r0, #5
 800e53a:	e70a      	b.n	800e352 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800e53c:	e9cd 3200 	strd	r3, r2, [sp]
 800e540:	f001 fc46 	bl	800fdd0 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e544:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e548:	b918      	cbnz	r0, 800e552 <follow_path+0x286>
			cf |= NS_LFN;				/* Force create LFN entry */
 800e54a:	f046 0602 	orr.w	r6, r6, #2
 800e54e:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e550:	e7c1      	b.n	800e4d6 <follow_path+0x20a>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e552:	4922      	ldr	r1, [pc, #136]	; (800e5dc <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 800e554:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e558:	4408      	add	r0, r1
			cf |= NS_LFN;				/* Force create LFN entry */
 800e55a:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800e55c:	f810 0c80 	ldrb.w	r0, [r0, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800e560:	2800      	cmp	r0, #0
 800e562:	d0b8      	beq.n	800e4d6 <follow_path+0x20a>
 800e564:	e7ad      	b.n	800e4c2 <follow_path+0x1f6>
	if (ni == 8) b <<= 2;
 800e566:	009a      	lsls	r2, r3, #2
 800e568:	f002 020c 	and.w	r2, r2, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800e56c:	2a0c      	cmp	r2, #12
 800e56e:	d0d1      	beq.n	800e514 <follow_path+0x248>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800e570:	07b0      	lsls	r0, r6, #30
 800e572:	f57f af74 	bpl.w	800e45e <follow_path+0x192>
 800e576:	e777      	b.n	800e468 <follow_path+0x19c>
				if (IsUpper(w)) {		/* ASCII large capital */
 800e578:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 800e57c:	2919      	cmp	r1, #25
 800e57e:	d80f      	bhi.n	800e5a0 <follow_path+0x2d4>
					b |= 2;
 800e580:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 800e584:	b2c0      	uxtb	r0, r0
 800e586:	e7aa      	b.n	800e4de <follow_path+0x212>
		dp->fn[NSFLAG] = NS_NONAME;
 800e588:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 800e58a:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 800e58c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 800e590:	b003      	add	sp, #12
 800e592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 800e596:	f7ff bc41 	b.w	800de1c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800e59a:	4626      	mov	r6, r4
 800e59c:	2401      	movs	r4, #1
 800e59e:	e722      	b.n	800e3e6 <follow_path+0x11a>
					if (IsLower(w)) {	/* ASCII small capital */
 800e5a0:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 800e5a4:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 800e5a6:	bf9c      	itt	ls
 800e5a8:	3820      	subls	r0, #32
 800e5aa:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 800e5ae:	b2c0      	uxtb	r0, r0
 800e5b0:	e795      	b.n	800e4de <follow_path+0x212>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800e5b2:	4690      	mov	r8, r2
 800e5b4:	e6e8      	b.n	800e388 <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800e5b6:	2005      	movs	r0, #5
 800e5b8:	e6cb      	b.n	800e352 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 800e5ba:	4647      	mov	r7, r8
 800e5bc:	4690      	mov	r8, r2
 800e5be:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e5c2:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 800e5c6:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800e5c8:	2ae5      	cmp	r2, #229	; 0xe5
 800e5ca:	f47f af39 	bne.w	800e440 <follow_path+0x174>
 800e5ce:	2205      	movs	r2, #5
 800e5d0:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 800e5d4:	e734      	b.n	800e440 <follow_path+0x174>
 800e5d6:	bf00      	nop
 800e5d8:	0801b9e8 	.word	0x0801b9e8
 800e5dc:	0801b9fc 	.word	0x0801b9fc
 800e5e0:	0801b9f4 	.word	0x0801b9f4

0800e5e4 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e5e4:	2901      	cmp	r1, #1
{
 800e5e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ea:	460c      	mov	r4, r1
 800e5ec:	b083      	sub	sp, #12
	FATFS *fs = obj->fs;
 800e5ee:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e5f0:	d914      	bls.n	800e61c <remove_chain+0x38>
 800e5f2:	69ab      	ldr	r3, [r5, #24]
 800e5f4:	428b      	cmp	r3, r1
 800e5f6:	d911      	bls.n	800e61c <remove_chain+0x38>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e5f8:	4606      	mov	r6, r0
 800e5fa:	4611      	mov	r1, r2
 800e5fc:	b992      	cbnz	r2, 800e624 <remove_chain+0x40>
 800e5fe:	462f      	mov	r7, r5
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e600:	f105 0934 	add.w	r9, r5, #52	; 0x34
			fs->wflag = 1;
 800e604:	f04f 0801 	mov.w	r8, #1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e608:	429c      	cmp	r4, r3
 800e60a:	d207      	bcs.n	800e61c <remove_chain+0x38>
		switch (fs->fs_type) {
 800e60c:	783b      	ldrb	r3, [r7, #0]
 800e60e:	2b02      	cmp	r3, #2
 800e610:	f000 80a3 	beq.w	800e75a <remove_chain+0x176>
 800e614:	2b03      	cmp	r3, #3
 800e616:	d022      	beq.n	800e65e <remove_chain+0x7a>
 800e618:	2b01      	cmp	r3, #1
 800e61a:	d011      	beq.n	800e640 <remove_chain+0x5c>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e61c:	2002      	movs	r0, #2
}
 800e61e:	b003      	add	sp, #12
 800e620:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e624:	4293      	cmp	r3, r2
 800e626:	d9f9      	bls.n	800e61c <remove_chain+0x38>
 800e628:	2a01      	cmp	r2, #1
 800e62a:	d0f7      	beq.n	800e61c <remove_chain+0x38>
 800e62c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e630:	4628      	mov	r0, r5
 800e632:	f7fe ffef 	bl	800d614 <put_fat.part.0>
		if (res != FR_OK) return res;
 800e636:	2800      	cmp	r0, #0
 800e638:	d1f1      	bne.n	800e61e <remove_chain+0x3a>
 800e63a:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	e7df      	b.n	800e600 <remove_chain+0x1c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e640:	6a79      	ldr	r1, [r7, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e642:	eb04 0a54 	add.w	sl, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e646:	4638      	mov	r0, r7
 800e648:	eb01 215a 	add.w	r1, r1, sl, lsr #9
 800e64c:	f7fe fe32 	bl	800d2b4 <move_window>
 800e650:	2800      	cmp	r0, #0
 800e652:	f000 80a9 	beq.w	800e7a8 <remove_chain+0x1c4>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e656:	2001      	movs	r0, #1
}
 800e658:	b003      	add	sp, #12
 800e65a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e65e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e660:	4638      	mov	r0, r7
 800e662:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e666:	f7fe fe25 	bl	800d2b4 <move_window>
 800e66a:	2800      	cmp	r0, #0
 800e66c:	d1f3      	bne.n	800e656 <remove_chain+0x72>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e66e:	00a3      	lsls	r3, r4, #2
 800e670:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e674:	443b      	add	r3, r7
 800e676:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e67a:	f02a 4a70 	bic.w	sl, sl, #4026531840	; 0xf0000000
		if (nxt == 0) break;				/* Empty cluster? */
 800e67e:	f1ba 0f00 	cmp.w	sl, #0
 800e682:	f000 80af 	beq.w	800e7e4 <remove_chain+0x200>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e686:	f1ba 0f01 	cmp.w	sl, #1
 800e68a:	d0c7      	beq.n	800e61c <remove_chain+0x38>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e68c:	69ab      	ldr	r3, [r5, #24]
 800e68e:	42a3      	cmp	r3, r4
 800e690:	d9c4      	bls.n	800e61c <remove_chain+0x38>
		switch (fs->fs_type) {
 800e692:	782f      	ldrb	r7, [r5, #0]
 800e694:	2f02      	cmp	r7, #2
 800e696:	d029      	beq.n	800e6ec <remove_chain+0x108>
 800e698:	2f03      	cmp	r7, #3
 800e69a:	d047      	beq.n	800e72c <remove_chain+0x148>
 800e69c:	2f01      	cmp	r7, #1
 800e69e:	d1bd      	bne.n	800e61c <remove_chain+0x38>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6a0:	6a69      	ldr	r1, [r5, #36]	; 0x24
			bc = (UINT)clst; bc += bc / 2;
 800e6a2:	eb04 0b54 	add.w	fp, r4, r4, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	eb01 215b 	add.w	r1, r1, fp, lsr #9
 800e6ac:	f7fe fe02 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800e6b0:	2800      	cmp	r0, #0
 800e6b2:	d1b4      	bne.n	800e61e <remove_chain+0x3a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6b4:	07e2      	lsls	r2, r4, #31
			p = fs->win + bc++ % SS(fs);
 800e6b6:	f10b 0301 	add.w	r3, fp, #1
 800e6ba:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6be:	d55c      	bpl.n	800e77a <remove_chain+0x196>
 800e6c0:	f819 200b 	ldrb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6c4:	4628      	mov	r0, r5
 800e6c6:	9301      	str	r3, [sp, #4]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e6c8:	f002 020f 	and.w	r2, r2, #15
 800e6cc:	f809 200b 	strb.w	r2, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6d0:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e6d2:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e6d4:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e6d8:	f7fe fdec 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800e6dc:	9b01      	ldr	r3, [sp, #4]
 800e6de:	2800      	cmp	r0, #0
 800e6e0:	d19d      	bne.n	800e61e <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e6e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6e6:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e6e8:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e6ea:	e00c      	b.n	800e706 <remove_chain+0x122>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e6ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e6ee:	4628      	mov	r0, r5
 800e6f0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e6f4:	f7fe fdde 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800e6f8:	2800      	cmp	r0, #0
 800e6fa:	d190      	bne.n	800e61e <remove_chain+0x3a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e6fc:	0064      	lsls	r4, r4, #1
 800e6fe:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 800e702:	442c      	add	r4, r5
 800e704:	86a0      	strh	r0, [r4, #52]	; 0x34
			fs->wflag = 1;
 800e706:	f885 8003 	strb.w	r8, [r5, #3]
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e70a:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 800e70e:	1e91      	subs	r1, r2, #2
 800e710:	428b      	cmp	r3, r1
 800e712:	d205      	bcs.n	800e720 <remove_chain+0x13c>
			fs->free_clst++;
 800e714:	3301      	adds	r3, #1
 800e716:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 800e718:	792b      	ldrb	r3, [r5, #4]
 800e71a:	f043 0301 	orr.w	r3, r3, #1
 800e71e:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e720:	4552      	cmp	r2, sl
 800e722:	d95f      	bls.n	800e7e4 <remove_chain+0x200>
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e724:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e726:	4654      	mov	r4, sl
 800e728:	69bb      	ldr	r3, [r7, #24]
 800e72a:	e76d      	b.n	800e608 <remove_chain+0x24>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e72c:	6a69      	ldr	r1, [r5, #36]	; 0x24
 800e72e:	4628      	mov	r0, r5
 800e730:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 800e734:	f7fe fdbe 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800e738:	2800      	cmp	r0, #0
 800e73a:	f47f af70 	bne.w	800e61e <remove_chain+0x3a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e73e:	00a4      	lsls	r4, r4, #2
 800e740:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 800e744:	f859 2004 	ldr.w	r2, [r9, r4]
	*ptr++ = (BYTE)val; val >>= 8;
 800e748:	f829 0004 	strh.w	r0, [r9, r4]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e74c:	444c      	add	r4, r9
	*ptr++ = (BYTE)val; val >>= 8;
 800e74e:	0e13      	lsrs	r3, r2, #24
 800e750:	70a0      	strb	r0, [r4, #2]
 800e752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	*ptr++ = (BYTE)val;
 800e756:	70e3      	strb	r3, [r4, #3]
			if (res != FR_OK) return res;
 800e758:	e7d5      	b.n	800e706 <remove_chain+0x122>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e75a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e75c:	4638      	mov	r0, r7
 800e75e:	eb01 2114 	add.w	r1, r1, r4, lsr #8
 800e762:	f7fe fda7 	bl	800d2b4 <move_window>
 800e766:	2800      	cmp	r0, #0
 800e768:	f47f af75 	bne.w	800e656 <remove_chain+0x72>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e76c:	0063      	lsls	r3, r4, #1
 800e76e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e772:	443b      	add	r3, r7
 800e774:	f8b3 a034 	ldrh.w	sl, [r3, #52]	; 0x34
			break;
 800e778:	e781      	b.n	800e67e <remove_chain+0x9a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e77a:	f809 000b 	strb.w	r0, [r9, fp]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e77e:	4628      	mov	r0, r5
 800e780:	6a69      	ldr	r1, [r5, #36]	; 0x24
			fs->wflag = 1;
 800e782:	70ef      	strb	r7, [r5, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e784:	eb01 2153 	add.w	r1, r1, r3, lsr #9
 800e788:	9301      	str	r3, [sp, #4]
 800e78a:	f7fe fd93 	bl	800d2b4 <move_window>
			if (res != FR_OK) break;
 800e78e:	2800      	cmp	r0, #0
 800e790:	f47f af45 	bne.w	800e61e <remove_chain+0x3a>
			p = fs->win + bc % SS(fs);
 800e794:	9b01      	ldr	r3, [sp, #4]
 800e796:	f3c3 0308 	ubfx	r3, r3, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e79a:	f819 0003 	ldrb.w	r0, [r9, r3]
			p = fs->win + bc % SS(fs);
 800e79e:	444b      	add	r3, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e7a0:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 800e7a4:	7018      	strb	r0, [r3, #0]
			if (res != FR_OK) return res;
 800e7a6:	e7ae      	b.n	800e706 <remove_chain+0x122>
			wc = fs->win[bc++ % SS(fs)];
 800e7a8:	f3ca 0308 	ubfx	r3, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
			wc = fs->win[bc++ % SS(fs)];
 800e7ae:	f10a 0a01 	add.w	sl, sl, #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7b2:	4638      	mov	r0, r7
			wc = fs->win[bc++ % SS(fs)];
 800e7b4:	443b      	add	r3, r7
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7b6:	eb01 215a 	add.w	r1, r1, sl, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 800e7ba:	f893 b034 	ldrb.w	fp, [r3, #52]	; 0x34
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7be:	f7fe fd79 	bl	800d2b4 <move_window>
 800e7c2:	2800      	cmp	r0, #0
 800e7c4:	f47f af47 	bne.w	800e656 <remove_chain+0x72>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7c8:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7cc:	07e1      	lsls	r1, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7ce:	44ba      	add	sl, r7
 800e7d0:	f89a 3034 	ldrb.w	r3, [sl, #52]	; 0x34
 800e7d4:	ea4b 2a03 	orr.w	sl, fp, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7d8:	bf4c      	ite	mi
 800e7da:	ea4f 1a1a 	movmi.w	sl, sl, lsr #4
 800e7de:	f3ca 0a0b 	ubfxpl	sl, sl, #0, #12
 800e7e2:	e74c      	b.n	800e67e <remove_chain+0x9a>
	return FR_OK;
 800e7e4:	2000      	movs	r0, #0
 800e7e6:	e71a      	b.n	800e61e <remove_chain+0x3a>

0800e7e8 <dir_next>:
{
 800e7e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e7ec:	69c3      	ldr	r3, [r0, #28]
{
 800e7ee:	b085      	sub	sp, #20
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e7f0:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d03d      	beq.n	800e872 <dir_next+0x8a>
 800e7f6:	3520      	adds	r5, #32
 800e7f8:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 800e7fc:	d239      	bcs.n	800e872 <dir_next+0x8a>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e7fe:	f3c5 0808 	ubfx	r8, r5, #0, #9
 800e802:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 800e804:	6807      	ldr	r7, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e806:	f1b8 0f00 	cmp.w	r8, #0
 800e80a:	d008      	beq.n	800e81e <dir_next+0x36>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e80c:	f107 0634 	add.w	r6, r7, #52	; 0x34
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e810:	4446      	add	r6, r8
	return FR_OK;
 800e812:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 800e814:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e816:	6226      	str	r6, [r4, #32]
}
 800e818:	b005      	add	sp, #20
 800e81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dp->sect++;				/* Next sector */
 800e81e:	460e      	mov	r6, r1
 800e820:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 800e822:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 800e824:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 800e826:	b341      	cbz	r1, 800e87a <dir_next+0x92>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e828:	897b      	ldrh	r3, [r7, #10]
 800e82a:	3b01      	subs	r3, #1
 800e82c:	ea13 2355 	ands.w	r3, r3, r5, lsr #9
 800e830:	9300      	str	r3, [sp, #0]
 800e832:	d1eb      	bne.n	800e80c <dir_next+0x24>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e834:	4638      	mov	r0, r7
 800e836:	f7fe ff73 	bl	800d720 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e83a:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e83c:	4681      	mov	r9, r0
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e83e:	d924      	bls.n	800e88a <dir_next+0xa2>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e840:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e844:	d023      	beq.n	800e88e <dir_next+0xa6>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	4283      	cmp	r3, r0
 800e84a:	d922      	bls.n	800e892 <dir_next+0xaa>
	clst -= 2;
 800e84c:	1e83      	subs	r3, r0, #2
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e84e:	f107 0634 	add.w	r6, r7, #52	; 0x34
 800e852:	4619      	mov	r1, r3
	clst -= 2;
 800e854:	9301      	str	r3, [sp, #4]
				dp->clust = clst;		/* Initialize data for new cluster */
 800e856:	f8c4 9018 	str.w	r9, [r4, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	3b02      	subs	r3, #2
 800e85e:	428b      	cmp	r3, r1
 800e860:	d904      	bls.n	800e86c <dir_next+0x84>
	return clst * fs->csize + fs->database;
 800e862:	897a      	ldrh	r2, [r7, #10]
 800e864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e866:	fb01 3302 	mla	r3, r1, r2, r3
 800e86a:	9300      	str	r3, [sp, #0]
				dp->sect = clust2sect(fs, clst);
 800e86c:	9b00      	ldr	r3, [sp, #0]
 800e86e:	61e3      	str	r3, [r4, #28]
 800e870:	e7ce      	b.n	800e810 <dir_next+0x28>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e872:	2004      	movs	r0, #4
}
 800e874:	b005      	add	sp, #20
 800e876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e87a:	893b      	ldrh	r3, [r7, #8]
 800e87c:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 800e880:	d8c4      	bhi.n	800e80c <dir_next+0x24>
				dp->sect = 0; return FR_NO_FILE;
 800e882:	2300      	movs	r3, #0
 800e884:	2004      	movs	r0, #4
 800e886:	61e3      	str	r3, [r4, #28]
 800e888:	e7c6      	b.n	800e818 <dir_next+0x30>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e88a:	2002      	movs	r0, #2
 800e88c:	e7c4      	b.n	800e818 <dir_next+0x30>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e88e:	2001      	movs	r0, #1
 800e890:	e7c2      	b.n	800e818 <dir_next+0x30>
					if (!stretch) {								/* If no stretch, report EOT */
 800e892:	2e00      	cmp	r6, #0
 800e894:	d0f5      	beq.n	800e882 <dir_next+0x9a>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e896:	69a1      	ldr	r1, [r4, #24]
 800e898:	4620      	mov	r0, r4
 800e89a:	f7ff f9ff 	bl	800dc9c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e89e:	4681      	mov	r9, r0
 800e8a0:	2800      	cmp	r0, #0
 800e8a2:	d05a      	beq.n	800e95a <dir_next+0x172>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e8a4:	2801      	cmp	r0, #1
 800e8a6:	d0f0      	beq.n	800e88a <dir_next+0xa2>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e8a8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e8ac:	d0ef      	beq.n	800e88e <dir_next+0xa6>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e8ae:	78fb      	ldrb	r3, [r7, #3]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d154      	bne.n	800e95e <dir_next+0x176>
 800e8b4:	f107 0b34 	add.w	fp, r7, #52	; 0x34
		*d++ = (BYTE)val;
 800e8b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8bc:	2100      	movs	r1, #0
 800e8be:	4658      	mov	r0, fp
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e8c0:	465e      	mov	r6, fp
		*d++ = (BYTE)val;
 800e8c2:	f00a f88f 	bl	80189e4 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8c6:	69bb      	ldr	r3, [r7, #24]
	clst -= 2;
 800e8c8:	f1a9 0202 	sub.w	r2, r9, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8cc:	3b02      	subs	r3, #2
	clst -= 2;
 800e8ce:	9201      	str	r2, [sp, #4]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e8d0:	429a      	cmp	r2, r3
 800e8d2:	d267      	bcs.n	800e9a4 <dir_next+0x1bc>
	return clst * fs->csize + fs->database;
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	897b      	ldrh	r3, [r7, #10]
 800e8d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e8da:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e8de:	633a      	str	r2, [r7, #48]	; 0x30
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d036      	beq.n	800e952 <dir_next+0x16a>
 800e8e4:	2300      	movs	r3, #0
						fs->wflag = 1;
 800e8e6:	e9cd 6402 	strd	r6, r4, [sp, #8]
 800e8ea:	465e      	mov	r6, fp
 800e8ec:	461c      	mov	r4, r3
 800e8ee:	46ab      	mov	fp, r5
 800e8f0:	4615      	mov	r5, r2
 800e8f2:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e8f6:	462a      	mov	r2, r5
 800e8f8:	4631      	mov	r1, r6
 800e8fa:	7878      	ldrb	r0, [r7, #1]
						fs->wflag = 1;
 800e8fc:	70fb      	strb	r3, [r7, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e8fe:	2301      	movs	r3, #1
 800e900:	f7fe fb2e 	bl	800cf60 <disk_write>
 800e904:	2800      	cmp	r0, #0
 800e906:	d1c2      	bne.n	800e88e <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e90a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e90c:	1aea      	subs	r2, r5, r3
 800e90e:	69fb      	ldr	r3, [r7, #28]
 800e910:	429a      	cmp	r2, r3
 800e912:	d212      	bcs.n	800e93a <dir_next+0x152>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e914:	f897 a002 	ldrb.w	sl, [r7, #2]
 800e918:	f1ba 0f01 	cmp.w	sl, #1
 800e91c:	d801      	bhi.n	800e922 <dir_next+0x13a>
 800e91e:	e00c      	b.n	800e93a <dir_next+0x152>
					wsect += fs->fsize;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e924:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 800e928:	2301      	movs	r3, #1
 800e92a:	4631      	mov	r1, r6
 800e92c:	462a      	mov	r2, r5
 800e92e:	7878      	ldrb	r0, [r7, #1]
 800e930:	f7fe fb16 	bl	800cf60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e934:	f1ba 0f01 	cmp.w	sl, #1
 800e938:	d1f2      	bne.n	800e920 <dir_next+0x138>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e93a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e93c:	3401      	adds	r4, #1
 800e93e:	1c5d      	adds	r5, r3, #1
 800e940:	897b      	ldrh	r3, [r7, #10]
 800e942:	42a3      	cmp	r3, r4
 800e944:	633d      	str	r5, [r7, #48]	; 0x30
 800e946:	d8d4      	bhi.n	800e8f2 <dir_next+0x10a>
 800e948:	462a      	mov	r2, r5
 800e94a:	4623      	mov	r3, r4
 800e94c:	465d      	mov	r5, fp
 800e94e:	e9dd 6402 	ldrd	r6, r4, [sp, #8]
					fs->winsect -= n;							/* Restore window offset */
 800e952:	1ad2      	subs	r2, r2, r3
 800e954:	9901      	ldr	r1, [sp, #4]
 800e956:	633a      	str	r2, [r7, #48]	; 0x30
 800e958:	e77d      	b.n	800e856 <dir_next+0x6e>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e95a:	2007      	movs	r0, #7
 800e95c:	e75c      	b.n	800e818 <dir_next+0x30>
		wsect = fs->winsect;	/* Current sector number */
 800e95e:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e962:	f107 0b34 	add.w	fp, r7, #52	; 0x34
 800e966:	2301      	movs	r3, #1
 800e968:	7878      	ldrb	r0, [r7, #1]
 800e96a:	4652      	mov	r2, sl
 800e96c:	4659      	mov	r1, fp
 800e96e:	f7fe faf7 	bl	800cf60 <disk_write>
 800e972:	2800      	cmp	r0, #0
 800e974:	d18b      	bne.n	800e88e <dir_next+0xa6>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 800e978:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e97a:	ebaa 0203 	sub.w	r2, sl, r3
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	429a      	cmp	r2, r3
 800e982:	d299      	bcs.n	800e8b8 <dir_next+0xd0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e984:	78be      	ldrb	r6, [r7, #2]
 800e986:	2e01      	cmp	r6, #1
 800e988:	d801      	bhi.n	800e98e <dir_next+0x1a6>
 800e98a:	e795      	b.n	800e8b8 <dir_next+0xd0>
 800e98c:	69fb      	ldr	r3, [r7, #28]
					wsect += fs->fsize;
 800e98e:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e990:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 800e992:	2301      	movs	r3, #1
 800e994:	4659      	mov	r1, fp
 800e996:	4652      	mov	r2, sl
 800e998:	7878      	ldrb	r0, [r7, #1]
 800e99a:	f7fe fae1 	bl	800cf60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e99e:	2e01      	cmp	r6, #1
 800e9a0:	d1f4      	bne.n	800e98c <dir_next+0x1a4>
 800e9a2:	e789      	b.n	800e8b8 <dir_next+0xd0>
	return clst * fs->csize + fs->database;
 800e9a4:	897b      	ldrh	r3, [r7, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e9a6:	2200      	movs	r2, #0
 800e9a8:	e799      	b.n	800e8de <dir_next+0xf6>
 800e9aa:	bf00      	nop

0800e9ac <dir_register>:
{
 800e9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e9b0:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 800e9b4:	b08b      	sub	sp, #44	; 0x2c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800e9b6:	f013 01a0 	ands.w	r1, r3, #160	; 0xa0
 800e9ba:	9302      	str	r3, [sp, #8]
 800e9bc:	f040 82ce 	bne.w	800ef5c <dir_register+0x5b0>
	FATFS *fs = dp->obj.fs;
 800e9c0:	f8d0 a000 	ldr.w	sl, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800e9c4:	4605      	mov	r5, r0
 800e9c6:	f8da 200c 	ldr.w	r2, [sl, #12]
 800e9ca:	8813      	ldrh	r3, [r2, #0]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	f000 82ca 	beq.w	800ef66 <dir_register+0x5ba>
 800e9d2:	468b      	mov	fp, r1
 800e9d4:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 800e9d8:	f10b 0b01 	add.w	fp, fp, #1
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d1f9      	bne.n	800e9d4 <dir_register+0x28>
	mem_cpy(sn, dp->fn, 12);
 800e9e0:	f105 0724 	add.w	r7, r5, #36	; 0x24
			*d++ = *s++;
 800e9e4:	ab0a      	add	r3, sp, #40	; 0x28
 800e9e6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800e9ea:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800e9ee:	9b02      	ldr	r3, [sp, #8]
 800e9f0:	07dc      	lsls	r4, r3, #31
 800e9f2:	d462      	bmi.n	800eaba <dir_register+0x10e>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800e9f4:	f013 0402 	ands.w	r4, r3, #2
 800e9f8:	4657      	mov	r7, sl
 800e9fa:	f000 8239 	beq.w	800ee70 <dir_register+0x4c4>
 800e9fe:	4bc5      	ldr	r3, [pc, #788]	; (800ed14 <dir_register+0x368>)
 800ea00:	f10b 040c 	add.w	r4, fp, #12
	res = dir_sdi(dp, 0);
 800ea04:	2100      	movs	r1, #0
 800ea06:	4628      	mov	r0, r5
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea08:	fba3 3404 	umull	r3, r4, r3, r4
	res = dir_sdi(dp, 0);
 800ea0c:	f7ff fa06 	bl	800de1c <dir_sdi>
	if (res == FR_OK) {
 800ea10:	4606      	mov	r6, r0
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ea12:	08a4      	lsrs	r4, r4, #2
 800ea14:	f104 0901 	add.w	r9, r4, #1
	if (res == FR_OK) {
 800ea18:	2800      	cmp	r0, #0
 800ea1a:	f040 8233 	bne.w	800ee84 <dir_register+0x4d8>
		n = 0;
 800ea1e:	4680      	mov	r8, r0
 800ea20:	e008      	b.n	800ea34 <dir_register+0x88>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ea22:	0952      	lsrs	r2, r2, #5
 800ea24:	b1c3      	cbz	r3, 800ea58 <dir_register+0xac>
				n = 0;					/* Not a blank entry. Restart to search */
 800ea26:	4690      	mov	r8, r2
			res = dir_next(dp, 1);
 800ea28:	f7ff fede 	bl	800e7e8 <dir_next>
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ea2c:	4606      	mov	r6, r0
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f040 8228 	bne.w	800ee84 <dir_register+0x4d8>
			res = move_window(fs, dp->sect);
 800ea34:	69e9      	ldr	r1, [r5, #28]
 800ea36:	4638      	mov	r0, r7
 800ea38:	f7fe fc3c 	bl	800d2b4 <move_window>
 800ea3c:	4606      	mov	r6, r0
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea3e:	f108 0801 	add.w	r8, r8, #1
			res = dir_next(dp, 1);
 800ea42:	2101      	movs	r1, #1
 800ea44:	4628      	mov	r0, r5
			if (res != FR_OK) break;
 800ea46:	2e00      	cmp	r6, #0
 800ea48:	f040 821c 	bne.w	800ee84 <dir_register+0x4d8>
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ea4c:	6a2b      	ldr	r3, [r5, #32]
 800ea4e:	781b      	ldrb	r3, [r3, #0]
 800ea50:	2be5      	cmp	r3, #229	; 0xe5
 800ea52:	fab3 f283 	clz	r2, r3
 800ea56:	d1e4      	bne.n	800ea22 <dir_register+0x76>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ea58:	45c1      	cmp	r9, r8
 800ea5a:	d1e5      	bne.n	800ea28 <dir_register+0x7c>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ea5c:	2c00      	cmp	r4, #0
 800ea5e:	f040 8284 	bne.w	800ef6a <dir_register+0x5be>
		res = move_window(fs, dp->sect);
 800ea62:	69e9      	ldr	r1, [r5, #28]
 800ea64:	4650      	mov	r0, sl
 800ea66:	f7fe fc25 	bl	800d2b4 <move_window>
		if (res == FR_OK) {
 800ea6a:	4606      	mov	r6, r0
 800ea6c:	bb08      	cbnz	r0, 800eab2 <dir_register+0x106>
		*d++ = (BYTE)val;
 800ea6e:	2220      	movs	r2, #32
 800ea70:	4601      	mov	r1, r0
 800ea72:	6a28      	ldr	r0, [r5, #32]
 800ea74:	f009 ffb6 	bl	80189e4 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea78:	6a2b      	ldr	r3, [r5, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800ea7a:	f105 0225 	add.w	r2, r5, #37	; 0x25
 800ea7e:	1a9a      	subs	r2, r3, r2
 800ea80:	2a02      	cmp	r2, #2
 800ea82:	f240 83d3 	bls.w	800f22c <dir_register+0x880>
			*d++ = *s++;
 800ea86:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 800ea88:	601a      	str	r2, [r3, #0]
 800ea8a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800ea8c:	605a      	str	r2, [r3, #4]
 800ea8e:	f895 202c 	ldrb.w	r2, [r5, #44]	; 0x2c
 800ea92:	721a      	strb	r2, [r3, #8]
 800ea94:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800ea98:	725a      	strb	r2, [r3, #9]
 800ea9a:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
 800ea9e:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 800eaa0:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800eaa2:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
 800eaa6:	6a29      	ldr	r1, [r5, #32]
 800eaa8:	f003 0318 	and.w	r3, r3, #24
 800eaac:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 800eaae:	f88a 2003 	strb.w	r2, [sl, #3]
}
 800eab2:	4630      	mov	r0, r6
 800eab4:	b00b      	add	sp, #44	; 0x2c
 800eab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*d++ = *s++;
 800eaba:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
		for (n = 1; n < 100; n++) {
 800eabe:	f04f 0801 	mov.w	r8, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eac2:	2240      	movs	r2, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eac4:	f8cd b00c 	str.w	fp, [sp, #12]
			*d++ = *s++;
 800eac8:	9300      	str	r3, [sp, #0]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eaca:	46c3      	mov	fp, r8
			*d++ = *s++;
 800eacc:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
 800ead0:	460e      	mov	r6, r1
				if (sr & 0x10000) sr ^= 0x11021;
 800ead2:	4c91      	ldr	r4, [pc, #580]	; (800ed18 <dir_register+0x36c>)
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ead4:	f04f 0920 	mov.w	r9, #32
 800ead8:	4698      	mov	r8, r3
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800eada:	f885 202f 	strb.w	r2, [r5, #47]	; 0x2f
			*d++ = *s++;
 800eade:	9001      	str	r0, [sp, #4]
 800eae0:	9b01      	ldr	r3, [sp, #4]
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800eae2:	f1bb 0f05 	cmp.w	fp, #5
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800eae6:	f8da 100c 	ldr.w	r1, [sl, #12]
			*d++ = *s++;
 800eaea:	f8a5 802c 	strh.w	r8, [r5, #44]	; 0x2c
 800eaee:	e9c5 3609 	strd	r3, r6, [r5, #36]	; 0x24
 800eaf2:	9b00      	ldr	r3, [sp, #0]
 800eaf4:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800eaf8:	f240 8135 	bls.w	800ed66 <dir_register+0x3ba>
		while (*lfn) {	/* Create a CRC */
 800eafc:	880a      	ldrh	r2, [r1, #0]
 800eafe:	2a00      	cmp	r2, #0
 800eb00:	f000 8131 	beq.w	800ed66 <dir_register+0x3ba>
				sr = (sr << 1) + (wc & 1);
 800eb04:	468c      	mov	ip, r1
 800eb06:	f002 0101 	and.w	r1, r2, #1
				wc >>= 1;
 800eb0a:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 800eb0c:	eb01 014b 	add.w	r1, r1, fp, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb10:	e009      	b.n	800eb26 <dir_register+0x17a>
				sr = (sr << 1) + (wc & 1);
 800eb12:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb16:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 800eb1a:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 800eb1e:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb22:	bf18      	it	ne
 800eb24:	4061      	eorne	r1, r4
				sr = (sr << 1) + (wc & 1);
 800eb26:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 800eb2a:	0893      	lsrs	r3, r2, #2
 800eb2c:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 800eb2e:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb32:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 800eb34:	f003 0301 	and.w	r3, r3, #1
 800eb38:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb3c:	bf48      	it	mi
 800eb3e:	ea8e 0e04 	eormi.w	lr, lr, r4
				wc >>= 1;
 800eb42:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 800eb44:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb48:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 800eb4c:	f001 0101 	and.w	r1, r1, #1
				wc >>= 1;
 800eb50:	ea4f 3ed2 	mov.w	lr, r2, lsr #15
				if (sr & 0x10000) sr ^= 0x11021;
 800eb54:	bf18      	it	ne
 800eb56:	4063      	eorne	r3, r4
				sr = (sr << 1) + (wc & 1);
 800eb58:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb5c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800eb5e:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 800eb62:	bf48      	it	mi
 800eb64:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800eb66:	f003 0301 	and.w	r3, r3, #1
 800eb6a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb6e:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800eb70:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 800eb74:	bf48      	it	mi
 800eb76:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800eb78:	f000 0001 	and.w	r0, r0, #1
 800eb7c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb80:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800eb82:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 800eb86:	bf48      	it	mi
 800eb88:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800eb8a:	f001 0101 	and.w	r1, r1, #1
 800eb8e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eb92:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800eb94:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 800eb98:	bf48      	it	mi
 800eb9a:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800eb9c:	f003 0301 	and.w	r3, r3, #1
 800eba0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800eba4:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800eba6:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 800ebaa:	bf48      	it	mi
 800ebac:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800ebae:	f000 0001 	and.w	r0, r0, #1
 800ebb2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ebb6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800ebb8:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 800ebbc:	bf48      	it	mi
 800ebbe:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800ebc0:	f001 0101 	and.w	r1, r1, #1
 800ebc4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ebc8:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800ebca:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 800ebce:	bf48      	it	mi
 800ebd0:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800ebd2:	f003 0301 	and.w	r3, r3, #1
 800ebd6:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ebda:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 800ebdc:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 800ebe0:	bf48      	it	mi
 800ebe2:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800ebe4:	f000 0001 	and.w	r0, r0, #1
 800ebe8:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ebec:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 800ebee:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 800ebf2:	bf48      	it	mi
 800ebf4:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800ebf6:	f001 0101 	and.w	r1, r1, #1
 800ebfa:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ebfe:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 800ec00:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 800ec04:	bf48      	it	mi
 800ec06:	4060      	eormi	r0, r4
				sr = (sr << 1) + (wc & 1);
 800ec08:	f003 0301 	and.w	r3, r3, #1
 800ec0c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ec10:	0400      	lsls	r0, r0, #16
 800ec12:	bf48      	it	mi
 800ec14:	4061      	eormi	r1, r4
				sr = (sr << 1) + (wc & 1);
 800ec16:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ec1a:	040a      	lsls	r2, r1, #16
		while (*lfn) {	/* Create a CRC */
 800ec1c:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 800ec20:	bf48      	it	mi
 800ec22:	4063      	eormi	r3, r4
				sr = (sr << 1) + (wc & 1);
 800ec24:	eb0e 0e43 	add.w	lr, lr, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 800ec28:	041b      	lsls	r3, r3, #16
 800ec2a:	bf48      	it	mi
 800ec2c:	ea8e 0e04 	eormi.w	lr, lr, r4
		while (*lfn) {	/* Create a CRC */
 800ec30:	2a00      	cmp	r2, #0
 800ec32:	f47f af6e 	bne.w	800eb12 <dir_register+0x166>
		c = (BYTE)((seq % 16) + '0');
 800ec36:	f00e 010f 	and.w	r1, lr, #15
 800ec3a:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800ec3e:	2a39      	cmp	r2, #57	; 0x39
 800ec40:	bf88      	it	hi
 800ec42:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800ec46:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 800ec4a:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 800ec4e:	f88d 201b 	strb.w	r2, [sp, #27]
	} while (seq);
 800ec52:	f240 8156 	bls.w	800ef02 <dir_register+0x556>
		c = (BYTE)((seq % 16) + '0');
 800ec56:	f001 000f 	and.w	r0, r1, #15
 800ec5a:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800ec5e:	2a39      	cmp	r2, #57	; 0x39
 800ec60:	bf88      	it	hi
 800ec62:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800ec66:	290f      	cmp	r1, #15
		seq /= 16;
 800ec68:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 800ec6c:	f88d 201a 	strb.w	r2, [sp, #26]
	} while (seq);
 800ec70:	f240 814d 	bls.w	800ef0e <dir_register+0x562>
		c = (BYTE)((seq % 16) + '0');
 800ec74:	f000 010f 	and.w	r1, r0, #15
 800ec78:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800ec7c:	2a39      	cmp	r2, #57	; 0x39
 800ec7e:	bf88      	it	hi
 800ec80:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800ec84:	280f      	cmp	r0, #15
		seq /= 16;
 800ec86:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 800ec8a:	f88d 2019 	strb.w	r2, [sp, #25]
	} while (seq);
 800ec8e:	f240 814d 	bls.w	800ef2c <dir_register+0x580>
		c = (BYTE)((seq % 16) + '0');
 800ec92:	f001 000f 	and.w	r0, r1, #15
 800ec96:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800ec9a:	2a39      	cmp	r2, #57	; 0x39
 800ec9c:	bf88      	it	hi
 800ec9e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800eca2:	290f      	cmp	r1, #15
		seq /= 16;
 800eca4:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 800eca8:	f88d 2018 	strb.w	r2, [sp, #24]
	} while (seq);
 800ecac:	f240 8144 	bls.w	800ef38 <dir_register+0x58c>
		c = (BYTE)((seq % 16) + '0');
 800ecb0:	f000 010f 	and.w	r1, r0, #15
 800ecb4:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800ecb8:	2a39      	cmp	r2, #57	; 0x39
 800ecba:	bf88      	it	hi
 800ecbc:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800ecc0:	280f      	cmp	r0, #15
		seq /= 16;
 800ecc2:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 800ecc6:	f88d 2017 	strb.w	r2, [sp, #23]
	} while (seq);
 800ecca:	f240 813b 	bls.w	800ef44 <dir_register+0x598>
		c = (BYTE)((seq % 16) + '0');
 800ecce:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 800ecd2:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 800ecd6:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 800ecda:	2a39      	cmp	r2, #57	; 0x39
 800ecdc:	bf88      	it	hi
 800ecde:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 800ece2:	290f      	cmp	r1, #15
		ns[i--] = c;
 800ece4:	f88d 2016 	strb.w	r2, [sp, #22]
	} while (seq);
 800ece8:	f240 8132 	bls.w	800ef50 <dir_register+0x5a4>
		c = (BYTE)((seq % 16) + '0');
 800ecec:	f00e 010f 	and.w	r1, lr, #15
 800ecf0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 800ecf4:	2a39      	cmp	r2, #57	; 0x39
 800ecf6:	bf88      	it	hi
 800ecf8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 800ecfc:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 800ed00:	f88d 2015 	strb.w	r2, [sp, #21]
	} while (seq);
 800ed04:	f240 8109 	bls.w	800ef1a <dir_register+0x56e>
		ns[i--] = c;
 800ed08:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ed0c:	f105 0123 	add.w	r1, r5, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ed10:	2200      	movs	r2, #0
 800ed12:	e006      	b.n	800ed22 <dir_register+0x376>
 800ed14:	4ec4ec4f 	.word	0x4ec4ec4f
 800ed18:	00011021 	.word	0x00011021
 800ed1c:	3201      	adds	r2, #1
 800ed1e:	4562      	cmp	r2, ip
 800ed20:	d003      	beq.n	800ed2a <dir_register+0x37e>
 800ed22:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ed26:	2b20      	cmp	r3, #32
 800ed28:	d1f8      	bne.n	800ed1c <dir_register+0x370>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed2a:	f1bc 0f07 	cmp.w	ip, #7
 800ed2e:	d91c      	bls.n	800ed6a <dir_register+0x3be>
 800ed30:	1c50      	adds	r0, r2, #1
 800ed32:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800ed36:	2807      	cmp	r0, #7
 800ed38:	d809      	bhi.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed3a:	1c42      	adds	r2, r0, #1
 800ed3c:	2120      	movs	r1, #32
 800ed3e:	2a08      	cmp	r2, #8
 800ed40:	f1c0 0208 	rsb	r2, r0, #8
 800ed44:	4438      	add	r0, r7
 800ed46:	bf88      	it	hi
 800ed48:	2201      	movhi	r2, #1
 800ed4a:	f009 fe4b 	bl	80189e4 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f7ff f910 	bl	800df74 <dir_find>
			if (res != FR_OK) break;
 800ed54:	2800      	cmp	r0, #0
 800ed56:	d17d      	bne.n	800ee54 <dir_register+0x4a8>
		for (n = 1; n < 100; n++) {
 800ed58:	f10b 0b01 	add.w	fp, fp, #1
 800ed5c:	f1bb 0f64 	cmp.w	fp, #100	; 0x64
 800ed60:	f47f aebe 	bne.w	800eae0 <dir_register+0x134>
 800ed64:	e091      	b.n	800ee8a <dir_register+0x4de>
 800ed66:	46de      	mov	lr, fp
 800ed68:	e765      	b.n	800ec36 <dir_register+0x28a>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed6a:	f10c 0328 	add.w	r3, ip, #40	; 0x28
 800ed6e:	f10c 0c01 	add.w	ip, ip, #1
 800ed72:	eb0d 0103 	add.w	r1, sp, r3
 800ed76:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ed7a:	54b9      	strb	r1, [r7, r2]
 800ed7c:	3201      	adds	r2, #1
	} while (j < 8);
 800ed7e:	2a07      	cmp	r2, #7
 800ed80:	d8e5      	bhi.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed82:	f1bc 0f08 	cmp.w	ip, #8
 800ed86:	f000 8085 	beq.w	800ee94 <dir_register+0x4e8>
 800ed8a:	f10c 0328 	add.w	r3, ip, #40	; 0x28
	} while (j < 8);
 800ed8e:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ed90:	f102 0001 	add.w	r0, r2, #1
 800ed94:	eb0d 0103 	add.w	r1, sp, r3
 800ed98:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ed9c:	54b9      	strb	r1, [r7, r2]
 800ed9e:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 800eda2:	d0d4      	beq.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eda4:	2908      	cmp	r1, #8
 800eda6:	d07d      	beq.n	800eea4 <dir_register+0x4f8>
 800eda8:	f10c 0329 	add.w	r3, ip, #41	; 0x29
	} while (j < 8);
 800edac:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800edae:	eb0d 0103 	add.w	r1, sp, r3
 800edb2:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800edb6:	5439      	strb	r1, [r7, r0]
 800edb8:	f10c 0102 	add.w	r1, ip, #2
 800edbc:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800edc0:	d0c5      	beq.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800edc2:	2908      	cmp	r1, #8
 800edc4:	d076      	beq.n	800eeb4 <dir_register+0x508>
 800edc6:	f10c 032a 	add.w	r3, ip, #42	; 0x2a
	} while (j < 8);
 800edca:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800edcc:	eb0d 0103 	add.w	r1, sp, r3
 800edd0:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800edd4:	5439      	strb	r1, [r7, r0]
 800edd6:	f10c 0103 	add.w	r1, ip, #3
 800edda:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800edde:	d0b6      	beq.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ede0:	2908      	cmp	r1, #8
 800ede2:	d06f      	beq.n	800eec4 <dir_register+0x518>
 800ede4:	f10c 032b 	add.w	r3, ip, #43	; 0x2b
	} while (j < 8);
 800ede8:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800edea:	eb0d 0103 	add.w	r1, sp, r3
 800edee:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800edf2:	5439      	strb	r1, [r7, r0]
 800edf4:	f10c 0104 	add.w	r1, ip, #4
 800edf8:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800edfc:	d0a7      	beq.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800edfe:	2908      	cmp	r1, #8
 800ee00:	d068      	beq.n	800eed4 <dir_register+0x528>
 800ee02:	f10c 032c 	add.w	r3, ip, #44	; 0x2c
	} while (j < 8);
 800ee06:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee08:	eb0d 0103 	add.w	r1, sp, r3
 800ee0c:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ee10:	5439      	strb	r1, [r7, r0]
 800ee12:	f10c 0105 	add.w	r1, ip, #5
 800ee16:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800ee1a:	d098      	beq.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee1c:	2908      	cmp	r1, #8
 800ee1e:	d061      	beq.n	800eee4 <dir_register+0x538>
 800ee20:	f10c 032d 	add.w	r3, ip, #45	; 0x2d
	} while (j < 8);
 800ee24:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee26:	eb0d 0103 	add.w	r1, sp, r3
 800ee2a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 800ee2e:	5439      	strb	r1, [r7, r0]
 800ee30:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 800ee34:	d08b      	beq.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee36:	f1bc 0f01 	cmp.w	ip, #1
 800ee3a:	d15b      	bne.n	800eef4 <dir_register+0x548>
 800ee3c:	f89d 201b 	ldrb.w	r2, [sp, #27]
	} while (j < 8);
 800ee40:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee42:	547a      	strb	r2, [r7, r1]
	} while (j < 8);
 800ee44:	d183      	bne.n	800ed4e <dir_register+0x3a2>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ee46:	4628      	mov	r0, r5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee48:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ee4c:	f7ff f892 	bl	800df74 <dir_find>
			if (res != FR_OK) break;
 800ee50:	2800      	cmp	r0, #0
 800ee52:	d081      	beq.n	800ed58 <dir_register+0x3ac>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ee54:	2804      	cmp	r0, #4
 800ee56:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ee5a:	4606      	mov	r6, r0
 800ee5c:	f47f ae29 	bne.w	800eab2 <dir_register+0x106>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ee60:	9b02      	ldr	r3, [sp, #8]
	FATFS *fs = dp->obj.fs;
 800ee62:	682f      	ldr	r7, [r5, #0]
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ee64:	f013 0402 	ands.w	r4, r3, #2
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ee68:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ee6c:	f47f adc7 	bne.w	800e9fe <dir_register+0x52>
	res = dir_sdi(dp, 0);
 800ee70:	2100      	movs	r1, #0
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7fe ffd2 	bl	800de1c <dir_sdi>
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ee78:	f04f 0901 	mov.w	r9, #1
	if (res == FR_OK) {
 800ee7c:	4606      	mov	r6, r0
 800ee7e:	2800      	cmp	r0, #0
 800ee80:	f43f adcd 	beq.w	800ea1e <dir_register+0x72>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ee84:	2e04      	cmp	r6, #4
 800ee86:	f47f ae14 	bne.w	800eab2 <dir_register+0x106>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ee8a:	2607      	movs	r6, #7
}
 800ee8c:	4630      	mov	r0, r6
 800ee8e:	b00b      	add	sp, #44	; 0x2c
 800ee90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} while (j < 8);
 800ee94:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ee96:	f102 0001 	add.w	r0, r2, #1
 800ee9a:	f807 9002 	strb.w	r9, [r7, r2]
	} while (j < 8);
 800ee9e:	f47f af4c 	bne.w	800ed3a <dir_register+0x38e>
 800eea2:	e754      	b.n	800ed4e <dir_register+0x3a2>
 800eea4:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eea6:	f807 9000 	strb.w	r9, [r7, r0]
 800eeaa:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 800eeae:	f47f af44 	bne.w	800ed3a <dir_register+0x38e>
 800eeb2:	e74c      	b.n	800ed4e <dir_register+0x3a2>
 800eeb4:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eeb6:	f807 9000 	strb.w	r9, [r7, r0]
 800eeba:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 800eebe:	f47f af3c 	bne.w	800ed3a <dir_register+0x38e>
 800eec2:	e744      	b.n	800ed4e <dir_register+0x3a2>
 800eec4:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eec6:	f807 9000 	strb.w	r9, [r7, r0]
 800eeca:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 800eece:	f47f af34 	bne.w	800ed3a <dir_register+0x38e>
 800eed2:	e73c      	b.n	800ed4e <dir_register+0x3a2>
 800eed4:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eed6:	f807 9000 	strb.w	r9, [r7, r0]
 800eeda:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 800eede:	f47f af2c 	bne.w	800ed3a <dir_register+0x38e>
 800eee2:	e734      	b.n	800ed4e <dir_register+0x3a2>
 800eee4:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eee6:	f807 9000 	strb.w	r9, [r7, r0]
 800eeea:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 800eeee:	f47f af24 	bne.w	800ed3a <dir_register+0x38e>
 800eef2:	e72c      	b.n	800ed4e <dir_register+0x3a2>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800eef4:	f807 9001 	strb.w	r9, [r7, r1]
	} while (j < 8);
 800eef8:	2a00      	cmp	r2, #0
 800eefa:	f47f af28 	bne.w	800ed4e <dir_register+0x3a2>
 800eefe:	2007      	movs	r0, #7
 800ef00:	e71b      	b.n	800ed3a <dir_register+0x38e>
	ns[i] = '~';
 800ef02:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ef04:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 800ef08:	f88d 201a 	strb.w	r2, [sp, #26]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef0c:	e6fe      	b.n	800ed0c <dir_register+0x360>
	ns[i] = '~';
 800ef0e:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ef10:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 800ef14:	f88d 2019 	strb.w	r2, [sp, #25]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef18:	e6f8      	b.n	800ed0c <dir_register+0x360>
	ns[i] = '~';
 800ef1a:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ef1c:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800ef20:	f88d 2014 	strb.w	r2, [sp, #20]
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ef24:	f885 2024 	strb.w	r2, [r5, #36]	; 0x24
 800ef28:	4662      	mov	r2, ip
 800ef2a:	e72e      	b.n	800ed8a <dir_register+0x3de>
	ns[i] = '~';
 800ef2c:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ef2e:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 800ef32:	f88d 2018 	strb.w	r2, [sp, #24]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef36:	e6e9      	b.n	800ed0c <dir_register+0x360>
	ns[i] = '~';
 800ef38:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ef3a:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 800ef3e:	f88d 2017 	strb.w	r2, [sp, #23]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef42:	e6e3      	b.n	800ed0c <dir_register+0x360>
	ns[i] = '~';
 800ef44:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ef46:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 800ef4a:	f88d 2016 	strb.w	r2, [sp, #22]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef4e:	e6dd      	b.n	800ed0c <dir_register+0x360>
	ns[i] = '~';
 800ef50:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 800ef52:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 800ef56:	f88d 2015 	strb.w	r2, [sp, #21]
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ef5a:	e6d7      	b.n	800ed0c <dir_register+0x360>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ef5c:	2606      	movs	r6, #6
}
 800ef5e:	4630      	mov	r0, r6
 800ef60:	b00b      	add	sp, #44	; 0x2c
 800ef62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ef66:	469b      	mov	fp, r3
 800ef68:	e53a      	b.n	800e9e0 <dir_register+0x34>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ef6a:	6969      	ldr	r1, [r5, #20]
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	eba1 1144 	sub.w	r1, r1, r4, lsl #5
 800ef72:	f7fe ff53 	bl	800de1c <dir_sdi>
		if (res == FR_OK) {
 800ef76:	4606      	mov	r6, r0
 800ef78:	2800      	cmp	r0, #0
 800ef7a:	f47f ad9a 	bne.w	800eab2 <dir_register+0x106>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ef7e:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800ef82:	f04f 080f 	mov.w	r8, #15
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800ef86:	f64f 79fd 	movw	r9, #65533	; 0xfffd
	*ptr++ = (BYTE)val; val >>= 8;
 800ef8a:	f64f 7bff 	movw	fp, #65535	; 0xffff
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800ef8e:	01d3      	lsls	r3, r2, #7
 800ef90:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 800ef94:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800ef98:	4413      	add	r3, r2
 800ef9a:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800ef9e:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800efa2:	f895 3026 	ldrb.w	r3, [r5, #38]	; 0x26
 800efa6:	fa53 f282 	uxtab	r2, r3, r2
 800efaa:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800efae:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800efb2:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800efb6:	fa52 f383 	uxtab	r3, r2, r3
 800efba:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800efbe:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800efc2:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
 800efc6:	fa53 f282 	uxtab	r2, r3, r2
 800efca:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800efce:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800efd2:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800efd6:	fa52 f383 	uxtab	r3, r2, r3
 800efda:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800efde:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800efe2:	f895 302a 	ldrb.w	r3, [r5, #42]	; 0x2a
 800efe6:	fa53 f282 	uxtab	r2, r3, r2
 800efea:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800efee:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800eff2:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800eff6:	fa52 f383 	uxtab	r3, r2, r3
 800effa:	f3c3 0246 	ubfx	r2, r3, #1, #7
 800effe:	ea42 12c3 	orr.w	r2, r2, r3, lsl #7
 800f002:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800f006:	fa53 f282 	uxtab	r2, r3, r2
 800f00a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 800f00e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 800f012:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
 800f016:	fa52 f383 	uxtab	r3, r2, r3
 800f01a:	f3c3 0746 	ubfx	r7, r3, #1, #7
 800f01e:	ea47 17c3 	orr.w	r7, r7, r3, lsl #7
 800f022:	f895 302e 	ldrb.w	r3, [r5, #46]	; 0x2e
 800f026:	fa53 f787 	uxtab	r7, r3, r7
 800f02a:	b2ff      	uxtb	r7, r7
	} while (--n);
 800f02c:	e028      	b.n	800f080 <dir_register+0x6d4>
	*ptr++ = (BYTE)val; val >>= 8;
 800f02e:	f8a3 b003 	strh.w	fp, [r3, #3]
 800f032:	f8a3 b005 	strh.w	fp, [r3, #5]
 800f036:	f8a3 b007 	strh.w	fp, [r3, #7]
 800f03a:	f8a3 b009 	strh.w	fp, [r3, #9]
 800f03e:	f8a3 b00e 	strh.w	fp, [r3, #14]
 800f042:	f8a3 b010 	strh.w	fp, [r3, #16]
 800f046:	f8a3 b012 	strh.w	fp, [r3, #18]
 800f04a:	f8a3 b014 	strh.w	fp, [r3, #20]
 800f04e:	f8a3 b016 	strh.w	fp, [r3, #22]
 800f052:	f8a3 b018 	strh.w	fp, [r3, #24]
 800f056:	f8a3 b01c 	strh.w	fp, [r3, #28]
 800f05a:	f8a3 b01e 	strh.w	fp, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f05e:	f046 0640 	orr.w	r6, r6, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f062:	701e      	strb	r6, [r3, #0]
				fs->wflag = 1;
 800f064:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 800f066:	2100      	movs	r1, #0
 800f068:	4628      	mov	r0, r5
				fs->wflag = 1;
 800f06a:	f88a 3003 	strb.w	r3, [sl, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f06e:	f7ff fbbb 	bl	800e7e8 <dir_next>
			} while (res == FR_OK && --nent);
 800f072:	4606      	mov	r6, r0
 800f074:	2800      	cmp	r0, #0
 800f076:	f47f ad1c 	bne.w	800eab2 <dir_register+0x106>
 800f07a:	3c01      	subs	r4, #1
 800f07c:	f43f acf1 	beq.w	800ea62 <dir_register+0xb6>
				res = move_window(fs, dp->sect);
 800f080:	69e9      	ldr	r1, [r5, #28]
 800f082:	4650      	mov	r0, sl
 800f084:	f7fe f916 	bl	800d2b4 <move_window>
 800f088:	4606      	mov	r6, r0
				if (res != FR_OK) break;
 800f08a:	2800      	cmp	r0, #0
 800f08c:	f47f ad11 	bne.w	800eab2 <dir_register+0x106>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f090:	b2e6      	uxtb	r6, r4
 800f092:	6a2b      	ldr	r3, [r5, #32]
 800f094:	f8da 100c 	ldr.w	r1, [sl, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f098:	1e72      	subs	r2, r6, #1
	*ptr++ = (BYTE)val; val >>= 8;
 800f09a:	8358      	strh	r0, [r3, #26]
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f09c:	735f      	strb	r7, [r3, #13]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f09e:	eb02 0042 	add.w	r0, r2, r2, lsl #1
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f0a2:	f8a3 800b 	strh.w	r8, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f0a6:	eb02 0280 	add.w	r2, r2, r0, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0aa:	f831 0012 	ldrh.w	r0, [r1, r2, lsl #1]
 800f0ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f0b2:	7058      	strb	r0, [r3, #1]
 800f0b4:	0a00      	lsrs	r0, r0, #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0b6:	fa1f fc8c 	uxth.w	ip, ip
	*ptr++ = (BYTE)val;
 800f0ba:	7098      	strb	r0, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0bc:	0050      	lsls	r0, r2, #1
 800f0be:	45cc      	cmp	ip, r9
 800f0c0:	d8b5      	bhi.n	800f02e <dir_register+0x682>
 800f0c2:	3201      	adds	r2, #1
 800f0c4:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 800f0c8:	0052      	lsls	r2, r2, #1
 800f0ca:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f0ce:	f883 c003 	strb.w	ip, [r3, #3]
 800f0d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0d6:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f0da:	f883 c004 	strb.w	ip, [r3, #4]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0de:	45ce      	cmp	lr, r9
 800f0e0:	d8a7      	bhi.n	800f032 <dir_register+0x686>
 800f0e2:	440a      	add	r2, r1
 800f0e4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
 800f0e8:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f0ec:	f883 c005 	strb.w	ip, [r3, #5]
 800f0f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0f4:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f0f8:	f883 c006 	strb.w	ip, [r3, #6]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f0fc:	45ce      	cmp	lr, r9
 800f0fe:	d89a      	bhi.n	800f036 <dir_register+0x68a>
 800f100:	f8b2 c004 	ldrh.w	ip, [r2, #4]
 800f104:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f108:	f883 c007 	strb.w	ip, [r3, #7]
 800f10c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f110:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f114:	f883 c008 	strb.w	ip, [r3, #8]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f118:	45ce      	cmp	lr, r9
 800f11a:	d88e      	bhi.n	800f03a <dir_register+0x68e>
 800f11c:	f8b2 c006 	ldrh.w	ip, [r2, #6]
 800f120:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f124:	f883 c009 	strb.w	ip, [r3, #9]
 800f128:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f12c:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f130:	f883 c00a 	strb.w	ip, [r3, #10]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f134:	45ce      	cmp	lr, r9
 800f136:	d882      	bhi.n	800f03e <dir_register+0x692>
 800f138:	f8b2 c008 	ldrh.w	ip, [r2, #8]
 800f13c:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f140:	f883 c00e 	strb.w	ip, [r3, #14]
 800f144:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f148:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f14c:	f883 c00f 	strb.w	ip, [r3, #15]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f150:	45ce      	cmp	lr, r9
 800f152:	f63f af76 	bhi.w	800f042 <dir_register+0x696>
 800f156:	f8b2 c00a 	ldrh.w	ip, [r2, #10]
 800f15a:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f15e:	f883 c010 	strb.w	ip, [r3, #16]
 800f162:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f166:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f16a:	f883 c011 	strb.w	ip, [r3, #17]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f16e:	45ce      	cmp	lr, r9
 800f170:	f63f af69 	bhi.w	800f046 <dir_register+0x69a>
 800f174:	f8b2 c00c 	ldrh.w	ip, [r2, #12]
 800f178:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f17c:	f883 c012 	strb.w	ip, [r3, #18]
 800f180:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f184:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f188:	f883 c013 	strb.w	ip, [r3, #19]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f18c:	45ce      	cmp	lr, r9
 800f18e:	f63f af5c 	bhi.w	800f04a <dir_register+0x69e>
 800f192:	f8b2 c00e 	ldrh.w	ip, [r2, #14]
 800f196:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f19a:	f883 c014 	strb.w	ip, [r3, #20]
 800f19e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1a2:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f1a6:	f883 c015 	strb.w	ip, [r3, #21]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1aa:	45ce      	cmp	lr, r9
 800f1ac:	f63f af4f 	bhi.w	800f04e <dir_register+0x6a2>
 800f1b0:	f8b2 c010 	ldrh.w	ip, [r2, #16]
 800f1b4:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f1b8:	f883 c016 	strb.w	ip, [r3, #22]
 800f1bc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1c0:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f1c4:	f883 c017 	strb.w	ip, [r3, #23]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1c8:	45ce      	cmp	lr, r9
 800f1ca:	f63f af42 	bhi.w	800f052 <dir_register+0x6a6>
 800f1ce:	f8b2 c012 	ldrh.w	ip, [r2, #18]
 800f1d2:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f1d6:	f883 c018 	strb.w	ip, [r3, #24]
 800f1da:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1de:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f1e2:	f883 c019 	strb.w	ip, [r3, #25]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1e6:	45ce      	cmp	lr, r9
 800f1e8:	f63f af35 	bhi.w	800f056 <dir_register+0x6aa>
 800f1ec:	f8b2 c014 	ldrh.w	ip, [r2, #20]
 800f1f0:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f1f4:	f883 c01c 	strb.w	ip, [r3, #28]
 800f1f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f1fc:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 800f200:	f883 c01d 	strb.w	ip, [r3, #29]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f204:	45ce      	cmp	lr, r9
 800f206:	f63f af28 	bhi.w	800f05a <dir_register+0x6ae>
 800f20a:	8ad2      	ldrh	r2, [r2, #22]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f20c:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 800f210:	779a      	strb	r2, [r3, #30]
 800f212:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800f214:	77da      	strb	r2, [r3, #31]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f216:	fa1f f28c 	uxth.w	r2, ip
 800f21a:	454a      	cmp	r2, r9
 800f21c:	f63f af1f 	bhi.w	800f05e <dir_register+0x6b2>
 800f220:	180a      	adds	r2, r1, r0
 800f222:	8b52      	ldrh	r2, [r2, #26]
 800f224:	2a00      	cmp	r2, #0
 800f226:	f47f af1c 	bne.w	800f062 <dir_register+0x6b6>
 800f22a:	e718      	b.n	800f05e <dir_register+0x6b2>
			*d++ = *s++;
 800f22c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
 800f230:	701a      	strb	r2, [r3, #0]
 800f232:	f895 2025 	ldrb.w	r2, [r5, #37]	; 0x25
 800f236:	705a      	strb	r2, [r3, #1]
 800f238:	f895 2026 	ldrb.w	r2, [r5, #38]	; 0x26
 800f23c:	709a      	strb	r2, [r3, #2]
 800f23e:	f895 2027 	ldrb.w	r2, [r5, #39]	; 0x27
 800f242:	70da      	strb	r2, [r3, #3]
 800f244:	f895 2028 	ldrb.w	r2, [r5, #40]	; 0x28
 800f248:	711a      	strb	r2, [r3, #4]
 800f24a:	f895 2029 	ldrb.w	r2, [r5, #41]	; 0x29
 800f24e:	715a      	strb	r2, [r3, #5]
 800f250:	f895 202a 	ldrb.w	r2, [r5, #42]	; 0x2a
 800f254:	719a      	strb	r2, [r3, #6]
 800f256:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
 800f25a:	71da      	strb	r2, [r3, #7]
 800f25c:	e417      	b.n	800ea8e <dir_register+0xe2>
 800f25e:	bf00      	nop

0800f260 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f260:	b510      	push	{r4, lr}
 800f262:	b082      	sub	sp, #8
 800f264:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 800f268:	b1a1      	cbz	r1, 800f294 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f26a:	f891 c000 	ldrb.w	ip, [r1]
 800f26e:	f1bc 0f1f 	cmp.w	ip, #31
 800f272:	d912      	bls.n	800f29a <f_mount+0x3a>
 800f274:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 800f278:	d00f      	beq.n	800f29a <f_mount+0x3a>
 800f27a:	4608      	mov	r0, r1
 800f27c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f280:	2b1f      	cmp	r3, #31
 800f282:	d90c      	bls.n	800f29e <f_mount+0x3e>
 800f284:	2b3a      	cmp	r3, #58	; 0x3a
 800f286:	d1f9      	bne.n	800f27c <f_mount+0x1c>
			i = *tp++ - '0';
 800f288:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f28a:	4288      	cmp	r0, r1
 800f28c:	d102      	bne.n	800f294 <f_mount+0x34>
 800f28e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800f292:	d006      	beq.n	800f2a2 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 800f294:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 800f296:	b002      	add	sp, #8
 800f298:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f29a:	4663      	mov	r3, ip
 800f29c:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f29e:	2b3a      	cmp	r3, #58	; 0x3a
 800f2a0:	d0f2      	beq.n	800f288 <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f2a2:	4913      	ldr	r1, [pc, #76]	; (800f2f0 <f_mount+0x90>)
 800f2a4:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 800f2a6:	b143      	cbz	r3, 800f2ba <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f2a8:	4812      	ldr	r0, [pc, #72]	; (800f2f4 <f_mount+0x94>)
 800f2aa:	6804      	ldr	r4, [r0, #0]
 800f2ac:	42a3      	cmp	r3, r4
 800f2ae:	d019      	beq.n	800f2e4 <f_mount+0x84>
 800f2b0:	6904      	ldr	r4, [r0, #16]
 800f2b2:	429c      	cmp	r4, r3
 800f2b4:	d013      	beq.n	800f2de <f_mount+0x7e>
		cfs->fs_type = 0;				/* Clear old fs object */
 800f2b6:	2000      	movs	r0, #0
 800f2b8:	7018      	strb	r0, [r3, #0]
	if (fs) {
 800f2ba:	9b01      	ldr	r3, [sp, #4]
 800f2bc:	b15b      	cbz	r3, 800f2d6 <f_mount+0x76>
		fs->fs_type = 0;				/* Clear new fs object */
 800f2be:	2000      	movs	r0, #0
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f2c0:	2a01      	cmp	r2, #1
	FatFs[vol] = fs;					/* Register new fs object */
 800f2c2:	600b      	str	r3, [r1, #0]
		fs->fs_type = 0;				/* Clear new fs object */
 800f2c4:	7018      	strb	r0, [r3, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f2c6:	d1e6      	bne.n	800f296 <f_mount+0x36>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	a901      	add	r1, sp, #4
 800f2cc:	4668      	mov	r0, sp
 800f2ce:	f7fe f82f 	bl	800d330 <find_volume>
}
 800f2d2:	b002      	add	sp, #8
 800f2d4:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f2d6:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 800f2d8:	600b      	str	r3, [r1, #0]
}
 800f2da:	b002      	add	sp, #8
 800f2dc:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f2de:	2400      	movs	r4, #0
 800f2e0:	6104      	str	r4, [r0, #16]
 800f2e2:	e7e8      	b.n	800f2b6 <f_mount+0x56>
 800f2e4:	2400      	movs	r4, #0
 800f2e6:	6004      	str	r4, [r0, #0]
 800f2e8:	6904      	ldr	r4, [r0, #16]
 800f2ea:	429c      	cmp	r4, r3
 800f2ec:	d1e3      	bne.n	800f2b6 <f_mount+0x56>
 800f2ee:	e7f6      	b.n	800f2de <f_mount+0x7e>
 800f2f0:	2001d724 	.word	0x2001d724
 800f2f4:	2001d728 	.word	0x2001d728

0800f2f8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2fc:	b092      	sub	sp, #72	; 0x48
 800f2fe:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f300:	2800      	cmp	r0, #0
 800f302:	f000 8096 	beq.w	800f432 <f_open+0x13a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800f306:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 800f30a:	4616      	mov	r6, r2
 800f30c:	4604      	mov	r4, r0
 800f30e:	a903      	add	r1, sp, #12
 800f310:	a801      	add	r0, sp, #4
 800f312:	463a      	mov	r2, r7
 800f314:	f7fe f80c 	bl	800d330 <find_volume>
	if (res == FR_OK) {
 800f318:	4605      	mov	r5, r0
 800f31a:	b128      	cbz	r0, 800f328 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f31c:	2300      	movs	r3, #0
 800f31e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 800f320:	4628      	mov	r0, r5
 800f322:	b012      	add	sp, #72	; 0x48
 800f324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 800f328:	f8dd 800c 	ldr.w	r8, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f32c:	a804      	add	r0, sp, #16
 800f32e:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 800f330:	f8cd 8010 	str.w	r8, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800f334:	f7fe ffca 	bl	800e2cc <follow_path>
		if (res == FR_OK) {
 800f338:	b9f0      	cbnz	r0, 800f378 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f33a:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 800f33e:	2b00      	cmp	r3, #0
 800f340:	db7e      	blt.n	800f440 <f_open+0x148>
		if (Files[i].fs) {	/* Existing entry */
 800f342:	4b9e      	ldr	r3, [pc, #632]	; (800f5bc <f_open+0x2c4>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f344:	f027 0001 	bic.w	r0, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f348:	9a04      	ldr	r2, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 800f34a:	f8d3 9000 	ldr.w	r9, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f34e:	4601      	mov	r1, r0
				Files[i].clu == dp->obj.sclust &&
 800f350:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 800f354:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 800f358:	f1b9 0f00 	cmp.w	r9, #0
 800f35c:	f000 80d9 	beq.w	800f512 <f_open+0x21a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f360:	4591      	cmp	r9, r2
 800f362:	d06f      	beq.n	800f444 <f_open+0x14c>
		if (Files[i].fs) {	/* Existing entry */
 800f364:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800f368:	f1b9 0f00 	cmp.w	r9, #0
 800f36c:	d071      	beq.n	800f452 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f36e:	454a      	cmp	r2, r9
 800f370:	f000 80e8 	beq.w	800f544 <f_open+0x24c>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f374:	2512      	movs	r5, #18
 800f376:	e7d1      	b.n	800f31c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f378:	f016 0f1c 	tst.w	r6, #28
 800f37c:	d05e      	beq.n	800f43c <f_open+0x144>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f37e:	2804      	cmp	r0, #4
 800f380:	d15c      	bne.n	800f43c <f_open+0x144>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f382:	4b8e      	ldr	r3, [pc, #568]	; (800f5bc <f_open+0x2c4>)
 800f384:	681a      	ldr	r2, [r3, #0]
 800f386:	b112      	cbz	r2, 800f38e <f_open+0x96>
 800f388:	691b      	ldr	r3, [r3, #16]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	d1f2      	bne.n	800f374 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f38e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f390:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f394:	f7ff fb0a 	bl	800e9ac <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f398:	2800      	cmp	r0, #0
 800f39a:	d14f      	bne.n	800f43c <f_open+0x144>
				dw = GET_FATTIME();
 800f39c:	f7fd fcd6 	bl	800cd4c <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f3a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f3a2:	0a02      	lsrs	r2, r0, #8
 800f3a4:	f8c3 000e 	str.w	r0, [r3, #14]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f3a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f3aa:	75da      	strb	r2, [r3, #23]
 800f3ac:	0c02      	lsrs	r2, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f3ae:	7598      	strb	r0, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 800f3b0:	0e00      	lsrs	r0, r0, #24
 800f3b2:	761a      	strb	r2, [r3, #24]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f3b4:	2220      	movs	r2, #32
	*ptr++ = (BYTE)val;
 800f3b6:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f3b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f3ba:	72da      	strb	r2, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 800f3bc:	f898 2000 	ldrb.w	r2, [r8]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f3c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800f3c2:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f3c4:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f3c6:	d102      	bne.n	800f3ce <f_open+0xd6>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f3c8:	8a9a      	ldrh	r2, [r3, #20]
 800f3ca:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f3d2:	f898 1000 	ldrb.w	r1, [r8]
 800f3d6:	2903      	cmp	r1, #3
 800f3d8:	d100      	bne.n	800f3dc <f_open+0xe4>
	*ptr++ = (BYTE)val; val >>= 8;
 800f3da:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 800f3dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 800f3de:	2200      	movs	r2, #0
 800f3e0:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 800f3e2:	2301      	movs	r3, #1
 800f3e4:	f888 3003 	strb.w	r3, [r8, #3]
					if (cl) {							/* Remove the cluster chain if exist */
 800f3e8:	b186      	cbz	r6, 800f40c <f_open+0x114>
						dw = fs->winsect;
 800f3ea:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 800f3ee:	4631      	mov	r1, r6
 800f3f0:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 800f3f2:	9300      	str	r3, [sp, #0]
						res = remove_chain(&dj.obj, cl, 0);
 800f3f4:	f7ff f8f6 	bl	800e5e4 <remove_chain>
						if (res == FR_OK) {
 800f3f8:	9b00      	ldr	r3, [sp, #0]
 800f3fa:	b9f8      	cbnz	r0, 800f43c <f_open+0x144>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f3fc:	3e01      	subs	r6, #1
							res = move_window(fs, dw);
 800f3fe:	4619      	mov	r1, r3
 800f400:	4640      	mov	r0, r8
 800f402:	f7fd ff57 	bl	800d2b4 <move_window>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f406:	f8c8 6010 	str.w	r6, [r8, #16]
		if (res == FR_OK) {
 800f40a:	b9b8      	cbnz	r0, 800f43c <f_open+0x144>
				mode |= FA_MODIFIED;
 800f40c:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f410:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f414:	f8d8 3030 	ldr.w	r3, [r8, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f418:	3900      	subs	r1, #0
 800f41a:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f41c:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f41e:	bf18      	it	ne
 800f420:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 800f422:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f424:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f426:	f7fd fdb7 	bl	800cf98 <inc_lock>
 800f42a:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f42c:	b9e8      	cbnz	r0, 800f46a <f_open+0x172>
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f42e:	2502      	movs	r5, #2
 800f430:	e774      	b.n	800f31c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 800f432:	2509      	movs	r5, #9
}
 800f434:	4628      	mov	r0, r5
 800f436:	b012      	add	sp, #72	; 0x48
 800f438:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f43c:	4605      	mov	r5, r0
 800f43e:	e76d      	b.n	800f31c <f_open+0x24>
				res = FR_INVALID_NAME;
 800f440:	2506      	movs	r5, #6
 800f442:	e76b      	b.n	800f31c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f444:	685a      	ldr	r2, [r3, #4]
 800f446:	4562      	cmp	r2, ip
 800f448:	f000 8085 	beq.w	800f556 <f_open+0x25e>
		if (Files[i].fs) {	/* Existing entry */
 800f44c:	691a      	ldr	r2, [r3, #16]
 800f44e:	2a00      	cmp	r2, #0
 800f450:	d18d      	bne.n	800f36e <f_open+0x76>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f452:	f016 0f1c 	tst.w	r6, #28
 800f456:	d049      	beq.n	800f4ec <f_open+0x1f4>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f458:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f45c:	f013 0f11 	tst.w	r3, #17
 800f460:	d155      	bne.n	800f50e <f_open+0x216>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f462:	0773      	lsls	r3, r6, #29
 800f464:	d550      	bpl.n	800f508 <f_open+0x210>
 800f466:	2508      	movs	r5, #8
 800f468:	e758      	b.n	800f31c <f_open+0x24>
	if (fs->fs_type == FS_FAT32) {
 800f46a:	f898 2000 	ldrb.w	r2, [r8]
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f46e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 800f470:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800f472:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 800f474:	d102      	bne.n	800f47c <f_open+0x184>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f476:	8a9a      	ldrh	r2, [r3, #20]
 800f478:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f47c:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f47e:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 800f480:	f8d3 901c 	ldr.w	r9, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f484:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f488:	f8c4 8000 	str.w	r8, [r4]
		*d++ = (BYTE)val;
 800f48c:	f44f 7200 	mov.w	r2, #512	; 0x200
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f490:	f8c4 900c 	str.w	r9, [r4, #12]
		*d++ = (BYTE)val;
 800f494:	4650      	mov	r0, sl
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f496:	62e1      	str	r1, [r4, #44]	; 0x2c
			fp->obj.id = fs->id;
 800f498:	f8b8 3006 	ldrh.w	r3, [r8, #6]
			fp->flag = mode;		/* Set file access mode */
 800f49c:	7527      	strb	r7, [r4, #20]
			fp->obj.id = fs->id;
 800f49e:	80a3      	strh	r3, [r4, #4]
			fp->err = 0;			/* Clear error flag */
 800f4a0:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f4a2:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f4a4:	61a1      	str	r1, [r4, #24]
		*d++ = (BYTE)val;
 800f4a6:	f009 fa9d 	bl	80189e4 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f4aa:	06bf      	lsls	r7, r7, #26
 800f4ac:	f57f af38 	bpl.w	800f320 <f_open+0x28>
 800f4b0:	f1b9 0f00 	cmp.w	r9, #0
 800f4b4:	f43f af34 	beq.w	800f320 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f4b8:	f8c4 9018 	str.w	r9, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4bc:	f8b8 300a 	ldrh.w	r3, [r8, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4c0:	ebb9 2f43 	cmp.w	r9, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f4c4:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4c8:	d804      	bhi.n	800f4d4 <f_open+0x1dc>
 800f4ca:	e04a      	b.n	800f562 <f_open+0x26a>
 800f4cc:	1c70      	adds	r0, r6, #1
 800f4ce:	d06c      	beq.n	800f5aa <f_open+0x2b2>
 800f4d0:	454f      	cmp	r7, r9
 800f4d2:	d26a      	bcs.n	800f5aa <f_open+0x2b2>
					clst = get_fat(&fp->obj, clst);
 800f4d4:	4631      	mov	r1, r6
 800f4d6:	6820      	ldr	r0, [r4, #0]
 800f4d8:	f7fe f922 	bl	800d720 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 800f4dc:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f4de:	eba9 0907 	sub.w	r9, r9, r7
					clst = get_fat(&fp->obj, clst);
 800f4e2:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 800f4e4:	d8f2      	bhi.n	800f4cc <f_open+0x1d4>
 800f4e6:	2502      	movs	r5, #2
				fp->clust = clst;
 800f4e8:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f4ea:	e717      	b.n	800f31c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f4ec:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800f4f0:	06da      	lsls	r2, r3, #27
 800f4f2:	d425      	bmi.n	800f540 <f_open+0x248>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f4f4:	07b2      	lsls	r2, r6, #30
 800f4f6:	d501      	bpl.n	800f4fc <f_open+0x204>
 800f4f8:	07db      	lsls	r3, r3, #31
 800f4fa:	d408      	bmi.n	800f50e <f_open+0x216>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f4fc:	f006 0608 	and.w	r6, r6, #8
 800f500:	2e00      	cmp	r6, #0
 800f502:	d183      	bne.n	800f40c <f_open+0x114>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f504:	4601      	mov	r1, r0
 800f506:	e785      	b.n	800f414 <f_open+0x11c>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f508:	0730      	lsls	r0, r6, #28
 800f50a:	d583      	bpl.n	800f414 <f_open+0x11c>
 800f50c:	e746      	b.n	800f39c <f_open+0xa4>
						res = FR_DENIED;
 800f50e:	2507      	movs	r5, #7
 800f510:	e704      	b.n	800f31c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 800f512:	f8d3 9010 	ldr.w	r9, [r3, #16]
 800f516:	f1b9 0f00 	cmp.w	r9, #0
 800f51a:	d09a      	beq.n	800f452 <f_open+0x15a>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f51c:	4591      	cmp	r9, r2
 800f51e:	d198      	bne.n	800f452 <f_open+0x15a>
 800f520:	695a      	ldr	r2, [r3, #20]
 800f522:	4562      	cmp	r2, ip
 800f524:	d195      	bne.n	800f452 <f_open+0x15a>
				Files[i].clu == dp->obj.sclust &&
 800f526:	699a      	ldr	r2, [r3, #24]
 800f528:	4572      	cmp	r2, lr
 800f52a:	d192      	bne.n	800f452 <f_open+0x15a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f52c:	2201      	movs	r2, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f52e:	b928      	cbnz	r0, 800f53c <f_open+0x244>
 800f530:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 800f534:	899b      	ldrh	r3, [r3, #12]
 800f536:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f53a:	d18a      	bne.n	800f452 <f_open+0x15a>
 800f53c:	2510      	movs	r5, #16
 800f53e:	e6ed      	b.n	800f31c <f_open+0x24>
					res = FR_NO_FILE;
 800f540:	2504      	movs	r5, #4
 800f542:	e6eb      	b.n	800f31c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f544:	695a      	ldr	r2, [r3, #20]
 800f546:	4562      	cmp	r2, ip
 800f548:	f47f af14 	bne.w	800f374 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 800f54c:	699a      	ldr	r2, [r3, #24]
 800f54e:	4572      	cmp	r2, lr
 800f550:	f47f af10 	bne.w	800f374 <f_open+0x7c>
 800f554:	e7ea      	b.n	800f52c <f_open+0x234>
 800f556:	689a      	ldr	r2, [r3, #8]
 800f558:	4572      	cmp	r2, lr
 800f55a:	f47f af77 	bne.w	800f44c <f_open+0x154>
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f55e:	462a      	mov	r2, r5
 800f560:	e7e5      	b.n	800f52e <f_open+0x236>
				fp->clust = clst;
 800f562:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f564:	f3c9 0308 	ubfx	r3, r9, #0, #9
 800f568:	2b00      	cmp	r3, #0
 800f56a:	f43f aed9 	beq.w	800f320 <f_open+0x28>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f56e:	f8d8 3018 	ldr.w	r3, [r8, #24]
	clst -= 2;
 800f572:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f574:	3b02      	subs	r3, #2
 800f576:	429e      	cmp	r6, r3
 800f578:	f4bf af59 	bcs.w	800f42e <f_open+0x136>
	return clst * fs->csize + fs->database;
 800f57c:	f8b8 200a 	ldrh.w	r2, [r8, #10]
 800f580:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
 800f584:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f588:	2a00      	cmp	r2, #0
 800f58a:	f43f af50 	beq.w	800f42e <f_open+0x136>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f58e:	eb02 2259 	add.w	r2, r2, r9, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f592:	4651      	mov	r1, sl
 800f594:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f596:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f598:	f898 0001 	ldrb.w	r0, [r8, #1]
 800f59c:	f7fd fcd0 	bl	800cf40 <disk_read>
 800f5a0:	2800      	cmp	r0, #0
 800f5a2:	f43f aebd 	beq.w	800f320 <f_open+0x28>
 800f5a6:	2501      	movs	r5, #1
 800f5a8:	e6b8      	b.n	800f31c <f_open+0x24>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f5aa:	1c71      	adds	r1, r6, #1
				fp->clust = clst;
 800f5ac:	61e6      	str	r6, [r4, #28]
					if (clst <= 1) res = FR_INT_ERR;
 800f5ae:	bf0c      	ite	eq
 800f5b0:	2301      	moveq	r3, #1
 800f5b2:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f5b4:	d1d6      	bne.n	800f564 <f_open+0x26c>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f5b6:	461d      	mov	r5, r3
 800f5b8:	e6b0      	b.n	800f31c <f_open+0x24>
 800f5ba:	bf00      	nop
 800f5bc:	2001d728 	.word	0x2001d728

0800f5c0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800f5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5c4:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 800f5c6:	2300      	movs	r3, #0
{
 800f5c8:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 800f5ca:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f5cc:	b150      	cbz	r0, 800f5e4 <f_read+0x24>
 800f5ce:	6803      	ldr	r3, [r0, #0]
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	b13b      	cbz	r3, 800f5e4 <f_read+0x24>
 800f5d4:	4691      	mov	r9, r2
 800f5d6:	781a      	ldrb	r2, [r3, #0]
 800f5d8:	b122      	cbz	r2, 800f5e4 <f_read+0x24>
 800f5da:	460d      	mov	r5, r1
 800f5dc:	88da      	ldrh	r2, [r3, #6]
 800f5de:	8881      	ldrh	r1, [r0, #4]
 800f5e0:	4291      	cmp	r1, r2
 800f5e2:	d005      	beq.n	800f5f0 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f5e4:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 800f5e8:	4640      	mov	r0, r8
 800f5ea:	b005      	add	sp, #20
 800f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f5f0:	7858      	ldrb	r0, [r3, #1]
 800f5f2:	f7fd fc89 	bl	800cf08 <disk_status>
 800f5f6:	07c2      	lsls	r2, r0, #31
 800f5f8:	d4f4      	bmi.n	800f5e4 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f5fa:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f5fe:	f1b8 0f00 	cmp.w	r8, #0
 800f602:	d1f1      	bne.n	800f5e8 <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f604:	7d23      	ldrb	r3, [r4, #20]
 800f606:	f013 0301 	ands.w	r3, r3, #1
 800f60a:	9300      	str	r3, [sp, #0]
 800f60c:	f000 80da 	beq.w	800f7c4 <f_read+0x204>
	remain = fp->obj.objsize - fp->fptr;
 800f610:	69a3      	ldr	r3, [r4, #24]
 800f612:	68e7      	ldr	r7, [r4, #12]
 800f614:	1aff      	subs	r7, r7, r3
 800f616:	454f      	cmp	r7, r9
 800f618:	bf28      	it	cs
 800f61a:	464f      	movcs	r7, r9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f61c:	f8d4 9000 	ldr.w	r9, [r4]
	for ( ;  btr;								/* Repeat until all data read */
 800f620:	2f00      	cmp	r7, #0
 800f622:	d0e1      	beq.n	800f5e8 <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f624:	f104 0231 	add.w	r2, r4, #49	; 0x31
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f628:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f62c:	e9cd 2801 	strd	r2, r8, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f630:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f634:	2a00      	cmp	r2, #0
 800f636:	d142      	bne.n	800f6be <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800f638:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 800f63c:	0a59      	lsrs	r1, r3, #9
 800f63e:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 800f640:	ea12 2253 	ands.w	r2, r2, r3, lsr #9
 800f644:	d06f      	beq.n	800f726 <f_read+0x166>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f646:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f648:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 800f64c:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f64e:	3b02      	subs	r3, #2
 800f650:	4298      	cmp	r0, r3
 800f652:	d275      	bcs.n	800f740 <f_read+0x180>
	return clst * fs->csize + fs->database;
 800f654:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f658:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 800f65c:	fb01 3300 	mla	r3, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f660:	2b00      	cmp	r3, #0
 800f662:	d06d      	beq.n	800f740 <f_read+0x180>
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f664:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 800f668:	eb02 0b03 	add.w	fp, r2, r3
			if (cc) {							/* Read maximum contiguous sectors directly */
 800f66c:	d36f      	bcc.n	800f74e <f_read+0x18e>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f66e:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800f672:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f676:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f678:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f67c:	bf88      	it	hi
 800f67e:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f682:	465a      	mov	r2, fp
 800f684:	4629      	mov	r1, r5
 800f686:	4643      	mov	r3, r8
 800f688:	f7fd fc5a 	bl	800cf40 <disk_read>
 800f68c:	2800      	cmp	r0, #0
 800f68e:	f040 8087 	bne.w	800f7a0 <f_read+0x1e0>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f692:	f994 2014 	ldrsb.w	r2, [r4, #20]
 800f696:	2a00      	cmp	r2, #0
 800f698:	f2c0 80ab 	blt.w	800f7f2 <f_read+0x232>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800f69c:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f6a0:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 800f6a2:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800f6a4:	440d      	add	r5, r1
 800f6a6:	440b      	add	r3, r1
 800f6a8:	61a3      	str	r3, [r4, #24]
 800f6aa:	6833      	ldr	r3, [r6, #0]
 800f6ac:	440b      	add	r3, r1
 800f6ae:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 800f6b0:	f000 80b5 	beq.w	800f81e <f_read+0x25e>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800f6b4:	69a3      	ldr	r3, [r4, #24]
 800f6b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f6ba:	2a00      	cmp	r2, #0
 800f6bc:	d0bc      	beq.n	800f638 <f_read+0x78>
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800f6be:	1c50      	adds	r0, r2, #1
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f6c0:	f5c2 7100 	rsb	r1, r2, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800f6c4:	eb0a 0302 	add.w	r3, sl, r2
 800f6c8:	4450      	add	r0, sl
 800f6ca:	42b9      	cmp	r1, r7
 800f6cc:	eba5 0000 	sub.w	r0, r5, r0
 800f6d0:	bf28      	it	cs
 800f6d2:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f6d4:	2802      	cmp	r0, #2
 800f6d6:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 800f6da:	d969      	bls.n	800f7b0 <f_read+0x1f0>
 800f6dc:	f1bb 0f05 	cmp.w	fp, #5
 800f6e0:	d966      	bls.n	800f7b0 <f_read+0x1f0>
 800f6e2:	f021 0e03 	bic.w	lr, r1, #3
 800f6e6:	461a      	mov	r2, r3
 800f6e8:	4628      	mov	r0, r5
 800f6ea:	449e      	add	lr, r3
			*d++ = *s++;
 800f6ec:	f852 cb04 	ldr.w	ip, [r2], #4
 800f6f0:	4572      	cmp	r2, lr
 800f6f2:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 800f6f6:	d1f9      	bne.n	800f6ec <f_read+0x12c>
 800f6f8:	f021 0203 	bic.w	r2, r1, #3
 800f6fc:	4291      	cmp	r1, r2
 800f6fe:	eb05 0002 	add.w	r0, r5, r2
 800f702:	eb03 0c02 	add.w	ip, r3, r2
 800f706:	d0cb      	beq.n	800f6a0 <f_read+0xe0>
			*d++ = *s++;
 800f708:	5c9b      	ldrb	r3, [r3, r2]
		} while (--cnt);
 800f70a:	ebbb 0b02 	subs.w	fp, fp, r2
			*d++ = *s++;
 800f70e:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 800f710:	d0c6      	beq.n	800f6a0 <f_read+0xe0>
			*d++ = *s++;
 800f712:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 800f716:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f71a:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 800f71c:	d0c0      	beq.n	800f6a0 <f_read+0xe0>
			*d++ = *s++;
 800f71e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 800f722:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 800f724:	e7bc      	b.n	800f6a0 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800f726:	bb3b      	cbnz	r3, 800f778 <f_read+0x1b8>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800f728:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f72a:	2801      	cmp	r0, #1
 800f72c:	d908      	bls.n	800f740 <f_read+0x180>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f72e:	1c43      	adds	r3, r0, #1
 800f730:	d036      	beq.n	800f7a0 <f_read+0x1e0>
				fp->clust = clst;				/* Update current cluster */
 800f732:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 800f734:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f736:	f8d9 3018 	ldr.w	r3, [r9, #24]
 800f73a:	3b02      	subs	r3, #2
 800f73c:	4298      	cmp	r0, r3
 800f73e:	d389      	bcc.n	800f654 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800f740:	2302      	movs	r3, #2
 800f742:	4698      	mov	r8, r3
 800f744:	7563      	strb	r3, [r4, #21]
}
 800f746:	4640      	mov	r0, r8
 800f748:	b005      	add	sp, #20
 800f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800f74e:	6a22      	ldr	r2, [r4, #32]
 800f750:	455a      	cmp	r2, fp
 800f752:	d00b      	beq.n	800f76c <f_read+0x1ac>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800f754:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	db3d      	blt.n	800f7d8 <f_read+0x218>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800f75c:	2301      	movs	r3, #1
 800f75e:	465a      	mov	r2, fp
 800f760:	4651      	mov	r1, sl
 800f762:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f766:	f7fd fbeb 	bl	800cf40 <disk_read>
 800f76a:	b9c8      	cbnz	r0, 800f7a0 <f_read+0x1e0>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f76c:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 800f76e:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f772:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f776:	e7a2      	b.n	800f6be <f_read+0xfe>
					if (fp->cltbl) {
 800f778:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800f77a:	b330      	cbz	r0, 800f7ca <f_read+0x20a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f77c:	6823      	ldr	r3, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f77e:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f780:	895b      	ldrh	r3, [r3, #10]
 800f782:	fbb1 f3f3 	udiv	r3, r1, r3
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f786:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f788:	b929      	cbnz	r1, 800f796 <f_read+0x1d6>
 800f78a:	e7d9      	b.n	800f740 <f_read+0x180>
		cl -= ncl; tbl++;		/* Next fragment */
 800f78c:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f78e:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f792:	2900      	cmp	r1, #0
 800f794:	d0d4      	beq.n	800f740 <f_read+0x180>
		if (cl < ncl) break;	/* In this fragment? */
 800f796:	4299      	cmp	r1, r3
 800f798:	d9f8      	bls.n	800f78c <f_read+0x1cc>
	return cl + *tbl;	/* Return the cluster number */
 800f79a:	6840      	ldr	r0, [r0, #4]
 800f79c:	4418      	add	r0, r3
 800f79e:	e7c4      	b.n	800f72a <f_read+0x16a>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7a0:	f8dd 8000 	ldr.w	r8, [sp]
 800f7a4:	2301      	movs	r3, #1
}
 800f7a6:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f7a8:	7563      	strb	r3, [r4, #21]
}
 800f7aa:	b005      	add	sp, #20
 800f7ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7b0:	1e6a      	subs	r2, r5, #1
 800f7b2:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 800f7b6:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 800f7ba:	4563      	cmp	r3, ip
			*d++ = *s++;
 800f7bc:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800f7c0:	d1f9      	bne.n	800f7b6 <f_read+0x1f6>
 800f7c2:	e76d      	b.n	800f6a0 <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800f7c4:	f04f 0807 	mov.w	r8, #7
 800f7c8:	e70e      	b.n	800f5e8 <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800f7ca:	69e1      	ldr	r1, [r4, #28]
 800f7cc:	6820      	ldr	r0, [r4, #0]
 800f7ce:	9203      	str	r2, [sp, #12]
 800f7d0:	f7fd ffa6 	bl	800d720 <get_fat.isra.0>
 800f7d4:	9a03      	ldr	r2, [sp, #12]
 800f7d6:	e7a8      	b.n	800f72a <f_read+0x16a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f7d8:	2301      	movs	r3, #1
 800f7da:	4651      	mov	r1, sl
 800f7dc:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f7e0:	f7fd fbbe 	bl	800cf60 <disk_write>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	d1db      	bne.n	800f7a0 <f_read+0x1e0>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f7e8:	7d23      	ldrb	r3, [r4, #20]
 800f7ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7ee:	7523      	strb	r3, [r4, #20]
 800f7f0:	e7b4      	b.n	800f75c <f_read+0x19c>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800f7f2:	6a22      	ldr	r2, [r4, #32]
 800f7f4:	eba2 020b 	sub.w	r2, r2, fp
 800f7f8:	4542      	cmp	r2, r8
 800f7fa:	f4bf af4f 	bcs.w	800f69c <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800f7fe:	eb05 2242 	add.w	r2, r5, r2, lsl #9
 800f802:	9b01      	ldr	r3, [sp, #4]
 800f804:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f806:	1ad0      	subs	r0, r2, r3
 800f808:	2802      	cmp	r0, #2
 800f80a:	d90b      	bls.n	800f824 <f_read+0x264>
 800f80c:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 800f810:	f851 3b04 	ldr.w	r3, [r1], #4
 800f814:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 800f818:	4562      	cmp	r2, ip
 800f81a:	d1f9      	bne.n	800f810 <f_read+0x250>
 800f81c:	e73e      	b.n	800f69c <f_read+0xdc>
 800f81e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f822:	e6e1      	b.n	800f5e8 <f_read+0x28>
 800f824:	3a01      	subs	r2, #1
 800f826:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 800f82a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 800f82e:	458c      	cmp	ip, r1
			*d++ = *s++;
 800f830:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 800f834:	d1f9      	bne.n	800f82a <f_read+0x26a>
 800f836:	e731      	b.n	800f69c <f_read+0xdc>

0800f838 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f83c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 800f83e:	2300      	movs	r3, #0
{
 800f840:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 800f842:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f844:	b150      	cbz	r0, 800f85c <f_write+0x24>
 800f846:	6803      	ldr	r3, [r0, #0]
 800f848:	4604      	mov	r4, r0
 800f84a:	b13b      	cbz	r3, 800f85c <f_write+0x24>
 800f84c:	4616      	mov	r6, r2
 800f84e:	781a      	ldrb	r2, [r3, #0]
 800f850:	b122      	cbz	r2, 800f85c <f_write+0x24>
 800f852:	460d      	mov	r5, r1
 800f854:	88da      	ldrh	r2, [r3, #6]
 800f856:	8881      	ldrh	r1, [r0, #4]
 800f858:	4291      	cmp	r1, r2
 800f85a:	d005      	beq.n	800f868 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 800f85c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 800f860:	4640      	mov	r0, r8
 800f862:	b005      	add	sp, #20
 800f864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f868:	7858      	ldrb	r0, [r3, #1]
 800f86a:	f7fd fb4d 	bl	800cf08 <disk_status>
 800f86e:	07c1      	lsls	r1, r0, #31
 800f870:	d4f4      	bmi.n	800f85c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f872:	f894 8015 	ldrb.w	r8, [r4, #21]
 800f876:	f1b8 0f00 	cmp.w	r8, #0
 800f87a:	d1f1      	bne.n	800f860 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f87c:	7d23      	ldrb	r3, [r4, #20]
 800f87e:	079a      	lsls	r2, r3, #30
 800f880:	f140 80f6 	bpl.w	800fa70 <f_write+0x238>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f884:	69a2      	ldr	r2, [r4, #24]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f886:	f8d4 9000 	ldr.w	r9, [r4]
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f88a:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f88c:	bf28      	it	cs
 800f88e:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 800f890:	2e00      	cmp	r6, #0
 800f892:	f000 80cb 	beq.w	800fa2c <f_write+0x1f4>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f896:	f504 730c 	add.w	r3, r4, #560	; 0x230
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f89a:	f104 0a30 	add.w	sl, r4, #48	; 0x30
 800f89e:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f8a0:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	d160      	bne.n	800f96a <f_write+0x132>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f8a8:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 800f8ac:	0a53      	lsrs	r3, r2, #9
 800f8ae:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 800f8b2:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 800f8b6:	d110      	bne.n	800f8da <f_write+0xa2>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f8b8:	2a00      	cmp	r2, #0
 800f8ba:	f040 80a0 	bne.w	800f9fe <f_write+0x1c6>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f8be:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 800f8c0:	2800      	cmp	r0, #0
 800f8c2:	f000 80e0 	beq.w	800fa86 <f_write+0x24e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8c6:	2801      	cmp	r0, #1
 800f8c8:	f000 8087 	beq.w	800f9da <f_write+0x1a2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8cc:	1c43      	adds	r3, r0, #1
 800f8ce:	f000 80be 	beq.w	800fa4e <f_write+0x216>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f8d2:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 800f8d4:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f8d6:	b903      	cbnz	r3, 800f8da <f_write+0xa2>
 800f8d8:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f8da:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	f2c0 80a8 	blt.w	800fa34 <f_write+0x1fc>
	clst -= 2;
 800f8e4:	69e3      	ldr	r3, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f8e6:	f8d9 2018 	ldr.w	r2, [r9, #24]
	clst -= 2;
 800f8ea:	3b02      	subs	r3, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f8ec:	3a02      	subs	r2, #2
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d273      	bcs.n	800f9da <f_write+0x1a2>
	return clst * fs->csize + fs->database;
 800f8f2:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 800f8f6:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
 800f8fa:	fb01 2203 	mla	r2, r1, r3, r2
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f8fe:	2a00      	cmp	r2, #0
 800f900:	d06b      	beq.n	800f9da <f_write+0x1a2>
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f902:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 800f906:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f908:	d36e      	bcc.n	800f9e8 <f_write+0x1b0>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f90a:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f90e:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f910:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f912:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 800f916:	bf88      	it	hi
 800f918:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f91c:	4629      	mov	r1, r5
 800f91e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800f922:	f7fd fb1d 	bl	800cf60 <disk_write>
 800f926:	2800      	cmp	r0, #0
 800f928:	f040 8091 	bne.w	800fa4e <f_write+0x216>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f92c:	6a21      	ldr	r1, [r4, #32]
 800f92e:	9a02      	ldr	r2, [sp, #8]
 800f930:	9b03      	ldr	r3, [sp, #12]
 800f932:	1a8a      	subs	r2, r1, r2
 800f934:	429a      	cmp	r2, r3
 800f936:	f0c0 80ba 	bcc.w	800faae <f_write+0x276>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f93a:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 800f93e:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f942:	69a3      	ldr	r3, [r4, #24]
 800f944:	4615      	mov	r5, r2
 800f946:	68e2      	ldr	r2, [r4, #12]
 800f948:	4463      	add	r3, ip
 800f94a:	429a      	cmp	r2, r3
 800f94c:	61a3      	str	r3, [r4, #24]
 800f94e:	bf38      	it	cc
 800f950:	461a      	movcc	r2, r3
	for ( ;  btw;							/* Repeat until all data written */
 800f952:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800f956:	60e2      	str	r2, [r4, #12]
 800f958:	683b      	ldr	r3, [r7, #0]
 800f95a:	4463      	add	r3, ip
 800f95c:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 800f95e:	d064      	beq.n	800fa2a <f_write+0x1f2>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f960:	69a2      	ldr	r2, [r4, #24]
 800f962:	f3c2 0308 	ubfx	r3, r2, #0, #9
 800f966:	2b00      	cmp	r3, #0
 800f968:	d09e      	beq.n	800f8a8 <f_write+0x70>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f96a:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
 800f96e:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f970:	4453      	add	r3, sl
 800f972:	45b4      	cmp	ip, r6
 800f974:	eba3 0202 	sub.w	r2, r3, r2
 800f978:	bf28      	it	cs
 800f97a:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f97c:	2a02      	cmp	r2, #2
 800f97e:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 800f982:	d96b      	bls.n	800fa5c <f_write+0x224>
 800f984:	f1bb 0f05 	cmp.w	fp, #5
 800f988:	d968      	bls.n	800fa5c <f_write+0x224>
 800f98a:	f02c 0e03 	bic.w	lr, ip, #3
 800f98e:	461a      	mov	r2, r3
 800f990:	4629      	mov	r1, r5
 800f992:	449e      	add	lr, r3
			*d++ = *s++;
 800f994:	f851 0b04 	ldr.w	r0, [r1], #4
 800f998:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800f99c:	4596      	cmp	lr, r2
 800f99e:	d1f9      	bne.n	800f994 <f_write+0x15c>
 800f9a0:	f02c 0103 	bic.w	r1, ip, #3
 800f9a4:	458c      	cmp	ip, r1
 800f9a6:	eb03 0001 	add.w	r0, r3, r1
 800f9aa:	eb05 0201 	add.w	r2, r5, r1
 800f9ae:	d00f      	beq.n	800f9d0 <f_write+0x198>
			*d++ = *s++;
 800f9b0:	f815 e001 	ldrb.w	lr, [r5, r1]
		} while (--cnt);
 800f9b4:	ebbb 0b01 	subs.w	fp, fp, r1
			*d++ = *s++;
 800f9b8:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 800f9bc:	d006      	beq.n	800f9cc <f_write+0x194>
			*d++ = *s++;
 800f9be:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 800f9c0:	f1bb 0f01 	cmp.w	fp, #1
			*d++ = *s++;
 800f9c4:	7043      	strb	r3, [r0, #1]
 800f9c6:	bf1c      	itt	ne
 800f9c8:	7893      	ldrbne	r3, [r2, #2]
 800f9ca:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 800f9cc:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 800f9d0:	7d23      	ldrb	r3, [r4, #20]
 800f9d2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800f9d6:	7523      	strb	r3, [r4, #20]
 800f9d8:	e7b3      	b.n	800f942 <f_write+0x10a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f9da:	2302      	movs	r3, #2
 800f9dc:	4698      	mov	r8, r3
 800f9de:	7563      	strb	r3, [r4, #21]
}
 800f9e0:	4640      	mov	r0, r8
 800f9e2:	b005      	add	sp, #20
 800f9e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f9e8:	6a23      	ldr	r3, [r4, #32]
 800f9ea:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 800f9ec:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f9ee:	d002      	beq.n	800f9f6 <f_write+0x1be>
 800f9f0:	68e1      	ldr	r1, [r4, #12]
 800f9f2:	428b      	cmp	r3, r1
 800f9f4:	d34f      	bcc.n	800fa96 <f_write+0x25e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f9f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 800f9fa:	6222      	str	r2, [r4, #32]
 800f9fc:	e7b5      	b.n	800f96a <f_write+0x132>
					if (fp->cltbl) {
 800f9fe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800fa00:	2900      	cmp	r1, #0
 800fa02:	d038      	beq.n	800fa76 <f_write+0x23e>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fa04:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fa06:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fa08:	8952      	ldrh	r2, [r2, #10]
 800fa0a:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fa0e:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fa10:	b922      	cbnz	r2, 800fa1c <f_write+0x1e4>
 800fa12:	e00a      	b.n	800fa2a <f_write+0x1f2>
		cl -= ncl; tbl++;		/* Next fragment */
 800fa14:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fa16:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fa1a:	b132      	cbz	r2, 800fa2a <f_write+0x1f2>
		if (cl < ncl) break;	/* In this fragment? */
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	d2f9      	bcs.n	800fa14 <f_write+0x1dc>
	return cl + *tbl;	/* Return the cluster number */
 800fa20:	6848      	ldr	r0, [r1, #4]
 800fa22:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa24:	2800      	cmp	r0, #0
 800fa26:	f47f af4e 	bne.w	800f8c6 <f_write+0x8e>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fa2a:	7d23      	ldrb	r3, [r4, #20]
 800fa2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa30:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 800fa32:	e715      	b.n	800f860 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800fa34:	2301      	movs	r3, #1
 800fa36:	6a22      	ldr	r2, [r4, #32]
 800fa38:	4651      	mov	r1, sl
 800fa3a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa3e:	f7fd fa8f 	bl	800cf60 <disk_write>
 800fa42:	b920      	cbnz	r0, 800fa4e <f_write+0x216>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fa44:	7d23      	ldrb	r3, [r4, #20]
 800fa46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa4a:	7523      	strb	r3, [r4, #20]
 800fa4c:	e74a      	b.n	800f8e4 <f_write+0xac>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800fa4e:	2301      	movs	r3, #1
 800fa50:	4698      	mov	r8, r3
 800fa52:	7563      	strb	r3, [r4, #21]
}
 800fa54:	4640      	mov	r0, r8
 800fa56:	b005      	add	sp, #20
 800fa58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa5c:	3b01      	subs	r3, #1
 800fa5e:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 800fa62:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 800fa66:	4295      	cmp	r5, r2
			*d++ = *s++;
 800fa68:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 800fa6c:	d1f9      	bne.n	800fa62 <f_write+0x22a>
 800fa6e:	e7af      	b.n	800f9d0 <f_write+0x198>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800fa70:	f04f 0807 	mov.w	r8, #7
 800fa74:	e6f4      	b.n	800f860 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800fa76:	69e1      	ldr	r1, [r4, #28]
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f7fe f90f 	bl	800dc9c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	f47f af21 	bne.w	800f8c6 <f_write+0x8e>
 800fa84:	e7d1      	b.n	800fa2a <f_write+0x1f2>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800fa86:	4659      	mov	r1, fp
 800fa88:	4620      	mov	r0, r4
 800fa8a:	f7fe f907 	bl	800dc9c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	f47f af19 	bne.w	800f8c6 <f_write+0x8e>
 800fa94:	e7c9      	b.n	800fa2a <f_write+0x1f2>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa96:	2301      	movs	r3, #1
 800fa98:	4651      	mov	r1, sl
 800fa9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800fa9e:	9202      	str	r2, [sp, #8]
 800faa0:	f7fd fa4e 	bl	800cf40 <disk_read>
				fp->fptr < fp->obj.objsize &&
 800faa4:	2800      	cmp	r0, #0
 800faa6:	d1d2      	bne.n	800fa4e <f_write+0x216>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800faa8:	69a3      	ldr	r3, [r4, #24]
 800faaa:	9a02      	ldr	r2, [sp, #8]
 800faac:	e7a3      	b.n	800f9f6 <f_write+0x1be>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800faae:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 800fab2:	1c42      	adds	r2, r0, #1
 800fab4:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800fab6:	ebaa 0202 	sub.w	r2, sl, r2
 800faba:	2a02      	cmp	r2, #2
 800fabc:	d90d      	bls.n	800fada <f_write+0x2a2>
 800fabe:	4652      	mov	r2, sl
 800fac0:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 800fac4:	f851 0b04 	ldr.w	r0, [r1], #4
 800fac8:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 800facc:	4562      	cmp	r2, ip
 800face:	d1f9      	bne.n	800fac4 <f_write+0x28c>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fad0:	7d22      	ldrb	r2, [r4, #20]
 800fad2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800fad6:	7522      	strb	r2, [r4, #20]
 800fad8:	e72f      	b.n	800f93a <f_write+0x102>
 800fada:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 800fade:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 800fae2:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 800fae6:	458c      	cmp	ip, r1
			*d++ = *s++;
 800fae8:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 800faec:	d1f9      	bne.n	800fae2 <f_write+0x2aa>
 800faee:	e7ef      	b.n	800fad0 <f_write+0x298>

0800faf0 <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800faf0:	b158      	cbz	r0, 800fb0a <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800faf2:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800faf4:	6803      	ldr	r3, [r0, #0]
 800faf6:	4604      	mov	r4, r0
 800faf8:	b12b      	cbz	r3, 800fb06 <f_close+0x16>
 800fafa:	781a      	ldrb	r2, [r3, #0]
 800fafc:	b11a      	cbz	r2, 800fb06 <f_close+0x16>
 800fafe:	8881      	ldrh	r1, [r0, #4]
 800fb00:	88da      	ldrh	r2, [r3, #6]
 800fb02:	4291      	cmp	r1, r2
 800fb04:	d003      	beq.n	800fb0e <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 800fb06:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 800fb08:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 800fb0a:	2009      	movs	r0, #9
}
 800fb0c:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fb0e:	7858      	ldrb	r0, [r3, #1]
 800fb10:	f7fd f9fa 	bl	800cf08 <disk_status>
 800fb14:	07c1      	lsls	r1, r0, #31
 800fb16:	d4f6      	bmi.n	800fb06 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb18:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb1a:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb1c:	065a      	lsls	r2, r3, #25
 800fb1e:	d52e      	bpl.n	800fb7e <f_close+0x8e>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb20:	061b      	lsls	r3, r3, #24
 800fb22:	d451      	bmi.n	800fbc8 <f_close+0xd8>
			tm = GET_FATTIME();				/* Modified time */
 800fb24:	f7fd f912 	bl	800cd4c <get_fattime>
				res = move_window(fs, fp->dir_sect);
 800fb28:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tm = GET_FATTIME();				/* Modified time */
 800fb2a:	4606      	mov	r6, r0
				res = move_window(fs, fp->dir_sect);
 800fb2c:	4628      	mov	r0, r5
 800fb2e:	f7fd fbc1 	bl	800d2b4 <move_window>
				if (res == FR_OK) {
 800fb32:	2800      	cmp	r0, #0
 800fb34:	d1e8      	bne.n	800fb08 <f_close+0x18>
					dir = fp->dir_ptr;
 800fb36:	6aa3      	ldr	r3, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb38:	7ada      	ldrb	r2, [r3, #11]
 800fb3a:	f042 0220 	orr.w	r2, r2, #32
 800fb3e:	72da      	strb	r2, [r3, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fb40:	68a2      	ldr	r2, [r4, #8]
 800fb42:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb44:	f3c2 2007 	ubfx	r0, r2, #8, #8
 800fb48:	769a      	strb	r2, [r3, #26]
	*ptr++ = (BYTE)val;
 800fb4a:	76d8      	strb	r0, [r3, #27]
	if (fs->fs_type == FS_FAT32) {
 800fb4c:	7809      	ldrb	r1, [r1, #0]
 800fb4e:	2903      	cmp	r1, #3
 800fb50:	d103      	bne.n	800fb5a <f_close+0x6a>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800fb52:	0c12      	lsrs	r2, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 800fb54:	751a      	strb	r2, [r3, #20]
 800fb56:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 800fb58:	755a      	strb	r2, [r3, #21]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb5a:	68e1      	ldr	r1, [r4, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb5c:	2200      	movs	r2, #0
	*ptr++ = (BYTE)val; val >>= 8;
 800fb5e:	f8c3 6016 	str.w	r6, [r3, #22]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fb62:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 800fb64:	61d9      	str	r1, [r3, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 800fb66:	825a      	strh	r2, [r3, #18]
					fs->wflag = 1;
 800fb68:	2301      	movs	r3, #1
 800fb6a:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fb6c:	f7fe f838 	bl	800dbe0 <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fb70:	7d23      	ldrb	r3, [r4, #20]
 800fb72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb76:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d1c5      	bne.n	800fb08 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fb7c:	6825      	ldr	r5, [r4, #0]
 800fb7e:	2d00      	cmp	r5, #0
 800fb80:	d0c1      	beq.n	800fb06 <f_close+0x16>
 800fb82:	782b      	ldrb	r3, [r5, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d0be      	beq.n	800fb06 <f_close+0x16>
 800fb88:	88a2      	ldrh	r2, [r4, #4]
 800fb8a:	88eb      	ldrh	r3, [r5, #6]
 800fb8c:	429a      	cmp	r2, r3
 800fb8e:	d1ba      	bne.n	800fb06 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fb90:	7868      	ldrb	r0, [r5, #1]
 800fb92:	f7fd f9b9 	bl	800cf08 <disk_status>
 800fb96:	f010 0001 	ands.w	r0, r0, #1
 800fb9a:	d1b4      	bne.n	800fb06 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fb9c:	6923      	ldr	r3, [r4, #16]
 800fb9e:	3b01      	subs	r3, #1
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d81e      	bhi.n	800fbe2 <f_close+0xf2>
		n = Files[i].ctr;
 800fba4:	4912      	ldr	r1, [pc, #72]	; (800fbf0 <f_close+0x100>)
 800fba6:	011d      	lsls	r5, r3, #4
 800fba8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800fbac:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fbae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800fbb2:	d01a      	beq.n	800fbea <f_close+0xfa>
		if (n > 0) n--;				/* Decrement read mode open count */
 800fbb4:	b11a      	cbz	r2, 800fbbe <f_close+0xce>
 800fbb6:	3a01      	subs	r2, #1
 800fbb8:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 800fbba:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fbbc:	b90a      	cbnz	r2, 800fbc2 <f_close+0xd2>
 800fbbe:	2300      	movs	r3, #0
 800fbc0:	514b      	str	r3, [r1, r5]
				fp->obj.fs = 0;			/* Invalidate file object */
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	6023      	str	r3, [r4, #0]
}
 800fbc6:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fbc8:	2301      	movs	r3, #1
 800fbca:	6a22      	ldr	r2, [r4, #32]
 800fbcc:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800fbd0:	7868      	ldrb	r0, [r5, #1]
 800fbd2:	f7fd f9c5 	bl	800cf60 <disk_write>
 800fbd6:	b930      	cbnz	r0, 800fbe6 <f_close+0xf6>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fbd8:	7d23      	ldrb	r3, [r4, #20]
 800fbda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fbde:	7523      	strb	r3, [r4, #20]
 800fbe0:	e7a0      	b.n	800fb24 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fbe2:	2002      	movs	r0, #2
}
 800fbe4:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fbe6:	2001      	movs	r0, #1
}
 800fbe8:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 800fbea:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fbec:	e7e7      	b.n	800fbbe <f_close+0xce>
 800fbee:	bf00      	nop
 800fbf0:	2001d728 	.word	0x2001d728

0800fbf4 <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 800fbf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fbf8:	b150      	cbz	r0, 800fc10 <f_findnext+0x1c>
 800fbfa:	4605      	mov	r5, r0
 800fbfc:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fbfe:	4c3b      	ldr	r4, [pc, #236]	; (800fcec <f_findnext+0xf8>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fc00:	682b      	ldr	r3, [r5, #0]
 800fc02:	b12b      	cbz	r3, 800fc10 <f_findnext+0x1c>
 800fc04:	781a      	ldrb	r2, [r3, #0]
 800fc06:	b11a      	cbz	r2, 800fc10 <f_findnext+0x1c>
 800fc08:	88a9      	ldrh	r1, [r5, #4]
 800fc0a:	88da      	ldrh	r2, [r3, #6]
 800fc0c:	4291      	cmp	r1, r2
 800fc0e:	d003      	beq.n	800fc18 <f_findnext+0x24>
	FRESULT res = FR_INVALID_OBJECT;
 800fc10:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 800fc12:	4638      	mov	r0, r7
 800fc14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fc18:	7858      	ldrb	r0, [r3, #1]
 800fc1a:	f7fd f975 	bl	800cf08 <disk_status>
 800fc1e:	f010 0101 	ands.w	r1, r0, #1
 800fc22:	d1f5      	bne.n	800fc10 <f_findnext+0x1c>
		if (!fno) {
 800fc24:	2e00      	cmp	r6, #0
 800fc26:	d059      	beq.n	800fcdc <f_findnext+0xe8>
			res = dir_read(dp, 0);			/* Read an item */
 800fc28:	4628      	mov	r0, r5
 800fc2a:	f7fd fdcf 	bl	800d7cc <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 800fc2e:	f010 08fb 	ands.w	r8, r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 800fc32:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 800fc34:	d1ed      	bne.n	800fc12 <f_findnext+0x1e>
				get_fileinfo(dp, fno);		/* Get the object information */
 800fc36:	4631      	mov	r1, r6
 800fc38:	4628      	mov	r0, r5
 800fc3a:	f7fd fa7b 	bl	800d134 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800fc3e:	4641      	mov	r1, r8
 800fc40:	4628      	mov	r0, r5
 800fc42:	f7fe fdd1 	bl	800e7e8 <dir_next>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 800fc46:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 800fc4a:	d14d      	bne.n	800fce8 <f_findnext+0xf4>
 800fc4c:	7db3      	ldrb	r3, [r6, #22]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d0df      	beq.n	800fc12 <f_findnext+0x1e>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 800fc52:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 800fc56:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 800fc5a:	e00f      	b.n	800fc7c <f_findnext+0x88>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fc5c:	3a20      	subs	r2, #32
 800fc5e:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fc60:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fc64:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fc68:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fc6a:	f1be 0f19 	cmp.w	lr, #25
 800fc6e:	d817      	bhi.n	800fca0 <f_findnext+0xac>
 800fc70:	3b20      	subs	r3, #32
 800fc72:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 800fc74:	4293      	cmp	r3, r2
 800fc76:	d1c3      	bne.n	800fc00 <f_findnext+0xc>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	d0ca      	beq.n	800fc12 <f_findnext+0x1e>
 800fc7c:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 800fc7e:	f81c 3b01 	ldrb.w	r3, [ip], #1
 800fc82:	2b3f      	cmp	r3, #63	; 0x3f
 800fc84:	d012      	beq.n	800fcac <f_findnext+0xb8>
 800fc86:	2b2a      	cmp	r3, #42	; 0x2a
 800fc88:	d010      	beq.n	800fcac <f_findnext+0xb8>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fc8a:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 800fc8e:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 800fc90:	2819      	cmp	r0, #25
 800fc92:	d9e3      	bls.n	800fc5c <f_findnext+0x68>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 800fc94:	2a7f      	cmp	r2, #127	; 0x7f
 800fc96:	d9e3      	bls.n	800fc60 <f_findnext+0x6c>
 800fc98:	4423      	add	r3, r4
 800fc9a:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 800fc9e:	e7df      	b.n	800fc60 <f_findnext+0x6c>
 800fca0:	2b7f      	cmp	r3, #127	; 0x7f
 800fca2:	d9e7      	bls.n	800fc74 <f_findnext+0x80>
 800fca4:	4420      	add	r0, r4
 800fca6:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 800fcaa:	e7e3      	b.n	800fc74 <f_findnext+0x80>
 800fcac:	4694      	mov	ip, r2
				nm = nx = 0;
 800fcae:	2300      	movs	r3, #0
 800fcb0:	f81c eb01 	ldrb.w	lr, [ip], #1
 800fcb4:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 800fcb6:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800fcba:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 800fcbc:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 800fcc0:	bf0c      	ite	eq
 800fcc2:	3201      	addeq	r2, #1
 800fcc4:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 800fcc6:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 800fcca:	d0f4      	beq.n	800fcb6 <f_findnext+0xc2>
 800fccc:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 800fcd0:	d0f1      	beq.n	800fcb6 <f_findnext+0xc2>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 800fcd2:	f7fd f9b9 	bl	800d048 <pattern_matching>
 800fcd6:	2800      	cmp	r0, #0
 800fcd8:	d092      	beq.n	800fc00 <f_findnext+0xc>
 800fcda:	e79a      	b.n	800fc12 <f_findnext+0x1e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fcdc:	4631      	mov	r1, r6
 800fcde:	4628      	mov	r0, r5
}
 800fce0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800fce4:	f7fe b89a 	b.w	800de1c <dir_sdi>
 800fce8:	4607      	mov	r7, r0
 800fcea:	e792      	b.n	800fc12 <f_findnext+0x1e>
 800fcec:	0801b9fc 	.word	0x0801b9fc

0800fcf0 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 800fcf0:	b570      	push	{r4, r5, r6, lr}
 800fcf2:	b082      	sub	sp, #8
 800fcf4:	4615      	mov	r5, r2
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 800fcfa:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	a901      	add	r1, sp, #4
 800fd00:	4668      	mov	r0, sp
 800fd02:	9500      	str	r5, [sp, #0]
 800fd04:	f7fd fb14 	bl	800d330 <find_volume>
	if (res == FR_OK) {
 800fd08:	b118      	cbz	r0, 800fd12 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 800fd0e:	b002      	add	sp, #8
 800fd10:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fd12:	e9dd 1500 	ldrd	r1, r5, [sp]
 800fd16:	4620      	mov	r0, r4
		obj->fs = fs;
 800fd18:	6025      	str	r5, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800fd1a:	f7fe fad7 	bl	800e2cc <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 800fd1e:	bb00      	cbnz	r0, 800fd62 <f_findfirst+0x72>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 800fd20:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	db0b      	blt.n	800fd40 <f_findfirst+0x50>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 800fd28:	79a3      	ldrb	r3, [r4, #6]
 800fd2a:	06db      	lsls	r3, r3, #27
 800fd2c:	d51f      	bpl.n	800fd6e <f_findfirst+0x7e>
	if (fs->fs_type == FS_FAT32) {
 800fd2e:	7829      	ldrb	r1, [r5, #0]
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fd30:	6a22      	ldr	r2, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 800fd32:	2903      	cmp	r1, #3
	cl = ld_word(dir + DIR_FstClusLO);
 800fd34:	8b53      	ldrh	r3, [r2, #26]
	if (fs->fs_type == FS_FAT32) {
 800fd36:	d102      	bne.n	800fd3e <f_findfirst+0x4e>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800fd38:	8a92      	ldrh	r2, [r2, #20]
 800fd3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 800fd3e:	60a3      	str	r3, [r4, #8]
				obj->id = fs->id;
 800fd40:	88eb      	ldrh	r3, [r5, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fd42:	2100      	movs	r1, #0
 800fd44:	4620      	mov	r0, r4
				obj->id = fs->id;
 800fd46:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800fd48:	f7fe f868 	bl	800de1c <dir_sdi>
				if (res == FR_OK) {
 800fd4c:	b948      	cbnz	r0, 800fd62 <f_findfirst+0x72>
					if (obj->sclust) {
 800fd4e:	68a3      	ldr	r3, [r4, #8]
 800fd50:	b97b      	cbnz	r3, 800fd72 <f_findfirst+0x82>
						obj->lockid = 0;	/* Root directory need not to be locked */
 800fd52:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 800fd54:	4631      	mov	r1, r6
 800fd56:	4620      	mov	r0, r4
}
 800fd58:	b002      	add	sp, #8
 800fd5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 800fd5e:	f7ff bf49 	b.w	800fbf4 <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 800fd62:	2804      	cmp	r0, #4
 800fd64:	d1d1      	bne.n	800fd0a <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fd66:	2300      	movs	r3, #0
	res = f_opendir(dp, path);		/* Open the target directory */
 800fd68:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 800fd6a:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 800fd6c:	e7cf      	b.n	800fd0e <f_findfirst+0x1e>
					res = FR_NO_PATH;
 800fd6e:	2005      	movs	r0, #5
 800fd70:	e7cb      	b.n	800fd0a <f_findfirst+0x1a>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 800fd72:	4601      	mov	r1, r0
 800fd74:	4620      	mov	r0, r4
 800fd76:	f7fd f90f 	bl	800cf98 <inc_lock>
 800fd7a:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 800fd7c:	2800      	cmp	r0, #0
 800fd7e:	d1e9      	bne.n	800fd54 <f_findfirst+0x64>
 800fd80:	2012      	movs	r0, #18
 800fd82:	e7c2      	b.n	800fd0a <f_findfirst+0x1a>

0800fd84 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 800fd84:	4b11      	ldr	r3, [pc, #68]	; (800fdcc <FATFS_LinkDriver+0x48>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800fd86:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 800fd88:	7a5c      	ldrb	r4, [r3, #9]
 800fd8a:	b9cc      	cbnz	r4, 800fdc0 <FATFS_LinkDriver+0x3c>
    disk.is_initialized[disk.nbr] = 0;
 800fd8c:	f004 02ff 	and.w	r2, r4, #255	; 0xff
 800fd90:	7a5c      	ldrb	r4, [r3, #9]
 800fd92:	551a      	strb	r2, [r3, r4]
    disk.drv[disk.nbr] = drv;
 800fd94:	7a5c      	ldrb	r4, [r3, #9]
 800fd96:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd9a:	6060      	str	r0, [r4, #4]
    disk.lun[disk.nbr] = lun;
 800fd9c:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 800fd9e:	7a58      	ldrb	r0, [r3, #9]
    disk.lun[disk.nbr] = lun;
 800fda0:	441c      	add	r4, r3
 800fda2:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800fda4:	1c44      	adds	r4, r0, #1
    path[0] = DiskNum + '0';
 800fda6:	3030      	adds	r0, #48	; 0x30
    DiskNum = disk.nbr++;
 800fda8:	b2e4      	uxtb	r4, r4
 800fdaa:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 800fdac:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 800fdae:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800fdb0:	7008      	strb	r0, [r1, #0]
    path[1] = ':';
 800fdb2:	704c      	strb	r4, [r1, #1]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 800fdb4:	4610      	mov	r0, r2
 800fdb6:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[3] = 0;
 800fdba:	70ca      	strb	r2, [r1, #3]
    path[2] = '/';
 800fdbc:	708b      	strb	r3, [r1, #2]
}
 800fdbe:	4770      	bx	lr
  uint8_t ret = 1;
 800fdc0:	2201      	movs	r2, #1
}
 800fdc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdc6:	4610      	mov	r0, r2
 800fdc8:	4770      	bx	lr
 800fdca:	bf00      	nop
 800fdcc:	2001d94c 	.word	0x2001d94c

0800fdd0 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800fdd0:	287f      	cmp	r0, #127	; 0x7f
 800fdd2:	d913      	bls.n	800fdfc <ff_convert+0x2c>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 800fdd4:	b979      	cbnz	r1, 800fdf6 <ff_convert+0x26>
 800fdd6:	4b0c      	ldr	r3, [pc, #48]	; (800fe08 <ff_convert+0x38>)
 800fdd8:	e001      	b.n	800fdde <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800fdda:	2980      	cmp	r1, #128	; 0x80
 800fddc:	d00d      	beq.n	800fdfa <ff_convert+0x2a>
				if (chr == Tbl[c]) break;
 800fdde:	f833 2b02 	ldrh.w	r2, [r3], #2
 800fde2:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 800fde6:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 800fde8:	4282      	cmp	r2, r0
 800fdea:	d1f6      	bne.n	800fdda <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 800fdec:	f10c 0c80 	add.w	ip, ip, #128	; 0x80
 800fdf0:	fa1f f08c 	uxth.w	r0, ip
 800fdf4:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fdf6:	28ff      	cmp	r0, #255	; 0xff
 800fdf8:	d901      	bls.n	800fdfe <ff_convert+0x2e>
 800fdfa:	2000      	movs	r0, #0
		}
	}

	return c;
}
 800fdfc:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800fdfe:	4b02      	ldr	r3, [pc, #8]	; (800fe08 <ff_convert+0x38>)
 800fe00:	3880      	subs	r0, #128	; 0x80
 800fe02:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 800fe06:	4770      	bx	lr
 800fe08:	0801ba8c 	.word	0x0801ba8c

0800fe0c <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800fe0c:	4b23      	ldr	r3, [pc, #140]	; (800fe9c <ff_wtoupper+0x90>)
 800fe0e:	4a24      	ldr	r2, [pc, #144]	; (800fea0 <ff_wtoupper+0x94>)
 800fe10:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800fe14:	bf28      	it	cs
 800fe16:	4613      	movcs	r3, r2
{
 800fe18:	b510      	push	{r4, lr}
 800fe1a:	3304      	adds	r3, #4
 800fe1c:	e00a      	b.n	800fe34 <ff_wtoupper+0x28>
	for (;;) {
		bc = *p++;								/* Get block base */
		if (!bc || chr < bc) break;
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 800fe1e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 800fe22:	fa5f fc82 	uxtb.w	ip, r2
 800fe26:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 800fe28:	eb0c 0e01 	add.w	lr, ip, r1
 800fe2c:	4570      	cmp	r0, lr
 800fe2e:	db09      	blt.n	800fe44 <ff_wtoupper+0x38>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 800fe30:	3304      	adds	r3, #4
 800fe32:	b182      	cbz	r2, 800fe56 <ff_wtoupper+0x4a>
		bc = *p++;								/* Get block base */
 800fe34:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 800fe38:	461c      	mov	r4, r3
 800fe3a:	1e4a      	subs	r2, r1, #1
 800fe3c:	b292      	uxth	r2, r2
 800fe3e:	4290      	cmp	r0, r2
 800fe40:	d8ed      	bhi.n	800fe1e <ff_wtoupper+0x12>
	}

	return chr;
}
 800fe42:	bd10      	pop	{r4, pc}
			switch (cmd) {
 800fe44:	2a08      	cmp	r2, #8
 800fe46:	d8fc      	bhi.n	800fe42 <ff_wtoupper+0x36>
 800fe48:	e8df f002 	tbb	[pc, r2]
 800fe4c:	1916100c 	.word	0x1916100c
 800fe50:	25221f1c 	.word	0x25221f1c
 800fe54:	08          	.byte	0x08
 800fe55:	00          	.byte	0x00
		if (!cmd) p += nc;
 800fe56:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 800fe5a:	e7de      	b.n	800fe1a <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 800fe5c:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 800fe60:	b280      	uxth	r0, r0
}
 800fe62:	bd10      	pop	{r4, pc}
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 800fe64:	1a41      	subs	r1, r0, r1
 800fe66:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
}
 800fe6a:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800fe6c:	1a43      	subs	r3, r0, r1
 800fe6e:	f003 0301 	and.w	r3, r3, #1
 800fe72:	1ac3      	subs	r3, r0, r3
 800fe74:	b298      	uxth	r0, r3
}
 800fe76:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 800fe78:	3810      	subs	r0, #16
 800fe7a:	b280      	uxth	r0, r0
}
 800fe7c:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 800fe7e:	3820      	subs	r0, #32
 800fe80:	b280      	uxth	r0, r0
}
 800fe82:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 800fe84:	3830      	subs	r0, #48	; 0x30
 800fe86:	b280      	uxth	r0, r0
}
 800fe88:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 800fe8a:	381a      	subs	r0, #26
 800fe8c:	b280      	uxth	r0, r0
}
 800fe8e:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 800fe90:	3008      	adds	r0, #8
 800fe92:	b280      	uxth	r0, r0
}
 800fe94:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 800fe96:	3850      	subs	r0, #80	; 0x50
 800fe98:	b280      	uxth	r0, r0
}
 800fe9a:	bd10      	pop	{r4, pc}
 800fe9c:	0801bb8c 	.word	0x0801bb8c
 800fea0:	0801bd80 	.word	0x0801bd80

0800fea4 <tEnvelopeFollower_init>:
//===========================================================================
/* Envelope Follower */
//===========================================================================

void    tEnvelopeFollower_init(tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, LEAF* const leaf)
{
 800fea4:	b538      	push	{r3, r4, r5, lr}
 800fea6:	ed2d 8b02 	vpush	{d8}
    tEnvelopeFollower_initToPool(ef, attackThreshold, decayCoeff, &leaf->mempool);
}

void    tEnvelopeFollower_initToPool    (tEnvelopeFollower* const ef, Lfloat attackThreshold, Lfloat decayCoeff, tMempool* const mp)
{
    _tMempool* m = *mp;
 800feaa:	698d      	ldr	r5, [r1, #24]
{
 800feac:	eef0 8a40 	vmov.f32	s17, s0
 800feb0:	eeb0 8a60 	vmov.f32	s16, s1
 800feb4:	4604      	mov	r4, r0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800feb6:	4629      	mov	r1, r5
 800feb8:	2010      	movs	r0, #16
 800feba:	f004 fb2f 	bl	801451c <mpool_alloc>
    e->mempool = m;
    
    e->y = 0.0f;
 800febe:	2300      	movs	r3, #0
    _tEnvelopeFollower* e = *ef = (_tEnvelopeFollower*) mpool_alloc(sizeof(_tEnvelopeFollower), m);
 800fec0:	6020      	str	r0, [r4, #0]
    e->mempool = m;
 800fec2:	6005      	str	r5, [r0, #0]
    e->y = 0.0f;
 800fec4:	6043      	str	r3, [r0, #4]
    e->a_thresh = attackThreshold;
 800fec6:	edc0 8a02 	vstr	s17, [r0, #8]
    e->d_coeff = decayCoeff;
 800feca:	ed80 8a03 	vstr	s16, [r0, #12]
}
 800fece:	ecbd 8b02 	vpop	{d8}
 800fed2:	bd38      	pop	{r3, r4, r5, pc}

0800fed4 <tEnvelopeFollower_tick>:
    mpool_free((char*)e, e->mempool);
}

Lfloat   tEnvelopeFollower_tick(tEnvelopeFollower* const ef, Lfloat x)
{
    _tEnvelopeFollower* e = *ef;
 800fed4:	6803      	ldr	r3, [r0, #0]
    
    if (x < 0.0f ) x = -x;  /* Absolute value. */
 800fed6:	eeb0 0ac0 	vabs.f32	s0, s0
    
    if (isnan(x)) return 0.0f;
    if ((x >= e->y) && (x > e->a_thresh)) e->y = x; /* If we hit a peak, ride the peak to the top. */
 800feda:	edd3 7a01 	vldr	s15, [r3, #4]
 800fede:	eef4 7ac0 	vcmpe.f32	s15, s0
 800fee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fee6:	d809      	bhi.n	800fefc <tEnvelopeFollower_tick+0x28>
 800fee8:	ed93 7a02 	vldr	s14, [r3, #8]
 800feec:	eeb4 7ac0 	vcmpe.f32	s14, s0
 800fef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fef4:	d502      	bpl.n	800fefc <tEnvelopeFollower_tick+0x28>
 800fef6:	ed83 0a01 	vstr	s0, [r3, #4]
#ifdef NO_DENORMAL_CHECK
#else
    if( e->y < VSF)   e->y = 0.0f;
#endif
    return e->y;
}
 800fefa:	4770      	bx	lr
    else e->y = e->y * e->d_coeff; /* Else, exponential decay of output. */
 800fefc:	ed93 0a03 	vldr	s0, [r3, #12]
 800ff00:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ff04:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800ff08:	4770      	bx	lr
 800ff0a:	bf00      	nop

0800ff0c <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, Lfloat factor, tMempool* const mp)
{
 800ff0c:	b538      	push	{r3, r4, r5, lr}
 800ff0e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800ff12:	680d      	ldr	r5, [r1, #0]
{
 800ff14:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800ff16:	2010      	movs	r0, #16
{
 800ff18:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800ff1c:	4629      	mov	r1, r5
 800ff1e:	f004 fafd 	bl	801451c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800ff22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800ff26:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800ff28:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800ff2a:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800ff2c:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 800ff30:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800ff32:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800ff36:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800ff3a:	ecbd 8b02 	vpop	{d8}
 800ff3e:	bd38      	pop	{r3, r4, r5, pc}

0800ff40 <tPowerFollower_free>:

void    tPowerFollower_free (tPowerFollower* const pf)
{
    _tPowerFollower* p = *pf;
 800ff40:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)p, p->mempool);
 800ff42:	6801      	ldr	r1, [r0, #0]
 800ff44:	f004 bbac 	b.w	80146a0 <mpool_free>

0800ff48 <tPowerFollower_setFactor>:
}

void tPowerFollower_setFactor(tPowerFollower* const pf, Lfloat factor)
{
    _tPowerFollower* p = *pf;
 800ff48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ff4c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800ff68 <tPowerFollower_setFactor+0x20>
 800ff50:	6803      	ldr	r3, [r0, #0]
    
    if (factor<0.0f) factor=0.0f;
    if (factor>1.0f) factor=1.0f;
 800ff52:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 800ff56:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800ff5a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 800ff5e:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 800ff62:	edc3 7a02 	vstr	s15, [r3, #8]
}
 800ff66:	4770      	bx	lr
 800ff68:	00000000 	.word	0x00000000

0800ff6c <tPowerFollower_tick>:

Lfloat tPowerFollower_tick(tPowerFollower* const pf, Lfloat input)
{
    _tPowerFollower* p = *pf;
 800ff6c:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 800ff6e:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ff72:	edd3 6a03 	vldr	s13, [r3, #12]
 800ff76:	ed93 0a02 	vldr	s0, [r3, #8]
 800ff7a:	ed93 7a01 	vldr	s14, [r3, #4]
 800ff7e:	ee20 0a26 	vmul.f32	s0, s0, s13
 800ff82:	eea7 0a27 	vfma.f32	s0, s14, s15
 800ff86:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 800ff8a:	4770      	bx	lr

0800ff8c <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, Lfloat delay, uint32_t maxDelay, tMempool* const mp)
{
 800ff8c:	b570      	push	{r4, r5, r6, lr}
 800ff8e:	460d      	mov	r5, r1
 800ff90:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800ff92:	202c      	movs	r0, #44	; 0x2c
{
 800ff94:	ed2d 8b02 	vpush	{d8}
 800ff98:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 800ff9a:	6811      	ldr	r1, [r2, #0]
{
 800ff9c:	eeb0 8a40 	vmov.f32	s16, s0
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 800ffa0:	eddf 8a30 	vldr	s17, [pc, #192]	; 8010064 <tLinearDelay_initToPool+0xd8>
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800ffa4:	9101      	str	r1, [sp, #4]
 800ffa6:	f004 fab9 	bl	801451c <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 800ffaa:	ee07 5a90 	vmov	s15, r5
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800ffae:	4604      	mov	r4, r0
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffb0:	9901      	ldr	r1, [sp, #4]
    if (delay > maxDelay)   d->delay = maxDelay;
 800ffb2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 800ffb6:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 800ffb8:	fec8 7a28 	vmaxnm.f32	s15, s16, s17
    d->mempool = m;
 800ffbc:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 800ffbe:	61c5      	str	r5, [r0, #28]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffc0:	00a8      	lsls	r0, r5, #2
    if (delay > maxDelay)   d->delay = maxDelay;
 800ffc2:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 800ffc6:	edc4 7a08 	vstr	s15, [r4, #32]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffca:	f004 faa7 	bl	801451c <mpool_alloc>

    d->gain = 1.0f;
 800ffce:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 800ffd2:	2300      	movs	r3, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 800ffd4:	60a0      	str	r0, [r4, #8]
    d->gain = 1.0f;
 800ffd6:	6062      	str	r2, [r4, #4]

void     tLinearDelay_setDelay (tLinearDelay* const dl, Lfloat delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800ffd8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    d->lastIn = 0.0f;
 800ffdc:	edc4 8a04 	vstr	s17, [r4, #16]
    d->lastOut = 0.0f;
 800ffe0:	edc4 8a03 	vstr	s17, [r4, #12]
    d->inPoint = 0;
 800ffe4:	6163      	str	r3, [r4, #20]
    d->outPoint = 0;
 800ffe6:	61a3      	str	r3, [r4, #24]
    _tLinearDelay* d = *dl;
 800ffe8:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 800ffea:	edd4 0a08 	vldr	s1, [r4, #32]
 800ffee:	edd5 7a07 	vldr	s15, [r5, #28]
 800fff2:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 800fff6:	f003 ff8f 	bl	8013f18 <LEAF_clip>

    Lfloat outPointer = d->inPoint - d->delay;
 800fffa:	edd5 7a05 	vldr	s15, [r5, #20]

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 800fffe:	69ea      	ldr	r2, [r5, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 8010000:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 8010004:	ed85 0a08 	vstr	s0, [r5, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 8010008:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 801000c:	eef4 7ae8 	vcmpe.f32	s15, s17
 8010010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010014:	d50a      	bpl.n	801002c <tLinearDelay_initToPool+0xa0>
        outPointer += d->maxDelay; // modulo maximum length
 8010016:	ee07 2a10 	vmov	s14, r2
 801001a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801001e:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8010022:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801002a:	d4f8      	bmi.n	801001e <tLinearDelay_initToPool+0x92>

    d->outPoint = (uint32_t) outPointer;   // integer part
 801002c:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 8010030:	ee17 3a10 	vmov	r3, s14

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 8010034:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8010038:	ee06 3a90 	vmov	s13, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801003c:	4293      	cmp	r3, r2
 801003e:	bf08      	it	eq
 8010040:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 8010042:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 8010046:	eef8 6a66 	vcvt.f32.u32	s13, s13
 801004a:	61ab      	str	r3, [r5, #24]
 801004c:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 8010050:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 8010054:	edc5 7a09 	vstr	s15, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8010058:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
}
 801005c:	b002      	add	sp, #8
 801005e:	ecbd 8b02 	vpop	{d8}
 8010062:	bd70      	pop	{r4, r5, r6, pc}
 8010064:	00000000 	.word	0x00000000

08010068 <tLinearDelay_free>:
{
 8010068:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 801006a:	6804      	ldr	r4, [r0, #0]
    mpool_free((char*)d->buff, d->mempool);
 801006c:	6821      	ldr	r1, [r4, #0]
 801006e:	68a0      	ldr	r0, [r4, #8]
 8010070:	f004 fb16 	bl	80146a0 <mpool_free>
    mpool_free((char*)d, d->mempool);
 8010074:	6821      	ldr	r1, [r4, #0]
 8010076:	4620      	mov	r0, r4
}
 8010078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 801007c:	f004 bb10 	b.w	80146a0 <mpool_free>

08010080 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 8010080:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8010082:	69cb      	ldr	r3, [r1, #28]
 8010084:	b14b      	cbz	r3, 801009a <tLinearDelay_clear+0x1a>
 8010086:	2300      	movs	r3, #0
        d->buff[i] = 0;
 8010088:	2000      	movs	r0, #0
 801008a:	688a      	ldr	r2, [r1, #8]
 801008c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 8010090:	3301      	adds	r3, #1
        d->buff[i] = 0;
 8010092:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8010094:	69ca      	ldr	r2, [r1, #28]
 8010096:	429a      	cmp	r2, r3
 8010098:	d8f7      	bhi.n	801008a <tLinearDelay_clear+0xa>
}
 801009a:	4770      	bx	lr

0801009c <tLinearDelay_tick>:
{
 801009c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801009e:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 80100a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80100a4:	6959      	ldr	r1, [r3, #20]
 80100a6:	689a      	ldr	r2, [r3, #8]
 80100a8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80100ac:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80100b0:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80100b4:	69dc      	ldr	r4, [r3, #28]
    d->lastOut = d->buff[idx] * d->omAlpha;
 80100b6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    uint32_t idx = (uint32_t) d->outPoint;
 80100ba:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80100be:	3201      	adds	r2, #1
    if ((idx + 1) < d->maxDelay)
 80100c0:	1c48      	adds	r0, r1, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 80100c2:	42a2      	cmp	r2, r4
 80100c4:	bf08      	it	eq
 80100c6:	2200      	moveq	r2, #0
    if ((idx + 1) < d->maxDelay)
 80100c8:	4284      	cmp	r4, r0
 80100ca:	615a      	str	r2, [r3, #20]
    d->lastOut = d->buff[idx] * d->omAlpha;
 80100cc:	689a      	ldr	r2, [r3, #8]
 80100ce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80100d2:	ed91 0a00 	vldr	s0, [r1]
 80100d6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80100da:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 80100de:	d90b      	bls.n	80100f8 <tLinearDelay_tick+0x5c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 80100e0:	ed91 7a01 	vldr	s14, [r1, #4]
 80100e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80100e8:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 80100ea:	eea7 0a27 	vfma.f32	s0, s14, s15
 80100ee:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80100f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100f6:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 80100f8:	ed92 7a00 	vldr	s14, [r2]
 80100fc:	2000      	movs	r0, #0
 80100fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8010102:	6198      	str	r0, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 8010104:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 8010108:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801010c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010110:	4770      	bx	lr
 8010112:	bf00      	nop

08010114 <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 8010114:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 8010116:	edd3 7a01 	vldr	s15, [r3, #4]
 801011a:	6959      	ldr	r1, [r3, #20]
 801011c:	689a      	ldr	r2, [r3, #8]
 801011e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010122:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010126:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801012a:	695a      	ldr	r2, [r3, #20]
 801012c:	69d9      	ldr	r1, [r3, #28]
 801012e:	3201      	adds	r2, #1
 8010130:	428a      	cmp	r2, r1
 8010132:	bf08      	it	eq
 8010134:	2200      	moveq	r2, #0
 8010136:	615a      	str	r2, [r3, #20]
}
 8010138:	4770      	bx	lr
 801013a:	bf00      	nop

0801013c <tLinearDelay_tickOut>:
{
 801013c:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 801013e:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8010140:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 8010142:	6899      	ldr	r1, [r3, #8]
 8010144:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8010148:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 801014c:	69dc      	ldr	r4, [r3, #28]
 801014e:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 8010150:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 8010154:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 8010156:	ee20 0a27 	vmul.f32	s0, s0, s15
 801015a:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 801015e:	d20b      	bcs.n	8010178 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 8010160:	ed90 7a01 	vldr	s14, [r0, #4]
 8010164:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8010168:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 801016a:	eea7 0a27 	vfma.f32	s0, s14, s15
 801016e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8010172:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010176:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 8010178:	ed91 7a00 	vldr	s14, [r1]
 801017c:	2200      	movs	r2, #0
 801017e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 8010182:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 8010184:	eea7 0a27 	vfma.f32	s0, s14, s15
        d->lastOut += d->buff[idx+1] * d->alpha;
 8010188:	ed83 0a03 	vstr	s0, [r3, #12]
}
 801018c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010190:	4770      	bx	lr
 8010192:	bf00      	nop

08010194 <tLinearDelay_setDelay>:
{
 8010194:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 8010196:	6804      	ldr	r4, [r0, #0]
{
 8010198:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 801019c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80101a0:	edd4 7a07 	vldr	s15, [r4, #28]
 80101a4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 80101a8:	f003 feb6 	bl	8013f18 <LEAF_clip>
    Lfloat outPointer = d->inPoint - d->delay;
 80101ac:	edd4 7a05 	vldr	s15, [r4, #20]
        outPointer += d->maxDelay; // modulo maximum length
 80101b0:	69e2      	ldr	r2, [r4, #28]
    Lfloat outPointer = d->inPoint - d->delay;
 80101b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->delay = LEAF_clip(2.0f, delay,  d->maxDelay);
 80101b6:	ed84 0a08 	vstr	s0, [r4, #32]
    Lfloat outPointer = d->inPoint - d->delay;
 80101ba:	ee77 7ac0 	vsub.f32	s15, s15, s0
    while ( outPointer < 0 )
 80101be:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101c6:	d50a      	bpl.n	80101de <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 80101c8:	ee07 2a10 	vmov	s14, r2
 80101cc:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80101d0:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 80101d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80101d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101dc:	d4f8      	bmi.n	80101d0 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 80101de:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 80101e2:	ee17 3a10 	vmov	r3, s14
    d->omAlpha = 1.0f - d->alpha;
 80101e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80101ea:	ee06 3a90 	vmov	s13, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 80101ee:	4293      	cmp	r3, r2
 80101f0:	bf08      	it	eq
 80101f2:	2300      	moveq	r3, #0
    d->omAlpha = 1.0f - d->alpha;
 80101f4:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->alpha = outPointer - d->outPoint; // fractional part
 80101f8:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80101fc:	61a3      	str	r3, [r4, #24]
 80101fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 8010202:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->alpha = outPointer - d->outPoint; // fractional part
 8010206:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801020a:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
}
 801020e:	bd10      	pop	{r4, pc}

08010210 <tLinearDelay_addTo>:
    d->buff[tap] = value;
}

Lfloat tLinearDelay_addTo (tLinearDelay* const dl, Lfloat value, uint32_t tapDelay)
{
    _tLinearDelay* d = *dl;
 8010210:	6802      	ldr	r2, [r0, #0]

    int32_t tap = d->inPoint - tapDelay - 1;
 8010212:	6953      	ldr	r3, [r2, #20]
 8010214:	1a59      	subs	r1, r3, r1

    // Check for wraparound.
    while ( tap < 0 )   tap += d->maxDelay;
 8010216:	3901      	subs	r1, #1
 8010218:	d502      	bpl.n	8010220 <tLinearDelay_addTo+0x10>
 801021a:	69d3      	ldr	r3, [r2, #28]
 801021c:	18c9      	adds	r1, r1, r3
 801021e:	d4fd      	bmi.n	801021c <tLinearDelay_addTo+0xc>
    
    return (d->buff[tap] += value);
 8010220:	6893      	ldr	r3, [r2, #8]
 8010222:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010226:	edd3 7a00 	vldr	s15, [r3]
 801022a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801022e:	ed83 0a00 	vstr	s0, [r3]
}
 8010232:	4770      	bx	lr

08010234 <tLagrangeDelay_free>:

    tLagrangeDelay_setDelay(dl, d->delay);
}

void tLagrangeDelay_free (tLagrangeDelay* const dl)
{
 8010234:	b510      	push	{r4, lr}
    _tLagrangeDelay* d = *dl;
 8010236:	6804      	ldr	r4, [r0, #0]

    mpool_free((char*)d->buff, d->mempool);
 8010238:	e9d4 1000 	ldrd	r1, r0, [r4]
 801023c:	f004 fa30 	bl	80146a0 <mpool_free>
    mpool_free((char*)d, d->mempool);
 8010240:	6821      	ldr	r1, [r4, #0]
 8010242:	4620      	mov	r0, r4
}
 8010244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)d, d->mempool);
 8010248:	f004 ba2a 	b.w	80146a0 <mpool_free>

0801024c <tLagrangeDelay_clear>:


void    tLagrangeDelay_clear(tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
 801024c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 801024e:	69cb      	ldr	r3, [r1, #28]
 8010250:	b14b      	cbz	r3, 8010266 <tLagrangeDelay_clear+0x1a>
 8010252:	2300      	movs	r3, #0
    {
        d->buff[i] = 0.0f;
 8010254:	2000      	movs	r0, #0
 8010256:	684a      	ldr	r2, [r1, #4]
 8010258:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 801025c:	3301      	adds	r3, #1
        d->buff[i] = 0.0f;
 801025e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8010260:	69ca      	ldr	r2, [r1, #28]
 8010262:	429a      	cmp	r2, r3
 8010264:	d8f7      	bhi.n	8010256 <tLagrangeDelay_clear+0xa>
    }
}
 8010266:	4770      	bx	lr

08010268 <tLagrangeDelay_tickIn>:
    return d->lastOut;
}

void   tLagrangeDelay_tickIn (tLagrangeDelay* const dl, Lfloat input)
{
	_tLagrangeDelay* d = *dl;
 8010268:	6803      	ldr	r3, [r0, #0]

    d->buff[d->inPoint] = input;
 801026a:	6959      	ldr	r1, [r3, #20]
 801026c:	685a      	ldr	r2, [r3, #4]
 801026e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8010272:	ed82 0a00 	vstr	s0, [r2]

    // Increment input pointer modulo length.
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 8010276:	695a      	ldr	r2, [r3, #20]
 8010278:	6899      	ldr	r1, [r3, #8]
 801027a:	3201      	adds	r2, #1
 801027c:	400a      	ands	r2, r1
 801027e:	615a      	str	r2, [r3, #20]
}
 8010280:	4770      	bx	lr
 8010282:	bf00      	nop

08010284 <tLagrangeDelay_tickOut>:

Lfloat   tLagrangeDelay_tickOut (tLagrangeDelay* const dl)
{
 8010284:	b430      	push	{r4, r5}
	_tLagrangeDelay* d = *dl;
 8010286:	6803      	ldr	r3, [r0, #0]

    uint32_t idx = (uint32_t) d->outPoint;
 8010288:	6998      	ldr	r0, [r3, #24]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;

    d->lastOut =    (d->buff[previdx] * d->h0) +
    		(d->buff[idx] * d->h1) +
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 801028a:	ed93 6a0c 	vldr	s12, [r3, #48]	; 0x30
 801028e:	1c82      	adds	r2, r0, #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 8010290:	1c44      	adds	r4, r0, #1
 8010292:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8010296:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 801029a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    d->lastOut =    (d->buff[previdx] * d->h0) +
 801029e:	e9d3 1501 	ldrd	r1, r5, [r3, #4]
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 80102a2:	402a      	ands	r2, r5
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 80102a4:	402c      	ands	r4, r5
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 80102a6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80102aa:	ed92 0a00 	vldr	s0, [r2]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 80102ae:	eb01 0284 	add.w	r2, r1, r4, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * d->h3);
 80102b2:	ee20 0a06 	vmul.f32	s0, s0, s12
 80102b6:	ed92 6a00 	vldr	s12, [r2]
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 80102ba:	69da      	ldr	r2, [r3, #28]
 80102bc:	eea6 0a26 	vfma.f32	s0, s12, s13
 80102c0:	4402      	add	r2, r0
    		(d->buff[idx] * d->h1) +
 80102c2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
   uint32_t previdx =  ((idx - 1) + d->maxDelay) & d->bufferMask;
 80102c6:	3a01      	subs	r2, #1
 80102c8:	edd0 6a00 	vldr	s13, [r0]
 80102cc:	402a      	ands	r2, r5
 80102ce:	eea6 0a87 	vfma.f32	s0, s13, s14
    d->lastOut =    (d->buff[previdx] * d->h0) +
 80102d2:	eb01 0182 	add.w	r1, r1, r2, lsl #2
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 80102d6:	ed91 7a00 	vldr	s14, [r1]

    //d->buff[previdx] = 0.0f;
    // Increment output pointer modulo length
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 80102da:	619c      	str	r4, [r3, #24]
			(d->buff[(idx + 1) & d->bufferMask] * d->h2) +
 80102dc:	eea7 0a27 	vfma.f32	s0, s14, s15
    d->lastOut =    (d->buff[previdx] * d->h0) +
 80102e0:	ed83 0a03 	vstr	s0, [r3, #12]

    return d->lastOut;
}
 80102e4:	bc30      	pop	{r4, r5}
 80102e6:	4770      	bx	lr

080102e8 <tLagrangeDelay_setDelay>:
void tLagrangeDelay_setDelay (tLagrangeDelay* const dl, Lfloat delay)
{
	_tLagrangeDelay* d = *dl;
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 80102e8:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
	_tLagrangeDelay* d = *dl;
 80102ec:	6803      	ldr	r3, [r0, #0]
    d->delay = delay; // not safe but faster
 80102ee:	ed83 0a08 	vstr	s0, [r3, #32]
    Lfloat outPointer = d->inPoint - d->delay - 1.0f; // minus 1 because interpolation needs value from 1->2 so lagrange interp will add the 1 back
 80102f2:	ee37 7ac0 	vsub.f32	s14, s15, s0
 80102f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80102fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102fe:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8010302:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801030a:	d50a      	bpl.n	8010322 <tLagrangeDelay_setDelay+0x3a>
        outPointer += d->maxDelay; // modulo maximum length
 801030c:	ed93 7a07 	vldr	s14, [r3, #28]
 8010310:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8010314:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8010318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801031c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010320:	d4f8      	bmi.n	8010314 <tLagrangeDelay_setDelay+0x2c>

    d->outPoint = (uint32_t) outPointer;   // integer part
 8010322:	eebc 7ae7 	vcvt.u32.f32	s14, s15

	Lfloat pdp1d = dp1*alpha;
	Lfloat pddm1 = alpha*dm1;
	Lfloat pdm1dm2 = dm1*dm2;

	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 8010326:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801039c <tLagrangeDelay_setDelay+0xb4>
	Lfloat dp1 = alpha+1.0f;
 801032a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
	d->h1 = 0.5f * (dp1 * pdm1dm2);
	d->h2 = -0.5f * (pdp1d * dm2);
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 801032e:	eddf 3a1c 	vldr	s7, [pc, #112]	; 80103a0 <tLagrangeDelay_setDelay+0xb8>
	Lfloat dm2 = alpha-2.0f;
 8010332:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0

    d->outPoint &= d->bufferMask;
 8010336:	689a      	ldr	r2, [r3, #8]
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 8010338:	eeb8 6a47 	vcvt.f32.u32	s12, s14
    d->outPoint &= d->bufferMask;
 801033c:	ee17 1a10 	vmov	r1, s14
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010340:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
	d->h2 = -0.5f * (pdp1d * dm2);
 8010344:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    d->outPoint &= d->bufferMask;
 8010348:	400a      	ands	r2, r1
    Lfloat alpha = (outPointer - d->outPoint); // fractional part
 801034a:	ee77 7ac6 	vsub.f32	s15, s15, s12
    d->outPoint &= d->bufferMask;
 801034e:	619a      	str	r2, [r3, #24]
	Lfloat dm1 = alpha-1.0f;
 8010350:	ee37 7ae4 	vsub.f32	s14, s15, s9
	Lfloat dp1 = alpha+1.0f;
 8010354:	ee77 4aa4 	vadd.f32	s9, s15, s9
	Lfloat dm2 = alpha-2.0f;
 8010358:	ee37 5ac5 	vsub.f32	s10, s15, s10
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 801035c:	ee67 6aa6 	vmul.f32	s13, s15, s13
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010360:	ee24 6a87 	vmul.f32	s12, s9, s14
	Lfloat pdp1d = dp1*alpha;
 8010364:	ee67 7aa4 	vmul.f32	s15, s15, s9
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 8010368:	ee66 6a87 	vmul.f32	s13, s13, s14
	d->h2 = -0.5f * (pdp1d * dm2);
 801036c:	ee65 5a25 	vmul.f32	s11, s10, s11
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 8010370:	ee27 7a23 	vmul.f32	s14, s14, s7
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010374:	ee26 6a04 	vmul.f32	s12, s12, s8
	d->h2 = -0.5f * (pdp1d * dm2);
 8010378:	ee65 5aa7 	vmul.f32	s11, s11, s15
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 801037c:	ee27 7a27 	vmul.f32	s14, s14, s15
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 8010380:	ee66 6a85 	vmul.f32	s13, s13, s10
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010384:	ee66 7a05 	vmul.f32	s15, s12, s10
	d->h2 = -0.5f * (pdp1d * dm2);
 8010388:	edc3 5a0b 	vstr	s11, [r3, #44]	; 0x2c
	d->h3 = 0.166666666666667f * (pdp1d * dm1);
 801038c:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
	d->h0 = -0.166666666666667f * (pddm1 * dm2);
 8010390:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
	d->h1 = 0.5f * (dp1 * pdm1dm2);
 8010394:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8010398:	4770      	bx	lr
 801039a:	bf00      	nop
 801039c:	be2aaaab 	.word	0xbe2aaaab
 80103a0:	3e2aaaab 	.word	0x3e2aaaab

080103a4 <tLagrangeDelay_initToPool>:
{
 80103a4:	b570      	push	{r4, r5, r6, lr}
 80103a6:	460d      	mov	r5, r1
 80103a8:	4606      	mov	r6, r0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 80103aa:	2034      	movs	r0, #52	; 0x34
{
 80103ac:	ed2d 8b02 	vpush	{d8}
 80103b0:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 80103b2:	6811      	ldr	r1, [r2, #0]
{
 80103b4:	eeb0 8a40 	vmov.f32	s16, s0
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 80103b8:	9101      	str	r1, [sp, #4]
 80103ba:	f004 f8af 	bl	801451c <mpool_alloc>
    if (delay > maxDelay)   d->delay = maxDelay;
 80103be:	ee07 5a90 	vmov	s15, r5
 80103c2:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8010434 <tLagrangeDelay_initToPool+0x90>
    d->mempool = m;
 80103c6:	9901      	ldr	r1, [sp, #4]
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 80103c8:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 80103ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tLagrangeDelay* d = *dl = (_tLagrangeDelay*) mpool_alloc(sizeof(_tLagrangeDelay), m);
 80103ce:	6030      	str	r0, [r6, #0]
    if (delay > maxDelay)   d->delay = maxDelay;
 80103d0:	fe88 0a07 	vmaxnm.f32	s0, s16, s14
    d->mempool = m;
 80103d4:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 80103d6:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 80103d8:	fe80 0a67 	vminnm.f32	s0, s0, s15
 80103dc:	ed80 0a08 	vstr	s0, [r0, #32]
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 80103e0:	bb1d      	cbnz	r5, 801042a <tLagrangeDelay_initToPool+0x86>
 80103e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
        maxDelay |= maxDelay >> 1;
 80103e6:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 80103ea:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 80103ee:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 80103f2:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 80103f6:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 80103fa:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 80103fc:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 80103fe:	60a2      	str	r2, [r4, #8]
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8010400:	00a8      	lsls	r0, r5, #2
 8010402:	f004 f88b 	bl	801451c <mpool_alloc>
    d->lastIn = 0.0f;
 8010406:	2200      	movs	r2, #0
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8010408:	4601      	mov	r1, r0
    d->inPoint = 0;
 801040a:	2300      	movs	r3, #0
    tLagrangeDelay_setDelay(dl, d->delay);
 801040c:	ed94 0a08 	vldr	s0, [r4, #32]
 8010410:	4630      	mov	r0, r6
    d->buff = (Lfloat*) mpool_alloc(sizeof(Lfloat) * maxDelay, m);
 8010412:	6061      	str	r1, [r4, #4]
    d->lastIn = 0.0f;
 8010414:	6122      	str	r2, [r4, #16]
    d->lastOut = 0.0f;
 8010416:	60e2      	str	r2, [r4, #12]
    d->outPoint = 0;
 8010418:	e9c4 3305 	strd	r3, r3, [r4, #20]
}
 801041c:	b002      	add	sp, #8
 801041e:	ecbd 8b02 	vpop	{d8}
 8010422:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    tLagrangeDelay_setDelay(dl, d->delay);
 8010426:	f7ff bf5f 	b.w	80102e8 <tLagrangeDelay_setDelay>
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 801042a:	1e6b      	subs	r3, r5, #1
 801042c:	422b      	tst	r3, r5
 801042e:	461a      	mov	r2, r3
 8010430:	d1d9      	bne.n	80103e6 <tLagrangeDelay_initToPool+0x42>
 8010432:	e7e4      	b.n	80103fe <tLagrangeDelay_initToPool+0x5a>
 8010434:	00000000 	.word	0x00000000

08010438 <tLagrangeDelay_tapOut>:

Lfloat tLagrangeDelay_tapOut (tLagrangeDelay* const dl, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 8010438:	6802      	ldr	r2, [r0, #0]

    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 801043a:	6953      	ldr	r3, [r2, #20]
 801043c:	1a5b      	subs	r3, r3, r1

    return d->buff[tap];
 801043e:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    uint32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8010442:	3b01      	subs	r3, #1
 8010444:	4003      	ands	r3, r0
    return d->buff[tap];
 8010446:	eb02 0283 	add.w	r2, r2, r3, lsl #2

}
 801044a:	ed92 0a00 	vldr	s0, [r2]
 801044e:	4770      	bx	lr

08010450 <tLagrangeDelay_tapOutInterpolated>:

Lfloat   tLagrangeDelay_tapOutInterpolated (tLagrangeDelay* const dl, uint32_t tapDelay, Lfloat alpha)
{
 8010450:	b410      	push	{r4}
	_tLagrangeDelay* d = *dl;

    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010452:	f06f 0301 	mvn.w	r3, #1
	_tLagrangeDelay* d = *dl;
 8010456:	6802      	ldr	r2, [r0, #0]

    alpha = 1.0f - alpha;
 8010458:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    Lfloat pdp1d = dp1*alpha;
    Lfloat pddm1 = alpha*dm1;
    Lfloat pdm1dm2 = dm1*dm2;

    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 801045c:	eddf 4a27 	vldr	s9, [pc, #156]	; 80104fc <tLagrangeDelay_tapOutInterpolated+0xac>
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010460:	1a59      	subs	r1, r3, r1
 8010462:	6953      	ldr	r3, [r2, #20]
 8010464:	6894      	ldr	r4, [r2, #8]
    Lfloat dp1 = alpha+1.0f;
 8010466:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 801046a:	4419      	add	r1, r3
    alpha = 1.0f - alpha;
 801046c:	ee77 5ac0 	vsub.f32	s11, s15, s0
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
    Lfloat h2 = -0.5f * (pdp1d * dm2);
    Lfloat h3 = 0.166666666666667f * (pdp1d * dm1);
    
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010470:	69d3      	ldr	r3, [r2, #28]
    Lfloat dm2 = alpha-2.0f;
 8010472:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    uint32_t idx = ((d->inPoint - tapDelay - 2)) & d->bufferMask;
 8010476:	4021      	ands	r1, r4
    Lfloat dp1 = alpha+1.0f;
 8010478:	ee35 5a40 	vsub.f32	s10, s10, s0
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 801047c:	3b01      	subs	r3, #1
 801047e:	6852      	ldr	r2, [r2, #4]
    		(d->buff[idx] * h1) +
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010480:	1c88      	adds	r0, r1, #2
    Lfloat dm2 = alpha-2.0f;
 8010482:	ee37 7a40 	vsub.f32	s14, s14, s0
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 8010486:	ee30 6a67 	vsub.f32	s12, s0, s15
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 801048a:	440b      	add	r3, r1
    Lfloat pdp1d = dp1*alpha;
 801048c:	ee65 5a85 	vmul.f32	s11, s11, s10
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010490:	4020      	ands	r0, r4
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 8010492:	4023      	ands	r3, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 8010494:	ee70 7a27 	vadd.f32	s15, s0, s15
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 8010498:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 801049c:	ee26 6a07 	vmul.f32	s12, s12, s14
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 80104a0:	ee65 6aa4 	vmul.f32	s13, s11, s9
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 80104a4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 80104a8:	ed90 4a00 	vldr	s8, [r0]
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 80104ac:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat h0 = -0.166666666666667f * (pddm1 * dm2);
 80104b0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80104b4:	edd3 3a00 	vldr	s7, [r3]
			(d->buff[(idx + 2) & d->bufferMask] * h3);
 80104b8:	ee66 6a84 	vmul.f32	s13, s13, s8
    		(d->buff[idx] * h1) +
 80104bc:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 80104c0:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80104c4:	3101      	adds	r1, #1
 80104c6:	ed93 5a00 	vldr	s10, [r3]
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 80104ca:	eefe 4a00 	vmov.f32	s9, #224	; 0xbf000000 -0.5
 80104ce:	eee3 6a86 	vfma.f32	s13, s7, s12
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80104d2:	4021      	ands	r1, r4
    Lfloat h1 = 0.5f * (dp1 * pdm1dm2);
 80104d4:	ee67 7a84 	vmul.f32	s15, s15, s8

}
 80104d8:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 80104dc:	ee27 7a24 	vmul.f32	s14, s14, s9
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80104e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    Lfloat h2 = -0.5f * (pdp1d * dm2);
 80104e4:	ee27 7a25 	vmul.f32	s14, s14, s11
    return    (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask] * h0) +
 80104e8:	eee5 6a27 	vfma.f32	s13, s10, s15
			(d->buff[(idx + 1) & d->bufferMask] * h2) +
 80104ec:	edd2 7a00 	vldr	s15, [r2]
 80104f0:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 80104f4:	eea7 0a87 	vfma.f32	s0, s15, s14
 80104f8:	4770      	bx	lr
 80104fa:	bf00      	nop
 80104fc:	be2aaaab 	.word	0xbe2aaaab

08010500 <tLagrangeDelay_tapIn>:

void tLagrangeDelay_tapIn (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 8010500:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 8010502:	6953      	ldr	r3, [r2, #20]
 8010504:	1a5b      	subs	r3, r3, r1

    d->buff[tap] = value;
 8010506:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 801050a:	3b01      	subs	r3, #1
 801050c:	4003      	ands	r3, r0
    d->buff[tap] = value;
 801050e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010512:	ed82 0a00 	vstr	s0, [r2]
}
 8010516:	4770      	bx	lr

08010518 <tLagrangeDelay_addTo>:

Lfloat tLagrangeDelay_addTo (tLagrangeDelay* const dl, Lfloat value, uint32_t tapDelay)
{
	_tLagrangeDelay* d = *dl;
 8010518:	6802      	ldr	r2, [r0, #0]

    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 801051a:	6953      	ldr	r3, [r2, #20]
 801051c:	1a5b      	subs	r3, r3, r1

    return (d->buff[tap] += value);
 801051e:	e9d2 2001 	ldrd	r2, r0, [r2, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 8010522:	3b01      	subs	r3, #1
 8010524:	4003      	ands	r3, r0
    return (d->buff[tap] += value);
 8010526:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801052a:	edd3 7a00 	vldr	s15, [r3]
 801052e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010532:	ed83 0a00 	vstr	s0, [r3]
}
 8010536:	4770      	bx	lr

08010538 <tLagrangeDelay_getMaxDelay>:


Lfloat   tLagrangeDelay_getMaxDelay (tLagrangeDelay* const dl)
{
	_tLagrangeDelay* d = *dl;
    return d->maxDelay;
 8010538:	6803      	ldr	r3, [r0, #0]
 801053a:	ed93 0a07 	vldr	s0, [r3, #28]
}
 801053e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8010542:	4770      	bx	lr

08010544 <tTapeDelay_tick>:
}

//#define SMOOTH_FACTOR 10.f

Lfloat   tTapeDelay_tick (tTapeDelay* const dl, Lfloat input)
{
 8010544:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 8010546:	6804      	ldr	r4, [r0, #0]

    d->buff[d->inPoint] = input * d->gain;
 8010548:	edd4 7a01 	vldr	s15, [r4, #4]
 801054c:	6962      	ldr	r2, [r4, #20]
 801054e:	68a3      	ldr	r3, [r4, #8]
 8010550:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010554:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8010558:	ed83 0a00 	vstr	s0, [r3]

    // Increment input pointer modulo length.
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;

    int idx =  (int) d->idx;
 801055c:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    Lfloat alpha = d->idx - idx;

    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010560:	68a1      	ldr	r1, [r4, #8]
    int idx =  (int) d->idx;
 8010562:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8010566:	e9d4 0305 	ldrd	r0, r3, [r4, #20]
    int idx =  (int) d->idx;
 801056a:	ee17 2a10 	vmov	r2, s14
    Lfloat alpha = d->idx - idx;
 801056e:	eeb8 2ac7 	vcvt.f32.s32	s4, s14
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8010572:	3001      	adds	r0, #1
                                              d->buff[idx],
                                              d->buff[(idx + 1) % d->maxDelay],
                                              d->buff[(idx + 2) % d->maxDelay],
 8010574:	f102 0e02 	add.w	lr, r2, #2
                                              d->buff[(idx + 1) % d->maxDelay],
 8010578:	f102 0c01 	add.w	ip, r2, #1
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 801057c:	4298      	cmp	r0, r3
 801057e:	bf08      	it	eq
 8010580:	2000      	moveq	r0, #0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 8010582:	ee37 2ac2 	vsub.f32	s4, s15, s4
 8010586:	6160      	str	r0, [r4, #20]
 8010588:	1e58      	subs	r0, r3, #1
 801058a:	4410      	add	r0, r2
 801058c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8010590:	edd2 0a00 	vldr	s1, [r2]
                                              d->buff[(idx + 2) % d->maxDelay],
 8010594:	fbbe f2f3 	udiv	r2, lr, r3
 8010598:	fb03 ee12 	mls	lr, r3, r2, lr
                                              d->buff[(idx + 1) % d->maxDelay],
 801059c:	fbbc f2f3 	udiv	r2, ip, r3
 80105a0:	fb03 cc12 	mls	ip, r3, r2, ip
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 80105a4:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80105a8:	fbb0 f2f3 	udiv	r2, r0, r3
 80105ac:	fb03 0012 	mls	r0, r3, r2, r0
 80105b0:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80105b4:	edde 1a00 	vldr	s3, [lr]
 80105b8:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 80105bc:	ed9c 1a00 	vldr	s2, [ip]
 80105c0:	ed91 0a00 	vldr	s0, [r1]
 80105c4:	f003 fea6 	bl	8014314 <LEAF_interpolate_hermite_x>
                                              alpha);

    Lfloat diff = (d->inPoint - d->idx);
 80105c8:	edd4 7a05 	vldr	s15, [r4, #20]
 80105cc:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
 80105d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    while (diff < 0.f) diff += d->maxDelay;
 80105d4:	edd4 6a06 	vldr	s13, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) % d->maxDelay],
 80105d8:	ed84 0a03 	vstr	s0, [r4, #12]
    while (diff < 0.f) diff += d->maxDelay;
 80105dc:	eef8 6a66 	vcvt.f32.u32	s13, s13
    Lfloat diff = (d->inPoint - d->idx);
 80105e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (diff < 0.f) diff += d->maxDelay;
 80105e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105ec:	d506      	bpl.n	80105fc <tTapeDelay_tick+0xb8>
 80105ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80105f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80105f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80105fa:	d4f8      	bmi.n	80105ee <tTapeDelay_tick+0xaa>

    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 80105fc:	edd4 5a07 	vldr	s11, [r4, #28]
 8010600:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8010604:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8010608:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 801060c:	ee36 6a05 	vadd.f32	s12, s12, s10

    d->idx += d->inc;
 8010610:	ee77 7a06 	vadd.f32	s15, s14, s12
    d->inc = 1.0f + (diff - d->delay) / d->delay; //* SMOOTH_FACTOR;
 8010614:	ed84 6a08 	vstr	s12, [r4, #32]

    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8010618:	eef4 7ae6 	vcmpe.f32	s15, s13
    d->idx += d->inc;
 801061c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    while (d->idx >= d->maxDelay) d->idx -= d->maxDelay;
 8010620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010624:	db08      	blt.n	8010638 <tTapeDelay_tick+0xf4>
 8010626:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801062a:	eef4 7ae6 	vcmpe.f32	s15, s13
 801062e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010632:	daf8      	bge.n	8010626 <tTapeDelay_tick+0xe2>
 8010634:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24

    if (d->lastOut)
        return d->lastOut;
    return 0.0f;
}
 8010638:	bd10      	pop	{r4, pc}
 801063a:	bf00      	nop

0801063c <tTapeDelay_setDelay>:
    _tTapeDelay* d = *dl;
    d->inc = rate;
}

void     tTapeDelay_setDelay (tTapeDelay* const dl, Lfloat delay)
{
 801063c:	b510      	push	{r4, lr}
    _tTapeDelay* d = *dl;
 801063e:	6804      	ldr	r4, [r0, #0]
{
 8010640:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(1.f, delay,  d->maxDelay);
 8010644:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8010648:	edd4 7a06 	vldr	s15, [r4, #24]
 801064c:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 8010650:	f003 fc62 	bl	8013f18 <LEAF_clip>
 8010654:	ed84 0a07 	vstr	s0, [r4, #28]
}
 8010658:	bd10      	pop	{r4, pc}
 801065a:	bf00      	nop

0801065c <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 801065c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 801065e:	698f      	ldr	r7, [r1, #24]
{
 8010660:	4606      	mov	r6, r0
 8010662:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8010664:	2020      	movs	r0, #32
 8010666:	4639      	mov	r1, r7
 8010668:	f003 ff58 	bl	801451c <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 801066c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8010670:	4a10      	ldr	r2, [pc, #64]	; (80106b4 <tCrusher_init+0x58>)
    c->op = 4;
 8010672:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8010674:	6030      	str	r0, [r6, #0]
 8010676:	4604      	mov	r4, r0
    c->op = 4;
 8010678:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 801067a:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 801067c:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 801067e:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8010680:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8010682:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8010684:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8010686:	4629      	mov	r1, r5
 8010688:	f003 ff48 	bl	801451c <mpool_alloc>
    s->invRatio = 1.0f;
 801068c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8010690:	2200      	movs	r2, #0
    s->count = 0;
 8010692:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8010694:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8010696:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80106b8 <tCrusher_init+0x5c>
    s->mempool = m;
 801069a:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 801069c:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 801069e:	6082      	str	r2, [r0, #8]
    s->count = 0;
 80106a0:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 80106a2:	eddf 7a06 	vldr	s15, [pc, #24]	; 80106bc <tCrusher_init+0x60>
 80106a6:	edd4 6a03 	vldr	s13, [r4, #12]
 80106aa:	eee6 7a87 	vfma.f32	s15, s13, s14
 80106ae:	edc4 7a06 	vstr	s15, [r4, #24]
}
 80106b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106b4:	3951b717 	.word	0x3951b717
 80106b8:	3912ccf6 	.word	0x3912ccf6
 80106bc:	3e99999a 	.word	0x3e99999a

080106c0 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    Lfloat sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 80106c0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801073c <tCrusher_tick+0x7c>
 80106c4:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80106c8:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 80106ca:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 80106ce:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 80106d0:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 80106d4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80106d8:	6960      	ldr	r0, [r4, #20]
 80106da:	05c0      	lsls	r0, r0, #23
 80106dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 80106e0:	f003 fc14 	bl	8013f0c <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 80106e4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 80106e8:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 80106ec:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80106f0:	f003 fc12 	bl	8013f18 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 80106f4:	edd4 0a04 	vldr	s1, [r4, #16]
 80106f8:	f003 fbf6 	bl	8013ee8 <LEAF_round>
    _tSampleReducer* s = *sr;
 80106fc:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 80106fe:	68da      	ldr	r2, [r3, #12]
 8010700:	edd3 7a01 	vldr	s15, [r3, #4]
 8010704:	ee07 2a10 	vmov	s14, r2
 8010708:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801070c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010714:	dc08      	bgt.n	8010728 <tCrusher_tick+0x68>
    s->count++;
 8010716:	3201      	adds	r2, #1
    return s->hold;
 8010718:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 801071c:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 801071e:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 8010722:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010726:	bd10      	pop	{r4, pc}
        s->hold = input;
 8010728:	2201      	movs	r2, #1
 801072a:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 801072e:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 8010730:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8010734:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010738:	bd10      	pop	{r4, pc}
 801073a:	bf00      	nop
 801073c:	459c4000 	.word	0x459c4000

08010740 <tCrusher_setOperation>:

void    tCrusher_setOperation (tCrusher* const cr, Lfloat op)
{
    _tCrusher* c = *cr;
    c->op = (uint32_t) (op * 8.0f);
 8010740:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    _tCrusher* c = *cr;
 8010744:	6803      	ldr	r3, [r0, #0]
    c->op = (uint32_t) (op * 8.0f);
 8010746:	ee20 0a27 	vmul.f32	s0, s0, s15
 801074a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801074e:	ed83 0a05 	vstr	s0, [r3, #20]
}
 8010752:	4770      	bx	lr

08010754 <tCrusher_setQuality>:

// 0.0 - 1.0
void    tCrusher_setQuality (tCrusher* const cr, Lfloat val)
{
 8010754:	eef0 0a40 	vmov.f32	s1, s0
    _tCrusher* c = *cr;
    
    val = LEAF_clip(0.0f, val, 1.0f);
 8010758:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801078c <tCrusher_setQuality+0x38>
 801075c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8010760:	b510      	push	{r4, lr}
    _tCrusher* c = *cr;
 8010762:	6804      	ldr	r4, [r0, #0]
    val = LEAF_clip(0.0f, val, 1.0f);
 8010764:	f003 fbd8 	bl	8013f18 <LEAF_clip>
    
    c->div = 0.01f + val * SCALAR;
 8010768:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8010790 <tCrusher_setQuality+0x3c>
 801076c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8010794 <tCrusher_setQuality+0x40>
    
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010770:	eddf 6a09 	vldr	s13, [pc, #36]	; 8010798 <tCrusher_setQuality+0x44>
    c->div = 0.01f + val * SCALAR;
 8010774:	eee0 7a06 	vfma.f32	s15, s0, s12
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010778:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801079c <tCrusher_setQuality+0x48>
 801077c:	eea7 7aa6 	vfma.f32	s14, s15, s13
    c->div = 0.01f + val * SCALAR;
 8010780:	edc4 7a03 	vstr	s15, [r4, #12]
    c->gain = (c->div * INV_SCALAR) * 0.7f + 0.3f;
 8010784:	ed84 7a06 	vstr	s14, [r4, #24]
}
 8010788:	bd10      	pop	{r4, pc}
 801078a:	bf00      	nop
 801078c:	00000000 	.word	0x00000000
 8010790:	459c4000 	.word	0x459c4000
 8010794:	3c23d70a 	.word	0x3c23d70a
 8010798:	3912ccf6 	.word	0x3912ccf6
 801079c:	3e99999a 	.word	0x3e99999a

080107a0 <tCrusher_setRound>:

// what decimal to round to
void    tCrusher_setRound (tCrusher* const cr, Lfloat rnd)
{
    _tCrusher* c = *cr;
 80107a0:	6803      	ldr	r3, [r0, #0]
    c->rnd = rnd;
 80107a2:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80107a6:	4770      	bx	lr

080107a8 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80107a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

void    tCrusher_setSamplingRatio (tCrusher* const cr, Lfloat ratio)
{
    _tCrusher* c = *cr;
 80107ac:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 80107ae:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 80107b2:	eeb4 0a67 	vcmp.f32	s0, s15
 80107b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107ba:	d809      	bhi.n	80107d0 <tCrusher_setSamplingRatio+0x28>
 80107bc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80107c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80107c4:	db04      	blt.n	80107d0 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 80107c6:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 80107ca:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 80107cc:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 80107d0:	4770      	bx	lr
 80107d2:	bf00      	nop

080107d4 <tCompressor_init>:
 
 return c;
 }
 */
void tCompressor_init (tCompressor* const comp, LEAF* const leaf)
{
 80107d4:	b570      	push	{r4, r5, r6, lr}
 80107d6:	ed2d 8b02 	vpush	{d8}
    tCompressor_initToPool(comp, &leaf->mempool);
}

void tCompressor_initToPool (tCompressor* const comp, tMempool* const mp)
{
    _tMempool* m = *mp;
 80107da:	698d      	ldr	r5, [r1, #24]
{
 80107dc:	4606      	mov	r6, r0
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 80107de:	206c      	movs	r0, #108	; 0x6c
 80107e0:	4629      	mov	r1, r5
 80107e2:	f003 fe9b 	bl	801451c <mpool_alloc>
 80107e6:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80107e8:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    c->sampleRate = leaf->sampleRate;
    
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80107ea:	eebb 0a04 	vmov.f32	s0, #180	; 0xc1a00000 -20.0
    c->sampleRate = leaf->sampleRate;
 80107ee:	686b      	ldr	r3, [r5, #4]
    _tCompressor* c = *comp = (_tCompressor*) mpool_alloc(sizeof(_tCompressor), m);
 80107f0:	4604      	mov	r4, r0
    c->sampleRate = leaf->sampleRate;
 80107f2:	ed93 8a00 	vldr	s16, [r3]
 80107f6:	ed80 8a12 	vstr	s16, [r0, #72]	; 0x48
    c->tauAttack = expf(-1.0f/(0.001f * 50.0f * c->sampleRate));
 80107fa:	ee80 0a08 	vdiv.f32	s0, s0, s16
 80107fe:	f008 f951 	bl	8018aa4 <expf>
 8010802:	ed84 0a01 	vstr	s0, [r4, #4]
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 8010806:	eefa 7a04 	vmov.f32	s15, #164	; 0xc1200000 -10.0
 801080a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 801080e:	f008 f949 	bl	8018aa4 <expf>
    c->x_T[0] = 0.0f;
    c->x_T[1] = 0.0f;
    c->y_T[0] = 0.0f;
    c->y_T[1] = 0.0f;
    c->T = 0.0f; // Threshold
    c->R = 0.5f; // compression Ratio
 8010812:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->x_G[0] = 0.0f;
 8010816:	2300      	movs	r3, #0
    c->invR = 2.0f; //inverse of ratio
 8010818:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c->R = 0.5f; // compression Ratio
 801081c:	6122      	str	r2, [r4, #16]
    c->isActive = 0;
 801081e:	2200      	movs	r2, #0
    c->x_G[0] = 0.0f;
 8010820:	6263      	str	r3, [r4, #36]	; 0x24
    c->isActive = 0;
 8010822:	6462      	str	r2, [r4, #68]	; 0x44
    c->M = 3.0f; // decibel Make-up gain
    c->W = 1.5f; // decibel Width of knee transition
 8010824:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
    c->x_G[1] = 0.0f;
 8010828:	62a3      	str	r3, [r4, #40]	; 0x28
    c->y_G[0] = 0.0f;
 801082a:	62e3      	str	r3, [r4, #44]	; 0x2c
    c->y_G[1] = 0.0f;
 801082c:	6323      	str	r3, [r4, #48]	; 0x30
    c->x_T[0] = 0.0f;
 801082e:	6363      	str	r3, [r4, #52]	; 0x34
    c->x_T[1] = 0.0f;
 8010830:	63a3      	str	r3, [r4, #56]	; 0x38
    c->y_T[0] = 0.0f;
 8010832:	63e3      	str	r3, [r4, #60]	; 0x3c
    c->y_T[1] = 0.0f;
 8010834:	6423      	str	r3, [r4, #64]	; 0x40
    c->T = 0.0f; // Threshold
 8010836:	60e3      	str	r3, [r4, #12]
    c->M = 3.0f; // decibel Make-up gain
 8010838:	4905      	ldr	r1, [pc, #20]	; (8010850 <tCompressor_init+0x7c>)
    c->inv4W = 1.0f / (4.0f * c->W) ;
 801083a:	4b06      	ldr	r3, [pc, #24]	; (8010854 <tCompressor_init+0x80>)
    c->tauRelease = expf(-1.0f/(0.001f * 100.0f * c->sampleRate));
 801083c:	ed84 0a02 	vstr	s0, [r4, #8]
    c->invR = 2.0f; //inverse of ratio
 8010840:	61e0      	str	r0, [r4, #28]
    c->M = 3.0f; // decibel Make-up gain
 8010842:	61a1      	str	r1, [r4, #24]
    c->W = 1.5f; // decibel Width of knee transition
 8010844:	6162      	str	r2, [r4, #20]
    c->inv4W = 1.0f / (4.0f * c->W) ;
 8010846:	6223      	str	r3, [r4, #32]
}
 8010848:	ecbd 8b02 	vpop	{d8}
 801084c:	bd70      	pop	{r4, r5, r6, pc}
 801084e:	bf00      	nop
 8010850:	40400000 	.word	0x40400000
 8010854:	3e2aaaab 	.word	0x3e2aaaab

08010858 <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

Lfloat tCompressor_tick(tCompressor* const comp, Lfloat in)
{
 8010858:	b510      	push	{r4, lr}
 801085a:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 801085e:	6804      	ldr	r4, [r0, #0]
{
 8010860:	eeb0 8a40 	vmov.f32	s16, s0
    
    Lfloat slope, overshoot;
    
    Lfloat in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8010864:	f003 fa3e 	bl	8013ce4 <fastabsf>
 8010868:	f003 fdee 	bl	8014448 <fasteratodb>
 801086c:	ed9f 1a2b 	vldr	s2, [pc, #172]	; 801091c <tCompressor_tick+0xc4>
 8010870:	eef0 0a40 	vmov.f32	s1, s0
 8010874:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8010920 <tCompressor_tick+0xc8>
 8010878:	f003 fb4e 	bl	8013f18 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 801087c:	edd4 7a03 	vldr	s15, [r4, #12]
    

    if (overshoot <= -(c->W))
 8010880:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8010884:	ee70 7a67 	vsub.f32	s15, s0, s15
    c->y_T[1] = c->y_T[0];
 8010888:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 801088c:	eeb1 7a46 	vneg.f32	s14, s12
    c->y_T[1] = c->y_T[0];
 8010890:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8010894:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089c:	da16      	bge.n	80108cc <tCompressor_tick+0x74>
    {
        out_db = in_db;
        c->isActive = 0;
    }
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 801089e:	eeb4 6ae7 	vcmpe.f32	s12, s15
    slope = 1.0f - c->invR; // feed-forward topology;
 80108a2:	edd4 5a07 	vldr	s11, [r4, #28]
 80108a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 80108aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 80108ae:	ee37 7a65 	vsub.f32	s14, s14, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 80108b2:	dd2f      	ble.n	8010914 <tCompressor_tick+0xbc>
    {
        Lfloat squareit = (overshoot + c->W);
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80108b4:	edd4 5a08 	vldr	s11, [r4, #32]
        Lfloat squareit = (overshoot + c->W);
 80108b8:	ee36 6a27 	vadd.f32	s12, s12, s15
    {
 80108bc:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 80108be:	ee27 7a25 	vmul.f32	s14, s14, s11
 80108c2:	ee27 7a06 	vmul.f32	s14, s14, s12
 80108c6:	ee27 7a06 	vmul.f32	s14, s14, s12
    {
 80108ca:	e002      	b.n	80108d2 <tCompressor_tick+0x7a>
 80108cc:	2300      	movs	r3, #0
 80108ce:	ed9f 7a13 	vldr	s14, [pc, #76]	; 801091c <tCompressor_tick+0xc4>
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 80108d2:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80108d6:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80108da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        c->isActive = 0;
 80108de:	6463      	str	r3, [r4, #68]	; 0x44
    c->x_T[0] = out_db - in_db;
 80108e0:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 80108e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 80108e8:	bf4c      	ite	mi
 80108ea:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 80108ee:	ed94 6a02 	vldrpl	s12, [r4, #8]
 80108f2:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80108f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80108fa:	eee6 7a86 	vfma.f32	s15, s13, s12
    Lfloat attenuation = fasterdbtoa(c->M - c->y_T[0]);
 80108fe:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010902:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8010906:	f003 fdcd 	bl	80144a4 <fasterdbtoa>
    return attenuation * in;
}
 801090a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801090e:	ecbd 8b02 	vpop	{d8}
 8010912:	bd10      	pop	{r4, pc}
        out_db = in_db + slope * overshoot;
 8010914:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010918:	2301      	movs	r3, #1
 801091a:	e7da      	b.n	80108d2 <tCompressor_tick+0x7a>
 801091c:	00000000 	.word	0x00000000
 8010920:	c2b40000 	.word	0xc2b40000

08010924 <tCompressor_setTables>:
{
    _tCompressor* c = *comp;
	c->atodbTable = atodb;
	c->dbtoaTable = dbtoa;

	c->atodbTableSizeMinus1 = atodbTableSize-1;
 8010924:	3b01      	subs	r3, #1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;

	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010926:	ee70 0ac0 	vsub.f32	s1, s1, s0
    _tCompressor* c = *comp;
 801092a:	6800      	ldr	r0, [r0, #0]
	c->atodbOffset = atodbMinIn * c->atodbScalar;


	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 801092c:	ee71 1ac1 	vsub.f32	s3, s3, s2
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010930:	ee07 3a90 	vmov	s15, r3
	c->atodbTableSizeMinus1 = atodbTableSize-1;
 8010934:	6643      	str	r3, [r0, #100]	; 0x64
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
{
 801093a:	9b00      	ldr	r3, [sp, #0]
	c->atodbTable = atodb;
 801093c:	64c1      	str	r1, [r0, #76]	; 0x4c
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 801093e:	3b01      	subs	r3, #1
	c->dbtoaTable = dbtoa;
 8010940:	6502      	str	r2, [r0, #80]	; 0x50
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 8010942:	eec7 7a20 	vdiv.f32	s15, s14, s1
	c->dbtoaTableSizeMinus1 = dbtoaTableSize-1;
 8010946:	6683      	str	r3, [r0, #104]	; 0x68
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010948:	ee27 0a80 	vmul.f32	s0, s15, s0
	c->atodbScalar = c->atodbTableSizeMinus1/(atodbMaxIn-atodbMinIn);
 801094c:	edc0 7a15 	vstr	s15, [r0, #84]	; 0x54
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010950:	ee07 3a90 	vmov	s15, r3
 8010954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	c->atodbOffset = atodbMinIn * c->atodbScalar;
 8010958:	ed80 0a17 	vstr	s0, [r0, #92]	; 0x5c
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 801095c:	eec7 7a21 	vdiv.f32	s15, s14, s3
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010960:	ee27 1a81 	vmul.f32	s2, s15, s2
	c->dbtoaScalar = c->dbtoaTableSizeMinus1/(dbtoaMaxIn-dbtoaMinIn);
 8010964:	edc0 7a16 	vstr	s15, [r0, #88]	; 0x58
	c->dbtoaOffset = dbtoaMinIn * c->dbtoaScalar;
 8010968:	ed80 1a18 	vstr	s2, [r0, #96]	; 0x60

}
 801096c:	4770      	bx	lr
 801096e:	bf00      	nop

08010970 <tCompressor_setSampleRate>:
    c->tauRelease = fasterexpf(-1.0f/(0.001f * release * c->sampleRate));
}

void tCompressor_setSampleRate(tCompressor* const comp, Lfloat sampleRate)
{
    _tCompressor* c = *comp;
 8010970:	6803      	ldr	r3, [r0, #0]
    c->sampleRate = sampleRate;
 8010972:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
}
 8010976:	4770      	bx	lr

08010978 <tFeedbackLeveler_init>:
/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, LEAF* const leaf)
{
 8010978:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, Lfloat targetLevel, Lfloat factor, Lfloat strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 801097a:	4614      	mov	r4, r2
{
 801097c:	4606      	mov	r6, r0
 801097e:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010980:	2018      	movs	r0, #24
{
 8010982:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8010986:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 801098a:	b083      	sub	sp, #12
 801098c:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8010990:	4639      	mov	r1, r7
{
 8010992:	eeb0 8a41 	vmov.f32	s16, s2
 8010996:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 801099a:	f003 fdbf 	bl	801451c <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 801099e:	4621      	mov	r1, r4
    p->curr=0.0f;
 80109a0:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80109a2:	4604      	mov	r4, r0
 80109a4:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80109a6:	ed9d 0a01 	vldr	s0, [sp, #4]
 80109aa:	3014      	adds	r0, #20
    p->mempool = m;
 80109ac:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 80109b0:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 80109b4:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80109b6:	f7ff faa9 	bl	800ff0c <tPowerFollower_initToPool>
    p->mode=mode;
 80109ba:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 80109bc:	ed84 8a02 	vstr	s16, [r4, #8]
}
 80109c0:	b003      	add	sp, #12
 80109c2:	ecbd 8b02 	vpop	{d8}
 80109c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080109c8 <tFeedbackLeveler_initToPool>:
{
 80109c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 80109ca:	6817      	ldr	r7, [r2, #0]
{
 80109cc:	4614      	mov	r4, r2
 80109ce:	4606      	mov	r6, r0
 80109d0:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80109d2:	2018      	movs	r0, #24
 80109d4:	4639      	mov	r1, r7
{
 80109d6:	ed2d 8b02 	vpush	{d8}
 80109da:	eef0 8a40 	vmov.f32	s17, s0
 80109de:	b083      	sub	sp, #12
 80109e0:	eeb0 8a41 	vmov.f32	s16, s2
 80109e4:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80109e8:	f003 fd98 	bl	801451c <mpool_alloc>
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80109ec:	4621      	mov	r1, r4
    p->curr=0.0f;
 80109ee:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 80109f0:	4604      	mov	r4, r0
 80109f2:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 80109f4:	ed9d 0a01 	vldr	s0, [sp, #4]
 80109f8:	3014      	adds	r0, #20
    p->mempool = m;
 80109fa:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 80109fe:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8010a02:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8010a04:	f7ff fa82 	bl	800ff0c <tPowerFollower_initToPool>
    p->mode=mode;
 8010a08:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 8010a0a:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8010a0e:	b003      	add	sp, #12
 8010a10:	ecbd 8b02 	vpop	{d8}
 8010a14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a16:	bf00      	nop

08010a18 <tFeedbackLeveler_free>:

void tFeedbackLeveler_free (tFeedbackLeveler* const fb)
{
 8010a18:	b510      	push	{r4, lr}
    _tFeedbackLeveler* p = *fb;
 8010a1a:	6804      	ldr	r4, [r0, #0]
    
    tPowerFollower_free(&p->pwrFlw);
 8010a1c:	f104 0014 	add.w	r0, r4, #20
 8010a20:	f7ff fa8e 	bl	800ff40 <tPowerFollower_free>
    mpool_free((char*)p, p->mempool);
 8010a24:	6821      	ldr	r1, [r4, #0]
 8010a26:	4620      	mov	r0, r4
}
 8010a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8010a2c:	f003 be38 	b.w	80146a0 <mpool_free>

08010a30 <tFeedbackLeveler_setStrength>:

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, Lfloat strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 8010a30:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 8010a32:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8010a36:	4770      	bx	lr

08010a38 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, Lfloat factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 8010a38:	6800      	ldr	r0, [r0, #0]
 8010a3a:	3014      	adds	r0, #20
 8010a3c:	f7ff ba84 	b.w	800ff48 <tPowerFollower_setFactor>

08010a40 <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8010a40:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 8010a42:	60d9      	str	r1, [r3, #12]
}
 8010a44:	4770      	bx	lr
 8010a46:	bf00      	nop

08010a48 <tFeedbackLeveler_tick>:

Lfloat   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, Lfloat input)
{
 8010a48:	b510      	push	{r4, lr}
 8010a4a:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8010a4e:	6804      	ldr	r4, [r0, #0]
{
 8010a50:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8010a54:	f104 0014 	add.w	r0, r4, #20
 8010a58:	f7ff fa88 	bl	800ff6c <tPowerFollower_tick>
 8010a5c:	edd4 7a01 	vldr	s15, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010a60:	68e3      	ldr	r3, [r4, #12]
    Lfloat levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8010a62:	ee30 7a67 	vsub.f32	s14, s0, s15
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8010a66:	b91b      	cbnz	r3, 8010a70 <tFeedbackLeveler_tick+0x28>
 8010a68:	eddf 7a08 	vldr	s15, [pc, #32]	; 8010a8c <tFeedbackLeveler_tick+0x44>
 8010a6c:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8010a70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010a74:	edd4 6a02 	vldr	s13, [r4, #8]
 8010a78:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010a7c:	ee27 0a88 	vmul.f32	s0, s15, s16
 8010a80:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 8010a84:	ecbd 8b02 	vpop	{d8}
 8010a88:	bd10      	pop	{r4, pc}
 8010a8a:	bf00      	nop
 8010a8c:	00000000 	.word	0x00000000

08010a90 <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, Lfloat TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 8010a90:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 8010a92:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8010a96:	4770      	bx	lr

08010a98 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, LEAF* const leaf)
{
 8010a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a9a:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, Lfloat attack, Lfloat decay, Lfloat sustain, Lfloat release, Lfloat* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 8010a9e:	699e      	ldr	r6, [r3, #24]
{
 8010aa0:	4614      	mov	r4, r2
 8010aa2:	4607      	mov	r7, r0
 8010aa4:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010aa6:	206c      	movs	r0, #108	; 0x6c
 8010aa8:	4631      	mov	r1, r6
{
 8010aaa:	eef0 9a40 	vmov.f32	s19, s0
 8010aae:	eeb0 9a60 	vmov.f32	s18, s1
 8010ab2:	eef0 8a61 	vmov.f32	s17, s3
 8010ab6:	eeb0 8a41 	vmov.f32	s16, s2
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010aba:	f003 fd2f 	bl	801451c <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010abe:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8010ac2:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8010ac4:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8010ac6:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010ac8:	eef8 5a67 	vcvt.f32.u32	s11, s15
 8010acc:	eddf 7a22 	vldr	s15, [pc, #136]	; 8010b58 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 8010ad0:	6873      	ldr	r3, [r6, #4]

    adsr->next = 0.0f;

    adsr->whichStage = env_idle;

    adsr->sustain = sustain;
 8010ad2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8010ad6:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010ad8:	eef4 6a00 	vmov.f32	s13, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010adc:	ee65 5aa7 	vmul.f32	s11, s11, s15
    adsr->exp_buff = expBuffer;
 8010ae0:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 8010ae2:	6084      	str	r4, [r0, #8]
    adsr->sustain = sustain;
 8010ae4:	fe88 8a46 	vminnm.f32	s16, s16, s12
    adsr->sampleRate = leaf->sampleRate;
 8010ae8:	ed93 5a00 	vldr	s10, [r3]
    adsr->whichStage = env_idle;
 8010aec:	2200      	movs	r2, #0
 8010aee:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8010b5c <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010af2:	eec5 7a85 	vdiv.f32	s15, s11, s10
    adsr->sampleRate = leaf->sampleRate;
 8010af6:	ed80 5a04 	vstr	s10, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010afa:	fe89 0a87 	vmaxnm.f32	s0, s19, s14
 8010afe:	fec9 0a07 	vmaxnm.f32	s1, s18, s14
 8010b02:	fec8 1a87 	vmaxnm.f32	s3, s17, s14

    adsr->baseLeakFactor = 1.0f;
 8010b06:	ed80 6a18 	vstr	s12, [r0, #96]	; 0x60
    adsr->leakFactor = 1.0f;
 8010b0a:	ed80 6a19 	vstr	s12, [r0, #100]	; 0x64
    adsr->sustain = sustain;
 8010b0e:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    adsr->next = 0.0f;
 8010b12:	ed80 7a06 	vstr	s14, [r0, #24]
    adsr->whichStage = env_idle;
 8010b16:	63c2      	str	r2, [r0, #60]	; 0x3c
    adsr->attack = attack;
 8010b18:	ed80 0a08 	vstr	s0, [r0, #32]
    adsr->decay = decay;
 8010b1c:	edc0 0a09 	vstr	s1, [r0, #36]	; 0x24
    adsr->sustain = sustain;
 8010b20:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    adsr->release = release;
 8010b24:	edc0 1a0a 	vstr	s3, [r0, #40]	; 0x28
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010b28:	ee87 5a80 	vdiv.f32	s10, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8010b2c:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010b30:	eec7 5aa0 	vdiv.f32	s11, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010b34:	ee87 6aa1 	vdiv.f32	s12, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010b38:	ee27 7aa6 	vmul.f32	s14, s15, s13
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010b3c:	ed80 5a0b 	vstr	s10, [r0, #44]	; 0x2c
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8010b40:	ed80 7a0e 	vstr	s14, [r0, #56]	; 0x38
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010b44:	edc0 5a0c 	vstr	s11, [r0, #48]	; 0x30
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010b48:	ed80 6a0d 	vstr	s12, [r0, #52]	; 0x34
    adsr->invSampleRate = leaf->invSampleRate;
 8010b4c:	685b      	ldr	r3, [r3, #4]
 8010b4e:	6683      	str	r3, [r0, #104]	; 0x68
}
 8010b50:	ecbd 8b04 	vpop	{d8-d9}
 8010b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b56:	bf00      	nop
 8010b58:	4479ffff 	.word	0x4479ffff
 8010b5c:	00000000 	.word	0x00000000

08010b60 <tADSRT_setAttack>:
void     tADSRT_setAttack(tADSRT* const adsrenv, Lfloat attack)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 8010b60:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010b64:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010b66:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 8010b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 8010b6e:	bf48      	it	mi
 8010b70:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010b84 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010b74:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 8010b78:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 8010b7c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8010b80:	4770      	bx	lr
 8010b82:	bf00      	nop
 8010b84:	3c23d70a 	.word	0x3c23d70a

08010b88 <tADSRT_setDecay>:
void     tADSRT_setDecay(tADSRT* const adsrenv, Lfloat decay)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8010b88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010b8c:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010b8e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 8010b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 8010b96:	bf48      	it	mi
 8010b98:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010bac <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010b9c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 8010ba0:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8010ba4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8010ba8:	4770      	bx	lr
 8010baa:	bf00      	nop
 8010bac:	3c23d70a 	.word	0x3c23d70a

08010bb0 <tADSRT_setSustain>:
void     tADSRT_setSustain(tADSRT* const adsrenv, Lfloat sustain)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010bb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010bb4:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8010bc8 <tADSRT_setSustain+0x18>
    _tADSRT* adsr = *adsrenv;
 8010bb8:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8010bba:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
 8010bbe:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8010bc2:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
    else                     adsr->sustain = sustain;
}
 8010bc6:	4770      	bx	lr
 8010bc8:	00000000 	.word	0x00000000

08010bcc <tADSRT_setRelease>:
void     tADSRT_setRelease(tADSRT* const adsrenv, Lfloat release)
#endif
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8010bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8010bd0:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010bd2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 8010bda:	bf48      	it	mi
 8010bdc:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8010bf0 <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010be0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 8010be4:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8010be8:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 8010bec:	4770      	bx	lr
 8010bee:	bf00      	nop
 8010bf0:	3c23d70a 	.word	0x3c23d70a

08010bf4 <tADSRT_setLeakFactor>:
#ifdef ITCMRAM
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#else
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, Lfloat leakFactor)
#endif
{
 8010bf4:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8010bf6:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8010bf8:	eddf 7a06 	vldr	s15, [pc, #24]	; 8010c14 <tADSRT_setLeakFactor+0x20>
 8010bfc:	edd4 0a1a 	vldr	s1, [r4, #104]	; 0x68
    adsr->baseLeakFactor = leakFactor;
 8010c00:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8010c04:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8010c08:	f008 f9c6 	bl	8018f98 <powf>
 8010c0c:	ed84 0a19 	vstr	s0, [r4, #100]	; 0x64
}
 8010c10:	bd10      	pop	{r4, pc}
 8010c12:	bf00      	nop
 8010c14:	472c4400 	.word	0x472c4400

08010c18 <tADSRT_on>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#else
void tADSRT_on(tADSRT* const adsrenv, Lfloat velocity)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010c18:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 8010c1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c1c:	b162      	cbz	r2, 8010c38 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 8010c1e:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 8010c20:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 8010c22:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 8010c24:	65d8      	str	r0, [r3, #92]	; 0x5c
        adsr->rampPeak = adsr->next;
 8010c26:	649a      	str	r2, [r3, #72]	; 0x48
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 8010c28:	2200      	movs	r2, #0
 8010c2a:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 8010c2c:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    adsr->attackPhase = 0;
 8010c30:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->decayPhase = 0;
 8010c32:	655a      	str	r2, [r3, #84]	; 0x54
    adsr->releasePhase = 0;
 8010c34:	659a      	str	r2, [r3, #88]	; 0x58
}
 8010c36:	4770      	bx	lr
        adsr->whichStage = env_attack;
 8010c38:	2101      	movs	r1, #1
 8010c3a:	e7f5      	b.n	8010c28 <tADSRT_on+0x10>

08010c3c <tADSRT_off>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_off(tADSRT* const adsrenv)
#else
    void tADSRT_off(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010c3c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 8010c3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010c40:	b11a      	cbz	r2, 8010c4a <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 8010c42:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 8010c44:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 8010c46:	63d9      	str	r1, [r3, #60]	; 0x3c
        adsr->releasePeak = adsr->next;
 8010c48:	64da      	str	r2, [r3, #76]	; 0x4c
    }
}
 8010c4a:	4770      	bx	lr

08010c4c <tADSRT_clear>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tADSRT_clear(tADSRT* const adsrenv)
#else
	void	tADSRT_clear(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010c4c:	6803      	ldr	r3, [r0, #0]

    adsr->whichStage = env_idle;
 8010c4e:	2100      	movs	r1, #0
    adsr->next = 0.0f;
 8010c50:	2200      	movs	r2, #0
    adsr->whichStage = env_idle;
 8010c52:	63d9      	str	r1, [r3, #60]	; 0x3c
    adsr->next = 0.0f;
 8010c54:	619a      	str	r2, [r3, #24]
}
 8010c56:	4770      	bx	lr

08010c58 <tADSRT_tick>:
#ifdef ITCMRAM
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))   tADSRT_tick(tADSRT* const adsrenv)
#else
		Lfloat  tADSRT_tick(tADSRT* const adsrenv)
#endif
{
 8010c58:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8010c5a:	6804      	ldr	r4, [r0, #0]
{
 8010c5c:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 8010c60:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010c62:	3b01      	subs	r3, #1
 8010c64:	2b04      	cmp	r3, #4
 8010c66:	f200 8154 	bhi.w	8010f12 <tADSRT_tick+0x2ba>
 8010c6a:	e8df f003 	tbb	[pc, r3]
 8010c6e:	4d1f      	.short	0x4d1f
 8010c70:	6f3a      	.short	0x6f3a
 8010c72:	03          	.byte	0x03
 8010c73:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8010c74:	edd4 7a03 	vldr	s15, [r4, #12]
 8010c78:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
 8010c7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010c80:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010c88:	dd7d      	ble.n	8010d86 <tADSRT_tick+0x12e>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 8010c8a:	eddf 7aa3 	vldr	s15, [pc, #652]	; 8010f18 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_attack;
 8010c8e:	2301      	movs	r3, #1
 8010c90:	eeb0 0a67 	vmov.f32	s0, s15
 8010c94:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010c96:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 8010c9a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8010c9e:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010ca2:	edc4 7a17 	vstr	s15, [r4, #92]	; 0x5c
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8010ca6:	ecbd 8b02 	vpop	{d8}
 8010caa:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8010cac:	edd4 7a03 	vldr	s15, [r4, #12]
 8010cb0:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 8010cb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010cb8:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010cc0:	f340 808b 	ble.w	8010dda <tADSRT_tick+0x182>
                adsr->whichStage = env_decay;
 8010cc4:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8010cc6:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->whichStage = env_decay;
 8010cca:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = adsr->gain;
 8010ccc:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 8010cd0:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8010cd4:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010cd8:	edc4 7a14 	vstr	s15, [r4, #80]	; 0x50
}
 8010cdc:	ecbd 8b02 	vpop	{d8}
 8010ce0:	bd10      	pop	{r4, pc}
        	 adsr->next = adsr->sustain * adsr->gain * (adsr->leakFactor * adsr->sustainWithLeak);
 8010ce2:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 8010ce6:	edd4 6a11 	vldr	s13, [r4, #68]	; 0x44
 8010cea:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8010cee:	ee20 0a26 	vmul.f32	s0, s0, s13
 8010cf2:	edd4 7a07 	vldr	s15, [r4, #28]
 8010cf6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8010cfa:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010cfe:	ed84 0a06 	vstr	s0, [r4, #24]
}
 8010d02:	ecbd 8b02 	vpop	{d8}
 8010d06:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8010d08:	edd4 7a03 	vldr	s15, [r4, #12]
 8010d0c:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 8010d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d14:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d1c:	f340 808b 	ble.w	8010e36 <tADSRT_tick+0x1de>
                adsr->next = adsr->gain * adsr->sustain;
 8010d20:	ed94 0a11 	vldr	s0, [r4, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 8010d24:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 8010d28:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8010d2c:	2203      	movs	r2, #3
                adsr->sustainWithLeak = 1.0f;
 8010d2e:	61e3      	str	r3, [r4, #28]
                adsr->next = adsr->gain * adsr->sustain;
 8010d30:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 8010d34:	63e2      	str	r2, [r4, #60]	; 0x3c
                adsr->next = adsr->gain * adsr->sustain;
 8010d36:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 8010d3a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8010d3e:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010d42:	edc4 7a15 	vstr	s15, [r4, #84]	; 0x54
}
 8010d46:	ecbd 8b02 	vpop	{d8}
 8010d4a:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8010d4c:	edd4 7a03 	vldr	s15, [r4, #12]
 8010d50:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 8010d54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010d58:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8010d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010d60:	f340 809e 	ble.w	8010ea0 <tADSRT_tick+0x248>
                adsr->next = 0.0f;
 8010d64:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8010f18 <tADSRT_tick+0x2c0>
                adsr->whichStage = env_idle;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	eeb0 0a67 	vmov.f32	s0, s15
 8010d6e:	63e3      	str	r3, [r4, #60]	; 0x3c
                adsr->next = 0.0f;
 8010d70:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 8010d74:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8010d78:	ee77 7a81 	vadd.f32	s15, s15, s2
 8010d7c:	edc4 7a16 	vstr	s15, [r4, #88]	; 0x58
}
 8010d80:	ecbd 8b02 	vpop	{d8}
 8010d84:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010d86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 8010d8a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010d8e:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 8010d92:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010d96:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->rampPhase - intPart;
 8010d9a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010d9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010da2:	f100 80b2 	bmi.w	8010f0a <tADSRT_tick+0x2b2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010da6:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010daa:	6862      	ldr	r2, [r4, #4]
 8010dac:	ee17 3a90 	vmov	r3, s15
 8010db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010db4:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010db8:	ee16 3a90 	vmov	r3, s13
 8010dbc:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8010dc0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010dc4:	ed92 0a00 	vldr	s0, [r2]
 8010dc8:	f003 fac6 	bl	8014358 <LEAF_interpolation_linear>
 8010dcc:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 8010dd0:	ed94 1a17 	vldr	s2, [r4, #92]	; 0x5c
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart);
 8010dd4:	ed84 0a06 	vstr	s0, [r4, #24]
 8010dd8:	e75f      	b.n	8010c9a <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010dda:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 8010dde:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010de2:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 8010de6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010dea:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->attackPhase - intPart;
 8010dee:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010df6:	f100 8084 	bmi.w	8010f02 <tADSRT_tick+0x2aa>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8010dfa:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010dfe:	6862      	ldr	r2, [r4, #4]
 8010e00:	ee17 3a90 	vmov	r3, s15
 8010e04:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e08:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8010e0c:	ee16 3a90 	vmov	r3, s13
 8010e10:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 8010e14:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010e18:	ed92 0a00 	vldr	s0, [r2]
 8010e1c:	f003 fa9c 	bl	8014358 <LEAF_interpolation_linear>
 8010e20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 8010e24:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8010e28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010e2c:	ee20 0a08 	vmul.f32	s0, s0, s16
 8010e30:	ed84 0a06 	vstr	s0, [r4, #24]
 8010e34:	e74c      	b.n	8010cd0 <tADSRT_tick+0x78>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010e36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 8010e3a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010e3e:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010e42:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010e46:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->decayPhase - intPart;
 8010e4a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 8010e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010e52:	d452      	bmi.n	8010efa <tADSRT_tick+0x2a2>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 8010e54:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010e58:	6862      	ldr	r2, [r4, #4]
 8010e5a:	ee17 3a90 	vmov	r3, s15
 8010e5e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010e62:	edd3 0a00 	vldr	s1, [r3]
                Lfloat interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart));
 8010e66:	ee16 3a90 	vmov	r3, s13
 8010e6a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010e6e:	ed92 0a00 	vldr	s0, [r2]
 8010e72:	f003 fa71 	bl	8014358 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010e76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010e7a:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 8010e7e:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
 8010e82:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8010e86:	ed94 6a19 	vldr	s12, [r4, #100]	; 0x64
            adsr->decayPhase += adsr->decayInc;
 8010e8a:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 8010e8e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010e92:	eea6 7a80 	vfma.f32	s14, s13, s0
 8010e96:	ee27 0a87 	vmul.f32	s0, s15, s14
 8010e9a:	ed84 0a06 	vstr	s0, [r4, #24]
 8010e9e:	e74c      	b.n	8010d3a <tADSRT_tick+0xe2>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010ea0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 8010ea4:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010ea8:	ee31 7a07 	vadd.f32	s14, s2, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 8010eac:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010eb0:	eef4 7ac7 	vcmpe.f32	s15, s14
                Lfloat LfloatPart = adsr->releasePhase - intPart;
 8010eb4:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8010eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ebc:	d419      	bmi.n	8010ef2 <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8010ebe:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8010ec2:	6862      	ldr	r2, [r4, #4]
 8010ec4:	ee17 3a90 	vmov	r3, s15
 8010ec8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8010ecc:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 8010ed0:	ee16 3a90 	vmov	r3, s13
 8010ed4:	ed94 8a13 	vldr	s16, [r4, #76]	; 0x4c
 8010ed8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010edc:	ed92 0a00 	vldr	s0, [r2]
 8010ee0:	f003 fa3a 	bl	8014358 <LEAF_interpolation_linear>
 8010ee4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 8010ee8:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, LfloatPart)); // do interpolation !
 8010eec:	ed84 0a06 	vstr	s0, [r4, #24]
 8010ef0:	e740      	b.n	8010d74 <tADSRT_tick+0x11c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010ef2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010ef4:	eddf 0a08 	vldr	s1, [pc, #32]	; 8010f18 <tADSRT_tick+0x2c0>
 8010ef8:	e7ea      	b.n	8010ed0 <tADSRT_tick+0x278>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010efa:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010efc:	eddf 0a06 	vldr	s1, [pc, #24]	; 8010f18 <tADSRT_tick+0x2c0>
 8010f00:	e7b1      	b.n	8010e66 <tADSRT_tick+0x20e>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010f02:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010f04:	eddf 0a04 	vldr	s1, [pc, #16]	; 8010f18 <tADSRT_tick+0x2c0>
 8010f08:	e780      	b.n	8010e0c <tADSRT_tick+0x1b4>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8010f0a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8010f0c:	eddf 0a02 	vldr	s1, [pc, #8]	; 8010f18 <tADSRT_tick+0x2c0>
 8010f10:	e752      	b.n	8010db8 <tADSRT_tick+0x160>
    return adsr->next;
 8010f12:	ed94 0a06 	vldr	s0, [r4, #24]
 8010f16:	e6c6      	b.n	8010ca6 <tADSRT_tick+0x4e>
 8010f18:	00000000 	.word	0x00000000

08010f1c <tADSRT_tickNoInterp>:
    Lfloat  __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tADSRT_tickNoInterp(tADSRT* const adsrenv)
#else
Lfloat   tADSRT_tickNoInterp(tADSRT* const adsrenv)
#endif
{
    _tADSRT* adsr = *adsrenv;
 8010f1c:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 8010f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010f20:	3a01      	subs	r2, #1
 8010f22:	2a04      	cmp	r2, #4
 8010f24:	f200 80c7 	bhi.w	80110b6 <tADSRT_tickNoInterp+0x19a>
 8010f28:	e8df f002 	tbb	[pc, r2]
 8010f2c:	6533461b 	.word	0x6533461b
 8010f30:	03          	.byte	0x03
 8010f31:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 8010f32:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f36:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8010f3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f46:	dd6e      	ble.n	8011026 <tADSRT_tickNoInterp+0x10a>
            {
                adsr->whichStage = env_attack;
 8010f48:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 8010f4a:	ed9f 0a5c 	vldr	s0, [pc, #368]	; 80110bc <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_attack;
 8010f4e:	63da      	str	r2, [r3, #60]	; 0x3c
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 8010f50:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8010f54:	ed83 0a06 	vstr	s0, [r3, #24]
 8010f58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f5c:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
            break;
 8010f60:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 8010f62:	edd3 7a03 	vldr	s15, [r3, #12]
 8010f66:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8010f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010f6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f76:	dd64      	ble.n	8011042 <tADSRT_tickNoInterp+0x126>
            {
                adsr->whichStage = env_decay;
 8010f78:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 8010f7a:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->whichStage = env_decay;
 8010f7e:	63da      	str	r2, [r3, #60]	; 0x3c
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 8010f80:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8010f84:	ed83 0a06 	vstr	s0, [r3, #24]
 8010f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010f8c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 8010f90:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010f92:	edd3 7a07 	vldr	s15, [r3, #28]
 8010f96:	edd3 6a19 	vldr	s13, [r3, #100]	; 0x64
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010f9a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
 8010f9e:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010fa6:	ee20 0a07 	vmul.f32	s0, s0, s14
            adsr->sustainWithLeak *= adsr->leakFactor;
 8010faa:	edc3 7a07 	vstr	s15, [r3, #28]
            adsr->next = adsr->sustain * adsr->gain * adsr->sustainWithLeak;
 8010fae:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010fb2:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 8010fb6:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8010fb8:	edd3 7a03 	vldr	s15, [r3, #12]
 8010fbc:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8010fc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010fc4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8010fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fcc:	dd4b      	ble.n	8011066 <tADSRT_tickNoInterp+0x14a>
                adsr->next = adsr->gain * adsr->sustain;
 8010fce:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
                adsr->sustainWithLeak = 1.0f;
 8010fd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
                adsr->next = adsr->gain * adsr->sustain;
 8010fd6:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8010fda:	2103      	movs	r1, #3
                adsr->sustainWithLeak = 1.0f;
 8010fdc:	61da      	str	r2, [r3, #28]
                adsr->next = adsr->gain * adsr->sustain;
 8010fde:	ee20 0a27 	vmul.f32	s0, s0, s15
                adsr->whichStage = env_sustain;
 8010fe2:	63d9      	str	r1, [r3, #60]	; 0x3c
            adsr->decayPhase += adsr->decayInc;
 8010fe4:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8010fe8:	ed83 0a06 	vstr	s0, [r3, #24]
 8010fec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010ff0:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
 8010ff4:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8010ff6:	edd3 7a03 	vldr	s15, [r3, #12]
 8010ffa:	ed93 7a16 	vldr	s14, [r3, #88]	; 0x58
 8010ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011002:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100a:	dd46      	ble.n	801109a <tADSRT_tickNoInterp+0x17e>
            {
                adsr->whichStage = env_idle;
 801100c:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 801100e:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 80110bc <tADSRT_tickNoInterp+0x1a0>
                adsr->whichStage = env_idle;
 8011012:	63da      	str	r2, [r3, #60]	; 0x3c
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8011014:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8011018:	ed83 0a06 	vstr	s0, [r3, #24]
 801101c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011020:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
    }
    return adsr->next;
}
 8011024:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8011026:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 801102a:	685a      	ldr	r2, [r3, #4]
 801102c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8011030:	ee16 1a90 	vmov	r1, s13
 8011034:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011038:	ed92 0a00 	vldr	s0, [r2]
 801103c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011040:	e786      	b.n	8010f50 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8011042:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 8011046:	685a      	ldr	r2, [r3, #4]
 8011048:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801104c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8011050:	ee16 1a90 	vmov	r1, s13
 8011054:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011058:	edd2 6a00 	vldr	s13, [r2]
 801105c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8011060:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011064:	e78c      	b.n	8010f80 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 8011066:	eefc 5ac7 	vcvt.u32.f32	s11, s14
 801106a:	685a      	ldr	r2, [r3, #4]
 801106c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011070:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8011074:	ed93 6a19 	vldr	s12, [r3, #100]	; 0x64
 8011078:	ee15 1a90 	vmov	r1, s11
 801107c:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8011080:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8011084:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8011088:	ee20 0a06 	vmul.f32	s0, s0, s12
 801108c:	ed92 6a00 	vldr	s12, [r2]
 8011090:	eee6 7a26 	vfma.f32	s15, s12, s13
 8011094:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011098:	e7a4      	b.n	8010fe4 <tADSRT_tickNoInterp+0xc8>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 801109a:	eefc 6ac7 	vcvt.u32.f32	s13, s14
 801109e:	685a      	ldr	r2, [r3, #4]
 80110a0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80110a4:	ee16 1a90 	vmov	r1, s13
 80110a8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80110ac:	ed92 0a00 	vldr	s0, [r2]
 80110b0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80110b4:	e7ae      	b.n	8011014 <tADSRT_tickNoInterp+0xf8>
    return adsr->next;
 80110b6:	ed93 0a06 	vldr	s0, [r3, #24]
 80110ba:	4770      	bx	lr
 80110bc:	00000000 	.word	0x00000000

080110c0 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80110c0:	b538      	push	{r3, r4, r5, lr}
 80110c2:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, Lfloat val, Lfloat factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 80110c6:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80110c8:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80110ca:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80110cc:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80110d0:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 80110d2:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 80110d6:	f003 fa21 	bl	801451c <mpool_alloc>
 80110da:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80110de:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8011114 <tExpSmooth_init+0x54>
 80110e2:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 80110e4:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 80110e8:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 80110ec:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 80110f0:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 80110f2:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 80110f6:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 80110fa:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 80110fe:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8011102:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8011106:	6863      	ldr	r3, [r4, #4]
 8011108:	685b      	ldr	r3, [r3, #4]
 801110a:	6183      	str	r3, [r0, #24]
}
 801110c:	ecbd 8b02 	vpop	{d8}
 8011110:	bd38      	pop	{r3, r4, r5, pc}
 8011112:	bf00      	nop
 8011114:	00000000 	.word	0x00000000

08011118 <tExpSmooth_initToPool>:
{
 8011118:	b538      	push	{r3, r4, r5, lr}
 801111a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801111e:	680c      	ldr	r4, [r1, #0]
{
 8011120:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8011122:	201c      	movs	r0, #28
{
 8011124:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8011128:	4621      	mov	r1, r4
{
 801112a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801112e:	f003 f9f5 	bl	801451c <mpool_alloc>
 8011132:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011136:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801116c <tExpSmooth_initToPool+0x54>
 801113a:	6028      	str	r0, [r5, #0]
    smooth->mempool = m;
 801113c:	fec8 0a07 	vmaxnm.f32	s1, s16, s14
 8011140:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 8011144:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8011148:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 801114a:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 801114e:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 8011152:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 8011156:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 801115a:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 801115e:	6863      	ldr	r3, [r4, #4]
 8011160:	685b      	ldr	r3, [r3, #4]
 8011162:	6183      	str	r3, [r0, #24]
}
 8011164:	ecbd 8b02 	vpop	{d8}
 8011168:	bd38      	pop	{r3, r4, r5, pc}
 801116a:	bf00      	nop
 801116c:	00000000 	.word	0x00000000

08011170 <tExpSmooth_free>:

void    tExpSmooth_free (tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 8011170:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)smooth, smooth->mempool);
 8011172:	6801      	ldr	r1, [r0, #0]
 8011174:	f003 ba94 	b.w	80146a0 <mpool_free>

08011178 <tExpSmooth_setFactor>:
}

void     tExpSmooth_setFactor(tExpSmooth* const expsmooth, Lfloat factor)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8011178:	b510      	push	{r4, lr}
 801117a:	ed2d 8b02 	vpush	{d8}
 801117e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tExpSmooth* smooth = *expsmooth;
 8011182:	6804      	ldr	r4, [r0, #0]
    
    if (factor < 0.0f)
 8011184:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80111bc <tExpSmooth_setFactor+0x44>
        factor = 0.0f;
    else if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 8011188:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80111c0 <tExpSmooth_setFactor+0x48>
 801118c:	fe80 8a68 	vminnm.f32	s16, s0, s17
 8011190:	edd4 0a06 	vldr	s1, [r4, #24]
 8011194:	fe88 8a07 	vmaxnm.f32	s16, s16, s14
    smooth->oneminusfactor = 1.0f - factor;
 8011198:	ee78 8ac8 	vsub.f32	s17, s17, s16
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 801119c:	eeb0 0a48 	vmov.f32	s0, s16
    smooth->baseFactor = factor;
 80111a0:	ed84 8a01 	vstr	s16, [r4, #4]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 80111a4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80111a8:	f007 fef6 	bl	8018f98 <powf>
    smooth->oneminusfactor = 1.0f - factor;
 80111ac:	edc4 8a03 	vstr	s17, [r4, #12]
    smooth->factor = powf(factor, 44100.f * smooth->invSampleRate);
 80111b0:	ed84 0a02 	vstr	s0, [r4, #8]
}
 80111b4:	ecbd 8b02 	vpop	{d8}
 80111b8:	bd10      	pop	{r4, pc}
 80111ba:	bf00      	nop
 80111bc:	00000000 	.word	0x00000000
 80111c0:	472c4400 	.word	0x472c4400

080111c4 <tExpSmooth_setDest>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#else
void     tExpSmooth_setDest(tExpSmooth* const expsmooth, Lfloat dest)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 80111c4:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 80111c6:	ed83 0a05 	vstr	s0, [r3, #20]
}
 80111ca:	4770      	bx	lr

080111cc <tExpSmooth_setVal>:

void     tExpSmooth_setVal(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 80111cc:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 80111ce:	ed83 0a04 	vstr	s0, [r3, #16]
}
 80111d2:	4770      	bx	lr

080111d4 <tExpSmooth_setValAndDest>:

void     tExpSmooth_setValAndDest(tExpSmooth* const expsmooth, Lfloat val)
{
    _tExpSmooth* smooth = *expsmooth;
 80111d4:	6803      	ldr	r3, [r0, #0]
    smooth->curr=val;
 80111d6:	ed83 0a04 	vstr	s0, [r3, #16]
    smooth->dest=val;
 80111da:	ed83 0a05 	vstr	s0, [r3, #20]
}
 80111de:	4770      	bx	lr

080111e0 <tExpSmooth_tick>:
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tExpSmooth_tick(tExpSmooth* const expsmooth)
#else
Lfloat   tExpSmooth_tick(tExpSmooth* const expsmooth)
#endif
{
    _tExpSmooth* smooth = *expsmooth;
 80111e0:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 80111e2:	edd3 6a04 	vldr	s13, [r3, #16]
 80111e6:	ed93 0a03 	vldr	s0, [r3, #12]
 80111ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80111ee:	ee20 0a26 	vmul.f32	s0, s0, s13
 80111f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80111f6:	eea7 0a27 	vfma.f32	s0, s14, s15
 80111fa:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 80111fe:	4770      	bx	lr

08011200 <tSlide_initToPool>:
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

//upslide and downslide are in samples
void    tSlide_initToPool    (tSlide* const sl, Lfloat upSlide, Lfloat downSlide, tMempool* const mp)
{
 8011200:	b538      	push	{r3, r4, r5, lr}
 8011202:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011206:	680d      	ldr	r5, [r1, #0]
{
 8011208:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 801120a:	201c      	movs	r0, #28
{
 801120c:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8011210:	4629      	mov	r1, r5
{
 8011212:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8011216:	f003 f981 	bl	801451c <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 801121a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 801121e:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8011220:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 8011222:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 8011224:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8011228:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 801122c:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8011230:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 8011232:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 8011234:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 8011236:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8011238:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 801123c:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8011240:	ed80 7a05 	vstr	s14, [r0, #20]
}
 8011244:	ecbd 8b02 	vpop	{d8}
 8011248:	bd38      	pop	{r3, r4, r5, pc}
 801124a:	bf00      	nop

0801124c <tSlide_free>:

void    tSlide_free  (tSlide* const sl)
{
    _tSlide* s = *sl;
 801124c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)s, s->mempool);
 801124e:	6801      	ldr	r1, [r0, #0]
 8011250:	f003 ba26 	b.w	80146a0 <mpool_free>

08011254 <tSlide_setDest>:
    s->invDownSlide = 1.0f / downSlide;
}

void tSlide_setDest(tSlide* const sl, Lfloat dest)
{
    _tSlide* s = *sl;
 8011254:	6803      	ldr	r3, [r0, #0]
    s->dest = dest;
 8011256:	ed83 0a06 	vstr	s0, [r3, #24]
}
 801125a:	4770      	bx	lr

0801125c <tSlide_tickNoInput>:

Lfloat tSlide_tickNoInput(tSlide* const sl)
{
    _tSlide* s = *sl;
 801125c:	6803      	ldr	r3, [r0, #0]
    Lfloat in = s->dest;

    if (in >= s->prevOut)
 801125e:	ed93 0a01 	vldr	s0, [r3, #4]
    Lfloat in = s->dest;
 8011262:	edd3 7a06 	vldr	s15, [r3, #24]
    if (in >= s->prevOut)
 8011266:	eeb4 0ae7 	vcmpe.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 801126a:	edc3 7a03 	vstr	s15, [r3, #12]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 801126e:	ee77 6ac0 	vsub.f32	s13, s15, s0
    if (in >= s->prevOut)
 8011272:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8011276:	bf94      	ite	ls
 8011278:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 801127c:	ed93 7a05 	vldrhi	s14, [r3, #20]
 8011280:	eea6 0a87 	vfma.f32	s0, s13, s14
 8011284:	ed83 0a02 	vstr	s0, [r3, #8]
    s->prevOut = s->currentOut;
 8011288:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 801128c:	4770      	bx	lr
 801128e:	bf00      	nop

08011290 <tSlide_tick>:

Lfloat tSlide_tick(tSlide* const sl, Lfloat in)
{
    _tSlide* s = *sl;
 8011290:	6803      	ldr	r3, [r0, #0]


    if (in >= s->prevOut)
 8011292:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 8011296:	ed83 0a03 	vstr	s0, [r3, #12]
    if (in >= s->prevOut)
 801129a:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 801129e:	ee70 6a67 	vsub.f32	s13, s0, s15
    if (in >= s->prevOut)
 80112a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 80112a6:	bf94      	ite	ls
 80112a8:	ed93 7a04 	vldrls	s14, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 80112ac:	ed93 7a05 	vldrhi	s14, [r3, #20]
 80112b0:	eee6 7a87 	vfma.f32	s15, s13, s14
    s->prevOut = s->currentOut;
    return s->currentOut;
}
 80112b4:	eeb0 0a67 	vmov.f32	s0, s15
 80112b8:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 80112bc:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80112c0:	4770      	bx	lr
 80112c2:	bf00      	nop

080112c4 <tThiranAllpassSOCascade_initToPool>:
{
    tThiranAllpassSOCascade_initToPool(ft, numFilts, &leaf->mempool);
}

void    tThiranAllpassSOCascade_initToPool     (tThiranAllpassSOCascade* const ft, int numFilts, tMempool* const mp)
{
 80112c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112c8:	460f      	mov	r7, r1
 80112ca:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 80112cc:	6811      	ldr	r1, [r2, #0]
{
 80112ce:	4604      	mov	r4, r0
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 80112d0:	2058      	movs	r0, #88	; 0x58
{
 80112d2:	4690      	mov	r8, r2
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 80112d4:	9101      	str	r1, [sp, #4]
 80112d6:	f003 f921 	bl	801451c <mpool_alloc>
    f->mempool = m;
    f->numFilts = numFilts;
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 80112da:	9901      	ldr	r1, [sp, #4]
    _tThiranAllpassSOCascade* f = *ft = (_tThiranAllpassSOCascade*) mpool_alloc(sizeof(_tThiranAllpassSOCascade), m);
 80112dc:	4606      	mov	r6, r0
 80112de:	6020      	str	r0, [r4, #0]
    f->k3[1] = -2.9018f;
    f->C1[1] = 0.071089f;
    f->C2[1] = 2.1074f;
    f->isHigh = 0;
    f->numFiltsMap[0] = numFilts;
    f->numFiltsMap[1] = 1;
 80112e0:	2400      	movs	r4, #0
    f->numFilts = numFilts;
 80112e2:	e9c0 1700 	strd	r1, r7, [r0]
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 80112e6:	00b8      	lsls	r0, r7, #2
 80112e8:	f003 f97c 	bl	80145e4 <mpool_calloc>
    f->k1[0] = -0.00050469f;
 80112ec:	4b1a      	ldr	r3, [pc, #104]	; (8011358 <tThiranAllpassSOCascade_initToPool+0x94>)
    f->numActiveFilters = numFilts;
    for (int i = 0; i < numFilts; i++)
 80112ee:	42a7      	cmp	r7, r4
    f->filters = (tAllpassSO*) mpool_calloc(sizeof(tAllpassSO) * numFilts, m);
 80112f0:	60b0      	str	r0, [r6, #8]
    f->k1[0] = -0.00050469f;
 80112f2:	61f3      	str	r3, [r6, #28]
    f->k2[0] = -0.0064264f;
 80112f4:	4b19      	ldr	r3, [pc, #100]	; (801135c <tThiranAllpassSOCascade_initToPool+0x98>)
 80112f6:	6273      	str	r3, [r6, #36]	; 0x24
    f->k3[0] = -2.8743f;
 80112f8:	4b19      	ldr	r3, [pc, #100]	; (8011360 <tThiranAllpassSOCascade_initToPool+0x9c>)
 80112fa:	62f3      	str	r3, [r6, #44]	; 0x2c
    f->C1[0] = 0.069618f;
 80112fc:	4b19      	ldr	r3, [pc, #100]	; (8011364 <tThiranAllpassSOCascade_initToPool+0xa0>)
 80112fe:	6373      	str	r3, [r6, #52]	; 0x34
    f->C2[0] = 2.0427f;
 8011300:	4b19      	ldr	r3, [pc, #100]	; (8011368 <tThiranAllpassSOCascade_initToPool+0xa4>)
 8011302:	63f3      	str	r3, [r6, #60]	; 0x3c
    f->k1[1] = -0.0026580f;
 8011304:	4b19      	ldr	r3, [pc, #100]	; (801136c <tThiranAllpassSOCascade_initToPool+0xa8>)
 8011306:	6233      	str	r3, [r6, #32]
    f->k2[1] = -0.014811f;
 8011308:	4b19      	ldr	r3, [pc, #100]	; (8011370 <tThiranAllpassSOCascade_initToPool+0xac>)
 801130a:	62b3      	str	r3, [r6, #40]	; 0x28
    f->k3[1] = -2.9018f;
 801130c:	4b19      	ldr	r3, [pc, #100]	; (8011374 <tThiranAllpassSOCascade_initToPool+0xb0>)
 801130e:	6333      	str	r3, [r6, #48]	; 0x30
    f->C1[1] = 0.071089f;
 8011310:	4b19      	ldr	r3, [pc, #100]	; (8011378 <tThiranAllpassSOCascade_initToPool+0xb4>)
 8011312:	63b3      	str	r3, [r6, #56]	; 0x38
    f->C2[1] = 2.1074f;
 8011314:	4b19      	ldr	r3, [pc, #100]	; (801137c <tThiranAllpassSOCascade_initToPool+0xb8>)
 8011316:	6433      	str	r3, [r6, #64]	; 0x40
    f->numFiltsMap[1] = 1;
 8011318:	f04f 0301 	mov.w	r3, #1
    f->numActiveFilters = numFilts;
 801131c:	e9c6 7711 	strd	r7, r7, [r6, #68]	; 0x44
    f->numFiltsMap[1] = 1;
 8011320:	e9c6 3413 	strd	r3, r4, [r6, #76]	; 0x4c
    for (int i = 0; i < numFilts; i++)
 8011324:	dd15      	ble.n	8011352 <tThiranAllpassSOCascade_initToPool+0x8e>
 8011326:	4682      	mov	sl, r0
    f->prevSamp = 0.0f;
 8011328:	2500      	movs	r5, #0
 801132a:	e001      	b.n	8011330 <tThiranAllpassSOCascade_initToPool+0x6c>
    {
        tAllpassSO_initToPool(&f->filters[i], mp);
 801132c:	f8d6 a008 	ldr.w	sl, [r6, #8]
    _tMempool* m = *mp;
 8011330:	f8d8 9000 	ldr.w	r9, [r8]
    _tAllpassSO* f = *ft = (_tAllpassSO*) mpool_alloc(sizeof(_tAllpassSO), m);
 8011334:	201c      	movs	r0, #28
 8011336:	4649      	mov	r1, r9
 8011338:	f003 f8f0 	bl	801451c <mpool_alloc>
 801133c:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
    for (int i = 0; i < numFilts; i++)
 8011340:	3401      	adds	r4, #1
    f->mempool = m;
 8011342:	f8c0 9000 	str.w	r9, [r0]
    f->prevSamp = 0.0f;
 8011346:	6045      	str	r5, [r0, #4]
    for (int i = 0; i < numFilts; i++)
 8011348:	42a7      	cmp	r7, r4
    f->prevPrevSamp = 0.0f;
 801134a:	6085      	str	r5, [r0, #8]
    f->a1 = 0.0f;
 801134c:	6145      	str	r5, [r0, #20]
    f->a2 = 0.0f;
 801134e:	6185      	str	r5, [r0, #24]
    for (int i = 0; i < numFilts; i++)
 8011350:	d1ec      	bne.n	801132c <tThiranAllpassSOCascade_initToPool+0x68>
    }
}
 8011352:	b002      	add	sp, #8
 8011354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011358:	ba044d2c 	.word	0xba044d2c
 801135c:	bbd2948d 	.word	0xbbd2948d
 8011360:	c037f488 	.word	0xc037f488
 8011364:	3d8e93e2 	.word	0x3d8e93e2
 8011368:	4002bb99 	.word	0x4002bb99
 801136c:	bb2e31d7 	.word	0xbb2e31d7
 8011370:	bc72a9d6 	.word	0xbc72a9d6
 8011374:	c039b717 	.word	0xc039b717
 8011378:	3d91971c 	.word	0x3d91971c
 801137c:	4006dfa4 	.word	0x4006dfa4

08011380 <tThiranAllpassSOCascade_free>:

void    tThiranAllpassSOCascade_free  (tThiranAllpassSOCascade* const ft)
{
 8011380:	b538      	push	{r3, r4, r5, lr}
    _tThiranAllpassSOCascade* f = *ft;
 8011382:	6805      	ldr	r5, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 8011384:	686b      	ldr	r3, [r5, #4]
 8011386:	2b00      	cmp	r3, #0
 8011388:	dd0a      	ble.n	80113a0 <tThiranAllpassSOCascade_free+0x20>
 801138a:	2400      	movs	r4, #0
    _tAllpassSO* f = *ft;
 801138c:	68ab      	ldr	r3, [r5, #8]
 801138e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 8011392:	3401      	adds	r4, #1
    mpool_free((char*)f, f->mempool);
 8011394:	6801      	ldr	r1, [r0, #0]
 8011396:	f003 f983 	bl	80146a0 <mpool_free>
    for (int i = 0; i < f->numFilts; i++)
 801139a:	686b      	ldr	r3, [r5, #4]
 801139c:	42a3      	cmp	r3, r4
 801139e:	dcf5      	bgt.n	801138c <tThiranAllpassSOCascade_free+0xc>
    {
        tAllpassSO_free(&f->filters[i]);
    }
    mpool_free((char*)f->filters, f->mempool); //do I need to free the pointers separately?
 80113a0:	6829      	ldr	r1, [r5, #0]
 80113a2:	68a8      	ldr	r0, [r5, #8]
 80113a4:	f003 f97c 	bl	80146a0 <mpool_free>
    mpool_free((char*)f, f->mempool);
 80113a8:	6829      	ldr	r1, [r5, #0]
 80113aa:	4628      	mov	r0, r5
}
 80113ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    mpool_free((char*)f, f->mempool);
 80113b0:	f003 b976 	b.w	80146a0 <mpool_free>

080113b4 <tThiranAllpassSOCascade_setCoeff>:

volatile Lfloat binTest;
float    tThiranAllpassSOCascade_setCoeff(tThiranAllpassSOCascade* const ft, Lfloat dispersionCoeff, Lfloat freq, Lfloat oversampling)
{
 80113b4:	eef0 7a40 	vmov.f32	s15, s0
 80113b8:	b510      	push	{r4, lr}
 80113ba:	ed2d 8b08 	vpush	{d8-d11}
    _tThiranAllpassSOCascade* f = *ft;

    f->B = dispersionCoeff;
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80113be:	eddf 9a68 	vldr	s19, [pc, #416]	; 8011560 <tThiranAllpassSOCascade_setCoeff+0x1ac>
 80113c2:	eeb2 9a08 	vmov.f32	s18, #40	; 0x41400000  12.0
    _tThiranAllpassSOCascade* f = *ft;
 80113c6:	6804      	ldr	r4, [r0, #0]
{
 80113c8:	eef0 8a60 	vmov.f32	s17, s1
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80113cc:	ee20 0aa9 	vmul.f32	s0, s1, s19
    f->B = dispersionCoeff;
 80113d0:	edc4 7a03 	vstr	s15, [r4, #12]
{
 80113d4:	eeb0 8a41 	vmov.f32	s16, s2
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80113d8:	f007 fc3e 	bl	8018c58 <log2f>
 80113dc:	eddf 7a61 	vldr	s15, [pc, #388]	; 8011564 <tThiranAllpassSOCascade_setCoeff+0x1b0>
    //f->iKey = logf((110.0f*twelfthRootOf2) / 27.5f)/ logf(twelfthRootOf2);
    //f->isHigh = freq > 400.0f;//switch to different coefficients for higher notes
    //Lfloat howHigh = LEAF_mapToZeroToOneOutput(iKey2, 16.0f, 76.0f);
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 80113e0:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80113e4:	eee0 7a09 	vfma.f32	s15, s0, s18
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 80113e8:	ee28 8a29 	vmul.f32	s16, s16, s19
 80113ec:	ee28 0a28 	vmul.f32	s0, s16, s17
    f->iKey = (49.0f + 12.0f * log2f(freq * INV_440));
 80113f0:	edc4 7a04 	vstr	s15, [r4, #16]
    Lfloat iKey2 = (49.0f + 12.0f * log2f(freq * oversampling * INV_440));
 80113f4:	f007 fc30 	bl	8018c58 <log2f>
 80113f8:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 80113fc:	eddf 0a5a 	vldr	s1, [pc, #360]	; 8011568 <tThiranAllpassSOCascade_setCoeff+0x1b4>
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 8011400:	eeb0 1a4b 	vmov.f32	s2, s22
    Lfloat howHigh = (iKey2 - 16.0f) * 0.03f;
 8011404:	eddf 7a59 	vldr	s15, [pc, #356]	; 801156c <tThiranAllpassSOCascade_setCoeff+0x1b8>
 8011408:	eee7 0a09 	vfma.f32	s1, s14, s18
    howHigh = LEAF_clip(0.0f, howHigh, 1.0f);
 801140c:	ed9f 0a58 	vldr	s0, [pc, #352]	; 8011570 <tThiranAllpassSOCascade_setCoeff+0x1bc>
 8011410:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011414:	f002 fd80 	bl	8013f18 <LEAF_clip>

    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8011418:	edd4 aa08 	vldr	s21, [r4, #32]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 801141c:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    Lfloat oneMinusHowHigh = 1.0f - howHigh;
 8011420:	ee7b 7a40 	vsub.f32	s15, s22, s0
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 8011424:	ee60 aa2a 	vmul.f32	s21, s0, s21
 8011428:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 801142c:	ee60 8a28 	vmul.f32	s17, s0, s17
 8011430:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011434:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8011438:	ed94 6a10 	vldr	s12, [r4, #64]	; 0x40
    Lfloat k1 = (f->k1[0] * oneMinusHowHigh) + (f->k1[1] * howHigh);
 801143c:	eee6 aaa7 	vfma.f32	s21, s13, s15
    Lfloat k2 = (f->k2[0] * oneMinusHowHigh) + (f->k2[1] * howHigh);
 8011440:	eee7 8a27 	vfma.f32	s17, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8011444:	edd4 9a0e 	vldr	s19, [r4, #56]	; 0x38
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011448:	ee20 aa0a 	vmul.f32	s20, s0, s20
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 801144c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8011450:	ee20 8a06 	vmul.f32	s16, s0, s12
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011454:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 8011458:	ee60 9a29 	vmul.f32	s19, s0, s19
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 801145c:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
    Lfloat k3 = (f->k3[0] * oneMinusHowHigh) + (f->k3[1] * howHigh);
 8011460:	eea6 aa27 	vfma.f32	s20, s12, s15
    Lfloat logB = logf(f->B);
 8011464:	ed94 0a03 	vldr	s0, [r4, #12]
    Lfloat C2 = (f->C2[0] * oneMinusHowHigh) + (f->C2[1] * howHigh);
 8011468:	eea7 8a27 	vfma.f32	s16, s14, s15
    Lfloat C1 = (f->C1[0] * oneMinusHowHigh) + (f->C1[1] * howHigh);
 801146c:	eee6 9aa7 	vfma.f32	s19, s13, s15
    Lfloat logB = logf(f->B);
 8011470:	f007 fb8c 	bl	8018b8c <logf>
    Lfloat temp = (k1*logB*logB)+(k2 * logB)+k3;
 8011474:	eeea 8a80 	vfma.f32	s17, s21, s0
    Lfloat logB = logf(f->B);
 8011478:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat kd = fastExp3(temp);
 801147c:	eeb0 0a4a 	vmov.f32	s0, s20
 8011480:	eea8 0a89 	vfma.f32	s0, s17, s18
 8011484:	f002 fc50 	bl	8013d28 <fastExp3>
 8011488:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 801148c:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat kd = fastExp3(temp);
 8011490:	eeb0 8a67 	vmov.f32	s16, s15
    Lfloat Cd = fastExp3((C1 * logB) + C2);
 8011494:	eea9 0a89 	vfma.f32	s0, s19, s18
 8011498:	f002 fc46 	bl	8013d28 <fastExp3>
    Lfloat D = fastExp3(Cd-(f->iKey*kd));
 801149c:	edd4 7a04 	vldr	s15, [r4, #16]
 80114a0:	eea7 0ac8 	vfms.f32	s0, s15, s16
 80114a4:	f002 fc40 	bl	8013d28 <fastExp3>
    f->D = D;

	Lfloat a_k = -2.0f;

	a_k *= (D - 2.0f);
 80114a8:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80114ac:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
	a_k *= D;
	a_k /= (D + 2.0f);

	f->a[1] = a_k;

	if (f->a[0] > 0.99f)
 80114b0:	eddf 5a30 	vldr	s11, [pc, #192]	; 8011574 <tThiranAllpassSOCascade_setCoeff+0x1c0>
	a_k /= (D - 1.0f);
 80114b4:	ee70 7a4b 	vsub.f32	s15, s0, s22
    f->D = D;
 80114b8:	ed84 0a15 	vstr	s0, [r4, #84]	; 0x54
	a_k *= (D - 2.0f);
 80114bc:	ee70 4a47 	vsub.f32	s9, s0, s14
	a_k /= (D + 1.0f);
 80114c0:	ee30 5a0b 	vadd.f32	s10, s0, s22
	a_k /= (D + 2.0f);
 80114c4:	ee30 7a07 	vadd.f32	s14, s0, s14
	a_k *= (D - 2.0f);
 80114c8:	ee24 6aa6 	vmul.f32	s12, s9, s13
	a_k /= D;
 80114cc:	eec4 6a80 	vdiv.f32	s13, s9, s0
	a_k /= (D - 1.0f);
 80114d0:	eec6 4a27 	vdiv.f32	s9, s12, s15
	a_k *= (D - 1.0f);
 80114d4:	ee67 6aa6 	vmul.f32	s13, s15, s13
	a_k /= (D + 1.0f);
 80114d8:	ee86 6a85 	vdiv.f32	s12, s13, s10
	a_k *= (D - 1.0f);
 80114dc:	ee67 7aa4 	vmul.f32	s15, s15, s9
	a_k /= D;
 80114e0:	eec7 6a80 	vdiv.f32	s13, s15, s0
	a_k *= D;
 80114e4:	ee60 7a06 	vmul.f32	s15, s0, s12
	a_k /= (D + 2.0f);
 80114e8:	ee87 6a87 	vdiv.f32	s12, s15, s14
	a_k *= D;
 80114ec:	ee60 6a26 	vmul.f32	s13, s0, s13
	a_k /= (D + 1.0f);
 80114f0:	eec6 7a85 	vdiv.f32	s15, s13, s10
	f->a[1] = a_k;
 80114f4:	ed84 6a06 	vstr	s12, [r4, #24]
	if (f->a[0] > 0.99f)
 80114f8:	eef4 7ae5 	vcmpe.f32	s15, s11
	f->a[0] = a_k;
 80114fc:	edc4 7a05 	vstr	s15, [r4, #20]
	if (f->a[0] > 0.99f)
 8011500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011504:	dd0b      	ble.n	801151e <tThiranAllpassSOCascade_setCoeff+0x16a>
	{
		f->a[0] = 0.99f;
		f->a[1] = 0.01f;
 8011506:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8011578 <tThiranAllpassSOCascade_setCoeff+0x1c4>
 801150a:	eef0 7a65 	vmov.f32	s15, s11
		D = 1.0f;
 801150e:	eeb0 0a4b 	vmov.f32	s0, s22
		f->a[0] = 0.99f;
 8011512:	edc4 5a05 	vstr	s11, [r4, #20]
		f->a[1] = 0.01f;
 8011516:	eeb0 6a47 	vmov.f32	s12, s14
 801151a:	ed84 7a06 	vstr	s14, [r4, #24]
	}
	//f->a[0] = LEAF_clip(0.0f, f->a[0], 1.0f);
	//f->a[1] = LEAF_clip(-1.999999f, f->a[1], 2.0f);

    for (int i = 0; i < f->numActiveFilters; i++)
 801151e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011520:	2a00      	cmp	r2, #0
 8011522:	dd14      	ble.n	801154e <tThiranAllpassSOCascade_setCoeff+0x19a>
    _tAllpassSO* f = *ft;
 8011524:	68a3      	ldr	r3, [r4, #8]
 8011526:	681b      	ldr	r3, [r3, #0]
    f->a1 = a1;
 8011528:	edc3 7a05 	vstr	s15, [r3, #20]
    f->a2 = a2;
 801152c:	ed83 6a06 	vstr	s12, [r3, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011530:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8011532:	2a01      	cmp	r2, #1
 8011534:	dd0b      	ble.n	801154e <tThiranAllpassSOCascade_setCoeff+0x19a>
 8011536:	2301      	movs	r3, #1
    _tAllpassSO* f = *ft;
 8011538:	68a2      	ldr	r2, [r4, #8]
    {
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 801153a:	6960      	ldr	r0, [r4, #20]
    _tAllpassSO* f = *ft;
 801153c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011540:	3301      	adds	r3, #1
        tAllpassSO_setCoeff(&f->filters[i], f->a[0], f->a[1]);
 8011542:	69a1      	ldr	r1, [r4, #24]
    f->a1 = a1;
 8011544:	6150      	str	r0, [r2, #20]
    f->a2 = a2;
 8011546:	6191      	str	r1, [r2, #24]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011548:	6c62      	ldr	r2, [r4, #68]	; 0x44
 801154a:	429a      	cmp	r2, r3
 801154c:	dcf4      	bgt.n	8011538 <tThiranAllpassSOCascade_setCoeff+0x184>
        //f->filters[i]->prevSamp = 0.0f;
        //f->filters[i]->prevPrevSamp = 0.0f;
        //probably should adjust the gain of the internal state variables (prevSamp and prevPrevSamp) if the gain total of the two coefficients goes //up, since the internals of the allpass boosts gain and then attenuates it, so leaving super big values in there that won't be //attenuated enough can make it distort or nan.
    }
    return D*f->numActiveFilters;
 801154e:	ee07 2a90 	vmov	s15, r2
 8011552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 8011556:	ecbd 8b08 	vpop	{d8-d11}
 801155a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801155e:	bd10      	pop	{r4, pc}
 8011560:	3b14f209 	.word	0x3b14f209
 8011564:	42440000 	.word	0x42440000
 8011568:	42040000 	.word	0x42040000
 801156c:	3cf5c28f 	.word	0x3cf5c28f
 8011570:	00000000 	.word	0x00000000
 8011574:	3f7d70a4 	.word	0x3f7d70a4
 8011578:	3c23d70a 	.word	0x3c23d70a

0801157c <tThiranAllpassSOCascade_tick>:

Lfloat   tThiranAllpassSOCascade_tick(tThiranAllpassSOCascade* const ft, Lfloat input)
{
    _tThiranAllpassSOCascade* f = *ft;
 801157c:	6801      	ldr	r1, [r0, #0]
    Lfloat sample = input;
    for (int i = 0; i < f->numActiveFilters; i++)
 801157e:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8011580:	2b00      	cmp	r3, #0
 8011582:	dd27      	ble.n	80115d4 <tThiranAllpassSOCascade_tick+0x58>
 8011584:	2200      	movs	r2, #0
    _tAllpassSO* f = *ft;
 8011586:	688b      	ldr	r3, [r1, #8]
 8011588:	eef0 4a40 	vmov.f32	s9, s0
 801158c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    for (int i = 0; i < f->numActiveFilters; i++)
 8011590:	3201      	adds	r2, #1
 8011592:	edd3 6a04 	vldr	s13, [r3, #16]
    Lfloat vn = input * f->a2 + (f->prevSamp * f->a1 + f->prevPrevSamp);
 8011596:	ed93 7a01 	vldr	s14, [r3, #4]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 801159a:	ee30 0a66 	vsub.f32	s0, s0, s13
 801159e:	edd3 7a03 	vldr	s15, [r3, #12]
 80115a2:	ed93 5a06 	vldr	s10, [r3, #24]
 80115a6:	ee37 6a67 	vsub.f32	s12, s14, s15
 80115aa:	edd3 5a05 	vldr	s11, [r3, #20]
 80115ae:	ee20 0a05 	vmul.f32	s0, s0, s10
 80115b2:	edd3 6a02 	vldr	s13, [r3, #8]
    f->prevSamp = input;
 80115b6:	edc3 4a01 	vstr	s9, [r3, #4]
    f->prevPrevSamp = f->prevSamp;
 80115ba:	ed83 7a02 	vstr	s14, [r3, #8]
 80115be:	eea5 0a86 	vfma.f32	s0, s11, s12
    f->prevPrevSamp2 = f->prevSamp2;
 80115c2:	edc3 7a04 	vstr	s15, [r3, #16]
    Lfloat output = vn + (f->prevSamp2 * -f->a1) +  (f->prevPrevSamp2 * -f->a2);
 80115c6:	ee30 0a26 	vadd.f32	s0, s0, s13
    f->prevSamp2 = output;
 80115ca:	ed83 0a03 	vstr	s0, [r3, #12]
    for (int i = 0; i < f->numActiveFilters; i++)
 80115ce:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 80115d0:	4293      	cmp	r3, r2
 80115d2:	dcd8      	bgt.n	8011586 <tThiranAllpassSOCascade_tick+0xa>
    {
        sample = tAllpassSO_tick(&f->filters[i], sample);
    }
    return sample;
}
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop

080115d8 <tThiranAllpassSOCascade_clear>:

void   tThiranAllpassSOCascade_clear(tThiranAllpassSOCascade* const ft)
{
    _tThiranAllpassSOCascade* f = *ft;
 80115d8:	6802      	ldr	r2, [r0, #0]
    for (int i = 0; i < f->numFilts; i++)
 80115da:	6853      	ldr	r3, [r2, #4]
 80115dc:	2b00      	cmp	r3, #0
 80115de:	dd0d      	ble.n	80115fc <tThiranAllpassSOCascade_clear+0x24>
 80115e0:	2300      	movs	r3, #0
    {
        //tAllpassSO_setCoeff(&f->filters[i], f->a[1], f->a[2]);
        f->filters[i]->prevSamp = 0.0f;
 80115e2:	2100      	movs	r1, #0
 80115e4:	6890      	ldr	r0, [r2, #8]
 80115e6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80115ea:	6041      	str	r1, [r0, #4]
        f->filters[i]->prevPrevSamp = 0.0f;
 80115ec:	6890      	ldr	r0, [r2, #8]
 80115ee:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
    for (int i = 0; i < f->numFilts; i++)
 80115f2:	3301      	adds	r3, #1
        f->filters[i]->prevPrevSamp = 0.0f;
 80115f4:	6081      	str	r1, [r0, #8]
    for (int i = 0; i < f->numFilts; i++)
 80115f6:	6850      	ldr	r0, [r2, #4]
 80115f8:	4298      	cmp	r0, r3
 80115fa:	dcf3      	bgt.n	80115e4 <tThiranAllpassSOCascade_clear+0xc>

    }
}
 80115fc:	4770      	bx	lr
 80115fe:	bf00      	nop

08011600 <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, Lfloat freq, tMempool* const mp)
{
 8011600:	b538      	push	{r3, r4, r5, lr}
 8011602:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011606:	680d      	ldr	r5, [r1, #0]
{
 8011608:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 801160a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801160e:	2028      	movs	r0, #40	; 0x28
 8011610:	4629      	mov	r1, r5
{
 8011612:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8011616:	f002 ff81 	bl	801451c <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 801161a:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8011664 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801161e:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011620:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 8011624:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8011626:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 8011628:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 801162c:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 8011630:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 8011634:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011638:	68db      	ldr	r3, [r3, #12]
 801163a:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 801163c:	6824      	ldr	r4, [r4, #0]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 801163e:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 8011642:	ed84 8a01 	vstr	s16, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011646:	ee68 0a27 	vmul.f32	s1, s16, s15
 801164a:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 801164e:	f002 fc63 	bl	8013f18 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 8011652:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011656:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 801165a:	edc4 8a05 	vstr	s17, [r4, #20]
}
 801165e:	ecbd 8b02 	vpop	{d8}
 8011662:	bd38      	pop	{r3, r4, r5, pc}
 8011664:	00000000 	.word	0x00000000

08011668 <tOnePole_free>:
    _tOnePole* f = *ft;
 8011668:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 801166a:	6801      	ldr	r1, [r0, #0]
 801166c:	f003 b818 	b.w	80146a0 <mpool_free>

08011670 <tOnePole_setFreq>:
{
 8011670:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 8011672:	6804      	ldr	r4, [r0, #0]
{
 8011674:	eef0 0a40 	vmov.f32	s1, s0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011678:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801167c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80116a8 <tOnePole_setFreq+0x38>
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011680:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 8011684:	edc4 0a01 	vstr	s1, [r4, #4]
    f->a1 = f->freq * f->twoPiTimesInvSampleRate;
 8011688:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801168c:	edc4 0a04 	vstr	s1, [r4, #16]
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011690:	f002 fc42 	bl	8013f18 <LEAF_clip>
    f->b0 = 1.0f - f->a1;
 8011694:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->a1 = LEAF_clip(0.0f, f->a1, 1.0f);
 8011698:	ed84 0a04 	vstr	s0, [r4, #16]
    f->b0 = 1.0f - f->a1;
 801169c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80116a0:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80116a4:	bd10      	pop	{r4, pc}
 80116a6:	bf00      	nop
 80116a8:	00000000 	.word	0x00000000

080116ac <tOnePole_tick>:
    f->gain = gain;
}

Lfloat   tOnePole_tick(tOnePole* const ft, Lfloat input)
{
    _tOnePole* f = *ft;
 80116ac:	6803      	ldr	r3, [r0, #0]
    
    Lfloat in = input * f->gain;
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80116ae:	ed93 6a08 	vldr	s12, [r3, #32]
    Lfloat in = input * f->gain;
 80116b2:	ed93 7a02 	vldr	s14, [r3, #8]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80116b6:	edd3 7a04 	vldr	s15, [r3, #16]
    Lfloat in = input * f->gain;
 80116ba:	ee20 7a07 	vmul.f32	s14, s0, s14
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80116be:	edd3 6a05 	vldr	s13, [r3, #20]
 80116c2:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 80116c6:	ed83 7a07 	vstr	s14, [r3, #28]
    Lfloat out = (f->b0 * in) + (f->a1 * f->lastOut);
 80116ca:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 80116ce:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 80116d2:	4770      	bx	lr

080116d4 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, Lfloat sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80116d4:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8011710 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80116d8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80116dc:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80116e0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8011714 <tOnePole_setSampleRate+0x40>
{
 80116e4:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 80116e6:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80116e8:	edd4 0a01 	vldr	s1, [r4, #4]
 80116ec:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80116f0:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80116f4:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80116f8:	f002 fc0e 	bl	8013f18 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80116fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8011700:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8011704:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8011708:	edc4 7a04 	vstr	s15, [r4, #16]
}
 801170c:	bd10      	pop	{r4, pc}
 801170e:	bf00      	nop
 8011710:	40c90fdb 	.word	0x40c90fdb
 8011714:	00000000 	.word	0x00000000

08011718 <tCookOnePole_initToPool>:
{
    tCookOnePole_initToPool(ft, &leaf->mempool);
}

void    tCookOnePole_initToPool     (tCookOnePole* const ft, tMempool* const mp)
{
 8011718:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 801171a:	680c      	ldr	r4, [r1, #0]
{
 801171c:	4605      	mov	r5, r0
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 801171e:	2014      	movs	r0, #20
 8011720:	4621      	mov	r1, r4
 8011722:	f002 fefb 	bl	801451c <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->poleCoeff     = 0.9f;
 8011726:	4a06      	ldr	r2, [pc, #24]	; (8011740 <tCookOnePole_initToPool+0x28>)
    _tCookOnePole* f = *ft = (_tCookOnePole*) mpool_alloc(sizeof(_tCookOnePole), m);
 8011728:	6028      	str	r0, [r5, #0]
    f->sgain         = 0.1f;
 801172a:	4906      	ldr	r1, [pc, #24]	; (8011744 <tCookOnePole_initToPool+0x2c>)
    f->mempool = m;
 801172c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 801172e:	6863      	ldr	r3, [r4, #4]
    f->poleCoeff     = 0.9f;
 8011730:	6042      	str	r2, [r0, #4]
    f->output         = 0.0f;
 8011732:	2200      	movs	r2, #0
    f->sgain         = 0.1f;
 8011734:	6081      	str	r1, [r0, #8]
    f->output         = 0.0f;
 8011736:	60c2      	str	r2, [r0, #12]
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011738:	68db      	ldr	r3, [r3, #12]
 801173a:	6103      	str	r3, [r0, #16]
}
 801173c:	bd38      	pop	{r3, r4, r5, pc}
 801173e:	bf00      	nop
 8011740:	3f666666 	.word	0x3f666666
 8011744:	3dcccccd 	.word	0x3dcccccd

08011748 <tCookOnePole_free>:

void    tCookOnePole_free   (tCookOnePole* const ft)
{
    _tCookOnePole* f = *ft;
 8011748:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)f, f->mempool);
 801174a:	6801      	ldr	r1, [r0, #0]
 801174c:	f002 bfa8 	b.w	80146a0 <mpool_free>

08011750 <tCookOnePole_setPole>:
void    tCookOnePole_setPole(tCookOnePole* const ft, Lfloat aValue)
{
    _tCookOnePole* onepole = *ft;
    
    onepole->poleCoeff = aValue;
      if (onepole->poleCoeff > 0.0)                   // Normalize gain to 1.0 max
 8011750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tCookOnePole* onepole = *ft;
 8011754:	6803      	ldr	r3, [r0, #0]
        onepole->sgain = (1.0 - onepole->poleCoeff);
 8011756:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    onepole->poleCoeff = aValue;
 801175a:	ed83 0a01 	vstr	s0, [r3, #4]
      if (onepole->poleCoeff > 0.0)                   // Normalize gain to 1.0 max
 801175e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        onepole->sgain = (1.0 - onepole->poleCoeff);
 8011762:	bfcc      	ite	gt
 8011764:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
      else
        onepole->sgain = (1.0 + onepole->poleCoeff);
 8011768:	ee30 0a27 	vaddle.f32	s0, s0, s15
 801176c:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8011770:	4770      	bx	lr
 8011772:	bf00      	nop

08011774 <tCookOnePole_setGainAndPole>:


void    tCookOnePole_setGainAndPole(tCookOnePole* const ft, Lfloat gain, Lfloat pole)
{
    _tCookOnePole* onepole = *ft;
 8011774:	6803      	ldr	r3, [r0, #0]
    
    onepole->poleCoeff = pole;
 8011776:	edc3 0a01 	vstr	s1, [r3, #4]

    onepole->sgain = gain;
 801177a:	ed83 0a02 	vstr	s0, [r3, #8]
     
}
 801177e:	4770      	bx	lr

08011780 <tCookOnePole_tick>:
    
Lfloat   tCookOnePole_tick(tCookOnePole* const ft, Lfloat sample)
{
    _tCookOnePole* onepole = *ft;
 8011780:	6803      	ldr	r3, [r0, #0]
    
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 8011782:	edd3 6a03 	vldr	s13, [r3, #12]
 8011786:	edd3 7a01 	vldr	s15, [r3, #4]
 801178a:	ed93 7a02 	vldr	s14, [r3, #8]
 801178e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8011792:	eee7 7a00 	vfma.f32	s15, s14, s0
    return onepole->output;
}
 8011796:	eeb0 0a67 	vmov.f32	s0, s15
    onepole->output = (onepole->sgain * sample) + (onepole->poleCoeff * onepole->output);
 801179a:	edc3 7a03 	vstr	s15, [r3, #12]
}
 801179e:	4770      	bx	lr

080117a0 <tCookOnePole_setSampleRate>:

void tCookOnePole_setSampleRate(tCookOnePole* const ft, Lfloat sr)
{
    _tCookOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80117a0:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80117b0 <tCookOnePole_setSampleRate+0x10>
    _tCookOnePole* f = *ft;
 80117a4:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 80117a6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80117aa:	edc3 7a04 	vstr	s15, [r3, #16]
}
 80117ae:	4770      	bx	lr
 80117b0:	40c90fdb 	.word	0x40c90fdb

080117b4 <tSVF_init>:
}

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as Lfloating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, LEAF* const leaf)
{
 80117b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117b6:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, Lfloat freq, Lfloat Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 80117ba:	6995      	ldr	r5, [r2, #24]
{
 80117bc:	4606      	mov	r6, r0
 80117be:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80117c0:	2050      	movs	r0, #80	; 0x50
 80117c2:	4629      	mov	r1, r5
{
 80117c4:	eef0 8a40 	vmov.f32	s17, s0
 80117c8:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80117cc:	f002 fea6 	bl	801451c <mpool_alloc>
 80117d0:	6030      	str	r0, [r6, #0]
 80117d2:	4604      	mov	r4, r0
    svf->mempool = m;
 80117d4:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 80117d6:	686e      	ldr	r6, [r5, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 80117d8:	2500      	movs	r5, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80117da:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80118b0 <tSVF_init+0xfc>
    svf->sampleRate = leaf->sampleRate;
 80117de:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80117e0:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80117e4:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 80117e6:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 80117ea:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80117ec:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 80117f0:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 80117f4:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 80117f6:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 80117f8:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 80117fc:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011800:	f007 fe7c 	bl	80194fc <tanf>
    svf->k = 1.0f/Q;
 8011804:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011808:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 801180c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 801180e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 8011810:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 8011814:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 8011818:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 801181a:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801181c:	eef0 6a67 	vmov.f32	s13, s15
 8011820:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 8011824:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011828:	eee0 6a06 	vfma.f32	s13, s0, s12
 801182c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 8011830:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011834:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8011838:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 801183c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 8011840:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 8011844:	d00d      	beq.n	8011862 <tSVF_init+0xae>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8011846:	2f04      	cmp	r7, #4
 8011848:	d80b      	bhi.n	8011862 <tSVF_init+0xae>
 801184a:	e8df f007 	tbb	[pc, r7]
 801184e:	0a23      	.short	0x0a23
 8011850:	032a      	.short	0x032a
 8011852:	1a          	.byte	0x1a
 8011853:	00          	.byte	0x00
        svf->cL = -1.0f;
    }
    
    else if (type == SVFTypeNotch)
    {
        svf->cH = 1.0f;
 8011854:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8011858:	4a16      	ldr	r2, [pc, #88]	; (80118b4 <tSVF_init+0x100>)
        svf->cL = 0.0f;
 801185a:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 801185c:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 801185e:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 8011860:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = -2.0f;
    }
    if (leaf->sampleRate > 90000)
 8011862:	ed96 7a00 	vldr	s14, [r6]
 8011866:	eddf 7a14 	vldr	s15, [pc, #80]	; 80118b8 <tSVF_init+0x104>
    {
    	svf->table = __filterTanhTable_96000;
    }
    else
    {
    	svf->table = __filterTanhTable_48000;
 801186a:	4a14      	ldr	r2, [pc, #80]	; (80118bc <tSVF_init+0x108>)
 801186c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8011870:	4b13      	ldr	r3, [pc, #76]	; (80118c0 <tSVF_init+0x10c>)
 8011872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011876:	bfd8      	it	le
 8011878:	4613      	movle	r3, r2
 801187a:	64e3      	str	r3, [r4, #76]	; 0x4c
}
 801187c:	ecbd 8b02 	vpop	{d8}
 8011880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 8011882:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011886:	4a0b      	ldr	r2, [pc, #44]	; (80118b4 <tSVF_init+0x100>)
        svf->cL = -2.0f;
 8011888:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 801188c:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 801188e:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 8011890:	63a3      	str	r3, [r4, #56]	; 0x38
 8011892:	e7e6      	b.n	8011862 <tSVF_init+0xae>
        svf->cBK = -1.0f;
 8011894:	4b07      	ldr	r3, [pc, #28]	; (80118b4 <tSVF_init+0x100>)
        svf->cH = 1.0f;
 8011896:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 801189a:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 801189c:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 801189e:	63a3      	str	r3, [r4, #56]	; 0x38
 80118a0:	e7df      	b.n	8011862 <tSVF_init+0xae>
        svf->cB = 1.0f;
 80118a2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 80118a6:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 80118a8:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 80118aa:	63a2      	str	r2, [r4, #56]	; 0x38
 80118ac:	e7d9      	b.n	8011862 <tSVF_init+0xae>
 80118ae:	bf00      	nop
 80118b0:	40490fdb 	.word	0x40490fdb
 80118b4:	bf800000 	.word	0xbf800000
 80118b8:	47afc800 	.word	0x47afc800
 80118bc:	0801be3c 	.word	0x0801be3c
 80118c0:	0801fe3c 	.word	0x0801fe3c

080118c4 <tSVF_initToPool>:
{
 80118c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c6:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80118ca:	6815      	ldr	r5, [r2, #0]
{
 80118cc:	4606      	mov	r6, r0
 80118ce:	460f      	mov	r7, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80118d0:	2050      	movs	r0, #80	; 0x50
 80118d2:	4629      	mov	r1, r5
{
 80118d4:	eef0 8a40 	vmov.f32	s17, s0
 80118d8:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80118dc:	f002 fe1e 	bl	801451c <mpool_alloc>
 80118e0:	6030      	str	r0, [r6, #0]
 80118e2:	4604      	mov	r4, r0
    svf->mempool = m;
 80118e4:	6005      	str	r5, [r0, #0]
    LEAF* leaf = svf->mempool->leaf;
 80118e6:	686e      	ldr	r6, [r5, #4]
    svf->ic1eq = 0;
 80118e8:	2500      	movs	r5, #0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80118ea:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80119c0 <tSVF_initToPool+0xfc>
    svf->sampleRate = leaf->sampleRate;
 80118ee:	6833      	ldr	r3, [r6, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80118f0:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80118f4:	6403      	str	r3, [r0, #64]	; 0x40
    svf->invSampleRate = leaf->invSampleRate;
 80118f6:	edd6 7a01 	vldr	s15, [r6, #4]
    svf->type = type;
 80118fa:	7107      	strb	r7, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80118fc:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 8011900:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
    svf->ic1eq = 0;
 8011904:	6145      	str	r5, [r0, #20]
    svf->ic2eq = 0;
 8011906:	6185      	str	r5, [r0, #24]
    svf->Q = Q;
 8011908:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 801190c:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011910:	f007 fdf4 	bl	80194fc <tanf>
    svf->k = 1.0f/Q;
 8011914:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 8011918:	ed84 0a07 	vstr	s0, [r4, #28]
    if (type == SVFTypeLowpass)
 801191c:	2f01      	cmp	r7, #1
    svf->cH = 0.0f;
 801191e:	6325      	str	r5, [r4, #48]	; 0x30
    svf->k = 1.0f/Q;
 8011920:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cL = 1.0f;
 8011924:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    svf->cB = 0.0f;
 8011928:	6365      	str	r5, [r4, #52]	; 0x34
    svf->cBK = 0.0f;
 801192a:	63e5      	str	r5, [r4, #60]	; 0x3c
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 801192c:	eef0 6a67 	vmov.f32	s13, s15
 8011930:	ee30 6a07 	vadd.f32	s12, s0, s14
    svf->k = 1.0f/Q;
 8011934:	ed84 7a08 	vstr	s14, [r4, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011938:	eee0 6a06 	vfma.f32	s13, s0, s12
 801193c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g*svf->a1;
 8011940:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011944:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8011948:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g*svf->a1;
 801194c:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g*svf->a2;
 8011950:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    if (type == SVFTypeLowpass)
 8011954:	d00b      	beq.n	801196e <tSVF_initToPool+0xaa>
    else if (type == SVFTypeBandpass)
 8011956:	2f04      	cmp	r7, #4
 8011958:	d809      	bhi.n	801196e <tSVF_initToPool+0xaa>
 801195a:	e8df f007 	tbb	[pc, r7]
 801195e:	0821      	.short	0x0821
 8011960:	2803      	.short	0x2803
 8011962:	18          	.byte	0x18
 8011963:	00          	.byte	0x00
        svf->cB = 1.0f;
 8011964:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
        svf->cL = 0.0f;
 8011968:	2200      	movs	r2, #0
        svf->cB = 1.0f;
 801196a:	6363      	str	r3, [r4, #52]	; 0x34
        svf->cL = 0.0f;
 801196c:	63a2      	str	r2, [r4, #56]	; 0x38
    if (leaf->sampleRate > 90000)
 801196e:	ed96 7a00 	vldr	s14, [r6]
 8011972:	eddf 7a14 	vldr	s15, [pc, #80]	; 80119c4 <tSVF_initToPool+0x100>
    	svf->table = __filterTanhTable_48000;
 8011976:	4a14      	ldr	r2, [pc, #80]	; (80119c8 <tSVF_initToPool+0x104>)
 8011978:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801197c:	4b13      	ldr	r3, [pc, #76]	; (80119cc <tSVF_initToPool+0x108>)
 801197e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011982:	bfd8      	it	le
 8011984:	4613      	movle	r3, r2
 8011986:	64e3      	str	r3, [r4, #76]	; 0x4c
    }
}
 8011988:	ecbd 8b02 	vpop	{d8}
 801198c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cH = 1.0f;
 801198e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 8011992:	4a0f      	ldr	r2, [pc, #60]	; (80119d0 <tSVF_initToPool+0x10c>)
        svf->cL = -2.0f;
 8011994:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8011998:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 801199a:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = -2.0f;
 801199c:	63a3      	str	r3, [r4, #56]	; 0x38
 801199e:	e7e6      	b.n	801196e <tSVF_initToPool+0xaa>
        svf->cBK = -1.0f;
 80119a0:	4b0b      	ldr	r3, [pc, #44]	; (80119d0 <tSVF_initToPool+0x10c>)
        svf->cH = 1.0f;
 80119a2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 80119a6:	63e3      	str	r3, [r4, #60]	; 0x3c
        svf->cH = 1.0f;
 80119a8:	6322      	str	r2, [r4, #48]	; 0x30
        svf->cL = -1.0f;
 80119aa:	63a3      	str	r3, [r4, #56]	; 0x38
 80119ac:	e7df      	b.n	801196e <tSVF_initToPool+0xaa>
        svf->cH = 1.0f;
 80119ae:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        svf->cBK = -1.0f;
 80119b2:	4a07      	ldr	r2, [pc, #28]	; (80119d0 <tSVF_initToPool+0x10c>)
        svf->cL = 0.0f;
 80119b4:	2300      	movs	r3, #0
        svf->cH = 1.0f;
 80119b6:	6321      	str	r1, [r4, #48]	; 0x30
        svf->cBK = -1.0f;
 80119b8:	63e2      	str	r2, [r4, #60]	; 0x3c
        svf->cL = 0.0f;
 80119ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80119bc:	e7d7      	b.n	801196e <tSVF_initToPool+0xaa>
 80119be:	bf00      	nop
 80119c0:	40490fdb 	.word	0x40490fdb
 80119c4:	47afc800 	.word	0x47afc800
 80119c8:	0801be3c 	.word	0x0801be3c
 80119cc:	0801fe3c 	.word	0x0801fe3c
 80119d0:	bf800000 	.word	0xbf800000

080119d4 <tSVF_free>:

void    tSVF_free   (tSVF* const svff)
{
    _tSVF* svf = *svff;
 80119d4:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)svf, svf->mempool);
 80119d6:	6801      	ldr	r1, [r0, #0]
 80119d8:	f002 be62 	b.w	80146a0 <mpool_free>

080119dc <tSVF_tick>:
}

Lfloat   tSVF_tick(tSVF* const svff, Lfloat v0)
{
    _tSVF* svf = *svff;
 80119dc:	6803      	ldr	r3, [r0, #0]
#endif
    Lfloat v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 80119de:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 80119e2:	edd3 6a06 	vldr	s13, [r3, #24]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80119e6:	ed93 6a05 	vldr	s12, [r3, #20]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80119ea:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 80119ee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
    v3 = v0 - svf->ic2eq;
 80119f2:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 80119f6:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
 80119fa:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
 80119fe:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011a02:	edd3 2a09 	vldr	s5, [r3, #36]	; 0x24
 8011a06:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011a0a:	ed93 2a08 	vldr	s4, [r3, #32]
 8011a0e:	ed93 5a0d 	vldr	s10, [r3, #52]	; 0x34
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8011a12:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
 8011a16:	eea2 5a23 	vfma.f32	s10, s4, s7
 8011a1a:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8011a1e:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8011a22:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8011a26:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8011a2a:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8011a2e:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8011a32:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8011a36:	ed83 6a05 	vstr	s12, [r3, #20]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8011a3a:	edc3 6a06 	vstr	s13, [r3, #24]
}
 8011a3e:	eea3 7a80 	vfma.f32	s14, s7, s0
 8011a42:	eeb0 0a47 	vmov.f32	s0, s14
 8011a46:	4770      	bx	lr

08011a48 <tSVF_setFreq>:

void     tSVF_setFreq(tSVF* const svff, Lfloat freq)
{
 8011a48:	b510      	push	{r4, lr}
    _tSVF* svf = *svff;
 8011a4a:	6804      	ldr	r4, [r0, #0]
    
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011a4c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8011a50:	eef0 0a40 	vmov.f32	s1, s0
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011a54:	ed9f 0a16 	vldr	s0, [pc, #88]	; 8011ab0 <tSVF_setFreq+0x68>
 8011a58:	ed94 1a10 	vldr	s2, [r4, #64]	; 0x40
 8011a5c:	ee21 1a27 	vmul.f32	s2, s2, s15
 8011a60:	f002 fa5a 	bl	8013f18 <LEAF_clip>
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011a64:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8011ab4 <tSVF_setFreq+0x6c>
 8011a68:	edd4 7a11 	vldr	s15, [r4, #68]	; 0x44
    svf->cutoff = LEAF_clip(0.0f, freq, svf->sampleRate * 0.5f);
 8011a6c:	ed84 0a02 	vstr	s0, [r4, #8]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011a74:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011a78:	f007 fd40 	bl	80194fc <tanf>
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011a7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011a80:	edd4 7a08 	vldr	s15, [r4, #32]
    svf->g = tanf(PI * svf->cutoff * svf->invSampleRate);
 8011a84:	ed84 0a07 	vstr	s0, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011a88:	ee70 7a27 	vadd.f32	s15, s0, s15
 8011a8c:	eeb0 6a66 	vmov.f32	s12, s13
 8011a90:	eea0 6a27 	vfma.f32	s12, s0, s15
 8011a94:	ee86 7a86 	vdiv.f32	s14, s13, s12
    svf->a2 = svf->g * svf->a1;
 8011a98:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011a9c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011aa0:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8011aa4:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011aa8:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
}
 8011aac:	bd10      	pop	{r4, pc}
 8011aae:	bf00      	nop
 8011ab0:	00000000 	.word	0x00000000
 8011ab4:	40490fdb 	.word	0x40490fdb

08011ab8 <tSVF_setFreqFast>:

void    tSVF_setFreqFast     (tSVF* const vf, Lfloat cutoff)
{
	_tSVF* svf = *vf;
	svf->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011ab8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8011b38 <tSVF_setFreqFast+0x80>
 8011abc:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tSVF* svf = *vf;
 8011ac0:	6803      	ldr	r3, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011ac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; //get 0-134 midi range to 0-4095
 8011ac6:	ee20 7a07 	vmul.f32	s14, s0, s14
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011aca:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
	svf->cutoffMIDI = cutoff;
 8011acc:	ed83 0a04 	vstr	s0, [r3, #16]
    int32_t intVer = (int32_t)cutoff;
 8011ad0:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011ad4:	ed93 6a08 	vldr	s12, [r3, #32]
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011ad8:	ee76 5ac7 	vsub.f32	s11, s13, s14
    int32_t intVer = (int32_t)cutoff;
 8011adc:	ee17 2a90 	vmov	r2, s15
 8011ae0:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8011ae4:	4562      	cmp	r2, ip
 8011ae6:	bfa8      	it	ge
 8011ae8:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011aea:	ee07 2a90 	vmov	s15, r2
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011aee:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011af2:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011af6:	ed92 4a01 	vldr	s8, [r2, #4]
 8011afa:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8011afe:	ee77 7a45 	vsub.f32	s15, s14, s10
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011b02:	ee35 7a85 	vadd.f32	s14, s11, s10
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b06:	eef0 5a66 	vmov.f32	s11, s13
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011b0a:	ee67 7a84 	vmul.f32	s15, s15, s8
 8011b0e:	eee4 7a87 	vfma.f32	s15, s9, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b12:	ee37 7a86 	vadd.f32	s14, s15, s12
    svf->g = (svf->table[intVer] * (1.0f - LfloatVer)) + (svf->table[intVer+1] * LfloatVer);
 8011b16:	edc3 7a07 	vstr	s15, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b1a:	eee7 5a87 	vfma.f32	s11, s15, s14
 8011b1e:	ee86 6aa5 	vdiv.f32	s12, s13, s11
    svf->a2 = svf->g * svf->a1;
 8011b22:	ee27 7a86 	vmul.f32	s14, s15, s12
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b26:	ed83 6a09 	vstr	s12, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011b2a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8011b2e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011b32:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8011b36:	4770      	bx	lr
 8011b38:	41f4898d 	.word	0x41f4898d

08011b3c <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, Lfloat Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8011b3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8011b40:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b42:	edd3 7a07 	vldr	s15, [r3, #28]
    svf->k = 1.0f/Q;
 8011b46:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8011b4a:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b4e:	eeb0 6a47 	vmov.f32	s12, s14
 8011b52:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8011b56:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b5a:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8011b5e:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8011b62:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8011b66:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8011b6a:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8011b6e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    svf->a3 = svf->g * svf->a2;
 8011b72:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8011b76:	4770      	bx	lr

08011b78 <tSVF_setSampleRate>:

void    tSVF_setSampleRate  (tSVF* const svff, Lfloat sr)
{
    _tSVF* svf = *svff;
    svf->sampleRate = sr;
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8011b78:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8011b7c:	6803      	ldr	r3, [r0, #0]
    svf->sampleRate = sr;
 8011b7e:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    svf->invSampleRate = 1.0f/svf->sampleRate;
 8011b82:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011b86:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
}
 8011b8a:	4770      	bx	lr

08011b8c <tHighpass_init>:

#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, Lfloat freq, LEAF* const leaf)
{
 8011b8c:	b538      	push	{r3, r4, r5, lr}
 8011b8e:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, Lfloat freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8011b92:	698c      	ldr	r4, [r1, #24]
{
 8011b94:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011b96:	2018      	movs	r0, #24
{
 8011b98:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011b9c:	4621      	mov	r1, r4
 8011b9e:	f002 fd21 	bl	80145e4 <mpool_calloc>
 8011ba2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011ba4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011ba6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011baa:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8011bac:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011bae:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8011bb2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011bb4:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8011bb8:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8011bba:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011bbe:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011bc2:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8011bc6:	ecbd 8b02 	vpop	{d8}
 8011bca:	bd38      	pop	{r3, r4, r5, pc}

08011bcc <tHighpass_initToPool>:
{
 8011bcc:	b538      	push	{r3, r4, r5, lr}
 8011bce:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8011bd2:	680c      	ldr	r4, [r1, #0]
{
 8011bd4:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011bd6:	2018      	movs	r0, #24
{
 8011bd8:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8011bdc:	4621      	mov	r1, r4
 8011bde:	f002 fd01 	bl	80145e4 <mpool_calloc>
 8011be2:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011be4:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011be6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011bea:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8011bec:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011bee:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8011bf2:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011bf4:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 8011bf8:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 8011bfa:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8011bfe:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011c02:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8011c06:	ecbd 8b02 	vpop	{d8}
 8011c0a:	bd38      	pop	{r3, r4, r5, pc}

08011c0c <tHighpass_free>:

void tHighpass_free  (tHighpass* const ft)
{
    _tHighpass* f = *ft;
 8011c0c:	6800      	ldr	r0, [r0, #0]
    mpool_free((char*)f, f->mempool);
 8011c0e:	6801      	ldr	r1, [r0, #0]
 8011c10:	f002 bd46 	b.w	80146a0 <mpool_free>

08011c14 <tHighpass_setFreq>:
}

void tHighpass_setFreq(tHighpass* const ft, Lfloat freq)
{
    _tHighpass* f = *ft;
 8011c14:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011c16:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011c1a:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 8011c1e:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8011c22:	eee7 7a40 	vfms.f32	s15, s14, s0
 8011c26:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011c2a:	4770      	bx	lr

08011c2c <tHighpass_tick>:
}

// From JOS DC Blocker
Lfloat tHighpass_tick(tHighpass* const ft, Lfloat x)
{
    _tHighpass* f = *ft;
 8011c2c:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8011c2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8011c32:	ed93 7a02 	vldr	s14, [r3, #8]
 8011c36:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8011c3a:	ed83 0a01 	vstr	s0, [r3, #4]
 8011c3e:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8011c42:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011c46:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8011c4a:	4770      	bx	lr

08011c4c <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, Lfloat sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011c4c:	eddf 6a07 	vldr	s13, [pc, #28]	; 8011c6c <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011c50:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 8011c54:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011c56:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011c5a:	edd3 6a04 	vldr	s13, [r3, #16]
 8011c5e:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8011c62:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8011c66:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011c6a:	4770      	bx	lr
 8011c6c:	40c90fdb 	.word	0x40c90fdb

08011c70 <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

Lfloat   tVZFilter_tickEfficient             (tVZFilter* const vf, Lfloat in)
{
    _tVZFilter* f = *vf;
 8011c70:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011c72:	edd3 6a03 	vldr	s13, [r3, #12]
 8011c76:	ed93 7a02 	vldr	s14, [r3, #8]
 8011c7a:	ee70 7a66 	vsub.f32	s15, s0, s13
 8011c7e:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8011c82:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8011c86:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011c8a:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8011c8e:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8011c92:	edd3 4a08 	vldr	s9, [r3, #32]
 8011c96:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8011c9a:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8011c9e:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8011ca2:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8011ca6:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011caa:	eeb0 5a47 	vmov.f32	s10, s14
 8011cae:	eea4 0a87 	vfma.f32	s0, s9, s14
 8011cb2:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011cb6:	eef0 7a66 	vmov.f32	s15, s13
}
 8011cba:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011cbe:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8011cc2:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8011cc6:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8011cca:	4770      	bx	lr

08011ccc <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8011ccc:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8011cce:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011cd0:	eddf 7a98 	vldr	s15, [pc, #608]	; 8011f34 <tVZFilter_calcCoeffs+0x268>
{
 8011cd4:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011cd8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8011cdc:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8011ce0:	ee68 8a87 	vmul.f32	s17, s17, s14
 8011ce4:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011ce8:	eeb0 0a68 	vmov.f32	s0, s17
 8011cec:	f007 fc06 	bl	80194fc <tanf>
    
    switch( f->type )
 8011cf0:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011cf2:	eeb0 8a40 	vmov.f32	s16, s0
 8011cf6:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8011cfa:	2b0a      	cmp	r3, #10
 8011cfc:	f200 8117 	bhi.w	8011f2e <tVZFilter_calcCoeffs+0x262>
 8011d00:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011d04:	002f0026 	.word	0x002f0026
 8011d08:	00410038 	.word	0x00410038
 8011d0c:	0056004d 	.word	0x0056004d
 8011d10:	00a1008b 	.word	0x00a1008b
 8011d14:	010a00b7 	.word	0x010a00b7
 8011d18:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8011d1a:	edd4 7a05 	vldr	s15, [r4, #20]
 8011d1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011d22:	eeb1 7a67 	vneg.f32	s14, s15
 8011d26:	61e3      	str	r3, [r4, #28]
 8011d28:	6263      	str	r3, [r4, #36]	; 0x24
 8011d2a:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011d2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8011d32:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011d36:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8011d3a:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8011d3e:	eee7 6a88 	vfma.f32	s13, s15, s16
 8011d42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011d46:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8011d4a:	ecbd 8b02 	vpop	{d8}
 8011d4e:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d50:	2300      	movs	r3, #0
 8011d52:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d56:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d5a:	61e3      	str	r3, [r4, #28]
 8011d5c:	6223      	str	r3, [r4, #32]
 8011d5e:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8011d60:	e7e5      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011d62:	2300      	movs	r3, #0
 8011d64:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d68:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8011d6c:	6223      	str	r3, [r4, #32]
 8011d6e:	6263      	str	r3, [r4, #36]	; 0x24
 8011d70:	61e2      	str	r2, [r4, #28]
            break;
 8011d72:	e7dc      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011d74:	2300      	movs	r3, #0
 8011d76:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d7a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8011d7e:	61e3      	str	r3, [r4, #28]
 8011d80:	6263      	str	r3, [r4, #36]	; 0x24
 8011d82:	6222      	str	r2, [r4, #32]
            break;
 8011d84:	e7d3      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011d86:	edd4 7a05 	vldr	s15, [r4, #20]
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8011d90:	61e3      	str	r3, [r4, #28]
 8011d92:	ee27 7a27 	vmul.f32	s14, s14, s15
 8011d96:	6263      	str	r3, [r4, #36]	; 0x24
 8011d98:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8011d9c:	e7c7      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011d9e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011da2:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011da4:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8011da8:	6222      	str	r2, [r4, #32]
 8011daa:	61e3      	str	r3, [r4, #28]
 8011dac:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011dae:	e7be      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            Lfloat fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8011db0:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011db4:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8011db8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8011dbc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011dc0:	f007 f8ea 	bl	8018f98 <powf>
            Lfloat wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8011dc4:	ee28 0a80 	vmul.f32	s0, s17, s0
 8011dc8:	f007 fb98 	bl	80194fc <tanf>
            Lfloat r  = f->g/wl;
 8011dcc:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011dd0:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8011dd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011dd8:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8011ddc:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011de0:	ed84 7a07 	vstr	s14, [r4, #28]
 8011de4:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8011de8:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011dec:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8011df0:	eef0 6a47 	vmov.f32	s13, s14
 8011df4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011df8:	ee77 7a45 	vsub.f32	s15, s14, s10
 8011dfc:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8011e00:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8011e04:	eef1 7ac7 	vsqrt.f32	s15, s14
 8011e08:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011e0c:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8011e10:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011e14:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8011e18:	e789      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 8011e1a:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e1e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8011e22:	edd4 7a05 	vldr	s15, [r4, #20]
 8011e26:	eef1 6ac7 	vsqrt.f32	s13, s14
 8011e2a:	ed84 7a07 	vstr	s14, [r4, #28]
 8011e2e:	6263      	str	r3, [r4, #36]	; 0x24
 8011e30:	ee27 6a27 	vmul.f32	s12, s14, s15
 8011e34:	ed84 6a08 	vstr	s12, [r4, #32]
 8011e38:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e3c:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8011e40:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8011e44:	e773      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            Lfloat A = sqrtf(f->G);
 8011e46:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011e4a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8011e4e:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e52:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8011e56:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8011e5a:	61e3      	str	r3, [r4, #28]
 8011e5c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8011e60:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8011e64:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8011e68:	ee20 8a07 	vmul.f32	s16, s0, s14
 8011e6c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8011e70:	e75d      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            Lfloat x  = (2.0f*f->m-1.0f);
 8011e72:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011e76:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8011e7a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011e7e:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8011f38 <tVZFilter_calcCoeffs+0x26c>
 8011e82:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 8011e86:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011e8a:	eeb0 0a48 	vmov.f32	s0, s16
 8011e8e:	eea7 0a67 	vfms.f32	s0, s14, s15
 8011e92:	f002 fb21 	bl	80144d8 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011e96:	eddf 0a28 	vldr	s1, [pc, #160]	; 8011f38 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8011e9a:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011e9e:	eeb0 0a68 	vmov.f32	s0, s17
 8011ea2:	f002 fb1d 	bl	80144e0 <minimum>
            f->cB = 1.0f-x*x;
 8011ea6:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011eaa:	edd4 7a05 	vldr	s15, [r4, #20]
 8011eae:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8011eb2:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011eb6:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8011eba:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8011ebe:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011ec2:	ee76 5a06 	vadd.f32	s11, s12, s12
 8011ec6:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8011eca:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011ece:	eee6 7a06 	vfma.f32	s15, s12, s12
 8011ed2:	eee0 7a00 	vfma.f32	s15, s0, s0
 8011ed6:	eee0 7a65 	vfms.f32	s15, s0, s11
 8011eda:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8011ede:	f001 fedf 	bl	8013ca0 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011ee2:	edd4 5a07 	vldr	s11, [r4, #28]
 8011ee6:	ed94 6a08 	vldr	s12, [r4, #32]
 8011eea:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8011eee:	edd4 7a05 	vldr	s15, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011ef2:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8011ef6:	ed94 8a04 	vldr	s16, [r4, #16]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8011efa:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8011efe:	ee65 5a80 	vmul.f32	s11, s11, s0
 8011f02:	ee26 6a00 	vmul.f32	s12, s12, s0
 8011f06:	ee66 6a80 	vmul.f32	s13, s13, s0
 8011f0a:	edc4 5a07 	vstr	s11, [r4, #28]
 8011f0e:	ed84 6a08 	vstr	s12, [r4, #32]
 8011f12:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 8011f16:	e70a      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8011f18:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8011f1c:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8011f20:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8011f22:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8011f26:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8011f2a:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8011f2c:	e6ff      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8011f2e:	edd4 7a05 	vldr	s15, [r4, #20]
 8011f32:	e6fc      	b.n	8011d2e <tVZFilter_calcCoeffs+0x62>
 8011f34:	40490fdb 	.word	0x40490fdb
 8011f38:	00000000 	.word	0x00000000

08011f3c <tVZFilter_initToPool>:
{
 8011f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011f40:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8011f44:	6816      	ldr	r6, [r2, #0]
{
 8011f46:	b082      	sub	sp, #8
 8011f48:	4605      	mov	r5, r0
 8011f4a:	460f      	mov	r7, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011f4c:	2054      	movs	r0, #84	; 0x54
 8011f4e:	4631      	mov	r1, r6
{
 8011f50:	eef0 8a60 	vmov.f32	s17, s1
 8011f54:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011f58:	f002 fae0 	bl	801451c <mpool_alloc>
 8011f5c:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8011f5e:	6006      	str	r6, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011f60:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8011f64:	6876      	ldr	r6, [r6, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8011f66:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011f68:	ed9f 8a47 	vldr	s16, [pc, #284]	; 8012088 <tVZFilter_initToPool+0x14c>
    f->sampleRate = leaf->sampleRate;
 8011f6c:	ed96 1a00 	vldr	s2, [r6]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011f70:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f74:	eeb0 0a48 	vmov.f32	s0, s16
    f->sampleRate = leaf->sampleRate;
 8011f78:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011f7c:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8011f80:	6873      	ldr	r3, [r6, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011f82:	ed9f 9a42 	vldr	s18, [pc, #264]	; 801208c <tVZFilter_initToPool+0x150>
    f->invSampleRate = leaf->invSampleRate;
 8011f86:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8011f88:	f001 ffc6 	bl	8013f18 <LEAF_clip>
 8011f8c:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->cutoffMIDI = ftom(f->fc);
 8011f90:	f002 fa40 	bl	8014414 <ftom>
    f->invG = 1.414213562373095f;
 8011f94:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8012090 <tVZFilter_initToPool+0x154>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011f98:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8011f9c:	ed94 6a12 	vldr	s12, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8011fa0:	edd4 7a04 	vldr	s15, [r4, #16]
    f->cutoffMIDI = ftom(f->fc);
 8011fa4:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011fa8:	ee26 0a86 	vmul.f32	s0, s13, s12
    f->R2Plusg = f->R2 + f->g;
 8011fac:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = INV_SQRT2;
 8011fb0:	4b38      	ldr	r3, [pc, #224]	; (8012094 <tVZFilter_initToPool+0x158>)
    f->invG = 1.414213562373095f;
 8011fb2:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = INV_SQRT2;
 8011fb6:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011fb8:	ee20 0a09 	vmul.f32	s0, s0, s18
    f->R2   = f->invG;
 8011fbc:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8011fc0:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->type = type;
 8011fc4:	7127      	strb	r7, [r4, #4]
    f->B    = bandWidth;
 8011fc6:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8011fca:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8011fce:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8011fd2:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8011fd6:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011fda:	f007 fa8f 	bl	80194fc <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011fde:	ed9f 1a2e 	vldr	s2, [pc, #184]	; 8012098 <tVZFilter_initToPool+0x15c>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8011fe2:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011fe6:	eef0 0a68 	vmov.f32	s1, s17
 8011fea:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8011fee:	f8d5 8000 	ldr.w	r8, [r5]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8011ff2:	f001 ff91 	bl	8013f18 <LEAF_clip>
 8011ff6:	eef0 0a40 	vmov.f32	s1, s0
}

Lfloat tVZFilter_BandwidthToR(tVZFilter* const vf, Lfloat B)
{
    _tVZFilter* f = *vf;
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8011ffa:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8011ffe:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8012002:	edc8 0a0e 	vstr	s1, [r8, #56]	; 0x38
    _tVZFilter* f = *vf;
 8012006:	682f      	ldr	r7, [r5, #0]
    Lfloat fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8012008:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801200c:	f006 ffc4 	bl	8018f98 <powf>
    Lfloat gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012010:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8012014:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8012018:	ee67 7a87 	vmul.f32	s15, s15, s14
 801201c:	ee67 7a89 	vmul.f32	s15, s15, s18
 8012020:	ee27 0a80 	vmul.f32	s0, s15, s0
 8012024:	f007 fa6a 	bl	80194fc <tanf>
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8012028:	ed97 6a04 	vldr	s12, [r7, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 801202c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8012030:	4628      	mov	r0, r5
    Lfloat r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8012032:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8012036:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 801203a:	ee27 7a07 	vmul.f32	s14, s14, s14
 801203e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012042:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8012046:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801204a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801204e:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 8012052:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8012056:	edc8 7a05 	vstr	s15, [r8, #20]
    tVZFilter_calcCoeffs(vf);
 801205a:	f7ff fe37 	bl	8011ccc <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 801205e:	4628      	mov	r0, r5
 8012060:	f7ff fe34 	bl	8011ccc <tVZFilter_calcCoeffs>
    if (leaf->sampleRate > 90000)
 8012064:	ed96 7a00 	vldr	s14, [r6]
 8012068:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801209c <tVZFilter_initToPool+0x160>
    	f->table = __filterTanhTable_48000;
 801206c:	4a0c      	ldr	r2, [pc, #48]	; (80120a0 <tVZFilter_initToPool+0x164>)
 801206e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012072:	4b0c      	ldr	r3, [pc, #48]	; (80120a4 <tVZFilter_initToPool+0x168>)
 8012074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012078:	bfd8      	it	le
 801207a:	4613      	movle	r3, r2
 801207c:	6523      	str	r3, [r4, #80]	; 0x50
}
 801207e:	b002      	add	sp, #8
 8012080:	ecbd 8b04 	vpop	{d8-d9}
 8012084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012088:	00000000 	.word	0x00000000
 801208c:	40490fdb 	.word	0x40490fdb
 8012090:	3fb504f3 	.word	0x3fb504f3
 8012094:	3f3504f3 	.word	0x3f3504f3
 8012098:	42c80000 	.word	0x42c80000
 801209c:	47afc800 	.word	0x47afc800
 80120a0:	0801be3c 	.word	0x0801be3c
 80120a4:	0801fe3c 	.word	0x0801fe3c

080120a8 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 80120a8:	3218      	adds	r2, #24
 80120aa:	f7ff bf47 	b.w	8011f3c <tVZFilter_initToPool>
 80120ae:	bf00      	nop

080120b0 <tVZFilter_setFreq>:
{
 80120b0:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 80120b2:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80120b4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80120b8:	4604      	mov	r4, r0
 80120ba:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80120be:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 80120c2:	ed9f 0a06 	vldr	s0, [pc, #24]	; 80120dc <tVZFilter_setFreq+0x2c>
 80120c6:	ee21 1a27 	vmul.f32	s2, s2, s15
 80120ca:	f001 ff25 	bl	8013f18 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 80120ce:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80120d0:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 80120d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80120d8:	f7ff bdf8 	b.w	8011ccc <tVZFilter_calcCoeffs>
 80120dc:	00000000 	.word	0x00000000

080120e0 <tVZFilter_setFreqFast>:
	 cutoff *= 30.567164179104478f;
 80120e0:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 80123a8 <tVZFilter_setFreqFast+0x2c8>
 80120e4:	f640 7cfe 	movw	ip, #4094	; 0xffe
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80120e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	 cutoff *= 30.567164179104478f;
 80120ec:	ee20 7a07 	vmul.f32	s14, s0, s14
{
 80120f0:	b510      	push	{r4, lr}
	    int32_t intVer = (int32_t)cutoff;
 80120f2:	eefd 7ac7 	vcvt.s32.f32	s15, s14
	 _tVZFilter* f = *vf;
 80120f6:	6804      	ldr	r4, [r0, #0]
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80120f8:	ee76 6ac7 	vsub.f32	s13, s13, s14
	    int32_t intVer = (int32_t)cutoff;
 80120fc:	ee17 3a90 	vmov	r3, s15
 8012100:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8012104:	4563      	cmp	r3, ip
 8012106:	bfa8      	it	ge
 8012108:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801210a:	ee07 3a90 	vmov	s15, r3
{
 801210e:	ed2d 8b02 	vpush	{d8}
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012112:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8012116:	6d22      	ldr	r2, [r4, #80]	; 0x50
	 f->cutoffMIDI = cutoff;
 8012118:	ed84 0a13 	vstr	s0, [r4, #76]	; 0x4c
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 801211c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    switch( f->type )
 8012120:	7921      	ldrb	r1, [r4, #4]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012122:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8012126:	ed93 5a01 	vldr	s10, [r3, #4]
 801212a:	ee36 7a86 	vadd.f32	s14, s13, s12
 801212e:	edd3 5a00 	vldr	s11, [r3]
 8012132:	ee67 7a85 	vmul.f32	s15, s15, s10
 8012136:	eee5 7a87 	vfma.f32	s15, s11, s14
 801213a:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 801213e:	290a      	cmp	r1, #10
 8012140:	f200 812f 	bhi.w	80123a2 <tVZFilter_setFreqFast+0x2c2>
 8012144:	e8df f011 	tbh	[pc, r1, lsl #1]
 8012148:	002f0026 	.word	0x002f0026
 801214c:	00410038 	.word	0x00410038
 8012150:	0056004d 	.word	0x0056004d
 8012154:	00b5009b 	.word	0x00b5009b
 8012158:	012200cf 	.word	0x012200cf
 801215c:	000b      	.short	0x000b
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 801215e:	ed94 7a05 	vldr	s14, [r4, #20]
 8012162:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8012166:	eef1 6a47 	vneg.f32	s13, s14
 801216a:	61e3      	str	r3, [r4, #28]
 801216c:	6263      	str	r3, [r4, #36]	; 0x24
 801216e:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8012172:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8012176:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 801217a:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801217e:	eef0 6a47 	vmov.f32	s13, s14
 8012182:	eee0 6a27 	vfma.f32	s13, s0, s15
 8012186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801218a:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801218e:	ecbd 8b02 	vpop	{d8}
 8012192:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8012194:	2300      	movs	r3, #0
 8012196:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 801219a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801219e:	61e3      	str	r3, [r4, #28]
 80121a0:	6223      	str	r3, [r4, #32]
 80121a2:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 80121a4:	e7e5      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80121a6:	2300      	movs	r3, #0
 80121a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80121ac:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 80121b0:	6223      	str	r3, [r4, #32]
 80121b2:	6263      	str	r3, [r4, #36]	; 0x24
 80121b4:	61e2      	str	r2, [r4, #28]
            break;
 80121b6:	e7dc      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80121b8:	2300      	movs	r3, #0
 80121ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80121be:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 80121c2:	61e3      	str	r3, [r4, #28]
 80121c4:	6263      	str	r3, [r4, #36]	; 0x24
 80121c6:	6222      	str	r2, [r4, #32]
            break;
 80121c8:	e7d3      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80121ca:	ed94 7a05 	vldr	s14, [r4, #20]
 80121ce:	2300      	movs	r3, #0
 80121d0:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80121d4:	61e3      	str	r3, [r4, #28]
 80121d6:	ee66 6a87 	vmul.f32	s13, s13, s14
 80121da:	6263      	str	r3, [r4, #36]	; 0x24
 80121dc:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 80121e0:	e7c7      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80121e2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80121e6:	2200      	movs	r2, #0
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80121e8:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80121ec:	6222      	str	r2, [r4, #32]
 80121ee:	61e3      	str	r3, [r4, #28]
 80121f0:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80121f2:	e7be      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80121f4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80121f8:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80121fc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012200:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012204:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012208:	ee60 0aa7 	vmul.f32	s1, s1, s15
 801220c:	f001 fdf6 	bl	8013dfc <fastPowf>
            Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012210:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8012214:	eddf 7a65 	vldr	s15, [pc, #404]	; 80123ac <tVZFilter_setFreqFast+0x2cc>
 8012218:	ee28 8a07 	vmul.f32	s16, s16, s14
 801221c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012220:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012224:	f001 fd28 	bl	8013c78 <fastertanf>
            Lfloat r  = f->g/wl;
 8012228:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801222c:	eeb0 5a68 	vmov.f32	s10, s17
 8012230:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            Lfloat r  = f->g/wl;
 8012234:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012238:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 801223c:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012240:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012244:	eea7 5aa7 	vfma.f32	s10, s15, s15
 8012248:	ee85 7a27 	vdiv.f32	s14, s10, s15
 801224c:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012250:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012254:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012258:	f001 fd22 	bl	8013ca0 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801225c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 8012260:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012264:	edc4 8a07 	vstr	s17, [r4, #28]
 8012268:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801226c:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012270:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012274:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8012278:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801227c:	e779      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 801227e:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8012282:	f001 fd0d 	bl	8013ca0 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8012286:	f001 fd0b 	bl	8013ca0 <fastsqrtf>
 801228a:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801228e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8012292:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8012296:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801229a:	ed94 7a05 	vldr	s14, [r4, #20]
 801229e:	edc4 6a07 	vstr	s13, [r4, #28]
 80122a2:	6263      	str	r3, [r4, #36]	; 0x24
 80122a4:	ee66 6a87 	vmul.f32	s13, s13, s14
 80122a8:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80122ac:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 80122b0:	e75f      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            Lfloat A = fastsqrtf(f->G);
 80122b2:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 80122b6:	f001 fcf3 	bl	8013ca0 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80122ba:	f001 fcf1 	bl	8013ca0 <fastsqrtf>
 80122be:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80122c2:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80122c6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80122ca:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80122ce:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80122d2:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 80122d6:	ee67 6a26 	vmul.f32	s13, s14, s13
 80122da:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 80122dc:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 80122e0:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 80122e4:	e745      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            Lfloat x  = (2.0f*f->m-1.0f);
 80122e6:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 80122ea:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80122ee:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80122f2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 80123b0 <tVZFilter_setFreqFast+0x2d0>
 80122f6:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            Lfloat x  = (2.0f*f->m-1.0f);
 80122fa:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80122fe:	eeb0 0a48 	vmov.f32	s0, s16
 8012302:	eea7 0a67 	vfms.f32	s0, s14, s15
 8012306:	f002 f8e7 	bl	80144d8 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 801230a:	eddf 0a29 	vldr	s1, [pc, #164]	; 80123b0 <tVZFilter_setFreqFast+0x2d0>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801230e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012312:	eeb0 0a68 	vmov.f32	s0, s17
 8012316:	f002 f8e3 	bl	80144e0 <minimum>
            f->cB = 1.0f-x*x;
 801231a:	eeb0 7a48 	vmov.f32	s14, s16
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801231e:	edd4 7a05 	vldr	s15, [r4, #20]
 8012322:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8012326:	eea8 7ae8 	vfms.f32	s14, s17, s17
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801232a:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 801232e:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8012332:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012336:	ee76 5a06 	vadd.f32	s11, s12, s12
 801233a:	ee38 8a08 	vadd.f32	s16, s16, s16
 801233e:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8012342:	ed84 7a08 	vstr	s14, [r4, #32]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8012346:	eee6 7a06 	vfma.f32	s15, s12, s12
 801234a:	eee0 7a00 	vfma.f32	s15, s0, s0
 801234e:	eee0 7a65 	vfms.f32	s15, s0, s11
 8012352:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8012356:	f001 fca3 	bl	8013ca0 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 801235a:	edd4 5a07 	vldr	s11, [r4, #28]
 801235e:	ed94 6a08 	vldr	s12, [r4, #32]
 8012362:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8012366:	ed94 7a05 	vldr	s14, [r4, #20]
            Lfloat s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 801236a:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 801236e:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8012372:	ee65 5a80 	vmul.f32	s11, s11, s0
 8012376:	ee26 6a00 	vmul.f32	s12, s12, s0
 801237a:	ee66 6a80 	vmul.f32	s13, s13, s0
 801237e:	edc4 5a07 	vstr	s11, [r4, #28]
 8012382:	ed84 6a08 	vstr	s12, [r4, #32]
 8012386:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
        break;
 801238a:	e6f2      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            f->cL = 1.0f;
 801238c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8012390:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8012394:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8012396:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 801239a:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 801239e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80123a0:	e6e7      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 80123a2:	ed94 7a05 	vldr	s14, [r4, #20]
 80123a6:	e6e4      	b.n	8012172 <tVZFilter_setFreqFast+0x92>
 80123a8:	41f4898d 	.word	0x41f4898d
 80123ac:	40490fdb 	.word	0x40490fdb
 80123b0:	00000000 	.word	0x00000000

080123b4 <tVZFilter_setGain>:
{
 80123b4:	b538      	push	{r3, r4, r5, lr}
 80123b6:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80123ba:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80123e4 <tVZFilter_setGain+0x30>
 80123be:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80123e8 <tVZFilter_setGain+0x34>
{
 80123c2:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 80123c4:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80123c6:	f001 fda7 	bl	8013f18 <LEAF_clip>
    f->invG = 1.0f/f->G;
 80123ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80123ce:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80123d0:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 80123d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80123d8:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 80123dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80123e0:	f7ff bc74 	b.w	8011ccc <tVZFilter_calcCoeffs>
 80123e4:	457a0000 	.word	0x457a0000
 80123e8:	358637bd 	.word	0x358637bd

080123ec <tVZFilter_setResonance>:
{
 80123ec:	b538      	push	{r3, r4, r5, lr}
 80123ee:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 80123f2:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 801241c <tVZFilter_setResonance+0x30>
 80123f6:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8012420 <tVZFilter_setResonance+0x34>
{
 80123fa:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 80123fc:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 80123fe:	f001 fd8b 	bl	8013f18 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 8012402:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 8012406:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8012408:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 801240c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8012410:	edc5 7a05 	vstr	s15, [r5, #20]
}
 8012414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8012418:	f7ff bc58 	b.w	8011ccc <tVZFilter_calcCoeffs>
 801241c:	42c80000 	.word	0x42c80000
 8012420:	3c23d70a 	.word	0x3c23d70a

08012424 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, Lfloat sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 8012424:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8012428:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8012450 <tVZFilter_setSampleRate+0x2c>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 801242c:	4909      	ldr	r1, [pc, #36]	; (8012454 <tVZFilter_setSampleRate+0x30>)
 801242e:	eeb4 0ac7 	vcmpe.f32	s0, s14
    _tVZFilter* f = *vf;
 8012432:	6803      	ldr	r3, [r0, #0]
    f->invSampleRate = 1.0f/f->sampleRate;
 8012434:	eec6 7a80 	vdiv.f32	s15, s13, s0
    	f->table = __filterTanhTable_48000;
 8012438:	4a07      	ldr	r2, [pc, #28]	; (8012458 <tVZFilter_setSampleRate+0x34>)
    f->sampleRate = sr;
 801243a:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    	f->table = __filterTanhTable_48000;
 801243e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012442:	bfd8      	it	le
 8012444:	460a      	movle	r2, r1
 8012446:	651a      	str	r2, [r3, #80]	; 0x50
    f->invSampleRate = 1.0f/f->sampleRate;
 8012448:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
    }
}
 801244c:	4770      	bx	lr
 801244e:	bf00      	nop
 8012450:	47afc800 	.word	0x47afc800
 8012454:	0801be3c 	.word	0x0801be3c
 8012458:	0801fe3c 	.word	0x0801fe3c

0801245c <tVZFilterLS_initToPool>:
{
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterLS_initToPool     (tVZFilterLS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 801245c:	b570      	push	{r4, r5, r6, lr}
 801245e:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 8012462:	680d      	ldr	r5, [r1, #0]
{
 8012464:	b082      	sub	sp, #8
 8012466:	4606      	mov	r6, r0
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012468:	2048      	movs	r0, #72	; 0x48
 801246a:	4629      	mov	r1, r5
{
 801246c:	eef0 8a60 	vmov.f32	s17, s1
 8012470:	eeb0 9a41 	vmov.f32	s18, s2
 8012474:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012478:	f002 f850 	bl	801451c <mpool_alloc>
 801247c:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801247e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012480:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8012484:	686d      	ldr	r5, [r5, #4]
    _tVZFilterLS* f = *vf = (_tVZFilterLS*) mpool_alloc(sizeof(_tVZFilterLS), m);
 8012486:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012488:	eddf 6a37 	vldr	s13, [pc, #220]	; 8012568 <tVZFilterLS_initToPool+0x10c>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 801248c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8012490:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012494:	eddf 9a35 	vldr	s19, [pc, #212]	; 801256c <tVZFilterLS_initToPool+0x110>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012498:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 801249c:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80124a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80124a4:	ee27 1a81 	vmul.f32	s2, s15, s2
 80124a8:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 80124ac:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->invSampleRate = leaf->invSampleRate;
 80124b0:	686b      	ldr	r3, [r5, #4]
 80124b2:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80124b4:	f001 fd30 	bl	8013f18 <LEAF_clip>
 80124b8:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80124bc:	f001 ffaa 	bl	8014414 <ftom>
    f->R2 =    1.0f/Q;
 80124c0:	ee88 7a28 	vdiv.f32	s14, s16, s17
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80124c4:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 80124c8:	edd4 7a06 	vldr	s15, [r4, #24]
 80124cc:	eddf 6a28 	vldr	s13, [pc, #160]	; 8012570 <tVZFilterLS_initToPool+0x114>
    f->cutoffMIDI = ftom(f->fc);
 80124d0:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80124d4:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 80124d8:	edc4 8a08 	vstr	s17, [r4, #32]
    f->s1    = 0.0f;
 80124dc:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 80124e0:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80124e4:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 80124e8:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80124ec:	f007 f806 	bl	80194fc <tanf>
 80124f0:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80124f4:	eef0 0a49 	vmov.f32	s1, s18
 80124f8:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8012574 <tVZFilterLS_initToPool+0x118>
 80124fc:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 8012578 <tVZFilterLS_initToPool+0x11c>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 8012500:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012504:	f001 fd08 	bl	8013f18 <LEAF_clip>
 8012508:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 801250c:	f001 fbc8 	bl	8013ca0 <fastsqrtf>
 8012510:	f001 fbc6 	bl	8013ca0 <fastsqrtf>
 8012514:	eec8 6a00 	vdiv.f32	s13, s16, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012518:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 801251c:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8012520:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801257c <tVZFilterLS_initToPool+0x120>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012524:	4a16      	ldr	r2, [pc, #88]	; (8012580 <tVZFilterLS_initToPool+0x124>)
 8012526:	4b17      	ldr	r3, [pc, #92]	; (8012584 <tVZFilterLS_initToPool+0x128>)
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012528:	ee66 7aa7 	vmul.f32	s15, s13, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 801252c:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012530:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012534:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012538:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801253c:	eee7 6a87 	vfma.f32	s13, s15, s14
    f->R2Plusg = f->R2+f->g;
 8012540:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012544:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012548:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 801254c:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012550:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012558:	bfd8      	it	le
 801255a:	4613      	movle	r3, r2
 801255c:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 801255e:	b002      	add	sp, #8
 8012560:	ecbd 8b04 	vpop	{d8-d9}
 8012564:	bd70      	pop	{r4, r5, r6, pc}
 8012566:	bf00      	nop
 8012568:	473b8000 	.word	0x473b8000
 801256c:	00000000 	.word	0x00000000
 8012570:	40490fdb 	.word	0x40490fdb
 8012574:	457a0000 	.word	0x457a0000
 8012578:	358637bd 	.word	0x358637bd
 801257c:	47afc800 	.word	0x47afc800
 8012580:	0801be3c 	.word	0x0801be3c
 8012584:	0801fe3c 	.word	0x0801fe3c

08012588 <tVZFilterLS_init>:
    tVZFilterLS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8012588:	3118      	adds	r1, #24
 801258a:	f7ff bf67 	b.w	801245c <tVZFilterLS_initToPool>
 801258e:	bf00      	nop

08012590 <tVZFilterLS_setSampleRate>:

void    tVZFilterLS_setSampleRate  (tVZFilterLS* const vf, Lfloat sampleRate)
{
        _tVZFilterLS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012590:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012594:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80125c8 <tVZFilterLS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012598:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80125cc <tVZFilterLS_setSampleRate+0x3c>
       {
       	f->table = __filterTanhTable_96000;
       }
       else
       {
       	f->table = __filterTanhTable_48000;
 801259c:	490c      	ldr	r1, [pc, #48]	; (80125d0 <tVZFilterLS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 801259e:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterLS* f = *vf;
 80125a2:	6803      	ldr	r3, [r0, #0]
       	f->table = __filterTanhTable_48000;
 80125a4:	4a0b      	ldr	r2, [pc, #44]	; (80125d4 <tVZFilterLS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 80125a6:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 80125aa:	eec6 7a00 	vdiv.f32	s15, s12, s0
       	f->table = __filterTanhTable_48000;
 80125ae:	eeb4 0ae6 	vcmpe.f32	s0, s13
 80125b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125b6:	bfd8      	it	le
 80125b8:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 80125ba:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80125be:	641a      	str	r2, [r3, #64]	; 0x40
 80125c0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
       }
}
 80125c4:	4770      	bx	lr
 80125c6:	bf00      	nop
 80125c8:	473b8000 	.word	0x473b8000
 80125cc:	47afc800 	.word	0x47afc800
 80125d0:	0801be3c 	.word	0x0801be3c
 80125d4:	0801fe3c 	.word	0x0801fe3c

080125d8 <tVZFilterLS_tick>:
Lfloat   tVZFilterLS_tick               (tVZFilterLS* const vf, Lfloat input)
{
        _tVZFilterLS* f = *vf;
 80125d8:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80125da:	edd3 7a02 	vldr	s15, [r3, #8]
 80125de:	ed93 7a01 	vldr	s14, [r3, #4]
 80125e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80125e6:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
 80125ea:	edd3 5a05 	vldr	s11, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80125ee:	edd3 6a03 	vldr	s13, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80125f2:	eea5 0a47 	vfms.f32	s0, s10, s14
 80125f6:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->G*yL + f->R2*f->G*yB + yH;
 80125fa:	ed93 6a07 	vldr	s12, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80125fe:	ee20 0a25 	vmul.f32	s0, s0, s11
    yB = v1 + f->s1;
 8012602:	eea6 7a80 	vfma.f32	s14, s13, s0
    yL = v2 + f->s2;
 8012606:	eee6 7a87 	vfma.f32	s15, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801260a:	eeb0 5a47 	vmov.f32	s10, s14
 801260e:	eea6 5a80 	vfma.f32	s10, s13, s0
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012612:	eef0 5a67 	vmov.f32	s11, s15
 8012616:	eee4 7a87 	vfma.f32	s15, s9, s14
 801261a:	eee6 5a87 	vfma.f32	s11, s13, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 801261e:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8012622:	eea6 0a27 	vfma.f32	s0, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012626:	edc3 5a02 	vstr	s11, [r3, #8]
}
 801262a:	4770      	bx	lr

0801262c <tVZFilterLS_setFreqFast>:

void    tVZFilterLS_setFreqFast           (tVZFilterLS* const vf, Lfloat cutoff)
{
        _tVZFilterLS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 801262c:	eddf 7a21 	vldr	s15, [pc, #132]	; 80126b4 <tVZFilterLS_setFreqFast+0x88>
 8012630:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012634:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 8012638:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 801263a:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801263e:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012640:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 8012644:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 8012648:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801264c:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 8012650:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 8012654:	ee16 2a90 	vmov	r2, s13
    f->R2Plusg = f->R2+f->g;
 8012658:	edd3 6a04 	vldr	s13, [r3, #16]
 801265c:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012660:	4562      	cmp	r2, ip
 8012662:	bfa8      	it	ge
 8012664:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012666:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801266a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801266e:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012672:	ed92 4a01 	vldr	s8, [r2, #4]
 8012676:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801267a:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801267e:	ee75 5a85 	vadd.f32	s11, s11, s10
 8012682:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8012686:	ee67 7a84 	vmul.f32	s15, s15, s8
 801268a:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 801268e:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012692:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012696:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 801269a:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801269e:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 80126a2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80126a6:	eee7 6a27 	vfma.f32	s13, s14, s15
 80126aa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80126ae:	edc3 7a05 	vstr	s15, [r3, #20]
}
 80126b2:	4770      	bx	lr
 80126b4:	41f4898d 	.word	0x41f4898d

080126b8 <tVZFilterLS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterLS_setGain                  (tVZFilterLS* const vf, Lfloat gain)
{
 80126b8:	b510      	push	{r4, lr}
        _tVZFilterLS* f = *vf;
 80126ba:	6804      	ldr	r4, [r0, #0]
{
 80126bc:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80126c0:	ed9f 1a13 	vldr	s2, [pc, #76]	; 8012710 <tVZFilterLS_setGain+0x58>
 80126c4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8012714 <tVZFilterLS_setGain+0x5c>
 80126c8:	f001 fc26 	bl	8013f18 <LEAF_clip>
 80126cc:	ed84 0a07 	vstr	s0, [r4, #28]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80126d0:	f001 fae6 	bl	8013ca0 <fastsqrtf>
 80126d4:	f001 fae4 	bl	8013ca0 <fastsqrtf>
 80126d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80126dc:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 80126e0:	ed94 7a04 	vldr	s14, [r4, #16]
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80126e4:	ee86 6a80 	vdiv.f32	s12, s13, s0
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80126e8:	ee66 7a27 	vmul.f32	s15, s12, s15
    f->invSqrtA = 1.0f / (fastsqrtf(fastsqrtf(f->G)));
 80126ec:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80126f0:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 80126f4:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->invSqrtA;               // scale SVF-cutoff frequency for shelvers
 80126f8:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80126fc:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 8012700:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012704:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8012708:	edc4 7a05 	vstr	s15, [r4, #20]
}
 801270c:	bd10      	pop	{r4, pc}
 801270e:	bf00      	nop
 8012710:	457a0000 	.word	0x457a0000
 8012714:	358637bd 	.word	0x358637bd

08012718 <tVZFilterLS_setResonance>:

void    tVZFilterLS_setResonance                (tVZFilterLS* const vf, Lfloat res)
{
        _tVZFilterLS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 8012718:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterLS* f = *vf;
 801271c:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 801271e:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 8012722:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 8012726:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 801272a:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 801272e:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012732:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 8012736:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801273a:	eea6 6a87 	vfma.f32	s12, s13, s14
 801273e:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8012742:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8012746:	4770      	bx	lr

08012748 <tVZFilterHS_initToPool>:
{
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
}

void    tVZFilterHS_initToPool     (tVZFilterHS* const vf, Lfloat freq, Lfloat Q, Lfloat gain, tMempool* const mp)
{
 8012748:	b570      	push	{r4, r5, r6, lr}
 801274a:	ed2d 8b04 	vpush	{d8-d9}
    _tMempool* m = *mp;
 801274e:	680d      	ldr	r5, [r1, #0]
{
 8012750:	b082      	sub	sp, #8
 8012752:	4606      	mov	r6, r0
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 8012754:	2048      	movs	r0, #72	; 0x48
 8012756:	4629      	mov	r1, r5
{
 8012758:	eeb0 8a60 	vmov.f32	s16, s1
 801275c:	eeb0 9a41 	vmov.f32	s18, s2
 8012760:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 8012764:	f001 feda 	bl	801451c <mpool_alloc>
 8012768:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 801276a:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801276c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 8012770:	686d      	ldr	r5, [r5, #4]
    _tVZFilterHS* f = *vf = (_tVZFilterHS*) mpool_alloc(sizeof(_tVZFilterHS), m);
 8012772:	4604      	mov	r4, r0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012774:	eddf 6a36 	vldr	s13, [pc, #216]	; 8012850 <tVZFilterHS_initToPool+0x108>
    f->cutoffMIDI = ftom(f->fc);
    f->Q    = Q;
    f->R2 =    1.0f/Q;
 8012778:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 801277c:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012780:	eddf 9a34 	vldr	s19, [pc, #208]	; 8012854 <tVZFilterHS_initToPool+0x10c>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012784:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012788:	edc0 7a0b 	vstr	s15, [r0, #44]	; 0x2c
    f->invSampleRate = leaf->invSampleRate;
 801278c:	686b      	ldr	r3, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801278e:	eddd 0a01 	vldr	s1, [sp, #4]
    f->invSampleRate = leaf->invSampleRate;
 8012792:	6303      	str	r3, [r0, #48]	; 0x30
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012794:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012798:	eeb0 0a69 	vmov.f32	s0, s19
    f->sampRatio = 48000.0f / f->sampleRate;
 801279c:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 80127a0:	f001 fbba 	bl	8013f18 <LEAF_clip>
 80127a4:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 80127a8:	f001 fe34 	bl	8014414 <ftom>
    f->R2 =    1.0f/Q;
 80127ac:	ee88 7a88 	vdiv.f32	s14, s17, s16
    f->s1    = 0.0f;
    f->s2   = 0.0f;
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80127b0:	ed94 6a0c 	vldr	s12, [r4, #48]	; 0x30
 80127b4:	edd4 7a06 	vldr	s15, [r4, #24]
 80127b8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8012858 <tVZFilterHS_initToPool+0x110>
    f->cutoffMIDI = ftom(f->fc);
 80127bc:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80127c0:	ee67 7a86 	vmul.f32	s15, s15, s12
    f->Q    = Q;
 80127c4:	ed84 8a08 	vstr	s16, [r4, #32]
    f->s1    = 0.0f;
 80127c8:	edc4 9a01 	vstr	s19, [r4, #4]
    f->s2   = 0.0f;
 80127cc:	edc4 9a02 	vstr	s19, [r4, #8]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80127d0:	ee27 0aa6 	vmul.f32	s0, s15, s13
    f->R2 =    1.0f/Q;
 80127d4:	ed84 7a04 	vstr	s14, [r4, #16]
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80127d8:	f006 fe90 	bl	80194fc <tanf>
 80127dc:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80127e0:	eef0 0a49 	vmov.f32	s1, s18
 80127e4:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 801285c <tVZFilterHS_initToPool+0x114>
 80127e8:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8012860 <tVZFilterHS_initToPool+0x118>
    f->gPreDiv = tanf(PI * f->fc * f->invSampleRate);
 80127ec:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80127f0:	f001 fb92 	bl	8013f18 <LEAF_clip>
 80127f4:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 80127f8:	f001 fa52 	bl	8013ca0 <fastsqrtf>
 80127fc:	f001 fa50 	bl	8013ca0 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012800:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 8012804:	ed94 7a04 	vldr	s14, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012808:	eeb0 6a68 	vmov.f32	s12, s17
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801280c:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (leaf->sampleRate > 90000)
 8012810:	eddf 6a14 	vldr	s13, [pc, #80]	; 8012864 <tVZFilterHS_initToPool+0x11c>
    f->sqrtA = (fastsqrtf(fastsqrtf(f->G)));
 8012814:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012818:	4a13      	ldr	r2, [pc, #76]	; (8012868 <tVZFilterHS_initToPool+0x120>)
    f->R2Plusg = f->R2+f->g;
 801281a:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 801281e:	edc4 7a03 	vstr	s15, [r4, #12]
    	f->table = __filterTanhTable_48000;
 8012822:	4b12      	ldr	r3, [pc, #72]	; (801286c <tVZFilterHS_initToPool+0x124>)
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012824:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 8012828:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801282c:	eec8 7a86 	vdiv.f32	s15, s17, s12
 8012830:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8012834:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012838:	eef4 7ae6 	vcmpe.f32	s15, s13
 801283c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012840:	bfd8      	it	le
 8012842:	4613      	movle	r3, r2
 8012844:	6423      	str	r3, [r4, #64]	; 0x40
    }
}
 8012846:	b002      	add	sp, #8
 8012848:	ecbd 8b04 	vpop	{d8-d9}
 801284c:	bd70      	pop	{r4, r5, r6, pc}
 801284e:	bf00      	nop
 8012850:	473b8000 	.word	0x473b8000
 8012854:	00000000 	.word	0x00000000
 8012858:	40490fdb 	.word	0x40490fdb
 801285c:	457a0000 	.word	0x457a0000
 8012860:	358637bd 	.word	0x358637bd
 8012864:	47afc800 	.word	0x47afc800
 8012868:	0801be3c 	.word	0x0801be3c
 801286c:	0801fe3c 	.word	0x0801fe3c

08012870 <tVZFilterHS_init>:
    tVZFilterHS_initToPool(vf, freq, Q, gain, &leaf->mempool);
 8012870:	3118      	adds	r1, #24
 8012872:	f7ff bf69 	b.w	8012748 <tVZFilterHS_initToPool>
 8012876:	bf00      	nop

08012878 <tVZFilterHS_setSampleRate>:

void    tVZFilterHS_setSampleRate  (tVZFilterHS* const vf, Lfloat sampleRate)
{
        _tVZFilterHS* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012878:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 801287c:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 80128b0 <tVZFilterHS_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012880:	eddf 6a0c 	vldr	s13, [pc, #48]	; 80128b4 <tVZFilterHS_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8012884:	490c      	ldr	r1, [pc, #48]	; (80128b8 <tVZFilterHS_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 8012886:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterHS* f = *vf;
 801288a:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 801288c:	4a0b      	ldr	r2, [pc, #44]	; (80128bc <tVZFilterHS_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 801288e:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8012892:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 8012896:	eeb4 0ae6 	vcmpe.f32	s0, s13
 801289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801289e:	bfd8      	it	le
 80128a0:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 80128a2:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30
    f->sampRatio = 48000.0f / f->sampleRate;
 80128a6:	641a      	str	r2, [r3, #64]	; 0x40
 80128a8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
          }
}
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	473b8000 	.word	0x473b8000
 80128b4:	47afc800 	.word	0x47afc800
 80128b8:	0801be3c 	.word	0x0801be3c
 80128bc:	0801fe3c 	.word	0x0801fe3c

080128c0 <tVZFilterHS_tick>:
Lfloat   tVZFilterHS_tick               (tVZFilterHS* const vf, Lfloat input)
{
        _tVZFilterHS* f = *vf;
 80128c0:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80128c2:	edd3 6a02 	vldr	s13, [r3, #8]
 80128c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80128ca:	ee70 7a66 	vsub.f32	s15, s0, s13
 80128ce:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
 80128d2:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 80128d6:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80128da:	eee4 7a47 	vfms.f32	s15, s8, s14
 80128de:	edd3 4a04 	vldr	s9, [r3, #16]
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + f->G*yH;
 80128e2:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 80128e6:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 80128ea:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 80128ee:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 80128f2:	eeb0 5a47 	vmov.f32	s10, s14
 80128f6:	eea6 5a27 	vfma.f32	s10, s12, s15
 80128fa:	eee4 7a87 	vfma.f32	s15, s9, s14
    yL = v2 + f->s2;
 80128fe:	eeb0 0a66 	vmov.f32	s0, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012902:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012906:	ed83 5a01 	vstr	s10, [r3, #4]
}
 801290a:	eea5 0aa7 	vfma.f32	s0, s11, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 801290e:	edc3 6a02 	vstr	s13, [r3, #8]
}
 8012912:	4770      	bx	lr

08012914 <tVZFilterHS_setFreqFast>:

void    tVZFilterHS_setFreqFast           (tVZFilterHS* const vf, Lfloat cutoff)
{
        _tVZFilterHS* f = *vf;
        f->cutoffMIDI = cutoff;
        cutoff *= 30.567164179104478f;
 8012914:	eddf 7a21 	vldr	s15, [pc, #132]	; 801299c <tVZFilterHS_setFreqFast+0x88>
 8012918:	f640 7cfe 	movw	ip, #4094	; 0xffe
        if (intVer < 0)
        {
        	intVer = 0;
        }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801291c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 8012920:	6803      	ldr	r3, [r0, #0]
        cutoff *= 30.567164179104478f;
 8012922:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012926:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8012928:	edd3 3a0f 	vldr	s7, [r3, #60]	; 0x3c
        int32_t intVer = (int32_t)cutoff;
 801292c:	eefd 6ae7 	vcvt.s32.f32	s13, s15
        f->cutoffMIDI = cutoff;
 8012930:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012934:	ee76 5a67 	vsub.f32	s11, s12, s15

    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012938:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
        int32_t intVer = (int32_t)cutoff;
 801293c:	ee16 2a90 	vmov	r2, s13
    
    f->R2Plusg = f->R2+f->g;
 8012940:	edd3 6a04 	vldr	s13, [r3, #16]
 8012944:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012948:	4562      	cmp	r2, ip
 801294a:	bfa8      	it	ge
 801294c:	4662      	movge	r2, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 801294e:	ee05 2a10 	vmov	s10, r2
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012952:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012956:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801295a:	ed92 4a01 	vldr	s8, [r2, #4]
 801295e:	edd2 4a00 	vldr	s9, [r2]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012962:	ee77 7ac5 	vsub.f32	s15, s15, s10
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012966:	ee75 5a85 	vadd.f32	s11, s11, s10
 801296a:	ee67 7aa3 	vmul.f32	s15, s15, s7
 801296e:	ee67 7a84 	vmul.f32	s15, s15, s8
 8012972:	eee4 7aa5 	vfma.f32	s15, s9, s11
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012976:	ee27 7a87 	vmul.f32	s14, s15, s14
    f->gPreDiv = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 801297a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
 801297e:	ee77 7a26 	vadd.f32	s15, s14, s13
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 8012982:	ed83 7a03 	vstr	s14, [r3, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012986:	eef0 6a46 	vmov.f32	s13, s12
    f->R2Plusg = f->R2+f->g;
 801298a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 801298e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8012992:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8012996:	edc3 7a05 	vstr	s15, [r3, #20]
}
 801299a:	4770      	bx	lr
 801299c:	41f4898d 	.word	0x41f4898d

080129a0 <tVZFilterHS_setGain>:
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
}

void    tVZFilterHS_setGain                  (tVZFilterHS* const vf, Lfloat gain)
{
 80129a0:	b510      	push	{r4, lr}
        _tVZFilterHS* f = *vf;
 80129a2:	6804      	ldr	r4, [r0, #0]
{
 80129a4:	eef0 0a40 	vmov.f32	s1, s0
        f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 80129a8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80129f4 <tVZFilterHS_setGain+0x54>
 80129ac:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80129f8 <tVZFilterHS_setGain+0x58>
 80129b0:	f001 fab2 	bl	8013f18 <LEAF_clip>
 80129b4:	ed84 0a07 	vstr	s0, [r4, #28]
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 80129b8:	f001 f972 	bl	8013ca0 <fastsqrtf>
 80129bc:	f001 f970 	bl	8013ca0 <fastsqrtf>
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80129c0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80129c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 80129c8:	ed94 7a04 	vldr	s14, [r4, #16]
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80129cc:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->sqrtA = fastsqrtf(fastsqrtf(f->G));
 80129d0:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80129d4:	eeb0 6a66 	vmov.f32	s12, s13
    f->R2Plusg = f->R2+f->g;
 80129d8:	ee37 7a87 	vadd.f32	s14, s15, s14
    f->g = f->gPreDiv * f->sqrtA;               // scale SVF-cutoff frequency for shelvers
 80129dc:	edc4 7a03 	vstr	s15, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80129e0:	eea7 6a87 	vfma.f32	s12, s15, s14
    f->R2Plusg = f->R2+f->g;
 80129e4:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 80129e8:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80129ec:	edc4 7a05 	vstr	s15, [r4, #20]
}
 80129f0:	bd10      	pop	{r4, pc}
 80129f2:	bf00      	nop
 80129f4:	457a0000 	.word	0x457a0000
 80129f8:	358637bd 	.word	0x358637bd

080129fc <tVZFilterHS_setResonance>:

void    tVZFilterHS_setResonance                (tVZFilterHS* const vf, Lfloat res)
{
        _tVZFilterHS* f = *vf;
        f->Q = res;
        f->R2 = 1.0f/res;
 80129fc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        _tVZFilterHS* f = *vf;
 8012a00:	6803      	ldr	r3, [r0, #0]
        f->R2Plusg = f->R2+f->g;
 8012a02:	edd3 6a03 	vldr	s13, [r3, #12]
        f->R2 = 1.0f/res;
 8012a06:	ee87 6a80 	vdiv.f32	s12, s15, s0
        f->Q = res;
 8012a0a:	ed83 0a08 	vstr	s0, [r3, #32]
        f->R2Plusg = f->R2+f->g;
 8012a0e:	ee36 7a26 	vadd.f32	s14, s12, s13
        f->R2 = 1.0f/res;
 8012a12:	ed83 6a04 	vstr	s12, [r3, #16]
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012a16:	eeb0 6a67 	vmov.f32	s12, s15
        f->R2Plusg = f->R2+f->g;
 8012a1a:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
        f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012a1e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8012a22:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8012a26:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8012a2a:	4770      	bx	lr

08012a2c <tVZFilterBell_initToPool>:
{
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
}

void    tVZFilterBell_initToPool     (tVZFilterBell* const vf, Lfloat freq, Lfloat BW, Lfloat gain, tMempool* const mp)
{
 8012a2c:	b570      	push	{r4, r5, r6, lr}
 8012a2e:	ed2d 8b06 	vpush	{d8-d10}
    _tMempool* m = *mp;
 8012a32:	680d      	ldr	r5, [r1, #0]
{
 8012a34:	4606      	mov	r6, r0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012a36:	2040      	movs	r0, #64	; 0x40
{
 8012a38:	eeb0 8a40 	vmov.f32	s16, s0
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012a3c:	4629      	mov	r1, r5
{
 8012a3e:	eef0 9a60 	vmov.f32	s19, s1
 8012a42:	eeb0 aa41 	vmov.f32	s20, s2
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012a46:	f001 fd69 	bl	801451c <mpool_alloc>
 8012a4a:	6030      	str	r0, [r6, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->sampleRate = leaf->sampleRate;
    f->invSampleRate = leaf->invSampleRate;
    f->sampRatio = 48000.0f / f->sampleRate;
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012a4c:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    f->mempool = m;
 8012a50:	6005      	str	r5, [r0, #0]
    _tVZFilterBell* f = *vf = (_tVZFilterBell*) mpool_alloc(sizeof(_tVZFilterBell), m);
 8012a52:	4604      	mov	r4, r0
    LEAF* leaf = f->mempool->leaf;
 8012a54:	686d      	ldr	r5, [r5, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012a56:	eef0 0a48 	vmov.f32	s1, s16
    f->sampRatio = 48000.0f / f->sampleRate;
 8012a5a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8012b7c <tVZFilterBell_initToPool+0x150>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012a5e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    f->sampleRate = leaf->sampleRate;
 8012a62:	edd5 7a00 	vldr	s15, [r5]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012a66:	ed9f 9a46 	vldr	s18, [pc, #280]	; 8012b80 <tVZFilterBell_initToPool+0x154>
    f->sampRatio = 48000.0f / f->sampleRate;
 8012a6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    f->sampleRate = leaf->sampleRate;
 8012a6e:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
    f->invSampleRate = leaf->invSampleRate;
 8012a72:	686b      	ldr	r3, [r5, #4]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012a74:	eddf aa43 	vldr	s21, [pc, #268]	; 8012b84 <tVZFilterBell_initToPool+0x158>
    f->invSampleRate = leaf->invSampleRate;
 8012a78:	62c3      	str	r3, [r0, #44]	; 0x2c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012a7a:	ee27 1a81 	vmul.f32	s2, s15, s2
 8012a7e:	eeb0 0a49 	vmov.f32	s0, s18
    f->g = tanf(PI * freq * f->invSampleRate);
 8012a82:	ee28 8a2a 	vmul.f32	s16, s16, s21
    f->sampRatio = 48000.0f / f->sampleRate;
 8012a86:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8012a8a:	f001 fa45 	bl	8013f18 <LEAF_clip>
 8012a8e:	ed84 0a06 	vstr	s0, [r4, #24]
    f->cutoffMIDI = ftom(f->fc);
 8012a92:	f001 fcbf 	bl	8014414 <ftom>
 8012a96:	eef0 7a40 	vmov.f32	s15, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012a9a:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 8012b88 <tVZFilterBell_initToPool+0x15c>
 8012a9e:	eef0 0a4a 	vmov.f32	s1, s20
    f->B = BW;
 8012aa2:	edc4 9a08 	vstr	s19, [r4, #32]
    f->cutoffMIDI = ftom(f->fc);
 8012aa6:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
    f->s1    = 0.0f;
 8012aaa:	ed84 9a01 	vstr	s18, [r4, #4]
    f->s2   = 0.0f;
 8012aae:	ed84 9a02 	vstr	s18, [r4, #8]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012ab2:	ed9f 0a36 	vldr	s0, [pc, #216]	; 8012b8c <tVZFilterBell_initToPool+0x160>
 8012ab6:	f001 fa2f 	bl	8013f18 <LEAF_clip>
    f->g = tanf(PI * freq * f->invSampleRate);
 8012aba:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012abe:	ed84 0a07 	vstr	s0, [r4, #28]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012ac2:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012ac6:	f006 fd19 	bl	80194fc <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012aca:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 8012ace:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012ad2:	edd4 0a08 	vldr	s1, [r4, #32]
 8012ad6:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012ada:	ed94 8a06 	vldr	s16, [r4, #24]
 8012ade:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 8012ae2:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012ae6:	f001 f989 	bl	8013dfc <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012aea:	ee20 0a2a 	vmul.f32	s0, s0, s21
 8012aee:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012af2:	ee20 0a08 	vmul.f32	s0, s0, s16
 8012af6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8012afa:	f001 f8bd 	bl	8013c78 <fastertanf>
    Lfloat r  = f->g/wl;
 8012afe:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012b02:	eeb0 5a68 	vmov.f32	s10, s17
 8012b06:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 8012b0a:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012b0e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012b12:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012b16:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012b1a:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 8012b1e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012b22:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012b26:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012b2a:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012b2e:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012b32:	f001 f8b5 	bl	8013ca0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012b36:	ed94 7a03 	vldr	s14, [r4, #12]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
    if (leaf->sampleRate > 90000)
 8012b3a:	eddf 6a15 	vldr	s13, [pc, #84]	; 8012b90 <tVZFilterBell_initToPool+0x164>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012b3e:	4a15      	ldr	r2, [pc, #84]	; (8012b94 <tVZFilterBell_initToPool+0x168>)
 8012b40:	4b15      	ldr	r3, [pc, #84]	; (8012b98 <tVZFilterBell_initToPool+0x16c>)
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012b42:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b46:	eeb0 6a68 	vmov.f32	s12, s17
    f->R2Plusg = f->R2+f->g;
 8012b4a:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012b4e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b52:	eea7 6a27 	vfma.f32	s12, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012b56:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012b5a:	eec8 7a86 	vdiv.f32	s15, s17, s12
 8012b5e:	edc4 7a05 	vstr	s15, [r4, #20]
    if (leaf->sampleRate > 90000)
 8012b62:	edd5 7a00 	vldr	s15, [r5]
    	f->table = __filterTanhTable_48000;
 8012b66:	eef4 7ae6 	vcmpe.f32	s15, s13
 8012b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b6e:	bfd8      	it	le
 8012b70:	4613      	movle	r3, r2
 8012b72:	63a3      	str	r3, [r4, #56]	; 0x38
    }
}
 8012b74:	ecbd 8b06 	vpop	{d8-d10}
 8012b78:	bd70      	pop	{r4, r5, r6, pc}
 8012b7a:	bf00      	nop
 8012b7c:	473b8000 	.word	0x473b8000
 8012b80:	00000000 	.word	0x00000000
 8012b84:	40490fdb 	.word	0x40490fdb
 8012b88:	457a0000 	.word	0x457a0000
 8012b8c:	358637bd 	.word	0x358637bd
 8012b90:	47afc800 	.word	0x47afc800
 8012b94:	0801be3c 	.word	0x0801be3c
 8012b98:	0801fe3c 	.word	0x0801fe3c

08012b9c <tVZFilterBell_init>:
    tVZFilterBell_initToPool(vf, freq, BW, gain, &leaf->mempool);
 8012b9c:	3118      	adds	r1, #24
 8012b9e:	f7ff bf45 	b.w	8012a2c <tVZFilterBell_initToPool>
 8012ba2:	bf00      	nop

08012ba4 <tVZFilterBell_setSampleRate>:

void    tVZFilterBell_setSampleRate  (tVZFilterBell* const vf, Lfloat sampleRate)
{
        _tVZFilterBell* f = *vf;
        f->sampleRate = sampleRate;
    f->invSampleRate = 1.0f / sampleRate;
 8012ba4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->sampRatio = 48000.0f / f->sampleRate;
 8012ba8:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8012bdc <tVZFilterBell_setSampleRate+0x38>
    if (sampleRate > 90000)
 8012bac:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8012be0 <tVZFilterBell_setSampleRate+0x3c>
          {
          	f->table = __filterTanhTable_96000;
          }
          else
          {
          	f->table = __filterTanhTable_48000;
 8012bb0:	490c      	ldr	r1, [pc, #48]	; (8012be4 <tVZFilterBell_setSampleRate+0x40>)
    f->invSampleRate = 1.0f / sampleRate;
 8012bb2:	ee87 7a80 	vdiv.f32	s14, s15, s0
        _tVZFilterBell* f = *vf;
 8012bb6:	6803      	ldr	r3, [r0, #0]
          	f->table = __filterTanhTable_48000;
 8012bb8:	4a0b      	ldr	r2, [pc, #44]	; (8012be8 <tVZFilterBell_setSampleRate+0x44>)
        f->sampleRate = sampleRate;
 8012bba:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    f->sampRatio = 48000.0f / f->sampleRate;
 8012bbe:	eec6 7a00 	vdiv.f32	s15, s12, s0
          	f->table = __filterTanhTable_48000;
 8012bc2:	eeb4 0ae6 	vcmpe.f32	s0, s13
 8012bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bca:	bfd8      	it	le
 8012bcc:	460a      	movle	r2, r1
    f->invSampleRate = 1.0f / sampleRate;
 8012bce:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
    f->sampRatio = 48000.0f / f->sampleRate;
 8012bd2:	639a      	str	r2, [r3, #56]	; 0x38
 8012bd4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
          }
}
 8012bd8:	4770      	bx	lr
 8012bda:	bf00      	nop
 8012bdc:	473b8000 	.word	0x473b8000
 8012be0:	47afc800 	.word	0x47afc800
 8012be4:	0801be3c 	.word	0x0801be3c
 8012be8:	0801fe3c 	.word	0x0801fe3c

08012bec <tVZFilterBell_tick>:
Lfloat   tVZFilterBell_tick               (tVZFilterBell* const vf, Lfloat input)
{
        _tVZFilterBell* f = *vf;
 8012bec:	6803      	ldr	r3, [r0, #0]
    
    Lfloat yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012bee:	edd3 6a02 	vldr	s13, [r3, #8]
 8012bf2:	ed93 7a01 	vldr	s14, [r3, #4]
 8012bf6:	ee70 7a66 	vsub.f32	s15, s0, s13
 8012bfa:	ed93 4a09 	vldr	s8, [r3, #36]	; 0x24
 8012bfe:	ed93 5a05 	vldr	s10, [r3, #20]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8012c02:	ed93 6a03 	vldr	s12, [r3, #12]
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012c06:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return yL + f->R2*f->G*yB + yH;
 8012c0a:	edd3 5a04 	vldr	s11, [r3, #16]
 8012c0e:	edd3 4a07 	vldr	s9, [r3, #28]
 8012c12:	ee65 5aa4 	vmul.f32	s11, s11, s9
    yH = (input - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8012c16:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8012c1a:	eea6 7a27 	vfma.f32	s14, s12, s15
    yL = v2 + f->s2;
 8012c1e:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012c22:	eeb0 5a47 	vmov.f32	s10, s14
 8012c26:	eea6 5a27 	vfma.f32	s10, s12, s15
 8012c2a:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012c2e:	eef0 5a66 	vmov.f32	s11, s13
 8012c32:	eee6 5a07 	vfma.f32	s11, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8012c36:	ed83 5a01 	vstr	s10, [r3, #4]
}
 8012c3a:	ee36 0aa7 	vadd.f32	s0, s13, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8012c3e:	edc3 5a02 	vstr	s11, [r3, #8]
}
 8012c42:	4770      	bx	lr

08012c44 <tVZFilterBell_setBandwidth>:


               
void    tVZFilterBell_setBandwidth           (tVZFilterBell* const vf, Lfloat bandWidth)
{
 8012c44:	eef0 7a40 	vmov.f32	s15, s0
        _tVZFilterBell* f = *vf;
    f->B = bandWidth;
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012c48:	eefe 0a00 	vmov.f32	s1, #224	; 0xbf000000 -0.5
 8012c4c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
{
 8012c50:	b510      	push	{r4, lr}
        _tVZFilterBell* f = *vf;
 8012c52:	6804      	ldr	r4, [r0, #0]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012c54:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 8012c58:	ed2d 8b02 	vpush	{d8}
    f->B = bandWidth;
 8012c5c:	edc4 7a08 	vstr	s15, [r4, #32]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012c60:	ed94 8a06 	vldr	s16, [r4, #24]
 8012c64:	f001 f8ca 	bl	8013dfc <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012c68:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8012c6c:	eddf 7a17 	vldr	s15, [pc, #92]	; 8012ccc <tVZFilterBell_setBandwidth+0x88>
 8012c70:	ee28 8a07 	vmul.f32	s16, s16, s14
 8012c74:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012c78:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012c7c:	f000 fffc 	bl	8013c78 <fastertanf>
    Lfloat r  = f->g/wl;
 8012c80:	edd4 6a03 	vldr	s13, [r4, #12]
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    Lfloat r  = f->g/wl;
 8012c88:	eec6 7a80 	vdiv.f32	s15, s13, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012c8c:	ed94 0a07 	vldr	s0, [r4, #28]
 8012c90:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012c94:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012c98:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012c9c:	eea7 7aa7 	vfma.f32	s14, s15, s15
    f->rToUse = r;
 8012ca0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012ca4:	eef0 6a47 	vmov.f32	s13, s14
 8012ca8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012cac:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012cb0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012cb4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012cb8:	f000 fff2 	bl	8013ca0 <fastsqrtf>
 8012cbc:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012cc0:	ed84 0a04 	vstr	s0, [r4, #16]
}
 8012cc4:	ecbd 8b02 	vpop	{d8}
 8012cc8:	bd10      	pop	{r4, pc}
 8012cca:	bf00      	nop
 8012ccc:	40490fdb 	.word	0x40490fdb

08012cd0 <tVZFilterBell_setFreq>:
void    tVZFilterBell_setFreq           (tVZFilterBell* const vf, Lfloat freq)
{
 8012cd0:	b510      	push	{r4, lr}
 8012cd2:	ed2d 8b02 	vpush	{d8}
 8012cd6:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8012d84 <tVZFilterBell_setFreq+0xb4>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
    Lfloat r  = f->g/wl;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012cda:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 8012cde:	6804      	ldr	r4, [r0, #0]
    f->fc = freq;
 8012ce0:	ee20 8a08 	vmul.f32	s16, s0, s16
    f->g = tanf(PI * freq * f->invSampleRate);
 8012ce4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
    f->fc = freq;
 8012ce8:	ed84 0a06 	vstr	s0, [r4, #24]
    f->g = tanf(PI * freq * f->invSampleRate);
 8012cec:	ee28 0a27 	vmul.f32	s0, s16, s15
 8012cf0:	f006 fc04 	bl	80194fc <tanf>
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012cf4:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
    f->g = tanf(PI * freq * f->invSampleRate);
 8012cf8:	eeb0 7a40 	vmov.f32	s14, s0
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012cfc:	edd4 0a08 	vldr	s1, [r4, #32]
 8012d00:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8012d04:	ee60 0aa7 	vmul.f32	s1, s1, s15
    f->g = tanf(PI * freq * f->invSampleRate);
 8012d08:	ed84 7a03 	vstr	s14, [r4, #12]
    Lfloat fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8012d0c:	f001 f876 	bl	8013dfc <fastPowf>
    Lfloat wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8012d10:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012d14:	ee28 8a27 	vmul.f32	s16, s16, s15
 8012d18:	ee28 0a00 	vmul.f32	s0, s16, s0
 8012d1c:	f000 ffac 	bl	8013c78 <fastertanf>
    Lfloat r  = f->g/wl;
 8012d20:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d24:	eeb0 5a68 	vmov.f32	s10, s17
 8012d28:	edd4 6a07 	vldr	s13, [r4, #28]
    Lfloat r  = f->g/wl;
 8012d2c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d30:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8012d34:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012d38:	ee67 7aa7 	vmul.f32	s15, s15, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d3c:	eea7 5aa7 	vfma.f32	s10, s15, s15
    f->rToUse = r;
 8012d40:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d44:	ee85 7a27 	vdiv.f32	s14, s10, s15
 8012d48:	ee77 7a65 	vsub.f32	s15, s14, s11
 8012d4c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8012d50:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 8012d54:	f000 ffa4 	bl	8013ca0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012d58:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d5c:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012d60:	eef0 6a68 	vmov.f32	s13, s17
    f->R2Plusg = f->R2+f->g;
 8012d64:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d68:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012d6c:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012d70:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012d74:	eec8 7aa6 	vdiv.f32	s15, s17, s13
 8012d78:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012d7c:	ecbd 8b02 	vpop	{d8}
 8012d80:	bd10      	pop	{r4, pc}
 8012d82:	bf00      	nop
 8012d84:	40490fdb 	.word	0x40490fdb

08012d88 <tVZFilterBell_setFreqFast>:

void    tVZFilterBell_setFreqFast           (tVZFilterBell* const vf, Lfloat cutoff)
{
    _tVZFilterBell* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8012d88:	eddf 7a43 	vldr	s15, [pc, #268]	; 8012e98 <tVZFilterBell_setFreqFast+0x110>
	{
		intVer = 0;
	}
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012d8c:	eef9 6a08 	vmov.f32	s13, #152	; 0xc0c00000 -6.0
 8012d90:	f640 7cfe 	movw	ip, #4094	; 0xffe

    Lfloat r  = f->g/gLower;
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
    // warped upper bandedge, wc the center
    f->rToUse = r;
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d94:	eeb0 4a00 	vmov.f32	s8, #0	; 0x40000000  2.0
    cutoff *= 30.567164179104478f;
 8012d98:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012d9c:	eef5 4a00 	vmov.f32	s9, #80	; 0x3e800000  0.250
	int32_t intVer = (int32_t)cutoff;
 8012da0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
{
 8012da4:	b510      	push	{r4, lr}
    _tVZFilterBell* f = *vf;
 8012da6:	6804      	ldr	r4, [r0, #0]
	int32_t intVer = (int32_t)cutoff;
 8012da8:	ee17 3a10 	vmov	r3, s14
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012dac:	eeb0 7a67 	vmov.f32	s14, s15
 8012db0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
{
 8012db4:	ed2d 8b02 	vpush	{d8}
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012db8:	ed94 6a08 	vldr	s12, [r4, #32]
 8012dbc:	4563      	cmp	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012dbe:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8012dc2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat fl = cutoff + (12.0f * (-f->B)*0.5f); // lower bandedge frequency (in MIDI)
 8012dc4:	eea6 7a26 	vfma.f32	s14, s12, s13
 8012dc8:	bfa8      	it	ge
 8012dca:	4663      	movge	r3, ip
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012dcc:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012dd0:	ee05 3a10 	vmov	s10, r3
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012dd4:	ee38 6a67 	vsub.f32	s12, s16, s15
 8012dd8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    f->cutoffMIDI = cutoff;
 8012ddc:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012de0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012de4:	ed94 0a07 	vldr	s0, [r4, #28]
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012de8:	ed93 3a01 	vldr	s6, [r3, #4]
	intVer = (int32_t)fl;
 8012dec:	eefd 6ac7 	vcvt.s32.f32	s13, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012df0:	edd3 3a00 	vldr	s7, [r3]
	Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8012df4:	ee77 7ac5 	vsub.f32	s15, s15, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012df8:	ee36 6a05 	vadd.f32	s12, s12, s10
	intVer = (int32_t)fl;
 8012dfc:	ee16 2a90 	vmov	r2, s13
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012e00:	ee78 6a47 	vsub.f32	s13, s16, s14
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012e04:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8012e08:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8012e0c:	4562      	cmp	r2, ip
 8012e0e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8012e12:	bfa8      	it	ge
 8012e14:	4662      	movge	r2, ip
 8012e16:	eee3 7a86 	vfma.f32	s15, s7, s12
	LfloatVer = fl - (Lfloat)intVer;
 8012e1a:	ee05 2a10 	vmov	s10, r2
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012e1e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
	LfloatVer = fl - (Lfloat)intVer;
 8012e22:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8012e26:	ee37 7a45 	vsub.f32	s14, s14, s10
	f->g = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012e2a:	edc4 7a03 	vstr	s15, [r4, #12]
	Lfloat gLower = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer) * f->sampRatio;
 8012e2e:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012e32:	ed93 6a00 	vldr	s12, [r3]
 8012e36:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012e3a:	edd3 5a01 	vldr	s11, [r3, #4]
 8012e3e:	ee27 7a25 	vmul.f32	s14, s14, s11
 8012e42:	eea6 7a26 	vfma.f32	s14, s12, s13
    Lfloat r  = f->g/gLower;
 8012e46:	eec7 6a87 	vdiv.f32	s13, s15, s14
    r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8012e4a:	ee66 7aa6 	vmul.f32	s15, s13, s13
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e4e:	eef0 6a48 	vmov.f32	s13, s16
    f->rToUse = r;
 8012e52:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e56:	eee7 6aa7 	vfma.f32	s13, s15, s15
 8012e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012e5e:	ee77 7a44 	vsub.f32	s15, s14, s8
 8012e62:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8012e66:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012e6a:	f000 ff19 	bl	8013ca0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012e6e:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e72:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012e76:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012e7a:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8012e7e:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012e82:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012e86:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012e8a:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012e8e:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012e92:	ecbd 8b02 	vpop	{d8}
 8012e96:	bd10      	pop	{r4, pc}
 8012e98:	41f4898d 	.word	0x41f4898d

08012e9c <tVZFilterBell_setGain>:

void    tVZFilterBell_setGain                  (tVZFilterBell* const vf, Lfloat gain)
{
 8012e9c:	b510      	push	{r4, lr}
 8012e9e:	ed2d 8b02 	vpush	{d8}
    _tVZFilterBell* f = *vf;
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ea2:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _tVZFilterBell* f = *vf;
 8012ea6:	6804      	ldr	r4, [r0, #0]
{
 8012ea8:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012eac:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8012f10 <tVZFilterBell_setGain+0x74>
 8012eb0:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8012f14 <tVZFilterBell_setGain+0x78>
 8012eb4:	f001 f830 	bl	8013f18 <LEAF_clip>
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012eb8:	eef0 5a48 	vmov.f32	s11, s16
 8012ebc:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 8012ec0:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8012ec4:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8012ec8:	ed84 0a07 	vstr	s0, [r4, #28]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ecc:	eee7 5a07 	vfma.f32	s11, s14, s14
 8012ed0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 8012ed4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8012ed8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8012edc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012ee0:	f000 fede 	bl	8013ca0 <fastsqrtf>
    f->R2Plusg = f->R2+f->g;
 8012ee4:	ed94 7a03 	vldr	s14, [r4, #12]
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ee8:	ee30 0a00 	vadd.f32	s0, s0, s0
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012eec:	eef0 6a48 	vmov.f32	s13, s16
    f->R2Plusg = f->R2+f->g;
 8012ef0:	ee70 7a07 	vadd.f32	s15, s0, s14
    f->R2 = 2.0f*fastsqrtf(((f->rToUse*f->rToUse+1.0f)/f->rToUse-2.0f)/(4.0f*f->G));
 8012ef4:	ed84 0a04 	vstr	s0, [r4, #16]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012ef8:	eee7 6a27 	vfma.f32	s13, s14, s15
    f->R2Plusg = f->R2+f->g;
 8012efc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback
 8012f00:	eec8 7a26 	vdiv.f32	s15, s16, s13
 8012f04:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8012f08:	ecbd 8b02 	vpop	{d8}
 8012f0c:	bd10      	pop	{r4, pc}
 8012f0e:	bf00      	nop
 8012f10:	457a0000 	.word	0x457a0000
 8012f14:	358637bd 	.word	0x358637bd

08012f18 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 8012f18:	b570      	push	{r4, r5, r6, lr}
 8012f1a:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8012f1e:	698d      	ldr	r5, [r1, #24]
{
 8012f20:	eeb0 8a40 	vmov.f32	s16, s0
 8012f24:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8012f26:	2048      	movs	r0, #72	; 0x48
 8012f28:	4629      	mov	r1, r5
{
 8012f2a:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8012f2e:	f001 faf5 	bl	801451c <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012f32:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8012fd0 <tDiodeFilter_init+0xb8>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8012f36:	6030      	str	r0, [r6, #0]
 8012f38:	4604      	mov	r4, r0
    f->mempool = m;
 8012f3a:	6005      	str	r5, [r0, #0]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012f3c:	ee28 0a00 	vmul.f32	s0, s16, s0
    LEAF* leaf = f->mempool->leaf;
 8012f40:	686d      	ldr	r5, [r5, #4]
    f->invSampleRate = leaf->invSampleRate;
 8012f42:	edd5 7a01 	vldr	s15, [r5, #4]
    f->cutoff = cutoff;
 8012f46:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012f4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    f->invSampleRate = leaf->invSampleRate;
 8012f4e:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012f52:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8012f56:	f006 fb67 	bl	8019628 <tan>
 8012f5a:	eef7 7bc0 	vcvt.f32.f64	s15, d0
    f->cutoffMIDI = ftom(cutoff);
 8012f5e:	eeb0 0a48 	vmov.f32	s0, s16
    f->f = (Lfloat)tan((double)(PI * cutoff * f->invSampleRate));
 8012f62:	edc4 7a02 	vstr	s15, [r4, #8]
    f->cutoffMIDI = ftom(cutoff);
 8012f66:	f001 fa55 	bl	8014414 <ftom>
    f->r = (7.f * resonance + 0.5f);
 8012f6a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8012f6e:	eeb1 6a0c 	vmov.f32	s12, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 8012f72:	4b18      	ldr	r3, [pc, #96]	; (8012fd4 <tDiodeFilter_init+0xbc>)
    f->gamma = f->Vt*f->n;
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8012f74:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->zi = 0.0f; //previous input value
 8012f78:	2100      	movs	r1, #0
    f->r = (7.f * resonance + 0.5f);
 8012f7a:	eef0 6a67 	vmov.f32	s13, s15
    f->n = 1.836f;
 8012f7e:	6163      	str	r3, [r4, #20]
    f->gamma = f->Vt*f->n;
 8012f80:	4b15      	ldr	r3, [pc, #84]	; (8012fd8 <tDiodeFilter_init+0xc0>)
    f->zi = 0.0f; //previous input value
 8012f82:	61e1      	str	r1, [r4, #28]
    f->r = (7.f * resonance + 0.5f);
 8012f84:	eee8 6a86 	vfma.f32	s13, s17, s12
    f->g0inv = 1.f/(2.f*f->Vt);
 8012f88:	6222      	str	r2, [r4, #32]
    f->gamma = f->Vt*f->n;
 8012f8a:	61a3      	str	r3, [r4, #24]
    f->g1inv = 1.f/(2.f*f->gamma);
 8012f8c:	4913      	ldr	r1, [pc, #76]	; (8012fdc <tDiodeFilter_init+0xc4>)
    f->g2inv = 1.f/(6.f*f->gamma);
 8012f8e:	4a14      	ldr	r2, [pc, #80]	; (8012fe0 <tDiodeFilter_init+0xc8>)
    f->s0 = 0.01f;
 8012f90:	4b14      	ldr	r3, [pc, #80]	; (8012fe4 <tDiodeFilter_init+0xcc>)
    f->g1inv = 1.f/(2.f*f->gamma);
 8012f92:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 8012f94:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s0 = 0.01f;
 8012f96:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->s2 = 0.03f;
 8012f98:	4a13      	ldr	r2, [pc, #76]	; (8012fe8 <tDiodeFilter_init+0xd0>)
    f->s3 = 0.04f;
 8012f9a:	4b14      	ldr	r3, [pc, #80]	; (8012fec <tDiodeFilter_init+0xd4>)
    f->s1 = 0.02f;
 8012f9c:	4914      	ldr	r1, [pc, #80]	; (8012ff0 <tDiodeFilter_init+0xd8>)
    f->s2 = 0.03f;
 8012f9e:	6362      	str	r2, [r4, #52]	; 0x34
    f->s3 = 0.04f;
 8012fa0:	63a3      	str	r3, [r4, #56]	; 0x38
    f->cutoffMIDI = ftom(cutoff);
 8012fa2:	ed84 0a11 	vstr	s0, [r4, #68]	; 0x44
    f->Vt = 0.5f;
 8012fa6:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 8012faa:	edc4 6a03 	vstr	s13, [r4, #12]
    f->s1 = 0.02f;
 8012fae:	6321      	str	r1, [r4, #48]	; 0x30
    if (leaf->sampleRate > 90000)
 8012fb0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8012ff4 <tDiodeFilter_init+0xdc>
 8012fb4:	edd5 7a00 	vldr	s15, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8012fb8:	4a0f      	ldr	r2, [pc, #60]	; (8012ff8 <tDiodeFilter_init+0xe0>)
 8012fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8012fbe:	4b0f      	ldr	r3, [pc, #60]	; (8012ffc <tDiodeFilter_init+0xe4>)
 8012fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fc4:	bfd8      	it	le
 8012fc6:	4613      	movle	r3, r2
 8012fc8:	6423      	str	r3, [r4, #64]	; 0x40
}
 8012fca:	ecbd 8b02 	vpop	{d8}
 8012fce:	bd70      	pop	{r4, r5, r6, pc}
 8012fd0:	40490fdb 	.word	0x40490fdb
 8012fd4:	3feb020c 	.word	0x3feb020c
 8012fd8:	3f6b020c 	.word	0x3f6b020c
 8012fdc:	3f0b6efd 	.word	0x3f0b6efd
 8012fe0:	3e39e952 	.word	0x3e39e952
 8012fe4:	3c23d70a 	.word	0x3c23d70a
 8012fe8:	3cf5c28f 	.word	0x3cf5c28f
 8012fec:	3d23d70a 	.word	0x3d23d70a
 8012ff0:	3ca3d70a 	.word	0x3ca3d70a
 8012ff4:	47afc800 	.word	0x47afc800
 8012ff8:	0801be3c 	.word	0x0801be3c
 8012ffc:	0801fe3c 	.word	0x0801fe3c

08013000 <tDiodeFilter_tick>:
}

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
Lfloat   tDiodeFilter_tick               (tDiodeFilter* const vf, Lfloat in)
{
 8013000:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8013002:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013004:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013008:	eef2 4a0e 	vmov.f32	s9, #46	; 0x41700000  15.0
 801300c:	eddf 6aee 	vldr	s13, [pc, #952]	; 80133c8 <tDiodeFilter_tick+0x3c8>
    if (testVal!= 0.0f)
 8013010:	eddf 5aee 	vldr	s11, [pc, #952]	; 80133cc <tDiodeFilter_tick+0x3cc>
{
 8013014:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013018:	ed94 4a03 	vldr	s8, [r4, #12]
{
 801301c:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013020:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 8013024:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013028:	ee67 7a44 	vnmul.f32	s15, s14, s8
 801302c:	ed94 5a08 	vldr	s10, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 8013030:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013034:	ed94 2a02 	vldr	s4, [r4, #8]
 8013038:	eee6 7a23 	vfma.f32	s15, s12, s7
 801303c:	ee67 7a85 	vmul.f32	s15, s15, s10
    Lfloat a = x*x;
 8013040:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013044:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8013048:	ee67 6aa6 	vmul.f32	s13, s15, s13
    if (testVal!= 0.0f)
 801304c:	eef4 6a65 	vcmp.f32	s13, s11
 8013050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013054:	f000 81aa 	beq.w	80133ac <tDiodeFilter_tick+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013058:	ed9f 6add 	vldr	s12, [pc, #884]	; 80133d0 <tDiodeFilter_tick+0x3d0>
 801305c:	ee76 5a86 	vadd.f32	s11, s13, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013060:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013064:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013068:	edd4 3a0b 	vldr	s7, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801306c:	ee22 5a05 	vmul.f32	s10, s4, s10
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013070:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
    
    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013074:	eef0 8a08 	vmov.f32	s17, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013078:	ee70 6a63 	vsub.f32	s13, s0, s7
    return ((a + 105.0f)*a + 945.0f) / output;
 801307c:	eddf 1ad4 	vldr	s3, [pc, #848]	; 80133d0 <tDiodeFilter_tick+0x3d0>
 8013080:	eddf 4ad4 	vldr	s9, [pc, #848]	; 80133d4 <tDiodeFilter_tick+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013084:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8013088:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801308c:	ed9f 6ace 	vldr	s12, [pc, #824]	; 80133c8 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013090:	ee77 4aa4 	vadd.f32	s9, s15, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013094:	ee66 6aa2 	vmul.f32	s13, s13, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013098:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 801309c:	eddf 4acb 	vldr	s9, [pc, #812]	; 80133cc <tDiodeFilter_tick+0x3cc>
    Lfloat a = x*x;
 80130a0:	ee66 6aa6 	vmul.f32	s13, s13, s13
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80130a4:	eef0 7a46 	vmov.f32	s15, s12
 80130a8:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 80133c8 <tDiodeFilter_tick+0x3c8>
 80130ac:	eee6 7a81 	vfma.f32	s15, s13, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 80130b0:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 80133d0 <tDiodeFilter_tick+0x3d0>
 80130b4:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80130b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80130bc:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80130c0:	eeb0 8a41 	vmov.f32	s16, s2
    if (testVal!= 0.0f)
 80130c4:	eef4 7a64 	vcmp.f32	s15, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80130c8:	edd4 4a0d 	vldr	s9, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 80130cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80130d0:	bf18      	it	ne
 80130d2:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80130d6:	ee74 7ac0 	vsub.f32	s15, s9, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80130da:	ee23 3a05 	vmul.f32	s6, s6, s10
    return ((a + 105.0f)*a + 945.0f) / output;
 80130de:	ed9f 5abd 	vldr	s10, [pc, #756]	; 80133d4 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 80130e2:	bf08      	it	eq
 80130e4:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80130e8:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80130ec:	ee36 5a85 	vadd.f32	s10, s13, s10
 80130f0:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 80130f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 80130f8:	eea6 8a85 	vfma.f32	s16, s13, s10
 80130fc:	ed9f 5ab5 	vldr	s10, [pc, #724]	; 80133d4 <tDiodeFilter_tick+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013100:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 8013104:	ee37 5a85 	vadd.f32	s10, s15, s10
 8013108:	eec8 6a25 	vdiv.f32	s13, s16, s11
    if (testVal!= 0.0f)
 801310c:	eddf 5aaf 	vldr	s11, [pc, #700]	; 80133cc <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013110:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 8013114:	eeb4 6a65 	vcmp.f32	s12, s11
 8013118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801311c:	bf18      	it	ne
 801311e:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013122:	ed9f 1aab 	vldr	s2, [pc, #684]	; 80133d0 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013126:	ee37 6a64 	vsub.f32	s12, s14, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 801312a:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 801312e:	bf08      	it	eq
 8013130:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013134:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013138:	eee7 0a85 	vfma.f32	s1, s15, s10
    if (testVal!= 0.0f)
 801313c:	ed9f 5aa3 	vldr	s10, [pc, #652]	; 80133cc <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013140:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8013144:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013148:	ee66 6aa1 	vmul.f32	s13, s13, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 801314c:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013150:	eddf 5a9d 	vldr	s11, [pc, #628]	; 80133c8 <tDiodeFilter_tick+0x3c8>
 8013154:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013158:	eddf 2a9d 	vldr	s5, [pc, #628]	; 80133d0 <tDiodeFilter_tick+0x3d0>
 801315c:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013160:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 8013164:	eef4 5a45 	vcmp.f32	s11, s10
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013168:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 801316c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013170:	bf18      	it	ne
 8013172:	ee35 5a81 	vaddne.f32	s10, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013176:	eddf 5a97 	vldr	s11, [pc, #604]	; 80133d4 <tDiodeFilter_tick+0x3d4>
    Lfloat output = 1.0f;
 801317a:	bf08      	it	eq
 801317c:	eeb7 5a00 	vmoveq.f32	s10, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013180:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8013184:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013188:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 801318c:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013190:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 80133c8 <tDiodeFilter_tick+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013194:	eec0 5a85 	vdiv.f32	s11, s1, s10
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013198:	ee27 5a01 	vmul.f32	s10, s14, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801319c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 80131a0:	ee37 1a00 	vadd.f32	s2, s14, s0
    Lfloat a = x*x;
 80131a4:	ee25 5a05 	vmul.f32	s10, s10, s10
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80131a8:	eea5 6a20 	vfma.f32	s12, s10, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 80131ac:	eddf 0a88 	vldr	s1, [pc, #544]	; 80133d0 <tDiodeFilter_tick+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80131b0:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 80131b4:	eddf 1a85 	vldr	s3, [pc, #532]	; 80133cc <tDiodeFilter_tick+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80131b8:	ee26 6a05 	vmul.f32	s12, s12, s10
    if (testVal!= 0.0f)
 80131bc:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 80131c0:	eddf 1a84 	vldr	s3, [pc, #528]	; 80133d4 <tDiodeFilter_tick+0x3d4>
 80131c4:	ee75 1a21 	vadd.f32	s3, s10, s3
    if (testVal!= 0.0f)
 80131c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 80131cc:	eee5 0a21 	vfma.f32	s1, s10, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80131d0:	bf14      	ite	ne
 80131d2:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 80131d6:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80131da:	ee37 6a24 	vadd.f32	s12, s14, s9
 80131de:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80131e2:	ee80 5aa2 	vdiv.f32	s10, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80131e6:	ee73 2aa4 	vadd.f32	s5, s7, s9
 80131ea:	ee74 0a81 	vadd.f32	s1, s9, s2
 80131ee:	ee72 2a81 	vadd.f32	s5, s5, s2
 80131f2:	eeb0 1a60 	vmov.f32	s2, s1
 80131f6:	eef0 0a61 	vmov.f32	s1, s3
 80131fa:	eee9 2a03 	vfma.f32	s5, s18, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80131fe:	ee25 5a02 	vmul.f32	s10, s10, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013202:	eea2 1aa6 	vfma.f32	s2, s5, s13
 8013206:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801320a:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 801320e:	ee35 8a28 	vadd.f32	s16, s10, s17
 8013212:	eea6 6aa2 	vfma.f32	s12, s13, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013216:	ee67 2a26 	vmul.f32	s5, s14, s13
 801321a:	eee5 0a21 	vfma.f32	s1, s10, s3
 801321e:	eea1 6a27 	vfma.f32	s12, s2, s15
 8013222:	eeb0 1a47 	vmov.f32	s2, s14
 8013226:	eea2 1aa1 	vfma.f32	s2, s5, s3
 801322a:	ee62 2aa8 	vmul.f32	s5, s5, s17
 801322e:	eee7 2a21 	vfma.f32	s5, s14, s3
 8013232:	eea2 1aa7 	vfma.f32	s2, s5, s15
 8013236:	eef0 2a41 	vmov.f32	s5, s2
 801323a:	eeb0 1a42 	vmov.f32	s2, s4
 801323e:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013242:	eea4 1a03 	vfma.f32	s2, s8, s6
 8013246:	eeb0 6a42 	vmov.f32	s12, s4
 801324a:	eea5 6a21 	vfma.f32	s12, s10, s3
 801324e:	ee35 2a01 	vadd.f32	s4, s10, s2
 8013252:	ee35 1a29 	vadd.f32	s2, s10, s19
 8013256:	eea2 8a26 	vfma.f32	s16, s4, s13
 801325a:	ee35 2a21 	vadd.f32	s4, s10, s3
 801325e:	eea6 2a26 	vfma.f32	s4, s12, s13
 8013262:	eeb0 6a45 	vmov.f32	s12, s10
 8013266:	eea8 2a27 	vfma.f32	s4, s16, s15
 801326a:	ee21 8a26 	vmul.f32	s16, s2, s13
 801326e:	eee8 0a28 	vfma.f32	s1, s16, s17
 8013272:	eea8 6a21 	vfma.f32	s12, s16, s3
 8013276:	eea0 6aa7 	vfma.f32	s12, s1, s15
 801327a:	eea2 6a25 	vfma.f32	s12, s4, s11
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 801327e:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 8013282:	eeb4 6a42 	vcmp.f32	s12, s4
 8013286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 801328a:	eef5 6a40 	vcmp.f32	s13, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801328e:	bf14      	ite	ne
 8013290:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8013294:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 80133d8 <tDiodeFilter_tick+0x3d8>
    if (t1 == 0.0f)
 8013298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 801329c:	ee82 2a86 	vdiv.f32	s4, s5, s12
    if (t1 == 0.0f)
 80132a0:	f000 808c 	beq.w	80133bc <tDiodeFilter_tick+0x3bc>
 80132a4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80132a8:	ee76 1aa1 	vadd.f32	s3, s13, s3
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 80132ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80132b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132b4:	d07d      	beq.n	80133b2 <tDiodeFilter_tick+0x3b2>
 80132b6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 80132ba:	ee77 2aa2 	vadd.f32	s5, s15, s5
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 80132be:	eef5 5a40 	vcmp.f32	s11, #0.0
    }
    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 80132c2:	ee24 aa02 	vmul.f32	s20, s8, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80132c6:	eeb0 4a47 	vmov.f32	s8, s14
    if (t3 == 0.0f)
 80132ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80132ce:	eef0 0a64 	vmov.f32	s1, s9
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80132d2:	ee77 1aa1 	vadd.f32	s3, s15, s3
        t3 = 0.000001f;
 80132d6:	bf08      	it	eq
 80132d8:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 80133d8 <tDiodeFilter_tick+0x3d8>
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80132dc:	ee31 1a25 	vadd.f32	s2, s2, s11
 80132e0:	eee5 0a82 	vfma.f32	s1, s11, s4
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80132e4:	ee75 2aa2 	vadd.f32	s5, s11, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80132e8:	ee91 4a02 	vfnms.f32	s8, s2, s4
 80132ec:	eeb0 1a40 	vmov.f32	s2, s0
 80132f0:	ee84 6a25 	vdiv.f32	s12, s8, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80132f4:	eeb0 4a60 	vmov.f32	s8, s1
    Lfloat xx = (in - f->r*y3);
 80132f8:	ee79 0a4a 	vsub.f32	s1, s18, s20
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80132fc:	ee92 4a86 	vfnms.f32	s8, s5, s12
 8013300:	eea7 1a86 	vfma.f32	s2, s15, s12
 8013304:	eec4 2a27 	vdiv.f32	s5, s8, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8013308:	ee91 1aa2 	vfnms.f32	s2, s3, s5
 801330c:	ee81 4a26 	vdiv.f32	s8, s2, s13
    
    // update state
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013310:	ee32 4ac4 	vsub.f32	s8, s5, s8
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013314:	ee76 2a62 	vsub.f32	s5, s12, s5
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013318:	ee32 6a46 	vsub.f32	s12, s4, s12
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 801331c:	ee64 6a26 	vmul.f32	s13, s8, s13
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013320:	ee26 6a25 	vmul.f32	s12, s12, s11
 8013324:	eef0 1a66 	vmov.f32	s3, s13
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013328:	eee3 6a20 	vfma.f32	s13, s6, s1
 801332c:	eeb0 4a46 	vmov.f32	s8, s12
 8013330:	eed2 1aa7 	vfnms.f32	s3, s5, s15
 8013334:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013338:	eea2 4ae7 	vfms.f32	s8, s5, s15
 801333c:	eea5 6a02 	vfma.f32	s12, s10, s4
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->s0 = tanhf(f->s0);
 8013340:	eee6 3aa5 	vfma.f32	s7, s13, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013344:	eea1 0aa5 	vfma.f32	s0, s3, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013348:	eee4 4a25 	vfma.f32	s9, s8, s11
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 801334c:	eea6 7a65 	vfms.f32	s14, s12, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013350:	eef0 9a40 	vmov.f32	s19, s0
    f->s0 = tanhf(f->s0);
 8013354:	eeb0 0a63 	vmov.f32	s0, s7
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8013358:	eef0 8a64 	vmov.f32	s17, s9
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 801335c:	eeb0 8a47 	vmov.f32	s16, s14
    f->s0 = tanhf(f->s0);
 8013360:	f006 f8f8 	bl	8019554 <tanhf>
 8013364:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s1 = tanhf(f->s1);
 8013368:	eeb0 0a69 	vmov.f32	s0, s19
 801336c:	f006 f8f2 	bl	8019554 <tanhf>
 8013370:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = tanhf(f->s2);
 8013374:	eeb0 0a68 	vmov.f32	s0, s17
    f->s1 = tanhf(f->s1);
 8013378:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = tanhf(f->s2);
 801337c:	f006 f8ea 	bl	8019554 <tanhf>
 8013380:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = tanhf(f->s3);
 8013384:	eeb0 0a48 	vmov.f32	s0, s16
    f->s2 = tanhf(f->s2);
 8013388:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = tanhf(f->s3);
 801338c:	f006 f8e2 	bl	8019554 <tanhf>
 8013390:	eef0 7a40 	vmov.f32	s15, s0
    f->zi = in;
 8013394:	ed84 9a07 	vstr	s18, [r4, #28]
    return tanhf(y3*f->r);
 8013398:	eeb0 0a4a 	vmov.f32	s0, s20
    f->s3 = tanhf(f->s3);
 801339c:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
}
 80133a0:	ecbd 8b06 	vpop	{d8-d10}
 80133a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return tanhf(y3*f->r);
 80133a8:	f006 b8d4 	b.w	8019554 <tanhf>
    Lfloat output = 1.0f;
 80133ac:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80133b0:	e656      	b.n	8013060 <tDiodeFilter_tick+0x60>
 80133b2:	eddf 2a0a 	vldr	s5, [pc, #40]	; 80133dc <tDiodeFilter_tick+0x3dc>
        t2 = 0.000001f;
 80133b6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80133d8 <tDiodeFilter_tick+0x3d8>
 80133ba:	e780      	b.n	80132be <tDiodeFilter_tick+0x2be>
 80133bc:	eddf 1a07 	vldr	s3, [pc, #28]	; 80133dc <tDiodeFilter_tick+0x3dc>
        t1 = 0.000001f;
 80133c0:	eddf 6a05 	vldr	s13, [pc, #20]	; 80133d8 <tDiodeFilter_tick+0x3d8>
 80133c4:	e772      	b.n	80132ac <tDiodeFilter_tick+0x2ac>
 80133c6:	bf00      	nop
 80133c8:	43d20000 	.word	0x43d20000
 80133cc:	c46c4000 	.word	0xc46c4000
 80133d0:	446c4000 	.word	0x446c4000
 80133d4:	42d20000 	.word	0x42d20000
 80133d8:	358637bd 	.word	0x358637bd
 80133dc:	3f800008 	.word	0x3f800008

080133e0 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
Lfloat   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, Lfloat in)
{
 80133e0:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 80133e2:	6804      	ldr	r4, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    Lfloat ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80133e4:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80133e8:	eeb2 4a0e 	vmov.f32	s8, #46	; 0x41700000  15.0
 80133ec:	ed9f 7aee 	vldr	s14, [pc, #952]	; 80137a8 <tDiodeFilter_tickEfficient+0x3c8>
    if (testVal!= 0.0f)
 80133f0:	eddf 5aee 	vldr	s11, [pc, #952]	; 80137ac <tDiodeFilter_tickEfficient+0x3cc>
{
 80133f4:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80133f8:	ed94 5a03 	vldr	s10, [r4, #12]
{
 80133fc:	eeb0 8a40 	vmov.f32	s16, s0
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013400:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    Lfloat ih = 0.5f * (in + f->zi);
 8013404:	ed94 6a07 	vldr	s12, [r4, #28]
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013408:	ee66 7ac5 	vnmul.f32	s15, s13, s10
 801340c:	edd4 4a08 	vldr	s9, [r4, #32]
    Lfloat ih = 0.5f * (in + f->zi);
 8013410:	ee30 6a06 	vadd.f32	s12, s0, s12
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8013414:	ed94 2a02 	vldr	s4, [r4, #8]
 8013418:	eee6 7a23 	vfma.f32	s15, s12, s7
 801341c:	ee67 7aa4 	vmul.f32	s15, s15, s9
    Lfloat a = x*x;
 8013420:	ee67 7aa7 	vmul.f32	s15, s15, s15
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013424:	eea7 7a84 	vfma.f32	s14, s15, s8
 8013428:	ee27 7a87 	vmul.f32	s14, s15, s14
    if (testVal!= 0.0f)
 801342c:	eeb4 7a65 	vcmp.f32	s14, s11
 8013430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013434:	f000 81aa 	beq.w	801378c <tDiodeFilter_tickEfficient+0x3ac>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013438:	ed9f 6add 	vldr	s12, [pc, #884]	; 80137b0 <tDiodeFilter_tickEfficient+0x3d0>
 801343c:	ee77 5a06 	vadd.f32	s11, s14, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013440:	edd4 3a0c 	vldr	s7, [r4, #48]	; 0x30
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013444:	eeb2 1a0e 	vmov.f32	s2, #46	; 0x41700000  15.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013448:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801344c:	ee62 4a24 	vmul.f32	s9, s4, s9
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013450:	edd4 2a09 	vldr	s5, [r4, #36]	; 0x24
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;

    // This formula gives the result for y3 thanks to MATLAB
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8013454:	eeb0 9a08 	vmov.f32	s18, #8	; 0x40400000  3.0
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013458:	ee33 7ac0 	vsub.f32	s14, s7, s0
    return ((a + 105.0f)*a + 945.0f) / output;
 801345c:	eddf 1ad4 	vldr	s3, [pc, #848]	; 80137b0 <tDiodeFilter_tickEfficient+0x3d0>
 8013460:	ed9f 4ad4 	vldr	s8, [pc, #848]	; 80137b4 <tDiodeFilter_tickEfficient+0x3d4>
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013464:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
    return ((a + 105.0f)*a + 945.0f) / output;
 8013468:	eef0 0a61 	vmov.f32	s1, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801346c:	ed9f 6ace 	vldr	s12, [pc, #824]	; 80137a8 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013470:	ee37 4a84 	vadd.f32	s8, s15, s8
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013474:	ee27 7a22 	vmul.f32	s14, s14, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013478:	eee7 0a84 	vfma.f32	s1, s15, s8
    if (testVal!= 0.0f)
 801347c:	ed9f 4acb 	vldr	s8, [pc, #812]	; 80137ac <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat a = x*x;
 8013480:	ee27 7a07 	vmul.f32	s14, s14, s14
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013484:	eef0 7a46 	vmov.f32	s15, s12
 8013488:	ed9f 6ac7 	vldr	s12, [pc, #796]	; 80137a8 <tDiodeFilter_tickEfficient+0x3c8>
 801348c:	eee7 7a01 	vfma.f32	s15, s14, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013490:	ed9f 1ac7 	vldr	s2, [pc, #796]	; 80137b0 <tDiodeFilter_tickEfficient+0x3d0>
 8013494:	ee80 3aa5 	vdiv.f32	s6, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013498:	ee67 7a27 	vmul.f32	s15, s14, s15
 801349c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80134a0:	eef0 8a41 	vmov.f32	s17, s2
    if (testVal!= 0.0f)
 80134a4:	eef4 7a44 	vcmp.f32	s15, s8
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80134a8:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    if (testVal!= 0.0f)
 80134ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80134b0:	bf18      	it	ne
 80134b2:	ee77 5aa1 	vaddne.f32	s11, s15, s3
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80134b6:	ee74 7a63 	vsub.f32	s15, s8, s7
    Lfloat t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80134ba:	ee23 3a24 	vmul.f32	s6, s6, s9
    return ((a + 105.0f)*a + 945.0f) / output;
 80134be:	eddf 4abd 	vldr	s9, [pc, #756]	; 80137b4 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 80134c2:	bf08      	it	eq
 80134c4:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80134c8:	ee67 7aa2 	vmul.f32	s15, s15, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 80134cc:	ee77 4a24 	vadd.f32	s9, s14, s9
 80134d0:	ee62 1a22 	vmul.f32	s3, s4, s5
    Lfloat a = x*x;
 80134d4:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return ((a + 105.0f)*a + 945.0f) / output;
 80134d8:	eee7 8a24 	vfma.f32	s17, s14, s9
 80134dc:	eddf 4ab5 	vldr	s9, [pc, #724]	; 80137b4 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80134e0:	eea7 6aa0 	vfma.f32	s12, s15, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 80134e4:	ee77 4aa4 	vadd.f32	s9, s15, s9
 80134e8:	ee88 7aa5 	vdiv.f32	s14, s17, s11
    if (testVal!= 0.0f)
 80134ec:	eddf 5aaf 	vldr	s11, [pc, #700]	; 80137ac <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80134f0:	ee27 6a86 	vmul.f32	s12, s15, s12
    if (testVal!= 0.0f)
 80134f4:	eeb4 6a65 	vcmp.f32	s12, s11
 80134f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80134fc:	bf18      	it	ne
 80134fe:	ee76 5a01 	vaddne.f32	s11, s12, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013502:	ed9f 1aab 	vldr	s2, [pc, #684]	; 80137b0 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013506:	ee36 6ac4 	vsub.f32	s12, s13, s8
    return ((a + 105.0f)*a + 945.0f) / output;
 801350a:	eef0 0a41 	vmov.f32	s1, s2
    Lfloat output = 1.0f;
 801350e:	bf08      	it	eq
 8013510:	eef7 5a00 	vmoveq.f32	s11, #112	; 0x3f800000  1.0
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013514:	ee26 6a22 	vmul.f32	s12, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013518:	eee7 0aa4 	vfma.f32	s1, s15, s9
    if (testVal!= 0.0f)
 801351c:	eddf 4aa3 	vldr	s9, [pc, #652]	; 80137ac <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013520:	eef2 2a0e 	vmov.f32	s5, #46	; 0x41700000  15.0
    Lfloat a = x*x;
 8013524:	ee26 6a06 	vmul.f32	s12, s12, s12
    Lfloat t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8013528:	ee27 7a21 	vmul.f32	s14, s14, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 801352c:	eec0 7aa5 	vdiv.f32	s15, s1, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013530:	eddf 5a9d 	vldr	s11, [pc, #628]	; 80137a8 <tDiodeFilter_tickEfficient+0x3c8>
 8013534:	eee6 5a22 	vfma.f32	s11, s12, s5
    return ((a + 105.0f)*a + 945.0f) / output;
 8013538:	eddf 2a9d 	vldr	s5, [pc, #628]	; 80137b0 <tDiodeFilter_tickEfficient+0x3d0>
 801353c:	eef0 0a62 	vmov.f32	s1, s5
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013540:	ee66 5a25 	vmul.f32	s11, s12, s11
    if (testVal!= 0.0f)
 8013544:	eef4 5a64 	vcmp.f32	s11, s9
    Lfloat t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8013548:	ee67 7aa1 	vmul.f32	s15, s15, s3
    if (testVal!= 0.0f)
 801354c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013550:	bf18      	it	ne
 8013552:	ee75 4a81 	vaddne.f32	s9, s11, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 8013556:	eddf 5a97 	vldr	s11, [pc, #604]	; 80137b4 <tDiodeFilter_tickEfficient+0x3d4>
    Lfloat output = 1.0f;
 801355a:	bf08      	it	eq
 801355c:	eef7 4a00 	vmoveq.f32	s9, #112	; 0x3f800000  1.0
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013560:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
    return ((a + 105.0f)*a + 945.0f) / output;
 8013564:	ee76 5a25 	vadd.f32	s11, s12, s11
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013568:	ee22 2a01 	vmul.f32	s4, s4, s2
    return ((a + 105.0f)*a + 945.0f) / output;
 801356c:	eee6 0a25 	vfma.f32	s1, s12, s11
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013570:	ed9f 6a8d 	vldr	s12, [pc, #564]	; 80137a8 <tDiodeFilter_tickEfficient+0x3c8>
    return ((a + 105.0f)*a + 945.0f) / output;
 8013574:	eec0 5aa4 	vdiv.f32	s11, s1, s9
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8013578:	ee66 4a81 	vmul.f32	s9, s13, s2
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801357c:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 8013580:	ee36 1aa3 	vadd.f32	s2, s13, s7
    Lfloat a = x*x;
 8013584:	ee64 4aa4 	vmul.f32	s9, s9, s9
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013588:	eea4 6aa0 	vfma.f32	s12, s9, s1
    return ((a + 105.0f)*a + 945.0f) / output;
 801358c:	eddf 0a88 	vldr	s1, [pc, #544]	; 80137b0 <tDiodeFilter_tickEfficient+0x3d0>
    Lfloat t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8013590:	ee65 5aa1 	vmul.f32	s11, s11, s3
    if (testVal!= 0.0f)
 8013594:	eddf 1a85 	vldr	s3, [pc, #532]	; 80137ac <tDiodeFilter_tickEfficient+0x3cc>
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8013598:	ee26 6a24 	vmul.f32	s12, s12, s9
    if (testVal!= 0.0f)
 801359c:	eeb4 6a61 	vcmp.f32	s12, s3
    return ((a + 105.0f)*a + 945.0f) / output;
 80135a0:	eddf 1a84 	vldr	s3, [pc, #528]	; 80137b4 <tDiodeFilter_tickEfficient+0x3d4>
 80135a4:	ee74 1aa1 	vadd.f32	s3, s9, s3
    if (testVal!= 0.0f)
 80135a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return ((a + 105.0f)*a + 945.0f) / output;
 80135ac:	eee4 0aa1 	vfma.f32	s1, s9, s3
    Lfloat testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80135b0:	bf14      	ite	ne
 80135b2:	ee76 2a22 	vaddne.f32	s5, s12, s5
    Lfloat output = 1.0f;
 80135b6:	eef7 2a00 	vmoveq.f32	s5, #112	; 0x3f800000  1.0
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80135ba:	ee36 6a84 	vadd.f32	s12, s13, s8
 80135be:	eef0 1a00 	vmov.f32	s3, #0	; 0x40000000  2.0
    return ((a + 105.0f)*a + 945.0f) / output;
 80135c2:	eec0 4aa2 	vdiv.f32	s9, s1, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80135c6:	ee70 2a04 	vadd.f32	s5, s0, s8
 80135ca:	ee74 0a01 	vadd.f32	s1, s8, s2
 80135ce:	ee72 2a81 	vadd.f32	s5, s5, s2
 80135d2:	eeb0 1a60 	vmov.f32	s2, s1
 80135d6:	eef0 0a61 	vmov.f32	s1, s3
 80135da:	eee8 2a03 	vfma.f32	s5, s16, s6
    Lfloat t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80135de:	ee64 4a82 	vmul.f32	s9, s9, s4
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80135e2:	eea2 1a87 	vfma.f32	s2, s5, s14
 80135e6:	ee76 2a06 	vadd.f32	s5, s12, s12
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80135ea:	eeb1 2a00 	vmov.f32	s4, #16	; 0x40800000  4.0
 80135ee:	ee74 8a89 	vadd.f32	s17, s9, s18
 80135f2:	eea7 6a22 	vfma.f32	s12, s14, s5
    Lfloat y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80135f6:	ee66 2a87 	vmul.f32	s5, s13, s14
 80135fa:	eee4 0aa1 	vfma.f32	s1, s9, s3
 80135fe:	eea1 6a27 	vfma.f32	s12, s2, s15
 8013602:	eeb0 1a66 	vmov.f32	s2, s13
 8013606:	eea2 1aa1 	vfma.f32	s2, s5, s3
 801360a:	ee62 2a89 	vmul.f32	s5, s5, s18
 801360e:	eee6 2aa1 	vfma.f32	s5, s13, s3
 8013612:	eea2 1aa7 	vfma.f32	s2, s5, s15
 8013616:	eef0 2a41 	vmov.f32	s5, s2
 801361a:	eeb0 1a42 	vmov.f32	s2, s4
 801361e:	eee6 2a25 	vfma.f32	s5, s12, s11
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8013622:	eea5 1a03 	vfma.f32	s2, s10, s6
 8013626:	eeb0 6a42 	vmov.f32	s12, s4
 801362a:	eea4 6aa1 	vfma.f32	s12, s9, s3
 801362e:	ee34 2a81 	vadd.f32	s4, s9, s2
 8013632:	ee34 1aa9 	vadd.f32	s2, s9, s19
 8013636:	eee2 8a07 	vfma.f32	s17, s4, s14
 801363a:	ee34 2aa1 	vadd.f32	s4, s9, s3
 801363e:	eea6 2a07 	vfma.f32	s4, s12, s14
 8013642:	eeb0 6a64 	vmov.f32	s12, s9
 8013646:	eea8 2aa7 	vfma.f32	s4, s17, s15
 801364a:	ee61 8a07 	vmul.f32	s17, s2, s14
 801364e:	eee8 0a89 	vfma.f32	s1, s17, s18
 8013652:	eea8 6aa1 	vfma.f32	s12, s17, s3
 8013656:	eea0 6aa7 	vfma.f32	s12, s1, s15
 801365a:	eea2 6a25 	vfma.f32	s12, s4, s11
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 801365e:	eebf 2a00 	vmov.f32	s4, #240	; 0xbf800000 -1.0
 8013662:	eeb4 6a42 	vcmp.f32	s12, s4
 8013666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 801366a:	eeb5 7a40 	vcmp.f32	s14, #0.0
    Lfloat tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801366e:	bf14      	ite	ne
 8013670:	ee36 6a29 	vaddne.f32	s12, s12, s19
        tempy3denom = 0.000001f;
 8013674:	ed9f 6a50 	vldreq	s12, [pc, #320]	; 80137b8 <tDiodeFilter_tickEfficient+0x3d8>
    if (t1 == 0.0f)
 8013678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 801367c:	eec2 8a86 	vdiv.f32	s17, s5, s12
    if (t1 == 0.0f)
 8013680:	f000 808c 	beq.w	801379c <tDiodeFilter_tickEfficient+0x3bc>
 8013684:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 8013688:	ee77 2a22 	vadd.f32	s5, s14, s5
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 801368c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013694:	d07d      	beq.n	8013792 <tDiodeFilter_tickEfficient+0x3b2>
 8013696:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 801369a:	ee37 2a82 	vadd.f32	s4, s15, s4
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 801369e:	eef5 5a40 	vcmp.f32	s11, #0.0

    // Other outputs
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
    Lfloat xx = (in - f->r*y3);
 80136a2:	eef0 0a48 	vmov.f32	s1, s16
 80136a6:	eef0 1a44 	vmov.f32	s3, s8
    if (t3 == 0.0f)
 80136aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat xx = (in - f->r*y3);
 80136ae:	eee5 0a68 	vfms.f32	s1, s10, s17
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80136b2:	eeb0 5a66 	vmov.f32	s10, s13
        t3 = 0.000001f;
 80136b6:	bf08      	it	eq
 80136b8:	eddf 5a3f 	vldreq	s11, [pc, #252]	; 80137b8 <tDiodeFilter_tickEfficient+0x3d8>
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80136bc:	ee77 2aa2 	vadd.f32	s5, s15, s5
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80136c0:	ee31 1a25 	vadd.f32	s2, s2, s11
 80136c4:	eee5 1aa8 	vfma.f32	s3, s11, s17
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80136c8:	ee35 2a82 	vadd.f32	s4, s11, s4
    Lfloat y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 80136cc:	ee91 5a28 	vfnms.f32	s10, s2, s17
 80136d0:	ee85 6a25 	vdiv.f32	s12, s10, s11
    Lfloat y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 80136d4:	eed2 1a06 	vfnms.f32	s3, s4, s12
 80136d8:	eeb0 2a63 	vmov.f32	s4, s7
 80136dc:	eea7 2a86 	vfma.f32	s4, s15, s12
 80136e0:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80136e4:	ee92 2a85 	vfnms.f32	s4, s5, s10
    if (errorCheck != 0)
    {
        errorCheckCheck = errorCheck;
    }
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80136e8:	ee76 2a45 	vsub.f32	s5, s12, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80136ec:	ee38 6ac6 	vsub.f32	s12, s17, s12
 80136f0:	ee26 6a25 	vmul.f32	s12, s12, s11
    Lfloat y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 80136f4:	eec2 1a07 	vdiv.f32	s3, s4, s14
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80136f8:	eeb0 2a46 	vmov.f32	s4, s12
 80136fc:	eea4 6aa8 	vfma.f32	s12, s9, s17
 8013700:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8013704:	eea2 2ae7 	vfms.f32	s4, s5, s15
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013708:	eee6 6a65 	vfms.f32	s13, s12, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801370c:	eea2 4a25 	vfma.f32	s8, s4, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013710:	ee35 5a61 	vsub.f32	s10, s10, s3
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8013714:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013718:	ee25 5a07 	vmul.f32	s10, s10, s14
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801371c:	ed84 4a0d 	vstr	s8, [r4, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013720:	eeb0 7a45 	vmov.f32	s14, s10
 8013724:	ee92 5aa7 	vfnms.f32	s10, s5, s15
 8013728:	eea3 7a20 	vfma.f32	s14, s6, s1
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801372c:	eee5 3a25 	vfma.f32	s7, s10, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013730:	eea7 0a25 	vfma.f32	s0, s14, s11
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8013734:	edc4 3a0c 	vstr	s7, [r4, #48]	; 0x30
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8013738:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    f->s0 = fast_tanh4(f->s0);
 801373c:	f000 fc18 	bl	8013f70 <fast_tanh4>
 8013740:	eef0 7a40 	vmov.f32	s15, s0
    f->s1 = fast_tanh4(f->s1);
 8013744:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    f->s0 = fast_tanh4(f->s0);
 8013748:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    f->s1 = fast_tanh4(f->s1);
 801374c:	f000 fc10 	bl	8013f70 <fast_tanh4>
 8013750:	eef0 7a40 	vmov.f32	s15, s0
    f->s2 = fast_tanh4(f->s2);
 8013754:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
    f->s1 = fast_tanh4(f->s1);
 8013758:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
    f->s2 = fast_tanh4(f->s2);
 801375c:	f000 fc08 	bl	8013f70 <fast_tanh4>
 8013760:	eef0 7a40 	vmov.f32	s15, s0
    f->s3 = fast_tanh4(f->s3);
 8013764:	ed94 0a0e 	vldr	s0, [r4, #56]	; 0x38
    f->s2 = fast_tanh4(f->s2);
 8013768:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    f->s3 = fast_tanh4(f->s3);
 801376c:	f000 fc00 	bl	8013f70 <fast_tanh4>
    f->zi = in;
    return fast_tanh4(y3*f->r);
 8013770:	edd4 7a03 	vldr	s15, [r4, #12]
    f->s3 = fast_tanh4(f->s3);
 8013774:	ed84 0a0e 	vstr	s0, [r4, #56]	; 0x38
    f->zi = in;
 8013778:	ed84 8a07 	vstr	s16, [r4, #28]
    return fast_tanh4(y3*f->r);
 801377c:	ee28 0aa7 	vmul.f32	s0, s17, s15
}
 8013780:	ecbd 8b04 	vpop	{d8-d9}
 8013784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return fast_tanh4(y3*f->r);
 8013788:	f000 bbf2 	b.w	8013f70 <fast_tanh4>
    Lfloat output = 1.0f;
 801378c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013790:	e656      	b.n	8013440 <tDiodeFilter_tickEfficient+0x60>
 8013792:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 80137bc <tDiodeFilter_tickEfficient+0x3dc>
        t2 = 0.000001f;
 8013796:	eddf 7a08 	vldr	s15, [pc, #32]	; 80137b8 <tDiodeFilter_tickEfficient+0x3d8>
 801379a:	e780      	b.n	801369e <tDiodeFilter_tickEfficient+0x2be>
 801379c:	eddf 2a07 	vldr	s5, [pc, #28]	; 80137bc <tDiodeFilter_tickEfficient+0x3dc>
        t1 = 0.000001f;
 80137a0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80137b8 <tDiodeFilter_tickEfficient+0x3d8>
 80137a4:	e772      	b.n	801368c <tDiodeFilter_tickEfficient+0x2ac>
 80137a6:	bf00      	nop
 80137a8:	43d20000 	.word	0x43d20000
 80137ac:	c46c4000 	.word	0xc46c4000
 80137b0:	446c4000 	.word	0x446c4000
 80137b4:	42d20000 	.word	0x42d20000
 80137b8:	358637bd 	.word	0x358637bd
 80137bc:	3f800008 	.word	0x3f800008

080137c0 <tDiodeFilter_setFreqFast>:

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, Lfloat cutoff)
{
	_tDiodeFilter* f = *vf;
	f->cutoffMIDI = cutoff;
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 80137c0:	eddf 7a15 	vldr	s15, [pc, #84]	; 8013818 <tDiodeFilter_setFreqFast+0x58>
 80137c4:	f640 7cfe 	movw	ip, #4094	; 0xffe
	_tDiodeFilter* f = *vf;
 80137c8:	6801      	ldr	r1, [r0, #0]
    if (intVer < 0)
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	cutoff *= 30.567164179104478f; // span of midinotes 0-134.0f (frequency range up to around 19000.0f)
 80137ce:	ee60 7a27 	vmul.f32	s15, s0, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137d2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
	f->cutoffMIDI = cutoff;
 80137d4:	ed81 0a11 	vstr	s0, [r1, #68]	; 0x44
    int32_t intVer = (int32_t)cutoff;
 80137d8:	eefd 6ae7 	vcvt.s32.f32	s13, s15
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137dc:	ee37 7a67 	vsub.f32	s14, s14, s15
    int32_t intVer = (int32_t)cutoff;
 80137e0:	ee16 3a90 	vmov	r3, s13
 80137e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80137e8:	4563      	cmp	r3, ip
 80137ea:	bfa8      	it	ge
 80137ec:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80137ee:	ee06 3a90 	vmov	s13, r3
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137f2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 80137f6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 80137fa:	edd3 5a01 	vldr	s11, [r3, #4]
 80137fe:	ed93 6a00 	vldr	s12, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013802:	ee77 7ae6 	vsub.f32	s15, s15, s13
    f->f = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013806:	ee37 7a26 	vadd.f32	s14, s14, s13
 801380a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801380e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013812:	edc1 7a02 	vstr	s15, [r1, #8]
}
 8013816:	4770      	bx	lr
 8013818:	41f4898d 	.word	0x41f4898d

0801381c <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, Lfloat resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 801381c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013820:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8013824:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8013828:	eef0 0a67 	vmov.f32	s1, s15
{
 801382c:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 801382e:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8013830:	eee0 0a07 	vfma.f32	s1, s0, s14
 8013834:	eeb0 0a67 	vmov.f32	s0, s15
 8013838:	f000 fb6e 	bl	8013f18 <LEAF_clip>
 801383c:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8013840:	bd10      	pop	{r4, pc}
 8013842:	bf00      	nop

08013844 <tDiodeFilter_setSampleRate>:

void    tDiodeFilter_setSampleRate(tDiodeFilter* const vf, Lfloat sr)
{
    _tDiodeFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 8013844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8013848:	ed9f 7a08 	vldr	s14, [pc, #32]	; 801386c <tDiodeFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 801384c:	4908      	ldr	r1, [pc, #32]	; (8013870 <tDiodeFilter_setSampleRate+0x2c>)
 801384e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013852:	4b08      	ldr	r3, [pc, #32]	; (8013874 <tDiodeFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 8013854:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tDiodeFilter* f = *vf;
 8013858:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 801385a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801385e:	bfd8      	it	le
 8013860:	460b      	movle	r3, r1
 8013862:	6413      	str	r3, [r2, #64]	; 0x40
    f->invSampleRate = 1.0f/sr;
 8013864:	edc2 7a0f 	vstr	s15, [r2, #60]	; 0x3c
    }
}
 8013868:	4770      	bx	lr
 801386a:	bf00      	nop
 801386c:	47afc800 	.word	0x47afc800
 8013870:	0801be3c 	.word	0x0801be3c
 8013874:	0801fe3c 	.word	0x0801fe3c

08013878 <tLadderFilter_init>:


void    tLadderFilter_init           (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, LEAF* const leaf)
{
 8013878:	b570      	push	{r4, r5, r6, lr}
 801387a:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, Lfloat cutoff, Lfloat resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 801387e:	698d      	ldr	r5, [r1, #24]
{
 8013880:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013882:	2040      	movs	r0, #64	; 0x40
{
 8013884:	eeb0 8a40 	vmov.f32	s16, s0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8013888:	4629      	mov	r1, r5
{
 801388a:	eef0 8a60 	vmov.f32	s17, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 801388e:	f000 fe45 	bl	801451c <mpool_alloc>
 8013892:	6030      	str	r0, [r6, #0]
    f->mempool = m;
 8013894:	6005      	str	r5, [r0, #0]
    
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->cutoffMIDI = ftom(cutoff);
 8013896:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 801389a:	686d      	ldr	r5, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 801389c:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 801389e:	686b      	ldr	r3, [r5, #4]
    f->cutoff = cutoff;
 80138a0:	ed80 8a01 	vstr	s16, [r0, #4]
    f->invSampleRate = leaf->invSampleRate;
 80138a4:	6083      	str	r3, [r0, #8]
    f->cutoffMIDI = ftom(cutoff);
 80138a6:	f000 fdb5 	bl	8014414 <ftom>
    f->oversampling = 1;
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80138aa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 801391c <tLadderFilter_init+0xa4>
    f->cutoffMIDI = ftom(cutoff);
 80138ae:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->oversampling = 1;
 80138b2:	2301      	movs	r3, #1
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80138b4:	ee28 0a07 	vmul.f32	s0, s16, s14
 80138b8:	edd4 7a02 	vldr	s15, [r4, #8]
    f->oversampling = 1;
 80138bc:	60e3      	str	r3, [r4, #12]
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80138be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80138c2:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80138c6:	f005 feaf 	bl	8019628 <tan>
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 80138ca:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80138ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 80138d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 80138d6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 80138da:	4911      	ldr	r1, [pc, #68]	; (8013920 <tLadderFilter_init+0xa8>)
    f->fb = (resonance * 8.0f);
 80138dc:	ee68 8aa6 	vmul.f32	s17, s17, s13
    f->a = 2.0f;
 80138e0:	61e3      	str	r3, [r4, #28]
    f->c2 = 2.0f * f->c;
 80138e2:	ee30 7a00 	vadd.f32	s14, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 80138e6:	4b0f      	ldr	r3, [pc, #60]	; (8013924 <tLadderFilter_init+0xac>)
    f->d = 1.0f;
 80138e8:	6262      	str	r2, [r4, #36]	; 0x24
    f->b[0] = 0.04f;
 80138ea:	62a3      	str	r3, [r4, #40]	; 0x28
    f->c = (Lfloat)tan((double)(PI * (cutoff/(Lfloat)f->oversampling)* f->invSampleRate));
 80138ec:	ed84 0a04 	vstr	s0, [r4, #16]
    f->s = 0.1f;
 80138f0:	6221      	str	r1, [r4, #32]
    f->c2 = 2.0f * f->c;
 80138f2:	ed84 7a06 	vstr	s14, [r4, #24]
    f->fb = (resonance * 8.0f);
 80138f6:	edc4 8a05 	vstr	s17, [r4, #20]
    if (leaf->sampleRate > 90000)
 80138fa:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8013928 <tLadderFilter_init+0xb0>
 80138fe:	ed95 7a00 	vldr	s14, [r5]
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013902:	4a0a      	ldr	r2, [pc, #40]	; (801392c <tLadderFilter_init+0xb4>)
 8013904:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8013908:	4b09      	ldr	r3, [pc, #36]	; (8013930 <tLadderFilter_init+0xb8>)
 801390a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801390e:	bfd8      	it	le
 8013910:	4613      	movle	r3, r2
 8013912:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8013914:	ecbd 8b02 	vpop	{d8}
 8013918:	bd70      	pop	{r4, r5, r6, pc}
 801391a:	bf00      	nop
 801391c:	40490fdb 	.word	0x40490fdb
 8013920:	3dcccccd 	.word	0x3dcccccd
 8013924:	3d23d70a 	.word	0x3d23d70a
 8013928:	47afc800 	.word	0x47afc800
 801392c:	0801be3c 	.word	0x0801be3c
 8013930:	0801fe3c 	.word	0x0801fe3c

08013934 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

Lfloat   tLadderFilter_tick               (tLadderFilter* const vf, Lfloat in)
{
    _tLadderFilter* f = *vf;
 8013934:	6802      	ldr	r2, [r0, #0]
    
    Lfloat y3 = 0.0f;
    in += 0.015f;
 8013936:	eddf 7a90 	vldr	s15, [pc, #576]	; 8013b78 <tLadderFilter_tick+0x244>
{
 801393a:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 801393e:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8013940:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8013944:	2900      	cmp	r1, #0
 8013946:	f340 8112 	ble.w	8013b6e <tLadderFilter_tick+0x23a>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801394a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 801394e:	ed92 5a04 	vldr	s10, [r2, #16]
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013952:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013956:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
        
        Lfloat f3 = f->c       * t2*g3;
        Lfloat f2 = f->c*f->c     * t1*g2 * t2*g3;
 801395a:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 801395e:	ed92 7a08 	vldr	s14, [r2, #32]
 8013962:	ee72 2a27 	vadd.f32	s5, s4, s15
 8013966:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        Lfloat estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 801396a:	ee65 aa00 	vmul.f32	s21, s10, s0
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 801396e:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013972:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8013976:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        Lfloat f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 801397a:	ee25 9a28 	vmul.f32	s18, s10, s17
 801397e:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013982:	ee62 2a87 	vmul.f32	s5, s5, s14
 8013986:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 801398a:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 801398e:	2300      	movs	r3, #0
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8013990:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013994:	ed9f 8a79 	vldr	s16, [pc, #484]	; 8013b7c <tLadderFilter_tick+0x248>
        Lfloat t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8013998:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 801399c:	3301      	adds	r3, #1
        Lfloat t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 801399e:	ee31 6a23 	vadd.f32	s12, s2, s7
        Lfloat t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 80139a2:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 80139a6:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80139a8:	ee65 5aa5 	vmul.f32	s11, s11, s11
 80139ac:	ee26 6a06 	vmul.f32	s12, s12, s12
 80139b0:	ee66 6aa6 	vmul.f32	s13, s13, s13
 80139b4:	ee22 baa5 	vmul.f32	s22, s5, s11
 80139b8:	ee26 ca22 	vmul.f32	s24, s12, s5
 80139bc:	ee72 5a25 	vadd.f32	s11, s4, s11
 80139c0:	ee32 6a06 	vadd.f32	s12, s4, s12
 80139c4:	ee66 baa2 	vmul.f32	s23, s13, s5
 80139c8:	eecb ea25 	vdiv.f32	s29, s22, s11
 80139cc:	eecc 5a06 	vdiv.f32	s11, s24, s12
 80139d0:	ee72 6a26 	vadd.f32	s13, s4, s13
        Lfloat t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 80139d4:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80139d8:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 80139dc:	ee27 7a07 	vmul.f32	s14, s14, s14
 80139e0:	ee77 eaee 	vsub.f32	s29, s15, s29
 80139e4:	ee77 6ae5 	vsub.f32	s13, s15, s11
 80139e8:	ee22 ba87 	vmul.f32	s22, s5, s14
 80139ec:	ee32 7a07 	vadd.f32	s14, s4, s14
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 80139f0:	ee65 5a2e 	vmul.f32	s11, s10, s29
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80139f4:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 80139f8:	eecb ca07 	vdiv.f32	s25, s22, s14
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 80139fc:	ee7e da27 	vadd.f32	s27, s28, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013a00:	ee37 7ac6 	vsub.f32	s14, s15, s12
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013a04:	ee35 6aa7 	vadd.f32	s12, s11, s15
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013a08:	ee25 da07 	vmul.f32	s26, s10, s14
        Lfloat z0 = f->c*t0 / (1.0f + f->c*t0);
 8013a0c:	eec5 ba86 	vdiv.f32	s23, s11, s12
        Lfloat z1 = f->c*t1 / (1.0f + f->c*t1);
 8013a10:	eece 5a2d 	vdiv.f32	s11, s28, s27
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013a14:	ee3d ca27 	vadd.f32	s24, s26, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8013a18:	ee77 caec 	vsub.f32	s25, s15, s25
        Lfloat g0 = 1.0f / (1.0f + f->c*t0);
 8013a1c:	ee87 fa86 	vdiv.f32	s30, s15, s12
        Lfloat z2 = f->c*t2 / (1.0f + f->c*t2);
 8013a20:	ee8d ea0c 	vdiv.f32	s28, s26, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013a24:	ee25 ba2c 	vmul.f32	s22, s10, s25
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013a28:	ee6b baa5 	vmul.f32	s23, s23, s11
        Lfloat g1 = 1.0f / (1.0f + f->c*t1);
 8013a2c:	ee87 6aad 	vdiv.f32	s12, s15, s27
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013a30:	ee7b 5a27 	vadd.f32	s11, s22, s15
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013a34:	ee6b baa0 	vmul.f32	s23, s23, s1
        Lfloat g2 = 1.0f / (1.0f + f->c*t2);
 8013a38:	eec7 da8c 	vdiv.f32	s27, s15, s24
        Lfloat g3 = 1.0f / (1.0f + f->c*t3);
 8013a3c:	ee87 caa5 	vdiv.f32	s24, s15, s11
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013a40:	ee6b ba8e 	vmul.f32	s23, s23, s28
        Lfloat z3 = f->c*t3 / (1.0f + f->c*t3);
 8013a44:	ee8b ea25 	vdiv.f32	s28, s22, s11
        Lfloat estimate =
 8013a48:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8013a4c:	ee27 ba26 	vmul.f32	s22, s14, s13
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013a50:	ee66 6a26 	vmul.f32	s13, s12, s13
 8013a54:	ee65 5a89 	vmul.f32	s11, s11, s18
 8013a58:	ee2b ba06 	vmul.f32	s22, s22, s12
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013a5c:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8013a60:	ee65 5aae 	vmul.f32	s11, s11, s29
 8013a64:	ee60 ea8c 	vmul.f32	s29, s1, s24
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013a68:	ee2c ca2c 	vmul.f32	s24, s24, s25
 8013a6c:	ee65 5a8f 	vmul.f32	s11, s11, s30
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013a70:	eef0 ca67 	vmov.f32	s25, s15
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013a74:	ee2d 7a87 	vmul.f32	s14, s27, s14
 8013a78:	eee3 5aa8 	vfma.f32	s11, s7, s17
        Lfloat cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8013a7c:	eeeb ca8e 	vfma.f32	s25, s23, s28
 8013a80:	ee6b 5a25 	vmul.f32	s11, s22, s11
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013a84:	eec9 baac 	vdiv.f32	s23, s19, s25
 8013a88:	eeed 5a04 	vfma.f32	s11, s26, s8
 8013a8c:	eef0 ca64 	vmov.f32	s25, s9
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8013a90:	eeb0 ba67 	vmov.f32	s22, s15
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013a94:	eeb0 da48 	vmov.f32	s26, s16
 8013a98:	eeed caa5 	vfma.f32	s25, s27, s11
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013a9c:	eef0 5a4a 	vmov.f32	s11, s20
    Lfloat  x1 = smoothABS (x-a, 0.01f);
 8013aa0:	eeac baae 	vfma.f32	s22, s25, s29
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013aa4:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013aa8:	eef0 ca48 	vmov.f32	s25, s16
 8013aac:	eeab da0b 	vfma.f32	s26, s22, s22
 8013ab0:	eee5 caa5 	vfma.f32	s25, s11, s11
 8013ab4:	eef1 5acd 	vsqrt.f32	s11, s26
 8013ab8:	eeb1 baec 	vsqrt.f32	s22, s25
        Lfloat xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8013abc:	ee3b ba65 	vsub.f32	s22, s22, s11
 8013ac0:	eef0 5a40 	vmov.f32	s11, s0
 8013ac4:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        Lfloat y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8013ac8:	eeb0 ba43 	vmov.f32	s22, s6
 8013acc:	eea5 ba25 	vfma.f32	s22, s10, s11
 8013ad0:	ee26 6a0b 	vmul.f32	s12, s12, s22
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013ad4:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 8013ad8:	ee75 5ac6 	vsub.f32	s11, s11, s12
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013adc:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8013ae0:	eea1 3aa5 	vfma.f32	s6, s3, s11
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013ae4:	eef0 5a44 	vmov.f32	s11, s8
        Lfloat y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8013ae8:	ee66 6a8b 	vmul.f32	s13, s13, s22
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013aec:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8013af0:	ee36 6a66 	vsub.f32	s12, s12, s13
 8013af4:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013af8:	eeb0 6a64 	vmov.f32	s12, s9
        Lfloat y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8013afc:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013b00:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8013b04:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8013b08:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8013b0c:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8013b10:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8013b14:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8013b18:	f47f af3e 	bne.w	8013998 <tLadderFilter_tick+0x64>
 8013b1c:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8013b20:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8013b24:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8013b28:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013b2c:	eddf 7a13 	vldr	s15, [pc, #76]	; 8013b7c <tLadderFilter_tick+0x248>
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013b30:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013b34:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013b38:	eeb0 5a67 	vmov.f32	s10, s15
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013b3c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013b40:	eea0 5aa0 	vfma.f32	s10, s1, s1
    Lfloat  x2 = smoothABS (x-b, 0.01f);
 8013b44:	ee70 0ac6 	vsub.f32	s1, s1, s12
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8013b48:	eee0 7aa0 	vfma.f32	s15, s1, s1
 8013b4c:	eeb0 7a67 	vmov.f32	s14, s15
 8013b50:	eef1 7ac5 	vsqrt.f32	s15, s10
 8013b54:	eeb1 5ac7 	vsqrt.f32	s10, s14
    x = x - x2;
 8013b58:	ee77 7a86 	vadd.f32	s15, s15, s12
 8013b5c:	ee77 7ac5 	vsub.f32	s15, s15, s10
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013b60:	eea7 0aa5 	vfma.f32	s0, s15, s11
    return y3 * compensation;
}
 8013b64:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8013b68:	ecbd 8b10 	vpop	{d8-d15}
 8013b6c:	4770      	bx	lr
    Lfloat compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8013b6e:	edd2 0a05 	vldr	s1, [r2, #20]
    Lfloat y3 = 0.0f;
 8013b72:	ed9f ca03 	vldr	s24, [pc, #12]	; 8013b80 <tLadderFilter_tick+0x24c>
 8013b76:	e7d9      	b.n	8013b2c <tLadderFilter_tick+0x1f8>
 8013b78:	3c75c28f 	.word	0x3c75c28f
 8013b7c:	3c23d70a 	.word	0x3c23d70a
 8013b80:	00000000 	.word	0x00000000

08013b84 <tLadderFilter_setFreqFast>:

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, Lfloat cutoff)
{
    _tLadderFilter* f = *vf;
    f->cutoffMIDI = cutoff;
    cutoff *= 30.567164179104478f;
 8013b84:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8013be4 <tLadderFilter_setFreqFast+0x60>
 8013b88:	f640 7cfe 	movw	ip, #4094	; 0xffe
    _tLadderFilter* f = *vf;
 8013b8c:	6802      	ldr	r2, [r0, #0]
    {
    	intVer = 0;
    }
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;

    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013b8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    cutoff *= 30.567164179104478f;
 8013b92:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013b96:	6b91      	ldr	r1, [r2, #56]	; 0x38
    f->cutoffMIDI = cutoff;
 8013b98:	ed82 0a0f 	vstr	s0, [r2, #60]	; 0x3c
    int32_t intVer = (int32_t)cutoff;
 8013b9c:	eefd 7ac7 	vcvt.s32.f32	s15, s14
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013ba0:	ee76 6ac7 	vsub.f32	s13, s13, s14
    int32_t intVer = (int32_t)cutoff;
 8013ba4:	ee17 3a90 	vmov	r3, s15
 8013ba8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8013bac:	4563      	cmp	r3, ip
 8013bae:	bfa8      	it	ge
 8013bb0:	4663      	movge	r3, ip
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013bb2:	ee07 3a90 	vmov	s15, r3
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013bb6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013bba:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013bbe:	ed93 5a01 	vldr	s10, [r3, #4]
 8013bc2:	edd3 5a00 	vldr	s11, [r3]
    Lfloat LfloatVer = cutoff - (Lfloat)intVer;
 8013bc6:	ee77 7a46 	vsub.f32	s15, s14, s12
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013bca:	ee36 7a86 	vadd.f32	s14, s13, s12
 8013bce:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013bd2:	eee5 7a87 	vfma.f32	s15, s11, s14
    f->c2 = 2.0f * f->c;
 8013bd6:	ee37 7aa7 	vadd.f32	s14, s15, s15
    f->c = (f->table[intVer] * (1.0f - LfloatVer)) + (f->table[intVer+1] * LfloatVer);
 8013bda:	edc2 7a04 	vstr	s15, [r2, #16]
    f->c2 = 2.0f * f->c;
 8013bde:	ed82 7a06 	vstr	s14, [r2, #24]
}
 8013be2:	4770      	bx	lr
 8013be4:	41f4898d 	.word	0x41f4898d

08013be8 <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, Lfloat resonance)
{
 8013be8:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 8013bea:	6804      	ldr	r4, [r0, #0]
{
 8013bec:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8013bf0:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8013bf4:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8013c04 <tLadderFilter_setQ+0x1c>
 8013bf8:	f000 f98e 	bl	8013f18 <LEAF_clip>
 8013bfc:	ed84 0a05 	vstr	s0, [r4, #20]
}
 8013c00:	bd10      	pop	{r4, pc}
 8013c02:	bf00      	nop
 8013c04:	3e4ccccd 	.word	0x3e4ccccd

08013c08 <tLadderFilter_setSampleRate>:

void    tLadderFilter_setSampleRate(tLadderFilter* const vf, Lfloat sr)
{
    _tLadderFilter* f = *vf;
    
    f->invSampleRate = 1.0f/sr;
 8013c08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    if (sr > 90000)
 8013c0c:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013c30 <tLadderFilter_setSampleRate+0x28>
    {
    	f->table = __filterTanhTable_96000;
    }
    else
    {
    	f->table = __filterTanhTable_48000;
 8013c10:	4908      	ldr	r1, [pc, #32]	; (8013c34 <tLadderFilter_setSampleRate+0x2c>)
 8013c12:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8013c16:	4b08      	ldr	r3, [pc, #32]	; (8013c38 <tLadderFilter_setSampleRate+0x30>)
    f->invSampleRate = 1.0f/sr;
 8013c18:	eec6 7a80 	vdiv.f32	s15, s13, s0
    _tLadderFilter* f = *vf;
 8013c1c:	6802      	ldr	r2, [r0, #0]
    	f->table = __filterTanhTable_48000;
 8013c1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c22:	bfd8      	it	le
 8013c24:	460b      	movle	r3, r1
 8013c26:	6393      	str	r3, [r2, #56]	; 0x38
    f->invSampleRate = 1.0f/sr;
 8013c28:	edc2 7a02 	vstr	s15, [r2, #8]
    }
}
 8013c2c:	4770      	bx	lr
 8013c2e:	bf00      	nop
 8013c30:	47afc800 	.word	0x47afc800
 8013c34:	0801be3c 	.word	0x0801be3c
 8013c38:	0801fe3c 	.word	0x0801fe3c

08013c3c <LEAF_map>:
    return(fraction);
}

inline float LEAF_map(float value, float istart, float istop, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8013c3c:	ee70 7a60 	vsub.f32	s15, s0, s1
 8013c40:	ee31 1a60 	vsub.f32	s2, s2, s1
 8013c44:	ee32 2a61 	vsub.f32	s4, s4, s3
 8013c48:	ee87 7a81 	vdiv.f32	s14, s15, s2
}
 8013c4c:	eee2 1a07 	vfma.f32	s3, s4, s14
 8013c50:	eeb0 0a61 	vmov.f32	s0, s3
 8013c54:	4770      	bx	lr
 8013c56:	bf00      	nop

08013c58 <LEAF_mapFromZeroToOneInput>:

inline float LEAF_mapFromZeroToOneInput(float value, float ostart, float ostop)
{
    return ostart + (ostop - ostart) * value;
 8013c58:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 8013c5c:	eee1 0a00 	vfma.f32	s1, s2, s0
 8013c60:	eeb0 0a60 	vmov.f32	s0, s1
 8013c64:	4770      	bx	lr
 8013c66:	bf00      	nop

08013c68 <LEAF_mapToZeroToOneOutput>:

inline float LEAF_mapToZeroToOneOutput(float value, float istart, float istop)
{
	return ((value - istart) / (istop - istart));
 8013c68:	ee30 0a60 	vsub.f32	s0, s0, s1
 8013c6c:	ee31 1a60 	vsub.f32	s2, s2, s1
}
 8013c70:	ee80 0a01 	vdiv.f32	s0, s0, s2
 8013c74:	4770      	bx	lr
 8013c76:	bf00      	nop

08013c78 <fastertanf>:
    return fResult;
}

inline Lfloat fastertanf(Lfloat fAngle)
{
    Lfloat fASqr = fAngle*fAngle;
 8013c78:	ee60 6a00 	vmul.f32	s13, s0, s0
    Lfloat fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 8013c7c:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8013c98 <fastertanf+0x20>
 8013c80:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8013c9c <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 8013c84:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 8013c88:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 8013c8c:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 8013c90:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c94:	4770      	bx	lr
 8013c96:	bf00      	nop
 8013c98:	3e502de0 	.word	0x3e502de0
 8013c9c:	3ea295ea 	.word	0x3ea295ea

08013ca0 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
inline Lfloat fastsqrtf(Lfloat x)
{
	union { Lfloat f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013ca0:	ee10 2a10 	vmov	r2, s0
 8013ca4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 8013ca8:	4b0d      	ldr	r3, [pc, #52]	; (8013ce0 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 8013caa:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8013cae:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 8013cb2:	ee60 7a27 	vmul.f32	s15, s0, s15
 8013cb6:	ee00 3a10 	vmov	s0, r3
 8013cba:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013cbe:	eea0 7a67 	vfms.f32	s14, s0, s15
 8013cc2:	ee60 7a07 	vmul.f32	s15, s0, s14
 8013cc6:	ee17 3a90 	vmov	r3, s15
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 8013cca:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8013cce:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8013cd2:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 8013cd6:	336e      	adds	r3, #110	; 0x6e
}
 8013cd8:	ee00 3a10 	vmov	s0, r3
 8013cdc:	4770      	bx	lr
 8013cde:	bf00      	nop
 8013ce0:	5f3759df 	.word	0x5f3759df

08013ce4 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8013ce4:	ee10 3a10 	vmov	r3, s0
 8013ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013cec:	ee00 3a10 	vmov	s0, r3
}
 8013cf0:	4770      	bx	lr
 8013cf2:	bf00      	nop

08013cf4 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline Lfloat fasterexpf(Lfloat x) {
    x = 1.0f + (x * 0.00390625f);
 8013cf4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013cf8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8013d24 <fasterexpf+0x30>
 8013cfc:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8013d00:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8013d04:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013d08:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013d0c:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8013d10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013d14:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013d18:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8013d1c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8013d20:	4770      	bx	lr
 8013d22:	bf00      	nop
 8013d24:	3b800000 	.word	0x3b800000

08013d28 <fastExp3>:

inline Lfloat fastExp3(register Lfloat x)  // cubic spline approximation
{
    union { Lfloat f; int32_t i; } reinterpreter;

    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013d28:	eddf 7a10 	vldr	s15, [pc, #64]	; 8013d6c <fastExp3+0x44>
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
    // empirical values for small maximum relative error (8.34e-5):
    reinterpreter.i +=
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8013d2c:	f240 4cfd 	movw	ip, #1277	; 0x4fd
 8013d30:	f643 11e9 	movw	r1, #14825	; 0x39e9
 8013d34:	4b0e      	ldr	r3, [pc, #56]	; (8013d70 <fastExp3+0x48>)
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013d36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013d3a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8013d3e:	ee17 2a90 	vmov	r2, s15
    int32_t m = (reinterpreter.i >> 7) & 0xFFFF;  // copy mantissa
 8013d42:	f3c2 10cf 	ubfx	r0, r2, #7, #16
    reinterpreter.i = (int32_t)(12102203.0f*x) + 127*(1 << 23);
 8013d46:	f102 527e 	add.w	r2, r2, #1065353216	; 0x3f800000
         ((((((((1277*m) >> 14) + 14825)*m) >> 14) - 79749)*m) >> 11) - 626;
 8013d4a:	fb0c fc00 	mul.w	ip, ip, r0
 8013d4e:	eb01 31ac 	add.w	r1, r1, ip, asr #14
 8013d52:	fb00 f101 	mul.w	r1, r0, r1
 8013d56:	eb03 33a1 	add.w	r3, r3, r1, asr #14
 8013d5a:	fb00 f303 	mul.w	r3, r0, r3
 8013d5e:	12db      	asrs	r3, r3, #11
 8013d60:	f2a3 2372 	subw	r3, r3, #626	; 0x272
    return reinterpreter.f;
 8013d64:	4413      	add	r3, r2
 8013d66:	ee00 3a10 	vmov	s0, r3
}
 8013d6a:	4770      	bx	lr
 8013d6c:	4b38aa3b 	.word	0x4b38aa3b
 8013d70:	fffec87b 	.word	0xfffec87b
 8013d74:	00000000 	.word	0x00000000

08013d78 <fast_sinf2>:
inline Lfloat fast_sinf2(Lfloat x)
{
	Lfloat invert = 1.0f;
	Lfloat out;

	x = x * INV_TWO_PI_TIMES_SINE_TABLE_SIZE;
 8013d78:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 8013df0 <fast_sinf2+0x78>
 8013d7c:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8013d80:	ee20 0b07 	vmul.f64	d0, d0, d7
 8013d84:	eeb7 0bc0 	vcvt.f32.f64	s0, d0

	if (x < 0.0f)
 8013d88:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d90:	d426      	bmi.n	8013de0 <fast_sinf2+0x68>
	Lfloat invert = 1.0f;
 8013d92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	{
		x *= -1.0f;
		invert = -1.0f;
	}
	int intX = ((int)x) & 2047;
 8013d96:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	int intXNext = (intX + 1) & 2047;
	Lfloat LfloatX = x-intX;

	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013d9a:	4a17      	ldr	r2, [pc, #92]	; (8013df8 <fast_sinf2+0x80>)
	int intX = ((int)x) & 2047;
 8013d9c:	ee17 3a90 	vmov	r3, s15
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013da0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	int intX = ((int)x) & 2047;
 8013da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013da8:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int intXNext = (intX + 1) & 2047;
 8013dac:	1c59      	adds	r1, r3, #1
	Lfloat LfloatX = x-intX;
 8013dae:	ee07 3a10 	vmov	s14, r3
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013db2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	Lfloat LfloatX = x-intX;
 8013db6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int intXNext = (intX + 1) & 2047;
 8013dba:	f3c1 010a 	ubfx	r1, r1, #0, #11
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013dbe:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	Lfloat LfloatX = x-intX;
 8013dc2:	ee30 0a47 	vsub.f32	s0, s0, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013dc6:	ed92 6a00 	vldr	s12, [r2]
	out = __leaf_table_sinewave[intX] * (1.0f - LfloatX);
 8013dca:	ee77 7a87 	vadd.f32	s15, s15, s14
	out += __leaf_table_sinewave[intXNext] * LfloatX;
 8013dce:	ed93 7a00 	vldr	s14, [r3]
 8013dd2:	ee20 0a06 	vmul.f32	s0, s0, s12
 8013dd6:	eea7 0a27 	vfma.f32	s0, s14, s15
	out *= invert;
	return out;
}
 8013dda:	ee26 0a80 	vmul.f32	s0, s13, s0
 8013dde:	4770      	bx	lr
		x *= -1.0f;
 8013de0:	eeb1 0a40 	vneg.f32	s0, s0
		invert = -1.0f;
 8013de4:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8013de8:	e7d5      	b.n	8013d96 <fast_sinf2+0x1e>
 8013dea:	bf00      	nop
 8013dec:	f3af 8000 	nop.w
 8013df0:	6dc9c883 	.word	0x6dc9c883
 8013df4:	40745f30 	.word	0x40745f30
 8013df8:	08023ebc 	.word	0x08023ebc

08013dfc <fastPowf>:
    { 
        Lfloat d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 8013dfc:	ee10 3a10 	vmov	r3, s0
 8013e00:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8013e24 <fastPowf+0x28>
 8013e04:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8013e08:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 8013e0c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8013e10:	330b      	adds	r3, #11
 8013e12:	ee07 3a90 	vmov	s15, r3
 8013e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013e1a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 8013e1e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8013e22:	4770      	bx	lr
 8013e24:	4e7de250 	.word	0x4e7de250

08013e28 <LEAF_crossfade>:
 when t = 0, volumes[0] = 0.707, volumes[1] = 0.707 (equal-power cross fade)
 when t = 1, volumes[0] = 1, volumes[1] = 0
 */

inline void LEAF_crossfade(Lfloat fade, Lfloat* volumes) {
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013e28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8013e2c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8013e30:	ee30 7a27 	vadd.f32	s14, s0, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013e34:	ee37 0ac0 	vsub.f32	s0, s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013e38:	ee67 7a26 	vmul.f32	s15, s14, s13
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013e3c:	ee20 0a26 	vmul.f32	s0, s0, s13
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013e40:	eeb1 7ae7 	vsqrt.f32	s14, s15
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013e44:	eef1 7ac0 	vsqrt.f32	s15, s0
    volumes[0] = sqrtf(0.5f * (1.0f + fade));
 8013e48:	ed80 7a00 	vstr	s14, [r0]
    volumes[1] = sqrtf(0.5f * (1.0f - fade));
 8013e4c:	edc0 7a01 	vstr	s15, [r0, #4]
}
 8013e50:	4770      	bx	lr
 8013e52:	bf00      	nop

08013e54 <LEAF_shaper>:
#else
		inline Lfloat LEAF_clip(Lfloat min, Lfloat val, Lfloat max)
#endif
{

    if (val < min)
 8013e54:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8013ed0 <LEAF_shaper+0x7c>
 8013e58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013e5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e60:	d406      	bmi.n	8013e70 <LEAF_shaper+0x1c>
    {
        return min;
    }
    else if (val > max)
 8013e62:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8013ed4 <LEAF_shaper+0x80>
 8013e66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013e6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013e6e:	dd02      	ble.n	8013e76 <LEAF_shaper+0x22>
 8013e70:	ed9f 0a19 	vldr	s0, [pc, #100]	; 8013ed8 <LEAF_shaper+0x84>
}
 8013e74:	4770      	bx	lr
    Lfloat fx = input * 2.0f;    // prescale
 8013e76:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013e7a:	eddf 4a18 	vldr	s9, [pc, #96]	; 8013edc <LEAF_shaper+0x88>
 8013e7e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8013e82:	eddf 3a17 	vldr	s7, [pc, #92]	; 8013ee0 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 8013e86:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
    xc2 = xc*xc;
 8013e8a:	ee20 6a00 	vmul.f32	s12, s0, s0
    c = 0.5f*fx*(3.0f - (xc2));
 8013e8e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013e92:	eeb6 5a08 	vmov.f32	s10, #104	; 0x3f400000  0.750
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013e96:	ee26 4a06 	vmul.f32	s8, s12, s12
 8013e9a:	ee66 6ac6 	vnmul.f32	s13, s13, s12
    c = 0.5f*fx*(3.0f - (xc2));
 8013e9e:	ee37 7a46 	vsub.f32	s14, s14, s12
 8013ea2:	ee60 7a27 	vmul.f32	s15, s0, s15
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013ea6:	eee4 6a24 	vfma.f32	s13, s8, s9
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013eaa:	ee70 0a85 	vadd.f32	s1, s1, s10
 8013eae:	ed9f 5a0d 	vldr	s10, [pc, #52]	; 8013ee4 <LEAF_shaper+0x90>
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013eb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    c = 0.5f*fx*(3.0f - (xc2));
 8013eb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eba:	ee20 0aa3 	vmul.f32	s0, s1, s7
    Lfloat shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 8013ebe:	eee6 7a05 	vfma.f32	s15, s12, s10
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 8013ec2:	ee36 7aa5 	vadd.f32	s14, s13, s11
 8013ec6:	ee20 0a07 	vmul.f32	s0, s0, s14
    shaperOut *= 0.5f;    // post_scale
 8013eca:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return max;
    }
    else
    {
        return val;
 8013ece:	4770      	bx	lr
 8013ed0:	bfb504f3 	.word	0xbfb504f3
 8013ed4:	3fb504f3 	.word	0x3fb504f3
 8013ed8:	00000000 	.word	0x00000000
 8013edc:	3c800000 	.word	0x3c800000
 8013ee0:	3f272f05 	.word	0x3f272f05
 8013ee4:	3d4ccccd 	.word	0x3d4ccccd

08013ee8 <LEAF_round>:
    rnd = fabsf(rnd);
 8013ee8:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8013eec:	eddf 7a06 	vldr	s15, [pc, #24]	; 8013f08 <LEAF_round+0x20>
 8013ef0:	eef4 0ae7 	vcmpe.f32	s1, s15
 8013ef4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013ef8:	d905      	bls.n	8013f06 <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 8013efa:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8013efe:	fef8 7a67 	vrinta.f32	s15, s15
 8013f02:	ee27 0aa0 	vmul.f32	s0, s15, s1
}
 8013f06:	4770      	bx	lr
 8013f08:	33d6bf95 	.word	0x33d6bf95

08013f0c <LEAF_bitwise_xor>:
    return unholy.f;
 8013f0c:	ee10 3a10 	vmov	r3, s0
 8013f10:	4043      	eors	r3, r0
 8013f12:	ee00 3a10 	vmov	s0, r3
}
 8013f16:	4770      	bx	lr

08013f18 <LEAF_clip>:
    if (val < min)
 8013f18:	eef4 0ac0 	vcmpe.f32	s1, s0
 8013f1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f20:	d401      	bmi.n	8013f26 <LEAF_clip+0xe>
    else if (val > max)
 8013f22:	fe80 0ac1 	vminnm.f32	s0, s1, s2
    }
}
 8013f26:	4770      	bx	lr

08013f28 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
inline Lfloat LEAF_tanh(Lfloat x)
{
    
    if( x < -3.0f )
 8013f28:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 8013f2c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f34:	d418      	bmi.n	8013f68 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8013f36:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013f3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8013f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013f42:	dd02      	ble.n	8013f4a <LEAF_tanh+0x22>
        return 1.0f;
 8013f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8013f48:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 8013f4a:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013f4e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 8013f52:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 8013f56:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8013f5a:	eee6 7a86 	vfma.f32	s15, s13, s12
 8013f5e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8013f62:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8013f66:	4770      	bx	lr
        return -1.0f;
 8013f68:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8013f6c:	4770      	bx	lr
 8013f6e:	bf00      	nop

08013f70 <fast_tanh4>:

//from antto on KVR forum
inline Lfloat   fast_tanh4 (Lfloat x)
{
    Lfloat xa = fabsf(x);
    Lfloat x2 = xa * xa;
 8013f70:	ee60 6a00 	vmul.f32	s13, s0, s0
 8013f74:	ed9f 4a11 	vldr	s8, [pc, #68]	; 8013fbc <fast_tanh4+0x4c>
    Lfloat xa = fabsf(x);
 8013f78:	eeb0 7ac0 	vabs.f32	s14, s0
    Lfloat x3 = xa * x2;
 8013f7c:	eddf 4a10 	vldr	s9, [pc, #64]	; 8013fc0 <fast_tanh4+0x50>
 8013f80:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8013f84:	eddf 5a0f 	vldr	s11, [pc, #60]	; 8013fc4 <fast_tanh4+0x54>
    Lfloat x4 = x2 * x2;
 8013f88:	ee26 5aa6 	vmul.f32	s10, s13, s13
 8013f8c:	ee77 7a26 	vadd.f32	s15, s14, s13
    Lfloat x3 = xa * x2;
 8013f90:	ee27 7a26 	vmul.f32	s14, s14, s13
    Lfloat x7 = x3 * x4;
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8013f94:	eee5 5a04 	vfma.f32	s11, s10, s8
 8013f98:	ee77 7a86 	vadd.f32	s15, s15, s12
    Lfloat   result = (x < 0) ? -res : res;
 8013f9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8013fa0:	eee5 7a24 	vfma.f32	s15, s10, s9
 8013fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    Lfloat res = (1.0f - 1.0f / (1.0f + xa + x2 + 0.58576695f * x3 + 0.55442112f * x4 + 0.057481508f * x7));
 8013fa8:	eee7 7a25 	vfma.f32	s15, s14, s11
 8013fac:	ee86 7a27 	vdiv.f32	s14, s12, s15
 8013fb0:	bf54      	ite	pl
 8013fb2:	ee36 0a47 	vsubpl.f32	s0, s12, s14
    Lfloat   result = (x < 0) ? -res : res;
 8013fb6:	ee37 0a46 	vsubmi.f32	s0, s14, s12

    return (result);
}
 8013fba:	4770      	bx	lr
 8013fbc:	3d6b71bb 	.word	0x3d6b71bb
 8013fc0:	3f0dee8b 	.word	0x3f0dee8b
 8013fc4:	3f15f4d3 	.word	0x3f15f4d3

08013fc8 <fast_tanh5>:

//from raphx on this post : https://www.kvraudio.com/forum/viewtopic.php?t=332930&start=30
inline Lfloat fast_tanh5(Lfloat x)
{
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8013fc8:	ee60 7a00 	vmul.f32	s15, s0, s0
 8013fcc:	ed9f 6a09 	vldr	s12, [pc, #36]	; 8013ff4 <fast_tanh5+0x2c>
 8013fd0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8013ff8 <fast_tanh5+0x30>
	return a / sqrtf(1.0f + a * a);
 8013fd4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013fd8:	eee7 6a86 	vfma.f32	s13, s15, s12
	Lfloat a = x + 0.16489087f * x*x*x + 0.00985468f * x*x*x*x*x;
 8013fdc:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013fe0:	eea7 0aa6 	vfma.f32	s0, s15, s13
	return a / sqrtf(1.0f + a * a);
 8013fe4:	eea0 7a00 	vfma.f32	s14, s0, s0
 8013fe8:	eef1 7ac7 	vsqrt.f32	s15, s14
}
 8013fec:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8013ff0:	4770      	bx	lr
 8013ff2:	bf00      	nop
 8013ff4:	3c217586 	.word	0x3c217586
 8013ff8:	3e28d927 	.word	0x3e28d927

08013ffc <fastSine>:
//from Olli Niemitalo
//https://dsp.stackexchange.com/questions/46629/finding-polynomial-approximations-of-a-sine-wave
inline Lfloat fastSine(Lfloat x)
{
	Lfloat term1 = x * 1.570034357f;
	Lfloat term2 = x * x * x * -0.6425216143f;
 8013ffc:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014000:	eddf 6a08 	vldr	s13, [pc, #32]	; 8014024 <fastSine+0x28>
 8014004:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014028 <fastSine+0x2c>
 8014008:	ee60 6a26 	vmul.f32	s13, s0, s13
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
	return term1+term2+term3;
 801400c:	ed9f 6a07 	vldr	s12, [pc, #28]	; 801402c <fastSine+0x30>
	Lfloat term2 = x * x * x * -0.6425216143f;
 8014010:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat term3 = x * x * x * x * x * 0.07248725712f;
 8014014:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return term1+term2+term3;
 8014018:	ee20 0a07 	vmul.f32	s0, s0, s14
}
 801401c:	eea7 0a86 	vfma.f32	s0, s15, s12
 8014020:	4770      	bx	lr
 8014022:	bf00      	nop
 8014024:	3d947433 	.word	0x3d947433
 8014028:	3fc8f6e3 	.word	0x3fc8f6e3
 801402c:	bf247c4c 	.word	0xbf247c4c

08014030 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(Lfloat* buffer, Lfloat base, Lfloat start, Lfloat end, Lfloat offset, int size)
{
 8014030:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8014032:	1e4b      	subs	r3, r1, #1
 8014034:	ee31 1a60 	vsub.f32	s2, s2, s1
    Lfloat x = start;
    for (int i = 0; i < size; i++)
 8014038:	2900      	cmp	r1, #0
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 801403a:	ee07 3a90 	vmov	s15, r3
 801403e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8014042:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (end - start) / (Lfloat)(size-1);
 8014046:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 801404a:	dd16      	ble.n	801407a <LEAF_generate_exp+0x4a>
 801404c:	4604      	mov	r4, r0
 801404e:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8014052:	eeb0 8a60 	vmov.f32	s16, s1
 8014056:	eef0 8a40 	vmov.f32	s17, s0
 801405a:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 801405e:	eef0 0a48 	vmov.f32	s1, s16
 8014062:	eeb0 0a68 	vmov.f32	s0, s17
 8014066:	f004 ff97 	bl	8018f98 <powf>
 801406a:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 801406e:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 8014072:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8014076:	42a5      	cmp	r5, r4
 8014078:	d1f1      	bne.n	801405e <LEAF_generate_exp+0x2e>
    }
}
 801407a:	ecbd 8b04 	vpop	{d8-d9}
 801407e:	bd38      	pop	{r3, r4, r5, pc}

08014080 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(Lfloat* buffer, Lfloat start, Lfloat end, Lfloat center, int size)
{
 8014080:	b538      	push	{r3, r4, r5, lr}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8014082:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8014086:	460d      	mov	r5, r1
 8014088:	4604      	mov	r4, r0
 801408a:	ed2d 8b06 	vpush	{d8-d10}
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 801408e:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8014092:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat skew = logf (0.5) / logf ((center - start) / (end - start));
 8014096:	ee81 0a29 	vdiv.f32	s0, s2, s19
 801409a:	f004 fd77 	bl	8018b8c <logf>
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 801409e:	1e6b      	subs	r3, r5, #1
    Lfloat x = 0.0000000001f;
    Lfloat proportion = 0.0;
    for (int i = 0; i < size; i++)
 80140a0:	2d00      	cmp	r5, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80140a2:	ee07 3a90 	vmov	s15, r3
 80140a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80140aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80140ae:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 80140b2:	dd1e      	ble.n	80140f2 <LEAF_generate_table_skew_non_sym+0x72>
 80140b4:	eddf 7a10 	vldr	s15, [pc, #64]	; 80140f8 <LEAF_generate_table_skew_non_sym+0x78>
 80140b8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    Lfloat x = 0.0000000001f;
 80140bc:	ed9f 8a0f 	vldr	s16, [pc, #60]	; 80140fc <LEAF_generate_table_skew_non_sym+0x7c>
 80140c0:	eeb0 9a40 	vmov.f32	s18, s0
    for (int i = 0; i < size; i++)
 80140c4:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8014100 <LEAF_generate_table_skew_non_sym+0x80>
 80140c8:	ee29 9a27 	vmul.f32	s18, s18, s15
 80140cc:	e001      	b.n	80140d2 <LEAF_generate_table_skew_non_sym+0x52>
    {
        proportion = expf (logf(x) / skew);
 80140ce:	f004 fd5d 	bl	8018b8c <logf>
 80140d2:	ee29 0a00 	vmul.f32	s0, s18, s0
 80140d6:	f004 fce5 	bl	8018aa4 <expf>
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 80140da:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 80140de:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 80140e2:	eee9 7a80 	vfma.f32	s15, s19, s0
        proportion = expf (logf(x) / skew);
 80140e6:	eeb0 0a48 	vmov.f32	s0, s16
        buffer[i] = (Lfloat)(start + (end - start) * proportion);
 80140ea:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80140ee:	42a5      	cmp	r5, r4
 80140f0:	d1ed      	bne.n	80140ce <LEAF_generate_table_skew_non_sym+0x4e>
    }
}
 80140f2:	ecbd 8b06 	vpop	{d8-d10}
 80140f6:	bd38      	pop	{r3, r4, r5, pc}
 80140f8:	bfb8aa3b 	.word	0xbfb8aa3b
 80140fc:	2edbe6ff 	.word	0x2edbe6ff
 8014100:	c1b834f1 	.word	0xc1b834f1

08014104 <LEAF_generate_atodb>:


void LEAF_generate_atodb(Lfloat* buffer, int size, Lfloat min, Lfloat max)
{
 8014104:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 8014106:	1e4b      	subs	r3, r1, #1
 8014108:	ee70 0ac0 	vsub.f32	s1, s1, s0
    Lfloat x = min;
    for (int i = 0; i < size; i++)
 801410c:	2900      	cmp	r1, #0
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 801410e:	ee07 3a90 	vmov	s15, r3
 8014112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 8014116:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (max-min) / (Lfloat)(size-1);
 801411a:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 801411e:	dd12      	ble.n	8014146 <LEAF_generate_atodb+0x42>
 8014120:	4604      	mov	r4, r0
 8014122:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8014126:	eeb0 8a40 	vmov.f32	s16, s0
}


Lfloat atodb(Lfloat a)
{
    return 20.0f*log10f(a);
 801412a:	eeb3 9a04 	vmov.f32	s18, #52	; 0x41a00000  20.0
 801412e:	eeb0 0a48 	vmov.f32	s0, s16
 8014132:	f005 f9a7 	bl	8019484 <log10f>
 8014136:	ee20 0a09 	vmul.f32	s0, s0, s18
        x += increment;
 801413a:	ee38 8a28 	vadd.f32	s16, s16, s17
        buffer[i] = atodb(x);
 801413e:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 8014142:	42a5      	cmp	r5, r4
 8014144:	d1f3      	bne.n	801412e <LEAF_generate_atodb+0x2a>
}
 8014146:	ecbd 8b04 	vpop	{d8-d9}
 801414a:	bd38      	pop	{r3, r4, r5, pc}

0801414c <LEAF_generate_dbtoa>:
{
 801414c:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 801414e:	1e4b      	subs	r3, r1, #1
 8014150:	ee70 0ac0 	vsub.f32	s1, s1, s0
    for (int i = 0; i < size; i++)
 8014154:	2900      	cmp	r1, #0
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8014156:	ee07 3a90 	vmov	s15, r3
 801415a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 801415e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat increment = (maxDb-minDb) / (Lfloat)(size-1);
 8014162:	eec0 8aa7 	vdiv.f32	s17, s1, s15
    for (int i = 0; i < size; i++)
 8014166:	dd14      	ble.n	8014192 <LEAF_generate_dbtoa+0x46>
 8014168:	4604      	mov	r4, r0
	return 20.0f*log10f_fast(a);
}

inline Lfloat dbtoa(Lfloat db)
{
    return powf(10.0f, db * 0.05f);
 801416a:	eddf 9a0b 	vldr	s19, [pc, #44]	; 8014198 <LEAF_generate_dbtoa+0x4c>
 801416e:	ed9f 9a0b 	vldr	s18, [pc, #44]	; 801419c <LEAF_generate_dbtoa+0x50>
 8014172:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 8014176:	eeb0 8a40 	vmov.f32	s16, s0
 801417a:	ee28 0a29 	vmul.f32	s0, s16, s19
        x += increment;
 801417e:	ee38 8a28 	vadd.f32	s16, s16, s17
    return powf(10.0f, db * 0.05f);
 8014182:	ee20 0a09 	vmul.f32	s0, s0, s18
 8014186:	f004 fc8d 	bl	8018aa4 <expf>
        buffer[i] = dbtoa(x);
 801418a:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < size; i++)
 801418e:	42a5      	cmp	r5, r4
 8014190:	d1f3      	bne.n	801417a <LEAF_generate_dbtoa+0x2e>
}
 8014192:	ecbd 8b04 	vpop	{d8-d9}
 8014196:	bd38      	pop	{r3, r4, r5, pc}
 8014198:	3d4ccccd 	.word	0x3d4ccccd
 801419c:	40135d8e 	.word	0x40135d8e

080141a0 <LEAF_generate_mtof>:
{
 80141a0:	b538      	push	{r3, r4, r5, lr}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80141a2:	1e4b      	subs	r3, r1, #1
 80141a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    for (int i = 0; i < size; i++)
 80141a8:	2900      	cmp	r1, #0
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80141aa:	ee07 3a90 	vmov	s15, r3
 80141ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80141b2:	ed2d 8b0a 	vpush	{d8-d12}
    Lfloat increment = 1.0f / (Lfloat)(size-1);
 80141b6:	eec7 aa27 	vdiv.f32	s21, s14, s15
    Lfloat scalar = (endMIDI-startMIDI);
 80141ba:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 80141be:	dd29      	ble.n	8014214 <LEAF_generate_mtof+0x74>
    Lfloat x = 0.0f;
 80141c0:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8014228 <LEAF_generate_mtof+0x88>
 80141c4:	eef0 9a40 	vmov.f32	s19, s0
 80141c8:	4604      	mov	r4, r0
    if (f <= -1500.0f) return(0);
 80141ca:	eddf 8a18 	vldr	s17, [pc, #96]	; 801422c <LEAF_generate_mtof+0x8c>
 80141ce:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 80141d2:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8014230 <LEAF_generate_mtof+0x90>
 80141d6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 80141da:	ed9f ca16 	vldr	s24, [pc, #88]	; 8014234 <LEAF_generate_mtof+0x94>
 80141de:	eddf ba16 	vldr	s23, [pc, #88]	; 8014238 <LEAF_generate_mtof+0x98>
        Lfloat midiVal = (x * scalar) + startMIDI;
 80141e2:	eeb0 0a69 	vmov.f32	s0, s19
 80141e6:	eeaa 0a09 	vfma.f32	s0, s20, s18
Lfloat mtof(Lfloat f)
 80141ea:	e006      	b.n	80141fa <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 80141ec:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80141f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141f4:	dd11      	ble.n	801421a <LEAF_generate_mtof+0x7a>
 80141f6:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 80141fa:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80141fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014202:	d8f3      	bhi.n	80141ec <LEAF_generate_mtof+0x4c>
 8014204:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 8014208:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 801420c:	42ac      	cmp	r4, r5
        x += increment;
 801420e:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 8014212:	d1e6      	bne.n	80141e2 <LEAF_generate_mtof+0x42>
}
 8014214:	ecbd 8b0a 	vpop	{d8-d12}
 8014218:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 801421a:	ee20 0a0c 	vmul.f32	s0, s0, s24
 801421e:	f004 fc41 	bl	8018aa4 <expf>
 8014222:	ee60 7a2b 	vmul.f32	s15, s0, s23
 8014226:	e7ef      	b.n	8014208 <LEAF_generate_mtof+0x68>
 8014228:	00000000 	.word	0x00000000
 801422c:	c4bb8000 	.word	0xc4bb8000
 8014230:	44bb6000 	.word	0x44bb6000
 8014234:	3d6c9820 	.word	0x3d6c9820
 8014238:	4102d013 	.word	0x4102d013

0801423c <LEAF_poly_blep>:
    if (t < dt) {
 801423c:	eeb4 0ae0 	vcmpe.f32	s0, s1
 8014240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014244:	d418      	bmi.n	8014278 <LEAF_poly_blep+0x3c>
    else if (t > 1.0f - dt) {
 8014246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801424a:	ee77 7a60 	vsub.f32	s15, s14, s1
 801424e:	eef4 7ac0 	vcmpe.f32	s15, s0
 8014252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014256:	d50c      	bpl.n	8014272 <LEAF_poly_blep+0x36>
        t = (t - 1.0f) / dt;
 8014258:	ee70 7a47 	vsub.f32	s15, s0, s14
        return t*t + t+t + 1.0f;
 801425c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
        t = (t - 1.0f) / dt;
 8014260:	ee87 6aa0 	vdiv.f32	s12, s15, s1
        return t*t + t+t + 1.0f;
 8014264:	ee76 7a26 	vadd.f32	s15, s12, s13
 8014268:	eea7 7a86 	vfma.f32	s14, s15, s12
 801426c:	eeb0 0a47 	vmov.f32	s0, s14
 8014270:	4770      	bx	lr
    else return 0.0f;
 8014272:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8014290 <LEAF_poly_blep+0x54>
}
 8014276:	4770      	bx	lr
        t /= dt;
 8014278:	ee80 7a20 	vdiv.f32	s14, s0, s1
        return t+t - t*t - 1.0f;
 801427c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8014280:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014284:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014288:	eea7 0a87 	vfma.f32	s0, s15, s14
 801428c:	4770      	bx	lr
 801428e:	bf00      	nop
 8014290:	00000000 	.word	0x00000000

08014294 <LEAF_poly_blamp>:
    if ((0 <= t) && (t < (2.0f * dt)))
 8014294:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801429c:	db2c      	blt.n	80142f8 <LEAF_poly_blamp+0x64>
 801429e:	ee70 7aa0 	vadd.f32	s15, s1, s1
 80142a2:	eef4 7ac0 	vcmpe.f32	s15, s0
 80142a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80142aa:	dd25      	ble.n	80142f8 <LEAF_poly_blamp+0x64>
        Lfloat x = (t / dt);
 80142ac:	eec0 6a20 	vdiv.f32	s13, s0, s1
        Lfloat u = 2.0f - x;
 80142b0:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
        if (t < dt)
 80142b4:	eeb4 0ae0 	vcmpe.f32	s0, s1
 80142b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        Lfloat u = 2.0f - x;
 80142bc:	ee37 7a66 	vsub.f32	s14, s14, s13
        Lfloat u2 = u * u;
 80142c0:	ee67 7a07 	vmul.f32	s15, s14, s14
        u *= u2 * u2;
 80142c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80142c8:	ee67 7a87 	vmul.f32	s15, s15, s14
        if (t < dt)
 80142cc:	d517      	bpl.n	80142fe <LEAF_poly_blamp+0x6a>
        	Lfloat v = 1.0f - x;
 80142ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    return y * dt / 0.066666666666667f; // divide by 15
 80142d2:	eddf 5a0e 	vldr	s11, [pc, #56]	; 801430c <LEAF_poly_blamp+0x78>
 80142d6:	eeb1 6a00 	vmov.f32	s12, #16	; 0x40800000  4.0
 80142da:	ee60 0aa5 	vmul.f32	s1, s1, s11
        	Lfloat v = 1.0f - x;
 80142de:	ee37 7a66 	vsub.f32	s14, s14, s13
        	Lfloat v2 = v * v;
 80142e2:	ee67 6a07 	vmul.f32	s13, s14, s14
            y += 4.0f * v;
 80142e6:	ee27 7a06 	vmul.f32	s14, s14, s12
 80142ea:	ee27 7a26 	vmul.f32	s14, s14, s13
 80142ee:	eed6 7a87 	vfnms.f32	s15, s13, s14
    return y * dt / 0.066666666666667f; // divide by 15
 80142f2:	ee20 0aa7 	vmul.f32	s0, s1, s15
 80142f6:	4770      	bx	lr
 80142f8:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8014310 <LEAF_poly_blamp+0x7c>
}
 80142fc:	4770      	bx	lr
    return y * dt / 0.066666666666667f; // divide by 15
 80142fe:	ed9f 7a03 	vldr	s14, [pc, #12]	; 801430c <LEAF_poly_blamp+0x78>
 8014302:	ee60 0a87 	vmul.f32	s1, s1, s14
 8014306:	ee27 0ae0 	vnmul.f32	s0, s15, s1
 801430a:	4770      	bx	lr
 801430c:	416fffff 	.word	0x416fffff
 8014310:	00000000 	.word	0x00000000

08014314 <LEAF_interpolate_hermite_x>:
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8014314:	ee71 1ac0 	vsub.f32	s3, s3, s0
    Lfloat c1 = 0.5f * (yy2 - yy0);
 8014318:	ee31 6a40 	vsub.f32	s12, s2, s0
 801431c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    Lfloat c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8014320:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8014324:	eef0 5a60 	vmov.f32	s11, s1
 8014328:	ee30 7ac1 	vsub.f32	s14, s1, s2
 801432c:	ee31 1ac1 	vsub.f32	s2, s3, s2
 8014330:	eed6 5a26 	vfnms.f32	s11, s12, s13
 8014334:	eea1 7a26 	vfma.f32	s14, s2, s13
    Lfloat c2 = y0my1 + c1 - c3;
 8014338:	ee70 7a25 	vadd.f32	s15, s0, s11
 801433c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8014340:	eee7 7a02 	vfma.f32	s15, s14, s4
 8014344:	ee67 7a82 	vmul.f32	s15, s15, s4
 8014348:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 801434c:	eee7 0a82 	vfma.f32	s1, s15, s4
 8014350:	eeb0 0a60 	vmov.f32	s0, s1
 8014354:	4770      	bx	lr
 8014356:	bf00      	nop

08014358 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8014358:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801435c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801437c <LEAF_interpolation_linear+0x24>
 8014360:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8014364:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    Lfloat omAlpha = 1.0f - alpha;
 8014368:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 801436c:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8014370:	eee7 0a80 	vfma.f32	s1, s15, s0
 8014374:	eeb0 0a60 	vmov.f32	s0, s1
 8014378:	4770      	bx	lr
 801437a:	bf00      	nop
 801437c:	00000000 	.word	0x00000000

08014380 <mtof>:
    if (f <= -1500.0f) return(0);
 8014380:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80143c0 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8014384:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80143c4 <mtof+0x44>
 8014388:	e006      	b.n	8014398 <mtof+0x18>
 801438a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014392:	dd09      	ble.n	80143a8 <mtof+0x28>
 8014394:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 8014398:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801439c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143a0:	d8f3      	bhi.n	801438a <mtof+0xa>
 80143a2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80143c8 <mtof+0x48>
}
 80143a6:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 80143a8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80143cc <mtof+0x4c>
{
 80143ac:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 80143ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80143b2:	f004 fb77 	bl	8018aa4 <expf>
 80143b6:	eddf 7a06 	vldr	s15, [pc, #24]	; 80143d0 <mtof+0x50>
 80143ba:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80143be:	bd08      	pop	{r3, pc}
 80143c0:	c4bb8000 	.word	0xc4bb8000
 80143c4:	44bb6000 	.word	0x44bb6000
 80143c8:	00000000 	.word	0x00000000
 80143cc:	3d6c9820 	.word	0x3d6c9820
 80143d0:	4102d013 	.word	0x4102d013

080143d4 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 80143d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143d8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801440c <faster_mtof+0x38>
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 80143dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8014410 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 80143e0:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 80143e4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143f0:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 80143f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80143fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8014400:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8014404:	ee27 0a87 	vmul.f32	s0, s15, s14
 8014408:	4770      	bx	lr
 801440a:	bf00      	nop
 801440c:	396c9820 	.word	0x396c9820
 8014410:	4102d013 	.word	0x4102d013

08014414 <ftom>:
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8014414:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014418:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801441c:	dd0b      	ble.n	8014436 <ftom+0x22>
 801441e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801443c <ftom+0x28>
{
 8014422:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8014424:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014428:	f004 fbb0 	bl	8018b8c <logf>
 801442c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8014440 <ftom+0x2c>
 8014430:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8014434:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8014436:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8014444 <ftom+0x30>
}
 801443a:	4770      	bx	lr
 801443c:	3dfa7ed2 	.word	0x3dfa7ed2
 8014440:	418a7fac 	.word	0x418a7fac
 8014444:	c4bb8000 	.word	0xc4bb8000

08014448 <fasteratodb>:
{
 8014448:	b500      	push	{lr}
 801444a:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 801444c:	eeb0 0ac0 	vabs.f32	s0, s0
 8014450:	a801      	add	r0, sp, #4
 8014452:	f004 fb01 	bl	8018a58 <frexpf>
    Y += -4.11852516267426f;
 8014456:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8014490 <fasteratodb+0x48>
 801445a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014494 <fasteratodb+0x4c>
    Y += 6.02197014179219f;
 801445e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8014498 <fasteratodb+0x50>
    Y += -4.11852516267426f;
 8014462:	eee0 7a06 	vfma.f32	s15, s0, s12
    Y += E;
 8014466:	eddf 5a0d 	vldr	s11, [pc, #52]	; 801449c <fasteratodb+0x54>
	return 20.0f*log10f_fast(a);
 801446a:	ed9f 6a0d 	vldr	s12, [pc, #52]	; 80144a0 <fasteratodb+0x58>
    Y += -4.11852516267426f;
 801446e:	eef0 6a67 	vmov.f32	s13, s15
    Y += E;
 8014472:	eddd 7a01 	vldr	s15, [sp, #4]
 8014476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    Y += 6.02197014179219f;
 801447a:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 801447e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8014482:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 8014486:	ee27 0a86 	vmul.f32	s0, s15, s12
 801448a:	b003      	add	sp, #12
 801448c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014490:	3f9da1a8 	.word	0x3f9da1a8
 8014494:	c083caf5 	.word	0xc083caf5
 8014498:	40c0b3fb 	.word	0x40c0b3fb
 801449c:	404892e0 	.word	0x404892e0
 80144a0:	40c0a8c2 	.word	0x40c0a8c2

080144a4 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 80144a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80144a8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80144d4 <fasterdbtoa+0x30>
 80144ac:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80144b0:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80144b4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144b8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144bc:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80144c0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144c8:	ee20 0a00 	vmul.f32	s0, s0, s0

inline Lfloat fasterdbtoa(Lfloat db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 80144cc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80144d0:	4770      	bx	lr
 80144d2:	bf00      	nop
 80144d4:	39ebc8e3 	.word	0x39ebc8e3

080144d8 <maximum>:


inline Lfloat maximum (Lfloat num1, Lfloat num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 80144d8:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 80144dc:	4770      	bx	lr
 80144de:	bf00      	nop

080144e0 <minimum>:

inline Lfloat minimum (Lfloat num1, Lfloat num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 80144e0:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 80144e4:	4770      	bx	lr
 80144e6:	bf00      	nop

080144e8 <leaf_pool_init>:
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
}


void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 80144e8:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80144ea:	6a03      	ldr	r3, [r0, #32]
 80144ec:	2510      	movs	r5, #16
    pool->usize  = 0;
 80144ee:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 80144f0:	635d      	str	r5, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 80144f2:	6a03      	ldr	r3, [r0, #32]
    pool->usize  = 0;
 80144f4:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    if (size < pool->leaf->header_size)
 80144f8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80144fa:	42aa      	cmp	r2, r5
 80144fc:	bf38      	it	cc
 80144fe:	462a      	movcc	r2, r5
    pool->msize  = size;
 8014500:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014504:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 8014506:	440b      	add	r3, r1
 8014508:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 801450a:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 801450e:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8014510:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8014514:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014516:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 8014518:	6183      	str	r3, [r0, #24]
}
 801451a:	4770      	bx	lr

0801451c <mpool_alloc>:
{
 801451c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 801451e:	684a      	ldr	r2, [r1, #4]
{
 8014520:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8014522:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8014524:	3301      	adds	r3, #1
 8014526:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8014528:	694b      	ldr	r3, [r1, #20]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d04a      	beq.n	80145c4 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801452e:	1dc4      	adds	r4, r0, #7
 8014530:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8014534:	e002      	b.n	801453c <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8014536:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8014538:	2b00      	cmp	r3, #0
 801453a:	d043      	beq.n	80145c4 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 801453c:	68da      	ldr	r2, [r3, #12]
 801453e:	42a2      	cmp	r2, r4
 8014540:	d3f9      	bcc.n	8014536 <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8014542:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8014544:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8014546:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801454a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801454c:	4281      	cmp	r1, r0
 801454e:	d246      	bcs.n	80145de <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014550:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014554:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8014556:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014558:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801455a:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 801455c:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 801455e:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8014562:	4429      	add	r1, r5
 8014564:	5111      	str	r1, [r2, r4]
    node->size = size;
 8014566:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8014568:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 801456c:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8014570:	429a      	cmp	r2, r3
        pool->head = new_node;
 8014572:	bf08      	it	eq
 8014574:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 8014578:	685a      	ldr	r2, [r3, #4]
 801457a:	b10a      	cbz	r2, 8014580 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 801457c:	6899      	ldr	r1, [r3, #8]
 801457e:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8014580:	689a      	ldr	r2, [r3, #8]
 8014582:	b10a      	cbz	r2, 8014588 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8014584:	6859      	ldr	r1, [r3, #4]
 8014586:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 8014588:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801458a:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 801458c:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014590:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014594:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8014598:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 801459a:	4422      	add	r2, r4
 801459c:	4402      	add	r2, r0
 801459e:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80145a2:	694a      	ldr	r2, [r1, #20]
 80145a4:	42aa      	cmp	r2, r5
 80145a6:	dd0b      	ble.n	80145c0 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80145a8:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80145aa:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80145ac:	b14a      	cbz	r2, 80145c2 <mpool_alloc+0xa6>
 80145ae:	1e41      	subs	r1, r0, #1
 80145b0:	460a      	mov	r2, r1
 80145b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80145b6:	68dc      	ldr	r4, [r3, #12]
 80145b8:	3202      	adds	r2, #2
 80145ba:	1a12      	subs	r2, r2, r0
 80145bc:	42a2      	cmp	r2, r4
 80145be:	d3f7      	bcc.n	80145b0 <mpool_alloc+0x94>
        char* new_pool = (char*)node_to_alloc->pool;
 80145c0:	6818      	ldr	r0, [r3, #0]
}
 80145c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80145c4:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80145c8:	1a9b      	subs	r3, r3, r2
 80145ca:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80145cc:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80145d0:	bf8c      	ite	hi
 80145d2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80145d4:	2100      	movls	r1, #0
 80145d6:	f004 f99f 	bl	8018918 <LEAF_internalErrorCallback>
        return NULL;
 80145da:	2000      	movs	r0, #0
}
 80145dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80145de:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80145e0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80145e2:	e7c3      	b.n	801456c <mpool_alloc+0x50>

080145e4 <mpool_calloc>:
{
 80145e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80145e6:	684a      	ldr	r2, [r1, #4]
{
 80145e8:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80145ea:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80145ec:	3301      	adds	r3, #1
 80145ee:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 80145f0:	694b      	ldr	r3, [r1, #20]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	d044      	beq.n	8014680 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 80145f6:	1dc4      	adds	r4, r0, #7
 80145f8:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 80145fc:	e002      	b.n	8014604 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 80145fe:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8014600:	2b00      	cmp	r3, #0
 8014602:	d03d      	beq.n	8014680 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8014604:	68da      	ldr	r2, [r3, #12]
 8014606:	42a2      	cmp	r2, r4
 8014608:	d3f9      	bcc.n	80145fe <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 801460a:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 801460c:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 801460e:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8014612:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014614:	4281      	cmp	r1, r0
 8014616:	d240      	bcs.n	801469a <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014618:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 801461c:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 801461e:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8014620:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8014622:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8014624:	1915      	adds	r5, r2, r4
                               node_to_alloc->prev,
 8014626:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801462a:	4429      	add	r1, r5
 801462c:	5111      	str	r1, [r2, r4]
    node->size = size;
 801462e:	60e8      	str	r0, [r5, #12]
    node->prev = prev;
 8014630:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8014634:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8014638:	429a      	cmp	r2, r3
        pool->head = new_node;
 801463a:	bf08      	it	eq
 801463c:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8014640:	685a      	ldr	r2, [r3, #4]
 8014642:	b10a      	cbz	r2, 8014648 <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8014644:	6899      	ldr	r1, [r3, #8]
 8014646:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 8014648:	689a      	ldr	r2, [r3, #8]
 801464a:	b10a      	cbz	r2, 8014650 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 801464c:	6859      	ldr	r1, [r3, #4]
 801464e:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8014650:	2200      	movs	r2, #0
    node->prev = NULL;
 8014652:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8014656:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801465a:	f8dc 000c 	ldr.w	r0, [ip, #12]
 801465e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8014660:	4401      	add	r1, r0
 8014662:	68d8      	ldr	r0, [r3, #12]
 8014664:	4401      	add	r1, r0
 8014666:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801466a:	68d9      	ldr	r1, [r3, #12]
 801466c:	b131      	cbz	r1, 801467c <mpool_calloc+0x98>
 801466e:	4610      	mov	r0, r2
 8014670:	6819      	ldr	r1, [r3, #0]
 8014672:	5488      	strb	r0, [r1, r2]
 8014674:	3201      	adds	r2, #1
 8014676:	68d9      	ldr	r1, [r3, #12]
 8014678:	4291      	cmp	r1, r2
 801467a:	d8f9      	bhi.n	8014670 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 801467c:	6818      	ldr	r0, [r3, #0]
}
 801467e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8014680:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8014684:	1a9b      	subs	r3, r3, r2
 8014686:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014688:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 801468c:	bf8c      	ite	hi
 801468e:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8014690:	2100      	movls	r1, #0
 8014692:	f004 f941 	bl	8018918 <LEAF_internalErrorCallback>
        return NULL;
 8014696:	2000      	movs	r0, #0
}
 8014698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 801469a:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 801469c:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 801469e:	e7c9      	b.n	8014634 <mpool_calloc+0x50>

080146a0 <mpool_free>:
{
 80146a0:	b470      	push	{r4, r5, r6}
    pool->leaf->freeCount++;
 80146a2:	684a      	ldr	r2, [r1, #4]
 80146a4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80146a6:	3301      	adds	r3, #1
 80146a8:	64d3      	str	r3, [r2, #76]	; 0x4c
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 80146aa:	684e      	ldr	r6, [r1, #4]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 80146ac:	68cb      	ldr	r3, [r1, #12]
    mpool_node_t* freed_node = (mpool_node_t*) (ptr - pool->leaf->header_size);
 80146ae:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80146b0:	1a84      	subs	r4, r0, r2
    pool->usize -= pool->leaf->header_size + freed_node->size;
 80146b2:	1a9b      	subs	r3, r3, r2
 80146b4:	68e2      	ldr	r2, [r4, #12]
 80146b6:	1a9a      	subs	r2, r3, r2
    mpool_node_t* other_node = pool->head;
 80146b8:	694b      	ldr	r3, [r1, #20]
    pool->usize -= pool->leaf->header_size + freed_node->size;
 80146ba:	60ca      	str	r2, [r1, #12]
    while (other_node != NULL)
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d051      	beq.n	8014764 <mpool_free+0xc4>
        if ((long) other_node < (long) pool->mpool ||
 80146c0:	688a      	ldr	r2, [r1, #8]
    node->next = NULL;
 80146c2:	2000      	movs	r0, #0
        if ((long) other_node < (long) pool->mpool ||
 80146c4:	429a      	cmp	r2, r3
 80146c6:	dc17      	bgt.n	80146f8 <mpool_free+0x58>
            (long) other_node >= (((long) pool->mpool) + pool->msize))
 80146c8:	690d      	ldr	r5, [r1, #16]
 80146ca:	442a      	add	r2, r5
        if ((long) other_node < (long) pool->mpool ||
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d913      	bls.n	80146f8 <mpool_free+0x58>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80146d0:	6b72      	ldr	r2, [r6, #52]	; 0x34
 80146d2:	68e6      	ldr	r6, [r4, #12]
        next_node = other_node->next;
 80146d4:	685d      	ldr	r5, [r3, #4]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80146d6:	eb02 0c06 	add.w	ip, r2, r6
 80146da:	eb0c 0604 	add.w	r6, ip, r4
 80146de:	42b3      	cmp	r3, r6
 80146e0:	d029      	beq.n	8014736 <mpool_free+0x96>
        else if (((long) other_node) + (pool->leaf->header_size + other_node->size) == (long) freed_node)
 80146e2:	68de      	ldr	r6, [r3, #12]
 80146e4:	441a      	add	r2, r3
 80146e6:	4432      	add	r2, r6
 80146e8:	4294      	cmp	r4, r2
 80146ea:	d00a      	beq.n	8014702 <mpool_free+0x62>
    while (other_node != NULL)
 80146ec:	b1e5      	cbz	r5, 8014728 <mpool_free+0x88>
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80146ee:	462b      	mov	r3, r5
        if ((long) other_node < (long) pool->mpool ||
 80146f0:	688a      	ldr	r2, [r1, #8]
        if (((long) freed_node) + (pool->leaf->header_size + freed_node->size) == (long) other_node)
 80146f2:	684e      	ldr	r6, [r1, #4]
        if ((long) other_node < (long) pool->mpool ||
 80146f4:	429a      	cmp	r2, r3
 80146f6:	dde7      	ble.n	80146c8 <mpool_free+0x28>
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 80146f8:	4630      	mov	r0, r6
 80146fa:	2102      	movs	r1, #2
}
 80146fc:	bc70      	pop	{r4, r5, r6}
            LEAF_internalErrorCallback(pool->leaf, LEAFInvalidFree);
 80146fe:	f004 b90b 	b.w	8018918 <LEAF_internalErrorCallback>
            other_node->size += pool->leaf->header_size + freed_node->size;
 8014702:	4466      	add	r6, ip
 8014704:	60de      	str	r6, [r3, #12]
            if (other_node != pool->head)
 8014706:	694a      	ldr	r2, [r1, #20]
 8014708:	429a      	cmp	r2, r3
 801470a:	d028      	beq.n	801475e <mpool_free+0xbe>
    if (node->next != NULL)
 801470c:	b10d      	cbz	r5, 8014712 <mpool_free+0x72>
        node->next->prev = node->prev;
 801470e:	689a      	ldr	r2, [r3, #8]
 8014710:	60aa      	str	r2, [r5, #8]
    if (node->prev != NULL)
 8014712:	689a      	ldr	r2, [r3, #8]
 8014714:	b10a      	cbz	r2, 801471a <mpool_free+0x7a>
        node->prev->next = node->next;
 8014716:	685c      	ldr	r4, [r3, #4]
 8014718:	6054      	str	r4, [r2, #4]
    node->next = NULL;
 801471a:	461c      	mov	r4, r3
    node->prev = NULL;
 801471c:	e9c3 0001 	strd	r0, r0, [r3, #4]
                other_node->next = pool->head;
 8014720:	694a      	ldr	r2, [r1, #20]
 8014722:	605a      	str	r2, [r3, #4]
    while (other_node != NULL)
 8014724:	2d00      	cmp	r5, #0
 8014726:	d1e2      	bne.n	80146ee <mpool_free+0x4e>
    freed_node->next = pool->head;
 8014728:	694b      	ldr	r3, [r1, #20]
 801472a:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 801472c:	b103      	cbz	r3, 8014730 <mpool_free+0x90>
 801472e:	609c      	str	r4, [r3, #8]
    pool->head = freed_node;
 8014730:	614c      	str	r4, [r1, #20]
}
 8014732:	bc70      	pop	{r4, r5, r6}
 8014734:	4770      	bx	lr
            freed_node->size += pool->leaf->header_size + other_node->size;
 8014736:	68da      	ldr	r2, [r3, #12]
 8014738:	4462      	add	r2, ip
 801473a:	60e2      	str	r2, [r4, #12]
            if (other_node == pool->head) pool->head = pool->head->next;
 801473c:	694a      	ldr	r2, [r1, #20]
 801473e:	429a      	cmp	r2, r3
 8014740:	d00a      	beq.n	8014758 <mpool_free+0xb8>
    if (node->next != NULL)
 8014742:	685a      	ldr	r2, [r3, #4]
 8014744:	b10a      	cbz	r2, 801474a <mpool_free+0xaa>
        node->next->prev = node->prev;
 8014746:	689e      	ldr	r6, [r3, #8]
 8014748:	6096      	str	r6, [r2, #8]
    if (node->prev != NULL)
 801474a:	689a      	ldr	r2, [r3, #8]
 801474c:	b10a      	cbz	r2, 8014752 <mpool_free+0xb2>
        node->prev->next = node->next;
 801474e:	685e      	ldr	r6, [r3, #4]
 8014750:	6056      	str	r6, [r2, #4]
    node->prev = NULL;
 8014752:	e9c3 0001 	strd	r0, r0, [r3, #4]
}
 8014756:	e7c9      	b.n	80146ec <mpool_free+0x4c>
            if (other_node == pool->head) pool->head = pool->head->next;
 8014758:	685a      	ldr	r2, [r3, #4]
 801475a:	614a      	str	r2, [r1, #20]
 801475c:	e7f1      	b.n	8014742 <mpool_free+0xa2>
                pool->head = pool->head->next;
 801475e:	461c      	mov	r4, r3
 8014760:	614d      	str	r5, [r1, #20]
                freed_node = other_node;
 8014762:	e7c3      	b.n	80146ec <mpool_free+0x4c>
    freed_node->next = pool->head;
 8014764:	6063      	str	r3, [r4, #4]
    if (pool->head != NULL) pool->head->prev = freed_node;
 8014766:	e7e3      	b.n	8014730 <mpool_free+0x90>

08014768 <tMempool_init>:

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 8014768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 801476a:	699f      	ldr	r7, [r3, #24]
{
 801476c:	4606      	mov	r6, r0
 801476e:	460c      	mov	r4, r1
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8014770:	2018      	movs	r0, #24
 8014772:	4639      	mov	r1, r7
{
 8014774:	4615      	mov	r5, r2
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8014776:	f7ff fed1 	bl	801451c <mpool_alloc>
 801477a:	6030      	str	r0, [r6, #0]
    m->leaf = mm->leaf;
 801477c:	687b      	ldr	r3, [r7, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801477e:	2210      	movs	r2, #16
    pool->usize  = 0;
 8014780:	2100      	movs	r1, #0
    m->leaf = mm->leaf;
 8014782:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8014784:	635a      	str	r2, [r3, #52]	; 0x34
    if (size < pool->leaf->header_size)
 8014786:	6843      	ldr	r3, [r0, #4]
    pool->usize  = 0;
 8014788:	e9c0 4102 	strd	r4, r1, [r0, #8]
    if (size < pool->leaf->header_size)
 801478c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801478e:	42aa      	cmp	r2, r5
 8014790:	bf38      	it	cc
 8014792:	462a      	movcc	r2, r5
    pool->msize  = size;
 8014794:	6102      	str	r2, [r0, #16]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8014796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014798:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 801479a:	4423      	add	r3, r4
    node->prev = prev;
 801479c:	e9c4 1101 	strd	r1, r1, [r4, #4]
    node->pool = block_location + header_size;
 80147a0:	6023      	str	r3, [r4, #0]
    node->size = size;
 80147a2:	60e2      	str	r2, [r4, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 80147a4:	6144      	str	r4, [r0, #20]
}
 80147a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080147a8 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 80147a8:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80147aa:	698c      	ldr	r4, [r1, #24]
{
 80147ac:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80147ae:	2018      	movs	r0, #24
 80147b0:	4621      	mov	r1, r4
 80147b2:	f7ff feb3 	bl	801451c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80147b6:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80147b8:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 80147ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80147be:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80147c0:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147c2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80147dc <tCycle_init+0x34>
    c->phase    =  0;
 80147c6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147ca:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80147ce:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80147d4:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80147d8:	bd38      	pop	{r3, r4, r5, pc}
 80147da:	bf00      	nop
 80147dc:	4f800000 	.word	0x4f800000

080147e0 <tCycle_initToPool>:
{
 80147e0:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 80147e2:	680c      	ldr	r4, [r1, #0]
{
 80147e4:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80147e6:	2018      	movs	r0, #24
 80147e8:	4621      	mov	r1, r4
 80147ea:	f7ff fe97 	bl	801451c <mpool_alloc>
    c->inc      =  0;
 80147ee:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80147f0:	6028      	str	r0, [r5, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 80147f2:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80147f6:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80147f8:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80147fa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8014814 <tCycle_initToPool+0x34>
    c->phase    =  0;
 80147fe:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014802:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 8014806:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014808:	ee67 7a87 	vmul.f32	s15, s15, s14
 801480c:	edc0 7a04 	vstr	s15, [r0, #16]
}
 8014810:	bd38      	pop	{r3, r4, r5, pc}
 8014812:	bf00      	nop
 8014814:	4f800000 	.word	0x4f800000

08014818 <tCycle_free>:

void    tCycle_free (tCycle* const cy)
{
    _tCycle* c = *cy;
 8014818:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)c, c->mempool);
 801481a:	6801      	ldr	r1, [r0, #0]
 801481c:	f7ff bf40 	b.w	80146a0 <mpool_free>

08014820 <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
Lfloat   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 8014820:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 8014822:	4910      	ldr	r1, [pc, #64]	; (8014864 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014824:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8014868 <tCycle_tick+0x48>
    c->phase += c->inc;
 8014828:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 801482c:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 801482e:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 8014830:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014832:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8014836:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014838:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 801483c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 8014840:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014842:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8014846:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 801484a:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 801484c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014850:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014854:	ed91 7a00 	vldr	s14, [r1]
 8014858:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801485c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8014860:	4770      	bx	lr
 8014862:	bf00      	nop
 8014864:	08023ebc 	.word	0x08023ebc
 8014868:	35000004 	.word	0x35000004

0801486c <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, Lfloat freq)
{
    _tCycle* c = *cy;
 801486c:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801486e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 8014872:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014876:	ee20 0a27 	vmul.f32	s0, s0, s15
 801487a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801487e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014882:	4770      	bx	lr

08014884 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, Lfloat phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8014884:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8014888:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80148a4 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 801488c:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801488e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014892:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8014896:	ee20 0a07 	vmul.f32	s0, s0, s14
 801489a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801489e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80148a2:	4770      	bx	lr
 80148a4:	4f800000 	.word	0x4f800000

080148a8 <tCycle_setSampleRate>:

void     tCycle_setSampleRate (tCycle* const cy, Lfloat sr)
{
    _tCycle* c = *cy;
    
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 80148a8:	eddf 7a0a 	vldr	s15, [pc, #40]	; 80148d4 <tCycle_setSampleRate+0x2c>
    _tCycle* c = *cy;
 80148ac:	6803      	ldr	r3, [r0, #0]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 80148ae:	ee87 7a80 	vdiv.f32	s14, s15, s0
    tCycle_setFreq(cy, c->freq);
 80148b2:	edd3 7a03 	vldr	s15, [r3, #12]
    c->invSampleRateTimesTwoTo32 = (1.0f/sr) * TWO_TO_32;
 80148b6:	ed83 7a04 	vstr	s14, [r3, #16]
    _tCycle* c = *cy;
 80148ba:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80148bc:	ed93 7a04 	vldr	s14, [r3, #16]
    c->freq  = freq;
 80148c0:	edc3 7a03 	vstr	s15, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80148c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80148c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80148cc:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80148d0:	4770      	bx	lr
 80148d2:	bf00      	nop
 80148d4:	4f800000 	.word	0x4f800000

080148d8 <tPBTriangle_init>:

//==============================================================================

/* tTri: Anti-aliased Triangle waveform. */
void    tPBTriangle_init          (tPBTriangle* const osc, LEAF* const leaf)
{
 80148d8:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBTriangle_initToPool    (tPBTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 80148da:	698c      	ldr	r4, [r1, #24]
{
 80148dc:	4605      	mov	r5, r0
    _tPBTriangle* c = *osc = (_tPBTriangle*) mpool_alloc(sizeof(_tPBTriangle), m);
 80148de:	2020      	movs	r0, #32
 80148e0:	4621      	mov	r1, r4
 80148e2:	f7ff fe1b 	bl	801451c <mpool_alloc>
 80148e6:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 80148e8:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;

    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
    c->skew     =  0.5f;
 80148ea:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 80148ee:	6861      	ldr	r1, [r4, #4]
    c->inc      =  0.0f;
 80148f0:	2300      	movs	r3, #0
    c->phase    =  0.25f;
 80148f2:	f04f 5c7a 	mov.w	ip, #1048576000	; 0x3e800000
    c->invSampleRate = leaf->invSampleRate;
 80148f6:	6849      	ldr	r1, [r1, #4]
    c->phase    =  0.25f;
 80148f8:	f8c0 c004 	str.w	ip, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80148fc:	61c1      	str	r1, [r0, #28]
    c->inc      =  0.0f;
 80148fe:	6083      	str	r3, [r0, #8]
    c->skew     =  0.5f;
 8014900:	6102      	str	r2, [r0, #16]
    c->oneMinusSkew     =  0.5f;
 8014902:	6142      	str	r2, [r0, #20]
    c->lastOut  =  0.0f;
 8014904:	6183      	str	r3, [r0, #24]
}
 8014906:	bd38      	pop	{r3, r4, r5, pc}

08014908 <tPBTriangle_tick>:
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_tick          (tPBTriangle* const osc)
#else
Lfloat   tPBTriangle_tick          (tPBTriangle* const osc)
#endif

{
 8014908:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 801490a:	6804      	ldr	r4, [r0, #0]
{
 801490c:	ed2d 8b08 	vpush	{d8-d11}

    Lfloat t = c->phase;
 8014910:	ed94 8a01 	vldr	s16, [r4, #4]
{
 8014914:	b082      	sub	sp, #8
    //compute the naive waveform
    
    //Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
    Lfloat v = 0.0f;
    
    if (t < c->skew)
 8014916:	edd4 7a04 	vldr	s15, [r4, #16]
 801491a:	edd4 0a02 	vldr	s1, [r4, #8]
 801491e:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014922:	eef0 0ae0 	vabs.f32	s1, s1
 8014926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801492a:	eef1 0a60 	vneg.f32	s1, s1
 801492e:	dd71      	ble.n	8014a14 <tPBTriangle_tick+0x10c>
    {
        v = 2.0f * t / c->skew - 1.0f;
 8014930:	ee38 7a08 	vadd.f32	s14, s16, s16
 8014934:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8014938:	ee87 aa27 	vdiv.f32	s20, s14, s15
 801493c:	ee3a aa66 	vsub.f32	s20, s20, s13
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
    }

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014940:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    v += LEAF_poly_blamp(t,  dt);
 8014944:	edcd 0a01 	vstr	s1, [sp, #4]
 8014948:	eeb0 0a48 	vmov.f32	s0, s16
 801494c:	f7ff fca2 	bl	8014294 <LEAF_poly_blamp>
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014950:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(t,  dt);
 8014954:	eeb0 ba40 	vmov.f32	s22, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014958:	ee38 0ac8 	vsub.f32	s0, s17, s16
 801495c:	f7ff fc9a 	bl	8014294 <LEAF_poly_blamp>
    t += 0.5f;
 8014960:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014964:	eef0 aa40 	vmov.f32	s21, s0
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 8014968:	eddd 0a01 	vldr	s1, [sp, #4]
    t += 0.5f;
 801496c:	ee38 8a27 	vadd.f32	s16, s16, s15
    t -= (int)(t);
 8014970:	eefd 9ac8 	vcvt.s32.f32	s19, s16
 8014974:	eef8 9ae9 	vcvt.f32.s32	s19, s19
    v -= LEAF_poly_blamp(t, dt);
 8014978:	ee38 0a69 	vsub.f32	s0, s16, s19
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801497c:	ee38 8ac8 	vsub.f32	s16, s17, s16
    v -= LEAF_poly_blamp(t, dt);
 8014980:	f7ff fc88 	bl	8014294 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014984:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
 8014988:	eeb0 9a40 	vmov.f32	s18, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 801498c:	ee38 0a29 	vadd.f32	s0, s16, s19
 8014990:	f7ff fc80 	bl	8014294 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8014994:	edd4 7a02 	vldr	s15, [r4, #8]
 8014998:	edd4 6a01 	vldr	s13, [r4, #4]
 801499c:	ee39 9a00 	vadd.f32	s18, s18, s0
 80149a0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80149a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80149a8:	ee39 9a4a 	vsub.f32	s18, s18, s20
 80149ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80149b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 80149b4:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
 80149b8:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase >= 1.0f) c->phase -= 1.0f;
 80149bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149c0:	db0c      	blt.n	80149dc <tPBTriangle_tick+0xd4>
 80149c2:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80149c6:	eeb0 7a67 	vmov.f32	s14, s15
 80149ca:	ee77 7ae8 	vsub.f32	s15, s15, s17
 80149ce:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80149d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149d6:	daf6      	bge.n	80149c6 <tPBTriangle_tick+0xbe>
 80149d8:	edc4 7a01 	vstr	s15, [r4, #4]
	while (c->phase < 0.0f) c->phase += 1.0f;
 80149dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149e4:	d50e      	bpl.n	8014a04 <tPBTriangle_tick+0xfc>
 80149e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80149ea:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 80149ee:	eeb0 7a67 	vmov.f32	s14, s15
 80149f2:	ee77 7a86 	vadd.f32	s15, s15, s12
 80149f6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80149fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149fe:	d4f6      	bmi.n	80149ee <tPBTriangle_tick+0xe6>
 8014a00:	edc4 7a01 	vstr	s15, [r4, #4]
	return -v;
 8014a04:	ee39 9a4b 	vsub.f32	s18, s18, s22
 8014a08:	ee39 0a6a 	vsub.f32	s0, s18, s21
}
 8014a0c:	b002      	add	sp, #8
 8014a0e:	ecbd 8b08 	vpop	{d8-d11}
 8014a12:	bd10      	pop	{r4, pc}
        v = -2.0f * (t - c->skew) / c->oneMinusSkew + 1.0f;
 8014a14:	ee78 7a67 	vsub.f32	s15, s16, s15
 8014a18:	edd4 6a05 	vldr	s13, [r4, #20]
 8014a1c:	eeb8 6a00 	vmov.f32	s12, #128	; 0xc0000000 -2.0
 8014a20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014a24:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014a28:	ee87 aaa6 	vdiv.f32	s20, s15, s13
 8014a2c:	ee3a aa07 	vadd.f32	s20, s20, s14
 8014a30:	e786      	b.n	8014940 <tPBTriangle_tick+0x38>
 8014a32:	bf00      	nop

08014a34 <tPBTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#else
void    tPBTriangle_setFreq       (tPBTriangle* const osc, Lfloat freq)
#endif
{
    _tPBTriangle* c = *osc;
 8014a34:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 8014a36:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 8014a3a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 8014a3e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014a42:	edc3 7a02 	vstr	s15, [r3, #8]
}
 8014a46:	4770      	bx	lr

08014a48 <tPBTriangle_setSkew>:

void    tPBTriangle_setSkew       (tPBTriangle* const osc, Lfloat mySkew)
{
 8014a48:	eef0 0a40 	vmov.f32	s1, s0
    _tPBTriangle* c = *osc;

    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 8014a4c:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8014a7c <tPBTriangle_setSkew+0x34>
 8014a50:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8014a80 <tPBTriangle_setSkew+0x38>
{
 8014a54:	b510      	push	{r4, lr}
    _tPBTriangle* c = *osc;
 8014a56:	6804      	ldr	r4, [r0, #0]
    mySkew = LEAF_clip(0.01f, mySkew, 0.99f);
 8014a58:	f7ff fa5e 	bl	8013f18 <LEAF_clip>
    c->skew = (mySkew + 1.0f) * 0.5f;
 8014a5c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014a60:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8014a64:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014a68:	ee20 0a07 	vmul.f32	s0, s0, s14
    c->oneMinusSkew = 1.0f - c->skew;
 8014a6c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->skew = (mySkew + 1.0f) * 0.5f;
 8014a70:	ed84 0a04 	vstr	s0, [r4, #16]
    c->oneMinusSkew = 1.0f - c->skew;
 8014a74:	edc4 7a05 	vstr	s15, [r4, #20]
}
 8014a78:	bd10      	pop	{r4, pc}
 8014a7a:	bf00      	nop
 8014a7c:	3f7d70a4 	.word	0x3f7d70a4
 8014a80:	3c23d70a 	.word	0x3c23d70a

08014a84 <tPBSineTriangle_init>:

//==============================================================================

/* tPBSineTriangle: Anti-aliased Triangle waveform with sine wave, crossfaded between them with shape param. */
void    tPBSineTriangle_init          (tPBSineTriangle* const osc, LEAF* const leaf)
{
 8014a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	tPBSineTriangle_initToPool(osc, &leaf->mempool);
}

void    tPBSineTriangle_initToPool    (tPBSineTriangle* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014a86:	698e      	ldr	r6, [r1, #24]
{
 8014a88:	4607      	mov	r7, r0
 8014a8a:	460d      	mov	r5, r1
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014a8c:	2028      	movs	r0, #40	; 0x28
 8014a8e:	4631      	mov	r1, r6
 8014a90:	f7ff fd44 	bl	801451c <mpool_alloc>
 8014a94:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8014a96:	6006      	str	r6, [r0, #0]
    _tPBSineTriangle* c = *osc = (_tPBSineTriangle*) mpool_alloc(sizeof(_tPBSineTriangle), m);
 8014a98:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 8014a9a:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014a9c:	2018      	movs	r0, #24
    LEAF* leaf = c->mempool->leaf;
 8014a9e:	6876      	ldr	r6, [r6, #4]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014aa0:	4629      	mov	r1, r5
 8014aa2:	f7ff fd3b 	bl	801451c <mpool_alloc>
    c->inc      =  0;
 8014aa6:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 8014aa8:	61e0      	str	r0, [r4, #28]
    c->mask = SINE_TABLE_SIZE - 1;
 8014aaa:	f240 71ff 	movw	r1, #2047	; 0x7ff
    c->mempool = m;
 8014aae:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8014ab0:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014ab2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8014ae8 <tPBSineTriangle_init+0x64>
    c->phase    =  0;
 8014ab6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014aba:	edd2 7a01 	vldr	s15, [r2, #4]
    tCycle_initToPool(&c->sine, mp);
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
    c->phase    =  0.25f;
 8014abe:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->mask = SINE_TABLE_SIZE - 1;
 8014ac2:	6141      	str	r1, [r0, #20]
    c->inc      =  0.0f;
 8014ac4:	2300      	movs	r3, #0
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->shape     =  0.0f;
    c->skew 	 = 0.5f;
 8014aca:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8014ace:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 8014ad2:	6870      	ldr	r0, [r6, #4]
    c->phase    =  0.25f;
 8014ad4:	6062      	str	r2, [r4, #4]
    c->oneMinusShape = 1.0f;
 8014ad6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->inc      =  0.0f;
 8014ada:	60a3      	str	r3, [r4, #8]
    c->invSampleRate = leaf->invSampleRate;
 8014adc:	61a0      	str	r0, [r4, #24]
    c->shape     =  0.0f;
 8014ade:	6123      	str	r3, [r4, #16]
    c->lastOut  =  0.0f;
 8014ae0:	6163      	str	r3, [r4, #20]
    c->skew 	 = 0.5f;
 8014ae2:	6261      	str	r1, [r4, #36]	; 0x24
    c->oneMinusShape = 1.0f;
 8014ae4:	6222      	str	r2, [r4, #32]
}
 8014ae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014ae8:	4f800000 	.word	0x4f800000

08014aec <tPBSineTriangle_tick>:
    {
        dt = c->inc;
    }

    //compute the naive waveform
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014aec:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8014af0:	b510      	push	{r4, lr}
 8014af2:	ed2d 8b06 	vpush	{d8-d10}
    _tPBSineTriangle* c = *osc;
 8014af6:	6804      	ldr	r4, [r0, #0]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014af8:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
 8014afc:	eeb0 7a67 	vmov.f32	s14, s15
{
 8014b00:	b082      	sub	sp, #8
    Lfloat t = c->phase;
 8014b02:	edd4 9a01 	vldr	s19, [r4, #4]

    //add the blamps
    v += LEAF_poly_blamp(t,  dt);
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014b06:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8014b0a:	edd4 0a02 	vldr	s1, [r4, #8]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014b0e:	eea9 7a89 	vfma.f32	s14, s19, s18
 8014b12:	eef0 0ae0 	vabs.f32	s1, s1
    v += LEAF_poly_blamp(t,  dt);
 8014b16:	eeb0 0a69 	vmov.f32	s0, s19
 8014b1a:	eef1 0a60 	vneg.f32	s1, s1
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014b1e:	eeb0 7ac7 	vabs.f32	s14, s14
    v += LEAF_poly_blamp(t,  dt);
 8014b22:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat v = 2.0f * fabsf((2.0f * c->phase) - 1.0f) - 1.0f;
 8014b26:	eee7 7a09 	vfma.f32	s15, s14, s18
 8014b2a:	eeb0 8a67 	vmov.f32	s16, s15
    v += LEAF_poly_blamp(t,  dt);
 8014b2e:	f7ff fbb1 	bl	8014294 <LEAF_poly_blamp>
 8014b32:	eef0 7a40 	vmov.f32	s15, s0
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014b36:	eddd 0a01 	vldr	s1, [sp, #4]
 8014b3a:	ee38 0ae9 	vsub.f32	s0, s17, s19
    v += LEAF_poly_blamp(t,  dt);
 8014b3e:	ee38 8a27 	vadd.f32	s16, s16, s15
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014b42:	f7ff fba7 	bl	8014294 <LEAF_poly_blamp>
    t += 0.5f;
 8014b46:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    t -= (int)(t);
    v -= LEAF_poly_blamp(t, dt);
 8014b4a:	eddd 0a01 	vldr	s1, [sp, #4]
    v += LEAF_poly_blamp(1.0f - t,  dt);
 8014b4e:	ee38 8a00 	vadd.f32	s16, s16, s0
    t += 0.5f;
 8014b52:	ee79 9aa7 	vadd.f32	s19, s19, s15
    t -= (int)(t);
 8014b56:	eebd aae9 	vcvt.s32.f32	s20, s19
 8014b5a:	eeb8 aaca 	vcvt.f32.s32	s20, s20
    v -= LEAF_poly_blamp(t, dt);
 8014b5e:	ee39 0aca 	vsub.f32	s0, s19, s20
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014b62:	ee78 9ae9 	vsub.f32	s19, s17, s19
    v -= LEAF_poly_blamp(t, dt);
 8014b66:	f7ff fb95 	bl	8014294 <LEAF_poly_blamp>
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014b6a:	eddd 0a01 	vldr	s1, [sp, #4]
    v -= LEAF_poly_blamp(t, dt);
 8014b6e:	ee38 8a40 	vsub.f32	s16, s16, s0
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014b72:	ee39 0a8a 	vadd.f32	s0, s19, s20
 8014b76:	f7ff fb8d 	bl	8014294 <LEAF_poly_blamp>

    //increment phase for next tick
    c->phase += c->inc - (int)c->inc;
 8014b7a:	edd4 7a02 	vldr	s15, [r4, #8]
 8014b7e:	edd4 6a01 	vldr	s13, [r4, #4]
    v -= LEAF_poly_blamp(1.0f - t,  dt);
 8014b82:	ee38 8a40 	vsub.f32	s16, s16, s0
    c->phase += c->inc - (int)c->inc;
 8014b86:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8014b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014b8e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014b92:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014b96:	eef4 7ae8 	vcmpe.f32	s15, s17
    c->phase += c->inc - (int)c->inc;
 8014b9a:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase >= 1.0f) c->phase -= 1.0f;
 8014b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ba2:	db0a      	blt.n	8014bba <tPBSineTriangle_tick+0xce>
 8014ba4:	eeb0 7a67 	vmov.f32	s14, s15
 8014ba8:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8014bac:	eeb4 7ac9 	vcmpe.f32	s14, s18
 8014bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bb4:	daf6      	bge.n	8014ba4 <tPBSineTriangle_tick+0xb8>
 8014bb6:	edc4 7a01 	vstr	s15, [r4, #4]
    while (c->phase < 0.0f) c->phase += 1.0f;
 8014bba:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014bbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bc2:	d50e      	bpl.n	8014be2 <tPBSineTriangle_tick+0xf6>
 8014bc4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8014bc8:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8014bcc:	eeb0 7a67 	vmov.f32	s14, s15
 8014bd0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8014bd4:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8014bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bdc:	d4f6      	bmi.n	8014bcc <tPBSineTriangle_tick+0xe0>
 8014bde:	edc4 7a01 	vstr	s15, [r4, #4]
    _tCycle* c = *cy;
 8014be2:	69e0      	ldr	r0, [r4, #28]
    out = v * c->shape; // shape handles the inversion so it's in phase with sine (already * -1.0f)
 8014be4:	edd4 6a04 	vldr	s13, [r4, #16]
    samp0 = __leaf_table_sinewave[idx];
 8014be8:	4a14      	ldr	r2, [pc, #80]	; (8014c3c <tPBSineTriangle_tick+0x150>)
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014bea:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8014c40 <tPBSineTriangle_tick+0x154>
    c->phase += c->inc;
 8014bee:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8014bf2:	440b      	add	r3, r1
 8014bf4:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 8014bf6:	0d59      	lsrs	r1, r3, #21
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014bf8:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8014bfc:	6940      	ldr	r0, [r0, #20]

    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 8014bfe:	ed94 6a08 	vldr	s12, [r4, #32]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8014c02:	ee07 3a90 	vmov	s15, r3
    idx = (idx + 1) & c->mask;
 8014c06:	1c4b      	adds	r3, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 8014c08:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    idx = (idx + 1) & c->mask;
 8014c0c:	4003      	ands	r3, r0
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8014c12:	ed91 0a00 	vldr	s0, [r1]
    samp1 = __leaf_table_sinewave[idx];
 8014c16:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8014c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014c1e:	ed92 7a00 	vldr	s14, [r2]
 8014c22:	ee37 7a40 	vsub.f32	s14, s14, s0
 8014c26:	eea7 0a87 	vfma.f32	s0, s15, s14
    out = out + (tCycle_tick(&c->sine) * c->oneMinusShape);
 8014c2a:	ee20 0a06 	vmul.f32	s0, s0, s12
    return out;
}
 8014c2e:	eea6 0a88 	vfma.f32	s0, s13, s16
 8014c32:	b002      	add	sp, #8
 8014c34:	ecbd 8b06 	vpop	{d8-d10}
 8014c38:	bd10      	pop	{r4, pc}
 8014c3a:	bf00      	nop
 8014c3c:	08023ebc 	.word	0x08023ebc
 8014c40:	35000004 	.word	0x35000004

08014c44 <tPBSineTriangle_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#else
void    tPBSineTriangle_setFreq       (tPBSineTriangle* const osc, Lfloat freq)
#endif
{
    _tPBSineTriangle* c = *osc;
 8014c44:	6803      	ldr	r3, [r0, #0]

    c->freq  = freq;
    c->inc = freq * c->invSampleRate;
 8014c46:	edd3 7a06 	vldr	s15, [r3, #24]
    _tCycle* c = *cy;
 8014c4a:	69da      	ldr	r2, [r3, #28]
    c->inc = freq * c->invSampleRate;
 8014c4c:	ee67 7a80 	vmul.f32	s15, s15, s0
    c->freq  = freq;
 8014c50:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRate;
 8014c54:	edc3 7a02 	vstr	s15, [r3, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014c58:	edd2 7a04 	vldr	s15, [r2, #16]
    c->freq  = freq;
 8014c5c:	ed82 0a03 	vstr	s0, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014c60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014c64:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c68:	ed82 0a02 	vstr	s0, [r2, #8]
    tCycle_setFreq(&c->sine, freq);
}
 8014c6c:	4770      	bx	lr
 8014c6e:	bf00      	nop

08014c70 <tPBSineTriangle_setShape>:

void    tPBSineTriangle_setShape       (tPBSineTriangle* const osc, Lfloat shape)
{
    _tPBSineTriangle* c = *osc;
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
    c->oneMinusShape = 1.0f - shape;
 8014c70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSineTriangle* c = *osc;
 8014c74:	6803      	ldr	r3, [r0, #0]
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8014c76:	eeb1 7a40 	vneg.f32	s14, s0
    c->oneMinusShape = 1.0f - shape;
 8014c7a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->shape = -1.0f * shape; // inverted because triangle output is inverted
 8014c7e:	ed83 7a04 	vstr	s14, [r3, #16]
    c->oneMinusShape = 1.0f - shape;
 8014c82:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8014c86:	4770      	bx	lr

08014c88 <tPBPulse_init>:
}
//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 8014c88:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014c8a:	698c      	ldr	r4, [r1, #24]
{
 8014c8c:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 8014c8e:	2020      	movs	r0, #32
 8014c90:	4621      	mov	r1, r4
 8014c92:	f7ff fc43 	bl	801451c <mpool_alloc>
 8014c96:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014c98:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014c9a:	2200      	movs	r2, #0
    c->invSampleRate = leaf->invSampleRate;
 8014c9c:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->width     =  (0.5f * TWO_TO_32);
 8014c9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014ca2:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014cc4 <tPBPulse_init+0x3c>
    c->invSampleRate = leaf->invSampleRate;
 8014ca6:	ed91 7a01 	vldr	s14, [r1, #4]
    c->oneMinusWidth =  c->width;
    c->freq = 0.0f;
 8014caa:	2100      	movs	r1, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014cac:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014cb0:	ed80 7a06 	vstr	s14, [r0, #24]
    c->freq = 0.0f;
 8014cb4:	60c1      	str	r1, [r0, #12]
    c->phase    =  0;
 8014cb6:	e9c0 2201 	strd	r2, r2, [r0, #4]
    c->oneMinusWidth =  c->width;
 8014cba:	e9c0 3304 	strd	r3, r3, [r0, #16]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014cbe:	edc0 7a07 	vstr	s15, [r0, #28]
}
 8014cc2:	bd38      	pop	{r3, r4, r5, pc}
 8014cc4:	4f800000 	.word	0x4f800000

08014cc8 <tPBPulse_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_tick        (tPBPulse* const osc)
#else
Lfloat   tPBPulse_tick        (tPBPulse* const osc)
#endif
{
 8014cc8:	b510      	push	{r4, lr}
    _tPBPulse* c = *osc;
 8014cca:	6804      	ldr	r4, [r0, #0]
    

    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014ccc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014cd0:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8014d44 <tPBPulse_tick+0x7c>
{
 8014cd4:	ed2d 8b02 	vpush	{d8}
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014cd8:	6862      	ldr	r2, [r4, #4]
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014cda:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014cde:	edd4 6a02 	vldr	s13, [r4, #8]
{
 8014ce2:	b082      	sub	sp, #8
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014ce4:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014ce8:	eef8 0ae6 	vcvt.f32.s32	s1, s13
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014cec:	ee06 2a90 	vmov	s13, r2
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014cf0:	18d3      	adds	r3, r2, r3
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014cf2:	428a      	cmp	r2, r1
    Lfloat phaseFloat = c->phase *  INV_TWO_TO_32;
 8014cf4:	eeb8 0a66 	vcvt.f32.u32	s0, s13
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014cf8:	ee08 3a10 	vmov	s16, r3
    Lfloat incFloat = c->inc *  INV_TWO_TO_32;
 8014cfc:	ee60 0aa7 	vmul.f32	s1, s1, s15
    Lfloat out = ((c->phase < c->width) * 2.0f) - 1.0f;
 8014d00:	bf28      	it	cs
 8014d02:	eef0 8a47 	vmovcs.f32	s17, s14
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014d06:	eeb8 8a48 	vcvt.f32.u32	s16, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8014d0a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d0e:	edcd 0a01 	vstr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + c->oneMinusWidth) * INV_TWO_TO_32;
 8014d12:	ee28 8a27 	vmul.f32	s16, s16, s15
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8014d16:	f7ff fa91 	bl	801423c <LEAF_poly_blep>
 8014d1a:	eef0 7a40 	vmov.f32	s15, s0
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014d1e:	eddd 0a01 	vldr	s1, [sp, #4]
 8014d22:	eeb0 0a48 	vmov.f32	s0, s16
    out += LEAF_poly_blep(phaseFloat,incFloat);
 8014d26:	ee78 8aa7 	vadd.f32	s17, s17, s15
    out -= LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014d2a:	f7ff fa87 	bl	801423c <LEAF_poly_blep>
    c->phase += c->inc;
 8014d2e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    return out;
}
 8014d32:	ee38 0ac0 	vsub.f32	s0, s17, s0
    c->phase += c->inc;
 8014d36:	4413      	add	r3, r2
 8014d38:	6063      	str	r3, [r4, #4]
}
 8014d3a:	b002      	add	sp, #8
 8014d3c:	ecbd 8b02 	vpop	{d8}
 8014d40:	bd10      	pop	{r4, pc}
 8014d42:	bf00      	nop
 8014d44:	2f80000d 	.word	0x2f80000d

08014d48 <tPBPulse_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#else
void    tPBPulse_setFreq     (tPBPulse* const osc, Lfloat freq)
#endif
{
    _tPBPulse* c = *osc;
 8014d48:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d4a:	edd3 7a07 	vldr	s15, [r3, #28]
    c->freq  = freq;
 8014d4e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014d52:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014d56:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014d5a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014d5e:	4770      	bx	lr

08014d60 <tPBPulse_setWidth>:
    }
    if (width > 0.95f)
    {
        width = 0.95f;
    }
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014d60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014d64:	ed9f 6a0c 	vldr	s12, [pc, #48]	; 8014d98 <tPBPulse_setWidth+0x38>
 8014d68:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8014d9c <tPBPulse_setWidth+0x3c>
 8014d6c:	fe80 0a06 	vmaxnm.f32	s0, s0, s12
 8014d70:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8014da0 <tPBPulse_setWidth+0x40>
 8014d74:	fe80 0a66 	vminnm.f32	s0, s0, s13
 8014d78:	ee77 7ac0 	vsub.f32	s15, s15, s0
    c->width = width * TWO_TO_32;
 8014d7c:	ee20 0a07 	vmul.f32	s0, s0, s14
    _tPBPulse* c = *osc;
 8014d80:	6803      	ldr	r3, [r0, #0]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014d82:	ee67 7a87 	vmul.f32	s15, s15, s14
    c->width = width * TWO_TO_32;
 8014d86:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    c->width = width * TWO_TO_32;
 8014d8e:	ed83 0a04 	vstr	s0, [r3, #16]
    c->oneMinusWidth = (1.0f - width) * TWO_TO_32;
 8014d92:	edc3 7a05 	vstr	s15, [r3, #20]
}
 8014d96:	4770      	bx	lr
 8014d98:	3d4ccccd 	.word	0x3d4ccccd
 8014d9c:	3f733333 	.word	0x3f733333
 8014da0:	4f800000 	.word	0x4f800000

08014da4 <tPBSaw_init>:

//==============================================================================

/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSaw_init          (tPBSaw* const osc, LEAF* const leaf)
{
 8014da4:	b538      	push	{r3, r4, r5, lr}
    tPBSaw_initToPool(osc, &leaf->mempool);
}

void    tPBSaw_initToPool    (tPBSaw* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014da6:	698c      	ldr	r4, [r1, #24]
{
 8014da8:	4605      	mov	r5, r0
    _tPBSaw* c = *osc = (_tPBSaw*) mpool_alloc(sizeof(_tPBSaw), m);
 8014daa:	2020      	movs	r0, #32
 8014dac:	4621      	mov	r1, r4
 8014dae:	f7ff fbb5 	bl	801451c <mpool_alloc>
 8014db2:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014db4:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014db6:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8014db8:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 8014dba:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014dbc:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014dd8 <tPBSaw_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 8014dc0:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8014dc4:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014dc6:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014dca:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 8014dce:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014dd2:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8014dd6:	bd38      	pop	{r3, r4, r5, pc}
 8014dd8:	4f800000 	.word	0x4f800000

08014ddc <tPBSaw_tick>:
#ifdef ITCMRAM
    Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tPBSaw_tick          (tPBSaw* const osc)
#else
Lfloat   tPBSaw_tick          (tPBSaw* const osc)
#endif
{
 8014ddc:	b510      	push	{r4, lr}
    _tPBSaw* c = *osc;
 8014dde:	6804      	ldr	r4, [r0, #0]
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;

    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014de0:	eddf 0a10 	vldr	s1, [pc, #64]	; 8014e24 <tPBSaw_tick+0x48>
{
 8014de4:	ed2d 8b02 	vpush	{d8}
    Lfloat out = (c->phase * INV_TWO_TO_31) - 1.0f;
 8014de8:	edd4 7a01 	vldr	s15, [r4, #4]
 8014dec:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014df0:	edd4 7a02 	vldr	s15, [r4, #8]
 8014df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    out -= LEAF_poly_blep(phaseFloat, incFloat);
 8014df8:	ee28 0a20 	vmul.f32	s0, s16, s1
 8014dfc:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014e00:	f7ff fa1c 	bl	801423c <LEAF_poly_blep>
    c->phase += c->inc;
 8014e04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014e08:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8014e28 <tPBSaw_tick+0x4c>
 8014e0c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
 8014e10:	eee8 7a47 	vfms.f32	s15, s16, s14
 8014e14:	4413      	add	r3, r2
 8014e16:	6063      	str	r3, [r4, #4]
    return (-1.0f * out);
}
 8014e18:	ecbd 8b02 	vpop	{d8}
 8014e1c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014e20:	bd10      	pop	{r4, pc}
 8014e22:	bf00      	nop
 8014e24:	2f80000d 	.word	0x2f80000d
 8014e28:	2ffffff6 	.word	0x2ffffff6

08014e2c <tPBSaw_setFreq>:
    void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#else
void    tPBSaw_setFreq       (tPBSaw* const osc, Lfloat freq)
#endif
{
    _tPBSaw* c = *osc;
 8014e2c:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e2e:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014e32:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8014e36:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e3a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014e3e:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014e42:	4770      	bx	lr

08014e44 <tPBSawSquare_init>:
//========================================================================


/* tSawtooth: Anti-aliased Sawtooth waveform. */
void    tPBSawSquare_init          (tPBSawSquare* const osc, LEAF* const leaf)
{
 8014e44:	b538      	push	{r3, r4, r5, lr}
    tPBSawSquare_initToPool(osc, &leaf->mempool);
}

void    tPBSawSquare_initToPool    (tPBSawSquare* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014e46:	698c      	ldr	r4, [r1, #24]
{
 8014e48:	4605      	mov	r5, r0
    _tPBSawSquare* c = *osc = (_tPBSawSquare*) mpool_alloc(sizeof(_tPBSawSquare), m);
 8014e4a:	2028      	movs	r0, #40	; 0x28
 8014e4c:	4621      	mov	r1, r4
 8014e4e:	f7ff fb65 	bl	801451c <mpool_alloc>
 8014e52:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8014e54:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
    c->inc      =  0;
 8014e56:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8014e58:	6861      	ldr	r1, [r4, #4]
    c->phase    =  0;
    c->freq = 0.0f;
 8014e5a:	2200      	movs	r2, #0
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014e5c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014e78 <tPBSawSquare_init+0x34>
    c->invSampleRate = leaf->invSampleRate;
 8014e60:	ed91 7a01 	vldr	s14, [r1, #4]
    c->freq = 0.0f;
 8014e64:	60c2      	str	r2, [r0, #12]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014e66:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->invSampleRate = leaf->invSampleRate;
 8014e6a:	ed80 7a04 	vstr	s14, [r0, #16]
    c->phase    =  0;
 8014e6e:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = c->invSampleRate * TWO_TO_32;
 8014e72:	edc0 7a05 	vstr	s15, [r0, #20]
}
 8014e76:	bd38      	pop	{r3, r4, r5, pc}
 8014e78:	4f800000 	.word	0x4f800000

08014e7c <tPBSawSquare_tick>:
#ifdef ITCMRAM
Lfloat __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_tick          (tPBSawSquare* const osc)
#else
Lfloat   tPBSawSquare_tick          (tPBSawSquare* const osc)
#endif
{
 8014e7c:	b530      	push	{r4, r5, lr}
    _tPBSawSquare* c = *osc;
 8014e7e:	6804      	ldr	r4, [r0, #0]
{
 8014e80:	ed2d 8b06 	vpush	{d8-d10}

    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014e84:	6865      	ldr	r5, [r4, #4]
 8014e86:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
    Lfloat phaseFloat = c->phase * INV_TWO_TO_32;
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014e8a:	edd4 7a02 	vldr	s15, [r4, #8]
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014e8e:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014e92:	eddf 9a1f 	vldr	s19, [pc, #124]	; 8014f10 <tPBSawSquare_tick+0x94>
{
 8014e96:	b083      	sub	sp, #12
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014e98:	eef8 0ae7 	vcvt.f32.s32	s1, s15
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8014e9c:	ee07 5a90 	vmov	s15, r5
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014ea0:	2d00      	cmp	r5, #0
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014ea2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    Lfloat sawOut = (c->phase * INV_TWO_TO_32 * 2.0f) - 1.0f;
 8014ea6:	eeb8 aa67 	vcvt.f32.u32	s20, s15
    Lfloat incFloat = c->inc * INV_TWO_TO_32;
 8014eaa:	ee60 0aa9 	vmul.f32	s1, s1, s19
    Lfloat squareOut = ((c->phase < 2147483648u) * 2.0f) - 1.0f;
 8014eae:	fe28 8a88 	vselge.f32	s16, s17, s16
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8014eb2:	ee2a 0a29 	vmul.f32	s0, s20, s19
 8014eb6:	edcd 0a01 	vstr	s1, [sp, #4]
 8014eba:	f7ff f9bf 	bl	801423c <LEAF_poly_blep>
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014ebe:	ee07 5a90 	vmov	s15, r5
    Lfloat resetBlep = LEAF_poly_blep(phaseFloat,incFloat);
 8014ec2:	eeb0 9a40 	vmov.f32	s18, s0
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014ec6:	eddd 0a01 	vldr	s1, [sp, #4]
    Lfloat backwardsPhaseFloat = (c->phase + 2147483648u) * INV_TWO_TO_32;
 8014eca:	eeb8 0a67 	vcvt.f32.u32	s0, s15
    

    sawOut -= resetBlep;
    
    squareOut += resetBlep;
 8014ece:	ee38 8a09 	vadd.f32	s16, s16, s18
    Lfloat midBlep = LEAF_poly_blep(backwardsPhaseFloat, incFloat);
 8014ed2:	ee20 0a29 	vmul.f32	s0, s0, s19
 8014ed6:	f7ff f9b1 	bl	801423c <LEAF_poly_blep>
    squareOut -= midBlep;
 8014eda:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014f14 <tPBSawSquare_tick+0x98>
 8014ede:	ee38 8a40 	vsub.f32	s16, s16, s0

    c->phase += c->inc;
    
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014ee2:	ed94 7a08 	vldr	s14, [r4, #32]
 8014ee6:	eeea 8a67 	vfms.f32	s17, s20, s15
 8014eea:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    c->phase += c->inc;
 8014eee:	6863      	ldr	r3, [r4, #4]
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014ef0:	ee28 8a07 	vmul.f32	s16, s16, s14
    c->phase += c->inc;
 8014ef4:	68a2      	ldr	r2, [r4, #8]
 8014ef6:	4413      	add	r3, r2
    return ((-1.0f * sawOut) * c->oneMinusShape) + (squareOut * c->shape);
 8014ef8:	ee38 0a89 	vadd.f32	s0, s17, s18
    c->phase += c->inc;
 8014efc:	6063      	str	r3, [r4, #4]
}
 8014efe:	eea0 8a27 	vfma.f32	s16, s0, s15
 8014f02:	eeb0 0a48 	vmov.f32	s0, s16
 8014f06:	b003      	add	sp, #12
 8014f08:	ecbd 8b06 	vpop	{d8-d10}
 8014f0c:	bd30      	pop	{r4, r5, pc}
 8014f0e:	bf00      	nop
 8014f10:	2f80000d 	.word	0x2f80000d
 8014f14:	3000000d 	.word	0x3000000d

08014f18 <tPBSawSquare_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#else
void    tPBSawSquare_setFreq       (tPBSawSquare* const osc, Lfloat freq)
#endif
{
    _tPBSawSquare* c = *osc;
 8014f18:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 8014f1a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8014f1e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = (uint32_t)(freq * c->invSampleRateTimesTwoTo32);
 8014f22:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014f26:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8014f2a:	ed83 0a02 	vstr	s0, [r3, #8]

}
 8014f2e:	4770      	bx	lr

08014f30 <tPBSawSquare_setShape>:
void    tPBSawSquare_setShape      (tPBSawSquare* const osc, Lfloat inputShape)
{
    _tPBSawSquare* c = *osc;
    
    c->shape  = inputShape;
    c->oneMinusShape = 1.0f - inputShape;
 8014f30:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tPBSawSquare* c = *osc;
 8014f34:	6803      	ldr	r3, [r0, #0]
    c->shape  = inputShape;
 8014f36:	ed83 0a08 	vstr	s0, [r3, #32]
    c->oneMinusShape = 1.0f - inputShape;
 8014f3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8014f3e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8014f42:	4770      	bx	lr

08014f44 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 8014f44:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014f46:	6995      	ldr	r5, [r2, #24]
{
 8014f48:	4606      	mov	r6, r0
 8014f4a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8014f4c:	2018      	movs	r0, #24
 8014f4e:	4629      	mov	r1, r5
 8014f50:	f7ff fae4 	bl	801451c <mpool_alloc>
 8014f54:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8014f56:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8014f58:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 8014f5a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8014f5c:	691b      	ldr	r3, [r3, #16]
 8014f5e:	6143      	str	r3, [r0, #20]
}
 8014f60:	bd70      	pop	{r4, r5, r6, pc}
 8014f62:	bf00      	nop

08014f64 <tNoise_initToPool>:
{
 8014f64:	b570      	push	{r4, r5, r6, lr}
    _tMempool* m = *mp;
 8014f66:	6815      	ldr	r5, [r2, #0]
{
 8014f68:	4606      	mov	r6, r0
 8014f6a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 8014f6c:	2018      	movs	r0, #24
 8014f6e:	4629      	mov	r1, r5
 8014f70:	f7ff fad4 	bl	801451c <mpool_alloc>
 8014f74:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8014f76:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8014f78:	686b      	ldr	r3, [r5, #4]
    n->type = type;
 8014f7a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 8014f7c:	691b      	ldr	r3, [r3, #16]
 8014f7e:	6143      	str	r3, [r0, #20]
}
 8014f80:	bd70      	pop	{r4, r5, r6, pc}
 8014f82:	bf00      	nop

08014f84 <tNoise_free>:

void    tNoise_free (tNoise* const ns)
{
    _tNoise* n = *ns;
 8014f84:	6800      	ldr	r0, [r0, #0]
    
    mpool_free((char*)n, n->mempool);
 8014f86:	6801      	ldr	r1, [r0, #0]
 8014f88:	f7ff bb8a 	b.w	80146a0 <mpool_free>

08014f8c <tNoise_tick>:
}

Lfloat   tNoise_tick(tNoise* const ns)
{
 8014f8c:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8014f8e:	6804      	ldr	r4, [r0, #0]
    
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014f90:	6963      	ldr	r3, [r4, #20]
 8014f92:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 8014f94:	7923      	ldrb	r3, [r4, #4]
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014f96:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8014f9a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 8014f9e:	2b01      	cmp	r3, #1
    Lfloat rand = (n->rand() * 2.0f) - 1.0f;
 8014fa0:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 8014fa4:	d131      	bne.n	801500a <tNoise_tick+0x7e>
    {
        Lfloat tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014fa6:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8015010 <tNoise_tick+0x84>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014faa:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8015014 <tNoise_tick+0x88>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014fae:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014fb2:	ed94 5a03 	vldr	s10, [r4, #12]
 8014fb6:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014fba:	edd4 3a02 	vldr	s7, [r4, #8]
 8014fbe:	eddf 4a16 	vldr	s9, [pc, #88]	; 8015018 <tNoise_tick+0x8c>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014fc2:	eddf 5a16 	vldr	s11, [pc, #88]	; 801501c <tNoise_tick+0x90>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014fc6:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014fca:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8015020 <tNoise_tick+0x94>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014fce:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014fd2:	ed94 4a04 	vldr	s8, [r4, #16]
 8014fd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8014fda:	eddf 5a12 	vldr	s11, [pc, #72]	; 8015024 <tNoise_tick+0x98>
 8014fde:	eddf 4a12 	vldr	s9, [pc, #72]	; 8015028 <tNoise_tick+0x9c>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 8014fe2:	ed9f 5a12 	vldr	s10, [pc, #72]	; 801502c <tNoise_tick+0xa0>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014fe6:	eea4 7a25 	vfma.f32	s14, s8, s11
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 8014fea:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8014fee:	ee76 5a26 	vadd.f32	s11, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 8014ff2:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 8014ff6:	eef0 6a65 	vmov.f32	s13, s11
 8014ffa:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8014ffe:	eee7 6aa4 	vfma.f32	s13, s15, s9
 8015002:	ee37 7a26 	vadd.f32	s14, s14, s13
        return (tmp * 0.05f);
 8015006:	ee67 7a05 	vmul.f32	s15, s14, s10
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 801500a:	eeb0 0a67 	vmov.f32	s0, s15
 801500e:	bd10      	pop	{r4, pc}
 8015010:	3dcad8a1 	.word	0x3dcad8a1
 8015014:	3e97d0ff 	.word	0x3e97d0ff
 8015018:	3f7f65fe 	.word	0x3f7f65fe
 801501c:	3f76872b 	.word	0x3f76872b
 8015020:	3f86be97 	.word	0x3f86be97
 8015024:	3f11eb85 	.word	0x3f11eb85
 8015028:	3e3d3c36 	.word	0x3e3d3c36
 801502c:	3d4ccccd 	.word	0x3d4ccccd

08015030 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 8015030:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015032:	698c      	ldr	r4, [r1, #24]
{
 8015034:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015036:	201c      	movs	r0, #28
 8015038:	4621      	mov	r1, r4
 801503a:	f7ff fa6f 	bl	801451c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 801503e:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015040:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 8015042:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015044:	6862      	ldr	r2, [r4, #4]
    c->inc  = 0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015046:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801505c <tIntPhasor_init+0x2c>
    c->inc  = 0;
 801504a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801504e:	edd2 7a01 	vldr	s15, [r2, #4]
 8015052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015056:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801505a:	bd38      	pop	{r3, r4, r5, pc}
 801505c:	4f800000 	.word	0x4f800000

08015060 <tIntPhasor_tick>:
}


Lfloat   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 8015060:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 8015062:	eddf 7a06 	vldr	s15, [pc, #24]	; 801507c <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 8015066:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 801506a:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 801506c:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 8015070:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8015072:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 8015076:	ee20 0a27 	vmul.f32	s0, s0, s15
 801507a:	4770      	bx	lr
 801507c:	2f80000d 	.word	0x2f80000d

08015080 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, Lfloat freq)
{
    _tIntPhasor* c = *cy;
 8015080:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015082:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8015086:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801508a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801508e:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015092:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8015096:	4770      	bx	lr

08015098 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, Lfloat phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 8015098:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 801509c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80150b8 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 80150a0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80150a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80150a6:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80150aa:	ee20 0a07 	vmul.f32	s0, s0, s14
 80150ae:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80150b2:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80150b6:	4770      	bx	lr
 80150b8:	4f800000 	.word	0x4f800000

080150bc <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 80150bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80150be:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80150c2:	698f      	ldr	r7, [r1, #24]
{
 80150c4:	4606      	mov	r6, r0
 80150c6:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80150c8:	2010      	movs	r0, #16
 80150ca:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80150cc:	ed9f 8a22 	vldr	s16, [pc, #136]	; 8015158 <tSquareLFO_init+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80150d0:	f7ff fa24 	bl	801451c <mpool_alloc>
 80150d4:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 80150d6:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 80150d8:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 80150da:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80150dc:	201c      	movs	r0, #28
 80150de:	4639      	mov	r1, r7
 80150e0:	f7ff fa1c 	bl	801451c <mpool_alloc>
 80150e4:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 80150e6:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80150e8:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 80150ea:	2700      	movs	r7, #0
    c->inc  = 0;
 80150ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80150f0:	edd2 7a01 	vldr	s15, [r2, #4]
 80150f4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80150f8:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80150fc:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 80150fe:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015100:	4629      	mov	r1, r5
 8015102:	f7ff fa0b 	bl	801451c <mpool_alloc>
 8015106:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 8015108:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, Lfloat pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 801510a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801510e:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015110:	eddf 6a12 	vldr	s13, [pc, #72]	; 801515c <tSquareLFO_init+0xa0>
    c->inc  = 0;
 8015114:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015118:	ed92 7a01 	vldr	s14, [r2, #4]
 801511c:	ee27 7a08 	vmul.f32	s14, s14, s16
 8015120:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 8015124:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015126:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8015128:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801512c:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 8015130:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015132:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8015136:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801513a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801513e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015142:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8015146:	ee67 7a88 	vmul.f32	s15, s15, s16
 801514a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801514e:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8015152:	ecbd 8b02 	vpop	{d8}
 8015156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015158:	4f800000 	.word	0x4f800000
 801515c:	2f80000d 	.word	0x2f80000d

08015160 <tSquareLFO_initToPool>:
{
 8015160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015162:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8015166:	680f      	ldr	r7, [r1, #0]
{
 8015168:	4606      	mov	r6, r0
 801516a:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801516c:	2010      	movs	r0, #16
 801516e:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015170:	ed9f 8a22 	vldr	s16, [pc, #136]	; 80151fc <tSquareLFO_initToPool+0x9c>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 8015174:	f7ff f9d2 	bl	801451c <mpool_alloc>
 8015178:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801517a:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801517c:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801517e:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015180:	201c      	movs	r0, #28
 8015182:	4639      	mov	r1, r7
 8015184:	f7ff f9ca 	bl	801451c <mpool_alloc>
 8015188:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801518a:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801518c:	687a      	ldr	r2, [r7, #4]
    c->phase    =  0;
 801518e:	2700      	movs	r7, #0
    c->inc  = 0;
 8015190:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015194:	edd2 7a01 	vldr	s15, [r2, #4]
 8015198:	ee67 7a88 	vmul.f32	s15, s15, s16
 801519c:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80151a0:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 80151a2:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 80151a4:	4629      	mov	r1, r5
 80151a6:	f7ff f9b9 	bl	801451c <mpool_alloc>
 80151aa:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 80151ac:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 80151ae:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 80151b2:	686a      	ldr	r2, [r5, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80151b4:	eddf 6a12 	vldr	s13, [pc, #72]	; 8015200 <tSquareLFO_initToPool+0xa0>
    c->inc  = 0;
 80151b8:	e9c0 7701 	strd	r7, r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80151bc:	ed92 7a01 	vldr	s14, [r2, #4]
 80151c0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80151c4:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 80151c8:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80151ca:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 80151cc:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80151d0:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 80151d4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80151d6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80151da:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 80151de:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 80151e2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80151e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 80151ea:	ee67 7a88 	vmul.f32	s15, s15, s16
 80151ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80151f2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 80151f6:	ecbd 8b02 	vpop	{d8}
 80151fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80151fc:	4f800000 	.word	0x4f800000
 8015200:	2f80000d 	.word	0x2f80000d

08015204 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 8015204:	6802      	ldr	r2, [r0, #0]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015206:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801520a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8015248 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 801520e:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 8015210:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8015214:	4403      	add	r3, r0
 8015216:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8015218:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801521c:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801521e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 8015222:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8015226:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 8015228:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 801522c:	604b      	str	r3, [r1, #4]
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801522e:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 8015232:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015236:	ee30 0a66 	vsub.f32	s0, s0, s13
 801523a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801523e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 8015242:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015246:	4770      	bx	lr
 8015248:	2f80000d 	.word	0x2f80000d

0801524c <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 801524c:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 801524e:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015250:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8015254:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015258:	ee60 7a27 	vmul.f32	s15, s0, s15
 801525c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015260:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8015264:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015266:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801526a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801526e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015272:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8015276:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801527a:	4770      	bx	lr

0801527c <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 801527c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801527e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80152b4 <tSquareLFO_setPulseWidth+0x38>
 8015282:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 8015284:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015288:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 801528c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80152b8 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015290:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8015294:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 8015296:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 801529a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801529e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80152a2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80152a6:	ee20 0a07 	vmul.f32	s0, s0, s14
 80152aa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80152ae:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80152b2:	4770      	bx	lr
 80152b4:	2f80000d 	.word	0x2f80000d
 80152b8:	4f800000 	.word	0x4f800000

080152bc <tSquareLFO_setPhase>:
    int i = phase;
 80152bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 80152c0:	eddf 6a13 	vldr	s13, [pc, #76]	; 8015310 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, Lfloat phase)
{
    _tSquareLFO *c = *cy;
 80152c4:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80152c6:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8015314 <tSquareLFO_setPhase+0x58>
    phase -= i;
 80152ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tIntPhasor* c = *cy;
 80152ce:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 80152d0:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 80152d4:	ee20 0a26 	vmul.f32	s0, s0, s13
 80152d8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80152dc:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80152e0:	689a      	ldr	r2, [r3, #8]
 80152e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80152e6:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 80152ea:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 80152ec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80152f0:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 80152f4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 80152f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80152fc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 8015300:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015304:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015308:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801530c:	4770      	bx	lr
 801530e:	bf00      	nop
 8015310:	4f800000 	.word	0x4f800000
 8015314:	2f80000d 	.word	0x2f80000d

08015318 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 8015318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801531a:	460c      	mov	r4, r1
{
 801531c:	4606      	mov	r6, r0
 801531e:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8015320:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8015322:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 8015326:	4639      	mov	r1, r7
 8015328:	f7ff f8f8 	bl	801451c <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 801532c:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801532e:	6030      	str	r0, [r6, #0]
 8015330:	4604      	mov	r4, r0
    c->mempool = m;
 8015332:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 8015336:	f7ff ff13 	bl	8015160 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 801533a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801533c:	201c      	movs	r0, #28
 801533e:	4629      	mov	r1, r5
 8015340:	f7ff f8ec 	bl	801451c <mpool_alloc>
    c->phase    =  0;
 8015344:	2300      	movs	r3, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 8015346:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8015348:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801534a:	686a      	ldr	r2, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801534c:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8015364 <tSawSquareLFO_init+0x4c>
    c->inc  = 0;
 8015350:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 8015354:	edd2 7a01 	vldr	s15, [r2, #4]
 8015358:	ee67 7a87 	vmul.f32	s15, s15, s14
 801535c:	edc0 7a06 	vstr	s15, [r0, #24]
}
 8015360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015362:	bf00      	nop
 8015364:	4f800000 	.word	0x4f800000

08015368 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 8015368:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 801536a:	6802      	ldr	r2, [r0, #0]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801536c:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 8015370:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80153e8 <tSawSquareLFO_tick+0x80>
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 8015374:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 8015378:	6891      	ldr	r1, [r2, #8]
    Lfloat b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 801537a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 801537e:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 8015382:	4403      	add	r3, r0
 8015384:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 8015386:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 801538a:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801538c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 8015390:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 8015392:	6843      	ldr	r3, [r0, #4]
    Lfloat a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 8015394:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 8015398:	6884      	ldr	r4, [r0, #8]
 801539a:	4423      	add	r3, r4
 801539c:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 801539e:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 80153a2:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 80153a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 80153a8:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80153ac:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 80153ae:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 80153b2:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 80153b4:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 80153b8:	eef8 4a66 	vcvt.f32.u32	s9, s13
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 80153bc:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 80153c0:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 80153c4:	f85d 4b04 	ldr.w	r4, [sp], #4
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 80153c8:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80153cc:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 80153d0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80153d4:	ee37 7a07 	vadd.f32	s14, s14, s14
    Lfloat tmp = ((a - b)) + c->pulsewidth - 0.5f;
 80153d8:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 80153dc:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 80153e0:	eea6 0a07 	vfma.f32	s0, s12, s14
 80153e4:	4770      	bx	lr
 80153e6:	bf00      	nop
 80153e8:	2f80000d 	.word	0x2f80000d

080153ec <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, Lfloat freq)
{
    _tSawSquareLFO* c = *cy;
 80153ec:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 80153ee:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 80153f0:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80153f2:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 80153f6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80153fa:	ee60 7a27 	vmul.f32	s15, s0, s15
 80153fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015402:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 8015406:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015408:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801540c:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015410:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015414:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015418:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801541c:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801541e:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 8015422:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015426:	ee20 0a27 	vmul.f32	s0, s0, s15
 801542a:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801542e:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 8015432:	4770      	bx	lr

08015434 <tSawSquareLFO_setPhase>:
    int i = phase;
 8015434:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 8015438:	eddf 6a15 	vldr	s13, [pc, #84]	; 8015490 <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, Lfloat phase)
{
    _tSawSquareLFO* c = *cy;
 801543c:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801543e:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8015494 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 8015442:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tSquareLFO *c = *cy;
 8015446:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 8015448:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 801544a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801544e:	ee20 0a26 	vmul.f32	s0, s0, s13
 8015452:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8015456:	edc0 7a01 	vstr	s15, [r0, #4]
 801545a:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801545e:	6890      	ldr	r0, [r2, #8]
 8015460:	edd2 7a01 	vldr	s15, [r2, #4]
 8015464:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 8015468:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801546a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801546e:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 8015472:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 8015476:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801547a:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801547e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015486:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 801548a:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 801548c:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 801548e:	4770      	bx	lr
 8015490:	4f800000 	.word	0x4f800000
 8015494:	2f80000d 	.word	0x2f80000d

08015498 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, Lfloat shape)
{
    _tSawSquareLFO* c = *cy;
 8015498:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 801549a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801549e:	4770      	bx	lr

080154a0 <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 80154a0:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80154a2:	698d      	ldr	r5, [r1, #24]
{
 80154a4:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80154a6:	2018      	movs	r0, #24
 80154a8:	4629      	mov	r1, r5
 80154aa:	f7ff f837 	bl	801451c <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80154ae:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 80154b0:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 80154b2:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80154b4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80154b6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80154ec <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, Lfloat freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 80154ba:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80154f0 <tTriLFO_init+0x50>
    c->phase    =  0;
 80154be:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 80154c2:	edd2 6a01 	vldr	s13, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80154c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
    c->invSampleRate = leaf->invSampleRate;
 80154ca:	edc0 6a04 	vstr	s13, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 80154ce:	edc0 7a05 	vstr	s15, [r0, #20]
    _tTriLFO* c = *cy;
 80154d2:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80154d4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80154d8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80154dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80154e0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80154e4:	edc3 7a02 	vstr	s15, [r3, #8]
}
 80154e8:	bd38      	pop	{r3, r4, r5, pc}
 80154ea:	bf00      	nop
 80154ec:	4f800000 	.word	0x4f800000
 80154f0:	435c0000 	.word	0x435c0000

080154f4 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 80154f4:	6801      	ldr	r1, [r0, #0]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80154f6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80154fa:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8015524 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 80154fe:	e9d1 3201 	ldrd	r3, r2, [r1, #4]
 8015502:	4413      	add	r3, r2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 8015504:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    c->phase += c->inc;
 8015508:	604b      	str	r3, [r1, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801550a:	eb02 73e2 	add.w	r3, r2, r2, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801550e:	ea83 73e2 	eor.w	r3, r3, r2, asr #31
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8015512:	ee07 3a90 	vmov	s15, r3
 8015516:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801551a:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801551e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8015522:	4770      	bx	lr
 8015524:	2ffffff6 	.word	0x2ffffff6

08015528 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 8015528:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801552a:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801552e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015532:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015536:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801553a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801553e:	4770      	bx	lr

08015540 <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, Lfloat phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 8015540:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 8015544:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 8015546:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801554a:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801554e:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 8015552:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8015556:	4770      	bx	lr

08015558 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 8015558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801555a:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801555e:	698f      	ldr	r7, [r1, #24]
{
 8015560:	4606      	mov	r6, r0
 8015562:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8015564:	2010      	movs	r0, #16
 8015566:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015568:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 80155e4 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801556c:	f7fe ffd6 	bl	801451c <mpool_alloc>
 8015570:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 8015572:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 8015574:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 8015576:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 8015578:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801557a:	4631      	mov	r1, r6
 801557c:	f7fe ffce 	bl	801451c <mpool_alloc>
 8015580:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 8015582:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 8015584:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 8015586:	2600      	movs	r6, #0
    c->freq  = freq;
 8015588:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80155e8 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 801558c:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 8015590:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 8015594:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 8015598:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801559c:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80155a0:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 80155a2:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80155a4:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 80155a8:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80155ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80155b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80155b4:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 80155b8:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80155ba:	4629      	mov	r1, r5
 80155bc:	f7fe ffae 	bl	801451c <mpool_alloc>
 80155c0:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 80155c2:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 80155c4:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 80155c8:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 80155ca:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80155ce:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80155d2:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80155d4:	ee67 7a88 	vmul.f32	s15, s15, s16
 80155d8:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80155dc:	ecbd 8b02 	vpop	{d8}
 80155e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80155e2:	bf00      	nop
 80155e4:	4f800000 	.word	0x4f800000
 80155e8:	435c0000 	.word	0x435c0000

080155ec <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
Lfloat   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 80155ec:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 80155ee:	6804      	ldr	r4, [r0, #0]
    Lfloat a = tCycle_tick(&c->sine);
    Lfloat b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 80155f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 80155f4:	4a21      	ldr	r2, [pc, #132]	; (801567c <tSineTriLFO_tick+0x90>)
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 80155f6:	eefe 5a00 	vmov.f32	s11, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 80155fa:	68e0      	ldr	r0, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 80155fc:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8015680 <tSineTriLFO_tick+0x94>
    idx = (idx + 1) & c->mask;
 8015600:	6945      	ldr	r5, [r0, #20]
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8015602:	eddf 4a20 	vldr	s9, [pc, #128]	; 8015684 <tSineTriLFO_tick+0x98>
    c->phase += c->inc;
 8015606:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801560a:	440b      	add	r3, r1
 801560c:	6043      	str	r3, [r0, #4]
    idx = c->phase >> 21; //11 bit table 
 801560e:	0d59      	lsrs	r1, r3, #21
    _tTriLFO* c = *cy;
 8015610:	68a0      	ldr	r0, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8015612:	f3c3 0314 	ubfx	r3, r3, #0, #21
 8015616:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 801561a:	e9d0 3601 	ldrd	r3, r6, [r0, #4]
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801561e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 8015622:	4433      	add	r3, r6
 8015624:	6043      	str	r3, [r0, #4]
    idx = (idx + 1) & c->mask;
 8015626:	1c48      	adds	r0, r1, #1
    samp0 = __leaf_table_sinewave[idx];
 8015628:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801562c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    idx = (idx + 1) & c->mask;
 8015630:	4028      	ands	r0, r5
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8015632:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp0 = __leaf_table_sinewave[idx];
 8015636:	edd1 6a00 	vldr	s13, [r1]
    samp1 = __leaf_table_sinewave[idx];
 801563a:	eb02 0180 	add.w	r1, r2, r0, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 801563e:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 8015642:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8015646:	ed91 5a00 	vldr	s10, [r1]
    return  (1.0f - c->shape) * a + c->shape * b;
 801564a:	ee37 0a07 	vadd.f32	s0, s14, s14
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801564e:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 8015652:	ee36 6a47 	vsub.f32	s12, s12, s14
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 8015656:	ee35 5a66 	vsub.f32	s10, s10, s13
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801565a:	ee07 2a10 	vmov	s14, r2
    return (samp0 + (samp1 - samp0) * ((Lfloat)tempFrac * 0.000000476837386f)); // 1/2097151 
 801565e:	eee7 6a85 	vfma.f32	s13, s15, s10
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 8015662:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015666:	eef0 7a65 	vmov.f32	s15, s11
}
 801566a:	bc70      	pop	{r4, r5, r6}
    Lfloat output = (((Lfloat)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f Lfloat
 801566c:	eee7 7a24 	vfma.f32	s15, s14, s9
    return  (1.0f - c->shape) * a + c->shape * b;
 8015670:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8015674:	eea6 0a26 	vfma.f32	s0, s12, s13
 8015678:	4770      	bx	lr
 801567a:	bf00      	nop
 801567c:	08023ebc 	.word	0x08023ebc
 8015680:	35000004 	.word	0x35000004
 8015684:	2ffffff6 	.word	0x2ffffff6

08015688 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, Lfloat freq)
{
    _tSineTriLFO* c = *cy;
 8015688:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801568a:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801568c:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 8015690:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8015694:	ee60 7a27 	vmul.f32	s15, s0, s15
 8015698:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801569c:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 80156a0:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80156a2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 80156a6:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 80156aa:	ee20 0a27 	vmul.f32	s0, s0, s15
 80156ae:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80156b2:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 80156b6:	4770      	bx	lr

080156b8 <tSineTriLFO_setPhase>:
    int i = phase;
 80156b8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 80156bc:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80156e4 <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, Lfloat phase)
{
    _tSineTriLFO* c = *cy;
 80156c0:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 80156c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 80156c6:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 80156c8:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 80156cc:	ee20 0a07 	vmul.f32	s0, s0, s14
 80156d0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 80156d4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 80156d8:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 80156dc:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 80156de:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 80156e2:	4770      	bx	lr
 80156e4:	4f800000 	.word	0x4f800000

080156e8 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, Lfloat shape)
 {
    _tSineTriLFO* c = *cy;
 80156e8:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 80156ea:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 80156ee:	4770      	bx	lr

080156f0 <tPickupNonLinearity_init>:
	return out;
}


void   tPickupNonLinearity_init          (tPickupNonLinearity* const pl, LEAF* const leaf)
{
 80156f0:	b538      	push	{r3, r4, r5, lr}
	tPickupNonLinearity_initToPool(pl, &leaf->mempool);
}
void   tPickupNonLinearity_initToPool          (tPickupNonLinearity* const pl, tMempool* const mp)
{
    _tMempool* m = *mp;
 80156f2:	698d      	ldr	r5, [r1, #24]
{
 80156f4:	4604      	mov	r4, r0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 80156f6:	2008      	movs	r0, #8
 80156f8:	4629      	mov	r1, r5
 80156fa:	f7fe ff0f 	bl	801451c <mpool_alloc>
    p->mempool = m;
    p->prev = 0.0f;
 80156fe:	2300      	movs	r3, #0
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 8015700:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 8015702:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 8015704:	6043      	str	r3, [r0, #4]
}
 8015706:	bd38      	pop	{r3, r4, r5, pc}

08015708 <tPickupNonLinearity_free>:
}
void   tPickupNonLinearity_free          (tPickupNonLinearity* const pl)
{
	_tPickupNonLinearity* p = *pl;
 8015708:	6800      	ldr	r0, [r0, #0]
	mpool_free((char*)p, p->mempool);
 801570a:	6801      	ldr	r1, [r0, #0]
 801570c:	f7fe bfc8 	b.w	80146a0 <mpool_free>

08015710 <tPickupNonLinearity_tick>:
}
Lfloat   tPickupNonLinearity_tick          (tPickupNonLinearity* const pl, Lfloat x)
{
	_tPickupNonLinearity* p = *pl;
	x = x * 2.0f;
 8015710:	ee70 7a00 	vadd.f32	s15, s0, s0
 8015714:	ed9f 5a0f 	vldr	s10, [pc, #60]	; 8015754 <tPickupNonLinearity_tick+0x44>
 8015718:	ed9f 6a0f 	vldr	s12, [pc, #60]	; 8015758 <tPickupNonLinearity_tick+0x48>
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801571c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801575c <tPickupNonLinearity_tick+0x4c>
 8015720:	ee67 5aa7 	vmul.f32	s11, s15, s15
 8015724:	ed9f 4a0e 	vldr	s8, [pc, #56]	; 8015760 <tPickupNonLinearity_tick+0x50>
 8015728:	eea7 6a85 	vfma.f32	s12, s15, s10
 801572c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8015764 <tPickupNonLinearity_tick+0x54>
	out *= 4.366812227074236f;
	Lfloat y = out - p->prev;
 8015730:	6803      	ldr	r3, [r0, #0]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8015732:	ee25 5aa7 	vmul.f32	s10, s11, s15
	Lfloat y = out - p->prev;
 8015736:	eddf 4a0c 	vldr	s9, [pc, #48]	; 8015768 <tPickupNonLinearity_tick+0x58>
 801573a:	ed93 0a01 	vldr	s0, [r3, #4]
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 801573e:	ee25 7a07 	vmul.f32	s14, s10, s14
 8015742:	eee5 6a06 	vfma.f32	s13, s10, s12
 8015746:	eea5 7a84 	vfma.f32	s14, s11, s8
 801574a:	eea7 7aa6 	vfma.f32	s14, s15, s13
	return y;
}
 801574e:	ee97 0a24 	vfnms.f32	s0, s14, s9
 8015752:	4770      	bx	lr
 8015754:	3a59d777 	.word	0x3a59d777
 8015758:	39f9096c 	.word	0x39f9096c
 801575c:	3b0a47ed 	.word	0x3b0a47ed
 8015760:	3bdd2f1b 	.word	0x3bdd2f1b
 8015764:	3d99999a 	.word	0x3d99999a
 8015768:	408bbced 	.word	0x408bbced
 801576c:	00000000 	.word	0x00000000

08015770 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, Lfloat freq, Lfloat dampFreq,
                                         Lfloat decay, Lfloat targetLev, Lfloat levSmoothFactor,
                                         Lfloat levStrength, int levMode, tMempool* const mp)
{
 8015770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015774:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 8015778:	f8d3 9000 	ldr.w	r9, [r3]
{
 801577c:	b083      	sub	sp, #12
 801577e:	460e      	mov	r6, r1
 8015780:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 8015782:	4649      	mov	r1, r9
 8015784:	2070      	movs	r0, #112	; 0x70
{
 8015786:	461d      	mov	r5, r3
 8015788:	eeb0 8a40 	vmov.f32	s16, s0
 801578c:	eeb0 9a41 	vmov.f32	s18, s2
 8015790:	4617      	mov	r7, r2
 8015792:	eef0 9a61 	vmov.f32	s19, s3
 8015796:	eeb0 aa42 	vmov.f32	s20, s4
 801579a:	eeb0 ba62 	vmov.f32	s22, s5
 801579e:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80157a2:	f7fe febb 	bl	801451c <mpool_alloc>
 80157a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 80157aa:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80157ae:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80157b2:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    p->mempool = m;
 80157b6:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 80157ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80157be:	ee87 ca08 	vdiv.f32	s24, s14, s16
    LEAF* leaf = p->mempool->leaf;
 80157c2:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 80157c6:	65c6      	str	r6, [r0, #92]	; 0x5c
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 80157c8:	4604      	mov	r4, r0
    p->sampleRate = leaf->sampleRate * oversampling;
 80157ca:	ed93 7a00 	vldr	s14, [r3]
    p->maxLength = 2400 * oversampling;
 80157ce:	f44f 6316 	mov.w	r3, #2400	; 0x960
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80157d2:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 80157d6:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->maxLength = 2400 * oversampling;
 80157da:	fb03 f606 	mul.w	r6, r3, r6
    p->curr=0.0f;
 80157de:	2300      	movs	r3, #0
    p->sampleRate = leaf->sampleRate * oversampling;
 80157e0:	ee67 7a87 	vmul.f32	s15, s15, s14
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80157e4:	eddf 0a7e 	vldr	s1, [pc, #504]	; 80159e0 <tSimpleLivingString3_initToPool+0x270>
    p->curr=0.0f;
 80157e8:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80157ea:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 80157ec:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 80157ee:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 80157f2:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 80157f6:	4650      	mov	r0, sl
 80157f8:	ee2c 0a2a 	vmul.f32	s0, s24, s21
 80157fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015800:	f7fb fc8a 	bl	8011118 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 8015804:	ed94 0a02 	vldr	s0, [r4, #8]
 8015808:	462a      	mov	r2, r5
 801580a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801580c:	4658      	mov	r0, fp
 801580e:	f7fa fbbd 	bl	800ff8c <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 8015812:	ed94 0a02 	vldr	s0, [r4, #8]
 8015816:	462a      	mov	r2, r5
 8015818:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801581a:	4648      	mov	r0, r9
 801581c:	f7fa fbb6 	bl	800ff8c <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, Lfloat freq)
{
    _tSimpleLivingString3* p = *pl;
 8015820:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    Lfloat waveLength = (p->sampleRate/freq);
 8015824:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    p->freq = freq;
 8015828:	ed86 8a01 	vstr	s16, [r6, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 801582c:	ee2c 7a07 	vmul.f32	s14, s24, s14
    if (waveLength<4.8) waveLength=4.8f;
 8015830:	ed9f 6b67 	vldr	d6, [pc, #412]	; 80159d0 <tSimpleLivingString3_initToPool+0x260>
 8015834:	eeb7 5ac7 	vcvt.f64.f32	d5, s14
 8015838:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801583c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015840:	f100 80bf 	bmi.w	80159c2 <tSimpleLivingString3_initToPool+0x252>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015844:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8015846:	005b      	lsls	r3, r3, #1
 8015848:	ee07 3a90 	vmov	s15, r3
 801584c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015850:	fec7 7ac7 	vminnm.f32	s15, s15, s14
 8015854:	ee27 0aaa 	vmul.f32	s0, s15, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015858:	f106 0058 	add.w	r0, r6, #88	; 0x58
    //Lfloat decay = p->userDecay;

    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801585c:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015860:	ed86 0a02 	vstr	s0, [r6, #8]
    p->rippleDelay = 0.5f;
 8015864:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015868:	f7fb fcac 	bl	80111c4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801586c:	ed96 7a05 	vldr	s14, [r6, #20]
 8015870:	eddf 7a5c 	vldr	s15, [pc, #368]	; 80159e4 <tSimpleLivingString3_initToPool+0x274>
 8015874:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015878:	ed96 6a01 	vldr	s12, [r6, #4]
 801587c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015880:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015884:	ed9f 0b54 	vldr	d0, [pc, #336]	; 80159d8 <tSimpleLivingString3_initToPool+0x268>
 8015888:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801588c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015890:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015894:	f003 fa48 	bl	8018d28 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 8015898:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801589a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801589e:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80158a2:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 80158a6:	ed94 0a02 	vldr	s0, [r4, #8]
 80158aa:	f7fa fc73 	bl	8010194 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 80158ae:	ed94 0a02 	vldr	s0, [r4, #8]
 80158b2:	4648      	mov	r0, r9
 80158b4:	f7fa fc6e 	bl	8010194 <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 80158b8:	4658      	mov	r0, fp
 80158ba:	f7fa fbe1 	bl	8010080 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 80158be:	4648      	mov	r0, r9
 80158c0:	f7fa fbde 	bl	8010080 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80158c4:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80158c8:	4629      	mov	r1, r5
 80158ca:	eeb0 0a68 	vmov.f32	s0, s17
    p->dampFreq = dampFreq;
 80158ce:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 80158d2:	9001      	str	r0, [sp, #4]
 80158d4:	f7fb fe94 	bl	8011600 <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 80158d8:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 80158dc:	9801      	ldr	r0, [sp, #4]
 80158de:	f7fb fef9 	bl	80116d4 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 80158e2:	eeb0 0a68 	vmov.f32	s0, s17
 80158e6:	9801      	ldr	r0, [sp, #4]
 80158e8:	f7fb fec2 	bl	8011670 <tOnePole_setFreq>
    p->rippleGain = 0.0f;
 80158ec:	2300      	movs	r3, #0
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80158ee:	4629      	mov	r1, r5
 80158f0:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
    p->rippleGain = 0.0f;
 80158f4:	6663      	str	r3, [r4, #100]	; 0x64
    tHighpass_initToPool(&p->DCblocker,13, mp);
 80158f6:	4630      	mov	r0, r6
    p->rippleDelay = 0.5f;
 80158f8:	edc4 aa1a 	vstr	s21, [r4, #104]	; 0x68
    p->invOnePlusr = 1.0f;
 80158fc:	edc4 ba1b 	vstr	s23, [r4, #108]	; 0x6c
    tHighpass_initToPool(&p->DCblocker,13, mp);
 8015900:	9601      	str	r6, [sp, #4]
 8015902:	f7fc f963 	bl	8011bcc <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 8015906:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801590a:	9801      	ldr	r0, [sp, #4]
 801590c:	f7fc f99e 	bl	8011c4c <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 8015910:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 8015914:	9801      	ldr	r0, [sp, #4]
 8015916:	f7fc f97d 	bl	8011c14 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801591a:	eeb0 1a4b 	vmov.f32	s2, s22
 801591e:	eef0 0a4a 	vmov.f32	s1, s20
 8015922:	462a      	mov	r2, r5
 8015924:	eeb0 0a69 	vmov.f32	s0, s19
 8015928:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801592c:	4639      	mov	r1, r7
    p->userDecay = decay;
 801592e:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 8015932:	f7fb f849 	bl	80109c8 <tFeedbackLeveler_initToPool>
    Lfloat waveLength = (p->sampleRate/freq);
 8015936:	edd4 6a18 	vldr	s13, [r4, #96]	; 0x60
    p->levMode=levMode;
 801593a:	6227      	str	r7, [r4, #32]
    Lfloat waveLength = (p->sampleRate/freq);
 801593c:	ee2c ca26 	vmul.f32	s24, s24, s13
    p->changeGainCompensator = 1.0f;
 8015940:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 8015944:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 8015948:	ed9f 7b21 	vldr	d7, [pc, #132]	; 80159d0 <tSimpleLivingString3_initToPool+0x260>
 801594c:	eeb7 6acc 	vcvt.f64.f32	d6, s24
 8015950:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8015954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015958:	d436      	bmi.n	80159c8 <tSimpleLivingString3_initToPool+0x258>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801595a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801595c:	005b      	lsls	r3, r3, #1
 801595e:	ee00 3a10 	vmov	s0, r3
 8015962:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015966:	fe80 0a4c 	vminnm.f32	s0, s0, s24
 801596a:	ee20 0a2a 	vmul.f32	s0, s0, s21
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801596e:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015970:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015974:	f7fb fc26 	bl	80111c4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015978:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801597c:	ed94 7a05 	vldr	s14, [r4, #20]
 8015980:	eddf 7a18 	vldr	s15, [pc, #96]	; 80159e4 <tSimpleLivingString3_initToPool+0x274>
 8015984:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015988:	ed94 6a01 	vldr	s12, [r4, #4]
 801598c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015990:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015994:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80159d8 <tSimpleLivingString3_initToPool+0x268>
 8015998:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801599c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80159a0:	ee80 0b07 	vdiv.f64	d0, d0, d7
 80159a4:	f003 f9c0 	bl	8018d28 <exp>
    p->pickupPoint = 0.9f;
 80159a8:	4a0f      	ldr	r2, [pc, #60]	; (80159e8 <tSimpleLivingString3_initToPool+0x278>)
    p->prevDelayLength = p->waveLengthInSamples;
 80159aa:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 80159ac:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80159ae:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 80159b2:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 80159b4:	ed84 0a04 	vstr	s0, [r4, #16]
}
 80159b8:	b003      	add	sp, #12
 80159ba:	ecbd 8b0a 	vpop	{d8-d12}
 80159be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80159c2:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80159ec <tSimpleLivingString3_initToPool+0x27c>
 80159c6:	e747      	b.n	8015858 <tSimpleLivingString3_initToPool+0xe8>
 80159c8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80159ec <tSimpleLivingString3_initToPool+0x27c>
 80159cc:	e7cf      	b.n	801596e <tSimpleLivingString3_initToPool+0x1fe>
 80159ce:	bf00      	nop
 80159d0:	33333333 	.word	0x33333333
 80159d4:	40133333 	.word	0x40133333
 80159d8:	0a3d70a4 	.word	0x0a3d70a4
 80159dc:	c01ba3d7 	.word	0xc01ba3d7
 80159e0:	3c23d70a 	.word	0x3c23d70a
 80159e4:	3d8d78c4 	.word	0x3d8d78c4
 80159e8:	3f666666 	.word	0x3f666666
 80159ec:	4019999a 	.word	0x4019999a

080159f0 <tSimpleLivingString3_free>:
{
 80159f0:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 80159f2:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_free(&p->fbLev);
 80159f4:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80159f8:	f7fb f80e 	bl	8010a18 <tFeedbackLeveler_free>
    tHighpass_free(&p->DCblocker);
 80159fc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015a00:	f7fc f904 	bl	8011c0c <tHighpass_free>
    tOnePole_free(&p->bridgeFilter);
 8015a04:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8015a08:	f7fb fe2e 	bl	8011668 <tOnePole_free>
    tLinearDelay_free(&p->delayLineL);
 8015a0c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8015a10:	f7fa fb2a 	bl	8010068 <tLinearDelay_free>
    tLinearDelay_free(&p->delayLineU);
 8015a14:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8015a18:	f7fa fb26 	bl	8010068 <tLinearDelay_free>
    tExpSmooth_free(&p->wlSmooth);
 8015a1c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8015a20:	f7fb fba6 	bl	8011170 <tExpSmooth_free>
    mpool_free((char*)p, p->mempool);
 8015a24:	6821      	ldr	r1, [r4, #0]
 8015a26:	4620      	mov	r0, r4
}
 8015a28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)p, p->mempool);
 8015a2c:	f7fe be38 	b.w	80146a0 <mpool_free>

08015a30 <tSimpleLivingString3_setFreq>:
{
 8015a30:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 8015a32:	6804      	ldr	r4, [r0, #0]
    Lfloat waveLength = (p->sampleRate/freq);
 8015a34:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 8015a38:	ed84 0a01 	vstr	s0, [r4, #4]
    Lfloat waveLength = (p->sampleRate/freq);
 8015a3c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 8015a40:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 8015ab8 <tSimpleLivingString3_setFreq+0x88>
 8015a44:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 8015a48:	eeb4 5bc6 	vcmpe.f64	d5, d6
 8015a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a50:	d42e      	bmi.n	8015ab0 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015a52:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015a54:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 8015a58:	005b      	lsls	r3, r3, #1
 8015a5a:	ee00 3a10 	vmov	s0, r3
 8015a5e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015a62:	fe80 0a67 	vminnm.f32	s0, s0, s15
 8015a66:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015a6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 8015a6e:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 8015a72:	f7fb fba7 	bl	80111c4 <tExpSmooth_setDest>
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015a7a:	ed94 7a05 	vldr	s14, [r4, #20]
 8015a7e:	eddf 7a12 	vldr	s15, [pc, #72]	; 8015ac8 <tSimpleLivingString3_setFreq+0x98>
 8015a82:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015a86:	ed94 6a01 	vldr	s12, [r4, #4]
 8015a8a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    Lfloat temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 8015a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 8015a92:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8015ac0 <tSimpleLivingString3_setFreq+0x90>
 8015a96:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015a9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015a9e:	ee80 0b07 	vdiv.f64	d0, d0, d7
 8015aa2:	f003 f941 	bl	8018d28 <exp>
 8015aa6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015aaa:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 8015aae:	bd10      	pop	{r4, pc}
 8015ab0:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8015acc <tSimpleLivingString3_setFreq+0x9c>
 8015ab4:	e7d9      	b.n	8015a6a <tSimpleLivingString3_setFreq+0x3a>
 8015ab6:	bf00      	nop
 8015ab8:	33333333 	.word	0x33333333
 8015abc:	40133333 	.word	0x40133333
 8015ac0:	0a3d70a4 	.word	0x0a3d70a4
 8015ac4:	c01ba3d7 	.word	0xc01ba3d7
 8015ac8:	3d8d78c4 	.word	0x3d8d78c4
 8015acc:	4019999a 	.word	0x4019999a

08015ad0 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 8015ad0:	6800      	ldr	r0, [r0, #0]
 8015ad2:	303c      	adds	r0, #60	; 0x3c
 8015ad4:	f7fb bdcc 	b.w	8011670 <tOnePole_setFreq>

08015ad8 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, Lfloat decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015ad8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015adc:	eddf 7a10 	vldr	s15, [pc, #64]	; 8015b20 <tSimpleLivingString3_setDecay+0x48>
{
 8015ae0:	b510      	push	{r4, lr}
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015ae2:	ee30 7a07 	vadd.f32	s14, s0, s14
    _tSimpleLivingString3* p = *pl;
 8015ae6:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8015ae8:	ed94 6a01 	vldr	s12, [r4, #4]
    Lfloat temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 8015aec:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->userDecay = decay;
 8015af0:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 8015af4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8015af8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8015afc:	ed9f 5b06 	vldr	d5, [pc, #24]	; 8015b18 <tSimpleLivingString3_setDecay+0x40>
 8015b00:	ee27 7b06 	vmul.f64	d7, d7, d6
 8015b04:	ee85 0b07 	vdiv.f64	d0, d5, d7
 8015b08:	f003 f90e 	bl	8018d28 <exp>
 8015b0c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8015b10:	ed84 0a04 	vstr	s0, [r4, #16]


    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 8015b14:	bd10      	pop	{r4, pc}
 8015b16:	bf00      	nop
 8015b18:	52bd3c36 	.word	0x52bd3c36
 8015b1c:	c01ba196 	.word	0xc01ba196
 8015b20:	3d8d78c4 	.word	0x3d8d78c4

08015b24 <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, Lfloat targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 8015b24:	6800      	ldr	r0, [r0, #0]
 8015b26:	3054      	adds	r0, #84	; 0x54
 8015b28:	f7fa bfb2 	b.w	8010a90 <tFeedbackLeveler_setTargetLevel>

08015b2c <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, Lfloat levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 8015b2c:	6800      	ldr	r0, [r0, #0]
 8015b2e:	3054      	adds	r0, #84	; 0x54
 8015b30:	f7fa bf82 	b.w	8010a38 <tFeedbackLeveler_setFactor>

08015b34 <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, Lfloat levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 8015b34:	6800      	ldr	r0, [r0, #0]
 8015b36:	3054      	adds	r0, #84	; 0x54
 8015b38:	f7fa bf7a 	b.w	8010a30 <tFeedbackLeveler_setStrength>

08015b3c <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 8015b3c:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 8015b3e:	6805      	ldr	r5, [r0, #0]
{
 8015b40:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 8015b42:	f105 0054 	add.w	r0, r5, #84	; 0x54
 8015b46:	f7fa ff7b 	bl	8010a40 <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 8015b4a:	622c      	str	r4, [r5, #32]
}
 8015b4c:	bd38      	pop	{r3, r4, r5, pc}
 8015b4e:	bf00      	nop

08015b50 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, Lfloat input, Lfloat position)
{
 8015b50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tSimpleLivingString3* p = *pl;
 8015b54:	6801      	ldr	r1, [r0, #0]
{
 8015b56:	b083      	sub	sp, #12
    int length = p->waveLengthInSamples;
 8015b58:	edd1 7a02 	vldr	s15, [r1, #8]
 8015b5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8015b60:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 8015b64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015b68:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8015b6c:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 8015b70:	ee17 6a90 	vmov	r6, s15
    if (pluckPoint < 1)
 8015b74:	2e00      	cmp	r6, #0
 8015b76:	f340 8085 	ble.w	8015c84 <tSimpleLivingString3_pluck+0x134>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 8015b7a:	42b0      	cmp	r0, r6
 8015b7c:	dc11      	bgt.n	8015ba2 <tSimpleLivingString3_pluck+0x52>
    {
    	pluckPoint = length-1;
 8015b7e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 8015b82:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 8015b84:	4666      	mov	r6, ip
    for (int i = 0; i < length; i++)
 8015b86:	dd7a      	ble.n	8015c7e <tSimpleLivingString3_pluck+0x12e>
    {
        Lfloat val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015b88:	ee07 ca90 	vmov	s15, ip
 8015b8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8015b90:	f1bc 0f00 	cmp.w	ip, #0
 8015b94:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015b98:	ee86 7a86 	vdiv.f32	s14, s13, s12
 8015b9c:	da10      	bge.n	8015bc0 <tSimpleLivingString3_pluck+0x70>
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	e02d      	b.n	8015bfe <tSimpleLivingString3_pluck+0xae>
    int remainder = length-pluckPoint;
 8015ba2:	1b83      	subs	r3, r0, r6
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015ba4:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8015ba8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015bac:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
        }
        else
        {
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015bb0:	ee07 3a90 	vmov	s15, r3
 8015bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015bb8:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8015bbc:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 8015bc0:	4566      	cmp	r6, ip
    for (int i = 0; i < length; i++)
 8015bc2:	f04f 0300 	mov.w	r3, #0
 8015bc6:	bfa8      	it	ge
 8015bc8:	4666      	movge	r6, ip
 8015bca:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015bce:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015bd0:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015bd4:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 8015bdc:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015bde:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 8015be0:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015be2:	fbb2 f7f5 	udiv	r7, r2, r5
 8015be6:	fb05 2217 	mls	r2, r5, r7, r2
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015bea:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 8015bee:	42b3      	cmp	r3, r6
        p->delayLineU->buff[bufWritePoint] = val;
 8015bf0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015bf4:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 8015bf8:	dde9      	ble.n	8015bce <tSimpleLivingString3_pluck+0x7e>
 8015bfa:	4298      	cmp	r0, r3
 8015bfc:	dd1d      	ble.n	8015c3a <tSimpleLivingString3_pluck+0xea>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015bfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8015c02:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015c06:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8015c0c:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015c10:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015c14:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 8015c18:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015c1a:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 8015c1c:	3301      	adds	r3, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015c1e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 8015c22:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 8015c24:	fbb2 f6f5 	udiv	r6, r2, r5
 8015c28:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015c2c:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 8015c30:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8015c34:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 8015c38:	dce3      	bgt.n	8015c02 <tSimpleLivingString3_pluck+0xb2>
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015c3a:	f04f 0e00 	mov.w	lr, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015c3e:	ebac 020e 	sub.w	r2, ip, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c42:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 8015c46:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015c48:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c4a:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015c4c:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c4e:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-1-i)+p->delayLineU->outPoint);
 8015c50:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c52:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015c54:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c56:	4473      	add	r3, lr
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015c58:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 8015c5a:	f10e 0e01 	add.w	lr, lr, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015c5e:	fbb2 f9f7 	udiv	r9, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c62:	fbb3 f8f6 	udiv	r8, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 8015c66:	fb07 2219 	mls	r2, r7, r9, r2
    for (int i = 0; i < length; i++)
 8015c6a:	4570      	cmp	r0, lr
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 8015c6c:	fb06 3318 	mls	r3, r6, r8, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 8015c70:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8015c74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8015c78:	6812      	ldr	r2, [r2, #0]
 8015c7a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 8015c7c:	d1df      	bne.n	8015c3e <tSimpleLivingString3_pluck+0xee>
    }
}
 8015c7e:	b003      	add	sp, #12
 8015c80:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    for (int i = 0; i < length; i++)
 8015c84:	2800      	cmp	r0, #0
 8015c86:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8015c8a:	ddf8      	ble.n	8015c7e <tSimpleLivingString3_pluck+0x12e>
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015c8c:	ee07 ca10 	vmov	s14, ip
 8015c90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 8015c94:	2601      	movs	r6, #1
            val = input * (1.0f - (((Lfloat)i-(Lfloat)pluckPoint)/(Lfloat)remainder));
 8015c96:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 8015c9a:	eeb0 7a67 	vmov.f32	s14, s15
 8015c9e:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((Lfloat)i/(Lfloat)pluckPoint);
 8015ca2:	eeb0 6a67 	vmov.f32	s12, s15
 8015ca6:	e78b      	b.n	8015bc0 <tSimpleLivingString3_pluck+0x70>

08015ca8 <tSimpleLivingString3_tick>:

Lfloat   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, Lfloat input)
{
 8015ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cac:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 8015cb0:	6804      	ldr	r4, [r0, #0]
{
 8015cb2:	eef0 8a40 	vmov.f32	s17, s0

    //p->changeGainCompensator = 1.0f;
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 8015cb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //Lfloat changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 8015cba:	f104 0534 	add.w	r5, r4, #52	; 0x34
    Lfloat wl = tExpSmooth_tick(&p->wlSmooth);
 8015cbe:	f7fb fa8f 	bl	80111e0 <tExpSmooth_tick>
 8015cc2:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8015cc6:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 8015cca:	4628      	mov	r0, r5
 8015ccc:	f7fa fa62 	bl	8010194 <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 8015cd0:	eeb0 0a48 	vmov.f32	s0, s16
 8015cd4:	4638      	mov	r0, r7
 8015cd6:	f7fa fa5d 	bl	8010194 <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 8015cda:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015cdc:	2b00      	cmp	r3, #0
 8015cde:	dd56      	ble.n	8015d8e <tSimpleLivingString3_tick+0xe6>
    {
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015ce0:	f104 0a50 	add.w	sl, r4, #80	; 0x50
 8015ce4:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015ce8:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 8015cec:	2600      	movs	r6, #0
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015cee:	4628      	mov	r0, r5
    for (int i = 0; i < p->oversampling; i++)
 8015cf0:	3601      	adds	r6, #1
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015cf2:	f7fa fa23 	bl	801013c <tLinearDelay_tickOut>
 8015cf6:	4648      	mov	r0, r9
 8015cf8:	f7fb fcd8 	bl	80116ac <tOnePole_tick>
 8015cfc:	ed94 7a1b 	vldr	s14, [r4, #108]	; 0x6c
 8015d00:	edd4 7a04 	vldr	s15, [r4, #16]
 8015d04:	4650      	mov	r0, sl
 8015d06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015d0a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8015d0e:	f7fb ff8d 	bl	8011c2c <tHighpass_tick>
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015d12:	4640      	mov	r0, r8
		p->Uout = tHighpass_tick(&p->DCblocker,tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* (p->decay * p->invOnePlusr));
 8015d14:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015d18:	f7fa fe96 	bl	8010a48 <tFeedbackLeveler_tick>
 8015d1c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015d20:	eef0 0a40 	vmov.f32	s1, s0
 8015d24:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015d28:	f7fe f8f6 	bl	8013f18 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015d2c:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 8015d2e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015d32:	f7fa fa03 	bl	801013c <tLinearDelay_tickOut>
 8015d36:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8015d3a:	eef0 0a40 	vmov.f32	s1, s0
 8015d3e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8015d42:	f7fe f8e9 	bl	8013f18 <LEAF_clip>
 8015d46:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8015d4a:	4628      	mov	r0, r5
 8015d4c:	ee38 0ac0 	vsub.f32	s0, s17, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 8015d50:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, (-1.0f * p->Lout) + input);
 8015d54:	f7fa f9de 	bl	8010114 <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 8015d58:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 8015d5c:	4638      	mov	r0, r7
 8015d5e:	eeb1 0a40 	vneg.f32	s0, s0
 8015d62:	f7fa f9d7 	bl	8010114 <tLinearDelay_tickIn>
		tLinearDelay_addTo (&p->delayLineU, p->Lout * p->rippleGain, p->rippleDelay*wl);
 8015d66:	edd4 7a1a 	vldr	s15, [r4, #104]	; 0x68
 8015d6a:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8015d6e:	4628      	mov	r0, r5
 8015d70:	ee68 7a27 	vmul.f32	s15, s16, s15
 8015d74:	ed94 0a19 	vldr	s0, [r4, #100]	; 0x64
 8015d78:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015d7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8015d80:	ee17 1a90 	vmov	r1, s15
 8015d84:	f7fa fa44 	bl	8010210 <tLinearDelay_addTo>
    for (int i = 0; i < p->oversampling; i++)
 8015d88:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8015d8a:	42b3      	cmp	r3, r6
 8015d8c:	dcaf      	bgt.n	8015cee <tSimpleLivingString3_tick+0x46>
    }
    
    //calculate pickup point
    Lfloat point = wl * p->pickupPoint;
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015d8e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    Lfloat point = wl * p->pickupPoint;
 8015d92:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    Lfloat LfloatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015d96:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015d98:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    Lfloat point = wl * p->pickupPoint;
 8015d9c:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015da0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015da2:	ee77 6ae6 	vsub.f32	s13, s15, s13
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015da6:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 8015da8:	feb8 6a65 	vrinta.f32	s12, s11
 8015dac:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    Lfloat reversePoint = wl * (1.0f - p->pickupPoint);
 8015db0:	ee66 6a88 	vmul.f32	s13, s13, s16
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015db4:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 8015db8:	feb8 7a66 	vrinta.f32	s14, s13
 8015dbc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015dc0:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8015dc4:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015dc8:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015dcc:	ee17 0a10 	vmov	r0, s14
    Lfloat LfloatPart = point - whichPoint;
 8015dd0:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 8015dd4:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015dd6:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8015dd8:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015ddc:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 8015dde:	fb07 2216 	mls	r2, r7, r6, r2
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015de2:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 8015de6:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8015de8:	69c8      	ldr	r0, [r1, #28]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015dea:	6889      	ldr	r1, [r1, #8]
    Lfloat LfloatPart = point - whichPoint;
 8015dec:	ee75 5ac6 	vsub.f32	s11, s11, s12
    LfloatPart = reversePoint - whichPoint;
 8015df0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 8015df4:	fb93 f6f0 	sdiv	r6, r3, r0
 8015df8:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015dfc:	1c56      	adds	r6, r2, #1
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015dfe:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015e02:	ee30 0a06 	vadd.f32	s0, s0, s12
    LfloatPart = reversePoint - whichPoint;
 8015e06:	ee76 6ac6 	vsub.f32	s13, s13, s12
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015e0a:	ed92 7a00 	vldr	s14, [r2]
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015e0e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015e12:	3301      	adds	r3, #1
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015e14:	ed92 6a00 	vldr	s12, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015e18:	fb96 f2f7 	sdiv	r2, r6, r7
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015e1c:	ee20 0a06 	vmul.f32	s0, s0, s12
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 8015e20:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 8015e24:	68a2      	ldr	r2, [r4, #8]
    Lfloat sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineU->buff[outpointmod2] * LfloatPart);
 8015e26:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8015e2a:	eea7 0a27 	vfma.f32	s0, s14, s15
 8015e2e:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 8015e32:	fb93 f5f0 	sdiv	r5, r3, r0
 8015e36:	eea7 0aa5 	vfma.f32	s0, s15, s11
 8015e3a:	fb00 3315 	mls	r3, r0, r5, r3
    Lfloat sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - LfloatPart)) + (p->delayLineL->buff[outpointmod2] * LfloatPart);
 8015e3e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015e42:	edd1 7a00 	vldr	s15, [r1]
    p->prevDelayLength = p->waveLengthInSamples;
 8015e46:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 8015e48:	eea7 0aa6 	vfma.f32	s0, s15, s13
 8015e4c:	ee20 0a24 	vmul.f32	s0, s0, s9
 8015e50:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //Lfloat stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 8015e54:	ecbd 8b02 	vpop	{d8}
 8015e58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08015e5c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, Lfloat pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 8015e5c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 8015e5e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 8015e62:	4770      	bx	lr

08015e64 <tTString_initToPool>:
void    tTString_init                  (tTString* const b, int oversampling, Lfloat lowestFreq, LEAF* const leaf)
{
    tTString_initToPool(b, oversampling, lowestFreq, &leaf->mempool);
}
void    tTString_initToPool            (tTString* const bw, int oversampling, Lfloat lowestFreq, tMempool* const mp)
{
 8015e64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e68:	ed2d 8b0a 	vpush	{d8-d12}
    _tMempool* m = *mp;
 8015e6c:	6817      	ldr	r7, [r2, #0]
{
 8015e6e:	460e      	mov	r6, r1
 8015e70:	b085      	sub	sp, #20
 8015e72:	4680      	mov	r8, r0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015e74:	4639      	mov	r1, r7
 8015e76:	f44f 70ca 	mov.w	r0, #404	; 0x194
{
 8015e7a:	4615      	mov	r5, r2
 8015e7c:	eeb0 9a40 	vmov.f32	s18, s0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015e80:	f7fe fb4c 	bl	801451c <mpool_alloc>
    x->mempool = m;
    LEAF* leaf = x->mempool->leaf;
    
    x->oversampling = oversampling;
    x->invOversampling = 1.0f / oversampling;
 8015e84:	ee07 6a90 	vmov	s15, r6
 8015e88:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015e8c:	f8c8 0000 	str.w	r0, [r8]
    x->invOversampling = 1.0f / oversampling;
 8015e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    x->mempool = m;
 8015e94:	6007      	str	r7, [r0, #0]
    LEAF* leaf = x->mempool->leaf;
 8015e96:	687a      	ldr	r2, [r7, #4]

    x->pickupPos = 0.0f;
    x->slideGain = 0.4f;
    x->barDrive = 1.5f;
    x->wound = 1;
    x->barPulsePhasor = 0;
 8015e98:	f04f 0800 	mov.w	r8, #0
    x->oversampling = oversampling;
 8015e9c:	6046      	str	r6, [r0, #4]
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015e9e:	f100 0714 	add.w	r7, r0, #20
    x->invOversampling = 1.0f / oversampling;
 8015ea2:	ee88 7aa7 	vdiv.f32	s14, s17, s15
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015ea6:	eddf baf7 	vldr	s23, [pc, #988]	; 8016284 <tTString_initToPool+0x420>
    x->decayInSeconds = 10.0f;
 8015eaa:	4bf7      	ldr	r3, [pc, #988]	; (8016288 <tTString_initToPool+0x424>)
    x->wound = 1;
 8015eac:	2601      	movs	r6, #1
    x->tensionGain = 0.0f;
 8015eae:	ed9f 8af7 	vldr	s16, [pc, #988]	; 801628c <tTString_initToPool+0x428>
    _tTString* x = *bw = (_tTString*) mpool_alloc(sizeof(_tTString), m);
 8015eb2:	4604      	mov	r4, r0
    x->baseDelay = 100.0f;
 8015eb4:	eddf 9af6 	vldr	s19, [pc, #984]	; 8016290 <tTString_initToPool+0x42c>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer

    tLagrangeDelay_clear(&x->delay);
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8015eb8:	f104 0918 	add.w	r9, r4, #24
 8015ebc:	eddf aaf5 	vldr	s21, [pc, #980]	; 8016294 <tTString_initToPool+0x430>
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015ec0:	eeb0 0a69 	vmov.f32	s0, s19
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
   
    tTString_setFreq(&x, 440.0f);

    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015ec4:	f104 0b4c 	add.w	fp, r4, #76	; 0x4c
    x->freq = freq;

    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);

    //tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 1.0f);
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015ec8:	eeb0 aa00 	vmov.f32	s20, #0	; 0x40000000  2.0
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8015ecc:	ed9f baf2 	vldr	s22, [pc, #968]	; 8016298 <tTString_initToPool+0x434>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 8015ed0:	f504 7abe 	add.w	sl, r4, #380	; 0x17c
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8015ed4:	ee77 6a07 	vadd.f32	s13, s14, s14
    x->invOversampling = 1.0f / oversampling;
 8015ed8:	ed80 7a02 	vstr	s14, [r0, #8]
    x->invOversamplingTimesTwo = x->invOversampling * 2.0f;
 8015edc:	edc0 6a03 	vstr	s13, [r0, #12]
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015ee0:	ed92 7a00 	vldr	s14, [r2]
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015ee4:	462a      	mov	r2, r5
    x->decayInSeconds = 10.0f;
 8015ee6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015eea:	ee67 7a87 	vmul.f32	s15, s15, s14
    x->slideGain = 0.4f;
 8015eee:	4beb      	ldr	r3, [pc, #940]	; (801629c <tTString_initToPool+0x438>)
    x->wound = 1;
 8015ef0:	f8c0 60d8 	str.w	r6, [r0, #216]	; 0xd8
    x->slideGain = 0.4f;
 8015ef4:	f8c0 30d4 	str.w	r3, [r0, #212]	; 0xd4
    x->barDrive = 1.5f;
 8015ef8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    x->invSampleRate = 1.f / x->sampleRate;
 8015efc:	eec8 6aa7 	vdiv.f32	s13, s17, s15
    x->sampleRate          = leaf->sampleRate * oversampling;
 8015f00:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
    x->barDrive = 1.5f;
 8015f04:	f8c0 3130 	str.w	r3, [r0, #304]	; 0x130
    x->barPulsePhasor = 0;
 8015f08:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
    x->tensionGain = 0.0f;
 8015f0c:	ed80 8a11 	vstr	s16, [r0, #68]	; 0x44
    x->allpassDelay = 0.f;
 8015f10:	ed80 8a17 	vstr	s16, [r0, #92]	; 0x5c
    Lfloat maxDelayTemp = x->sampleRate / lowestFreq;
 8015f14:	ee87 7a89 	vdiv.f32	s14, s15, s18
    x->decayCoeff = 1.0f;
 8015f18:	edc0 8a1d 	vstr	s17, [r0, #116]	; 0x74
    x->muteCoeff = 1.0f;
 8015f1c:	edc0 8a1e 	vstr	s17, [r0, #120]	; 0x78
    x->output = 0.0f;
 8015f20:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    x->outputP = 0.0f;
 8015f24:	ed80 8a10 	vstr	s16, [r0, #64]	; 0x40
    x->rippleRate = 1.0f;
 8015f28:	edc0 8a20 	vstr	s17, [r0, #128]	; 0x80
    x->r = 0.0f;
 8015f2c:	ed80 8a1f 	vstr	s16, [r0, #124]	; 0x7c
    x->invOnePlusr = 1.0f;
 8015f30:	edc0 8a23 	vstr	s17, [r0, #140]	; 0x8c
    x->harmonic = 1.0f;
 8015f34:	edc0 8a21 	vstr	s17, [r0, #132]	; 0x84
    x->baseDelay = 100.0f;
 8015f38:	edc0 9a0b 	vstr	s19, [r0, #44]	; 0x2c
    x->tensionAmount = 0.0f;
 8015f3c:	ed80 8a28 	vstr	s16, [r0, #160]	; 0xa0
    x->pickupPos = 0.0f;
 8015f40:	ed80 8a27 	vstr	s16, [r0, #156]	; 0x9c
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015f44:	ee66 7aab 	vmul.f32	s15, s13, s23
    x->invSampleRate = 1.f / x->sampleRate;
 8015f48:	edc0 6a0d 	vstr	s13, [r0, #52]	; 0x34
    x->invSampleRateTimesTwoPi = TWO_PI * x->invSampleRate;
 8015f4c:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
    tLagrangeDelay_initToPool(&x->delay, 100.0f, maxDelayTemp, mp);
 8015f50:	4638      	mov	r0, r7
 8015f52:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8015f56:	ee17 1a90 	vmov	r1, s15
 8015f5a:	edcd 7a01 	vstr	s15, [sp, #4]
 8015f5e:	f7fa fa21 	bl	80103a4 <tLagrangeDelay_initToPool>
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 8015f62:	ed94 9a0c 	vldr	s18, [r4, #48]	; 0x30
 8015f66:	4638      	mov	r0, r7
 8015f68:	f7fa fae6 	bl	8010538 <tLagrangeDelay_getMaxDelay>
 8015f6c:	eec9 7a00 	vdiv.f32	s15, s18, s0
    tLagrangeDelay_clear(&x->delay);
 8015f70:	4638      	mov	r0, r7
    x->actualLowestFreq = x->sampleRate / tLagrangeDelay_getMaxDelay (&x->delay); //adjusted to create a power-of-two size buffer
 8015f72:	edc4 7a24 	vstr	s15, [r4, #144]	; 0x90
    tLagrangeDelay_clear(&x->delay);
 8015f76:	f7fa f969 	bl	801024c <tLagrangeDelay_clear>
    tLagrangeDelay_initToPool(&x->delayP, 100.0f, maxDelayTemp, mp);
 8015f7a:	462a      	mov	r2, r5
 8015f7c:	9901      	ldr	r1, [sp, #4]
 8015f7e:	eeb0 0a69 	vmov.f32	s0, s19
 8015f82:	4648      	mov	r0, r9
 8015f84:	f7fa fa0e 	bl	80103a4 <tLagrangeDelay_initToPool>
    tLagrangeDelay_clear(&x->delayP);
 8015f88:	4648      	mov	r0, r9
 8015f8a:	f7fa f95f 	bl	801024c <tLagrangeDelay_clear>
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8015f8e:	4638      	mov	r0, r7
 8015f90:	f7fa fad2 	bl	8010538 <tLagrangeDelay_getMaxDelay>
 8015f94:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8015f98:	f104 0924 	add.w	r9, r4, #36	; 0x24
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8015f9c:	f104 0728 	add.w	r7, r4, #40	; 0x28
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8015fa0:	4629      	mov	r1, r5
 8015fa2:	4648      	mov	r0, r9
    x->maxDelay = tLagrangeDelay_getMaxDelay (&x->delay);
 8015fa4:	ed84 0a54 	vstr	s0, [r4, #336]	; 0x150
    tCookOnePole_initToPool(&x->reflFilt, mp);
 8015fa8:	f7fb fbb6 	bl	8011718 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFilt, x->sampleRate);
 8015fac:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015fb0:	4648      	mov	r0, r9
 8015fb2:	f7fb fbf5 	bl	80117a0 <tCookOnePole_setSampleRate>
    tCookOnePole_initToPool(&x->reflFiltP, mp);
 8015fb6:	4629      	mov	r1, r5
 8015fb8:	4638      	mov	r0, r7
 8015fba:	f7fb fbad 	bl	8011718 <tCookOnePole_initToPool>
    tCookOnePole_setSampleRate(&x->reflFiltP, x->sampleRate);
 8015fbe:	4638      	mov	r0, r7
 8015fc0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8015fc4:	f7fb fbec 	bl	80117a0 <tCookOnePole_setSampleRate>
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8015fc8:	4648      	mov	r0, r9
 8015fca:	eddf 0ab5 	vldr	s1, [pc, #724]	; 80162a0 <tTString_initToPool+0x43c>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 8015fce:	f104 0954 	add.w	r9, r4, #84	; 0x54
    tCookOnePole_setGainAndPole(&x->reflFilt,0.999f, -0.0014f);
 8015fd2:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 80162a4 <tTString_initToPool+0x440>
 8015fd6:	f7fb fbcd 	bl	8011774 <tCookOnePole_setGainAndPole>
    tCookOnePole_setGainAndPole(&x->reflFiltP,0.999f, -0.0014f);
 8015fda:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80162a0 <tTString_initToPool+0x43c>
 8015fde:	4638      	mov	r0, r7
 8015fe0:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80162a4 <tTString_initToPool+0x440>
 8015fe4:	f7fb fbc6 	bl	8011774 <tCookOnePole_setGainAndPole>
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015fe8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8015fec:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 8015ff0:	f104 0750 	add.w	r7, r4, #80	; 0x50
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8015ff4:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 8015ff8:	fec7 7aaa 	vmaxnm.f32	s15, s15, s21
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8015ffc:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8016000:	4638      	mov	r0, r7
    x->freq = freq;
 8016002:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016006:	ee27 9a87 	vmul.f32	s18, s15, s14
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 801600a:	ee30 0a4a 	vsub.f32	s0, s0, s20
 801600e:	f7fb f8d9 	bl	80111c4 <tExpSmooth_setDest>

    //tCycle_setFreq(&x->tensionModOsc, freq * x->invOversamplingTimesTwo);
#ifdef ARM_MATH_CM7
    Lfloat result = 0.0f;
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8016012:	eeb0 0a49 	vmov.f32	s0, s18
 8016016:	ed94 ca50 	vldr	s24, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 801601a:	ed8d 8a03 	vstr	s16, [sp, #12]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 801601e:	f7ea fdef 	bl	8000c00 <arm_sin_f32>
 8016022:	eef0 7a40 	vmov.f32	s15, s0
 8016026:	edd4 ca50 	vldr	s25, [r4, #320]	; 0x140
 801602a:	eeb0 0a49 	vmov.f32	s0, s18
 801602e:	ee2c ca27 	vmul.f32	s24, s24, s15
 8016032:	f7ea fc9f 	bl	8000974 <arm_cos_f32>
 8016036:	eef0 0a68 	vmov.f32	s1, s17
 801603a:	a803      	add	r0, sp, #12
 801603c:	eef0 7a40 	vmov.f32	s15, s0
 8016040:	eeb0 0a4c 	vmov.f32	s0, s24
 8016044:	eeec 0ae7 	vfms.f32	s1, s25, s15
 8016048:	f7ea fb0a 	bl	8000660 <arm_atan2_f32>
     x->phaseComp = result;
 801604c:	9b03      	ldr	r3, [sp, #12]
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 801604e:	edd4 0a02 	vldr	s1, [r4, #8]
 8016052:	4629      	mov	r1, r5
     x->phaseComp = result;
 8016054:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    tExpSmooth_initToPool(&x->tensionSmoother, 0.0f, 0.004f * x->invOversampling, mp);
 8016058:	eeb0 0a48 	vmov.f32	s0, s16
 801605c:	ee60 0a8b 	vmul.f32	s1, s1, s22
 8016060:	4658      	mov	r0, fp
 8016062:	f7fb f859 	bl	8011118 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->tensionSmoother, 0.0f);
 8016066:	eeb0 0a48 	vmov.f32	s0, s16
 801606a:	4658      	mov	r0, fp
 801606c:	f7fb f8aa 	bl	80111c4 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pitchSmoother, 100.0f, 0.04f * x->invOversampling, mp);
 8016070:	eddf 7a9e 	vldr	s15, [pc, #632]	; 80162ec <tTString_initToPool+0x488>
 8016074:	edd4 0a02 	vldr	s1, [r4, #8]
 8016078:	4629      	mov	r1, r5
 801607a:	4638      	mov	r0, r7
 801607c:	eeb0 0a69 	vmov.f32	s0, s19
 8016080:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8016084:	f7fb f848 	bl	8011118 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8016088:	4638      	mov	r0, r7
 801608a:	eeb0 0a69 	vmov.f32	s0, s19
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 801608e:	f104 0758 	add.w	r7, r4, #88	; 0x58
    tExpSmooth_setDest(&x->pitchSmoother, 100.0f);
 8016092:	f7fb f897 	bl	80111c4 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&x->pickNoise, 0.0f, 0.09f * x->invOversampling, mp);
 8016096:	eddf 7a84 	vldr	s15, [pc, #528]	; 80162a8 <tTString_initToPool+0x444>
 801609a:	edd4 0a02 	vldr	s1, [r4, #8]
 801609e:	4629      	mov	r1, r5
 80160a0:	eeb0 0a48 	vmov.f32	s0, s16
 80160a4:	4650      	mov	r0, sl
 80160a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80160aa:	f7fb f835 	bl	8011118 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->pickNoise, 0.0f);
 80160ae:	eeb0 0a48 	vmov.f32	s0, s16
 80160b2:	4650      	mov	r0, sl
 80160b4:	f7fb f886 	bl	80111c4 <tExpSmooth_setDest>
    tThiranAllpassSOCascade_initToPool(&x->allpass, 4, mp);
 80160b8:	462a      	mov	r2, r5
 80160ba:	2104      	movs	r1, #4
 80160bc:	4648      	mov	r0, r9
 80160be:	f7fb f901 	bl	80112c4 <tThiranAllpassSOCascade_initToPool>
    tThiranAllpassSOCascade_initToPool(&x->allpassP, 4, mp);
 80160c2:	462a      	mov	r2, r5
 80160c4:	2104      	movs	r1, #4
 80160c6:	4638      	mov	r0, r7
 80160c8:	f7fb f8fc 	bl	80112c4 <tThiranAllpassSOCascade_initToPool>
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80160cc:	eef0 0a69 	vmov.f32	s1, s19
 80160d0:	ed94 1a02 	vldr	s2, [r4, #8]
 80160d4:	4648      	mov	r0, r9
 80160d6:	ed9f 0a75 	vldr	s0, [pc, #468]	; 80162ac <tTString_initToPool+0x448>
 80160da:	f7fb f96b 	bl	80113b4 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 80160de:	ed94 1a02 	vldr	s2, [r4, #8]
 80160e2:	4638      	mov	r0, r7
 80160e4:	eef0 0a69 	vmov.f32	s1, s19
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, 0.0001f, 100.0f, x->invOversampling);
 80160e8:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 80160ec:	f104 076c 	add.w	r7, r4, #108	; 0x6c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 80160f0:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 80162b0 <tTString_initToPool+0x44c>
 80160f4:	f7fb f95e 	bl	80113b4 <tThiranAllpassSOCascade_setCoeff>
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 80160f8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80160fc:	4631      	mov	r1, r6
 80160fe:	eddf 0a6d 	vldr	s1, [pc, #436]	; 80162b4 <tTString_initToPool+0x450>
 8016102:	462a      	mov	r2, r5
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, 0.000025f, 100.0f, x->invOversampling);
 8016104:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
    tSVF_initToPool(&x->lowpassP, SVFTypeLowpass, 5000.0f, 0.8f, mp);
 8016108:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 80162b8 <tTString_initToPool+0x454>
 801610c:	9001      	str	r0, [sp, #4]
 801610e:	f7fb fbd9 	bl	80118c4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->lowpassP, x->sampleRate);
 8016112:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016116:	9801      	ldr	r0, [sp, #4]
 8016118:	f7fb fd2e 	bl	8011b78 <tSVF_setSampleRate>
    tSVF_setFreq(&x->lowpassP, 6000.0f);
 801611c:	ed9f 0a67 	vldr	s0, [pc, #412]	; 80162bc <tTString_initToPool+0x458>
 8016120:	9801      	ldr	r0, [sp, #4]
 8016122:	f7fb fc91 	bl	8011a48 <tSVF_setFreq>
    tSVF_initToPool(&x->highpassP, SVFTypeHighpass, 1800.0f, 0.8f, mp);
 8016126:	eddf 0a63 	vldr	s1, [pc, #396]	; 80162b4 <tTString_initToPool+0x450>
 801612a:	462a      	mov	r2, r5
 801612c:	4641      	mov	r1, r8
 801612e:	4638      	mov	r0, r7
 8016130:	ed9f 0a63 	vldr	s0, [pc, #396]	; 80162c0 <tTString_initToPool+0x45c>
 8016134:	f7fb fbc6 	bl	80118c4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8016138:	4638      	mov	r0, r7
 801613a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 801613e:	f104 08bc 	add.w	r8, r4, #188	; 0xbc
    tSVF_setSampleRate(&x->highpassP, x->sampleRate);
 8016142:	f7fb fd19 	bl	8011b78 <tSVF_setSampleRate>
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8016146:	ed9f 0a5e 	vldr	s0, [pc, #376]	; 80162c0 <tTString_initToPool+0x45c>
 801614a:	4638      	mov	r0, r7
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 801614c:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    tSVF_setFreq(&x->highpassP, 1800.0f);
 8016150:	f7fb fc7a 	bl	8011a48 <tSVF_setFreq>
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8016154:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    tCycle_initToPool(&x->tensionModOsc, mp);
 8016158:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 801615c:	4629      	mov	r1, r5
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 801615e:	ee67 7aab 	vmul.f32	s15, s15, s23
    tCycle_initToPool(&x->tensionModOsc, mp);
 8016162:	9001      	str	r0, [sp, #4]
    x->twoPiTimesInvSampleRate = TWO_PI * x->invSampleRate;
 8016164:	edc4 7a04 	vstr	s15, [r4, #16]
    tCycle_initToPool(&x->tensionModOsc, mp);
 8016168:	f7fe fb3a 	bl	80147e0 <tCycle_initToPool>
    tCycle_setSampleRate(&x->tensionModOsc, x->sampleRate);
 801616c:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016170:	9801      	ldr	r0, [sp, #4]
 8016172:	f7fe fb99 	bl	80148a8 <tCycle_setSampleRate>
    tCycle_initToPool(&x->pickupModOsc, mp);
 8016176:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801617a:	4629      	mov	r1, r5
 801617c:	9001      	str	r0, [sp, #4]
 801617e:	f7fe fb2f 	bl	80147e0 <tCycle_initToPool>
    tCycle_setSampleRate(&x->pickupModOsc, x->sampleRate);
 8016182:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016186:	9801      	ldr	r0, [sp, #4]
 8016188:	f7fe fb8e 	bl	80148a8 <tCycle_setSampleRate>
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 801618c:	4631      	mov	r1, r6
 801618e:	eef0 0a68 	vmov.f32	s1, s17
 8016192:	462a      	mov	r2, r5
 8016194:	4638      	mov	r0, r7
 8016196:	ed9f 0a4b 	vldr	s0, [pc, #300]	; 80162c4 <tTString_initToPool+0x460>
    x->pickupModOscFreq = 440.0f;
 801619a:	edc4 aa2c 	vstr	s21, [r4, #176]	; 0xb0
    x->pickupModOscAmp = 1.0f;
 801619e:	edc4 8a2d 	vstr	s17, [r4, #180]	; 0xb4
    tSVF_initToPool(&x->pickupFilter, SVFTypeLowpass, 2900.0f, 1.0f, mp);
 80161a2:	f7fb fb8f 	bl	80118c4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter, x->sampleRate);
 80161a6:	4638      	mov	r0, r7
 80161a8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80161ac:	f7fb fce4 	bl	8011b78 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 80161b0:	4638      	mov	r0, r7
 80161b2:	ed9f 0a45 	vldr	s0, [pc, #276]	; 80162c8 <tTString_initToPool+0x464>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, 2.0f, mp);
 80161b6:	f504 77c4 	add.w	r7, r4, #392	; 0x188
    tSVF_setFreq(&x->pickupFilter, 3900.0f);
 80161ba:	f7fb fc45 	bl	8011a48 <tSVF_setFreq>
    tSVF_initToPool(&x->pickupFilter2, SVFTypeLowpass, 3800.0f, 1.1f, mp);
 80161be:	4631      	mov	r1, r6
 80161c0:	eddf 0a42 	vldr	s1, [pc, #264]	; 80162cc <tTString_initToPool+0x468>
 80161c4:	462a      	mov	r2, r5
 80161c6:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80162d0 <tTString_initToPool+0x46c>
 80161ca:	4640      	mov	r0, r8
 80161cc:	f7fb fb7a 	bl	80118c4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->pickupFilter2, x->sampleRate);
 80161d0:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80161d4:	4640      	mov	r0, r8
 80161d6:	f7fb fccf 	bl	8011b78 <tSVF_setSampleRate>
    tSVF_setFreq(&x->pickupFilter2, 4100.0f);
 80161da:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80162d4 <tTString_initToPool+0x470>
 80161de:	4640      	mov	r0, r8
 80161e0:	f7fb fc32 	bl	8011a48 <tSVF_setFreq>
    tSVF_initToPool(&x->peakFilt, SVFTypePeak, 1000.0f, 2.0f, mp);
 80161e4:	eef0 0a4a 	vmov.f32	s1, s20
 80161e8:	462a      	mov	r2, r5
 80161ea:	2104      	movs	r1, #4
 80161ec:	4638      	mov	r0, r7
 80161ee:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80162e4 <tTString_initToPool+0x480>
 80161f2:	f7fb fb67 	bl	80118c4 <tSVF_initToPool>
    tSVF_setSampleRate(&x->peakFilt, x->sampleRate);
 80161f6:	4638      	mov	r0, r7
 80161f8:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 80161fc:	f7fb fcbc 	bl	8011b78 <tSVF_setSampleRate>
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 8016200:	ed9f 0a38 	vldr	s0, [pc, #224]	; 80162e4 <tTString_initToPool+0x480>
 8016204:	4638      	mov	r0, r7
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 8016206:	f104 071c 	add.w	r7, r4, #28
    tSVF_setFreq(&x->peakFilt, 1000.0f);
 801620a:	f7fb fc1d 	bl	8011a48 <tSVF_setFreq>
    tNoise_initToPool(&x->noise, PinkNoise, mp);
 801620e:	462a      	mov	r2, r5
 8016210:	4631      	mov	r1, r6
 8016212:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8016216:	f7fe fea5 	bl	8014f64 <tNoise_initToPool>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 801621a:	f104 0620 	add.w	r6, r4, #32
    tHighpass_initToPool(&x->dcBlock, 1.0f, mp);
 801621e:	4629      	mov	r1, r5
 8016220:	eeb0 0a68 	vmov.f32	s0, s17
 8016224:	4638      	mov	r0, r7
 8016226:	f7fb fcd1 	bl	8011bcc <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlock,x->sampleRate);
 801622a:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 801622e:	4638      	mov	r0, r7
 8016230:	f7fb fd0c 	bl	8011c4c <tHighpass_setSampleRate>
    tHighpass_initToPool(&x->dcBlockP, 1.0f, mp);
 8016234:	4629      	mov	r1, r5
 8016236:	eeb0 0a68 	vmov.f32	s0, s17
 801623a:	4630      	mov	r0, r6
 801623c:	f7fb fcc6 	bl	8011bcc <tHighpass_initToPool>
    tHighpass_setSampleRate(&x->dcBlockP,x->sampleRate);
 8016240:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016244:	4630      	mov	r0, r6
 8016246:	f7fb fd01 	bl	8011c4c <tHighpass_setSampleRate>
    tSlide_initToPool(&x->slide, 0, 3000, mp);//100 1400
 801624a:	4629      	mov	r1, r5
 801624c:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016250:	eeb0 0a48 	vmov.f32	s0, s16
 8016254:	eddf 0a20 	vldr	s1, [pc, #128]	; 80162d8 <tTString_initToPool+0x474>
 8016258:	f7fa ffd2 	bl	8011200 <tSlide_initToPool>
    if (x->wound)
 801625c:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 8016260:	f504 708c 	add.w	r0, r4, #280	; 0x118
 8016264:	4629      	mov	r1, r5
    if (x->wound)
 8016266:	2b00      	cmp	r3, #0
 8016268:	f000 80e4 	beq.w	8016434 <tTString_initToPool+0x5d0>
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.0005f, mp); //was 0.0005
 801626c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80162dc <tTString_initToPool+0x478>
 8016270:	eeb0 0a48 	vmov.f32	s0, s16
 8016274:	9001      	str	r0, [sp, #4]
 8016276:	f7fa ff4f 	bl	8011118 <tExpSmooth_initToPool>
    	    tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 801627a:	eeb0 0a48 	vmov.f32	s0, s16
 801627e:	9801      	ldr	r0, [sp, #4]
 8016280:	e040      	b.n	8016304 <tTString_initToPool+0x4a0>
 8016282:	bf00      	nop
 8016284:	40c90fdb 	.word	0x40c90fdb
 8016288:	41200000 	.word	0x41200000
 801628c:	00000000 	.word	0x00000000
 8016290:	42c80000 	.word	0x42c80000
 8016294:	43dc0000 	.word	0x43dc0000
 8016298:	3b83126f 	.word	0x3b83126f
 801629c:	3ecccccd 	.word	0x3ecccccd
 80162a0:	bab78034 	.word	0xbab78034
 80162a4:	3f7fbe77 	.word	0x3f7fbe77
 80162a8:	3db851ec 	.word	0x3db851ec
 80162ac:	38d1b717 	.word	0x38d1b717
 80162b0:	37d1b717 	.word	0x37d1b717
 80162b4:	3f4ccccd 	.word	0x3f4ccccd
 80162b8:	459c4000 	.word	0x459c4000
 80162bc:	45bb8000 	.word	0x45bb8000
 80162c0:	44e10000 	.word	0x44e10000
 80162c4:	45354000 	.word	0x45354000
 80162c8:	4573c000 	.word	0x4573c000
 80162cc:	3f8ccccd 	.word	0x3f8ccccd
 80162d0:	456d8000 	.word	0x456d8000
 80162d4:	45802000 	.word	0x45802000
 80162d8:	453b8000 	.word	0x453b8000
 80162dc:	3a03126f 	.word	0x3a03126f
 80162e0:	3a51b717 	.word	0x3a51b717
 80162e4:	447a0000 	.word	0x447a0000
 80162e8:	00000000 	.word	0x00000000
 80162ec:	3d23d70a 	.word	0x3d23d70a
 80162f0:	3d4ccccd 	.word	0x3d4ccccd
 80162f4:	3f666666 	.word	0x3f666666
 80162f8:	45dac000 	.word	0x45dac000
 80162fc:	3dcccccd 	.word	0x3dcccccd
 8016300:	3e7ae148 	.word	0x3e7ae148
 8016304:	f7fa ff5e 	bl	80111c4 <tExpSmooth_setDest>
    	    tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.0008f, mp); //was 0.008
 8016308:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 801630c:	4629      	mov	r1, r5
 801630e:	ed5f 0a0c 	vldr	s1, [pc, #-48]	; 80162e0 <tTString_initToPool+0x47c>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 8016312:	eeb0 0a48 	vmov.f32	s0, s16
 8016316:	4630      	mov	r0, r6
 8016318:	9601      	str	r6, [sp, #4]
 801631a:	f7fa fefd 	bl	8011118 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmoothVol, 0.0f);
 801631e:	eeb0 0a48 	vmov.f32	s0, s16
 8016322:	9801      	ldr	r0, [sp, #4]
 8016324:	f7fa ff4e 	bl	80111c4 <tExpSmooth_setDest>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8016328:	ed5f 0a12 	vldr	s1, [pc, #-72]	; 80162e4 <tTString_initToPool+0x480>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 801632c:	ed1f 8a12 	vldr	s16, [pc, #-72]	; 80162e8 <tTString_initToPool+0x484>
 8016330:	f104 06dc 	add.w	r6, r4, #220	; 0xdc
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8016334:	eeb0 0a60 	vmov.f32	s0, s1
 8016338:	f504 7084 	add.w	r0, r4, #264	; 0x108
 801633c:	4629      	mov	r1, r5
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 801633e:	ed5f 8a15 	vldr	s17, [pc, #-84]	; 80162ec <tTString_initToPool+0x488>
    tSlide_initToPool(&x->barSmooth, 1000, 1000, mp);//600 600
 8016342:	f7fa ff5d 	bl	8011200 <tSlide_initToPool>
    tSlide_initToPool(&x->barPulseSlide, 2, 30, mp);//100 1400 // 10 3000
 8016346:	4629      	mov	r1, r5
 8016348:	f504 708a 	add.w	r0, r4, #276	; 0x114
 801634c:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 8016350:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8016354:	f7fa ff54 	bl	8011200 <tSlide_initToPool>
    tExpSmooth_initToPool(&x->barPulse, 0.0f,0.05f, mp); //was 0.05
 8016358:	4629      	mov	r1, r5
 801635a:	eeb0 0a48 	vmov.f32	s0, s16
 801635e:	ed5f 0a1c 	vldr	s1, [pc, #-112]	; 80162f0 <tTString_initToPool+0x48c>
 8016362:	4630      	mov	r0, r6
 8016364:	f7fa fed8 	bl	8011118 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 8016368:	eeb0 0a48 	vmov.f32	s0, s16
 801636c:	4630      	mov	r0, r6
    x->timeSinceLastBump = 1;
 801636e:	f04f 567e 	mov.w	r6, #1065353216	; 0x3f800000
    tExpSmooth_setDest(&x->barPulse, 0.0f);
 8016372:	f7fa ff27 	bl	80111c4 <tExpSmooth_setDest>
    tSVF_initToPool(&x->barResonator, SVFTypeBandpass, 5.0f, 15.0f, mp);
 8016376:	462a      	mov	r2, r5
 8016378:	eef2 0a0e 	vmov.f32	s1, #46	; 0x41700000  15.0
 801637c:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 8016380:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 8016384:	2102      	movs	r1, #2
 8016386:	f7fb fa9d 	bl	80118c4 <tSVF_initToPool>
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 801638a:	4629      	mov	r1, r5
 801638c:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8016390:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
    x->timeSinceLastBump = 1;
 8016394:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
    tHighpass_initToPool(&x->barHP, 30.0f, mp);
 8016398:	f7fb fc18 	bl	8011bcc <tHighpass_initToPool>
    tSVF_initToPool(&x->barLP, SVFTypeLowpass, 7000.0f, 0.9f, mp);
 801639c:	462a      	mov	r2, r5
 801639e:	f504 7088 	add.w	r0, r4, #272	; 0x110
 80163a2:	ed5f 0a2c 	vldr	s1, [pc, #-176]	; 80162f4 <tTString_initToPool+0x490>
 80163a6:	ed1f 0a2c 	vldr	s0, [pc, #-176]	; 80162f8 <tTString_initToPool+0x494>
 80163aa:	2101      	movs	r1, #1
 80163ac:	f7fb fa8a 	bl	80118c4 <tSVF_initToPool>
    x->inharmonic = 1;
 80163b0:	2101      	movs	r1, #1
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 80163b2:	edd4 0a02 	vldr	s1, [r4, #8]
 80163b6:	462a      	mov	r2, r5
 80163b8:	f504 70ac 	add.w	r0, r4, #344	; 0x158
    x->inharmonic = 1;
 80163bc:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 80163c0:	ee60 0aa8 	vmul.f32	s1, s1, s17
 80163c4:	ed1f 1a33 	vldr	s2, [pc, #-204]	; 80162fc <tTString_initToPool+0x498>
 80163c8:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
    x->inharmonicMult = 1.0f;
 80163cc:	f8c4 614c 	str.w	r6, [r4, #332]	; 0x14c
    tFeedbackLeveler_initToPool(&x->feedback, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 80163d0:	f7fa fafa 	bl	80109c8 <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&x->feedbackP, 0.25f, 0.04f * x->invOversampling, 0.1f, 1, mp);
 80163d4:	edd4 0a02 	vldr	s1, [r4, #8]
 80163d8:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 80163dc:	ed1f 1a39 	vldr	s2, [pc, #-228]	; 80162fc <tTString_initToPool+0x498>
 80163e0:	ee60 0aa8 	vmul.f32	s1, s1, s17
 80163e4:	462a      	mov	r2, r5
 80163e6:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 80163ea:	2101      	movs	r1, #1
 80163ec:	f7fa faec 	bl	80109c8 <tFeedbackLeveler_initToPool>
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 80163f0:	ed1f 7a3d 	vldr	s14, [pc, #-244]	; 8016300 <tTString_initToPool+0x49c>
 80163f4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 80163f8:	462a      	mov	r2, r5
    x->windingsPerInch = 70.0f;
 80163fa:	4b17      	ldr	r3, [pc, #92]	; (8016458 <tTString_initToPool+0x5f4>)
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 80163fc:	f504 70c0 	add.w	r0, r4, #384	; 0x180
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 8016400:	ee67 7a87 	vmul.f32	s15, s15, s14
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 8016404:	2101      	movs	r1, #1
    x->windingsPerInch = 70.0f;
 8016406:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
    x->quarterSampleRate = x->sampleRate * 0.245f; // a little less than a quarter because we want to compute filters with it ( normalized filter cutoff needs to be less than half pi to work with freq approximation)
 801640a:	edc4 7a5a 	vstr	s15, [r4, #360]	; 0x168
    tNoise_initToPool(&x->pickNoiseSource, PinkNoise, mp);
 801640e:	f7fe fda9 	bl	8014f64 <tNoise_initToPool>
    x->pickupAmount = 0.0f;
 8016412:	ed84 8a63 	vstr	s16, [r4, #396]	; 0x18c
    _tMempool* m = *mp;
 8016416:	682d      	ldr	r5, [r5, #0]
    _tPickupNonLinearity* p = *pl = (_tPickupNonLinearity*) mpool_alloc(sizeof(_tPickupNonLinearity), m);
 8016418:	2008      	movs	r0, #8
 801641a:	4629      	mov	r1, r5
 801641c:	f7fe f87e 	bl	801451c <mpool_alloc>
 8016420:	f8c4 0190 	str.w	r0, [r4, #400]	; 0x190
    p->mempool = m;
 8016424:	6005      	str	r5, [r0, #0]
    p->prev = 0.0f;
 8016426:	ed80 8a01 	vstr	s16, [r0, #4]
}
 801642a:	b005      	add	sp, #20
 801642c:	ecbd 8b0a 	vpop	{d8-d12}
 8016430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	tExpSmooth_initToPool(&x->barSmooth2, 0.0f,0.005f, mp); //was 0.0005
 8016434:	eddf 0a09 	vldr	s1, [pc, #36]	; 801645c <tTString_initToPool+0x5f8>
 8016438:	eeb0 0a48 	vmov.f32	s0, s16
 801643c:	9001      	str	r0, [sp, #4]
 801643e:	f7fa fe6b 	bl	8011118 <tExpSmooth_initToPool>
    	tExpSmooth_setDest(&x->barSmooth2, 0.0f);
 8016442:	eeb0 0a48 	vmov.f32	s0, s16
 8016446:	9801      	ldr	r0, [sp, #4]
 8016448:	f7fa febc 	bl	80111c4 <tExpSmooth_setDest>
    	tExpSmooth_initToPool(&x->barSmoothVol, 0.0f,0.004f, mp); //was 0.008
 801644c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
 8016450:	eef0 0a4b 	vmov.f32	s1, s22
 8016454:	4629      	mov	r1, r5
 8016456:	e75c      	b.n	8016312 <tTString_initToPool+0x4ae>
 8016458:	428c0000 	.word	0x428c0000
 801645c:	3ba3d70a 	.word	0x3ba3d70a

08016460 <tTString_free>:
{
 8016460:	b510      	push	{r4, lr}
    _tTString* x = *bw;
 8016462:	6804      	ldr	r4, [r0, #0]
	_tPickupNonLinearity* p = *pl;
 8016464:	f8d4 0190 	ldr.w	r0, [r4, #400]	; 0x190
	mpool_free((char*)p, p->mempool);
 8016468:	6801      	ldr	r1, [r0, #0]
 801646a:	f7fe f919 	bl	80146a0 <mpool_free>
    tNoise_free(&x->pickNoiseSource);
 801646e:	f504 70c0 	add.w	r0, r4, #384	; 0x180
 8016472:	f7fe fd87 	bl	8014f84 <tNoise_free>
    tFeedbackLeveler_free(&x->feedbackP);
 8016476:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 801647a:	f7fa facd 	bl	8010a18 <tFeedbackLeveler_free>
    tFeedbackLeveler_free(&x->feedback);
 801647e:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 8016482:	f7fa fac9 	bl	8010a18 <tFeedbackLeveler_free>
    tSVF_free(&x->barLP);
 8016486:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801648a:	f7fb faa3 	bl	80119d4 <tSVF_free>
    tHighpass_free(&x->barHP);
 801648e:	f504 7086 	add.w	r0, r4, #268	; 0x10c
 8016492:	f7fb fbbb 	bl	8011c0c <tHighpass_free>
    tSVF_free(&x->barResonator);
 8016496:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 801649a:	f7fb fa9b 	bl	80119d4 <tSVF_free>
    tExpSmooth_free(&x->barPulse);
 801649e:	f104 00dc 	add.w	r0, r4, #220	; 0xdc
 80164a2:	f7fa fe65 	bl	8011170 <tExpSmooth_free>
    tSlide_free(&x->barPulseSlide);
 80164a6:	f504 708a 	add.w	r0, r4, #276	; 0x114
 80164aa:	f7fa fecf 	bl	801124c <tSlide_free>
    tSlide_free(&x->barSmooth);
 80164ae:	f504 7084 	add.w	r0, r4, #264	; 0x108
 80164b2:	f7fa fecb 	bl	801124c <tSlide_free>
	tExpSmooth_free(&x->barSmoothVol);
 80164b6:	f504 708e 	add.w	r0, r4, #284	; 0x11c
 80164ba:	f7fa fe59 	bl	8011170 <tExpSmooth_free>
	tExpSmooth_free(&x->barSmooth2);
 80164be:	f504 708c 	add.w	r0, r4, #280	; 0x118
 80164c2:	f7fa fe55 	bl	8011170 <tExpSmooth_free>
	tSlide_free(&x->slide);
 80164c6:	f104 0048 	add.w	r0, r4, #72	; 0x48
 80164ca:	f7fa febf 	bl	801124c <tSlide_free>
    tHighpass_free(&x->dcBlockP);
 80164ce:	f104 0020 	add.w	r0, r4, #32
 80164d2:	f7fb fb9b 	bl	8011c0c <tHighpass_free>
    tHighpass_free(&x->dcBlock);
 80164d6:	f104 001c 	add.w	r0, r4, #28
 80164da:	f7fb fb97 	bl	8011c0c <tHighpass_free>
    tNoise_free(&x->noise);
 80164de:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 80164e2:	f7fe fd4f 	bl	8014f84 <tNoise_free>
    tSVF_free(&x->peakFilt);
 80164e6:	f504 70c4 	add.w	r0, r4, #392	; 0x188
 80164ea:	f7fb fa73 	bl	80119d4 <tSVF_free>
    tSVF_free(&x->pickupFilter2);
 80164ee:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
 80164f2:	f7fb fa6f 	bl	80119d4 <tSVF_free>
    tSVF_free(&x->pickupFilter);
 80164f6:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 80164fa:	f7fb fa6b 	bl	80119d4 <tSVF_free>
    tCycle_free(&x->pickupModOsc);
 80164fe:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8016502:	f7fe f989 	bl	8014818 <tCycle_free>
    tCycle_free(&x->tensionModOsc);
 8016506:	f104 00a4 	add.w	r0, r4, #164	; 0xa4
 801650a:	f7fe f985 	bl	8014818 <tCycle_free>
    tSVF_free(&x->highpassP);
 801650e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
 8016512:	f7fb fa5f 	bl	80119d4 <tSVF_free>
    tSVF_free(&x->lowpassP),
 8016516:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801651a:	f7fb fa5b 	bl	80119d4 <tSVF_free>
    tThiranAllpassSOCascade_free(&x->allpassP);
 801651e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016522:	f7fa ff2d 	bl	8011380 <tThiranAllpassSOCascade_free>
    tThiranAllpassSOCascade_free(&x->allpass);
 8016526:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801652a:	f7fa ff29 	bl	8011380 <tThiranAllpassSOCascade_free>
    tExpSmooth_free(&x->pickNoise);
 801652e:	f504 70be 	add.w	r0, r4, #380	; 0x17c
 8016532:	f7fa fe1d 	bl	8011170 <tExpSmooth_free>
    tExpSmooth_free(&x->pitchSmoother);
 8016536:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801653a:	f7fa fe19 	bl	8011170 <tExpSmooth_free>
    tExpSmooth_free(&x->tensionSmoother);
 801653e:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 8016542:	f7fa fe15 	bl	8011170 <tExpSmooth_free>
    tCookOnePole_free(&x->reflFiltP);
 8016546:	f104 0028 	add.w	r0, r4, #40	; 0x28
 801654a:	f7fb f8fd 	bl	8011748 <tCookOnePole_free>
    tCookOnePole_free(&x->reflFilt);
 801654e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016552:	f7fb f8f9 	bl	8011748 <tCookOnePole_free>
    tLagrangeDelay_free(&x->delayP);
 8016556:	f104 0018 	add.w	r0, r4, #24
 801655a:	f7f9 fe6b 	bl	8010234 <tLagrangeDelay_free>
    tLagrangeDelay_free(&x->delay);
 801655e:	f104 0014 	add.w	r0, r4, #20
 8016562:	f7f9 fe67 	bl	8010234 <tLagrangeDelay_free>
    mpool_free((char*)x, x->mempool);
 8016566:	6821      	ldr	r1, [r4, #0]
 8016568:	4620      	mov	r0, r4
}
 801656a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    mpool_free((char*)x, x->mempool);
 801656e:	f7fe b897 	b.w	80146a0 <mpool_free>
 8016572:	bf00      	nop

08016574 <tTString_tick>:
{
 8016574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016578:	ed2d 8b10 	vpush	{d8-d15}
    _tTString* x = *bw;
 801657c:	6804      	ldr	r4, [r0, #0]
{
 801657e:	b093      	sub	sp, #76	; 0x4c
    x->feedbackNoise = tNoise_tick(&x->noise);
 8016580:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
 8016584:	f7fe fd02 	bl	8014f8c <tNoise_tick>
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8016588:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 801658c:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 8016590:	f504 708c 	add.w	r0, r4, #280	; 0x118
    Lfloat barPos = x->barPosition;
 8016594:	ed94 8a3b 	vldr	s16, [r4, #236]	; 0xec
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 8016598:	ee77 6a87 	vadd.f32	s13, s15, s14
    x->feedbackNoise = tNoise_tick(&x->noise);
 801659c:	ed84 0a58 	vstr	s0, [r4, #352]	; 0x160
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 80165a0:	9000      	str	r0, [sp, #0]
 80165a2:	eeb0 0a48 	vmov.f32	s0, s16
    if ((barPos > (x->prevBarPosSmoothed + 3.0f)) || (barPos < (x->prevBarPosSmoothed - 3.0f)))
 80165a6:	eef4 6ac8 	vcmpe.f32	s13, s16
 80165aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165ae:	d407      	bmi.n	80165c0 <tTString_tick+0x4c>
 80165b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80165b4:	eef4 7ac8 	vcmpe.f32	s15, s16
 80165b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80165bc:	f340 83d5 	ble.w	8016d6a <tTString_tick+0x7f6>
    	tExpSmooth_setValAndDest(&x->barSmooth2,barPos);
 80165c0:	f7fa fe08 	bl	80111d4 <tExpSmooth_setValAndDest>
 80165c4:	9800      	ldr	r0, [sp, #0]
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 80165c6:	f7fa fe0b 	bl	80111e0 <tExpSmooth_tick>
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80165ca:	edd4 7a4a 	vldr	s15, [r4, #296]	; 0x128
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80165ce:	f504 758e 	add.w	r5, r4, #284	; 0x11c
    Lfloat barPosSmoothed = tExpSmooth_tick(&x->barSmooth2);
 80165d2:	eef0 8a40 	vmov.f32	s17, s0
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80165d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80165da:	f7fd fb83 	bl	8013ce4 <fastabsf>
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80165de:	4628      	mov	r0, r5
    Lfloat barDifference = fastabsf(barPosSmoothed - x->prevBarPosSmoothed);
 80165e0:	eeb0 9a40 	vmov.f32	s18, s0
    tExpSmooth_setDest(&x->barSmoothVol,barPos);
 80165e4:	9500      	str	r5, [sp, #0]
 80165e6:	eeb0 0a48 	vmov.f32	s0, s16
 80165ea:	f7fa fdeb 	bl	80111c4 <tExpSmooth_setDest>
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 80165ee:	9800      	ldr	r0, [sp, #0]
 80165f0:	f7fa fdf6 	bl	80111e0 <tExpSmooth_tick>
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80165f4:	edd4 7a48 	vldr	s15, [r4, #288]	; 0x120
        Lfloat barPosSmoothVol = tExpSmooth_tick(&x->barSmoothVol);
 80165f8:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat differenceFastSmooth = fastabsf(barPosSmoothVol - x->prevBarPosSmoothVol);
 80165fc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016600:	f7fd fb70 	bl	8013ce4 <fastabsf>
        if (differenceFastSmooth < 0.0001f)
 8016604:	eddf 7ad4 	vldr	s15, [pc, #848]	; 8016958 <tTString_tick+0x3e4>
        x->prevBarPosSmoothVol = barPosSmoothVol;
 8016608:	ed84 8a48 	vstr	s16, [r4, #288]	; 0x120
        if (differenceFastSmooth < 0.0001f)
 801660c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8016610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016614:	f140 8359 	bpl.w	8016cca <tTString_tick+0x756>
        	volCut = ((differenceFastSmooth - 0.00001f) * 1111.111111111111111f);
 8016618:	eddf 6ad0 	vldr	s13, [pc, #832]	; 801695c <tTString_tick+0x3e8>
 801661c:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8016960 <tTString_tick+0x3ec>
 8016620:	ee30 8a66 	vsub.f32	s16, s0, s13
 8016624:	eddf 7acf 	vldr	s15, [pc, #828]	; 8016964 <tTString_tick+0x3f0>
 8016628:	ee28 8a07 	vmul.f32	s16, s16, s14
 801662c:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8016630:	edd4 9a5b 	vldr	s19, [r4, #364]	; 0x16c
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8016634:	ed94 0a3f 	vldr	s0, [r4, #252]	; 0xfc
    Lfloat currentBump = barPosSmoothed * x->windingsPerInch;
 8016638:	ee68 9aa9 	vmul.f32	s19, s17, s19
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 801663c:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8016640:	f7fd fb50 	bl	8013ce4 <fastabsf>
 8016644:	eef0 7a40 	vmov.f32	s15, s0
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8016648:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    x->prevBarPosSmoothed = barPosSmoothed;
 801664c:	edc4 8a4a 	vstr	s17, [r4, #296]	; 0x128
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 8016650:	ee79 0a09 	vadd.f32	s1, s18, s18
 8016654:	ed9f 0ac3 	vldr	s0, [pc, #780]	; 8016964 <tTString_tick+0x3f0>
    Lfloat bumpDifference = fastabsf(currentBump - x->lastBump);
 8016658:	eef0 8a67 	vmov.f32	s17, s15
    barDifference = LEAF_clip(0.0f, barDifference*2.0f, 1.0f);
 801665c:	f7fd fc5c 	bl	8013f18 <LEAF_clip>
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 8016660:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8016664:	f7fa fe14 	bl	8011290 <tSlide_tick>
    if (x->wound)
 8016668:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
    x->slideAmount = tSlide_tick(&x->slide, barDifference);
 801666c:	ed84 0a30 	vstr	s0, [r4, #192]	; 0xc0
    if (x->wound)
 8016670:	2b00      	cmp	r3, #0
 8016672:	f000 83a9 	beq.w	8016dc8 <tTString_tick+0x854>
		if (bumpDifference > 1.0f)
 8016676:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801667a:	eef4 8ac9 	vcmpe.f32	s17, s18
 801667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016682:	f300 8325 	bgt.w	8016cd0 <tTString_tick+0x75c>
			x->bumpOsc = 0;
 8016686:	2300      	movs	r3, #0
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016688:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 801668c:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016690:	f504 7584 	add.w	r5, r4, #264	; 0x108
			x->bumpOsc = 0;
 8016694:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
		if (x->sampleCount < 3000)
 8016698:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
 801669c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 80166a0:	4293      	cmp	r3, r2
 80166a2:	f240 835e 	bls.w	8016d62 <tTString_tick+0x7ee>
			tSlide_setDest(&x->barSmooth, 5.0f);
 80166a6:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80166aa:	4628      	mov	r0, r5
 80166ac:	f7fa fdd2 	bl	8011254 <tSlide_setDest>
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 80166b0:	4628      	mov	r0, r5
		tSVF_setFreq(&x->barResonator, barFreq);
 80166b2:	f104 05e8 	add.w	r5, r4, #232	; 0xe8
		Lfloat barFreq = tSlide_tickNoInput(&x->barSmooth);
 80166b6:	f7fa fdd1 	bl	801125c <tSlide_tickNoInput>
 80166ba:	eef0 9a40 	vmov.f32	s19, s0
		tSVF_setFreq(&x->barResonator, barFreq);
 80166be:	4628      	mov	r0, r5
 80166c0:	f7fb f9c2 	bl	8011a48 <tSVF_setFreq>
		x->slideNoise = x->feedbackNoise;
 80166c4:	f8d4 3160 	ldr.w	r3, [r4, #352]	; 0x160
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 80166c8:	4630      	mov	r0, r6
		x->slideNoise = x->feedbackNoise;
 80166ca:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 80166ce:	f7fa fdc5 	bl	801125c <tSlide_tickNoInput>
		if (pulseVal > .99f)
 80166d2:	eddf 7aa5 	vldr	s15, [pc, #660]	; 8016968 <tTString_tick+0x3f4>
		Lfloat pulseVal = tSlide_tickNoInput(&x->barPulseSlide);
 80166d6:	eef0 8a40 	vmov.f32	s17, s0
		if (pulseVal > .99f)
 80166da:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80166de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166e2:	f300 8395 	bgt.w	8016e10 <tTString_tick+0x89c>
		x->slideNoise *= pulseVal;
 80166e6:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 80166ea:	4638      	mov	r0, r7
		x->slideNoise *= pulseVal;
 80166ec:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80166f0:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 80166f4:	f7fa fd74 	bl	80111e0 <tExpSmooth_tick>
 80166f8:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 80166fc:	4628      	mov	r0, r5
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 80166fe:	ee60 8a27 	vmul.f32	s17, s0, s15
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 8016702:	eeb0 0a68 	vmov.f32	s0, s17
		x->slideNoise *= tExpSmooth_tick(&x->barPulse);
 8016706:	edc4 8a34 	vstr	s17, [r4, #208]	; 0xd0
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 801670a:	f7fb f967 	bl	80119dc <tSVF_tick>
 801670e:	edd4 7a4c 	vldr	s15, [r4, #304]	; 0x130
 8016712:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016716:	f7fd fc57 	bl	8013fc8 <fast_tanh5>
		if (barFreq < 300.0f)
 801671a:	eddf 7a94 	vldr	s15, [pc, #592]	; 801696c <tTString_tick+0x3f8>
		Lfloat tempSlideNoise2 = fast_tanh5(tSVF_tick(&x->barResonator, tempSlideNoise1)*x->barDrive);
 801671e:	eeb0 9a40 	vmov.f32	s18, s0
		if (barFreq < 300.0f)
 8016722:	eef4 9ae7 	vcmpe.f32	s19, s15
 8016726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801672a:	f100 8362 	bmi.w	8016df2 <tTString_tick+0x87e>
		Lfloat filterFade = 1.0f;
 801672e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 8016732:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		x->slideNoise *= x->muted;
 8016736:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 801673a:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise = ((tempSlideNoise1 * dryAmount) + (tempSlideNoise2 * filterAmount * filterFade));// * x->slideAmount;
 801673e:	ee29 9a07 	vmul.f32	s18, s18, s14
 8016742:	eee9 8a00 	vfma.f32	s17, s18, s0
		x->slideNoise *= x->muted;
 8016746:	ee28 0aa7 	vmul.f32	s0, s17, s15
 801674a:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 801674e:	f7fb fa6d 	bl	8011c2c <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 2.0f * volCut);
 8016752:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8016756:	f504 7088 	add.w	r0, r4, #272	; 0x110
 801675a:	ee77 7aa7 	vadd.f32	s15, s15, s15
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 801675e:	ee67 7a88 	vmul.f32	s15, s15, s16
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016762:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8016766:	ee27 0a80 	vmul.f32	s0, s15, s0
 801676a:	f7fb f937 	bl	80119dc <tSVF_tick>
		x->slideNoise = x->slideNoise * x->slideGain;
 801676e:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
    for (int i = 0; i < x->oversampling; i++)
 8016772:	6863      	ldr	r3, [r4, #4]
		x->slideNoise = x->slideNoise * x->slideGain;
 8016774:	ee20 0a27 	vmul.f32	s0, s0, s15
    for (int i = 0; i < x->oversampling; i++)
 8016778:	2b00      	cmp	r3, #0
		x->slideNoise = x->slideNoise * x->slideGain;
 801677a:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
    for (int i = 0; i < x->oversampling; i++)
 801677e:	f340 834d 	ble.w	8016e1c <tTString_tick+0x8a8>
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016782:	f104 0350 	add.w	r3, r4, #80	; 0x50
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 8016786:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 801678a:	f104 0614 	add.w	r6, r4, #20
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 801678e:	f104 0518 	add.w	r5, r4, #24
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016792:	9305      	str	r3, [sp, #20]
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016794:	f104 034c 	add.w	r3, r4, #76	; 0x4c
 8016798:	ed9f 9a75 	vldr	s18, [pc, #468]	; 8016970 <tTString_tick+0x3fc>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 801679c:	f04f 0900 	mov.w	r9, #0
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 80167a0:	9306      	str	r3, [sp, #24]
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 80167a2:	f504 73c0 	add.w	r3, r4, #384	; 0x180
 80167a6:	9307      	str	r3, [sp, #28]
 80167a8:	f504 73be 	add.w	r3, r4, #380	; 0x17c
 80167ac:	9308      	str	r3, [sp, #32]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 80167ae:	f104 0324 	add.w	r3, r4, #36	; 0x24
 80167b2:	9300      	str	r3, [sp, #0]
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80167b4:	f104 0328 	add.w	r3, r4, #40	; 0x28
 80167b8:	9303      	str	r3, [sp, #12]
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80167ba:	f104 03ac 	add.w	r3, r4, #172	; 0xac
 80167be:	9304      	str	r3, [sp, #16]
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 80167c0:	f504 73ac 	add.w	r3, r4, #344	; 0x158
 80167c4:	9301      	str	r3, [sp, #4]
 80167c6:	f104 031c 	add.w	r3, r4, #28
 80167ca:	9302      	str	r3, [sp, #8]
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 80167cc:	f504 73ae 	add.w	r3, r4, #348	; 0x15c
 80167d0:	9309      	str	r3, [sp, #36]	; 0x24
 80167d2:	f104 0320 	add.w	r3, r4, #32
 80167d6:	930a      	str	r3, [sp, #40]	; 0x28
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 80167d8:	f104 0368 	add.w	r3, r4, #104	; 0x68
 80167dc:	930b      	str	r3, [sp, #44]	; 0x2c
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 80167de:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 80167e2:	930c      	str	r3, [sp, #48]	; 0x30
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 80167e4:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
 80167e8:	930d      	str	r3, [sp, #52]	; 0x34
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 80167ea:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
 80167ee:	930e      	str	r3, [sp, #56]	; 0x38
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 80167f0:	f504 73c4 	add.w	r3, r4, #392	; 0x188
 80167f4:	930f      	str	r3, [sp, #60]	; 0x3c
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80167f6:	9805      	ldr	r0, [sp, #20]
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 80167f8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80167fc:	f7fa fcf0 	bl	80111e0 <tExpSmooth_tick>
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016800:	9806      	ldr	r0, [sp, #24]
    	x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 8016802:	ed84 0a0b 	vstr	s0, [r4, #44]	; 0x2c
    	Lfloat tension = tExpSmooth_tick(&x->tensionSmoother) * x->tensionGain * x->baseDelay;
 8016806:	f7fa fceb 	bl	80111e0 <tExpSmooth_tick>
 801680a:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801680e:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016812:	4630      	mov	r0, r6
    	x->tensionAmount = tension * 0.01f;
 8016814:	ed94 5a11 	vldr	s10, [r4, #68]	; 0x44
 8016818:	fec7 6aa6 	vmaxnm.f32	s13, s15, s13
 801681c:	edd4 5a17 	vldr	s11, [r4, #92]	; 0x5c
 8016820:	ee67 7a85 	vmul.f32	s15, s15, s10
 8016824:	ed9f 5a53 	vldr	s10, [pc, #332]	; 8016974 <tTString_tick+0x400>
 8016828:	ed94 6a53 	vldr	s12, [r4, #332]	; 0x14c
 801682c:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
 8016830:	ee67 7a85 	vmul.f32	s15, s15, s10
        if (currentDelay > x->maxDelay)
 8016834:	ed94 5a54 	vldr	s10, [r4, #336]	; 0x150
 8016838:	ee27 7a09 	vmul.f32	s14, s14, s18
 801683c:	eeb8 da45 	vcvt.f32.u32	s26, s10
    	x->tensionAmount = tension * 0.01f;
 8016840:	ee67 7a80 	vmul.f32	s15, s15, s0
 8016844:	fe8d da66 	vminnm.f32	s26, s26, s13
 8016848:	eeb0 0a4d 	vmov.f32	s0, s26
 801684c:	edc4 7a28 	vstr	s15, [r4, #160]	; 0xa0
        Lfloat halfCurrentDelay = currentDelay * 0.5f;
 8016850:	eef1 8a4d 	vneg.f32	s17, s26
 8016854:	ee2d 8a08 	vmul.f32	s16, s26, s16
        tLagrangeDelay_setDelay(&x->delay, currentDelay - x->tensionAmount - (x->allpassDelay * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016858:	eea5 0ac6 	vfms.f32	s0, s11, s12
 801685c:	eead 0a47 	vfms.f32	s0, s26, s14
 8016860:	ee30 0a67 	vsub.f32	s0, s0, s15
 8016864:	f7f9 fd40 	bl	80102e8 <tLagrangeDelay_setDelay>
        tLagrangeDelay_setDelay(&x->delayP,currentDelay - x->tensionAmount - (x->allpassDelayP * x->inharmonicMult) - ((x->phaseComp * INV_TWO_PI ) * currentDelay));
 8016868:	eeb0 0a4d 	vmov.f32	s0, s26
 801686c:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
 8016870:	4628      	mov	r0, r5
 8016872:	edd4 6a53 	vldr	s13, [r4, #332]	; 0x14c
 8016876:	ed94 7a28 	vldr	s14, [r4, #160]	; 0xa0
 801687a:	eea6 0a66 	vfms.f32	s0, s12, s13
 801687e:	edd4 7a4f 	vldr	s15, [r4, #316]	; 0x13c
 8016882:	ee67 7a89 	vmul.f32	s15, s15, s18
 8016886:	ee30 0a47 	vsub.f32	s0, s0, s14
 801688a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801688e:	f7f9 fd2b 	bl	80102e8 <tLagrangeDelay_setDelay>
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 8016892:	9807      	ldr	r0, [sp, #28]
 8016894:	f7fe fb7a 	bl	8014f8c <tNoise_tick>
 8016898:	eef0 8a40 	vmov.f32	s17, s0
 801689c:	9808      	ldr	r0, [sp, #32]
 801689e:	f7fa fc9f 	bl	80111e0 <tExpSmooth_tick>
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 80168a2:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
        Lfloat pickNoiseSound = tNoise_tick(&x->pickNoiseSource) * tExpSmooth_tick(&x->pickNoise);
 80168a6:	ee68 8a80 	vmul.f32	s17, s17, s0
        tLagrangeDelay_addTo(&x->delay,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 80168aa:	4630      	mov	r0, r6
 80168ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168b0:	ee78 8aa8 	vadd.f32	s17, s17, s17
 80168b4:	ee17 1a90 	vmov	r1, s15
 80168b8:	eeb0 0a68 	vmov.f32	s0, s17
 80168bc:	f7f9 fe2c 	bl	8010518 <tLagrangeDelay_addTo>
        tLagrangeDelay_addTo(&x->delayP,pickNoiseSound * 2.0f, (uint32_t)x->pluckPoint_forInput);
 80168c0:	edd4 7a61 	vldr	s15, [r4, #388]	; 0x184
 80168c4:	eeb0 0a68 	vmov.f32	s0, s17
 80168c8:	4628      	mov	r0, r5
 80168ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80168ce:	ee17 1a90 	vmov	r1, s15
 80168d2:	f7f9 fe21 	bl	8010518 <tLagrangeDelay_addTo>
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 80168d6:	9800      	ldr	r0, [sp, #0]
 80168d8:	ed94 0a0f 	vldr	s0, [r4, #60]	; 0x3c
 80168dc:	f7fa ff50 	bl	8011780 <tCookOnePole_tick>
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80168e0:	9803      	ldr	r0, [sp, #12]
        Lfloat filterOut = tCookOnePole_tick(&x->reflFilt, x->output);
 80168e2:	eef0 ca40 	vmov.f32	s25, s0
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80168e6:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
 80168ea:	f7fa ff49 	bl	8011780 <tCookOnePole_tick>
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 80168ee:	ed94 ca20 	vldr	s24, [r4, #128]	; 0x80
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 80168f2:	4630      	mov	r0, r6
        Lfloat filterOutP = tCookOnePole_tick(&x->reflFiltP, x->outputP);
 80168f4:	eef0 8a40 	vmov.f32	s17, s0
        Lfloat rippleLength = x->rippleRate *  currentDelay;
 80168f8:	ee2d ca0c 	vmul.f32	s24, s26, s24
        uint32_t rippleLengthInt = (uint32_t) rippleLength;
 80168fc:	eebc aacc 	vcvt.u32.f32	s20, s24
        Lfloat rippleLengthAlpha = rippleLength - rippleLengthInt;
 8016900:	eef8 7a4a 	vcvt.f32.u32	s15, s20
 8016904:	ee3c ca67 	vsub.f32	s24, s24, s15
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 8016908:	f7f9 fcbc 	bl	8010284 <tLagrangeDelay_tickOut>
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 801690c:	4628      	mov	r0, r5
        Lfloat delayOut = tLagrangeDelay_tickOut(&x->delay);
 801690e:	eeb0 ea40 	vmov.f32	s28, s0
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 8016912:	f7f9 fcb7 	bl	8010284 <tLagrangeDelay_tickOut>
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016916:	ee1a 1a10 	vmov	r1, s20
        Lfloat delayOutP = tLagrangeDelay_tickOut(&x->delayP);
 801691a:	eef0 da40 	vmov.f32	s27, s0
        Lfloat rippleOut1 = (tLagrangeDelay_tapOutInterpolated(&x->delay,rippleLengthInt,rippleLengthAlpha) * x->r);
 801691e:	4630      	mov	r0, r6
 8016920:	eeb0 0a4c 	vmov.f32	s0, s24
 8016924:	f7f9 fd94 	bl	8010450 <tLagrangeDelay_tapOutInterpolated>
 8016928:	eef0 7a40 	vmov.f32	s15, s0
 801692c:	ed94 7a1f 	vldr	s14, [r4, #124]	; 0x7c
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 8016930:	eeb0 0a4c 	vmov.f32	s0, s24
 8016934:	ee1a 1a10 	vmov	r1, s20
 8016938:	4628      	mov	r0, r5
        Lfloat rippleOut = delayOut + rippleOut1;
 801693a:	eea7 ea87 	vfma.f32	s28, s15, s14
        Lfloat rippleOut1P = (tLagrangeDelay_tapOutInterpolated(&x->delayP,rippleLengthInt,rippleLengthAlpha) * x->r);
 801693e:	f7f9 fd87 	bl	8010450 <tLagrangeDelay_tapOutInterpolated>
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 8016942:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
        if (x->inharmonic)
 8016946:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
        Lfloat rippleOutP = delayOutP + rippleOut1P;
 801694a:	eee0 da27 	vfma.f32	s27, s0, s15
        if (x->inharmonic)
 801694e:	2b00      	cmp	r3, #0
 8016950:	f040 8222 	bne.w	8016d98 <tTString_tick+0x824>
 8016954:	e022      	b.n	801699c <tTString_tick+0x428>
 8016956:	bf00      	nop
 8016958:	38d1b717 	.word	0x38d1b717
 801695c:	3727c5ac 	.word	0x3727c5ac
 8016960:	448ae38e 	.word	0x448ae38e
 8016964:	00000000 	.word	0x00000000
 8016968:	3f7d70a4 	.word	0x3f7d70a4
 801696c:	43960000 	.word	0x43960000
 8016970:	3e22f983 	.word	0x3e22f983
 8016974:	3c23d70a 	.word	0x3c23d70a
 8016978:	3cb17e4b 	.word	0x3cb17e4b
 801697c:	3dd55555 	.word	0x3dd55555
 8016980:	3b0a47ed 	.word	0x3b0a47ed
 8016984:	3bdd2f1b 	.word	0x3bdd2f1b
 8016988:	39f9096c 	.word	0x39f9096c
 801698c:	3d99999a 	.word	0x3d99999a
 8016990:	3a59d777 	.word	0x3a59d777
 8016994:	408bbced 	.word	0x408bbced
 8016998:	42c80000 	.word	0x42c80000
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 801699c:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 80169a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80169a4:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
 80169a8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80169ac:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 80169b0:	ee60 0a87 	vmul.f32	s1, s1, s14
 80169b4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80169b8:	ee60 0a8e 	vmul.f32	s1, s1, s28
 80169bc:	f7fd faac 	bl	8013f18 <LEAF_clip>
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80169c0:	ed94 7a23 	vldr	s14, [r4, #140]	; 0x8c
 80169c4:	edd4 0a1d 	vldr	s1, [r4, #116]	; 0x74
 80169c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80169cc:	edd4 7a1e 	vldr	s15, [r4, #120]	; 0x78
 80169d0:	ee60 0a87 	vmul.f32	s1, s1, s14
        x->output = LEAF_clip(-1.0f, (allpassOut * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80169d4:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80169d8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80169dc:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80169e0:	ee60 0aad 	vmul.f32	s1, s1, s27
 80169e4:	f7fd fa98 	bl	8013f18 <LEAF_clip>
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80169e8:	9804      	ldr	r0, [sp, #16]
        x->outputP = LEAF_clip(-1.0f, (allpassOutP * (x->decayCoeff * x->invOnePlusr) * x->muteCoeff), 1.0f);
 80169ea:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
        Lfloat positionMin = (x->openStringLength * 0.104166666666667f);
 80169ee:	ed94 ca3d 	vldr	s24, [r4, #244]	; 0xf4
        Lfloat pickupInput = x->pickupPos + (tCycle_tick(&x->pickupModOsc) * x->pickupModOscAmp);
 80169f2:	edd4 da27 	vldr	s27, [r4, #156]	; 0x9c
 80169f6:	f7fd ff13 	bl	8014820 <tCycle_tick>
 80169fa:	edd4 7a2d 	vldr	s15, [r4, #180]	; 0xb4
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 80169fe:	eee0 da27 	vfma.f32	s27, s0, s15
 8016a02:	ed5f 7a23 	vldr	s15, [pc, #-140]	; 8016978 <tTString_tick+0x404>
 8016a06:	ee2c 1a27 	vmul.f32	s2, s24, s15
 8016a0a:	ed5f 7a24 	vldr	s15, [pc, #-144]	; 801697c <tTString_tick+0x408>
 8016a0e:	ee6c 0a27 	vmul.f32	s1, s24, s15
 8016a12:	eeb0 0a6d 	vmov.f32	s0, s27
 8016a16:	f7fd f91f 	bl	8013c58 <LEAF_mapFromZeroToOneInput>
        while (pickupPos > halfCurrentDelay)
 8016a1a:	eeb4 8ac0 	vcmpe.f32	s16, s0
        Lfloat pickupPos = LEAF_mapFromZeroToOneInput(pickupInput, positionMin, positionMax);
 8016a1e:	eef0 7a40 	vmov.f32	s15, s0
        while (pickupPos > halfCurrentDelay)
 8016a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a26:	f140 81c8 	bpl.w	8016dba <tTString_tick+0x846>
        uint32_t backwards = 0;
 8016a2a:	2300      	movs	r3, #0
        	pickupPos = pickupPos - halfCurrentDelay;
 8016a2c:	ee77 7ac8 	vsub.f32	s15, s15, s16
        	backwards = !backwards;
 8016a30:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos > halfCurrentDelay)
 8016a34:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8016a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a3c:	d4f6      	bmi.n	8016a2c <tTString_tick+0x4b8>
        while (pickupPos < 0.0f)
 8016a3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a46:	d508      	bpl.n	8016a5a <tTString_tick+0x4e6>
        	pickupPos = pickupPos + halfCurrentDelay;
 8016a48:	ee77 7a88 	vadd.f32	s15, s15, s16
        	backwards = !backwards;
 8016a4c:	f083 0301 	eor.w	r3, r3, #1
        while (pickupPos < 0.0f)
 8016a50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8016a54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016a58:	d4f6      	bmi.n	8016a48 <tTString_tick+0x4d4>
        if (backwards)
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	f000 8189 	beq.w	8016d72 <tTString_tick+0x7fe>
        	pickupPosFinal = halfCurrentDelay - pickupPos;
 8016a60:	ee78 6a67 	vsub.f32	s13, s16, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016a64:	ee79 dac8 	vsub.f32	s27, s19, s16
        	inversePickupPos = halfCurrentDelay + pickupPos;
 8016a68:	ee38 da27 	vadd.f32	s26, s16, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8016a6c:	ee86 7a88 	vdiv.f32	s14, s13, s16
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016a70:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016a74:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 8016a78:	ee17 7a90 	vmov	r7, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016a80:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016a84:	ee36 8ae7 	vsub.f32	s16, s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016a88:	ee7d daa7 	vadd.f32	s27, s27, s15
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016a8c:	eefc 7acd 	vcvt.u32.f32	s15, s26
 8016a90:	ed84 7a5e 	vstr	s14, [r4, #376]	; 0x178
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8016a94:	ee39 eacd 	vsub.f32	s28, s19, s26
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016a98:	4639      	mov	r1, r7
 8016a9a:	4630      	mov	r0, r6
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016a9c:	ed1f fa48 	vldr	s30, [pc, #-288]	; 8016980 <tTString_tick+0x40c>
        uint32_t inversePickupPosInt = (uint32_t) inversePickupPos;
 8016aa0:	ee17 8a90 	vmov	r8, s15
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8016aa4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016aa8:	ed5f fa4a 	vldr	s31, [pc, #-296]	; 8016984 <tTString_tick+0x410>
    for (int i = 0; i < x->oversampling; i++)
 8016aac:	f109 0901 	add.w	r9, r9, #1
        uint32_t inversePickupPosIntPlusOne = inversePickupPosInt + 1;
 8016ab0:	f108 0b01 	add.w	fp, r8, #1
 8016ab4:	ed5f ea4c 	vldr	s29, [pc, #-304]	; 8016988 <tTString_tick+0x414>
        Lfloat inversePickupPosAlpha = inversePickupPos - inversePickupPosInt;
 8016ab8:	ee3d da67 	vsub.f32	s26, s26, s15
 8016abc:	ed1f aa4d 	vldr	s20, [pc, #-308]	; 801698c <tTString_tick+0x418>
        Lfloat oneMinusinversePickupPosAlpha = 1.0f - inversePickupPosAlpha;
 8016ac0:	ee3e ea27 	vadd.f32	s28, s28, s15
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016ac4:	f7f9 fcb8 	bl	8010438 <tLagrangeDelay_tapOut>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016ac8:	4651      	mov	r1, sl
 8016aca:	4630      	mov	r0, r6
        Lfloat rightgoing = tLagrangeDelay_tapOut(&x->delay, pickupPosInt) * oneMinusPickupPosAlpha;
 8016acc:	eeb0 ba40 	vmov.f32	s22, s0
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016ad0:	f7f9 fcb2 	bl	8010438 <tLagrangeDelay_tapOut>
 8016ad4:	ee60 5a08 	vmul.f32	s11, s0, s16
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016ad8:	4641      	mov	r1, r8
 8016ada:	4630      	mov	r0, r6
 8016adc:	ed5f aa54 	vldr	s21, [pc, #-336]	; 8016990 <tTString_tick+0x41c>
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016ae0:	ed1f ca54 	vldr	s24, [pc, #-336]	; 8016994 <tTString_tick+0x420>
        rightgoing += tLagrangeDelay_tapOut(&x->delay, pickupPosIntPlusOne) * pickupPosAlpha;
 8016ae4:	eeeb 5a2d 	vfma.f32	s11, s22, s27
 8016ae8:	eef0 ba65 	vmov.f32	s23, s11
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016aec:	f7f9 fca4 	bl	8010438 <tLagrangeDelay_tapOut>
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016af0:	4659      	mov	r1, fp
 8016af2:	4630      	mov	r0, r6
        Lfloat leftgoing = tLagrangeDelay_tapOut(&x->delay, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016af4:	eeb0 ba40 	vmov.f32	s22, s0
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016af8:	f7f9 fc9e 	bl	8010438 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
 8016afc:	ee7b 5aab 	vadd.f32	s11, s23, s23
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016b00:	4639      	mov	r1, r7
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016b02:	ee20 6a0d 	vmul.f32	s12, s0, s26
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016b06:	4628      	mov	r0, r5
 8016b08:	eeb0 3a4a 	vmov.f32	s6, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016b0c:	ee65 4aa5 	vmul.f32	s9, s11, s11
        leftgoing += tLagrangeDelay_tapOut(&x->delay, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016b10:	eeab 6a0e 	vfma.f32	s12, s22, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016b14:	ee25 5aa4 	vmul.f32	s10, s11, s9
 8016b18:	ee65 7a0f 	vmul.f32	s15, s10, s30
 8016b1c:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
 8016b20:	ee36 6a06 	vadd.f32	s12, s12, s12
 8016b24:	eee4 7aaf 	vfma.f32	s15, s9, s31
 8016b28:	eea5 3a2a 	vfma.f32	s6, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016b2c:	ee66 3a06 	vmul.f32	s7, s12, s12
 8016b30:	ee26 4a2a 	vmul.f32	s8, s12, s21
 8016b34:	ee66 4a23 	vmul.f32	s9, s12, s7
 8016b38:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
 8016b3c:	ee24 5ac6 	vnmul.f32	s10, s9, s12
 8016b40:	eee6 7a4a 	vfms.f32	s15, s12, s20
 8016b44:	eee5 7a83 	vfma.f32	s15, s11, s6
 8016b48:	eee3 7aef 	vfms.f32	s15, s7, s31
 8016b4c:	eee4 7acf 	vfms.f32	s15, s9, s30
 8016b50:	eee5 7a2e 	vfma.f32	s15, s10, s29
 8016b54:	eee5 7a04 	vfma.f32	s15, s10, s8
        x->pickupOut =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016b58:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8016b5c:	edc4 7a25 	vstr	s15, [r4, #148]	; 0x94
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016b60:	f7f9 fc6a 	bl	8010438 <tLagrangeDelay_tapOut>
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016b64:	4651      	mov	r1, sl
 8016b66:	4628      	mov	r0, r5
        rightgoing = tLagrangeDelay_tapOut(&x->delayP, pickupPosInt) * oneMinusPickupPosAlpha;
 8016b68:	eeb0 ba40 	vmov.f32	s22, s0
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016b6c:	f7f9 fc64 	bl	8010438 <tLagrangeDelay_tapOut>
 8016b70:	ee60 5a08 	vmul.f32	s11, s0, s16
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016b74:	4641      	mov	r1, r8
 8016b76:	4628      	mov	r0, r5
		rightgoing += tLagrangeDelay_tapOut(&x->delayP, pickupPosIntPlusOne) * pickupPosAlpha;
 8016b78:	eeeb 5a2d 	vfma.f32	s11, s22, s27
 8016b7c:	eeb0 8a65 	vmov.f32	s16, s11
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016b80:	f7f9 fc5a 	bl	8010438 <tLagrangeDelay_tapOut>
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016b84:	4659      	mov	r1, fp
 8016b86:	4628      	mov	r0, r5
		leftgoing = tLagrangeDelay_tapOut(&x->delayP, inversePickupPosInt) * oneMinusinversePickupPosAlpha;
 8016b88:	eef0 da40 	vmov.f32	s27, s0
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016b8c:	f7f9 fc54 	bl	8010438 <tLagrangeDelay_tapOut>
	x = x * 2.0f;
 8016b90:	ee78 5a08 	vadd.f32	s11, s16, s16
 8016b94:	ed94 4a58 	vldr	s8, [r4, #352]	; 0x160
 8016b98:	ed94 5a59 	vldr	s10, [r4, #356]	; 0x164
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016b9c:	ee20 6a0d 	vmul.f32	s12, s0, s26
 8016ba0:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8016ba4:	eef0 3a4a 	vmov.f32	s7, s20
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016ba8:	ee65 4aa5 	vmul.f32	s9, s11, s11
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016bac:	9802      	ldr	r0, [sp, #8]
 8016bae:	eee4 7a05 	vfma.f32	s15, s8, s10
		leftgoing += tLagrangeDelay_tapOut(&x->delayP, inversePickupPosIntPlusOne) * inversePickupPosAlpha;
 8016bb2:	eead 6a8e 	vfma.f32	s12, s27, s28
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016bb6:	ee25 5aa4 	vmul.f32	s10, s11, s9
 8016bba:	eeb0 0a67 	vmov.f32	s0, s15
 8016bbe:	ee65 7a0f 	vmul.f32	s15, s10, s30
 8016bc2:	ee25 5a85 	vmul.f32	s10, s11, s10
	x = x * 2.0f;
 8016bc6:	ee36 6a06 	vadd.f32	s12, s12, s12
 8016bca:	eee4 7aaf 	vfma.f32	s15, s9, s31
 8016bce:	eee5 3a2a 	vfma.f32	s7, s10, s21
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016bd2:	ee26 4a06 	vmul.f32	s8, s12, s12
 8016bd6:	ee66 6a2a 	vmul.f32	s13, s12, s21
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016bda:	ee3c 0a80 	vadd.f32	s0, s25, s0
	Lfloat out = (0.075f * x) + (0.00675f * x * x) +( 0.00211f * x * x * x) + (0.000475f * x * x * x * x) + (0.000831f * x * x * x * x *x);
 8016bde:	ee64 4a06 	vmul.f32	s9, s8, s12
 8016be2:	eee5 7a2e 	vfma.f32	s15, s10, s29
	return out;
 8016be6:	ee24 5ac6 	vnmul.f32	s10, s9, s12
 8016bea:	eee6 7a4a 	vfms.f32	s15, s12, s20
 8016bee:	eee5 7aa3 	vfma.f32	s15, s11, s7
 8016bf2:	eee4 7a6f 	vfms.f32	s15, s8, s31
 8016bf6:	eee4 7acf 	vfms.f32	s15, s9, s30
 8016bfa:	eee5 7a2e 	vfma.f32	s15, s10, s29
 8016bfe:	eee5 7a26 	vfma.f32	s15, s10, s13
		x->pickupOutP =  (pickupNonLinearity(rightgoing) - pickupNonLinearity(leftgoing));
 8016c02:	ee67 7a8c 	vmul.f32	s15, s15, s24
 8016c06:	edc4 7a26 	vstr	s15, [r4, #152]	; 0x98
		Lfloat inputSample = tFeedbackLeveler_tick(&x->feedback, tHighpass_tick(&x->dcBlock, filterOut + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016c0a:	f7fb f80f 	bl	8011c2c <tHighpass_tick>
 8016c0e:	9801      	ldr	r0, [sp, #4]
 8016c10:	f7f9 ff1a 	bl	8010a48 <tFeedbackLeveler_tick>
 8016c14:	edd4 6a58 	vldr	s13, [r4, #352]	; 0x160
 8016c18:	ed94 7a59 	vldr	s14, [r4, #356]	; 0x164
 8016c1c:	eeb0 aa40 	vmov.f32	s20, s0
		Lfloat inputSampleP = tFeedbackLeveler_tick(&x->feedbackP, tHighpass_tick(&x->dcBlockP, filterOutP + x->slideNoise + x->feedbackNoise * x->feedbackNoiseLevel));
 8016c20:	edd4 7a34 	vldr	s15, [r4, #208]	; 0xd0
 8016c24:	980a      	ldr	r0, [sp, #40]	; 0x28
 8016c26:	eee6 7a87 	vfma.f32	s15, s13, s14
 8016c2a:	ee38 0aa7 	vadd.f32	s0, s17, s15
 8016c2e:	f7fa fffd 	bl	8011c2c <tHighpass_tick>
 8016c32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016c34:	f7f9 ff08 	bl	8010a48 <tFeedbackLeveler_tick>
 8016c38:	eeb0 8a40 	vmov.f32	s16, s0
        tLagrangeDelay_tickIn(&x->delay, inputSample);
 8016c3c:	4630      	mov	r0, r6
 8016c3e:	eeb0 0a4a 	vmov.f32	s0, s20
 8016c42:	f7f9 fb11 	bl	8010268 <tLagrangeDelay_tickIn>
        tLagrangeDelay_tickIn(&x->delayP, inputSampleP);
 8016c46:	4628      	mov	r0, r5
 8016c48:	eeb0 0a48 	vmov.f32	s0, s16
 8016c4c:	f7f9 fb0c 	bl	8010268 <tLagrangeDelay_tickIn>
        Lfloat outputPfilt = tSVF_tick(&x->lowpassP, x->pickupOutP);
 8016c50:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8016c52:	ed94 0a26 	vldr	s0, [r4, #152]	; 0x98
 8016c56:	f7fa fec1 	bl	80119dc <tSVF_tick>
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016c5a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016c5c:	f7fa febe 	bl	80119dc <tSVF_tick>
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8016c60:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
        outputPfilt = tSVF_tick(&x->highpassP, outputPfilt);
 8016c64:	eeb0 8a40 	vmov.f32	s16, s0
        LEAF_crossfade(x->pickupAmount * 2.0f - 1.0f,volumes);
 8016c68:	ed94 7a63 	vldr	s14, [r4, #396]	; 0x18c
 8016c6c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8016c70:	a810      	add	r0, sp, #64	; 0x40
 8016c72:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016c76:	f7fd f8d7 	bl	8013e28 <LEAF_crossfade>
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8016c7a:	ed94 7a2a 	vldr	s14, [r4, #168]	; 0xa8
 8016c7e:	edd4 7a25 	vldr	s15, [r4, #148]	; 0x94
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016c82:	980d      	ldr	r0, [sp, #52]	; 0x34
        Lfloat prefilter = (x->pickupOut + (outputPfilt * x->phantomGain)) * 2.0f;
 8016c84:	eee7 7a08 	vfma.f32	s15, s14, s16
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016c88:	ee37 0aa7 	vadd.f32	s0, s15, s15
 8016c8c:	f7fa fea6 	bl	80119dc <tSVF_tick>
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8016c90:	980e      	ldr	r0, [sp, #56]	; 0x38
        Lfloat prefilter2 = tSVF_tick(&x->pickupFilter2, prefilter);// + x->slideNoise;
 8016c92:	eeb0 8a40 	vmov.f32	s16, s0
        Lfloat prefilter3 = tSVF_tick(&x->pickupFilter, prefilter2);// + x->slideNoise;
 8016c96:	f7fa fea1 	bl	80119dc <tSVF_tick>
        Lfloat prefilter4 = tSVF_tick(&x->peakFilt, prefilter3);// + x->slideNoise;
 8016c9a:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8016c9c:	f7fa fe9e 	bl	80119dc <tSVF_tick>
    for (int i = 0; i < x->oversampling; i++)
 8016ca0:	6863      	ldr	r3, [r4, #4]
        theOutput = (prefilter4 * volumes[1]) + (prefilter2 * 1.5f * volumes[0]);
 8016ca2:	eddd 7a11 	vldr	s15, [sp, #68]	; 0x44
    for (int i = 0; i < x->oversampling; i++)
 8016ca6:	454b      	cmp	r3, r9
        theOutput = (prefilter4 * volumes[1]) + (prefilter2 * 1.5f * volumes[0]);
 8016ca8:	ed9d 7a10 	vldr	s14, [sp, #64]	; 0x40
    for (int i = 0; i < x->oversampling; i++)
 8016cac:	f73f ada3 	bgt.w	80167f6 <tTString_tick+0x282>
        theOutput = (prefilter4 * volumes[1]) + (prefilter2 * 1.5f * volumes[0]);
 8016cb0:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
 8016cb4:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016cb8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016cbc:	eea8 0a07 	vfma.f32	s0, s16, s14
}
 8016cc0:	b013      	add	sp, #76	; 0x4c
 8016cc2:	ecbd 8b10 	vpop	{d8-d15}
 8016cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Lfloat volCut = 1.0f;
 8016cca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8016cce:	e4af      	b.n	8016630 <tTString_tick+0xbc>
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016cd0:	f104 07dc 	add.w	r7, r4, #220	; 0xdc
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016cd4:	f504 768a 	add.w	r6, r4, #276	; 0x114
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016cd8:	eeb0 0a49 	vmov.f32	s0, s18
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016cdc:	f504 7584 	add.w	r5, r4, #264	; 0x108
			tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016ce0:	4638      	mov	r0, r7
 8016ce2:	f7fa fa73 	bl	80111cc <tExpSmooth_setVal>
			tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016ce6:	eeb0 0a49 	vmov.f32	s0, s18
 8016cea:	4630      	mov	r0, r6
 8016cec:	f7fa fab2 	bl	8011254 <tSlide_setDest>
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016cf0:	eec9 6a28 	vdiv.f32	s13, s18, s17
 8016cf4:	edd4 7a41 	vldr	s15, [r4, #260]	; 0x104
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016cf8:	4628      	mov	r0, r5
			if (x->timeSinceLastBump < 100)
 8016cfa:	ed1f 7ad9 	vldr	s14, [pc, #-868]	; 8016998 <tTString_tick+0x424>
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016cfe:	ed94 0a0c 	vldr	s0, [r4, #48]	; 0x30
 8016d02:	ed94 6a02 	vldr	s12, [r4, #8]
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
			x->lastBump = currentBump;
 8016d0a:	edc4 9a3f 	vstr	s19, [r4, #252]	; 0xfc
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016d0e:	ee20 0a06 	vmul.f32	s0, s0, s12
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
			if (x->timeSinceLastBump < 100)
 8016d16:	eef4 7ac7 	vcmpe.f32	s15, s14
			x->timeSinceLastBump = x->sampleCount+1 / bumpDifference;
 8016d1a:	edc4 7a40 	vstr	s15, [r4, #256]	; 0x100
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016d1e:	ee80 0a27 	vdiv.f32	s0, s0, s15
			if (x->timeSinceLastBump < 100)
 8016d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d26:	bf4c      	ite	mi
 8016d28:	2301      	movmi	r3, #1
 8016d2a:	2300      	movpl	r3, #0
 8016d2c:	f8c4 3134 	str.w	r3, [r4, #308]	; 0x134
			tSlide_setDest(&x->barSmooth, (x->sampleRate * x->invOversampling / x->timeSinceLastBump));
 8016d30:	f7fa fa90 	bl	8011254 <tSlide_setDest>
			x->sampleCount = 0;
 8016d34:	2200      	movs	r2, #0
		if (x->bumpOsc)
 8016d36:	f8d4 3134 	ldr.w	r3, [r4, #308]	; 0x134
			x->sampleCount = 0;
 8016d3a:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
		if (x->bumpOsc)
 8016d3e:	b183      	cbz	r3, 8016d62 <tTString_tick+0x7ee>
			if (x->bumpCount > x->timeSinceLastBump)
 8016d40:	f8d4 3138 	ldr.w	r3, [r4, #312]	; 0x138
 8016d44:	edd4 7a40 	vldr	s15, [r4, #256]	; 0x100
 8016d48:	ee07 3a10 	vmov	s14, r3
 8016d4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8016d50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8016d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016d58:	dc67      	bgt.n	8016e2a <tTString_tick+0x8b6>
			x->bumpCount++;
 8016d5a:	3301      	adds	r3, #1
 8016d5c:	f8c4 3138 	str.w	r3, [r4, #312]	; 0x138
 8016d60:	4613      	mov	r3, r2
			x->sampleCount++;
 8016d62:	3301      	adds	r3, #1
 8016d64:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
 8016d68:	e4a2      	b.n	80166b0 <tTString_tick+0x13c>
    	tExpSmooth_setDest(&x->barSmooth2,barPos);
 8016d6a:	f7fa fa2b 	bl	80111c4 <tExpSmooth_setDest>
 8016d6e:	9800      	ldr	r0, [sp, #0]
 8016d70:	e429      	b.n	80165c6 <tTString_tick+0x52>
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016d72:	eefc 6ae7 	vcvt.u32.f32	s13, s15
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016d76:	ee79 dae7 	vsub.f32	s27, s19, s15
        x->pickup_Ratio = pickupPosFinal / halfCurrentDelay;
 8016d7a:	ee87 7a88 	vdiv.f32	s14, s15, s16
        uint32_t pickupPosInt = (uint32_t) pickupPosFinal;
 8016d7e:	ee16 7a90 	vmov	r7, s13
        uint32_t pickupPosIntPlusOne = pickupPosInt + 1;
 8016d82:	f107 0a01 	add.w	sl, r7, #1
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016d86:	eef8 6a66 	vcvt.f32.u32	s13, s13
        Lfloat inversePickupPos = currentDelay - pickupPos;
 8016d8a:	ee3d da67 	vsub.f32	s26, s26, s15
        Lfloat pickupPosAlpha = pickupPosFinal - pickupPosInt;
 8016d8e:	ee37 8ae6 	vsub.f32	s16, s15, s13
        Lfloat oneMinusPickupPosAlpha = 1.0f - pickupPosAlpha;
 8016d92:	ee7d daa6 	vadd.f32	s27, s27, s13
        if (backwards)
 8016d96:	e679      	b.n	8016a8c <tTString_tick+0x518>
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8016d98:	eeb0 0a4e 	vmov.f32	s0, s28
 8016d9c:	f104 0054 	add.w	r0, r4, #84	; 0x54
 8016da0:	f7fa fbec 	bl	801157c <tThiranAllpassSOCascade_tick>
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8016da4:	f104 0058 	add.w	r0, r4, #88	; 0x58
        	allpassOut = tThiranAllpassSOCascade_tick(&x->allpass, rippleOut);
 8016da8:	eeb0 ea40 	vmov.f32	s28, s0
        	allpassOutP = tThiranAllpassSOCascade_tick(&x->allpassP, rippleOutP);
 8016dac:	eeb0 0a6d 	vmov.f32	s0, s27
 8016db0:	f7fa fbe4 	bl	801157c <tThiranAllpassSOCascade_tick>
 8016db4:	eef0 da40 	vmov.f32	s27, s0
 8016db8:	e5f0      	b.n	801699c <tTString_tick+0x428>
        while (pickupPos < 0.0f)
 8016dba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8016dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016dc2:	d5d6      	bpl.n	8016d72 <tTString_tick+0x7fe>
        uint32_t backwards = 0;
 8016dc4:	2300      	movs	r3, #0
 8016dc6:	e63f      	b.n	8016a48 <tTString_tick+0x4d4>
		x->slideNoise *= x->muted;
 8016dc8:	edd4 7a51 	vldr	s15, [r4, #324]	; 0x144
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016dcc:	f504 7086 	add.w	r0, r4, #268	; 0x10c
		x->slideNoise *= x->muted;
 8016dd0:	ed94 0a58 	vldr	s0, [r4, #352]	; 0x160
 8016dd4:	ee20 0a27 	vmul.f32	s0, s0, s15
 8016dd8:	ed84 0a34 	vstr	s0, [r4, #208]	; 0xd0
		x->slideNoise = tHighpass_tick(&x->barHP, x->slideNoise);
 8016ddc:	f7fa ff26 	bl	8011c2c <tHighpass_tick>
		x->slideNoise = tSVF_tick(&x->barLP, x->slideNoise * x->slideGain * 0.5f * volCut);
 8016de0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8016de4:	edd4 7a35 	vldr	s15, [r4, #212]	; 0xd4
 8016de8:	f504 7088 	add.w	r0, r4, #272	; 0x110
 8016dec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016df0:	e4b5      	b.n	801675e <tTString_tick+0x1ea>
			filterFade = (barFreq - 100.0f) * 0.005f;
 8016df2:	eddf 7a16 	vldr	s15, [pc, #88]	; 8016e4c <tTString_tick+0x8d8>
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8016df6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			filterFade = (barFreq - 100.0f) * 0.005f;
 8016dfa:	eddf 0a15 	vldr	s1, [pc, #84]	; 8016e50 <tTString_tick+0x8dc>
 8016dfe:	ee79 9ae7 	vsub.f32	s19, s19, s15
			filterFade = LEAF_clip(0.0f, filterFade, 1.0f);
 8016e02:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8016e54 <tTString_tick+0x8e0>
 8016e06:	ee69 0aa0 	vmul.f32	s1, s19, s1
 8016e0a:	f7fd f885 	bl	8013f18 <LEAF_clip>
 8016e0e:	e490      	b.n	8016732 <tTString_tick+0x1be>
			tSlide_setDest(&x->barPulseSlide, 0.0f);
 8016e10:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8016e54 <tTString_tick+0x8e0>
 8016e14:	4630      	mov	r0, r6
 8016e16:	f7fa fa1d 	bl	8011254 <tSlide_setDest>
 8016e1a:	e464      	b.n	80166e6 <tTString_tick+0x172>
    for (int i = 0; i < x->oversampling; i++)
 8016e1c:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8016e54 <tTString_tick+0x8e0>
}
 8016e20:	b013      	add	sp, #76	; 0x4c
 8016e22:	ecbd 8b10 	vpop	{d8-d15}
 8016e26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				tExpSmooth_setVal(&x->barPulse, 1.0f);
 8016e2a:	eeb0 0a49 	vmov.f32	s0, s18
 8016e2e:	4638      	mov	r0, r7
 8016e30:	f7fa f9cc 	bl	80111cc <tExpSmooth_setVal>
				tSlide_setDest(&x->barPulseSlide, 1.0f);
 8016e34:	eeb0 0a49 	vmov.f32	s0, s18
 8016e38:	4630      	mov	r0, r6
 8016e3a:	f7fa fa0b 	bl	8011254 <tSlide_setDest>
			x->bumpCount++;
 8016e3e:	2201      	movs	r2, #1
		if (x->sampleCount < 3000)
 8016e40:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
			x->bumpCount++;
 8016e44:	f8c4 2138 	str.w	r2, [r4, #312]	; 0x138
 8016e48:	e428      	b.n	801669c <tTString_tick+0x128>
 8016e4a:	bf00      	nop
 8016e4c:	42c80000 	.word	0x42c80000
 8016e50:	3ba3d70a 	.word	0x3ba3d70a
 8016e54:	00000000 	.word	0x00000000

08016e58 <tTString_setFreq>:
{
 8016e58:	b510      	push	{r4, lr}
 8016e5a:	ed2d 8b04 	vpush	{d8-d9}
    _tTString* x = *bw;
 8016e5e:	6804      	ldr	r4, [r0, #0]
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016e60:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
{
 8016e64:	b082      	sub	sp, #8
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016e66:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8016e6a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016e6e:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016e72:	ed94 8a0e 	vldr	s16, [r4, #56]	; 0x38
 8016e76:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016e7a:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    x->freq = freq;
 8016e7e:	edc4 7a19 	vstr	s15, [r4, #100]	; 0x64
    Lfloat Fc = (freq*x->invSampleRateTimesTwoPi);
 8016e82:	ee27 8a88 	vmul.f32	s16, s15, s16
    tExpSmooth_setDest(&x->pitchSmoother, (x->sampleRate / freq) - 2.0f); //why 2? is it the combo of the lowpass one pole and highpass one pole?
 8016e86:	ee30 0a47 	vsub.f32	s0, s0, s14
 8016e8a:	f7fa f99b 	bl	80111c4 <tExpSmooth_setDest>
    Lfloat result = 0.0f;
 8016e8e:	2300      	movs	r3, #0
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8016e90:	eeb0 0a48 	vmov.f32	s0, s16
 8016e94:	edd4 8a50 	vldr	s17, [r4, #320]	; 0x140
    Lfloat result = 0.0f;
 8016e98:	9301      	str	r3, [sp, #4]
    arm_atan2_f32(x->poleCoeff *  arm_sin_f32(Fc) , 1.0f - (x->poleCoeff *  arm_cos_f32(Fc)), &result);
 8016e9a:	f7e9 feb1 	bl	8000c00 <arm_sin_f32>
 8016e9e:	eef0 7a40 	vmov.f32	s15, s0
 8016ea2:	ed94 9a50 	vldr	s18, [r4, #320]	; 0x140
 8016ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8016eaa:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8016eae:	f7e9 fd61 	bl	8000974 <arm_cos_f32>
 8016eb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8016eb6:	a801      	add	r0, sp, #4
 8016eb8:	eef0 7a40 	vmov.f32	s15, s0
 8016ebc:	eeb0 0a68 	vmov.f32	s0, s17
 8016ec0:	eee9 0a67 	vfms.f32	s1, s18, s15
 8016ec4:	f7e9 fbcc 	bl	8000660 <arm_atan2_f32>
     x->phaseComp = result;
 8016ec8:	9b01      	ldr	r3, [sp, #4]
 8016eca:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
    //if I can figure out how to use a newer CMSIS DSP pack, the new version 1.15 has an atan2f approximation that's likely faster
#else
    x->phaseComp = atan2f((x->poleCoeff * sinf(Fc)) , (1.0f - (x->poleCoeff * cosf(Fc))));
#endif
}
 8016ece:	b002      	add	sp, #8
 8016ed0:	ecbd 8b04 	vpop	{d8-d9}
 8016ed4:	bd10      	pop	{r4, pc}
 8016ed6:	bf00      	nop

08016ed8 <tTString_setDecayInSeconds>:

void    tTString_setDecayInSeconds               (tTString* const bw, Lfloat decay)
{
	 _tTString* x = *bw;
	 x->decayInSeconds = decay;
	 if (x->decayInSeconds > 20.0f)
 8016ed8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
{
 8016edc:	b510      	push	{r4, lr}
	 if (x->decayInSeconds > 20.0f)
 8016ede:	eeb4 0ae7 	vcmpe.f32	s0, s15
	 _tTString* x = *bw;
 8016ee2:	6804      	ldr	r4, [r0, #0]
	 x->decayInSeconds = decay;
 8016ee4:	ed84 0a22 	vstr	s0, [r4, #136]	; 0x88
	 if (x->decayInSeconds > 20.0f)
 8016ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016eec:	dd04      	ble.n	8016ef8 <tTString_setDecayInSeconds+0x20>
 8016eee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
	 {
		 x->decayCoeff = 1.0f;
 8016ef2:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
		 //decay = LEAF_map(decay, 0.0f, 1.0f, 0.99f, 1.01f);
		 decay = LEAF_clip(0.1f, decay, 1.0f);
		 x->decayCoeff = decay;
	 }
}
 8016ef6:	bd10      	pop	{r4, pc}
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8016ef8:	ed94 7a19 	vldr	s14, [r4, #100]	; 0x64
 8016efc:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8016f00:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016f04:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8016f08:	f7fc ff0e 	bl	8013d28 <fastExp3>
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8016f0c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		 decay = fastExp3(-1.0f / (x->freq * x->decayInSeconds));
 8016f10:	eef0 0a40 	vmov.f32	s1, s0
		 decay = LEAF_clip(0.1f, decay, 1.0f);
 8016f14:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8016f24 <tTString_setDecayInSeconds+0x4c>
 8016f18:	f7fc fffe 	bl	8013f18 <LEAF_clip>
		 x->decayCoeff = 1.0f;
 8016f1c:	ed84 0a1d 	vstr	s0, [r4, #116]	; 0x74
}
 8016f20:	bd10      	pop	{r4, pc}
 8016f22:	bf00      	nop
 8016f24:	3dcccccd 	.word	0x3dcccccd

08016f28 <tTString_setPickupPos>:

void    tTString_setPickupPos               (tTString* const bw, Lfloat pos)
{
	_tTString* x = *bw;
 8016f28:	6803      	ldr	r3, [r0, #0]
	x->pickupPos = pos;
 8016f2a:	ed83 0a27 	vstr	s0, [r3, #156]	; 0x9c
}
 8016f2e:	4770      	bx	lr

08016f30 <tTString_setPickupModAmp>:
	x->pickupAmount = amount;
}

void    tTString_setPickupModAmp               (tTString* const bw, Lfloat amp)
{
	_tTString* x = *bw;
 8016f30:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscAmp = amp;
 8016f32:	ed83 0a2d 	vstr	s0, [r3, #180]	; 0xb4
}
 8016f36:	4770      	bx	lr

08016f38 <tTString_setPickupModFreq>:


void    tTString_setPickupModFreq               (tTString* const bw, Lfloat freq)
{
	_tTString* x = *bw;
 8016f38:	6803      	ldr	r3, [r0, #0]
	x->pickupModOscFreq = freq;
	tCycle_setFreq(&x->pickupModOsc, freq);
 8016f3a:	f103 00ac 	add.w	r0, r3, #172	; 0xac
	x->pickupModOscFreq = freq;
 8016f3e:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
	tCycle_setFreq(&x->pickupModOsc, freq);
 8016f42:	f7fd bc93 	b.w	801486c <tCycle_setFreq>
 8016f46:	bf00      	nop

08016f48 <tTString_mute>:
}



void    tTString_mute              (tTString* const bw)
{
 8016f48:	b510      	push	{r4, lr}
	 _tTString* x = *bw;
 8016f4a:	6804      	ldr	r4, [r0, #0]
	 x->muteCoeff = fastExp3(-1.0f / (x->freq * 0.007f));;
 8016f4c:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8016f70 <tTString_mute+0x28>
 8016f50:	edd4 7a19 	vldr	s15, [r4, #100]	; 0x64
 8016f54:	ee80 0a27 	vdiv.f32	s0, s0, s15
 8016f58:	f7fc fee6 	bl	8013d28 <fastExp3>
	 if (x->muteCoeff < 0.5f)
	 {
		 x->muteCoeff = 0.5f;
	 }
	 x->muted = 0.0f;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
 8016f62:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016f66:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 8016f6a:	ed84 0a1e 	vstr	s0, [r4, #120]	; 0x78
}
 8016f6e:	bd10      	pop	{r4, pc}
 8016f70:	c30edb6d 	.word	0xc30edb6d

08016f74 <tTString_setFilterFreqDirectly>:
	tCookOnePole_setPole(&x->reflFiltP,filter);
	x->poleCoeff = filter;
}

void    tTString_setFilterFreqDirectly              (tTString* const bw, Lfloat freq)
{
 8016f74:	b510      	push	{r4, lr}
 8016f76:	ed2d 8b02 	vpush	{d8}
	 _tTString* x = *bw;
 8016f7a:	6804      	ldr	r4, [r0, #0]
{
 8016f7c:	eef0 0a40 	vmov.f32	s1, s0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 8016f80:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8016f84:	ed94 1a5a 	vldr	s2, [r4, #360]	; 0x168
	x->filterFreq = freqToUse;
#ifdef ARM_MATH_CM7
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8016f88:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
	Lfloat freqToUse = LEAF_clip(10.0f, freq, x->quarterSampleRate);
 8016f8c:	f7fc ffc4 	bl	8013f18 <LEAF_clip>
 8016f90:	eef0 7a40 	vmov.f32	s15, s0
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8016f94:	ed94 7a04 	vldr	s14, [r4, #16]
	x->filterFreq = freqToUse;
 8016f98:	edc4 7a1c 	vstr	s15, [r4, #112]	; 0x70
	freq = 1.0f - arm_sin_f32(freqToUse * x->twoPiTimesInvSampleRate);
 8016f9c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8016fa0:	f7e9 fe2e 	bl	8000c00 <arm_sin_f32>
 8016fa4:	ee38 8a40 	vsub.f32	s16, s16, s0
	freq = 1.0f - sinf(freqToUse * x->twoPiTimesInvSampleRate);
#endif
	//volatile Lfloat normalizedFreq = (overtone * x->freq) * x->twoPiTimesInvSampleRate;
	//filter = 1.0f - normalizedFreq;

	tCookOnePole_setPole(&x->reflFilt,freq);
 8016fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8016fac:	eeb0 0a48 	vmov.f32	s0, s16
 8016fb0:	f7fa fbce 	bl	8011750 <tCookOnePole_setPole>
	tCookOnePole_setPole(&x->reflFiltP,freq);
 8016fb4:	eeb0 0a48 	vmov.f32	s0, s16
 8016fb8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8016fbc:	f7fa fbc8 	bl	8011750 <tCookOnePole_setPole>
	x->poleCoeff = freq;
 8016fc0:	ed84 8a50 	vstr	s16, [r4, #320]	; 0x140
}
 8016fc4:	ecbd 8b02 	vpop	{d8}
 8016fc8:	bd10      	pop	{r4, pc}
 8016fca:	bf00      	nop

08016fcc <tTString_setTensionGain>:

void   tTString_setTensionGain                  (tTString* const bw, Lfloat tensionGain)
{
	_tTString* x = *bw;
 8016fcc:	6803      	ldr	r3, [r0, #0]
	x->tensionGain = tensionGain;
 8016fce:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 8016fd2:	4770      	bx	lr

08016fd4 <tTString_setBarPosition>:
	x->barDrive = drive + 1.0f;
}

void   tTString_setBarPosition                  (tTString* const bw, Lfloat barPosition)
{
	_tTString* x = *bw;
 8016fd4:	6803      	ldr	r3, [r0, #0]
	x->prevBarPosition = x->barPosition;
 8016fd6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
	x->barPosition = barPosition;
 8016fda:	ed83 0a3b 	vstr	s0, [r3, #236]	; 0xec
	x->prevBarPosition = x->barPosition;
 8016fde:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
}
 8016fe2:	4770      	bx	lr

08016fe4 <tTString_setOpenStringFrequency>:

void   tTString_setOpenStringFrequency                  (tTString* const bw, Lfloat openStringFrequency)
{
	_tTString* x = *bw;
 8016fe4:	6803      	ldr	r3, [r0, #0]
	x->openStringLength = ((x->sampleRate / openStringFrequency) - 2.0f);
 8016fe6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8016fea:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8016fee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016ff2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016ff6:	edc3 7a3d 	vstr	s15, [r3, #244]	; 0xf4
}
 8016ffa:	4770      	bx	lr

08016ffc <tTString_setPhantomHarmonicsGain>:
	x->pickupRatio = ratio;
}

void   tTString_setPhantomHarmonicsGain                  (tTString* const bw, Lfloat gain)
{
	_tTString* x = *bw;
 8016ffc:	6803      	ldr	r3, [r0, #0]
	x->phantomGain = gain;
 8016ffe:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
}
 8017002:	4770      	bx	lr

08017004 <tTString_setTensionSpeed>:
}

void   tTString_setTensionSpeed                  (tTString* const bw, Lfloat tensionSpeed)
{
	_tTString* x = *bw;
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
 8017004:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017008:	ed9f 6a08 	vldr	s12, [pc, #32]	; 801702c <tTString_setTensionSpeed+0x28>
	_tTString* x = *bw;
 801700c:	6800      	ldr	r0, [r0, #0]
	tExpSmooth_setFactor(&x->tensionSmoother, 0.00064f * x->invOversampling * (1.0f - tensionSpeed) + 0.00001f); //0.5 is good
 801700e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8017030 <tTString_setTensionSpeed+0x2c>
 8017012:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8017016:	edd0 6a02 	vldr	s13, [r0, #8]
 801701a:	304c      	adds	r0, #76	; 0x4c
 801701c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8017020:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017024:	eeb0 0a47 	vmov.f32	s0, s14
 8017028:	f7fa b8a6 	b.w	8011178 <tExpSmooth_setFactor>
 801702c:	3a27c5ac 	.word	0x3a27c5ac
 8017030:	3727c5ac 	.word	0x3727c5ac

08017034 <tTString_setRippleDepth>:
}


void   tTString_setRippleDepth                  (tTString* const bw, Lfloat depth)
{
 8017034:	b510      	push	{r4, lr}
 8017036:	ed2d 8b02 	vpush	{d8}
	_tTString* x = *bw;
 801703a:	6804      	ldr	r4, [r0, #0]
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801703c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017040:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 80170b0 <tTString_setRippleDepth+0x7c>
{
 8017044:	eeb0 8a40 	vmov.f32	s16, s0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8017048:	edd4 5a22 	vldr	s11, [r4, #136]	; 0x88
 801704c:	eddf 7a19 	vldr	s15, [pc, #100]	; 80170b4 <tTString_setRippleDepth+0x80>
 8017050:	edd4 6a19 	vldr	s13, [r4, #100]	; 0x64
 8017054:	eee5 7a86 	vfma.f32	s15, s11, s12
 8017058:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801705c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8017060:	f7fc fe62 	bl	8013d28 <fastExp3>
	x->invOnePlusr = 1.0f / (1.0f + x->r);
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8017064:	f104 001c 	add.w	r0, r4, #28
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8017068:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 801706c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8017070:	eef3 6a0e 	vmov.f32	s13, #62	; 0x41f00000  30.0
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8017074:	ee68 7a27 	vmul.f32	s15, s16, s15
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8017078:	eef0 8a47 	vmov.f32	s17, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 801707c:	ee67 7a80 	vmul.f32	s15, s15, s0
	Lfloat highpassFreq = depth * 30.0f + 1.0f;
 8017080:	eee8 8a26 	vfma.f32	s17, s16, s13
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8017084:	ee77 6a87 	vadd.f32	s13, s15, s14
	x->r = fastExp3(-1.0f / (x->freq * (x->decayInSeconds * 0.005f + 0.0001f))) * depth * 0.5f;
 8017088:	edc4 7a1f 	vstr	s15, [r4, #124]	; 0x7c
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 801708c:	eec7 7a26 	vdiv.f32	s15, s14, s13
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8017090:	eeb0 0a68 	vmov.f32	s0, s17
	x->invOnePlusr = 1.0f / (1.0f + x->r);
 8017094:	edc4 7a23 	vstr	s15, [r4, #140]	; 0x8c
	tHighpass_setFreq(&x->dcBlock,highpassFreq);
 8017098:	f7fa fdbc 	bl	8011c14 <tHighpass_setFreq>
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 801709c:	eeb0 0a68 	vmov.f32	s0, s17
 80170a0:	f104 0020 	add.w	r0, r4, #32
}
 80170a4:	ecbd 8b02 	vpop	{d8}
 80170a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tHighpass_setFreq(&x->dcBlockP,highpassFreq);
 80170ac:	f7fa bdb2 	b.w	8011c14 <tHighpass_setFreq>
 80170b0:	3ba3d70a 	.word	0x3ba3d70a
 80170b4:	38d1b717 	.word	0x38d1b717

080170b8 <tTString_setHarmonic>:

void   tTString_setHarmonic                  (tTString* const bw, Lfloat harmonic)
{
	_tTString* x = *bw;
	x->harmonic = harmonic;
	x->rippleRate = 1.0f / harmonic;
 80170b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	_tTString* x = *bw;
 80170bc:	6803      	ldr	r3, [r0, #0]
	x->harmonic = harmonic;
 80170be:	ed83 0a21 	vstr	s0, [r3, #132]	; 0x84
	x->rippleRate = 1.0f / harmonic;
 80170c2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80170c6:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
}
 80170ca:	4770      	bx	lr

080170cc <tTString_setFeedbackStrength>:
void   tTString_setFeedbackStrength                  (tTString* const bw, Lfloat strength)
{
	_tTString* x = *bw;
	Lfloat strengthVal = 0.5f * strength;
 80170cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 80170d0:	b510      	push	{r4, lr}
 80170d2:	ed2d 8b02 	vpush	{d8}
 80170d6:	eeb0 8a40 	vmov.f32	s16, s0
	_tTString* x = *bw;
 80170da:	6804      	ldr	r4, [r0, #0]
	Lfloat strengthVal = 0.5f * strength;
 80170dc:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 80170e0:	b082      	sub	sp, #8
	tFeedbackLeveler_setStrength(&x->feedback, strengthVal);
 80170e2:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 80170e6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80170ea:	f7f9 fca1 	bl	8010a30 <tFeedbackLeveler_setStrength>
	tFeedbackLeveler_setStrength(&x->feedbackP, strengthVal);
 80170ee:	ed9d 0a01 	vldr	s0, [sp, #4]
 80170f2:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
 80170f6:	f7f9 fc9b 	bl	8010a30 <tFeedbackLeveler_setStrength>
	x->feedbackNoiseLevel = strength * 0.005f;
 80170fa:	eddf 7a05 	vldr	s15, [pc, #20]	; 8017110 <tTString_setFeedbackStrength+0x44>
 80170fe:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017102:	ed84 8a59 	vstr	s16, [r4, #356]	; 0x164

}
 8017106:	b002      	add	sp, #8
 8017108:	ecbd 8b02 	vpop	{d8}
 801710c:	bd10      	pop	{r4, pc}
 801710e:	bf00      	nop
 8017110:	3ba3d70a 	.word	0x3ba3d70a

08017114 <tTString_setFeedbackReactionSpeed>:
void   tTString_setFeedbackReactionSpeed                  (tTString* const bw, Lfloat speed)
{
 8017114:	b510      	push	{r4, lr}
	_tTString* x = *bw;
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8017116:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8017148 <tTString_setFeedbackReactionSpeed+0x34>
{
 801711a:	ed2d 8b02 	vpush	{d8}
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 801711e:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 801714c <tTString_setFeedbackReactionSpeed+0x38>
	_tTString* x = *bw;
 8017122:	6804      	ldr	r4, [r0, #0]
	Lfloat speedVal = speed * 0.1f + 0.00001f;
 8017124:	eea0 8a27 	vfma.f32	s16, s0, s15
	tFeedbackLeveler_setFactor(&x->feedback, speedVal);
 8017128:	f504 70ac 	add.w	r0, r4, #344	; 0x158
 801712c:	eeb0 0a48 	vmov.f32	s0, s16
 8017130:	f7f9 fc82 	bl	8010a38 <tFeedbackLeveler_setFactor>
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8017134:	eeb0 0a48 	vmov.f32	s0, s16
 8017138:	f504 70ae 	add.w	r0, r4, #348	; 0x15c
}
 801713c:	ecbd 8b02 	vpop	{d8}
 8017140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tFeedbackLeveler_setFactor(&x->feedbackP, speedVal);
 8017144:	f7f9 bc78 	b.w	8010a38 <tFeedbackLeveler_setFactor>
 8017148:	3dcccccd 	.word	0x3dcccccd
 801714c:	3727c5ac 	.word	0x3727c5ac

08017150 <tTString_pluck>:

void    tTString_pluck               (tTString* const bw, Lfloat position, Lfloat amplitude)
{
 8017150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017154:	ed2d 8b06 	vpush	{d8-d10}
    _tTString* x = *bw;

    x->muted = 1.0f;
 8017158:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    _tTString* x = *bw;
 801715c:	f8d0 9000 	ldr.w	r9, [r0]
{
 8017160:	b085      	sub	sp, #20
 8017162:	eeb0 8a40 	vmov.f32	s16, s0
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8017166:	f109 004c 	add.w	r0, r9, #76	; 0x4c
 801716a:	eeb0 0a60 	vmov.f32	s0, s1
    x->muted = 1.0f;
 801716e:	edc9 aa51 	vstr	s21, [r9, #324]	; 0x144
{
 8017172:	eef0 8a60 	vmov.f32	s17, s1
    tExpSmooth_setVal(&x->tensionSmoother, amplitude);
 8017176:	f7fa f829 	bl	80111cc <tExpSmooth_setVal>
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 801717a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 801717e:	f509 70ac 	add.w	r0, r9, #344	; 0x158
    Lfloat currentDelay = x->baseDelay;// - x->allpassDelay;
    x->muteCoeff = 1.0f;
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
    Lfloat positionMax = (x->openStringLength * 0.001f);
 8017182:	ed9f 9aa1 	vldr	s18, [pc, #644]	; 8017408 <tTString_pluck+0x2b8>
    //0.083335f; * position;//position * halfCurrentDelay;
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
    tLagrangeDelay_clear(&x->delay);
 8017186:	f109 0514 	add.w	r5, r9, #20
    tFeedbackLeveler_setTargetLevel(&x->feedback, amplitude * 0.25f);
 801718a:	ee28 0aa7 	vmul.f32	s0, s17, s15
 801718e:	ed8d 0a00 	vstr	s0, [sp]
 8017192:	f7f9 fc7d 	bl	8010a90 <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&x->feedbackP, amplitude * 0.25f);
 8017196:	ed9d 0a00 	vldr	s0, [sp]
 801719a:	f509 70ae 	add.w	r0, r9, #348	; 0x15c
 801719e:	f7f9 fc77 	bl	8010a90 <tFeedbackLeveler_setTargetLevel>
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80171a2:	f109 0050 	add.w	r0, r9, #80	; 0x50
 80171a6:	f7fa f81b 	bl	80111e0 <tExpSmooth_tick>
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 80171aa:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80171ae:	eef0 7a40 	vmov.f32	s15, s0
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 80171b2:	edd9 6a3d 	vldr	s13, [r9, #244]	; 0xf4
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80171b6:	eeb0 0a48 	vmov.f32	s0, s16
    Lfloat positionMin = (x->openStringLength * 0.204166666666667f);
 80171ba:	eddf 0a94 	vldr	s1, [pc, #592]	; 801740c <tTString_pluck+0x2bc>
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80171be:	ee26 1a89 	vmul.f32	s2, s13, s18
    x->muteCoeff = 1.0f;
 80171c2:	edc9 aa1e 	vstr	s21, [r9, #120]	; 0x78
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 80171c6:	ee27 7a87 	vmul.f32	s14, s15, s14
    x->baseDelay = tExpSmooth_tick(&x->pitchSmoother);
 80171ca:	edc9 7a0b 	vstr	s15, [r9, #44]	; 0x2c
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80171ce:	ee66 0aa0 	vmul.f32	s1, s13, s1
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 80171d2:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 80171d6:	eeb8 8a67 	vcvt.f32.u32	s16, s15
    uint32_t halfCurrentDelay = currentDelay * 0.5f;
 80171da:	edcd 7a00 	vstr	s15, [sp]
    uint32_t currentDelayInt = halfCurrentDelay * 2.0f;
 80171de:	ee78 7a08 	vadd.f32	s15, s16, s16
 80171e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80171e6:	ee17 7a90 	vmov	r7, s15
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80171ea:	f7fc fd35 	bl	8013c58 <LEAF_mapFromZeroToOneInput>
 80171ee:	eef0 7a40 	vmov.f32	s15, s0
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 80171f2:	ed9f 0a87 	vldr	s0, [pc, #540]	; 8017410 <tTString_pluck+0x2c0>
 80171f6:	eeb0 1a48 	vmov.f32	s2, s16
    volatile Lfloat pluckPoint = LEAF_mapFromZeroToOneInput(position, positionMin, positionMax);
 80171fa:	edcd 7a02 	vstr	s15, [sp, #8]
    pluckPoint = LEAF_clip(0.0f, pluckPoint, halfCurrentDelay);
 80171fe:	eddd 0a02 	vldr	s1, [sp, #8]
 8017202:	f7fc fe89 	bl	8013f18 <LEAF_clip>
 8017206:	ed8d 0a02 	vstr	s0, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 801720a:	ed9d 7a02 	vldr	s14, [sp, #8]
    tLagrangeDelay_clear(&x->delay);
 801720e:	4628      	mov	r0, r5
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8017210:	eddd 7a02 	vldr	s15, [sp, #8]
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8017214:	eebc 7ac7 	vcvt.u32.f32	s14, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8017218:	ee79 7a67 	vsub.f32	s15, s18, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 801721c:	eef8 9a47 	vcvt.f32.u32	s19, s14
    uint32_t pluckPointInt = (uint32_t) pluckPoint;
 8017220:	ee17 4a10 	vmov	r4, s14
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8017224:	ee77 7a88 	vadd.f32	s15, s15, s16
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8017228:	ee39 9a89 	vadd.f32	s18, s19, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 801722c:	ee8a 7aa7 	vdiv.f32	s14, s21, s15
    Lfloat invPluckPointInt = (1.0f / ((Lfloat)pluckPointInt+.001f));
 8017230:	ee8a aa89 	vdiv.f32	s20, s21, s18
    volatile Lfloat invRemainder = 1.0f / ((halfCurrentDelay-pluckPoint)+.001f);
 8017234:	ed8d 7a03 	vstr	s14, [sp, #12]
    tLagrangeDelay_clear(&x->delay);
 8017238:	f7f9 f808 	bl	801024c <tLagrangeDelay_clear>
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 801723c:	ed9d 7a02 	vldr	s14, [sp, #8]
    x->pluckPoint_forInput = pluckPoint;
 8017240:	9b02      	ldr	r3, [sp, #8]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 8017242:	eec7 7a08 	vdiv.f32	s15, s14, s16
    x->pluckPoint_forInput = pluckPoint;
 8017246:	f8c9 3184 	str.w	r3, [r9, #388]	; 0x184
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 801724a:	9b00      	ldr	r3, [sp, #0]
    x->pluckRatio = pluckPoint / halfCurrentDelay;
 801724c:	edc9 7a5d 	vstr	s15, [r9, #372]	; 0x174
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017250:	2b00      	cmp	r3, #0
 8017252:	f000 80c3 	beq.w	80173dc <tTString_pluck+0x28c>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
        }
        val = LEAF_tanh(val*val) * amplitude;
        tLagrangeDelay_tapIn(&x->delay, val, i);
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017256:	f109 0618 	add.w	r6, r9, #24
 801725a:	2c00      	cmp	r4, #0
 801725c:	f000 80d1 	beq.w	8017402 <tTString_pluck+0x2b2>
 8017260:	42a3      	cmp	r3, r4
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017262:	f04f 0800 	mov.w	r8, #0
 8017266:	eba7 0a04 	sub.w	sl, r7, r4
 801726a:	bf28      	it	cs
 801726c:	4623      	movcs	r3, r4
 801726e:	9301      	str	r3, [sp, #4]
            val = ((Lfloat)i * invPluckPointInt);
 8017270:	ee07 8a90 	vmov	s15, r8
        if (i == pluckPointInt)
 8017274:	4544      	cmp	r4, r8
 8017276:	eba7 0b08 	sub.w	fp, r7, r8
            val = ((Lfloat)i * invPluckPointInt);
 801727a:	eeb8 0a67 	vcvt.f32.u32	s0, s15
 801727e:	ee20 0a0a 	vmul.f32	s0, s0, s20
        if (i == pluckPointInt)
 8017282:	f000 8081 	beq.w	8017388 <tTString_pluck+0x238>
        val = LEAF_tanh(val*val) * amplitude;
 8017286:	ee20 0a00 	vmul.f32	s0, s0, s0
 801728a:	f7fc fe4d 	bl	8013f28 <LEAF_tanh>
 801728e:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017292:	4641      	mov	r1, r8
 8017294:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017296:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 801729a:	eeb0 0a48 	vmov.f32	s0, s16
 801729e:	f7f9 f92f 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80172a2:	4659      	mov	r1, fp
 80172a4:	eeb0 0a49 	vmov.f32	s0, s18
 80172a8:	4628      	mov	r0, r5
 80172aa:	f7f9 f929 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 80172ae:	4641      	mov	r1, r8
 80172b0:	eeb0 0a48 	vmov.f32	s0, s16
 80172b4:	4630      	mov	r0, r6
 80172b6:	f7f9 f923 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 80172ba:	eeb0 0a49 	vmov.f32	s0, s18
 80172be:	4659      	mov	r1, fp
 80172c0:	4630      	mov	r0, r6
 80172c2:	f7f9 f91d 	bl	8010500 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80172c6:	f108 0801 	add.w	r8, r8, #1
 80172ca:	9b01      	ldr	r3, [sp, #4]
 80172cc:	4543      	cmp	r3, r8
 80172ce:	d8cf      	bhi.n	8017270 <tTString_pluck+0x120>
 80172d0:	9b00      	ldr	r3, [sp, #0]
 80172d2:	4543      	cmp	r3, r8
 80172d4:	f240 8082 	bls.w	80173dc <tTString_pluck+0x28c>
        val = LEAF_tanh(val*val) * amplitude;
 80172d8:	eeb7 aa00 	vmov.f32	s20, #112	; 0x3f800000  1.0
 80172dc:	eba7 0a04 	sub.w	sl, r7, r4
 80172e0:	e02a      	b.n	8017338 <tTString_pluck+0x1e8>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 80172e2:	eeb0 0a4a 	vmov.f32	s0, s20
 80172e6:	ed9d 7a03 	vldr	s14, [sp, #12]
 80172ea:	eea7 0a27 	vfma.f32	s0, s14, s15
        val = LEAF_tanh(val*val) * amplitude;
 80172ee:	ee20 0a00 	vmul.f32	s0, s0, s0
 80172f2:	f7fc fe19 	bl	8013f28 <LEAF_tanh>
 80172f6:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 80172fa:	4641      	mov	r1, r8
 80172fc:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80172fe:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017302:	eeb0 0a48 	vmov.f32	s0, s16
 8017306:	f7f9 f8fb 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801730a:	4659      	mov	r1, fp
 801730c:	eeb0 0a49 	vmov.f32	s0, s18
 8017310:	4628      	mov	r0, r5
 8017312:	f7f9 f8f5 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017316:	4641      	mov	r1, r8
 8017318:	eeb0 0a48 	vmov.f32	s0, s16
 801731c:	4630      	mov	r0, r6
 801731e:	f7f9 f8ef 	bl	8010500 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017322:	f108 0801 	add.w	r8, r8, #1
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8017326:	4659      	mov	r1, fp
 8017328:	eeb0 0a49 	vmov.f32	s0, s18
 801732c:	4630      	mov	r0, r6
 801732e:	f7f9 f8e7 	bl	8010500 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017332:	9b00      	ldr	r3, [sp, #0]
 8017334:	4543      	cmp	r3, r8
 8017336:	d951      	bls.n	80173dc <tTString_pluck+0x28c>
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8017338:	ee07 8a90 	vmov	s15, r8
        if (i == pluckPointInt)
 801733c:	4544      	cmp	r4, r8
 801733e:	eba7 0b08 	sub.w	fp, r7, r8
            val = (1.0f - (((Lfloat)i-(Lfloat)pluckPointInt)*invRemainder));
 8017342:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8017346:	ee79 7ae7 	vsub.f32	s15, s19, s15
        if (i == pluckPointInt)
 801734a:	d1ca      	bne.n	80172e2 <tTString_pluck+0x192>
        val = LEAF_tanh(val*val) * amplitude;
 801734c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 8017350:	f104 0801 	add.w	r8, r4, #1
        val = LEAF_tanh(val*val) * amplitude;
 8017354:	f7fc fde8 	bl	8013f28 <LEAF_tanh>
 8017358:	ee28 8a80 	vmul.f32	s16, s17, s0
        tLagrangeDelay_tapIn(&x->delay, val, i);
 801735c:	4621      	mov	r1, r4
 801735e:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 8017360:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017364:	eeb0 0a48 	vmov.f32	s0, s16
 8017368:	f7f9 f8ca 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801736c:	4651      	mov	r1, sl
 801736e:	eeb0 0a49 	vmov.f32	s0, s18
 8017372:	4628      	mov	r0, r5
 8017374:	f7f9 f8c4 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017378:	4621      	mov	r1, r4
 801737a:	eeb0 0a48 	vmov.f32	s0, s16
 801737e:	4630      	mov	r0, r6
 8017380:	f7f9 f8be 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 8017384:	4651      	mov	r1, sl
 8017386:	e7cf      	b.n	8017328 <tTString_pluck+0x1d8>
        val = LEAF_tanh(val*val) * amplitude;
 8017388:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 801738c:	f104 0801 	add.w	r8, r4, #1
        val = LEAF_tanh(val*val) * amplitude;
 8017390:	f7fc fdca 	bl	8013f28 <LEAF_tanh>
 8017394:	ee20 8a28 	vmul.f32	s16, s0, s17
        tLagrangeDelay_tapIn(&x->delay, val, i);
 8017398:	4621      	mov	r1, r4
 801739a:	4628      	mov	r0, r5
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 801739c:	eeb1 9a48 	vneg.f32	s18, s16
        tLagrangeDelay_tapIn(&x->delay, val, i);
 80173a0:	eeb0 0a48 	vmov.f32	s0, s16
 80173a4:	f7f9 f8ac 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delay, -val, currentDelayInt-i);
 80173a8:	4651      	mov	r1, sl
 80173aa:	eeb0 0a49 	vmov.f32	s0, s18
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7f9 f8a6 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 80173b4:	eeb0 0a48 	vmov.f32	s0, s16
 80173b8:	4621      	mov	r1, r4
 80173ba:	4630      	mov	r0, r6
 80173bc:	f7f9 f8a0 	bl	8010500 <tLagrangeDelay_tapIn>
        tLagrangeDelay_tapIn(&x->delayP, -val, currentDelayInt-i);
 80173c0:	eeb0 0a49 	vmov.f32	s0, s18
 80173c4:	4651      	mov	r1, sl
 80173c6:	4630      	mov	r0, r6
 80173c8:	f7f9 f89a 	bl	8010500 <tLagrangeDelay_tapIn>
    for (uint32_t i = 0; i < halfCurrentDelay; i++)
 80173cc:	9b01      	ldr	r3, [sp, #4]
 80173ce:	4598      	cmp	r8, r3
 80173d0:	f4ff af4e 	bcc.w	8017270 <tTString_pluck+0x120>
 80173d4:	9b00      	ldr	r3, [sp, #0]
 80173d6:	4543      	cmp	r3, r8
 80173d8:	f63f af7e 	bhi.w	80172d8 <tTString_pluck+0x188>

    }
    tThiranAllpassSOCascade_clear(&x->allpass);
 80173dc:	f109 0054 	add.w	r0, r9, #84	; 0x54
 80173e0:	f7fa f8fa 	bl	80115d8 <tThiranAllpassSOCascade_clear>
    tThiranAllpassSOCascade_clear(&x->allpassP);
 80173e4:	f109 0058 	add.w	r0, r9, #88	; 0x58
 80173e8:	f7fa f8f6 	bl	80115d8 <tThiranAllpassSOCascade_clear>

    tExpSmooth_setVal(&x->pickNoise, amplitude);
 80173ec:	eeb0 0a68 	vmov.f32	s0, s17
 80173f0:	f509 70be 	add.w	r0, r9, #380	; 0x17c
}
 80173f4:	b005      	add	sp, #20
 80173f6:	ecbd 8b06 	vpop	{d8-d10}
 80173fa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    tExpSmooth_setVal(&x->pickNoise, amplitude);
 80173fe:	f7f9 bee5 	b.w	80111cc <tExpSmooth_setVal>
        tLagrangeDelay_tapIn(&x->delayP, val, i);
 8017402:	46a0      	mov	r8, r4
 8017404:	e768      	b.n	80172d8 <tTString_pluck+0x188>
 8017406:	bf00      	nop
 8017408:	3a83126f 	.word	0x3a83126f
 801740c:	3e511111 	.word	0x3e511111
 8017410:	00000000 	.word	0x00000000

08017414 <tTString_setHarmonicity>:
	x->wavelength = waveLength;
}
void    tTString_setSampleRate         (tTString* const, Lfloat sr);

void    tTString_setHarmonicity         (tTString* const bw, Lfloat B, Lfloat freq)
{
 8017414:	b510      	push	{r4, lr}
 8017416:	ed2d 8b02 	vpush	{d8}
    _tTString* x = *bw;
 801741a:	6804      	ldr	r4, [r0, #0]
{
 801741c:	eeb0 8a60 	vmov.f32	s16, s1
 8017420:	eef0 8a40 	vmov.f32	s17, s0
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8017424:	edd4 7a01 	vldr	s15, [r4, #4]
 8017428:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801742c:	edd4 0a02 	vldr	s1, [r4, #8]
 8017430:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 8017434:	ee68 0a20 	vmul.f32	s1, s16, s1
 8017438:	f7f9 ffbc 	bl	80113b4 <tThiranAllpassSOCascade_setCoeff>
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 801743c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8017440:	edd4 0a02 	vldr	s1, [r4, #8]
 8017444:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017448:	ed94 7a01 	vldr	s14, [r4, #4]
 801744c:	ee68 0a20 	vmul.f32	s1, s16, s1
    x->allpassDelay = tThiranAllpassSOCascade_setCoeff(&x->allpass, B, freq * x->invOversampling, x->oversampling);
 8017450:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    x->allpassDelayP = tThiranAllpassSOCascade_setCoeff(&x->allpassP, B * 0.25f, freq * x->invOversampling, x->oversampling);
 8017454:	eeb8 1ac7 	vcvt.f32.s32	s2, s14
 8017458:	ee28 0aa7 	vmul.f32	s0, s17, s15
 801745c:	f7f9 ffaa 	bl	80113b4 <tThiranAllpassSOCascade_setCoeff>
 8017460:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 8017464:	ecbd 8b02 	vpop	{d8}
 8017468:	bd10      	pop	{r4, pc}
 801746a:	bf00      	nop

0801746c <tTString_setInharmonic>:

void    tTString_setInharmonic         (tTString* const bw, uint32_t onOrOff)
{
    _tTString* x = *bw;
    x->inharmonic = onOrOff;
    x->inharmonicMult = (Lfloat)onOrOff;
 801746c:	ee07 1a90 	vmov	s15, r1
    _tTString* x = *bw;
 8017470:	6803      	ldr	r3, [r0, #0]
    x->inharmonicMult = (Lfloat)onOrOff;
 8017472:	eef8 7a67 	vcvt.f32.u32	s15, s15
    x->inharmonic = onOrOff;
 8017476:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
    x->inharmonicMult = (Lfloat)onOrOff;
 801747a:	edc3 7a53 	vstr	s15, [r3, #332]	; 0x14c
}
 801747e:	4770      	bx	lr

08017480 <glottis_setup_waveform>:




void glottis_setup_waveform(glottis* const glo)
{
 8017480:	b510      	push	{r4, lr}
	_glottis* glot = *glo;
 8017482:	6804      	ldr	r4, [r0, #0]

    Lfloat alpha;
    Lfloat E0;


    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 8017484:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8017488:	eddf 3a53 	vldr	s7, [pc, #332]	; 80175d8 <glottis_setup_waveform+0x158>
    if(Rd < 0.5f) Rd = 0.5f;
    if(Rd > 2.7f) Rd = 2.7f;


    Ra = -0.01f + 0.048f*Rd;
    Rk = 0.224f + 0.118f*Rd;
 801748c:	eddf 6a53 	vldr	s13, [pc, #332]	; 80175dc <glottis_setup_waveform+0x15c>
 8017490:	ed9f 6a53 	vldr	s12, [pc, #332]	; 80175e0 <glottis_setup_waveform+0x160>
    Ra = -0.01f + 0.048f*Rd;
 8017494:	ed9f 4a53 	vldr	s8, [pc, #332]	; 80175e4 <glottis_setup_waveform+0x164>
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 8017498:	eddf 4a53 	vldr	s9, [pc, #332]	; 80175e8 <glottis_setup_waveform+0x168>
 801749c:	eddf 5a53 	vldr	s11, [pc, #332]	; 80175ec <glottis_setup_waveform+0x16c>
{
 80174a0:	ed2d 8b08 	vpush	{d8-d11}
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80174a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 80174a8:	edd4 7a02 	vldr	s15, [r4, #8]
 80174ac:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
    glot->waveform_length = 1.0f / glot->freq;
 80174b0:	ed94 7a01 	vldr	s14, [r4, #4]


    Ta = Ra;
    Tp = (Lfloat)1.0f / (2.0f*Rg);
    Te = Tp + Tp*Rk;
 80174b4:	ed9f 8a4e 	vldr	s16, [pc, #312]	; 80175f0 <glottis_setup_waveform+0x170>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80174b8:	ee79 7a67 	vsub.f32	s15, s18, s15
    Ra = -0.01f + 0.048f*Rd;
 80174bc:	eddf aa4d 	vldr	s21, [pc, #308]	; 80175f4 <glottis_setup_waveform+0x174>
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80174c0:	ee67 7a85 	vmul.f32	s15, s15, s10
    glot->waveform_length = 1.0f / glot->freq;
 80174c4:	ee89 5a07 	vdiv.f32	s10, s18, s14
 80174c8:	fe87 7a8b 	vmaxnm.f32	s14, s15, s22
 80174cc:	fe87 7a63 	vminnm.f32	s14, s14, s7
    glot->Rd = 3.0f * (1.0f - glot->tenseness);
 80174d0:	edc4 7a03 	vstr	s15, [r4, #12]
    Rk = 0.224f + 0.118f*Rd;
 80174d4:	eea7 6a26 	vfma.f32	s12, s14, s13
    Te = Tp + Tp*Rk;
 80174d8:	eea7 8a26 	vfma.f32	s16, s14, s13
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 80174dc:	eef0 6a4b 	vmov.f32	s13, s22
    Ra = -0.01f + 0.048f*Rd;
 80174e0:	eee7 aa04 	vfma.f32	s21, s14, s8
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 80174e4:	eee6 6a24 	vfma.f32	s13, s12, s9



    epsilon = (Lfloat)1.0f / Ta;
 80174e8:	eec9 ba2a 	vdiv.f32	s23, s18, s21
    glot->waveform_length = 1.0f / glot->freq;
 80174ec:	ed84 5a04 	vstr	s10, [r4, #16]
    Rg = (Rk*0.25f)*(0.5f + 1.2f*Rk)/(0.11f*Rd-Ra*(0.5f+1.2f*Rk));
 80174f0:	ee6a 7ae6 	vnmul.f32	s15, s21, s13
 80174f4:	ee66 6a86 	vmul.f32	s13, s13, s12
 80174f8:	eee7 7a25 	vfma.f32	s15, s14, s11
    Tp = (Lfloat)1.0f / (2.0f*Rg);
 80174fc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8017500:	ee87 aaa6 	vdiv.f32	s20, s15, s13
    Te = Tp + Tp*Rk;
 8017504:	ee28 8a0a 	vmul.f32	s16, s16, s20
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8017508:	ee38 0a49 	vsub.f32	s0, s16, s18
 801750c:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8017510:	f7fc fbf0 	bl	8013cf4 <fasterexpf>
    rhs_integral = rhs_integral / delta;
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
    upper_integral = -lower_integral;


    omega = M_PI / Tp;
 8017514:	eeb7 5aca 	vcvt.f64.f32	d5, s20
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017518:	ee79 7a48 	vsub.f32	s15, s18, s16
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 801751c:	ee3a 7a48 	vsub.f32	s14, s20, s16
    shift = fasterexpf(-epsilon * (1.0f - Te));
 8017520:	eef0 9a40 	vmov.f32	s19, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017524:	ee67 7a80 	vmul.f32	s15, s15, s0
    omega = M_PI / Tp;
 8017528:	ed9f 4b27 	vldr	d4, [pc, #156]	; 80175c8 <glottis_setup_waveform+0x148>
 801752c:	ee84 6b05 	vdiv.f64	d6, d4, d5
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017530:	ee70 5a49 	vsub.f32	s11, s0, s18
    delta = 1.0f - shift;
 8017534:	ee39 9a40 	vsub.f32	s18, s18, s0
    rhs_integral = (Lfloat)(1.0f/epsilon) * (shift-1.0f) + (1.0f-Te)*shift;
 8017538:	eee5 7aaa 	vfma.f32	s15, s11, s21
    rhs_integral = rhs_integral / delta;
 801753c:	eec7 8a89 	vdiv.f32	s17, s15, s18
    lower_integral = - (Te - Tp) / 2.0f + rhs_integral;
 8017540:	eee7 8a0b 	vfma.f32	s17, s14, s22
    omega = M_PI / Tp;
 8017544:	eef7 abc6 	vcvt.f32.f64	s21, d6
    s = fast_sinf2(omega * Te);
 8017548:	ee28 0a2a 	vmul.f32	s0, s16, s21
 801754c:	f7fc fc14 	bl	8013d78 <fast_sinf2>

    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017550:	eeb7 5ac0 	vcvt.f64.f32	d5, s0
    upper_integral = -lower_integral;
 8017554:	eeb1 7a68 	vneg.f32	s14, s17
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017558:	ee3a 6a0a 	vadd.f32	s12, s20, s20
    s = fast_sinf2(omega * Te);
 801755c:	eef0 8a40 	vmov.f32	s17, s0
    y = -M_PI * s * upper_integral / (Tp*2.0f);
 8017560:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8017564:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 8017568:	ed9f 4b19 	vldr	d4, [pc, #100]	; 80175d0 <glottis_setup_waveform+0x150>
 801756c:	ee25 5b04 	vmul.f64	d5, d5, d4
 8017570:	ee27 7b05 	vmul.f64	d7, d7, d5
 8017574:	ee87 0b06 	vdiv.f64	d0, d7, d6
    z = logf(y);
 8017578:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801757c:	f001 fb06 	bl	8018b8c <logf>
    alpha = z / (Tp/2.0f - Te);
 8017580:	eef0 7a48 	vmov.f32	s15, s16
 8017584:	eeda 7a0b 	vfnms.f32	s15, s20, s22
 8017588:	ee80 aa27 	vdiv.f32	s20, s0, s15
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
 801758c:	ee28 0a0a 	vmul.f32	s0, s16, s20
 8017590:	f7fc fbb0 	bl	8013cf4 <fasterexpf>
 8017594:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8017598:	ee20 0a28 	vmul.f32	s0, s0, s17



    glot->alpha = alpha;
 801759c:	ed84 aa06 	vstr	s20, [r4, #24]
    glot->E0 = E0;
    glot->epsilon = epsilon;
 80175a0:	edc4 ba08 	vstr	s23, [r4, #32]
    glot->shift = shift;
 80175a4:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    E0 = -1.0f / (s * fasterexpf(alpha*Te));
 80175a8:	eec7 7a00 	vdiv.f32	s15, s14, s0
    glot->delta = delta;
 80175ac:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    glot->Te = Te;
 80175b0:	ed84 8a0b 	vstr	s16, [r4, #44]	; 0x2c
    glot->omega = omega;
 80175b4:	edc4 aa0c 	vstr	s21, [r4, #48]	; 0x30
    glot->E0 = E0;
 80175b8:	edc4 7a07 	vstr	s15, [r4, #28]
}
 80175bc:	ecbd 8b08 	vpop	{d8-d11}
 80175c0:	bd10      	pop	{r4, pc}
 80175c2:	bf00      	nop
 80175c4:	f3af 8000 	nop.w
 80175c8:	54442d18 	.word	0x54442d18
 80175cc:	400921fb 	.word	0x400921fb
 80175d0:	54442d18 	.word	0x54442d18
 80175d4:	c00921fb 	.word	0xc00921fb
 80175d8:	402ccccd 	.word	0x402ccccd
 80175dc:	3df1a9fc 	.word	0x3df1a9fc
 80175e0:	3e656042 	.word	0x3e656042
 80175e4:	3d449ba6 	.word	0x3d449ba6
 80175e8:	3f99999a 	.word	0x3f99999a
 80175ec:	3de147ae 	.word	0x3de147ae
 80175f0:	3f9cac08 	.word	0x3f9cac08
 80175f4:	bc23d70a 	.word	0xbc23d70a

080175f8 <glottis_compute>:
	mpool_free((char*)glot, glot->mempool);
}


Lfloat glottis_compute(glottis* const glo)
{
 80175f8:	b530      	push	{r4, r5, lr}
 80175fa:	ed2d 8b04 	vpush	{d8-d9}
	_glottis* glot = *glo;
 80175fe:	6804      	ldr	r4, [r0, #0]
{
 8017600:	b083      	sub	sp, #12
    Lfloat t;
    Lfloat intensity;

    out = 0.0f;
    intensity = 1.0f;
    glot->time_in_waveform += glot->T;
 8017602:	edd4 7a05 	vldr	s15, [r4, #20]
 8017606:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34

    if(glot->time_in_waveform > glot->waveform_length) {
 801760a:	ed94 7a04 	vldr	s14, [r4, #16]
    glot->time_in_waveform += glot->T;
 801760e:	ee77 7aa6 	vadd.f32	s15, s15, s13
	LEAF* leaf = glot->mempool->leaf;
 8017612:	6823      	ldr	r3, [r4, #0]
	_glottis* glot = *glo;
 8017614:	9401      	str	r4, [sp, #4]
	LEAF* leaf = glot->mempool->leaf;
 8017616:	685d      	ldr	r5, [r3, #4]
    if(glot->time_in_waveform > glot->waveform_length) {
 8017618:	eef4 7ac7 	vcmpe.f32	s15, s14
    glot->time_in_waveform += glot->T;
 801761c:	edc4 7a05 	vstr	s15, [r4, #20]
    if(glot->time_in_waveform > glot->waveform_length) {
 8017620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017624:	dc4b      	bgt.n	80176be <glottis_compute+0xc6>
        glot->time_in_waveform -= glot->waveform_length;
        glottis_setup_waveform(&glot);

    }

    t = (glot->time_in_waveform / glot->waveform_length);
 8017626:	eec7 8a87 	vdiv.f32	s17, s15, s14

    if(t > glot->Te) {
 801762a:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 801762e:	eeb4 0ae8 	vcmpe.f32	s0, s17
 8017632:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017636:	d52d      	bpl.n	8017694 <glottis_compute+0x9c>
        out = (-fasterexpf(-glot->epsilon * (t-glot->Te)) + glot->shift) / glot->delta;
 8017638:	ee30 0a68 	vsub.f32	s0, s0, s17
 801763c:	edd4 7a08 	vldr	s15, [r4, #32]
 8017640:	ed94 8a09 	vldr	s16, [r4, #36]	; 0x24
 8017644:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017648:	f7fc fb54 	bl	8013cf4 <fasterexpf>
 801764c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8017650:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8017654:	ee80 8a27 	vdiv.f32	s16, s0, s15
    } else {
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
    }

    noise = (2.0f * leaf->random()) - 1.0f;
 8017658:	692b      	ldr	r3, [r5, #16]
 801765a:	4798      	blx	r3
 801765c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8017660:	eeb0 7a40 	vmov.f32	s14, s0

    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 8017664:	ed94 0a02 	vldr	s0, [r4, #8]
    noise = (2.0f * leaf->random()) - 1.0f;
 8017668:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 801766c:	eee7 8a27 	vfma.f32	s17, s14, s15
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 8017670:	f7fc fb16 	bl	8013ca0 <fastsqrtf>
 8017674:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0

    aspiration *= 0.2f;

    out += aspiration;
 8017678:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80176d8 <glottis_compute+0xe0>
    aspiration = intensity * (1.0f - fastsqrtf(glot->tenseness)) * 0.3f * noise;
 801767c:	ee37 0ac0 	vsub.f32	s0, s15, s0
    out += aspiration;
 8017680:	ee20 0a28 	vmul.f32	s0, s0, s17

    return out;
}
 8017684:	eea0 8a07 	vfma.f32	s16, s0, s14
 8017688:	eeb0 0a48 	vmov.f32	s0, s16
 801768c:	b003      	add	sp, #12
 801768e:	ecbd 8b04 	vpop	{d8-d9}
 8017692:	bd30      	pop	{r4, r5, pc}
        out = glot->E0 * fasterexpf(glot->alpha * t) * fast_sinf2(glot->omega * t);
 8017694:	ed94 0a06 	vldr	s0, [r4, #24]
 8017698:	ed94 9a07 	vldr	s18, [r4, #28]
 801769c:	ee28 0a80 	vmul.f32	s0, s17, s0
 80176a0:	f7fc fb28 	bl	8013cf4 <fasterexpf>
 80176a4:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80176a8:	eeb0 8a40 	vmov.f32	s16, s0
 80176ac:	ee28 0aa7 	vmul.f32	s0, s17, s15
 80176b0:	f7fc fb62 	bl	8013d78 <fast_sinf2>
 80176b4:	ee28 8a00 	vmul.f32	s16, s16, s0
 80176b8:	ee28 8a09 	vmul.f32	s16, s16, s18
 80176bc:	e7cc      	b.n	8017658 <glottis_compute+0x60>
        glot->time_in_waveform -= glot->waveform_length;
 80176be:	ee77 7ac7 	vsub.f32	s15, s15, s14
        glottis_setup_waveform(&glot);
 80176c2:	a801      	add	r0, sp, #4
        glot->time_in_waveform -= glot->waveform_length;
 80176c4:	edc4 7a05 	vstr	s15, [r4, #20]
        glottis_setup_waveform(&glot);
 80176c8:	f7ff feda 	bl	8017480 <glottis_setup_waveform>
    t = (glot->time_in_waveform / glot->waveform_length);
 80176cc:	9c01      	ldr	r4, [sp, #4]
 80176ce:	edd4 7a05 	vldr	s15, [r4, #20]
 80176d2:	ed94 7a04 	vldr	s14, [r4, #16]
 80176d6:	e7a6      	b.n	8017626 <glottis_compute+0x2e>
 80176d8:	3d75c290 	.word	0x3d75c290

080176dc <tract_calculate_reflections>:
	mpool_free((char*)tr, tr->mempool);
}


void tract_calculate_reflections(tract* const t)
{
 80176dc:	b500      	push	{lr}
	_tract* tr = *t;
 80176de:	6803      	ldr	r3, [r0, #0]
	int i;
    Lfloat  sum;

    for(i = 0; i < tr->n; i++) {
 80176e0:	685a      	ldr	r2, [r3, #4]
 80176e2:	2a00      	cmp	r2, #0
 80176e4:	dd30      	ble.n	8017748 <tract_calculate_reflections+0x6c>
 80176e6:	2200      	movs	r2, #0
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
 80176e8:	68d8      	ldr	r0, [r3, #12]
 80176ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80176ec:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80176f0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 80176f4:	3201      	adds	r2, #1
        tr->A[i] = tr->diameter[i] * tr->diameter[i];
 80176f6:	edd0 7a00 	vldr	s15, [r0]
 80176fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80176fe:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 8017702:	6859      	ldr	r1, [r3, #4]
 8017704:	4291      	cmp	r1, r2
 8017706:	dcef      	bgt.n	80176e8 <tract_calculate_reflections+0xc>
        /* Calculate area from diameter squared*/
    }

    for(i = 1; i < tr->n; i++) {
 8017708:	2901      	cmp	r1, #1
 801770a:	dd1d      	ble.n	8017748 <tract_calculate_reflections+0x6c>
 801770c:	2204      	movs	r2, #4
 801770e:	f04f 0c01 	mov.w	ip, #1
        tr->reflection[i] = tr->new_reflection[i];
        if(tr->A[i] == 0) {
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8017712:	f8df e0d0 	ldr.w	lr, [pc, #208]	; 80177e4 <tract_calculate_reflections+0x108>
        tr->reflection[i] = tr->new_reflection[i];
 8017716:	e9d3 1009 	ldrd	r1, r0, [r3, #36]	; 0x24
 801771a:	4410      	add	r0, r2
 801771c:	4411      	add	r1, r2
 801771e:	6800      	ldr	r0, [r0, #0]
 8017720:	6008      	str	r0, [r1, #0]
        if(tr->A[i] == 0) {
 8017722:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8017724:	4411      	add	r1, r2
 8017726:	edd1 7a00 	vldr	s15, [r1]
 801772a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017732:	d143      	bne.n	80177bc <tract_calculate_reflections+0xe0>
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 8017734:	6a99      	ldr	r1, [r3, #40]	; 0x28
    for(i = 1; i < tr->n; i++) {
 8017736:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] = 0.999f; /* to prevent bad behavior if 0 */
 801773a:	4411      	add	r1, r2
 801773c:	3204      	adds	r2, #4
 801773e:	f8c1 e000 	str.w	lr, [r1]
    for(i = 1; i < tr->n; i++) {
 8017742:	6859      	ldr	r1, [r3, #4]
 8017744:	4561      	cmp	r1, ip
 8017746:	dce6      	bgt.n	8017716 <tract_calculate_reflections+0x3a>
            tr->new_reflection[i] =
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
        }
    }

    tr->reflection_left = tr->new_reflection_left;
 8017748:	6fd9      	ldr	r1, [r3, #124]	; 0x7c
    tr->reflection_right = tr->new_reflection_right;
    tr->reflection_nose = tr->new_reflection_nose;

    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
    Lfloat invSum = 1.0f / sum;
 801774a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    tr->reflection_right = tr->new_reflection_right;
 801774e:	f8d3 c080 	ldr.w	ip, [r3, #128]	; 0x80
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8017752:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    tr->reflection_left = tr->new_reflection_left;
 8017756:	6719      	str	r1, [r3, #112]	; 0x70
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017758:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    tr->reflection_nose = tr->new_reflection_nose;
 801775a:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 801775e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
    tr->reflection_right = tr->new_reflection_right;
 8017760:	f8c3 c074 	str.w	ip, [r3, #116]	; 0x74
    tr->reflection_nose = tr->new_reflection_nose;
 8017764:	6799      	str	r1, [r3, #120]	; 0x78
    sum = tr->A[tr->nose_start] + tr->A[tr->nose_start + 1] + tr->noseA[0];
 8017766:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801776a:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801776c:	eddc 5a00 	vldr	s11, [ip]
 8017770:	edd1 7a00 	vldr	s15, [r1]
 8017774:	ed9c 7a01 	vldr	s14, [ip, #4]
 8017778:	ee75 7aa7 	vadd.f32	s15, s11, s15
 801777c:	ee77 7a87 	vadd.f32	s15, s15, s14
    Lfloat invSum = 1.0f / sum;
 8017780:	ee86 7a27 	vdiv.f32	s14, s12, s15
    tr->new_reflection_left = (Lfloat)(2.0f * tr->A[tr->nose_start] - sum) * invSum;
 8017784:	eeb0 6a67 	vmov.f32	s12, s15
 8017788:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 801778c:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017790:	ed83 6a1f 	vstr	s12, [r3, #124]	; 0x7c
    tr->new_reflection_right = (Lfloat)(2.0f * tr->A[tr->nose_start + 1] - sum) * invSum;
 8017794:	eeb0 6a67 	vmov.f32	s12, s15
 8017798:	eddc 5a01 	vldr	s11, [ip, #4]
 801779c:	ee95 6aa6 	vfnms.f32	s12, s11, s13
 80177a0:	ee26 6a07 	vmul.f32	s12, s12, s14
 80177a4:	ed83 6a20 	vstr	s12, [r3, #128]	; 0x80
    tr->new_reflection_nose = (Lfloat)(2.0f * tr->noseA[0] - sum) * invSum;
 80177a8:	ed91 6a00 	vldr	s12, [r1]
 80177ac:	eed6 7a26 	vfnms.f32	s15, s12, s13
 80177b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80177b4:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
}
 80177b8:	f85d fb04 	ldr.w	pc, [sp], #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80177bc:	ed11 7a01 	vldr	s14, [r1, #-4]
    for(i = 1; i < tr->n; i++) {
 80177c0:	f10c 0c01 	add.w	ip, ip, #1
            tr->new_reflection[i] =
 80177c4:	6a99      	ldr	r1, [r3, #40]	; 0x28
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80177c6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80177ca:	ee77 7a87 	vadd.f32	s15, s15, s14
            tr->new_reflection[i] =
 80177ce:	4411      	add	r1, r2
    for(i = 1; i < tr->n; i++) {
 80177d0:	3204      	adds	r2, #4
                (tr->A[i - 1] - tr->A[i]) / (tr->A[i - 1] + tr->A[i]);
 80177d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
            tr->new_reflection[i] =
 80177d6:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->n; i++) {
 80177da:	6859      	ldr	r1, [r3, #4]
 80177dc:	4561      	cmp	r1, ip
 80177de:	dc9a      	bgt.n	8017716 <tract_calculate_reflections+0x3a>
 80177e0:	e7b2      	b.n	8017748 <tract_calculate_reflections+0x6c>
 80177e2:	bf00      	nop
 80177e4:	3f7fbe77 	.word	0x3f7fbe77

080177e8 <tract_initToPool>:
{
 80177e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177ec:	ed2d 8b04 	vpush	{d8-d9}
 80177f0:	ee08 1a10 	vmov	s16, r1
	_tMempool* m = *mp;
 80177f4:	681b      	ldr	r3, [r3, #0]
{
 80177f6:	b082      	sub	sp, #8
 80177f8:	4605      	mov	r5, r0
    Lfloat n = numTractSections;
 80177fa:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 80177fe:	4619      	mov	r1, r3
 8017800:	20d4      	movs	r0, #212	; 0xd4
{
 8017802:	4617      	mov	r7, r2
	_tMempool* m = *mp;
 8017804:	9300      	str	r3, [sp, #0]
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017806:	f7fc feed 	bl	80145e4 <mpool_calloc>
    tr->nose_length = n*0.636363636363636f; //28
 801780a:	eddf 3acc 	vldr	s7, [pc, #816]	; 8017b3c <tract_initToPool+0x354>
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801780e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
 8017812:	ed9f 7acb 	vldr	s14, [pc, #812]	; 8017b40 <tract_initToPool+0x358>
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017816:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    tr->blade_start = n*0.227272727272727f;
 801781a:	eddf 7aca 	vldr	s15, [pc, #808]	; 8017b44 <tract_initToPool+0x35c>
    tr->nose_length = n*0.636363636363636f; //28
 801781e:	ee68 3a23 	vmul.f32	s7, s16, s7
    tr->tip_start = n*0.727272727272727f;
 8017822:	ee28 7a07 	vmul.f32	s14, s16, s14
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017826:	eddf 1ac8 	vldr	s3, [pc, #800]	; 8017b48 <tract_initToPool+0x360>
    tr->blade_start = n*0.227272727272727f;
 801782a:	ee68 7a27 	vmul.f32	s15, s16, s15
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801782e:	ed9f 5ac7 	vldr	s10, [pc, #796]	; 8017b4c <tract_initToPool+0x364>
    tr->nose_length = n*0.636363636363636f; //28
 8017832:	eefd 3ae3 	vcvt.s32.f32	s7, s7
    tr->lip_start = n*0.886363636363636f;
 8017836:	eddf 6ac6 	vldr	s13, [pc, #792]	; 8017b50 <tract_initToPool+0x368>
    tr->tip_start = n*0.727272727272727f;
 801783a:	eebd 7ac7 	vcvt.s32.f32	s14, s14
	tr->mempool = m;
 801783e:	9b00      	ldr	r3, [sp, #0]
    tr->blade_start = n*0.227272727272727f;
 8017840:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017844:	6028      	str	r0, [r5, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017846:	eeb8 2ae3 	vcvt.f32.s32	s4, s7
	tr->mempool = m;
 801784a:	6003      	str	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 801784c:	ee38 6a03 	vadd.f32	s12, s16, s6
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017850:	4604      	mov	r4, r0
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017852:	eeb8 4ac7 	vcvt.f32.s32	s8, s14
    tr->reflection_left = 0.0f;
 8017856:	2300      	movs	r3, #0
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017858:	eef8 4ae7 	vcvt.f32.s32	s9, s15
    tr->glottal_reflection = 0.75f;
 801785c:	f04f 5e7d 	mov.w	lr, #1061158912	; 0x3f400000
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017860:	ee36 6a42 	vsub.f32	s12, s12, s4
    tr->lip_reflection = -0.85f;
 8017864:	f8df c31c 	ldr.w	ip, [pc, #796]	; 8017b84 <tract_initToPool+0x39c>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017868:	eea8 4a61 	vfms.f32	s8, s16, s3
    tr->movement_speed = 200.0f;
 801786c:	4ab9      	ldr	r2, [pc, #740]	; (8017b54 <tract_initToPool+0x36c>)
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 801786e:	eee8 4a05 	vfma.f32	s9, s16, s10
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017872:	ed9f 5ab9 	vldr	s10, [pc, #740]	; 8017b58 <tract_initToPool+0x370>
    tr->lip_start = n*0.886363636363636f;
 8017876:	ee68 6a26 	vmul.f32	s13, s16, s13
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801787a:	00be      	lsls	r6, r7, #2
    tr->n = n; //44
 801787c:	eefd 2ac8 	vcvt.s32.f32	s5, s16
	LEAF* leaf = m->leaf;
 8017880:	9900      	ldr	r1, [sp, #0]
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017882:	ee68 5a25 	vmul.f32	s11, s16, s11
	_tract* tr = *t = (_tract*) mpool_calloc(sizeof(_tract), m);
 8017886:	9001      	str	r0, [sp, #4]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017888:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->last_obstruction = -1;
 801788c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    tr->lip_start = n*0.886363636363636f;
 8017890:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->velum_target = 0.01f;
 8017894:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8017b88 <tract_initToPool+0x3a0>
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017898:	ee28 5a05 	vmul.f32	s10, s16, s10
	LEAF* leaf = m->leaf;
 801789c:	684d      	ldr	r5, [r1, #4]
	tr->turbuluencePointDiameter[0] = 1.5f;
 801789e:	eef7 9a08 	vmov.f32	s19, #120	; 0x3fc00000  1.5
    tr->nose_start = (n - tr->nose_length) + 1; //17
 80178a2:	ed84 6a0f 	vstr	s12, [r4, #60]	; 0x3c
    Lfloat invN = 1.0f / tr->n;
 80178a6:	eef8 1ae2 	vcvt.f32.s32	s3, s5
    tr->glottal_reflection = 0.75f;
 80178aa:	f8c4 e08c 	str.w	lr, [r4, #140]	; 0x8c
    tr->lip_reflection = -0.85f;
 80178ae:	f8c4 c090 	str.w	ip, [r4, #144]	; 0x90
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 80178b2:	ee83 9a02 	vdiv.f32	s18, s6, s4
    tr->movement_speed = 200.0f;
 80178b6:	f8c4 209c 	str.w	r2, [r4, #156]	; 0x9c
    tr->lip_start = n*0.886363636363636f;
 80178ba:	edc4 6a12 	vstr	s13, [r4, #72]	; 0x48
    tr->n = n; //44
 80178be:	edc4 2a01 	vstr	s5, [r4, #4]
    tr->nose_length = n*0.636363636363636f; //28
 80178c2:	edc4 3a0e 	vstr	s7, [r4, #56]	; 0x38
    tr->tip_start = n*0.727272727272727f;
 80178c6:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    Lfloat invN = 1.0f / tr->n;
 80178ca:	eec3 8a21 	vdiv.f32	s17, s6, s3
    tr->blade_start = n*0.227272727272727f;
 80178ce:	edc4 7a11 	vstr	s15, [r4, #68]	; 0x44
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 80178d2:	ed84 4a13 	vstr	s8, [r4, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 80178d6:	edc4 4a14 	vstr	s9, [r4, #80]	; 0x50
	tr->turbuluencePointPosition[0] = n* 0.45f;
 80178da:	ed84 5a2f 	vstr	s10, [r4, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 80178de:	edc4 5a30 	vstr	s11, [r4, #192]	; 0xc0
    tr->reflection_left = 0.0f;
 80178e2:	6723      	str	r3, [r4, #112]	; 0x70
    tr->reflection_right = 0.0f;
 80178e4:	6763      	str	r3, [r4, #116]	; 0x74
    tr->reflection_nose = 0.0f;
 80178e6:	67a3      	str	r3, [r4, #120]	; 0x78
    tr->new_reflection_left = 0.0f;
 80178e8:	67e3      	str	r3, [r4, #124]	; 0x7c
    tr->new_reflection_right= 0.0f;
 80178ea:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    tr->new_reflection_nose = 0.0f;
 80178ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    tr->lip_output = 0.0f;
 80178f2:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
    tr->nose_output = 0.0f;
 80178f6:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    tr->maxNumTractSections = maxNumTractSections;
 80178fa:	60a7      	str	r7, [r4, #8]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80178fc:	1d37      	adds	r7, r6, #4
    tr->last_obstruction = -1;
 80178fe:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017902:	4630      	mov	r0, r6
    tr->velum_target = 0.01f;
 8017904:	f8c4 8088 	str.w	r8, [r4, #136]	; 0x88
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017908:	edc4 9a31 	vstr	s19, [r4, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
 801790c:	edc4 9a32 	vstr	s19, [r4, #200]	; 0xc8
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017910:	f7fc fe68 	bl	80145e4 <mpool_calloc>
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017914:	9900      	ldr	r1, [sp, #0]
    tr->diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017916:	60e0      	str	r0, [r4, #12]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017918:	4630      	mov	r0, r6
 801791a:	f7fc fe63 	bl	80145e4 <mpool_calloc>
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801791e:	9900      	ldr	r1, [sp, #0]
    tr->rest_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017920:	6120      	str	r0, [r4, #16]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017922:	4630      	mov	r0, r6
 8017924:	f7fc fe5e 	bl	80145e4 <mpool_calloc>
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017928:	9900      	ldr	r1, [sp, #0]
    tr->target_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801792a:	6160      	str	r0, [r4, #20]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801792c:	4630      	mov	r0, r6
 801792e:	f7fc fe59 	bl	80145e4 <mpool_calloc>
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017932:	9900      	ldr	r1, [sp, #0]
    tr->new_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017934:	61a0      	str	r0, [r4, #24]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017936:	4630      	mov	r0, r6
 8017938:	f7fc fe54 	bl	80145e4 <mpool_calloc>
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801793c:	9900      	ldr	r1, [sp, #0]
    tr->L = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801793e:	6220      	str	r0, [r4, #32]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017940:	4630      	mov	r0, r6
 8017942:	f7fc fe4f 	bl	80145e4 <mpool_calloc>
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017946:	9900      	ldr	r1, [sp, #0]
    tr->R = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017948:	61e0      	str	r0, [r4, #28]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801794a:	4638      	mov	r0, r7
 801794c:	f7fc fe4a 	bl	80145e4 <mpool_calloc>
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017950:	9900      	ldr	r1, [sp, #0]
    tr->reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017952:	6260      	str	r0, [r4, #36]	; 0x24
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017954:	4638      	mov	r0, r7
 8017956:	f7fc fe45 	bl	80145e4 <mpool_calloc>
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801795a:	9900      	ldr	r1, [sp, #0]
    tr->new_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801795c:	62a0      	str	r0, [r4, #40]	; 0x28
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801795e:	4638      	mov	r0, r7
 8017960:	f7fc fe40 	bl	80145e4 <mpool_calloc>
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017964:	9900      	ldr	r1, [sp, #0]
    tr->junction_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017966:	62e0      	str	r0, [r4, #44]	; 0x2c
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017968:	4638      	mov	r0, r7
 801796a:	f7fc fe3b 	bl	80145e4 <mpool_calloc>
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801796e:	9900      	ldr	r1, [sp, #0]
    tr->junction_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017970:	6320      	str	r0, [r4, #48]	; 0x30
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017972:	4630      	mov	r0, r6
 8017974:	f7fc fe36 	bl	80145e4 <mpool_calloc>
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017978:	9900      	ldr	r1, [sp, #0]
    tr->A = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801797a:	6360      	str	r0, [r4, #52]	; 0x34
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801797c:	4630      	mov	r0, r6
 801797e:	f7fc fe31 	bl	80145e4 <mpool_calloc>
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017982:	9900      	ldr	r1, [sp, #0]
    tr->noseL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017984:	6560      	str	r0, [r4, #84]	; 0x54
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 8017986:	4630      	mov	r0, r6
 8017988:	f7fc fe2c 	bl	80145e4 <mpool_calloc>
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801798c:	9900      	ldr	r1, [sp, #0]
    tr->noseR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 801798e:	65a0      	str	r0, [r4, #88]	; 0x58
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017990:	4638      	mov	r0, r7
 8017992:	f7fc fe27 	bl	80145e4 <mpool_calloc>
 8017996:	4603      	mov	r3, r0
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 8017998:	9900      	ldr	r1, [sp, #0]
 801799a:	4638      	mov	r0, r7
    tr->nose_junc_outL = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801799c:	65e3      	str	r3, [r4, #92]	; 0x5c
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 801799e:	f7fc fe21 	bl	80145e4 <mpool_calloc>
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179a2:	9900      	ldr	r1, [sp, #0]
    tr->nose_junc_outR = (Lfloat*) mpool_calloc(sizeof(Lfloat) * (maxNumTractSections + 1), m);
 80179a4:	6620      	str	r0, [r4, #96]	; 0x60
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179a6:	4630      	mov	r0, r6
 80179a8:	f7fc fe1c 	bl	80145e4 <mpool_calloc>
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179ac:	9900      	ldr	r1, [sp, #0]
    tr->nose_diameter = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179ae:	66a0      	str	r0, [r4, #104]	; 0x68
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179b0:	4630      	mov	r0, r6
 80179b2:	f7fc fe17 	bl	80145e4 <mpool_calloc>
 80179b6:	4603      	mov	r3, r0
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179b8:	9900      	ldr	r1, [sp, #0]
 80179ba:	4630      	mov	r0, r6
    tr->nose_reflection = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179bc:	6663      	str	r3, [r4, #100]	; 0x64
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179be:	f7fc fe11 	bl	80145e4 <mpool_calloc>
    for(i = 0; i < tr->n; i++) {
 80179c2:	6863      	ldr	r3, [r4, #4]
    tr->noseA = (Lfloat*) mpool_calloc(sizeof(Lfloat) * maxNumTractSections, m);
 80179c4:	66e0      	str	r0, [r4, #108]	; 0x6c
    for(i = 0; i < tr->n; i++) {
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	dd43      	ble.n	8017a52 <tract_initToPool+0x26a>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80179ca:	eebe 4a00 	vmov.f32	s8, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
 80179ce:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80179d0:	eddf 4a62 	vldr	s9, [pc, #392]	; 8017b5c <tract_initToPool+0x374>
            diameter = 0.6f;
 80179d4:	ed9f 5a62 	vldr	s10, [pc, #392]	; 8017b60 <tract_initToPool+0x378>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80179d8:	eddf 5a62 	vldr	s11, [pc, #392]	; 8017b64 <tract_initToPool+0x37c>
            diameter = 1.1f;
 80179dc:	eddf 3a62 	vldr	s7, [pc, #392]	; 8017b68 <tract_initToPool+0x380>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80179e0:	ee07 3a90 	vmov	s15, r3
 80179e4:	eef0 6a44 	vmov.f32	s13, s8
            diameter = 0.6f;
 80179e8:	eeb0 7a45 	vmov.f32	s14, s10
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80179ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80179f0:	ee27 6aa4 	vmul.f32	s12, s15, s9
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80179f4:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 80179f8:	ee26 6a08 	vmul.f32	s12, s12, s16
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 80179fc:	ee67 7a88 	vmul.f32	s15, s15, s16
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017a00:	eee8 6a86 	vfma.f32	s13, s17, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017a04:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8017a08:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017a0c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017a10:	ee16 3a90 	vmov	r3, s13
 8017a14:	4293      	cmp	r3, r2
 8017a16:	dc04      	bgt.n	8017a22 <tract_initToPool+0x23a>
            diameter = 1.1f;
 8017a18:	ee17 3a90 	vmov	r3, s15
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	fe33 7aa9 	vselgt.f32	s14, s7, s19
            tr->new_diameter[i] = diameter;
 8017a22:	69a3      	ldr	r3, [r4, #24]
 8017a24:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017a28:	ed83 7a00 	vstr	s14, [r3]
            tr->target_diameter[i] =
 8017a2c:	6963      	ldr	r3, [r4, #20]
 8017a2e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017a32:	ed83 7a00 	vstr	s14, [r3]
            tr->rest_diameter[i] =
 8017a36:	6923      	ldr	r3, [r4, #16]
 8017a38:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8017a3c:	ed83 7a00 	vstr	s14, [r3]
        tr->diameter[i] =
 8017a40:	68e3      	ldr	r3, [r4, #12]
 8017a42:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8017a46:	3201      	adds	r2, #1
        tr->diameter[i] =
 8017a48:	ed83 7a00 	vstr	s14, [r3]
    for(i = 0; i < tr->n; i++) {
 8017a4c:	6863      	ldr	r3, [r4, #4]
 8017a4e:	4293      	cmp	r3, r2
 8017a50:	dcc6      	bgt.n	80179e0 <tract_initToPool+0x1f8>
	for(i = 0; i < tr->nose_length; i++) {
 8017a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017a54:	2b00      	cmp	r3, #0
 8017a56:	dd2f      	ble.n	8017ab8 <tract_initToPool+0x2d0>
		if(d < 1.0f) {
 8017a58:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
	for(i = 0; i < tr->nose_length; i++) {
 8017a5c:	2300      	movs	r3, #0
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017a5e:	eeb0 3a00 	vmov.f32	s6, #0	; 0x40000000  2.0
		diameter = MIN(diameter, 1.9f);
 8017a62:	ed9f 4a42 	vldr	s8, [pc, #264]	; 8017b6c <tract_initToPool+0x384>
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017a66:	eef7 3a08 	vmov.f32	s7, #120	; 0x3fc00000  1.5
			diameter = 0.4f + 1.6f * d;
 8017a6a:	eddf 4a41 	vldr	s9, [pc, #260]	; 8017b70 <tract_initToPool+0x388>
 8017a6e:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8017b74 <tract_initToPool+0x38c>
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017a72:	ee07 3a90 	vmov	s15, r3
			diameter = 0.4f + 1.6f * d;
 8017a76:	eef0 6a45 	vmov.f32	s13, s10
		tr->nose_diameter[i] = diameter;
 8017a7a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017a80:	ee67 7a89 	vmul.f32	s15, s15, s18
 8017a84:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
 8017a88:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017a8c:	eef0 7a46 	vmov.f32	s15, s12
 8017a90:	ee73 5a47 	vsub.f32	s11, s6, s14
		if(d < 1.0f) {
 8017a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
 8017a98:	eee7 6a24 	vfma.f32	s13, s14, s9
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017a9c:	eee5 7aa3 	vfma.f32	s15, s11, s7
		if(d < 1.0f) {
 8017aa0:	f140 80e0 	bpl.w	8017c64 <tract_initToPool+0x47c>
		tr->nose_diameter[i] = diameter;
 8017aa4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 8017aa8:	fec6 6ac4 	vminnm.f32	s13, s13, s8
	for(i = 0; i < tr->nose_length; i++) {
 8017aac:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 8017aae:	edc2 6a00 	vstr	s13, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8017ab2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017ab4:	429a      	cmp	r2, r3
 8017ab6:	dcdc      	bgt.n	8017a72 <tract_initToPool+0x28a>
	tSVF_initToPool(&tr->fricativeNoiseFilt[0], SVFTypeBandpass, 1010.0f, 0.5f, &m);
 8017ab8:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8017abc:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8017ac0:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8017b78 <tract_initToPool+0x390>
 8017ac4:	2102      	movs	r1, #2
 8017ac6:	466a      	mov	r2, sp
 8017ac8:	f7f9 fefc 	bl	80118c4 <tSVF_initToPool>
	tSVF_initToPool(&tr->fricativeNoiseFilt[1], SVFTypeBandpass, 990.0f, 0.5f, &m);
 8017acc:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8017ad0:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8017ad4:	466a      	mov	r2, sp
 8017ad6:	ed9f 0a29 	vldr	s0, [pc, #164]	; 8017b7c <tract_initToPool+0x394>
 8017ada:	2102      	movs	r1, #2
 8017adc:	f7f9 fef2 	bl	80118c4 <tSVF_initToPool>
	tSVF_initToPool(&tr->aspirationNoiseFilt, SVFTypeBandpass, 500.0f, 0.5f, &m);
 8017ae0:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8017ae4:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8017ae8:	466a      	mov	r2, sp
 8017aea:	ed9f 0a25 	vldr	s0, [pc, #148]	; 8017b80 <tract_initToPool+0x398>
 8017aee:	2102      	movs	r1, #2
 8017af0:	f7f9 fee8 	bl	80118c4 <tSVF_initToPool>
	tNoise_initToPool(&tr->whiteNoise, WhiteNoise, &m);
 8017af4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
 8017af8:	466a      	mov	r2, sp
 8017afa:	2100      	movs	r1, #0
 8017afc:	f7fd fa32 	bl	8014f64 <tNoise_initToPool>
    tract_calculate_reflections(&tr);
 8017b00:	a801      	add	r0, sp, #4
 8017b02:	f7ff fdeb 	bl	80176dc <tract_calculate_reflections>

}

void tract_calculate_nose_reflections(tract* const t)
{
	_tract* tr = *t;
 8017b06:	9c01      	ldr	r4, [sp, #4]
	int i;

    for(i = 0; i < tr->nose_length; i++) {
 8017b08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	dd59      	ble.n	8017bc2 <tract_initToPool+0x3da>
 8017b0e:	2300      	movs	r3, #0
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8017b10:	e9d4 121a 	ldrd	r1, r2, [r4, #104]	; 0x68
 8017b14:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8017b18:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for(i = 0; i < tr->nose_length; i++) {
 8017b1c:	3301      	adds	r3, #1
        tr->noseA[i] = tr->nose_diameter[i] * tr->nose_diameter[i];
 8017b1e:	edd1 7a00 	vldr	s15, [r1]
 8017b22:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017b26:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->nose_length; i++) {
 8017b2a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017b2c:	4293      	cmp	r3, r2
 8017b2e:	dbef      	blt.n	8017b10 <tract_initToPool+0x328>
    }

    for(i = 1; i < tr->nose_length; i++) {
 8017b30:	2a01      	cmp	r2, #1
 8017b32:	dd46      	ble.n	8017bc2 <tract_initToPool+0x3da>
 8017b34:	2000      	movs	r0, #0
 8017b36:	2301      	movs	r3, #1
 8017b38:	e02a      	b.n	8017b90 <tract_initToPool+0x3a8>
 8017b3a:	bf00      	nop
 8017b3c:	3f22e8ba 	.word	0x3f22e8ba
 8017b40:	3f3a2e8c 	.word	0x3f3a2e8c
 8017b44:	3e68ba2f 	.word	0x3e68ba2f
 8017b48:	3d8ba2e9 	.word	0x3d8ba2e9
 8017b4c:	3d3a2e8c 	.word	0x3d3a2e8c
 8017b50:	3f62e8ba 	.word	0x3f62e8ba
 8017b54:	43480000 	.word	0x43480000
 8017b58:	3ee66666 	.word	0x3ee66666
 8017b5c:	3e22e8ba 	.word	0x3e22e8ba
 8017b60:	3f19999a 	.word	0x3f19999a
 8017b64:	3e8ba2e9 	.word	0x3e8ba2e9
 8017b68:	3f8ccccd 	.word	0x3f8ccccd
 8017b6c:	3ff33333 	.word	0x3ff33333
 8017b70:	3fcccccd 	.word	0x3fcccccd
 8017b74:	3ecccccd 	.word	0x3ecccccd
 8017b78:	447c8000 	.word	0x447c8000
 8017b7c:	44778000 	.word	0x44778000
 8017b80:	43fa0000 	.word	0x43fa0000
 8017b84:	bf59999a 	.word	0xbf59999a
 8017b88:	3c23d70a 	.word	0x3c23d70a
 8017b8c:	42800000 	.word	0x42800000
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017b90:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8017b92:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8017b94:	eb02 0c00 	add.w	ip, r2, r0
 8017b98:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017b9c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    for(i = 1; i < tr->nose_length; i++) {
 8017ba0:	3301      	adds	r3, #1
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017ba2:	ed92 7a00 	vldr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 8017ba6:	3004      	adds	r0, #4
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017ba8:	eddc 7a00 	vldr	s15, [ip]
 8017bac:	ee77 6ac7 	vsub.f32	s13, s15, s14
            (tr->noseA[i-1] + tr->noseA[i]);
 8017bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
        tr->nose_reflection[i] = (tr->noseA[i - 1] - tr->noseA[i]) /
 8017bb4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8017bb8:	ed81 7a00 	vstr	s14, [r1]
    for(i = 1; i < tr->nose_length; i++) {
 8017bbc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017bbe:	4293      	cmp	r3, r2
 8017bc0:	dbe6      	blt.n	8017b90 <tract_initToPool+0x3a8>
    tr->nose_diameter[0] = tr->velum_target;
 8017bc2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    tr->T = 1.0f / leaf->sampleRate;
 8017bc4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    tr->nose_diameter[0] = tr->velum_target;
 8017bc8:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017bcc:	201c      	movs	r0, #28
    tr->block_time = 64.0f / leaf->sampleRate;
 8017bce:	ed1f 6a11 	vldr	s12, [pc, #-68]	; 8017b8c <tract_initToPool+0x3a4>
        tr->tpool->pool[i]->is_free = 1;
 8017bd2:	2701      	movs	r7, #1
    tr->nose_diameter[0] = tr->velum_target;
 8017bd4:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8017bd6:	2600      	movs	r6, #0
    tr->block_time = 64.0f / leaf->sampleRate;
 8017bd8:	ed95 7a00 	vldr	s14, [r5]
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017bdc:	9900      	ldr	r1, [sp, #0]
    tr->block_time = 64.0f / leaf->sampleRate;
 8017bde:	eec6 7a07 	vdiv.f32	s15, s12, s14
 8017be2:	edc4 7a2a 	vstr	s15, [r4, #168]	; 0xa8
    tr->T = 1.0f / leaf->sampleRate;
 8017be6:	ed95 7a00 	vldr	s14, [r5]
 8017bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017bee:	edc4 7a34 	vstr	s15, [r4, #208]	; 0xd0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017bf2:	f7fc fc93 	bl	801451c <mpool_alloc>
    tr->tpool->size = 0;
 8017bf6:	2300      	movs	r3, #0
    tr->tpool = (_transient_pool*) mpool_alloc(sizeof(_transient_pool), m);
 8017bf8:	f8c4 00cc 	str.w	r0, [r4, #204]	; 0xcc
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017bfc:	461d      	mov	r5, r3
    tr->tpool->size = 0;
 8017bfe:	6143      	str	r3, [r0, #20]
    tr->tpool->next_free = 0;
 8017c00:	f8d4 20cc 	ldr.w	r2, [r4, #204]	; 0xcc
 8017c04:	6193      	str	r3, [r2, #24]
    	tr->tpool->pool[i] = (_transient*) mpool_alloc(sizeof(_transient), m);
 8017c06:	f8d4 80cc 	ldr.w	r8, [r4, #204]	; 0xcc
 8017c0a:	2020      	movs	r0, #32
 8017c0c:	9900      	ldr	r1, [sp, #0]
 8017c0e:	f7fc fc85 	bl	801451c <mpool_alloc>
 8017c12:	f848 0025 	str.w	r0, [r8, r5, lsl #2]
        tr->tpool->pool[i]->is_free = 1;
 8017c16:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
        tr->tpool->pool[i]->position = 0;
 8017c1a:	2200      	movs	r2, #0
        tr->tpool->pool[i]->is_free = 1;
 8017c1c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017c20:	751f      	strb	r7, [r3, #20]
        tr->tpool->pool[i]->id = i;
 8017c22:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017c26:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017c2a:	619d      	str	r5, [r3, #24]
        tr->tpool->pool[i]->position = 0;
 8017c2c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017c30:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017c34:	601a      	str	r2, [r3, #0]
        tr->tpool->pool[i]->time_alive = 0;
 8017c36:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017c3a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017c3e:	605e      	str	r6, [r3, #4]
        tr->tpool->pool[i]->strength = 0;
 8017c40:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017c44:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8017c48:	60de      	str	r6, [r3, #12]
        tr->tpool->pool[i]->exponent = 0;
 8017c4a:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 8017c4e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017c52:	3501      	adds	r5, #1
 8017c54:	2d04      	cmp	r5, #4
        tr->tpool->pool[i]->exponent = 0;
 8017c56:	611e      	str	r6, [r3, #16]
    for(i = 0; i < MAX_TRANSIENTS; i++) {
 8017c58:	d1d5      	bne.n	8017c06 <tract_initToPool+0x41e>
}
 8017c5a:	b002      	add	sp, #8
 8017c5c:	ecbd 8b04 	vpop	{d8-d9}
 8017c60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tr->nose_diameter[i] = diameter;
 8017c64:	eb02 0283 	add.w	r2, r2, r3, lsl #2
		diameter = MIN(diameter, 1.9f);
 8017c68:	fec7 7ac4 	vminnm.f32	s15, s15, s8
	for(i = 0; i < tr->nose_length; i++) {
 8017c6c:	3301      	adds	r3, #1
		tr->nose_diameter[i] = diameter;
 8017c6e:	edc2 7a00 	vstr	s15, [r2]
	for(i = 0; i < tr->nose_length; i++) {
 8017c72:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8017c74:	429a      	cmp	r2, r3
 8017c76:	f73f aefc 	bgt.w	8017a72 <tract_initToPool+0x28a>
 8017c7a:	e71d      	b.n	8017ab8 <tract_initToPool+0x2d0>

08017c7c <tract_newLength>:
	_tract* tr = *t;
 8017c7c:	6803      	ldr	r3, [r0, #0]
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017c7e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
    tr->tip_start = n*0.727272727272727f;
 8017c82:	eddf 6a86 	vldr	s13, [pc, #536]	; 8017e9c <tract_newLength+0x220>
    tr->reflection_left = 0.0f;
 8017c86:	2000      	movs	r0, #0
    if (numTractSections < tr->maxNumTractSections)
 8017c88:	689a      	ldr	r2, [r3, #8]
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017c8a:	eef7 2a08 	vmov.f32	s5, #120	; 0x3fc00000  1.5
    tr->blade_start = n*0.227272727272727f;
 8017c8e:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8017ea0 <tract_newLength+0x224>
    tr->glottal_reflection = 0.75f;
 8017c92:	f04f 5c7d 	mov.w	ip, #1061158912	; 0x3f400000
    if (numTractSections < tr->maxNumTractSections)
 8017c96:	428a      	cmp	r2, r1
    tr->lip_start = n*0.886363636363636f;
 8017c98:	ed9f 6a82 	vldr	s12, [pc, #520]	; 8017ea4 <tract_newLength+0x228>
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017c9c:	ed9f 1a82 	vldr	s2, [pc, #520]	; 8017ea8 <tract_newLength+0x22c>
    	n = numTractSections;
 8017ca0:	bfcc      	ite	gt
 8017ca2:	ee07 1a90 	vmovgt	s15, r1
    	n = tr->maxNumTractSections;
 8017ca6:	ee07 2a90 	vmovle	s15, r2
    tr->reflection_left = 0.0f;
 8017caa:	6718      	str	r0, [r3, #112]	; 0x70
    	n = tr->maxNumTractSections;
 8017cac:	eef8 5ae7 	vcvt.f32.s32	s11, s15
    tr->nose_length = n*0.636363636363636f; //28
 8017cb0:	eddf 7a7e 	vldr	s15, [pc, #504]	; 8017eac <tract_newLength+0x230>
    tr->reflection_right = 0.0f;
 8017cb4:	6758      	str	r0, [r3, #116]	; 0x74
    tr->reflection_nose = 0.0f;
 8017cb6:	6798      	str	r0, [r3, #120]	; 0x78
    tr->nose_length = n*0.636363636363636f; //28
 8017cb8:	ee65 7aa7 	vmul.f32	s15, s11, s15
    tr->new_reflection_left = 0.0f;
 8017cbc:	67d8      	str	r0, [r3, #124]	; 0x7c
    tr->tip_start = n*0.727272727272727f;
 8017cbe:	ee65 6aa6 	vmul.f32	s13, s11, s13
    tr->new_reflection_right= 0.0f;
 8017cc2:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
    tr->blade_start = n*0.227272727272727f;
 8017cc6:	ee25 7a87 	vmul.f32	s14, s11, s14
    tr->new_reflection_nose = 0.0f;
 8017cca:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
    tr->nose_length = n*0.636363636363636f; //28
 8017cce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    tr->lip_output = 0.0f;
 8017cd2:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
    tr->n = n; //44
 8017cd6:	eefd 4ae5 	vcvt.s32.f32	s9, s11
    tr->nose_output = 0.0f;
 8017cda:	f8c3 00a4 	str.w	r0, [r3, #164]	; 0xa4
    tr->tip_start = n*0.727272727272727f;
 8017cde:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    tr->lip_reflection = -0.85f;
 8017ce2:	4873      	ldr	r0, [pc, #460]	; (8017eb0 <tract_newLength+0x234>)
    tr->nose_length = n*0.636363636363636f; //28
 8017ce4:	ee17 2a90 	vmov	r2, s15
    tr->blade_start = n*0.227272727272727f;
 8017ce8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    tr->n = n; //44
 8017cec:	ee14 1a90 	vmov	r1, s9
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017cf0:	ee35 5aa1 	vadd.f32	s10, s11, s3
 8017cf4:	ee04 2a90 	vmov	s9, r2
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017cf8:	eeb8 3ae6 	vcvt.f32.s32	s6, s13
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017cfc:	eef8 3ac7 	vcvt.f32.s32	s7, s14
 8017d00:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8017eb4 <tract_newLength+0x238>
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017d04:	eeb8 2ae4 	vcvt.f32.s32	s4, s9
    tr->lip_reflection = -0.85f;
 8017d08:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017d0c:	eea5 3ac1 	vfms.f32	s6, s11, s2
    tr->last_obstruction = -1;
 8017d10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017d14:	eee5 3aa7 	vfma.f32	s7, s11, s15
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017d18:	ed9f 4a67 	vldr	s8, [pc, #412]	; 8017eb8 <tract_newLength+0x23c>
    tr->lip_start = n*0.886363636363636f;
 8017d1c:	ee25 6a86 	vmul.f32	s12, s11, s12
    Lfloat invN = 1.0f / tr->n;
 8017d20:	ee07 1a90 	vmov	s15, r1
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017d24:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    tr->last_obstruction = -1;
 8017d28:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017d2c:	ee35 5a42 	vsub.f32	s10, s10, s4
    tr->movement_speed = 200.0f;
 8017d30:	4862      	ldr	r0, [pc, #392]	; (8017ebc <tract_newLength+0x240>)
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017d32:	ee25 4a84 	vmul.f32	s8, s11, s8
    for(i = 0; i < tr->n; i++) {
 8017d36:	2900      	cmp	r1, #0
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017d38:	ee65 4aa4 	vmul.f32	s9, s11, s9
    tr->movement_speed = 200.0f;
 8017d3c:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017d40:	eebd 5ac5 	vcvt.s32.f32	s10, s10
    tr->velum_target = 0.01f;
 8017d44:	485e      	ldr	r0, [pc, #376]	; (8017ec0 <tract_newLength+0x244>)
    Lfloat invN = 1.0f / tr->n;
 8017d46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    tr->n = n; //44
 8017d4a:	6059      	str	r1, [r3, #4]
    tr->lip_start = n*0.886363636363636f;
 8017d4c:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    tr->nose_length = n*0.636363636363636f; //28
 8017d50:	639a      	str	r2, [r3, #56]	; 0x38
    tr->nose_start = (n - tr->nose_length) + 1; //17
 8017d52:	ed83 5a0f 	vstr	s10, [r3, #60]	; 0x3c
    tr->tip_start = n*0.727272727272727f;
 8017d56:	edc3 6a10 	vstr	s13, [r3, #64]	; 0x40
    Lfloat invN = 1.0f / tr->n;
 8017d5a:	ee81 5aa7 	vdiv.f32	s10, s3, s15
    tr->blade_start = n*0.227272727272727f;
 8017d5e:	ed83 7a11 	vstr	s14, [r3, #68]	; 0x44
	tr->tongueUpperBound = (tr->tip_start-(n*0.068181818181818f));
 8017d62:	ed83 3a13 	vstr	s6, [r3, #76]	; 0x4c
	tr->tongueLowerBound = (tr->blade_start+(n*0.045454545454545f));
 8017d66:	edc3 3a14 	vstr	s7, [r3, #80]	; 0x50
    tr->lip_start = n*0.886363636363636f;
 8017d6a:	ed83 6a12 	vstr	s12, [r3, #72]	; 0x48
	tr->turbuluencePointPosition[0] = n* 0.45f;
 8017d6e:	ed83 4a2f 	vstr	s8, [r3, #188]	; 0xbc
	tr->turbuluencePointPosition[1] = n* 0.5f;
 8017d72:	edc3 4a30 	vstr	s9, [r3, #192]	; 0xc0
	tr->turbuluencePointDiameter[0] = 1.5f;
 8017d76:	edc3 2a31 	vstr	s5, [r3, #196]	; 0xc4
	tr->turbuluencePointDiameter[1] = 1.5f;
 8017d7a:	edc3 2a32 	vstr	s5, [r3, #200]	; 0xc8
    tr->glottal_reflection = 0.75f;
 8017d7e:	f8c3 c08c 	str.w	ip, [r3, #140]	; 0x8c
    tr->velum_target = 0.01f;
 8017d82:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
    for(i = 0; i < tr->n; i++) {
 8017d86:	dd48      	ble.n	8017e1a <tract_newLength+0x19e>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017d88:	eebe 3a00 	vmov.f32	s6, #224	; 0xbf000000 -0.5
    for(i = 0; i < tr->n; i++) {
 8017d8c:	2200      	movs	r2, #0
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017d8e:	eddf 3a4d 	vldr	s7, [pc, #308]	; 8017ec4 <tract_newLength+0x248>
            diameter = 0.6f;
 8017d92:	ed9f 4a4d 	vldr	s8, [pc, #308]	; 8017ec8 <tract_newLength+0x24c>
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017d96:	eddf 4a4d 	vldr	s9, [pc, #308]	; 8017ecc <tract_newLength+0x250>
            diameter = 1.1f;
 8017d9a:	ed9f 2a4d 	vldr	s4, [pc, #308]	; 8017ed0 <tract_newLength+0x254>
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017d9e:	ee27 6aa3 	vmul.f32	s12, s15, s7
 8017da2:	eef0 6a43 	vmov.f32	s13, s6
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017da6:	ee67 7aa4 	vmul.f32	s15, s15, s9
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017daa:	ee26 6a25 	vmul.f32	s12, s12, s11
            diameter = 0.6f;
 8017dae:	eeb0 7a44 	vmov.f32	s14, s8
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017db2:	ee67 7aa5 	vmul.f32	s15, s15, s11
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017db6:	eee5 6a06 	vfma.f32	s13, s10, s12
        } else if( i < (int)((n*0.272727272727273f) * (Lfloat)tr->n * invN)) { //was 12
 8017dba:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017dbe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
        if(i < (int)((n*0.159090909090909f) * ((Lfloat)tr->n * invN) - 0.5f)) { //was 7
 8017dc2:	eefd 6ae6 	vcvt.s32.f32	s13, s13
 8017dc6:	ee16 1a90 	vmov	r1, s13
 8017dca:	4291      	cmp	r1, r2
 8017dcc:	dc04      	bgt.n	8017dd8 <tract_newLength+0x15c>
            diameter = 1.1f;
 8017dce:	ee17 1a90 	vmov	r1, s15
 8017dd2:	4291      	cmp	r1, r2
 8017dd4:	fe32 7a22 	vselgt.f32	s14, s4, s5
            tr->new_diameter[i] = diameter;
 8017dd8:	6999      	ldr	r1, [r3, #24]
 8017dda:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017dde:	ed81 7a00 	vstr	s14, [r1]
            tr->target_diameter[i] =
 8017de2:	6959      	ldr	r1, [r3, #20]
 8017de4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017de8:	ed81 7a00 	vstr	s14, [r1]
            tr->rest_diameter[i] =
 8017dec:	6919      	ldr	r1, [r3, #16]
 8017dee:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8017df2:	ed81 7a00 	vstr	s14, [r1]
        tr->diameter[i] =
 8017df6:	68d9      	ldr	r1, [r3, #12]
 8017df8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    for(i = 0; i < tr->n; i++) {
 8017dfc:	3201      	adds	r2, #1
        tr->diameter[i] =
 8017dfe:	ed81 7a00 	vstr	s14, [r1]
    for(i = 0; i < tr->n; i++) {
 8017e02:	6859      	ldr	r1, [r3, #4]
 8017e04:	ee07 1a90 	vmov	s15, r1
 8017e08:	4291      	cmp	r1, r2
 8017e0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e0e:	dcc6      	bgt.n	8017d9e <tract_newLength+0x122>
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8017e10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017e12:	ee07 2a90 	vmov	s15, r2
 8017e16:	eeb8 2ae7 	vcvt.f32.s32	s4, s15
 8017e1a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	for(i = 0; i < tr->nose_length; i++) {
 8017e1e:	2a00      	cmp	r2, #0
    Lfloat invNoseLength = 1.0f / tr->nose_length;
 8017e20:	ee87 5a82 	vdiv.f32	s10, s15, s4
	for(i = 0; i < tr->nose_length; i++) {
 8017e24:	dd39      	ble.n	8017e9a <tract_newLength+0x21e>
 8017e26:	2200      	movs	r2, #0
		diameter = MIN(diameter, 1.9f);
 8017e28:	eddf 3a2a 	vldr	s7, [pc, #168]	; 8017ed4 <tract_newLength+0x258>
			diameter = 0.4f + 1.6f * d;
 8017e2c:	ed9f 4a2a 	vldr	s8, [pc, #168]	; 8017ed8 <tract_newLength+0x25c>
 8017e30:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8017edc <tract_newLength+0x260>
		if(d < 1.0f) {
 8017e34:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017e38:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8017e3c:	eeb7 3a08 	vmov.f32	s6, #120	; 0x3fc00000  1.5
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017e40:	ee07 2a90 	vmov	s15, r2
			diameter = 0.4f + 1.6f * d;
 8017e44:	eef0 6a64 	vmov.f32	s13, s9
		tr->nose_diameter[i] = diameter;
 8017e48:	6e99      	ldr	r1, [r3, #104]	; 0x68
		d = 2.0f * ((Lfloat)i * invNoseLength);
 8017e4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017e4e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8017e52:	ee37 7aa7 	vadd.f32	s14, s15, s15
		if(d < 1.0f) {
 8017e56:	eef4 7ac6 	vcmpe.f32	s15, s12
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017e5a:	eef0 7a46 	vmov.f32	s15, s12
 8017e5e:	ee72 5ac7 	vsub.f32	s11, s5, s14
		if(d < 1.0f) {
 8017e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			diameter = 0.4f + 1.6f * d;
 8017e66:	eee7 6a04 	vfma.f32	s13, s14, s8
			diameter = 0.5f + 1.5f*(2.0f-d);
 8017e6a:	eee5 7a83 	vfma.f32	s15, s11, s6
		if(d < 1.0f) {
 8017e6e:	d50a      	bpl.n	8017e86 <tract_newLength+0x20a>
		tr->nose_diameter[i] = diameter;
 8017e70:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
 8017e74:	fec6 6ae3 	vminnm.f32	s13, s13, s7
	for(i = 0; i < tr->nose_length; i++) {
 8017e78:	3201      	adds	r2, #1
		tr->nose_diameter[i] = diameter;
 8017e7a:	edc1 6a00 	vstr	s13, [r1]
	for(i = 0; i < tr->nose_length; i++) {
 8017e7e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8017e80:	4291      	cmp	r1, r2
 8017e82:	dcdd      	bgt.n	8017e40 <tract_newLength+0x1c4>
 8017e84:	4770      	bx	lr
		tr->nose_diameter[i] = diameter;
 8017e86:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		diameter = MIN(diameter, 1.9f);
 8017e8a:	fec7 7ae3 	vminnm.f32	s15, s15, s7
	for(i = 0; i < tr->nose_length; i++) {
 8017e8e:	3201      	adds	r2, #1
		tr->nose_diameter[i] = diameter;
 8017e90:	edc1 7a00 	vstr	s15, [r1]
	for(i = 0; i < tr->nose_length; i++) {
 8017e94:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8017e96:	428a      	cmp	r2, r1
 8017e98:	dbd2      	blt.n	8017e40 <tract_newLength+0x1c4>
}
 8017e9a:	4770      	bx	lr
 8017e9c:	3f3a2e8c 	.word	0x3f3a2e8c
 8017ea0:	3e68ba2f 	.word	0x3e68ba2f
 8017ea4:	3f62e8ba 	.word	0x3f62e8ba
 8017ea8:	3d8ba2e9 	.word	0x3d8ba2e9
 8017eac:	3f22e8ba 	.word	0x3f22e8ba
 8017eb0:	bf59999a 	.word	0xbf59999a
 8017eb4:	3d3a2e8c 	.word	0x3d3a2e8c
 8017eb8:	3ee66666 	.word	0x3ee66666
 8017ebc:	43480000 	.word	0x43480000
 8017ec0:	3c23d70a 	.word	0x3c23d70a
 8017ec4:	3e22e8ba 	.word	0x3e22e8ba
 8017ec8:	3f19999a 	.word	0x3f19999a
 8017ecc:	3e8ba2e9 	.word	0x3e8ba2e9
 8017ed0:	3f8ccccd 	.word	0x3f8ccccd
 8017ed4:	3ff33333 	.word	0x3ff33333
 8017ed8:	3fcccccd 	.word	0x3fcccccd
 8017edc:	3ecccccd 	.word	0x3ecccccd

08017ee0 <tract_reshape>:
{
 8017ee0:	b430      	push	{r4, r5}
	_tract* tr = *t;
 8017ee2:	6802      	ldr	r2, [r0, #0]
    for(i = 0; i < tr->n; i++) {
 8017ee4:	6853      	ldr	r3, [r2, #4]
    amount = tr->block_time * tr->movement_speed;
 8017ee6:	ed92 5a2a 	vldr	s10, [r2, #168]	; 0xa8
 8017eea:	edd2 7a27 	vldr	s15, [r2, #156]	; 0x9c
    for(i = 0; i < tr->n; i++) {
 8017eee:	2b00      	cmp	r3, #0
    amount = tr->block_time * tr->movement_speed;
 8017ef0:	ee25 5a27 	vmul.f32	s10, s10, s15
    for(i = 0; i < tr->n; i++) {
 8017ef4:	f340 80ab 	ble.w	801804e <tract_reshape+0x16e>
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017ef8:	eddf 2a5f 	vldr	s5, [pc, #380]	; 8018078 <tract_reshape+0x198>
 8017efc:	ee75 3a05 	vadd.f32	s7, s10, s10
    current_obstruction = -1;
 8017f00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    for(i = 0; i < tr->n; i++) {
 8017f04:	2300      	movs	r3, #0
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017f06:	ee25 4a22 	vmul.f32	s8, s10, s5
        if(diameter < 0.001f) current_obstruction = i;
 8017f0a:	eddf 4a5c 	vldr	s9, [pc, #368]	; 801807c <tract_reshape+0x19c>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017f0e:	ed9f 3a5c 	vldr	s6, [pc, #368]	; 8018080 <tract_reshape+0x1a0>
        diameter = tr->diameter[i];
 8017f12:	68d1      	ldr	r1, [r2, #12]
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017f14:	eef0 7a44 	vmov.f32	s15, s8
        if(i < tr->nose_start) slow_return = 0.6f;
 8017f18:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
        diameter = tr->diameter[i];
 8017f1a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
        target_diameter = tr->target_diameter[i];
 8017f1e:	6955      	ldr	r5, [r2, #20]
        diameter = tr->diameter[i];
 8017f20:	ed91 7a00 	vldr	s14, [r1]
        target_diameter = tr->target_diameter[i];
 8017f24:	eb05 0c83 	add.w	ip, r5, r3, lsl #2
        if(diameter < 0.001f) current_obstruction = i;
 8017f28:	eeb4 7a64 	vcmp.f32	s14, s9
        target_diameter = tr->target_diameter[i];
 8017f2c:	ed9c 6a00 	vldr	s12, [ip]
        if(diameter < 0.001f) current_obstruction = i;
 8017f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f34:	bf48      	it	mi
 8017f36:	461c      	movmi	r4, r3
        if(i < tr->nose_start) slow_return = 0.6f;
 8017f38:	4298      	cmp	r0, r3
 8017f3a:	dc16      	bgt.n	8017f6a <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017f3c:	1a1d      	subs	r5, r3, r0
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8017f3e:	eef0 7a45 	vmov.f32	s15, s10
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017f42:	ee05 5a90 	vmov	s11, r5
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8017f46:	6c15      	ldr	r5, [r2, #64]	; 0x40
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017f48:	1a28      	subs	r0, r5, r0
 8017f4a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8017f4e:	42ab      	cmp	r3, r5
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017f50:	ee06 0a90 	vmov	s13, r0
 8017f54:	ee65 5a83 	vmul.f32	s11, s11, s6
 8017f58:	eef8 6ae6 	vcvt.f32.s32	s13, s13
        else if(i >= tr->tip_start) slow_return = 1.0f;
 8017f5c:	da05      	bge.n	8017f6a <tract_reshape+0x8a>
                0.6f+0.4f*(i - tr->nose_start)/(tr->tip_start - tr->nose_start);
 8017f5e:	eec5 7aa6 	vdiv.f32	s15, s11, s13
            slow_return =
 8017f62:	ee77 7aa2 	vadd.f32	s15, s15, s5
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017f66:	ee67 7a85 	vmul.f32	s15, s15, s10

Lfloat move_towards(Lfloat current, Lfloat target,
        Lfloat amt_up, Lfloat amt_down)
{
    Lfloat tmp;
    if(current < target) {
 8017f6a:	eeb4 7ac6 	vcmpe.f32	s14, s12
        tmp = current + amt_up;
 8017f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
        return MIN(tmp, target);
    } else {
        tmp = current - amt_down;
 8017f72:	ee77 6a63 	vsub.f32	s13, s14, s7
    if(current < target) {
 8017f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        return MIN(tmp, target);
 8017f7a:	fec7 7ac6 	vminnm.f32	s15, s15, s12
        return MAX(tmp, target);
 8017f7e:	fec6 6a86 	vmaxnm.f32	s13, s13, s12
    if(current < target) {
 8017f82:	d52d      	bpl.n	8017fe0 <tract_reshape+0x100>
    for(i = 0; i < tr->n; i++) {
 8017f84:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017f86:	edc1 7a00 	vstr	s15, [r1]
    for(i = 0; i < tr->n; i++) {
 8017f8a:	6851      	ldr	r1, [r2, #4]
 8017f8c:	428b      	cmp	r3, r1
 8017f8e:	dbc0      	blt.n	8017f12 <tract_reshape+0x32>
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
 8017f90:	f1a4 31ff 	sub.w	r1, r4, #4294967295	; 0xffffffff
 8017f94:	fab1 f181 	clz	r1, r1
 8017f98:	0949      	lsrs	r1, r1, #5
 8017f9a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	db00      	blt.n	8017fa4 <tract_reshape+0xc4>
 8017fa2:	bb59      	cbnz	r1, 8017ffc <tract_reshape+0x11c>
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8017fa4:	6e93      	ldr	r3, [r2, #104]	; 0x68
 8017fa6:	edd2 7a22 	vldr	s15, [r2, #136]	; 0x88
    tr->last_obstruction = current_obstruction;
 8017faa:	f8c2 4094 	str.w	r4, [r2, #148]	; 0x94
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8017fae:	ed93 7a00 	vldr	s14, [r3]
    if(current < target) {
 8017fb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8017fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fba:	d518      	bpl.n	8017fee <tract_reshape+0x10e>
        tmp = current + amt_up;
 8017fbc:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8017fc0:	eea5 7a26 	vfma.f32	s14, s10, s13
        return MIN(tmp, target);
 8017fc4:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    tr->nose_diameter[0] = move_towards(tr->nose_diameter[0], tr->velum_target,
 8017fc8:	edc3 7a00 	vstr	s15, [r3]
    tr->noseA[0] = tr->nose_diameter[0] * tr->nose_diameter[0];
 8017fcc:	e9d2 131a 	ldrd	r1, r3, [r2, #104]	; 0x68
 8017fd0:	edd1 7a00 	vldr	s15, [r1]
 8017fd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017fd8:	edc3 7a00 	vstr	s15, [r3]
}
 8017fdc:	bc30      	pop	{r4, r5}
 8017fde:	4770      	bx	lr
    for(i = 0; i < tr->n; i++) {
 8017fe0:	3301      	adds	r3, #1
        tr->diameter[i] = move_towards(diameter, target_diameter,
 8017fe2:	edc1 6a00 	vstr	s13, [r1]
    for(i = 0; i < tr->n; i++) {
 8017fe6:	6851      	ldr	r1, [r2, #4]
 8017fe8:	4299      	cmp	r1, r3
 8017fea:	dc92      	bgt.n	8017f12 <tract_reshape+0x32>
 8017fec:	e7d0      	b.n	8017f90 <tract_reshape+0xb0>
        tmp = current - amt_down;
 8017fee:	eddf 6a25 	vldr	s13, [pc, #148]	; 8018084 <tract_reshape+0x1a4>
 8017ff2:	eea5 7a66 	vfms.f32	s14, s10, s13
        return MAX(tmp, target);
 8017ff6:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8017ffa:	e7e5      	b.n	8017fc8 <tract_reshape+0xe8>
            tr->noseA[0] < 0.05f) {
 8017ffc:	6ed1      	ldr	r1, [r2, #108]	; 0x6c
    if(tr->last_obstruction > -1 && current_obstruction == -1 &&
 8017ffe:	eddf 7a22 	vldr	s15, [pc, #136]	; 8018088 <tract_reshape+0x1a8>
 8018002:	ed91 7a00 	vldr	s14, [r1]
 8018006:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801800e:	d5c9      	bpl.n	8017fa4 <tract_reshape+0xc4>
	_transient_pool* pool = *po;
 8018010:	f8d2 10cc 	ldr.w	r1, [r2, #204]	; 0xcc
    if(pool->size == MAX_TRANSIENTS) return 0;
 8018014:	6948      	ldr	r0, [r1, #20]
 8018016:	2804      	cmp	r0, #4
 8018018:	d0c4      	beq.n	8017fa4 <tract_reshape+0xc4>
    free_id = pool->next_free;
 801801a:	6988      	ldr	r0, [r1, #24]
    if(free_id == -1) {
 801801c:	1c45      	adds	r5, r0, #1
 801801e:	d01a      	beq.n	8018056 <tract_reshape+0x176>
    t = pool->pool[free_id];
 8018020:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    t->next = pool->root;
 8018024:	690d      	ldr	r5, [r1, #16]
 8018026:	61c5      	str	r5, [r0, #28]
    pool->size++;
 8018028:	694d      	ldr	r5, [r1, #20]
    pool->root = t;
 801802a:	6108      	str	r0, [r1, #16]
    pool->size++;
 801802c:	3501      	adds	r5, #1
 801802e:	614d      	str	r5, [r1, #20]
    t->is_free = 0;
 8018030:	2500      	movs	r5, #0
    t->position = position;
 8018032:	6003      	str	r3, [r0, #0]
    pool->next_free = -1;
 8018034:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    t->is_free = 0;
 8018038:	7505      	strb	r5, [r0, #20]
    t->time_alive = 0.0f;
 801803a:	2500      	movs	r5, #0
 801803c:	6045      	str	r5, [r0, #4]
    t->lifetime = 0.2f;
 801803e:	4d13      	ldr	r5, [pc, #76]	; (801808c <tract_reshape+0x1ac>)
 8018040:	6085      	str	r5, [r0, #8]
    t->strength = 0.3f;
 8018042:	4d13      	ldr	r5, [pc, #76]	; (8018090 <tract_reshape+0x1b0>)
 8018044:	60c5      	str	r5, [r0, #12]
    t->exponent = 200.0f;
 8018046:	4d13      	ldr	r5, [pc, #76]	; (8018094 <tract_reshape+0x1b4>)
 8018048:	6105      	str	r5, [r0, #16]
    pool->next_free = -1;
 801804a:	618b      	str	r3, [r1, #24]
    return 0;
 801804c:	e7aa      	b.n	8017fa4 <tract_reshape+0xc4>
    for(i = 0; i < tr->n; i++) {
 801804e:	2101      	movs	r1, #1
    current_obstruction = -1;
 8018050:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8018054:	e7a1      	b.n	8017f9a <tract_reshape+0xba>
            if(pool->pool[i]->is_free) {
 8018056:	6808      	ldr	r0, [r1, #0]
 8018058:	7d05      	ldrb	r5, [r0, #20]
 801805a:	2d00      	cmp	r5, #0
 801805c:	d1e2      	bne.n	8018024 <tract_reshape+0x144>
 801805e:	6848      	ldr	r0, [r1, #4]
 8018060:	7d05      	ldrb	r5, [r0, #20]
 8018062:	2d00      	cmp	r5, #0
 8018064:	d1de      	bne.n	8018024 <tract_reshape+0x144>
 8018066:	6888      	ldr	r0, [r1, #8]
 8018068:	7d05      	ldrb	r5, [r0, #20]
 801806a:	2d00      	cmp	r5, #0
 801806c:	d1da      	bne.n	8018024 <tract_reshape+0x144>
 801806e:	68c8      	ldr	r0, [r1, #12]
 8018070:	7d05      	ldrb	r5, [r0, #20]
 8018072:	2d00      	cmp	r5, #0
 8018074:	d096      	beq.n	8017fa4 <tract_reshape+0xc4>
 8018076:	e7d5      	b.n	8018024 <tract_reshape+0x144>
 8018078:	3f19999a 	.word	0x3f19999a
 801807c:	3a83126f 	.word	0x3a83126f
 8018080:	3ecccccd 	.word	0x3ecccccd
 8018084:	3dcccccd 	.word	0x3dcccccd
 8018088:	3d4ccccd 	.word	0x3d4ccccd
 801808c:	3e4ccccd 	.word	0x3e4ccccd
 8018090:	3e99999a 	.word	0x3e99999a
 8018094:	43480000 	.word	0x43480000

08018098 <tract_addTurbulenceNoiseAtPosition>:
{
 8018098:	b538      	push	{r3, r4, r5, lr}
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 801809a:	eddf 7a36 	vldr	s15, [pc, #216]	; 8018174 <tract_addTurbulenceNoiseAtPosition+0xdc>
 801809e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
	_tract* tr = *t;
 80180a2:	6805      	ldr	r5, [r0, #0]
{
 80180a4:	ed2d 8b06 	vpush	{d8-d10}
 80180a8:	eef0 8a60 	vmov.f32	s17, s1
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80180ac:	ee77 0ac1 	vsub.f32	s1, s15, s2
{
 80180b0:	eeb0 9a41 	vmov.f32	s18, s2
	int i = (int)floorf(position);
 80180b4:	fefb 7a68 	vrintm.f32	s15, s17
 80180b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80180bc:	ee60 0a87 	vmul.f32	s1, s1, s14
{
 80180c0:	eeb0 8a40 	vmov.f32	s16, s0
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80180c4:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8018178 <tract_addTurbulenceNoiseAtPosition+0xe0>
 80180c8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	int i = (int)floorf(position);
 80180cc:	ee17 4a90 	vmov	r4, s15
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80180d0:	f7fb ff22 	bl	8013f18 <LEAF_clip>
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 80180d4:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
	Lfloat delta = position - i;
 80180d8:	ee07 4a90 	vmov	s15, r4
	Lfloat thinness0 = LEAF_clip(0.0f, 8.0f * (0.09f - diameter),  1.0f);
 80180dc:	eef0 9a40 	vmov.f32	s19, s0
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 80180e0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80180e4:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8018178 <tract_addTurbulenceNoiseAtPosition+0xe0>
 80180e8:	ee69 0a20 	vmul.f32	s1, s18, s1
	Lfloat delta = position - i;
 80180ec:	eeb8 aae7 	vcvt.f32.s32	s20, s15
	Lfloat openness = LEAF_clip(0.0f, 30.0f * (diameter), 1.0f);
 80180f0:	f7fb ff12 	bl	8013f18 <LEAF_clip>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 80180f4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if ((i + 1) < tr->n) {
 80180f8:	686b      	ldr	r3, [r5, #4]
 80180fa:	1c62      	adds	r2, r4, #1
 80180fc:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018100:	429a      	cmp	r2, r3
 8018102:	ee28 8a29 	vmul.f32	s16, s16, s19
 8018106:	ee28 0a00 	vmul.f32	s0, s16, s0
 801810a:	da18      	bge.n	801813e <tract_addTurbulenceNoiseAtPosition+0xa6>
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 801810c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
		tr->R[i + 1] += noise0;
 8018110:	69eb      	ldr	r3, [r5, #28]
 8018112:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 8018116:	ee77 7ae8 	vsub.f32	s15, s15, s17
		tr->R[i + 1] += noise0;
 801811a:	ed93 7a00 	vldr	s14, [r3]
	Lfloat noise0 = turbulenceNoise * (1.0f - delta) * thinness0 * openness * 0.5f;
 801811e:	ee77 7a8a 	vadd.f32	s15, s15, s20
		tr->R[i + 1] += noise0;
 8018122:	eea7 7a80 	vfma.f32	s14, s15, s0
 8018126:	ed83 7a00 	vstr	s14, [r3]
		tr->L[i + 1] += noise0;
 801812a:	6a2b      	ldr	r3, [r5, #32]
 801812c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018130:	ed93 7a00 	vldr	s14, [r3]
 8018134:	eea7 7a80 	vfma.f32	s14, s15, s0
 8018138:	ed83 7a00 	vstr	s14, [r3]
	if ((i + 2) < tr->n) {
 801813c:	686b      	ldr	r3, [r5, #4]
 801813e:	3402      	adds	r4, #2
 8018140:	429c      	cmp	r4, r3
 8018142:	da13      	bge.n	801816c <tract_addTurbulenceNoiseAtPosition+0xd4>
		tr->R[i + 2] += noise1;
 8018144:	69eb      	ldr	r3, [r5, #28]
	Lfloat delta = position - i;
 8018146:	ee78 8aca 	vsub.f32	s17, s17, s20
		tr->R[i + 2] += noise1;
 801814a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 801814e:	edd3 7a00 	vldr	s15, [r3]
 8018152:	eee8 7a80 	vfma.f32	s15, s17, s0
 8018156:	edc3 7a00 	vstr	s15, [r3]
		tr->L[i + 2] += noise1;
 801815a:	6a2b      	ldr	r3, [r5, #32]
 801815c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018160:	edd3 7a00 	vldr	s15, [r3]
 8018164:	eee8 7a80 	vfma.f32	s15, s17, s0
 8018168:	edc3 7a00 	vstr	s15, [r3]
 }
 801816c:	ecbd 8b06 	vpop	{d8-d10}
 8018170:	bd38      	pop	{r3, r4, r5, pc}
 8018172:	bf00      	nop
 8018174:	3db851ec 	.word	0x3db851ec
 8018178:	00000000 	.word	0x00000000

0801817c <tract_compute>:
{
 801817c:	b530      	push	{r4, r5, lr}
 801817e:	ed2d 8b04 	vpush	{d8-d9}
    Lfloat oneMinusLambda = 1.0f - lambda;
 8018182:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
	_tract* tr = *t;
 8018186:	6804      	ldr	r4, [r0, #0]
{
 8018188:	b083      	sub	sp, #12
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 801818a:	eddf 9ab2 	vldr	s19, [pc, #712]	; 8018454 <tract_compute+0x2d8>
 801818e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
{
 8018192:	eeb0 8a60 	vmov.f32	s16, s1
    Lfloat oneMinusLambda = 1.0f - lambda;
 8018196:	ee78 8ae0 	vsub.f32	s17, s17, s1
	_tract* tr = *t;
 801819a:	9401      	str	r4, [sp, #4]
{
 801819c:	eeb0 9a40 	vmov.f32	s18, s0
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 80181a0:	f7fc fef4 	bl	8014f8c <tNoise_tick>
 80181a4:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 80181a8:	ee20 0a29 	vmul.f32	s0, s0, s19
 80181ac:	f7f9 fc16 	bl	80119dc <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 80181b0:	ed94 1a31 	vldr	s2, [r4, #196]	; 0xc4
 80181b4:	edd4 0a2f 	vldr	s1, [r4, #188]	; 0xbc
 80181b8:	a801      	add	r0, sp, #4
 80181ba:	f7ff ff6d 	bl	8018098 <tract_addTurbulenceNoiseAtPosition>
		Lfloat turbulenceNoise = tSVF_tick(&tr->fricativeNoiseFilt[i], tNoise_tick(&tr->whiteNoise) * 0.28f);
 80181be:	9d01      	ldr	r5, [sp, #4]
 80181c0:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
 80181c4:	f7fc fee2 	bl	8014f8c <tNoise_tick>
 80181c8:	f105 00b0 	add.w	r0, r5, #176	; 0xb0
 80181cc:	ee20 0a29 	vmul.f32	s0, s0, s19
 80181d0:	f7f9 fc04 	bl	80119dc <tSVF_tick>
		tract_addTurbulenceNoiseAtPosition(&tr, turbulenceNoise, tr->turbuluencePointPosition[i], tr->turbuluencePointDiameter[i]);
 80181d4:	ed95 1a32 	vldr	s2, [r5, #200]	; 0xc8
 80181d8:	edd5 0a30 	vldr	s1, [r5, #192]	; 0xc0
 80181dc:	a801      	add	r0, sp, #4
 80181de:	f7ff ff5b 	bl	8018098 <tract_addTurbulenceNoiseAtPosition>
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 80181e2:	6a23      	ldr	r3, [r4, #32]
 80181e4:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
 80181e8:	ed93 7a00 	vldr	s14, [r3]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 80181ec:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    tr->junction_outR[0] = tr->L[0] * tr->glottal_reflection + in;
 80181f0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80181f2:	eea7 9a27 	vfma.f32	s18, s14, s15
 80181f6:	ed82 9a00 	vstr	s18, [r2]
    tr->junction_outL[tr->n] = tr->R[tr->n - 1] * tr->lip_reflection;
 80181fa:	6862      	ldr	r2, [r4, #4]
 80181fc:	69e1      	ldr	r1, [r4, #28]
 80181fe:	4413      	add	r3, r2
 8018200:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8018204:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018206:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801820a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801820e:	edd1 7a00 	vldr	s15, [r1]
 8018212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018216:	edc2 7a01 	vstr	s15, [r2, #4]
    for(i = 1; i < tr->n; i++) {
 801821a:	6863      	ldr	r3, [r4, #4]
 801821c:	2b01      	cmp	r3, #1
 801821e:	dd2f      	ble.n	8018280 <tract_compute+0x104>
 8018220:	2304      	movs	r3, #4
 8018222:	f04f 0c01 	mov.w	ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8018226:	6aa5      	ldr	r5, [r4, #40]	; 0x28
    for(i = 1; i < tr->n; i++) {
 8018228:	f10c 0c01 	add.w	ip, ip, #1
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 801822c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 801822e:	eb05 0e03 	add.w	lr, r5, r3
 8018232:	4418      	add	r0, r3
 8018234:	edde 7a00 	vldr	s15, [lr]
 8018238:	ed90 6a00 	vldr	s12, [r0]
 801823c:	ee68 7a27 	vmul.f32	s15, s16, s15
        w = r * (tr->R[i - 1] + tr->L[i]);
 8018240:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
        r = tr->reflection[i] * oneMinusLambda + tr->new_reflection[i] * lambda;
 8018244:	eee6 7a28 	vfma.f32	s15, s12, s17
        w = r * (tr->R[i - 1] + tr->L[i]);
 8018248:	4419      	add	r1, r3
 801824a:	441a      	add	r2, r3
 801824c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8018250:	ed92 7a00 	vldr	s14, [r2]
        tr->junction_outR[i] = tr->R[i - 1] - w;
 8018254:	6b22      	ldr	r2, [r4, #48]	; 0x30
        w = r * (tr->R[i - 1] + tr->L[i]);
 8018256:	ee36 7a87 	vadd.f32	s14, s13, s14
        tr->junction_outR[i] = tr->R[i - 1] - w;
 801825a:	441a      	add	r2, r3
 801825c:	eee7 6a67 	vfms.f32	s13, s14, s15
 8018260:	edc2 6a00 	vstr	s13, [r2]
        tr->junction_outL[i] = tr->L[i] + w;
 8018264:	6a21      	ldr	r1, [r4, #32]
 8018266:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8018268:	4419      	add	r1, r3
 801826a:	441a      	add	r2, r3
 801826c:	3304      	adds	r3, #4
 801826e:	edd1 6a00 	vldr	s13, [r1]
 8018272:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018276:	edc2 6a00 	vstr	s13, [r2]
    for(i = 1; i < tr->n; i++) {
 801827a:	6862      	ldr	r2, [r4, #4]
 801827c:	4562      	cmp	r2, ip
 801827e:	dcd2      	bgt.n	8018226 <tract_compute+0xaa>
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018280:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8018282:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8018286:	ed94 7a1c 	vldr	s14, [r4, #112]	; 0x70
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 801828a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801828e:	4413      	add	r3, r2
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 8018290:	edd4 7a1f 	vldr	s15, [r4, #124]	; 0x7c
 8018294:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 8018298:	6d62      	ldr	r2, [r4, #84]	; 0x54
 801829a:	009b      	lsls	r3, r3, #2
 801829c:	6a20      	ldr	r0, [r4, #32]
 801829e:	edd2 5a00 	vldr	s11, [r2]
    r = tr->new_reflection_left * oneMinusLambda + tr->reflection_left*lambda;
 80182a2:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outL[i] = r*tr->R[i-1] + (1.0f+r)*(tr->noseL[0]+tr->L[i]);
 80182a6:	1d1a      	adds	r2, r3, #4
 80182a8:	69e5      	ldr	r5, [r4, #28]
 80182aa:	4410      	add	r0, r2
 80182ac:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80182ae:	441d      	add	r5, r3
 80182b0:	edd0 7a00 	vldr	s15, [r0]
 80182b4:	4411      	add	r1, r2
 80182b6:	ed95 6a00 	vldr	s12, [r5]
 80182ba:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80182be:	ee77 5a26 	vadd.f32	s11, s14, s13
 80182c2:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80182c6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80182ca:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 80182ce:	ed94 7a1d 	vldr	s14, [r4, #116]	; 0x74
 80182d2:	edd4 7a20 	vldr	s15, [r4, #128]	; 0x80
 80182d6:	ee28 7a07 	vmul.f32	s14, s16, s14
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 80182da:	6a20      	ldr	r0, [r4, #32]
 80182dc:	69e1      	ldr	r1, [r4, #28]
 80182de:	4410      	add	r0, r2
    r = tr->new_reflection_right * oneMinusLambda + tr->reflection_right * lambda;
 80182e0:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->junction_outR[i] = r*tr->L[i] + (1.0f+r)*(tr->R[i-1]+tr->noseL[0]);
 80182e4:	4419      	add	r1, r3
 80182e6:	ed90 6a00 	vldr	s12, [r0]
 80182ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80182ec:	edd1 7a00 	vldr	s15, [r1]
 80182f0:	ed90 5a00 	vldr	s10, [r0]
 80182f4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80182f6:	ee77 5a26 	vadd.f32	s11, s14, s13
 80182fa:	ee77 7a85 	vadd.f32	s15, s15, s10
 80182fe:	4411      	add	r1, r2
 8018300:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8018304:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018308:	edc1 7a00 	vstr	s15, [r1]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 801830c:	ed94 7a1e 	vldr	s14, [r4, #120]	; 0x78
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8018310:	6d61      	ldr	r1, [r4, #84]	; 0x54
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8018312:	ee28 7a07 	vmul.f32	s14, s16, s14
 8018316:	edd4 7a21 	vldr	s15, [r4, #132]	; 0x84
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 801831a:	ed91 6a00 	vldr	s12, [r1]
 801831e:	6a21      	ldr	r1, [r4, #32]
    r = tr->new_reflection_nose * oneMinusLambda + tr->reflection_nose * lambda;
 8018320:	eea7 7aa8 	vfma.f32	s14, s15, s17
    tr->nose_junc_outR[0] = r * tr->noseL[0]+(1.0f+r)*(tr->L[i]+tr->R[i-1]);
 8018324:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8018326:	4411      	add	r1, r2
 8018328:	69e2      	ldr	r2, [r4, #28]
 801832a:	441a      	add	r2, r3
 801832c:	edd1 7a00 	vldr	s15, [r1]
 8018330:	edd2 5a00 	vldr	s11, [r2]
 8018334:	ee77 6a26 	vadd.f32	s13, s14, s13
 8018338:	ee77 7aa5 	vadd.f32	s15, s15, s11
 801833c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018340:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018344:	edc0 7a00 	vstr	s15, [r0]
    for(i = 0; i < tr->n; i++) {
 8018348:	6862      	ldr	r2, [r4, #4]
 801834a:	2a00      	cmp	r2, #0
 801834c:	dd1d      	ble.n	801838a <tract_compute+0x20e>
 801834e:	2300      	movs	r3, #0
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8018350:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8018458 <tract_compute+0x2dc>
    for(i = 0; i < tr->n; i++) {
 8018354:	4618      	mov	r0, r3
        tr->R[i] = tr->junction_outR[i]*0.999f;
 8018356:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8018358:	469c      	mov	ip, r3
 801835a:	69e2      	ldr	r2, [r4, #28]
    for(i = 0; i < tr->n; i++) {
 801835c:	3001      	adds	r0, #1
        tr->R[i] = tr->junction_outR[i]*0.999f;
 801835e:	4419      	add	r1, r3
 8018360:	441a      	add	r2, r3
 8018362:	3304      	adds	r3, #4
 8018364:	edd1 7a00 	vldr	s15, [r1]
 8018368:	ee67 7a87 	vmul.f32	s15, s15, s14
 801836c:	edc2 7a00 	vstr	s15, [r2]
        tr->L[i] = tr->junction_outL[i + 1]*0.999f;
 8018370:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8018372:	6a22      	ldr	r2, [r4, #32]
 8018374:	4419      	add	r1, r3
 8018376:	4462      	add	r2, ip
 8018378:	edd1 7a00 	vldr	s15, [r1]
 801837c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8018380:	edc2 7a00 	vstr	s15, [r2]
    for(i = 0; i < tr->n; i++) {
 8018384:	6862      	ldr	r2, [r4, #4]
 8018386:	4282      	cmp	r2, r0
 8018388:	dce5      	bgt.n	8018356 <tract_compute+0x1da>
    tr->lip_output = tr->R[tr->n - 1];
 801838a:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801838e:	69e0      	ldr	r0, [r4, #28]
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8018390:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    tr->lip_output = tr->R[tr->n - 1];
 8018392:	441a      	add	r2, r3
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 8018394:	ed94 7a24 	vldr	s14, [r4, #144]	; 0x90
 8018398:	440b      	add	r3, r1
    tr->nose_junc_outL[tr->nose_length] =
 801839a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
    tr->lip_output = tr->R[tr->n - 1];
 801839c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    tr->nose_junc_outL[tr->nose_length] =
 80183a0:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    tr->lip_output = tr->R[tr->n - 1];
 80183a4:	6802      	ldr	r2, [r0, #0]
 80183a6:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
        tr->noseR[tr->nose_length-1] * tr->lip_reflection;
 80183aa:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80183ac:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80183b0:	edd2 7a00 	vldr	s15, [r2]
 80183b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    tr->nose_junc_outL[tr->nose_length] =
 80183b8:	edc1 7a01 	vstr	s15, [r1, #4]
    for(i = 1; i < tr->nose_length; i++) {
 80183bc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80183be:	2a01      	cmp	r2, #1
 80183c0:	dd27      	ble.n	8018412 <tract_compute+0x296>
 80183c2:	2304      	movs	r3, #4
 80183c4:	f04f 0c01 	mov.w	ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80183c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
    for(i = 1; i < tr->nose_length; i++) {
 80183ca:	f10c 0c01 	add.w	ip, ip, #1
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80183ce:	6da5      	ldr	r5, [r4, #88]	; 0x58
 80183d0:	4418      	add	r0, r3
 80183d2:	eb05 0e03 	add.w	lr, r5, r3
 80183d6:	edd0 7a00 	vldr	s15, [r0]
 80183da:	ed1e 7a01 	vldr	s14, [lr, #-4]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80183de:	e9d4 2118 	ldrd	r2, r1, [r4, #96]	; 0x60
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80183e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80183e6:	4419      	add	r1, r3
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80183e8:	441a      	add	r2, r3
        w = tr->nose_reflection[i] * (tr->noseR[i-1] + tr->noseL[i]);
 80183ea:	edd1 6a00 	vldr	s13, [r1]
        tr->nose_junc_outR[i] = tr->noseR[i - 1] - w;
 80183ee:	eea6 7ae7 	vfms.f32	s14, s13, s15
 80183f2:	ed82 7a00 	vstr	s14, [r2]
        tr->nose_junc_outL[i] = tr->noseL[i] + w;
 80183f6:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80183f8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80183fa:	4419      	add	r1, r3
 80183fc:	441a      	add	r2, r3
 80183fe:	3304      	adds	r3, #4
 8018400:	ed91 7a00 	vldr	s14, [r1]
 8018404:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018408:	ed82 7a00 	vstr	s14, [r2]
    for(i = 1; i < tr->nose_length; i++) {
 801840c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801840e:	4562      	cmp	r2, ip
 8018410:	dcda      	bgt.n	80183c8 <tract_compute+0x24c>
    for(i = 0; i < tr->nose_length; i++) {
 8018412:	2a00      	cmp	r2, #0
 8018414:	dd13      	ble.n	801843e <tract_compute+0x2c2>
 8018416:	2300      	movs	r3, #0
 8018418:	4618      	mov	r0, r3
        tr->noseR[i] = tr->nose_junc_outR[i];
 801841a:	6e21      	ldr	r1, [r4, #96]	; 0x60
 801841c:	469c      	mov	ip, r3
 801841e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    for(i = 0; i < tr->nose_length; i++) {
 8018420:	3001      	adds	r0, #1
        tr->noseR[i] = tr->nose_junc_outR[i];
 8018422:	4419      	add	r1, r3
 8018424:	441a      	add	r2, r3
 8018426:	3304      	adds	r3, #4
 8018428:	6809      	ldr	r1, [r1, #0]
 801842a:	6011      	str	r1, [r2, #0]
        tr->noseL[i] = tr->nose_junc_outL[i + 1];
 801842c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801842e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8018430:	4419      	add	r1, r3
 8018432:	4462      	add	r2, ip
 8018434:	6809      	ldr	r1, [r1, #0]
 8018436:	6011      	str	r1, [r2, #0]
    for(i = 0; i < tr->nose_length; i++) {
 8018438:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801843a:	4282      	cmp	r2, r0
 801843c:	dced      	bgt.n	801841a <tract_compute+0x29e>
    tr->nose_output = tr->noseR[tr->nose_length - 1];
 801843e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018440:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8018444:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8018448:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
}
 801844c:	b003      	add	sp, #12
 801844e:	ecbd 8b04 	vpop	{d8-d9}
 8018452:	bd30      	pop	{r4, r5, pc}
 8018454:	3e8f5c29 	.word	0x3e8f5c29
 8018458:	3f7fbe77 	.word	0x3f7fbe77

0801845c <tVoc_init>:
}



void    tVoc_init         (tVoc* const voc, int numTractSections, int maxNumTractSections, LEAF* const leaf)
{
 801845c:	b5f0      	push	{r4, r5, r6, r7, lr}
	tVoc_initToPool   (voc, numTractSections, maxNumTractSections, &leaf->mempool);
}

void    tVoc_initToPool   (tVoc* const voc, int numTractSections, int maxNumTractSections, tMempool* const mp)
{
	_tMempool* m = *mp;
 801845e:	699d      	ldr	r5, [r3, #24]
{
 8018460:	b085      	sub	sp, #20
 8018462:	4607      	mov	r7, r0
 8018464:	460e      	mov	r6, r1
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 8018466:	2018      	movs	r0, #24
 8018468:	4629      	mov	r1, r5
{
 801846a:	9201      	str	r2, [sp, #4]
	_tMempool* m = *mp;
 801846c:	9502      	str	r5, [sp, #8]
	_tVoc* v = *voc = (_tVoc*) mpool_alloc(sizeof(_tVoc), m);
 801846e:	f7fc f855 	bl	801451c <mpool_alloc>
 8018472:	4604      	mov	r4, r0
 8018474:	6038      	str	r0, [r7, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018476:	4629      	mov	r1, r5
	v->mempool = m;
 8018478:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 801847a:	2038      	movs	r0, #56	; 0x38
 801847c:	f7fc f8b2 	bl	80145e4 <mpool_calloc>
 8018480:	6060      	str	r0, [r4, #4]
 8018482:	4603      	mov	r3, r0
	glot->mempool = m;
 8018484:	6005      	str	r5, [r0, #0]
	_glottis* glot = *glo = (_glottis*) mpool_calloc(sizeof(_glottis), m);
 8018486:	9003      	str	r0, [sp, #12]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018488:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
	glot->freq = 140.0f; /* 140Hz frequency by default */
 801848c:	480d      	ldr	r0, [pc, #52]	; (80184c4 <tVoc_init+0x68>)
	LEAF* leaf = glot->mempool->leaf;
 801848e:	6869      	ldr	r1, [r5, #4]
	glot->freq = 140.0f; /* 140Hz frequency by default */
 8018490:	6058      	str	r0, [r3, #4]
    glot->tenseness = 0.6f; /* value between 0 and 1 */
 8018492:	480d      	ldr	r0, [pc, #52]	; (80184c8 <tVoc_init+0x6c>)
 8018494:	6098      	str	r0, [r3, #8]
    glottis_setup_waveform(&glot);
 8018496:	a803      	add	r0, sp, #12
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 8018498:	ed91 7a00 	vldr	s14, [r1]
    glot->time_in_waveform = 0;
 801849c:	2100      	movs	r1, #0
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 801849e:	eec6 7a87 	vdiv.f32	s15, s13, s14
    glot->time_in_waveform = 0;
 80184a2:	6159      	str	r1, [r3, #20]
    glot->T = 1.0f/leaf->sampleRate; /* big T */
 80184a4:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
    glottis_setup_waveform(&glot);
 80184a8:	f7fe ffea 	bl	8017480 <glottis_setup_waveform>
	glottis_initToPool(&v->glot, &m); /* initialize glottis */
	tract_initToPool(&v->tr, numTractSections, maxNumTractSections, &m); /* initialize vocal tract */
 80184ac:	ab02      	add	r3, sp, #8
 80184ae:	9a01      	ldr	r2, [sp, #4]
 80184b0:	4631      	mov	r1, r6
 80184b2:	f104 0008 	add.w	r0, r4, #8
 80184b6:	f7ff f997 	bl	80177e8 <tract_initToPool>
	v->counter = 0;
 80184ba:	2300      	movs	r3, #0
 80184bc:	6123      	str	r3, [r4, #16]
}
 80184be:	b005      	add	sp, #20
 80184c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80184c2:	bf00      	nop
 80184c4:	430c0000 	.word	0x430c0000
 80184c8:	3f19999a 	.word	0x3f19999a

080184cc <tVoc_tick>:
	//mpool_free((char*)v->buf, v->mempool);
	mpool_free((char*)v, v->mempool);
}

Lfloat   tVoc_tick         (tVoc* const voc)
{
 80184cc:	b538      	push	{r3, r4, r5, lr}
 80184ce:	ed2d 8b04 	vpush	{d8-d9}
	_tVoc* v = *voc;
 80184d2:	6804      	ldr	r4, [r0, #0]
	Lfloat vocal_output, glot;
	Lfloat lambda1,lambda2;

	if(v->counter == 0) {
 80184d4:	6923      	ldr	r3, [r4, #16]
		tract_reshape(&v->tr);
 80184d6:	f104 0508 	add.w	r5, r4, #8
	if(v->counter == 0) {
 80184da:	b323      	cbz	r3, 8018526 <tVoc_tick+0x5a>
		*/
	}

	//Lfloat finalOutput = v->buf[v->counter];
	vocal_output = 0.0f;
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 80184dc:	ee07 3a90 	vmov	s15, r3
 80184e0:	eddf 9a20 	vldr	s19, [pc, #128]	; 8018564 <tVoc_tick+0x98>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
	glot = glottis_compute(&v->glot);
 80184e4:	1d20      	adds	r0, r4, #4
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 80184e6:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
	glot = glottis_compute(&v->glot);
 80184ea:	f7ff f885 	bl	80175f8 <glottis_compute>

	tract_compute(&v->tr, glot, lambda1);
 80184ee:	4628      	mov	r0, r5
	glot = glottis_compute(&v->glot);
 80184f0:	eeb0 9a40 	vmov.f32	s18, s0
	tract_compute(&v->tr, glot, lambda1);
 80184f4:	ee68 0a29 	vmul.f32	s1, s16, s19
 80184f8:	f7ff fe40 	bl	801817c <tract_compute>
	vocal_output += v->tr->lip_output + v->tr->nose_output;

	if (v->doubleCompute)
 80184fc:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
	vocal_output += v->tr->lip_output + v->tr->nose_output;
 8018500:	edd3 7a29 	vldr	s15, [r3, #164]	; 0xa4
 8018504:	edd3 8a28 	vldr	s17, [r3, #160]	; 0xa0
 8018508:	ee78 8aa7 	vadd.f32	s17, s17, s15
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 801850c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	if (v->doubleCompute)
 8018510:	b98a      	cbnz	r2, 8018536 <tVoc_tick+0x6a>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
		vocal_output *= 0.25f;
	}
	else
	{
		vocal_output *= 0.5f;
 8018512:	ee28 0aa7 	vmul.f32	s0, s17, s15
	}
	//v->buf[i] = vocal_output * 0.125f;


	//vocal_output = glot;
	v->counter = (v->counter + 1) & 63;
 8018516:	6923      	ldr	r3, [r4, #16]
 8018518:	3301      	adds	r3, #1
 801851a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801851e:	6123      	str	r3, [r4, #16]
	return vocal_output;
}
 8018520:	ecbd 8b04 	vpop	{d8-d9}
 8018524:	bd38      	pop	{r3, r4, r5, pc}
		tract_reshape(&v->tr);
 8018526:	4628      	mov	r0, r5
 8018528:	f7ff fcda 	bl	8017ee0 <tract_reshape>
		tract_calculate_reflections(&v->tr);
 801852c:	4628      	mov	r0, r5
 801852e:	f7ff f8d5 	bl	80176dc <tract_calculate_reflections>
	lambda1 = ((Lfloat) v->counter) * 0.015625f;// /64
 8018532:	6923      	ldr	r3, [r4, #16]
 8018534:	e7d2      	b.n	80184dc <tVoc_tick+0x10>
	lambda2 = (Lfloat) (v->counter + 0.5f) * 0.015625f; //   /64
 8018536:	ee78 0a27 	vadd.f32	s1, s16, s15
		tract_compute(&v->tr, glot, lambda2);
 801853a:	4628      	mov	r0, r5
 801853c:	eeb0 0a49 	vmov.f32	s0, s18
 8018540:	ee60 0aa9 	vmul.f32	s1, s1, s19
 8018544:	f7ff fe1a 	bl	801817c <tract_compute>
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 8018548:	68a3      	ldr	r3, [r4, #8]
		vocal_output *= 0.25f;
 801854a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
		vocal_output += v->tr->lip_output + v->tr->nose_output;
 801854e:	edd3 7a28 	vldr	s15, [r3, #160]	; 0xa0
 8018552:	edd3 6a29 	vldr	s13, [r3, #164]	; 0xa4
 8018556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801855a:	ee77 7aa8 	vadd.f32	s15, s15, s17
		vocal_output *= 0.25f;
 801855e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018562:	e7d8      	b.n	8018516 <tVoc_tick+0x4a>
 8018564:	3c800000 	.word	0x3c800000

08018568 <tVoc_setDoubleComputeFlag>:
    *out = vocal_output * 0.125;
    v->counter = (v->counter + 1) & 511;
}
void    tVoc_setDoubleComputeFlag(tVoc* const voc, int doubleCompute)
{
	_tVoc* v = *voc;
 8018568:	6803      	ldr	r3, [r0, #0]
	v->doubleCompute = doubleCompute;
 801856a:	60d9      	str	r1, [r3, #12]
}
 801856c:	4770      	bx	lr
 801856e:	bf00      	nop

08018570 <tVoc_setFreq>:


void    tVoc_setFreq      (tVoc* const voc, Lfloat freq)
{
	_tVoc* v = *voc;
	v->glot->freq = freq;
 8018570:	6803      	ldr	r3, [r0, #0]
 8018572:	685b      	ldr	r3, [r3, #4]
 8018574:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8018578:	4770      	bx	lr
 801857a:	bf00      	nop

0801857c <tVoc_set_tractLength>:
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
}
void tVoc_set_tractLength(tVoc* const voc, int newLength)
{
	_tVoc* v = *voc;
	tract_newLength(&v->tr, newLength);
 801857c:	6800      	ldr	r0, [r0, #0]
 801857e:	3008      	adds	r0, #8
 8018580:	f7ff bb7c 	b.w	8017c7c <tract_newLength>

08018584 <tVoc_set_tenseness>:
}

void tVoc_set_tenseness(tVoc* const voc, Lfloat tenseness)
{
	_tVoc* v = *voc;
	v->glot->tenseness = tenseness;
 8018584:	6803      	ldr	r3, [r0, #0]
 8018586:	685b      	ldr	r3, [r3, #4]
 8018588:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801858c:	4770      	bx	lr
 801858e:	bf00      	nop

08018590 <tVoc_set_velum>:
	return &v->glot->tenseness;
}
void tVoc_set_velum(tVoc* const voc, Lfloat velum)
{
	_tVoc* v = *voc;
	v->tr->velum_target = velum;
 8018590:	6803      	ldr	r3, [r0, #0]
 8018592:	689b      	ldr	r3, [r3, #8]
 8018594:	ed83 0a22 	vstr	s0, [r3, #136]	; 0x88
}
 8018598:	4770      	bx	lr
 801859a:	bf00      	nop
 801859c:	0000      	movs	r0, r0
	...

080185a0 <tVoc_set_tongue_and_touch_diameters>:
	return &v->tr->velum_target;
}

//diameter and index are 0-1.0f
void tVoc_set_tongue_and_touch_diameters(tVoc* const voc, Lfloat tongue_index, Lfloat tongue_diameter, Lfloat touch_index, Lfloat touch_diameter, Lfloat *theDiameters)
{
 80185a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185a4:	ed2d 8b0a 	vpush	{d8-d12}
	int i;

	_tVoc* v = *voc;
 80185a8:	6807      	ldr	r7, [r0, #0]
{
 80185aa:	460e      	mov	r6, r1

	Lfloat t;
	Lfloat curve;
	//do tongue position
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 80185ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80185b0:	68bb      	ldr	r3, [r7, #8]
{
 80185b2:	eeb0 9a40 	vmov.f32	s18, s0
 80185b6:	eef0 aa41 	vmov.f32	s21, s2
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 80185ba:	6c5c      	ldr	r4, [r3, #68]	; 0x44
{
 80185bc:	eeb0 ba61 	vmov.f32	s22, s3
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 80185c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40

	for (i = 0; i < v->tr->n; i++)
 80185c2:	6859      	ldr	r1, [r3, #4]
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 80185c4:	1b12      	subs	r2, r2, r4
	for (i = 0; i < v->tr->n; i++)
 80185c6:	2900      	cmp	r1, #0
	Lfloat alpha = 1.0f / (Lfloat)(v->tr->tip_start - v->tr->blade_start);
 80185c8:	ee07 2a90 	vmov	s15, r2
 80185cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80185d0:	ee87 8a27 	vdiv.f32	s16, s14, s15
	for (i = 0; i < v->tr->n; i++)
 80185d4:	dd0d      	ble.n	80185f2 <tVoc_set_tongue_and_touch_diameters+0x52>
 80185d6:	4630      	mov	r0, r6
 80185d8:	2200      	movs	r2, #0
	{
		theDiameters[i] = v->tr->rest_diameter[i];
 80185da:	691b      	ldr	r3, [r3, #16]
 80185dc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	for (i = 0; i < v->tr->n; i++)
 80185e0:	3201      	adds	r2, #1
		theDiameters[i] = v->tr->rest_diameter[i];
 80185e2:	681b      	ldr	r3, [r3, #0]
 80185e4:	f840 3b04 	str.w	r3, [r0], #4
	for (i = 0; i < v->tr->n; i++)
 80185e8:	68bb      	ldr	r3, [r7, #8]
 80185ea:	6859      	ldr	r1, [r3, #4]
 80185ec:	4291      	cmp	r1, r2
 80185ee:	dcf4      	bgt.n	80185da <tVoc_set_tongue_and_touch_diameters+0x3a>
	}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 80185f0:	6c5c      	ldr	r4, [r3, #68]	; 0x44
 80185f2:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 80185f4:	42a5      	cmp	r5, r4
 80185f6:	dd48      	ble.n	801868a <tVoc_set_tongue_and_touch_diameters+0xea>
	{
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
		Lfloat fixedTongueDiameter = 2.0f + ((tongue_diameter - 2.0f) * 0.66666666666667f);
 80185f8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 80185fc:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8018800 <tVoc_set_tongue_and_touch_diameters+0x260>
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8018600:	eeb7 8ac8 	vcvt.f64.f32	d8, s16
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8018604:	eddf 9a7f 	vldr	s19, [pc, #508]	; 8018804 <tVoc_set_tongue_and_touch_diameters+0x264>
		}
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
		{
			curve *= 0.94f;
		}
		theDiameters[i] = 1.5f - curve;
 8018608:	eeb7 aa08 	vmov.f32	s20, #120	; 0x3fc00000  1.5
 801860c:	eb06 0984 	add.w	r9, r6, r4, lsl #2
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8018610:	ee77 7ae0 	vsub.f32	s15, s15, s1
			curve *= 0.8f;
 8018614:	ed9f ca7c 	vldr	s24, [pc, #496]	; 8018808 <tVoc_set_tongue_and_touch_diameters+0x268>
			curve *= 0.94f;
 8018618:	eddf ba7c 	vldr	s23, [pc, #496]	; 801880c <tVoc_set_tongue_and_touch_diameters+0x26c>
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 801861c:	46a0      	mov	r8, r4
 801861e:	ed9f 6b74 	vldr	d6, [pc, #464]	; 80187f0 <tVoc_set_tongue_and_touch_diameters+0x250>
 8018622:	eee7 9a87 	vfma.f32	s19, s15, s14
 8018626:	ee28 8b06 	vmul.f64	d8, d8, d6
 801862a:	e00c      	b.n	8018646 <tVoc_set_tongue_and_touch_diameters+0xa6>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 801862c:	42a5      	cmp	r5, r4
 801862e:	d025      	beq.n	801867c <tVoc_set_tongue_and_touch_diameters+0xdc>
		theDiameters[i] = 1.5f - curve;
 8018630:	ee7a 7a40 	vsub.f32	s15, s20, s0
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 8018634:	3401      	adds	r4, #1
		theDiameters[i] = 1.5f - curve;
 8018636:	ece9 7a01 	vstmia	r9!, {s15}
	for(i = v->tr->blade_start; i < v->tr->lip_start; i++)
 801863a:	68bb      	ldr	r3, [r7, #8]
 801863c:	6c9d      	ldr	r5, [r3, #72]	; 0x48
 801863e:	42a5      	cmp	r5, r4
 8018640:	dd22      	ble.n	8018688 <tVoc_set_tongue_and_touch_diameters+0xe8>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8018642:	f8d3 8044 	ldr.w	r8, [r3, #68]	; 0x44
		t = 1.1f * M_PI * (Lfloat)(tongue_index - i) * alpha;
 8018646:	ee07 4a90 	vmov	s15, r4
 801864a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801864e:	ee39 7a47 	vsub.f32	s14, s18, s14
 8018652:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8018656:	ee27 7b08 	vmul.f64	d7, d7, d8
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 801865a:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 801865e:	f000 fe23 	bl	80192a8 <cosf>
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8018662:	f1a8 0302 	sub.w	r3, r8, #2
 8018666:	1e6a      	subs	r2, r5, #1
		curve = (1.5f - fixedTongueDiameter + 1.7f) * cosf(t);
 8018668:	ee29 0a80 	vmul.f32	s0, s19, s0
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 801866c:	42a3      	cmp	r3, r4
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 801866e:	f1a5 0502 	sub.w	r5, r5, #2
		if(i == v->tr->blade_start - 2 || i == v->tr->lip_start - 1)
 8018672:	d006      	beq.n	8018682 <tVoc_set_tongue_and_touch_diameters+0xe2>
 8018674:	42a2      	cmp	r2, r4
 8018676:	d004      	beq.n	8018682 <tVoc_set_tongue_and_touch_diameters+0xe2>
		if(i == v->tr->blade_start || i == v->tr->lip_start - 2)
 8018678:	4544      	cmp	r4, r8
 801867a:	d1d7      	bne.n	801862c <tVoc_set_tongue_and_touch_diameters+0x8c>
			curve *= 0.94f;
 801867c:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8018680:	e7d6      	b.n	8018630 <tVoc_set_tongue_and_touch_diameters+0x90>
			curve *= 0.8f;
 8018682:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8018686:	e7f7      	b.n	8018678 <tVoc_set_tongue_and_touch_diameters+0xd8>
	}

	//now do additional constrictions (touch position)
	Lfloat width=2.0f;
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8018688:	6859      	ldr	r1, [r3, #4]
 801868a:	ee07 1a90 	vmov	s15, r1
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 801868e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8018810 <tVoc_set_tongue_and_touch_diameters+0x270>
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 8018692:	ed9f 8a60 	vldr	s16, [pc, #384]	; 8018814 <tVoc_set_tongue_and_touch_diameters+0x274>
 8018696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	Lfloat twentyfivewidth = v->tr->n *0.568181818181818f;
 801869a:	ee27 7a87 	vmul.f32	s14, s15, s14
	Lfloat tenwidth = v->tr->n*0.227272727272727f;
 801869e:	ee27 8a88 	vmul.f32	s16, s15, s16
	if (touch_index< (twentyfivewidth)) width = tenwidth; //25 in original code
 80186a2:	eeb4 7aea 	vcmpe.f32	s14, s21
 80186a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186aa:	dc0f      	bgt.n	80186cc <tVoc_set_tongue_and_touch_diameters+0x12c>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 80186ac:	edd3 6a10 	vldr	s13, [r3, #64]	; 0x40
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
 80186b0:	ed9f 6a59 	vldr	s12, [pc, #356]	; 8018818 <tVoc_set_tongue_and_touch_diameters+0x278>
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 80186b4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	Lfloat fivewidth = v->tr->n*0.113636363636364f;
 80186b8:	ee27 6a86 	vmul.f32	s12, s15, s12
	else if (touch_index>=v->tr->tip_start) width= fivewidth;
 80186bc:	eef4 6aea 	vcmpe.f32	s13, s21
 80186c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186c4:	f200 8087 	bhi.w	80187d6 <tVoc_set_tongue_and_touch_diameters+0x236>
 80186c8:	eeb0 8a46 	vmov.f32	s16, s12
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
	Lfloat invWidth = 1.0f / width;
	if ((touch_index < v->tr->n) && (touch_diameter < 3.0f))
 80186cc:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80186d0:	eeb4 ba47 	vcmp.f32	s22, s14
 80186d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186d8:	d504      	bpl.n	80186e4 <tVoc_set_tongue_and_touch_diameters+0x144>
 80186da:	eef4 7aea 	vcmpe.f32	s15, s21
 80186de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186e2:	dc03      	bgt.n	80186ec <tVoc_set_tongue_and_touch_diameters+0x14c>
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
			}
		}
	}

}
 80186e4:	ecbd 8b0a 	vpop	{d8-d12}
 80186e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80186ec:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 80186f0:	fefa 7a48 	vrintp.f32	s15, s16
		int intIndex = roundf(touch_index);
 80186f4:	feb8 7a6a 	vrinta.f32	s14, s21
 80186f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80186fc:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8018700:	ee78 8a29 	vadd.f32	s17, s16, s19
		int intIndex = roundf(touch_index);
 8018704:	ee17 5a10 	vmov	r5, s14
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 8018708:	eef1 7a67 	vneg.f32	s15, s15
 801870c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018714:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8018718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801871c:	d5e2      	bpl.n	80186e4 <tVoc_set_tongue_and_touch_diameters+0x144>
	Lfloat invWidth = 1.0f / width;
 801871e:	ee89 ca88 	vdiv.f32	s24, s19, s16
 8018722:	ee17 4a90 	vmov	r4, s15
			if (relpos <= 0.0f) shrink = 0.0f;
 8018726:	ed9f aa3d 	vldr	s20, [pc, #244]	; 801881c <tVoc_set_tongue_and_touch_diameters+0x27c>
 801872a:	442c      	add	r4, r5
 801872c:	f1c5 0501 	rsb	r5, r5, #1
 8018730:	eb06 0684 	add.w	r6, r6, r4, lsl #2
 8018734:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
 8018738:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80187f8 <tVoc_set_tongue_and_touch_diameters+0x258>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 801873c:	eeb7 cacc 	vcvt.f64.f32	d12, s24
 8018740:	ee2c cb06 	vmul.f64	d12, d12, d6
			Lfloat relpos = (intIndex+i) - touch_index;
 8018744:	ee07 4a90 	vmov	s15, r4
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8018748:	2c00      	cmp	r4, #0
			Lfloat relpos = (intIndex+i) - touch_index;
 801874a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 801874e:	db32      	blt.n	80187b6 <tVoc_set_tongue_and_touch_diameters+0x216>
 8018750:	68bb      	ldr	r3, [r7, #8]
			Lfloat relpos = (intIndex+i) - touch_index;
 8018752:	ee77 7aea 	vsub.f32	s15, s15, s21
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 8018756:	685b      	ldr	r3, [r3, #4]
			relpos = fabsf(relpos)-0.5f;
 8018758:	eef0 7ae7 	vabs.f32	s15, s15
			if (intIndex+i<0 || intIndex+i>=v->tr->n) continue;
 801875c:	429c      	cmp	r4, r3
 801875e:	da2a      	bge.n	80187b6 <tVoc_set_tongue_and_touch_diameters+0x216>
			if (relpos <= 0.0f) shrink = 0.0f;
 8018760:	eef4 7ac9 	vcmpe.f32	s15, s18
			relpos = fabsf(relpos)-0.5f;
 8018764:	ee37 7ac9 	vsub.f32	s14, s15, s18
			if (relpos <= 0.0f) shrink = 0.0f;
 8018768:	eef0 7a4a 	vmov.f32	s15, s20
 801876c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018770:	d912      	bls.n	8018798 <tVoc_set_tongue_and_touch_diameters+0x1f8>
			else if (relpos > width) shrink = 1.0f;
 8018772:	eeb4 8ac7 	vcmpe.f32	s16, s14
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8018776:	eeb7 0ac7 	vcvt.f64.f32	d0, s14
			else if (relpos > width) shrink = 1.0f;
 801877a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801877e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8018782:	ee20 0b0c 	vmul.f64	d0, d0, d12
			else if (relpos > width) shrink = 1.0f;
 8018786:	d407      	bmi.n	8018798 <tVoc_set_tongue_and_touch_diameters+0x1f8>
			else shrink = 0.5f*(1.0f-cosf(M_PI * relpos * invWidth));
 8018788:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801878c:	f000 fd8c 	bl	80192a8 <cosf>
 8018790:	ee39 0ac0 	vsub.f32	s0, s19, s0
 8018794:	ee60 7a09 	vmul.f32	s15, s0, s18
			if (touch_diameter < theDiameters[intIndex+i])
 8018798:	ed96 7a00 	vldr	s14, [r6]
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 801879c:	ee77 6a4b 	vsub.f32	s13, s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 80187a0:	eeb4 7acb 	vcmpe.f32	s14, s22
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 80187a4:	eeb0 7a4b 	vmov.f32	s14, s22
			if (touch_diameter < theDiameters[intIndex+i])
 80187a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				theDiameters[intIndex+i] = touch_diameter + (theDiameters[intIndex+i]-touch_diameter)*shrink;
 80187ac:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80187b0:	bfc8      	it	gt
 80187b2:	ed86 7a00 	vstrgt	s14, [r6]
		for (int i= -ceilf(width)-1.0f; i<width+1.0f; i++)
 80187b6:	192b      	adds	r3, r5, r4
 80187b8:	3604      	adds	r6, #4
 80187ba:	3401      	adds	r4, #1
 80187bc:	ee07 3a90 	vmov	s15, r3
 80187c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80187c4:	eef4 7ae8 	vcmpe.f32	s15, s17
 80187c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187cc:	d4ba      	bmi.n	8018744 <tVoc_set_tongue_and_touch_diameters+0x1a4>
}
 80187ce:	ecbd 8b0a 	vpop	{d8-d12}
 80187d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	else width = tenwidth-fivewidth*(touch_index-twentyfivewidth)/(v->tr->tip_start-twentyfivewidth);
 80187d6:	ee7a 5ac7 	vsub.f32	s11, s21, s14
 80187da:	ee37 7a66 	vsub.f32	s14, s14, s13
 80187de:	ee65 6a86 	vmul.f32	s13, s11, s12
 80187e2:	ee86 6a87 	vdiv.f32	s12, s13, s14
 80187e6:	ee38 8a06 	vadd.f32	s16, s16, s12
 80187ea:	e76f      	b.n	80186cc <tVoc_set_tongue_and_touch_diameters+0x12c>
 80187ec:	f3af 8000 	nop.w
 80187f0:	4d2562ef 	.word	0x4d2562ef
 80187f4:	400ba561 	.word	0x400ba561
 80187f8:	54442d18 	.word	0x54442d18
 80187fc:	400921fb 	.word	0x400921fb
 8018800:	3f2aaaab 	.word	0x3f2aaaab
 8018804:	3f99999a 	.word	0x3f99999a
 8018808:	3f4ccccd 	.word	0x3f4ccccd
 801880c:	3f70a3d7 	.word	0x3f70a3d7
 8018810:	3f11745d 	.word	0x3f11745d
 8018814:	3e68ba2f 	.word	0x3e68ba2f
 8018818:	3de8ba2f 	.word	0x3de8ba2f
 801881c:	00000000 	.word	0x00000000

08018820 <tVoc_set_tongue_shape_and_touch>:
{
 8018820:	b500      	push	{lr}
	tongue_diameter += 2.05f;
 8018822:	eddf 7a23 	vldr	s15, [pc, #140]	; 80188b0 <tVoc_set_tongue_shape_and_touch+0x90>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018826:	eef0 6a08 	vmov.f32	s13, #8	; 0x40400000  3.0
 801882a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80188b4 <tVoc_set_tongue_shape_and_touch+0x94>
{
 801882e:	ed2d 8b04 	vpush	{d8-d9}
 8018832:	fec1 1a87 	vmaxnm.f32	s3, s3, s14
 8018836:	b083      	sub	sp, #12
	_tVoc* v = *voc;
 8018838:	6803      	ldr	r3, [r0, #0]
	tongue_diameter += 2.05f;
 801883a:	eddf 9a1f 	vldr	s19, [pc, #124]	; 80188b8 <tVoc_set_tongue_shape_and_touch+0x98>
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 801883e:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
	_tVoc* v = *voc;
 8018842:	9301      	str	r3, [sp, #4]
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018844:	a801      	add	r0, sp, #4
	return v->tr->target_diameter;
 8018846:	689b      	ldr	r3, [r3, #8]
	tongue_diameter += 2.05f;
 8018848:	eee0 9aa7 	vfma.f32	s19, s1, s15
	touch_diameter *= 1.6f;
 801884c:	eddf 7a1b 	vldr	s15, [pc, #108]	; 80188bc <tVoc_set_tongue_shape_and_touch+0x9c>
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018850:	edd3 8a14 	vldr	s17, [r3, #80]	; 0x50
	touch_diameter *= 1.6f;
 8018854:	ee21 8aa7 	vmul.f32	s16, s3, s15
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018858:	edd3 7a01 	vldr	s15, [r3, #4]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 801885c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 8018860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018864:	6959      	ldr	r1, [r3, #20]
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018866:	ee37 7a68 	vsub.f32	s14, s14, s17
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 801886a:	eef0 1a48 	vmov.f32	s3, s16
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 801886e:	ee77 7ae6 	vsub.f32	s15, s15, s13
	tongue_index = (tongue_index * (v->tr->tongueUpperBound - v->tr->tongueLowerBound)) + v->tr->tongueLowerBound;
 8018872:	eee7 8a00 	vfma.f32	s17, s14, s0
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 8018876:	eef0 0a69 	vmov.f32	s1, s19
	touch_index = ((v->tr->n - 3.0f)* touch_index) + 2.0f;
 801887a:	eea7 9a81 	vfma.f32	s18, s15, s2
	tVoc_set_tongue_and_touch_diameters(&v, tongue_index, tongue_diameter, touch_index, touch_diameter, diameters); //10 39, 32
 801887e:	eeb0 0a68 	vmov.f32	s0, s17
 8018882:	eeb0 1a49 	vmov.f32	s2, s18
 8018886:	f7ff fe8b 	bl	80185a0 <tVoc_set_tongue_and_touch_diameters>
	v->tr->turbuluencePointPosition[0] = tongue_index;
 801888a:	9b01      	ldr	r3, [sp, #4]
 801888c:	689a      	ldr	r2, [r3, #8]
 801888e:	edc2 8a2f 	vstr	s17, [r2, #188]	; 0xbc
	v->tr->turbuluencePointDiameter[0] = tongue_diameter;
 8018892:	689a      	ldr	r2, [r3, #8]
 8018894:	edc2 9a31 	vstr	s19, [r2, #196]	; 0xc4
	v->tr->turbuluencePointPosition[1] = touch_index;
 8018898:	689a      	ldr	r2, [r3, #8]
 801889a:	ed82 9a30 	vstr	s18, [r2, #192]	; 0xc0
	v->tr->turbuluencePointDiameter[1] = touch_diameter;
 801889e:	689b      	ldr	r3, [r3, #8]
 80188a0:	ed83 8a32 	vstr	s16, [r3, #200]	; 0xc8
}
 80188a4:	b003      	add	sp, #12
 80188a6:	ecbd 8b04 	vpop	{d8-d9}
 80188aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80188ae:	bf00      	nop
 80188b0:	3fb9999a 	.word	0x3fb9999a
 80188b4:	00000000 	.word	0x00000000
 80188b8:	40033333 	.word	0x40033333
 80188bc:	3fcccccd 	.word	0x3fcccccd

080188c0 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 80188c0:	4770      	bx	lr
 80188c2:	bf00      	nop

080188c4 <LEAF_init>:
{
 80188c4:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 80188c6:	6200      	str	r0, [r0, #32]
{
 80188c8:	4604      	mov	r4, r0
 80188ca:	461d      	mov	r5, r3
 80188cc:	ed2d 8b02 	vpush	{d8}
 80188d0:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 80188d4:	f7fb fe08 	bl	80144e8 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 80188d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80188dc:	eddf 7a0c 	vldr	s15, [pc, #48]	; 8018910 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 80188e0:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 80188e2:	4b0c      	ldr	r3, [pc, #48]	; (8018914 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 80188e4:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 80188e8:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 80188ec:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 80188ee:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 80188f0:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 80188f4:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 80188f8:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 80188fc:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 8018900:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 8018904:	edc4 7a03 	vstr	s15, [r4, #12]
}
 8018908:	ecbd 8b02 	vpop	{d8}
 801890c:	bd38      	pop	{r3, r4, r5, pc}
 801890e:	bf00      	nop
 8018910:	40c90fdb 	.word	0x40c90fdb
 8018914:	080188c1 	.word	0x080188c1

08018918 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 8018918:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801891a:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801891e:	2401      	movs	r4, #1
 8018920:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 8018922:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 8018926:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8018928:	4718      	bx	r3
 801892a:	bf00      	nop

0801892c <__itoa>:
 801892c:	1e93      	subs	r3, r2, #2
 801892e:	2b22      	cmp	r3, #34	; 0x22
 8018930:	b510      	push	{r4, lr}
 8018932:	460c      	mov	r4, r1
 8018934:	d904      	bls.n	8018940 <__itoa+0x14>
 8018936:	2300      	movs	r3, #0
 8018938:	700b      	strb	r3, [r1, #0]
 801893a:	461c      	mov	r4, r3
 801893c:	4620      	mov	r0, r4
 801893e:	bd10      	pop	{r4, pc}
 8018940:	2a0a      	cmp	r2, #10
 8018942:	d109      	bne.n	8018958 <__itoa+0x2c>
 8018944:	2800      	cmp	r0, #0
 8018946:	da07      	bge.n	8018958 <__itoa+0x2c>
 8018948:	232d      	movs	r3, #45	; 0x2d
 801894a:	700b      	strb	r3, [r1, #0]
 801894c:	4240      	negs	r0, r0
 801894e:	2101      	movs	r1, #1
 8018950:	4421      	add	r1, r4
 8018952:	f000 f805 	bl	8018960 <__utoa>
 8018956:	e7f1      	b.n	801893c <__itoa+0x10>
 8018958:	2100      	movs	r1, #0
 801895a:	e7f9      	b.n	8018950 <__itoa+0x24>

0801895c <itoa>:
 801895c:	f7ff bfe6 	b.w	801892c <__itoa>

08018960 <__utoa>:
 8018960:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018962:	4c1f      	ldr	r4, [pc, #124]	; (80189e0 <__utoa+0x80>)
 8018964:	b08b      	sub	sp, #44	; 0x2c
 8018966:	4605      	mov	r5, r0
 8018968:	460b      	mov	r3, r1
 801896a:	466e      	mov	r6, sp
 801896c:	f104 0c20 	add.w	ip, r4, #32
 8018970:	6820      	ldr	r0, [r4, #0]
 8018972:	6861      	ldr	r1, [r4, #4]
 8018974:	4637      	mov	r7, r6
 8018976:	c703      	stmia	r7!, {r0, r1}
 8018978:	3408      	adds	r4, #8
 801897a:	4564      	cmp	r4, ip
 801897c:	463e      	mov	r6, r7
 801897e:	d1f7      	bne.n	8018970 <__utoa+0x10>
 8018980:	7921      	ldrb	r1, [r4, #4]
 8018982:	7139      	strb	r1, [r7, #4]
 8018984:	1e91      	subs	r1, r2, #2
 8018986:	6820      	ldr	r0, [r4, #0]
 8018988:	6038      	str	r0, [r7, #0]
 801898a:	2922      	cmp	r1, #34	; 0x22
 801898c:	f04f 0100 	mov.w	r1, #0
 8018990:	d904      	bls.n	801899c <__utoa+0x3c>
 8018992:	7019      	strb	r1, [r3, #0]
 8018994:	460b      	mov	r3, r1
 8018996:	4618      	mov	r0, r3
 8018998:	b00b      	add	sp, #44	; 0x2c
 801899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801899c:	1e58      	subs	r0, r3, #1
 801899e:	4684      	mov	ip, r0
 80189a0:	fbb5 f7f2 	udiv	r7, r5, r2
 80189a4:	fb02 5617 	mls	r6, r2, r7, r5
 80189a8:	3628      	adds	r6, #40	; 0x28
 80189aa:	446e      	add	r6, sp
 80189ac:	460c      	mov	r4, r1
 80189ae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80189b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80189b6:	462e      	mov	r6, r5
 80189b8:	42b2      	cmp	r2, r6
 80189ba:	f101 0101 	add.w	r1, r1, #1
 80189be:	463d      	mov	r5, r7
 80189c0:	d9ee      	bls.n	80189a0 <__utoa+0x40>
 80189c2:	2200      	movs	r2, #0
 80189c4:	545a      	strb	r2, [r3, r1]
 80189c6:	1919      	adds	r1, r3, r4
 80189c8:	1aa5      	subs	r5, r4, r2
 80189ca:	42aa      	cmp	r2, r5
 80189cc:	dae3      	bge.n	8018996 <__utoa+0x36>
 80189ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80189d2:	780e      	ldrb	r6, [r1, #0]
 80189d4:	7006      	strb	r6, [r0, #0]
 80189d6:	3201      	adds	r2, #1
 80189d8:	f801 5901 	strb.w	r5, [r1], #-1
 80189dc:	e7f4      	b.n	80189c8 <__utoa+0x68>
 80189de:	bf00      	nop
 80189e0:	08025ebc 	.word	0x08025ebc

080189e4 <memset>:
 80189e4:	4402      	add	r2, r0
 80189e6:	4603      	mov	r3, r0
 80189e8:	4293      	cmp	r3, r2
 80189ea:	d100      	bne.n	80189ee <memset+0xa>
 80189ec:	4770      	bx	lr
 80189ee:	f803 1b01 	strb.w	r1, [r3], #1
 80189f2:	e7f9      	b.n	80189e8 <memset+0x4>

080189f4 <__libc_init_array>:
 80189f4:	b570      	push	{r4, r5, r6, lr}
 80189f6:	4d0d      	ldr	r5, [pc, #52]	; (8018a2c <__libc_init_array+0x38>)
 80189f8:	4c0d      	ldr	r4, [pc, #52]	; (8018a30 <__libc_init_array+0x3c>)
 80189fa:	1b64      	subs	r4, r4, r5
 80189fc:	10a4      	asrs	r4, r4, #2
 80189fe:	2600      	movs	r6, #0
 8018a00:	42a6      	cmp	r6, r4
 8018a02:	d109      	bne.n	8018a18 <__libc_init_array+0x24>
 8018a04:	4d0b      	ldr	r5, [pc, #44]	; (8018a34 <__libc_init_array+0x40>)
 8018a06:	4c0c      	ldr	r4, [pc, #48]	; (8018a38 <__libc_init_array+0x44>)
 8018a08:	f002 fad6 	bl	801afb8 <_init>
 8018a0c:	1b64      	subs	r4, r4, r5
 8018a0e:	10a4      	asrs	r4, r4, #2
 8018a10:	2600      	movs	r6, #0
 8018a12:	42a6      	cmp	r6, r4
 8018a14:	d105      	bne.n	8018a22 <__libc_init_array+0x2e>
 8018a16:	bd70      	pop	{r4, r5, r6, pc}
 8018a18:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a1c:	4798      	blx	r3
 8018a1e:	3601      	adds	r6, #1
 8018a20:	e7ee      	b.n	8018a00 <__libc_init_array+0xc>
 8018a22:	f855 3b04 	ldr.w	r3, [r5], #4
 8018a26:	4798      	blx	r3
 8018a28:	3601      	adds	r6, #1
 8018a2a:	e7f2      	b.n	8018a12 <__libc_init_array+0x1e>
 8018a2c:	080272f0 	.word	0x080272f0
 8018a30:	080272f0 	.word	0x080272f0
 8018a34:	080272f0 	.word	0x080272f0
 8018a38:	080272f4 	.word	0x080272f4

08018a3c <memcpy>:
 8018a3c:	440a      	add	r2, r1
 8018a3e:	4291      	cmp	r1, r2
 8018a40:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8018a44:	d100      	bne.n	8018a48 <memcpy+0xc>
 8018a46:	4770      	bx	lr
 8018a48:	b510      	push	{r4, lr}
 8018a4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018a4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018a52:	4291      	cmp	r1, r2
 8018a54:	d1f9      	bne.n	8018a4a <memcpy+0xe>
 8018a56:	bd10      	pop	{r4, pc}

08018a58 <frexpf>:
 8018a58:	ee10 3a10 	vmov	r3, s0
 8018a5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018a60:	2100      	movs	r1, #0
 8018a62:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018a66:	6001      	str	r1, [r0, #0]
 8018a68:	da19      	bge.n	8018a9e <frexpf+0x46>
 8018a6a:	b1c2      	cbz	r2, 8018a9e <frexpf+0x46>
 8018a6c:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8018a70:	d10a      	bne.n	8018a88 <frexpf+0x30>
 8018a72:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8018aa0 <frexpf+0x48>
 8018a76:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018a7a:	f06f 0118 	mvn.w	r1, #24
 8018a7e:	ee17 3a90 	vmov	r3, s15
 8018a82:	6001      	str	r1, [r0, #0]
 8018a84:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8018a88:	6801      	ldr	r1, [r0, #0]
 8018a8a:	15d2      	asrs	r2, r2, #23
 8018a8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8018a90:	3a7e      	subs	r2, #126	; 0x7e
 8018a92:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 8018a96:	4411      	add	r1, r2
 8018a98:	ee00 3a10 	vmov	s0, r3
 8018a9c:	6001      	str	r1, [r0, #0]
 8018a9e:	4770      	bx	lr
 8018aa0:	4c000000 	.word	0x4c000000

08018aa4 <expf>:
 8018aa4:	ee10 2a10 	vmov	r2, s0
 8018aa8:	f240 412a 	movw	r1, #1066	; 0x42a
 8018aac:	f3c2 530a 	ubfx	r3, r2, #20, #11
 8018ab0:	428b      	cmp	r3, r1
 8018ab2:	b430      	push	{r4, r5}
 8018ab4:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8018ab8:	d92a      	bls.n	8018b10 <expf+0x6c>
 8018aba:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 8018abe:	d058      	beq.n	8018b72 <expf+0xce>
 8018ac0:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 8018ac4:	d303      	bcc.n	8018ace <expf+0x2a>
 8018ac6:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018aca:	bc30      	pop	{r4, r5}
 8018acc:	4770      	bx	lr
 8018ace:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8018b78 <expf+0xd4>
 8018ad2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018ada:	dd03      	ble.n	8018ae4 <expf+0x40>
 8018adc:	bc30      	pop	{r4, r5}
 8018ade:	2000      	movs	r0, #0
 8018ae0:	f000 bca8 	b.w	8019434 <__math_oflowf>
 8018ae4:	eddf 7a25 	vldr	s15, [pc, #148]	; 8018b7c <expf+0xd8>
 8018ae8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018aec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018af0:	d503      	bpl.n	8018afa <expf+0x56>
 8018af2:	bc30      	pop	{r4, r5}
 8018af4:	2000      	movs	r0, #0
 8018af6:	f000 bc91 	b.w	801941c <__math_uflowf>
 8018afa:	eddf 7a21 	vldr	s15, [pc, #132]	; 8018b80 <expf+0xdc>
 8018afe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018b02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018b06:	d503      	bpl.n	8018b10 <expf+0x6c>
 8018b08:	bc30      	pop	{r4, r5}
 8018b0a:	2000      	movs	r0, #0
 8018b0c:	f000 bc8c 	b.w	8019428 <__math_may_uflowf>
 8018b10:	4b1c      	ldr	r3, [pc, #112]	; (8018b84 <expf+0xe0>)
 8018b12:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8018b16:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 8018b1a:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 8018b1e:	eeb0 7b44 	vmov.f64	d7, d4
 8018b22:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018b26:	ee17 0a10 	vmov	r0, s14
 8018b2a:	ee37 7b44 	vsub.f64	d7, d7, d4
 8018b2e:	f000 021f 	and.w	r2, r0, #31
 8018b32:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8018b36:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 8018b3a:	ee27 4b07 	vmul.f64	d4, d7, d7
 8018b3e:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 8018b42:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 8018b46:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018b4a:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 8018b4e:	684d      	ldr	r5, [r1, #4]
 8018b50:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 8018b54:	2100      	movs	r1, #0
 8018b56:	190a      	adds	r2, r1, r4
 8018b58:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 8018b5c:	eea5 0b07 	vfma.f64	d0, d5, d7
 8018b60:	ec43 2b17 	vmov	d7, r2, r3
 8018b64:	eea6 0b04 	vfma.f64	d0, d6, d4
 8018b68:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018b6c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018b70:	e7ab      	b.n	8018aca <expf+0x26>
 8018b72:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8018b88 <expf+0xe4>
 8018b76:	e7a8      	b.n	8018aca <expf+0x26>
 8018b78:	42b17217 	.word	0x42b17217
 8018b7c:	c2cff1b4 	.word	0xc2cff1b4
 8018b80:	c2ce8ecf 	.word	0xc2ce8ecf
 8018b84:	08025ee8 	.word	0x08025ee8
 8018b88:	00000000 	.word	0x00000000

08018b8c <logf>:
 8018b8c:	ee10 3a10 	vmov	r3, s0
 8018b90:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8018b94:	b410      	push	{r4}
 8018b96:	d055      	beq.n	8018c44 <logf+0xb8>
 8018b98:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 8018b9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8018ba0:	d31a      	bcc.n	8018bd8 <logf+0x4c>
 8018ba2:	005a      	lsls	r2, r3, #1
 8018ba4:	d104      	bne.n	8018bb0 <logf+0x24>
 8018ba6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018baa:	2001      	movs	r0, #1
 8018bac:	f000 bc48 	b.w	8019440 <__math_divzerof>
 8018bb0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018bb4:	d043      	beq.n	8018c3e <logf+0xb2>
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	db02      	blt.n	8018bc0 <logf+0x34>
 8018bba:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 8018bbe:	d303      	bcc.n	8018bc8 <logf+0x3c>
 8018bc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018bc4:	f000 bc4e 	b.w	8019464 <__math_invalidf>
 8018bc8:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018c4c <logf+0xc0>
 8018bcc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018bd0:	ee10 3a10 	vmov	r3, s0
 8018bd4:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 8018bd8:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 8018bdc:	491c      	ldr	r1, [pc, #112]	; (8018c50 <logf+0xc4>)
 8018bde:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 8018be2:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 8018be6:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 8018bea:	0dd4      	lsrs	r4, r2, #23
 8018bec:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018bf0:	05e4      	lsls	r4, r4, #23
 8018bf2:	ed90 6b00 	vldr	d6, [r0]
 8018bf6:	1b1b      	subs	r3, r3, r4
 8018bf8:	ee07 3a90 	vmov	s15, r3
 8018bfc:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018c00:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018c04:	15d2      	asrs	r2, r2, #23
 8018c06:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018c0a:	ed90 6b02 	vldr	d6, [r0, #8]
 8018c0e:	ee20 4b00 	vmul.f64	d4, d0, d0
 8018c12:	ee07 2a90 	vmov	s15, r2
 8018c16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8018c1a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8018c1e:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 8018c22:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 8018c26:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018c2a:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018c2e:	ee30 0b06 	vadd.f64	d0, d0, d6
 8018c32:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018c36:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018c3a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c42:	4770      	bx	lr
 8018c44:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018c54 <logf+0xc8>
 8018c48:	e7f9      	b.n	8018c3e <logf+0xb2>
 8018c4a:	bf00      	nop
 8018c4c:	4b000000 	.word	0x4b000000
 8018c50:	08026030 	.word	0x08026030
 8018c54:	00000000 	.word	0x00000000

08018c58 <log2f>:
 8018c58:	ee10 2a10 	vmov	r2, s0
 8018c5c:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8018c60:	b410      	push	{r4}
 8018c62:	d055      	beq.n	8018d10 <log2f+0xb8>
 8018c64:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 8018c68:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8018c6c:	d31a      	bcc.n	8018ca4 <log2f+0x4c>
 8018c6e:	0053      	lsls	r3, r2, #1
 8018c70:	d104      	bne.n	8018c7c <log2f+0x24>
 8018c72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c76:	2001      	movs	r0, #1
 8018c78:	f000 bbe2 	b.w	8019440 <__math_divzerof>
 8018c7c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8018c80:	d043      	beq.n	8018d0a <log2f+0xb2>
 8018c82:	2a00      	cmp	r2, #0
 8018c84:	db02      	blt.n	8018c8c <log2f+0x34>
 8018c86:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 8018c8a:	d303      	bcc.n	8018c94 <log2f+0x3c>
 8018c8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018c90:	f000 bbe8 	b.w	8019464 <__math_invalidf>
 8018c94:	eddf 7a20 	vldr	s15, [pc, #128]	; 8018d18 <log2f+0xc0>
 8018c98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018c9c:	ee10 3a10 	vmov	r3, s0
 8018ca0:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 8018ca4:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 8018ca8:	491c      	ldr	r1, [pc, #112]	; (8018d1c <log2f+0xc4>)
 8018caa:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018cae:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8018cb2:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 8018cb6:	0ddc      	lsrs	r4, r3, #23
 8018cb8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 8018cbc:	05e4      	lsls	r4, r4, #23
 8018cbe:	ed90 5b00 	vldr	d5, [r0]
 8018cc2:	1b12      	subs	r2, r2, r4
 8018cc4:	ee07 2a90 	vmov	s15, r2
 8018cc8:	15db      	asrs	r3, r3, #23
 8018cca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018cce:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018cd2:	ed90 7b02 	vldr	d7, [r0, #8]
 8018cd6:	ee26 4b06 	vmul.f64	d4, d6, d6
 8018cda:	ee00 3a10 	vmov	s0, r3
 8018cde:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 8018ce2:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 8018ce6:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018cea:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 8018cee:	eea5 7b06 	vfma.f64	d7, d5, d6
 8018cf2:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 8018cf6:	eea5 7b04 	vfma.f64	d7, d5, d4
 8018cfa:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 8018cfe:	eea5 0b06 	vfma.f64	d0, d5, d6
 8018d02:	eea4 0b07 	vfma.f64	d0, d4, d7
 8018d06:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8018d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018d0e:	4770      	bx	lr
 8018d10:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8018d20 <log2f+0xc8>
 8018d14:	e7f9      	b.n	8018d0a <log2f+0xb2>
 8018d16:	bf00      	nop
 8018d18:	4b000000 	.word	0x4b000000
 8018d1c:	080269c0 	.word	0x080269c0
	...

08018d28 <exp>:
 8018d28:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 8018d2a:	ee10 3a90 	vmov	r3, s1
 8018d2e:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 8018d32:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8018d36:	18a2      	adds	r2, r4, r2
 8018d38:	2a3e      	cmp	r2, #62	; 0x3e
 8018d3a:	ee10 1a10 	vmov	r1, s0
 8018d3e:	d922      	bls.n	8018d86 <exp+0x5e>
 8018d40:	2a00      	cmp	r2, #0
 8018d42:	da06      	bge.n	8018d52 <exp+0x2a>
 8018d44:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8018d48:	ee30 0b07 	vadd.f64	d0, d0, d7
 8018d4c:	b004      	add	sp, #16
 8018d4e:	bcf0      	pop	{r4, r5, r6, r7}
 8018d50:	4770      	bx	lr
 8018d52:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 8018d56:	f04f 0000 	mov.w	r0, #0
 8018d5a:	d913      	bls.n	8018d84 <exp+0x5c>
 8018d5c:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 8018d60:	bf08      	it	eq
 8018d62:	4281      	cmpeq	r1, r0
 8018d64:	f000 80a0 	beq.w	8018ea8 <exp+0x180>
 8018d68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8018d6c:	4294      	cmp	r4, r2
 8018d6e:	d0e9      	beq.n	8018d44 <exp+0x1c>
 8018d70:	4283      	cmp	r3, r0
 8018d72:	da03      	bge.n	8018d7c <exp+0x54>
 8018d74:	b004      	add	sp, #16
 8018d76:	bcf0      	pop	{r4, r5, r6, r7}
 8018d78:	f000 b8c6 	b.w	8018f08 <__math_uflow>
 8018d7c:	b004      	add	sp, #16
 8018d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8018d80:	f000 b8ca 	b.w	8018f18 <__math_oflow>
 8018d84:	4604      	mov	r4, r0
 8018d86:	4950      	ldr	r1, [pc, #320]	; (8018ec8 <exp+0x1a0>)
 8018d88:	ed91 6b02 	vldr	d6, [r1, #8]
 8018d8c:	ed91 5b00 	vldr	d5, [r1]
 8018d90:	eeb0 7b46 	vmov.f64	d7, d6
 8018d94:	eea5 7b00 	vfma.f64	d7, d5, d0
 8018d98:	ee17 5a10 	vmov	r5, s14
 8018d9c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8018da0:	ed91 6b04 	vldr	d6, [r1, #16]
 8018da4:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 8018da8:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018dac:	ed91 6b06 	vldr	d6, [r1, #24]
 8018db0:	18d8      	adds	r0, r3, r3
 8018db2:	f100 030f 	add.w	r3, r0, #15
 8018db6:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 8018dba:	eea6 0b07 	vfma.f64	d0, d6, d7
 8018dbe:	ed91 3b0a 	vldr	d3, [r1, #40]	; 0x28
 8018dc2:	ee20 7b00 	vmul.f64	d7, d0, d0
 8018dc6:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 8018dca:	ed91 4b08 	vldr	d4, [r1, #32]
 8018dce:	ee30 6b06 	vadd.f64	d6, d0, d6
 8018dd2:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 8018dd6:	eea3 4b00 	vfma.f64	d4, d3, d0
 8018dda:	ed91 3b0e 	vldr	d3, [r1, #56]	; 0x38
 8018dde:	eea4 6b07 	vfma.f64	d6, d4, d7
 8018de2:	ee27 7b07 	vmul.f64	d7, d7, d7
 8018de6:	ed91 4b0c 	vldr	d4, [r1, #48]	; 0x30
 8018dea:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 8018dee:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8018df2:	eea3 4b00 	vfma.f64	d4, d3, d0
 8018df6:	2600      	movs	r6, #0
 8018df8:	19f2      	adds	r2, r6, r7
 8018dfa:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 8018dfe:	eea7 6b04 	vfma.f64	d6, d7, d4
 8018e02:	2c00      	cmp	r4, #0
 8018e04:	d14b      	bne.n	8018e9e <exp+0x176>
 8018e06:	42b5      	cmp	r5, r6
 8018e08:	db10      	blt.n	8018e2c <exp+0x104>
 8018e0a:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 8018e0e:	ed9f 7b28 	vldr	d7, [pc, #160]	; 8018eb0 <exp+0x188>
 8018e12:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 8018e16:	4610      	mov	r0, r2
 8018e18:	ec41 0b10 	vmov	d0, r0, r1
 8018e1c:	eea6 0b00 	vfma.f64	d0, d6, d0
 8018e20:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018e24:	b004      	add	sp, #16
 8018e26:	bcf0      	pop	{r4, r5, r6, r7}
 8018e28:	f000 b88a 	b.w	8018f40 <__math_check_oflow>
 8018e2c:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 8018e30:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8018e34:	4610      	mov	r0, r2
 8018e36:	ec41 0b17 	vmov	d7, r0, r1
 8018e3a:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8018e3e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8018e42:	ee37 5b06 	vadd.f64	d5, d7, d6
 8018e46:	eeb4 5bc4 	vcmpe.f64	d5, d4
 8018e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e4e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8018eb8 <exp+0x190>
 8018e52:	d51e      	bpl.n	8018e92 <exp+0x16a>
 8018e54:	ee35 3b04 	vadd.f64	d3, d5, d4
 8018e58:	ee37 7b45 	vsub.f64	d7, d7, d5
 8018e5c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8018e60:	ee34 6b43 	vsub.f64	d6, d4, d3
 8018e64:	ee36 6b05 	vadd.f64	d6, d6, d5
 8018e68:	ee36 6b07 	vadd.f64	d6, d6, d7
 8018e6c:	ee36 6b03 	vadd.f64	d6, d6, d3
 8018e70:	ee36 5b44 	vsub.f64	d5, d6, d4
 8018e74:	eeb5 5b40 	vcmp.f64	d5, #0.0
 8018e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e7c:	d101      	bne.n	8018e82 <exp+0x15a>
 8018e7e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8018ec0 <exp+0x198>
 8018e82:	ed8d 0b00 	vstr	d0, [sp]
 8018e86:	ed9d 7b00 	vldr	d7, [sp]
 8018e8a:	ee27 7b00 	vmul.f64	d7, d7, d0
 8018e8e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8018e92:	ee25 0b00 	vmul.f64	d0, d5, d0
 8018e96:	b004      	add	sp, #16
 8018e98:	bcf0      	pop	{r4, r5, r6, r7}
 8018e9a:	f000 b845 	b.w	8018f28 <__math_check_uflow>
 8018e9e:	ec43 2b10 	vmov	d0, r2, r3
 8018ea2:	eea6 0b00 	vfma.f64	d0, d6, d0
 8018ea6:	e751      	b.n	8018d4c <exp+0x24>
 8018ea8:	ed9f 0b05 	vldr	d0, [pc, #20]	; 8018ec0 <exp+0x198>
 8018eac:	e74e      	b.n	8018d4c <exp+0x24>
 8018eae:	bf00      	nop
 8018eb0:	00000000 	.word	0x00000000
 8018eb4:	7f000000 	.word	0x7f000000
 8018eb8:	00000000 	.word	0x00000000
 8018ebc:	00100000 	.word	0x00100000
	...
 8018ec8:	08026150 	.word	0x08026150

08018ecc <with_errno>:
 8018ecc:	b513      	push	{r0, r1, r4, lr}
 8018ece:	4604      	mov	r4, r0
 8018ed0:	ed8d 0b00 	vstr	d0, [sp]
 8018ed4:	f002 f86a 	bl	801afac <__errno>
 8018ed8:	ed9d 0b00 	vldr	d0, [sp]
 8018edc:	6004      	str	r4, [r0, #0]
 8018ede:	b002      	add	sp, #8
 8018ee0:	bd10      	pop	{r4, pc}

08018ee2 <xflow>:
 8018ee2:	b082      	sub	sp, #8
 8018ee4:	b158      	cbz	r0, 8018efe <xflow+0x1c>
 8018ee6:	eeb1 7b40 	vneg.f64	d7, d0
 8018eea:	ed8d 7b00 	vstr	d7, [sp]
 8018eee:	ed9d 7b00 	vldr	d7, [sp]
 8018ef2:	2022      	movs	r0, #34	; 0x22
 8018ef4:	ee20 0b07 	vmul.f64	d0, d0, d7
 8018ef8:	b002      	add	sp, #8
 8018efa:	f7ff bfe7 	b.w	8018ecc <with_errno>
 8018efe:	eeb0 7b40 	vmov.f64	d7, d0
 8018f02:	e7f2      	b.n	8018eea <xflow+0x8>
 8018f04:	0000      	movs	r0, r0
	...

08018f08 <__math_uflow>:
 8018f08:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f10 <__math_uflow+0x8>
 8018f0c:	f7ff bfe9 	b.w	8018ee2 <xflow>
 8018f10:	00000000 	.word	0x00000000
 8018f14:	10000000 	.word	0x10000000

08018f18 <__math_oflow>:
 8018f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8018f20 <__math_oflow+0x8>
 8018f1c:	f7ff bfe1 	b.w	8018ee2 <xflow>
 8018f20:	00000000 	.word	0x00000000
 8018f24:	70000000 	.word	0x70000000

08018f28 <__math_check_uflow>:
 8018f28:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8018f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f30:	d102      	bne.n	8018f38 <__math_check_uflow+0x10>
 8018f32:	2022      	movs	r0, #34	; 0x22
 8018f34:	f7ff bfca 	b.w	8018ecc <with_errno>
 8018f38:	4770      	bx	lr
 8018f3a:	0000      	movs	r0, r0
 8018f3c:	0000      	movs	r0, r0
	...

08018f40 <__math_check_oflow>:
 8018f40:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8018f60 <__math_check_oflow+0x20>
 8018f44:	eeb0 7bc0 	vabs.f64	d7, d0
 8018f48:	eeb4 7b46 	vcmp.f64	d7, d6
 8018f4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f50:	dd02      	ble.n	8018f58 <__math_check_oflow+0x18>
 8018f52:	2022      	movs	r0, #34	; 0x22
 8018f54:	f7ff bfba 	b.w	8018ecc <with_errno>
 8018f58:	4770      	bx	lr
 8018f5a:	bf00      	nop
 8018f5c:	f3af 8000 	nop.w
 8018f60:	ffffffff 	.word	0xffffffff
 8018f64:	7fefffff 	.word	0x7fefffff

08018f68 <checkint>:
 8018f68:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018f6c:	2b7e      	cmp	r3, #126	; 0x7e
 8018f6e:	dd10      	ble.n	8018f92 <checkint+0x2a>
 8018f70:	2b96      	cmp	r3, #150	; 0x96
 8018f72:	dc0c      	bgt.n	8018f8e <checkint+0x26>
 8018f74:	2201      	movs	r2, #1
 8018f76:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8018f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8018f7e:	1e5a      	subs	r2, r3, #1
 8018f80:	4202      	tst	r2, r0
 8018f82:	d106      	bne.n	8018f92 <checkint+0x2a>
 8018f84:	4203      	tst	r3, r0
 8018f86:	bf0c      	ite	eq
 8018f88:	2002      	moveq	r0, #2
 8018f8a:	2001      	movne	r0, #1
 8018f8c:	4770      	bx	lr
 8018f8e:	2002      	movs	r0, #2
 8018f90:	4770      	bx	lr
 8018f92:	2000      	movs	r0, #0
 8018f94:	4770      	bx	lr
	...

08018f98 <powf>:
 8018f98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018f9a:	ee10 1a10 	vmov	r1, s0
 8018f9e:	ee10 4a90 	vmov	r4, s1
 8018fa2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 8018fa6:	0062      	lsls	r2, r4, #1
 8018fa8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8018fac:	eef0 7a40 	vmov.f32	s15, s0
 8018fb0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 8018fb4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 8018fb8:	d252      	bcs.n	8019060 <powf+0xc8>
 8018fba:	4298      	cmp	r0, r3
 8018fbc:	d252      	bcs.n	8019064 <powf+0xcc>
 8018fbe:	2000      	movs	r0, #0
 8018fc0:	f101 4340 	add.w	r3, r1, #3221225472	; 0xc0000000
 8018fc4:	4a9e      	ldr	r2, [pc, #632]	; (8019240 <powf+0x2a8>)
 8018fc6:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 8018fca:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 8018fce:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 8018fd2:	0ddb      	lsrs	r3, r3, #23
 8018fd4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8018fd8:	05db      	lsls	r3, r3, #23
 8018fda:	ed94 5b00 	vldr	d5, [r4]
 8018fde:	1ac9      	subs	r1, r1, r3
 8018fe0:	ee07 1a90 	vmov	s15, r1
 8018fe4:	15db      	asrs	r3, r3, #23
 8018fe6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8018fea:	eea5 6b07 	vfma.f64	d6, d5, d7
 8018fee:	ed94 5b02 	vldr	d5, [r4, #8]
 8018ff2:	ee26 2b06 	vmul.f64	d2, d6, d6
 8018ff6:	ee22 1b02 	vmul.f64	d1, d2, d2
 8018ffa:	ee07 3a90 	vmov	s15, r3
 8018ffe:	ed92 3b42 	vldr	d3, [r2, #264]	; 0x108
 8019002:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019006:	ee37 7b05 	vadd.f64	d7, d7, d5
 801900a:	ed92 5b40 	vldr	d5, [r2, #256]	; 0x100
 801900e:	ed92 4b44 	vldr	d4, [r2, #272]	; 0x110
 8019012:	eea6 3b05 	vfma.f64	d3, d6, d5
 8019016:	ed92 5b46 	vldr	d5, [r2, #280]	; 0x118
 801901a:	eea6 5b04 	vfma.f64	d5, d6, d4
 801901e:	ed92 4b48 	vldr	d4, [r2, #288]	; 0x120
 8019022:	eea6 7b04 	vfma.f64	d7, d6, d4
 8019026:	eeb7 6ae0 	vcvt.f64.f32	d6, s1
 801902a:	eea2 7b05 	vfma.f64	d7, d2, d5
 801902e:	eea3 7b01 	vfma.f64	d7, d3, d1
 8019032:	ee26 6b07 	vmul.f64	d6, d6, d7
 8019036:	ee16 3a90 	vmov	r3, s13
 801903a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801903e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 8019042:	429a      	cmp	r2, r3
 8019044:	f0c0 80b0 	bcc.w	80191a8 <powf+0x210>
 8019048:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8019220 <powf+0x288>
 801904c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019054:	dd78      	ble.n	8019148 <powf+0x1b0>
 8019056:	b003      	add	sp, #12
 8019058:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801905c:	f000 b9ea 	b.w	8019434 <__math_oflowf>
 8019060:	4298      	cmp	r0, r3
 8019062:	d32d      	bcc.n	80190c0 <powf+0x128>
 8019064:	b952      	cbnz	r2, 801907c <powf+0xe4>
 8019066:	f481 0180 	eor.w	r1, r1, #4194304	; 0x400000
 801906a:	0049      	lsls	r1, r1, #1
 801906c:	f511 0f00 	cmn.w	r1, #8388608	; 0x800000
 8019070:	f240 80c8 	bls.w	8019204 <powf+0x26c>
 8019074:	ee37 0aa0 	vadd.f32	s0, s15, s1
 8019078:	b003      	add	sp, #12
 801907a:	bd30      	pop	{r4, r5, pc}
 801907c:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 8019080:	d105      	bne.n	801908e <powf+0xf6>
 8019082:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8019086:	0064      	lsls	r4, r4, #1
 8019088:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801908c:	e7f0      	b.n	8019070 <powf+0xd8>
 801908e:	0049      	lsls	r1, r1, #1
 8019090:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
 8019094:	d8ee      	bhi.n	8019074 <powf+0xdc>
 8019096:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801909a:	d1eb      	bne.n	8019074 <powf+0xdc>
 801909c:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80190a0:	f000 80b0 	beq.w	8019204 <powf+0x26c>
 80190a4:	f1b1 4ffe 	cmp.w	r1, #2130706432	; 0x7f000000
 80190a8:	ea6f 0404 	mvn.w	r4, r4
 80190ac:	bf34      	ite	cc
 80190ae:	2100      	movcc	r1, #0
 80190b0:	2101      	movcs	r1, #1
 80190b2:	0fe4      	lsrs	r4, r4, #31
 80190b4:	42a1      	cmp	r1, r4
 80190b6:	f040 80a8 	bne.w	801920a <powf+0x272>
 80190ba:	ee20 0aa0 	vmul.f32	s0, s1, s1
 80190be:	e7db      	b.n	8019078 <powf+0xe0>
 80190c0:	004d      	lsls	r5, r1, #1
 80190c2:	1e6a      	subs	r2, r5, #1
 80190c4:	429a      	cmp	r2, r3
 80190c6:	d31c      	bcc.n	8019102 <powf+0x16a>
 80190c8:	2900      	cmp	r1, #0
 80190ca:	ee20 0a00 	vmul.f32	s0, s0, s0
 80190ce:	da0f      	bge.n	80190f0 <powf+0x158>
 80190d0:	ee10 0a90 	vmov	r0, s1
 80190d4:	f7ff ff48 	bl	8018f68 <checkint>
 80190d8:	2801      	cmp	r0, #1
 80190da:	d109      	bne.n	80190f0 <powf+0x158>
 80190dc:	eeb1 0a40 	vneg.f32	s0, s0
 80190e0:	b945      	cbnz	r5, 80190f4 <powf+0x15c>
 80190e2:	2c00      	cmp	r4, #0
 80190e4:	dac8      	bge.n	8019078 <powf+0xe0>
 80190e6:	b003      	add	sp, #12
 80190e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80190ec:	f000 b9a8 	b.w	8019440 <__math_divzerof>
 80190f0:	2000      	movs	r0, #0
 80190f2:	e7f5      	b.n	80190e0 <powf+0x148>
 80190f4:	2c00      	cmp	r4, #0
 80190f6:	dabf      	bge.n	8019078 <powf+0xe0>
 80190f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80190fc:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8019100:	e7ba      	b.n	8019078 <powf+0xe0>
 8019102:	2900      	cmp	r1, #0
 8019104:	da1e      	bge.n	8019144 <powf+0x1ac>
 8019106:	ee10 0a90 	vmov	r0, s1
 801910a:	f7ff ff2d 	bl	8018f68 <checkint>
 801910e:	b920      	cbnz	r0, 801911a <powf+0x182>
 8019110:	b003      	add	sp, #12
 8019112:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019116:	f000 b9a5 	b.w	8019464 <__math_invalidf>
 801911a:	1e43      	subs	r3, r0, #1
 801911c:	4258      	negs	r0, r3
 801911e:	4158      	adcs	r0, r3
 8019120:	0400      	lsls	r0, r0, #16
 8019122:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8019126:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801912a:	f4bf af49 	bcs.w	8018fc0 <powf+0x28>
 801912e:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8019244 <powf+0x2ac>
 8019132:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019136:	ee10 3a10 	vmov	r3, s0
 801913a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801913e:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 8019142:	e73d      	b.n	8018fc0 <powf+0x28>
 8019144:	2000      	movs	r0, #0
 8019146:	e7ee      	b.n	8019126 <powf+0x18e>
 8019148:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8019228 <powf+0x290>
 801914c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019150:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019154:	dd10      	ble.n	8019178 <powf+0x1e0>
 8019156:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801915a:	2800      	cmp	r0, #0
 801915c:	d158      	bne.n	8019210 <powf+0x278>
 801915e:	9300      	str	r3, [sp, #0]
 8019160:	eddd 7a00 	vldr	s15, [sp]
 8019164:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8019168:	ee77 7a87 	vadd.f32	s15, s15, s14
 801916c:	eef4 7a47 	vcmp.f32	s15, s14
 8019170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019174:	f47f af6f 	bne.w	8019056 <powf+0xbe>
 8019178:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8019230 <powf+0x298>
 801917c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019184:	d804      	bhi.n	8019190 <powf+0x1f8>
 8019186:	b003      	add	sp, #12
 8019188:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801918c:	f000 b946 	b.w	801941c <__math_uflowf>
 8019190:	ed9f 7b29 	vldr	d7, [pc, #164]	; 8019238 <powf+0x2a0>
 8019194:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801919c:	d504      	bpl.n	80191a8 <powf+0x210>
 801919e:	b003      	add	sp, #12
 80191a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80191a4:	f000 b940 	b.w	8019428 <__math_may_uflowf>
 80191a8:	4b27      	ldr	r3, [pc, #156]	; (8019248 <powf+0x2b0>)
 80191aa:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80191ae:	ed93 5b40 	vldr	d5, [r3, #256]	; 0x100
 80191b2:	ee36 7b05 	vadd.f64	d7, d6, d5
 80191b6:	ee17 2a10 	vmov	r2, s14
 80191ba:	ee37 7b45 	vsub.f64	d7, d7, d5
 80191be:	f002 011f 	and.w	r1, r2, #31
 80191c2:	ee36 7b47 	vsub.f64	d7, d6, d7
 80191c6:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 80191ca:	ee27 4b07 	vmul.f64	d4, d7, d7
 80191ce:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 80191d2:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 80191d6:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 80191da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80191de:	686d      	ldr	r5, [r5, #4]
 80191e0:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 80191e4:	1882      	adds	r2, r0, r2
 80191e6:	2300      	movs	r3, #0
 80191e8:	1918      	adds	r0, r3, r4
 80191ea:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 80191ee:	eea7 0b05 	vfma.f64	d0, d7, d5
 80191f2:	ec41 0b17 	vmov	d7, r0, r1
 80191f6:	eea6 0b04 	vfma.f64	d0, d6, d4
 80191fa:	ee20 0b07 	vmul.f64	d0, d0, d7
 80191fe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019202:	e739      	b.n	8019078 <powf+0xe0>
 8019204:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8019208:	e736      	b.n	8019078 <powf+0xe0>
 801920a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801924c <powf+0x2b4>
 801920e:	e733      	b.n	8019078 <powf+0xe0>
 8019210:	9301      	str	r3, [sp, #4]
 8019212:	eddd 7a01 	vldr	s15, [sp, #4]
 8019216:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801921a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801921e:	e7a5      	b.n	801916c <powf+0x1d4>
 8019220:	ffd1d571 	.word	0xffd1d571
 8019224:	405fffff 	.word	0x405fffff
 8019228:	ffa3aae2 	.word	0xffa3aae2
 801922c:	405fffff 	.word	0x405fffff
 8019230:	00000000 	.word	0x00000000
 8019234:	c062c000 	.word	0xc062c000
 8019238:	00000000 	.word	0x00000000
 801923c:	c062a000 	.word	0xc062a000
 8019240:	08027140 	.word	0x08027140
 8019244:	4b000000 	.word	0x4b000000
 8019248:	08025ee8 	.word	0x08025ee8
 801924c:	00000000 	.word	0x00000000

08019250 <sinf_poly>:
 8019250:	07cb      	lsls	r3, r1, #31
 8019252:	d412      	bmi.n	801927a <sinf_poly+0x2a>
 8019254:	ee21 5b00 	vmul.f64	d5, d1, d0
 8019258:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801925c:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 8019260:	eea6 7b01 	vfma.f64	d7, d6, d1
 8019264:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 8019268:	ee21 1b05 	vmul.f64	d1, d1, d5
 801926c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8019270:	eea7 0b01 	vfma.f64	d0, d7, d1
 8019274:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8019278:	4770      	bx	lr
 801927a:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801927e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8019282:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 8019286:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801928a:	eea1 7b06 	vfma.f64	d7, d1, d6
 801928e:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 8019292:	eea1 0b06 	vfma.f64	d0, d1, d6
 8019296:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801929a:	ee21 1b05 	vmul.f64	d1, d1, d5
 801929e:	eea5 0b06 	vfma.f64	d0, d5, d6
 80192a2:	e7e5      	b.n	8019270 <sinf_poly+0x20>
 80192a4:	0000      	movs	r0, r0
	...

080192a8 <cosf>:
 80192a8:	b538      	push	{r3, r4, r5, lr}
 80192aa:	ee10 4a10 	vmov	r4, s0
 80192ae:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80192b2:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 80192b6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80192ba:	d21f      	bcs.n	80192fc <cosf+0x54>
 80192bc:	ee27 7b07 	vmul.f64	d7, d7, d7
 80192c0:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 80192c4:	f0c0 8086 	bcc.w	80193d4 <cosf+0x12c>
 80192c8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80192cc:	4b46      	ldr	r3, [pc, #280]	; (80193e8 <cosf+0x140>)
 80192ce:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 80192d2:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 80192d6:	ed93 0b0c 	vldr	d0, [r3, #48]	; 0x30
 80192da:	eea7 6b05 	vfma.f64	d6, d7, d5
 80192de:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 80192e2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80192e6:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 80192ea:	ee27 7b04 	vmul.f64	d7, d7, d4
 80192ee:	eea4 0b05 	vfma.f64	d0, d4, d5
 80192f2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80192f6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80192fa:	bd38      	pop	{r3, r4, r5, pc}
 80192fc:	f240 422e 	movw	r2, #1070	; 0x42e
 8019300:	4293      	cmp	r3, r2
 8019302:	d829      	bhi.n	8019358 <cosf+0xb0>
 8019304:	4b38      	ldr	r3, [pc, #224]	; (80193e8 <cosf+0x140>)
 8019306:	ed93 6b08 	vldr	d6, [r3, #32]
 801930a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801930e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8019312:	f103 0070 	add.w	r0, r3, #112	; 0x70
 8019316:	ee16 1a90 	vmov	r1, s13
 801931a:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801931e:	1609      	asrs	r1, r1, #24
 8019320:	ee06 1a90 	vmov	s13, r1
 8019324:	f001 0203 	and.w	r2, r1, #3
 8019328:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801932c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8019330:	ed92 0b00 	vldr	d0, [r2]
 8019334:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 8019338:	f011 0f02 	tst.w	r1, #2
 801933c:	bf08      	it	eq
 801933e:	4618      	moveq	r0, r3
 8019340:	f081 0101 	eor.w	r1, r1, #1
 8019344:	eea5 7b46 	vfms.f64	d7, d5, d6
 8019348:	ee27 1b07 	vmul.f64	d1, d7, d7
 801934c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019350:	ee27 0b00 	vmul.f64	d0, d7, d0
 8019354:	f7ff bf7c 	b.w	8019250 <sinf_poly>
 8019358:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801935c:	d236      	bcs.n	80193cc <cosf+0x124>
 801935e:	4a23      	ldr	r2, [pc, #140]	; (80193ec <cosf+0x144>)
 8019360:	f3c4 6183 	ubfx	r1, r4, #26, #4
 8019364:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 8019368:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801936c:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 8019370:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 8019374:	6a2a      	ldr	r2, [r5, #32]
 8019376:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801937a:	4083      	lsls	r3, r0
 801937c:	fba3 2002 	umull	r2, r0, r3, r2
 8019380:	692a      	ldr	r2, [r5, #16]
 8019382:	4359      	muls	r1, r3
 8019384:	fbe3 0102 	umlal	r0, r1, r3, r2
 8019388:	f101 5300 	add.w	r3, r1, #536870912	; 0x20000000
 801938c:	0f9d      	lsrs	r5, r3, #30
 801938e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8019392:	1ac9      	subs	r1, r1, r3
 8019394:	f7e7 f936 	bl	8000604 <__aeabi_l2d>
 8019398:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801939c:	4b12      	ldr	r3, [pc, #72]	; (80193e8 <cosf+0x140>)
 801939e:	ed9f 0b10 	vldr	d0, [pc, #64]	; 80193e0 <cosf+0x138>
 80193a2:	ec41 0b17 	vmov	d7, r0, r1
 80193a6:	f004 0203 	and.w	r2, r4, #3
 80193aa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80193ae:	f014 0f02 	tst.w	r4, #2
 80193b2:	ee27 0b00 	vmul.f64	d0, d7, d0
 80193b6:	f103 0070 	add.w	r0, r3, #112	; 0x70
 80193ba:	ed92 7b00 	vldr	d7, [r2]
 80193be:	ee20 1b00 	vmul.f64	d1, d0, d0
 80193c2:	f085 0101 	eor.w	r1, r5, #1
 80193c6:	bf08      	it	eq
 80193c8:	4618      	moveq	r0, r3
 80193ca:	e7bf      	b.n	801934c <cosf+0xa4>
 80193cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80193d0:	f000 b848 	b.w	8019464 <__math_invalidf>
 80193d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80193d8:	e78f      	b.n	80192fa <cosf+0x52>
 80193da:	bf00      	nop
 80193dc:	f3af 8000 	nop.w
 80193e0:	54442d18 	.word	0x54442d18
 80193e4:	3c1921fb 	.word	0x3c1921fb
 80193e8:	08026b40 	.word	0x08026b40
 80193ec:	08026ae0 	.word	0x08026ae0

080193f0 <with_errnof>:
 80193f0:	b513      	push	{r0, r1, r4, lr}
 80193f2:	4604      	mov	r4, r0
 80193f4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80193f8:	f001 fdd8 	bl	801afac <__errno>
 80193fc:	ed9d 0a01 	vldr	s0, [sp, #4]
 8019400:	6004      	str	r4, [r0, #0]
 8019402:	b002      	add	sp, #8
 8019404:	bd10      	pop	{r4, pc}

08019406 <xflowf>:
 8019406:	b130      	cbz	r0, 8019416 <xflowf+0x10>
 8019408:	eef1 7a40 	vneg.f32	s15, s0
 801940c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019410:	2022      	movs	r0, #34	; 0x22
 8019412:	f7ff bfed 	b.w	80193f0 <with_errnof>
 8019416:	eef0 7a40 	vmov.f32	s15, s0
 801941a:	e7f7      	b.n	801940c <xflowf+0x6>

0801941c <__math_uflowf>:
 801941c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019424 <__math_uflowf+0x8>
 8019420:	f7ff bff1 	b.w	8019406 <xflowf>
 8019424:	10000000 	.word	0x10000000

08019428 <__math_may_uflowf>:
 8019428:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8019430 <__math_may_uflowf+0x8>
 801942c:	f7ff bfeb 	b.w	8019406 <xflowf>
 8019430:	1a200000 	.word	0x1a200000

08019434 <__math_oflowf>:
 8019434:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801943c <__math_oflowf+0x8>
 8019438:	f7ff bfe5 	b.w	8019406 <xflowf>
 801943c:	70000000 	.word	0x70000000

08019440 <__math_divzerof>:
 8019440:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8019460 <__math_divzerof+0x20>
 8019444:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8019448:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801944c:	2800      	cmp	r0, #0
 801944e:	f04f 0022 	mov.w	r0, #34	; 0x22
 8019452:	fe47 7a27 	vseleq.f32	s15, s14, s15
 8019456:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801945a:	f7ff bfc9 	b.w	80193f0 <with_errnof>
 801945e:	bf00      	nop
 8019460:	00000000 	.word	0x00000000

08019464 <__math_invalidf>:
 8019464:	eef0 7a40 	vmov.f32	s15, s0
 8019468:	ee30 7a40 	vsub.f32	s14, s0, s0
 801946c:	eef4 7a67 	vcmp.f32	s15, s15
 8019470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019474:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8019478:	d602      	bvs.n	8019480 <__math_invalidf+0x1c>
 801947a:	2021      	movs	r0, #33	; 0x21
 801947c:	f7ff bfb8 	b.w	80193f0 <with_errnof>
 8019480:	4770      	bx	lr
	...

08019484 <log10f>:
 8019484:	b508      	push	{r3, lr}
 8019486:	ed2d 8b02 	vpush	{d8}
 801948a:	eeb0 8a40 	vmov.f32	s16, s0
 801948e:	f000 f9df 	bl	8019850 <__ieee754_log10f>
 8019492:	eeb4 8a48 	vcmp.f32	s16, s16
 8019496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801949a:	d60f      	bvs.n	80194bc <log10f+0x38>
 801949c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80194a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194a4:	d80a      	bhi.n	80194bc <log10f+0x38>
 80194a6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80194aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194ae:	d108      	bne.n	80194c2 <log10f+0x3e>
 80194b0:	f001 fd7c 	bl	801afac <__errno>
 80194b4:	2322      	movs	r3, #34	; 0x22
 80194b6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80194d8 <log10f+0x54>
 80194ba:	6003      	str	r3, [r0, #0]
 80194bc:	ecbd 8b02 	vpop	{d8}
 80194c0:	bd08      	pop	{r3, pc}
 80194c2:	f001 fd73 	bl	801afac <__errno>
 80194c6:	ecbd 8b02 	vpop	{d8}
 80194ca:	2321      	movs	r3, #33	; 0x21
 80194cc:	6003      	str	r3, [r0, #0]
 80194ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80194d2:	4802      	ldr	r0, [pc, #8]	; (80194dc <log10f+0x58>)
 80194d4:	f000 b80c 	b.w	80194f0 <nanf>
 80194d8:	ff800000 	.word	0xff800000
 80194dc:	08025ee0 	.word	0x08025ee0

080194e0 <fabsf>:
 80194e0:	ee10 3a10 	vmov	r3, s0
 80194e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80194e8:	ee00 3a10 	vmov	s0, r3
 80194ec:	4770      	bx	lr
	...

080194f0 <nanf>:
 80194f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80194f8 <nanf+0x8>
 80194f4:	4770      	bx	lr
 80194f6:	bf00      	nop
 80194f8:	7fc00000 	.word	0x7fc00000

080194fc <tanf>:
 80194fc:	ee10 3a10 	vmov	r3, s0
 8019500:	b507      	push	{r0, r1, r2, lr}
 8019502:	4a12      	ldr	r2, [pc, #72]	; (801954c <tanf+0x50>)
 8019504:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019508:	4293      	cmp	r3, r2
 801950a:	dc07      	bgt.n	801951c <tanf+0x20>
 801950c:	eddf 0a10 	vldr	s1, [pc, #64]	; 8019550 <tanf+0x54>
 8019510:	2001      	movs	r0, #1
 8019512:	b003      	add	sp, #12
 8019514:	f85d eb04 	ldr.w	lr, [sp], #4
 8019518:	f000 b8ba 	b.w	8019690 <__kernel_tanf>
 801951c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019520:	db04      	blt.n	801952c <tanf+0x30>
 8019522:	ee30 0a40 	vsub.f32	s0, s0, s0
 8019526:	b003      	add	sp, #12
 8019528:	f85d fb04 	ldr.w	pc, [sp], #4
 801952c:	4668      	mov	r0, sp
 801952e:	f000 f9e7 	bl	8019900 <__ieee754_rem_pio2f>
 8019532:	0040      	lsls	r0, r0, #1
 8019534:	f000 0002 	and.w	r0, r0, #2
 8019538:	eddd 0a01 	vldr	s1, [sp, #4]
 801953c:	ed9d 0a00 	vldr	s0, [sp]
 8019540:	f1c0 0001 	rsb	r0, r0, #1
 8019544:	f000 f8a4 	bl	8019690 <__kernel_tanf>
 8019548:	e7ed      	b.n	8019526 <tanf+0x2a>
 801954a:	bf00      	nop
 801954c:	3f490fda 	.word	0x3f490fda
 8019550:	00000000 	.word	0x00000000

08019554 <tanhf>:
 8019554:	b538      	push	{r3, r4, r5, lr}
 8019556:	ee10 5a10 	vmov	r5, s0
 801955a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801955e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8019562:	ed2d 8b02 	vpush	{d8}
 8019566:	db0f      	blt.n	8019588 <tanhf+0x34>
 8019568:	4b2a      	ldr	r3, [pc, #168]	; (8019614 <tanhf+0xc0>)
 801956a:	ed93 6a00 	vldr	s12, [r3]
 801956e:	edd3 6a00 	vldr	s13, [r3]
 8019572:	eec6 7a00 	vdiv.f32	s15, s12, s0
 8019576:	2d00      	cmp	r5, #0
 8019578:	bfac      	ite	ge
 801957a:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 801957e:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 8019582:	ecbd 8b02 	vpop	{d8}
 8019586:	bd38      	pop	{r3, r4, r5, pc}
 8019588:	4a23      	ldr	r2, [pc, #140]	; (8019618 <tanhf+0xc4>)
 801958a:	4293      	cmp	r3, r2
 801958c:	dc39      	bgt.n	8019602 <tanhf+0xae>
 801958e:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8019592:	da07      	bge.n	80195a4 <tanhf+0x50>
 8019594:	4b1f      	ldr	r3, [pc, #124]	; (8019614 <tanhf+0xc0>)
 8019596:	edd3 7a00 	vldr	s15, [r3]
 801959a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801959e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80195a2:	e7ee      	b.n	8019582 <tanhf+0x2e>
 80195a4:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80195a8:	4c1c      	ldr	r4, [pc, #112]	; (801961c <tanhf+0xc8>)
 80195aa:	db19      	blt.n	80195e0 <tanhf+0x8c>
 80195ac:	f7ff ff98 	bl	80194e0 <fabsf>
 80195b0:	edd4 7a00 	vldr	s15, [r4]
 80195b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80195b8:	f000 ffc2 	bl	801a540 <expm1f>
 80195bc:	4b15      	ldr	r3, [pc, #84]	; (8019614 <tanhf+0xc0>)
 80195be:	edd3 7a00 	vldr	s15, [r3]
 80195c2:	edd4 6a00 	vldr	s13, [r4]
 80195c6:	ed94 7a00 	vldr	s14, [r4]
 80195ca:	ee37 0a00 	vadd.f32	s0, s14, s0
 80195ce:	ee86 7a80 	vdiv.f32	s14, s13, s0
 80195d2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 80195d6:	2d00      	cmp	r5, #0
 80195d8:	bfb8      	it	lt
 80195da:	eeb1 0a40 	vneglt.f32	s0, s0
 80195de:	e7d0      	b.n	8019582 <tanhf+0x2e>
 80195e0:	ed94 8a00 	vldr	s16, [r4]
 80195e4:	f7ff ff7c 	bl	80194e0 <fabsf>
 80195e8:	ee28 0a40 	vnmul.f32	s0, s16, s0
 80195ec:	f000 ffa8 	bl	801a540 <expm1f>
 80195f0:	edd4 7a00 	vldr	s15, [r4]
 80195f4:	ee77 7a80 	vadd.f32	s15, s15, s0
 80195f8:	eeb1 7a40 	vneg.f32	s14, s0
 80195fc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8019600:	e7e9      	b.n	80195d6 <tanhf+0x82>
 8019602:	4b04      	ldr	r3, [pc, #16]	; (8019614 <tanhf+0xc0>)
 8019604:	ed93 0a00 	vldr	s0, [r3]
 8019608:	4b05      	ldr	r3, [pc, #20]	; (8019620 <tanhf+0xcc>)
 801960a:	edd3 7a00 	vldr	s15, [r3]
 801960e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019612:	e7e0      	b.n	80195d6 <tanhf+0x82>
 8019614:	20000924 	.word	0x20000924
 8019618:	41afffff 	.word	0x41afffff
 801961c:	2000092c 	.word	0x2000092c
 8019620:	20000928 	.word	0x20000928
 8019624:	00000000 	.word	0x00000000

08019628 <tan>:
 8019628:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801962a:	eeb0 7b40 	vmov.f64	d7, d0
 801962e:	ee17 3a90 	vmov	r3, s15
 8019632:	4a15      	ldr	r2, [pc, #84]	; (8019688 <tan+0x60>)
 8019634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019638:	4293      	cmp	r3, r2
 801963a:	dc07      	bgt.n	801964c <tan+0x24>
 801963c:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8019680 <tan+0x58>
 8019640:	2001      	movs	r0, #1
 8019642:	b005      	add	sp, #20
 8019644:	f85d eb04 	ldr.w	lr, [sp], #4
 8019648:	f000 be5e 	b.w	801a308 <__kernel_tan>
 801964c:	4a0f      	ldr	r2, [pc, #60]	; (801968c <tan+0x64>)
 801964e:	4293      	cmp	r3, r2
 8019650:	dd04      	ble.n	801965c <tan+0x34>
 8019652:	ee30 0b40 	vsub.f64	d0, d0, d0
 8019656:	b005      	add	sp, #20
 8019658:	f85d fb04 	ldr.w	pc, [sp], #4
 801965c:	4668      	mov	r0, sp
 801965e:	f000 fa7b 	bl	8019b58 <__ieee754_rem_pio2>
 8019662:	0040      	lsls	r0, r0, #1
 8019664:	f000 0002 	and.w	r0, r0, #2
 8019668:	ed9d 1b02 	vldr	d1, [sp, #8]
 801966c:	ed9d 0b00 	vldr	d0, [sp]
 8019670:	f1c0 0001 	rsb	r0, r0, #1
 8019674:	f000 fe48 	bl	801a308 <__kernel_tan>
 8019678:	e7ed      	b.n	8019656 <tan+0x2e>
 801967a:	bf00      	nop
 801967c:	f3af 8000 	nop.w
	...
 8019688:	3fe921fb 	.word	0x3fe921fb
 801968c:	7fefffff 	.word	0x7fefffff

08019690 <__kernel_tanf>:
 8019690:	b508      	push	{r3, lr}
 8019692:	ee10 3a10 	vmov	r3, s0
 8019696:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801969a:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801969e:	eef0 7a40 	vmov.f32	s15, s0
 80196a2:	da17      	bge.n	80196d4 <__kernel_tanf+0x44>
 80196a4:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80196a8:	ee17 1a10 	vmov	r1, s14
 80196ac:	bb41      	cbnz	r1, 8019700 <__kernel_tanf+0x70>
 80196ae:	1c43      	adds	r3, r0, #1
 80196b0:	4313      	orrs	r3, r2
 80196b2:	d108      	bne.n	80196c6 <__kernel_tanf+0x36>
 80196b4:	f7ff ff14 	bl	80194e0 <fabsf>
 80196b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80196bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80196c0:	eeb0 0a67 	vmov.f32	s0, s15
 80196c4:	bd08      	pop	{r3, pc}
 80196c6:	2801      	cmp	r0, #1
 80196c8:	d0fa      	beq.n	80196c0 <__kernel_tanf+0x30>
 80196ca:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80196ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80196d2:	e7f5      	b.n	80196c0 <__kernel_tanf+0x30>
 80196d4:	494c      	ldr	r1, [pc, #304]	; (8019808 <__kernel_tanf+0x178>)
 80196d6:	428a      	cmp	r2, r1
 80196d8:	db12      	blt.n	8019700 <__kernel_tanf+0x70>
 80196da:	2b00      	cmp	r3, #0
 80196dc:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 801980c <__kernel_tanf+0x17c>
 80196e0:	bfb8      	it	lt
 80196e2:	eef1 7a40 	vneglt.f32	s15, s0
 80196e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80196ea:	eddf 7a49 	vldr	s15, [pc, #292]	; 8019810 <__kernel_tanf+0x180>
 80196ee:	bfb8      	it	lt
 80196f0:	eef1 0a60 	vneglt.f32	s1, s1
 80196f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80196f8:	eddf 0a46 	vldr	s1, [pc, #280]	; 8019814 <__kernel_tanf+0x184>
 80196fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019700:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8019704:	eddf 5a44 	vldr	s11, [pc, #272]	; 8019818 <__kernel_tanf+0x188>
 8019708:	ed9f 6a44 	vldr	s12, [pc, #272]	; 801981c <__kernel_tanf+0x18c>
 801970c:	ed9f 5a44 	vldr	s10, [pc, #272]	; 8019820 <__kernel_tanf+0x190>
 8019710:	493d      	ldr	r1, [pc, #244]	; (8019808 <__kernel_tanf+0x178>)
 8019712:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8019716:	428a      	cmp	r2, r1
 8019718:	eea7 6a25 	vfma.f32	s12, s14, s11
 801971c:	eddf 5a41 	vldr	s11, [pc, #260]	; 8019824 <__kernel_tanf+0x194>
 8019720:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019724:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8019828 <__kernel_tanf+0x198>
 8019728:	eea5 6a87 	vfma.f32	s12, s11, s14
 801972c:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801982c <__kernel_tanf+0x19c>
 8019730:	eee6 5a07 	vfma.f32	s11, s12, s14
 8019734:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8019830 <__kernel_tanf+0x1a0>
 8019738:	eea5 6a87 	vfma.f32	s12, s11, s14
 801973c:	eddf 5a3d 	vldr	s11, [pc, #244]	; 8019834 <__kernel_tanf+0x1a4>
 8019740:	eee7 5a05 	vfma.f32	s11, s14, s10
 8019744:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8019838 <__kernel_tanf+0x1a8>
 8019748:	eea5 5a87 	vfma.f32	s10, s11, s14
 801974c:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801983c <__kernel_tanf+0x1ac>
 8019750:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019754:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8019840 <__kernel_tanf+0x1b0>
 8019758:	eea5 5a87 	vfma.f32	s10, s11, s14
 801975c:	eddf 5a39 	vldr	s11, [pc, #228]	; 8019844 <__kernel_tanf+0x1b4>
 8019760:	eee5 5a07 	vfma.f32	s11, s10, s14
 8019764:	eeb0 7a46 	vmov.f32	s14, s12
 8019768:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801976c:	ee27 5aa6 	vmul.f32	s10, s15, s13
 8019770:	eeb0 6a60 	vmov.f32	s12, s1
 8019774:	eea7 6a05 	vfma.f32	s12, s14, s10
 8019778:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8019848 <__kernel_tanf+0x1b8>
 801977c:	eee6 0a26 	vfma.f32	s1, s12, s13
 8019780:	eee5 0a07 	vfma.f32	s1, s10, s14
 8019784:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8019788:	db1d      	blt.n	80197c6 <__kernel_tanf+0x136>
 801978a:	ee07 0a10 	vmov	s14, r0
 801978e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019792:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8019796:	ee76 6a87 	vadd.f32	s13, s13, s14
 801979a:	179b      	asrs	r3, r3, #30
 801979c:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80197a0:	f003 0302 	and.w	r3, r3, #2
 80197a4:	f1c3 0301 	rsb	r3, r3, #1
 80197a8:	ee76 6a60 	vsub.f32	s13, s12, s1
 80197ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80197b0:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80197b4:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80197b8:	ee07 3a90 	vmov	s15, r3
 80197bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80197c4:	e77c      	b.n	80196c0 <__kernel_tanf+0x30>
 80197c6:	2801      	cmp	r0, #1
 80197c8:	d01b      	beq.n	8019802 <__kernel_tanf+0x172>
 80197ca:	4b20      	ldr	r3, [pc, #128]	; (801984c <__kernel_tanf+0x1bc>)
 80197cc:	ee16 2a90 	vmov	r2, s13
 80197d0:	401a      	ands	r2, r3
 80197d2:	ee05 2a90 	vmov	s11, r2
 80197d6:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80197da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80197de:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80197e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80197e6:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 80197ea:	ee16 2a10 	vmov	r2, s12
 80197ee:	4013      	ands	r3, r2
 80197f0:	ee07 3a90 	vmov	s15, r3
 80197f4:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80197f8:	eea0 7aa7 	vfma.f32	s14, s1, s15
 80197fc:	eee7 7a06 	vfma.f32	s15, s14, s12
 8019800:	e75e      	b.n	80196c0 <__kernel_tanf+0x30>
 8019802:	eef0 7a66 	vmov.f32	s15, s13
 8019806:	e75b      	b.n	80196c0 <__kernel_tanf+0x30>
 8019808:	3f2ca140 	.word	0x3f2ca140
 801980c:	3f490fda 	.word	0x3f490fda
 8019810:	33222168 	.word	0x33222168
 8019814:	00000000 	.word	0x00000000
 8019818:	b79bae5f 	.word	0xb79bae5f
 801981c:	38a3f445 	.word	0x38a3f445
 8019820:	37d95384 	.word	0x37d95384
 8019824:	3a1a26c8 	.word	0x3a1a26c8
 8019828:	3b6b6916 	.word	0x3b6b6916
 801982c:	3cb327a4 	.word	0x3cb327a4
 8019830:	3e088889 	.word	0x3e088889
 8019834:	3895c07a 	.word	0x3895c07a
 8019838:	398137b9 	.word	0x398137b9
 801983c:	3abede48 	.word	0x3abede48
 8019840:	3c11371f 	.word	0x3c11371f
 8019844:	3d5d0dd1 	.word	0x3d5d0dd1
 8019848:	3eaaaaab 	.word	0x3eaaaaab
 801984c:	fffff000 	.word	0xfffff000

08019850 <__ieee754_log10f>:
 8019850:	b508      	push	{r3, lr}
 8019852:	ee10 2a10 	vmov	r2, s0
 8019856:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 801985a:	ed2d 8b02 	vpush	{d8}
 801985e:	d108      	bne.n	8019872 <__ieee754_log10f+0x22>
 8019860:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80198e8 <__ieee754_log10f+0x98>
 8019864:	eddf 7a21 	vldr	s15, [pc, #132]	; 80198ec <__ieee754_log10f+0x9c>
 8019868:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801986c:	ecbd 8b02 	vpop	{d8}
 8019870:	bd08      	pop	{r3, pc}
 8019872:	2a00      	cmp	r2, #0
 8019874:	da02      	bge.n	801987c <__ieee754_log10f+0x2c>
 8019876:	ee30 7a40 	vsub.f32	s14, s0, s0
 801987a:	e7f3      	b.n	8019864 <__ieee754_log10f+0x14>
 801987c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8019880:	db02      	blt.n	8019888 <__ieee754_log10f+0x38>
 8019882:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019886:	e7f1      	b.n	801986c <__ieee754_log10f+0x1c>
 8019888:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 801988c:	bfbf      	itttt	lt
 801988e:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 80198f0 <__ieee754_log10f+0xa0>
 8019892:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8019896:	f06f 0118 	mvnlt.w	r1, #24
 801989a:	ee17 2a90 	vmovlt	r2, s15
 801989e:	ea4f 53e2 	mov.w	r3, r2, asr #23
 80198a2:	bfa8      	it	ge
 80198a4:	2100      	movge	r1, #0
 80198a6:	3b7f      	subs	r3, #127	; 0x7f
 80198a8:	440b      	add	r3, r1
 80198aa:	0fd9      	lsrs	r1, r3, #31
 80198ac:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 80198b0:	ee07 3a90 	vmov	s15, r3
 80198b4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80198b8:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 80198bc:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 80198c0:	ee00 3a10 	vmov	s0, r3
 80198c4:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80198c8:	f7ff f960 	bl	8018b8c <logf>
 80198cc:	eddf 7a09 	vldr	s15, [pc, #36]	; 80198f4 <__ieee754_log10f+0xa4>
 80198d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 80198d4:	eddf 7a08 	vldr	s15, [pc, #32]	; 80198f8 <__ieee754_log10f+0xa8>
 80198d8:	eea8 0a27 	vfma.f32	s0, s16, s15
 80198dc:	eddf 7a07 	vldr	s15, [pc, #28]	; 80198fc <__ieee754_log10f+0xac>
 80198e0:	eea8 0a27 	vfma.f32	s0, s16, s15
 80198e4:	e7c2      	b.n	801986c <__ieee754_log10f+0x1c>
 80198e6:	bf00      	nop
 80198e8:	cc000000 	.word	0xcc000000
 80198ec:	00000000 	.word	0x00000000
 80198f0:	4c000000 	.word	0x4c000000
 80198f4:	3ede5bd9 	.word	0x3ede5bd9
 80198f8:	355427db 	.word	0x355427db
 80198fc:	3e9a2080 	.word	0x3e9a2080

08019900 <__ieee754_rem_pio2f>:
 8019900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019902:	ee10 6a10 	vmov	r6, s0
 8019906:	4b86      	ldr	r3, [pc, #536]	; (8019b20 <__ieee754_rem_pio2f+0x220>)
 8019908:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801990c:	429d      	cmp	r5, r3
 801990e:	b087      	sub	sp, #28
 8019910:	4604      	mov	r4, r0
 8019912:	dc05      	bgt.n	8019920 <__ieee754_rem_pio2f+0x20>
 8019914:	2300      	movs	r3, #0
 8019916:	ed80 0a00 	vstr	s0, [r0]
 801991a:	6043      	str	r3, [r0, #4]
 801991c:	2000      	movs	r0, #0
 801991e:	e020      	b.n	8019962 <__ieee754_rem_pio2f+0x62>
 8019920:	4b80      	ldr	r3, [pc, #512]	; (8019b24 <__ieee754_rem_pio2f+0x224>)
 8019922:	429d      	cmp	r5, r3
 8019924:	dc38      	bgt.n	8019998 <__ieee754_rem_pio2f+0x98>
 8019926:	2e00      	cmp	r6, #0
 8019928:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8019b28 <__ieee754_rem_pio2f+0x228>
 801992c:	4b7f      	ldr	r3, [pc, #508]	; (8019b2c <__ieee754_rem_pio2f+0x22c>)
 801992e:	f025 050f 	bic.w	r5, r5, #15
 8019932:	dd18      	ble.n	8019966 <__ieee754_rem_pio2f+0x66>
 8019934:	429d      	cmp	r5, r3
 8019936:	ee70 7a47 	vsub.f32	s15, s0, s14
 801993a:	bf09      	itett	eq
 801993c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8019b30 <__ieee754_rem_pio2f+0x230>
 8019940:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8019b34 <__ieee754_rem_pio2f+0x234>
 8019944:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8019948:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8019b38 <__ieee754_rem_pio2f+0x238>
 801994c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019950:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019954:	edc0 6a00 	vstr	s13, [r0]
 8019958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801995c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019960:	2001      	movs	r0, #1
 8019962:	b007      	add	sp, #28
 8019964:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019966:	429d      	cmp	r5, r3
 8019968:	ee70 7a07 	vadd.f32	s15, s0, s14
 801996c:	bf09      	itett	eq
 801996e:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8019b30 <__ieee754_rem_pio2f+0x230>
 8019972:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8019b34 <__ieee754_rem_pio2f+0x234>
 8019976:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801997a:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8019b38 <__ieee754_rem_pio2f+0x238>
 801997e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019982:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019986:	edc0 6a00 	vstr	s13, [r0]
 801998a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801998e:	edc0 7a01 	vstr	s15, [r0, #4]
 8019992:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019996:	e7e4      	b.n	8019962 <__ieee754_rem_pio2f+0x62>
 8019998:	4b68      	ldr	r3, [pc, #416]	; (8019b3c <__ieee754_rem_pio2f+0x23c>)
 801999a:	429d      	cmp	r5, r3
 801999c:	dc71      	bgt.n	8019a82 <__ieee754_rem_pio2f+0x182>
 801999e:	f7ff fd9f 	bl	80194e0 <fabsf>
 80199a2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019b40 <__ieee754_rem_pio2f+0x240>
 80199a6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80199aa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80199ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80199b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80199b6:	ee17 0a90 	vmov	r0, s15
 80199ba:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019b28 <__ieee754_rem_pio2f+0x228>
 80199be:	eea7 0a67 	vfms.f32	s0, s14, s15
 80199c2:	281f      	cmp	r0, #31
 80199c4:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019b34 <__ieee754_rem_pio2f+0x234>
 80199c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80199cc:	eeb1 6a47 	vneg.f32	s12, s14
 80199d0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80199d4:	ee16 2a90 	vmov	r2, s13
 80199d8:	dc1c      	bgt.n	8019a14 <__ieee754_rem_pio2f+0x114>
 80199da:	495a      	ldr	r1, [pc, #360]	; (8019b44 <__ieee754_rem_pio2f+0x244>)
 80199dc:	1e47      	subs	r7, r0, #1
 80199de:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80199e2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80199e6:	428b      	cmp	r3, r1
 80199e8:	d014      	beq.n	8019a14 <__ieee754_rem_pio2f+0x114>
 80199ea:	6022      	str	r2, [r4, #0]
 80199ec:	ed94 7a00 	vldr	s14, [r4]
 80199f0:	ee30 0a47 	vsub.f32	s0, s0, s14
 80199f4:	2e00      	cmp	r6, #0
 80199f6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80199fa:	ed84 0a01 	vstr	s0, [r4, #4]
 80199fe:	dab0      	bge.n	8019962 <__ieee754_rem_pio2f+0x62>
 8019a00:	eeb1 7a47 	vneg.f32	s14, s14
 8019a04:	eeb1 0a40 	vneg.f32	s0, s0
 8019a08:	ed84 7a00 	vstr	s14, [r4]
 8019a0c:	ed84 0a01 	vstr	s0, [r4, #4]
 8019a10:	4240      	negs	r0, r0
 8019a12:	e7a6      	b.n	8019962 <__ieee754_rem_pio2f+0x62>
 8019a14:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019a18:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8019a1c:	2908      	cmp	r1, #8
 8019a1e:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019a22:	dde2      	ble.n	80199ea <__ieee754_rem_pio2f+0xea>
 8019a24:	eddf 5a42 	vldr	s11, [pc, #264]	; 8019b30 <__ieee754_rem_pio2f+0x230>
 8019a28:	eef0 6a40 	vmov.f32	s13, s0
 8019a2c:	eee6 6a25 	vfma.f32	s13, s12, s11
 8019a30:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019a34:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019a38:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8019b38 <__ieee754_rem_pio2f+0x238>
 8019a3c:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8019a40:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8019a44:	ee15 2a90 	vmov	r2, s11
 8019a48:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019a4c:	1a5b      	subs	r3, r3, r1
 8019a4e:	2b19      	cmp	r3, #25
 8019a50:	dc04      	bgt.n	8019a5c <__ieee754_rem_pio2f+0x15c>
 8019a52:	edc4 5a00 	vstr	s11, [r4]
 8019a56:	eeb0 0a66 	vmov.f32	s0, s13
 8019a5a:	e7c7      	b.n	80199ec <__ieee754_rem_pio2f+0xec>
 8019a5c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019b48 <__ieee754_rem_pio2f+0x248>
 8019a60:	eeb0 0a66 	vmov.f32	s0, s13
 8019a64:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019a68:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019a6c:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019b4c <__ieee754_rem_pio2f+0x24c>
 8019a70:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019a74:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019a78:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019a7c:	ed84 7a00 	vstr	s14, [r4]
 8019a80:	e7b4      	b.n	80199ec <__ieee754_rem_pio2f+0xec>
 8019a82:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019a86:	db06      	blt.n	8019a96 <__ieee754_rem_pio2f+0x196>
 8019a88:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019a8c:	edc0 7a01 	vstr	s15, [r0, #4]
 8019a90:	edc0 7a00 	vstr	s15, [r0]
 8019a94:	e742      	b.n	801991c <__ieee754_rem_pio2f+0x1c>
 8019a96:	15ea      	asrs	r2, r5, #23
 8019a98:	3a86      	subs	r2, #134	; 0x86
 8019a9a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019a9e:	ee07 3a90 	vmov	s15, r3
 8019aa2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019aa6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8019b50 <__ieee754_rem_pio2f+0x250>
 8019aaa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019aae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ab2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019ab6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019aba:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019abe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ac2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ac6:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019aca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019ace:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019ad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ad6:	edcd 7a05 	vstr	s15, [sp, #20]
 8019ada:	d11e      	bne.n	8019b1a <__ieee754_rem_pio2f+0x21a>
 8019adc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ae4:	bf14      	ite	ne
 8019ae6:	2302      	movne	r3, #2
 8019ae8:	2301      	moveq	r3, #1
 8019aea:	491a      	ldr	r1, [pc, #104]	; (8019b54 <__ieee754_rem_pio2f+0x254>)
 8019aec:	9101      	str	r1, [sp, #4]
 8019aee:	2102      	movs	r1, #2
 8019af0:	9100      	str	r1, [sp, #0]
 8019af2:	a803      	add	r0, sp, #12
 8019af4:	4621      	mov	r1, r4
 8019af6:	f000 fec9 	bl	801a88c <__kernel_rem_pio2f>
 8019afa:	2e00      	cmp	r6, #0
 8019afc:	f6bf af31 	bge.w	8019962 <__ieee754_rem_pio2f+0x62>
 8019b00:	edd4 7a00 	vldr	s15, [r4]
 8019b04:	eef1 7a67 	vneg.f32	s15, s15
 8019b08:	edc4 7a00 	vstr	s15, [r4]
 8019b0c:	edd4 7a01 	vldr	s15, [r4, #4]
 8019b10:	eef1 7a67 	vneg.f32	s15, s15
 8019b14:	edc4 7a01 	vstr	s15, [r4, #4]
 8019b18:	e77a      	b.n	8019a10 <__ieee754_rem_pio2f+0x110>
 8019b1a:	2303      	movs	r3, #3
 8019b1c:	e7e5      	b.n	8019aea <__ieee754_rem_pio2f+0x1ea>
 8019b1e:	bf00      	nop
 8019b20:	3f490fd8 	.word	0x3f490fd8
 8019b24:	4016cbe3 	.word	0x4016cbe3
 8019b28:	3fc90f80 	.word	0x3fc90f80
 8019b2c:	3fc90fd0 	.word	0x3fc90fd0
 8019b30:	37354400 	.word	0x37354400
 8019b34:	37354443 	.word	0x37354443
 8019b38:	2e85a308 	.word	0x2e85a308
 8019b3c:	43490f80 	.word	0x43490f80
 8019b40:	3f22f984 	.word	0x3f22f984
 8019b44:	08026c20 	.word	0x08026c20
 8019b48:	2e85a300 	.word	0x2e85a300
 8019b4c:	248d3132 	.word	0x248d3132
 8019b50:	43800000 	.word	0x43800000
 8019b54:	08026ca0 	.word	0x08026ca0

08019b58 <__ieee754_rem_pio2>:
 8019b58:	b570      	push	{r4, r5, r6, lr}
 8019b5a:	eeb0 7b40 	vmov.f64	d7, d0
 8019b5e:	ee17 5a90 	vmov	r5, s15
 8019b62:	4b99      	ldr	r3, [pc, #612]	; (8019dc8 <__ieee754_rem_pio2+0x270>)
 8019b64:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019b68:	429e      	cmp	r6, r3
 8019b6a:	b088      	sub	sp, #32
 8019b6c:	4604      	mov	r4, r0
 8019b6e:	dc07      	bgt.n	8019b80 <__ieee754_rem_pio2+0x28>
 8019b70:	2200      	movs	r2, #0
 8019b72:	2300      	movs	r3, #0
 8019b74:	ed84 0b00 	vstr	d0, [r4]
 8019b78:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8019b7c:	2000      	movs	r0, #0
 8019b7e:	e01b      	b.n	8019bb8 <__ieee754_rem_pio2+0x60>
 8019b80:	4b92      	ldr	r3, [pc, #584]	; (8019dcc <__ieee754_rem_pio2+0x274>)
 8019b82:	429e      	cmp	r6, r3
 8019b84:	dc3b      	bgt.n	8019bfe <__ieee754_rem_pio2+0xa6>
 8019b86:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8019b8a:	2d00      	cmp	r5, #0
 8019b8c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8019d88 <__ieee754_rem_pio2+0x230>
 8019b90:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8019b94:	dd19      	ble.n	8019bca <__ieee754_rem_pio2+0x72>
 8019b96:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019b9a:	429e      	cmp	r6, r3
 8019b9c:	d00e      	beq.n	8019bbc <__ieee754_rem_pio2+0x64>
 8019b9e:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8019d90 <__ieee754_rem_pio2+0x238>
 8019ba2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8019ba6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019baa:	ed84 5b00 	vstr	d5, [r4]
 8019bae:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019bb2:	ed84 7b02 	vstr	d7, [r4, #8]
 8019bb6:	2001      	movs	r0, #1
 8019bb8:	b008      	add	sp, #32
 8019bba:	bd70      	pop	{r4, r5, r6, pc}
 8019bbc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8019d98 <__ieee754_rem_pio2+0x240>
 8019bc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019bc4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8019da0 <__ieee754_rem_pio2+0x248>
 8019bc8:	e7eb      	b.n	8019ba2 <__ieee754_rem_pio2+0x4a>
 8019bca:	429e      	cmp	r6, r3
 8019bcc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8019bd0:	d00e      	beq.n	8019bf0 <__ieee754_rem_pio2+0x98>
 8019bd2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8019d90 <__ieee754_rem_pio2+0x238>
 8019bd6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8019bda:	ee37 7b45 	vsub.f64	d7, d7, d5
 8019bde:	ed84 5b00 	vstr	d5, [r4]
 8019be2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019be6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019bea:	ed84 7b02 	vstr	d7, [r4, #8]
 8019bee:	e7e3      	b.n	8019bb8 <__ieee754_rem_pio2+0x60>
 8019bf0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8019d98 <__ieee754_rem_pio2+0x240>
 8019bf4:	ee37 7b06 	vadd.f64	d7, d7, d6
 8019bf8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8019da0 <__ieee754_rem_pio2+0x248>
 8019bfc:	e7eb      	b.n	8019bd6 <__ieee754_rem_pio2+0x7e>
 8019bfe:	4b74      	ldr	r3, [pc, #464]	; (8019dd0 <__ieee754_rem_pio2+0x278>)
 8019c00:	429e      	cmp	r6, r3
 8019c02:	dc70      	bgt.n	8019ce6 <__ieee754_rem_pio2+0x18e>
 8019c04:	f000 fdb8 	bl	801a778 <fabs>
 8019c08:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019c0c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8019da8 <__ieee754_rem_pio2+0x250>
 8019c10:	eea0 7b06 	vfma.f64	d7, d0, d6
 8019c14:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8019c18:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8019c1c:	ee17 0a90 	vmov	r0, s15
 8019c20:	eeb1 4b45 	vneg.f64	d4, d5
 8019c24:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019d88 <__ieee754_rem_pio2+0x230>
 8019c28:	eea5 0b47 	vfms.f64	d0, d5, d7
 8019c2c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8019d90 <__ieee754_rem_pio2+0x238>
 8019c30:	281f      	cmp	r0, #31
 8019c32:	ee25 7b07 	vmul.f64	d7, d5, d7
 8019c36:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019c3a:	dc08      	bgt.n	8019c4e <__ieee754_rem_pio2+0xf6>
 8019c3c:	4b65      	ldr	r3, [pc, #404]	; (8019dd4 <__ieee754_rem_pio2+0x27c>)
 8019c3e:	1e42      	subs	r2, r0, #1
 8019c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019c44:	42b3      	cmp	r3, r6
 8019c46:	d002      	beq.n	8019c4e <__ieee754_rem_pio2+0xf6>
 8019c48:	ed84 6b00 	vstr	d6, [r4]
 8019c4c:	e024      	b.n	8019c98 <__ieee754_rem_pio2+0x140>
 8019c4e:	ee16 3a90 	vmov	r3, s13
 8019c52:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019c56:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8019c5a:	2b10      	cmp	r3, #16
 8019c5c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8019c60:	ddf2      	ble.n	8019c48 <__ieee754_rem_pio2+0xf0>
 8019c62:	eeb0 6b40 	vmov.f64	d6, d0
 8019c66:	ed9f 3b4c 	vldr	d3, [pc, #304]	; 8019d98 <__ieee754_rem_pio2+0x240>
 8019c6a:	eea4 6b03 	vfma.f64	d6, d4, d3
 8019c6e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8019c72:	eea4 7b03 	vfma.f64	d7, d4, d3
 8019c76:	ed9f 3b4a 	vldr	d3, [pc, #296]	; 8019da0 <__ieee754_rem_pio2+0x248>
 8019c7a:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8019c7e:	ee36 3b47 	vsub.f64	d3, d6, d7
 8019c82:	ee13 3a90 	vmov	r3, s7
 8019c86:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8019c8a:	1ad3      	subs	r3, r2, r3
 8019c8c:	2b31      	cmp	r3, #49	; 0x31
 8019c8e:	dc17      	bgt.n	8019cc0 <__ieee754_rem_pio2+0x168>
 8019c90:	eeb0 0b46 	vmov.f64	d0, d6
 8019c94:	ed84 3b00 	vstr	d3, [r4]
 8019c98:	ed94 6b00 	vldr	d6, [r4]
 8019c9c:	2d00      	cmp	r5, #0
 8019c9e:	ee30 0b46 	vsub.f64	d0, d0, d6
 8019ca2:	ee30 0b47 	vsub.f64	d0, d0, d7
 8019ca6:	ed84 0b02 	vstr	d0, [r4, #8]
 8019caa:	da85      	bge.n	8019bb8 <__ieee754_rem_pio2+0x60>
 8019cac:	eeb1 6b46 	vneg.f64	d6, d6
 8019cb0:	eeb1 0b40 	vneg.f64	d0, d0
 8019cb4:	ed84 6b00 	vstr	d6, [r4]
 8019cb8:	ed84 0b02 	vstr	d0, [r4, #8]
 8019cbc:	4240      	negs	r0, r0
 8019cbe:	e77b      	b.n	8019bb8 <__ieee754_rem_pio2+0x60>
 8019cc0:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 8019db0 <__ieee754_rem_pio2+0x258>
 8019cc4:	eeb0 0b46 	vmov.f64	d0, d6
 8019cc8:	eea4 0b07 	vfma.f64	d0, d4, d7
 8019ccc:	ee36 6b40 	vsub.f64	d6, d6, d0
 8019cd0:	eea4 6b07 	vfma.f64	d6, d4, d7
 8019cd4:	ed9f 4b38 	vldr	d4, [pc, #224]	; 8019db8 <__ieee754_rem_pio2+0x260>
 8019cd8:	eeb0 7b46 	vmov.f64	d7, d6
 8019cdc:	ee95 7b04 	vfnms.f64	d7, d5, d4
 8019ce0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8019ce4:	e7b0      	b.n	8019c48 <__ieee754_rem_pio2+0xf0>
 8019ce6:	4b3c      	ldr	r3, [pc, #240]	; (8019dd8 <__ieee754_rem_pio2+0x280>)
 8019ce8:	429e      	cmp	r6, r3
 8019cea:	dd06      	ble.n	8019cfa <__ieee754_rem_pio2+0x1a2>
 8019cec:	ee30 7b40 	vsub.f64	d7, d0, d0
 8019cf0:	ed80 7b02 	vstr	d7, [r0, #8]
 8019cf4:	ed80 7b00 	vstr	d7, [r0]
 8019cf8:	e740      	b.n	8019b7c <__ieee754_rem_pio2+0x24>
 8019cfa:	1532      	asrs	r2, r6, #20
 8019cfc:	ee10 0a10 	vmov	r0, s0
 8019d00:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8019d04:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8019d08:	ec41 0b17 	vmov	d7, r0, r1
 8019d0c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019d10:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8019dc0 <__ieee754_rem_pio2+0x268>
 8019d14:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019d18:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019d1c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019d20:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019d24:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8019d28:	a808      	add	r0, sp, #32
 8019d2a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8019d2e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019d32:	ed8d 6b04 	vstr	d6, [sp, #16]
 8019d36:	ee27 7b05 	vmul.f64	d7, d7, d5
 8019d3a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d3e:	2103      	movs	r1, #3
 8019d40:	ed30 7b02 	vldmdb	r0!, {d7}
 8019d44:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d4c:	460b      	mov	r3, r1
 8019d4e:	f101 31ff 	add.w	r1, r1, #4294967295	; 0xffffffff
 8019d52:	d0f5      	beq.n	8019d40 <__ieee754_rem_pio2+0x1e8>
 8019d54:	4921      	ldr	r1, [pc, #132]	; (8019ddc <__ieee754_rem_pio2+0x284>)
 8019d56:	9101      	str	r1, [sp, #4]
 8019d58:	2102      	movs	r1, #2
 8019d5a:	9100      	str	r1, [sp, #0]
 8019d5c:	a802      	add	r0, sp, #8
 8019d5e:	4621      	mov	r1, r4
 8019d60:	f000 f83e 	bl	8019de0 <__kernel_rem_pio2>
 8019d64:	2d00      	cmp	r5, #0
 8019d66:	f6bf af27 	bge.w	8019bb8 <__ieee754_rem_pio2+0x60>
 8019d6a:	ed94 7b00 	vldr	d7, [r4]
 8019d6e:	eeb1 7b47 	vneg.f64	d7, d7
 8019d72:	ed84 7b00 	vstr	d7, [r4]
 8019d76:	ed94 7b02 	vldr	d7, [r4, #8]
 8019d7a:	eeb1 7b47 	vneg.f64	d7, d7
 8019d7e:	ed84 7b02 	vstr	d7, [r4, #8]
 8019d82:	e79b      	b.n	8019cbc <__ieee754_rem_pio2+0x164>
 8019d84:	f3af 8000 	nop.w
 8019d88:	54400000 	.word	0x54400000
 8019d8c:	3ff921fb 	.word	0x3ff921fb
 8019d90:	1a626331 	.word	0x1a626331
 8019d94:	3dd0b461 	.word	0x3dd0b461
 8019d98:	1a600000 	.word	0x1a600000
 8019d9c:	3dd0b461 	.word	0x3dd0b461
 8019da0:	2e037073 	.word	0x2e037073
 8019da4:	3ba3198a 	.word	0x3ba3198a
 8019da8:	6dc9c883 	.word	0x6dc9c883
 8019dac:	3fe45f30 	.word	0x3fe45f30
 8019db0:	2e000000 	.word	0x2e000000
 8019db4:	3ba3198a 	.word	0x3ba3198a
 8019db8:	252049c1 	.word	0x252049c1
 8019dbc:	397b839a 	.word	0x397b839a
 8019dc0:	00000000 	.word	0x00000000
 8019dc4:	41700000 	.word	0x41700000
 8019dc8:	3fe921fb 	.word	0x3fe921fb
 8019dcc:	4002d97b 	.word	0x4002d97b
 8019dd0:	413921fb 	.word	0x413921fb
 8019dd4:	08026fb8 	.word	0x08026fb8
 8019dd8:	7fefffff 	.word	0x7fefffff
 8019ddc:	08027038 	.word	0x08027038

08019de0 <__kernel_rem_pio2>:
 8019de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019de4:	ed2d 8b06 	vpush	{d8-d10}
 8019de8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8019dec:	460f      	mov	r7, r1
 8019dee:	9002      	str	r0, [sp, #8]
 8019df0:	49c3      	ldr	r1, [pc, #780]	; (801a100 <__kernel_rem_pio2+0x320>)
 8019df2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8019df4:	9301      	str	r3, [sp, #4]
 8019df6:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8019dfa:	9901      	ldr	r1, [sp, #4]
 8019dfc:	9ba3      	ldr	r3, [sp, #652]	; 0x28c
 8019dfe:	f112 0f14 	cmn.w	r2, #20
 8019e02:	bfa8      	it	ge
 8019e04:	1ed0      	subge	r0, r2, #3
 8019e06:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
 8019e0a:	bfaa      	itet	ge
 8019e0c:	2418      	movge	r4, #24
 8019e0e:	2000      	movlt	r0, #0
 8019e10:	fb90 f0f4 	sdivge	r0, r0, r4
 8019e14:	ed9f 6bb4 	vldr	d6, [pc, #720]	; 801a0e8 <__kernel_rem_pio2+0x308>
 8019e18:	f06f 0417 	mvn.w	r4, #23
 8019e1c:	fb00 4404 	mla	r4, r0, r4, r4
 8019e20:	eba0 060a 	sub.w	r6, r0, sl
 8019e24:	4414      	add	r4, r2
 8019e26:	eb09 0c0a 	add.w	ip, r9, sl
 8019e2a:	ad1a      	add	r5, sp, #104	; 0x68
 8019e2c:	eb03 0e86 	add.w	lr, r3, r6, lsl #2
 8019e30:	2200      	movs	r2, #0
 8019e32:	4562      	cmp	r2, ip
 8019e34:	dd10      	ble.n	8019e58 <__kernel_rem_pio2+0x78>
 8019e36:	9a01      	ldr	r2, [sp, #4]
 8019e38:	a91a      	add	r1, sp, #104	; 0x68
 8019e3a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8019e3e:	f50d 78d4 	add.w	r8, sp, #424	; 0x1a8
 8019e42:	f04f 0c00 	mov.w	ip, #0
 8019e46:	45cc      	cmp	ip, r9
 8019e48:	dc26      	bgt.n	8019e98 <__kernel_rem_pio2+0xb8>
 8019e4a:	ed9f 7ba7 	vldr	d7, [pc, #668]	; 801a0e8 <__kernel_rem_pio2+0x308>
 8019e4e:	f8dd e008 	ldr.w	lr, [sp, #8]
 8019e52:	4616      	mov	r6, r2
 8019e54:	2500      	movs	r5, #0
 8019e56:	e015      	b.n	8019e84 <__kernel_rem_pio2+0xa4>
 8019e58:	42d6      	cmn	r6, r2
 8019e5a:	d409      	bmi.n	8019e70 <__kernel_rem_pio2+0x90>
 8019e5c:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 8019e60:	ee07 1a90 	vmov	s15, r1
 8019e64:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019e68:	eca5 7b02 	vstmia	r5!, {d7}
 8019e6c:	3201      	adds	r2, #1
 8019e6e:	e7e0      	b.n	8019e32 <__kernel_rem_pio2+0x52>
 8019e70:	eeb0 7b46 	vmov.f64	d7, d6
 8019e74:	e7f8      	b.n	8019e68 <__kernel_rem_pio2+0x88>
 8019e76:	ecbe 5b02 	vldmia	lr!, {d5}
 8019e7a:	ed96 6b00 	vldr	d6, [r6]
 8019e7e:	3501      	adds	r5, #1
 8019e80:	eea5 7b06 	vfma.f64	d7, d5, d6
 8019e84:	4555      	cmp	r5, sl
 8019e86:	f1a6 0608 	sub.w	r6, r6, #8
 8019e8a:	ddf4      	ble.n	8019e76 <__kernel_rem_pio2+0x96>
 8019e8c:	eca8 7b02 	vstmia	r8!, {d7}
 8019e90:	f10c 0c01 	add.w	ip, ip, #1
 8019e94:	3208      	adds	r2, #8
 8019e96:	e7d6      	b.n	8019e46 <__kernel_rem_pio2+0x66>
 8019e98:	aa06      	add	r2, sp, #24
 8019e9a:	ed9f 9b95 	vldr	d9, [pc, #596]	; 801a0f0 <__kernel_rem_pio2+0x310>
 8019e9e:	ed9f ab96 	vldr	d10, [pc, #600]	; 801a0f8 <__kernel_rem_pio2+0x318>
 8019ea2:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 8019ea6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8019eaa:	9204      	str	r2, [sp, #16]
 8019eac:	9303      	str	r3, [sp, #12]
 8019eae:	464d      	mov	r5, r9
 8019eb0:	00eb      	lsls	r3, r5, #3
 8019eb2:	9305      	str	r3, [sp, #20]
 8019eb4:	ab92      	add	r3, sp, #584	; 0x248
 8019eb6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019eba:	f10d 0b18 	add.w	fp, sp, #24
 8019ebe:	ab6a      	add	r3, sp, #424	; 0x1a8
 8019ec0:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8019ec4:	465e      	mov	r6, fp
 8019ec6:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8019eca:	4628      	mov	r0, r5
 8019ecc:	2800      	cmp	r0, #0
 8019ece:	f1a2 0208 	sub.w	r2, r2, #8
 8019ed2:	dc48      	bgt.n	8019f66 <__kernel_rem_pio2+0x186>
 8019ed4:	4620      	mov	r0, r4
 8019ed6:	f000 fc5b 	bl	801a790 <scalbn>
 8019eda:	eeb0 8b40 	vmov.f64	d8, d0
 8019ede:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8019ee2:	ee28 0b00 	vmul.f64	d0, d8, d0
 8019ee6:	f000 ff43 	bl	801ad70 <floor>
 8019eea:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8019eee:	eea0 8b47 	vfms.f64	d8, d0, d7
 8019ef2:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8019ef6:	2c00      	cmp	r4, #0
 8019ef8:	ee17 8a90 	vmov	r8, s15
 8019efc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8019f00:	ee38 8b47 	vsub.f64	d8, d8, d7
 8019f04:	dd41      	ble.n	8019f8a <__kernel_rem_pio2+0x1aa>
 8019f06:	1e68      	subs	r0, r5, #1
 8019f08:	ab06      	add	r3, sp, #24
 8019f0a:	f1c4 0c18 	rsb	ip, r4, #24
 8019f0e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8019f12:	fa46 f20c 	asr.w	r2, r6, ip
 8019f16:	4490      	add	r8, r2
 8019f18:	fa02 f20c 	lsl.w	r2, r2, ip
 8019f1c:	1ab6      	subs	r6, r6, r2
 8019f1e:	f1c4 0217 	rsb	r2, r4, #23
 8019f22:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8019f26:	4116      	asrs	r6, r2
 8019f28:	2e00      	cmp	r6, #0
 8019f2a:	dd3d      	ble.n	8019fa8 <__kernel_rem_pio2+0x1c8>
 8019f2c:	f04f 0c00 	mov.w	ip, #0
 8019f30:	f108 0801 	add.w	r8, r8, #1
 8019f34:	4660      	mov	r0, ip
 8019f36:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8019f3a:	4565      	cmp	r5, ip
 8019f3c:	dc6a      	bgt.n	801a014 <__kernel_rem_pio2+0x234>
 8019f3e:	2c00      	cmp	r4, #0
 8019f40:	dd04      	ble.n	8019f4c <__kernel_rem_pio2+0x16c>
 8019f42:	2c01      	cmp	r4, #1
 8019f44:	d07b      	beq.n	801a03e <__kernel_rem_pio2+0x25e>
 8019f46:	2c02      	cmp	r4, #2
 8019f48:	f000 8083 	beq.w	801a052 <__kernel_rem_pio2+0x272>
 8019f4c:	2e02      	cmp	r6, #2
 8019f4e:	d12b      	bne.n	8019fa8 <__kernel_rem_pio2+0x1c8>
 8019f50:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019f54:	ee30 8b48 	vsub.f64	d8, d0, d8
 8019f58:	b330      	cbz	r0, 8019fa8 <__kernel_rem_pio2+0x1c8>
 8019f5a:	4620      	mov	r0, r4
 8019f5c:	f000 fc18 	bl	801a790 <scalbn>
 8019f60:	ee38 8b40 	vsub.f64	d8, d8, d0
 8019f64:	e020      	b.n	8019fa8 <__kernel_rem_pio2+0x1c8>
 8019f66:	ee20 7b09 	vmul.f64	d7, d0, d9
 8019f6a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8019f6e:	3801      	subs	r0, #1
 8019f70:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8019f74:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8019f78:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8019f7c:	eca6 0a01 	vstmia	r6!, {s0}
 8019f80:	ed92 0b00 	vldr	d0, [r2]
 8019f84:	ee37 0b00 	vadd.f64	d0, d7, d0
 8019f88:	e7a0      	b.n	8019ecc <__kernel_rem_pio2+0xec>
 8019f8a:	d105      	bne.n	8019f98 <__kernel_rem_pio2+0x1b8>
 8019f8c:	1e6a      	subs	r2, r5, #1
 8019f8e:	ab06      	add	r3, sp, #24
 8019f90:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019f94:	15f6      	asrs	r6, r6, #23
 8019f96:	e7c7      	b.n	8019f28 <__kernel_rem_pio2+0x148>
 8019f98:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019f9c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8019fa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fa4:	da34      	bge.n	801a010 <__kernel_rem_pio2+0x230>
 8019fa6:	2600      	movs	r6, #0
 8019fa8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fb0:	f040 80aa 	bne.w	801a108 <__kernel_rem_pio2+0x328>
 8019fb4:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 8019fb8:	4658      	mov	r0, fp
 8019fba:	2200      	movs	r2, #0
 8019fbc:	4548      	cmp	r0, r9
 8019fbe:	da50      	bge.n	801a062 <__kernel_rem_pio2+0x282>
 8019fc0:	2a00      	cmp	r2, #0
 8019fc2:	d06b      	beq.n	801a09c <__kernel_rem_pio2+0x2bc>
 8019fc4:	ab06      	add	r3, sp, #24
 8019fc6:	3c18      	subs	r4, #24
 8019fc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8019fcc:	2b00      	cmp	r3, #0
 8019fce:	f000 8087 	beq.w	801a0e0 <__kernel_rem_pio2+0x300>
 8019fd2:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8019fd6:	4620      	mov	r0, r4
 8019fd8:	f000 fbda 	bl	801a790 <scalbn>
 8019fdc:	ed9f 6b44 	vldr	d6, [pc, #272]	; 801a0f0 <__kernel_rem_pio2+0x310>
 8019fe0:	f10b 0201 	add.w	r2, fp, #1
 8019fe4:	a96a      	add	r1, sp, #424	; 0x1a8
 8019fe6:	00d3      	lsls	r3, r2, #3
 8019fe8:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8019fec:	465a      	mov	r2, fp
 8019fee:	2a00      	cmp	r2, #0
 8019ff0:	f280 80b8 	bge.w	801a164 <__kernel_rem_pio2+0x384>
 8019ff4:	465a      	mov	r2, fp
 8019ff6:	2a00      	cmp	r2, #0
 8019ff8:	f2c0 80d6 	blt.w	801a1a8 <__kernel_rem_pio2+0x3c8>
 8019ffc:	a96a      	add	r1, sp, #424	; 0x1a8
 8019ffe:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801a002:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801a0e8 <__kernel_rem_pio2+0x308>
 801a006:	4d3f      	ldr	r5, [pc, #252]	; (801a104 <__kernel_rem_pio2+0x324>)
 801a008:	2000      	movs	r0, #0
 801a00a:	ebab 0102 	sub.w	r1, fp, r2
 801a00e:	e0c0      	b.n	801a192 <__kernel_rem_pio2+0x3b2>
 801a010:	2602      	movs	r6, #2
 801a012:	e78b      	b.n	8019f2c <__kernel_rem_pio2+0x14c>
 801a014:	f8db 2000 	ldr.w	r2, [fp]
 801a018:	b958      	cbnz	r0, 801a032 <__kernel_rem_pio2+0x252>
 801a01a:	b122      	cbz	r2, 801a026 <__kernel_rem_pio2+0x246>
 801a01c:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801a020:	f8cb 2000 	str.w	r2, [fp]
 801a024:	2201      	movs	r2, #1
 801a026:	f10c 0c01 	add.w	ip, ip, #1
 801a02a:	f10b 0b04 	add.w	fp, fp, #4
 801a02e:	4610      	mov	r0, r2
 801a030:	e783      	b.n	8019f3a <__kernel_rem_pio2+0x15a>
 801a032:	ebae 0202 	sub.w	r2, lr, r2
 801a036:	f8cb 2000 	str.w	r2, [fp]
 801a03a:	4602      	mov	r2, r0
 801a03c:	e7f3      	b.n	801a026 <__kernel_rem_pio2+0x246>
 801a03e:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a042:	ab06      	add	r3, sp, #24
 801a044:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a048:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801a04c:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801a050:	e77c      	b.n	8019f4c <__kernel_rem_pio2+0x16c>
 801a052:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801a056:	ab06      	add	r3, sp, #24
 801a058:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801a05c:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801a060:	e7f4      	b.n	801a04c <__kernel_rem_pio2+0x26c>
 801a062:	ab06      	add	r3, sp, #24
 801a064:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801a068:	3801      	subs	r0, #1
 801a06a:	431a      	orrs	r2, r3
 801a06c:	e7a6      	b.n	8019fbc <__kernel_rem_pio2+0x1dc>
 801a06e:	3201      	adds	r2, #1
 801a070:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 801a074:	2e00      	cmp	r6, #0
 801a076:	d0fa      	beq.n	801a06e <__kernel_rem_pio2+0x28e>
 801a078:	9b05      	ldr	r3, [sp, #20]
 801a07a:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801a07e:	eb0d 0003 	add.w	r0, sp, r3
 801a082:	9b01      	ldr	r3, [sp, #4]
 801a084:	18ee      	adds	r6, r5, r3
 801a086:	ab1a      	add	r3, sp, #104	; 0x68
 801a088:	f105 0c01 	add.w	ip, r5, #1
 801a08c:	3898      	subs	r0, #152	; 0x98
 801a08e:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 801a092:	442a      	add	r2, r5
 801a094:	4562      	cmp	r2, ip
 801a096:	da04      	bge.n	801a0a2 <__kernel_rem_pio2+0x2c2>
 801a098:	4615      	mov	r5, r2
 801a09a:	e709      	b.n	8019eb0 <__kernel_rem_pio2+0xd0>
 801a09c:	9804      	ldr	r0, [sp, #16]
 801a09e:	2201      	movs	r2, #1
 801a0a0:	e7e6      	b.n	801a070 <__kernel_rem_pio2+0x290>
 801a0a2:	9b03      	ldr	r3, [sp, #12]
 801a0a4:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a0a8:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a0ac:	9305      	str	r3, [sp, #20]
 801a0ae:	ee07 3a90 	vmov	s15, r3
 801a0b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a0b6:	2500      	movs	r5, #0
 801a0b8:	eca6 7b02 	vstmia	r6!, {d7}
 801a0bc:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 801a0e8 <__kernel_rem_pio2+0x308>
 801a0c0:	46b0      	mov	r8, r6
 801a0c2:	4555      	cmp	r5, sl
 801a0c4:	dd04      	ble.n	801a0d0 <__kernel_rem_pio2+0x2f0>
 801a0c6:	eca0 7b02 	vstmia	r0!, {d7}
 801a0ca:	f10c 0c01 	add.w	ip, ip, #1
 801a0ce:	e7e1      	b.n	801a094 <__kernel_rem_pio2+0x2b4>
 801a0d0:	ecbe 5b02 	vldmia	lr!, {d5}
 801a0d4:	ed38 6b02 	vldmdb	r8!, {d6}
 801a0d8:	3501      	adds	r5, #1
 801a0da:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a0de:	e7f0      	b.n	801a0c2 <__kernel_rem_pio2+0x2e2>
 801a0e0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a0e4:	e76e      	b.n	8019fc4 <__kernel_rem_pio2+0x1e4>
 801a0e6:	bf00      	nop
	...
 801a0f4:	3e700000 	.word	0x3e700000
 801a0f8:	00000000 	.word	0x00000000
 801a0fc:	41700000 	.word	0x41700000
 801a100:	080272a8 	.word	0x080272a8
 801a104:	08027268 	.word	0x08027268
 801a108:	4260      	negs	r0, r4
 801a10a:	eeb0 0b48 	vmov.f64	d0, d8
 801a10e:	f000 fb3f 	bl	801a790 <scalbn>
 801a112:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801a2f0 <__kernel_rem_pio2+0x510>
 801a116:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801a11a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a11e:	db18      	blt.n	801a152 <__kernel_rem_pio2+0x372>
 801a120:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801a2f8 <__kernel_rem_pio2+0x518>
 801a124:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a128:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801a12c:	aa06      	add	r2, sp, #24
 801a12e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801a132:	eea5 0b46 	vfms.f64	d0, d5, d6
 801a136:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a13a:	f105 0b01 	add.w	fp, r5, #1
 801a13e:	ee10 3a10 	vmov	r3, s0
 801a142:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a146:	ee17 3a10 	vmov	r3, s14
 801a14a:	3418      	adds	r4, #24
 801a14c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801a150:	e73f      	b.n	8019fd2 <__kernel_rem_pio2+0x1f2>
 801a152:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801a156:	aa06      	add	r2, sp, #24
 801a158:	ee10 3a10 	vmov	r3, s0
 801a15c:	46ab      	mov	fp, r5
 801a15e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801a162:	e736      	b.n	8019fd2 <__kernel_rem_pio2+0x1f2>
 801a164:	a806      	add	r0, sp, #24
 801a166:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801a16a:	9001      	str	r0, [sp, #4]
 801a16c:	ee07 0a90 	vmov	s15, r0
 801a170:	3a01      	subs	r2, #1
 801a172:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a176:	ee27 7b00 	vmul.f64	d7, d7, d0
 801a17a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801a17e:	ed21 7b02 	vstmdb	r1!, {d7}
 801a182:	e734      	b.n	8019fee <__kernel_rem_pio2+0x20e>
 801a184:	ecb5 5b02 	vldmia	r5!, {d5}
 801a188:	ecb4 6b02 	vldmia	r4!, {d6}
 801a18c:	3001      	adds	r0, #1
 801a18e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801a192:	4548      	cmp	r0, r9
 801a194:	dc01      	bgt.n	801a19a <__kernel_rem_pio2+0x3ba>
 801a196:	4288      	cmp	r0, r1
 801a198:	ddf4      	ble.n	801a184 <__kernel_rem_pio2+0x3a4>
 801a19a:	a842      	add	r0, sp, #264	; 0x108
 801a19c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801a1a0:	ed81 7b00 	vstr	d7, [r1]
 801a1a4:	3a01      	subs	r2, #1
 801a1a6:	e726      	b.n	8019ff6 <__kernel_rem_pio2+0x216>
 801a1a8:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a1aa:	2a02      	cmp	r2, #2
 801a1ac:	dc0a      	bgt.n	801a1c4 <__kernel_rem_pio2+0x3e4>
 801a1ae:	2a00      	cmp	r2, #0
 801a1b0:	dc2e      	bgt.n	801a210 <__kernel_rem_pio2+0x430>
 801a1b2:	d047      	beq.n	801a244 <__kernel_rem_pio2+0x464>
 801a1b4:	f008 0007 	and.w	r0, r8, #7
 801a1b8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801a1bc:	ecbd 8b06 	vpop	{d8-d10}
 801a1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a1c4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801a1c6:	2a03      	cmp	r2, #3
 801a1c8:	d1f4      	bne.n	801a1b4 <__kernel_rem_pio2+0x3d4>
 801a1ca:	a942      	add	r1, sp, #264	; 0x108
 801a1cc:	f1a3 0208 	sub.w	r2, r3, #8
 801a1d0:	440a      	add	r2, r1
 801a1d2:	4611      	mov	r1, r2
 801a1d4:	4658      	mov	r0, fp
 801a1d6:	2800      	cmp	r0, #0
 801a1d8:	f1a1 0108 	sub.w	r1, r1, #8
 801a1dc:	dc55      	bgt.n	801a28a <__kernel_rem_pio2+0x4aa>
 801a1de:	4659      	mov	r1, fp
 801a1e0:	2901      	cmp	r1, #1
 801a1e2:	f1a2 0208 	sub.w	r2, r2, #8
 801a1e6:	dc60      	bgt.n	801a2aa <__kernel_rem_pio2+0x4ca>
 801a1e8:	ed9f 7b45 	vldr	d7, [pc, #276]	; 801a300 <__kernel_rem_pio2+0x520>
 801a1ec:	aa42      	add	r2, sp, #264	; 0x108
 801a1ee:	4413      	add	r3, r2
 801a1f0:	f1bb 0f01 	cmp.w	fp, #1
 801a1f4:	dc69      	bgt.n	801a2ca <__kernel_rem_pio2+0x4ea>
 801a1f6:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801a1fa:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801a1fe:	2e00      	cmp	r6, #0
 801a200:	d16a      	bne.n	801a2d8 <__kernel_rem_pio2+0x4f8>
 801a202:	ed87 5b00 	vstr	d5, [r7]
 801a206:	ed87 6b02 	vstr	d6, [r7, #8]
 801a20a:	ed87 7b04 	vstr	d7, [r7, #16]
 801a20e:	e7d1      	b.n	801a1b4 <__kernel_rem_pio2+0x3d4>
 801a210:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 801a300 <__kernel_rem_pio2+0x520>
 801a214:	aa42      	add	r2, sp, #264	; 0x108
 801a216:	4413      	add	r3, r2
 801a218:	465a      	mov	r2, fp
 801a21a:	2a00      	cmp	r2, #0
 801a21c:	da26      	bge.n	801a26c <__kernel_rem_pio2+0x48c>
 801a21e:	b35e      	cbz	r6, 801a278 <__kernel_rem_pio2+0x498>
 801a220:	eeb1 7b46 	vneg.f64	d7, d6
 801a224:	ed87 7b00 	vstr	d7, [r7]
 801a228:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801a22c:	aa44      	add	r2, sp, #272	; 0x110
 801a22e:	2301      	movs	r3, #1
 801a230:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a234:	459b      	cmp	fp, r3
 801a236:	da22      	bge.n	801a27e <__kernel_rem_pio2+0x49e>
 801a238:	b10e      	cbz	r6, 801a23e <__kernel_rem_pio2+0x45e>
 801a23a:	eeb1 7b47 	vneg.f64	d7, d7
 801a23e:	ed87 7b02 	vstr	d7, [r7, #8]
 801a242:	e7b7      	b.n	801a1b4 <__kernel_rem_pio2+0x3d4>
 801a244:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a300 <__kernel_rem_pio2+0x520>
 801a248:	aa42      	add	r2, sp, #264	; 0x108
 801a24a:	4413      	add	r3, r2
 801a24c:	f1bb 0f00 	cmp.w	fp, #0
 801a250:	da05      	bge.n	801a25e <__kernel_rem_pio2+0x47e>
 801a252:	b10e      	cbz	r6, 801a258 <__kernel_rem_pio2+0x478>
 801a254:	eeb1 7b47 	vneg.f64	d7, d7
 801a258:	ed87 7b00 	vstr	d7, [r7]
 801a25c:	e7aa      	b.n	801a1b4 <__kernel_rem_pio2+0x3d4>
 801a25e:	ed33 6b02 	vldmdb	r3!, {d6}
 801a262:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a266:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a26a:	e7ef      	b.n	801a24c <__kernel_rem_pio2+0x46c>
 801a26c:	ed33 7b02 	vldmdb	r3!, {d7}
 801a270:	3a01      	subs	r2, #1
 801a272:	ee36 6b07 	vadd.f64	d6, d6, d7
 801a276:	e7d0      	b.n	801a21a <__kernel_rem_pio2+0x43a>
 801a278:	eeb0 7b46 	vmov.f64	d7, d6
 801a27c:	e7d2      	b.n	801a224 <__kernel_rem_pio2+0x444>
 801a27e:	ecb2 6b02 	vldmia	r2!, {d6}
 801a282:	3301      	adds	r3, #1
 801a284:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a288:	e7d4      	b.n	801a234 <__kernel_rem_pio2+0x454>
 801a28a:	ed91 7b00 	vldr	d7, [r1]
 801a28e:	ed91 5b02 	vldr	d5, [r1, #8]
 801a292:	3801      	subs	r0, #1
 801a294:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a298:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a29c:	ed81 6b00 	vstr	d6, [r1]
 801a2a0:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a2a4:	ed81 7b02 	vstr	d7, [r1, #8]
 801a2a8:	e795      	b.n	801a1d6 <__kernel_rem_pio2+0x3f6>
 801a2aa:	ed92 7b00 	vldr	d7, [r2]
 801a2ae:	ed92 5b02 	vldr	d5, [r2, #8]
 801a2b2:	3901      	subs	r1, #1
 801a2b4:	ee37 6b05 	vadd.f64	d6, d7, d5
 801a2b8:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a2bc:	ed82 6b00 	vstr	d6, [r2]
 801a2c0:	ee37 7b05 	vadd.f64	d7, d7, d5
 801a2c4:	ed82 7b02 	vstr	d7, [r2, #8]
 801a2c8:	e78a      	b.n	801a1e0 <__kernel_rem_pio2+0x400>
 801a2ca:	ed33 6b02 	vldmdb	r3!, {d6}
 801a2ce:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801a2d2:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a2d6:	e78b      	b.n	801a1f0 <__kernel_rem_pio2+0x410>
 801a2d8:	eeb1 5b45 	vneg.f64	d5, d5
 801a2dc:	eeb1 6b46 	vneg.f64	d6, d6
 801a2e0:	ed87 5b00 	vstr	d5, [r7]
 801a2e4:	eeb1 7b47 	vneg.f64	d7, d7
 801a2e8:	ed87 6b02 	vstr	d6, [r7, #8]
 801a2ec:	e78d      	b.n	801a20a <__kernel_rem_pio2+0x42a>
 801a2ee:	bf00      	nop
 801a2f0:	00000000 	.word	0x00000000
 801a2f4:	41700000 	.word	0x41700000
 801a2f8:	00000000 	.word	0x00000000
 801a2fc:	3e700000 	.word	0x3e700000
	...

0801a308 <__kernel_tan>:
 801a308:	eeb0 7b40 	vmov.f64	d7, d0
 801a30c:	ee17 3a90 	vmov	r3, s15
 801a310:	4989      	ldr	r1, [pc, #548]	; (801a538 <__kernel_tan+0x230>)
 801a312:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801a316:	428a      	cmp	r2, r1
 801a318:	b510      	push	{r4, lr}
 801a31a:	dc33      	bgt.n	801a384 <__kernel_tan+0x7c>
 801a31c:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801a320:	ee16 1a90 	vmov	r1, s13
 801a324:	2900      	cmp	r1, #0
 801a326:	d143      	bne.n	801a3b0 <__kernel_tan+0xa8>
 801a328:	ee10 4a10 	vmov	r4, s0
 801a32c:	1c43      	adds	r3, r0, #1
 801a32e:	4323      	orrs	r3, r4
 801a330:	4313      	orrs	r3, r2
 801a332:	d108      	bne.n	801a346 <__kernel_tan+0x3e>
 801a334:	f000 fa20 	bl	801a778 <fabs>
 801a338:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a33c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801a340:	eeb0 0b47 	vmov.f64	d0, d7
 801a344:	bd10      	pop	{r4, pc}
 801a346:	2801      	cmp	r0, #1
 801a348:	d0fa      	beq.n	801a340 <__kernel_tan+0x38>
 801a34a:	ee30 6b01 	vadd.f64	d6, d0, d1
 801a34e:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a352:	ec53 2b16 	vmov	r2, r3, d6
 801a356:	ee87 3b06 	vdiv.f64	d3, d7, d6
 801a35a:	460a      	mov	r2, r1
 801a35c:	ec43 2b15 	vmov	d5, r2, r3
 801a360:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a364:	ec53 2b13 	vmov	r2, r3, d3
 801a368:	ee35 4b40 	vsub.f64	d4, d5, d0
 801a36c:	460a      	mov	r2, r1
 801a36e:	ec43 2b17 	vmov	d7, r2, r3
 801a372:	ee31 4b44 	vsub.f64	d4, d1, d4
 801a376:	eea5 6b07 	vfma.f64	d6, d5, d7
 801a37a:	eea4 6b07 	vfma.f64	d6, d4, d7
 801a37e:	eea6 7b03 	vfma.f64	d7, d6, d3
 801a382:	e7dd      	b.n	801a340 <__kernel_tan+0x38>
 801a384:	496d      	ldr	r1, [pc, #436]	; (801a53c <__kernel_tan+0x234>)
 801a386:	428a      	cmp	r2, r1
 801a388:	dd12      	ble.n	801a3b0 <__kernel_tan+0xa8>
 801a38a:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 801a4b8 <__kernel_tan+0x1b0>
 801a38e:	2b00      	cmp	r3, #0
 801a390:	bfb8      	it	lt
 801a392:	eeb1 7b40 	vneglt.f64	d7, d0
 801a396:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a39a:	ed9f 7b49 	vldr	d7, [pc, #292]	; 801a4c0 <__kernel_tan+0x1b8>
 801a39e:	bfb8      	it	lt
 801a3a0:	eeb1 1b41 	vneglt.f64	d1, d1
 801a3a4:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a3a8:	ed9f 1b47 	vldr	d1, [pc, #284]	; 801a4c8 <__kernel_tan+0x1c0>
 801a3ac:	ee37 7b06 	vadd.f64	d7, d7, d6
 801a3b0:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a3b4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a4d0 <__kernel_tan+0x1c8>
 801a3b8:	ee25 6b05 	vmul.f64	d6, d5, d5
 801a3bc:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a4d8 <__kernel_tan+0x1d0>
 801a3c0:	eea6 4b03 	vfma.f64	d4, d6, d3
 801a3c4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a4e0 <__kernel_tan+0x1d8>
 801a3c8:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a3cc:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a4e8 <__kernel_tan+0x1e0>
 801a3d0:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a3d4:	ed9f 3b46 	vldr	d3, [pc, #280]	; 801a4f0 <__kernel_tan+0x1e8>
 801a3d8:	eea4 3b06 	vfma.f64	d3, d4, d6
 801a3dc:	ed9f 4b46 	vldr	d4, [pc, #280]	; 801a4f8 <__kernel_tan+0x1f0>
 801a3e0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a500 <__kernel_tan+0x1f8>
 801a3e4:	eea3 4b06 	vfma.f64	d4, d3, d6
 801a3e8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a508 <__kernel_tan+0x200>
 801a3ec:	eea6 3b02 	vfma.f64	d3, d6, d2
 801a3f0:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a510 <__kernel_tan+0x208>
 801a3f4:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a3f8:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a518 <__kernel_tan+0x210>
 801a3fc:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a400:	ed9f 2b47 	vldr	d2, [pc, #284]	; 801a520 <__kernel_tan+0x218>
 801a404:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a408:	ed9f 3b47 	vldr	d3, [pc, #284]	; 801a528 <__kernel_tan+0x220>
 801a40c:	494b      	ldr	r1, [pc, #300]	; (801a53c <__kernel_tan+0x234>)
 801a40e:	eea2 3b06 	vfma.f64	d3, d2, d6
 801a412:	ee27 2b05 	vmul.f64	d2, d7, d5
 801a416:	eeb0 6b44 	vmov.f64	d6, d4
 801a41a:	eeb0 4b41 	vmov.f64	d4, d1
 801a41e:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a422:	eea6 4b02 	vfma.f64	d4, d6, d2
 801a426:	ed9f 6b42 	vldr	d6, [pc, #264]	; 801a530 <__kernel_tan+0x228>
 801a42a:	eea4 1b05 	vfma.f64	d1, d4, d5
 801a42e:	428a      	cmp	r2, r1
 801a430:	eea2 1b06 	vfma.f64	d1, d2, d6
 801a434:	ee37 5b01 	vadd.f64	d5, d7, d1
 801a438:	dd1d      	ble.n	801a476 <__kernel_tan+0x16e>
 801a43a:	ee25 3b05 	vmul.f64	d3, d5, d5
 801a43e:	179b      	asrs	r3, r3, #30
 801a440:	ee06 0a90 	vmov	s13, r0
 801a444:	f003 0302 	and.w	r3, r3, #2
 801a448:	f1c3 0301 	rsb	r3, r3, #1
 801a44c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a450:	ee35 5b06 	vadd.f64	d5, d5, d6
 801a454:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801a458:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801a45c:	ee34 4b41 	vsub.f64	d4, d4, d1
 801a460:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a464:	eea7 6b45 	vfms.f64	d6, d7, d5
 801a468:	ee07 3a90 	vmov	s15, r3
 801a46c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a470:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a474:	e764      	b.n	801a340 <__kernel_tan+0x38>
 801a476:	2801      	cmp	r0, #1
 801a478:	d01a      	beq.n	801a4b0 <__kernel_tan+0x1a8>
 801a47a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a47e:	ec51 0b15 	vmov	r0, r1, d5
 801a482:	2000      	movs	r0, #0
 801a484:	ec41 0b13 	vmov	d3, r0, r1
 801a488:	ee33 7b47 	vsub.f64	d7, d3, d7
 801a48c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801a490:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801a494:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801a498:	ec53 2b14 	vmov	r2, r3, d4
 801a49c:	4602      	mov	r2, r0
 801a49e:	ec43 2b17 	vmov	d7, r2, r3
 801a4a2:	eea3 6b07 	vfma.f64	d6, d3, d7
 801a4a6:	eea1 6b07 	vfma.f64	d6, d1, d7
 801a4aa:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a4ae:	e747      	b.n	801a340 <__kernel_tan+0x38>
 801a4b0:	eeb0 7b45 	vmov.f64	d7, d5
 801a4b4:	e744      	b.n	801a340 <__kernel_tan+0x38>
 801a4b6:	bf00      	nop
 801a4b8:	54442d18 	.word	0x54442d18
 801a4bc:	3fe921fb 	.word	0x3fe921fb
 801a4c0:	33145c07 	.word	0x33145c07
 801a4c4:	3c81a626 	.word	0x3c81a626
	...
 801a4d0:	db605373 	.word	0xdb605373
 801a4d4:	bef375cb 	.word	0xbef375cb
 801a4d8:	a03792a6 	.word	0xa03792a6
 801a4dc:	3f147e88 	.word	0x3f147e88
 801a4e0:	f2f26501 	.word	0xf2f26501
 801a4e4:	3f4344d8 	.word	0x3f4344d8
 801a4e8:	c9560328 	.word	0xc9560328
 801a4ec:	3f6d6d22 	.word	0x3f6d6d22
 801a4f0:	8406d637 	.word	0x8406d637
 801a4f4:	3f9664f4 	.word	0x3f9664f4
 801a4f8:	1110fe7a 	.word	0x1110fe7a
 801a4fc:	3fc11111 	.word	0x3fc11111
 801a500:	74bf7ad4 	.word	0x74bf7ad4
 801a504:	3efb2a70 	.word	0x3efb2a70
 801a508:	32f0a7e9 	.word	0x32f0a7e9
 801a50c:	3f12b80f 	.word	0x3f12b80f
 801a510:	1a8d1068 	.word	0x1a8d1068
 801a514:	3f3026f7 	.word	0x3f3026f7
 801a518:	fee08315 	.word	0xfee08315
 801a51c:	3f57dbc8 	.word	0x3f57dbc8
 801a520:	e96e8493 	.word	0xe96e8493
 801a524:	3f8226e3 	.word	0x3f8226e3
 801a528:	1bb341fe 	.word	0x1bb341fe
 801a52c:	3faba1ba 	.word	0x3faba1ba
 801a530:	55555563 	.word	0x55555563
 801a534:	3fd55555 	.word	0x3fd55555
 801a538:	3e2fffff 	.word	0x3e2fffff
 801a53c:	3fe59427 	.word	0x3fe59427

0801a540 <expm1f>:
 801a540:	ee10 2a10 	vmov	r2, s0
 801a544:	497d      	ldr	r1, [pc, #500]	; (801a73c <expm1f+0x1fc>)
 801a546:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801a54a:	428b      	cmp	r3, r1
 801a54c:	d920      	bls.n	801a590 <expm1f+0x50>
 801a54e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801a552:	d902      	bls.n	801a55a <expm1f+0x1a>
 801a554:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a558:	4770      	bx	lr
 801a55a:	d105      	bne.n	801a568 <expm1f+0x28>
 801a55c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801a560:	2a00      	cmp	r2, #0
 801a562:	fe20 0a27 	vselge.f32	s0, s0, s15
 801a566:	4770      	bx	lr
 801a568:	2a00      	cmp	r2, #0
 801a56a:	db05      	blt.n	801a578 <expm1f+0x38>
 801a56c:	4974      	ldr	r1, [pc, #464]	; (801a740 <expm1f+0x200>)
 801a56e:	428b      	cmp	r3, r1
 801a570:	d95c      	bls.n	801a62c <expm1f+0xec>
 801a572:	2000      	movs	r0, #0
 801a574:	f7fe bf5e 	b.w	8019434 <__math_oflowf>
 801a578:	eddf 7a72 	vldr	s15, [pc, #456]	; 801a744 <expm1f+0x204>
 801a57c:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a580:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801a584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a588:	d550      	bpl.n	801a62c <expm1f+0xec>
 801a58a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801a58e:	4770      	bx	lr
 801a590:	496d      	ldr	r1, [pc, #436]	; (801a748 <expm1f+0x208>)
 801a592:	428b      	cmp	r3, r1
 801a594:	d966      	bls.n	801a664 <expm1f+0x124>
 801a596:	496d      	ldr	r1, [pc, #436]	; (801a74c <expm1f+0x20c>)
 801a598:	428b      	cmp	r3, r1
 801a59a:	d847      	bhi.n	801a62c <expm1f+0xec>
 801a59c:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 801a750 <expm1f+0x210>
 801a5a0:	2a00      	cmp	r2, #0
 801a5a2:	bfa7      	ittee	ge
 801a5a4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801a5a8:	eddf 6a6a 	vldrge	s13, [pc, #424]	; 801a754 <expm1f+0x214>
 801a5ac:	eddf 6a6a 	vldrlt	s13, [pc, #424]	; 801a758 <expm1f+0x218>
 801a5b0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801a5b4:	bfac      	ite	ge
 801a5b6:	2301      	movge	r3, #1
 801a5b8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a5bc:	ee37 0a66 	vsub.f32	s0, s14, s13
 801a5c0:	ee77 7a40 	vsub.f32	s15, s14, s0
 801a5c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a5c8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801a5cc:	ee20 4a25 	vmul.f32	s8, s0, s11
 801a5d0:	ed9f 6a62 	vldr	s12, [pc, #392]	; 801a75c <expm1f+0x21c>
 801a5d4:	eddf 6a62 	vldr	s13, [pc, #392]	; 801a760 <expm1f+0x220>
 801a5d8:	ed9f 5a62 	vldr	s10, [pc, #392]	; 801a764 <expm1f+0x224>
 801a5dc:	ee20 7a04 	vmul.f32	s14, s0, s8
 801a5e0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801a5e4:	eee7 6a06 	vfma.f32	s13, s14, s12
 801a5e8:	ed9f 6a5f 	vldr	s12, [pc, #380]	; 801a768 <expm1f+0x228>
 801a5ec:	eea6 6a87 	vfma.f32	s12, s13, s14
 801a5f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 801a76c <expm1f+0x22c>
 801a5f4:	eee6 6a07 	vfma.f32	s13, s12, s14
 801a5f8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a5fc:	eea6 5a87 	vfma.f32	s10, s13, s14
 801a600:	eef0 6a46 	vmov.f32	s13, s12
 801a604:	eee5 6a07 	vfma.f32	s13, s10, s14
 801a608:	eee4 4a66 	vfms.f32	s9, s8, s13
 801a60c:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801a610:	eea0 4a64 	vfms.f32	s8, s0, s9
 801a614:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801a618:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801a61c:	ee66 6a87 	vmul.f32	s13, s13, s14
 801a620:	bb73      	cbnz	r3, 801a680 <expm1f+0x140>
 801a622:	ee90 7a26 	vfnms.f32	s14, s0, s13
 801a626:	ee30 0a47 	vsub.f32	s0, s0, s14
 801a62a:	4770      	bx	lr
 801a62c:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801a630:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a634:	2a00      	cmp	r2, #0
 801a636:	fe67 7a87 	vselge.f32	s15, s15, s14
 801a63a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 801a770 <expm1f+0x230>
 801a63e:	ee40 7a07 	vmla.f32	s15, s0, s14
 801a642:	eeb0 7a40 	vmov.f32	s14, s0
 801a646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a64a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801a64e:	ee17 3a90 	vmov	r3, s15
 801a652:	eddf 7a3f 	vldr	s15, [pc, #252]	; 801a750 <expm1f+0x210>
 801a656:	eea6 7ae7 	vfms.f32	s14, s13, s15
 801a65a:	eddf 7a3e 	vldr	s15, [pc, #248]	; 801a754 <expm1f+0x214>
 801a65e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 801a662:	e7ab      	b.n	801a5bc <expm1f+0x7c>
 801a664:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801a668:	d208      	bcs.n	801a67c <expm1f+0x13c>
 801a66a:	eddf 7a42 	vldr	s15, [pc, #264]	; 801a774 <expm1f+0x234>
 801a66e:	ee70 7a27 	vadd.f32	s15, s0, s15
 801a672:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801a676:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a67a:	4770      	bx	lr
 801a67c:	2300      	movs	r3, #0
 801a67e:	e7a3      	b.n	801a5c8 <expm1f+0x88>
 801a680:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801a684:	1c5a      	adds	r2, r3, #1
 801a686:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801a68a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a68e:	d106      	bne.n	801a69e <expm1f+0x15e>
 801a690:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a694:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a698:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801a69c:	4770      	bx	lr
 801a69e:	2b01      	cmp	r3, #1
 801a6a0:	d118      	bne.n	801a6d4 <expm1f+0x194>
 801a6a2:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801a6a6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a6aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a6ae:	bf5b      	ittet	pl
 801a6b0:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801a6b4:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801a6b8:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 801a6bc:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801a6c0:	bf43      	ittte	mi
 801a6c2:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 801a6c6:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801a6ca:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801a6ce:	eeb0 0a46 	vmovpl.f32	s0, s12
 801a6d2:	4770      	bx	lr
 801a6d4:	1c5a      	adds	r2, r3, #1
 801a6d6:	2a39      	cmp	r2, #57	; 0x39
 801a6d8:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801a6dc:	d90b      	bls.n	801a6f6 <expm1f+0x1b6>
 801a6de:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a6e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 801a6e6:	ee17 3a90 	vmov	r3, s15
 801a6ea:	4419      	add	r1, r3
 801a6ec:	ee07 1a90 	vmov	s15, r1
 801a6f0:	ee37 0ac6 	vsub.f32	s0, s15, s12
 801a6f4:	4770      	bx	lr
 801a6f6:	2b16      	cmp	r3, #22
 801a6f8:	dc11      	bgt.n	801a71e <expm1f+0x1de>
 801a6fa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801a6fe:	fa42 f303 	asr.w	r3, r2, r3
 801a702:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801a706:	ee07 3a10 	vmov	s14, r3
 801a70a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801a70e:	ee77 7a67 	vsub.f32	s15, s14, s15
 801a712:	ee17 3a90 	vmov	r3, s15
 801a716:	440b      	add	r3, r1
 801a718:	ee00 3a10 	vmov	s0, r3
 801a71c:	4770      	bx	lr
 801a71e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801a722:	05db      	lsls	r3, r3, #23
 801a724:	ee07 3a10 	vmov	s14, r3
 801a728:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a72c:	ee70 7a67 	vsub.f32	s15, s0, s15
 801a730:	ee77 7a86 	vadd.f32	s15, s15, s12
 801a734:	ee17 3a90 	vmov	r3, s15
 801a738:	e7ed      	b.n	801a716 <expm1f+0x1d6>
 801a73a:	bf00      	nop
 801a73c:	4195b843 	.word	0x4195b843
 801a740:	42b17217 	.word	0x42b17217
 801a744:	0da24260 	.word	0x0da24260
 801a748:	3eb17218 	.word	0x3eb17218
 801a74c:	3f851591 	.word	0x3f851591
 801a750:	3f317180 	.word	0x3f317180
 801a754:	3717f7d1 	.word	0x3717f7d1
 801a758:	b717f7d1 	.word	0xb717f7d1
 801a75c:	b457edbb 	.word	0xb457edbb
 801a760:	36867e54 	.word	0x36867e54
 801a764:	bd088889 	.word	0xbd088889
 801a768:	b8a670cd 	.word	0xb8a670cd
 801a76c:	3ad00d01 	.word	0x3ad00d01
 801a770:	3fb8aa3b 	.word	0x3fb8aa3b
 801a774:	7149f2ca 	.word	0x7149f2ca

0801a778 <fabs>:
 801a778:	ec51 0b10 	vmov	r0, r1, d0
 801a77c:	ee10 2a10 	vmov	r2, s0
 801a780:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a784:	ec43 2b10 	vmov	d0, r2, r3
 801a788:	4770      	bx	lr
 801a78a:	0000      	movs	r0, r0
 801a78c:	0000      	movs	r0, r0
	...

0801a790 <scalbn>:
 801a790:	ee10 1a90 	vmov	r1, s1
 801a794:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a798:	b98b      	cbnz	r3, 801a7be <scalbn+0x2e>
 801a79a:	ee10 3a10 	vmov	r3, s0
 801a79e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a7a2:	4319      	orrs	r1, r3
 801a7a4:	d00a      	beq.n	801a7bc <scalbn+0x2c>
 801a7a6:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801a858 <scalbn+0xc8>
 801a7aa:	4b37      	ldr	r3, [pc, #220]	; (801a888 <scalbn+0xf8>)
 801a7ac:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a7b0:	4298      	cmp	r0, r3
 801a7b2:	da0b      	bge.n	801a7cc <scalbn+0x3c>
 801a7b4:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 801a860 <scalbn+0xd0>
 801a7b8:	ee20 0b07 	vmul.f64	d0, d0, d7
 801a7bc:	4770      	bx	lr
 801a7be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801a7c2:	4293      	cmp	r3, r2
 801a7c4:	d107      	bne.n	801a7d6 <scalbn+0x46>
 801a7c6:	ee30 0b00 	vadd.f64	d0, d0, d0
 801a7ca:	4770      	bx	lr
 801a7cc:	ee10 1a90 	vmov	r1, s1
 801a7d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801a7d4:	3b36      	subs	r3, #54	; 0x36
 801a7d6:	f24c 3250 	movw	r2, #50000	; 0xc350
 801a7da:	4290      	cmp	r0, r2
 801a7dc:	dd0d      	ble.n	801a7fa <scalbn+0x6a>
 801a7de:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801a868 <scalbn+0xd8>
 801a7e2:	ee10 3a90 	vmov	r3, s1
 801a7e6:	eeb0 6b47 	vmov.f64	d6, d7
 801a7ea:	ed9f 5b21 	vldr	d5, [pc, #132]	; 801a870 <scalbn+0xe0>
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	fe27 7b05 	vselge.f64	d7, d7, d5
 801a7f4:	ee27 0b06 	vmul.f64	d0, d7, d6
 801a7f8:	4770      	bx	lr
 801a7fa:	4418      	add	r0, r3
 801a7fc:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801a800:	4298      	cmp	r0, r3
 801a802:	dcec      	bgt.n	801a7de <scalbn+0x4e>
 801a804:	2800      	cmp	r0, #0
 801a806:	dd0a      	ble.n	801a81e <scalbn+0x8e>
 801a808:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801a80c:	ec53 2b10 	vmov	r2, r3, d0
 801a810:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801a814:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a818:	ec43 2b10 	vmov	d0, r2, r3
 801a81c:	4770      	bx	lr
 801a81e:	f110 0f35 	cmn.w	r0, #53	; 0x35
 801a822:	da09      	bge.n	801a838 <scalbn+0xa8>
 801a824:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801a860 <scalbn+0xd0>
 801a828:	ee10 3a90 	vmov	r3, s1
 801a82c:	eeb0 6b47 	vmov.f64	d6, d7
 801a830:	ed9f 5b11 	vldr	d5, [pc, #68]	; 801a878 <scalbn+0xe8>
 801a834:	2b00      	cmp	r3, #0
 801a836:	e7db      	b.n	801a7f0 <scalbn+0x60>
 801a838:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801a83c:	ec53 2b10 	vmov	r2, r3, d0
 801a840:	3036      	adds	r0, #54	; 0x36
 801a842:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801a846:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 801a84a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 801a880 <scalbn+0xf0>
 801a84e:	ec43 2b10 	vmov	d0, r2, r3
 801a852:	e7b1      	b.n	801a7b8 <scalbn+0x28>
 801a854:	f3af 8000 	nop.w
 801a858:	00000000 	.word	0x00000000
 801a85c:	43500000 	.word	0x43500000
 801a860:	c2f8f359 	.word	0xc2f8f359
 801a864:	01a56e1f 	.word	0x01a56e1f
 801a868:	8800759c 	.word	0x8800759c
 801a86c:	7e37e43c 	.word	0x7e37e43c
 801a870:	8800759c 	.word	0x8800759c
 801a874:	fe37e43c 	.word	0xfe37e43c
 801a878:	c2f8f359 	.word	0xc2f8f359
 801a87c:	81a56e1f 	.word	0x81a56e1f
 801a880:	00000000 	.word	0x00000000
 801a884:	3c900000 	.word	0x3c900000
 801a888:	ffff3cb0 	.word	0xffff3cb0

0801a88c <__kernel_rem_pio2f>:
 801a88c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a890:	ed2d 8b04 	vpush	{d8-d9}
 801a894:	b0d9      	sub	sp, #356	; 0x164
 801a896:	4688      	mov	r8, r1
 801a898:	9002      	str	r0, [sp, #8]
 801a89a:	49b8      	ldr	r1, [pc, #736]	; (801ab7c <__kernel_rem_pio2f+0x2f0>)
 801a89c:	9866      	ldr	r0, [sp, #408]	; 0x198
 801a89e:	9301      	str	r3, [sp, #4]
 801a8a0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801a8a4:	9901      	ldr	r1, [sp, #4]
 801a8a6:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 801a8a8:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 801a8ac:	1d11      	adds	r1, r2, #4
 801a8ae:	db25      	blt.n	801a8fc <__kernel_rem_pio2f+0x70>
 801a8b0:	1ed0      	subs	r0, r2, #3
 801a8b2:	bf48      	it	mi
 801a8b4:	1d10      	addmi	r0, r2, #4
 801a8b6:	10c0      	asrs	r0, r0, #3
 801a8b8:	1c45      	adds	r5, r0, #1
 801a8ba:	00e9      	lsls	r1, r5, #3
 801a8bc:	eba0 070b 	sub.w	r7, r0, fp
 801a8c0:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801a8c4:	9103      	str	r1, [sp, #12]
 801a8c6:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801a8ca:	eb0a 0c0b 	add.w	ip, sl, fp
 801a8ce:	ae1c      	add	r6, sp, #112	; 0x70
 801a8d0:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801a8d4:	2400      	movs	r4, #0
 801a8d6:	4564      	cmp	r4, ip
 801a8d8:	dd12      	ble.n	801a900 <__kernel_rem_pio2f+0x74>
 801a8da:	9901      	ldr	r1, [sp, #4]
 801a8dc:	ac1c      	add	r4, sp, #112	; 0x70
 801a8de:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a8e2:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 801a8e6:	f04f 0c00 	mov.w	ip, #0
 801a8ea:	45d4      	cmp	ip, sl
 801a8ec:	dc27      	bgt.n	801a93e <__kernel_rem_pio2f+0xb2>
 801a8ee:	f8dd e008 	ldr.w	lr, [sp, #8]
 801a8f2:	eddf 7aa6 	vldr	s15, [pc, #664]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801a8f6:	4627      	mov	r7, r4
 801a8f8:	2600      	movs	r6, #0
 801a8fa:	e016      	b.n	801a92a <__kernel_rem_pio2f+0x9e>
 801a8fc:	2000      	movs	r0, #0
 801a8fe:	e7db      	b.n	801a8b8 <__kernel_rem_pio2f+0x2c>
 801a900:	42e7      	cmn	r7, r4
 801a902:	bf5d      	ittte	pl
 801a904:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 801a908:	ee07 1a90 	vmovpl	s15, r1
 801a90c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a910:	eef0 7a47 	vmovmi.f32	s15, s14
 801a914:	ece6 7a01 	vstmia	r6!, {s15}
 801a918:	3401      	adds	r4, #1
 801a91a:	e7dc      	b.n	801a8d6 <__kernel_rem_pio2f+0x4a>
 801a91c:	ecfe 6a01 	vldmia	lr!, {s13}
 801a920:	ed97 7a00 	vldr	s14, [r7]
 801a924:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a928:	3601      	adds	r6, #1
 801a92a:	455e      	cmp	r6, fp
 801a92c:	f1a7 0704 	sub.w	r7, r7, #4
 801a930:	ddf4      	ble.n	801a91c <__kernel_rem_pio2f+0x90>
 801a932:	ece9 7a01 	vstmia	r9!, {s15}
 801a936:	f10c 0c01 	add.w	ip, ip, #1
 801a93a:	3404      	adds	r4, #4
 801a93c:	e7d5      	b.n	801a8ea <__kernel_rem_pio2f+0x5e>
 801a93e:	a908      	add	r1, sp, #32
 801a940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a944:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 801a948:	eddf 8a8f 	vldr	s17, [pc, #572]	; 801ab88 <__kernel_rem_pio2f+0x2fc>
 801a94c:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 801ab84 <__kernel_rem_pio2f+0x2f8>
 801a950:	9105      	str	r1, [sp, #20]
 801a952:	9304      	str	r3, [sp, #16]
 801a954:	4656      	mov	r6, sl
 801a956:	00b3      	lsls	r3, r6, #2
 801a958:	9306      	str	r3, [sp, #24]
 801a95a:	ab58      	add	r3, sp, #352	; 0x160
 801a95c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a960:	ac08      	add	r4, sp, #32
 801a962:	ab44      	add	r3, sp, #272	; 0x110
 801a964:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801a968:	46a4      	mov	ip, r4
 801a96a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801a96e:	4637      	mov	r7, r6
 801a970:	2f00      	cmp	r7, #0
 801a972:	f1a0 0004 	sub.w	r0, r0, #4
 801a976:	dc4a      	bgt.n	801aa0e <__kernel_rem_pio2f+0x182>
 801a978:	4628      	mov	r0, r5
 801a97a:	9207      	str	r2, [sp, #28]
 801a97c:	f000 fab2 	bl	801aee4 <scalbnf>
 801a980:	eeb0 8a40 	vmov.f32	s16, s0
 801a984:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a988:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a98c:	f000 fa68 	bl	801ae60 <floorf>
 801a990:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a994:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a998:	2d00      	cmp	r5, #0
 801a99a:	9a07      	ldr	r2, [sp, #28]
 801a99c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a9a0:	ee17 9a90 	vmov	r9, s15
 801a9a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9a8:	ee38 8a67 	vsub.f32	s16, s16, s15
 801a9ac:	dd41      	ble.n	801aa32 <__kernel_rem_pio2f+0x1a6>
 801a9ae:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801a9b2:	ab08      	add	r3, sp, #32
 801a9b4:	f1c5 0e08 	rsb	lr, r5, #8
 801a9b8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801a9bc:	fa47 f00e 	asr.w	r0, r7, lr
 801a9c0:	4481      	add	r9, r0
 801a9c2:	fa00 f00e 	lsl.w	r0, r0, lr
 801a9c6:	1a3f      	subs	r7, r7, r0
 801a9c8:	f1c5 0007 	rsb	r0, r5, #7
 801a9cc:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801a9d0:	4107      	asrs	r7, r0
 801a9d2:	2f00      	cmp	r7, #0
 801a9d4:	dd3c      	ble.n	801aa50 <__kernel_rem_pio2f+0x1c4>
 801a9d6:	f04f 0e00 	mov.w	lr, #0
 801a9da:	f109 0901 	add.w	r9, r9, #1
 801a9de:	4671      	mov	r1, lr
 801a9e0:	4576      	cmp	r6, lr
 801a9e2:	dc67      	bgt.n	801aab4 <__kernel_rem_pio2f+0x228>
 801a9e4:	2d00      	cmp	r5, #0
 801a9e6:	dd03      	ble.n	801a9f0 <__kernel_rem_pio2f+0x164>
 801a9e8:	2d01      	cmp	r5, #1
 801a9ea:	d074      	beq.n	801aad6 <__kernel_rem_pio2f+0x24a>
 801a9ec:	2d02      	cmp	r5, #2
 801a9ee:	d07b      	beq.n	801aae8 <__kernel_rem_pio2f+0x25c>
 801a9f0:	2f02      	cmp	r7, #2
 801a9f2:	d12d      	bne.n	801aa50 <__kernel_rem_pio2f+0x1c4>
 801a9f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a9f8:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a9fc:	b341      	cbz	r1, 801aa50 <__kernel_rem_pio2f+0x1c4>
 801a9fe:	4628      	mov	r0, r5
 801aa00:	9207      	str	r2, [sp, #28]
 801aa02:	f000 fa6f 	bl	801aee4 <scalbnf>
 801aa06:	9a07      	ldr	r2, [sp, #28]
 801aa08:	ee38 8a40 	vsub.f32	s16, s16, s0
 801aa0c:	e020      	b.n	801aa50 <__kernel_rem_pio2f+0x1c4>
 801aa0e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801aa12:	3f01      	subs	r7, #1
 801aa14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa1c:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801aa20:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa24:	ecac 0a01 	vstmia	ip!, {s0}
 801aa28:	ed90 0a00 	vldr	s0, [r0]
 801aa2c:	ee37 0a80 	vadd.f32	s0, s15, s0
 801aa30:	e79e      	b.n	801a970 <__kernel_rem_pio2f+0xe4>
 801aa32:	d105      	bne.n	801aa40 <__kernel_rem_pio2f+0x1b4>
 801aa34:	1e70      	subs	r0, r6, #1
 801aa36:	ab08      	add	r3, sp, #32
 801aa38:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801aa3c:	11ff      	asrs	r7, r7, #7
 801aa3e:	e7c8      	b.n	801a9d2 <__kernel_rem_pio2f+0x146>
 801aa40:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801aa44:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801aa48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa4c:	da30      	bge.n	801aab0 <__kernel_rem_pio2f+0x224>
 801aa4e:	2700      	movs	r7, #0
 801aa50:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801aa54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa58:	f040 809a 	bne.w	801ab90 <__kernel_rem_pio2f+0x304>
 801aa5c:	1e74      	subs	r4, r6, #1
 801aa5e:	46a4      	mov	ip, r4
 801aa60:	2100      	movs	r1, #0
 801aa62:	45d4      	cmp	ip, sl
 801aa64:	da47      	bge.n	801aaf6 <__kernel_rem_pio2f+0x26a>
 801aa66:	2900      	cmp	r1, #0
 801aa68:	d063      	beq.n	801ab32 <__kernel_rem_pio2f+0x2a6>
 801aa6a:	ab08      	add	r3, sp, #32
 801aa6c:	3d08      	subs	r5, #8
 801aa6e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d07f      	beq.n	801ab76 <__kernel_rem_pio2f+0x2ea>
 801aa76:	4628      	mov	r0, r5
 801aa78:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801aa7c:	f000 fa32 	bl	801aee4 <scalbnf>
 801aa80:	1c63      	adds	r3, r4, #1
 801aa82:	aa44      	add	r2, sp, #272	; 0x110
 801aa84:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801ab88 <__kernel_rem_pio2f+0x2fc>
 801aa88:	0099      	lsls	r1, r3, #2
 801aa8a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801aa8e:	4623      	mov	r3, r4
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	f280 80ad 	bge.w	801abf0 <__kernel_rem_pio2f+0x364>
 801aa96:	4623      	mov	r3, r4
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	f2c0 80cb 	blt.w	801ac34 <__kernel_rem_pio2f+0x3a8>
 801aa9e:	aa44      	add	r2, sp, #272	; 0x110
 801aaa0:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 801aaa4:	4e36      	ldr	r6, [pc, #216]	; (801ab80 <__kernel_rem_pio2f+0x2f4>)
 801aaa6:	eddf 7a39 	vldr	s15, [pc, #228]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801aaaa:	2000      	movs	r0, #0
 801aaac:	1ae2      	subs	r2, r4, r3
 801aaae:	e0b6      	b.n	801ac1e <__kernel_rem_pio2f+0x392>
 801aab0:	2702      	movs	r7, #2
 801aab2:	e790      	b.n	801a9d6 <__kernel_rem_pio2f+0x14a>
 801aab4:	6820      	ldr	r0, [r4, #0]
 801aab6:	b949      	cbnz	r1, 801aacc <__kernel_rem_pio2f+0x240>
 801aab8:	b118      	cbz	r0, 801aac2 <__kernel_rem_pio2f+0x236>
 801aaba:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801aabe:	6020      	str	r0, [r4, #0]
 801aac0:	2001      	movs	r0, #1
 801aac2:	f10e 0e01 	add.w	lr, lr, #1
 801aac6:	3404      	adds	r4, #4
 801aac8:	4601      	mov	r1, r0
 801aaca:	e789      	b.n	801a9e0 <__kernel_rem_pio2f+0x154>
 801aacc:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801aad0:	6020      	str	r0, [r4, #0]
 801aad2:	4608      	mov	r0, r1
 801aad4:	e7f5      	b.n	801aac2 <__kernel_rem_pio2f+0x236>
 801aad6:	1e74      	subs	r4, r6, #1
 801aad8:	ab08      	add	r3, sp, #32
 801aada:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aade:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801aae2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801aae6:	e783      	b.n	801a9f0 <__kernel_rem_pio2f+0x164>
 801aae8:	1e74      	subs	r4, r6, #1
 801aaea:	ab08      	add	r3, sp, #32
 801aaec:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 801aaf0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801aaf4:	e7f5      	b.n	801aae2 <__kernel_rem_pio2f+0x256>
 801aaf6:	ab08      	add	r3, sp, #32
 801aaf8:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 801aafc:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801ab00:	4301      	orrs	r1, r0
 801ab02:	e7ae      	b.n	801aa62 <__kernel_rem_pio2f+0x1d6>
 801ab04:	3001      	adds	r0, #1
 801ab06:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 801ab0a:	2f00      	cmp	r7, #0
 801ab0c:	d0fa      	beq.n	801ab04 <__kernel_rem_pio2f+0x278>
 801ab0e:	9b06      	ldr	r3, [sp, #24]
 801ab10:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801ab14:	eb0d 0403 	add.w	r4, sp, r3
 801ab18:	9b01      	ldr	r3, [sp, #4]
 801ab1a:	18f7      	adds	r7, r6, r3
 801ab1c:	ab1c      	add	r3, sp, #112	; 0x70
 801ab1e:	f106 0c01 	add.w	ip, r6, #1
 801ab22:	3c4c      	subs	r4, #76	; 0x4c
 801ab24:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801ab28:	4430      	add	r0, r6
 801ab2a:	4560      	cmp	r0, ip
 801ab2c:	da04      	bge.n	801ab38 <__kernel_rem_pio2f+0x2ac>
 801ab2e:	4606      	mov	r6, r0
 801ab30:	e711      	b.n	801a956 <__kernel_rem_pio2f+0xca>
 801ab32:	9c05      	ldr	r4, [sp, #20]
 801ab34:	2001      	movs	r0, #1
 801ab36:	e7e6      	b.n	801ab06 <__kernel_rem_pio2f+0x27a>
 801ab38:	9b04      	ldr	r3, [sp, #16]
 801ab3a:	f8dd e008 	ldr.w	lr, [sp, #8]
 801ab3e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ab42:	9306      	str	r3, [sp, #24]
 801ab44:	ee07 3a90 	vmov	s15, r3
 801ab48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ab4c:	2600      	movs	r6, #0
 801ab4e:	ece7 7a01 	vstmia	r7!, {s15}
 801ab52:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801ab56:	46b9      	mov	r9, r7
 801ab58:	455e      	cmp	r6, fp
 801ab5a:	dd04      	ble.n	801ab66 <__kernel_rem_pio2f+0x2da>
 801ab5c:	ece4 7a01 	vstmia	r4!, {s15}
 801ab60:	f10c 0c01 	add.w	ip, ip, #1
 801ab64:	e7e1      	b.n	801ab2a <__kernel_rem_pio2f+0x29e>
 801ab66:	ecfe 6a01 	vldmia	lr!, {s13}
 801ab6a:	ed39 7a01 	vldmdb	r9!, {s14}
 801ab6e:	3601      	adds	r6, #1
 801ab70:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ab74:	e7f0      	b.n	801ab58 <__kernel_rem_pio2f+0x2cc>
 801ab76:	3c01      	subs	r4, #1
 801ab78:	e777      	b.n	801aa6a <__kernel_rem_pio2f+0x1de>
 801ab7a:	bf00      	nop
 801ab7c:	080272e4 	.word	0x080272e4
 801ab80:	080272b8 	.word	0x080272b8
 801ab84:	43800000 	.word	0x43800000
 801ab88:	3b800000 	.word	0x3b800000
 801ab8c:	00000000 	.word	0x00000000
 801ab90:	9b03      	ldr	r3, [sp, #12]
 801ab92:	eeb0 0a48 	vmov.f32	s0, s16
 801ab96:	1a98      	subs	r0, r3, r2
 801ab98:	f000 f9a4 	bl	801aee4 <scalbnf>
 801ab9c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801ab84 <__kernel_rem_pio2f+0x2f8>
 801aba0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801aba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aba8:	db19      	blt.n	801abde <__kernel_rem_pio2f+0x352>
 801abaa:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801ab88 <__kernel_rem_pio2f+0x2fc>
 801abae:	ee60 7a27 	vmul.f32	s15, s0, s15
 801abb2:	aa08      	add	r2, sp, #32
 801abb4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abb8:	1c74      	adds	r4, r6, #1
 801abba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801abbe:	3508      	adds	r5, #8
 801abc0:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801abc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801abc8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801abcc:	ee10 3a10 	vmov	r3, s0
 801abd0:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801abd4:	ee17 3a90 	vmov	r3, s15
 801abd8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801abdc:	e74b      	b.n	801aa76 <__kernel_rem_pio2f+0x1ea>
 801abde:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801abe2:	aa08      	add	r2, sp, #32
 801abe4:	ee10 3a10 	vmov	r3, s0
 801abe8:	4634      	mov	r4, r6
 801abea:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801abee:	e742      	b.n	801aa76 <__kernel_rem_pio2f+0x1ea>
 801abf0:	a808      	add	r0, sp, #32
 801abf2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801abf6:	9001      	str	r0, [sp, #4]
 801abf8:	ee07 0a90 	vmov	s15, r0
 801abfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ac00:	3b01      	subs	r3, #1
 801ac02:	ee67 7a80 	vmul.f32	s15, s15, s0
 801ac06:	ee20 0a07 	vmul.f32	s0, s0, s14
 801ac0a:	ed62 7a01 	vstmdb	r2!, {s15}
 801ac0e:	e73f      	b.n	801aa90 <__kernel_rem_pio2f+0x204>
 801ac10:	ecf6 6a01 	vldmia	r6!, {s13}
 801ac14:	ecb5 7a01 	vldmia	r5!, {s14}
 801ac18:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ac1c:	3001      	adds	r0, #1
 801ac1e:	4550      	cmp	r0, sl
 801ac20:	dc01      	bgt.n	801ac26 <__kernel_rem_pio2f+0x39a>
 801ac22:	4290      	cmp	r0, r2
 801ac24:	ddf4      	ble.n	801ac10 <__kernel_rem_pio2f+0x384>
 801ac26:	a858      	add	r0, sp, #352	; 0x160
 801ac28:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801ac2c:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 801ac30:	3b01      	subs	r3, #1
 801ac32:	e731      	b.n	801aa98 <__kernel_rem_pio2f+0x20c>
 801ac34:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ac36:	2b02      	cmp	r3, #2
 801ac38:	dc09      	bgt.n	801ac4e <__kernel_rem_pio2f+0x3c2>
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	dc2b      	bgt.n	801ac96 <__kernel_rem_pio2f+0x40a>
 801ac3e:	d044      	beq.n	801acca <__kernel_rem_pio2f+0x43e>
 801ac40:	f009 0007 	and.w	r0, r9, #7
 801ac44:	b059      	add	sp, #356	; 0x164
 801ac46:	ecbd 8b04 	vpop	{d8-d9}
 801ac4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4e:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801ac50:	2b03      	cmp	r3, #3
 801ac52:	d1f5      	bne.n	801ac40 <__kernel_rem_pio2f+0x3b4>
 801ac54:	aa30      	add	r2, sp, #192	; 0xc0
 801ac56:	1f0b      	subs	r3, r1, #4
 801ac58:	4413      	add	r3, r2
 801ac5a:	461a      	mov	r2, r3
 801ac5c:	4620      	mov	r0, r4
 801ac5e:	2800      	cmp	r0, #0
 801ac60:	f1a2 0204 	sub.w	r2, r2, #4
 801ac64:	dc52      	bgt.n	801ad0c <__kernel_rem_pio2f+0x480>
 801ac66:	4622      	mov	r2, r4
 801ac68:	2a01      	cmp	r2, #1
 801ac6a:	f1a3 0304 	sub.w	r3, r3, #4
 801ac6e:	dc5d      	bgt.n	801ad2c <__kernel_rem_pio2f+0x4a0>
 801ac70:	ab30      	add	r3, sp, #192	; 0xc0
 801ac72:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801ac76:	440b      	add	r3, r1
 801ac78:	2c01      	cmp	r4, #1
 801ac7a:	dc67      	bgt.n	801ad4c <__kernel_rem_pio2f+0x4c0>
 801ac7c:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801ac80:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801ac84:	2f00      	cmp	r7, #0
 801ac86:	d167      	bne.n	801ad58 <__kernel_rem_pio2f+0x4cc>
 801ac88:	edc8 6a00 	vstr	s13, [r8]
 801ac8c:	ed88 7a01 	vstr	s14, [r8, #4]
 801ac90:	edc8 7a02 	vstr	s15, [r8, #8]
 801ac94:	e7d4      	b.n	801ac40 <__kernel_rem_pio2f+0x3b4>
 801ac96:	ab30      	add	r3, sp, #192	; 0xc0
 801ac98:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801ac9c:	440b      	add	r3, r1
 801ac9e:	4622      	mov	r2, r4
 801aca0:	2a00      	cmp	r2, #0
 801aca2:	da24      	bge.n	801acee <__kernel_rem_pio2f+0x462>
 801aca4:	b34f      	cbz	r7, 801acfa <__kernel_rem_pio2f+0x46e>
 801aca6:	eef1 7a47 	vneg.f32	s15, s14
 801acaa:	edc8 7a00 	vstr	s15, [r8]
 801acae:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801acb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801acb6:	aa31      	add	r2, sp, #196	; 0xc4
 801acb8:	2301      	movs	r3, #1
 801acba:	429c      	cmp	r4, r3
 801acbc:	da20      	bge.n	801ad00 <__kernel_rem_pio2f+0x474>
 801acbe:	b10f      	cbz	r7, 801acc4 <__kernel_rem_pio2f+0x438>
 801acc0:	eef1 7a67 	vneg.f32	s15, s15
 801acc4:	edc8 7a01 	vstr	s15, [r8, #4]
 801acc8:	e7ba      	b.n	801ac40 <__kernel_rem_pio2f+0x3b4>
 801acca:	ab30      	add	r3, sp, #192	; 0xc0
 801accc:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 801ab8c <__kernel_rem_pio2f+0x300>
 801acd0:	440b      	add	r3, r1
 801acd2:	2c00      	cmp	r4, #0
 801acd4:	da05      	bge.n	801ace2 <__kernel_rem_pio2f+0x456>
 801acd6:	b10f      	cbz	r7, 801acdc <__kernel_rem_pio2f+0x450>
 801acd8:	eef1 7a67 	vneg.f32	s15, s15
 801acdc:	edc8 7a00 	vstr	s15, [r8]
 801ace0:	e7ae      	b.n	801ac40 <__kernel_rem_pio2f+0x3b4>
 801ace2:	ed33 7a01 	vldmdb	r3!, {s14}
 801ace6:	3c01      	subs	r4, #1
 801ace8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801acec:	e7f1      	b.n	801acd2 <__kernel_rem_pio2f+0x446>
 801acee:	ed73 7a01 	vldmdb	r3!, {s15}
 801acf2:	3a01      	subs	r2, #1
 801acf4:	ee37 7a27 	vadd.f32	s14, s14, s15
 801acf8:	e7d2      	b.n	801aca0 <__kernel_rem_pio2f+0x414>
 801acfa:	eef0 7a47 	vmov.f32	s15, s14
 801acfe:	e7d4      	b.n	801acaa <__kernel_rem_pio2f+0x41e>
 801ad00:	ecb2 7a01 	vldmia	r2!, {s14}
 801ad04:	3301      	adds	r3, #1
 801ad06:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ad0a:	e7d6      	b.n	801acba <__kernel_rem_pio2f+0x42e>
 801ad0c:	edd2 7a00 	vldr	s15, [r2]
 801ad10:	edd2 6a01 	vldr	s13, [r2, #4]
 801ad14:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ad18:	3801      	subs	r0, #1
 801ad1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad1e:	ed82 7a00 	vstr	s14, [r2]
 801ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad26:	edc2 7a01 	vstr	s15, [r2, #4]
 801ad2a:	e798      	b.n	801ac5e <__kernel_rem_pio2f+0x3d2>
 801ad2c:	edd3 7a00 	vldr	s15, [r3]
 801ad30:	edd3 6a01 	vldr	s13, [r3, #4]
 801ad34:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ad38:	3a01      	subs	r2, #1
 801ad3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ad3e:	ed83 7a00 	vstr	s14, [r3]
 801ad42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ad46:	edc3 7a01 	vstr	s15, [r3, #4]
 801ad4a:	e78d      	b.n	801ac68 <__kernel_rem_pio2f+0x3dc>
 801ad4c:	ed33 7a01 	vldmdb	r3!, {s14}
 801ad50:	3c01      	subs	r4, #1
 801ad52:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ad56:	e78f      	b.n	801ac78 <__kernel_rem_pio2f+0x3ec>
 801ad58:	eef1 6a66 	vneg.f32	s13, s13
 801ad5c:	eeb1 7a47 	vneg.f32	s14, s14
 801ad60:	edc8 6a00 	vstr	s13, [r8]
 801ad64:	ed88 7a01 	vstr	s14, [r8, #4]
 801ad68:	eef1 7a67 	vneg.f32	s15, s15
 801ad6c:	e790      	b.n	801ac90 <__kernel_rem_pio2f+0x404>
 801ad6e:	bf00      	nop

0801ad70 <floor>:
 801ad70:	ee10 1a90 	vmov	r1, s1
 801ad74:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ad78:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801ad7c:	2b13      	cmp	r3, #19
 801ad7e:	b530      	push	{r4, r5, lr}
 801ad80:	ee10 0a10 	vmov	r0, s0
 801ad84:	ee10 5a10 	vmov	r5, s0
 801ad88:	dc31      	bgt.n	801adee <floor+0x7e>
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	da15      	bge.n	801adba <floor+0x4a>
 801ad8e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801ae50 <floor+0xe0>
 801ad92:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ad96:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ad9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ad9e:	dd07      	ble.n	801adb0 <floor+0x40>
 801ada0:	2900      	cmp	r1, #0
 801ada2:	da4e      	bge.n	801ae42 <floor+0xd2>
 801ada4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801ada8:	4308      	orrs	r0, r1
 801adaa:	d04d      	beq.n	801ae48 <floor+0xd8>
 801adac:	492a      	ldr	r1, [pc, #168]	; (801ae58 <floor+0xe8>)
 801adae:	2000      	movs	r0, #0
 801adb0:	460b      	mov	r3, r1
 801adb2:	4602      	mov	r2, r0
 801adb4:	ec43 2b10 	vmov	d0, r2, r3
 801adb8:	e020      	b.n	801adfc <floor+0x8c>
 801adba:	4a28      	ldr	r2, [pc, #160]	; (801ae5c <floor+0xec>)
 801adbc:	411a      	asrs	r2, r3
 801adbe:	ea01 0402 	and.w	r4, r1, r2
 801adc2:	4304      	orrs	r4, r0
 801adc4:	d01a      	beq.n	801adfc <floor+0x8c>
 801adc6:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801ae50 <floor+0xe0>
 801adca:	ee30 0b07 	vadd.f64	d0, d0, d7
 801adce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801add2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801add6:	ddeb      	ble.n	801adb0 <floor+0x40>
 801add8:	2900      	cmp	r1, #0
 801adda:	bfbe      	ittt	lt
 801addc:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801ade0:	fa40 f303 	asrlt.w	r3, r0, r3
 801ade4:	18c9      	addlt	r1, r1, r3
 801ade6:	ea21 0102 	bic.w	r1, r1, r2
 801adea:	2000      	movs	r0, #0
 801adec:	e7e0      	b.n	801adb0 <floor+0x40>
 801adee:	2b33      	cmp	r3, #51	; 0x33
 801adf0:	dd05      	ble.n	801adfe <floor+0x8e>
 801adf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801adf6:	d101      	bne.n	801adfc <floor+0x8c>
 801adf8:	ee30 0b00 	vadd.f64	d0, d0, d0
 801adfc:	bd30      	pop	{r4, r5, pc}
 801adfe:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801ae02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801ae06:	40e2      	lsrs	r2, r4
 801ae08:	4210      	tst	r0, r2
 801ae0a:	d0f7      	beq.n	801adfc <floor+0x8c>
 801ae0c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 801ae50 <floor+0xe0>
 801ae10:	ee30 0b07 	vadd.f64	d0, d0, d7
 801ae14:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801ae18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae1c:	ddc8      	ble.n	801adb0 <floor+0x40>
 801ae1e:	2900      	cmp	r1, #0
 801ae20:	da02      	bge.n	801ae28 <floor+0xb8>
 801ae22:	2b14      	cmp	r3, #20
 801ae24:	d103      	bne.n	801ae2e <floor+0xbe>
 801ae26:	3101      	adds	r1, #1
 801ae28:	ea20 0002 	bic.w	r0, r0, r2
 801ae2c:	e7c0      	b.n	801adb0 <floor+0x40>
 801ae2e:	2401      	movs	r4, #1
 801ae30:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801ae34:	fa04 f303 	lsl.w	r3, r4, r3
 801ae38:	4418      	add	r0, r3
 801ae3a:	4285      	cmp	r5, r0
 801ae3c:	bf88      	it	hi
 801ae3e:	1909      	addhi	r1, r1, r4
 801ae40:	e7f2      	b.n	801ae28 <floor+0xb8>
 801ae42:	2000      	movs	r0, #0
 801ae44:	4601      	mov	r1, r0
 801ae46:	e7b3      	b.n	801adb0 <floor+0x40>
 801ae48:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801ae4c:	e7b0      	b.n	801adb0 <floor+0x40>
 801ae4e:	bf00      	nop
 801ae50:	8800759c 	.word	0x8800759c
 801ae54:	7e37e43c 	.word	0x7e37e43c
 801ae58:	bff00000 	.word	0xbff00000
 801ae5c:	000fffff 	.word	0x000fffff

0801ae60 <floorf>:
 801ae60:	ee10 3a10 	vmov	r3, s0
 801ae64:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801ae68:	3a7f      	subs	r2, #127	; 0x7f
 801ae6a:	2a16      	cmp	r2, #22
 801ae6c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801ae70:	dc2a      	bgt.n	801aec8 <floorf+0x68>
 801ae72:	2a00      	cmp	r2, #0
 801ae74:	da11      	bge.n	801ae9a <floorf+0x3a>
 801ae76:	eddf 7a18 	vldr	s15, [pc, #96]	; 801aed8 <floorf+0x78>
 801ae7a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801ae7e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ae82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ae86:	dd05      	ble.n	801ae94 <floorf+0x34>
 801ae88:	2b00      	cmp	r3, #0
 801ae8a:	da23      	bge.n	801aed4 <floorf+0x74>
 801ae8c:	4a13      	ldr	r2, [pc, #76]	; (801aedc <floorf+0x7c>)
 801ae8e:	2900      	cmp	r1, #0
 801ae90:	bf18      	it	ne
 801ae92:	4613      	movne	r3, r2
 801ae94:	ee00 3a10 	vmov	s0, r3
 801ae98:	4770      	bx	lr
 801ae9a:	4911      	ldr	r1, [pc, #68]	; (801aee0 <floorf+0x80>)
 801ae9c:	4111      	asrs	r1, r2
 801ae9e:	420b      	tst	r3, r1
 801aea0:	d0fa      	beq.n	801ae98 <floorf+0x38>
 801aea2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801aed8 <floorf+0x78>
 801aea6:	ee30 0a27 	vadd.f32	s0, s0, s15
 801aeaa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801aeae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aeb2:	ddef      	ble.n	801ae94 <floorf+0x34>
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	bfbe      	ittt	lt
 801aeb8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801aebc:	fa40 f202 	asrlt.w	r2, r0, r2
 801aec0:	189b      	addlt	r3, r3, r2
 801aec2:	ea23 0301 	bic.w	r3, r3, r1
 801aec6:	e7e5      	b.n	801ae94 <floorf+0x34>
 801aec8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801aecc:	d3e4      	bcc.n	801ae98 <floorf+0x38>
 801aece:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aed2:	4770      	bx	lr
 801aed4:	2300      	movs	r3, #0
 801aed6:	e7dd      	b.n	801ae94 <floorf+0x34>
 801aed8:	7149f2ca 	.word	0x7149f2ca
 801aedc:	bf800000 	.word	0xbf800000
 801aee0:	007fffff 	.word	0x007fffff

0801aee4 <scalbnf>:
 801aee4:	ee10 3a10 	vmov	r3, s0
 801aee8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801aeec:	d02a      	beq.n	801af44 <scalbnf+0x60>
 801aeee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801aef2:	d302      	bcc.n	801aefa <scalbnf+0x16>
 801aef4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aef8:	4770      	bx	lr
 801aefa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801aefe:	d122      	bne.n	801af46 <scalbnf+0x62>
 801af00:	4b23      	ldr	r3, [pc, #140]	; (801af90 <scalbnf+0xac>)
 801af02:	eddf 7a24 	vldr	s15, [pc, #144]	; 801af94 <scalbnf+0xb0>
 801af06:	4298      	cmp	r0, r3
 801af08:	ee20 0a27 	vmul.f32	s0, s0, s15
 801af0c:	db16      	blt.n	801af3c <scalbnf+0x58>
 801af0e:	ee10 3a10 	vmov	r3, s0
 801af12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801af16:	3a19      	subs	r2, #25
 801af18:	f24c 3150 	movw	r1, #50000	; 0xc350
 801af1c:	4288      	cmp	r0, r1
 801af1e:	dd14      	ble.n	801af4a <scalbnf+0x66>
 801af20:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801af98 <scalbnf+0xb4>
 801af24:	eddf 6a1d 	vldr	s13, [pc, #116]	; 801af9c <scalbnf+0xb8>
 801af28:	ee10 3a10 	vmov	r3, s0
 801af2c:	eeb0 7a67 	vmov.f32	s14, s15
 801af30:	2b00      	cmp	r3, #0
 801af32:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801af36:	ee27 0a87 	vmul.f32	s0, s15, s14
 801af3a:	4770      	bx	lr
 801af3c:	eddf 7a18 	vldr	s15, [pc, #96]	; 801afa0 <scalbnf+0xbc>
 801af40:	ee27 0a80 	vmul.f32	s0, s15, s0
 801af44:	4770      	bx	lr
 801af46:	0dd2      	lsrs	r2, r2, #23
 801af48:	e7e6      	b.n	801af18 <scalbnf+0x34>
 801af4a:	4410      	add	r0, r2
 801af4c:	28fe      	cmp	r0, #254	; 0xfe
 801af4e:	dce7      	bgt.n	801af20 <scalbnf+0x3c>
 801af50:	2800      	cmp	r0, #0
 801af52:	dd06      	ble.n	801af62 <scalbnf+0x7e>
 801af54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af58:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801af5c:	ee00 3a10 	vmov	s0, r3
 801af60:	4770      	bx	lr
 801af62:	f110 0f16 	cmn.w	r0, #22
 801af66:	da09      	bge.n	801af7c <scalbnf+0x98>
 801af68:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801afa0 <scalbnf+0xbc>
 801af6c:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801afa4 <scalbnf+0xc0>
 801af70:	ee10 3a10 	vmov	r3, s0
 801af74:	eeb0 7a67 	vmov.f32	s14, s15
 801af78:	2b00      	cmp	r3, #0
 801af7a:	e7da      	b.n	801af32 <scalbnf+0x4e>
 801af7c:	3019      	adds	r0, #25
 801af7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af82:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801af86:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801afa8 <scalbnf+0xc4>
 801af8a:	ee07 3a90 	vmov	s15, r3
 801af8e:	e7d7      	b.n	801af40 <scalbnf+0x5c>
 801af90:	ffff3cb0 	.word	0xffff3cb0
 801af94:	4c000000 	.word	0x4c000000
 801af98:	7149f2ca 	.word	0x7149f2ca
 801af9c:	f149f2ca 	.word	0xf149f2ca
 801afa0:	0da24260 	.word	0x0da24260
 801afa4:	8da24260 	.word	0x8da24260
 801afa8:	33000000 	.word	0x33000000

0801afac <__errno>:
 801afac:	4b01      	ldr	r3, [pc, #4]	; (801afb4 <__errno+0x8>)
 801afae:	6818      	ldr	r0, [r3, #0]
 801afb0:	4770      	bx	lr
 801afb2:	bf00      	nop
 801afb4:	20000920 	.word	0x20000920

0801afb8 <_init>:
 801afb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afba:	bf00      	nop
 801afbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afbe:	bc08      	pop	{r3}
 801afc0:	469e      	mov	lr, r3
 801afc2:	4770      	bx	lr

0801afc4 <_fini>:
 801afc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801afc6:	bf00      	nop
 801afc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801afca:	bc08      	pop	{r3}
 801afcc:	469e      	mov	lr, r3
 801afce:	4770      	bx	lr

0801afd0 <__HAL_SPI_TxRxCpltCallback_veneer>:
 801afd0:	f85f f000 	ldr.w	pc, [pc]	; 801afd4 <__HAL_SPI_TxRxCpltCallback_veneer+0x4>
 801afd4:	00004501 	.word	0x00004501

0801afd8 <__audioInitAdditive_veneer>:
 801afd8:	f85f f000 	ldr.w	pc, [pc]	; 801afdc <__audioInitAdditive_veneer+0x4>
 801afdc:	00000401 	.word	0x00000401

0801afe0 <__parsePreset_veneer>:
 801afe0:	f85f f000 	ldr.w	pc, [pc]	; 801afe4 <__parsePreset_veneer+0x4>
 801afe4:	00001ca1 	.word	0x00001ca1

0801afe8 <__audioInitVocal_veneer>:
 801afe8:	f85f f000 	ldr.w	pc, [pc]	; 801afec <__audioInitVocal_veneer+0x4>
 801afec:	00009321 	.word	0x00009321

0801aff0 <__HAL_SPI_TxRxHalfCpltCallback_veneer>:
 801aff0:	f85f f000 	ldr.w	pc, [pc]	; 801aff4 <__HAL_SPI_TxRxHalfCpltCallback_veneer+0x4>
 801aff4:	00004821 	.word	0x00004821

0801aff8 <__HAL_I2C_SlaveRxCpltCallback_veneer>:
 801aff8:	f85f f000 	ldr.w	pc, [pc]	; 801affc <__HAL_I2C_SlaveRxCpltCallback_veneer+0x4>
 801affc:	00004481 	.word	0x00004481

0801b000 <__randomNumber_veneer>:
 801b000:	f85f f000 	ldr.w	pc, [pc]	; 801b004 <__randomNumber_veneer+0x4>
 801b004:	00001c41 	.word	0x00001c41

0801b008 <__HAL_SPI_RxHalfCpltCallback_veneer>:
 801b008:	f85f f000 	ldr.w	pc, [pc]	; 801b00c <__HAL_SPI_RxHalfCpltCallback_veneer+0x4>
 801b00c:	00004dc1 	.word	0x00004dc1

0801b010 <__audioInitString1_veneer>:
 801b010:	f85f f000 	ldr.w	pc, [pc]	; 801b014 <__audioInitString1_veneer+0x4>
 801b014:	00005041 	.word	0x00005041

0801b018 <__HAL_SAI_TxCpltCallback_veneer>:
 801b018:	f85f f000 	ldr.w	pc, [pc]	; 801b01c <__HAL_SAI_TxCpltCallback_veneer+0x4>
 801b01c:	000016a1 	.word	0x000016a1

0801b020 <__HAL_SAI_ErrorCallback_veneer>:
 801b020:	f85f f000 	ldr.w	pc, [pc]	; 801b024 <__HAL_SAI_ErrorCallback_veneer+0x4>
 801b024:	00001921 	.word	0x00001921

0801b028 <__HAL_SPI_RxCpltCallback_veneer>:
 801b028:	f85f f000 	ldr.w	pc, [pc]	; 801b02c <__HAL_SPI_RxCpltCallback_veneer+0x4>
 801b02c:	00004b41 	.word	0x00004b41

0801b030 <__HAL_I2C_ErrorCallback_veneer>:
 801b030:	f85f f000 	ldr.w	pc, [pc]	; 801b034 <__HAL_I2C_ErrorCallback_veneer+0x4>
 801b034:	000044c1 	.word	0x000044c1

0801b038 <__HAL_SAI_TxHalfCpltCallback_veneer>:
 801b038:	f85f f000 	ldr.w	pc, [pc]	; 801b03c <__HAL_SAI_TxHalfCpltCallback_veneer+0x4>
 801b03c:	000017e1 	.word	0x000017e1

Disassembly of section .itcmram:

00000400 <audioInitAdditive>:
}
     400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     404:	49f9      	ldr	r1, [pc, #996]	; (7ec <audioInitAdditive+0x3ec>)
     406:	4cfa      	ldr	r4, [pc, #1000]	; (7f0 <audioInitAdditive+0x3f0>)
     408:	4afa      	ldr	r2, [pc, #1000]	; (7f4 <audioInitAdditive+0x3f4>)
     40a:	4bfb      	ldr	r3, [pc, #1004]	; (7f8 <audioInitAdditive+0x3f8>)
     40c:	48fb      	ldr	r0, [pc, #1004]	; (7fc <audioInitAdditive+0x3fc>)
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPLfloat;
     40e:	4dfc      	ldr	r5, [pc, #1008]	; (800 <audioInitAdditive+0x400>)
     410:	4efc      	ldr	r6, [pc, #1008]	; (804 <audioInitAdditive+0x404>)
     412:	ed2d 8b10 	vpush	{d8-d15}
     416:	ed94 3a01 	vldr	s6, [r4, #4]
}
     41a:	b083      	sub	sp, #12
        p->curr = pickupOut;
     41c:	edd1 4a00 	vldr	s9, [r1]
}
     420:	edd1 3a01 	vldr	s7, [r1, #4]
     424:	ee33 3a24 	vadd.f32	s6, s6, s9
     428:	edd2 0a00 	vldr	s1, [r2]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     42c:	edd4 2a00 	vldr	s5, [r4]
     430:	ed92 2a01 	vldr	s4, [r2, #4]
     434:	ee33 3a23 	vadd.f32	s6, s6, s7
     438:	edd1 4a03 	vldr	s9, [r1, #12]
     43c:	ee72 2aa0 	vadd.f32	s5, s5, s1
     440:	edd1 0a02 	vldr	s1, [r1, #8]
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4 | DMA_FLAG_TCIF0_4) << (hdma->StreamIndex & 0x1FU);
     444:	edd2 7a02 	vldr	s15, [r2, #8]
     448:	ee33 3a20 	vadd.f32	s6, s6, s1
    __HAL_UNLOCK(hdma);
     44c:	edd2 1a03 	vldr	s3, [r2, #12]
  return status;
     450:	ee72 2a82 	vadd.f32	s5, s5, s4
    hdma->State = HAL_DMA_STATE_READY;
     454:	edd1 3a05 	vldr	s7, [r1, #20]
    __HAL_UNLOCK(hdma);
     458:	ed92 6a04 	vldr	s12, [r2, #16]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
     45c:	ee33 3a24 	vadd.f32	s6, s6, s9
     460:	ed91 2a06 	vldr	s4, [r1, #24]
     464:	ee72 2aa7 	vadd.f32	s5, s5, s15
        (*ifcr_reg) = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
     468:	edd1 7a04 	vldr	s15, [r1, #16]
        hdma->State = HAL_DMA_STATE_READY;
     46c:	ed92 1a05 	vldr	s2, [r2, #20]
        __HAL_UNLOCK(hdma);
     470:	ee33 3a27 	vadd.f32	s6, s6, s15
        return HAL_ERROR;
     474:	edd1 0a07 	vldr	s1, [r1, #28]
        (void) HAL_DMA_Abort(hdma);
     478:	ee72 2aa1 	vadd.f32	s5, s5, s3
     47c:	ed92 5a06 	vldr	s10, [r2, #24]
        return HAL_ERROR;
     480:	edd1 1a08 	vldr	s3, [r1, #32]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
     484:	ee33 3a23 	vadd.f32	s6, s6, s7
     488:	edd0 3a00 	vldr	s7, [r0]
     48c:	ee72 2a86 	vadd.f32	s5, s5, s12
     490:	ed92 0a07 	vldr	s0, [r2, #28]
     494:	edd1 4a09 	vldr	s9, [r1, #36]	; 0x24
     498:	ee33 3a02 	vadd.f32	s6, s6, s4
     49c:	edd2 6a08 	vldr	s13, [r2, #32]
     4a0:	ee72 2a81 	vadd.f32	s5, s5, s2
     4a4:	ed93 1a01 	vldr	s2, [r3, #4]
     4a8:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
     4ac:	ee33 3a20 	vadd.f32	s6, s6, s1
     4b0:	ed93 2a02 	vldr	s4, [r3, #8]
     4b4:	ee72 2a85 	vadd.f32	s5, s5, s10
     4b8:	ed93 5a00 	vldr	s10, [r3]
     4bc:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
     4c0:	ee33 3a21 	vadd.f32	s6, s6, s3
     4c4:	edd1 7a0b 	vldr	s15, [r1, #44]	; 0x2c
     4c8:	ee73 3a85 	vadd.f32	s7, s7, s10
     4cc:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
     4d0:	ee72 2a80 	vadd.f32	s5, s5, s0
     4d4:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
     4d8:	ee33 3a24 	vadd.f32	s6, s6, s9
     4dc:	ed93 5a03 	vldr	s10, [r3, #12]
     4e0:	ee73 3a81 	vadd.f32	s7, s7, s2
     4e4:	ed93 1a04 	vldr	s2, [r3, #16]
     4e8:	ee72 2aa6 	vadd.f32	s5, s5, s13
     4ec:	edd3 1a05 	vldr	s3, [r3, #20]
     4f0:	ee33 3a06 	vadd.f32	s6, s6, s12
     4f4:	ed93 6a07 	vldr	s12, [r3, #28]
     4f8:	ee73 3a82 	vadd.f32	s7, s7, s4
     4fc:	ed93 2a0e 	vldr	s4, [r3, #56]	; 0x38
     500:	ee72 2a84 	vadd.f32	s5, s5, s8
     504:	ed90 4a01 	vldr	s8, [r0, #4]
     508:	ee33 3a27 	vadd.f32	s6, s6, s15
     50c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
     510:	ee73 3a85 	vadd.f32	s7, s7, s10
     514:	edd3 4a08 	vldr	s9, [r3, #32]
     518:	ee34 4a27 	vadd.f32	s8, s8, s15
     51c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
     520:	ee72 2aa5 	vadd.f32	s5, s5, s11
     524:	edd3 5a0d 	vldr	s11, [r3, #52]	; 0x34
     528:	ee73 3a81 	vadd.f32	s7, s7, s2
      (*ifcr_reg) = (DMA_FLAG_HTIF0_4) << (hdma->StreamIndex & 0x1FU);
     52c:	ed93 1a0f 	vldr	s2, [r3, #60]	; 0x3c
     530:	ee34 4a25 	vadd.f32	s8, s8, s11
     534:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
     538:	ee72 2a87 	vadd.f32	s5, s5, s14
     53c:	ed93 7a06 	vldr	s14, [r3, #24]
     540:	ee73 3aa1 	vadd.f32	s7, s7, s3
     544:	edd3 1a11 	vldr	s3, [r3, #68]	; 0x44
     548:	ee34 4a02 	vadd.f32	s8, s8, s4
     54c:	edd3 5a12 	vldr	s11, [r3, #72]	; 0x48
     550:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     554:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
     558:	ee73 3a87 	vadd.f32	s7, s7, s14
     55c:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
     560:	ee34 4a01 	vadd.f32	s8, s8, s2
        (*isr_reg) = ((BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU));
     564:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
     568:	edd3 0a0b 	vldr	s1, [r3, #44]	; 0x2c
     56c:	ee73 3a86 	vadd.f32	s7, s7, s12
        __HAL_UNLOCK(hdma);
     570:	ed93 6a14 	vldr	s12, [r3, #80]	; 0x50
        hdma->State = HAL_DMA_STATE_READY;
     574:	ee34 4a27 	vadd.f32	s8, s8, s15
        return HAL_ERROR;
     578:	edd0 7a02 	vldr	s15, [r0, #8]
    if ((((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR & BDMA_CCR_CIRC) != 0U)
     57c:	ed93 1a17 	vldr	s2, [r3, #92]	; 0x5c
     580:	ee73 3aa4 	vadd.f32	s7, s7, s9
    if(CompleteLevel == HAL_DMA_FULL_TRANSFER)
     584:	edd3 4a16 	vldr	s9, [r3, #88]	; 0x58
      cpltlevel_mask = BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU);
     588:	ee34 4a21 	vadd.f32	s8, s8, s3
     58c:	edd3 1a1b 	vldr	s3, [r3, #108]	; 0x6c
    isr_reg  = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->ISR);
     590:	602e      	str	r6, [r5, #0]
    ifcr_reg = &(((BDMA_Base_Registers *)hdma->StreamBaseAddress)->IFCR);
     592:	ee73 3a80 	vadd.f32	s7, s7, s0
     596:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
     59a:	ee34 4a25 	vadd.f32	s8, s8, s11
      if(((*isr_reg) & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U)
     59e:	edd3 5a18 	vldr	s11, [r3, #96]	; 0x60
     5a2:	ee77 7aa5 	vadd.f32	s15, s15, s11
      cpltlevel_mask = BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU);
     5a6:	edd3 5a1c 	vldr	s11, [r3, #112]	; 0x70
     5aa:	ee73 3a85 	vadd.f32	s7, s7, s10
     5ae:	ed93 5a19 	vldr	s10, [r3, #100]	; 0x64
     5b2:	ee34 4a07 	vadd.f32	s8, s8, s14
      (*ifcr_reg) = (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU));
     5b6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
     5ba:	ee77 7a85 	vadd.f32	s15, s15, s10
     5be:	ed93 5a1e 	vldr	s10, [r3, #120]	; 0x78
  return status;
     5c2:	ee73 3aa0 	vadd.f32	s7, s7, s1
      (*ifcr_reg) = (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU));
     5c6:	edd3 0a1f 	vldr	s1, [r3, #124]	; 0x7c
     5ca:	ee34 4a06 	vadd.f32	s8, s8, s12

static inline void sub_collector_save(_sub_collector* collector, _auto_correlation_info info)
{
    collector->_fundamental = info;
    collector->_fundamental._harmonic = 1;
    collector->_first_period = sub_collector_period_of(collector, collector->_fundamental);
     5ce:	ed93 6a20 	vldr	s12, [r3, #128]	; 0x80
     5d2:	ee77 7a80 	vadd.f32	s15, s15, s0
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
     5d6:	ed93 0a22 	vldr	s0, [r3, #136]	; 0x88
     5da:	ee86 aaa3 	vdiv.f32	s20, s13, s7
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     5de:	ee77 7aa1 	vadd.f32	s15, s15, s3
     5e2:	edd3 1a24 	vldr	s3, [r3, #144]	; 0x90
	pb->buf[i++] = (BYTE)c;
     5e6:	ee34 4a02 	vadd.f32	s8, s8, s4
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
		i = (bw == (UINT)i) ? 0 : -1;
	}
	pb->idx = i;
	pb->nchr++;
     5ea:	ed93 2a21 	vldr	s4, [r3, #132]	; 0x84
		switch (d) {				/* Type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {
				while (j++ < w) putc_bfd(&pb, ' ');
     5ee:	ee77 7aa5 	vadd.f32	s15, s15, s11
	pb->nchr++;
     5f2:	edd3 5a23 	vldr	s11, [r3, #140]	; 0x8c
				while (j++ < w) putc_bfd(&pb, ' ');
     5f6:	ee34 4a24 	vadd.f32	s8, s8, s9
     5fa:	edd0 4a03 	vldr	s9, [r0, #12]
     5fe:	ee77 7a87 	vadd.f32	s15, s15, s14
     602:	ed93 7a26 	vldr	s14, [r3, #152]	; 0x98
     606:	ee74 4aa1 	vadd.f32	s9, s9, s3
     60a:	edd3 1a25 	vldr	s3, [r3, #148]	; 0x94
     60e:	ee34 4a01 	vadd.f32	s8, s8, s2
			}
			while (*p) putc_bfd(&pb, *p++);
			while (j++ < w) putc_bfd(&pb, ' ');
     612:	ed93 1a27 	vldr	s2, [r3, #156]	; 0x9c
			while (*p) putc_bfd(&pb, *p++);
     616:	ee77 7a85 	vadd.f32	s15, s15, s10
     61a:	ed93 5a29 	vldr	s10, [r3, #164]	; 0xa4
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     61e:	ee74 4aa1 	vadd.f32	s9, s9, s3
     622:	edd3 1a2a 	vldr	s3, [r3, #168]	; 0xa8
		switch (d) {				/* Type is... */
     626:	eec6 9a84 	vdiv.f32	s19, s13, s8
     62a:	ee74 4a87 	vadd.f32	s9, s9, s14
     62e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     632:	ee77 7aa0 	vadd.f32	s15, s15, s1
     636:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
	if (i < 0) return;
     63a:	ee74 4a81 	vadd.f32	s9, s9, s2
     63e:	ed93 1a2d 	vldr	s2, [r3, #180]	; 0xb4
	pb->buf[i++] = (BYTE)c;
     642:	ee77 7a86 	vadd.f32	s15, s15, s12
     646:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     64a:	ee74 4a87 	vadd.f32	s9, s9, s14
	pb->buf[i++] = (BYTE)c;
     64e:	ed93 7a2b 	vldr	s14, [r3, #172]	; 0xac
	pb->nchr++;
     652:	ee77 7a82 	vadd.f32	s15, s15, s4
	pb->idx = i;
     656:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
	pb->nchr++;
     65a:	ee74 4a85 	vadd.f32	s9, s9, s10
     65e:	ed90 5a04 	vldr	s10, [r0, #16]
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     662:	ee77 7a80 	vadd.f32	s15, s15, s0
     666:	ed93 0a31 	vldr	s0, [r3, #196]	; 0xc4
     66a:	ee74 4aa1 	vadd.f32	s9, s9, s3
		i = (bw == (UINT)i) ? 0 : -1;
     66e:	edd3 1a32 	vldr	s3, [r3, #200]	; 0xc8
     672:	ee77 7aa5 	vadd.f32	s15, s15, s11
     676:	edd3 5a30 	vldr	s11, [r3, #192]	; 0xc0
     67a:	ee35 5a25 	vadd.f32	s10, s10, s11
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof str[0]);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
		while (!(f & 2) && j++ < w) putc_bfd(&pb, d);
     67e:	edd3 5a34 	vldr	s11, [r3, #208]	; 0xd0
     682:	ee74 4a87 	vadd.f32	s9, s9, s14
	if (i < 0) return;
     686:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
	pb->buf[i++] = (BYTE)c;
     68a:	ee86 9aa7 	vdiv.f32	s18, s13, s15
     68e:	ee35 5a00 	vadd.f32	s10, s10, s0
     692:	ed93 0a37 	vldr	s0, [r3, #220]	; 0xdc
     696:	ee74 4a86 	vadd.f32	s9, s9, s12
	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
     69a:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
	pb->nchr++;
     69e:	ee35 5a21 	vadd.f32	s10, s10, s3
     6a2:	edd3 1a36 	vldr	s3, [r3, #216]	; 0xd8
     6a6:	ee74 4a81 	vadd.f32	s9, s9, s2
	return EOF;
     6aa:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
	}

	va_end(arp);

	return putc_flush(&pb);
}
     6ae:	ee35 5a07 	vadd.f32	s10, s10, s14
     6b2:	ed93 7a39 	vldr	s14, [r3, #228]	; 0xe4
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
     6b6:	ee74 4aa0 	vadd.f32	s9, s9, s1
	if (   pb->idx >= 0	/* Flush buffered characters to the file */
     6ba:	edd3 0a3a 	vldr	s1, [r3, #232]	; 0xe8
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6be:	ee35 5a25 	vadd.f32	s10, s10, s11
     6c2:	edd0 5a05 	vldr	s11, [r0, #20]
     6c6:	ee74 4a82 	vadd.f32	s9, s9, s4
		i = (bw == (UINT)i) ? 0 : -1;
     6ca:	ed93 2a3c 	vldr	s4, [r3, #240]	; 0xf0
     6ce:	ee35 5a06 	vadd.f32	s10, s10, s12
     6d2:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
     6d6:	ee75 5a82 	vadd.f32	s11, s11, s4
     6da:	ed93 2a3d 	vldr	s4, [r3, #244]	; 0xf4
     6de:	ed93 8a5a 	vldr	s16, [r3, #360]	; 0x168
		i = (bw == (UINT)i) ? 0 : -1;
     6e2:	eec6 8aa4 	vdiv.f32	s17, s13, s9
     6e6:	ee35 5a21 	vadd.f32	s10, s10, s3
     6ea:	edd3 1a3f 	vldr	s3, [r3, #252]	; 0xfc
				while (j++ < w) putc_bfd(&pb, ' ');
     6ee:	ee75 5a82 	vadd.f32	s11, s11, s4
     6f2:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
     6f6:	ee35 5a00 	vadd.f32	s10, s10, s0
     6fa:	ed93 0a40 	vldr	s0, [r3, #256]	; 0x100
		totalGain[1] += partialsHigh[i];
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 3; k++)
			{
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     6fe:	ee75 5a82 	vadd.f32	s11, s11, s4
     702:	ed93 2a41 	vldr	s4, [r3, #260]	; 0x104
     706:	ee35 5a01 	vadd.f32	s10, s10, s2
     70a:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
     70e:	ee75 5aa1 	vadd.f32	s11, s11, s3
     712:	edd3 1a43 	vldr	s3, [r3, #268]	; 0x10c
     716:	ee35 5a07 	vadd.f32	s10, s10, s14
     71a:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
     71e:	ee75 5a80 	vadd.f32	s11, s11, s0
     722:	ed93 0a47 	vldr	s0, [r3, #284]	; 0x11c
     726:	ee35 5a20 	vadd.f32	s10, s10, s1
     72a:	edd3 0a45 	vldr	s1, [r3, #276]	; 0x114
     72e:	ee75 5a82 	vadd.f32	s11, s11, s4
     732:	ed93 2a46 	vldr	s4, [r3, #280]	; 0x118
     736:	ee35 5a06 	vadd.f32	s10, s10, s12
     73a:	ed90 6a06 	vldr	s12, [r0, #24]
     73e:	ee75 5a87 	vadd.f32	s11, s11, s14
     742:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
     746:	ee36 6a07 	vadd.f32	s12, s12, s14
     74a:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
     74e:	ee75 5aa1 	vadd.f32	s11, s11, s3
     752:	edd3 1a4b 	vldr	s3, [r3, #300]	; 0x12c
     756:	ee36 6a07 	vadd.f32	s12, s12, s14
     75a:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
     75e:	ee75 5a81 	vadd.f32	s11, s11, s2
     762:	ed93 1a4d 	vldr	s2, [r3, #308]	; 0x134
     766:	ee36 6a07 	vadd.f32	s12, s12, s14
     76a:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
     76e:	ee75 5aa0 	vadd.f32	s11, s11, s1
     772:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
     776:	ee36 6a21 	vadd.f32	s12, s12, s3
     77a:	edd3 1a51 	vldr	s3, [r3, #324]	; 0x144
     77e:	ee75 5a82 	vadd.f32	s11, s11, s4
     782:	ed93 2a4e 	vldr	s4, [r3, #312]	; 0x138
     786:	ee36 6a07 	vadd.f32	s12, s12, s14
     78a:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
     78e:	ee75 5a80 	vadd.f32	s11, s11, s0
     792:	ed93 0a52 	vldr	s0, [r3, #328]	; 0x148
     796:	ee36 6a01 	vadd.f32	s12, s12, s2
     79a:	ed93 1a53 	vldr	s2, [r3, #332]	; 0x14c
     79e:	ee36 6a02 	vadd.f32	s12, s12, s4
     7a2:	ed93 2a54 	vldr	s4, [r3, #336]	; 0x150
     7a6:	ee36 6a07 	vadd.f32	s12, s12, s14
     7aa:	ed90 7a07 	vldr	s14, [r0, #28]
     7ae:	ee37 7a02 	vadd.f32	s14, s14, s4
     7b2:	ed93 2a55 	vldr	s4, [r3, #340]	; 0x154
     7b6:	ee36 6a20 	vadd.f32	s12, s12, s1
     7ba:	edd3 0a57 	vldr	s1, [r3, #348]	; 0x15c
     7be:	ee37 7a02 	vadd.f32	s14, s14, s4
     7c2:	ed93 2a56 	vldr	s4, [r3, #344]	; 0x158
     7c6:	ee36 6a21 	vadd.f32	s12, s12, s3
     7ca:	edd3 1a58 	vldr	s3, [r3, #352]	; 0x160
     7ce:	ee37 7a02 	vadd.f32	s14, s14, s4
     7d2:	ed93 2a59 	vldr	s4, [r3, #356]	; 0x164
     7d6:	ee36 6a00 	vadd.f32	s12, s12, s0
     7da:	ed93 0a5b 	vldr	s0, [r3, #364]	; 0x16c
     7de:	ed80 4a01 	vstr	s8, [r0, #4]
     7e2:	ee37 7a20 	vadd.f32	s14, s14, s1
     7e6:	ed93 4a60 	vldr	s8, [r3, #384]	; 0x180
     7ea:	e00d      	b.n	808 <audioInitAdditive+0x408>
     7ec:	200000d8 	.word	0x200000d8
     7f0:	20000ed4 	.word	0x20000ed4
     7f4:	20000090 	.word	0x20000090
     7f8:	200002f4 	.word	0x200002f4
     7fc:	20000edc 	.word	0x20000edc
     800:	20000ed0 	.word	0x20000ed0
     804:	3daaaaab 	.word	0x3daaaaab
     808:	edc0 7a02 	vstr	s15, [r0, #8]
     80c:	ee36 6a01 	vadd.f32	s12, s12, s2
     810:	edd0 7a08 	vldr	s15, [r0, #32]
     814:	ee37 7a21 	vadd.f32	s14, s14, s3
     818:	edc4 2a00 	vstr	s5, [r4]
     81c:	ee77 7a84 	vadd.f32	s15, s15, s8
     820:	edc0 3a00 	vstr	s7, [r0]
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
     824:	eec6 1aa2 	vdiv.f32	s3, s13, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     828:	edd3 2a61 	vldr	s5, [r3, #388]	; 0x184
     82c:	edd3 3a62 	vldr	s7, [r3, #392]	; 0x188
     830:	edd3 0a5c 	vldr	s1, [r3, #368]	; 0x170
     834:	ed80 5a04 	vstr	s10, [r0, #16]
     838:	ed93 1a5d 	vldr	s2, [r3, #372]	; 0x174
     83c:	ee37 7a02 	vadd.f32	s14, s14, s4
     840:	ed84 3a01 	vstr	s6, [r4, #4]
     844:	ee77 7aa2 	vadd.f32	s15, s15, s5
     848:	ed93 4a5f 	vldr	s8, [r3, #380]	; 0x17c
	gainNormalizers[1] = 1.0f / totalGain[1];
     84c:	ee86 2a83 	vdiv.f32	s4, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     850:	ed93 3a5e 	vldr	s6, [r3, #376]	; 0x178
     854:	edc0 4a03 	vstr	s9, [r0, #12]
     858:	edd3 4a67 	vldr	s9, [r3, #412]	; 0x19c
     85c:	edc0 5a05 	vstr	s11, [r0, #20]
     860:	ed80 6a06 	vstr	s12, [r0, #24]
     864:	ee37 7a08 	vadd.f32	s14, s14, s16
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     868:	4cd3      	ldr	r4, [pc, #844]	; (bb8 <audioInitAdditive+0x7b8>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     86a:	ee77 7aa3 	vadd.f32	s15, s15, s7
     86e:	edd3 3a64 	vldr	s7, [r3, #400]	; 0x190
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     872:	ee86 8a85 	vdiv.f32	s16, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     876:	ed93 5a63 	vldr	s10, [r3, #396]	; 0x18c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     87a:	ed84 aa00 	vstr	s20, [r4]
     87e:	edc4 9a01 	vstr	s19, [r4, #4]
     882:	ed84 9a02 	vstr	s18, [r4, #8]
     886:	edc4 8a03 	vstr	s17, [r4, #12]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     88a:	ee37 7a00 	vadd.f32	s14, s14, s0
     88e:	ee77 7a85 	vadd.f32	s15, s15, s10
     892:	ed93 5a65 	vldr	s10, [r3, #404]	; 0x194
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     896:	ee86 0aa5 	vdiv.f32	s0, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     89a:	edd3 5a69 	vldr	s11, [r3, #420]	; 0x1a4
     89e:	ee37 7a20 	vadd.f32	s14, s14, s1
     8a2:	ee77 7aa3 	vadd.f32	s15, s15, s7
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8a6:	eec6 0a86 	vdiv.f32	s1, s13, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8aa:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8ae:	ed84 8a04 	vstr	s16, [r4, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8b2:	ee37 7a01 	vadd.f32	s14, s14, s2
     8b6:	ee77 7a85 	vadd.f32	s15, s15, s10
     8ba:	ed93 5a68 	vldr	s10, [r3, #416]	; 0x1a0
     8be:	ee37 7a03 	vadd.f32	s14, s14, s6
     8c2:	ee37 7a04 	vadd.f32	s14, s14, s8
     8c6:	ed93 4a66 	vldr	s8, [r3, #408]	; 0x198
     8ca:	ee77 7a84 	vadd.f32	s15, s15, s8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8ce:	ee86 1a87 	vdiv.f32	s2, s13, s14
     8d2:	ed80 7a07 	vstr	s14, [r0, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8d6:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8da:	ed84 0a05 	vstr	s0, [r4, #20]
     8de:	edc4 0a06 	vstr	s1, [r4, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8e2:	ee77 7aa4 	vadd.f32	s15, s15, s9
     8e6:	ee77 7a85 	vadd.f32	s15, s15, s10
     8ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
     8ee:	ee77 7a86 	vadd.f32	s15, s15, s12
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8f2:	ed84 1a07 	vstr	s2, [r4, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
     8f6:	ee77 7a87 	vadd.f32	s15, s15, s14
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     8fa:	eec6 2aa7 	vdiv.f32	s5, s13, s15
     8fe:	edc0 7a08 	vstr	s15, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
     902:	48ae      	ldr	r0, [pc, #696]	; (bbc <audioInitAdditive+0x7bc>)
     904:	edc0 1a00 	vstr	s3, [r0]
	gainNormalizers[1] = 1.0f / totalGain[1];
     908:	ed80 2a01 	vstr	s4, [r0, #4]
     90c:	f102 0030 	add.w	r0, r2, #48	; 0x30
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
     910:	edc4 2a08 	vstr	s5, [r4, #32]
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
		for (int j = 0; j < 3; j++)
		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     914:	edd3 7a00 	vldr	s15, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
     918:	ed92 3a00 	vldr	s6, [r2]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     91c:	ee67 7a8a 	vmul.f32	s15, s15, s20
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     920:	edd1 3a00 	vldr	s7, [r1]
		partials[i] = partials[i] * gainNormalizers[0];
     924:	ee21 3a83 	vmul.f32	s6, s3, s6
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     928:	ee62 3a23 	vmul.f32	s7, s4, s7
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     92c:	ece3 7a01 	vstmia	r3!, {s15}
     930:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
     934:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
     938:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
     93c:	ee24 4a29 	vmul.f32	s8, s8, s19
     940:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
     944:	ee64 4a89 	vmul.f32	s9, s9, s18
     948:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
     94c:	ee25 5a28 	vmul.f32	s10, s10, s17
     950:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
     954:	ee65 5a88 	vmul.f32	s11, s11, s16
     958:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
     95c:	ee26 6a00 	vmul.f32	s12, s12, s0
     960:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
     964:	ee66 6aa0 	vmul.f32	s13, s13, s1
     968:	ee27 7a01 	vmul.f32	s14, s14, s2
		partials[i] = partials[i] * gainNormalizers[0];
     96c:	eca2 3a01 	vstmia	r2!, {s6}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     970:	ee67 7aa2 	vmul.f32	s15, s15, s5
	for (int i = 0; i < NUM_OVERTONES; i++)
     974:	4290      	cmp	r0, r2
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
     976:	ece1 3a01 	vstmia	r1!, {s7}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
     97a:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
     97e:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
     982:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
     986:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
     98a:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
     98e:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
     992:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
     996:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
     99a:	d1bb      	bne.n	914 <audioInitAdditive+0x514>
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
		  for (int j = 0; j < 3; j++)
		  {
			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     99c:	4b88      	ldr	r3, [pc, #544]	; (bc0 <audioInitAdditive+0x7c0>)
     99e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
     9a2:	4c88      	ldr	r4, [pc, #544]	; (bc4 <audioInitAdditive+0x7c4>)
     9a4:	ed93 8a01 	vldr	s16, [r3, #4]
     9a8:	ed93 0a04 	vldr	s0, [r3, #16]
     9ac:	f104 0830 	add.w	r8, r4, #48	; 0x30
     9b0:	edd3 0a07 	vldr	s1, [r3, #28]
     9b4:	edd3 9a00 	vldr	s19, [r3]
     9b8:	ed93 6a02 	vldr	s12, [r3, #8]
     9bc:	ed93 9a03 	vldr	s18, [r3, #12]
     9c0:	ee78 4a69 	vsub.f32	s9, s16, s19
     9c4:	edd3 6a05 	vldr	s13, [r3, #20]
     9c8:	ee36 6a48 	vsub.f32	s12, s12, s16
     9cc:	edd3 8a06 	vldr	s17, [r3, #24]
     9d0:	ee30 5a49 	vsub.f32	s10, s0, s18
     9d4:	ed93 7a08 	vldr	s14, [r3, #32]
     9d8:	ee76 6ac0 	vsub.f32	s13, s13, s0
     9dc:	ee70 5ae8 	vsub.f32	s11, s1, s17
     9e0:	f8df c21c 	ldr.w	ip, [pc, #540]	; c00 <audioInitAdditive+0x800>
     9e4:	ee37 7a60 	vsub.f32	s14, s14, s1
     9e8:	4f77      	ldr	r7, [pc, #476]	; (bc8 <audioInitAdditive+0x7c8>)
     9ea:	eec7 daa4 	vdiv.f32	s27, s15, s9
     9ee:	4e77      	ldr	r6, [pc, #476]	; (bcc <audioInitAdditive+0x7cc>)
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     9f0:	eddf aa77 	vldr	s21, [pc, #476]	; bd0 <audioInitAdditive+0x7d0>
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     9f4:	ed9f aa77 	vldr	s20, [pc, #476]	; bd4 <audioInitAdditive+0x7d4>
     9f8:	4b77      	ldr	r3, [pc, #476]	; (bd8 <audioInitAdditive+0x7d8>)
     9fa:	4878      	ldr	r0, [pc, #480]	; (bdc <audioInitAdditive+0x7dc>)
     9fc:	ee87 da86 	vdiv.f32	s26, s15, s12
     a00:	4977      	ldr	r1, [pc, #476]	; (be0 <audioInitAdditive+0x7e0>)
     a02:	4a78      	ldr	r2, [pc, #480]	; (be4 <audioInitAdditive+0x7e4>)
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     a04:	4d78      	ldr	r5, [pc, #480]	; (be8 <audioInitAdditive+0x7e8>)
     a06:	eec7 ca85 	vdiv.f32	s25, s15, s10
     a0a:	ee87 caa6 	vdiv.f32	s24, s15, s13
     a0e:	eec7 baa5 	vdiv.f32	s23, s15, s11
     a12:	ee87 ba87 	vdiv.f32	s22, s15, s14
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a16:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
     a1a:	3304      	adds	r3, #4
     a1c:	ed53 2a01 	vldr	s5, [r3, #-4]
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a20:	ecb5 2a01 	vldmia	r5!, {s4}
     a24:	ecb4 6a01 	vldmia	r4!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a28:	ee87 4aa4 	vdiv.f32	s8, s15, s9
     a2c:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
     a30:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
	for (int i = 0; i < NUM_OVERTONES; i++)
     a34:	4544      	cmp	r4, r8
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a36:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
     a3a:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
     a3e:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a42:	eec7 ea82 	vdiv.f32	s29, s15, s4
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a46:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
     a4a:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
     a4e:	ee87 2aa2 	vdiv.f32	s4, s15, s5
     a52:	eec7 4a85 	vdiv.f32	s9, s15, s10
     a56:	eec7 faa3 	vdiv.f32	s31, s15, s7
     a5a:	ee87 5aa1 	vdiv.f32	s10, s15, s3
     a5e:	eec7 3aa5 	vdiv.f32	s7, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a62:	eec7 5a86 	vdiv.f32	s11, s15, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a66:	ee87 6aa6 	vdiv.f32	s12, s15, s13
     a6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
     a6e:	ee87 7a83 	vdiv.f32	s14, s15, s6
     a72:	ee74 1a42 	vsub.f32	s3, s8, s4
     a76:	ee35 3a63 	vsub.f32	s6, s10, s7
     a7a:	ee74 2aef 	vsub.f32	s5, s9, s31
     a7e:	ee61 1aad 	vmul.f32	s3, s3, s27
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a82:	ee75 5aee 	vsub.f32	s11, s11, s29
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a86:	ee36 6a44 	vsub.f32	s12, s12, s8

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     a8a:	ee29 1aa1 	vmul.f32	s2, s19, s3
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a8e:	ece0 1a01 	vstmia	r0!, {s3}
     a92:	ee76 6ae4 	vsub.f32	s13, s13, s9
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     a96:	ee65 5aaa 	vmul.f32	s11, s11, s21
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     a9a:	ee26 6a0d 	vmul.f32	s12, s12, s26
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     a9e:	eca1 1a01 	vstmia	r1!, {s2}

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     aa2:	ee32 2a41 	vsub.f32	s4, s4, s2
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     aa6:	ee37 7a45 	vsub.f32	s14, s14, s10
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
     aaa:	ecec 5a01 	vstmia	ip!, {s11}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     aae:	ee62 2aac 	vmul.f32	s5, s5, s25
     ab2:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
     ab6:	ee66 6a8c 	vmul.f32	s13, s13, s24
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     aba:	eca2 2a01 	vstmia	r2!, {s4}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     abe:	ee27 7a0b 	vmul.f32	s14, s14, s22
     ac2:	ee23 3a2b 	vmul.f32	s6, s6, s23
     ac6:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     aca:	ee25 fa8a 	vmul.f32	s30, s11, s20
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ace:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ad2:	ee28 ea06 	vmul.f32	s28, s16, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ad6:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ada:	ee29 1a22 	vmul.f32	s2, s18, s5
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
     ade:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     ae2:	ee60 1a26 	vmul.f32	s3, s0, s13
		  decayAf1[i] = decayAfParts[i] * 123.0f;
     ae6:	eca7 fa01 	vstmia	r7!, {s30}
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     aea:	ee28 2a83 	vmul.f32	s4, s17, s6
     aee:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
     af2:	ee20 6a87 	vmul.f32	s12, s1, s14
     af6:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     afa:	ee7e eacf 	vsub.f32	s29, s29, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     afe:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b02:	ee34 4a4e 	vsub.f32	s8, s8, s28
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     b06:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b0a:	ee7f 5ac1 	vsub.f32	s11, s31, s2
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
     b0e:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b12:	ee74 4ae1 	vsub.f32	s9, s9, s3
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
     b16:	ece6 ea01 	vstmia	r6!, {s29}
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
     b1a:	ee73 3ac2 	vsub.f32	s7, s7, s4
     b1e:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
     b22:	ee35 5a46 	vsub.f32	s10, s10, s12
     b26:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
     b2a:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
     b2e:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
     b32:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
	for (int i = 0; i < NUM_OVERTONES; i++)
     b36:	f47f af6e 	bne.w	a16 <audioInitAdditive+0x616>
     b3a:	4b2c      	ldr	r3, [pc, #176]	; (bec <audioInitAdditive+0x7ec>)
     b3c:	f04f 0900 	mov.w	r9, #0
     b40:	f8df b0c0 	ldr.w	fp, [pc, #192]	; c04 <audioInitAdditive+0x804>
     b44:	9301      	str	r3, [sp, #4]
     b46:	4b28      	ldr	r3, [pc, #160]	; (be8 <audioInitAdditive+0x7e8>)
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b48:	ed9f 9a29 	vldr	s18, [pc, #164]	; bf0 <audioInitAdditive+0x7f0>
     b4c:	f103 0830 	add.w	r8, r3, #48	; 0x30
     b50:	eddf 8a28 	vldr	s17, [pc, #160]	; bf4 <audioInitAdditive+0x7f4>
     b54:	ed9f 8a28 	vldr	s16, [pc, #160]	; bf8 <audioInitAdditive+0x7f8>
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
     b58:	9e01      	ldr	r6, [sp, #4]
     b5a:	465c      	mov	r4, fp
     b5c:	4d22      	ldr	r5, [pc, #136]	; (be8 <audioInitAdditive+0x7e8>)
			tCycle_init(&additive[i][j], &leaf);
     b5e:	f8df a0a8 	ldr.w	sl, [pc, #168]	; c08 <audioInitAdditive+0x808>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b62:	4f26      	ldr	r7, [pc, #152]	; (bfc <audioInitAdditive+0x7fc>)
			tCycle_init(&additive[i][j], &leaf);
     b64:	4620      	mov	r0, r4
     b66:	4651      	mov	r1, sl
     b68:	f009 f82a 	bl	9bc0 <__tCycle_init_veneer>
			tADSRT_init(&additiveEnv[i][j], 5.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
     b6c:	ecf5 0a01 	vldmia	r5!, {s1}
     b70:	4630      	mov	r0, r6
     b72:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
     b76:	ee60 0a89 	vmul.f32	s1, s1, s18
     b7a:	4653      	mov	r3, sl
     b7c:	eef0 1a68 	vmov.f32	s3, s17
     b80:	f44f 5280 	mov.w	r2, #4096	; 0x1000
     b84:	eeb0 1a48 	vmov.f32	s2, s16
     b88:	4639      	mov	r1, r7
     b8a:	f009 f815 	bl	9bb8 <__tADSRT_init_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     b8e:	4545      	cmp	r5, r8
     b90:	f104 0404 	add.w	r4, r4, #4
     b94:	f106 0604 	add.w	r6, r6, #4
     b98:	d1e4      	bne.n	b64 <audioInitAdditive+0x764>
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
     b9a:	9b01      	ldr	r3, [sp, #4]
     b9c:	f109 0912 	add.w	r9, r9, #18
     ba0:	f10b 0b48 	add.w	fp, fp, #72	; 0x48
     ba4:	3348      	adds	r3, #72	; 0x48
     ba6:	f1b9 0f24 	cmp.w	r9, #36	; 0x24
     baa:	9301      	str	r3, [sp, #4]
     bac:	d1d4      	bne.n	b58 <audioInitAdditive+0x758>
		}
		//tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
	}
}
     bae:	b003      	add	sp, #12
     bb0:	ecbd 8b10 	vpop	{d8-d15}
     bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     bb8:	20000eac 	.word	0x20000eac
     bbc:	20000ea4 	.word	0x20000ea4
     bc0:	200002d0 	.word	0x200002d0
     bc4:	20000048 	.word	0x20000048
     bc8:	20000dcc 	.word	0x20000dcc
     bcc:	20000e5c 	.word	0x20000e5c
     bd0:	3b84a9fa 	.word	0x3b84a9fa
     bd4:	42f60000 	.word	0x42f60000
     bd8:	20000120 	.word	0x20000120
     bdc:	20000b8c 	.word	0x20000b8c
     be0:	20000a6c 	.word	0x20000a6c
     be4:	20000cac 	.word	0x20000cac
     be8:	20000000 	.word	0x20000000
     bec:	200009dc 	.word	0x200009dc
     bf0:	447a0000 	.word	0x447a0000
     bf4:	43160000 	.word	0x43160000
     bf8:	00000000 	.word	0x00000000
     bfc:	20000f30 	.word	0x20000f30
     c00:	20000e14 	.word	0x20000e14
     c04:	2000094c 	.word	0x2000094c
     c08:	20004fc4 	.word	0x20004fc4
     c0c:	f3af 8000 	nop.w
     c10:	f3af 8000 	nop.w
     c14:	f3af 8000 	nop.w
     c18:	f3af 8000 	nop.w
     c1c:	f3af 8000 	nop.w

00000c20 <audioFreeAdditive>:


void __ATTR_ITCMRAM audioFreeAdditive()
{

}
     c20:	4770      	bx	lr
     c22:	bf00      	nop
     c24:	f3af 8000 	nop.w
     c28:	f3af 8000 	nop.w
     c2c:	f3af 8000 	nop.w
     c30:	f3af 8000 	nop.w
     c34:	f3af 8000 	nop.w
     c38:	f3af 8000 	nop.w
     c3c:	f3af 8000 	nop.w

00000c40 <audioTickAdditive>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickAdditive(void)
{
     c40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c44:	4f68      	ldr	r7, [pc, #416]	; (de8 <audioTickAdditive+0x1a8>)
     c46:	4d69      	ldr	r5, [pc, #420]	; (dec <audioTickAdditive+0x1ac>)
     c48:	463c      	mov	r4, r7
     c4a:	f107 0630 	add.w	r6, r7, #48	; 0x30
     c4e:	ed2d 8b0a 	vpush	{d8-d12}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     c52:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
     c54:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
     c56:	f008 fedb 	bl	9a10 <__tExpSmooth_tick_veneer>
     c5a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
     c5e:	42b4      	cmp	r4, r6
     c60:	d1f7      	bne.n	c52 <audioTickAdditive+0x12>
	}

	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     c62:	4863      	ldr	r0, [pc, #396]	; (df0 <audioTickAdditive+0x1b0>)
     c64:	f008 fffc 	bl	9c60 <__tNoise_tick_veneer>
     c68:	4862      	ldr	r0, [pc, #392]	; (df4 <audioTickAdditive+0x1b4>)
     c6a:	f008 fff1 	bl	9c50 <__tVZFilter_tickEfficient_veneer>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c6e:	4860      	ldr	r0, [pc, #384]	; (df0 <audioTickAdditive+0x1b0>)
	float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
     c70:	eeb0 ca40 	vmov.f32	s24, s0
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c74:	f008 fff4 	bl	9c60 <__tNoise_tick_veneer>
     c78:	485f      	ldr	r0, [pc, #380]	; (df8 <audioTickAdditive+0x1b8>)
     c7a:	f008 ffe9 	bl	9c50 <__tVZFilter_tickEfficient_veneer>


	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c7e:	485f      	ldr	r0, [pc, #380]	; (dfc <audioTickAdditive+0x1bc>)
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c80:	eeb0 8a40 	vmov.f32	s16, s0
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c84:	f008 fec4 	bl	9a10 <__tExpSmooth_tick_veneer>
	//float Env2 = 0.0f;
	for (int i = 0; i < numStringsThisBoard; i++)
     c88:	4b5d      	ldr	r3, [pc, #372]	; (e00 <audioTickAdditive+0x1c0>)
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
     c8a:	eef0 ca40 	vmov.f32	s25, s0
	float tempSamp = 0.0f;
     c8e:	ed9f 9a5d 	vldr	s18, [pc, #372]	; e04 <audioTickAdditive+0x1c4>
	for (int i = 0; i < numStringsThisBoard; i++)
     c92:	781b      	ldrb	r3, [r3, #0]
     c94:	2b00      	cmp	r3, #0
     c96:	d072      	beq.n	d7e <audioTickAdditive+0x13e>
	filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
     c98:	ee3c ca08 	vadd.f32	s24, s24, s16
     c9c:	f8df b194 	ldr.w	fp, [pc, #404]	; e34 <audioTickAdditive+0x1f4>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     ca0:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
     ca4:	f8df 8190 	ldr.w	r8, [pc, #400]	; e38 <audioTickAdditive+0x1f8>
			//float tempFreq = 0.0f;
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
			//float tempGain = LEAF_map(tempFreq, 15000.0f, 19000.0f, 0.0, 1.0f);
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     ca8:	eeb0 aa49 	vmov.f32	s20, s18
     cac:	f8df a18c 	ldr.w	sl, [pc, #396]	; e3c <audioTickAdditive+0x1fc>
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     cb0:	eddf ba55 	vldr	s23, [pc, #340]	; e08 <audioTickAdditive+0x1c8>
	for (int i = 0; i < numStringsThisBoard; i++)
     cb4:	f04f 0900 	mov.w	r9, #0
			float tempGain = ((tempFreq - 15000.0f) * 0.00025f);
     cb8:	ed9f ba54 	vldr	s22, [pc, #336]	; e0c <audioTickAdditive+0x1cc>
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     cbc:	eddf aa54 	vldr	s21, [pc, #336]	; e10 <audioTickAdditive+0x1d0>
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     cc0:	4b54      	ldr	r3, [pc, #336]	; (e14 <audioTickAdditive+0x1d4>)
     cc2:	ea4f 0489 	mov.w	r4, r9, lsl #2
     cc6:	eb09 05c9 	add.w	r5, r9, r9, lsl #3
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cca:	4656      	mov	r6, sl
		float noiseEnv = tADSRT_tick(&fenvelopes[i]); //noise envelope
     ccc:	eb03 0089 	add.w	r0, r3, r9, lsl #2
     cd0:	f008 fe9a 	bl	9a08 <__tADSRT_tick_veneer>
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     cd4:	edd7 7a07 	vldr	s15, [r7, #28]
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cd8:	4b4f      	ldr	r3, [pc, #316]	; (e18 <audioTickAdditive+0x1d8>)
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     cda:	ee6c 7a27 	vmul.f32	s15, s24, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cde:	441c      	add	r4, r3
		tempSamp += filtNoise * noiseEnv * knobScaled[7];
     ce0:	eea0 9a27 	vfma.f32	s18, s0, s15
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     ce4:	ed94 7a00 	vldr	s14, [r4]
     ce8:	ecbb 0a01 	vldmia	fp!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cec:	2400      	movs	r4, #0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
     cee:	ee37 0a00 	vadd.f32	s0, s14, s0
     cf2:	f008 fde9 	bl	98c8 <__mtof_veneer>
     cf6:	4b49      	ldr	r3, [pc, #292]	; (e1c <audioTickAdditive+0x1dc>)
     cf8:	eca8 0a01 	vstmia	r8!, {s0}
		for (int j = 0; j < NUM_OVERTONES; j++)
     cfc:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d00:	4630      	mov	r0, r6
		for (int j = 0; j < NUM_OVERTONES; j++)
     d02:	3604      	adds	r6, #4
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d04:	f008 fe80 	bl	9a08 <__tADSRT_tick_veneer>
     d08:	ee07 4a10 	vmov	s14, r4
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d0c:	3401      	adds	r4, #1
     d0e:	edd7 7a04 	vldr	s15, [r7, #16]
     d12:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     d16:	ed18 6a01 	vldr	s12, [r8, #-4]
     d1a:	ee06 4a90 	vmov	s13, r4
     d1e:	ee67 7aab 	vmul.f32	s15, s15, s23
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d22:	eef0 0a69 	vmov.f32	s1, s19
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d26:	eeb8 8ae6 	vcvt.f32.s32	s16, s13
     d2a:	eef0 6a69 	vmov.f32	s13, s19
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d2e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d32:	ee28 8a06 	vmul.f32	s16, s16, s12
     d36:	eee7 6a27 	vfma.f32	s13, s14, s15
			float thisEnv = tADSRT_tick(&additiveEnv[i][j]);
     d3a:	eef0 8a40 	vmov.f32	s17, s0
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d3e:	eeb0 0a4a 	vmov.f32	s0, s20
			float tempFreq = stringFrequencies[i] * (j+1) * ((knobScaled[4]* 0.003f * j) + 1.0f);// * ((Env2 * knobScaled[5])+ 1.0f);
     d42:	ee28 8a26 	vmul.f32	s16, s16, s13
			tempGain = LEAF_clip(0.0f, (1.0f-tempGain), 1.0f);
     d46:	ee7b 7a48 	vsub.f32	s15, s22, s16
     d4a:	eee7 0aaa 	vfma.f32	s1, s15, s21
     d4e:	f008 fd1f 	bl	9790 <__LEAF_clip_veneer>
			tCycle_setFreq(&additive[i][j], tempFreq);
     d52:	4628      	mov	r0, r5
     d54:	eeb0 0a48 	vmov.f32	s0, s16
     d58:	f008 fd3e 	bl	97d8 <__tCycle_setFreq_veneer>
			//float upRamp = (j * invNumOvertones);
			//float downRamp = 1.0f - (j * invNumOvertones);
			//float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
     d5c:	4628      	mov	r0, r5
     d5e:	f008 ff5f 	bl	9c20 <__tCycle_tick_veneer>
		for (int j = 0; j < NUM_OVERTONES; j++)
     d62:	2c0c      	cmp	r4, #12
			tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
     d64:	eea0 9a28 	vfma.f32	s18, s0, s17
		for (int j = 0; j < NUM_OVERTONES; j++)
     d68:	f105 0504 	add.w	r5, r5, #4
     d6c:	d1c8      	bne.n	d00 <audioTickAdditive+0xc0>
	for (int i = 0; i < numStringsThisBoard; i++)
     d6e:	4b24      	ldr	r3, [pc, #144]	; (e00 <audioTickAdditive+0x1c0>)
     d70:	f109 0901 	add.w	r9, r9, #1
     d74:	f10a 0a48 	add.w	sl, sl, #72	; 0x48
     d78:	781b      	ldrb	r3, [r3, #0]
     d7a:	454b      	cmp	r3, r9
     d7c:	dca0      	bgt.n	cc0 <audioTickAdditive+0x80>
		}


	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
     d7e:	ed9f 0a28 	vldr	s0, [pc, #160]	; e20 <audioTickAdditive+0x1e0>
     d82:	eddf 7a28 	vldr	s15, [pc, #160]	; e24 <audioTickAdditive+0x1e4>
     d86:	eef0 0a40 	vmov.f32	s1, s0
     d8a:	ed9f 1a27 	vldr	s2, [pc, #156]	; e28 <audioTickAdditive+0x1e8>
     d8e:	eeec 0aa7 	vfma.f32	s1, s25, s15
     d92:	f008 fcfd 	bl	9790 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
     d96:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
     d9a:	4924      	ldr	r1, [pc, #144]	; (e2c <audioTickAdditive+0x1ec>)
	float omAlpha = 1.0f - alpha;
     d9c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     da0:	4a23      	ldr	r2, [pc, #140]	; (e30 <audioTickAdditive+0x1f0>)
	int volIdxInt = (int) volIdx;
     da2:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
     da6:	edd1 6a00 	vldr	s13, [r1]
     daa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     dae:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
     db0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
     db4:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
     db8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
     dbc:	ee30 0a47 	vsub.f32	s0, s0, s14
     dc0:	ee29 9a26 	vmul.f32	s18, s18, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     dc4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
     dc8:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
     dcc:	ed93 7a00 	vldr	s14, [r3]
     dd0:	edd2 6a00 	vldr	s13, [r2]
     dd4:	ee20 0a26 	vmul.f32	s0, s0, s13
     dd8:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
     ddc:	ee29 0a00 	vmul.f32	s0, s18, s0
     de0:	ecbd 8b0a 	vpop	{d8-d12}
     de4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de8:	20004f60 	.word	0x20004f60
     dec:	20004f90 	.word	0x20004f90
     df0:	2000501c 	.word	0x2000501c
     df4:	20005024 	.word	0x20005024
     df8:	20005028 	.word	0x20005028
     dfc:	20013f8c 	.word	0x20013f8c
     e00:	200004b1 	.word	0x200004b1
     e04:	00000000 	.word	0x00000000
     e08:	3b449ba6 	.word	0x3b449ba6
     e0c:	466a6000 	.word	0x466a6000
     e10:	3983126f 	.word	0x3983126f
     e14:	20004f3c 	.word	0x20004f3c
     e18:	20013f54 	.word	0x20013f54
     e1c:	2000094c 	.word	0x2000094c
     e20:	423c0000 	.word	0x423c0000
     e24:	42a00000 	.word	0x42a00000
     e28:	42fe0000 	.word	0x42fe0000
     e2c:	200004a8 	.word	0x200004a8
     e30:	2000051c 	.word	0x2000051c
     e34:	20013f5c 	.word	0x20013f5c
     e38:	20013f0c 	.word	0x20013f0c
     e3c:	200009dc 	.word	0x200009dc

00000e40 <audioFrameAdditive>:
	uint32_t tempCountFrame = DWT->CYCCNT;
     e40:	4bc0      	ldr	r3, [pc, #768]	; (1144 <audioFrameAdditive+0x304>)
{
     e42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
     e46:	4fc0      	ldr	r7, [pc, #768]	; (1148 <audioFrameAdditive+0x308>)
{
     e48:	ed2d 8b10 	vpush	{d8-d15}
	uint32_t tempCountFrame = DWT->CYCCNT;
     e4c:	685b      	ldr	r3, [r3, #4]
{
     e4e:	b091      	sub	sp, #68	; 0x44
	uint32_t tempCountFrame = DWT->CYCCNT;
     e50:	9308      	str	r3, [sp, #32]
	if (resetStringInputs)
     e52:	783b      	ldrb	r3, [r7, #0]
{
     e54:	9009      	str	r0, [sp, #36]	; 0x24
	if (resetStringInputs)
     e56:	2b00      	cmp	r3, #0
     e58:	f040 8086 	bne.w	f68 <audioFrameAdditive+0x128>
     e5c:	4bbb      	ldr	r3, [pc, #748]	; (114c <audioFrameAdditive+0x30c>)
     e5e:	9307      	str	r3, [sp, #28]
	if (newPluck)
     e60:	681b      	ldr	r3, [r3, #0]
     e62:	2b00      	cmp	r3, #0
     e64:	d04c      	beq.n	f00 <audioFrameAdditive+0xc0>
		for (int i = 0; i < numStringsThisBoard; i++)
     e66:	f8df b34c 	ldr.w	fp, [pc, #844]	; 11b4 <audioFrameAdditive+0x374>
     e6a:	f89b 2000 	ldrb.w	r2, [fp]
     e6e:	2a00      	cmp	r2, #0
     e70:	d043      	beq.n	efa <audioFrameAdditive+0xba>
     e72:	4bb7      	ldr	r3, [pc, #732]	; (1150 <audioFrameAdditive+0x310>)
     e74:	2600      	movs	r6, #0
     e76:	f8df a340 	ldr.w	sl, [pc, #832]	; 11b8 <audioFrameAdditive+0x378>
     e7a:	9304      	str	r3, [sp, #16]
     e7c:	4bb5      	ldr	r3, [pc, #724]	; (1154 <audioFrameAdditive+0x314>)
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
     e7e:	eddf cab6 	vldr	s25, [pc, #728]	; 1158 <audioFrameAdditive+0x318>
     e82:	9303      	str	r3, [sp, #12]
     e84:	4bb5      	ldr	r3, [pc, #724]	; (115c <audioFrameAdditive+0x31c>)
     e86:	ed9f aab6 	vldr	s20, [pc, #728]	; 1160 <audioFrameAdditive+0x320>
     e8a:	9306      	str	r3, [sp, #24]
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
     e8c:	ed9f fab5 	vldr	s30, [pc, #724]	; 1164 <audioFrameAdditive+0x324>
     e90:	4bb5      	ldr	r3, [pc, #724]	; (1168 <audioFrameAdditive+0x328>)
     e92:	eddf fab6 	vldr	s31, [pc, #728]	; 116c <audioFrameAdditive+0x32c>
     e96:	9305      	str	r3, [sp, #20]
     e98:	f8cd a004 	str.w	sl, [sp, #4]
     e9c:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
     ea0:	9b01      	ldr	r3, [sp, #4]
     ea2:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ea6:	b29b      	uxth	r3, r3
     ea8:	b933      	cbnz	r3, eb8 <audioFrameAdditive+0x78>
     eaa:	4bb1      	ldr	r3, [pc, #708]	; (1170 <audioFrameAdditive+0x330>)
     eac:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     eb0:	b29b      	uxth	r3, r3
     eb2:	2b00      	cmp	r3, #0
     eb4:	f040 8094 	bne.w	fe0 <audioFrameAdditive+0x1a0>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
     eb8:	9b01      	ldr	r3, [sp, #4]
     eba:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ebe:	b29b      	uxth	r3, r3
     ec0:	b12b      	cbz	r3, ece <audioFrameAdditive+0x8e>
     ec2:	4bab      	ldr	r3, [pc, #684]	; (1170 <audioFrameAdditive+0x330>)
     ec4:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     ec8:	b29b      	uxth	r3, r3
     eca:	2b00      	cmp	r3, #0
     ecc:	d078      	beq.n	fc0 <audioFrameAdditive+0x180>
		for (int i = 0; i < numStringsThisBoard; i++)
     ece:	9b04      	ldr	r3, [sp, #16]
			previousStringInputs[i] = stringInputs[i];
     ed0:	9901      	ldr	r1, [sp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
     ed2:	3304      	adds	r3, #4
     ed4:	9304      	str	r3, [sp, #16]
     ed6:	9b03      	ldr	r3, [sp, #12]
     ed8:	3348      	adds	r3, #72	; 0x48
     eda:	9303      	str	r3, [sp, #12]
     edc:	9b06      	ldr	r3, [sp, #24]
     ede:	3304      	adds	r3, #4
     ee0:	9306      	str	r3, [sp, #24]
     ee2:	9b05      	ldr	r3, [sp, #20]
     ee4:	3304      	adds	r3, #4
     ee6:	9305      	str	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
     ee8:	4ba1      	ldr	r3, [pc, #644]	; (1170 <audioFrameAdditive+0x330>)
     eea:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
     eee:	b29b      	uxth	r3, r3
     ef0:	f821 3016 	strh.w	r3, [r1, r6, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     ef4:	3601      	adds	r6, #1
     ef6:	42b2      	cmp	r2, r6
     ef8:	dcd2      	bgt.n	ea0 <audioFrameAdditive+0x60>
		newPluck = 0;
     efa:	2300      	movs	r3, #0
     efc:	9a07      	ldr	r2, [sp, #28]
     efe:	6013      	str	r3, [r2, #0]
     f00:	4c9c      	ldr	r4, [pc, #624]	; (1174 <audioFrameAdditive+0x334>)
     f02:	9b09      	ldr	r3, [sp, #36]	; 0x24
     f04:	f504 7500 	add.w	r5, r4, #512	; 0x200
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f08:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 1178 <audioFrameAdditive+0x338>
     f0c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
     f10:	eb05 0583 	add.w	r5, r5, r3, lsl #2
     f14:	f7ff fe94 	bl	c40 <audioTickAdditive>
     f18:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f1c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f1e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f22:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickAdditive() * TWO_TO_23);
     f24:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
     f28:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
     f2c:	d1f2      	bne.n	f14 <audioFrameAdditive+0xd4>
	if (switchStrings)
     f2e:	4c93      	ldr	r4, [pc, #588]	; (117c <audioFrameAdditive+0x33c>)
     f30:	6823      	ldr	r3, [r4, #0]
     f32:	2b00      	cmp	r3, #0
     f34:	d140      	bne.n	fb8 <audioFrameAdditive+0x178>
	switchStrings = 0;
     f36:	2200      	movs	r2, #0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f38:	4891      	ldr	r0, [pc, #580]	; (1180 <audioFrameAdditive+0x340>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f3a:	4b82      	ldr	r3, [pc, #520]	; (1144 <audioFrameAdditive+0x304>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f3c:	ed90 7a00 	vldr	s14, [r0]
	switchStrings = 0;
     f40:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f42:	9808      	ldr	r0, [sp, #32]
     f44:	685b      	ldr	r3, [r3, #4]
     f46:	498f      	ldr	r1, [pc, #572]	; (1184 <audioFrameAdditive+0x344>)
     f48:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f4a:	4a8f      	ldr	r2, [pc, #572]	; (1188 <audioFrameAdditive+0x348>)
     f4c:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
     f50:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
     f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
     f56:	ee67 7a87 	vmul.f32	s15, s15, s14
     f5a:	edc2 7a00 	vstr	s15, [r2]
}
     f5e:	b011      	add	sp, #68	; 0x44
     f60:	ecbd 8b10 	vpop	{d8-d15}
     f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
     f68:	f8df b248 	ldr.w	fp, [pc, #584]	; 11b4 <audioFrameAdditive+0x374>
     f6c:	f89b 3000 	ldrb.w	r3, [fp]
     f70:	b1d3      	cbz	r3, fa8 <audioFrameAdditive+0x168>
     f72:	2500      	movs	r5, #0
     f74:	4e76      	ldr	r6, [pc, #472]	; (1150 <audioFrameAdditive+0x310>)
     f76:	4c85      	ldr	r4, [pc, #532]	; (118c <audioFrameAdditive+0x34c>)
     f78:	f8df a23c 	ldr.w	sl, [pc, #572]	; 11b8 <audioFrameAdditive+0x378>
			previousStringInputs[i] = 0;
     f7c:	46a8      	mov	r8, r5
     f7e:	f1a4 0930 	sub.w	r9, r4, #48	; 0x30
				tADSRT_clear(&additiveEnv[i][j]);
     f82:	4648      	mov	r0, r9
			for (int j = 0; j < NUM_OVERTONES; j++)
     f84:	f109 0904 	add.w	r9, r9, #4
				tADSRT_clear(&additiveEnv[i][j]);
     f88:	f008 fdfa 	bl	9b80 <__tADSRT_clear_veneer>
			for (int j = 0; j < NUM_OVERTONES; j++)
     f8c:	454c      	cmp	r4, r9
     f8e:	d1f8      	bne.n	f82 <audioFrameAdditive+0x142>
			tADSRT_clear(&fenvelopes[i]);
     f90:	4630      	mov	r0, r6
		for (int i = 0; i < numStringsThisBoard; i++)
     f92:	3448      	adds	r4, #72	; 0x48
			tADSRT_clear(&fenvelopes[i]);
     f94:	f008 fdf4 	bl	9b80 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     f98:	f89b 3000 	ldrb.w	r3, [fp]
			previousStringInputs[i] = 0;
     f9c:	f82a 8015 	strh.w	r8, [sl, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
     fa0:	3501      	adds	r5, #1
     fa2:	3604      	adds	r6, #4
     fa4:	42ab      	cmp	r3, r5
     fa6:	dcea      	bgt.n	f7e <audioFrameAdditive+0x13e>
		resetStringInputs = 0;
     fa8:	2300      	movs	r3, #0
		newPluck = 1;
     faa:	4a68      	ldr	r2, [pc, #416]	; (114c <audioFrameAdditive+0x30c>)
		resetStringInputs = 0;
     fac:	703b      	strb	r3, [r7, #0]
		newPluck = 1;
     fae:	2301      	movs	r3, #1
     fb0:	9207      	str	r2, [sp, #28]
     fb2:	6013      	str	r3, [r2, #0]
     fb4:	4613      	mov	r3, r2
     fb6:	e753      	b.n	e60 <audioFrameAdditive+0x20>
		switchStringModel(switchStrings);
     fb8:	6820      	ldr	r0, [r4, #0]
     fba:	f000 faf1 	bl	15a0 <switchStringModel>
     fbe:	e7ba      	b.n	f36 <audioFrameAdditive+0xf6>
     fc0:	9b03      	ldr	r3, [sp, #12]
     fc2:	461d      	mov	r5, r3
     fc4:	f103 0430 	add.w	r4, r3, #48	; 0x30
					tADSRT_off(&additiveEnv[i][j]);
     fc8:	4628      	mov	r0, r5
				for (int j = 0; j < NUM_OVERTONES; j++)
     fca:	3504      	adds	r5, #4
					tADSRT_off(&additiveEnv[i][j]);
     fcc:	f008 fc30 	bl	9830 <__tADSRT_off_veneer>
				for (int j = 0; j < NUM_OVERTONES; j++)
     fd0:	42ac      	cmp	r4, r5
     fd2:	d1f9      	bne.n	fc8 <audioFrameAdditive+0x188>
				tADSRT_off(&fenvelopes[i]);
     fd4:	9804      	ldr	r0, [sp, #16]
     fd6:	f008 fc2b 	bl	9830 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
     fda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
     fdc:	781a      	ldrb	r2, [r3, #0]
     fde:	e776      	b.n	ece <audioFrameAdditive+0x8e>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     fe0:	4b63      	ldr	r3, [pc, #396]	; (1170 <audioFrameAdditive+0x330>)
     fe2:	eddf 7a6b 	vldr	s15, [pc, #428]	; 1190 <audioFrameAdditive+0x350>
     fe6:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
				stringOctave[i] = octave;
     fea:	9c06      	ldr	r4, [sp, #24]
				float amplitz = stringInputs[i] * 0.000015259021897f;
     fec:	b29b      	uxth	r3, r3
				tADSRT_on(&fenvelopes[i], amplitz);
     fee:	9804      	ldr	r0, [sp, #16]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
     ff0:	f8df b1c8 	ldr.w	fp, [pc, #456]	; 11bc <audioFrameAdditive+0x37c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
     ff4:	ee0c 3a10 	vmov	s24, r3
				stringOctave[i] = octave;
     ff8:	4b66      	ldr	r3, [pc, #408]	; (1194 <audioFrameAdditive+0x354>)
				float amplitz = stringInputs[i] * 0.000015259021897f;
     ffa:	eeb8 cacc 	vcvt.f32.s32	s24, s24
				stringOctave[i] = octave;
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	6023      	str	r3, [r4, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    1002:	ee2c ca27 	vmul.f32	s24, s24, s15
				tADSRT_on(&fenvelopes[i], amplitz);
    1006:	eeb0 0a4c 	vmov.f32	s0, s24
    100a:	f008 fcbd 	bl	9988 <__tADSRT_on_veneer>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    100e:	4b62      	ldr	r3, [pc, #392]	; (1198 <audioFrameAdditive+0x358>)
    1010:	edd4 7a00 	vldr	s15, [r4]
    1014:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    1018:	ed93 0a00 	vldr	s0, [r3]
    101c:	ee30 0a27 	vadd.f32	s0, s0, s15
    1020:	f008 fc52 	bl	98c8 <__mtof_veneer>
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1024:	eeb0 7a0c 	vmov.f32	s14, #12	; 0x40600000  3.5
    1028:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    102c:	9b05      	ldr	r3, [sp, #20]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    102e:	eddb 6a02 	vldr	s13, [fp, #8]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    1032:	ed83 0a00 	vstr	s0, [r3]
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1036:	eee6 7a87 	vfma.f32	s15, s13, s14
				int thisString = i + firstString;
    103a:	4b58      	ldr	r3, [pc, #352]	; (119c <audioFrameAdditive+0x35c>)
    103c:	681b      	ldr	r3, [r3, #0]
    103e:	4433      	add	r3, r6
				float fakedFreq = stringFrequencies[i] * ((knobScaled[2] * 3.5f) + 0.5f);
    1040:	ee60 9a27 	vmul.f32	s19, s0, s15
				if (thisString < 6)
    1044:	2b05      	cmp	r3, #5
					stringFade = (float)thisString * 0.2f;
    1046:	ee07 3a90 	vmov	s15, r3
				int thisString = i + firstString;
    104a:	930b      	str	r3, [sp, #44]	; 0x2c
					stringFade = (float)thisString * 0.2f;
    104c:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
				if (thisString < 6)
    1050:	f340 8187 	ble.w	1362 <audioFrameAdditive+0x522>
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1054:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1058:	4f51      	ldr	r7, [pc, #324]	; (11a0 <audioFrameAdditive+0x360>)
    105a:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
    105e:	eef0 1a6f 	vmov.f32	s3, s31
    1062:	ed97 1a05 	vldr	s2, [r7, #20]
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1066:	ee39 9a67 	vsub.f32	s18, s18, s15
    106a:	eddf 7a4e 	vldr	s15, [pc, #312]	; 11a4 <audioFrameAdditive+0x364>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    106e:	edd7 0a03 	vldr	s1, [r7, #12]
    1072:	eeb0 0a69 	vmov.f32	s0, s19
					stringFade = (float)(thisString - 6.0f) * 0.2f;
    1076:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    107a:	f008 fd59 	bl	9b30 <__LEAF_map_veneer>
    107e:	eeb0 1a4f 	vmov.f32	s2, s30
    1082:	eef0 0a40 	vmov.f32	s1, s0
    1086:	eeb0 0a6f 	vmov.f32	s0, s31
    108a:	f008 fb81 	bl	9790 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    108e:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1092:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1096:	ed97 1a02 	vldr	s2, [r7, #8]
    109a:	eef0 1a6f 	vmov.f32	s3, s31
    109e:	edd7 0a00 	vldr	s1, [r7]
    10a2:	eeb0 0a69 	vmov.f32	s0, s19
    10a6:	f8df 9118 	ldr.w	r9, [pc, #280]	; 11c0 <audioFrameAdditive+0x380>
    10aa:	f008 fd41 	bl	9b30 <__LEAF_map_veneer>
    10ae:	eeb0 1a4f 	vmov.f32	s2, s30
    10b2:	eef0 0a40 	vmov.f32	s1, s0
    10b6:	4d3c      	ldr	r5, [pc, #240]	; (11a8 <audioFrameAdditive+0x368>)
    10b8:	eeb0 0a6f 	vmov.f32	s0, s31
    10bc:	4c3b      	ldr	r4, [pc, #236]	; (11ac <audioFrameAdditive+0x36c>)
    10be:	f008 fb67 	bl	9790 <__LEAF_clip_veneer>
				int height2Int = floor(height2);
    10c2:	eeb7 7aeb 	vcvt.f64.f32	d7, s23
				int height1Int = floor(height1);
    10c6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
    10ca:	4939      	ldr	r1, [pc, #228]	; (11b0 <audioFrameAdditive+0x370>)
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    10cc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    10d0:	960f      	str	r6, [sp, #60]	; 0x3c
				int height2Int = floor(height2);
    10d2:	febb 7b47 	vrintm.f64	d7, d7
    10d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
				int height1Int = floor(height1);
    10da:	febb 6b46 	vrintm.f64	d6, d6
    10de:	eebd 6bc6 	vcvt.s32.f64	s12, d6
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    10e2:	ee38 eac0 	vsub.f32	s28, s17, s0
    10e6:	464e      	mov	r6, r9
    10e8:	ee17 3a10 	vmov	r3, s14
				float height2Float = height2 - height2Int;
    10ec:	eeb8 dac7 	vcvt.f32.s32	s26, s14
    10f0:	ee16 2a10 	vmov	r2, s12
				float height1Float = height1 - height1Int;
    10f4:	eef8 7ac6 	vcvt.f32.s32	s15, s12
    10f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    10fc:	ee78 eaeb 	vsub.f32	s29, s17, s23
    1100:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    1104:	970a      	str	r7, [sp, #40]	; 0x28
    1106:	011b      	lsls	r3, r3, #4
				float height1Float = height1 - height1Int;
    1108:	ee70 da67 	vsub.f32	s27, s0, s15
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    110c:	ee7e 7a27 	vadd.f32	s15, s28, s15
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1110:	f8dd 800c 	ldr.w	r8, [sp, #12]
    1114:	f103 0a90 	add.w	sl, r3, #144	; 0x90
    1118:	f503 73a8 	add.w	r3, r3, #336	; 0x150
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    111c:	ee7e ea8d 	vadd.f32	s29, s29, s26
    1120:	18c8      	adds	r0, r1, r3
    1122:	eb01 1302 	add.w	r3, r1, r2, lsl #4
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
    1126:	eeb0 ba40 	vmov.f32	s22, s0
				float height2Float = height2 - height2Int;
    112a:	448a      	add	sl, r1
    112c:	461a      	mov	r2, r3
    112e:	33c0      	adds	r3, #192	; 0xc0
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1130:	ee78 aac9 	vsub.f32	s21, s17, s18
    1134:	4607      	mov	r7, r0
				float height2Float = height2 - height2Int;
    1136:	ee3b dacd 	vsub.f32	s26, s23, s26
				for (int j = 0; j < NUM_OVERTONES; j++)
    113a:	4691      	mov	r9, r2
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    113c:	edcd 7a0c 	vstr	s15, [sp, #48]	; 0x30
    1140:	9302      	str	r3, [sp, #8]
    1142:	e0c7      	b.n	12d4 <audioFrameAdditive+0x494>
    1144:	e0001000 	.word	0xe0001000
    1148:	200054a8 	.word	0x200054a8
    114c:	20005020 	.word	0x20005020
    1150:	20004f3c 	.word	0x20004f3c
    1154:	200009dc 	.word	0x200009dc
    1158:	44fa0000 	.word	0x44fa0000
    115c:	20013f5c 	.word	0x20013f5c
    1160:	3dcccccd 	.word	0x3dcccccd
    1164:	3ffeb852 	.word	0x3ffeb852
    1168:	20013f0c 	.word	0x20013f0c
    116c:	00000000 	.word	0x00000000
    1170:	20013f3c 	.word	0x20013f3c
    1174:	30000000 	.word	0x30000000
    1178:	4b000000 	.word	0x4b000000
    117c:	20013f74 	.word	0x20013f74
    1180:	200004a4 	.word	0x200004a4
    1184:	20013f78 	.word	0x20013f78
    1188:	20004f4c 	.word	0x20004f4c
    118c:	20000a0c 	.word	0x20000a0c
    1190:	37800080 	.word	0x37800080
    1194:	2000502c 	.word	0x2000502c
    1198:	20013f54 	.word	0x20013f54
    119c:	20004f44 	.word	0x20004f44
    11a0:	200002d0 	.word	0x200002d0
    11a4:	3e4ccccd 	.word	0x3e4ccccd
    11a8:	20000b8c 	.word	0x20000b8c
    11ac:	2001403e 	.word	0x2001403e
    11b0:	200002f4 	.word	0x200002f4
    11b4:	200004b1 	.word	0x200004b1
    11b8:	20005090 	.word	0x20005090
    11bc:	20004f60 	.word	0x20004f60
    11c0:	20000cac 	.word	0x20000cac
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11c4:	ed97 8a00 	vldr	s16, [r7]
						if (height2 < 1.0f)
    11c8:	eef4 bae8 	vcmpe.f32	s23, s17
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11cc:	edd3 7a00 	vldr	s15, [r3]
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11d0:	ee2d 8a08 	vmul.f32	s16, s26, s16
    11d4:	ed9a 7a24 	vldr	s14, [sl, #144]	; 0x90
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11d8:	ee6d 7aa7 	vmul.f32	s15, s27, s15
    11dc:	eddd 6a0c 	vldr	s13, [sp, #48]	; 0x30
						if (height2 < 1.0f)
    11e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    11e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    11e6:	eea7 8a2e 	vfma.f32	s16, s14, s29
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    11ea:	ed99 7a24 	vldr	s14, [r9, #144]	; 0x90
    11ee:	eee7 7a26 	vfma.f32	s15, s14, s13
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    11f2:	ee28 8a2a 	vmul.f32	s16, s16, s21
    11f6:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    11fa:	f100 80eb 	bmi.w	13d4 <audioFrameAdditive+0x594>
							d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
    11fe:	eef0 0a69 	vmov.f32	s1, s19
    1202:	ed93 1a08 	vldr	s2, [r3, #32]
    1206:	ed93 0a07 	vldr	s0, [r3, #28]
    120a:	ed95 ea3c 	vldr	s28, [r5, #240]	; 0xf0
    120e:	f008 fabf 	bl	9790 <__LEAF_clip_veneer>
    1212:	ed96 7a3c 	vldr	s14, [r6, #240]	; 0xf0
    1216:	eeae 7a00 	vfma.f32	s14, s28, s0
    121a:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    121e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						if (height1 < 1.0f)
    1220:	eeb4 bae8 	vcmpe.f32	s22, s17
    1224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1228:	f100 80bf 	bmi.w	13aa <audioFrameAdditive+0x56a>
							d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    122c:	edd5 6a24 	vldr	s13, [r5, #144]	; 0x90
    1230:	eef0 0a69 	vmov.f32	s1, s19
    1234:	ed93 1a05 	vldr	s2, [r3, #20]
    1238:	ed93 0a04 	vldr	s0, [r3, #16]
    123c:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    1240:	f008 faa6 	bl	9790 <__LEAF_clip_veneer>
    1244:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1248:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    124c:	eea6 7a80 	vfma.f32	s14, s13, s0
    1250:	eec8 6a87 	vdiv.f32	s13, s17, s14
				for (int j = 0; j < NUM_OVERTONES; j++)
    1254:	9b02      	ldr	r3, [sp, #8]
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1256:	4640      	mov	r0, r8
    1258:	4a7c      	ldr	r2, [pc, #496]	; (144c <audioFrameAdditive+0x60c>)
				for (int j = 0; j < NUM_OVERTONES; j++)
    125a:	3504      	adds	r5, #4
    125c:	3304      	adds	r3, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    125e:	ed9b 0a05 	vldr	s0, [fp, #20]
				for (int j = 0; j < NUM_OVERTONES; j++)
    1262:	3604      	adds	r6, #4
    1264:	f109 0904 	add.w	r9, r9, #4
    1268:	9302      	str	r3, [sp, #8]
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    126a:	ee6e 7a2a 	vmul.f32	s15, s28, s21
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    126e:	7823      	ldrb	r3, [r4, #0]
    1270:	ee20 0a0a 	vmul.f32	s0, s0, s20
				for (int j = 0; j < NUM_OVERTONES; j++)
    1274:	f10a 0a04 	add.w	sl, sl, #4
    1278:	3704      	adds	r7, #4
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    127a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
						thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
    127e:	eee6 7a89 	vfma.f32	s15, s13, s18
					tADSRT_setDecay(&additiveEnv[i][j], thisDecay + (randomFactors[currentRandom] * knobScaled[5] * 0.1f));// * randomFactors[currentRandom]);
    1282:	ed93 7a00 	vldr	s14, [r3]
    1286:	ee20 0a07 	vmul.f32	s0, s0, s14
    128a:	ed9b 7a03 	vldr	s14, [fp, #12]
    128e:	ee27 7a2c 	vmul.f32	s14, s14, s25
    1292:	eea7 0a27 	vfma.f32	s0, s14, s15
    1296:	f008 fb83 	bl	99a0 <__tADSRT_setDecay_veneer>
					currentRandom++;
    129a:	7823      	ldrb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    129c:	4a6b      	ldr	r2, [pc, #428]	; (144c <audioFrameAdditive+0x60c>)
    129e:	4640      	mov	r0, r8
					currentRandom++;
    12a0:	3301      	adds	r3, #1
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    12a2:	eddb 7a06 	vldr	s15, [fp, #24]
				for (int j = 0; j < NUM_OVERTONES; j++)
    12a6:	f108 0804 	add.w	r8, r8, #4
					currentRandom++;
    12aa:	b2db      	uxtb	r3, r3
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    12ac:	ee67 7a8a 	vmul.f32	s15, s15, s20
					currentRandom++;
    12b0:	7023      	strb	r3, [r4, #0]
					tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain + (randomFactors[currentRandom] * knobScaled[6] * 0.1f)));
    12b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    12b6:	ed93 7a00 	vldr	s14, [r3]
    12ba:	eea7 8a27 	vfma.f32	s16, s14, s15
    12be:	ee28 0a0c 	vmul.f32	s0, s16, s24
    12c2:	f008 fb61 	bl	9988 <__tADSRT_on_veneer>
					currentRandom++;
    12c6:	7823      	ldrb	r3, [r4, #0]
    12c8:	3301      	adds	r3, #1
    12ca:	7023      	strb	r3, [r4, #0]
				for (int j = 0; j < NUM_OVERTONES; j++)
    12cc:	4b60      	ldr	r3, [pc, #384]	; (1450 <audioFrameAdditive+0x610>)
    12ce:	42ab      	cmp	r3, r5
    12d0:	f000 80b7 	beq.w	1442 <audioFrameAdditive+0x602>
					if (thisString < 6)
    12d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    12d6:	2b05      	cmp	r3, #5
						float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12d8:	9b02      	ldr	r3, [sp, #8]
					if (thisString < 6)
    12da:	f77f af73 	ble.w	11c4 <audioFrameAdditive+0x384>
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    12de:	edd7 7a00 	vldr	s15, [r7]
						if (height2 < 1.0f)
    12e2:	eef4 bae8 	vcmpe.f32	s23, s17
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    12e6:	ed9a 8a00 	vldr	s16, [sl]
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12ea:	ed93 7a00 	vldr	s14, [r3]
						float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
    12ee:	eea7 8a8d 	vfma.f32	s16, s15, s26
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12f2:	edd9 7a00 	vldr	s15, [r9]
						if (height2 < 1.0f)
    12f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    12fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
    12fc:	eee7 7a2d 	vfma.f32	s15, s14, s27
						thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
    1300:	ee28 8a2a 	vmul.f32	s16, s16, s21
    1304:	eea9 8a27 	vfma.f32	s16, s18, s15
						if (height2 < 1.0f)
    1308:	f100 808a 	bmi.w	1420 <audioFrameAdditive+0x5e0>
							d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
    130c:	eef0 0a69 	vmov.f32	s1, s19
    1310:	ed93 1a05 	vldr	s2, [r3, #20]
    1314:	ed93 0a04 	vldr	s0, [r3, #16]
    1318:	ed95 ea24 	vldr	s28, [r5, #144]	; 0x90
    131c:	f008 fa38 	bl	9790 <__LEAF_clip_veneer>
    1320:	ed96 7a24 	vldr	s14, [r6, #144]	; 0x90
    1324:	eeae 7a00 	vfma.f32	s14, s28, s0
    1328:	ee88 ea87 	vdiv.f32	s28, s17, s14
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    132c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
						if (height1 < 1.0f)
    132e:	eeb4 bae8 	vcmpe.f32	s22, s17
    1332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1336:	d45e      	bmi.n	13f6 <audioFrameAdditive+0x5b6>
							d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
    1338:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
    133c:	eef0 0a69 	vmov.f32	s1, s19
    1340:	ed93 1a02 	vldr	s2, [r3, #8]
    1344:	ed93 0a01 	vldr	s0, [r3, #4]
    1348:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    134c:	f008 fa20 	bl	9790 <__LEAF_clip_veneer>
    1350:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1354:	ed96 7a0c 	vldr	s14, [r6, #48]	; 0x30
    1358:	eea6 7a80 	vfma.f32	s14, s13, s0
    135c:	eec8 6a87 	vdiv.f32	s13, s17, s14
    1360:	e778      	b.n	1254 <audioFrameAdditive+0x414>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1362:	4f3c      	ldr	r7, [pc, #240]	; (1454 <audioFrameAdditive+0x614>)
    1364:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					stringFade = (float)thisString * 0.2f;
    1368:	eddf 7a3b 	vldr	s15, [pc, #236]	; 1458 <audioFrameAdditive+0x618>
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    136c:	eef0 1a6f 	vmov.f32	s3, s31
    1370:	ed97 1a08 	vldr	s2, [r7, #32]
    1374:	eeb0 0a69 	vmov.f32	s0, s19
    1378:	edd7 0a06 	vldr	s1, [r7, #24]
					stringFade = (float)thisString * 0.2f;
    137c:	ee29 9a27 	vmul.f32	s18, s18, s15
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1380:	f008 fbd6 	bl	9b30 <__LEAF_map_veneer>
    1384:	eeb0 1a4f 	vmov.f32	s2, s30
    1388:	eef0 0a40 	vmov.f32	s1, s0
    138c:	eeb0 0a6f 	vmov.f32	s0, s31
    1390:	f008 f9fe 	bl	9790 <__LEAF_clip_veneer>
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    1394:	eeb0 2a00 	vmov.f32	s4, #0	; 0x40000000  2.0
					height2 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
    1398:	eef0 ba40 	vmov.f32	s23, s0
					height1 = LEAF_clip(0.0f, LEAF_map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
    139c:	ed97 1a05 	vldr	s2, [r7, #20]
    13a0:	eef0 1a6f 	vmov.f32	s3, s31
    13a4:	edd7 0a03 	vldr	s1, [r7, #12]
    13a8:	e67b      	b.n	10a2 <audioFrameAdditive+0x262>
							d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    13aa:	edd5 6a18 	vldr	s13, [r5, #96]	; 0x60
    13ae:	eef0 0a69 	vmov.f32	s1, s19
    13b2:	ed93 1a04 	vldr	s2, [r3, #16]
    13b6:	ed93 0a03 	vldr	s0, [r3, #12]
    13ba:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    13be:	f008 f9e7 	bl	9790 <__LEAF_clip_veneer>
    13c2:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    13c6:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    13ca:	eea6 7a80 	vfma.f32	s14, s13, s0
    13ce:	eec8 6a87 	vdiv.f32	s13, s17, s14
    13d2:	e73f      	b.n	1254 <audioFrameAdditive+0x414>
							d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
    13d4:	eef0 0a69 	vmov.f32	s1, s19
    13d8:	ed93 1a07 	vldr	s2, [r3, #28]
    13dc:	ed93 0a06 	vldr	s0, [r3, #24]
    13e0:	ed95 ea30 	vldr	s28, [r5, #192]	; 0xc0
    13e4:	f008 f9d4 	bl	9790 <__LEAF_clip_veneer>
    13e8:	ed96 7a30 	vldr	s14, [r6, #192]	; 0xc0
    13ec:	eeae 7a00 	vfma.f32	s14, s28, s0
    13f0:	ee88 ea87 	vdiv.f32	s28, s17, s14
    13f4:	e713      	b.n	121e <audioFrameAdditive+0x3de>
							d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
    13f6:	edd5 6a00 	vldr	s13, [r5]
    13fa:	eef0 0a69 	vmov.f32	s1, s19
    13fe:	ed93 1a01 	vldr	s2, [r3, #4]
    1402:	ed93 0a00 	vldr	s0, [r3]
    1406:	edcd 6a0d 	vstr	s13, [sp, #52]	; 0x34
    140a:	f008 f9c1 	bl	9790 <__LEAF_clip_veneer>
    140e:	eddd 6a0d 	vldr	s13, [sp, #52]	; 0x34
    1412:	ed96 7a00 	vldr	s14, [r6]
    1416:	eea6 7a80 	vfma.f32	s14, s13, s0
    141a:	eec8 6a87 	vdiv.f32	s13, s17, s14
    141e:	e719      	b.n	1254 <audioFrameAdditive+0x414>
							d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
    1420:	eef0 0a69 	vmov.f32	s1, s19
    1424:	ed93 1a04 	vldr	s2, [r3, #16]
    1428:	ed93 0a03 	vldr	s0, [r3, #12]
    142c:	ed95 ea18 	vldr	s28, [r5, #96]	; 0x60
    1430:	f008 f9ae 	bl	9790 <__LEAF_clip_veneer>
    1434:	ed96 7a18 	vldr	s14, [r6, #96]	; 0x60
    1438:	eeae 7a00 	vfma.f32	s14, s28, s0
    143c:	ee88 ea87 	vdiv.f32	s28, s17, s14
    1440:	e774      	b.n	132c <audioFrameAdditive+0x4ec>
		for (int i = 0; i < numStringsThisBoard; i++)
    1442:	e9dd 360e 	ldrd	r3, r6, [sp, #56]	; 0x38
    1446:	781a      	ldrb	r2, [r3, #0]
    1448:	e541      	b.n	ece <audioFrameAdditive+0x8e>
    144a:	bf00      	nop
    144c:	200050a8 	.word	0x200050a8
    1450:	20000bbc 	.word	0x20000bbc
    1454:	200002d0 	.word	0x200002d0
    1458:	3e4ccccd 	.word	0x3e4ccccd
    145c:	00000000 	.word	0x00000000

00001460 <updateStateFromSPIMessage>:


void __ATTR_ITCMRAM updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1460:	4a3a      	ldr	r2, [pc, #232]	; (154c <updateStateFromSPIMessage+0xec>)
	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS_RX[25 + offset];



	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1462:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
	int modeBit = SPI_LEVERS_RX[24 + offset];
    1466:	1813      	adds	r3, r2, r0
{
    1468:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS_RX[24 + offset];
    146a:	7e19      	ldrb	r1, [r3, #24]
	voice = SPI_LEVERS_RX[25 + offset];
    146c:	7e5e      	ldrb	r6, [r3, #25]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    146e:	f001 030f 	and.w	r3, r1, #15
	octaveAction = (modeBit >> 6) & 1;
    1472:	4c37      	ldr	r4, [pc, #220]	; (1550 <updateStateFromSPIMessage+0xf0>)
	voice = SPI_LEVERS_RX[25 + offset];
    1474:	4d37      	ldr	r5, [pc, #220]	; (1554 <updateStateFromSPIMessage+0xf4>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1476:	3b05      	subs	r3, #5
    1478:	4f37      	ldr	r7, [pc, #220]	; (1558 <updateStateFromSPIMessage+0xf8>)
    147a:	ee07 3a90 	vmov	s15, r3
	octaveAction = (modeBit >> 6) & 1;
    147e:	f3c1 1380 	ubfx	r3, r1, #6, #1
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1482:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	octaveAction = (modeBit >> 6) & 1;
    1486:	7023      	strb	r3, [r4, #0]
	voice = SPI_LEVERS_RX[25 + offset];
    1488:	602e      	str	r6, [r5, #0]
	dualSlider = (modeBit >> 5) & 1;
    148a:	f3c1 1540 	ubfx	r5, r1, #5, #1
	//if "octave action" is set to 1, then immediately change octave instead of waiting for new note
	if (octaveAction)
    148e:	7823      	ldrb	r3, [r4, #0]
	edit = (modeBit >> 4) & 1;
    1490:	f3c1 1100 	ubfx	r1, r1, #4, #1
	dualSlider = (modeBit >> 5) & 1;
    1494:	4c31      	ldr	r4, [pc, #196]	; (155c <updateStateFromSPIMessage+0xfc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    1496:	ee67 7a87 	vmul.f32	s15, s15, s14
	dualSlider = (modeBit >> 5) & 1;
    149a:	6025      	str	r5, [r4, #0]
	edit = (modeBit >> 4) & 1;
    149c:	4c30      	ldr	r4, [pc, #192]	; (1560 <updateStateFromSPIMessage+0x100>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
    149e:	edc7 7a00 	vstr	s15, [r7]
	edit = (modeBit >> 4) & 1;
    14a2:	6021      	str	r1, [r4, #0]
	if (octaveAction)
    14a4:	b14b      	cbz	r3, 14ba <updateStateFromSPIMessage+0x5a>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    14a6:	4b2f      	ldr	r3, [pc, #188]	; (1564 <updateStateFromSPIMessage+0x104>)
    14a8:	781b      	ldrb	r3, [r3, #0]
    14aa:	b133      	cbz	r3, 14ba <updateStateFromSPIMessage+0x5a>
		{
			stringOctave[i] = octave;
    14ac:	492e      	ldr	r1, [pc, #184]	; (1568 <updateStateFromSPIMessage+0x108>)
		for (int i = 0; i < numStringsThisBoard; i++)
    14ae:	2b01      	cmp	r3, #1
			stringOctave[i] = octave;
    14b0:	edc1 7a00 	vstr	s15, [r1]
    14b4:	bf18      	it	ne
    14b6:	edc1 7a01 	vstrne	s15, [r1, #4]
		}
	}

	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14ba:	4410      	add	r0, r2
    14bc:	4c2b      	ldr	r4, [pc, #172]	; (156c <updateStateFromSPIMessage+0x10c>)
	volumePedal = volumePedalInt * 0.0002442002442f;

	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14be:	4a2c      	ldr	r2, [pc, #176]	; (1570 <updateStateFromSPIMessage+0x110>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14c0:	7e81      	ldrb	r1, [r0, #26]
    14c2:	7ec3      	ldrb	r3, [r0, #27]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14c4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 1574 <updateStateFromSPIMessage+0x114>
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14c8:	eb03 2301 	add.w	r3, r3, r1, lsl #8
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14cc:	7f01      	ldrb	r1, [r0, #28]
    14ce:	7f40      	ldrb	r0, [r0, #29]
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14d0:	b29b      	uxth	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    14d2:	4d29      	ldr	r5, [pc, #164]	; (1578 <updateStateFromSPIMessage+0x118>)
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14d4:	eb00 2001 	add.w	r0, r0, r1, lsl #8
    14d8:	4928      	ldr	r1, [pc, #160]	; (157c <updateStateFromSPIMessage+0x11c>)
	volumePedalInt = ((uint16_t)SPI_LEVERS_RX[26 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[27 + offset] & 0xff);
    14da:	8023      	strh	r3, [r4, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14dc:	8823      	ldrh	r3, [r4, #0]
    14de:	b29b      	uxth	r3, r3
    14e0:	ee00 3a10 	vmov	s0, r3
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14e4:	7813      	ldrb	r3, [r2, #0]
    14e6:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    14e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
	stringPositions[whichBar] = ((uint16_t)SPI_LEVERS_RX[28 + offset] << 8) + ((uint16_t)SPI_LEVERS_RX[29 + offset] & 0xff);
    14ec:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    14f0:	7813      	ldrb	r3, [r2, #0]
	volumePedal = volumePedalInt * 0.0002442002442f;
    14f2:	ee20 0a27 	vmul.f32	s0, s0, s15
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    14f6:	4822      	ldr	r0, [pc, #136]	; (1580 <updateStateFromSPIMessage+0x120>)
    14f8:	b2db      	uxtb	r3, r3
	volumePedal = volumePedalInt * 0.0002442002442f;
    14fa:	ed85 0a00 	vstr	s0, [r5]
	if (stringPositions[whichBar] != stringPositionsPrev[whichBar])
    14fe:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
    1502:	7813      	ldrb	r3, [r2, #0]
    1504:	b2db      	uxtb	r3, r3
    1506:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    150a:	429c      	cmp	r4, r3
    150c:	d01a      	beq.n	1544 <updateStateFromSPIMessage+0xe4>
	{
		//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11, GPIO_PIN_SET);
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    150e:	7814      	ldrb	r4, [r2, #0]
    1510:	7813      	ldrb	r3, [r2, #0]
    1512:	b2e2      	uxtb	r2, r4
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1514:	eddf 6a1b 	vldr	s13, [pc, #108]	; 1584 <updateStateFromSPIMessage+0x124>
		stringPositionsPrev[whichBar] = stringPositions[whichBar];
    1518:	b2db      	uxtb	r3, r3
    151a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    151e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1522:	ed91 7a00 	vldr	s14, [r1]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1526:	edd1 7a01 	vldr	s15, [r1, #4]
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    152a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    152e:	4b16      	ldr	r3, [pc, #88]	; (1588 <updateStateFromSPIMessage+0x128>)
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    1534:	ee27 7a26 	vmul.f32	s14, s14, s13
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1538:	ee67 7aa6 	vmul.f32	s15, s15, s13
		barInMIDI[0] = stringPositions[0] * 0.001953125f;
    153c:	ed83 7a00 	vstr	s14, [r3]
		barInMIDI[1] = stringPositions[1] * 0.001953125f;
    1540:	edc3 7a01 	vstr	s15, [r3, #4]
	}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1544:	4811      	ldr	r0, [pc, #68]	; (158c <updateStateFromSPIMessage+0x12c>)
}
    1546:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
    1548:	f008 b99e 	b.w	9888 <__tExpSmooth_setDest_veneer>
    154c:	30000800 	.word	0x30000800
    1550:	20005030 	.word	0x20005030
    1554:	20013f80 	.word	0x20013f80
    1558:	2000502c 	.word	0x2000502c
    155c:	20004f34 	.word	0x20004f34
    1560:	20004f38 	.word	0x20004f38
    1564:	200004b1 	.word	0x200004b1
    1568:	20013f5c 	.word	0x20013f5c
    156c:	20013f88 	.word	0x20013f88
    1570:	20013f90 	.word	0x20013f90
    1574:	39800801 	.word	0x39800801
    1578:	20013f84 	.word	0x20013f84
    157c:	20013f64 	.word	0x20013f64
    1580:	20013f6c 	.word	0x20013f6c
    1584:	3b000000 	.word	0x3b000000
    1588:	20000f0c 	.word	0x20000f0c
    158c:	20013f8c 	.word	0x20013f8c
    1590:	f3af 8000 	nop.w
    1594:	f3af 8000 	nop.w
    1598:	f3af 8000 	nop.w
    159c:	f3af 8000 	nop.w

000015a0 <switchStringModel>:



void __ATTR_ITCMRAM switchStringModel(int which)
{
	if (which == 1)
    15a0:	2801      	cmp	r0, #1
{
    15a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (which == 1)
    15a6:	d02a      	beq.n	15fe <switchStringModel+0x5e>
		audioFrameFunction = audioFrameString1;
		resetStringInputs = 1;
	}


	else if (which == 2)
    15a8:	2802      	cmp	r0, #2
    15aa:	d00c      	beq.n	15c6 <switchStringModel+0x26>
		audioFrameFunction = audioFrameString2;
		resetStringInputs = 1;
	}
	presetReady = 1;
	diskBusy = 0;
	currentActivePreset = voice;
    15ac:	4b29      	ldr	r3, [pc, #164]	; (1654 <switchStringModel+0xb4>)
	diskBusy = 0;
    15ae:	2100      	movs	r1, #0
    15b0:	4a29      	ldr	r2, [pc, #164]	; (1658 <switchStringModel+0xb8>)
	presetReady = 1;
    15b2:	2401      	movs	r4, #1
	currentActivePreset = voice;
    15b4:	681b      	ldr	r3, [r3, #0]
	diskBusy = 0;
    15b6:	7011      	strb	r1, [r2, #0]
	presetReady = 1;
    15b8:	4828      	ldr	r0, [pc, #160]	; (165c <switchStringModel+0xbc>)
	currentActivePreset = voice;
    15ba:	b2db      	uxtb	r3, r3
    15bc:	4a28      	ldr	r2, [pc, #160]	; (1660 <switchStringModel+0xc0>)
	presetReady = 1;
    15be:	6004      	str	r4, [r0, #0]
	currentActivePreset = voice;
    15c0:	7013      	strb	r3, [r2, #0]

}
    15c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (whichStringModelLoaded != String2Loaded)
    15c6:	4b27      	ldr	r3, [pc, #156]	; (1664 <switchStringModel+0xc4>)
    15c8:	781b      	ldrb	r3, [r3, #0]
    15ca:	2b01      	cmp	r3, #1
    15cc:	d137      	bne.n	163e <switchStringModel+0x9e>
    15ce:	4e26      	ldr	r6, [pc, #152]	; (1668 <switchStringModel+0xc8>)
{
    15d0:	2400      	movs	r4, #0
    15d2:	4d26      	ldr	r5, [pc, #152]	; (166c <switchStringModel+0xcc>)
			knobFrozen[i] = 1;
    15d4:	f04f 0801 	mov.w	r8, #1
    15d8:	4f25      	ldr	r7, [pc, #148]	; (1670 <switchStringModel+0xd0>)
			tExpSmooth_setValAndDest(&knobSmoothers[i], string2Defaults[i]);
    15da:	4628      	mov	r0, r5
    15dc:	ecb6 0a01 	vldmia	r6!, {s0}
    15e0:	f008 fa36 	bl	9a50 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[i] = 1;
    15e4:	f807 8004 	strb.w	r8, [r7, r4]
		for (int i = 0; i < 12; i++)
    15e8:	3401      	adds	r4, #1
    15ea:	3504      	adds	r5, #4
    15ec:	2c0c      	cmp	r4, #12
    15ee:	d1f4      	bne.n	15da <switchStringModel+0x3a>
		audioFrameFunction = audioFrameString2;
    15f0:	4a20      	ldr	r2, [pc, #128]	; (1674 <switchStringModel+0xd4>)
    15f2:	4921      	ldr	r1, [pc, #132]	; (1678 <switchStringModel+0xd8>)
		resetStringInputs = 1;
    15f4:	4b21      	ldr	r3, [pc, #132]	; (167c <switchStringModel+0xdc>)
		audioFrameFunction = audioFrameString2;
    15f6:	6011      	str	r1, [r2, #0]
		resetStringInputs = 1;
    15f8:	f883 8000 	strb.w	r8, [r3]
    15fc:	e7d6      	b.n	15ac <switchStringModel+0xc>
		if (whichStringModelLoaded != String1Loaded)
    15fe:	4b19      	ldr	r3, [pc, #100]	; (1664 <switchStringModel+0xc4>)
    1600:	781b      	ldrb	r3, [r3, #0]
    1602:	bb0b      	cbnz	r3, 1648 <switchStringModel+0xa8>
    1604:	4e1e      	ldr	r6, [pc, #120]	; (1680 <switchStringModel+0xe0>)
{
    1606:	2400      	movs	r4, #0
    1608:	4d18      	ldr	r5, [pc, #96]	; (166c <switchStringModel+0xcc>)
			knobFrozen[i] = 1;
    160a:	f04f 0801 	mov.w	r8, #1
    160e:	4f18      	ldr	r7, [pc, #96]	; (1670 <switchStringModel+0xd0>)
			tExpSmooth_setValAndDest(&knobSmoothers[i], string1Defaults[i]);
    1610:	4628      	mov	r0, r5
    1612:	ecb6 0a01 	vldmia	r6!, {s0}
    1616:	f008 fa1b 	bl	9a50 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[i] = 1;
    161a:	f807 8004 	strb.w	r8, [r7, r4]
		for (int i = 0; i < 12; i++)
    161e:	3401      	adds	r4, #1
    1620:	3504      	adds	r5, #4
    1622:	2c0c      	cmp	r4, #12
    1624:	d1f4      	bne.n	1610 <switchStringModel+0x70>
		tVZFilter_setFreq(&noiseFilt2, 3332.0f); //based on testing with knob values
    1626:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1684 <switchStringModel+0xe4>
    162a:	4817      	ldr	r0, [pc, #92]	; (1688 <switchStringModel+0xe8>)
    162c:	f008 f968 	bl	9900 <__tVZFilter_setFreq_veneer>
		audioFrameFunction = audioFrameString1;
    1630:	4a10      	ldr	r2, [pc, #64]	; (1674 <switchStringModel+0xd4>)
    1632:	4916      	ldr	r1, [pc, #88]	; (168c <switchStringModel+0xec>)
		resetStringInputs = 1;
    1634:	4b11      	ldr	r3, [pc, #68]	; (167c <switchStringModel+0xdc>)
		audioFrameFunction = audioFrameString1;
    1636:	6011      	str	r1, [r2, #0]
		resetStringInputs = 1;
    1638:	f883 8000 	strb.w	r8, [r3]
    163c:	e7b6      	b.n	15ac <switchStringModel+0xc>
			audioFreeString1();
    163e:	f003 fd7f 	bl	5140 <audioFreeString1>
			audioInitString2();
    1642:	f004 f81d 	bl	5680 <audioInitString2>
    1646:	e7c2      	b.n	15ce <switchStringModel+0x2e>
			audioFreeString2();
    1648:	f004 f86a 	bl	5720 <audioFreeString2>
			audioInitString1();
    164c:	f003 fcf8 	bl	5040 <audioInitString1>
    1650:	e7d8      	b.n	1604 <switchStringModel+0x64>
    1652:	bf00      	nop
    1654:	20013f80 	.word	0x20013f80
    1658:	20014078 	.word	0x20014078
    165c:	20005084 	.word	0x20005084
    1660:	20000728 	.word	0x20000728
    1664:	20013f91 	.word	0x20013f91
    1668:	200004ec 	.word	0x200004ec
    166c:	20004f90 	.word	0x20004f90
    1670:	20004f54 	.word	0x20004f54
    1674:	20000f08 	.word	0x20000f08
    1678:	00005ee1 	.word	0x00005ee1
    167c:	200054a8 	.word	0x200054a8
    1680:	200004bc 	.word	0x200004bc
    1684:	45504000 	.word	0x45504000
    1688:	20005028 	.word	0x20005028
    168c:	000054a1 	.word	0x000054a1
    1690:	f3af 8000 	nop.w
    1694:	f3af 8000 	nop.w
    1698:	f3af 8000 	nop.w
    169c:	f3af 8000 	nop.w

000016a0 <HAL_SAI_TxCpltCallback>:




void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
    16a0:	b538      	push	{r3, r4, r5, lr}
	//if ((!diskBusy)&& (presetReady))
	{
		audioFrameFunction(HALF_BUFFER_SIZE);
    16a2:	4c3b      	ldr	r4, [pc, #236]	; (1790 <HAL_SAI_TxCpltCallback+0xf0>)
    16a4:	2080      	movs	r0, #128	; 0x80
    16a6:	6823      	ldr	r3, [r4, #0]
    16a8:	4798      	blx	r3
		{
			audioOutBuffer[HALF_BUFFER_SIZE+i] = 0;
		}
	}
	*/
	if (voice != prevVoice)
    16aa:	4b3a      	ldr	r3, [pc, #232]	; (1794 <HAL_SAI_TxCpltCallback+0xf4>)
    16ac:	4a3a      	ldr	r2, [pc, #232]	; (1798 <HAL_SAI_TxCpltCallback+0xf8>)
    16ae:	6818      	ldr	r0, [r3, #0]
    16b0:	6811      	ldr	r1, [r2, #0]
    16b2:	4288      	cmp	r0, r1
    16b4:	d01f      	beq.n	16f6 <HAL_SAI_TxCpltCallback+0x56>
	{
		if (voice == 63)
    16b6:	6819      	ldr	r1, [r3, #0]
    16b8:	293f      	cmp	r1, #63	; 0x3f
    16ba:	d049      	beq.n	1750 <HAL_SAI_TxCpltCallback+0xb0>
		{
			switchStrings = 1;
			diskBusy = 0;
		}
		else if (voice == 62)
    16bc:	6819      	ldr	r1, [r3, #0]
    16be:	293e      	cmp	r1, #62	; 0x3e
    16c0:	d05b      	beq.n	177a <HAL_SAI_TxCpltCallback+0xda>
		{
			switchStrings = 2;
			diskBusy = 0;
		}
		else if (voice == 61)
    16c2:	6819      	ldr	r1, [r3, #0]
    16c4:	293d      	cmp	r1, #61	; 0x3d
		{
			audioFrameFunction = audioFrameAdditive;
			currentActivePreset = voice;
    16c6:	6819      	ldr	r1, [r3, #0]
		else if (voice == 61)
    16c8:	d049      	beq.n	175e <HAL_SAI_TxCpltCallback+0xbe>
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    16ca:	293c      	cmp	r1, #60	; 0x3c
    16cc:	d05c      	beq.n	1788 <HAL_SAI_TxCpltCallback+0xe8>
			presetReady = 1;
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
    16ce:	4933      	ldr	r1, [pc, #204]	; (179c <HAL_SAI_TxCpltCallback+0xfc>)
			presetWaitingToLoad = 1;
    16d0:	2001      	movs	r0, #1
    16d2:	4d33      	ldr	r5, [pc, #204]	; (17a0 <HAL_SAI_TxCpltCallback+0x100>)
			audioFrameFunction = audioFrameSynth;
    16d4:	6021      	str	r1, [r4, #0]
			presetWaitingToLoad = 1;
    16d6:	6028      	str	r0, [r5, #0]
			presetNumberToLoad = voice;
    16d8:	6819      	ldr	r1, [r3, #0]
    16da:	4c32      	ldr	r4, [pc, #200]	; (17a4 <HAL_SAI_TxCpltCallback+0x104>)
    16dc:	b2c9      	uxtb	r1, r1
    16de:	7021      	strb	r1, [r4, #0]
			presetReady = 0;
    16e0:	2400      	movs	r4, #0
    16e2:	4931      	ldr	r1, [pc, #196]	; (17a8 <HAL_SAI_TxCpltCallback+0x108>)
    16e4:	600c      	str	r4, [r1, #0]
			if (prevVoice > 60)
    16e6:	6811      	ldr	r1, [r2, #0]
    16e8:	293c      	cmp	r1, #60	; 0x3c
    16ea:	dd01      	ble.n	16f0 <HAL_SAI_TxCpltCallback+0x50>
			{
				resetStringInputs = 1;
    16ec:	492f      	ldr	r1, [pc, #188]	; (17ac <HAL_SAI_TxCpltCallback+0x10c>)
    16ee:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    16f0:	492f      	ldr	r1, [pc, #188]	; (17b0 <HAL_SAI_TxCpltCallback+0x110>)
    16f2:	2000      	movs	r0, #0
    16f4:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    16f6:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    16f8:	4b2e      	ldr	r3, [pc, #184]	; (17b4 <HAL_SAI_TxCpltCallback+0x114>)
	prevVoice = voice;
    16fa:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    16fc:	f3bf 8f4f 	dsb	sy
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;

      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1700:	4a2d      	ldr	r2, [pc, #180]	; (17b8 <HAL_SAI_TxCpltCallback+0x118>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1702:	f103 0420 	add.w	r4, r3, #32
    1706:	f103 0140 	add.w	r1, r3, #64	; 0x40
    170a:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    170e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1712:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1716:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    171a:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    171e:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1722:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1726:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    172a:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    172e:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    1732:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1736:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    173a:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    173e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    1742:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1746:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    174a:	f3bf 8f6f 	isb	sy
}
    174e:	bd38      	pop	{r3, r4, r5, pc}
			switchStrings = 1;
    1750:	481a      	ldr	r0, [pc, #104]	; (17bc <HAL_SAI_TxCpltCallback+0x11c>)
    1752:	2401      	movs	r4, #1
			diskBusy = 0;
    1754:	491a      	ldr	r1, [pc, #104]	; (17c0 <HAL_SAI_TxCpltCallback+0x120>)
			switchStrings = 1;
    1756:	6004      	str	r4, [r0, #0]
			diskBusy = 0;
    1758:	2000      	movs	r0, #0
    175a:	7008      	strb	r0, [r1, #0]
    175c:	e7cb      	b.n	16f6 <HAL_SAI_TxCpltCallback+0x56>
			presetReady = 1;
    175e:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameAdditive;
    1760:	4d18      	ldr	r5, [pc, #96]	; (17c4 <HAL_SAI_TxCpltCallback+0x124>)
			audioFrameFunction = audioFrameVocal;
    1762:	6025      	str	r5, [r4, #0]
			currentActivePreset = voice;
    1764:	b2c9      	uxtb	r1, r1
    1766:	4c18      	ldr	r4, [pc, #96]	; (17c8 <HAL_SAI_TxCpltCallback+0x128>)
    1768:	7021      	strb	r1, [r4, #0]
			diskBusy = 0;
    176a:	2400      	movs	r4, #0
    176c:	4914      	ldr	r1, [pc, #80]	; (17c0 <HAL_SAI_TxCpltCallback+0x120>)
    176e:	700c      	strb	r4, [r1, #0]
			presetReady = 1;
    1770:	4c0d      	ldr	r4, [pc, #52]	; (17a8 <HAL_SAI_TxCpltCallback+0x108>)
			resetStringInputs = 1;
    1772:	490e      	ldr	r1, [pc, #56]	; (17ac <HAL_SAI_TxCpltCallback+0x10c>)
			presetReady = 1;
    1774:	6020      	str	r0, [r4, #0]
			resetStringInputs = 1;
    1776:	7008      	strb	r0, [r1, #0]
    1778:	e7bd      	b.n	16f6 <HAL_SAI_TxCpltCallback+0x56>
			switchStrings = 2;
    177a:	4810      	ldr	r0, [pc, #64]	; (17bc <HAL_SAI_TxCpltCallback+0x11c>)
    177c:	2402      	movs	r4, #2
			diskBusy = 0;
    177e:	4910      	ldr	r1, [pc, #64]	; (17c0 <HAL_SAI_TxCpltCallback+0x120>)
			switchStrings = 2;
    1780:	6004      	str	r4, [r0, #0]
			diskBusy = 0;
    1782:	2000      	movs	r0, #0
    1784:	7008      	strb	r0, [r1, #0]
    1786:	e7b6      	b.n	16f6 <HAL_SAI_TxCpltCallback+0x56>
			currentActivePreset = voice;
    1788:	6819      	ldr	r1, [r3, #0]
			presetReady = 1;
    178a:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameVocal;
    178c:	4d0f      	ldr	r5, [pc, #60]	; (17cc <HAL_SAI_TxCpltCallback+0x12c>)
    178e:	e7e8      	b.n	1762 <HAL_SAI_TxCpltCallback+0xc2>
    1790:	20000f08 	.word	0x20000f08
    1794:	20013f80 	.word	0x20013f80
    1798:	200004b8 	.word	0x200004b8
    179c:	00008fe1 	.word	0x00008fe1
    17a0:	20019cf8 	.word	0x20019cf8
    17a4:	20019cf6 	.word	0x20019cf6
    17a8:	20005084 	.word	0x20005084
    17ac:	200054a8 	.word	0x200054a8
    17b0:	20004f48 	.word	0x20004f48
    17b4:	30000000 	.word	0x30000000
    17b8:	e000ed00 	.word	0xe000ed00
    17bc:	20013f74 	.word	0x20013f74
    17c0:	20014078 	.word	0x20014078
    17c4:	00000e41 	.word	0x00000e41
    17c8:	20000728 	.word	0x20000728
    17cc:	00009521 	.word	0x00009521
    17d0:	f3af 8000 	nop.w
    17d4:	f3af 8000 	nop.w
    17d8:	f3af 8000 	nop.w
    17dc:	f3af 8000 	nop.w

000017e0 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
    17e0:	b538      	push	{r3, r4, r5, lr}
	//if ((!diskBusy)&& (presetReady))
	{
		audioFrameFunction(0);
    17e2:	4c3b      	ldr	r4, [pc, #236]	; (18d0 <HAL_SAI_TxHalfCpltCallback+0xf0>)
    17e4:	2000      	movs	r0, #0
    17e6:	6823      	ldr	r3, [r4, #0]
    17e8:	4798      	blx	r3
		{
			audioOutBuffer[i] = 0;
		}
	}
	*/
	if (voice != prevVoice)
    17ea:	4b3a      	ldr	r3, [pc, #232]	; (18d4 <HAL_SAI_TxHalfCpltCallback+0xf4>)
    17ec:	4a3a      	ldr	r2, [pc, #232]	; (18d8 <HAL_SAI_TxHalfCpltCallback+0xf8>)
    17ee:	6818      	ldr	r0, [r3, #0]
    17f0:	6811      	ldr	r1, [r2, #0]
    17f2:	4288      	cmp	r0, r1
    17f4:	d01f      	beq.n	1836 <HAL_SAI_TxHalfCpltCallback+0x56>
	{
		if (voice == 63)
    17f6:	6819      	ldr	r1, [r3, #0]
    17f8:	293f      	cmp	r1, #63	; 0x3f
    17fa:	d049      	beq.n	1890 <HAL_SAI_TxHalfCpltCallback+0xb0>
		{
			switchStrings = 1;
			diskBusy = 0;
		}
		else if (voice == 62)
    17fc:	6819      	ldr	r1, [r3, #0]
    17fe:	293e      	cmp	r1, #62	; 0x3e
    1800:	d05b      	beq.n	18ba <HAL_SAI_TxHalfCpltCallback+0xda>
		{
			switchStrings = 2;
			diskBusy = 0;
		}
		else if (voice == 61)
    1802:	6819      	ldr	r1, [r3, #0]
    1804:	293d      	cmp	r1, #61	; 0x3d
		{
			audioFrameFunction = audioFrameAdditive;
			currentActivePreset = voice;
    1806:	6819      	ldr	r1, [r3, #0]
		else if (voice == 61)
    1808:	d049      	beq.n	189e <HAL_SAI_TxHalfCpltCallback+0xbe>
			diskBusy = 0;
			presetReady = 1;
			resetStringInputs = 1;
		}
		else if (voice == 60)
    180a:	293c      	cmp	r1, #60	; 0x3c
    180c:	d05c      	beq.n	18c8 <HAL_SAI_TxHalfCpltCallback+0xe8>
			presetReady = 1;
			resetStringInputs = 1;
		}
		else
		{
			audioFrameFunction = audioFrameSynth;
    180e:	4933      	ldr	r1, [pc, #204]	; (18dc <HAL_SAI_TxHalfCpltCallback+0xfc>)
			presetWaitingToLoad = 1;
    1810:	2001      	movs	r0, #1
    1812:	4d33      	ldr	r5, [pc, #204]	; (18e0 <HAL_SAI_TxHalfCpltCallback+0x100>)
			audioFrameFunction = audioFrameSynth;
    1814:	6021      	str	r1, [r4, #0]
			presetWaitingToLoad = 1;
    1816:	6028      	str	r0, [r5, #0]
			presetNumberToLoad = voice;
    1818:	6819      	ldr	r1, [r3, #0]
    181a:	4c32      	ldr	r4, [pc, #200]	; (18e4 <HAL_SAI_TxHalfCpltCallback+0x104>)
    181c:	b2c9      	uxtb	r1, r1
    181e:	7021      	strb	r1, [r4, #0]
			presetReady = 0;
    1820:	2400      	movs	r4, #0
    1822:	4931      	ldr	r1, [pc, #196]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x108>)
    1824:	600c      	str	r4, [r1, #0]
			if (prevVoice >= 60)
    1826:	6811      	ldr	r1, [r2, #0]
    1828:	293b      	cmp	r1, #59	; 0x3b
    182a:	dd01      	ble.n	1830 <HAL_SAI_TxHalfCpltCallback+0x50>
			{
				resetStringInputs = 1;
    182c:	492f      	ldr	r1, [pc, #188]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x10c>)
    182e:	7008      	strb	r0, [r1, #0]
			}
			frameLoadOverCount = 0;
    1830:	492f      	ldr	r1, [pc, #188]	; (18f0 <HAL_SAI_TxHalfCpltCallback+0x110>)
    1832:	2000      	movs	r0, #0
    1834:	6008      	str	r0, [r1, #0]
		}
	}
	prevVoice = voice;
    1836:	6819      	ldr	r1, [r3, #0]
	SCB_CleanDCache_by_Addr((uint32_t*)(((uint32_t)audioOutBuffer) & ~(uint32_t)0x1F), AUDIO_BUFFER_SIZE+32);
    1838:	4b2e      	ldr	r3, [pc, #184]	; (18f4 <HAL_SAI_TxHalfCpltCallback+0x114>)
	prevVoice = voice;
    183a:	6011      	str	r1, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    183c:	f3bf 8f4f 	dsb	sy
    1840:	4a2d      	ldr	r2, [pc, #180]	; (18f8 <HAL_SAI_TxHalfCpltCallback+0x118>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1842:	f103 0420 	add.w	r4, r3, #32
    1846:	f103 0140 	add.w	r1, r3, #64	; 0x40
    184a:	f103 0060 	add.w	r0, r3, #96	; 0x60
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    184e:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1852:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1856:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    185a:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    185e:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1862:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    1866:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    186a:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
    186e:	f103 01e0 	add.w	r1, r3, #224	; 0xe0
    1872:	f503 7380 	add.w	r3, r3, #256	; 0x100
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    1876:	f8c2 4268 	str.w	r4, [r2, #616]	; 0x268
    187a:	f8c2 0268 	str.w	r0, [r2, #616]	; 0x268
    187e:	f8c2 1268 	str.w	r1, [r2, #616]	; 0x268
    1882:	f8c2 3268 	str.w	r3, [r2, #616]	; 0x268
    1886:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    188a:	f3bf 8f6f 	isb	sy
}
    188e:	bd38      	pop	{r3, r4, r5, pc}
			switchStrings = 1;
    1890:	481a      	ldr	r0, [pc, #104]	; (18fc <HAL_SAI_TxHalfCpltCallback+0x11c>)
    1892:	2401      	movs	r4, #1
			diskBusy = 0;
    1894:	491a      	ldr	r1, [pc, #104]	; (1900 <HAL_SAI_TxHalfCpltCallback+0x120>)
			switchStrings = 1;
    1896:	6004      	str	r4, [r0, #0]
			diskBusy = 0;
    1898:	2000      	movs	r0, #0
    189a:	7008      	strb	r0, [r1, #0]
    189c:	e7cb      	b.n	1836 <HAL_SAI_TxHalfCpltCallback+0x56>
			presetReady = 1;
    189e:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameAdditive;
    18a0:	4d18      	ldr	r5, [pc, #96]	; (1904 <HAL_SAI_TxHalfCpltCallback+0x124>)
			audioFrameFunction = audioFrameVocal;
    18a2:	6025      	str	r5, [r4, #0]
			currentActivePreset = voice;
    18a4:	b2c9      	uxtb	r1, r1
    18a6:	4c18      	ldr	r4, [pc, #96]	; (1908 <HAL_SAI_TxHalfCpltCallback+0x128>)
    18a8:	7021      	strb	r1, [r4, #0]
			diskBusy = 0;
    18aa:	2400      	movs	r4, #0
    18ac:	4914      	ldr	r1, [pc, #80]	; (1900 <HAL_SAI_TxHalfCpltCallback+0x120>)
    18ae:	700c      	strb	r4, [r1, #0]
			presetReady = 1;
    18b0:	4c0d      	ldr	r4, [pc, #52]	; (18e8 <HAL_SAI_TxHalfCpltCallback+0x108>)
			resetStringInputs = 1;
    18b2:	490e      	ldr	r1, [pc, #56]	; (18ec <HAL_SAI_TxHalfCpltCallback+0x10c>)
			presetReady = 1;
    18b4:	6020      	str	r0, [r4, #0]
			resetStringInputs = 1;
    18b6:	7008      	strb	r0, [r1, #0]
    18b8:	e7bd      	b.n	1836 <HAL_SAI_TxHalfCpltCallback+0x56>
			switchStrings = 2;
    18ba:	4810      	ldr	r0, [pc, #64]	; (18fc <HAL_SAI_TxHalfCpltCallback+0x11c>)
    18bc:	2402      	movs	r4, #2
			diskBusy = 0;
    18be:	4910      	ldr	r1, [pc, #64]	; (1900 <HAL_SAI_TxHalfCpltCallback+0x120>)
			switchStrings = 2;
    18c0:	6004      	str	r4, [r0, #0]
			diskBusy = 0;
    18c2:	2000      	movs	r0, #0
    18c4:	7008      	strb	r0, [r1, #0]
    18c6:	e7b6      	b.n	1836 <HAL_SAI_TxHalfCpltCallback+0x56>
			currentActivePreset = voice;
    18c8:	6819      	ldr	r1, [r3, #0]
			presetReady = 1;
    18ca:	2001      	movs	r0, #1
			audioFrameFunction = audioFrameVocal;
    18cc:	4d0f      	ldr	r5, [pc, #60]	; (190c <HAL_SAI_TxHalfCpltCallback+0x12c>)
    18ce:	e7e8      	b.n	18a2 <HAL_SAI_TxHalfCpltCallback+0xc2>
    18d0:	20000f08 	.word	0x20000f08
    18d4:	20013f80 	.word	0x20013f80
    18d8:	200004b8 	.word	0x200004b8
    18dc:	00008fe1 	.word	0x00008fe1
    18e0:	20019cf8 	.word	0x20019cf8
    18e4:	20019cf6 	.word	0x20019cf6
    18e8:	20005084 	.word	0x20005084
    18ec:	200054a8 	.word	0x200054a8
    18f0:	20004f48 	.word	0x20004f48
    18f4:	30000000 	.word	0x30000000
    18f8:	e000ed00 	.word	0xe000ed00
    18fc:	20013f74 	.word	0x20013f74
    1900:	20014078 	.word	0x20014078
    1904:	00000e41 	.word	0x00000e41
    1908:	20000728 	.word	0x20000728
    190c:	00009521 	.word	0x00009521
    1910:	f3af 8000 	nop.w
    1914:	f3af 8000 	nop.w
    1918:	f3af 8000 	nop.w
    191c:	f3af 8000 	nop.w

00001920 <HAL_SAI_ErrorCallback>:

void __ATTR_ITCMRAM HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
    1920:	4770      	bx	lr
    1922:	bf00      	nop
	...

00001940 <scaleDefault>:
}
    1940:	4770      	bx	lr
    1942:	bf00      	nop
    1944:	f3af 8000 	nop.w
    1948:	f3af 8000 	nop.w
    194c:	f3af 8000 	nop.w
    1950:	f3af 8000 	nop.w
    1954:	f3af 8000 	nop.w
    1958:	f3af 8000 	nop.w
    195c:	f3af 8000 	nop.w

00001960 <scaleOscPitch>:
	return ((input * 2.0f) - 1.0f);
    1960:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    1964:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
}
    1968:	eee0 7a07 	vfma.f32	s15, s0, s14
    196c:	eeb0 0a67 	vmov.f32	s0, s15
    1970:	4770      	bx	lr
    1972:	bf00      	nop
    1974:	f3af 8000 	nop.w
    1978:	f3af 8000 	nop.w
    197c:	f3af 8000 	nop.w

00001980 <scaleOscFine>:
	return (input * 200.0f) - 100.0f;
    1980:	ed9f 7a04 	vldr	s14, [pc, #16]	; 1994 <scaleOscFine+0x14>
    1984:	eddf 7a04 	vldr	s15, [pc, #16]	; 1998 <scaleOscFine+0x18>
}
    1988:	eee0 7a07 	vfma.f32	s15, s0, s14
    198c:	eeb0 0a67 	vmov.f32	s0, s15
    1990:	4770      	bx	lr
    1992:	bf00      	nop
    1994:	43480000 	.word	0x43480000
    1998:	c2c80000 	.word	0xc2c80000
    199c:	f3af 8000 	nop.w

000019a0 <scaleOscFreq>:
	return (input * 4000.0f) - 2000.0f;
    19a0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19b4 <scaleOscFreq+0x14>
    19a4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19b8 <scaleOscFreq+0x18>
}
    19a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ac:	eeb0 0a67 	vmov.f32	s0, s15
    19b0:	4770      	bx	lr
    19b2:	bf00      	nop
    19b4:	457a0000 	.word	0x457a0000
    19b8:	c4fa0000 	.word	0xc4fa0000
    19bc:	f3af 8000 	nop.w

000019c0 <scaleFilterCutoff>:
	return (input * 127.0f);
    19c0:	eddf 7a02 	vldr	s15, [pc, #8]	; 19cc <scaleFilterCutoff+0xc>
}
    19c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	42fe0000 	.word	0x42fe0000
    19d0:	f3af 8000 	nop.w
    19d4:	f3af 8000 	nop.w
    19d8:	f3af 8000 	nop.w
    19dc:	f3af 8000 	nop.w

000019e0 <scaleFinalLowpass>:
	return ((input * 70.0f) + 58.0f);
    19e0:	ed9f 7a04 	vldr	s14, [pc, #16]	; 19f4 <scaleFinalLowpass+0x14>
    19e4:	eddf 7a04 	vldr	s15, [pc, #16]	; 19f8 <scaleFinalLowpass+0x18>
}
    19e8:	eee0 7a07 	vfma.f32	s15, s0, s14
    19ec:	eeb0 0a67 	vmov.f32	s0, s15
    19f0:	4770      	bx	lr
    19f2:	bf00      	nop
    19f4:	428c0000 	.word	0x428c0000
    19f8:	42680000 	.word	0x42680000
    19fc:	f3af 8000 	nop.w

00001a00 <blankFunction>:
}
    1a00:	4770      	bx	lr
    1a02:	bf00      	nop
    1a04:	f3af 8000 	nop.w
    1a08:	f3af 8000 	nop.w
    1a0c:	f3af 8000 	nop.w
    1a10:	f3af 8000 	nop.w
    1a14:	f3af 8000 	nop.w
    1a18:	f3af 8000 	nop.w
    1a1c:	f3af 8000 	nop.w

00001a20 <scaleTranspose>:
{
    1a20:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
    1a24:	ed9f 0a07 	vldr	s0, [pc, #28]	; 1a44 <scaleTranspose+0x24>
    1a28:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a2c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
    1a2e:	f007 feaf 	bl	9790 <__LEAF_clip_veneer>
	return (input * 96.0f) - 48.0f;
    1a32:	ed9f 7a05 	vldr	s14, [pc, #20]	; 1a48 <scaleTranspose+0x28>
    1a36:	eddf 7a05 	vldr	s15, [pc, #20]	; 1a4c <scaleTranspose+0x2c>
}
    1a3a:	eee0 7a07 	vfma.f32	s15, s0, s14
    1a3e:	eeb0 0a67 	vmov.f32	s0, s15
    1a42:	bd08      	pop	{r3, pc}
    1a44:	00000000 	.word	0x00000000
    1a48:	42c00000 	.word	0x42c00000
    1a4c:	c2400000 	.word	0xc2400000
    1a50:	f3af 8000 	nop.w
    1a54:	f3af 8000 	nop.w
    1a58:	f3af 8000 	nop.w
    1a5c:	f3af 8000 	nop.w

00001a60 <scalePitchBend>:
{
    1a60:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
    1a64:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1a7c <scalePitchBend+0x1c>
    1a68:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
    1a6c:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
    1a6e:	f007 fe8f 	bl	9790 <__LEAF_clip_veneer>
	return (input * 48.0f);
    1a72:	eddf 7a03 	vldr	s15, [pc, #12]	; 1a80 <scalePitchBend+0x20>
}
    1a76:	ee20 0a27 	vmul.f32	s0, s0, s15
    1a7a:	bd08      	pop	{r3, pc}
    1a7c:	00000000 	.word	0x00000000
    1a80:	42400000 	.word	0x42400000
    1a84:	f3af 8000 	nop.w
    1a88:	f3af 8000 	nop.w
    1a8c:	f3af 8000 	nop.w
    1a90:	f3af 8000 	nop.w
    1a94:	f3af 8000 	nop.w
    1a98:	f3af 8000 	nop.w
    1a9c:	f3af 8000 	nop.w

00001aa0 <scaleFilterResonance>:
{
    1aa0:	b510      	push	{r4, lr}
    1aa2:	ed2d 8b02 	vpush	{d8}
    1aa6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1aaa:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 1b18 <scaleFilterResonance+0x78>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1aae:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 1b1c <scaleFilterResonance+0x7c>
	input *= 2047.0f;
    1ab2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1ab6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1aba:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1abe:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ac2:	1c63      	adds	r3, r4, #1
    1ac4:	ee00 3a90 	vmov	s1, r3
    1ac8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1acc:	f007 fe60 	bl	9790 <__LEAF_clip_veneer>
    1ad0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ad4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    1ad8:	4b11      	ldr	r3, [pc, #68]	; (1b20 <scaleFilterResonance+0x80>)
	float inputFloat = (float)inputInt - input;
    1ada:	ee78 0ac8 	vsub.f32	s1, s17, s16
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ade:	ed9f 0a11 	vldr	s0, [pc, #68]	; 1b24 <scaleFilterResonance+0x84>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1ae2:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1ae6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1aea:	ee38 8a27 	vadd.f32	s16, s16, s15
    1aee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1af2:	edd4 7a00 	vldr	s15, [r4]
    1af6:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
    1afa:	ed93 7a00 	vldr	s14, [r3]
    1afe:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b02:	ee60 0a87 	vmul.f32	s1, s1, s14
    1b06:	eee7 0a88 	vfma.f32	s1, s15, s16
}
    1b0a:	ecbd 8b02 	vpop	{d8}
    1b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
    1b12:	f007 be3d 	b.w	9790 <__LEAF_clip_veneer>
    1b16:	bf00      	nop
    1b18:	44ffe000 	.word	0x44ffe000
    1b1c:	00000000 	.word	0x00000000
    1b20:	2001a114 	.word	0x2001a114
    1b24:	3dcccccd 	.word	0x3dcccccd
    1b28:	f3af 8000 	nop.w
    1b2c:	f3af 8000 	nop.w
    1b30:	f3af 8000 	nop.w
    1b34:	f3af 8000 	nop.w
    1b38:	f3af 8000 	nop.w
    1b3c:	f3af 8000 	nop.w

00001b40 <scaleEnvTimes>:
{
    1b40:	b510      	push	{r4, lr}
    1b42:	ed2d 8b02 	vpush	{d8}
    1b46:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1b4a:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1ba8 <scaleEnvTimes+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b4e:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1bac <scaleEnvTimes+0x6c>
	input *= 2047.0f;
    1b52:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1b56:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1b5a:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1b5e:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1b62:	1c63      	adds	r3, r4, #1
    1b64:	ee00 3a90 	vmov	s1, r3
    1b68:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1b6c:	f007 fe10 	bl	9790 <__LEAF_clip_veneer>
    1b70:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1b78:	4b0d      	ldr	r3, [pc, #52]	; (1bb0 <scaleEnvTimes+0x70>)
	float inputFloat = (float)inputInt - input;
    1b7a:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
    1b7e:	ee10 2a10 	vmov	r2, s0
    1b82:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1b86:	ee38 8a07 	vadd.f32	s16, s16, s14
    1b8a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1b8e:	ed94 7a00 	vldr	s14, [r4]
    1b92:	edd3 6a00 	vldr	s13, [r3]
    1b96:	ee38 8a68 	vsub.f32	s16, s16, s17
    1b9a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1b9e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1ba2:	ecbd 8b02 	vpop	{d8}
    1ba6:	bd10      	pop	{r4, pc}
    1ba8:	44ffe000 	.word	0x44ffe000
    1bac:	00000000 	.word	0x00000000
    1bb0:	200140d0 	.word	0x200140d0
    1bb4:	f3af 8000 	nop.w
    1bb8:	f3af 8000 	nop.w
    1bbc:	f3af 8000 	nop.w

00001bc0 <scaleLFORates>:
{
    1bc0:	b510      	push	{r4, lr}
    1bc2:	ed2d 8b02 	vpush	{d8}
    1bc6:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
    1bca:	ed9f 1a17 	vldr	s2, [pc, #92]	; 1c28 <scaleLFORates+0x68>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1bce:	ed9f 0a17 	vldr	s0, [pc, #92]	; 1c2c <scaleLFORates+0x6c>
	input *= 2047.0f;
    1bd2:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
    1bd6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
    1bda:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
    1bde:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
    1be2:	1c63      	adds	r3, r4, #1
    1be4:	ee00 3a90 	vmov	s1, r3
    1be8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
    1bec:	f007 fdd0 	bl	9790 <__LEAF_clip_veneer>
    1bf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1bf4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    1bf8:	4b0d      	ldr	r3, [pc, #52]	; (1c30 <scaleLFORates+0x70>)
	float inputFloat = (float)inputInt - input;
    1bfa:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
    1bfe:	ee10 2a10 	vmov	r2, s0
    1c02:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    1c06:	ee38 8a07 	vadd.f32	s16, s16, s14
    1c0a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1c0e:	ed94 7a00 	vldr	s14, [r4]
    1c12:	edd3 6a00 	vldr	s13, [r3]
    1c16:	ee38 8a68 	vsub.f32	s16, s16, s17
    1c1a:	ee27 0aa6 	vmul.f32	s0, s15, s13
}
    1c1e:	eea7 0a08 	vfma.f32	s0, s14, s16
    1c22:	ecbd 8b02 	vpop	{d8}
    1c26:	bd10      	pop	{r4, pc}
    1c28:	44ffe000 	.word	0x44ffe000
    1c2c:	00000000 	.word	0x00000000
    1c30:	200161fc 	.word	0x200161fc
    1c34:	f3af 8000 	nop.w
    1c38:	f3af 8000 	nop.w
    1c3c:	f3af 8000 	nop.w

00001c40 <randomNumber>:
float __ATTR_ITCMRAM randomNumber(void) {
    1c40:	b500      	push	{lr}
    1c42:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
    1c44:	4807      	ldr	r0, [pc, #28]	; (1c64 <randomNumber+0x24>)
    1c46:	a901      	add	r1, sp, #4
    1c48:	f007 ff5a 	bl	9b00 <__HAL_RNG_GenerateRandomNumber_veneer>
	float num = (float)rand * INV_TWO_TO_32;
    1c4c:	eddd 7a01 	vldr	s15, [sp, #4]
    1c50:	ed9f 0a05 	vldr	s0, [pc, #20]	; 1c68 <randomNumber+0x28>
    1c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
    1c58:	ee27 0a80 	vmul.f32	s0, s15, s0
    1c5c:	b003      	add	sp, #12
    1c5e:	f85d fb04 	ldr.w	pc, [sp], #4
    1c62:	bf00      	nop
    1c64:	2001c1b4 	.word	0x2001c1b4
    1c68:	2f80000d 	.word	0x2f80000d
    1c6c:	f3af 8000 	nop.w
    1c70:	f3af 8000 	nop.w
    1c74:	f3af 8000 	nop.w
    1c78:	f3af 8000 	nop.w
    1c7c:	f3af 8000 	nop.w

00001c80 <scaleTwo>:
}
    1c80:	ee30 0a00 	vadd.f32	s0, s0, s0
    1c84:	4770      	bx	lr
    1c86:	bf00      	nop
    1c88:	f3af 8000 	nop.w
    1c8c:	f3af 8000 	nop.w
    1c90:	f3af 8000 	nop.w
    1c94:	f3af 8000 	nop.w
    1c98:	f3af 8000 	nop.w
    1c9c:	f3af 8000 	nop.w

00001ca0 <parsePreset>:
{
    1ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ca4:	ed2d 8b02 	vpush	{d8}
    1ca8:	b08f      	sub	sp, #60	; 0x3c
    1caa:	e9cd 0101 	strd	r0, r1, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
    1cae:	b672      	cpsid	i
	 presetReady = 0;
    1cb0:	2500      	movs	r5, #0
    1cb2:	4bf2      	ldr	r3, [pc, #968]	; (207c <parsePreset+0x3dc>)
	if (buffer[bufferIndex] == 17)
    1cb4:	f8df a3dc 	ldr.w	sl, [pc, #988]	; 2094 <parsePreset+0x3f4>
		 audioOutBuffer[i] = 0;
    1cb8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1cbc:	4629      	mov	r1, r5
    1cbe:	48f0      	ldr	r0, [pc, #960]	; (2080 <parsePreset+0x3e0>)
	 presetReady = 0;
    1cc0:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
    1cc2:	f007 fdf5 	bl	98b0 <__memset_veneer>
	if (buffer[bufferIndex] == 17)
    1cc6:	f89a 4000 	ldrb.w	r4, [sl]
	audioMasterLevel = 0.0f;
    1cca:	2300      	movs	r3, #0
    1ccc:	4aed      	ldr	r2, [pc, #948]	; (2084 <parsePreset+0x3e4>)
	if (buffer[bufferIndex] == 17)
    1cce:	2c11      	cmp	r4, #17
	audioMasterLevel = 0.0f;
    1cd0:	6013      	str	r3, [r2, #0]
	if (buffer[bufferIndex] == 17)
    1cd2:	f000 8449 	beq.w	2568 <parsePreset+0x8c8>
	uint16_t bufferIndex = 0;
    1cd6:	462b      	mov	r3, r5
	uint16_t presetVersionNumber = 0;
    1cd8:	9506      	str	r5, [sp, #24]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1cda:	9a02      	ldr	r2, [sp, #8]
    1cdc:	ebc2 00c2 	rsb	r0, r2, r2, lsl #3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1ce0:	1c5a      	adds	r2, r3, #1
    1ce2:	f81a 9002 	ldrb.w	r9, [sl, r2]
    1ce6:	1c9a      	adds	r2, r3, #2
    1ce8:	f81a 8002 	ldrb.w	r8, [sl, r2]
    1cec:	1cda      	adds	r2, r3, #3
    1cee:	f81a e002 	ldrb.w	lr, [sl, r2]
    1cf2:	1d1a      	adds	r2, r3, #4
    1cf4:	f81a 1002 	ldrb.w	r1, [sl, r2]
    1cf8:	1d5a      	adds	r2, r3, #5
    1cfa:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1cfe:	1d9a      	adds	r2, r3, #6
    1d00:	9103      	str	r1, [sp, #12]
    1d02:	f81a c002 	ldrb.w	ip, [sl, r2]
    1d06:	1dda      	adds	r2, r3, #7
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d08:	49df      	ldr	r1, [pc, #892]	; (2088 <parsePreset+0x3e8>)
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d0a:	f81a b002 	ldrb.w	fp, [sl, r2]
    1d0e:	f103 0208 	add.w	r2, r3, #8
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d12:	460e      	mov	r6, r1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d14:	9504      	str	r5, [sp, #16]
    1d16:	f81a 7002 	ldrb.w	r7, [sl, r2]
    1d1a:	f103 0209 	add.w	r2, r3, #9
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d1e:	eb01 0140 	add.w	r1, r1, r0, lsl #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d22:	f81a 2002 	ldrb.w	r2, [sl, r2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d26:	0040      	lsls	r0, r0, #1
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d28:	9205      	str	r2, [sp, #20]
    1d2a:	f103 020a 	add.w	r2, r3, #10
    1d2e:	f81a 5002 	ldrb.w	r5, [sl, r2]
		presetName[i] = buffer[bufferIndex];
    1d32:	4ad6      	ldr	r2, [pc, #856]	; (208c <parsePreset+0x3ec>)
    1d34:	7014      	strb	r4, [r2, #0]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d36:	5434      	strb	r4, [r6, r0]
		presetName[i] = buffer[bufferIndex];
    1d38:	9c03      	ldr	r4, [sp, #12]
    1d3a:	f882 9001 	strb.w	r9, [r2, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d3e:	f881 9001 	strb.w	r9, [r1, #1]
		presetName[i] = buffer[bufferIndex];
    1d42:	f882 8002 	strb.w	r8, [r2, #2]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d46:	f881 8002 	strb.w	r8, [r1, #2]
		presetName[i] = buffer[bufferIndex];
    1d4a:	f882 e003 	strb.w	lr, [r2, #3]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d4e:	f881 e003 	strb.w	lr, [r1, #3]
		presetName[i] = buffer[bufferIndex];
    1d52:	7114      	strb	r4, [r2, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d54:	710c      	strb	r4, [r1, #4]
		presetName[i] = buffer[bufferIndex];
    1d56:	9c04      	ldr	r4, [sp, #16]
    1d58:	7154      	strb	r4, [r2, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d5a:	714c      	strb	r4, [r1, #5]
		presetName[i] = buffer[bufferIndex];
    1d5c:	f882 c006 	strb.w	ip, [r2, #6]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d60:	f881 c006 	strb.w	ip, [r1, #6]
		presetName[i] = buffer[bufferIndex];
    1d64:	f882 b007 	strb.w	fp, [r2, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d68:	f881 b007 	strb.w	fp, [r1, #7]
		presetName[i] = buffer[bufferIndex];
    1d6c:	7217      	strb	r7, [r2, #8]
    1d6e:	9805      	ldr	r0, [sp, #20]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d70:	720f      	strb	r7, [r1, #8]
		presetName[i] = buffer[bufferIndex];
    1d72:	7250      	strb	r0, [r2, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d74:	7248      	strb	r0, [r1, #9]
		presetName[i] = buffer[bufferIndex];
    1d76:	7295      	strb	r5, [r2, #10]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d78:	728d      	strb	r5, [r1, #10]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d7a:	f103 050b 	add.w	r5, r3, #11
    1d7e:	9802      	ldr	r0, [sp, #8]
    1d80:	f81a 5005 	ldrb.w	r5, [sl, r5]
    1d84:	4cc2      	ldr	r4, [pc, #776]	; (2090 <parsePreset+0x3f0>)
    1d86:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
    1d8a:	72d5      	strb	r5, [r2, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d8c:	72cd      	strb	r5, [r1, #11]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d8e:	f103 050c 	add.w	r5, r3, #12
    1d92:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    1d96:	7315      	strb	r5, [r2, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1d98:	730d      	strb	r5, [r1, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1d9a:	f103 050d 	add.w	r5, r3, #13
    1d9e:	f81a 5005 	ldrb.w	r5, [sl, r5]
		presetName[i] = buffer[bufferIndex];
    1da2:	7355      	strb	r5, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1da4:	f103 020e 	add.w	r2, r3, #14
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
    1da8:	734d      	strb	r5, [r1, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1daa:	f81a 2002 	ldrb.w	r2, [sl, r2]
    1dae:	4611      	mov	r1, r2
    1db0:	f103 020f 	add.w	r2, r3, #15
    1db4:	f81a 9002 	ldrb.w	r9, [sl, r2]
    1db8:	f103 0210 	add.w	r2, r3, #16
    1dbc:	f81a 8002 	ldrb.w	r8, [sl, r2]
    1dc0:	f103 0211 	add.w	r2, r3, #17
    1dc4:	f81a b002 	ldrb.w	fp, [sl, r2]
    1dc8:	f103 0212 	add.w	r2, r3, #18
    1dcc:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1dd0:	f103 0213 	add.w	r2, r3, #19
    1dd4:	f81a 6002 	ldrb.w	r6, [sl, r2]
    1dd8:	f103 0214 	add.w	r2, r3, #20
    1ddc:	9505      	str	r5, [sp, #20]
    1dde:	f81a e002 	ldrb.w	lr, [sl, r2]
    1de2:	f103 0215 	add.w	r2, r3, #21
    1de6:	9604      	str	r6, [sp, #16]
    1de8:	f81a c002 	ldrb.w	ip, [sl, r2]
    1dec:	f103 0216 	add.w	r2, r3, #22
    1df0:	f81a 7002 	ldrb.w	r7, [sl, r2]
    1df4:	f103 0217 	add.w	r2, r3, #23
    1df8:	f81a 6002 	ldrb.w	r6, [sl, r2]
    1dfc:	f103 0218 	add.w	r2, r3, #24
    1e00:	f81a 5002 	ldrb.w	r5, [sl, r2]
    1e04:	f103 0219 	add.w	r2, r3, #25
    1e08:	f81a 2002 	ldrb.w	r2, [sl, r2]
    1e0c:	9203      	str	r2, [sp, #12]
    1e0e:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    1e12:	00c0      	lsls	r0, r0, #3
    1e14:	5421      	strb	r1, [r4, r0]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    1e16:	f103 007e 	add.w	r0, r3, #126	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
    1e1a:	f882 9001 	strb.w	r9, [r2, #1]
    1e1e:	9905      	ldr	r1, [sp, #20]
    1e20:	f882 8002 	strb.w	r8, [r2, #2]
    1e24:	f882 b003 	strb.w	fp, [r2, #3]
    1e28:	7111      	strb	r1, [r2, #4]
    1e2a:	9904      	ldr	r1, [sp, #16]
    1e2c:	7151      	strb	r1, [r2, #5]
    1e2e:	9903      	ldr	r1, [sp, #12]
    1e30:	f882 e006 	strb.w	lr, [r2, #6]
    1e34:	f882 c007 	strb.w	ip, [r2, #7]
    1e38:	7217      	strb	r7, [r2, #8]
    1e3a:	7296      	strb	r6, [r2, #10]
    1e3c:	72d5      	strb	r5, [r2, #11]
    1e3e:	7311      	strb	r1, [r2, #12]
    1e40:	f103 011a 	add.w	r1, r3, #26
    1e44:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e48:	7351      	strb	r1, [r2, #13]
    1e4a:	f103 011b 	add.w	r1, r3, #27
    1e4e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e52:	7391      	strb	r1, [r2, #14]
    1e54:	f103 011c 	add.w	r1, r3, #28
    1e58:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e5c:	73d1      	strb	r1, [r2, #15]
    1e5e:	f103 011d 	add.w	r1, r3, #29
    1e62:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e66:	7411      	strb	r1, [r2, #16]
    1e68:	f103 011e 	add.w	r1, r3, #30
    1e6c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e70:	7451      	strb	r1, [r2, #17]
    1e72:	f103 011f 	add.w	r1, r3, #31
    1e76:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e7a:	7491      	strb	r1, [r2, #18]
    1e7c:	f103 0120 	add.w	r1, r3, #32
    1e80:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e84:	7511      	strb	r1, [r2, #20]
    1e86:	f103 0121 	add.w	r1, r3, #33	; 0x21
    1e8a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e8e:	7551      	strb	r1, [r2, #21]
    1e90:	f103 0122 	add.w	r1, r3, #34	; 0x22
    1e94:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1e98:	7591      	strb	r1, [r2, #22]
    1e9a:	f103 0123 	add.w	r1, r3, #35	; 0x23
    1e9e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ea2:	75d1      	strb	r1, [r2, #23]
    1ea4:	f103 0124 	add.w	r1, r3, #36	; 0x24
    1ea8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eac:	7611      	strb	r1, [r2, #24]
    1eae:	f103 0125 	add.w	r1, r3, #37	; 0x25
    1eb2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eb6:	7651      	strb	r1, [r2, #25]
    1eb8:	f103 0126 	add.w	r1, r3, #38	; 0x26
    1ebc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ec0:	7691      	strb	r1, [r2, #26]
    1ec2:	f103 0127 	add.w	r1, r3, #39	; 0x27
    1ec6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1eca:	76d1      	strb	r1, [r2, #27]
    1ecc:	f103 0128 	add.w	r1, r3, #40	; 0x28
    1ed0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ed4:	7711      	strb	r1, [r2, #28]
    1ed6:	f103 0129 	add.w	r1, r3, #41	; 0x29
    1eda:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ede:	7791      	strb	r1, [r2, #30]
    1ee0:	f103 012a 	add.w	r1, r3, #42	; 0x2a
    1ee4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ee8:	77d1      	strb	r1, [r2, #31]
    1eea:	f103 012b 	add.w	r1, r3, #43	; 0x2b
    1eee:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ef2:	f882 1020 	strb.w	r1, [r2, #32]
    1ef6:	f103 012c 	add.w	r1, r3, #44	; 0x2c
    1efa:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1efe:	f882 1021 	strb.w	r1, [r2, #33]	; 0x21
    1f02:	f103 012d 	add.w	r1, r3, #45	; 0x2d
    1f06:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f0a:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    1f0e:	f103 012e 	add.w	r1, r3, #46	; 0x2e
    1f12:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f16:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    1f1a:	f103 012f 	add.w	r1, r3, #47	; 0x2f
    1f1e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f22:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    1f26:	f103 0130 	add.w	r1, r3, #48	; 0x30
    1f2a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f2e:	f882 1025 	strb.w	r1, [r2, #37]	; 0x25
    1f32:	f103 0131 	add.w	r1, r3, #49	; 0x31
    1f36:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f3a:	f882 1026 	strb.w	r1, [r2, #38]	; 0x26
    1f3e:	f103 0132 	add.w	r1, r3, #50	; 0x32
    1f42:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f46:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    1f4a:	f103 0133 	add.w	r1, r3, #51	; 0x33
    1f4e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f52:	f882 1029 	strb.w	r1, [r2, #41]	; 0x29
    1f56:	f103 0134 	add.w	r1, r3, #52	; 0x34
    1f5a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f5e:	f882 102a 	strb.w	r1, [r2, #42]	; 0x2a
    1f62:	f103 0135 	add.w	r1, r3, #53	; 0x35
    1f66:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f6a:	f882 102b 	strb.w	r1, [r2, #43]	; 0x2b
    1f6e:	f103 0136 	add.w	r1, r3, #54	; 0x36
    1f72:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f76:	f882 102c 	strb.w	r1, [r2, #44]	; 0x2c
    1f7a:	f103 0137 	add.w	r1, r3, #55	; 0x37
    1f7e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f82:	f882 102d 	strb.w	r1, [r2, #45]	; 0x2d
    1f86:	f103 0138 	add.w	r1, r3, #56	; 0x38
    1f8a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f8e:	f882 102e 	strb.w	r1, [r2, #46]	; 0x2e
    1f92:	f103 0139 	add.w	r1, r3, #57	; 0x39
    1f96:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1f9a:	f882 102f 	strb.w	r1, [r2, #47]	; 0x2f
    1f9e:	f103 013a 	add.w	r1, r3, #58	; 0x3a
    1fa2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fa6:	f882 1030 	strb.w	r1, [r2, #48]	; 0x30
    1faa:	f103 013b 	add.w	r1, r3, #59	; 0x3b
    1fae:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fb2:	f882 1032 	strb.w	r1, [r2, #50]	; 0x32
    1fb6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
    1fba:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fbe:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33
    1fc2:	f103 013d 	add.w	r1, r3, #61	; 0x3d
    1fc6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fca:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
    1fce:	f103 013e 	add.w	r1, r3, #62	; 0x3e
    1fd2:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fd6:	f882 1035 	strb.w	r1, [r2, #53]	; 0x35
    1fda:	f103 013f 	add.w	r1, r3, #63	; 0x3f
    1fde:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fe2:	f882 1036 	strb.w	r1, [r2, #54]	; 0x36
    1fe6:	f103 0140 	add.w	r1, r3, #64	; 0x40
    1fea:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1fee:	f882 1037 	strb.w	r1, [r2, #55]	; 0x37
    1ff2:	f103 0141 	add.w	r1, r3, #65	; 0x41
    1ff6:	f81a 1001 	ldrb.w	r1, [sl, r1]
    1ffa:	f882 1038 	strb.w	r1, [r2, #56]	; 0x38
    1ffe:	f103 0142 	add.w	r1, r3, #66	; 0x42
    2002:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2006:	f882 1039 	strb.w	r1, [r2, #57]	; 0x39
    200a:	f103 0143 	add.w	r1, r3, #67	; 0x43
    200e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2012:	f882 103a 	strb.w	r1, [r2, #58]	; 0x3a
    2016:	f103 0144 	add.w	r1, r3, #68	; 0x44
    201a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    201e:	f8df a074 	ldr.w	sl, [pc, #116]	; 2094 <parsePreset+0x3f4>
    2022:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
    2026:	f103 0145 	add.w	r1, r3, #69	; 0x45
    202a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    202e:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    2032:	f103 0146 	add.w	r1, r3, #70	; 0x46
    2036:	f81a 1001 	ldrb.w	r1, [sl, r1]
    203a:	f882 103e 	strb.w	r1, [r2, #62]	; 0x3e
    203e:	f103 0147 	add.w	r1, r3, #71	; 0x47
    2042:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2046:	f882 103f 	strb.w	r1, [r2, #63]	; 0x3f
    204a:	f103 0148 	add.w	r1, r3, #72	; 0x48
    204e:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2052:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
    2056:	f103 0149 	add.w	r1, r3, #73	; 0x49
    205a:	f81a 1001 	ldrb.w	r1, [sl, r1]
    205e:	f882 1041 	strb.w	r1, [r2, #65]	; 0x41
    2062:	f103 014a 	add.w	r1, r3, #74	; 0x4a
    2066:	f81a 1001 	ldrb.w	r1, [sl, r1]
    206a:	f882 1042 	strb.w	r1, [r2, #66]	; 0x42
    206e:	f103 014b 	add.w	r1, r3, #75	; 0x4b
    2072:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2076:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
    207a:	e00d      	b.n	2098 <parsePreset+0x3f8>
    207c:	20005084 	.word	0x20005084
    2080:	30000000 	.word	0x30000000
    2084:	20000724 	.word	0x20000724
    2088:	30042000 	.word	0x30042000
    208c:	20019ce8 	.word	0x20019ce8
    2090:	30043380 	.word	0x30043380
    2094:	30042380 	.word	0x30042380
    2098:	f103 014c 	add.w	r1, r3, #76	; 0x4c
    209c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20a0:	f882 1044 	strb.w	r1, [r2, #68]	; 0x44
    20a4:	f103 014d 	add.w	r1, r3, #77	; 0x4d
    20a8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20ac:	f882 1046 	strb.w	r1, [r2, #70]	; 0x46
    20b0:	f103 014e 	add.w	r1, r3, #78	; 0x4e
    20b4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20b8:	f882 1047 	strb.w	r1, [r2, #71]	; 0x47
    20bc:	f103 014f 	add.w	r1, r3, #79	; 0x4f
    20c0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20c4:	f882 1048 	strb.w	r1, [r2, #72]	; 0x48
    20c8:	f103 0150 	add.w	r1, r3, #80	; 0x50
    20cc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20d0:	f882 1049 	strb.w	r1, [r2, #73]	; 0x49
    20d4:	f103 0151 	add.w	r1, r3, #81	; 0x51
    20d8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20dc:	f882 104a 	strb.w	r1, [r2, #74]	; 0x4a
    20e0:	f103 0152 	add.w	r1, r3, #82	; 0x52
    20e4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20e8:	f882 104b 	strb.w	r1, [r2, #75]	; 0x4b
    20ec:	f103 0153 	add.w	r1, r3, #83	; 0x53
    20f0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    20f4:	f882 104c 	strb.w	r1, [r2, #76]	; 0x4c
    20f8:	f103 0154 	add.w	r1, r3, #84	; 0x54
    20fc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2100:	f882 104d 	strb.w	r1, [r2, #77]	; 0x4d
    2104:	f103 0155 	add.w	r1, r3, #85	; 0x55
    2108:	f81a 1001 	ldrb.w	r1, [sl, r1]
    210c:	f882 104e 	strb.w	r1, [r2, #78]	; 0x4e
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2110:	f103 0156 	add.w	r1, r3, #86	; 0x56
    2114:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2118:	f882 1050 	strb.w	r1, [r2, #80]	; 0x50
    211c:	f103 0157 	add.w	r1, r3, #87	; 0x57
    2120:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2124:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
    2128:	f103 0158 	add.w	r1, r3, #88	; 0x58
    212c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2130:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
    2134:	f103 0159 	add.w	r1, r3, #89	; 0x59
    2138:	f81a 1001 	ldrb.w	r1, [sl, r1]
    213c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
    2140:	f103 015a 	add.w	r1, r3, #90	; 0x5a
    2144:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2148:	f882 1054 	strb.w	r1, [r2, #84]	; 0x54
    214c:	f103 015b 	add.w	r1, r3, #91	; 0x5b
    2150:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2154:	f882 1055 	strb.w	r1, [r2, #85]	; 0x55
    2158:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    215c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2160:	f882 1056 	strb.w	r1, [r2, #86]	; 0x56
    2164:	f103 015d 	add.w	r1, r3, #93	; 0x5d
    2168:	f81a 1001 	ldrb.w	r1, [sl, r1]
    216c:	f882 1057 	strb.w	r1, [r2, #87]	; 0x57
    2170:	f103 015e 	add.w	r1, r3, #94	; 0x5e
    2174:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2178:	f882 1058 	strb.w	r1, [r2, #88]	; 0x58
    217c:	f103 015f 	add.w	r1, r3, #95	; 0x5f
    2180:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2184:	f882 1059 	strb.w	r1, [r2, #89]	; 0x59
    2188:	f103 0160 	add.w	r1, r3, #96	; 0x60
    218c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2190:	f882 105a 	strb.w	r1, [r2, #90]	; 0x5a
    2194:	f103 0161 	add.w	r1, r3, #97	; 0x61
    2198:	f81a 1001 	ldrb.w	r1, [sl, r1]
    219c:	f882 105b 	strb.w	r1, [r2, #91]	; 0x5b
    21a0:	f103 0162 	add.w	r1, r3, #98	; 0x62
    21a4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21a8:	f882 105c 	strb.w	r1, [r2, #92]	; 0x5c
    21ac:	f103 0163 	add.w	r1, r3, #99	; 0x63
    21b0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21b4:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    21b8:	f103 0164 	add.w	r1, r3, #100	; 0x64
    21bc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21c0:	f882 105e 	strb.w	r1, [r2, #94]	; 0x5e
    21c4:	f103 0165 	add.w	r1, r3, #101	; 0x65
    21c8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21cc:	f882 105f 	strb.w	r1, [r2, #95]	; 0x5f
    21d0:	f103 0166 	add.w	r1, r3, #102	; 0x66
    21d4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21d8:	f882 1060 	strb.w	r1, [r2, #96]	; 0x60
    21dc:	f103 0167 	add.w	r1, r3, #103	; 0x67
    21e0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21e4:	f882 1061 	strb.w	r1, [r2, #97]	; 0x61
    21e8:	f103 0168 	add.w	r1, r3, #104	; 0x68
    21ec:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21f0:	f882 1062 	strb.w	r1, [r2, #98]	; 0x62
    21f4:	f103 0169 	add.w	r1, r3, #105	; 0x69
    21f8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    21fc:	f882 1063 	strb.w	r1, [r2, #99]	; 0x63
    2200:	f103 016a 	add.w	r1, r3, #106	; 0x6a
    2204:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2208:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
    220c:	f103 016b 	add.w	r1, r3, #107	; 0x6b
    2210:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2214:	f882 1065 	strb.w	r1, [r2, #101]	; 0x65
    2218:	f103 016c 	add.w	r1, r3, #108	; 0x6c
    221c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2220:	f882 1066 	strb.w	r1, [r2, #102]	; 0x66
    2224:	f103 016d 	add.w	r1, r3, #109	; 0x6d
    2228:	f81a 1001 	ldrb.w	r1, [sl, r1]
    222c:	f882 1067 	strb.w	r1, [r2, #103]	; 0x67
    2230:	f103 016e 	add.w	r1, r3, #110	; 0x6e
    2234:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2238:	f882 1068 	strb.w	r1, [r2, #104]	; 0x68
    223c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    2240:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2244:	f882 1069 	strb.w	r1, [r2, #105]	; 0x69
    2248:	f103 0170 	add.w	r1, r3, #112	; 0x70
    224c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2250:	f882 106a 	strb.w	r1, [r2, #106]	; 0x6a
    2254:	f103 0171 	add.w	r1, r3, #113	; 0x71
    2258:	f81a 1001 	ldrb.w	r1, [sl, r1]
    225c:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    2260:	f103 0172 	add.w	r1, r3, #114	; 0x72
    2264:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2268:	f882 106c 	strb.w	r1, [r2, #108]	; 0x6c
    226c:	f103 0173 	add.w	r1, r3, #115	; 0x73
    2270:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2274:	f882 106d 	strb.w	r1, [r2, #109]	; 0x6d
    2278:	f103 0174 	add.w	r1, r3, #116	; 0x74
    227c:	f81a 1001 	ldrb.w	r1, [sl, r1]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    2280:	f81a 4000 	ldrb.w	r4, [sl, r0]
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    2284:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    2288:	f103 0175 	add.w	r1, r3, #117	; 0x75
    228c:	f81a 1001 	ldrb.w	r1, [sl, r1]
    2290:	f882 106f 	strb.w	r1, [r2, #111]	; 0x6f
    2294:	f103 0176 	add.w	r1, r3, #118	; 0x76
    2298:	f81a 1001 	ldrb.w	r1, [sl, r1]
    229c:	f882 1070 	strb.w	r1, [r2, #112]	; 0x70
    22a0:	f103 0177 	add.w	r1, r3, #119	; 0x77
    22a4:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22a8:	f882 1071 	strb.w	r1, [r2, #113]	; 0x71
    22ac:	f103 0178 	add.w	r1, r3, #120	; 0x78
    22b0:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22b4:	f882 1072 	strb.w	r1, [r2, #114]	; 0x72
    22b8:	f103 0179 	add.w	r1, r3, #121	; 0x79
    22bc:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22c0:	f882 1073 	strb.w	r1, [r2, #115]	; 0x73
    22c4:	f103 017a 	add.w	r1, r3, #122	; 0x7a
    22c8:	f81a 1001 	ldrb.w	r1, [sl, r1]
    22cc:	f882 1074 	strb.w	r1, [r2, #116]	; 0x74
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    22d0:	eb0a 0100 	add.w	r1, sl, r0
    22d4:	7849      	ldrb	r1, [r1, #1]
    22d6:	eb01 2104 	add.w	r1, r1, r4, lsl #8
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    22da:	f103 047b 	add.w	r4, r3, #123	; 0x7b
    22de:	f81a 4004 	ldrb.w	r4, [sl, r4]
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
    22e2:	b289      	uxth	r1, r1
			macroNamesArray[presetNumber][j+8][k] = buffer[bufferIndex];
    22e4:	f882 4075 	strb.w	r4, [r2, #117]	; 0x75
    22e8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
    22ec:	f81a 4004 	ldrb.w	r4, [sl, r4]
    22f0:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
    22f4:	f103 047d 	add.w	r4, r3, #125	; 0x7d
    22f8:	f81a 4004 	ldrb.w	r4, [sl, r4]
    22fc:	f882 4077 	strb.w	r4, [r2, #119]	; 0x77
	if (paramCount > size)
    2300:	9a01      	ldr	r2, [sp, #4]
    2302:	4291      	cmp	r1, r2
    2304:	dc0c      	bgt.n	2320 <parsePreset+0x680>
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    2306:	eb00 0241 	add.w	r2, r0, r1, lsl #1
	if (paramEndCheck != 0xefef)
    230a:	f64e 75ef 	movw	r5, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
    230e:	004c      	lsls	r4, r1, #1
    2310:	4452      	add	r2, sl
    2312:	7896      	ldrb	r6, [r2, #2]
    2314:	78d0      	ldrb	r0, [r2, #3]
    2316:	eb00 2006 	add.w	r0, r0, r6, lsl #8
	if (paramEndCheck != 0xefef)
    231a:	b280      	uxth	r0, r0
    231c:	42a8      	cmp	r0, r5
    231e:	d00c      	beq.n	233a <parsePreset+0x69a>
		audioMasterLevel = 1.0f;
    2320:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
    2324:	4bb9      	ldr	r3, [pc, #740]	; (260c <parsePreset+0x96c>)
    2326:	2200      	movs	r2, #0
		audioMasterLevel = 1.0f;
    2328:	48b9      	ldr	r0, [pc, #740]	; (2610 <parsePreset+0x970>)
    232a:	6001      	str	r1, [r0, #0]
		presetWaitingToParse = 0;
    232c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
    232e:	b662      	cpsie	i
}
    2330:	b00f      	add	sp, #60	; 0x3c
    2332:	ecbd 8b02 	vpop	{d8}
    2336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    233a:	7910      	ldrb	r0, [r2, #4]
    233c:	7952      	ldrb	r2, [r2, #5]
    233e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
    2342:	b290      	uxth	r0, r2
	if (presetVersionNumber == 0)
    2344:	9a06      	ldr	r2, [sp, #24]
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
    2346:	9007      	str	r0, [sp, #28]
	if (presetVersionNumber == 0)
    2348:	2a00      	cmp	r2, #0
    234a:	f000 8117 	beq.w	257c <parsePreset+0x8dc>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 6) + bufferIndex+6;
    234e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2352:	f103 0284 	add.w	r2, r3, #132	; 0x84
    2356:	4408      	add	r0, r1
    2358:	eb02 0240 	add.w	r2, r2, r0, lsl #1
    235c:	b292      	uxth	r2, r2
	if (mappingEndLocation > size)
    235e:	9801      	ldr	r0, [sp, #4]
    2360:	4282      	cmp	r2, r0
    2362:	dcdd      	bgt.n	2320 <parsePreset+0x680>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
    2364:	eb0a 0502 	add.w	r5, sl, r2
    2368:	f81a 0002 	ldrb.w	r0, [sl, r2]
    236c:	786a      	ldrb	r2, [r5, #1]
    236e:	eb02 2200 	add.w	r2, r2, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
    2372:	f64f 60fe 	movw	r0, #65278	; 0xfefe
    2376:	b292      	uxth	r2, r2
    2378:	4282      	cmp	r2, r0
    237a:	d1d1      	bne.n	2320 <parsePreset+0x680>
	bufferIndex = bufferIndex + 2;
    237c:	f103 0780 	add.w	r7, r3, #128	; 0x80
    2380:	463d      	mov	r5, r7
	for (int i = 0; i < paramCount; i++)
    2382:	2900      	cmp	r1, #0
    2384:	f000 86e1 	beq.w	314a <_Min_Heap_Size+0x14a>
    2388:	4427      	add	r7, r4
    238a:	48a2      	ldr	r0, [pc, #648]	; (2614 <parsePreset+0x974>)
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    238c:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 2618 <parsePreset+0x978>
    2390:	b2bf      	uxth	r7, r7
	for (int i = 0; i < paramCount; i++)
    2392:	4681      	mov	r9, r0
    2394:	4604      	mov	r4, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    2396:	eb0a 0205 	add.w	r2, sl, r5
    239a:	f81a 6005 	ldrb.w	r6, [sl, r5]
		bufferIndex += 2;
    239e:	3502      	adds	r5, #2
	for (int i = 0; i < paramCount; i++)
    23a0:	341c      	adds	r4, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23a2:	7852      	ldrb	r2, [r2, #1]
		bufferIndex += 2;
    23a4:	b2ad      	uxth	r5, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23a6:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	for (int i = 0; i < paramCount; i++)
    23aa:	42af      	cmp	r7, r5
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
    23ac:	ee07 2a90 	vmov	s15, r2
    23b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    23b4:	ee67 7a87 	vmul.f32	s15, s15, s14
    23b8:	ed44 7a07 	vstr	s15, [r4, #-28]	; 0xffffffe4
    23bc:	ed44 7a06 	vstr	s15, [r4, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
    23c0:	d1e9      	bne.n	2396 <parsePreset+0x6f6>
    23c2:	ebc1 04c1 	rsb	r4, r1, r1, lsl #3
    23c6:	4a93      	ldr	r2, [pc, #588]	; (2614 <parsePreset+0x974>)
    23c8:	4e94      	ldr	r6, [pc, #592]	; (261c <parsePreset+0x97c>)
    23ca:	eb00 0484 	add.w	r4, r0, r4, lsl #2
		params[i].setParam = &blankFunction;
    23ce:	6156      	str	r6, [r2, #20]
	for (int i = 0; i < paramCount; i++)
    23d0:	321c      	adds	r2, #28
    23d2:	4294      	cmp	r4, r2
    23d4:	d1fb      	bne.n	23ce <parsePreset+0x72e>
    23d6:	4a92      	ldr	r2, [pc, #584]	; (2620 <parsePreset+0x980>)
		params[i].scaleFunc = &scaleDefault;
    23d8:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
    23da:	301c      	adds	r0, #28
    23dc:	42a0      	cmp	r0, r4
    23de:	d1fb      	bne.n	23d8 <parsePreset+0x738>
		bufferIndex += 2;
    23e0:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    23e4:	3380      	adds	r3, #128	; 0x80
    23e6:	b29d      	uxth	r5, r3
	for (int i = paramCount; i < NUM_PARAMS; i++)
    23e8:	299c      	cmp	r1, #156	; 0x9c
    23ea:	f000 86ab 	beq.w	3144 <_Min_Heap_Size+0x144>
    23ee:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    23f2:	4c8c      	ldr	r4, [pc, #560]	; (2624 <parsePreset+0x984>)
    23f4:	4e89      	ldr	r6, [pc, #548]	; (261c <parsePreset+0x97c>)
    23f6:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    23fa:	4a89      	ldr	r2, [pc, #548]	; (2620 <parsePreset+0x980>)
			params[i].zeroToOneVal[v] = 0.0f;
    23fc:	2100      	movs	r1, #0
    23fe:	6019      	str	r1, [r3, #0]
    2400:	6059      	str	r1, [r3, #4]
		params[i].setParam = &blankFunction;
    2402:	e9c3 2604 	strd	r2, r6, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
    2406:	331c      	adds	r3, #28
    2408:	429c      	cmp	r4, r3
    240a:	d1f8      	bne.n	23fe <parsePreset+0x75e>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    240c:	4a86      	ldr	r2, [pc, #536]	; (2628 <parsePreset+0x988>)
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    240e:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2412:	4b86      	ldr	r3, [pc, #536]	; (262c <parsePreset+0x98c>)
	for (int i = 0; i < NUM_EFFECT; i++)
    2414:	2700      	movs	r7, #0
	params[Osc1Fine].scaleFunc = &scaleOscFine;
    2416:	f8c9 22e8 	str.w	r2, [r9, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
    241a:	f8c9 2454 	str.w	r2, [r9, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
    241e:	f8c9 25c0 	str.w	r2, [r9, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2422:	4a83      	ldr	r2, [pc, #524]	; (2630 <parsePreset+0x990>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
    2424:	f8c9 3be0 	str.w	r3, [r9, #3040]	; 0xbe0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
    2428:	f8c9 2304 	str.w	r2, [r9, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
    242c:	f8c9 2470 	str.w	r2, [r9, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
    2430:	f8c9 25dc 	str.w	r2, [r9, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2434:	4a7f      	ldr	r2, [pc, #508]	; (2634 <parsePreset+0x994>)
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
    2436:	f8c9 3bfc 	str.w	r3, [r9, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
    243a:	f8c9 3c34 	str.w	r3, [r9, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
    243e:	f8c9 3c88 	str.w	r3, [r9, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
    2442:	f8c9 3ca4 	str.w	r3, [r9, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
    2446:	f8c9 3cdc 	str.w	r3, [r9, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
    244a:	f8c9 3d30 	str.w	r3, [r9, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
    244e:	f8c9 3d4c 	str.w	r3, [r9, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
    2452:	f8c9 3d84 	str.w	r3, [r9, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
    2456:	f8c9 3dd8 	str.w	r3, [r9, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
    245a:	f8c9 3df4 	str.w	r3, [r9, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
    245e:	f8c9 3e2c 	str.w	r3, [r9, #3628]	; 0xe2c
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
    2462:	f8c9 2aac 	str.w	r2, [r9, #2732]	; 0xaac
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2466:	4b74      	ldr	r3, [pc, #464]	; (2638 <parsePreset+0x998>)
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
    2468:	f8c9 2b54 	str.w	r2, [r9, #2900]	; 0xb54
	params[Transpose].scaleFunc = &scaleTranspose;
    246c:	4a73      	ldr	r2, [pc, #460]	; (263c <parsePreset+0x99c>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    246e:	f8df b1f4 	ldr.w	fp, [pc, #500]	; 2664 <parsePreset+0x9c4>
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    2472:	4e73      	ldr	r6, [pc, #460]	; (2640 <parsePreset+0x9a0>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
    2474:	f8c9 32cc 	str.w	r3, [r9, #716]	; 0x2cc
    2478:	f6ab 181c 	subw	r8, fp, #2332	; 0x91c
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
    247c:	f8c9 3358 	str.w	r3, [r9, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
    2480:	f8c9 3438 	str.w	r3, [r9, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
    2484:	f8c9 34c4 	str.w	r3, [r9, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
    2488:	f8c9 35a4 	str.w	r3, [r9, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
    248c:	f8c9 3630 	str.w	r3, [r9, #1584]	; 0x630
	params[Transpose].scaleFunc = &scaleTranspose;
    2490:	f8c9 21d0 	str.w	r2, [r9, #464]	; 0x1d0
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2494:	4b6b      	ldr	r3, [pc, #428]	; (2644 <parsePreset+0x9a4>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    2496:	4a6c      	ldr	r2, [pc, #432]	; (2648 <parsePreset+0x9a8>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
    2498:	f8c9 3e80 	str.w	r3, [r9, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
    249c:	f8c9 3f0c 	str.w	r3, [r9, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
    24a0:	f8c9 6ae4 	str.w	r6, [r9, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
    24a4:	f8c9 6b8c 	str.w	r6, [r9, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
    24a8:	f8c9 21ec 	str.w	r2, [r9, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
    24ac:	f8c9 3f98 	str.w	r3, [r9, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
    24b0:	f8cb 3024 	str.w	r3, [fp, #36]	; 0x24
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
    24b4:	4b65      	ldr	r3, [pc, #404]	; (264c <parsePreset+0x9ac>)
    24b6:	f8cb 30cc 	str.w	r3, [fp, #204]	; 0xcc
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    24ba:	edd8 7a00 	vldr	s15, [r8]
			setEffectsFunctions(effectType, i);
    24be:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    24c0:	ee67 7a87 	vmul.f32	s15, s15, s14
    24c4:	fef8 7a67 	vrinta.f32	s15, s15
    24c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    24cc:	edcd 7a01 	vstr	s15, [sp, #4]
    24d0:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    24d4:	280d      	cmp	r0, #13
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    24d6:	bf88      	it	hi
    24d8:	f8c8 6064 	strhi.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    24dc:	f007 fa18 	bl	9910 <__setEffectsFunctions_veneer>
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    24e0:	edd8 7a01 	vldr	s15, [r8, #4]
			setEffectsFunctions(effectType, i);
    24e4:	4639      	mov	r1, r7
			FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].zeroToOneVal[v] * (NUM_EFFECT_TYPES-1));
    24e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    24ea:	fef8 7a67 	vrinta.f32	s15, s15
    24ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    24f2:	edcd 7a01 	vstr	s15, [sp, #4]
    24f6:	f89d 0004 	ldrb.w	r0, [sp, #4]
			if (effectType > FXLowpass) // this assumes filters are the last effects
    24fa:	280d      	cmp	r0, #13
    24fc:	d946      	bls.n	258c <parsePreset+0x8ec>
	for (int i = 0; i < NUM_EFFECT; i++)
    24fe:	3701      	adds	r7, #1
				FXAlias[2].scaleFunc = &scaleFilterResonance;
    2500:	f8c8 6064 	str.w	r6, [r8, #100]	; 0x64
			setEffectsFunctions(effectType, i);
    2504:	f007 fa04 	bl	9910 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2508:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    250c:	2f04      	cmp	r7, #4
    250e:	d1d4      	bne.n	24ba <parsePreset+0x81a>
    2510:	4f40      	ldr	r7, [pc, #256]	; (2614 <parsePreset+0x974>)
    2512:	46b9      	mov	r9, r7
    2514:	463e      	mov	r6, r7
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    2516:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2518:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    251a:	ed16 0a07 	vldr	s0, [r6, #-28]	; 0xffffffe4
    251e:	4798      	blx	r3
    2520:	ed06 0a05 	vstr	s0, [r6, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
    2524:	42a6      	cmp	r6, r4
    2526:	d1f6      	bne.n	2516 <parsePreset+0x876>
    2528:	4e3a      	ldr	r6, [pc, #232]	; (2614 <parsePreset+0x974>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    252a:	6933      	ldr	r3, [r6, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
    252c:	361c      	adds	r6, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
    252e:	ed16 0a06 	vldr	s0, [r6, #-24]	; 0xffffffe8
    2532:	4798      	blx	r3
    2534:	ed06 0a04 	vstr	s0, [r6, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
    2538:	42a6      	cmp	r6, r4
    253a:	d1f6      	bne.n	252a <parsePreset+0x88a>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    253c:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2540:	edd9 7af7 	vldr	s15, [r9, #988]	; 0x3dc
    2544:	ee67 7a87 	vmul.f32	s15, s15, s14
    2548:	fef8 7a67 	vrinta.f32	s15, s15
    254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2550:	ee17 3a90 	vmov	r3, s15
	switch (oscshape)
    2554:	2b05      	cmp	r3, #5
    2556:	d832      	bhi.n	25be <parsePreset+0x91e>
    2558:	e8df f013 	tbh	[pc, r3, lsl #1]
    255c:	002e05ef 	.word	0x002e05ef
    2560:	05e505ea 	.word	0x05e505ea
    2564:	05db05e0 	.word	0x05db05e0
		if (buffer[bufferIndex + 1] == 18)
    2568:	f89a 3001 	ldrb.w	r3, [sl, #1]
    256c:	2b12      	cmp	r3, #18
    256e:	d016      	beq.n	259e <parsePreset+0x8fe>
		presetName[i] = buffer[bufferIndex];
    2570:	f89a 4004 	ldrb.w	r4, [sl, #4]
		bufferIndex = 4;
    2574:	2304      	movs	r3, #4
	uint16_t presetVersionNumber = 0;
    2576:	9506      	str	r5, [sp, #24]
    2578:	f7ff bbaf 	b.w	1cda <parsePreset+0x3a>
		mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
    257c:	f103 0284 	add.w	r2, r3, #132	; 0x84
    2580:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    2584:	4422      	add	r2, r4
    2586:	4402      	add	r2, r0
    2588:	b292      	uxth	r2, r2
    258a:	e6e8      	b.n	235e <parsePreset+0x6be>
			setEffectsFunctions(effectType, i);
    258c:	4639      	mov	r1, r7
	for (int i = 0; i < NUM_EFFECT; i++)
    258e:	3701      	adds	r7, #1
			setEffectsFunctions(effectType, i);
    2590:	f007 f9be 	bl	9910 <__setEffectsFunctions_veneer>
	for (int i = 0; i < NUM_EFFECT; i++)
    2594:	f108 08e0 	add.w	r8, r8, #224	; 0xe0
    2598:	2f04      	cmp	r7, #4
    259a:	d18e      	bne.n	24ba <parsePreset+0x81a>
    259c:	e7b8      	b.n	2510 <parsePreset+0x870>
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    259e:	f89a 2002 	ldrb.w	r2, [sl, #2]
    25a2:	f89a 3003 	ldrb.w	r3, [sl, #3]
		presetName[i] = buffer[bufferIndex];
    25a6:	f89a 4004 	ldrb.w	r4, [sl, #4]
			presetVersionNumber = ((buffer[bufferIndex + 2] << 8) + buffer[bufferIndex + 3]);
    25aa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    25ae:	b29b      	uxth	r3, r3
    25b0:	9306      	str	r3, [sp, #24]
		bufferIndex = 4;
    25b2:	2304      	movs	r3, #4
    25b4:	f7ff bb91 	b.w	1cda <parsePreset+0x3a>
			  shapeTick[i] = &sineTriTick;
    25b8:	4b25      	ldr	r3, [pc, #148]	; (2650 <parsePreset+0x9b0>)
    25ba:	4a26      	ldr	r2, [pc, #152]	; (2654 <parsePreset+0x9b4>)
    25bc:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    25be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    25c2:	ed99 7aaa 	vldr	s14, [r9, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    25c6:	4a24      	ldr	r2, [pc, #144]	; (2658 <parsePreset+0x9b8>)
    25c8:	4924      	ldr	r1, [pc, #144]	; (265c <parsePreset+0x9bc>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    25ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    25ce:	edd2 7a00 	vldr	s15, [r2]
    25d2:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    25d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    25da:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscsEnabled[i] = 0;
    25de:	bfd4      	ite	le
    25e0:	2000      	movle	r0, #0
			oscsEnabled[i] = 1;
    25e2:	2001      	movgt	r0, #1
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    25e4:	fef8 7a67 	vrinta.f32	s15, s15
    25e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    25ec:	7008      	strb	r0, [r1, #0]
			enabledCount++;
    25ee:	4603      	mov	r3, r0
    25f0:	491b      	ldr	r1, [pc, #108]	; (2660 <parsePreset+0x9c0>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    25f2:	ee17 2a90 	vmov	r2, s15
    25f6:	6008      	str	r0, [r1, #0]
	switch (oscshape)
    25f8:	2a05      	cmp	r2, #5
    25fa:	d838      	bhi.n	266e <parsePreset+0x9ce>
    25fc:	e8df f012 	tbh	[pc, r2, lsl #1]
    2600:	00340584 	.word	0x00340584
    2604:	057a057f 	.word	0x057a057f
    2608:	05700575 	.word	0x05700575
    260c:	20019cfc 	.word	0x20019cfc
    2610:	20000724 	.word	0x20000724
    2614:	20018bcc 	.word	0x20018bcc
    2618:	377ffff6 	.word	0x377ffff6
    261c:	00001a01 	.word	0x00001a01
    2620:	00001941 	.word	0x00001941
    2624:	20019cdc 	.word	0x20019cdc
    2628:	00001981 	.word	0x00001981
    262c:	00001b41 	.word	0x00001b41
    2630:	000019a1 	.word	0x000019a1
    2634:	000019c1 	.word	0x000019c1
    2638:	00001961 	.word	0x00001961
    263c:	00001a21 	.word	0x00001a21
    2640:	00001aa1 	.word	0x00001aa1
    2644:	00001bc1 	.word	0x00001bc1
    2648:	00001a61 	.word	0x00001a61
    264c:	000019e1 	.word	0x000019e1
    2650:	2001d074 	.word	0x2001d074
    2654:	000063a1 	.word	0x000063a1
    2658:	20019114 	.word	0x20019114
    265c:	2001ced0 	.word	0x2001ced0
    2660:	20018bc0 	.word	0x20018bc0
    2664:	20019bcc 	.word	0x20019bcc
			  shapeTick[i] = &sineTriTick;
    2668:	4a15      	ldr	r2, [pc, #84]	; (26c0 <parsePreset+0xa20>)
    266a:	4816      	ldr	r0, [pc, #88]	; (26c4 <parsePreset+0xa24>)
    266c:	6050      	str	r0, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    266e:	4a16      	ldr	r2, [pc, #88]	; (26c8 <parsePreset+0xa28>)
    2670:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    2674:	ed92 7a00 	vldr	s14, [r2]
    2678:	eeb4 7ae7 	vcmpe.f32	s14, s15
    267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2680:	f340 8508 	ble.w	3094 <_Min_Heap_Size+0x94>
			enabledCount++;
    2684:	3301      	adds	r3, #1
			oscOn[i] = 1;
    2686:	2201      	movs	r2, #1
			enabledCount++;
    2688:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    268a:	4610      	mov	r0, r2
    268c:	4c0f      	ldr	r4, [pc, #60]	; (26cc <parsePreset+0xa2c>)
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
    268e:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    2692:	6048      	str	r0, [r1, #4]
    2694:	7062      	strb	r2, [r4, #1]
    2696:	4a0e      	ldr	r2, [pc, #56]	; (26d0 <parsePreset+0xa30>)
    2698:	edd2 7a00 	vldr	s15, [r2]
    269c:	ee67 7a87 	vmul.f32	s15, s15, s14
    26a0:	fef8 7a67 	vrinta.f32	s15, s15
    26a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    26a8:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    26ac:	2a05      	cmp	r2, #5
    26ae:	d814      	bhi.n	26da <parsePreset+0xa3a>
    26b0:	e8df f012 	tbh	[pc, r2, lsl #1]
    26b4:	050c0511 	.word	0x050c0511
    26b8:	05020507 	.word	0x05020507
    26bc:	04fd0010 	.word	0x04fd0010
    26c0:	2001d074 	.word	0x2001d074
    26c4:	000063a1 	.word	0x000063a1
    26c8:	20018fe0 	.word	0x20018fe0
    26cc:	2001ced0 	.word	0x2001ced0
    26d0:	20019280 	.word	0x20019280
			  shapeTick[i] = &sineTick;
    26d4:	4a9a      	ldr	r2, [pc, #616]	; (2940 <parsePreset+0xca0>)
    26d6:	489b      	ldr	r0, [pc, #620]	; (2944 <parsePreset+0xca4>)
    26d8:	6090      	str	r0, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
    26da:	4a9b      	ldr	r2, [pc, #620]	; (2948 <parsePreset+0xca8>)
    26dc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    26e0:	ed92 7a00 	vldr	s14, [r2]
    26e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    26e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    26ec:	f340 84ce 	ble.w	308c <_Min_Heap_Size+0x8c>
			enabledCount++;
    26f0:	3301      	adds	r3, #1
			oscOn[i] = 1;
    26f2:	2201      	movs	r2, #1
			enabledCount++;
    26f4:	b2db      	uxtb	r3, r3
			oscsEnabled[i] = 1;
    26f6:	4610      	mov	r0, r2
	if (params[Noise].realVal[0]  > 0.5f)
    26f8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    26fc:	4e93      	ldr	r6, [pc, #588]	; (294c <parsePreset+0xcac>)
	if (params[Noise].realVal[0]  > 0.5f)
    26fe:	ed99 6a80 	vldr	s12, [r9, #512]	; 0x200
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2702:	eef2 6a00 	vmov.f32	s13, #32	; 0x41000000  8.0
    2706:	6088      	str	r0, [r1, #8]
	oscAmpMult = oscAmpMultArray[enabledCount];
    2708:	f206 4444 	addw	r4, r6, #1092	; 0x444
    270c:	4990      	ldr	r1, [pc, #576]	; (2950 <parsePreset+0xcb0>)
	if (params[Noise].realVal[0]  > 0.5f)
    270e:	eeb4 6ae7 	vcmpe.f32	s12, s15
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2712:	edd6 7a00 	vldr	s15, [r6]
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2716:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    271a:	708a      	strb	r2, [r1, #2]
	oscAmpMult = oscAmpMultArray[enabledCount];
    271c:	4a8d      	ldr	r2, [pc, #564]	; (2954 <parsePreset+0xcb4>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    271e:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (params[Noise].realVal[0]  > 0.5f)
    2722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	oscAmpMult = oscAmpMultArray[enabledCount];
    2726:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    272a:	4a8b      	ldr	r2, [pc, #556]	; (2958 <parsePreset+0xcb8>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    272c:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    2730:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
    2734:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2736:	4633      	mov	r3, r6
	if (params[Noise].realVal[0]  > 0.5f)
    2738:	bfcc      	ite	gt
    273a:	2301      	movgt	r3, #1
    273c:	2300      	movle	r3, #0
	oscAmpMult = oscAmpMultArray[enabledCount];
    273e:	6011      	str	r1, [r2, #0]
		setFilterTypes(filterType, i);
    2740:	ee17 0a90 	vmov	r0, s15
	if (params[Noise].realVal[0]  > 0.5f)
    2744:	4a85      	ldr	r2, [pc, #532]	; (295c <parsePreset+0xcbc>)
		setFilterTypes(filterType, i);
    2746:	2100      	movs	r1, #0
	if (params[Noise].realVal[0]  > 0.5f)
    2748:	7013      	strb	r3, [r2, #0]
		setFilterTypes(filterType, i);
    274a:	f007 f80d 	bl	9768 <__setFilterTypes_veneer>
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    274e:	edd6 7a2a 	vldr	s15, [r6, #168]	; 0xa8
	for (int i = 0; i < NUM_LFOS; i++)
    2752:	460e      	mov	r6, r1
		setFilterTypes(filterType, i);
    2754:	2101      	movs	r1, #1
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
    2756:	ee67 7aa6 	vmul.f32	s15, s15, s13
    275a:	fef8 7a67 	vrinta.f32	s15, s15
		setFilterTypes(filterType, i);
    275e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2762:	ee17 0a90 	vmov	r0, s15
    2766:	f006 ffff 	bl	9768 <__setFilterTypes_veneer>
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    276a:	4623      	mov	r3, r4
		setLFOShapes(LFOShape, i);
    276c:	4631      	mov	r1, r6
	for (int i = 0; i < NUM_LFOS; i++)
    276e:	3601      	adds	r6, #1
		int LFOShape = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
    2770:	348c      	adds	r4, #140	; 0x8c
    2772:	edd3 7a00 	vldr	s15, [r3]
    2776:	ee67 7a87 	vmul.f32	s15, s15, s14
    277a:	fef8 7a67 	vrinta.f32	s15, s15
		setLFOShapes(LFOShape, i);
    277e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    2782:	ee17 0a90 	vmov	r0, s15
    2786:	f007 f92b 	bl	99e0 <__setLFOShapes_veneer>
	for (int i = 0; i < NUM_LFOS; i++)
    278a:	2e04      	cmp	r6, #4
    278c:	d1ed      	bne.n	276a <parsePreset+0xaca>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    278e:	4874      	ldr	r0, [pc, #464]	; (2960 <parsePreset+0xcc0>)
	for (int i = 0; i < NUM_PARAMS; i++)
    2790:	f04f 0800 	mov.w	r8, #0
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    2794:	4b73      	ldr	r3, [pc, #460]	; (2964 <parsePreset+0xcc4>)
			params[i].objectNumber = 1;
    2796:	2601      	movs	r6, #1
	params[Osc1Pitch].setParam = &setFreqMultPitch;
    2798:	f8c9 02d0 	str.w	r0, [r9, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
    279c:	f8c9 043c 	str.w	r0, [r9, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
    27a0:	f8c9 05a8 	str.w	r0, [r9, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    27a4:	4870      	ldr	r0, [pc, #448]	; (2968 <parsePreset+0xcc8>)
	params[Effect1Mix].setParam = &fxMixSet;
    27a6:	4971      	ldr	r1, [pc, #452]	; (296c <parsePreset+0xccc>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
    27a8:	f8c9 035c 	str.w	r0, [r9, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
    27ac:	f8c9 04c8 	str.w	r0, [r9, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
    27b0:	f8c9 0634 	str.w	r0, [r9, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    27b4:	6818      	ldr	r0, [r3, #0]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    27b6:	4c6e      	ldr	r4, [pc, #440]	; (2970 <parsePreset+0xcd0>)
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
    27b8:	f8c9 0714 	str.w	r0, [r9, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    27bc:	6858      	ldr	r0, [r3, #4]
	params[Effect1Mix].setParam = &fxMixSet;
    27be:	f8c9 17a0 	str.w	r1, [r9, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
    27c2:	f8c9 0730 	str.w	r0, [r9, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    27c6:	6898      	ldr	r0, [r3, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
    27c8:	f8c9 47bc 	str.w	r4, [r9, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
    27cc:	f8c9 074c 	str.w	r0, [r9, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    27d0:	68d8      	ldr	r0, [r3, #12]
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    27d2:	4a68      	ldr	r2, [pc, #416]	; (2974 <parsePreset+0xcd4>)
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
    27d4:	f8c9 0768 	str.w	r0, [r9, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
    27d8:	6918      	ldr	r0, [r3, #16]
    27da:	f8c9 0784 	str.w	r0, [r9, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
    27de:	6958      	ldr	r0, [r3, #20]
    27e0:	f8c9 07f4 	str.w	r0, [r9, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
    27e4:	6998      	ldr	r0, [r3, #24]
    27e6:	f8c9 0810 	str.w	r0, [r9, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
    27ea:	69d8      	ldr	r0, [r3, #28]
    27ec:	f8c9 082c 	str.w	r0, [r9, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
    27f0:	4861      	ldr	r0, [pc, #388]	; (2978 <parsePreset+0xcd8>)
    27f2:	f8c9 0228 	str.w	r0, [r9, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
    27f6:	4861      	ldr	r0, [pc, #388]	; (297c <parsePreset+0xcdc>)
    27f8:	f8c9 0260 	str.w	r0, [r9, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
    27fc:	4860      	ldr	r0, [pc, #384]	; (2980 <parsePreset+0xce0>)
    27fe:	f8c9 0244 	str.w	r0, [r9, #580]	; 0x244
	params[Master].setParam = &setMaster;
    2802:	4860      	ldr	r0, [pc, #384]	; (2984 <parsePreset+0xce4>)
    2804:	f8c9 004c 	str.w	r0, [r9, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
    2808:	485f      	ldr	r0, [pc, #380]	; (2988 <parsePreset+0xce8>)
    280a:	f8c9 01d4 	str.w	r0, [r9, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
    280e:	485f      	ldr	r0, [pc, #380]	; (298c <parsePreset+0xcec>)
    2810:	f8c9 01f0 	str.w	r0, [r9, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
    2814:	485e      	ldr	r0, [pc, #376]	; (2990 <parsePreset+0xcf0>)
    2816:	f8cb 00d0 	str.w	r0, [fp, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
    281a:	6a18      	ldr	r0, [r3, #32]
    281c:	f8c9 0848 	str.w	r0, [r9, #2120]	; 0x848
	params[Effect2Mix].setParam = &fxMixSet;
    2820:	f8c9 1880 	str.w	r1, [r9, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
    2824:	f8c9 1960 	str.w	r1, [r9, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
    2828:	f8c9 1a40 	str.w	r1, [r9, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    282c:	6a59      	ldr	r1, [r3, #36]	; 0x24
	params[Effect2PostGain].setParam = &fxPostGainSet;
    282e:	f8c9 489c 	str.w	r4, [r9, #2204]	; 0x89c
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
    2832:	f8c9 1864 	str.w	r1, [r9, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    2836:	6a99      	ldr	r1, [r3, #40]	; 0x28
	params[Effect3PostGain].setParam = &fxPostGainSet;
    2838:	f8c9 497c 	str.w	r4, [r9, #2428]	; 0x97c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
    283c:	f8c9 18d4 	str.w	r1, [r9, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2840:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
	params[Effect4PostGain].setParam = &fxPostGainSet;
    2842:	f8c9 4a5c 	str.w	r4, [r9, #2652]	; 0xa5c
		params[i].objectNumber = 0;
    2846:	4644      	mov	r4, r8
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
    2848:	f8c9 18f0 	str.w	r1, [r9, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    284c:	6b19      	ldr	r1, [r3, #48]	; 0x30
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    284e:	4851      	ldr	r0, [pc, #324]	; (2994 <parsePreset+0xcf4>)
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
    2850:	f8c9 190c 	str.w	r1, [r9, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
    2854:	6b59      	ldr	r1, [r3, #52]	; 0x34
    2856:	f8c9 1928 	str.w	r1, [r9, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
    285a:	6b99      	ldr	r1, [r3, #56]	; 0x38
    285c:	f8c9 1944 	str.w	r1, [r9, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
    2860:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
    2862:	f8c9 19b4 	str.w	r1, [r9, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
    2866:	6c19      	ldr	r1, [r3, #64]	; 0x40
    2868:	f8c9 19d0 	str.w	r1, [r9, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
    286c:	6c59      	ldr	r1, [r3, #68]	; 0x44
    286e:	f8c9 19ec 	str.w	r1, [r9, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2872:	6c99      	ldr	r1, [r3, #72]	; 0x48
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    2874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
    2876:	f8c9 1a08 	str.w	r1, [r9, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
    287a:	f8c9 3a24 	str.w	r3, [r9, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    287e:	6813      	ldr	r3, [r2, #0]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    2880:	4945      	ldr	r1, [pc, #276]	; (2998 <parsePreset+0xcf8>)
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
    2882:	f8c9 3ae8 	str.w	r3, [r9, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
    2886:	6853      	ldr	r3, [r2, #4]
    2888:	f8c9 3acc 	str.w	r3, [r9, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    288c:	6893      	ldr	r3, [r2, #8]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
    288e:	f8c9 1be4 	str.w	r1, [r9, #3044]	; 0xbe4
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
    2892:	f8c9 3b90 	str.w	r3, [r9, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    2896:	68d3      	ldr	r3, [r2, #12]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
    2898:	f8c9 1c8c 	str.w	r1, [r9, #3212]	; 0xc8c
	params[Filter2Gain].setParam = filterSetters[1].setGain;
    289c:	f8c9 3b74 	str.w	r3, [r9, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    28a0:	4b3e      	ldr	r3, [pc, #248]	; (299c <parsePreset+0xcfc>)
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
    28a2:	f8c9 1d34 	str.w	r1, [r9, #3380]	; 0xd34
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
    28a6:	f8c9 3c00 	str.w	r3, [r9, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
    28aa:	f8c9 3ca8 	str.w	r3, [r9, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
    28ae:	f8c9 3d50 	str.w	r3, [r9, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
    28b2:	f8c9 3df8 	str.w	r3, [r9, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    28b6:	4b3a      	ldr	r3, [pc, #232]	; (29a0 <parsePreset+0xd00>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
    28b8:	f8c9 1ddc 	str.w	r1, [r9, #3548]	; 0xddc
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
    28bc:	f8c9 3c1c 	str.w	r3, [r9, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
    28c0:	f8c9 3cc4 	str.w	r3, [r9, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
    28c4:	f8c9 3d6c 	str.w	r3, [r9, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
    28c8:	f8c9 3e14 	str.w	r3, [r9, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
    28cc:	4b35      	ldr	r3, [pc, #212]	; (29a4 <parsePreset+0xd04>)
    28ce:	f8c9 3c38 	str.w	r3, [r9, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
    28d2:	f8c9 3ce0 	str.w	r3, [r9, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
    28d6:	f8c9 3d88 	str.w	r3, [r9, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
    28da:	f8c9 3e30 	str.w	r3, [r9, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
    28de:	4b32      	ldr	r3, [pc, #200]	; (29a8 <parsePreset+0xd08>)
    28e0:	f8c9 3c54 	str.w	r3, [r9, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
    28e4:	f8c9 3cfc 	str.w	r3, [r9, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
    28e8:	f8c9 3da4 	str.w	r3, [r9, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
    28ec:	f8c9 3e4c 	str.w	r3, [r9, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
    28f0:	6803      	ldr	r3, [r0, #0]
    28f2:	f8c9 3e84 	str.w	r3, [r9, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
    28f6:	68c3      	ldr	r3, [r0, #12]
    28f8:	f8c9 3f10 	str.w	r3, [r9, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
    28fc:	6983      	ldr	r3, [r0, #24]
    28fe:	f8c9 3f9c 	str.w	r3, [r9, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
    2902:	6a43      	ldr	r3, [r0, #36]	; 0x24
    2904:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
    2908:	6843      	ldr	r3, [r0, #4]
    290a:	f8c9 3ea0 	str.w	r3, [r9, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
    290e:	6903      	ldr	r3, [r0, #16]
    2910:	f8c9 3f2c 	str.w	r3, [r9, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
    2914:	69c3      	ldr	r3, [r0, #28]
    2916:	f8c9 3fb8 	str.w	r3, [r9, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
    291a:	6a83      	ldr	r3, [r0, #40]	; 0x28
    291c:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
    2920:	6883      	ldr	r3, [r0, #8]
    2922:	f8c9 3ebc 	str.w	r3, [r9, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
    2926:	6943      	ldr	r3, [r0, #20]
    2928:	f8c9 3f48 	str.w	r3, [r9, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
    292c:	6a03      	ldr	r3, [r0, #32]
    292e:	f8c9 3fd4 	str.w	r3, [r9, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
    2932:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    2934:	f8cb 3060 	str.w	r3, [fp, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
    2938:	4b1c      	ldr	r3, [pc, #112]	; (29ac <parsePreset+0xd0c>)
    293a:	f8cb 30b4 	str.w	r3, [fp, #180]	; 0xb4
    293e:	e03b      	b.n	29b8 <parsePreset+0xd18>
    2940:	2001d074 	.word	0x2001d074
    2944:	000064a1 	.word	0x000064a1
    2948:	2001914c 	.word	0x2001914c
    294c:	20019654 	.word	0x20019654
    2950:	2001ced0 	.word	0x2001ced0
    2954:	200008a4 	.word	0x200008a4
    2958:	200008a0 	.word	0x200008a0
    295c:	2001ce7c 	.word	0x2001ce7c
    2960:	000069c1 	.word	0x000069c1
    2964:	2001407c 	.word	0x2001407c
    2968:	00006a21 	.word	0x00006a21
    296c:	00007aa1 	.word	0x00007aa1
    2970:	00007ac1 	.word	0x00007ac1
    2974:	200160d0 	.word	0x200160d0
    2978:	000087e1 	.word	0x000087e1
    297c:	00008881 	.word	0x00008881
    2980:	00008841 	.word	0x00008841
    2984:	00006fe1 	.word	0x00006fe1
    2988:	00007001 	.word	0x00007001
    298c:	00007021 	.word	0x00007021
    2990:	00007041 	.word	0x00007041
    2994:	200181fc 	.word	0x200181fc
    2998:	00006f01 	.word	0x00006f01
    299c:	00006f21 	.word	0x00006f21
    29a0:	00006f41 	.word	0x00006f41
    29a4:	00006f61 	.word	0x00006f61
    29a8:	00006f81 	.word	0x00006f81
    29ac:	00006fc1 	.word	0x00006fc1
    29b0:	3c010204 	.word	0x3c010204
    29b4:	42fe0000 	.word	0x42fe0000
		if ((i >= Osc1) && (i < Osc2))
    29b8:	f1a8 0318 	sub.w	r3, r8, #24
		params[i].objectNumber = 0;
    29bc:	763c      	strb	r4, [r7, #24]
		if ((i >= Osc1) && (i < Osc2))
    29be:	2b0c      	cmp	r3, #12
    29c0:	f240 8278 	bls.w	2eb4 <parsePreset+0x1214>
		else if ((i >= Osc2) && (i < Osc3))
    29c4:	f1a8 0325 	sub.w	r3, r8, #37	; 0x25
    29c8:	2b72      	cmp	r3, #114	; 0x72
    29ca:	f200 8273 	bhi.w	2eb4 <parsePreset+0x1214>
    29ce:	e8df f013 	tbh	[pc, r3, lsl #1]
    29d2:	0073      	.short	0x0073
    29d4:	00730073 	.word	0x00730073
    29d8:	00730073 	.word	0x00730073
    29dc:	00730073 	.word	0x00730073
    29e0:	00730073 	.word	0x00730073
    29e4:	00730073 	.word	0x00730073
    29e8:	00730073 	.word	0x00730073
    29ec:	026b026b 	.word	0x026b026b
    29f0:	026b026b 	.word	0x026b026b
    29f4:	026b026b 	.word	0x026b026b
    29f8:	026b026b 	.word	0x026b026b
    29fc:	026b026b 	.word	0x026b026b
    2a00:	026b026b 	.word	0x026b026b
    2a04:	0271026b 	.word	0x0271026b
    2a08:	02710271 	.word	0x02710271
    2a0c:	02710271 	.word	0x02710271
    2a10:	02710271 	.word	0x02710271
    2a14:	00730271 	.word	0x00730271
    2a18:	00730073 	.word	0x00730073
    2a1c:	00730073 	.word	0x00730073
    2a20:	00730073 	.word	0x00730073
    2a24:	026b0073 	.word	0x026b0073
    2a28:	026b026b 	.word	0x026b026b
    2a2c:	026b026b 	.word	0x026b026b
    2a30:	026b026b 	.word	0x026b026b
    2a34:	026e026b 	.word	0x026e026b
    2a38:	026e026e 	.word	0x026e026e
    2a3c:	026e026e 	.word	0x026e026e
    2a40:	026e026e 	.word	0x026e026e
    2a44:	0271026e 	.word	0x0271026e
    2a48:	02710271 	.word	0x02710271
    2a4c:	02710271 	.word	0x02710271
    2a50:	00730271 	.word	0x00730271
    2a54:	00730073 	.word	0x00730073
    2a58:	00730073 	.word	0x00730073
    2a5c:	00730073 	.word	0x00730073
    2a60:	02710271 	.word	0x02710271
    2a64:	02710271 	.word	0x02710271
    2a68:	02710271 	.word	0x02710271
    2a6c:	00730073 	.word	0x00730073
    2a70:	00730073 	.word	0x00730073
    2a74:	00730073 	.word	0x00730073
    2a78:	026b026b 	.word	0x026b026b
    2a7c:	026b026b 	.word	0x026b026b
    2a80:	026b026b 	.word	0x026b026b
    2a84:	026e026e 	.word	0x026e026e
    2a88:	026e026e 	.word	0x026e026e
    2a8c:	026e026e 	.word	0x026e026e
    2a90:	02710271 	.word	0x02710271
    2a94:	02710271 	.word	0x02710271
    2a98:	00730271 	.word	0x00730271
    2a9c:	00730073 	.word	0x00730073
    2aa0:	00730073 	.word	0x00730073
    2aa4:	026b026b 	.word	0x026b026b
    2aa8:	026b026b 	.word	0x026b026b
    2aac:	026e026b 	.word	0x026e026b
    2ab0:	026e026e 	.word	0x026e026e
    2ab4:	026e026e 	.word	0x026e026e
			params[i].objectNumber = 1;
    2ab8:	2001      	movs	r0, #1
    2aba:	763e      	strb	r6, [r7, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2abc:	ed97 0a02 	vldr	s0, [r7, #8]
    2ac0:	2100      	movs	r1, #0
    2ac2:	697b      	ldr	r3, [r7, #20]
	for (int i = 0; i < NUM_PARAMS; i++)
    2ac4:	f108 0801 	add.w	r8, r8, #1
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2ac8:	4798      	blx	r3
    2aca:	ed97 0a03 	vldr	s0, [r7, #12]
    2ace:	697b      	ldr	r3, [r7, #20]
    2ad0:	2101      	movs	r1, #1
    2ad2:	7e38      	ldrb	r0, [r7, #24]
	for (int i = 0; i < NUM_PARAMS; i++)
    2ad4:	371c      	adds	r7, #28
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
    2ad6:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
    2ad8:	f1b8 0f9c 	cmp.w	r8, #156	; 0x9c
    2adc:	f47f af6c 	bne.w	29b8 <parsePreset+0xd18>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2ae0:	edd9 7a09 	vldr	s15, [r9, #36]	; 0x24
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2ae4:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2ae8:	ed99 7a02 	vldr	s14, [r9, #8]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2aec:	ed9b 6a38 	vldr	s12, [fp, #224]	; 0xe0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2af0:	ee37 7a67 	vsub.f32	s14, s14, s15
    2af4:	ed1f 5a52 	vldr	s10, [pc, #-328]	; 29b0 <parsePreset+0xd10>
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2af8:	eeb4 6ae6 	vcmpe.f32	s12, s13
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2afc:	ed5f 5a53 	vldr	s11, [pc, #-332]	; 29b4 <parsePreset+0xd14>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b00:	4baa      	ldr	r3, [pc, #680]	; (2dac <parsePreset+0x110c>)
    2b02:	ee85 6a07 	vdiv.f32	s12, s10, s14
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2b0a:	ee67 7aa5 	vmul.f32	s15, s15, s11
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b0e:	bfcc      	ite	gt
    2b10:	2201      	movgt	r2, #1
    2b12:	2200      	movle	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    2b14:	ed83 6a00 	vstr	s12, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    2b18:	4ba5      	ldr	r3, [pc, #660]	; (2db0 <parsePreset+0x1110>)
    2b1a:	edc3 7a00 	vstr	s15, [r3]
	fxPre = params[FXOrder].realVal[0] > 0.5f;
    2b1e:	4ba5      	ldr	r3, [pc, #660]	; (2db4 <parsePreset+0x1114>)
    2b20:	701a      	strb	r2, [r3, #0]
	if (presetVersionNumber > 0)
    2b22:	9b06      	ldr	r3, [sp, #24]
    2b24:	2b00      	cmp	r3, #0
    2b26:	f000 82b9 	beq.w	309c <_Min_Heap_Size+0x9c>
		pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    2b2a:	eddb 7a3f 	vldr	s15, [fp, #252]	; 0xfc
    2b2e:	eef4 7ae6 	vcmpe.f32	s15, s13
    2b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2b36:	bfcc      	ite	gt
    2b38:	2301      	movgt	r3, #1
    2b3a:	2300      	movle	r3, #0
	bufferIndex += 2;
    2b3c:	3504      	adds	r5, #4
		knobFrozen[i] = 0;
    2b3e:	499e      	ldr	r1, [pc, #632]	; (2db8 <parsePreset+0x1118>)
    2b40:	f8df b2a4 	ldr.w	fp, [pc, #676]	; 2de8 <parsePreset+0x1148>
	bufferIndex += 2;
    2b44:	b2aa      	uxth	r2, r5
    2b46:	f50b 6018 	add.w	r0, fp, #2432	; 0x980
    2b4a:	4614      	mov	r4, r2
	numMappings = 0;
    2b4c:	2200      	movs	r2, #0
		knobFrozen[i] = 0;
    2b4e:	700a      	strb	r2, [r1, #0]
    2b50:	704a      	strb	r2, [r1, #1]
    2b52:	708a      	strb	r2, [r1, #2]
    2b54:	70ca      	strb	r2, [r1, #3]
    2b56:	710a      	strb	r2, [r1, #4]
    2b58:	714a      	strb	r2, [r1, #5]
    2b5a:	718a      	strb	r2, [r1, #6]
    2b5c:	71ca      	strb	r2, [r1, #7]
    2b5e:	720a      	strb	r2, [r1, #8]
    2b60:	724a      	strb	r2, [r1, #9]
    2b62:	728a      	strb	r2, [r1, #10]
    2b64:	72ca      	strb	r2, [r1, #11]
    2b66:	4995      	ldr	r1, [pc, #596]	; (2dbc <parsePreset+0x111c>)
    2b68:	700b      	strb	r3, [r1, #0]
		mappings[i].destNumber = 255;
    2b6a:	21ff      	movs	r1, #255	; 0xff
	numMappings = 0;
    2b6c:	4b94      	ldr	r3, [pc, #592]	; (2dc0 <parsePreset+0x1120>)
    2b6e:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
    2b70:	4b94      	ldr	r3, [pc, #592]	; (2dc4 <parsePreset+0x1124>)
    2b72:	601a      	str	r2, [r3, #0]
		envOn[i] = 0;
    2b74:	4b94      	ldr	r3, [pc, #592]	; (2dc8 <parsePreset+0x1128>)
    2b76:	601a      	str	r2, [r3, #0]
		knobFrozen[i] = 0;
    2b78:	465b      	mov	r3, fp
		mappings[i].destNumber = 255;
    2b7a:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2b7c:	334c      	adds	r3, #76	; 0x4c
		mappings[i].hookActive[0] = 0;
    2b7e:	f843 2c04 	str.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
    2b82:	4298      	cmp	r0, r3
    2b84:	d1f9      	bne.n	2b7a <parsePreset+0xeda>
	for (int i = 0; i < mappingCount; i++)
    2b86:	9b07      	ldr	r3, [sp, #28]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	f000 8251 	beq.w	3030 <_Min_Heap_Size+0x30>
    2b8e:	2300      	movs	r3, #0
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2b90:	f8cd a004 	str.w	sl, [sp, #4]
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2b94:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 2dcc <parsePreset+0x112c>
				foundOne = 1;
    2b98:	f04f 0801 	mov.w	r8, #1
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2b9c:	9e06      	ldr	r6, [sp, #24]
    2b9e:	46a2      	mov	sl, r4
	for (int i = 0; i < mappingCount; i++)
    2ba0:	9303      	str	r3, [sp, #12]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ba2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
		uint8_t destNumber = buffer[bufferIndex+1];
    2ba6:	9b01      	ldr	r3, [sp, #4]
    2ba8:	4453      	add	r3, sl
    2baa:	7858      	ldrb	r0, [r3, #1]
		if (presetVersionNumber > 0)
    2bac:	2e00      	cmp	r6, #0
    2bae:	f000 8192 	beq.w	2ed6 <parsePreset+0x1236>
			whichHook = buffer[bufferIndex+5]; //slotID sent as last bit of data in new preset sending versions
    2bb2:	795d      	ldrb	r5, [r3, #5]
		uint8_t whichHook = 0;
    2bb4:	2300      	movs	r3, #0
    2bb6:	465a      	mov	r2, fp
    2bb8:	461f      	mov	r7, r3
    2bba:	461c      	mov	r4, r3
    2bbc:	e003      	b.n	2bc6 <parsePreset+0xf26>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2bbe:	3301      	adds	r3, #1
    2bc0:	324c      	adds	r2, #76	; 0x4c
    2bc2:	2b20      	cmp	r3, #32
    2bc4:	d00c      	beq.n	2be0 <parsePreset+0xf40>
			if (mappings[j].destNumber == destNumber)
    2bc6:	7811      	ldrb	r1, [r2, #0]
    2bc8:	4281      	cmp	r1, r0
    2bca:	d1f8      	bne.n	2bbe <parsePreset+0xf1e>
				foundOne = 1;
    2bcc:	2701      	movs	r7, #1
    2bce:	b2dc      	uxtb	r4, r3
				if (presetVersionNumber == 0)
    2bd0:	2e00      	cmp	r6, #0
    2bd2:	d1f4      	bne.n	2bbe <parsePreset+0xf1e>
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2bd4:	3301      	adds	r3, #1
					whichHook = mappings[j].numHooks;
    2bd6:	f892 504b 	ldrb.w	r5, [r2, #75]	; 0x4b
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    2bda:	324c      	adds	r2, #76	; 0x4c
    2bdc:	2b20      	cmp	r3, #32
    2bde:	d1f2      	bne.n	2bc6 <parsePreset+0xf26>
		if (foundOne == 0)
    2be0:	b99f      	cbnz	r7, 2c0a <parsePreset+0xf6a>
			whichMapping = numMappings;
    2be2:	4977      	ldr	r1, [pc, #476]	; (2dc0 <parsePreset+0x1120>)
			mappings[whichMapping].dest = &params[destNumber];
    2be4:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
    2be8:	9c09      	ldr	r4, [sp, #36]	; 0x24
			if (presetVersionNumber == 0)
    2bea:	2e00      	cmp	r6, #0
			whichMapping = numMappings;
    2bec:	780b      	ldrb	r3, [r1, #0]
			mappings[whichMapping].dest = &params[destNumber];
    2bee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
			if (presetVersionNumber == 0)
    2bf2:	bf08      	it	eq
    2bf4:	2500      	moveq	r5, #0
			mappings[whichMapping].destNumber = destNumber;
    2bf6:	461c      	mov	r4, r3
			numMappings++;
    2bf8:	3301      	adds	r3, #1
    2bfa:	700b      	strb	r3, [r1, #0]
			mappings[whichMapping].destNumber = destNumber;
    2bfc:	234c      	movs	r3, #76	; 0x4c
    2bfe:	fb03 f304 	mul.w	r3, r3, r4
    2c02:	f80b 0003 	strb.w	r0, [fp, r3]
    2c06:	445b      	add	r3, fp
			mappings[whichMapping].dest = &params[destNumber];
    2c08:	605a      	str	r2, [r3, #4]
		int source = buffer[bufferIndex];
    2c0a:	9b01      	ldr	r3, [sp, #4]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c0c:	1c6a      	adds	r2, r5, #1
    2c0e:	4870      	ldr	r0, [pc, #448]	; (2dd0 <parsePreset+0x1130>)
		int source = buffer[bufferIndex];
    2c10:	f813 700a 	ldrb.w	r7, [r3, sl]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c14:	234c      	movs	r3, #76	; 0x4c
    2c16:	fb03 f304 	mul.w	r3, r3, r4
    2c1a:	eb00 00c7 	add.w	r0, r0, r7, lsl #3
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2c1e:	2f03      	cmp	r7, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c20:	eb03 01c5 	add.w	r1, r3, r5, lsl #3
    2c24:	f100 0004 	add.w	r0, r0, #4
    2c28:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2c2c:	445b      	add	r3, fp
    2c2e:	4459      	add	r1, fp
    2c30:	442b      	add	r3, r5
    2c32:	60c8      	str	r0, [r1, #12]
    2c34:	4866      	ldr	r0, [pc, #408]	; (2dd0 <parsePreset+0x1130>)
    2c36:	eb00 01c7 	add.w	r1, r0, r7, lsl #3
    2c3a:	f84b 1002 	str.w	r1, [fp, r2]
		if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    2c3e:	bfd4      	ite	le
    2c40:	2200      	movle	r2, #0
    2c42:	2201      	movgt	r2, #1
    2c44:	f883 2020 	strb.w	r2, [r3, #32]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c48:	b23a      	sxth	r2, r7
    2c4a:	f1a7 0318 	sub.w	r3, r7, #24
    2c4e:	920a      	str	r2, [sp, #40]	; 0x28
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c50:	00ea      	lsls	r2, r5, #3
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c52:	2b03      	cmp	r3, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
    2c54:	9204      	str	r2, [sp, #16]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c56:	f200 8134 	bhi.w	2ec2 <parsePreset+0x1222>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    2c5a:	4b5a      	ldr	r3, [pc, #360]	; (2dc4 <parsePreset+0x1124>)
    2c5c:	443b      	add	r3, r7
    2c5e:	f803 8c18 	strb.w	r8, [r3, #-24]
		if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    2c62:	2f02      	cmp	r7, #2
    2c64:	d802      	bhi.n	2c6c <parsePreset+0xfcc>
			oscOn[source - OSC_SOURCE_OFFSET] = 1;
    2c66:	4b5b      	ldr	r3, [pc, #364]	; (2dd4 <parsePreset+0x1134>)
    2c68:	f803 8007 	strb.w	r8, [r3, r7]
		if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    2c6c:	2f03      	cmp	r7, #3
    2c6e:	f000 8142 	beq.w	2ef6 <parsePreset+0x1256>
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2c72:	3f04      	subs	r7, #4
    2c74:	2f0b      	cmp	r7, #11
    2c76:	f240 815a 	bls.w	2f2e <parsePreset+0x128e>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2c7a:	b2fb      	uxtb	r3, r7
    2c7c:	4a56      	ldr	r2, [pc, #344]	; (2dd8 <parsePreset+0x1138>)
    2c7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2c82:	930b      	str	r3, [sp, #44]	; 0x2c
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2c84:	b2fb      	uxtb	r3, r7
    2c86:	9304      	str	r3, [sp, #16]
		int scalar = buffer[bufferIndex+2];
    2c88:	9b01      	ldr	r3, [sp, #4]
    2c8a:	4453      	add	r3, sl
    2c8c:	f893 9002 	ldrb.w	r9, [r3, #2]
		for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    2c90:	ea4f 0349 	mov.w	r3, r9, lsl #1
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2c94:	f1a9 0018 	sub.w	r0, r9, #24
			if (scalar == 0xff)
    2c98:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    2c9c:	fa0f f289 	sxth.w	r2, r9
    2ca0:	9306      	str	r3, [sp, #24]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2ca2:	f1a9 0314 	sub.w	r3, r9, #20
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2ca6:	9005      	str	r0, [sp, #20]
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2ca8:	9308      	str	r3, [sp, #32]
			if (scalar == 0xff)
    2caa:	f000 8116 	beq.w	2eda <parsePreset+0x123a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2cae:	4b48      	ldr	r3, [pc, #288]	; (2dd0 <parsePreset+0x1130>)
    2cb0:	1d29      	adds	r1, r5, #4
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2cb2:	2803      	cmp	r0, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2cb4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    2cb8:	f04f 034c 	mov.w	r3, #76	; 0x4c
    2cbc:	fb03 f304 	mul.w	r3, r3, r4
    2cc0:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2cc4:	445b      	add	r3, fp
    2cc6:	605a      	str	r2, [r3, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2cc8:	f200 811f 	bhi.w	2f0a <parsePreset+0x126a>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2ccc:	4b3d      	ldr	r3, [pc, #244]	; (2dc4 <parsePreset+0x1124>)
    2cce:	444b      	add	r3, r9
    2cd0:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2cd4:	f1b9 0f02 	cmp.w	r9, #2
    2cd8:	d802      	bhi.n	2ce0 <parsePreset+0x1040>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2cda:	4b3e      	ldr	r3, [pc, #248]	; (2dd4 <parsePreset+0x1134>)
    2cdc:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2ce0:	f1b9 0f03 	cmp.w	r9, #3
    2ce4:	d102      	bne.n	2cec <parsePreset+0x104c>
					noiseOn = 1;
    2ce6:	4b3d      	ldr	r3, [pc, #244]	; (2ddc <parsePreset+0x113c>)
    2ce8:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2cec:	2f0b      	cmp	r7, #11
    2cee:	f240 814f 	bls.w	2f90 <parsePreset+0x12f0>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[scalar][v];
    2cf2:	224c      	movs	r2, #76	; 0x4c
    2cf4:	00eb      	lsls	r3, r5, #3
    2cf6:	4936      	ldr	r1, [pc, #216]	; (2dd0 <parsePreset+0x1130>)
    2cf8:	fb02 3304 	mla	r3, r2, r4, r3
    2cfc:	9a06      	ldr	r2, [sp, #24]
    2cfe:	3201      	adds	r2, #1
    2d00:	445b      	add	r3, fp
    2d02:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2d06:	629a      	str	r2, [r3, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    2d08:	9b05      	ldr	r3, [sp, #20]
    2d0a:	2b03      	cmp	r3, #3
    2d0c:	f200 8106 	bhi.w	2f1c <parsePreset+0x127c>
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    2d10:	4b2c      	ldr	r3, [pc, #176]	; (2dc4 <parsePreset+0x1124>)
    2d12:	444b      	add	r3, r9
    2d14:	f803 8c18 	strb.w	r8, [r3, #-24]
				if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    2d18:	f1b9 0f02 	cmp.w	r9, #2
    2d1c:	d802      	bhi.n	2d24 <parsePreset+0x1084>
					oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    2d1e:	4b2d      	ldr	r3, [pc, #180]	; (2dd4 <parsePreset+0x1134>)
    2d20:	f803 8009 	strb.w	r8, [r3, r9]
				if ((scalar >= NOISE_SOURCE_OFFSET) && (scalar < (NOISE_SOURCE_OFFSET + 1)))
    2d24:	f1b9 0f03 	cmp.w	r9, #3
    2d28:	d102      	bne.n	2d30 <parsePreset+0x1090>
					noiseOn = 1;
    2d2a:	4b2c      	ldr	r3, [pc, #176]	; (2ddc <parsePreset+0x113c>)
    2d2c:	f883 8000 	strb.w	r8, [r3]
				if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2d30:	2f0b      	cmp	r7, #11
    2d32:	f240 8158 	bls.w	2fe6 <parsePreset+0x1346>
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d36:	9b01      	ldr	r3, [sp, #4]
		mappings[whichMapping].hookActive[whichHook] = 1;
    2d38:	214c      	movs	r1, #76	; 0x4c
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d3a:	eb03 020a 	add.w	r2, r3, sl
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2d3e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2d42:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		mappings[whichMapping].hookActive[whichHook] = 1;
    2d46:	fb01 b404 	mla	r4, r1, r4, fp
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d4a:	78d1      	ldrb	r1, [r2, #3]
    2d4c:	7912      	ldrb	r2, [r2, #4]
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2d4e:	442b      	add	r3, r5
		mappings[whichMapping].hookActive[whichHook] = 1;
    2d50:	4425      	add	r5, r4
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
    2d52:	eb02 2201 	add.w	r2, r2, r1, lsl #8
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2d56:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
		mappings[whichMapping].hookActive[whichHook] = 1;
    2d5a:	f885 8048 	strb.w	r8, [r5, #72]	; 0x48
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
    2d5e:	b212      	sxth	r2, r2
    2d60:	ee07 2a90 	vmov	s15, r2
    2d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    2d68:	ee67 7a88 	vmul.f32	s15, s15, s16
		mappings[whichMapping].amount[whichHook] = amountFloat;
    2d6c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
    2d70:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
    2d74:	3301      	adds	r3, #1
    2d76:	f884 304b 	strb.w	r3, [r4, #75]	; 0x4b
		if (presetVersionNumber > 0)
    2d7a:	2e00      	cmp	r6, #0
    2d7c:	f000 809c 	beq.w	2eb8 <parsePreset+0x1218>
			bufferIndex += 6;
    2d80:	f10a 0306 	add.w	r3, sl, #6
    2d84:	fa1f fa83 	uxth.w	sl, r3
	for (int i = 0; i < mappingCount; i++)
    2d88:	9b03      	ldr	r3, [sp, #12]
    2d8a:	9a07      	ldr	r2, [sp, #28]
    2d8c:	3301      	adds	r3, #1
    2d8e:	4293      	cmp	r3, r2
    2d90:	9303      	str	r3, [sp, #12]
    2d92:	f47f af08 	bne.w	2ba6 <parsePreset+0xf06>
	for (int i = 0; i < numMappings; i++)
    2d96:	4b0a      	ldr	r3, [pc, #40]	; (2dc0 <parsePreset+0x1120>)
    2d98:	781a      	ldrb	r2, [r3, #0]
    2d9a:	2a00      	cmp	r2, #0
    2d9c:	f000 8148 	beq.w	3030 <_Min_Heap_Size+0x30>
    2da0:	4c0f      	ldr	r4, [pc, #60]	; (2de0 <parsePreset+0x1140>)
    2da2:	f04f 0800 	mov.w	r8, #0
			for (int v = 0; v < numStringsThisBoard; v++)
    2da6:	4f0f      	ldr	r7, [pc, #60]	; (2de4 <parsePreset+0x1144>)
    2da8:	e028      	b.n	2dfc <parsePreset+0x115c>
    2daa:	bf00      	nop
    2dac:	20018bb0 	.word	0x20018bb0
    2db0:	20018bb4 	.word	0x20018bb4
    2db4:	200161f9 	.word	0x200161f9
    2db8:	20004f54 	.word	0x20004f54
    2dbc:	20019cdc 	.word	0x20019cdc
    2dc0:	20018bbc 	.word	0x20018bbc
    2dc4:	2001cc38 	.word	0x2001cc38
    2dc8:	2001cab4 	.word	0x2001cab4
    2dcc:	37fffffc 	.word	0x37fffffc
    2dd0:	2001d0f0 	.word	0x2001d0f0
    2dd4:	2001ced0 	.word	0x2001ced0
    2dd8:	20004f90 	.word	0x20004f90
    2ddc:	2001ce7c 	.word	0x2001ce7c
    2de0:	20018238 	.word	0x20018238
    2de4:	200004b1 	.word	0x200004b1
    2de8:	20018230 	.word	0x20018230
    2dec:	00000000 	.word	0x00000000
	for (int i = 0; i < numMappings; i++)
    2df0:	f108 0801 	add.w	r8, r8, #1
    2df4:	344c      	adds	r4, #76	; 0x4c
    2df6:	4542      	cmp	r2, r8
    2df8:	f340 811a 	ble.w	3030 <_Min_Heap_Size+0x30>
		if (mappings[i].destNumber != 255)
    2dfc:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    2e00:	2bff      	cmp	r3, #255	; 0xff
    2e02:	d0f5      	beq.n	2df0 <parsePreset+0x1150>
			for (int v = 0; v < numStringsThisBoard; v++)
    2e04:	783b      	ldrb	r3, [r7, #0]
    2e06:	2b00      	cmp	r3, #0
    2e08:	d0f2      	beq.n	2df0 <parsePreset+0x1150>
    2e0a:	4626      	mov	r6, r4
    2e0c:	2500      	movs	r5, #0
					if (mappings[i].hookActive[j])
    2e0e:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
				float unsmoothedValue = 0.0f;
    2e12:	ed5f 7a0a 	vldr	s15, [pc, #-40]	; 2dec <parsePreset+0x114c>
					if (mappings[i].hookActive[j])
    2e16:	b15b      	cbz	r3, 2e30 <parsePreset+0x1190>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e18:	6832      	ldr	r2, [r6, #0]
    2e1a:	69f3      	ldr	r3, [r6, #28]
    2e1c:	edd2 7a00 	vldr	s15, [r2]
    2e20:	edd3 6a00 	vldr	s13, [r3]
    2e24:	ed94 7a0d 	vldr	s14, [r4, #52]	; 0x34
    2e28:	ee67 7aa6 	vmul.f32	s15, s15, s13
    2e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
					if (mappings[i].hookActive[j])
    2e30:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    2e34:	b15b      	cbz	r3, 2e4e <parsePreset+0x11ae>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e36:	68b2      	ldr	r2, [r6, #8]
    2e38:	6a73      	ldr	r3, [r6, #36]	; 0x24
						unsmoothedValue += sum;
    2e3a:	ed92 7a00 	vldr	s14, [r2]
    2e3e:	ed93 6a00 	vldr	s12, [r3]
    2e42:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    2e46:	ee27 7a06 	vmul.f32	s14, s14, s12
    2e4a:	eee6 7a87 	vfma.f32	s15, s13, s14
					if (mappings[i].hookActive[j])
    2e4e:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    2e52:	b15b      	cbz	r3, 2e6c <parsePreset+0x11cc>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    2e54:	6932      	ldr	r2, [r6, #16]
    2e56:	6af3      	ldr	r3, [r6, #44]	; 0x2c
						unsmoothedValue += sum;
    2e58:	ed92 7a00 	vldr	s14, [r2]
    2e5c:	ed93 6a00 	vldr	s12, [r3]
    2e60:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    2e64:	ee27 7a06 	vmul.f32	s14, s14, s12
    2e68:	eee6 7a87 	vfma.f32	s15, s13, s14
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2e6c:	f854 3c04 	ldr.w	r3, [r4, #-4]
			for (int v = 0; v < numStringsThisBoard; v++)
    2e70:	3604      	adds	r6, #4
    2e72:	eb03 0985 	add.w	r9, r3, r5, lsl #2
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2e76:	691b      	ldr	r3, [r3, #16]
				float finalVal = unsmoothedValue + mappings[i].dest->zeroToOneVal[v];
    2e78:	ed99 0a00 	vldr	s0, [r9]
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    2e7c:	ee37 0a80 	vadd.f32	s0, s15, s0
    2e80:	4798      	blx	r3
    2e82:	ed89 0a02 	vstr	s0, [r9, #8]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2e86:	f854 3c04 	ldr.w	r3, [r4, #-4]
    2e8a:	4629      	mov	r1, r5
    2e8c:	eb03 0285 	add.w	r2, r3, r5, lsl #2
    2e90:	7e18      	ldrb	r0, [r3, #24]
			for (int v = 0; v < numStringsThisBoard; v++)
    2e92:	3501      	adds	r5, #1
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    2e94:	ed92 0a02 	vldr	s0, [r2, #8]
    2e98:	695a      	ldr	r2, [r3, #20]
    2e9a:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    2e9c:	783b      	ldrb	r3, [r7, #0]
    2e9e:	42ab      	cmp	r3, r5
    2ea0:	dcb5      	bgt.n	2e0e <parsePreset+0x116e>
	for (int i = 0; i < numMappings; i++)
    2ea2:	4bac      	ldr	r3, [pc, #688]	; (3154 <_Min_Heap_Size+0x154>)
    2ea4:	781a      	ldrb	r2, [r3, #0]
    2ea6:	e7a3      	b.n	2df0 <parsePreset+0x1150>
			params[i].objectNumber = 2;
    2ea8:	2002      	movs	r0, #2
    2eaa:	7638      	strb	r0, [r7, #24]
    2eac:	e606      	b.n	2abc <parsePreset+0xe1c>
			params[i].objectNumber = 3;
    2eae:	2003      	movs	r0, #3
    2eb0:	7638      	strb	r0, [r7, #24]
    2eb2:	e603      	b.n	2abc <parsePreset+0xe1c>
		if ((i >= Osc1) && (i < Osc2))
    2eb4:	2000      	movs	r0, #0
    2eb6:	e601      	b.n	2abc <parsePreset+0xe1c>
			bufferIndex += 5;
    2eb8:	f10a 0305 	add.w	r3, sl, #5
    2ebc:	fa1f fa83 	uxth.w	sl, r3
    2ec0:	e762      	b.n	2d88 <parsePreset+0x10e8>
		if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2ec2:	f1a7 0314 	sub.w	r3, r7, #20
    2ec6:	2b03      	cmp	r3, #3
    2ec8:	f63f aecb 	bhi.w	2c62 <parsePreset+0xfc2>
			envOn[source - ENV_SOURCE_OFFSET] = 1;
    2ecc:	4ba2      	ldr	r3, [pc, #648]	; (3158 <_Min_Heap_Size+0x158>)
    2ece:	443b      	add	r3, r7
    2ed0:	f803 8c14 	strb.w	r8, [r3, #-20]
    2ed4:	e6c5      	b.n	2c62 <parsePreset+0xfc2>
		uint8_t whichHook = 0;
    2ed6:	4635      	mov	r5, r6
    2ed8:	e66c      	b.n	2bb4 <parsePreset+0xf14>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
    2eda:	234c      	movs	r3, #76	; 0x4c
    2edc:	1d29      	adds	r1, r5, #4
    2ede:	00ea      	lsls	r2, r5, #3
    2ee0:	fb03 f304 	mul.w	r3, r3, r4
    2ee4:	441a      	add	r2, r3
    2ee6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    2eea:	499c      	ldr	r1, [pc, #624]	; (315c <_Min_Heap_Size+0x15c>)
    2eec:	445a      	add	r2, fp
    2eee:	445b      	add	r3, fp
    2ef0:	6291      	str	r1, [r2, #40]	; 0x28
    2ef2:	6059      	str	r1, [r3, #4]
    2ef4:	e71f      	b.n	2d36 <parsePreset+0x1096>
			noiseOn = 1;
    2ef6:	4b9a      	ldr	r3, [pc, #616]	; (3160 <_Min_Heap_Size+0x160>)
		if ((source >= MACRO_SOURCE_OFFSET) && (source < (MACRO_SOURCE_OFFSET + NUM_MACROS + NUM_CONTROL)))
    2ef8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
			noiseOn = 1;
    2efc:	f883 8000 	strb.w	r8, [r3]
    2f00:	4b98      	ldr	r3, [pc, #608]	; (3164 <_Min_Heap_Size+0x164>)
    2f02:	930b      	str	r3, [sp, #44]	; 0x2c
    2f04:	23ff      	movs	r3, #255	; 0xff
    2f06:	9304      	str	r3, [sp, #16]
    2f08:	e6be      	b.n	2c88 <parsePreset+0xfe8>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2f0a:	9b08      	ldr	r3, [sp, #32]
    2f0c:	2b03      	cmp	r3, #3
    2f0e:	f63f aee1 	bhi.w	2cd4 <parsePreset+0x1034>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2f12:	4b91      	ldr	r3, [pc, #580]	; (3158 <_Min_Heap_Size+0x158>)
    2f14:	444b      	add	r3, r9
    2f16:	f803 8c14 	strb.w	r8, [r3, #-20]
    2f1a:	e6db      	b.n	2cd4 <parsePreset+0x1034>
				if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    2f1c:	9b08      	ldr	r3, [sp, #32]
    2f1e:	2b03      	cmp	r3, #3
    2f20:	f63f aefa 	bhi.w	2d18 <parsePreset+0x1078>
					envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    2f24:	4b8c      	ldr	r3, [pc, #560]	; (3158 <_Min_Heap_Size+0x158>)
    2f26:	444b      	add	r3, r9
    2f28:	f803 8c14 	strb.w	r8, [r3, #-20]
    2f2c:	e6f4      	b.n	2d18 <parsePreset+0x1078>
			for (int v = 0; v < numStringsThisBoard; v++)
    2f2e:	4b8e      	ldr	r3, [pc, #568]	; (3168 <_Min_Heap_Size+0x168>)
			uint8_t whichMacro = source - MACRO_SOURCE_OFFSET;
    2f30:	fa5f f987 	uxtb.w	r9, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    2f34:	781a      	ldrb	r2, [r3, #0]
    2f36:	2a00      	cmp	r2, #0
    2f38:	f000 809a 	beq.w	3070 <_Min_Heap_Size+0x70>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f3c:	f109 0c03 	add.w	ip, r9, #3
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f40:	498a      	ldr	r1, [pc, #552]	; (316c <_Min_Heap_Size+0x16c>)
    2f42:	980a      	ldr	r0, [sp, #40]	; 0x28
    2f44:	0092      	lsls	r2, r2, #2
    2f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f48:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f4c:	f8cd 9010 	str.w	r9, [sp, #16]
				sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f50:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2f54:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2f58:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2f5c:	3108      	adds	r1, #8
    2f5e:	e9cd 3c05 	strd	r3, ip, [sp, #20]
    2f62:	f006 fe79 	bl	9c58 <__memcpy_veneer>
    2f66:	f8dd c018 	ldr.w	ip, [sp, #24]
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f6a:	9a05      	ldr	r2, [sp, #20]
    2f6c:	eba2 030c 	sub.w	r3, r2, ip
    2f70:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2f72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2f76:	ed93 0a02 	vldr	s0, [r3, #8]
    2f7a:	4b7d      	ldr	r3, [pc, #500]	; (3170 <_Min_Heap_Size+0x170>)
    2f7c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
    2f80:	4618      	mov	r0, r3
    2f82:	930b      	str	r3, [sp, #44]	; 0x2c
    2f84:	f006 fd64 	bl	9a50 <__tExpSmooth_setValAndDest_veneer>
			knobFrozen[whichMacro] = 1;
    2f88:	4b7a      	ldr	r3, [pc, #488]	; (3174 <_Min_Heap_Size+0x174>)
    2f8a:	f803 8009 	strb.w	r8, [r3, r9]
    2f8e:	e67b      	b.n	2c88 <parsePreset+0xfe8>
					for (int v = 0; v < numStringsThisBoard; v++)
    2f90:	4b75      	ldr	r3, [pc, #468]	; (3168 <_Min_Heap_Size+0x168>)
    2f92:	781a      	ldrb	r2, [r3, #0]
    2f94:	2a00      	cmp	r2, #0
    2f96:	f000 8083 	beq.w	30a0 <_Min_Heap_Size+0xa0>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2f9a:	9b04      	ldr	r3, [sp, #16]
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2f9c:	0092      	lsls	r2, r2, #2
    2f9e:	4973      	ldr	r1, [pc, #460]	; (316c <_Min_Heap_Size+0x16c>)
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2fa0:	f103 0c03 	add.w	ip, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2fa4:	980a      	ldr	r0, [sp, #40]	; 0x28
    2fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fa8:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2fac:	ebcc 01cc 	rsb	r1, ip, ip, lsl #3
    2fb0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    2fb4:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    2fb8:	3108      	adds	r1, #8
    2fba:	e9cd 3c0c 	strd	r3, ip, [sp, #48]	; 0x30
    2fbe:	f006 fe4b 	bl	9c58 <__memcpy_veneer>
    2fc2:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2fc6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    2fc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2fca:	eba2 030c 	sub.w	r3, r2, ip
    2fce:	9a09      	ldr	r2, [sp, #36]	; 0x24
    2fd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2fd4:	ed93 0a02 	vldr	s0, [r3, #8]
    2fd8:	f006 fd3a 	bl	9a50 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    2fdc:	4b65      	ldr	r3, [pc, #404]	; (3174 <_Min_Heap_Size+0x174>)
    2fde:	9a04      	ldr	r2, [sp, #16]
    2fe0:	f803 8002 	strb.w	r8, [r3, r2]
    2fe4:	e685      	b.n	2cf2 <parsePreset+0x1052>
					for (int v = 0; v < numStringsThisBoard; v++)
    2fe6:	4b60      	ldr	r3, [pc, #384]	; (3168 <_Min_Heap_Size+0x168>)
    2fe8:	781a      	ldrb	r2, [r3, #0]
    2fea:	2a00      	cmp	r2, #0
    2fec:	d048      	beq.n	3080 <_Min_Heap_Size+0x80>
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2fee:	4b5f      	ldr	r3, [pc, #380]	; (316c <_Min_Heap_Size+0x16c>)
    2ff0:	0092      	lsls	r2, r2, #2
    2ff2:	990a      	ldr	r1, [sp, #40]	; 0x28
    2ff4:	eb03 00c1 	add.w	r0, r3, r1, lsl #3
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    2ff8:	9b04      	ldr	r3, [sp, #16]
    2ffa:	f103 0903 	add.w	r9, r3, #3
						sourceValues[source][v] = params[whichMacro + MACRO_PARAMS_OFFSET].realVal[v];
    2ffe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3000:	ebc9 01c9 	rsb	r1, r9, r9, lsl #3
    3004:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    3008:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    300c:	3108      	adds	r1, #8
    300e:	f006 fe23 	bl	9c58 <__memcpy_veneer>
					tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3012:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3014:	eba7 0309 	sub.w	r3, r7, r9
    3018:	980b      	ldr	r0, [sp, #44]	; 0x2c
    301a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    301e:	ed93 0a02 	vldr	s0, [r3, #8]
    3022:	f006 fd15 	bl	9a50 <__tExpSmooth_setValAndDest_veneer>
					knobFrozen[whichMacro] = 1;
    3026:	4b53      	ldr	r3, [pc, #332]	; (3174 <_Min_Heap_Size+0x174>)
    3028:	9a04      	ldr	r2, [sp, #16]
    302a:	f803 8002 	strb.w	r8, [r3, r2]
    302e:	e682      	b.n	2d36 <parsePreset+0x1096>
	presetWaitingToParse = 0;
    3030:	4b51      	ldr	r3, [pc, #324]	; (3178 <_Min_Heap_Size+0x178>)
    3032:	2400      	movs	r4, #0
	currentActivePreset = presetNumber;
    3034:	f89d 2008 	ldrb.w	r2, [sp, #8]
	overSampled = 1;
    3038:	2501      	movs	r5, #1
	presetWaitingToParse = 0;
    303a:	601c      	str	r4, [r3, #0]
	currentActivePreset = presetNumber;
    303c:	4b4f      	ldr	r3, [pc, #316]	; (317c <_Min_Heap_Size+0x17c>)
	changeOversampling(overSampled);
    303e:	4628      	mov	r0, r5
	currentActivePreset = presetNumber;
    3040:	701a      	strb	r2, [r3, #0]
	audioMasterLevel = 1.0f;
    3042:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3046:	4a4e      	ldr	r2, [pc, #312]	; (3180 <_Min_Heap_Size+0x180>)
    3048:	6013      	str	r3, [r2, #0]
	oscToTick = NUM_OSC;
    304a:	2203      	movs	r2, #3
    304c:	4b4d      	ldr	r3, [pc, #308]	; (3184 <_Min_Heap_Size+0x184>)
    304e:	701a      	strb	r2, [r3, #0]
	overSampled = 1;
    3050:	4b4d      	ldr	r3, [pc, #308]	; (3188 <_Min_Heap_Size+0x188>)
    3052:	601d      	str	r5, [r3, #0]
	changeOversampling(overSampled);
    3054:	f006 fd24 	bl	9aa0 <__changeOversampling_veneer>
    3058:	b662      	cpsie	i
	diskBusy = 0;
    305a:	4a4c      	ldr	r2, [pc, #304]	; (318c <_Min_Heap_Size+0x18c>)
	receivingI2C = 0;
    305c:	4b4c      	ldr	r3, [pc, #304]	; (3190 <_Min_Heap_Size+0x190>)
	presetReady = 1;
    305e:	494d      	ldr	r1, [pc, #308]	; (3194 <_Min_Heap_Size+0x194>)
	diskBusy = 0;
    3060:	7014      	strb	r4, [r2, #0]
	presetReady = 1;
    3062:	600d      	str	r5, [r1, #0]
	receivingI2C = 0;
    3064:	701c      	strb	r4, [r3, #0]
}
    3066:	b00f      	add	sp, #60	; 0x3c
    3068:	ecbd 8b02 	vpop	{d8}
    306c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    3070:	f109 0c03 	add.w	ip, r9, #3
    3074:	f8cd 9010 	str.w	r9, [sp, #16]
    3078:	ea4f 03cc 	mov.w	r3, ip, lsl #3
    307c:	9305      	str	r3, [sp, #20]
    307e:	e774      	b.n	2f6a <parsePreset+0x12ca>
    3080:	9b04      	ldr	r3, [sp, #16]
    3082:	f103 0903 	add.w	r9, r3, #3
    3086:	ea4f 07c9 	mov.w	r7, r9, lsl #3
    308a:	e7c2      	b.n	3012 <_Min_Heap_Size+0x12>
			oscOn[i] = 0;
    308c:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    308e:	4610      	mov	r0, r2
    3090:	f7ff bb32 	b.w	26f8 <parsePreset+0xa58>
			oscOn[i] = 0;
    3094:	2200      	movs	r2, #0
			oscsEnabled[i] = 0;
    3096:	4610      	mov	r0, r2
    3098:	f7ff baf8 	b.w	268c <parsePreset+0x9ec>
		pedalControlsMaster = 1;
    309c:	2301      	movs	r3, #1
    309e:	e54d      	b.n	2b3c <parsePreset+0xe9c>
			tExpSmooth_setValAndDest(&knobSmoothers[whichMacro], params[whichMacro + MACRO_PARAMS_OFFSET].realVal[0]);
    30a0:	9b04      	ldr	r3, [sp, #16]
    30a2:	f103 0c03 	add.w	ip, r3, #3
    30a6:	ea4f 02cc 	mov.w	r2, ip, lsl #3
    30aa:	920c      	str	r2, [sp, #48]	; 0x30
    30ac:	e78b      	b.n	2fc6 <parsePreset+0x1326>
			  shapeTick[i] = &triTick;
    30ae:	4a3a      	ldr	r2, [pc, #232]	; (3198 <_Min_Heap_Size+0x198>)
    30b0:	483a      	ldr	r0, [pc, #232]	; (319c <_Min_Heap_Size+0x19c>)
    30b2:	6090      	str	r0, [r2, #8]
			  break;
    30b4:	f7ff bb11 	b.w	26da <parsePreset+0xa3a>
			  shapeTick[i] = &pulseTick;
    30b8:	4a37      	ldr	r2, [pc, #220]	; (3198 <_Min_Heap_Size+0x198>)
    30ba:	4839      	ldr	r0, [pc, #228]	; (31a0 <_Min_Heap_Size+0x1a0>)
    30bc:	6090      	str	r0, [r2, #8]
			  break;
    30be:	f7ff bb0c 	b.w	26da <parsePreset+0xa3a>
			  shapeTick[i] = &sawTick;
    30c2:	4a35      	ldr	r2, [pc, #212]	; (3198 <_Min_Heap_Size+0x198>)
    30c4:	4837      	ldr	r0, [pc, #220]	; (31a4 <_Min_Heap_Size+0x1a4>)
    30c6:	6090      	str	r0, [r2, #8]
			  break;
    30c8:	f7ff bb07 	b.w	26da <parsePreset+0xa3a>
			  shapeTick[i] = &sineTriTick;
    30cc:	4a32      	ldr	r2, [pc, #200]	; (3198 <_Min_Heap_Size+0x198>)
    30ce:	4836      	ldr	r0, [pc, #216]	; (31a8 <_Min_Heap_Size+0x1a8>)
    30d0:	6090      	str	r0, [r2, #8]
			  break;
    30d2:	f7ff bb02 	b.w	26da <parsePreset+0xa3a>
			  shapeTick[i] = &sawSquareTick;
    30d6:	4a30      	ldr	r2, [pc, #192]	; (3198 <_Min_Heap_Size+0x198>)
    30d8:	4834      	ldr	r0, [pc, #208]	; (31ac <_Min_Heap_Size+0x1ac>)
    30da:	6090      	str	r0, [r2, #8]
			  break;
    30dc:	f7ff bafd 	b.w	26da <parsePreset+0xa3a>
			  shapeTick[i] = &triTick;
    30e0:	4a2d      	ldr	r2, [pc, #180]	; (3198 <_Min_Heap_Size+0x198>)
    30e2:	482e      	ldr	r0, [pc, #184]	; (319c <_Min_Heap_Size+0x19c>)
    30e4:	6050      	str	r0, [r2, #4]
			  break;
    30e6:	f7ff bac2 	b.w	266e <parsePreset+0x9ce>
			  shapeTick[i] = &sineTick;
    30ea:	4a2b      	ldr	r2, [pc, #172]	; (3198 <_Min_Heap_Size+0x198>)
    30ec:	4830      	ldr	r0, [pc, #192]	; (31b0 <_Min_Heap_Size+0x1b0>)
    30ee:	6050      	str	r0, [r2, #4]
			  break;
    30f0:	f7ff babd 	b.w	266e <parsePreset+0x9ce>
			  shapeTick[i] = &pulseTick;
    30f4:	4a28      	ldr	r2, [pc, #160]	; (3198 <_Min_Heap_Size+0x198>)
    30f6:	482a      	ldr	r0, [pc, #168]	; (31a0 <_Min_Heap_Size+0x1a0>)
    30f8:	6050      	str	r0, [r2, #4]
			  break;
    30fa:	f7ff bab8 	b.w	266e <parsePreset+0x9ce>
			  shapeTick[i] = &sawTick;
    30fe:	4a26      	ldr	r2, [pc, #152]	; (3198 <_Min_Heap_Size+0x198>)
    3100:	4828      	ldr	r0, [pc, #160]	; (31a4 <_Min_Heap_Size+0x1a4>)
    3102:	6050      	str	r0, [r2, #4]
			  break;
    3104:	f7ff bab3 	b.w	266e <parsePreset+0x9ce>
			  shapeTick[i] = &sawSquareTick;
    3108:	4a23      	ldr	r2, [pc, #140]	; (3198 <_Min_Heap_Size+0x198>)
    310a:	4828      	ldr	r0, [pc, #160]	; (31ac <_Min_Heap_Size+0x1ac>)
    310c:	6050      	str	r0, [r2, #4]
			  break;
    310e:	f7ff baae 	b.w	266e <parsePreset+0x9ce>
			  shapeTick[i] = &triTick;
    3112:	4b21      	ldr	r3, [pc, #132]	; (3198 <_Min_Heap_Size+0x198>)
    3114:	4a21      	ldr	r2, [pc, #132]	; (319c <_Min_Heap_Size+0x19c>)
    3116:	601a      	str	r2, [r3, #0]
			  break;
    3118:	f7ff ba51 	b.w	25be <parsePreset+0x91e>
			  shapeTick[i] = &sineTick;
    311c:	4b1e      	ldr	r3, [pc, #120]	; (3198 <_Min_Heap_Size+0x198>)
    311e:	4a24      	ldr	r2, [pc, #144]	; (31b0 <_Min_Heap_Size+0x1b0>)
    3120:	601a      	str	r2, [r3, #0]
			  break;
    3122:	f7ff ba4c 	b.w	25be <parsePreset+0x91e>
			  shapeTick[i] = &pulseTick;
    3126:	4b1c      	ldr	r3, [pc, #112]	; (3198 <_Min_Heap_Size+0x198>)
    3128:	4a1d      	ldr	r2, [pc, #116]	; (31a0 <_Min_Heap_Size+0x1a0>)
    312a:	601a      	str	r2, [r3, #0]
			  break;
    312c:	f7ff ba47 	b.w	25be <parsePreset+0x91e>
			  shapeTick[i] = &sawTick;
    3130:	4b19      	ldr	r3, [pc, #100]	; (3198 <_Min_Heap_Size+0x198>)
    3132:	4a1c      	ldr	r2, [pc, #112]	; (31a4 <_Min_Heap_Size+0x1a4>)
    3134:	601a      	str	r2, [r3, #0]
			  break;
    3136:	f7ff ba42 	b.w	25be <parsePreset+0x91e>
			  shapeTick[i] = &sawSquareTick;
    313a:	4b17      	ldr	r3, [pc, #92]	; (3198 <_Min_Heap_Size+0x198>)
    313c:	4a1b      	ldr	r2, [pc, #108]	; (31ac <_Min_Heap_Size+0x1ac>)
    313e:	601a      	str	r2, [r3, #0]
			  break;
    3140:	f7ff ba3d 	b.w	25be <parsePreset+0x91e>
    3144:	4c1b      	ldr	r4, [pc, #108]	; (31b4 <_Min_Heap_Size+0x1b4>)
    3146:	f7ff b961 	b.w	240c <parsePreset+0x76c>
    314a:	f8df 906c 	ldr.w	r9, [pc, #108]	; 31b8 <_Min_Heap_Size+0x1b8>
    314e:	f7ff b94b 	b.w	23e8 <parsePreset+0x748>
    3152:	bf00      	nop
    3154:	20018bbc 	.word	0x20018bbc
    3158:	2001cab4 	.word	0x2001cab4
    315c:	2000072c 	.word	0x2000072c
    3160:	2001ce7c 	.word	0x2001ce7c
    3164:	2000538c 	.word	0x2000538c
    3168:	200004b1 	.word	0x200004b1
    316c:	2001d0f0 	.word	0x2001d0f0
    3170:	20004f90 	.word	0x20004f90
    3174:	20004f54 	.word	0x20004f54
    3178:	20019cfc 	.word	0x20019cfc
    317c:	20000728 	.word	0x20000728
    3180:	20000724 	.word	0x20000724
    3184:	200008b4 	.word	0x200008b4
    3188:	200008b8 	.word	0x200008b8
    318c:	20014078 	.word	0x20014078
    3190:	2001a110 	.word	0x2001a110
    3194:	20005084 	.word	0x20005084
    3198:	2001d074 	.word	0x2001d074
    319c:	000064e1 	.word	0x000064e1
    31a0:	00006441 	.word	0x00006441
    31a4:	00006401 	.word	0x00006401
    31a8:	000063a1 	.word	0x000063a1
    31ac:	00006341 	.word	0x00006341
    31b0:	000064a1 	.word	0x000064a1
    31b4:	20019cdc 	.word	0x20019cdc
    31b8:	20018bcc 	.word	0x20018bcc
    31bc:	f3af 8000 	nop.w

000031c0 <handleSPI>:
	if (foundBrainFirmware)
    31c0:	4971      	ldr	r1, [pc, #452]	; (3388 <handleSPI+0x1c8>)
	interruptChecker = 1;
    31c2:	4b72      	ldr	r3, [pc, #456]	; (338c <handleSPI+0x1cc>)
{
    31c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 1;
    31c8:	2501      	movs	r5, #1
{
    31ca:	4604      	mov	r4, r0
    31cc:	ed2d 8b02 	vpush	{d8}
	if (foundBrainFirmware)
    31d0:	780a      	ldrb	r2, [r1, #0]
{
    31d2:	b085      	sub	sp, #20
	interruptChecker = 1;
    31d4:	701d      	strb	r5, [r3, #0]
	if (foundBrainFirmware)
    31d6:	b34a      	cbz	r2, 322c <handleSPI+0x6c>
		if (brainFirmwareEndSignal)
    31d8:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 33a4 <handleSPI+0x1e4>
    31dc:	f8d9 0000 	ldr.w	r0, [r9]
    31e0:	2800      	cmp	r0, #0
    31e2:	d03f      	beq.n	3264 <handleSPI+0xa4>
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    31e4:	4b6a      	ldr	r3, [pc, #424]	; (3390 <handleSPI+0x1d0>)
    31e6:	20f9      	movs	r0, #249	; 0xf9
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    31e8:	4a6a      	ldr	r2, [pc, #424]	; (3394 <handleSPI+0x1d4>)
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    31ea:	4423      	add	r3, r4
			brainFirmwareSendInProgress = 0;
    31ec:	4c6a      	ldr	r4, [pc, #424]	; (3398 <handleSPI+0x1d8>)
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    31ee:	6812      	ldr	r2, [r2, #0]
			SPI_LEVERS_TX[offset] = 249; //special byte that says I'm done sending you firmware, you doofus, now use it;
    31f0:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40
			brainFirmwareEndSignal = 0;
    31f4:	2000      	movs	r0, #0
			foundBrainFirmware = 0;
    31f6:	7008      	strb	r0, [r1, #0]
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    31f8:	0c11      	lsrs	r1, r2, #16
			brainFirmwareSendInProgress = 0;
    31fa:	6020      	str	r0, [r4, #0]
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    31fc:	0e14      	lsrs	r4, r2, #24
			brainFirmwareEndSignal = 0;
    31fe:	f8c9 0000 	str.w	r0, [r9]
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3202:	0a10      	lsrs	r0, r2, #8
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3204:	3a00      	subs	r2, #0
			SPI_LEVERS_TX[offset+2] = brainFirmwareSize >> 16;
    3206:	f883 1042 	strb.w	r1, [r3, #66]	; 0x42
			SPI_LEVERS_TX[offset+31] = 254;
    320a:	f04f 01fe 	mov.w	r1, #254	; 0xfe
			SPI_LEVERS_TX[offset+1] = brainFirmwareSize >> 24;
    320e:	f883 4041 	strb.w	r4, [r3, #65]	; 0x41
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    3212:	bf18      	it	ne
    3214:	2201      	movne	r2, #1
			SPI_LEVERS_TX[offset+3] = brainFirmwareSize >> 8;
    3216:	f883 0043 	strb.w	r0, [r3, #67]	; 0x43
			SPI_LEVERS_TX[offset+31] = 254;
    321a:	f883 105f 	strb.w	r1, [r3, #95]	; 0x5f
			SPI_LEVERS_TX[offset+4] = brainFirmwareSize && 0xff;
    321e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
}
    3222:	b005      	add	sp, #20
    3224:	ecbd 8b02 	vpop	{d8}
    3228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (SPI_LEVERS_RX[offset] == ReceivingPitches)
    322c:	4d58      	ldr	r5, [pc, #352]	; (3390 <handleSPI+0x1d0>)
    322e:	5c2b      	ldrb	r3, [r5, r0]
    3230:	2b01      	cmp	r3, #1
    3232:	f000 80bb 	beq.w	33ac <handleSPI+0x1ec>
		else if (SPI_LEVERS_RX[offset] == ReceivingPreset)
    3236:	2b0c      	cmp	r3, #12
    3238:	f200 826a 	bhi.w	3710 <handleSPI+0x550>
    323c:	2b01      	cmp	r3, #1
    323e:	f240 8143 	bls.w	34c8 <handleSPI+0x308>
    3242:	3b02      	subs	r3, #2
    3244:	2b0a      	cmp	r3, #10
    3246:	f200 813f 	bhi.w	34c8 <handleSPI+0x308>
    324a:	e8df f013 	tbh	[pc, r3, lsl #1]
    324e:	02bd      	.short	0x02bd
    3250:	013d031b 	.word	0x013d031b
    3254:	0421013d 	.word	0x0421013d
    3258:	013d04a5 	.word	0x013d04a5
    325c:	0531013d 	.word	0x0531013d
    3260:	054702f0 	.word	0x054702f0
		else if (brainFirmwareSendInProgress)
    3264:	4a4c      	ldr	r2, [pc, #304]	; (3398 <handleSPI+0x1d8>)
    3266:	6813      	ldr	r3, [r2, #0]
    3268:	2b00      	cmp	r3, #0
    326a:	f000 8269 	beq.w	3740 <handleSPI+0x580>
			SPI_LEVERS_TX[offset] = 251; //special byte that says it's a firmware chunk
    326e:	4d48      	ldr	r5, [pc, #288]	; (3390 <handleSPI+0x1d0>)
    3270:	23fb      	movs	r3, #251	; 0xfb
    3272:	f8df b134 	ldr.w	fp, [pc, #308]	; 33a8 <handleSPI+0x1e8>
    3276:	eb05 0a04 	add.w	sl, r5, r4
    327a:	4f48      	ldr	r7, [pc, #288]	; (339c <handleSPI+0x1dc>)
    327c:	f8db 2000 	ldr.w	r2, [fp]
    3280:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
			for (int i = 0; i < 30; i++)
    3284:	4b46      	ldr	r3, [pc, #280]	; (33a0 <handleSPI+0x1e0>)
    3286:	8819      	ldrh	r1, [r3, #0]
    3288:	e032      	b.n	32f0 <handleSPI+0x130>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    328a:	2e3a      	cmp	r6, #58	; 0x3a
    328c:	f000 8297 	beq.w	37be <handleSPI+0x5fe>
    3290:	f1be 0f3a 	cmp.w	lr, #58	; 0x3a
					positionInRowLine = 0;
    3294:	f04f 0100 	mov.w	r1, #0
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    3298:	bf08      	it	eq
    329a:	3202      	addeq	r2, #2
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    329c:	18bb      	adds	r3, r7, r2
    329e:	789b      	ldrb	r3, [r3, #2]
    32a0:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32a2:	bf08      	it	eq
    32a4:	3203      	addeq	r2, #3
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32a6:	18bb      	adds	r3, r7, r2
    32a8:	78db      	ldrb	r3, [r3, #3]
    32aa:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32ac:	bf08      	it	eq
    32ae:	3204      	addeq	r2, #4
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32b0:	18bb      	adds	r3, r7, r2
    32b2:	791b      	ldrb	r3, [r3, #4]
    32b4:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32b6:	bf08      	it	eq
    32b8:	3205      	addeq	r2, #5
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32ba:	18bb      	adds	r3, r7, r2
    32bc:	795b      	ldrb	r3, [r3, #5]
    32be:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32c0:	bf08      	it	eq
    32c2:	3206      	addeq	r2, #6
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32c4:	18bb      	adds	r3, r7, r2
    32c6:	799b      	ldrb	r3, [r3, #6]
    32c8:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32ca:	bf08      	it	eq
    32cc:	3207      	addeq	r2, #7
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32ce:	18bb      	adds	r3, r7, r2
    32d0:	79db      	ldrb	r3, [r3, #7]
    32d2:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32d4:	bf08      	it	eq
    32d6:	3208      	addeq	r2, #8
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32d8:	18bb      	adds	r3, r7, r2
    32da:	7a1b      	ldrb	r3, [r3, #8]
    32dc:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32de:	bf08      	it	eq
    32e0:	3209      	addeq	r2, #9
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    32e2:	18bb      	adds	r3, r7, r2
    32e4:	7a5b      	ldrb	r3, [r3, #9]
    32e6:	2b3a      	cmp	r3, #58	; 0x3a
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    32e8:	bf08      	it	eq
    32ea:	320a      	addeq	r2, #10
			for (int i = 0; i < 30; i++)
    32ec:	281e      	cmp	r0, #30
    32ee:	d03a      	beq.n	3366 <handleSPI+0x1a6>
				uint8_t val1 = brainFirmwareBuffer[brainFirmwareBufferIndex];
    32f0:	5cbe      	ldrb	r6, [r7, r2]
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    32f2:	f102 0c01 	add.w	ip, r2, #1
	if (('0' <= value) && (value <= '9'))
    32f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
				uint8_t val2 = brainFirmwareBuffer[brainFirmwareBufferIndex+1];
    32fa:	f817 e00c 	ldrb.w	lr, [r7, ip]
	if (('0' <= value) && (value <= '9'))
    32fe:	b2db      	uxtb	r3, r3
    3300:	2b09      	cmp	r3, #9
    3302:	f240 8247 	bls.w	3794 <handleSPI+0x5d4>
	if (('a' <= value) && (value <= 'f'))
    3306:	f1a6 0361 	sub.w	r3, r6, #97	; 0x61
    330a:	2b05      	cmp	r3, #5
    330c:	f240 8245 	bls.w	379a <handleSPI+0x5da>
	if (('A' <= value) && (value <= 'F'))
    3310:	f1a6 0341 	sub.w	r3, r6, #65	; 0x41
    3314:	2b05      	cmp	r3, #5
    3316:	f240 824c 	bls.w	37b2 <handleSPI+0x5f2>
    331a:	2300      	movs	r3, #0
	if (('0' <= value) && (value <= '9'))
    331c:	f1ae 0830 	sub.w	r8, lr, #48	; 0x30
    3320:	fa5f f888 	uxtb.w	r8, r8
    3324:	f1b8 0f09 	cmp.w	r8, #9
    3328:	f240 8231 	bls.w	378e <handleSPI+0x5ce>
	if (('a' <= value) && (value <= 'f'))
    332c:	f1ae 0861 	sub.w	r8, lr, #97	; 0x61
    3330:	f1b8 0f05 	cmp.w	r8, #5
    3334:	f240 8237 	bls.w	37a6 <handleSPI+0x5e6>
	if (('A' <= value) && (value <= 'F'))
    3338:	f1ae 0841 	sub.w	r8, lr, #65	; 0x41
    333c:	f1b8 0f05 	cmp.w	r8, #5
    3340:	d804      	bhi.n	334c <handleSPI+0x18c>
		return (uint8_t) (10 + value - 'A');
    3342:	f1ae 0837 	sub.w	r8, lr, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    3346:	ea43 0308 	orr.w	r3, r3, r8
    334a:	b2db      	uxtb	r3, r3
				if (positionInRowLine < 294)
    334c:	f5b1 7f93 	cmp.w	r1, #294	; 0x126
    3350:	d29b      	bcs.n	328a <handleSPI+0xca>
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    3352:	eb0a 0600 	add.w	r6, sl, r0
			for (int i = 0; i < 30; i++)
    3356:	3001      	adds	r0, #1
				positionInRowLine++;
    3358:	3101      	adds	r1, #1
					brainFirmwareBufferIndex += 2;
    335a:	3202      	adds	r2, #2
			for (int i = 0; i < 30; i++)
    335c:	281e      	cmp	r0, #30
					SPI_LEVERS_TX[offset+i+1] = valToSend;
    335e:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
				positionInRowLine++;
    3362:	b289      	uxth	r1, r1
			for (int i = 0; i < 30; i++)
    3364:	d1c4      	bne.n	32f0 <handleSPI+0x130>
    3366:	4b0e      	ldr	r3, [pc, #56]	; (33a0 <handleSPI+0x1e0>)
			SPI_LEVERS_TX[offset+31] = 254;
    3368:	442c      	add	r4, r5
    336a:	f8cb 2000 	str.w	r2, [fp]
    336e:	8019      	strh	r1, [r3, #0]
    3370:	23fe      	movs	r3, #254	; 0xfe
    3372:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
			if (brainFirmwareBufferIndex >= brainFirmwareSize)
    3376:	4b07      	ldr	r3, [pc, #28]	; (3394 <handleSPI+0x1d4>)
    3378:	681b      	ldr	r3, [r3, #0]
    337a:	4293      	cmp	r3, r2
    337c:	f63f af51 	bhi.w	3222 <handleSPI+0x62>
				brainFirmwareEndSignal = 1;
    3380:	2301      	movs	r3, #1
    3382:	f8c9 3000 	str.w	r3, [r9]
    3386:	e74c      	b.n	3222 <handleSPI+0x62>
    3388:	200161f8 	.word	0x200161f8
    338c:	200161fb 	.word	0x200161fb
    3390:	30000800 	.word	0x30000800
    3394:	20014034 	.word	0x20014034
    3398:	20014030 	.word	0x20014030
    339c:	61e00000 	.word	0x61e00000
    33a0:	20019ce4 	.word	0x20019ce4
    33a4:	2001402c 	.word	0x2001402c
    33a8:	20014028 	.word	0x20014028
			 for (int i = 0; i < numStringsThisBoard; i++)
    33ac:	4bc6      	ldr	r3, [pc, #792]	; (36c8 <handleSPI+0x508>)
    33ae:	7818      	ldrb	r0, [r3, #0]
    33b0:	2800      	cmp	r0, #0
    33b2:	f000 8083 	beq.w	34bc <handleSPI+0x2fc>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    33b6:	49c5      	ldr	r1, [pc, #788]	; (36cc <handleSPI+0x50c>)
			 uint8_t currentByte = offset+1;
    33b8:	1c63      	adds	r3, r4, #1
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    33ba:	ed9f 6ac5 	vldr	s12, [pc, #788]	; 36d0 <handleSPI+0x510>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    33be:	680a      	ldr	r2, [r1, #0]
    33c0:	b2db      	uxtb	r3, r3
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    33c2:	eddf 6ac4 	vldr	s13, [pc, #784]	; 36d4 <handleSPI+0x514>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    33c6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    33ca:	5cd2      	ldrb	r2, [r2, r3]
    33cc:	0212      	lsls	r2, r2, #8
    33ce:	ee07 2a90 	vmov	s15, r2
    33d2:	680a      	ldr	r2, [r1, #0]
    33d4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    33d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    33dc:	441a      	add	r2, r3
    33de:	7852      	ldrb	r2, [r2, #1]
    33e0:	ee07 2a90 	vmov	s15, r2
    33e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    33e8:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    33ec:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    33f0:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    33f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    33f8:	d507      	bpl.n	340a <handleSPI+0x24a>
    33fa:	eeb5 7a40 	vcmp.f32	s14, #0.0
    33fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3402:	dd02      	ble.n	340a <handleSPI+0x24a>
					stringMIDIPitches[i] = myPitch;
    3404:	4ab4      	ldr	r2, [pc, #720]	; (36d8 <handleSPI+0x518>)
    3406:	ed82 7a00 	vstr	s14, [r2]
			 for (int i = 0; i < numStringsThisBoard; i++)
    340a:	2801      	cmp	r0, #1
    340c:	d056      	beq.n	34bc <handleSPI+0x2fc>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    340e:	680a      	ldr	r2, [r1, #0]
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3410:	ed9f 6aaf 	vldr	s12, [pc, #700]	; 36d0 <handleSPI+0x510>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3414:	3201      	adds	r2, #1
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3416:	eddf 6aaf 	vldr	s13, [pc, #700]	; 36d4 <handleSPI+0x514>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    341a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    341e:	5cd2      	ldrb	r2, [r2, r3]
    3420:	0212      	lsls	r2, r2, #8
    3422:	ee07 2a90 	vmov	s15, r2
    3426:	680a      	ldr	r2, [r1, #0]
    3428:	3201      	adds	r2, #1
    342a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    342e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3432:	441a      	add	r2, r3
    3434:	7852      	ldrb	r2, [r2, #1]
    3436:	ee07 2a90 	vmov	s15, r2
    343a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    343e:	ee77 7a87 	vadd.f32	s15, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3442:	eef4 7a46 	vcmp.f32	s15, s12
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3446:	ee27 7aa6 	vmul.f32	s14, s15, s13
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    344a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    344e:	d507      	bpl.n	3460 <handleSPI+0x2a0>
    3450:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3458:	dd02      	ble.n	3460 <handleSPI+0x2a0>
					stringMIDIPitches[i] = myPitch;
    345a:	4a9f      	ldr	r2, [pc, #636]	; (36d8 <handleSPI+0x518>)
    345c:	ed82 7a01 	vstr	s14, [r2, #4]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3460:	2802      	cmp	r0, #2
    3462:	d02b      	beq.n	34bc <handleSPI+0x2fc>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3464:	680a      	ldr	r2, [r1, #0]
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3466:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 36d4 <handleSPI+0x514>
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    346a:	3202      	adds	r2, #2
    346c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3470:	5cd2      	ldrb	r2, [r2, r3]
    3472:	0212      	lsls	r2, r2, #8
    3474:	ee07 2a90 	vmov	s15, r2
    3478:	680a      	ldr	r2, [r1, #0]
    347a:	3202      	adds	r2, #2
    347c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3480:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3484:	441a      	add	r2, r3
    3486:	7852      	ldrb	r2, [r2, #1]
    3488:	ee06 2a90 	vmov	s13, r2
    348c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    3490:	ee77 7aa6 	vadd.f32	s15, s15, s13
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3494:	ee27 7a87 	vmul.f32	s14, s15, s14
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3498:	eeb5 7a40 	vcmp.f32	s14, #0.0
    349c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34a0:	dd09      	ble.n	34b6 <handleSPI+0x2f6>
    34a2:	eddf 6a8b 	vldr	s13, [pc, #556]	; 36d0 <handleSPI+0x510>
    34a6:	eef4 7a66 	vcmp.f32	s15, s13
    34aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    34ae:	d502      	bpl.n	34b6 <handleSPI+0x2f6>
					stringMIDIPitches[i] = myPitch;
    34b0:	4a89      	ldr	r2, [pc, #548]	; (36d8 <handleSPI+0x518>)
    34b2:	ed82 7a02 	vstr	s14, [r2, #8]
			 for (int i = 0; i < numStringsThisBoard; i++)
    34b6:	2803      	cmp	r0, #3
    34b8:	f040 841a 	bne.w	3cf0 <handleSPI+0xb30>
			 whichBar = 0;
    34bc:	4b87      	ldr	r3, [pc, #540]	; (36dc <handleSPI+0x51c>)
    34be:	2200      	movs	r2, #0
			 updateStateFromSPIMessage(offset);
    34c0:	4620      	mov	r0, r4
			 whichBar = 0;
    34c2:	701a      	strb	r2, [r3, #0]
			 updateStateFromSPIMessage(offset);
    34c4:	f7fd ffcc 	bl	1460 <updateStateFromSPIMessage>
			if (boardNumber == 0)
    34c8:	4b85      	ldr	r3, [pc, #532]	; (36e0 <handleSPI+0x520>)
    34ca:	781b      	ldrb	r3, [r3, #0]
    34cc:	2b00      	cmp	r3, #0
    34ce:	f47f aea8 	bne.w	3222 <handleSPI+0x62>
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    34d2:	4b84      	ldr	r3, [pc, #528]	; (36e4 <handleSPI+0x524>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    34d4:	442c      	add	r4, r5
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    34d6:	4a84      	ldr	r2, [pc, #528]	; (36e8 <handleSPI+0x528>)
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    34d8:	20fd      	movs	r0, #253	; 0xfd
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    34da:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
    34dc:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
				SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
    34e0:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    34e4:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    34e6:	4d81      	ldr	r5, [pc, #516]	; (36ec <handleSPI+0x52c>)
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    34e8:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34ec:	0049      	lsls	r1, r1, #1
    34ee:	5c50      	ldrb	r0, [r2, r1]
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    34f0:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
    34f2:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
				SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
    34f6:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    34fa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    34fe:	7849      	ldrb	r1, [r1, #1]
    3500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
				SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
    3504:	7819      	ldrb	r1, [r3, #0]
    3506:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    350a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    350e:	7889      	ldrb	r1, [r1, #2]
    3510:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
				SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
    3514:	7819      	ldrb	r1, [r3, #0]
    3516:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    351a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    351e:	78c9      	ldrb	r1, [r1, #3]
    3520:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
				SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
    3524:	7819      	ldrb	r1, [r3, #0]
    3526:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    352a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    352e:	7909      	ldrb	r1, [r1, #4]
    3530:	f884 1046 	strb.w	r1, [r4, #70]	; 0x46
				SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
    3534:	7819      	ldrb	r1, [r3, #0]
    3536:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    353a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    353e:	7949      	ldrb	r1, [r1, #5]
    3540:	f884 1047 	strb.w	r1, [r4, #71]	; 0x47
				SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
    3544:	7819      	ldrb	r1, [r3, #0]
    3546:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    354a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    354e:	7989      	ldrb	r1, [r1, #6]
    3550:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
				SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
    3554:	7819      	ldrb	r1, [r3, #0]
    3556:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    355a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    355e:	79c9      	ldrb	r1, [r1, #7]
    3560:	f884 1049 	strb.w	r1, [r4, #73]	; 0x49
				SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
    3564:	7819      	ldrb	r1, [r3, #0]
    3566:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    356a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    356e:	7a09      	ldrb	r1, [r1, #8]
    3570:	f884 104a 	strb.w	r1, [r4, #74]	; 0x4a
				SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
    3574:	7819      	ldrb	r1, [r3, #0]
    3576:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    357a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    357e:	7a49      	ldrb	r1, [r1, #9]
    3580:	f884 104b 	strb.w	r1, [r4, #75]	; 0x4b
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3584:	7819      	ldrb	r1, [r3, #0]
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    3586:	782e      	ldrb	r6, [r5, #0]
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3588:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
    358c:	f884 6050 	strb.w	r6, [r4, #80]	; 0x50
				SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
    3590:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    3594:	7a89      	ldrb	r1, [r1, #10]
    3596:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
				SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
    359a:	7819      	ldrb	r1, [r3, #0]
    359c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35a0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35a4:	7ac9      	ldrb	r1, [r1, #11]
    35a6:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
				SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
    35aa:	7819      	ldrb	r1, [r3, #0]
    35ac:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35b0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    35b4:	7b09      	ldrb	r1, [r1, #12]
    35b6:	f884 104e 	strb.w	r1, [r4, #78]	; 0x4e
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    35ba:	7819      	ldrb	r1, [r3, #0]
    35bc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    35c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    35c4:	eb06 0186 	add.w	r1, r6, r6, lsl #2
				whichMacroToSendName = (whichMacroToSendName + 1);
    35c8:	3601      	adds	r6, #1
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    35ca:	7b52      	ldrb	r2, [r2, #13]
				whichMacroToSendName = (whichMacroToSendName + 1);
    35cc:	b2f6      	uxtb	r6, r6
				SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
    35ce:	f884 204f 	strb.w	r2, [r4, #79]	; 0x4f
				SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
    35d2:	781a      	ldrb	r2, [r3, #0]
    35d4:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
    35d8:	00d0      	lsls	r0, r2, #3
    35da:	4a45      	ldr	r2, [pc, #276]	; (36f0 <handleSPI+0x530>)
    35dc:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35e0:	5c10      	ldrb	r0, [r2, r0]
    35e2:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
				SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
    35e6:	7818      	ldrb	r0, [r3, #0]
    35e8:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    35ec:	00c0      	lsls	r0, r0, #3
    35ee:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    35f2:	4410      	add	r0, r2
    35f4:	7840      	ldrb	r0, [r0, #1]
    35f6:	f884 0052 	strb.w	r0, [r4, #82]	; 0x52
				SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
    35fa:	7818      	ldrb	r0, [r3, #0]
    35fc:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3600:	00c0      	lsls	r0, r0, #3
    3602:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3606:	4410      	add	r0, r2
    3608:	7880      	ldrb	r0, [r0, #2]
    360a:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
				SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
    360e:	7818      	ldrb	r0, [r3, #0]
    3610:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3614:	00c0      	lsls	r0, r0, #3
    3616:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    361a:	4410      	add	r0, r2
    361c:	78c0      	ldrb	r0, [r0, #3]
    361e:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
				SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
    3622:	7818      	ldrb	r0, [r3, #0]
    3624:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3628:	00c0      	lsls	r0, r0, #3
    362a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    362e:	4410      	add	r0, r2
    3630:	7900      	ldrb	r0, [r0, #4]
    3632:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
				SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
    3636:	7818      	ldrb	r0, [r3, #0]
    3638:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    363c:	00c0      	lsls	r0, r0, #3
    363e:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3642:	4410      	add	r0, r2
    3644:	7940      	ldrb	r0, [r0, #5]
    3646:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
				SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
    364a:	7818      	ldrb	r0, [r3, #0]
    364c:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3650:	00c0      	lsls	r0, r0, #3
    3652:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    3656:	4410      	add	r0, r2
    3658:	7980      	ldrb	r0, [r0, #6]
    365a:	f884 0057 	strb.w	r0, [r4, #87]	; 0x57
				SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
    365e:	7818      	ldrb	r0, [r3, #0]
    3660:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3664:	00c0      	lsls	r0, r0, #3
    3666:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    366a:	4410      	add	r0, r2
    366c:	79c0      	ldrb	r0, [r0, #7]
    366e:	f884 0058 	strb.w	r0, [r4, #88]	; 0x58
				SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
    3672:	7818      	ldrb	r0, [r3, #0]
    3674:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    3678:	00c0      	lsls	r0, r0, #3
    367a:	eb00 0041 	add.w	r0, r0, r1, lsl #1
    367e:	4410      	add	r0, r2
    3680:	7a00      	ldrb	r0, [r0, #8]
    3682:	f884 0059 	strb.w	r0, [r4, #89]	; 0x59
				SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
    3686:	7818      	ldrb	r0, [r3, #0]
    3688:	ebc0 1000 	rsb	r0, r0, r0, lsl #4
    368c:	00c0      	lsls	r0, r0, #3
    368e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    3692:	440a      	add	r2, r1
    3694:	7a52      	ldrb	r2, [r2, #9]
    3696:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a
				SPI_LEVERS_TX[offset+27] = 13;
    369a:	220d      	movs	r2, #13
    369c:	f884 205b 	strb.w	r2, [r4, #91]	; 0x5b
				SPI_LEVERS_TX[offset+28] = 13;
    36a0:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
				SPI_LEVERS_TX[offset+29] = 13;
    36a4:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    36a8:	4a12      	ldr	r2, [pc, #72]	; (36f4 <handleSPI+0x534>)
    36aa:	8812      	ldrh	r2, [r2, #0]
    36ac:	b292      	uxth	r2, r2
    36ae:	3a00      	subs	r2, #0
    36b0:	bf18      	it	ne
    36b2:	2201      	movne	r2, #1
				if (whichMacroToSendName >= 12)
    36b4:	2e0b      	cmp	r6, #11
				SPI_LEVERS_TX[offset+30] = (sampleClippedCountdown > 0); //report whether there was a clip on the first board in the last 65535 samples
    36b6:	f884 205e 	strb.w	r2, [r4, #94]	; 0x5e
				SPI_LEVERS_TX[offset+31] = 254;
    36ba:	f04f 02fe 	mov.w	r2, #254	; 0xfe
    36be:	f884 205f 	strb.w	r2, [r4, #95]	; 0x5f
				if (whichMacroToSendName >= 12)
    36c2:	d95e      	bls.n	3782 <handleSPI+0x5c2>
    36c4:	e018      	b.n	36f8 <handleSPI+0x538>
    36c6:	bf00      	nop
    36c8:	200004b1 	.word	0x200004b1
    36cc:	20004f44 	.word	0x20004f44
    36d0:	478bff74 	.word	0x478bff74
    36d4:	3b000080 	.word	0x3b000080
    36d8:	20013f54 	.word	0x20013f54
    36dc:	20013f90 	.word	0x20013f90
    36e0:	20014025 	.word	0x20014025
    36e4:	2001c1b1 	.word	0x2001c1b1
    36e8:	30042000 	.word	0x30042000
    36ec:	2001c1b0 	.word	0x2001c1b0
    36f0:	30043380 	.word	0x30043380
    36f4:	200054aa 	.word	0x200054aa
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    36f8:	781a      	ldrb	r2, [r3, #0]
					whichMacroToSendName = 0;
    36fa:	2100      	movs	r1, #0
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    36fc:	3201      	adds	r2, #1
					whichMacroToSendName = 0;
    36fe:	7029      	strb	r1, [r5, #0]
					whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
    3700:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    3704:	701a      	strb	r2, [r3, #0]
}
    3706:	b005      	add	sp, #20
    3708:	ecbd 8b02 	vpop	{d8}
    370c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3710:	2bfd      	cmp	r3, #253	; 0xfd
    3712:	f47f aed9 	bne.w	34c8 <handleSPI+0x308>
			if(writingState == ReceivingPreset)
    3716:	4b4a      	ldr	r3, [pc, #296]	; (3840 <handleSPI+0x680>)
    3718:	7819      	ldrb	r1, [r3, #0]
    371a:	2902      	cmp	r1, #2
    371c:	f47f aed4 	bne.w	34c8 <handleSPI+0x308>
				 presetNumberToLoad = presetNumberToSave;
    3720:	4848      	ldr	r0, [pc, #288]	; (3844 <handleSPI+0x684>)
				 writingState = 0;
    3722:	701a      	strb	r2, [r3, #0]
				 presetNumberToLoad = presetNumberToSave;
    3724:	7803      	ldrb	r3, [r0, #0]
				 presetWaitingToParse = bufferPos;
    3726:	4a48      	ldr	r2, [pc, #288]	; (3848 <handleSPI+0x688>)
				 presetNumberToLoad = presetNumberToSave;
    3728:	4948      	ldr	r1, [pc, #288]	; (384c <handleSPI+0x68c>)
    372a:	b2db      	uxtb	r3, r3
    372c:	700b      	strb	r3, [r1, #0]
				 presetWaitingToParse = bufferPos;
    372e:	8813      	ldrh	r3, [r2, #0]
    3730:	4947      	ldr	r1, [pc, #284]	; (3850 <handleSPI+0x690>)
    3732:	b29b      	uxth	r3, r3
    3734:	600b      	str	r3, [r1, #0]
				 presetWaitingToWrite = bufferPos;
    3736:	8813      	ldrh	r3, [r2, #0]
    3738:	4a46      	ldr	r2, [pc, #280]	; (3854 <handleSPI+0x694>)
    373a:	b29b      	uxth	r3, r3
    373c:	6013      	str	r3, [r2, #0]
    373e:	e6c3      	b.n	34c8 <handleSPI+0x308>
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    3740:	4b45      	ldr	r3, [pc, #276]	; (3858 <handleSPI+0x698>)
    3742:	20fc      	movs	r0, #252	; 0xfc
    3744:	4945      	ldr	r1, [pc, #276]	; (385c <handleSPI+0x69c>)
    3746:	f8df b138 	ldr.w	fp, [pc, #312]	; 3880 <handleSPI+0x6c0>
			brainFirmwareSendInProgress = 1;
    374a:	6015      	str	r5, [r2, #0]
			SPI_LEVERS_TX[offset] = 252; //special byte that says I'm gonna send you new firmware so reboot into bootloader;
    374c:	190a      	adds	r2, r1, r4
    374e:	1c5d      	adds	r5, r3, #1
    3750:	f8db 1000 	ldr.w	r1, [fp]
    3754:	f103 0464 	add.w	r4, r3, #100	; 0x64
    3758:	f882 0040 	strb.w	r0, [r2, #64]	; 0x40
			for (uint8_t i = 0; i<100; i++)
    375c:	461a      	mov	r2, r3
				if (brainFirmwareBuffer[i] ==  0x3a)
    375e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
    3762:	283a      	cmp	r0, #58	; 0x3a
    3764:	d101      	bne.n	376a <handleSPI+0x5aa>
					brainFirmwareBufferIndex = i+1; // start after the header, so it's the first real byte after the ":"
    3766:	3202      	adds	r2, #2
    3768:	1b51      	subs	r1, r2, r5
			for (uint8_t i = 0; i<100; i++)
    376a:	429c      	cmp	r4, r3
    376c:	d1f6      	bne.n	375c <handleSPI+0x59c>
			positionInRowLine = 0;
    376e:	4b3c      	ldr	r3, [pc, #240]	; (3860 <handleSPI+0x6a0>)
    3770:	2200      	movs	r2, #0
    3772:	f8cb 1000 	str.w	r1, [fp]
    3776:	801a      	strh	r2, [r3, #0]
}
    3778:	b005      	add	sp, #20
    377a:	ecbd 8b02 	vpop	{d8}
    377e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				whichMacroToSendName = (whichMacroToSendName + 1);
    3782:	702e      	strb	r6, [r5, #0]
}
    3784:	b005      	add	sp, #20
    3786:	ecbd 8b02 	vpop	{d8}
    378a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    378e:	ea48 0303 	orr.w	r3, r8, r3
    3792:	e5db      	b.n	334c <handleSPI+0x18c>
    3794:	011b      	lsls	r3, r3, #4
    3796:	b2db      	uxtb	r3, r3
    3798:	e5c0      	b.n	331c <handleSPI+0x15c>
		return (uint8_t) (10 + value - 'a');
    379a:	f1a6 0357 	sub.w	r3, r6, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    379e:	011b      	lsls	r3, r3, #4
    37a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'a');
    37a4:	e5ba      	b.n	331c <handleSPI+0x15c>
    37a6:	f1ae 0857 	sub.w	r8, lr, #87	; 0x57
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    37aa:	ea43 0308 	orr.w	r3, r3, r8
    37ae:	b2db      	uxtb	r3, r3
		return (uint8_t) (10 + value - 'a');
    37b0:	e5cc      	b.n	334c <handleSPI+0x18c>
		return (uint8_t) (10 + value - 'A');
    37b2:	f1a6 0337 	sub.w	r3, r6, #55	; 0x37
	return ((fromHex(input1)<<4) | (fromHex(input2)));
    37b6:	011b      	lsls	r3, r3, #4
    37b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
		return (uint8_t) (10 + value - 'A');
    37bc:	e5ae      	b.n	331c <handleSPI+0x15c>
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    37be:	18bb      	adds	r3, r7, r2
							brainFirmwareBufferIndex = brainFirmwareBufferIndex+j+1; // start after the header, so it's the first real byte after the ":"
    37c0:	4662      	mov	r2, ip
						if (brainFirmwareBuffer[brainFirmwareBufferIndex+j] == 0x3a)
    37c2:	f893 e002 	ldrb.w	lr, [r3, #2]
    37c6:	e563      	b.n	3290 <handleSPI+0xd0>
			 if (writingState != ReceivingPreset)
    37c8:	4a1d      	ldr	r2, [pc, #116]	; (3840 <handleSPI+0x680>)
    37ca:	7813      	ldrb	r3, [r2, #0]
    37cc:	2b02      	cmp	r3, #2
    37ce:	f000 82c2 	beq.w	3d56 <handleSPI+0xb96>
				 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
    37d2:	4b24      	ldr	r3, [pc, #144]	; (3864 <handleSPI+0x6a4>)
    37d4:	2102      	movs	r1, #2
    37d6:	0758      	lsls	r0, r3, #29
    37d8:	7011      	strb	r1, [r2, #0]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    37da:	f040 85ca 	bne.w	4372 <handleSPI+0x11b2>
    37de:	f503 6280 	add.w	r2, r3, #1024	; 0x400
						audioOutBuffer[i] = 0;
    37e2:	2000      	movs	r0, #0
    37e4:	2100      	movs	r1, #0
    37e6:	e8e3 0102 	strd	r0, r1, [r3], #8
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    37ea:	429a      	cmp	r2, r3
    37ec:	d1fb      	bne.n	37e6 <handleSPI+0x626>
				 diskBusy = 1;
    37ee:	4a1e      	ldr	r2, [pc, #120]	; (3868 <handleSPI+0x6a8>)
    37f0:	2101      	movs	r1, #1
				 audioMasterLevel = 0.0f;
    37f2:	4b1e      	ldr	r3, [pc, #120]	; (386c <handleSPI+0x6ac>)
				 diskBusy = 1;
    37f4:	7011      	strb	r1, [r2, #0]
				 audioMasterLevel = 0.0f;
    37f6:	2200      	movs	r2, #0
				 bufferPos = 0;
    37f8:	4913      	ldr	r1, [pc, #76]	; (3848 <handleSPI+0x688>)
				 audioMasterLevel = 0.0f;
    37fa:	601a      	str	r2, [r3, #0]
				 bufferPos = 0;
    37fc:	2300      	movs	r3, #0
    37fe:	800b      	strh	r3, [r1, #0]
			 presetNumberToSave = SPI_LEVERS_RX[offset + 1];
    3800:	192b      	adds	r3, r5, r4
    3802:	4a10      	ldr	r2, [pc, #64]	; (3844 <handleSPI+0x684>)
    3804:	4e1a      	ldr	r6, [pc, #104]	; (3870 <handleSPI+0x6b0>)
    3806:	785b      	ldrb	r3, [r3, #1]
    3808:	4f1a      	ldr	r7, [pc, #104]	; (3874 <handleSPI+0x6b4>)
    380a:	7013      	strb	r3, [r2, #0]
			 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
    380c:	1ca3      	adds	r3, r4, #2
    380e:	b2db      	uxtb	r3, r3
    3810:	1e5a      	subs	r2, r3, #1
    3812:	441e      	add	r6, r3
    3814:	442a      	add	r2, r5
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3816:	880b      	ldrh	r3, [r1, #0]
    3818:	f812 0f01 	ldrb.w	r0, [r2, #1]!
    381c:	b29b      	uxth	r3, r3
			 for (int i = 0; i < 28; i++)
    381e:	4296      	cmp	r6, r2
				 buffer[bufferPos++] = SPI_LEVERS_RX[currentByte + i];
    3820:	54f8      	strb	r0, [r7, r3]
    3822:	f103 0301 	add.w	r3, r3, #1
    3826:	b29b      	uxth	r3, r3
    3828:	800b      	strh	r3, [r1, #0]
			 for (int i = 0; i < 28; i++)
    382a:	d1f4      	bne.n	3816 <handleSPI+0x656>
    382c:	e64c      	b.n	34c8 <handleSPI+0x308>
			if (boardNumber == 0)
    382e:	4b12      	ldr	r3, [pc, #72]	; (3878 <handleSPI+0x6b8>)
    3830:	781b      	ldrb	r3, [r3, #0]
    3832:	2b00      	cmp	r3, #0
    3834:	f47f acf5 	bne.w	3222 <handleSPI+0x62>
				brainFirmwareUpdateRequested = 1;
    3838:	4b10      	ldr	r3, [pc, #64]	; (387c <handleSPI+0x6bc>)
    383a:	2201      	movs	r2, #1
    383c:	601a      	str	r2, [r3, #0]
    383e:	e648      	b.n	34d2 <handleSPI+0x312>
    3840:	2001c1b2 	.word	0x2001c1b2
    3844:	20019cf7 	.word	0x20019cf7
    3848:	2001403c 	.word	0x2001403c
    384c:	20019cf6 	.word	0x20019cf6
    3850:	20019cfc 	.word	0x20019cfc
    3854:	20019d00 	.word	0x20019d00
    3858:	61dfffff 	.word	0x61dfffff
    385c:	30000800 	.word	0x30000800
    3860:	20019ce4 	.word	0x20019ce4
    3864:	30000000 	.word	0x30000000
    3868:	20014078 	.word	0x20014078
    386c:	20000724 	.word	0x20000724
    3870:	3000081b 	.word	0x3000081b
    3874:	30042380 	.word	0x30042380
    3878:	20014025 	.word	0x20014025
    387c:	20014038 	.word	0x20014038
    3880:	20014028 	.word	0x20014028
			 uint8_t currentByte = offset+1;
    3884:	f100 0801 	add.w	r8, r0, #1
				if (knobFrozen[i])
    3888:	4fb9      	ldr	r7, [pc, #740]	; (3b70 <handleSPI+0x9b0>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    388a:	fa5f f888 	uxtb.w	r8, r8
				if (knobFrozen[i])
    388e:	783b      	ldrb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3890:	f815 9008 	ldrb.w	r9, [r5, r8]
				if (knobFrozen[i])
    3894:	2b00      	cmp	r3, #0
    3896:	f000 826e 	beq.w	3d76 <handleSPI+0xbb6>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    389a:	4eb6      	ldr	r6, [pc, #728]	; (3b74 <handleSPI+0x9b4>)
    389c:	7833      	ldrb	r3, [r6, #0]
    389e:	1c9a      	adds	r2, r3, #2
    38a0:	4591      	cmp	r9, r2
    38a2:	dc02      	bgt.n	38aa <handleSPI+0x6ea>
    38a4:	3b02      	subs	r3, #2
    38a6:	4599      	cmp	r9, r3
    38a8:	da03      	bge.n	38b2 <handleSPI+0x6f2>
						knobFrozen[i] = 0;
    38aa:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    38ac:	f886 9000 	strb.w	r9, [r6]
						knobFrozen[i] = 0;
    38b0:	703b      	strb	r3, [r7, #0]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    38b2:	eb05 0308 	add.w	r3, r5, r8
    38b6:	f893 9001 	ldrb.w	r9, [r3, #1]
				if (knobFrozen[i])
    38ba:	787b      	ldrb	r3, [r7, #1]
    38bc:	2b00      	cmp	r3, #0
    38be:	f000 8277 	beq.w	3db0 <handleSPI+0xbf0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    38c2:	7873      	ldrb	r3, [r6, #1]
    38c4:	1c9a      	adds	r2, r3, #2
    38c6:	454a      	cmp	r2, r9
    38c8:	db02      	blt.n	38d0 <handleSPI+0x710>
    38ca:	3b02      	subs	r3, #2
    38cc:	454b      	cmp	r3, r9
    38ce:	dd03      	ble.n	38d8 <handleSPI+0x718>
						knobFrozen[i] = 0;
    38d0:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    38d2:	f886 9001 	strb.w	r9, [r6, #1]
						knobFrozen[i] = 0;
    38d6:	707b      	strb	r3, [r7, #1]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    38d8:	eb05 0308 	add.w	r3, r5, r8
    38dc:	f893 9002 	ldrb.w	r9, [r3, #2]
				if (knobFrozen[i])
    38e0:	78bb      	ldrb	r3, [r7, #2]
    38e2:	2b00      	cmp	r3, #0
    38e4:	f000 8256 	beq.w	3d94 <handleSPI+0xbd4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    38e8:	78b3      	ldrb	r3, [r6, #2]
    38ea:	1c9a      	adds	r2, r3, #2
    38ec:	454a      	cmp	r2, r9
    38ee:	db02      	blt.n	38f6 <handleSPI+0x736>
    38f0:	3b02      	subs	r3, #2
    38f2:	4599      	cmp	r9, r3
    38f4:	da03      	bge.n	38fe <handleSPI+0x73e>
						knobFrozen[i] = 0;
    38f6:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    38f8:	f886 9002 	strb.w	r9, [r6, #2]
						knobFrozen[i] = 0;
    38fc:	70bb      	strb	r3, [r7, #2]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    38fe:	eb05 0308 	add.w	r3, r5, r8
    3902:	f893 9003 	ldrb.w	r9, [r3, #3]
				if (knobFrozen[i])
    3906:	78fb      	ldrb	r3, [r7, #3]
    3908:	2b00      	cmp	r3, #0
    390a:	f000 82c1 	beq.w	3e90 <handleSPI+0xcd0>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    390e:	78f3      	ldrb	r3, [r6, #3]
    3910:	1c9a      	adds	r2, r3, #2
    3912:	454a      	cmp	r2, r9
    3914:	db02      	blt.n	391c <handleSPI+0x75c>
    3916:	3b02      	subs	r3, #2
    3918:	454b      	cmp	r3, r9
    391a:	dd03      	ble.n	3924 <handleSPI+0x764>
						knobFrozen[i] = 0;
    391c:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    391e:	f886 9003 	strb.w	r9, [r6, #3]
						knobFrozen[i] = 0;
    3922:	70fb      	strb	r3, [r7, #3]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3924:	eb05 0308 	add.w	r3, r5, r8
    3928:	f893 9004 	ldrb.w	r9, [r3, #4]
				if (knobFrozen[i])
    392c:	793b      	ldrb	r3, [r7, #4]
    392e:	2b00      	cmp	r3, #0
    3930:	f000 82a0 	beq.w	3e74 <handleSPI+0xcb4>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3934:	7933      	ldrb	r3, [r6, #4]
    3936:	1c9a      	adds	r2, r3, #2
    3938:	4591      	cmp	r9, r2
    393a:	dc02      	bgt.n	3942 <handleSPI+0x782>
    393c:	3b02      	subs	r3, #2
    393e:	4599      	cmp	r9, r3
    3940:	da03      	bge.n	394a <handleSPI+0x78a>
						knobFrozen[i] = 0;
    3942:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3944:	f886 9004 	strb.w	r9, [r6, #4]
						knobFrozen[i] = 0;
    3948:	713b      	strb	r3, [r7, #4]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    394a:	eb05 0308 	add.w	r3, r5, r8
    394e:	f893 9005 	ldrb.w	r9, [r3, #5]
				if (knobFrozen[i])
    3952:	797b      	ldrb	r3, [r7, #5]
    3954:	2b00      	cmp	r3, #0
    3956:	f000 827f 	beq.w	3e58 <handleSPI+0xc98>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    395a:	7973      	ldrb	r3, [r6, #5]
    395c:	1c9a      	adds	r2, r3, #2
    395e:	4591      	cmp	r9, r2
    3960:	dc02      	bgt.n	3968 <handleSPI+0x7a8>
    3962:	3b02      	subs	r3, #2
    3964:	4599      	cmp	r9, r3
    3966:	da03      	bge.n	3970 <handleSPI+0x7b0>
						knobFrozen[i] = 0;
    3968:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    396a:	f886 9005 	strb.w	r9, [r6, #5]
						knobFrozen[i] = 0;
    396e:	717b      	strb	r3, [r7, #5]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3970:	eb05 0308 	add.w	r3, r5, r8
    3974:	f893 9006 	ldrb.w	r9, [r3, #6]
				if (knobFrozen[i])
    3978:	79bb      	ldrb	r3, [r7, #6]
    397a:	2b00      	cmp	r3, #0
    397c:	f000 825e 	beq.w	3e3c <handleSPI+0xc7c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3980:	79b3      	ldrb	r3, [r6, #6]
    3982:	1c9a      	adds	r2, r3, #2
    3984:	4591      	cmp	r9, r2
    3986:	dc02      	bgt.n	398e <handleSPI+0x7ce>
    3988:	3b02      	subs	r3, #2
    398a:	4599      	cmp	r9, r3
    398c:	da03      	bge.n	3996 <handleSPI+0x7d6>
						knobFrozen[i] = 0;
    398e:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3990:	f886 9006 	strb.w	r9, [r6, #6]
						knobFrozen[i] = 0;
    3994:	71bb      	strb	r3, [r7, #6]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3996:	eb05 0308 	add.w	r3, r5, r8
    399a:	f893 9007 	ldrb.w	r9, [r3, #7]
				if (knobFrozen[i])
    399e:	79fb      	ldrb	r3, [r7, #7]
    39a0:	2b00      	cmp	r3, #0
    39a2:	f000 823d 	beq.w	3e20 <handleSPI+0xc60>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39a6:	79f3      	ldrb	r3, [r6, #7]
    39a8:	1c9a      	adds	r2, r3, #2
    39aa:	4591      	cmp	r9, r2
    39ac:	dc02      	bgt.n	39b4 <handleSPI+0x7f4>
    39ae:	3b02      	subs	r3, #2
    39b0:	4599      	cmp	r9, r3
    39b2:	da03      	bge.n	39bc <handleSPI+0x7fc>
						knobFrozen[i] = 0;
    39b4:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    39b6:	f886 9007 	strb.w	r9, [r6, #7]
						knobFrozen[i] = 0;
    39ba:	71fb      	strb	r3, [r7, #7]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    39bc:	eb05 0308 	add.w	r3, r5, r8
    39c0:	f893 9008 	ldrb.w	r9, [r3, #8]
				if (knobFrozen[i])
    39c4:	7a3b      	ldrb	r3, [r7, #8]
    39c6:	2b00      	cmp	r3, #0
    39c8:	f000 821c 	beq.w	3e04 <handleSPI+0xc44>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39cc:	7a33      	ldrb	r3, [r6, #8]
    39ce:	1c9a      	adds	r2, r3, #2
    39d0:	4591      	cmp	r9, r2
    39d2:	dc02      	bgt.n	39da <handleSPI+0x81a>
    39d4:	3b02      	subs	r3, #2
    39d6:	4599      	cmp	r9, r3
    39d8:	da03      	bge.n	39e2 <handleSPI+0x822>
						knobFrozen[i] = 0;
    39da:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    39dc:	f886 9008 	strb.w	r9, [r6, #8]
						knobFrozen[i] = 0;
    39e0:	723b      	strb	r3, [r7, #8]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    39e2:	eb05 0308 	add.w	r3, r5, r8
    39e6:	f893 9009 	ldrb.w	r9, [r3, #9]
				if (knobFrozen[i])
    39ea:	7a7b      	ldrb	r3, [r7, #9]
    39ec:	2b00      	cmp	r3, #0
    39ee:	f000 81fb 	beq.w	3de8 <handleSPI+0xc28>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    39f2:	7a73      	ldrb	r3, [r6, #9]
    39f4:	1c9a      	adds	r2, r3, #2
    39f6:	4591      	cmp	r9, r2
    39f8:	dc02      	bgt.n	3a00 <handleSPI+0x840>
    39fa:	3b02      	subs	r3, #2
    39fc:	4599      	cmp	r9, r3
    39fe:	da03      	bge.n	3a08 <handleSPI+0x848>
						knobFrozen[i] = 0;
    3a00:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a02:	f886 9009 	strb.w	r9, [r6, #9]
						knobFrozen[i] = 0;
    3a06:	727b      	strb	r3, [r7, #9]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a08:	eb05 0308 	add.w	r3, r5, r8
    3a0c:	f893 900a 	ldrb.w	r9, [r3, #10]
				if (knobFrozen[i])
    3a10:	7abb      	ldrb	r3, [r7, #10]
    3a12:	2b00      	cmp	r3, #0
    3a14:	f000 81da 	beq.w	3dcc <handleSPI+0xc0c>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3a18:	7ab3      	ldrb	r3, [r6, #10]
    3a1a:	1c9a      	adds	r2, r3, #2
    3a1c:	4591      	cmp	r9, r2
    3a1e:	dc02      	bgt.n	3a26 <handleSPI+0x866>
    3a20:	3b02      	subs	r3, #2
    3a22:	4599      	cmp	r9, r3
    3a24:	da03      	bge.n	3a2e <handleSPI+0x86e>
						knobFrozen[i] = 0;
    3a26:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a28:	f886 900a 	strb.w	r9, [r6, #10]
						knobFrozen[i] = 0;
    3a2c:	72bb      	strb	r3, [r7, #10]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a2e:	44a8      	add	r8, r5
				if (knobFrozen[i])
    3a30:	7afb      	ldrb	r3, [r7, #11]
				uint8_t newByte = SPI_LEVERS_RX[i + currentByte];
    3a32:	f898 800b 	ldrb.w	r8, [r8, #11]
				if (knobFrozen[i])
    3a36:	2b00      	cmp	r3, #0
    3a38:	f000 818f 	beq.w	3d5a <handleSPI+0xb9a>
					if ((newByte > (prevKnobByte[i] + 2)) || (newByte < (prevKnobByte[i] - 2)))
    3a3c:	7af3      	ldrb	r3, [r6, #11]
    3a3e:	1c9a      	adds	r2, r3, #2
    3a40:	4590      	cmp	r8, r2
    3a42:	dc02      	bgt.n	3a4a <handleSPI+0x88a>
    3a44:	3b02      	subs	r3, #2
    3a46:	4598      	cmp	r8, r3
    3a48:	da03      	bge.n	3a52 <handleSPI+0x892>
						knobFrozen[i] = 0;
    3a4a:	2300      	movs	r3, #0
						prevKnobByte[i] = newByte;
    3a4c:	f886 800b 	strb.w	r8, [r6, #11]
						knobFrozen[i] = 0;
    3a50:	72fb      	strb	r3, [r7, #11]
			currentByte += 12;
    3a52:	f104 070d 	add.w	r7, r4, #13
    3a56:	4e48      	ldr	r6, [pc, #288]	; (3b78 <handleSPI+0x9b8>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3a58:	ed9f 8a48 	vldr	s16, [pc, #288]	; 3b7c <handleSPI+0x9bc>
    3a5c:	b2ff      	uxtb	r7, r7
    3a5e:	f106 0828 	add.w	r8, r6, #40	; 0x28
    3a62:	3f01      	subs	r7, #1
    3a64:	442f      	add	r7, r5
    3a66:	f817 3f01 	ldrb.w	r3, [r7, #1]!
    3a6a:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
    3a6c:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS_RX[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3a6e:	ee00 3a10 	vmov	s0, r3
    3a72:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    3a76:	ee20 0a08 	vmul.f32	s0, s0, s16
    3a7a:	f005 ff05 	bl	9888 <__tExpSmooth_setDest_veneer>
			for (int i = 0; i < 10; i++)
    3a7e:	45b0      	cmp	r8, r6
    3a80:	d1f1      	bne.n	3a66 <handleSPI+0x8a6>
			whichBar = 1;
    3a82:	4b3f      	ldr	r3, [pc, #252]	; (3b80 <handleSPI+0x9c0>)
    3a84:	2201      	movs	r2, #1
			updateStateFromSPIMessage(offset);
    3a86:	4620      	mov	r0, r4
			whichBar = 1;
    3a88:	701a      	strb	r2, [r3, #0]
			updateStateFromSPIMessage(offset);
    3a8a:	f7fd fce9 	bl	1460 <updateStateFromSPIMessage>
    3a8e:	e51b      	b.n	34c8 <handleSPI+0x308>
			if (presetReady)
    3a90:	4b3c      	ldr	r3, [pc, #240]	; (3b84 <handleSPI+0x9c4>)
    3a92:	681b      	ldr	r3, [r3, #0]
    3a94:	2b00      	cmp	r3, #0
    3a96:	f43f ad17 	beq.w	34c8 <handleSPI+0x308>
				uint8_t currentByte = offset+1;
    3a9a:	1c43      	adds	r3, r0, #1
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3a9c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 3b88 <handleSPI+0x9c8>
    3aa0:	4f3a      	ldr	r7, [pc, #232]	; (3b8c <handleSPI+0x9cc>)
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3aa2:	b2db      	uxtb	r3, r3
    3aa4:	18ea      	adds	r2, r5, r3
    3aa6:	5ceb      	ldrb	r3, [r5, r3]
    3aa8:	7856      	ldrb	r6, [r2, #1]
    3aaa:	eb06 2603 	add.w	r6, r6, r3, lsl #8
				currentByte = currentByte + 2;
    3aae:	1cc3      	adds	r3, r0, #3
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3ab0:	b2db      	uxtb	r3, r3
				uint16_t whichParam = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3ab2:	b2b6      	uxth	r6, r6
					params[whichParam].zeroToOneVal[v] = INV_TWO_TO_16 * ((SPI_LEVERS_RX[currentByte] << 8) + SPI_LEVERS_RX[currentByte+1]);
    3ab4:	18e9      	adds	r1, r5, r3
    3ab6:	5cea      	ldrb	r2, [r5, r3]
    3ab8:	f1a6 083f 	sub.w	r8, r6, #63	; 0x3f
    3abc:	784b      	ldrb	r3, [r1, #1]
    3abe:	eb03 2302 	add.w	r3, r3, r2, lsl #8
    3ac2:	fa1f f288 	uxth.w	r2, r8
    3ac6:	ee07 3a90 	vmov	s15, r3
    3aca:	00f3      	lsls	r3, r6, #3
    3acc:	2a18      	cmp	r2, #24
    3ace:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ad2:	9301      	str	r3, [sp, #4]
    3ad4:	ebc6 03c6 	rsb	r3, r6, r6, lsl #3
    3ad8:	ee67 7a87 	vmul.f32	s15, s15, s14
    3adc:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    3ae0:	edc3 7a00 	vstr	s15, [r3]
    3ae4:	edc3 7a01 	vstr	s15, [r3, #4]
				if ((whichParam == Effect1FXType) || (whichParam == Effect2FXType) || (whichParam == Effect3FXType) || (whichParam == Effect4FXType))
    3ae8:	d805      	bhi.n	3af6 <handleSPI+0x936>
    3aea:	f04f 3301 	mov.w	r3, #16843009	; 0x1010101
    3aee:	40d3      	lsrs	r3, r2
    3af0:	07d9      	lsls	r1, r3, #31
    3af2:	f100 8260 	bmi.w	3fb6 <handleSPI+0xdf6>
    3af6:	00f3      	lsls	r3, r6, #3
			 for (int i = 0; i < numStringsThisBoard; i++)
    3af8:	f04f 0b00 	mov.w	fp, #0
    3afc:	46a1      	mov	r9, r4
    3afe:	eba3 0806 	sub.w	r8, r3, r6
    3b02:	465c      	mov	r4, fp
    3b04:	eb07 0888 	add.w	r8, r7, r8, lsl #2
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3b08:	46c2      	mov	sl, r8
    3b0a:	ecb8 0a01 	vldmia	r8!, {s0}
    3b0e:	f8da 3010 	ldr.w	r3, [sl, #16]
    3b12:	4798      	blx	r3
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3b14:	4621      	mov	r1, r4
					params[whichParam].realVal[v] = params[whichParam].scaleFunc(params[whichParam].zeroToOneVal[v]);
    3b16:	ed88 0a01 	vstr	s0, [r8, #4]
					params[whichParam].setParam(params[whichParam].realVal[v], params[whichParam].objectNumber, v);
    3b1a:	f8da 3014 	ldr.w	r3, [sl, #20]
    3b1e:	f89a 0018 	ldrb.w	r0, [sl, #24]
    3b22:	4798      	blx	r3
				for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3b24:	2c00      	cmp	r4, #0
    3b26:	f000 8114 	beq.w	3d52 <handleSPI+0xb92>
    3b2a:	f1a6 0323 	sub.w	r3, r6, #35	; 0x23
    3b2e:	464c      	mov	r4, r9
				if ((whichParam == Osc1ShapeSet) || (whichParam == Osc2ShapeSet) || (whichParam == Osc3ShapeSet))
    3b30:	b299      	uxth	r1, r3
    3b32:	291a      	cmp	r1, #26
    3b34:	d804      	bhi.n	3b40 <handleSPI+0x980>
    3b36:	4a16      	ldr	r2, [pc, #88]	; (3b90 <handleSPI+0x9d0>)
    3b38:	40ca      	lsrs	r2, r1
    3b3a:	07d2      	lsls	r2, r2, #31
    3b3c:	f100 8346 	bmi.w	41cc <handleSPI+0x100c>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    3b40:	f1a6 0218 	sub.w	r2, r6, #24
    3b44:	b291      	uxth	r1, r2
    3b46:	291a      	cmp	r1, #26
    3b48:	f240 826c 	bls.w	4024 <handleSPI+0xe64>
				if ((whichParam == Noise))
    3b4c:	2e12      	cmp	r6, #18
    3b4e:	f040 83ab 	bne.w	42a8 <handleSPI+0x10e8>
					if (params[whichParam].realVal[0]  > 0.5f)
    3b52:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    3b56:	ed97 7a80 	vldr	s14, [r7, #512]	; 0x200
    3b5a:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3b5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b62:	f77f acb1 	ble.w	34c8 <handleSPI+0x308>
						noiseOn = 1;
    3b66:	4b0b      	ldr	r3, [pc, #44]	; (3b94 <handleSPI+0x9d4>)
    3b68:	2201      	movs	r2, #1
    3b6a:	701a      	strb	r2, [r3, #0]
    3b6c:	e4ac      	b.n	34c8 <handleSPI+0x308>
    3b6e:	bf00      	nop
    3b70:	20004f54 	.word	0x20004f54
    3b74:	20019d04 	.word	0x20019d04
    3b78:	2000505c 	.word	0x2000505c
    3b7c:	3b808081 	.word	0x3b808081
    3b80:	20013f90 	.word	0x20013f90
    3b84:	20005084 	.word	0x20005084
    3b88:	377ffff6 	.word	0x377ffff6
    3b8c:	20018bcc 	.word	0x20018bcc
    3b90:	04002001 	.word	0x04002001
    3b94:	2001ce7c 	.word	0x2001ce7c
			if (presetReady)
    3b98:	4bc4      	ldr	r3, [pc, #784]	; (3eac <handleSPI+0xcec>)
    3b9a:	681b      	ldr	r3, [r3, #0]
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	f43f ac93 	beq.w	34c8 <handleSPI+0x308>
				uint8_t currentByte = offset+1;
    3ba2:	1c43      	adds	r3, r0, #1
    3ba4:	f8df 9378 	ldr.w	r9, [pc, #888]	; 3f20 <handleSPI+0xd60>
				uint8_t foundOne = 0;
    3ba8:	f04f 0e00 	mov.w	lr, #0
				uint8_t lowestEmptyMapping = MAX_NUM_MAPPINGS;
    3bac:	f04f 0c20 	mov.w	ip, #32
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3bb0:	b2db      	uxtb	r3, r3
    3bb2:	5ce9      	ldrb	r1, [r5, r3]
    3bb4:	442b      	add	r3, r5
    3bb6:	785e      	ldrb	r6, [r3, #1]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bb8:	795f      	ldrb	r7, [r3, #5]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3bba:	eb06 2601 	add.w	r6, r6, r1, lsl #8
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bbe:	7919      	ldrb	r1, [r3, #4]
				uint8_t whichSlot = (SPI_LEVERS_RX[currentByte+2]);
    3bc0:	f893 8002 	ldrb.w	r8, [r3, #2]
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bc4:	eb07 2701 	add.w	r7, r7, r1, lsl #8
				uint8_t mappingChangeType = (SPI_LEVERS_RX[currentByte+3]);
    3bc8:	f893 a003 	ldrb.w	sl, [r3, #3]
				uint16_t destNumber = ((SPI_LEVERS_RX[currentByte]<< 8) + SPI_LEVERS_RX[currentByte+1]);
    3bcc:	b2b6      	uxth	r6, r6
				int16_t mappingChangeValue = ((SPI_LEVERS_RX[currentByte+4]<< 8) + SPI_LEVERS_RX[currentByte+5]);
    3bce:	4649      	mov	r1, r9
    3bd0:	b23f      	sxth	r7, r7
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3bd2:	4673      	mov	r3, lr
					if (mappings[j].destNumber == destNumber)
    3bd4:	7808      	ldrb	r0, [r1, #0]
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3bd6:	314c      	adds	r1, #76	; 0x4c
					if (mappings[j].destNumber == destNumber)
    3bd8:	42b0      	cmp	r0, r6
    3bda:	d102      	bne.n	3be2 <handleSPI+0xa22>
						whichMapping = j;
    3bdc:	b2da      	uxtb	r2, r3
						foundOne = 1;
    3bde:	f04f 0e01 	mov.w	lr, #1
					if ((mappings[j].destNumber == 255) && (j < lowestEmptyMapping))
    3be2:	28ff      	cmp	r0, #255	; 0xff
    3be4:	d103      	bne.n	3bee <handleSPI+0xa2e>
    3be6:	459c      	cmp	ip, r3
    3be8:	bfc8      	it	gt
    3bea:	fa5f fc83 	uxtbgt.w	ip, r3
				for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
    3bee:	3301      	adds	r3, #1
    3bf0:	2b20      	cmp	r3, #32
    3bf2:	d1ef      	bne.n	3bd4 <handleSPI+0xa14>
				if (foundOne == 0)
    3bf4:	f1be 0f00 	cmp.w	lr, #0
    3bf8:	d110      	bne.n	3c1c <handleSPI+0xa5c>
					numMappings++;
    3bfa:	49ad      	ldr	r1, [pc, #692]	; (3eb0 <handleSPI+0xcf0>)
					mappings[whichMapping].destNumber = destNumber;
    3bfc:	234c      	movs	r3, #76	; 0x4c
					mappings[whichMapping].dest = &params[destNumber];
    3bfe:	4662      	mov	r2, ip
					numMappings++;
    3c00:	7808      	ldrb	r0, [r1, #0]
					mappings[whichMapping].destNumber = destNumber;
    3c02:	fb03 f30c 	mul.w	r3, r3, ip
					numMappings++;
    3c06:	3001      	adds	r0, #1
					mappings[whichMapping].destNumber = destNumber;
    3c08:	f809 6003 	strb.w	r6, [r9, r3]
					mappings[whichMapping].dest = &params[destNumber];
    3c0c:	ebc6 06c6 	rsb	r6, r6, r6, lsl #3
					mappings[whichMapping].destNumber = destNumber;
    3c10:	444b      	add	r3, r9
					numMappings++;
    3c12:	7008      	strb	r0, [r1, #0]
					mappings[whichMapping].dest = &params[destNumber];
    3c14:	49a7      	ldr	r1, [pc, #668]	; (3eb4 <handleSPI+0xcf4>)
    3c16:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    3c1a:	6059      	str	r1, [r3, #4]
				if (mappingChangeType == SourceID)
    3c1c:	f1ba 0f00 	cmp.w	sl, #0
    3c20:	f040 8182 	bne.w	3f28 <handleSPI+0xd68>
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3c24:	234c      	movs	r3, #76	; 0x4c
    3c26:	2001      	movs	r0, #1
					if (source == 255)
    3c28:	2fff      	cmp	r7, #255	; 0xff
					mappings[whichMapping].sourceSmoothed[whichSlot] = 1;
    3c2a:	fb02 f303 	mul.w	r3, r2, r3
    3c2e:	eb09 0b03 	add.w	fp, r9, r3
    3c32:	eb0b 0608 	add.w	r6, fp, r8
    3c36:	f886 0020 	strb.w	r0, [r6, #32]
					if (source == 255)
    3c3a:	f000 83a4 	beq.w	4386 <handleSPI+0x11c6>
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c3e:	f8df c2dc 	ldr.w	ip, [pc, #732]	; 3f1c <handleSPI+0xd5c>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c42:	f108 0104 	add.w	r1, r8, #4
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c46:	f108 0e01 	add.w	lr, r8, #1
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3c4a:	2f03      	cmp	r7, #3
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c4c:	eb0c 0bc7 	add.w	fp, ip, r7, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c50:	f8df c2d0 	ldr.w	ip, [pc, #720]	; 3f24 <handleSPI+0xd64>
    3c54:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
						mappings[whichMapping].hookActive[whichSlot] = 1;
    3c58:	f886 0048 	strb.w	r0, [r6, #72]	; 0x48
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c5c:	eb03 0ece 	add.w	lr, r3, lr, lsl #3
    3c60:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c64:	4449      	add	r1, r9
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c66:	f849 b00e 	str.w	fp, [r9, lr]
    3c6a:	f10b 0b04 	add.w	fp, fp, #4
    3c6e:	444b      	add	r3, r9
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c70:	f8c1 c004 	str.w	ip, [r1, #4]
							mappings[whichMapping].sourceValPtr[whichSlot][v] = &sourceValues[source][v];
    3c74:	f8c3 b00c 	str.w	fp, [r3, #12]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling; //blank out the scalar source, because otherwise it will point to some random function or a null pointer
    3c78:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
						if (source < 4) //if it's oscillators or noise (the first 4 elements of the source array), don't smooth to allow FM
    3c7c:	f340 836d 	ble.w	435a <handleSPI+0x119a>
						if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3c80:	f1a7 0318 	sub.w	r3, r7, #24
    3c84:	2b03      	cmp	r3, #3
    3c86:	f200 83e4 	bhi.w	4452 <handleSPI+0x1292>
							lfoOn[source - LFO_SOURCE_OFFSET] = 1;
    3c8a:	4b8b      	ldr	r3, [pc, #556]	; (3eb8 <handleSPI+0xcf8>)
    3c8c:	443b      	add	r3, r7
    3c8e:	f803 0c18 	strb.w	r0, [r3, #-24]
						if ((source >= NOISE_SOURCE_OFFSET) && (source < (NOISE_SOURCE_OFFSET+1)))
    3c92:	2f03      	cmp	r7, #3
    3c94:	d102      	bne.n	3c9c <handleSPI+0xadc>
							noiseOn = 1;
    3c96:	4b89      	ldr	r3, [pc, #548]	; (3ebc <handleSPI+0xcfc>)
    3c98:	2101      	movs	r1, #1
    3c9a:	7019      	strb	r1, [r3, #0]
						mappings[whichMapping].amount[whichSlot] = 0.0f;
    3c9c:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    3ca0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    3ca4:	2200      	movs	r2, #0
    3ca6:	4443      	add	r3, r8
    3ca8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    3cac:	63da      	str	r2, [r3, #60]	; 0x3c
    3cae:	e40b      	b.n	34c8 <handleSPI+0x308>
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3cb0:	182b      	adds	r3, r5, r0
    3cb2:	eddf 6a83 	vldr	s13, [pc, #524]	; 3ec0 <handleSPI+0xd00>
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3cb6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3cba:	4a82      	ldr	r2, [pc, #520]	; (3ec4 <handleSPI+0xd04>)
    3cbc:	785b      	ldrb	r3, [r3, #1]
    3cbe:	ee07 3a90 	vmov	s15, r3
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3cc2:	4b81      	ldr	r3, [pc, #516]	; (3ec8 <handleSPI+0xd08>)
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
			masterVolFromBrain =  ((SPI_LEVERS_RX[currentByte]) * 0.01f);
    3cd0:	edc2 7a00 	vstr	s15, [r2]
			masterVolFromBrainForSynth = masterVolFromBrain * 0.5f;
    3cd4:	ed83 7a00 	vstr	s14, [r3]
    3cd8:	f7ff bbf6 	b.w	34c8 <handleSPI+0x308>
			if (boardNumber == 0)
    3cdc:	4b7b      	ldr	r3, [pc, #492]	; (3ecc <handleSPI+0xd0c>)
    3cde:	781b      	ldrb	r3, [r3, #0]
    3ce0:	2b00      	cmp	r3, #0
    3ce2:	f47f aa9e 	bne.w	3222 <handleSPI+0x62>
				pluckFirmwareUpdateRequested = 1;
    3ce6:	4b7a      	ldr	r3, [pc, #488]	; (3ed0 <handleSPI+0xd10>)
    3ce8:	2201      	movs	r2, #1
    3cea:	601a      	str	r2, [r3, #0]
    3cec:	f7ff bbf1 	b.w	34d2 <handleSPI+0x312>
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3cf0:	ed9f 6a78 	vldr	s12, [pc, #480]	; 3ed4 <handleSPI+0xd14>
			 for (int i = 0; i < numStringsThisBoard; i++)
    3cf4:	2603      	movs	r6, #3
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3cf6:	eddf 6a78 	vldr	s13, [pc, #480]	; 3ed8 <handleSPI+0xd18>
					stringMIDIPitches[i] = myPitch;
    3cfa:	4f78      	ldr	r7, [pc, #480]	; (3edc <handleSPI+0xd1c>)
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3cfc:	680a      	ldr	r2, [r1, #0]
					stringMIDIPitches[i] = myPitch;
    3cfe:	eb07 0c86 	add.w	ip, r7, r6, lsl #2
				float myPitch = (float)(SPI_LEVERS_RX[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS_RX[((i+firstString) * 2) + 1 + currentByte];
    3d02:	4432      	add	r2, r6
    3d04:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3d08:	5cd2      	ldrb	r2, [r2, r3]
    3d0a:	0212      	lsls	r2, r2, #8
    3d0c:	ee07 2a90 	vmov	s15, r2
    3d10:	680a      	ldr	r2, [r1, #0]
    3d12:	4432      	add	r2, r6
    3d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3d18:	3601      	adds	r6, #1
    3d1a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
    3d1e:	441a      	add	r2, r3
    3d20:	7852      	ldrb	r2, [r2, #1]
    3d22:	ee07 2a10 	vmov	s14, r2
    3d26:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    3d2a:	ee77 7a87 	vadd.f32	s15, s15, s14
				myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
    3d2e:	ee27 7a86 	vmul.f32	s14, s15, s12
				if ((myPitch > 0.0f) && (myPitch < 140.0f))
    3d32:	eeb5 7a40 	vcmp.f32	s14, #0.0
    3d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d3a:	dd06      	ble.n	3d4a <handleSPI+0xb8a>
    3d3c:	eef4 7a66 	vcmp.f32	s15, s13
    3d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d44:	d501      	bpl.n	3d4a <handleSPI+0xb8a>
					stringMIDIPitches[i] = myPitch;
    3d46:	ed8c 7a00 	vstr	s14, [ip]
			 for (int i = 0; i < numStringsThisBoard; i++)
    3d4a:	42b0      	cmp	r0, r6
    3d4c:	dcd6      	bgt.n	3cfc <handleSPI+0xb3c>
    3d4e:	f7ff bbb5 	b.w	34bc <handleSPI+0x2fc>
    3d52:	2401      	movs	r4, #1
    3d54:	e6d9      	b.n	3b0a <handleSPI+0x94a>
    3d56:	4962      	ldr	r1, [pc, #392]	; (3ee0 <handleSPI+0xd20>)
    3d58:	e552      	b.n	3800 <handleSPI+0x640>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d5a:	ee07 8a90 	vmov	s15, r8
    3d5e:	4861      	ldr	r0, [pc, #388]	; (3ee4 <handleSPI+0xd24>)
    3d60:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d64:	eddf 7a60 	vldr	s15, [pc, #384]	; 3ee8 <handleSPI+0xd28>
    3d68:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d6c:	f005 fd8c 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d70:	f886 800b 	strb.w	r8, [r6, #11]
    3d74:	e66d      	b.n	3a52 <handleSPI+0x892>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d76:	ee07 9a90 	vmov	s15, r9
					prevKnobByte[i] = newByte;
    3d7a:	4e5c      	ldr	r6, [pc, #368]	; (3eec <handleSPI+0xd2c>)
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d7c:	485c      	ldr	r0, [pc, #368]	; (3ef0 <handleSPI+0xd30>)
    3d7e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d82:	eddf 7a59 	vldr	s15, [pc, #356]	; 3ee8 <handleSPI+0xd28>
    3d86:	ee20 0a27 	vmul.f32	s0, s0, s15
    3d8a:	f005 fd7d 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3d8e:	f886 9000 	strb.w	r9, [r6]
    3d92:	e58e      	b.n	38b2 <handleSPI+0x6f2>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3d94:	ee07 9a90 	vmov	s15, r9
    3d98:	4856      	ldr	r0, [pc, #344]	; (3ef4 <handleSPI+0xd34>)
    3d9a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3d9e:	eddf 7a52 	vldr	s15, [pc, #328]	; 3ee8 <handleSPI+0xd28>
    3da2:	ee20 0a27 	vmul.f32	s0, s0, s15
    3da6:	f005 fd6f 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3daa:	f886 9002 	strb.w	r9, [r6, #2]
    3dae:	e5a6      	b.n	38fe <handleSPI+0x73e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3db0:	ee07 9a90 	vmov	s15, r9
    3db4:	4850      	ldr	r0, [pc, #320]	; (3ef8 <handleSPI+0xd38>)
    3db6:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3dba:	eddf 7a4b 	vldr	s15, [pc, #300]	; 3ee8 <handleSPI+0xd28>
    3dbe:	ee20 0a27 	vmul.f32	s0, s0, s15
    3dc2:	f005 fd61 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3dc6:	f886 9001 	strb.w	r9, [r6, #1]
    3dca:	e585      	b.n	38d8 <handleSPI+0x718>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3dcc:	ee07 9a90 	vmov	s15, r9
    3dd0:	484a      	ldr	r0, [pc, #296]	; (3efc <handleSPI+0xd3c>)
    3dd2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3dd6:	eddf 7a44 	vldr	s15, [pc, #272]	; 3ee8 <handleSPI+0xd28>
    3dda:	ee20 0a27 	vmul.f32	s0, s0, s15
    3dde:	f005 fd53 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3de2:	f886 900a 	strb.w	r9, [r6, #10]
    3de6:	e622      	b.n	3a2e <handleSPI+0x86e>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3de8:	ee07 9a90 	vmov	s15, r9
    3dec:	4844      	ldr	r0, [pc, #272]	; (3f00 <handleSPI+0xd40>)
    3dee:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3df2:	eddf 7a3d 	vldr	s15, [pc, #244]	; 3ee8 <handleSPI+0xd28>
    3df6:	ee20 0a27 	vmul.f32	s0, s0, s15
    3dfa:	f005 fd45 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3dfe:	f886 9009 	strb.w	r9, [r6, #9]
    3e02:	e601      	b.n	3a08 <handleSPI+0x848>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e04:	ee07 9a90 	vmov	s15, r9
    3e08:	483e      	ldr	r0, [pc, #248]	; (3f04 <handleSPI+0xd44>)
    3e0a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e0e:	eddf 7a36 	vldr	s15, [pc, #216]	; 3ee8 <handleSPI+0xd28>
    3e12:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e16:	f005 fd37 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e1a:	f886 9008 	strb.w	r9, [r6, #8]
    3e1e:	e5e0      	b.n	39e2 <handleSPI+0x822>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e20:	ee07 9a90 	vmov	s15, r9
    3e24:	4838      	ldr	r0, [pc, #224]	; (3f08 <handleSPI+0xd48>)
    3e26:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e2a:	eddf 7a2f 	vldr	s15, [pc, #188]	; 3ee8 <handleSPI+0xd28>
    3e2e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e32:	f005 fd29 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e36:	f886 9007 	strb.w	r9, [r6, #7]
    3e3a:	e5bf      	b.n	39bc <handleSPI+0x7fc>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e3c:	ee07 9a90 	vmov	s15, r9
    3e40:	4832      	ldr	r0, [pc, #200]	; (3f0c <handleSPI+0xd4c>)
    3e42:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e46:	eddf 7a28 	vldr	s15, [pc, #160]	; 3ee8 <handleSPI+0xd28>
    3e4a:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e4e:	f005 fd1b 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e52:	f886 9006 	strb.w	r9, [r6, #6]
    3e56:	e59e      	b.n	3996 <handleSPI+0x7d6>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e58:	ee07 9a90 	vmov	s15, r9
    3e5c:	482c      	ldr	r0, [pc, #176]	; (3f10 <handleSPI+0xd50>)
    3e5e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e62:	eddf 7a21 	vldr	s15, [pc, #132]	; 3ee8 <handleSPI+0xd28>
    3e66:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e6a:	f005 fd0d 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e6e:	f886 9005 	strb.w	r9, [r6, #5]
    3e72:	e57d      	b.n	3970 <handleSPI+0x7b0>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e74:	ee07 9a90 	vmov	s15, r9
    3e78:	4826      	ldr	r0, [pc, #152]	; (3f14 <handleSPI+0xd54>)
    3e7a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e7e:	eddf 7a1a 	vldr	s15, [pc, #104]	; 3ee8 <handleSPI+0xd28>
    3e82:	ee20 0a27 	vmul.f32	s0, s0, s15
    3e86:	f005 fcff 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3e8a:	f886 9004 	strb.w	r9, [r6, #4]
    3e8e:	e55c      	b.n	394a <handleSPI+0x78a>
					tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS_RX[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
    3e90:	ee07 9a90 	vmov	s15, r9
    3e94:	4820      	ldr	r0, [pc, #128]	; (3f18 <handleSPI+0xd58>)
    3e96:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
    3e9a:	eddf 7a13 	vldr	s15, [pc, #76]	; 3ee8 <handleSPI+0xd28>
    3e9e:	ee20 0a27 	vmul.f32	s0, s0, s15
    3ea2:	f005 fcf1 	bl	9888 <__tExpSmooth_setDest_veneer>
					prevKnobByte[i] = newByte;
    3ea6:	f886 9003 	strb.w	r9, [r6, #3]
    3eaa:	e53b      	b.n	3924 <handleSPI+0x764>
    3eac:	20005084 	.word	0x20005084
    3eb0:	20018bbc 	.word	0x20018bbc
    3eb4:	20018bcc 	.word	0x20018bcc
    3eb8:	2001cc38 	.word	0x2001cc38
    3ebc:	2001ce7c 	.word	0x2001ce7c
    3ec0:	3c23d70a 	.word	0x3c23d70a
    3ec4:	200004a8 	.word	0x200004a8
    3ec8:	200004ac 	.word	0x200004ac
    3ecc:	20014025 	.word	0x20014025
    3ed0:	20019ce0 	.word	0x20019ce0
    3ed4:	3b000080 	.word	0x3b000080
    3ed8:	478bff74 	.word	0x478bff74
    3edc:	20013f54 	.word	0x20013f54
    3ee0:	2001403c 	.word	0x2001403c
    3ee4:	20004fbc 	.word	0x20004fbc
    3ee8:	3b808081 	.word	0x3b808081
    3eec:	20019d04 	.word	0x20019d04
    3ef0:	20004f90 	.word	0x20004f90
    3ef4:	20004f98 	.word	0x20004f98
    3ef8:	20004f94 	.word	0x20004f94
    3efc:	20004fb8 	.word	0x20004fb8
    3f00:	20004fb4 	.word	0x20004fb4
    3f04:	20004fb0 	.word	0x20004fb0
    3f08:	20004fac 	.word	0x20004fac
    3f0c:	20004fa8 	.word	0x20004fa8
    3f10:	20004fa4 	.word	0x20004fa4
    3f14:	20004fa0 	.word	0x20004fa0
    3f18:	20004f9c 	.word	0x20004f9c
    3f1c:	2001d0f0 	.word	0x2001d0f0
    3f20:	20018230 	.word	0x20018230
    3f24:	2000072c 	.word	0x2000072c
				else if (mappingChangeType == Amount)
    3f28:	f1ba 0f01 	cmp.w	sl, #1
    3f2c:	f000 824f 	beq.w	43ce <handleSPI+0x120e>
				else if (mappingChangeType == ScalarID)
    3f30:	f1ba 0f02 	cmp.w	sl, #2
    3f34:	f47f aac8 	bne.w	34c8 <handleSPI+0x308>
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3f38:	48c0      	ldr	r0, [pc, #768]	; (423c <handleSPI+0x107c>)
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3f3a:	234c      	movs	r3, #76	; 0x4c
						if (scalar == 0xff)
    3f3c:	2fff      	cmp	r7, #255	; 0xff
    3f3e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f42:	f1a7 0e18 	sub.w	lr, r7, #24
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    3f46:	f1a7 0c14 	sub.w	ip, r7, #20
    3f4a:	7801      	ldrb	r1, [r0, #0]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    3f4c:	fb02 f303 	mul.w	r3, r2, r3
    3f50:	f108 0604 	add.w	r6, r8, #4
						if (scalar == 0xff)
    3f54:	f000 824e 	beq.w	43f4 <handleSPI+0x1234>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f58:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    3f5c:	4eb8      	ldr	r6, [pc, #736]	; (4240 <handleSPI+0x1080>)
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f5e:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f62:	444b      	add	r3, r9
    3f64:	eb06 0bc7 	add.w	fp, r6, r7, lsl #3
    3f68:	f8c3 b004 	str.w	fp, [r3, #4]
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f6c:	f200 8257 	bhi.w	441e <handleSPI+0x125e>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3f70:	4bb4      	ldr	r3, [pc, #720]	; (4244 <handleSPI+0x1084>)
    3f72:	f04f 0b01 	mov.w	fp, #1
    3f76:	443b      	add	r3, r7
    3f78:	f803 bc18 	strb.w	fp, [r3, #-24]
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f7c:	234c      	movs	r3, #76	; 0x4c
								noiseOn = 1;
    3f7e:	2f03      	cmp	r7, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f80:	f10a 0a01 	add.w	sl, sl, #1
    3f84:	fb02 f303 	mul.w	r3, r2, r3
								noiseOn = 1;
    3f88:	bf08      	it	eq
    3f8a:	2101      	moveq	r1, #1
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f8c:	eb06 068a 	add.w	r6, r6, sl, lsl #2
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f90:	f1be 0f03 	cmp.w	lr, #3
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &sourceValues[scalar][v];
    3f94:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
    3f98:	444b      	add	r3, r9
    3f9a:	629e      	str	r6, [r3, #40]	; 0x28
							if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
    3f9c:	f200 8236 	bhi.w	440c <handleSPI+0x124c>
								lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
    3fa0:	4ba8      	ldr	r3, [pc, #672]	; (4244 <handleSPI+0x1084>)
    3fa2:	2201      	movs	r2, #1
    3fa4:	443b      	add	r3, r7
    3fa6:	f803 2c18 	strb.w	r2, [r3, #-24]
								noiseOn = 1;
    3faa:	2f03      	cmp	r7, #3
    3fac:	bf08      	it	eq
    3fae:	2101      	moveq	r1, #1
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    3fb0:	7001      	strb	r1, [r0, #0]
    3fb2:	f7ff ba89 	b.w	34c8 <handleSPI+0x308>
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3fb6:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
					param *FXAlias = &params[whichParam + 1];
    3fba:	f106 0901 	add.w	r9, r6, #1
					uint8_t whichEffect = (whichParam - Effect1FXType) / EffectParamsNum;
    3fbe:	ea4f 08e8 	mov.w	r8, r8, asr #3
					param *FXAlias = &params[whichParam + 1];
    3fc2:	ebc9 0ac9 	rsb	sl, r9, r9, lsl #3
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3fc6:	ee67 7a87 	vmul.f32	s15, s15, s14
					param *FXAlias = &params[whichParam + 1];
    3fca:	ea4f 0bc9 	mov.w	fp, r9, lsl #3
    3fce:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
					FXType effectType = roundf(params[whichParam].zeroToOneVal[0] * (NUM_EFFECT_TYPES-1));
    3fd2:	fef8 7a67 	vrinta.f32	s15, s15
    3fd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3fda:	edcd 7a02 	vstr	s15, [sp, #8]
    3fde:	f89d 0008 	ldrb.w	r0, [sp, #8]
					if (effectType > FXLowpass)
    3fe2:	280d      	cmp	r0, #13
    3fe4:	d902      	bls.n	3fec <handleSPI+0xe2c>
						FXAlias[2].scaleFunc = &scaleFilterResonance;
    3fe6:	4a98      	ldr	r2, [pc, #608]	; (4248 <handleSPI+0x1088>)
    3fe8:	f8ca 2048 	str.w	r2, [sl, #72]	; 0x48
					setEffectsFunctions(effectType, whichEffect);
    3fec:	4641      	mov	r1, r8
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    3fee:	eb08 0888 	add.w	r8, r8, r8, lsl #2
					setEffectsFunctions(effectType, whichEffect);
    3ff2:	f005 fc8d 	bl	9910 <__setEffectsFunctions_veneer>
					FXAlias[0].setParam = effectSetters[whichEffect].setParam1;
    3ff6:	4a95      	ldr	r2, [pc, #596]	; (424c <handleSPI+0x108c>)
    3ff8:	ebab 0309 	sub.w	r3, fp, r9
    3ffc:	eb02 0188 	add.w	r1, r2, r8, lsl #2
    4000:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    4004:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4008:	615a      	str	r2, [r3, #20]
					FXAlias[1].setParam = effectSetters[whichEffect].setParam2;
    400a:	684b      	ldr	r3, [r1, #4]
    400c:	f8ca 3030 	str.w	r3, [sl, #48]	; 0x30
					FXAlias[2].setParam = effectSetters[whichEffect].setParam3;
    4010:	688b      	ldr	r3, [r1, #8]
    4012:	f8ca 304c 	str.w	r3, [sl, #76]	; 0x4c
					FXAlias[3].setParam = effectSetters[whichEffect].setParam4;
    4016:	68cb      	ldr	r3, [r1, #12]
    4018:	f8ca 3068 	str.w	r3, [sl, #104]	; 0x68
					FXAlias[4].setParam = effectSetters[whichEffect].setParam5;
    401c:	690b      	ldr	r3, [r1, #16]
    401e:	f8ca 3084 	str.w	r3, [sl, #132]	; 0x84
    4022:	e568      	b.n	3af6 <handleSPI+0x936>
				if ((whichParam == Osc1) || (whichParam == Osc2) ||(whichParam == Osc3))
    4024:	4b8a      	ldr	r3, [pc, #552]	; (4250 <handleSPI+0x1090>)
    4026:	410b      	asrs	r3, r1
    4028:	f013 0301 	ands.w	r3, r3, #1
    402c:	d123      	bne.n	4076 <handleSPI+0xeb6>
					if (params[whichParam].realVal[0]  > 0.5f)
    402e:	9901      	ldr	r1, [sp, #4]
    4030:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    4034:	1b89      	subs	r1, r1, r6
    4036:	eb07 0181 	add.w	r1, r7, r1, lsl #2
    403a:	ed91 7a02 	vldr	s14, [r1, #8]
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    403e:	4985      	ldr	r1, [pc, #532]	; (4254 <handleSPI+0x1094>)
					if (params[whichParam].realVal[0]  > 0.5f)
    4040:	eeb4 7ae7 	vcmpe.f32	s14, s15
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    4044:	fb81 0102 	smull	r0, r1, r1, r2
    4048:	17d2      	asrs	r2, r2, #31
					if (params[whichParam].realVal[0]  > 0.5f)
    404a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
					int whichOsc = (whichParam - Osc1) / OscParamsNum;
    404e:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
					if (params[whichParam].realVal[0]  > 0.5f)
    4052:	dd02      	ble.n	405a <handleSPI+0xe9a>
						oscOn[whichOsc] = 1;
    4054:	2301      	movs	r3, #1
    4056:	4980      	ldr	r1, [pc, #512]	; (4258 <handleSPI+0x1098>)
    4058:	548b      	strb	r3, [r1, r2]
    405a:	4980      	ldr	r1, [pc, #512]	; (425c <handleSPI+0x109c>)
    405c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
						enabledCount += oscsEnabled[j];
    4060:	e9d1 3200 	ldrd	r3, r2, [r1]
    4064:	4413      	add	r3, r2
					oscAmpMult = oscAmpMultArray[enabledCount];
    4066:	688a      	ldr	r2, [r1, #8]
    4068:	4413      	add	r3, r2
    406a:	4a7d      	ldr	r2, [pc, #500]	; (4260 <handleSPI+0x10a0>)
    406c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4070:	681a      	ldr	r2, [r3, #0]
    4072:	4b7c      	ldr	r3, [pc, #496]	; (4264 <handleSPI+0x10a4>)
    4074:	601a      	str	r2, [r3, #0]
				if ((whichParam == LFO1ShapeSet) || (whichParam == LFO2ShapeSet) || (whichParam == LFO3ShapeSet) || (whichParam == LFO4ShapeSet))
    4076:	2e87      	cmp	r6, #135	; 0x87
    4078:	d005      	beq.n	4086 <handleSPI+0xec6>
    407a:	2e8c      	cmp	r6, #140	; 0x8c
    407c:	d003      	beq.n	4086 <handleSPI+0xec6>
    407e:	2e91      	cmp	r6, #145	; 0x91
    4080:	d001      	beq.n	4086 <handleSPI+0xec6>
    4082:	2e96      	cmp	r6, #150	; 0x96
    4084:	d16b      	bne.n	415e <handleSPI+0xf9e>
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4086:	9b01      	ldr	r3, [sp, #4]
    4088:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    408c:	4a76      	ldr	r2, [pc, #472]	; (4268 <handleSPI+0x10a8>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    408e:	f04f 0a00 	mov.w	sl, #0
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    4092:	1b9b      	subs	r3, r3, r6
    4094:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    4098:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    409c:	f1a6 0387 	sub.w	r3, r6, #135	; 0x87
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    40a0:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    40a4:	fb82 1203 	smull	r1, r2, r2, r3
    40a8:	17db      	asrs	r3, r3, #31
					int LFOShape = roundf(params[whichParam].realVal[0] * (NUM_LFO_SHAPES-1));
    40aa:	fef8 7a67 	vrinta.f32	s15, s15
					setLFOShapes(LFOShape, whichLFO);
    40ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichLFO = (whichParam - LFO1ShapeSet) / LFOParamsNum;
    40b2:	ebc3 0862 	rsb	r8, r3, r2, asr #1
					setLFOShapes(LFOShape, whichLFO);
    40b6:	ee17 0a90 	vmov	r0, s15
    40ba:	4641      	mov	r1, r8
    40bc:	f005 fc90 	bl	99e0 <__setLFOShapes_veneer>
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    40c0:	496a      	ldr	r1, [pc, #424]	; (426c <handleSPI+0x10ac>)
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    40c2:	eb08 0388 	add.w	r3, r8, r8, lsl #2
    40c6:	9503      	str	r5, [sp, #12]
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    40c8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
					int rateParamNum = LFO1Rate + (whichLFO * LFOParamsNum);
    40cc:	f103 0984 	add.w	r9, r3, #132	; 0x84
					int shapeParamNum = LFO1Shape + (whichLFO * LFOParamsNum);
    40d0:	f103 0285 	add.w	r2, r3, #133	; 0x85
					int phaseParamNum = LFO1Phase + (whichLFO * LFOParamsNum);
    40d4:	3386      	adds	r3, #134	; 0x86
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    40d6:	eb01 0088 	add.w	r0, r1, r8, lsl #2
    40da:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
    40de:	f851 1028 	ldr.w	r1, [r1, r8, lsl #2]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    40e2:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    40e6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    40ea:	eb07 0b82 	add.w	fp, r7, r2, lsl #2
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    40ee:	eb07 0283 	add.w	r2, r7, r3, lsl #2
					params[rateParamNum].setParam = lfoSetters[whichLFO].setRate;
    40f2:	ea4f 0389 	mov.w	r3, r9, lsl #2
    40f6:	eb07 0989 	add.w	r9, r7, r9, lsl #2
    40fa:	f103 0840 	add.w	r8, r3, #64	; 0x40
    40fe:	f8c9 1014 	str.w	r1, [r9, #20]
					params[shapeParamNum].setParam = lfoSetters[whichLFO].setShape;
    4102:	6841      	ldr	r1, [r0, #4]
    4104:	44b8      	add	r8, r7
    4106:	f8cb 1014 	str.w	r1, [fp, #20]
					params[phaseParamNum].setParam = lfoSetters[whichLFO].setPhase;
    410a:	6881      	ldr	r1, [r0, #8]
    410c:	4610      	mov	r0, r2
    410e:	6151      	str	r1, [r2, #20]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4110:	f103 0108 	add.w	r1, r3, #8
    4114:	187a      	adds	r2, r7, r1
    4116:	f103 0124 	add.w	r1, r3, #36	; 0x24
    411a:	187b      	adds	r3, r7, r1
    411c:	4615      	mov	r5, r2
    411e:	e9cd 6401 	strd	r6, r4, [sp, #4]
    4122:	461c      	mov	r4, r3
    4124:	4606      	mov	r6, r0
						params[rateParamNum].setParam(params[rateParamNum].realVal[v], params[rateParamNum].objectNumber, v);
    4126:	ecb5 0a01 	vldmia	r5!, {s0}
    412a:	4651      	mov	r1, sl
    412c:	f899 0018 	ldrb.w	r0, [r9, #24]
    4130:	f8d9 3014 	ldr.w	r3, [r9, #20]
    4134:	4798      	blx	r3
						params[shapeParamNum].setParam(params[shapeParamNum].realVal[v], params[shapeParamNum].objectNumber, v);
    4136:	ecb4 0a01 	vldmia	r4!, {s0}
    413a:	4651      	mov	r1, sl
    413c:	f89b 0018 	ldrb.w	r0, [fp, #24]
    4140:	f8db 3014 	ldr.w	r3, [fp, #20]
    4144:	4798      	blx	r3
						params[phaseParamNum].setParam(params[phaseParamNum].realVal[v], params[phaseParamNum].objectNumber, v);
    4146:	ecb8 0a01 	vldmia	r8!, {s0}
    414a:	4651      	mov	r1, sl
    414c:	6973      	ldr	r3, [r6, #20]
    414e:	7e30      	ldrb	r0, [r6, #24]
    4150:	4798      	blx	r3
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4152:	f1ba 0f00 	cmp.w	sl, #0
    4156:	d016      	beq.n	4186 <handleSPI+0xfc6>
    4158:	9d03      	ldr	r5, [sp, #12]
    415a:	e9dd 6401 	ldrd	r6, r4, [sp, #4]
				if ((whichParam == MIDIKeyMax) || (whichParam == MIDIKeyMin))
    415e:	2e01      	cmp	r6, #1
    4160:	d914      	bls.n	418c <handleSPI+0xfcc>
				if (whichParam == FXOrder)
    4162:	2e9a      	cmp	r6, #154	; 0x9a
    4164:	d128      	bne.n	41b8 <handleSPI+0xff8>
					fxPre = params[FXOrder].realVal[0] > 0.5f;
    4166:	4a42      	ldr	r2, [pc, #264]	; (4270 <handleSPI+0x10b0>)
    4168:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    416c:	4b41      	ldr	r3, [pc, #260]	; (4274 <handleSPI+0x10b4>)
    416e:	ed92 7a38 	vldr	s14, [r2, #224]	; 0xe0
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    4172:	eeb4 7ae7 	vcmpe.f32	s14, s15
    4176:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    417a:	bfcc      	ite	gt
    417c:	2201      	movgt	r2, #1
    417e:	2200      	movle	r2, #0
    4180:	701a      	strb	r2, [r3, #0]
    4182:	f7ff b9a1 	b.w	34c8 <handleSPI+0x308>
    4186:	f04f 0a01 	mov.w	sl, #1
    418a:	e7cc      	b.n	4126 <handleSPI+0xf66>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    418c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
    4190:	ed97 7a02 	vldr	s14, [r7, #8]
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    4194:	eddf 6a38 	vldr	s13, [pc, #224]	; 4278 <handleSPI+0x10b8>
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    4198:	ee37 7a67 	vsub.f32	s14, s14, s15
    419c:	ed9f 6a37 	vldr	s12, [pc, #220]	; 427c <handleSPI+0x10bc>
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    41a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    41a4:	4b36      	ldr	r3, [pc, #216]	; (4280 <handleSPI+0x10c0>)
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    41a6:	4a37      	ldr	r2, [pc, #220]	; (4284 <handleSPI+0x10c4>)
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    41a8:	eec6 6a07 	vdiv.f32	s13, s12, s14
					midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
    41ac:	edc2 7a00 	vstr	s15, [r2]
					midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
    41b0:	edc3 6a00 	vstr	s13, [r3]
				if (whichParam == PedalControlsMaster)
    41b4:	f7ff b988 	b.w	34c8 <handleSPI+0x308>
    41b8:	2e9b      	cmp	r6, #155	; 0x9b
    41ba:	f47f a985 	bne.w	34c8 <handleSPI+0x308>
					pedalControlsMaster = params[PedalControlsMaster].realVal[0] > 0.5f;
    41be:	4a2c      	ldr	r2, [pc, #176]	; (4270 <handleSPI+0x10b0>)
    41c0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    41c4:	4b30      	ldr	r3, [pc, #192]	; (4288 <handleSPI+0x10c8>)
    41c6:	ed92 7a3f 	vldr	s14, [r2, #252]	; 0xfc
    41ca:	e7d2      	b.n	4172 <handleSPI+0xfb2>
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    41cc:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
    41d0:	edda 7a02 	vldr	s15, [sl, #8]
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    41d4:	4a1f      	ldr	r2, [pc, #124]	; (4254 <handleSPI+0x1094>)
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    41d6:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    41da:	fb82 1203 	smull	r1, r2, r2, r3
    41de:	17db      	asrs	r3, r3, #31
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    41e0:	fef8 7a67 	vrinta.f32	s15, s15
    41e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int whichOsc =(whichParam - Osc1ShapeSet) / OscParamsNum;
    41e8:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
					int oscshape = roundf(params[whichParam].realVal[0] * (NUM_OSC_SHAPES-1));
    41ec:	ee17 2a90 	vmov	r2, s15
	switch (oscshape)
    41f0:	2a05      	cmp	r2, #5
    41f2:	f63f aca5 	bhi.w	3b40 <handleSPI+0x980>
    41f6:	e8df f002 	tbb	[pc, r2]
    41fa:	171c      	.short	0x171c
    41fc:	03080d12 	.word	0x03080d12
			  shapeTick[i] = &triTick;
    4200:	4a22      	ldr	r2, [pc, #136]	; (428c <handleSPI+0x10cc>)
    4202:	4923      	ldr	r1, [pc, #140]	; (4290 <handleSPI+0x10d0>)
    4204:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4208:	e49a      	b.n	3b40 <handleSPI+0x980>
			  shapeTick[i] = &sineTick;
    420a:	4a20      	ldr	r2, [pc, #128]	; (428c <handleSPI+0x10cc>)
    420c:	4921      	ldr	r1, [pc, #132]	; (4294 <handleSPI+0x10d4>)
    420e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4212:	e495      	b.n	3b40 <handleSPI+0x980>
			  shapeTick[i] = &pulseTick;
    4214:	4a1d      	ldr	r2, [pc, #116]	; (428c <handleSPI+0x10cc>)
    4216:	4920      	ldr	r1, [pc, #128]	; (4298 <handleSPI+0x10d8>)
    4218:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    421c:	e490      	b.n	3b40 <handleSPI+0x980>
			  shapeTick[i] = &sawTick;
    421e:	4a1b      	ldr	r2, [pc, #108]	; (428c <handleSPI+0x10cc>)
    4220:	491e      	ldr	r1, [pc, #120]	; (429c <handleSPI+0x10dc>)
    4222:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4226:	e48b      	b.n	3b40 <handleSPI+0x980>
			  shapeTick[i] = &sineTriTick;
    4228:	4a18      	ldr	r2, [pc, #96]	; (428c <handleSPI+0x10cc>)
    422a:	491d      	ldr	r1, [pc, #116]	; (42a0 <handleSPI+0x10e0>)
    422c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    4230:	e486      	b.n	3b40 <handleSPI+0x980>
			  shapeTick[i] = &sawSquareTick;
    4232:	4a16      	ldr	r2, [pc, #88]	; (428c <handleSPI+0x10cc>)
    4234:	491b      	ldr	r1, [pc, #108]	; (42a4 <handleSPI+0x10e4>)
    4236:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  break;
    423a:	e481      	b.n	3b40 <handleSPI+0x980>
    423c:	2001ce7c 	.word	0x2001ce7c
    4240:	2001d0f0 	.word	0x2001d0f0
    4244:	2001cc38 	.word	0x2001cc38
    4248:	00001aa1 	.word	0x00001aa1
    424c:	2001407c 	.word	0x2001407c
    4250:	fbffdffe 	.word	0xfbffdffe
    4254:	4ec4ec4f 	.word	0x4ec4ec4f
    4258:	2001ced0 	.word	0x2001ced0
    425c:	20018bc0 	.word	0x20018bc0
    4260:	200008a4 	.word	0x200008a4
    4264:	200008a0 	.word	0x200008a0
    4268:	66666667 	.word	0x66666667
    426c:	200181fc 	.word	0x200181fc
    4270:	20019bcc 	.word	0x20019bcc
    4274:	200161f9 	.word	0x200161f9
    4278:	42fe0000 	.word	0x42fe0000
    427c:	3c010204 	.word	0x3c010204
    4280:	20018bb0 	.word	0x20018bb0
    4284:	20018bb4 	.word	0x20018bb4
    4288:	20019cdc 	.word	0x20019cdc
    428c:	2001d074 	.word	0x2001d074
    4290:	000064e1 	.word	0x000064e1
    4294:	000064a1 	.word	0x000064a1
    4298:	00006441 	.word	0x00006441
    429c:	00006401 	.word	0x00006401
    42a0:	000063a1 	.word	0x000063a1
    42a4:	00006341 	.word	0x00006341
				if ((whichParam == Filter1Type) || (whichParam == Filter2Type))
    42a8:	2e60      	cmp	r6, #96	; 0x60
    42aa:	d002      	beq.n	42b2 <handleSPI+0x10f2>
    42ac:	2e66      	cmp	r6, #102	; 0x66
    42ae:	f47f aee2 	bne.w	4076 <handleSPI+0xeb6>
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    42b2:	9b01      	ldr	r3, [sp, #4]
    42b4:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    42b8:	4968      	ldr	r1, [pc, #416]	; (445c <handleSPI+0x129c>)
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    42ba:	f04f 0900 	mov.w	r9, #0
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    42be:	1b9b      	subs	r3, r3, r6
    42c0:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    42c4:	edd3 7a02 	vldr	s15, [r3, #8]
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    42c8:	f1a6 0360 	sub.w	r3, r6, #96	; 0x60
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    42cc:	ee67 7a87 	vmul.f32	s15, s15, s14
					int whichFilter = (whichParam - Filter1Type) / FilterParamsNum;
    42d0:	fb81 2103 	smull	r2, r1, r1, r3
    42d4:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
					int filterType = roundf(params[whichParam].realVal[0] * (NUM_FILTER_TYPES-1));
    42d8:	fef8 7a67 	vrinta.f32	s15, s15
					setFilterTypes(filterType, whichFilter);
    42dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    42e0:	ee17 0a90 	vmov	r0, s15
    42e4:	f005 fa40 	bl	9768 <__setFilterTypes_veneer>
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    42e8:	485d      	ldr	r0, [pc, #372]	; (4460 <handleSPI+0x12a0>)
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    42ea:	eb01 0341 	add.w	r3, r1, r1, lsl #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    42ee:	eb00 0cc1 	add.w	ip, r0, r1, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    42f2:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    42f6:	005b      	lsls	r3, r3, #1
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    42f8:	f8dc 0004 	ldr.w	r0, [ip, #4]
					int filterResParamNum = Filter1Resonance + (whichFilter * FilterParamsNum);
    42fc:	f103 0863 	add.w	r8, r3, #99	; 0x63
					int filterGainParamNum = Filter1Gain + (whichFilter * FilterParamsNum);
    4300:	3362      	adds	r3, #98	; 0x62
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    4302:	ebc8 08c8 	rsb	r8, r8, r8, lsl #3
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    4306:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
					params[filterResParamNum].setParam = filterSetters[whichFilter].setQ;
    430a:	ea4f 0a88 	mov.w	sl, r8, lsl #2
    430e:	eb07 0888 	add.w	r8, r7, r8, lsl #2
    4312:	f10a 0b08 	add.w	fp, sl, #8
    4316:	f1aa 0a14 	sub.w	sl, sl, #20
    431a:	f8c8 1014 	str.w	r1, [r8, #20]
					params[filterGainParamNum].setParam = filterSetters[whichFilter].setGain;
    431e:	eb07 0183 	add.w	r1, r7, r3, lsl #2
    4322:	44bb      	add	fp, r7
    4324:	009b      	lsls	r3, r3, #2
    4326:	44ba      	add	sl, r7
    4328:	6148      	str	r0, [r1, #20]
    432a:	9302      	str	r3, [sp, #8]
						params[filterResParamNum].setParam(params[filterResParamNum].realVal[v], params[filterResParamNum].objectNumber, v);
    432c:	ecbb 0a01 	vldmia	fp!, {s0}
    4330:	4649      	mov	r1, r9
    4332:	f898 0018 	ldrb.w	r0, [r8, #24]
    4336:	f8d8 3014 	ldr.w	r3, [r8, #20]
    433a:	4798      	blx	r3
						params[filterGainParamNum].setParam(params[filterGainParamNum].realVal[v], params[filterGainParamNum].objectNumber, v);
    433c:	9b02      	ldr	r3, [sp, #8]
    433e:	ecba 0a01 	vldmia	sl!, {s0}
    4342:	4649      	mov	r1, r9
    4344:	18fb      	adds	r3, r7, r3
    4346:	695a      	ldr	r2, [r3, #20]
    4348:	7e18      	ldrb	r0, [r3, #24]
    434a:	4790      	blx	r2
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    434c:	f1b9 0f00 	cmp.w	r9, #0
    4350:	f47f ae91 	bne.w	4076 <handleSPI+0xeb6>
    4354:	f04f 0901 	mov.w	r9, #1
    4358:	e7e8      	b.n	432c <handleSPI+0x116c>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    435a:	f1a7 0314 	sub.w	r3, r7, #20
    435e:	f886 a020 	strb.w	sl, [r6, #32]
    4362:	2b03      	cmp	r3, #3
    4364:	d82d      	bhi.n	43c2 <handleSPI+0x1202>
							envOn[source - ENV_SOURCE_OFFSET] = 1;
    4366:	4b3f      	ldr	r3, [pc, #252]	; (4464 <handleSPI+0x12a4>)
    4368:	2101      	movs	r1, #1
    436a:	443b      	add	r3, r7
    436c:	f803 1c14 	strb.w	r1, [r3, #-20]
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    4370:	e48f      	b.n	3c92 <handleSPI+0xad2>
						audioOutBuffer[i] = 0;
    4372:	2200      	movs	r2, #0
    4374:	f503 6180 	add.w	r1, r3, #1024	; 0x400
						audioOutBuffer[i + 1] = 0;
    4378:	e9c3 2200 	strd	r2, r2, [r3]
					for (int i = 0; i < AUDIO_BUFFER_SIZE; i+=2)
    437c:	3308      	adds	r3, #8
    437e:	4299      	cmp	r1, r3
    4380:	d1fa      	bne.n	4378 <handleSPI+0x11b8>
    4382:	f7ff ba34 	b.w	37ee <handleSPI+0x62e>
						mappings[whichMapping].hookActive[whichSlot] = 0;
    4386:	f886 a048 	strb.w	sl, [r6, #72]	; 0x48
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    438a:	4656      	mov	r6, sl
							mappings[whichMapping].destNumber = 255;
    438c:	f809 7003 	strb.w	r7, [r9, r3]
								float finalVal = mappings[whichMapping].dest->zeroToOneVal[v];
    4390:	f8db 3004 	ldr.w	r3, [fp, #4]
    4394:	eb03 0786 	add.w	r7, r3, r6, lsl #2
								mappings[whichMapping].dest->realVal[v] = mappings[whichMapping].dest->scaleFunc(finalVal);
    4398:	691b      	ldr	r3, [r3, #16]
    439a:	ed97 0a00 	vldr	s0, [r7]
    439e:	4798      	blx	r3
    43a0:	ed87 0a02 	vstr	s0, [r7, #8]
								mappings[whichMapping].dest->setParam(mappings[whichMapping].dest->realVal[v], mappings[whichMapping].dest->objectNumber, v);
    43a4:	f8db 3004 	ldr.w	r3, [fp, #4]
    43a8:	4631      	mov	r1, r6
    43aa:	eb03 0786 	add.w	r7, r3, r6, lsl #2
    43ae:	695a      	ldr	r2, [r3, #20]
    43b0:	7e18      	ldrb	r0, [r3, #24]
    43b2:	ed97 0a02 	vldr	s0, [r7, #8]
    43b6:	4790      	blx	r2
							for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    43b8:	2e00      	cmp	r6, #0
    43ba:	f47f a885 	bne.w	34c8 <handleSPI+0x308>
    43be:	2601      	movs	r6, #1
    43c0:	e7e6      	b.n	4390 <handleSPI+0x11d0>
						if ((source >= OSC_SOURCE_OFFSET) && (source < (OSC_SOURCE_OFFSET+NUM_OSC)))
    43c2:	2f02      	cmp	r7, #2
    43c4:	f63f ac65 	bhi.w	3c92 <handleSPI+0xad2>
							oscOn[source - OSC_SOURCE_OFFSET] = 1;
    43c8:	4b27      	ldr	r3, [pc, #156]	; (4468 <handleSPI+0x12a8>)
    43ca:	55d8      	strb	r0, [r3, r7]
    43cc:	e461      	b.n	3c92 <handleSPI+0xad2>
					mappings[whichMapping].amount[whichSlot] = (float)mappingChangeValue * INV_TWO_TO_15;
    43ce:	ee07 7a90 	vmov	s15, r7
    43d2:	eb02 03c2 	add.w	r3, r2, r2, lsl #3
    43d6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 446c <handleSPI+0x12ac>
    43da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    43de:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    43e2:	4443      	add	r3, r8
    43e4:	ee67 7a87 	vmul.f32	s15, s15, s14
    43e8:	eb09 0383 	add.w	r3, r9, r3, lsl #2
    43ec:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    43f0:	f7ff b86a 	b.w	34c8 <handleSPI+0x308>
							mappings[whichMapping].scalarSourceValPtr[whichSlot][v] = &defaultScaling;
    43f4:	eb03 02c8 	add.w	r2, r3, r8, lsl #3
    43f8:	7001      	strb	r1, [r0, #0]
    43fa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
    43fe:	4e1c      	ldr	r6, [pc, #112]	; (4470 <handleSPI+0x12b0>)
    4400:	444a      	add	r2, r9
    4402:	444b      	add	r3, r9
    4404:	6296      	str	r6, [r2, #40]	; 0x28
    4406:	605e      	str	r6, [r3, #4]
					for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
    4408:	f7ff b85e 	b.w	34c8 <handleSPI+0x308>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    440c:	f1bc 0f03 	cmp.w	ip, #3
    4410:	d811      	bhi.n	4436 <handleSPI+0x1276>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    4412:	4b14      	ldr	r3, [pc, #80]	; (4464 <handleSPI+0x12a4>)
    4414:	2201      	movs	r2, #1
    4416:	443b      	add	r3, r7
    4418:	f803 2c14 	strb.w	r2, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    441c:	e5c5      	b.n	3faa <handleSPI+0xdea>
							if ((scalar >= ENV_SOURCE_OFFSET) && (scalar < (ENV_SOURCE_OFFSET + NUM_ENV)))
    441e:	f1bc 0f03 	cmp.w	ip, #3
    4422:	d90f      	bls.n	4444 <handleSPI+0x1284>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    4424:	2f02      	cmp	r7, #2
    4426:	f63f ada9 	bhi.w	3f7c <handleSPI+0xdbc>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    442a:	4b0f      	ldr	r3, [pc, #60]	; (4468 <handleSPI+0x12a8>)
    442c:	f04f 0b01 	mov.w	fp, #1
    4430:	f803 b007 	strb.w	fp, [r3, r7]
    4434:	e5a2      	b.n	3f7c <handleSPI+0xdbc>
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    4436:	2f02      	cmp	r7, #2
    4438:	f63f adb7 	bhi.w	3faa <handleSPI+0xdea>
								oscOn[scalar - OSC_SOURCE_OFFSET] = 1;
    443c:	4b0a      	ldr	r3, [pc, #40]	; (4468 <handleSPI+0x12a8>)
    443e:	2201      	movs	r2, #1
    4440:	55da      	strb	r2, [r3, r7]
    4442:	e5b2      	b.n	3faa <handleSPI+0xdea>
								envOn[scalar - ENV_SOURCE_OFFSET] = 1;
    4444:	4b07      	ldr	r3, [pc, #28]	; (4464 <handleSPI+0x12a4>)
    4446:	f04f 0b01 	mov.w	fp, #1
    444a:	443b      	add	r3, r7
    444c:	f803 bc14 	strb.w	fp, [r3, #-20]
							if ((scalar >= OSC_SOURCE_OFFSET) && (scalar < (OSC_SOURCE_OFFSET + NUM_OSC)))
    4450:	e594      	b.n	3f7c <handleSPI+0xdbc>
						if ((source >= ENV_SOURCE_OFFSET) && (source < (ENV_SOURCE_OFFSET + NUM_ENV)))
    4452:	f1a7 0314 	sub.w	r3, r7, #20
    4456:	2b03      	cmp	r3, #3
    4458:	d985      	bls.n	4366 <handleSPI+0x11a6>
    445a:	e41a      	b.n	3c92 <handleSPI+0xad2>
    445c:	2aaaaaab 	.word	0x2aaaaaab
    4460:	200160d0 	.word	0x200160d0
    4464:	2001cab4 	.word	0x2001cab4
    4468:	2001ced0 	.word	0x2001ced0
    446c:	37fffffc 	.word	0x37fffffc
    4470:	2000072c 	.word	0x2000072c
    4474:	f3af 8000 	nop.w
    4478:	f3af 8000 	nop.w
    447c:	f3af 8000 	nop.w

00004480 <HAL_I2C_SlaveRxCpltCallback>:
	presetWaitingToParse = 4096;
    4480:	4b02      	ldr	r3, [pc, #8]	; (448c <HAL_I2C_SlaveRxCpltCallback+0xc>)
    4482:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    4486:	601a      	str	r2, [r3, #0]
}
    4488:	4770      	bx	lr
    448a:	bf00      	nop
    448c:	20019cfc 	.word	0x20019cfc
    4490:	f3af 8000 	nop.w
    4494:	f3af 8000 	nop.w
    4498:	f3af 8000 	nop.w
    449c:	f3af 8000 	nop.w

000044a0 <HAL_I2C_MasterTxCpltCallback>:
	i2cSending = 0;
    44a0:	4b01      	ldr	r3, [pc, #4]	; (44a8 <HAL_I2C_MasterTxCpltCallback+0x8>)
    44a2:	2200      	movs	r2, #0
    44a4:	701a      	strb	r2, [r3, #0]
}
    44a6:	4770      	bx	lr
    44a8:	200161fa 	.word	0x200161fa
    44ac:	f3af 8000 	nop.w
    44b0:	f3af 8000 	nop.w
    44b4:	f3af 8000 	nop.w
    44b8:	f3af 8000 	nop.w
    44bc:	f3af 8000 	nop.w

000044c0 <HAL_I2C_ErrorCallback>:
	i2cSending = 0;
    44c0:	2100      	movs	r1, #0
	I2CErrors++;
    44c2:	4a05      	ldr	r2, [pc, #20]	; (44d8 <HAL_I2C_ErrorCallback+0x18>)
	i2cSending = 0;
    44c4:	4b05      	ldr	r3, [pc, #20]	; (44dc <HAL_I2C_ErrorCallback+0x1c>)
	receivingI2C = 0;
    44c6:	4806      	ldr	r0, [pc, #24]	; (44e0 <HAL_I2C_ErrorCallback+0x20>)
	i2cSending = 0;
    44c8:	7019      	strb	r1, [r3, #0]
	I2CErrors++;
    44ca:	7813      	ldrb	r3, [r2, #0]
	receivingI2C = 0;
    44cc:	7001      	strb	r1, [r0, #0]
	I2CErrors++;
    44ce:	3301      	adds	r3, #1
    44d0:	b2db      	uxtb	r3, r3
    44d2:	7013      	strb	r3, [r2, #0]
}
    44d4:	4770      	bx	lr
    44d6:	bf00      	nop
    44d8:	20014024 	.word	0x20014024
    44dc:	200161fa 	.word	0x200161fa
    44e0:	2001a110 	.word	0x2001a110
    44e4:	f3af 8000 	nop.w
    44e8:	f3af 8000 	nop.w
    44ec:	f3af 8000 	nop.w
    44f0:	f3af 8000 	nop.w
    44f4:	f3af 8000 	nop.w
    44f8:	f3af 8000 	nop.w
    44fc:	f3af 8000 	nop.w

00004500 <HAL_SPI_TxRxCpltCallback>:
{
    4500:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi5)
    4502:	4cb7      	ldr	r4, [pc, #732]	; (47e0 <HAL_SPI_TxRxCpltCallback+0x2e0>)
	interrupted = 1;
    4504:	2201      	movs	r2, #1
    4506:	4bb7      	ldr	r3, [pc, #732]	; (47e4 <HAL_SPI_TxRxCpltCallback+0x2e4>)
	if (hspi == &hspi5)
    4508:	4284      	cmp	r4, r0
	interrupted = 1;
    450a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    450c:	d04e      	beq.n	45ac <HAL_SPI_TxRxCpltCallback+0xac>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    450e:	4bb6      	ldr	r3, [pc, #728]	; (47e8 <HAL_SPI_TxRxCpltCallback+0x2e8>)
  __ASM volatile ("dsb 0xF":::"memory");
    4510:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4514:	4ab5      	ldr	r2, [pc, #724]	; (47ec <HAL_SPI_TxRxCpltCallback+0x2ec>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4516:	f103 0120 	add.w	r1, r3, #32
    451a:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    451e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    4522:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4526:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    452a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    452e:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[62] == 254) && (SPI_LEVERS_RX[63] == 253))
    4532:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
    4536:	2afe      	cmp	r2, #254	; 0xfe
    4538:	d104      	bne.n	4544 <HAL_SPI_TxRxCpltCallback+0x44>
    453a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
    453e:	2bfd      	cmp	r3, #253	; 0xfd
    4540:	f000 8145 	beq.w	47ce <HAL_SPI_TxRxCpltCallback+0x2ce>
			HAL_SPI_Abort(&hspi1);
    4544:	4daa      	ldr	r5, [pc, #680]	; (47f0 <HAL_SPI_TxRxCpltCallback+0x2f0>)
    4546:	4628      	mov	r0, r5
    4548:	f005 faa6 	bl	9a98 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    454c:	4ba9      	ldr	r3, [pc, #676]	; (47f4 <HAL_SPI_TxRxCpltCallback+0x2f4>)
    454e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    4556:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    455a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    455e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    4562:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    4566:	f005 f923 	bl	97b0 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    456a:	682e      	ldr	r6, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    456c:	4a9e      	ldr	r2, [pc, #632]	; (47e8 <HAL_SPI_TxRxCpltCallback+0x2e8>)
    456e:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    4570:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4572:	4628      	mov	r0, r5
			__HAL_SPI_ENABLE(&hspi1);
    4574:	f041 0101 	orr.w	r1, r1, #1
    4578:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    457a:	18d1      	adds	r1, r2, r3
    457c:	f005 f9c4 	bl	9908 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4580:	4a9d      	ldr	r2, [pc, #628]	; (47f8 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    4582:	7813      	ldrb	r3, [r2, #0]
    4584:	3301      	adds	r3, #1
    4586:	b2db      	uxtb	r3, r3
    4588:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    458a:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    458e:	4a9b      	ldr	r2, [pc, #620]	; (47fc <HAL_SPI_TxRxCpltCallback+0x2fc>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4590:	4b96      	ldr	r3, [pc, #600]	; (47ec <HAL_SPI_TxRxCpltCallback+0x2ec>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4592:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4596:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    459a:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    459e:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    45a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45a6:	f3bf 8f6f 	isb	sy
}
    45aa:	bd70      	pop	{r4, r5, r6, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    45ac:	4b94      	ldr	r3, [pc, #592]	; (4800 <HAL_SPI_TxRxCpltCallback+0x300>)
    45ae:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    45b2:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    45b6:	4a8d      	ldr	r2, [pc, #564]	; (47ec <HAL_SPI_TxRxCpltCallback+0x2ec>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    45b8:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    45bc:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    45c0:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    45c4:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    45c8:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    45cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    45d0:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    45d4:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    45d8:	2afe      	cmp	r2, #254	; 0xfe
    45da:	f040 80d4 	bne.w	4786 <HAL_SPI_TxRxCpltCallback+0x286>
    45de:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    45e2:	2afd      	cmp	r2, #253	; 0xfd
    45e4:	f040 80cf 	bne.w	4786 <HAL_SPI_TxRxCpltCallback+0x286>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45e8:	4a86      	ldr	r2, [pc, #536]	; (4804 <HAL_SPI_TxRxCpltCallback+0x304>)
    45ea:	7811      	ldrb	r1, [r2, #0]
    45ec:	2900      	cmp	r1, #0
    45ee:	f000 80f2 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45f2:	4a85      	ldr	r2, [pc, #532]	; (4808 <HAL_SPI_TxRxCpltCallback+0x308>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    45f4:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    45f6:	6814      	ldr	r4, [r2, #0]
    45f8:	6810      	ldr	r0, [r2, #0]
    45fa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    45fe:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    4602:	f894 5061 	ldrb.w	r5, [r4, #97]	; 0x61
    4606:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    460a:	4880      	ldr	r0, [pc, #512]	; (480c <HAL_SPI_TxRxCpltCallback+0x30c>)
    460c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4610:	b2a4      	uxth	r4, r4
    4612:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4614:	f000 80df 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4618:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    461a:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    461c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4620:	f894 5063 	ldrb.w	r5, [r4, #99]	; 0x63
    4624:	6814      	ldr	r4, [r2, #0]
    4626:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    462a:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    462e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4632:	b2a4      	uxth	r4, r4
    4634:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4636:	f000 80ce 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    463a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    463c:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    463e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4642:	f894 5065 	ldrb.w	r5, [r4, #101]	; 0x65
    4646:	6814      	ldr	r4, [r2, #0]
    4648:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    464c:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    4650:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4654:	b2a4      	uxth	r4, r4
    4656:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4658:	f000 80bd 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    465c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    465e:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4660:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4664:	f894 5067 	ldrb.w	r5, [r4, #103]	; 0x67
    4668:	6814      	ldr	r4, [r2, #0]
    466a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    466e:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    4672:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4676:	b2a4      	uxth	r4, r4
    4678:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    467a:	f000 80ac 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    467e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4680:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4682:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4686:	f894 5069 	ldrb.w	r5, [r4, #105]	; 0x69
    468a:	6814      	ldr	r4, [r2, #0]
    468c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4690:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    4694:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4698:	b2a4      	uxth	r4, r4
    469a:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    469c:	f000 809b 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46a0:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46a2:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46a4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46a8:	f894 506b 	ldrb.w	r5, [r4, #107]	; 0x6b
    46ac:	6814      	ldr	r4, [r2, #0]
    46ae:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46b2:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    46b6:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    46ba:	b2a4      	uxth	r4, r4
    46bc:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46be:	f000 808a 	beq.w	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46c2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46c4:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46c6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46ca:	f894 506d 	ldrb.w	r5, [r4, #109]	; 0x6d
    46ce:	6814      	ldr	r4, [r2, #0]
    46d0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46d4:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    46d8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    46dc:	b2a4      	uxth	r4, r4
    46de:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46e0:	d079      	beq.n	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46e2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    46e4:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    46e6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46ea:	f894 506f 	ldrb.w	r5, [r4, #111]	; 0x6f
    46ee:	6814      	ldr	r4, [r2, #0]
    46f0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    46f4:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    46f8:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    46fc:	b2a4      	uxth	r4, r4
    46fe:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4700:	d069      	beq.n	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4702:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4704:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4706:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    470a:	f894 5071 	ldrb.w	r5, [r4, #113]	; 0x71
    470e:	6814      	ldr	r4, [r2, #0]
    4710:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4714:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    4718:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    471c:	b2a4      	uxth	r4, r4
    471e:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4720:	d059      	beq.n	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4722:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4724:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4726:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    472a:	f894 5073 	ldrb.w	r5, [r4, #115]	; 0x73
    472e:	6814      	ldr	r4, [r2, #0]
    4730:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4734:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    4738:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    473c:	b2a4      	uxth	r4, r4
    473e:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4740:	d049      	beq.n	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4742:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4744:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4746:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    474a:	f894 5075 	ldrb.w	r5, [r4, #117]	; 0x75
    474e:	6814      	ldr	r4, [r2, #0]
    4750:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4754:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    4758:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    475c:	b2a4      	uxth	r4, r4
    475e:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4760:	d039      	beq.n	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4762:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4764:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4766:	6815      	ldr	r5, [r2, #0]
    4768:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    476c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4770:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    4774:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4778:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    477c:	b29b      	uxth	r3, r3
    477e:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4780:	d029      	beq.n	47d6 <HAL_SPI_TxRxCpltCallback+0x2d6>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4782:	6813      	ldr	r3, [r2, #0]
    4784:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4786:	4816      	ldr	r0, [pc, #88]	; (47e0 <HAL_SPI_TxRxCpltCallback+0x2e0>)
    4788:	f005 f986 	bl	9a98 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    478c:	4b19      	ldr	r3, [pc, #100]	; (47f4 <HAL_SPI_TxRxCpltCallback+0x2f4>)
    478e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4792:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4796:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    479a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    479e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    47a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    47a6:	f005 f8a3 	bl	98f0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    47aa:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    47ac:	4a18      	ldr	r2, [pc, #96]	; (4810 <HAL_SPI_TxRxCpltCallback+0x310>)
    47ae:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi5);
    47b0:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    47b2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    47b6:	480a      	ldr	r0, [pc, #40]	; (47e0 <HAL_SPI_TxRxCpltCallback+0x2e0>)
			__HAL_SPI_ENABLE(&hspi5);
    47b8:	f044 0401 	orr.w	r4, r4, #1
    47bc:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    47be:	f005 f8a3 	bl	9908 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    47c2:	4a0d      	ldr	r2, [pc, #52]	; (47f8 <HAL_SPI_TxRxCpltCallback+0x2f8>)
    47c4:	7813      	ldrb	r3, [r2, #0]
    47c6:	3301      	adds	r3, #1
    47c8:	b2db      	uxtb	r3, r3
    47ca:	7013      	strb	r3, [r2, #0]
}
    47cc:	bd70      	pop	{r4, r5, r6, pc}
			handleSPI(LEVER_BUFFER_SIZE);
    47ce:	2020      	movs	r0, #32
    47d0:	f7fe fcf6 	bl	31c0 <handleSPI>
    47d4:	e6d9      	b.n	458a <HAL_SPI_TxRxCpltCallback+0x8a>
			newPluck = 1;
    47d6:	4b0f      	ldr	r3, [pc, #60]	; (4814 <HAL_SPI_TxRxCpltCallback+0x314>)
    47d8:	2201      	movs	r2, #1
    47da:	601a      	str	r2, [r3, #0]
}
    47dc:	bd70      	pop	{r4, r5, r6, pc}
    47de:	bf00      	nop
    47e0:	2001c658 	.word	0x2001c658
    47e4:	20004f50 	.word	0x20004f50
    47e8:	30000800 	.word	0x30000800
    47ec:	e000ed00 	.word	0xe000ed00
    47f0:	2001c5d0 	.word	0x2001c5d0
    47f4:	58024400 	.word	0x58024400
    47f8:	20018bbd 	.word	0x20018bbd
    47fc:	30000860 	.word	0x30000860
    4800:	38000000 	.word	0x38000000
    4804:	200004b1 	.word	0x200004b1
    4808:	20004f44 	.word	0x20004f44
    480c:	20013f3c 	.word	0x20013f3c
    4810:	38000040 	.word	0x38000040
    4814:	20005020 	.word	0x20005020
    4818:	f3af 8000 	nop.w
    481c:	f3af 8000 	nop.w

00004820 <HAL_SPI_TxRxHalfCpltCallback>:
{
    4820:	b570      	push	{r4, r5, r6, lr}
	if (hspi == &hspi5)
    4822:	4cb6      	ldr	r4, [pc, #728]	; (4afc <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
	interrupted = 1;
    4824:	2201      	movs	r2, #1
    4826:	4bb6      	ldr	r3, [pc, #728]	; (4b00 <HAL_SPI_TxRxHalfCpltCallback+0x2e0>)
	if (hspi == &hspi5)
    4828:	4284      	cmp	r4, r0
	interrupted = 1;
    482a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    482c:	d04c      	beq.n	48c8 <HAL_SPI_TxRxHalfCpltCallback+0xa8>
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_LEVERS_RX) & ~(uint32_t )0x1F), LEVER_BUFFER_SIZE_TIMES_TWO+32);
    482e:	4bb5      	ldr	r3, [pc, #724]	; (4b04 <HAL_SPI_TxRxHalfCpltCallback+0x2e4>)
  __ASM volatile ("dsb 0xF":::"memory");
    4830:	f3bf 8f4f 	dsb	sy
    4834:	4ab4      	ldr	r2, [pc, #720]	; (4b08 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4836:	f103 0120 	add.w	r1, r3, #32
    483a:	f103 0440 	add.w	r4, r3, #64	; 0x40
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    483e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
    4842:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4846:	f8c2 425c 	str.w	r4, [r2, #604]	; 0x25c
    484a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    484e:	f3bf 8f6f 	isb	sy
		if ((SPI_LEVERS_RX[30] == 254) && (SPI_LEVERS_RX[31] == 253))
    4852:	7f9a      	ldrb	r2, [r3, #30]
    4854:	2afe      	cmp	r2, #254	; 0xfe
    4856:	d103      	bne.n	4860 <HAL_SPI_TxRxHalfCpltCallback+0x40>
    4858:	7fdb      	ldrb	r3, [r3, #31]
    485a:	2bfd      	cmp	r3, #253	; 0xfd
    485c:	f000 8145 	beq.w	4aea <HAL_SPI_TxRxHalfCpltCallback+0x2ca>
			HAL_SPI_Abort(&hspi1);
    4860:	4daa      	ldr	r5, [pc, #680]	; (4b0c <HAL_SPI_TxRxHalfCpltCallback+0x2ec>)
    4862:	4628      	mov	r0, r5
    4864:	f005 f918 	bl	9a98 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI1_FORCE_RESET();
    4868:	4ba9      	ldr	r3, [pc, #676]	; (4b10 <HAL_SPI_TxRxHalfCpltCallback+0x2f0>)
    486a:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    486e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    4872:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI1_RELEASE_RESET();
    4876:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    487a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
    487e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI1_Init();
    4882:	f004 ff95 	bl	97b0 <__MX_SPI1_Init_veneer>
			__HAL_SPI_ENABLE(&hspi1);
    4886:	682e      	ldr	r6, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4888:	4a9e      	ldr	r2, [pc, #632]	; (4b04 <HAL_SPI_TxRxHalfCpltCallback+0x2e4>)
    488a:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi1);
    488c:	6831      	ldr	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    488e:	4628      	mov	r0, r5
			__HAL_SPI_ENABLE(&hspi1);
    4890:	f041 0101 	orr.w	r1, r1, #1
    4894:	6031      	str	r1, [r6, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS_RX, LEVER_BUFFER_SIZE_TIMES_TWO);
    4896:	18d1      	adds	r1, r2, r3
    4898:	f005 f836 	bl	9908 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    489c:	4a9d      	ldr	r2, [pc, #628]	; (4b14 <HAL_SPI_TxRxHalfCpltCallback+0x2f4>)
    489e:	7813      	ldrb	r3, [r2, #0]
    48a0:	3301      	adds	r3, #1
    48a2:	b2db      	uxtb	r3, r3
    48a4:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
    48a6:	f3bf 8f4f 	dsb	sy
        op_addr += __SCB_DCACHE_LINE_SIZE;
    48aa:	4a9b      	ldr	r2, [pc, #620]	; (4b18 <HAL_SPI_TxRxHalfCpltCallback+0x2f8>)
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48ac:	4b96      	ldr	r3, [pc, #600]	; (4b08 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    48ae:	f102 0120 	add.w	r1, r2, #32
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48b2:	f8c3 4268 	str.w	r4, [r3, #616]	; 0x268
    48b6:	f8c3 2268 	str.w	r2, [r3, #616]	; 0x268
    48ba:	f8c3 1268 	str.w	r1, [r3, #616]	; 0x268
    48be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48c2:	f3bf 8f6f 	isb	sy
}
    48c6:	bd70      	pop	{r4, r5, r6, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    48c8:	4b94      	ldr	r3, [pc, #592]	; (4b1c <HAL_SPI_TxRxHalfCpltCallback+0x2fc>)
    48ca:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    48ce:	f3bf 8f4f 	dsb	sy
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48d2:	4a8d      	ldr	r2, [pc, #564]	; (4b08 <HAL_SPI_TxRxHalfCpltCallback+0x2e8>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    48d4:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48d8:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    48dc:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    48e0:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    48e4:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    48e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48ec:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    48f0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    48f4:	2afe      	cmp	r2, #254	; 0xfe
    48f6:	f040 80d4 	bne.w	4aa2 <HAL_SPI_TxRxHalfCpltCallback+0x282>
    48fa:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    48fe:	2afd      	cmp	r2, #253	; 0xfd
    4900:	f040 80cf 	bne.w	4aa2 <HAL_SPI_TxRxHalfCpltCallback+0x282>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4904:	4a86      	ldr	r2, [pc, #536]	; (4b20 <HAL_SPI_TxRxHalfCpltCallback+0x300>)
    4906:	7811      	ldrb	r1, [r2, #0]
    4908:	2900      	cmp	r1, #0
    490a:	f000 80f2 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    490e:	4a85      	ldr	r2, [pc, #532]	; (4b24 <HAL_SPI_TxRxHalfCpltCallback+0x304>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4910:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4912:	6814      	ldr	r4, [r2, #0]
    4914:	6810      	ldr	r0, [r2, #0]
    4916:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    491a:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    491e:	f894 5041 	ldrb.w	r5, [r4, #65]	; 0x41
    4922:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
    4926:	4880      	ldr	r0, [pc, #512]	; (4b28 <HAL_SPI_TxRxHalfCpltCallback+0x308>)
    4928:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    492c:	b2a4      	uxth	r4, r4
    492e:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4930:	f000 80df 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4934:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4936:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4938:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    493c:	f894 5043 	ldrb.w	r5, [r4, #67]	; 0x43
    4940:	6814      	ldr	r4, [r2, #0]
    4942:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4946:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    494a:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    494e:	b2a4      	uxth	r4, r4
    4950:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4952:	f000 80ce 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4956:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4958:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    495a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    495e:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
    4962:	6814      	ldr	r4, [r2, #0]
    4964:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4968:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    496c:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4970:	b2a4      	uxth	r4, r4
    4972:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4974:	f000 80bd 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4978:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    497a:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    497c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4980:	f894 5047 	ldrb.w	r5, [r4, #71]	; 0x47
    4984:	6814      	ldr	r4, [r2, #0]
    4986:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    498a:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    498e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4992:	b2a4      	uxth	r4, r4
    4994:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4996:	f000 80ac 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    499a:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    499c:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    499e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49a2:	f894 5049 	ldrb.w	r5, [r4, #73]	; 0x49
    49a6:	6814      	ldr	r4, [r2, #0]
    49a8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49ac:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    49b0:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    49b4:	b2a4      	uxth	r4, r4
    49b6:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49b8:	f000 809b 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49bc:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49be:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49c0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49c4:	f894 504b 	ldrb.w	r5, [r4, #75]	; 0x4b
    49c8:	6814      	ldr	r4, [r2, #0]
    49ca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49ce:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    49d2:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    49d6:	b2a4      	uxth	r4, r4
    49d8:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49da:	f000 808a 	beq.w	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49de:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49e0:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49e2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49e6:	f894 504d 	ldrb.w	r5, [r4, #77]	; 0x4d
    49ea:	6814      	ldr	r4, [r2, #0]
    49ec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    49f0:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    49f4:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    49f8:	b2a4      	uxth	r4, r4
    49fa:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    49fc:	d079      	beq.n	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    49fe:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a00:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a02:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a06:	f894 504f 	ldrb.w	r5, [r4, #79]	; 0x4f
    4a0a:	6814      	ldr	r4, [r2, #0]
    4a0c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a10:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    4a14:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4a18:	b2a4      	uxth	r4, r4
    4a1a:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a1c:	d069      	beq.n	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a1e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a20:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a22:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a26:	f894 5051 	ldrb.w	r5, [r4, #81]	; 0x51
    4a2a:	6814      	ldr	r4, [r2, #0]
    4a2c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a30:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    4a34:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4a38:	b2a4      	uxth	r4, r4
    4a3a:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a3c:	d059      	beq.n	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a3e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a40:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a42:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a46:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
    4a4a:	6814      	ldr	r4, [r2, #0]
    4a4c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a50:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    4a54:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4a58:	b2a4      	uxth	r4, r4
    4a5a:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a5c:	d049      	beq.n	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a5e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a60:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a62:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a66:	f894 5055 	ldrb.w	r5, [r4, #85]	; 0x55
    4a6a:	6814      	ldr	r4, [r2, #0]
    4a6c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a70:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    4a74:	eb04 2405 	add.w	r4, r4, r5, lsl #8
    4a78:	b2a4      	uxth	r4, r4
    4a7a:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a7c:	d039      	beq.n	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a7e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a80:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a82:	6815      	ldr	r5, [r2, #0]
    4a84:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4a88:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4a8c:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    4a90:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    4a94:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4a98:	b29b      	uxth	r3, r3
    4a9a:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4a9c:	d029      	beq.n	4af2 <HAL_SPI_TxRxHalfCpltCallback+0x2d2>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4a9e:	6813      	ldr	r3, [r2, #0]
    4aa0:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4aa2:	4816      	ldr	r0, [pc, #88]	; (4afc <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
    4aa4:	f004 fff8 	bl	9a98 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4aa8:	4b19      	ldr	r3, [pc, #100]	; (4b10 <HAL_SPI_TxRxHalfCpltCallback+0x2f0>)
    4aaa:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4aae:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4ab2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4ab6:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4aba:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4abe:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4ac2:	f004 ff15 	bl	98f0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4ac6:	6825      	ldr	r5, [r4, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ac8:	4a18      	ldr	r2, [pc, #96]	; (4b2c <HAL_SPI_TxRxHalfCpltCallback+0x30c>)
    4aca:	2340      	movs	r3, #64	; 0x40
			__HAL_SPI_ENABLE(&hspi5);
    4acc:	682c      	ldr	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ace:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
    4ad2:	480a      	ldr	r0, [pc, #40]	; (4afc <HAL_SPI_TxRxHalfCpltCallback+0x2dc>)
			__HAL_SPI_ENABLE(&hspi5);
    4ad4:	f044 0401 	orr.w	r4, r4, #1
    4ad8:	602c      	str	r4, [r5, #0]
			HAL_SPI_TransmitReceive_DMA(&hspi5, SPI_PLUCK_TX, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ada:	f004 ff15 	bl	9908 <__HAL_SPI_TransmitReceive_DMA_veneer>
			numResets++;
    4ade:	4a0d      	ldr	r2, [pc, #52]	; (4b14 <HAL_SPI_TxRxHalfCpltCallback+0x2f4>)
    4ae0:	7813      	ldrb	r3, [r2, #0]
    4ae2:	3301      	adds	r3, #1
    4ae4:	b2db      	uxtb	r3, r3
    4ae6:	7013      	strb	r3, [r2, #0]
}
    4ae8:	bd70      	pop	{r4, r5, r6, pc}
			handleSPI(0);
    4aea:	2000      	movs	r0, #0
    4aec:	f7fe fb68 	bl	31c0 <handleSPI>
    4af0:	e6d9      	b.n	48a6 <HAL_SPI_TxRxHalfCpltCallback+0x86>
			newPluck = 1;
    4af2:	4b0f      	ldr	r3, [pc, #60]	; (4b30 <HAL_SPI_TxRxHalfCpltCallback+0x310>)
    4af4:	2201      	movs	r2, #1
    4af6:	601a      	str	r2, [r3, #0]
}
    4af8:	bd70      	pop	{r4, r5, r6, pc}
    4afa:	bf00      	nop
    4afc:	2001c658 	.word	0x2001c658
    4b00:	20004f50 	.word	0x20004f50
    4b04:	30000800 	.word	0x30000800
    4b08:	e000ed00 	.word	0xe000ed00
    4b0c:	2001c5d0 	.word	0x2001c5d0
    4b10:	58024400 	.word	0x58024400
    4b14:	20018bbd 	.word	0x20018bbd
    4b18:	30000860 	.word	0x30000860
    4b1c:	38000000 	.word	0x38000000
    4b20:	200004b1 	.word	0x200004b1
    4b24:	20004f44 	.word	0x20004f44
    4b28:	20013f3c 	.word	0x20013f3c
    4b2c:	38000040 	.word	0x38000040
    4b30:	20005020 	.word	0x20005020
    4b34:	f3af 8000 	nop.w
    4b38:	f3af 8000 	nop.w
    4b3c:	f3af 8000 	nop.w

00004b40 <HAL_SPI_RxCpltCallback>:
{
    4b40:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
    4b42:	4c90      	ldr	r4, [pc, #576]	; (4d84 <HAL_SPI_RxCpltCallback+0x244>)
	interrupted = 1;
    4b44:	2201      	movs	r2, #1
    4b46:	4b90      	ldr	r3, [pc, #576]	; (4d88 <HAL_SPI_RxCpltCallback+0x248>)
	if (hspi == &hspi5)
    4b48:	4284      	cmp	r4, r0
	interrupted = 1;
    4b4a:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4b4c:	d000      	beq.n	4b50 <HAL_SPI_RxCpltCallback+0x10>
}
    4b4e:	bd38      	pop	{r3, r4, r5, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4b50:	4b8e      	ldr	r3, [pc, #568]	; (4d8c <HAL_SPI_RxCpltCallback+0x24c>)
    4b52:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4b56:	f3bf 8f4f 	dsb	sy
    4b5a:	4a8d      	ldr	r2, [pc, #564]	; (4d90 <HAL_SPI_RxCpltCallback+0x250>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4b5c:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4b60:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4b64:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4b68:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4b6c:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4b70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4b74:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[32] == 254) && (SPI_PLUCK_RX[63] == 253))
    4b78:	f893 2060 	ldrb.w	r2, [r3, #96]	; 0x60
    4b7c:	2afe      	cmp	r2, #254	; 0xfe
    4b7e:	f040 80d4 	bne.w	4d2a <HAL_SPI_RxCpltCallback+0x1ea>
    4b82:	f893 207f 	ldrb.w	r2, [r3, #127]	; 0x7f
    4b86:	2afd      	cmp	r2, #253	; 0xfd
    4b88:	f040 80cf 	bne.w	4d2a <HAL_SPI_RxCpltCallback+0x1ea>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b8c:	4a81      	ldr	r2, [pc, #516]	; (4d94 <HAL_SPI_RxCpltCallback+0x254>)
    4b8e:	7811      	ldrb	r1, [r2, #0]
    4b90:	2900      	cmp	r1, #0
    4b92:	f000 80ec 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b96:	4a80      	ldr	r2, [pc, #512]	; (4d98 <HAL_SPI_RxCpltCallback+0x258>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4b98:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4b9a:	6814      	ldr	r4, [r2, #0]
    4b9c:	6810      	ldr	r0, [r2, #0]
    4b9e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ba2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    4ba6:	f894 c061 	ldrb.w	ip, [r4, #97]	; 0x61
    4baa:	f890 4062 	ldrb.w	r4, [r0, #98]	; 0x62
    4bae:	487b      	ldr	r0, [pc, #492]	; (4d9c <HAL_SPI_RxCpltCallback+0x25c>)
    4bb0:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4bb4:	b2a4      	uxth	r4, r4
    4bb6:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4bb8:	f000 80d9 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4bbc:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4bbe:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4bc0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bc4:	f894 c063 	ldrb.w	ip, [r4, #99]	; 0x63
    4bc8:	6814      	ldr	r4, [r2, #0]
    4bca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bce:	f894 4064 	ldrb.w	r4, [r4, #100]	; 0x64
    4bd2:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4bd6:	b2a4      	uxth	r4, r4
    4bd8:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4bda:	f000 80c8 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4bde:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4be0:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4be2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4be6:	f894 c065 	ldrb.w	ip, [r4, #101]	; 0x65
    4bea:	6814      	ldr	r4, [r2, #0]
    4bec:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4bf0:	f894 4066 	ldrb.w	r4, [r4, #102]	; 0x66
    4bf4:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4bf8:	b2a4      	uxth	r4, r4
    4bfa:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4bfc:	f000 80b7 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c00:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c02:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c04:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c08:	f894 c067 	ldrb.w	ip, [r4, #103]	; 0x67
    4c0c:	6814      	ldr	r4, [r2, #0]
    4c0e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c12:	f894 4068 	ldrb.w	r4, [r4, #104]	; 0x68
    4c16:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c1a:	b2a4      	uxth	r4, r4
    4c1c:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c1e:	f000 80a6 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c22:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c24:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c26:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c2a:	f894 c069 	ldrb.w	ip, [r4, #105]	; 0x69
    4c2e:	6814      	ldr	r4, [r2, #0]
    4c30:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c34:	f894 406a 	ldrb.w	r4, [r4, #106]	; 0x6a
    4c38:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c3c:	b2a4      	uxth	r4, r4
    4c3e:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c40:	f000 8095 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c44:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c46:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c48:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c4c:	f894 c06b 	ldrb.w	ip, [r4, #107]	; 0x6b
    4c50:	6814      	ldr	r4, [r2, #0]
    4c52:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c56:	f894 406c 	ldrb.w	r4, [r4, #108]	; 0x6c
    4c5a:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c5e:	b2a4      	uxth	r4, r4
    4c60:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c62:	f000 8084 	beq.w	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c66:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c68:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c6a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c6e:	f894 c06d 	ldrb.w	ip, [r4, #109]	; 0x6d
    4c72:	6814      	ldr	r4, [r2, #0]
    4c74:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c78:	f894 406e 	ldrb.w	r4, [r4, #110]	; 0x6e
    4c7c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4c80:	b2a4      	uxth	r4, r4
    4c82:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c84:	d073      	beq.n	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c86:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4c88:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4c8a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c8e:	f894 c06f 	ldrb.w	ip, [r4, #111]	; 0x6f
    4c92:	6814      	ldr	r4, [r2, #0]
    4c94:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4c98:	f894 4070 	ldrb.w	r4, [r4, #112]	; 0x70
    4c9c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ca0:	b2a4      	uxth	r4, r4
    4ca2:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ca4:	d063      	beq.n	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ca6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ca8:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4caa:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cae:	f894 c071 	ldrb.w	ip, [r4, #113]	; 0x71
    4cb2:	6814      	ldr	r4, [r2, #0]
    4cb4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cb8:	f894 4072 	ldrb.w	r4, [r4, #114]	; 0x72
    4cbc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4cc0:	b2a4      	uxth	r4, r4
    4cc2:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4cc4:	d053      	beq.n	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4cc6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4cc8:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4cca:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cce:	f894 c073 	ldrb.w	ip, [r4, #115]	; 0x73
    4cd2:	6814      	ldr	r4, [r2, #0]
    4cd4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cd8:	f894 4074 	ldrb.w	r4, [r4, #116]	; 0x74
    4cdc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ce0:	b2a4      	uxth	r4, r4
    4ce2:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ce4:	d043      	beq.n	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4ce6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ce8:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4cea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cee:	f894 c075 	ldrb.w	ip, [r4, #117]	; 0x75
    4cf2:	6814      	ldr	r4, [r2, #0]
    4cf4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4cf8:	f894 4076 	ldrb.w	r4, [r4, #118]	; 0x76
    4cfc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4d00:	b2a4      	uxth	r4, r4
    4d02:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d04:	d033      	beq.n	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4d06:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d08:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4d0a:	6815      	ldr	r5, [r2, #0]
    4d0c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4d10:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4d14:	f894 4077 	ldrb.w	r4, [r4, #119]	; 0x77
    4d18:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    4d1c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4d20:	b29b      	uxth	r3, r3
    4d22:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4d24:	d023      	beq.n	4d6e <HAL_SPI_RxCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 33] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 34];
    4d26:	6813      	ldr	r3, [r2, #0]
    4d28:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4d2a:	4816      	ldr	r0, [pc, #88]	; (4d84 <HAL_SPI_RxCpltCallback+0x244>)
    4d2c:	f004 feb4 	bl	9a98 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4d30:	4b1b      	ldr	r3, [pc, #108]	; (4da0 <HAL_SPI_RxCpltCallback+0x260>)
    4d32:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4d36:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4d3a:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4d3e:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4d42:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4d46:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4d4a:	f004 fdd1 	bl	98f0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4d4e:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4d50:	2240      	movs	r2, #64	; 0x40
    4d52:	4914      	ldr	r1, [pc, #80]	; (4da4 <HAL_SPI_RxCpltCallback+0x264>)
			__HAL_SPI_ENABLE(&hspi5);
    4d54:	6823      	ldr	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4d56:	480b      	ldr	r0, [pc, #44]	; (4d84 <HAL_SPI_RxCpltCallback+0x244>)
			__HAL_SPI_ENABLE(&hspi5);
    4d58:	f043 0301 	orr.w	r3, r3, #1
    4d5c:	6023      	str	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4d5e:	f004 ff37 	bl	9bd0 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4d62:	4a11      	ldr	r2, [pc, #68]	; (4da8 <HAL_SPI_RxCpltCallback+0x268>)
    4d64:	7813      	ldrb	r3, [r2, #0]
    4d66:	3301      	adds	r3, #1
    4d68:	b2db      	uxtb	r3, r3
    4d6a:	7013      	strb	r3, [r2, #0]
}
    4d6c:	bd38      	pop	{r3, r4, r5, pc}
			newPluck = 1;
    4d6e:	4b0f      	ldr	r3, [pc, #60]	; (4dac <HAL_SPI_RxCpltCallback+0x26c>)
    4d70:	2401      	movs	r4, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4d72:	2240      	movs	r2, #64	; 0x40
    4d74:	490b      	ldr	r1, [pc, #44]	; (4da4 <HAL_SPI_RxCpltCallback+0x264>)
			newPluck = 1;
    4d76:	601c      	str	r4, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4d78:	4802      	ldr	r0, [pc, #8]	; (4d84 <HAL_SPI_RxCpltCallback+0x244>)
}
    4d7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4d7e:	f004 bf27 	b.w	9bd0 <__HAL_SPI_Receive_DMA_veneer>
    4d82:	bf00      	nop
    4d84:	2001c658 	.word	0x2001c658
    4d88:	20004f50 	.word	0x20004f50
    4d8c:	38000000 	.word	0x38000000
    4d90:	e000ed00 	.word	0xe000ed00
    4d94:	200004b1 	.word	0x200004b1
    4d98:	20004f44 	.word	0x20004f44
    4d9c:	20013f3c 	.word	0x20013f3c
    4da0:	58024400 	.word	0x58024400
    4da4:	38000040 	.word	0x38000040
    4da8:	20018bbd 	.word	0x20018bbd
    4dac:	20005020 	.word	0x20005020
    4db0:	f3af 8000 	nop.w
    4db4:	f3af 8000 	nop.w
    4db8:	f3af 8000 	nop.w
    4dbc:	f3af 8000 	nop.w

00004dc0 <HAL_SPI_RxHalfCpltCallback>:
{
    4dc0:	b538      	push	{r3, r4, r5, lr}
	if (hspi == &hspi5)
    4dc2:	4c90      	ldr	r4, [pc, #576]	; (5004 <HAL_SPI_RxHalfCpltCallback+0x244>)
	interrupted = 1;
    4dc4:	2201      	movs	r2, #1
    4dc6:	4b90      	ldr	r3, [pc, #576]	; (5008 <HAL_SPI_RxHalfCpltCallback+0x248>)
	if (hspi == &hspi5)
    4dc8:	4284      	cmp	r4, r0
	interrupted = 1;
    4dca:	701a      	strb	r2, [r3, #0]
	if (hspi == &hspi5)
    4dcc:	d000      	beq.n	4dd0 <HAL_SPI_RxHalfCpltCallback+0x10>
}
    4dce:	bd38      	pop	{r3, r4, r5, pc}
		SCB_InvalidateDCache_by_Addr((uint32_t *)(((uint32_t )SPI_PLUCK_RX) & ~(uint32_t )0x1F), PLUCK_BUFFER_SIZE_TIMES_TWO+32);
    4dd0:	4b8e      	ldr	r3, [pc, #568]	; (500c <HAL_SPI_RxHalfCpltCallback+0x24c>)
    4dd2:	f103 0040 	add.w	r0, r3, #64	; 0x40
  __ASM volatile ("dsb 0xF":::"memory");
    4dd6:	f3bf 8f4f 	dsb	sy
    4dda:	4a8d      	ldr	r2, [pc, #564]	; (5010 <HAL_SPI_RxHalfCpltCallback+0x250>)
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4ddc:	f103 0160 	add.w	r1, r3, #96	; 0x60
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4de0:	f8c2 025c 	str.w	r0, [r2, #604]	; 0x25c
    4de4:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
    4de8:	f103 0180 	add.w	r1, r3, #128	; 0x80
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
    4dec:	f8c2 125c 	str.w	r1, [r2, #604]	; 0x25c
    4df0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4df4:	f3bf 8f6f 	isb	sy
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[31] == 253))
    4df8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
    4dfc:	2afe      	cmp	r2, #254	; 0xfe
    4dfe:	f040 80d4 	bne.w	4faa <HAL_SPI_RxHalfCpltCallback+0x1ea>
    4e02:	f893 205f 	ldrb.w	r2, [r3, #95]	; 0x5f
    4e06:	2afd      	cmp	r2, #253	; 0xfd
    4e08:	f040 80cf 	bne.w	4faa <HAL_SPI_RxHalfCpltCallback+0x1ea>
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e0c:	4a81      	ldr	r2, [pc, #516]	; (5014 <HAL_SPI_RxHalfCpltCallback+0x254>)
    4e0e:	7811      	ldrb	r1, [r2, #0]
    4e10:	2900      	cmp	r1, #0
    4e12:	f000 80ec 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e16:	4a80      	ldr	r2, [pc, #512]	; (5018 <HAL_SPI_RxHalfCpltCallback+0x258>)
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e18:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e1a:	6814      	ldr	r4, [r2, #0]
    4e1c:	6810      	ldr	r0, [r2, #0]
    4e1e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e22:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    4e26:	f894 c041 	ldrb.w	ip, [r4, #65]	; 0x41
    4e2a:	f890 4042 	ldrb.w	r4, [r0, #66]	; 0x42
    4e2e:	487b      	ldr	r0, [pc, #492]	; (501c <HAL_SPI_RxHalfCpltCallback+0x25c>)
    4e30:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e34:	b2a4      	uxth	r4, r4
    4e36:	8004      	strh	r4, [r0, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e38:	f000 80d9 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e3c:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e3e:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e40:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e44:	f894 c043 	ldrb.w	ip, [r4, #67]	; 0x43
    4e48:	6814      	ldr	r4, [r2, #0]
    4e4a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e4e:	f894 4044 	ldrb.w	r4, [r4, #68]	; 0x44
    4e52:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e56:	b2a4      	uxth	r4, r4
    4e58:	8044      	strh	r4, [r0, #2]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e5a:	f000 80c8 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e5e:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e60:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e62:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e66:	f894 c045 	ldrb.w	ip, [r4, #69]	; 0x45
    4e6a:	6814      	ldr	r4, [r2, #0]
    4e6c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e70:	f894 4046 	ldrb.w	r4, [r4, #70]	; 0x46
    4e74:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e78:	b2a4      	uxth	r4, r4
    4e7a:	8084      	strh	r4, [r0, #4]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e7c:	f000 80b7 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e80:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e82:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4e84:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e88:	f894 c047 	ldrb.w	ip, [r4, #71]	; 0x47
    4e8c:	6814      	ldr	r4, [r2, #0]
    4e8e:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4e92:	f894 4048 	ldrb.w	r4, [r4, #72]	; 0x48
    4e96:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4e9a:	b2a4      	uxth	r4, r4
    4e9c:	80c4      	strh	r4, [r0, #6]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4e9e:	f000 80a6 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ea2:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ea4:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ea6:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4eaa:	f894 c049 	ldrb.w	ip, [r4, #73]	; 0x49
    4eae:	6814      	ldr	r4, [r2, #0]
    4eb0:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4eb4:	f894 404a 	ldrb.w	r4, [r4, #74]	; 0x4a
    4eb8:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ebc:	b2a4      	uxth	r4, r4
    4ebe:	8104      	strh	r4, [r0, #8]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ec0:	f000 8095 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ec4:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ec6:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ec8:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ecc:	f894 c04b 	ldrb.w	ip, [r4, #75]	; 0x4b
    4ed0:	6814      	ldr	r4, [r2, #0]
    4ed2:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ed6:	f894 404c 	ldrb.w	r4, [r4, #76]	; 0x4c
    4eda:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4ede:	b2a4      	uxth	r4, r4
    4ee0:	8144      	strh	r4, [r0, #10]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ee2:	f000 8084 	beq.w	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4ee6:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4ee8:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4eea:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4eee:	f894 c04d 	ldrb.w	ip, [r4, #77]	; 0x4d
    4ef2:	6814      	ldr	r4, [r2, #0]
    4ef4:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4ef8:	f894 404e 	ldrb.w	r4, [r4, #78]	; 0x4e
    4efc:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4f00:	b2a4      	uxth	r4, r4
    4f02:	8184      	strh	r4, [r0, #12]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f04:	d073      	beq.n	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f06:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f08:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f0a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f0e:	f894 c04f 	ldrb.w	ip, [r4, #79]	; 0x4f
    4f12:	6814      	ldr	r4, [r2, #0]
    4f14:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f18:	f894 4050 	ldrb.w	r4, [r4, #80]	; 0x50
    4f1c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4f20:	b2a4      	uxth	r4, r4
    4f22:	81c4      	strh	r4, [r0, #14]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f24:	d063      	beq.n	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f26:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f28:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f2a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f2e:	f894 c051 	ldrb.w	ip, [r4, #81]	; 0x51
    4f32:	6814      	ldr	r4, [r2, #0]
    4f34:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f38:	f894 4052 	ldrb.w	r4, [r4, #82]	; 0x52
    4f3c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4f40:	b2a4      	uxth	r4, r4
    4f42:	8204      	strh	r4, [r0, #16]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f44:	d053      	beq.n	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f46:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f48:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f4a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f4e:	f894 c053 	ldrb.w	ip, [r4, #83]	; 0x53
    4f52:	6814      	ldr	r4, [r2, #0]
    4f54:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f58:	f894 4054 	ldrb.w	r4, [r4, #84]	; 0x54
    4f5c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4f60:	b2a4      	uxth	r4, r4
    4f62:	8244      	strh	r4, [r0, #18]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f64:	d043      	beq.n	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f66:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f68:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f6a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f6e:	f894 c055 	ldrb.w	ip, [r4, #85]	; 0x55
    4f72:	6814      	ldr	r4, [r2, #0]
    4f74:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f78:	f894 4056 	ldrb.w	r4, [r4, #86]	; 0x56
    4f7c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
    4f80:	b2a4      	uxth	r4, r4
    4f82:	8284      	strh	r4, [r0, #20]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f84:	d033      	beq.n	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f86:	6814      	ldr	r4, [r2, #0]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4f88:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4f8a:	6815      	ldr	r5, [r2, #0]
    4f8c:	eb03 0444 	add.w	r4, r3, r4, lsl #1
    4f90:	eb03 0345 	add.w	r3, r3, r5, lsl #1
    4f94:	f894 4057 	ldrb.w	r4, [r4, #87]	; 0x57
    4f98:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
    4f9c:	eb03 2304 	add.w	r3, r3, r4, lsl #8
    4fa0:	b29b      	uxth	r3, r3
    4fa2:	82c3      	strh	r3, [r0, #22]
			for (uint_fast8_t i = 0; i < numStringsThisBoard; i++)
    4fa4:	d023      	beq.n	4fee <HAL_SPI_RxHalfCpltCallback+0x22e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
    4fa6:	6813      	ldr	r3, [r2, #0]
    4fa8:	6813      	ldr	r3, [r2, #0]
			HAL_SPI_Abort(&hspi5);
    4faa:	4816      	ldr	r0, [pc, #88]	; (5004 <HAL_SPI_RxHalfCpltCallback+0x244>)
    4fac:	f004 fd74 	bl	9a98 <__HAL_SPI_Abort_veneer>
			__HAL_RCC_SPI5_FORCE_RESET();
    4fb0:	4b1b      	ldr	r3, [pc, #108]	; (5020 <HAL_SPI_RxHalfCpltCallback+0x260>)
    4fb2:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4fb6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    4fba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			__HAL_RCC_SPI5_RELEASE_RESET();
    4fbe:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
    4fc2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    4fc6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
			MX_SPI5_Init();
    4fca:	f004 fc91 	bl	98f0 <__MX_SPI5_Init_veneer>
			__HAL_SPI_ENABLE(&hspi5);
    4fce:	6824      	ldr	r4, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4fd0:	2240      	movs	r2, #64	; 0x40
    4fd2:	4914      	ldr	r1, [pc, #80]	; (5024 <HAL_SPI_RxHalfCpltCallback+0x264>)
			__HAL_SPI_ENABLE(&hspi5);
    4fd4:	6823      	ldr	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4fd6:	480b      	ldr	r0, [pc, #44]	; (5004 <HAL_SPI_RxHalfCpltCallback+0x244>)
			__HAL_SPI_ENABLE(&hspi5);
    4fd8:	f043 0301 	orr.w	r3, r3, #1
    4fdc:	6023      	str	r3, [r4, #0]
			HAL_SPI_Receive_DMA(&hspi5,  SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4fde:	f004 fdf7 	bl	9bd0 <__HAL_SPI_Receive_DMA_veneer>
			numResets++;
    4fe2:	4a11      	ldr	r2, [pc, #68]	; (5028 <HAL_SPI_RxHalfCpltCallback+0x268>)
    4fe4:	7813      	ldrb	r3, [r2, #0]
    4fe6:	3301      	adds	r3, #1
    4fe8:	b2db      	uxtb	r3, r3
    4fea:	7013      	strb	r3, [r2, #0]
}
    4fec:	bd38      	pop	{r3, r4, r5, pc}
			newPluck = 1;
    4fee:	4b0f      	ldr	r3, [pc, #60]	; (502c <HAL_SPI_RxHalfCpltCallback+0x26c>)
    4ff0:	2401      	movs	r4, #1
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ff2:	2240      	movs	r2, #64	; 0x40
    4ff4:	490b      	ldr	r1, [pc, #44]	; (5024 <HAL_SPI_RxHalfCpltCallback+0x264>)
			newPluck = 1;
    4ff6:	601c      	str	r4, [r3, #0]
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ff8:	4802      	ldr	r0, [pc, #8]	; (5004 <HAL_SPI_RxHalfCpltCallback+0x244>)
}
    4ffa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
    4ffe:	f004 bde7 	b.w	9bd0 <__HAL_SPI_Receive_DMA_veneer>
    5002:	bf00      	nop
    5004:	2001c658 	.word	0x2001c658
    5008:	20004f50 	.word	0x20004f50
    500c:	38000000 	.word	0x38000000
    5010:	e000ed00 	.word	0xe000ed00
    5014:	200004b1 	.word	0x200004b1
    5018:	20004f44 	.word	0x20004f44
    501c:	20013f3c 	.word	0x20013f3c
    5020:	58024400 	.word	0x58024400
    5024:	38000040 	.word	0x38000040
    5028:	20018bbd 	.word	0x20018bbd
    502c:	20005020 	.word	0x20005020
	...

00005040 <audioInitString1>:
tSimpleLivingString3 livStr[NUM_STRINGS_PER_BOARD];
tPickupNonLinearity pu[NUM_STRINGS_PER_BOARD];
tExpSmooth pitchSmootherS[NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM audioInitString1()
{
    5040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5044:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 512c <audioInitString1+0xec>
    5048:	f899 3000 	ldrb.w	r3, [r9]
{
    504c:	ed2d 8b06 	vpush	{d8-d10}
	for (int v = 0; v < numStringsThisBoard; v++)
    5050:	2b00      	cmp	r3, #0
    5052:	d048      	beq.n	50e6 <audioInitString1+0xa6>
    5054:	4c27      	ldr	r4, [pc, #156]	; (50f4 <audioInitString1+0xb4>)
    5056:	2500      	movs	r5, #0
    5058:	4f27      	ldr	r7, [pc, #156]	; (50f8 <audioInitString1+0xb8>)
    505a:	4e28      	ldr	r6, [pc, #160]	; (50fc <audioInitString1+0xbc>)
	{

		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    505c:	ed9f aa28 	vldr	s20, [pc, #160]	; 5100 <audioInitString1+0xc0>
    5060:	ed9f 8a28 	vldr	s16, [pc, #160]	; 5104 <audioInitString1+0xc4>
    5064:	eddf 9a28 	vldr	s19, [pc, #160]	; 5108 <audioInitString1+0xc8>
    5068:	ed9f 9a28 	vldr	s18, [pc, #160]	; 510c <audioInitString1+0xcc>
    506c:	eddf 8a28 	vldr	s17, [pc, #160]	; 5110 <audioInitString1+0xd0>
												 0.01f, 0, &mediumPool);
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
		tPickupNonLinearity_init(&pu[v], &leaf);
    5070:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 5130 <audioInitString1+0xf0>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
    5074:	4b27      	ldr	r3, [pc, #156]	; (5114 <audioInitString1+0xd4>)
    5076:	eef0 2a4a 	vmov.f32	s5, s20
    507a:	eef0 1a48 	vmov.f32	s3, s16
    507e:	2200      	movs	r2, #0
    5080:	eeb0 1a69 	vmov.f32	s2, s19
    5084:	ed9f 2a1e 	vldr	s4, [pc, #120]	; 5100 <audioInitString1+0xc0>
    5088:	eef0 0a49 	vmov.f32	s1, s18
    508c:	2104      	movs	r1, #4
    508e:	4620      	mov	r0, r4
    5090:	eeb0 0a68 	vmov.f32	s0, s17
    5094:	f004 fc88 	bl	99a8 <__tSimpleLivingString3_initToPool_veneer>
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    5098:	4620      	mov	r0, r4
    509a:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 5118 <audioInitString1+0xd8>
	for (int v = 0; v < numStringsThisBoard; v++)
    509e:	3501      	adds	r5, #1
		tSimpleLivingString3_setTargetLev(&livStr[v], 0.047059f);
    50a0:	f004 fc86 	bl	99b0 <__tSimpleLivingString3_setTargetLev_veneer>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[v], 0.0301913f);
    50a4:	4620      	mov	r0, r4
    50a6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 511c <audioInitString1+0xdc>
    50aa:	f004 fb7d 	bl	97a8 <__tSimpleLivingString3_setLevSmoothFactor_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[v], 0.0f);
    50ae:	eeb0 0a48 	vmov.f32	s0, s16
    50b2:	4620      	mov	r0, r4
    50b4:	f004 fbd8 	bl	9868 <__tSimpleLivingString3_setLevStrength_veneer>
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    50b8:	4620      	mov	r0, r4
    50ba:	2101      	movs	r1, #1
	for (int v = 0; v < numStringsThisBoard; v++)
    50bc:	3404      	adds	r4, #4
		tSimpleLivingString3_setLevMode(&livStr[v], 1);
    50be:	f004 fce7 	bl	9a90 <__tSimpleLivingString3_setLevMode_veneer>
		tPickupNonLinearity_init(&pu[v], &leaf);
    50c2:	4638      	mov	r0, r7
    50c4:	4641      	mov	r1, r8
	for (int v = 0; v < numStringsThisBoard; v++)
    50c6:	3704      	adds	r7, #4
		tPickupNonLinearity_init(&pu[v], &leaf);
    50c8:	f004 fc06 	bl	98d8 <__tPickupNonLinearity_init_veneer>
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    50cc:	4630      	mov	r0, r6
    50ce:	4641      	mov	r1, r8
    50d0:	eddf 0a13 	vldr	s1, [pc, #76]	; 5120 <audioInitString1+0xe0>
    50d4:	ed9f 0a13 	vldr	s0, [pc, #76]	; 5124 <audioInitString1+0xe4>
	for (int v = 0; v < numStringsThisBoard; v++)
    50d8:	3604      	adds	r6, #4
		tExpSmooth_init(&pitchSmootherS[v], 64.0f, 0.6f, &leaf);
    50da:	f004 fb79 	bl	97d0 <__tExpSmooth_init_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    50de:	f899 3000 	ldrb.w	r3, [r9]
    50e2:	42ab      	cmp	r3, r5
    50e4:	dcc6      	bgt.n	5074 <audioInitString1+0x34>
	}

	whichStringModelLoaded = String1Loaded;
    50e6:	4b10      	ldr	r3, [pc, #64]	; (5128 <audioInitString1+0xe8>)
    50e8:	2200      	movs	r2, #0
    50ea:	701a      	strb	r2, [r3, #0]
}
    50ec:	ecbd 8b06 	vpop	{d8-d10}
    50f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    50f4:	2001c6e0 	.word	0x2001c6e0
    50f8:	2001c6f0 	.word	0x2001c6f0
    50fc:	2001c6e8 	.word	0x2001c6e8
    5100:	3c23d70a 	.word	0x3c23d70a
    5104:	00000000 	.word	0x00000000
    5108:	3f7fff58 	.word	0x3f7fff58
    510c:	4684d000 	.word	0x4684d000
    5110:	435c0000 	.word	0x435c0000
    5114:	20005018 	.word	0x20005018
    5118:	3d40c0f0 	.word	0x3d40c0f0
    511c:	3cf753bf 	.word	0x3cf753bf
    5120:	3f19999a 	.word	0x3f19999a
    5124:	42800000 	.word	0x42800000
    5128:	20013f91 	.word	0x20013f91
    512c:	200004b1 	.word	0x200004b1
    5130:	20004fc4 	.word	0x20004fc4
    5134:	f3af 8000 	nop.w
    5138:	f3af 8000 	nop.w
    513c:	f3af 8000 	nop.w

00005140 <audioFreeString1>:


void __ATTR_ITCMRAM audioFreeString1()
{
    5140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5144:	f8df 8044 	ldr.w	r8, [pc, #68]	; 518c <audioFreeString1+0x4c>
    5148:	f898 3000 	ldrb.w	r3, [r8]
    514c:	b1ab      	cbz	r3, 517a <audioFreeString1+0x3a>
    514e:	4f0c      	ldr	r7, [pc, #48]	; (5180 <audioFreeString1+0x40>)
    5150:	2400      	movs	r4, #0
    5152:	4e0c      	ldr	r6, [pc, #48]	; (5184 <audioFreeString1+0x44>)
    5154:	4d0c      	ldr	r5, [pc, #48]	; (5188 <audioFreeString1+0x48>)
	{
		tExpSmooth_free(&pitchSmootherS[v]);
    5156:	4638      	mov	r0, r7
	for (int v = 0; v < numStringsThisBoard; v++)
    5158:	3401      	adds	r4, #1
		tExpSmooth_free(&pitchSmootherS[v]);
    515a:	f004 fcf9 	bl	9b50 <__tExpSmooth_free_veneer>
		tSimpleLivingString3_free(&livStr[v]);
    515e:	4630      	mov	r0, r6
    5160:	f004 fc0e 	bl	9980 <__tSimpleLivingString3_free_veneer>
		tPickupNonLinearity_free(&pu[v]);
    5164:	4628      	mov	r0, r5
    5166:	f004 fb6b 	bl	9840 <__tPickupNonLinearity_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    516a:	f898 3000 	ldrb.w	r3, [r8]
    516e:	3704      	adds	r7, #4
    5170:	3604      	adds	r6, #4
    5172:	42a3      	cmp	r3, r4
    5174:	f105 0504 	add.w	r5, r5, #4
    5178:	dced      	bgt.n	5156 <audioFreeString1+0x16>
	}
}
    517a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    517e:	bf00      	nop
    5180:	2001c6e8 	.word	0x2001c6e8
    5184:	2001c6e0 	.word	0x2001c6e0
    5188:	2001c6f0 	.word	0x2001c6f0
    518c:	200004b1 	.word	0x200004b1
    5190:	f3af 8000 	nop.w
    5194:	f3af 8000 	nop.w
    5198:	f3af 8000 	nop.w
    519c:	f3af 8000 	nop.w

000051a0 <audioTickString1>:
}



float __ATTR_ITCMRAM audioTickString1(void)
{
    51a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
    51a4:	4b9b      	ldr	r3, [pc, #620]	; (5414 <audioTickString1+0x274>)
    51a6:	4c9c      	ldr	r4, [pc, #624]	; (5418 <audioTickString1+0x278>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    51a8:	489c      	ldr	r0, [pc, #624]	; (541c <audioTickString1+0x27c>)
    51aa:	f8df 82c8 	ldr.w	r8, [pc, #712]	; 5474 <audioTickString1+0x2d4>
    51ae:	4625      	mov	r5, r4
    51b0:	f104 0930 	add.w	r9, r4, #48	; 0x30
{
    51b4:	ed2d 8b0a 	vpush	{d8-d12}
    51b8:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
    51ba:	781b      	ldrb	r3, [r3, #0]
{
    51bc:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
    51be:	009b      	lsls	r3, r3, #2
    51c0:	3307      	adds	r3, #7
    51c2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
    51c6:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    51ca:	f004 fc21 	bl	9a10 <__tExpSmooth_tick_veneer>
    51ce:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
    51d2:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    51d4:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
    51d6:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    51da:	f004 fc19 	bl	9a10 <__tExpSmooth_tick_veneer>
    51de:	eca5 0a01 	vstmia	r5!, {s0}
	for (int i = 0; i < 12; i++)
    51e2:	454d      	cmp	r5, r9
    51e4:	d1f6      	bne.n	51d4 <audioTickString1+0x34>
	}
	pluckPos = knobScaled[9];

	for (int i = 0; i < numStringsThisBoard; i++)
    51e6:	4b8b      	ldr	r3, [pc, #556]	; (5414 <audioTickString1+0x274>)
	pluckPos = knobScaled[9];
    51e8:	4a8d      	ldr	r2, [pc, #564]	; (5420 <audioTickString1+0x280>)
    51ea:	6a61      	ldr	r1, [r4, #36]	; 0x24
	for (int i = 0; i < numStringsThisBoard; i++)
    51ec:	781b      	ldrb	r3, [r3, #0]
	float temp = 0.0f;
    51ee:	ed9f 8a8d 	vldr	s16, [pc, #564]	; 5424 <audioTickString1+0x284>
	pluckPos = knobScaled[9];
    51f2:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    51f4:	2b00      	cmp	r3, #0
    51f6:	f000 80d2 	beq.w	539e <audioTickString1+0x1fe>
    51fa:	4b8b      	ldr	r3, [pc, #556]	; (5428 <audioTickString1+0x288>)
    51fc:	2200      	movs	r2, #0
    51fe:	f8df 9278 	ldr.w	r9, [pc, #632]	; 5478 <audioTickString1+0x2d8>
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
    5202:	eef0 8a48 	vmov.f32	s17, s16
    5206:	f8df a274 	ldr.w	sl, [pc, #628]	; 547c <audioTickString1+0x2dc>
    520a:	f8df 8274 	ldr.w	r8, [pc, #628]	; 5480 <audioTickString1+0x2e0>
    520e:	613b      	str	r3, [r7, #16]
    5210:	4b86      	ldr	r3, [pc, #536]	; (542c <audioTickString1+0x28c>)
    5212:	ed9f ba87 	vldr	s22, [pc, #540]	; 5430 <audioTickString1+0x290>
    5216:	617b      	str	r3, [r7, #20]
		{
			decay = (knobScaled[10] * 800.0f) + 10.0f;
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
		tSimpleLivingString3_setDecay(&livStr[i], decay);
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    5218:	4633      	mov	r3, r6
		float decay = 0.1f;
    521a:	eddf aa86 	vldr	s21, [pc, #536]	; 5434 <audioTickString1+0x294>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    521e:	4616      	mov	r6, r2
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5220:	eddf ba85 	vldr	s23, [pc, #532]	; 5438 <audioTickString1+0x298>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    5224:	4652      	mov	r2, sl
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    5226:	ed9f aa85 	vldr	s20, [pc, #532]	; 543c <audioTickString1+0x29c>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    522a:	46ca      	mov	sl, r9
    522c:	4d84      	ldr	r5, [pc, #528]	; (5440 <audioTickString1+0x2a0>)
    522e:	46c1      	mov	r9, r8
    5230:	f8df b250 	ldr.w	fp, [pc, #592]	; 5484 <audioTickString1+0x2e4>
    5234:	eddf 9a83 	vldr	s19, [pc, #524]	; 5444 <audioTickString1+0x2a4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    5238:	4983      	ldr	r1, [pc, #524]	; (5448 <audioTickString1+0x2a8>)
			note[i] = 0.0f;
    523a:	eeb0 ca68 	vmov.f32	s24, s17
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    523e:	ea4f 0886 	mov.w	r8, r6, lsl #2
    5242:	eb01 0186 	add.w	r1, r1, r6, lsl #2
    5246:	edd1 7a00 	vldr	s15, [r1]
    524a:	6939      	ldr	r1, [r7, #16]
    524c:	ecb1 7a01 	vldmia	r1!, {s14}
    5250:	ee77 7a87 	vadd.f32	s15, s15, s14
    5254:	6139      	str	r1, [r7, #16]
		if (note[i] < 0.0f)
    5256:	eef5 7ac0 	vcmpe.f32	s15, #0.0
		note[i] = stringMIDIPitches[i] + stringOctave[i];
    525a:	ece3 7a01 	vstmia	r3!, {s15}
		if (note[i] < 0.0f)
    525e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5262:	f100 80d3 	bmi.w	540c <audioTickString1+0x26c>
    5266:	ed43 7a01 	vstr	s15, [r3, #-4]
		if (note[i] > 127.0f)
    526a:	fe87 cacb 	vminnm.f32	s24, s15, s22
		if (lsDecay[i])
    526e:	6978      	ldr	r0, [r7, #20]
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5270:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
		float decay = 0.1f;
    5274:	eef0 ca6a 	vmov.f32	s25, s21
    5278:	ed03 ca01 	vstr	s24, [r3, #-4]
		if (lsDecay[i])
    527c:	f810 1b01 	ldrb.w	r1, [r0], #1
    5280:	6178      	str	r0, [r7, #20]
    5282:	b129      	cbz	r1, 5290 <audioTickString1+0xf0>
			decay = (knobScaled[10] * 800.0f) + 10.0f;
    5284:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    5288:	eee7 7a2b 	vfma.f32	s15, s14, s23
    528c:	eef0 ca67 	vmov.f32	s25, s15
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    5290:	4628      	mov	r0, r5
    5292:	ed94 0a08 	vldr	s0, [r4, #32]
	for (int i = 0; i < numStringsThisBoard; i++)
    5296:	3601      	adds	r6, #1
    5298:	e9c7 3201 	strd	r3, r2, [r7, #4]
    529c:	4b6b      	ldr	r3, [pc, #428]	; (544c <audioTickString1+0x2ac>)
    529e:	4498      	add	r8, r3
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    52a0:	f004 faba 	bl	9818 <__tSimpleLivingString3_setPickupPoint_veneer>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
    52a4:	4628      	mov	r0, r5
    52a6:	eeb0 0a6c 	vmov.f32	s0, s25
    52aa:	f004 fc49 	bl	9b40 <__tSimpleLivingString3_setDecay_veneer>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
    52ae:	4628      	mov	r0, r5
    52b0:	eeb0 0a69 	vmov.f32	s0, s19
    52b4:	f004 fc1c 	bl	9af0 <__tSimpleLivingString3_setDampFreq_veneer>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[0] * 0.0352872f);
    52b8:	ed94 0a00 	vldr	s0, [r4]
    52bc:	4628      	mov	r0, r5
    52be:	ee20 0a0a 	vmul.f32	s0, s0, s20
    52c2:	f004 fad1 	bl	9868 <__tSimpleLivingString3_setLevStrength_veneer>

		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    52c6:	edd4 7a05 	vldr	s15, [r4, #20]
    52ca:	eddf 6a61 	vldr	s13, [pc, #388]	; 5450 <audioTickString1+0x2b0>
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    52ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		livStr[i]->rippleDelay = knobScaled[11];
    52d2:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    52d6:	eeb0 0a4c 	vmov.f32	s0, s24
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    52da:	ee67 7aa6 	vmul.f32	s15, s15, s13
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
    52de:	60fd      	str	r5, [r7, #12]
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    52e0:	f855 0b04 	ldr.w	r0, [r5], #4
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    52e4:	ee37 6a87 	vadd.f32	s12, s15, s14
		livStr[i]->rippleDelay = knobScaled[11];
    52e8:	f8c0 c068 	str.w	ip, [r0, #104]	; 0x68
		livStr[i]->rippleGain = knobScaled[5] * -0.03f;
    52ec:	edc0 7a19 	vstr	s15, [r0, #100]	; 0x64
		livStr[i]->invOnePlusr = 1.0f / (1.0f + livStr[i]->rippleGain);
    52f0:	eec7 6a06 	vdiv.f32	s13, s14, s12
    52f4:	edc0 6a1b 	vstr	s13, [r0, #108]	; 0x6c
		tExpSmooth_setDest(&pitchSmootherS[i], mtof(note[i]));
    52f8:	f004 fae6 	bl	98c8 <__mtof_veneer>
    52fc:	4648      	mov	r0, r9
    52fe:	f004 fac3 	bl	9888 <__tExpSmooth_setDest_veneer>
		float finalFreq = tExpSmooth_tick(&pitchSmootherS[i]);
    5302:	4648      	mov	r0, r9
    5304:	f004 fb84 	bl	9a10 <__tExpSmooth_tick_veneer>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    5308:	68f9      	ldr	r1, [r7, #12]
	for (int i = 0; i < numStringsThisBoard; i++)
    530a:	f109 0904 	add.w	r9, r9, #4
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
    530e:	4608      	mov	r0, r1
    5310:	f004 fb52 	bl	99b8 <__tSimpleLivingString3_setFreq_veneer>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    5314:	4b4f      	ldr	r3, [pc, #316]	; (5454 <audioTickString1+0x2b4>)
    5316:	eddb 7a00 	vldr	s15, [fp]
		if (barDelta > 0.2f)
		{
			barDelta = 0.0f; //to avoid noise on open string glitches
		}
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    531a:	4640      	mov	r0, r8
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    531c:	edd3 6a00 	vldr	s13, [r3]
		if (barDelta > 0.2f)
    5320:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 5458 <audioTickString1+0x2b8>
		float barDelta = fabsf(barInMIDI[0]-prevBarInMIDI[0]);
    5324:	ee77 7ae6 	vsub.f32	s15, s15, s13
    5328:	eeb0 0ae7 	vabs.f32	s0, s15
			barDelta = 0.0f; //to avoid noise on open string glitches
    532c:	eeb4 0a47 	vcmp.f32	s0, s14
    5330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5334:	fe38 0a80 	vselgt.f32	s0, s17, s0
		tExpSmooth_setDest(&barSlideSmoother[i], barDelta);
    5338:	f004 faa6 	bl	9888 <__tExpSmooth_setDest_veneer>
		barDelta = tExpSmooth_tick(&barSlideSmoother[i]);
    533c:	4640      	mov	r0, r8
    533e:	f004 fb67 	bl	9a10 <__tExpSmooth_tick_veneer>
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    5342:	4650      	mov	r0, sl
    5344:	f004 fc78 	bl	9c38 <__tEnvelopeFollower_tick_veneer>
		prevBarInMIDI[0] = barInMIDI[0];
    5348:	4b42      	ldr	r3, [pc, #264]	; (5454 <audioTickString1+0x2b4>)
    534a:	f8db 0000 	ldr.w	r0, [fp]
		barDelta = tEnvelopeFollower_tick(&barNoiseSmoother[i], barDelta);
    534e:	eeb0 ca40 	vmov.f32	s24, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5352:	f10a 0a04 	add.w	sl, sl, #4
		prevBarInMIDI[0] = barInMIDI[0];
    5356:	6018      	str	r0, [r3, #0]
		//tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));

		float filtNoise = tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
    5358:	4840      	ldr	r0, [pc, #256]	; (545c <audioTickString1+0x2bc>)
    535a:	f004 fc81 	bl	9c60 <__tNoise_tick_veneer>
    535e:	4840      	ldr	r0, [pc, #256]	; (5460 <audioTickString1+0x2c0>)
    5360:	f004 fc76 	bl	9c50 <__tVZFilter_tickEfficient_veneer>
		//filtNoise = tVZFilter_tickEfficient(&noiseFilt2, filtNoise);
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    5364:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
    5368:	edd4 7a01 	vldr	s15, [r4, #4]

		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    536c:	68f9      	ldr	r1, [r7, #12]
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    536e:	ee67 7a87 	vmul.f32	s15, s15, s14
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5372:	4608      	mov	r0, r1
		float slideNoise = filtNoise * barDelta * knobScaled[1] * 10.0f;
    5374:	ee67 7a8c 	vmul.f32	s15, s15, s24
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    5378:	ee27 0a80 	vmul.f32	s0, s15, s0
    537c:	f004 fb24 	bl	99c8 <__tSimpleLivingString3_tick_veneer>
    5380:	68ba      	ldr	r2, [r7, #8]
    5382:	4610      	mov	r0, r2
    5384:	60fa      	str	r2, [r7, #12]
    5386:	f004 fa33 	bl	97f0 <__tPickupNonLinearity_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    538a:	4b22      	ldr	r3, [pc, #136]	; (5414 <audioTickString1+0x274>)
    538c:	68fa      	ldr	r2, [r7, #12]
		temp += tPickupNonLinearity_tick(&pu[i], tSimpleLivingString3_tick(&livStr[i], slideNoise));
    538e:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5392:	7819      	ldrb	r1, [r3, #0]
    5394:	3204      	adds	r2, #4
    5396:	687b      	ldr	r3, [r7, #4]
    5398:	42b1      	cmp	r1, r6
    539a:	f73f af4d 	bgt.w	5238 <audioTickString1+0x98>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    539e:	ed9f 0a31 	vldr	s0, [pc, #196]	; 5464 <audioTickString1+0x2c4>
    53a2:	eddf 7a31 	vldr	s15, [pc, #196]	; 5468 <audioTickString1+0x2c8>
    53a6:	eef0 0a40 	vmov.f32	s1, s0
    53aa:	ed9f 1a21 	vldr	s2, [pc, #132]	; 5430 <audioTickString1+0x290>
    53ae:	eee9 0a27 	vfma.f32	s1, s18, s15
    53b2:	f004 f9ed 	bl	9790 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    53b6:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp = input;
	temp *= outVol * masterVolFromBrain;
    53ba:	492c      	ldr	r1, [pc, #176]	; (546c <audioTickString1+0x2cc>)
	float omAlpha = 1.0f - alpha;
    53bc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    53c0:	4a2b      	ldr	r2, [pc, #172]	; (5470 <audioTickString1+0x2d0>)

	return temp;
}
    53c2:	371c      	adds	r7, #28
	int volIdxInt = (int) volIdx;
    53c4:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    53c8:	edd1 6a00 	vldr	s13, [r1]
    53cc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    53d0:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    53d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    53d6:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    53da:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    53de:	ee30 0a47 	vsub.f32	s0, s0, s14
    53e2:	ee28 8a26 	vmul.f32	s16, s16, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    53e6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    53ea:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    53ee:	ed93 7a00 	vldr	s14, [r3]
    53f2:	edd2 6a00 	vldr	s13, [r2]
    53f6:	ee20 0a26 	vmul.f32	s0, s0, s13
    53fa:	eea7 0a27 	vfma.f32	s0, s14, s15
	temp *= outVol * masterVolFromBrain;
    53fe:	ee28 0a00 	vmul.f32	s0, s16, s0
}
    5402:	46bd      	mov	sp, r7
    5404:	ecbd 8b0a 	vpop	{d8-d12}
    5408:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    540c:	ed43 8a01 	vstr	s17, [r3, #-4]
		if (note[i] > 127.0f)
    5410:	e72d      	b.n	526e <audioTickString1+0xce>
    5412:	bf00      	nop
    5414:	200004b1 	.word	0x200004b1
    5418:	20004f60 	.word	0x20004f60
    541c:	20013f8c 	.word	0x20013f8c
    5420:	200004b4 	.word	0x200004b4
    5424:	00000000 	.word	0x00000000
    5428:	20013f5c 	.word	0x20013f5c
    542c:	20005014 	.word	0x20005014
    5430:	42fe0000 	.word	0x42fe0000
    5434:	3dcccccd 	.word	0x3dcccccd
    5438:	44480000 	.word	0x44480000
    543c:	3d108950 	.word	0x3d108950
    5440:	2001c6e0 	.word	0x2001c6e0
    5444:	46768933 	.word	0x46768933
    5448:	20013f54 	.word	0x20013f54
    544c:	20000f1c 	.word	0x20000f1c
    5450:	bcf5c28f 	.word	0xbcf5c28f
    5454:	20005088 	.word	0x20005088
    5458:	3e4ccccd 	.word	0x3e4ccccd
    545c:	2000501c 	.word	0x2000501c
    5460:	20005028 	.word	0x20005028
    5464:	423c0000 	.word	0x423c0000
    5468:	42a00000 	.word	0x42a00000
    546c:	200004a8 	.word	0x200004a8
    5470:	2000051c 	.word	0x2000051c
    5474:	20004f90 	.word	0x20004f90
    5478:	20000f14 	.word	0x20000f14
    547c:	2001c6f0 	.word	0x2001c6f0
    5480:	2001c6e8 	.word	0x2001c6e8
    5484:	20000f0c 	.word	0x20000f0c
    5488:	f3af 8000 	nop.w
    548c:	f3af 8000 	nop.w
    5490:	f3af 8000 	nop.w
    5494:	f3af 8000 	nop.w
    5498:	f3af 8000 	nop.w
    549c:	f3af 8000 	nop.w

000054a0 <audioFrameString1>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    54a0:	4a60      	ldr	r2, [pc, #384]	; (5624 <audioFrameString1+0x184>)
	if (resetStringInputs)
    54a2:	4b61      	ldr	r3, [pc, #388]	; (5628 <audioFrameString1+0x188>)
{
    54a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54a8:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    54ac:	6856      	ldr	r6, [r2, #4]
{
    54ae:	b083      	sub	sp, #12
	if (resetStringInputs)
    54b0:	781a      	ldrb	r2, [r3, #0]
{
    54b2:	4607      	mov	r7, r0
	if (resetStringInputs)
    54b4:	2a00      	cmp	r2, #0
    54b6:	d165      	bne.n	5584 <audioFrameString1+0xe4>
    54b8:	4a5c      	ldr	r2, [pc, #368]	; (562c <audioFrameString1+0x18c>)
	if (newPluck)
    54ba:	6813      	ldr	r3, [r2, #0]
    54bc:	b38b      	cbz	r3, 5522 <audioFrameString1+0x82>
		for (int i = 0; i < numStringsThisBoard; i++)
    54be:	f8df a194 	ldr.w	sl, [pc, #404]	; 5654 <audioFrameString1+0x1b4>
    54c2:	f89a 1000 	ldrb.w	r1, [sl]
    54c6:	b351      	cbz	r1, 551e <audioFrameString1+0x7e>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    54c8:	ed9f 9a59 	vldr	s18, [pc, #356]	; 5630 <audioFrameString1+0x190>
		for (int i = 0; i < numStringsThisBoard; i++)
    54cc:	2400      	movs	r4, #0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    54ce:	eddf 8a59 	vldr	s17, [pc, #356]	; 5634 <audioFrameString1+0x194>
    54d2:	f8df 8184 	ldr.w	r8, [pc, #388]	; 5658 <audioFrameString1+0x1b8>
    54d6:	4d58      	ldr	r5, [pc, #352]	; (5638 <audioFrameString1+0x198>)
    54d8:	f8df 9198 	ldr.w	r9, [pc, #408]	; 5674 <audioFrameString1+0x1d4>
				stringOctave[i] = octave;
    54dc:	f8df b198 	ldr.w	fp, [pc, #408]	; 5678 <audioFrameString1+0x1d8>
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    54e0:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    54e4:	b29b      	uxth	r3, r3
    54e6:	b923      	cbnz	r3, 54f2 <audioFrameString1+0x52>
    54e8:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    54ec:	b29b      	uxth	r3, r3
    54ee:	2b00      	cmp	r3, #0
    54f0:	d15e      	bne.n	55b0 <audioFrameString1+0x110>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    54f2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    54f6:	b29b      	uxth	r3, r3
    54f8:	b13b      	cbz	r3, 550a <audioFrameString1+0x6a>
    54fa:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    54fe:	b29b      	uxth	r3, r3
    5500:	b91b      	cbnz	r3, 550a <audioFrameString1+0x6a>
		for (int i = 0; i < numStringsThisBoard; i++)
    5502:	f89a 1000 	ldrb.w	r1, [sl]
				lsDecay[i] = 0;
    5506:	f888 3000 	strb.w	r3, [r8]
			previousStringInputs[i] = stringInputs[i];
    550a:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    550e:	f108 0801 	add.w	r8, r8, #1
			previousStringInputs[i] = stringInputs[i];
    5512:	b29b      	uxth	r3, r3
    5514:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5518:	3401      	adds	r4, #1
    551a:	42a1      	cmp	r1, r4
    551c:	dce0      	bgt.n	54e0 <audioFrameString1+0x40>
		newPluck = 0;
    551e:	2300      	movs	r3, #0
    5520:	6013      	str	r3, [r2, #0]
    5522:	4c46      	ldr	r4, [pc, #280]	; (563c <audioFrameString1+0x19c>)
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    5524:	ed9f 8a46 	vldr	s16, [pc, #280]	; 5640 <audioFrameString1+0x1a0>
    5528:	f504 7500 	add.w	r5, r4, #512	; 0x200
    552c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    5530:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    5534:	f7ff fe34 	bl	51a0 <audioTickString1>
    5538:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    553c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    553e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5542:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickString1() * TWO_TO_23);
    5544:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[iplusbuffer + 1] = current_sample;
    5548:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    554c:	d1f2      	bne.n	5534 <audioFrameString1+0x94>
	if (switchStrings)
    554e:	4c3d      	ldr	r4, [pc, #244]	; (5644 <audioFrameString1+0x1a4>)
    5550:	6823      	ldr	r3, [r4, #0]
    5552:	bb4b      	cbnz	r3, 55a8 <audioFrameString1+0x108>
	switchStrings = 0;
    5554:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5556:	4b33      	ldr	r3, [pc, #204]	; (5624 <audioFrameString1+0x184>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5558:	483b      	ldr	r0, [pc, #236]	; (5648 <audioFrameString1+0x1a8>)
	switchStrings = 0;
    555a:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    555c:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    555e:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    5562:	1b9b      	subs	r3, r3, r6
    5564:	4939      	ldr	r1, [pc, #228]	; (564c <audioFrameString1+0x1ac>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5566:	4a3a      	ldr	r2, [pc, #232]	; (5650 <audioFrameString1+0x1b0>)
    5568:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    556c:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    556e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5572:	ee67 7a87 	vmul.f32	s15, s15, s14
    5576:	edc2 7a00 	vstr	s15, [r2]
}
    557a:	b003      	add	sp, #12
    557c:	ecbd 8b04 	vpop	{d8-d9}
    5580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    5584:	4a33      	ldr	r2, [pc, #204]	; (5654 <audioFrameString1+0x1b4>)
    5586:	7811      	ldrb	r1, [r2, #0]
    5588:	b141      	cbz	r1, 559c <audioFrameString1+0xfc>
			lsDecay[i] = 0;
    558a:	2200      	movs	r2, #0
    558c:	4832      	ldr	r0, [pc, #200]	; (5658 <audioFrameString1+0x1b8>)
			previousStringInputs[i] = 0;
    558e:	4d2a      	ldr	r5, [pc, #168]	; (5638 <audioFrameString1+0x198>)
		for (int i = 0; i < numStringsThisBoard; i++)
    5590:	2901      	cmp	r1, #1
			lsDecay[i] = 0;
    5592:	7002      	strb	r2, [r0, #0]
			previousStringInputs[i] = 0;
    5594:	802a      	strh	r2, [r5, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    5596:	d001      	beq.n	559c <audioFrameString1+0xfc>
			lsDecay[i] = 0;
    5598:	7042      	strb	r2, [r0, #1]
			previousStringInputs[i] = 0;
    559a:	806a      	strh	r2, [r5, #2]
		resetStringInputs = 0;
    559c:	2100      	movs	r1, #0
		newPluck = 1;
    559e:	4a23      	ldr	r2, [pc, #140]	; (562c <audioFrameString1+0x18c>)
		resetStringInputs = 0;
    55a0:	7019      	strb	r1, [r3, #0]
		newPluck = 1;
    55a2:	2301      	movs	r3, #1
    55a4:	6013      	str	r3, [r2, #0]
    55a6:	e788      	b.n	54ba <audioFrameString1+0x1a>
		switchStringModel(switchStrings);
    55a8:	6820      	ldr	r0, [r4, #0]
    55aa:	f7fb fff9 	bl	15a0 <switchStringModel>
    55ae:	e7d1      	b.n	5554 <audioFrameString1+0xb4>
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    55b0:	492a      	ldr	r1, [pc, #168]	; (565c <audioFrameString1+0x1bc>)
    55b2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    55b6:	4b2a      	ldr	r3, [pc, #168]	; (5660 <audioFrameString1+0x1c0>)
    55b8:	eeb0 0a49 	vmov.f32	s0, s18
    55bc:	7808      	ldrb	r0, [r1, #0]
    55be:	ed93 7a02 	vldr	s14, [r3, #8]
    55c2:	4b28      	ldr	r3, [pc, #160]	; (5664 <audioFrameString1+0x1c4>)
    55c4:	ee71 7a47 	vsub.f32	s15, s2, s14
    55c8:	9201      	str	r2, [sp, #4]
    55ca:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    55ce:	edd3 6a00 	vldr	s13, [r3]
    55d2:	4b25      	ldr	r3, [pc, #148]	; (5668 <audioFrameString1+0x1c8>)
    55d4:	eee6 7a87 	vfma.f32	s15, s13, s14
    55d8:	edd3 0a00 	vldr	s1, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    55dc:	f839 3014 	ldrh.w	r3, [r9, r4, lsl #1]
    55e0:	b29b      	uxth	r3, r3
    55e2:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    55e6:	4b21      	ldr	r3, [pc, #132]	; (566c <audioFrameString1+0x1cc>)
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    55e8:	ee60 0aa7 	vmul.f32	s1, s1, s15
				stringOctave[i] = octave;
    55ec:	6818      	ldr	r0, [r3, #0]
    55ee:	eb0b 0384 	add.w	r3, fp, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    55f2:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    55f6:	6018      	str	r0, [r3, #0]
				tSimpleLivingString3_pluck(&livStr[i], amplitz, LEAF_clip(0.0f, ((pluckPos * randomFactors[currentRandom]) * knobScaled[2]) + (pluckPos * (1.0f - knobScaled[2])),1.0f));
    55f8:	f004 f8ca 	bl	9790 <__LEAF_clip_veneer>
    55fc:	481c      	ldr	r0, [pc, #112]	; (5670 <audioFrameString1+0x1d0>)
    55fe:	00a3      	lsls	r3, r4, #2
    5600:	eef0 0a40 	vmov.f32	s1, s0
    5604:	ee28 0a28 	vmul.f32	s0, s16, s17
    5608:	4418      	add	r0, r3
    560a:	f004 fb35 	bl	9c78 <__tSimpleLivingString3_pluck_veneer>
				currentRandom++;
    560e:	4913      	ldr	r1, [pc, #76]	; (565c <audioFrameString1+0x1bc>)
			{
    5610:	9a01      	ldr	r2, [sp, #4]
				currentRandom++;
    5612:	780b      	ldrb	r3, [r1, #0]
    5614:	3301      	adds	r3, #1
    5616:	700b      	strb	r3, [r1, #0]
				lsDecay[i] = 1;
    5618:	2301      	movs	r3, #1
		for (int i = 0; i < numStringsThisBoard; i++)
    561a:	f89a 1000 	ldrb.w	r1, [sl]
				lsDecay[i] = 1;
    561e:	f888 3000 	strb.w	r3, [r8]
			{
    5622:	e772      	b.n	550a <audioFrameString1+0x6a>
    5624:	e0001000 	.word	0xe0001000
    5628:	200054a8 	.word	0x200054a8
    562c:	20005020 	.word	0x20005020
    5630:	00000000 	.word	0x00000000
    5634:	37800080 	.word	0x37800080
    5638:	20005090 	.word	0x20005090
    563c:	30000000 	.word	0x30000000
    5640:	4b000000 	.word	0x4b000000
    5644:	20013f74 	.word	0x20013f74
    5648:	200004a4 	.word	0x200004a4
    564c:	20013f78 	.word	0x20013f78
    5650:	20004f4c 	.word	0x20004f4c
    5654:	200004b1 	.word	0x200004b1
    5658:	20005014 	.word	0x20005014
    565c:	2001403e 	.word	0x2001403e
    5660:	20004f60 	.word	0x20004f60
    5664:	200050a8 	.word	0x200050a8
    5668:	200004b4 	.word	0x200004b4
    566c:	2000502c 	.word	0x2000502c
    5670:	2001c6e0 	.word	0x2001c6e0
    5674:	20013f3c 	.word	0x20013f3c
    5678:	20013f5c 	.word	0x20013f5c
    567c:	00000000 	.word	0x00000000

00005680 <audioInitString2>:
};



void __ATTR_ITCMRAM audioInitString2()
{
    5680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	for (int v = 0; v < numStringsThisBoard; v++)
    5682:	4e19      	ldr	r6, [pc, #100]	; (56e8 <audioInitString2+0x68>)
    5684:	7833      	ldrb	r3, [r6, #0]
{
    5686:	ed2d 8b04 	vpush	{d8-d9}
	for (int v = 0; v < numStringsThisBoard; v++)
    568a:	b33b      	cbz	r3, 56dc <audioInitString2+0x5c>
    568c:	4c17      	ldr	r4, [pc, #92]	; (56ec <audioInitString2+0x6c>)
    568e:	2500      	movs	r5, #0
	{
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    5690:	4f17      	ldr	r7, [pc, #92]	; (56f0 <audioInitString2+0x70>)
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
    5692:	eddf 9a18 	vldr	s19, [pc, #96]	; 56f4 <audioInitString2+0x74>
    5696:	ed9f 9a18 	vldr	s18, [pc, #96]	; 56f8 <audioInitString2+0x78>
		 tTString_setTensionSpeed(&strings[v],0.7f);
    569a:	eddf 8a18 	vldr	s17, [pc, #96]	; 56fc <audioInitString2+0x7c>
		 tTString_setTensionGain(&strings[v],0.99f);
    569e:	ed9f 8a18 	vldr	s16, [pc, #96]	; 5700 <audioInitString2+0x80>
		 tTString_initToPool(&strings[v], 1, 15.0f, &mediumPool);
    56a2:	463a      	mov	r2, r7
    56a4:	2101      	movs	r1, #1
    56a6:	4620      	mov	r0, r4
    56a8:	eeb2 0a0e 	vmov.f32	s0, #46	; 0x41700000  15.0
    56ac:	f004 fab4 	bl	9c18 <__tTString_initToPool_veneer>
		 tTString_setHarmonicity(&strings[v], 0.00001f, 100.0f);
    56b0:	eef0 0a69 	vmov.f32	s1, s19
    56b4:	4620      	mov	r0, r4
    56b6:	eeb0 0a49 	vmov.f32	s0, s18
    56ba:	f004 fa85 	bl	9bc8 <__tTString_setHarmonicity_veneer>
		 tTString_setTensionSpeed(&strings[v],0.7f);
    56be:	4620      	mov	r0, r4
    56c0:	eeb0 0a68 	vmov.f32	s0, s17
	for (int v = 0; v < numStringsThisBoard; v++)
    56c4:	3501      	adds	r5, #1
		 tTString_setTensionSpeed(&strings[v],0.7f);
    56c6:	f004 f967 	bl	9998 <__tTString_setTensionSpeed_veneer>
		 tTString_setTensionGain(&strings[v],0.99f);
    56ca:	4620      	mov	r0, r4
    56cc:	eeb0 0a48 	vmov.f32	s0, s16
	for (int v = 0; v < numStringsThisBoard; v++)
    56d0:	3404      	adds	r4, #4
		 tTString_setTensionGain(&strings[v],0.99f);
    56d2:	f004 f9f9 	bl	9ac8 <__tTString_setTensionGain_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    56d6:	7833      	ldrb	r3, [r6, #0]
    56d8:	42ab      	cmp	r3, r5
    56da:	dce2      	bgt.n	56a2 <audioInitString2+0x22>
	}
	whichStringModelLoaded = String2Loaded;
    56dc:	4b09      	ldr	r3, [pc, #36]	; (5704 <audioInitString2+0x84>)
    56de:	2201      	movs	r2, #1
    56e0:	701a      	strb	r2, [r3, #0]
}
    56e2:	ecbd 8b04 	vpop	{d8-d9}
    56e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    56e8:	200004b1 	.word	0x200004b1
    56ec:	2001c6f8 	.word	0x2001c6f8
    56f0:	20005018 	.word	0x20005018
    56f4:	42c80000 	.word	0x42c80000
    56f8:	3727c5ac 	.word	0x3727c5ac
    56fc:	3f333333 	.word	0x3f333333
    5700:	3f7d70a4 	.word	0x3f7d70a4
    5704:	20013f91 	.word	0x20013f91
    5708:	f3af 8000 	nop.w
    570c:	f3af 8000 	nop.w
    5710:	f3af 8000 	nop.w
    5714:	f3af 8000 	nop.w
    5718:	f3af 8000 	nop.w
    571c:	f3af 8000 	nop.w

00005720 <audioFreeString2>:


void __ATTR_ITCMRAM audioFreeString2()
{
    5720:	b570      	push	{r4, r5, r6, lr}
	for (int v = 0; v < numStringsThisBoard; v++)
    5722:	4e07      	ldr	r6, [pc, #28]	; (5740 <audioFreeString2+0x20>)
    5724:	7833      	ldrb	r3, [r6, #0]
    5726:	b14b      	cbz	r3, 573c <audioFreeString2+0x1c>
    5728:	4d06      	ldr	r5, [pc, #24]	; (5744 <audioFreeString2+0x24>)
    572a:	2400      	movs	r4, #0
	{
		tTString_free(&strings[v]);
    572c:	4628      	mov	r0, r5
	for (int v = 0; v < numStringsThisBoard; v++)
    572e:	3401      	adds	r4, #1
		tTString_free(&strings[v]);
    5730:	f004 f946 	bl	99c0 <__tTString_free_veneer>
	for (int v = 0; v < numStringsThisBoard; v++)
    5734:	7833      	ldrb	r3, [r6, #0]
    5736:	3504      	adds	r5, #4
    5738:	42a3      	cmp	r3, r4
    573a:	dcf7      	bgt.n	572c <audioFreeString2+0xc>
	}
}
    573c:	bd70      	pop	{r4, r5, r6, pc}
    573e:	bf00      	nop
    5740:	200004b1 	.word	0x200004b1
    5744:	2001c6f8 	.word	0x2001c6f8
    5748:	f3af 8000 	nop.w
    574c:	f3af 8000 	nop.w
    5750:	f3af 8000 	nop.w
    5754:	f3af 8000 	nop.w
    5758:	f3af 8000 	nop.w
    575c:	f3af 8000 	nop.w

00005760 <audioTickString2>:
}

uint32_t thisFrameCount = 0;

float __ATTR_ITCMRAM audioTickString2(void)
{
    5760:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float theNote[NUM_STRINGS_PER_BOARD];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5764:	48c8      	ldr	r0, [pc, #800]	; (5a88 <audioTickString2+0x328>)
    5766:	4ec9      	ldr	r6, [pc, #804]	; (5a8c <audioTickString2+0x32c>)
    5768:	4dc9      	ldr	r5, [pc, #804]	; (5a90 <audioTickString2+0x330>)
    576a:	4634      	mov	r4, r6
    576c:	f106 0730 	add.w	r7, r6, #48	; 0x30
{
    5770:	ed2d 8b10 	vpush	{d8-d15}
    5774:	b087      	sub	sp, #28
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    5776:	f004 f94b 	bl	9a10 <__tExpSmooth_tick_veneer>
    577a:	eeb0 aa40 	vmov.f32	s20, s0

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    577e:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    5780:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    5782:	f004 f945 	bl	9a10 <__tExpSmooth_tick_veneer>
    5786:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    578a:	42a7      	cmp	r7, r4
    578c:	d1f7      	bne.n	577e <audioTickString2+0x1e>
	}
	if (newPluck)
    578e:	f8df 8334 	ldr.w	r8, [pc, #820]	; 5ac4 <audioTickString2+0x364>
	{
		for (int i = 0; i < numStringsThisBoard; i++)
    5792:	f8df 9334 	ldr.w	r9, [pc, #820]	; 5ac8 <audioTickString2+0x368>
	if (newPluck)
    5796:	f8d8 3000 	ldr.w	r3, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
    579a:	f899 2000 	ldrb.w	r2, [r9]
	if (newPluck)
    579e:	2b00      	cmp	r3, #0
    57a0:	d04f      	beq.n	5842 <audioTickString2+0xe2>
		for (int i = 0; i < numStringsThisBoard; i++)
    57a2:	2a00      	cmp	r2, #0
    57a4:	f000 8381 	beq.w	5eaa <audioTickString2+0x74a>
    57a8:	f8df a320 	ldr.w	sl, [pc, #800]	; 5acc <audioTickString2+0x36c>
    57ac:	2400      	movs	r4, #0
				}
				if (isnan(theNote[i]))
				{
					theNote[i] = 64.0f;
				}
				float finalFreq = mtofTableLookup(theNote[i]);
    57ae:	ed9f 9aca 	vldr	s18, [pc, #808]	; 5ad8 <audioTickString2+0x378>
    57b2:	eddf 8aca 	vldr	s17, [pc, #808]	; 5adc <audioTickString2+0x37c>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    57b6:	ed9f 8ab7 	vldr	s16, [pc, #732]	; 5a94 <audioTickString2+0x334>
    57ba:	4db7      	ldr	r5, [pc, #732]	; (5a98 <audioTickString2+0x338>)
    57bc:	4fb7      	ldr	r7, [pc, #732]	; (5a9c <audioTickString2+0x33c>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    57be:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    57c2:	b29b      	uxth	r3, r3
    57c4:	2b00      	cmp	r3, #0
    57c6:	f040 82bb 	bne.w	5d40 <audioTickString2+0x5e0>
    57ca:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    57ce:	b29b      	uxth	r3, r3
    57d0:	2b00      	cmp	r3, #0
    57d2:	f000 82b5 	beq.w	5d40 <audioTickString2+0x5e0>
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    57d6:	4ab2      	ldr	r2, [pc, #712]	; (5aa0 <audioTickString2+0x340>)
				stringOctave[i] = octave;
    57d8:	4bb2      	ldr	r3, [pc, #712]	; (5aa4 <audioTickString2+0x344>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    57da:	eb02 0284 	add.w	r2, r2, r4, lsl #2
				stringOctave[i] = octave;
    57de:	edd3 7a00 	vldr	s15, [r3]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    57e2:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    57e6:	ed92 0a00 	vldr	s0, [r2]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    57ea:	fa1f fb83 	uxth.w	fp, r3
				stringOctave[i] = octave;
    57ee:	4bae      	ldr	r3, [pc, #696]	; (5aa8 <audioTickString2+0x348>)
				theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    57f0:	ee37 0a80 	vadd.f32	s0, s15, s0
				stringOctave[i] = octave;
    57f4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
				float finalFreq = mtofTableLookup(theNote[i]);
    57f8:	fe80 0a49 	vminnm.f32	s0, s0, s18
				stringOctave[i] = octave;
    57fc:	edc3 7a00 	vstr	s15, [r3]
				float finalFreq = mtofTableLookup(theNote[i]);
    5800:	fe80 0a28 	vmaxnm.f32	s0, s0, s17
    5804:	f003 ffac 	bl	9760 <__mtofTableLookup_veneer>
				tTString_setFreq(&strings[i], finalFreq);
    5808:	4650      	mov	r0, sl
    580a:	f004 f969 	bl	9ae0 <__tTString_setFreq_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    580e:	ee07 ba90 	vmov	s15, fp
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    5812:	ed96 0a02 	vldr	s0, [r6, #8]
    5816:	4650      	mov	r0, sl
				float amplitz = stringInputs[i] * 0.000015259021897f;
    5818:	eef8 0ae7 	vcvt.f32.s32	s1, s15
				tTString_pluck(&strings[i],  knobScaled[2], amplitz);
    581c:	ee60 0a88 	vmul.f32	s1, s1, s16
    5820:	f004 f862 	bl	98e8 <__tTString_pluck_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5824:	f899 2000 	ldrb.w	r2, [r9]
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
			{
				//note off
				tTString_mute(&strings[i]);
			}
			previousStringInputs[i] = stringInputs[i];
    5828:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    582c:	f10a 0a04 	add.w	sl, sl, #4
			previousStringInputs[i] = stringInputs[i];
    5830:	b29b      	uxth	r3, r3
    5832:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    5836:	3401      	adds	r4, #1
    5838:	42a2      	cmp	r2, r4
    583a:	dcc0      	bgt.n	57be <audioTickString2+0x5e>
		}
		newPluck = 0;
    583c:	2300      	movs	r3, #0
    583e:	f8c8 3000 	str.w	r3, [r8]
	}
	for (int i = 0; i < numStringsThisBoard; i++)
    5842:	eddf 9aa6 	vldr	s19, [pc, #664]	; 5adc <audioTickString2+0x37c>
    5846:	2a00      	cmp	r2, #0
    5848:	f000 8335 	beq.w	5eb6 <audioTickString2+0x756>
		float finalFreq = mtofTableLookup(theNote[i]);
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);

		if (thisFrameCount == 0)
		{
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    584c:	eef0 ca00 	vmov.f32	s25, #0	; 0x40000000  2.0
    5850:	4b93      	ldr	r3, [pc, #588]	; (5aa0 <audioTickString2+0x340>)
    5852:	eeb0 9a69 	vmov.f32	s18, s19
    5856:	4f95      	ldr	r7, [pc, #596]	; (5aac <audioTickString2+0x34c>)
    5858:	f8df 824c 	ldr.w	r8, [pc, #588]	; 5aa8 <audioTickString2+0x348>
	for (int i = 0; i < numStringsThisBoard; i++)
    585c:	2500      	movs	r5, #0
    585e:	4c94      	ldr	r4, [pc, #592]	; (5ab0 <audioTickString2+0x350>)
    5860:	f8df a268 	ldr.w	sl, [pc, #616]	; 5acc <audioTickString2+0x36c>
    5864:	eddf aa9c 	vldr	s21, [pc, #624]	; 5ad8 <audioTickString2+0x378>
    5868:	f8df b264 	ldr.w	fp, [pc, #612]	; 5ad0 <audioTickString2+0x370>
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    586c:	ed9f ca91 	vldr	s24, [pc, #580]	; 5ab4 <audioTickString2+0x354>
    5870:	eddf ba91 	vldr	s23, [pc, #580]	; 5ab8 <audioTickString2+0x358>
    5874:	ed9f ba91 	vldr	s22, [pc, #580]	; 5abc <audioTickString2+0x35c>
    5878:	9304      	str	r3, [sp, #16]
    587a:	9703      	str	r7, [sp, #12]
    587c:	f8cd 9014 	str.w	r9, [sp, #20]
		theNote[i] = stringMIDIPitches[i] + stringOctave[i];
    5880:	9b04      	ldr	r3, [sp, #16]
    5882:	46a1      	mov	r9, r4
    5884:	ecf8 7a01 	vldmia	r8!, {s15}
    5888:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    588c:	edd3 8a00 	vldr	s17, [r3]
    5890:	ee78 8aa7 	vadd.f32	s17, s17, s15
    5894:	fec8 8aea 	vminnm.f32	s17, s17, s21
    5898:	fec8 8a89 	vmaxnm.f32	s17, s17, s18
		float finalFreq = mtofTableLookup(theNote[i]);
    589c:	eeb0 0a68 	vmov.f32	s0, s17
    58a0:	f003 ff5e 	bl	9760 <__mtofTableLookup_veneer>
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    58a4:	edd4 7a00 	vldr	s15, [r4]
		float finalFreq = mtofTableLookup(theNote[i]);
    58a8:	eeb0 da40 	vmov.f32	s26, s0
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    58ac:	ee38 0ae7 	vsub.f32	s0, s17, s15
    58b0:	f003 ff56 	bl	9760 <__mtofTableLookup_veneer>
		if (thisFrameCount == 0)
    58b4:	9b03      	ldr	r3, [sp, #12]
		float openStringFreq = mtofTableLookup(theNote[i]-barInMIDI[i]);
    58b6:	eeb0 8a40 	vmov.f32	s16, s0
		if (thisFrameCount == 0)
    58ba:	681f      	ldr	r7, [r3, #0]
    58bc:	2f00      	cmp	r7, #0
    58be:	f000 81ff 	beq.w	5cc0 <audioTickString2+0x560>
			}

		}
		//tTString_setTensionGain(&strings[i],knobScaled[4]);

		tTString_setPhantomHarmonicsGain(&strings[i],knobScaled[8]);
    58c2:	ed96 0a08 	vldr	s0, [r6, #32]
    58c6:	4650      	mov	r0, sl
    58c8:	f004 f8d6 	bl	9a78 <__tTString_setPhantomHarmonicsGain_veneer>
		tTString_setPickupPos(&strings[i],knobScaled[9]);
    58cc:	ed96 0a09 	vldr	s0, [r6, #36]	; 0x24
    58d0:	4650      	mov	r0, sl

		tTString_setPickupModAmp(&strings[i],knobScaled[11]);
		tTString_setFreq(&strings[i], finalFreq);


		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    58d2:	eef8 8a00 	vmov.f32	s17, #128	; 0xc0000000 -2.0
		tTString_setPickupPos(&strings[i],knobScaled[9]);
    58d6:	f004 f9ab 	bl	9c30 <__tTString_setPickupPos_veneer>
		tTString_setPickupModFreq(&strings[i],(knobScaled[10]));
    58da:	ed96 0a0a 	vldr	s0, [r6, #40]	; 0x28
    58de:	4650      	mov	r0, sl
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    58e0:	eef1 da00 	vmov.f32	s27, #16	; 0x40800000  4.0
		tTString_setPickupModFreq(&strings[i],(knobScaled[10]));
    58e4:	f004 f964 	bl	9bb0 <__tTString_setPickupModFreq_veneer>
		tTString_setPickupModAmp(&strings[i],knobScaled[11]);
    58e8:	ed96 0a0b 	vldr	s0, [r6, #44]	; 0x2c
    58ec:	4650      	mov	r0, sl
    58ee:	f004 f87f 	bl	99f0 <__tTString_setPickupModAmp_veneer>
		tTString_setFreq(&strings[i], finalFreq);
    58f2:	eeb0 0a4d 	vmov.f32	s0, s26
    58f6:	4650      	mov	r0, sl
    58f8:	f004 f8f2 	bl	9ae0 <__tTString_setFreq_veneer>
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    58fc:	eef0 0a68 	vmov.f32	s1, s17
    5900:	edd6 7a03 	vldr	s15, [r6, #12]
    5904:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    5908:	eee7 0aad 	vfma.f32	s1, s15, s27
    590c:	f004 f8d4 	bl	9ab8 <__fastPowf_veneer>
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    5910:	eef0 0a68 	vmov.f32	s1, s17
    5914:	edd6 7a00 	vldr	s15, [r6]
		Lfloat filterScaling = fastPowf(2.0f, knobScaled[3] * 4.0f - 2.0f); //0.5-2.0f
    5918:	eeb0 da40 	vmov.f32	s26, s0
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    591c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    5920:	eee7 0aad 	vfma.f32	s1, s15, s27
    5924:	f004 f8c8 	bl	9ab8 <__fastPowf_veneer>
		float alpha = 0.0f;
		float oneMinusAlpha = 1.0f;
		for (int i = 0; i < 9; i++)
		{
			//find the closest open string frequency and interpolate
			if (stringParams[i][0][0] > openStringFreq)
    5928:	eddb 0a00 	vldr	s1, [fp]
		Lfloat decayScaling = fastPowf(2.0f, knobScaled[0] * 4.0f - 2.0f); //0.5-2.0f
    592c:	eef0 da40 	vmov.f32	s27, s0
			if (stringParams[i][0][0] > openStringFreq)
    5930:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5938:	f100 819c 	bmi.w	5c74 <audioTickString2+0x514>
		float oneMinusAlpha = 1.0f;
    593c:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
			{
				if (stringParams[i+1][0][0] < openStringFreq)
    5940:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
		float alpha = 0.0f;
    5944:	eef0 8a49 	vmov.f32	s17, s18
			if (stringParams[i][0][0] > openStringFreq)
    5948:	eeb4 8ae6 	vcmpe.f32	s16, s13
    594c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5950:	f100 8184 	bmi.w	5c5c <audioTickString2+0x4fc>
				if (stringParams[i+1][0][0] < openStringFreq)
    5954:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    5958:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    595c:	2200      	movs	r2, #0
			if (stringParams[i][0][0] > openStringFreq)
    595e:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    5962:	eddb 6a1b 	vldr	s13, [fp, #108]	; 0x6c
			if (stringParams[i][0][0] > openStringFreq)
    5966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    596a:	d505      	bpl.n	5978 <audioTickString2+0x218>
				if (stringParams[i+1][0][0] < openStringFreq)
    596c:	eeb4 8ae6 	vcmpe.f32	s16, s13
    5970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5974:	f300 820a 	bgt.w	5d8c <audioTickString2+0x62c>
			if (stringParams[i][0][0] > openStringFreq)
    5978:	eeb4 8ae6 	vcmpe.f32	s16, s13
				if (stringParams[i+1][0][0] < openStringFreq)
    597c:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
			if (stringParams[i][0][0] > openStringFreq)
    5980:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5984:	d505      	bpl.n	5992 <audioTickString2+0x232>
				if (stringParams[i+1][0][0] < openStringFreq)
    5986:	eeb4 8ae0 	vcmpe.f32	s16, s1
    598a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    598e:	f300 81e9 	bgt.w	5d64 <audioTickString2+0x604>
			if (stringParams[i][0][0] > openStringFreq)
    5992:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    5996:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
			if (stringParams[i][0][0] > openStringFreq)
    599a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    599e:	d505      	bpl.n	59ac <audioTickString2+0x24c>
				if (stringParams[i+1][0][0] < openStringFreq)
    59a0:	eeb4 8ae6 	vcmpe.f32	s16, s13
    59a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59a8:	f300 826d 	bgt.w	5e86 <audioTickString2+0x726>
			if (stringParams[i][0][0] > openStringFreq)
    59ac:	eeb4 8ae6 	vcmpe.f32	s16, s13
				if (stringParams[i+1][0][0] < openStringFreq)
    59b0:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
			if (stringParams[i][0][0] > openStringFreq)
    59b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59b8:	d505      	bpl.n	59c6 <audioTickString2+0x266>
				if (stringParams[i+1][0][0] < openStringFreq)
    59ba:	eeb4 8ae0 	vcmpe.f32	s16, s1
    59be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59c2:	f300 824c 	bgt.w	5e5e <audioTickString2+0x6fe>
			if (stringParams[i][0][0] > openStringFreq)
    59c6:	eeb4 8ae0 	vcmpe.f32	s16, s1
				if (stringParams[i+1][0][0] < openStringFreq)
    59ca:	eddb 6a3f 	vldr	s13, [fp, #252]	; 0xfc
			if (stringParams[i][0][0] > openStringFreq)
    59ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59d2:	d505      	bpl.n	59e0 <audioTickString2+0x280>
				if (stringParams[i+1][0][0] < openStringFreq)
    59d4:	eeb4 8ae6 	vcmpe.f32	s16, s13
    59d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59dc:	f300 822d 	bgt.w	5e3a <audioTickString2+0x6da>
			if (stringParams[i][0][0] > openStringFreq)
    59e0:	eeb4 8ae6 	vcmpe.f32	s16, s13
				if (stringParams[i+1][0][0] < openStringFreq)
    59e4:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
			if (stringParams[i][0][0] > openStringFreq)
    59e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59ec:	d505      	bpl.n	59fa <audioTickString2+0x29a>
				if (stringParams[i+1][0][0] < openStringFreq)
    59ee:	eeb4 8ae0 	vcmpe.f32	s16, s1
    59f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    59f6:	f300 820c 	bgt.w	5e12 <audioTickString2+0x6b2>
			if (stringParams[i][0][0] > openStringFreq)
    59fa:	eeb4 8ae0 	vcmpe.f32	s16, s1
    59fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a02:	d50a      	bpl.n	5a1a <audioTickString2+0x2ba>
				if (stringParams[i+1][0][0] < openStringFreq)
    5a04:	ed9b 1a51 	vldr	s2, [fp, #324]	; 0x144
    5a08:	eeb4 8ac1 	vcmpe.f32	s16, s2
    5a0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5a10:	f300 81f1 	bgt.w	5df6 <audioTickString2+0x696>
    5a14:	eeb2 fa04 	vmov.f32	s30, #36	; 0x41200000  10.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
					oneMinusAlpha = 1.0f - alpha;
				}
				else if (i == 8)
				{
					which = 9;
    5a18:	2209      	movs	r2, #9
				}
			}
		}

		float barHeight = barInMIDI[i] / 12.0f;
    5a1a:	edd4 7a00 	vldr	s15, [r4]

		uint32_t barHeightInt = (uint32_t)barHeight;
		float barHeightAlpha = barHeight - barHeightInt;
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5a1e:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
		float barHeight = barInMIDI[i] / 12.0f;
    5a22:	eddf 6a27 	vldr	s13, [pc, #156]	; 5ac0 <audioTickString2+0x360>
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5a26:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
    5a2a:	eeb0 0a49 	vmov.f32	s0, s18
    5a2e:	9202      	str	r2, [sp, #8]
		float barHeight = barInMIDI[i] / 12.0f;
    5a30:	ee67 7aa6 	vmul.f32	s15, s15, s13
		uint32_t barHeightInt = (uint32_t)barHeight;
    5a34:	eebc 7ae7 	vcvt.u32.f32	s14, s15
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5a38:	ee7e eae7 	vsub.f32	s29, s29, s15
		uint32_t barHeightInt = (uint32_t)barHeight;
    5a3c:	ee17 1a10 	vmov	r1, s14
		float barHeightAlpha = barHeight - barHeightInt;
    5a40:	eef8 6a47 	vcvt.f32.u32	s13, s14
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5a44:	ed8d 7a01 	vstr	s14, [sp, #4]
    5a48:	1c4b      	adds	r3, r1, #1
		float barHeightAlpha = barHeight - barHeightInt;
    5a4a:	ee77 fae6 	vsub.f32	s31, s15, s13
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5a4e:	ee00 3a90 	vmov	s1, r3
		float barHeightOneMinusAlpha = 1.0f - barHeightAlpha;
    5a52:	ee7e eaa6 	vadd.f32	s29, s29, s13
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5a56:	eef8 0a60 	vcvt.f32.u32	s1, s1
    5a5a:	f003 fe99 	bl	9790 <__LEAF_clip_veneer>
    5a5e:	eef0 7a40 	vmov.f32	s15, s0

		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5a62:	eeb2 1a02 	vmov.f32	s2, #34	; 0x41100000  9.0
    5a66:	eef0 0a4f 	vmov.f32	s1, s30
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5a6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5a6e:	eeb0 0a49 	vmov.f32	s0, s18
		uint32_t barHeightIntPlusOne = LEAF_clip(0, barHeightInt + 1, 2);
    5a72:	ee17 7a90 	vmov	r7, s15
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5a76:	f003 fe8b 	bl	9790 <__LEAF_clip_veneer>
			float decayRatio2 = stringParams[0][barHeightIntPlusOne][2] / stringParams[0][barHeightIntPlusOne][0];

			decayTime = (decayRatio1 * barHeightOneMinusAlpha + decayRatio2 * barHeightAlpha) * openStringFreq;
		}

		if (which == 9)
    5a7a:	9a02      	ldr	r2, [sp, #8]
    5a7c:	9901      	ldr	r1, [sp, #4]
    5a7e:	2a09      	cmp	r2, #9
    5a80:	f000 8105 	beq.w	5c8e <audioTickString2+0x52e>
    5a84:	e02c      	b.n	5ae0 <audioTickString2+0x380>
    5a86:	bf00      	nop
    5a88:	20013f8c 	.word	0x20013f8c
    5a8c:	20004f60 	.word	0x20004f60
    5a90:	20004f90 	.word	0x20004f90
    5a94:	37800080 	.word	0x37800080
    5a98:	20005090 	.word	0x20005090
    5a9c:	20013f3c 	.word	0x20013f3c
    5aa0:	20013f54 	.word	0x20013f54
    5aa4:	2000502c 	.word	0x2000502c
    5aa8:	20013f5c 	.word	0x20013f5c
    5aac:	2001c700 	.word	0x2001c700
    5ab0:	20000f0c 	.word	0x20000f0c
    5ab4:	3727c5ac 	.word	0x3727c5ac
    5ab8:	38d1b717 	.word	0x38d1b717
    5abc:	42980000 	.word	0x42980000
    5ac0:	3daaaaab 	.word	0x3daaaaab
    5ac4:	20005020 	.word	0x20005020
    5ac8:	200004b1 	.word	0x200004b1
    5acc:	2001c6f8 	.word	0x2001c6f8
    5ad0:	20000730 	.word	0x20000730
    5ad4:	42a00000 	.word	0x42a00000
    5ad8:	42fe0000 	.word	0x42fe0000
    5adc:	00000000 	.word	0x00000000
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5ae0:	eefc 7ac0 	vcvt.u32.f32	s15, s0
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
		}

		else
		{
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5ae4:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
    5ae8:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5aec:	eb07 0347 	add.w	r3, r7, r7, lsl #1
		uint32_t whichPlusOne = LEAF_clip(0, which+1, 9);
    5af0:	ee17 1a90 	vmov	r1, s15
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5af4:	0092      	lsls	r2, r2, #2
    5af6:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5afa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5afe:	0089      	lsls	r1, r1, #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b00:	445b      	add	r3, fp
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5b02:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    5b06:	eb01 018c 	add.w	r1, r1, ip, lsl #2
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b0a:	ed93 5a01 	vldr	s10, [r3, #4]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5b0e:	445a      	add	r2, fp
    5b10:	4459      	add	r1, fp
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5b12:	edd3 5a02 	vldr	s11, [r3, #8]
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5b16:	edd2 3a01 	vldr	s7, [r2, #4]
    5b1a:	ed91 6a01 	vldr	s12, [r1, #4]
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    5b1e:	edd1 6a02 	vldr	s13, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b22:	eb07 01c7 	add.w	r1, r7, r7, lsl #3
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5b26:	ee28 6a86 	vmul.f32	s12, s17, s12
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    5b2a:	ed92 4a02 	vldr	s8, [r2, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b2e:	0089      	lsls	r1, r1, #2
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    5b30:	ee68 6aa6 	vmul.f32	s13, s17, s13
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b34:	eb01 018c 	add.w	r1, r1, ip, lsl #2
			Lfloat filterFreq1 = stringParams[which][barHeightInt][1] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][1] * alpha;
    5b38:	eea3 6a8e 	vfma.f32	s12, s7, s28
			Lfloat decayTime1 = stringParams[which][barHeightInt][2] * oneMinusAlpha + stringParams[whichPlusOne][barHeightInt][2] * alpha;
    5b3c:	eee4 6a0e 	vfma.f32	s13, s8, s28
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b40:	4459      	add	r1, fp
    5b42:	edd1 7a01 	vldr	s15, [r1, #4]
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5b46:	edd1 4a02 	vldr	s9, [r1, #8]
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b4a:	ee68 7aa7 	vmul.f32	s15, s17, s15
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5b4e:	ee68 8aa4 	vmul.f32	s17, s17, s9
			Lfloat filterFreq2 = stringParams[which][barHeightIntPlusOne][1] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][1] * alpha;
    5b52:	eee5 7a0e 	vfma.f32	s15, s10, s28
			Lfloat decayTime2 = stringParams[which][barHeightIntPlusOne][2] * oneMinusAlpha + stringParams[barHeightIntPlusOne][barHeightInt][2] * alpha;
    5b56:	eee5 8a8e 	vfma.f32	s17, s11, s28
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    5b5a:	ee6f 7aa7 	vmul.f32	s15, s31, s15
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    5b5e:	ee2f 0aa8 	vmul.f32	s0, s31, s17
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    5b62:	eeee 7a86 	vfma.f32	s15, s29, s12
			decayTime = decayTime1 * barHeightOneMinusAlpha + decayTime2 * barHeightAlpha;
    5b66:	eeae 0aa6 	vfma.f32	s0, s29, s13
			filterFreq = filterFreq1 * barHeightOneMinusAlpha + filterFreq2 * barHeightAlpha;
    5b6a:	eef0 8a67 	vmov.f32	s17, s15
		}

		tTString_setDecayInSeconds(&strings[i],decayTime * decayScaling);
    5b6e:	4650      	mov	r0, sl
    5b70:	ee20 0a2d 	vmul.f32	s0, s0, s27
    5b74:	f003 ff64 	bl	9a40 <__tTString_setDecayInSeconds_veneer>
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    5b78:	4650      	mov	r0, sl
    5b7a:	ee28 0a8d 	vmul.f32	s0, s17, s26
	for (int i = 0; i < numStringsThisBoard; i++)
    5b7e:	3501      	adds	r5, #1
		tTString_setFilterFreqDirectly(&strings[i], filterFreq * filterScaling);
    5b80:	f003 fffa 	bl	9b78 <__tTString_setFilterFreqDirectly_veneer>

		//tTString_setPickupAmount(&strings[i], knobScaled[7]);
		tTString_setBarPosition(&strings[i],barInMIDI[i]);
    5b84:	4650      	mov	r0, sl
    5b86:	ed99 0a00 	vldr	s0, [r9]
    5b8a:	3404      	adds	r4, #4
    5b8c:	f004 f86c 	bl	9c68 <__tTString_setBarPosition_veneer>
		//tTString_setBarDrive(&strings[i],knobScaled[4]);
		tTString_setOpenStringFrequency(&strings[i], openStringFreq);
    5b90:	4650      	mov	r0, sl
    5b92:	eeb0 0a48 	vmov.f32	s0, s16
    5b96:	f003 ffff 	bl	9b98 <__tTString_setOpenStringFrequency_veneer>

		tTString_setRippleDepth(&strings[i],knobScaled[7]);
    5b9a:	4650      	mov	r0, sl
    5b9c:	ed96 0a07 	vldr	s0, [r6, #28]
    5ba0:	f003 ff4a 	bl	9a38 <__tTString_setRippleDepth_veneer>
		tTString_setFeedbackStrength(&strings[i],knobScaled[4]);
    5ba4:	4650      	mov	r0, sl
    5ba6:	ed96 0a04 	vldr	s0, [r6, #16]
    5baa:	f003 fe09 	bl	97c0 <__tTString_setFeedbackStrength_veneer>
		tTString_setFeedbackReactionSpeed(&strings[i],knobScaled[5]);
    5bae:	4650      	mov	r0, sl
    5bb0:	ed96 0a05 	vldr	s0, [r6, #20]
    5bb4:	f003 fea0 	bl	98f8 <__tTString_setFeedbackReactionSpeed_veneer>
		//tTString_setPickupFilterFreq(&strings[i],knobScaled[6]*6000.0f + 1000.0f);
		//tTString_setPickupFilterQ(&strings[i],knobScaled[7]+0.5f);
		//temp += (tSimpleLivingString5_tick(&strings[i], slideNoise));//(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
		temp += tTString_tick(&strings[i]);
    5bb8:	4650      	mov	r0, sl
    5bba:	f003 fed1 	bl	9960 <__tTString_tick_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    5bbe:	9b05      	ldr	r3, [sp, #20]
		temp += tTString_tick(&strings[i]);
    5bc0:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
    5bc4:	f10a 0a04 	add.w	sl, sl, #4
    5bc8:	781b      	ldrb	r3, [r3, #0]
    5bca:	42ab      	cmp	r3, r5
    5bcc:	f73f ae58 	bgt.w	5880 <audioTickString2+0x120>
    5bd0:	9f03      	ldr	r7, [sp, #12]
	}
	thisFrameCount = (thisFrameCount + 1) & 63;
    5bd2:	683b      	ldr	r3, [r7, #0]
	//float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5bd4:	ed5f 0a41 	vldr	s1, [pc, #-260]	; 5ad4 <audioTickString2+0x374>
	thisFrameCount = (thisFrameCount + 1) & 63;
    5bd8:	3301      	adds	r3, #1
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5bda:	ed1f 1a41 	vldr	s2, [pc, #-260]	; 5ad8 <audioTickString2+0x378>
    5bde:	ee6a 0a20 	vmul.f32	s1, s20, s1
    5be2:	ed1f 0a42 	vldr	s0, [pc, #-264]	; 5adc <audioTickString2+0x37c>
	thisFrameCount = (thisFrameCount + 1) & 63;
    5be6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    5bea:	603b      	str	r3, [r7, #0]
	float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
    5bec:	f003 fdd0 	bl	9790 <__LEAF_clip_veneer>
    5bf0:	eef0 7a40 	vmov.f32	s15, s0
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	//temp *= outVol;
	temp *= outVol * masterVolFromBrain;
    5bf4:	4bb1      	ldr	r3, [pc, #708]	; (5ebc <audioTickString2+0x75c>)

	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5bf6:	eddf 6ab2 	vldr	s13, [pc, #712]	; 5ec0 <audioTickString2+0x760>
	float omAlpha = 1.0f - alpha;
    5bfa:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5bfe:	edd3 0a00 	vldr	s1, [r3]
    5c02:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
    5c06:	eebd 7ae7 	vcvt.s32.f32	s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5c0a:	4aae      	ldr	r2, [pc, #696]	; (5ec4 <audioTickString2+0x764>)
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5c0c:	ee60 0aa6 	vmul.f32	s1, s1, s13
	int volIdxInt = (int) volIdx;
    5c10:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
    5c14:	ee31 7a67 	vsub.f32	s14, s2, s15
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5c18:	ee60 0aa9 	vmul.f32	s1, s1, s19
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5c1c:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
    5c1e:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    5c22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
    5c26:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    5c2a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5c2e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
    5c32:	ee77 7ae6 	vsub.f32	s15, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5c36:	ed92 6a00 	vldr	s12, [r2]
	float omAlpha = 1.0f - alpha;
    5c3a:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    5c3e:	edd3 6a00 	vldr	s13, [r3]
    5c42:	ee67 7a86 	vmul.f32	s15, s15, s12
    5c46:	eee6 7a87 	vfma.f32	s15, s13, s14
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5c4a:	ee60 0aa7 	vmul.f32	s1, s1, s15
}
    5c4e:	b007      	add	sp, #28
    5c50:	ecbd 8b10 	vpop	{d8-d15}
    5c54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return LEAF_clip(-1.0f, temp * 0.98f, 1.0f);
    5c58:	f003 bd9a 	b.w	9790 <__LEAF_clip_veneer>
				if (stringParams[i+1][0][0] < openStringFreq)
    5c5c:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
    5c60:	eeb4 8ae0 	vcmpe.f32	s16, s1
    5c64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c68:	f300 80b1 	bgt.w	5dce <audioTickString2+0x66e>
    5c6c:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    5c70:	2200      	movs	r2, #0
    5c72:	e674      	b.n	595e <audioTickString2+0x1fe>
    5c74:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
    5c78:	eeb4 8ae6 	vcmpe.f32	s16, s13
    5c7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5c80:	f300 8096 	bgt.w	5db0 <audioTickString2+0x650>
		float oneMinusAlpha = 1.0f;
    5c84:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
		float alpha = 0.0f;
    5c88:	eef0 8a49 	vmov.f32	s17, s18
    5c8c:	e65c      	b.n	5948 <audioTickString2+0x1e8>
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    5c8e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
			float freq1 = stringParams[9][barHeightInt][1];
    5c92:	eb01 0141 	add.w	r1, r1, r1, lsl #1
			float freq2 = stringParams[9][barHeightIntPlusOne][1];
    5c96:	eb0b 0383 	add.w	r3, fp, r3, lsl #2
			float freq1 = stringParams[9][barHeightInt][1];
    5c9a:	eb0b 0181 	add.w	r1, fp, r1, lsl #2
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5c9e:	edd3 8a52 	vldr	s17, [r3, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5ca2:	edd3 6a53 	vldr	s13, [r3, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5ca6:	ee6f 8aa8 	vmul.f32	s17, s31, s17
    5caa:	ed91 7a52 	vldr	s14, [r1, #328]	; 0x148
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5cae:	ee2f 0aa6 	vmul.f32	s0, s31, s13
    5cb2:	edd1 7a53 	vldr	s15, [r1, #332]	; 0x14c
			filterFreq = (freq1 * barHeightOneMinusAlpha + freq2 * barHeightAlpha);
    5cb6:	eeee 8a87 	vfma.f32	s17, s29, s14
			decayTime = (decay1 * barHeightOneMinusAlpha + decay2 * barHeightAlpha) ;
    5cba:	eeae 0aa7 	vfma.f32	s0, s29, s15
    5cbe:	e756      	b.n	5b6e <audioTickString2+0x40e>
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    5cc0:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
    5cc4:	ed96 7a06 	vldr	s14, [r6, #24]
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5cc8:	eeb0 0a68 	vmov.f32	s0, s17
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    5ccc:	eef0 8a6c 	vmov.f32	s17, s25
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5cd0:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
    5cd4:	eeb0 2a4c 	vmov.f32	s4, s24
    5cd8:	eef0 1a6b 	vmov.f32	s3, s23
    5cdc:	eeb0 1a4b 	vmov.f32	s2, s22
			float harmonic = (knobScaled[6] * 8.0f) + 2.0f;
    5ce0:	eee7 8a27 	vfma.f32	s17, s14, s15
			float inHarm = LEAF_map(theNote[i], 20.0f, 76.0f, 0.0001f, 0.00001f);
    5ce4:	f003 ff24 	bl	9b30 <__LEAF_map_veneer>
			if (knobScaled[1] > 0.05f)
    5ce8:	edd6 0a01 	vldr	s1, [r6, #4]
    5cec:	eddf 7a76 	vldr	s15, [pc, #472]	; 5ec8 <audioTickString2+0x768>
    5cf0:	eef4 0ae7 	vcmpe.f32	s1, s15
    5cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    5cf8:	dd16      	ble.n	5d28 <audioTickString2+0x5c8>
				inHarm = LEAF_clip(0.00000001f, inHarm * knobScaled[1], 0.01f);
    5cfa:	ed9f 1a74 	vldr	s2, [pc, #464]	; 5ecc <audioTickString2+0x76c>
    5cfe:	ee60 0a80 	vmul.f32	s1, s1, s0
    5d02:	ed9f 0a73 	vldr	s0, [pc, #460]	; 5ed0 <audioTickString2+0x770>
    5d06:	f003 fd43 	bl	9790 <__LEAF_clip_veneer>
				tTString_setHarmonicity(&strings[i], inHarm, finalFreq);
    5d0a:	eef0 0a4d 	vmov.f32	s1, s26
    5d0e:	4650      	mov	r0, sl
    5d10:	f003 ff5a 	bl	9bc8 <__tTString_setHarmonicity_veneer>
				tTString_setInharmonic(&strings[i], 1);
    5d14:	4650      	mov	r0, sl
    5d16:	2101      	movs	r1, #1
    5d18:	f003 ff6e 	bl	9bf8 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],harmonic);
    5d1c:	eeb0 0a68 	vmov.f32	s0, s17
    5d20:	4650      	mov	r0, sl
    5d22:	f003 fd81 	bl	9828 <__tTString_setHarmonic_veneer>
    5d26:	e5cc      	b.n	58c2 <audioTickString2+0x162>
				tTString_setInharmonic(&strings[i], 0);
    5d28:	4650      	mov	r0, sl
    5d2a:	4639      	mov	r1, r7
    5d2c:	f003 ff64 	bl	9bf8 <__tTString_setInharmonic_veneer>
				tTString_setHarmonic(&strings[i],(uint32_t)harmonic);
    5d30:	eebc 0ae8 	vcvt.u32.f32	s0, s17
    5d34:	4650      	mov	r0, sl
    5d36:	eeb8 0a40 	vcvt.f32.u32	s0, s0
    5d3a:	f003 fd75 	bl	9828 <__tTString_setHarmonic_veneer>
    5d3e:	e5c0      	b.n	58c2 <audioTickString2+0x162>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    5d40:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5d44:	b29b      	uxth	r3, r3
    5d46:	2b00      	cmp	r3, #0
    5d48:	f43f ad6e 	beq.w	5828 <audioTickString2+0xc8>
    5d4c:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    5d50:	b29b      	uxth	r3, r3
    5d52:	2b00      	cmp	r3, #0
    5d54:	f47f ad68 	bne.w	5828 <audioTickString2+0xc8>
				tTString_mute(&strings[i]);
    5d58:	4650      	mov	r0, sl
    5d5a:	f003 febd 	bl	9ad8 <__tTString_mute_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    5d5e:	f899 2000 	ldrb.w	r2, [r9]
    5d62:	e561      	b.n	5828 <audioTickString2+0xc8>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d64:	eeb0 1a60 	vmov.f32	s2, s1
    5d68:	eeb0 0a48 	vmov.f32	s0, s16
    5d6c:	eef0 0a66 	vmov.f32	s1, s13
    5d70:	f003 fd3a 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5d74:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5d78:	eeb1 fa00 	vmov.f32	s30, #16	; 0x40800000  4.0
    5d7c:	eddb 0a24 	vldr	s1, [fp, #144]	; 0x90
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d80:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5d84:	2203      	movs	r2, #3
					oneMinusAlpha = 1.0f - alpha;
    5d86:	ee37 ea40 	vsub.f32	s28, s14, s0
    5d8a:	e602      	b.n	5992 <audioTickString2+0x232>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5d8c:	eeb0 1a66 	vmov.f32	s2, s13
    5d90:	eeb0 0a48 	vmov.f32	s0, s16
    5d94:	f003 fd28 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5d98:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5d9c:	eeb0 fa08 	vmov.f32	s30, #8	; 0x40400000  3.0
    5da0:	eddb 6a1b 	vldr	s13, [fp, #108]	; 0x6c
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5da4:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5da8:	2202      	movs	r2, #2
					oneMinusAlpha = 1.0f - alpha;
    5daa:	ee37 ea40 	vsub.f32	s28, s14, s0
    5dae:	e5e3      	b.n	5978 <audioTickString2+0x218>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5db0:	eeb0 1a66 	vmov.f32	s2, s13
    5db4:	eeb0 0a48 	vmov.f32	s0, s16
    5db8:	f003 fd16 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5dc0:	eef0 8a40 	vmov.f32	s17, s0
			if (stringParams[i][0][0] > openStringFreq)
    5dc4:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
					oneMinusAlpha = 1.0f - alpha;
    5dc8:	ee37 ea40 	vsub.f32	s28, s14, s0
    5dcc:	e5bc      	b.n	5948 <audioTickString2+0x1e8>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5dce:	eeb0 1a60 	vmov.f32	s2, s1
    5dd2:	eeb0 0a48 	vmov.f32	s0, s16
    5dd6:	eef0 0a66 	vmov.f32	s1, s13
    5dda:	f003 fd05 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5de2:	eeb0 fa00 	vmov.f32	s30, #0	; 0x40000000  2.0
    5de6:	eddb 0a12 	vldr	s1, [fp, #72]	; 0x48
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5dea:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5dee:	2201      	movs	r2, #1
					oneMinusAlpha = 1.0f - alpha;
    5df0:	ee37 ea40 	vsub.f32	s28, s14, s0
    5df4:	e5b3      	b.n	595e <audioTickString2+0x1fe>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5df6:	eeb0 0a48 	vmov.f32	s0, s16
    5dfa:	f003 fcf5 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5dfe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    5e02:	eeb2 fa02 	vmov.f32	s30, #34	; 0x41100000  9.0
					which = i;
    5e06:	2208      	movs	r2, #8
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e08:	eef0 8a40 	vmov.f32	s17, s0
					oneMinusAlpha = 1.0f - alpha;
    5e0c:	ee37 ea40 	vsub.f32	s28, s14, s0
    5e10:	e603      	b.n	5a1a <audioTickString2+0x2ba>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e12:	eeb0 1a60 	vmov.f32	s2, s1
    5e16:	eeb0 0a48 	vmov.f32	s0, s16
    5e1a:	eef0 0a66 	vmov.f32	s1, s13
    5e1e:	f003 fce3 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5e22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5e26:	eeb2 fa00 	vmov.f32	s30, #32	; 0x41000000  8.0
    5e2a:	eddb 0a48 	vldr	s1, [fp, #288]	; 0x120
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e2e:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5e32:	2207      	movs	r2, #7
					oneMinusAlpha = 1.0f - alpha;
    5e34:	ee37 ea40 	vsub.f32	s28, s14, s0
    5e38:	e5df      	b.n	59fa <audioTickString2+0x29a>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e3a:	eeb0 1a66 	vmov.f32	s2, s13
    5e3e:	eeb0 0a48 	vmov.f32	s0, s16
    5e42:	f003 fcd1 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5e46:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5e4a:	eeb1 fa0c 	vmov.f32	s30, #28	; 0x40e00000  7.0
    5e4e:	eddb 6a3f 	vldr	s13, [fp, #252]	; 0xfc
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e52:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5e56:	2206      	movs	r2, #6
					oneMinusAlpha = 1.0f - alpha;
    5e58:	ee37 ea40 	vsub.f32	s28, s14, s0
    5e5c:	e5c0      	b.n	59e0 <audioTickString2+0x280>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e5e:	eeb0 1a60 	vmov.f32	s2, s1
    5e62:	eeb0 0a48 	vmov.f32	s0, s16
    5e66:	eef0 0a66 	vmov.f32	s1, s13
    5e6a:	f003 fcbd 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5e6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5e72:	eeb1 fa08 	vmov.f32	s30, #24	; 0x40c00000  6.0
    5e76:	eddb 0a36 	vldr	s1, [fp, #216]	; 0xd8
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e7a:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5e7e:	2205      	movs	r2, #5
					oneMinusAlpha = 1.0f - alpha;
    5e80:	ee37 ea40 	vsub.f32	s28, s14, s0
    5e84:	e59f      	b.n	59c6 <audioTickString2+0x266>
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e86:	eeb0 1a66 	vmov.f32	s2, s13
    5e8a:	eeb0 0a48 	vmov.f32	s0, s16
    5e8e:	f003 fcab 	bl	97e8 <__LEAF_mapToZeroToOneOutput_veneer>
					oneMinusAlpha = 1.0f - alpha;
    5e92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
			if (stringParams[i][0][0] > openStringFreq)
    5e96:	eeb1 fa04 	vmov.f32	s30, #20	; 0x40a00000  5.0
    5e9a:	eddb 6a2d 	vldr	s13, [fp, #180]	; 0xb4
					alpha = LEAF_mapToZeroToOneOutput(openStringFreq, stringParams[i][0][0],stringParams[i+1][0][0]);
    5e9e:	eef0 8a40 	vmov.f32	s17, s0
					which = i;
    5ea2:	2204      	movs	r2, #4
					oneMinusAlpha = 1.0f - alpha;
    5ea4:	ee37 ea40 	vsub.f32	s28, s14, s0
    5ea8:	e580      	b.n	59ac <audioTickString2+0x24c>
		newPluck = 0;
    5eaa:	eddf 9a0a 	vldr	s19, [pc, #40]	; 5ed4 <audioTickString2+0x774>
    5eae:	4f0a      	ldr	r7, [pc, #40]	; (5ed8 <audioTickString2+0x778>)
    5eb0:	f8c8 2000 	str.w	r2, [r8]
	for (int i = 0; i < numStringsThisBoard; i++)
    5eb4:	e68d      	b.n	5bd2 <audioTickString2+0x472>
    5eb6:	4f08      	ldr	r7, [pc, #32]	; (5ed8 <audioTickString2+0x778>)
    5eb8:	e68b      	b.n	5bd2 <audioTickString2+0x472>
    5eba:	bf00      	nop
    5ebc:	200004a8 	.word	0x200004a8
    5ec0:	3f7ae148 	.word	0x3f7ae148
    5ec4:	2000051c 	.word	0x2000051c
    5ec8:	3d4ccccd 	.word	0x3d4ccccd
    5ecc:	3c23d70a 	.word	0x3c23d70a
    5ed0:	322bcc77 	.word	0x322bcc77
    5ed4:	00000000 	.word	0x00000000
    5ed8:	2001c700 	.word	0x2001c700
    5edc:	f3af 8000 	nop.w

00005ee0 <audioFrameString2>:
{
    5ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5ee4:	4b2a      	ldr	r3, [pc, #168]	; (5f90 <audioFrameString2+0xb0>)
{
    5ee6:	4680      	mov	r8, r0
		if (resetStringInputs)
    5ee8:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 5fb8 <audioFrameString2+0xd8>
{
    5eec:	ed2d 8b02 	vpush	{d8}
		uint32_t tempCountFrame = DWT->CYCCNT;
    5ef0:	685e      	ldr	r6, [r3, #4]
		if (resetStringInputs)
    5ef2:	f89b 3000 	ldrb.w	r3, [fp]
    5ef6:	b1bb      	cbz	r3, 5f28 <audioFrameString2+0x48>
			for (int i = 0; i < numStringsThisBoard; i++)
    5ef8:	4f26      	ldr	r7, [pc, #152]	; (5f94 <audioFrameString2+0xb4>)
    5efa:	783b      	ldrb	r3, [r7, #0]
    5efc:	b173      	cbz	r3, 5f1c <audioFrameString2+0x3c>
    5efe:	2400      	movs	r4, #0
    5f00:	4d25      	ldr	r5, [pc, #148]	; (5f98 <audioFrameString2+0xb8>)
    5f02:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 5fbc <audioFrameString2+0xdc>
				previousStringInputs[i] = 0;
    5f06:	46a1      	mov	r9, r4
				tTString_mute(&strings[i]);
    5f08:	4628      	mov	r0, r5
			for (int i = 0; i < numStringsThisBoard; i++)
    5f0a:	3504      	adds	r5, #4
				tTString_mute(&strings[i]);
    5f0c:	f003 fde4 	bl	9ad8 <__tTString_mute_veneer>
			for (int i = 0; i < numStringsThisBoard; i++)
    5f10:	783b      	ldrb	r3, [r7, #0]
				previousStringInputs[i] = 0;
    5f12:	f82a 9014 	strh.w	r9, [sl, r4, lsl #1]
			for (int i = 0; i < numStringsThisBoard; i++)
    5f16:	3401      	adds	r4, #1
    5f18:	42a3      	cmp	r3, r4
    5f1a:	dcf5      	bgt.n	5f08 <audioFrameString2+0x28>
			resetStringInputs = 0;
    5f1c:	2200      	movs	r2, #0
			newPluck = 1;
    5f1e:	4b1f      	ldr	r3, [pc, #124]	; (5f9c <audioFrameString2+0xbc>)
			resetStringInputs = 0;
    5f20:	f88b 2000 	strb.w	r2, [fp]
			newPluck = 1;
    5f24:	2201      	movs	r2, #1
    5f26:	601a      	str	r2, [r3, #0]
    5f28:	4c1d      	ldr	r4, [pc, #116]	; (5fa0 <audioFrameString2+0xc0>)
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5f2a:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 5fa4 <audioFrameString2+0xc4>
    5f2e:	f504 7500 	add.w	r5, r4, #512	; 0x200
    5f32:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    5f36:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    5f3a:	f7ff fc11 	bl	5760 <audioTickString2>
    5f3e:	ee20 0a08 	vmul.f32	s0, s0, s16
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5f42:	3408      	adds	r4, #8
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5f44:	eefd 7ac0 	vcvt.s32.f32	s15, s0
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5f48:	42ac      	cmp	r4, r5
			current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
    5f4a:	ee17 3a90 	vmov	r3, s15
			audioOutBuffer[iplusbuffer + 1] = current_sample;
    5f4e:	e944 3302 	strd	r3, r3, [r4, #-8]
		for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    5f52:	d1f2      	bne.n	5f3a <audioFrameString2+0x5a>
		if (switchStrings)
    5f54:	4c14      	ldr	r4, [pc, #80]	; (5fa8 <audioFrameString2+0xc8>)
    5f56:	6823      	ldr	r3, [r4, #0]
    5f58:	b9b3      	cbnz	r3, 5f88 <audioFrameString2+0xa8>
		switchStrings = 0;
    5f5a:	2200      	movs	r2, #0
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5f5c:	4b0c      	ldr	r3, [pc, #48]	; (5f90 <audioFrameString2+0xb0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5f5e:	4813      	ldr	r0, [pc, #76]	; (5fac <audioFrameString2+0xcc>)
		switchStrings = 0;
    5f60:	6022      	str	r2, [r4, #0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5f62:	685b      	ldr	r3, [r3, #4]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5f64:	ed90 7a00 	vldr	s14, [r0]
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5f68:	1b9b      	subs	r3, r3, r6
    5f6a:	4911      	ldr	r1, [pc, #68]	; (5fb0 <audioFrameString2+0xd0>)
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5f6c:	4a11      	ldr	r2, [pc, #68]	; (5fb4 <audioFrameString2+0xd4>)
    5f6e:	ee07 3a90 	vmov	s15, r3
		timeFrame = DWT->CYCCNT - tempCountFrame;
    5f72:	600b      	str	r3, [r1, #0]
		frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    5f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
    5f78:	ee67 7a87 	vmul.f32	s15, s15, s14
    5f7c:	edc2 7a00 	vstr	s15, [r2]
}
    5f80:	ecbd 8b02 	vpop	{d8}
    5f84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switchStringModel(switchStrings);
    5f88:	6820      	ldr	r0, [r4, #0]
    5f8a:	f7fb fb09 	bl	15a0 <switchStringModel>
    5f8e:	e7e4      	b.n	5f5a <audioFrameString2+0x7a>
    5f90:	e0001000 	.word	0xe0001000
    5f94:	200004b1 	.word	0x200004b1
    5f98:	2001c6f8 	.word	0x2001c6f8
    5f9c:	20005020 	.word	0x20005020
    5fa0:	30000000 	.word	0x30000000
    5fa4:	4b000000 	.word	0x4b000000
    5fa8:	20013f74 	.word	0x20013f74
    5fac:	200004a4 	.word	0x200004a4
    5fb0:	20013f78 	.word	0x20013f78
    5fb4:	20004f4c 	.word	0x20004f4c
    5fb8:	200054a8 	.word	0x200054a8
    5fbc:	20005090 	.word	0x20005090

00005fc0 <oscillator_tick>:
{
    5fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		oscOuts[0][i][string] = 0.0f;
    5fc4:	0082      	lsls	r2, r0, #2
    5fc6:	4cd1      	ldr	r4, [pc, #836]	; (630c <oscillator_tick+0x34c>)
    5fc8:	1c85      	adds	r5, r0, #2
    5fca:	f04f 0b00 	mov.w	fp, #0
		oscOuts[1][i][string] = 0.0f;
    5fce:	f100 0108 	add.w	r1, r0, #8
		oscOuts[0][i][string] = 0.0f;
    5fd2:	1d07      	adds	r7, r0, #4
    5fd4:	eb04 0a80 	add.w	sl, r4, r0, lsl #2
		oscOuts[1][i][string] = 0.0f;
    5fd8:	1d86      	adds	r6, r0, #6
{
    5fda:	4603      	mov	r3, r0
		oscOuts[1][i][string] = 0.0f;
    5fdc:	300a      	adds	r0, #10
	for (int osc = 0; osc < oscToTick; osc++)
    5fde:	f8df 9350 	ldr.w	r9, [pc, #848]	; 6330 <oscillator_tick+0x370>
		oscOuts[1][i][string] = 0.0f;
    5fe2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
{
    5fe6:	ed2d 8b04 	vpush	{d8-d9}
    5fea:	b089      	sub	sp, #36	; 0x24
		oscOuts[0][i][string] = 0.0f;
    5fec:	f8ca b000 	str.w	fp, [sl]
		oscOuts[1][i][string] = 0.0f;
    5ff0:	f8c6 b000 	str.w	fp, [r6]
		oscOuts[0][i][string] = 0.0f;
    5ff4:	9200      	str	r2, [sp, #0]
    5ff6:	eb04 0285 	add.w	r2, r4, r5, lsl #2
		oscOuts[1][i][string] = 0.0f;
    5ffa:	9101      	str	r1, [sp, #4]
		oscOuts[0][i][string] = 0.0f;
    5ffc:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    6000:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    6004:	9002      	str	r0, [sp, #8]
    6006:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[0][i][string] = 0.0f;
    600a:	eb04 0287 	add.w	r2, r4, r7, lsl #2
    600e:	f8c2 b000 	str.w	fp, [r2]
		oscOuts[1][i][string] = 0.0f;
    6012:	eb04 0280 	add.w	r2, r4, r0, lsl #2
    6016:	f8c2 b000 	str.w	fp, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
    601a:	f899 2000 	ldrb.w	r2, [r9]
    601e:	b19a      	cbz	r2, 6048 <oscillator_tick+0x88>
		if (oscOn[osc])
    6020:	f8df 8310 	ldr.w	r8, [pc, #784]	; 6334 <oscillator_tick+0x374>
    6024:	eeb0 8a40 	vmov.f32	s16, s0
    6028:	f898 0000 	ldrb.w	r0, [r8]
    602c:	b988      	cbnz	r0, 6052 <oscillator_tick+0x92>
	for (int osc = 0; osc < oscToTick; osc++)
    602e:	2a01      	cmp	r2, #1
    6030:	d90a      	bls.n	6048 <oscillator_tick+0x88>
		if (oscOn[osc])
    6032:	f898 1001 	ldrb.w	r1, [r8, #1]
    6036:	2900      	cmp	r1, #0
    6038:	d16e      	bne.n	6118 <oscillator_tick+0x158>
	for (int osc = 0; osc < oscToTick; osc++)
    603a:	2a02      	cmp	r2, #2
    603c:	d904      	bls.n	6048 <oscillator_tick+0x88>
		if (oscOn[osc])
    603e:	f898 2002 	ldrb.w	r2, [r8, #2]
    6042:	2a00      	cmp	r2, #0
    6044:	f040 80e6 	bne.w	6214 <oscillator_tick+0x254>
}
    6048:	b009      	add	sp, #36	; 0x24
    604a:	ecbd 8b04 	vpop	{d8-d9}
    604e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float freqOffset= oscParams[OscFreq].realVal[string];
    6052:	00a9      	lsls	r1, r5, #2
    6054:	4aae      	ldr	r2, [pc, #696]	; (6310 <oscillator_tick+0x350>)
    6056:	9305      	str	r3, [sp, #20]
    6058:	440a      	add	r2, r1
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    605a:	9b00      	ldr	r3, [sp, #0]
    605c:	48ad      	ldr	r0, [pc, #692]	; (6314 <oscillator_tick+0x354>)
			float freqToSmooth = (note + (fine*0.01f));
    605e:	ed92 7ab6 	vldr	s14, [r2, #728]	; 0x2d8
    6062:	eddf 7aad 	vldr	s15, [pc, #692]	; 6318 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6066:	4418      	add	r0, r3
			float shape = oscParams[OscShape].realVal[string];
    6068:	edd2 0ac4 	vldr	s1, [r2, #784]	; 0x310
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    606c:	eea7 0a27 	vfma.f32	s0, s14, s15
			float filterSend = oscParams[OscFilterSend].realVal[string];
    6070:	edd2 8afc 	vldr	s17, [r2, #1008]	; 0x3f0
			float freqOffset= oscParams[OscFreq].realVal[string];
    6074:	edd2 9abd 	vldr	s19, [r2, #756]	; 0x2f4
			float amp = oscParams[OscAmp].realVal[string];
    6078:	ed92 9acb 	vldr	s18, [r2, #812]	; 0x32c
			float shape = oscParams[OscShape].realVal[string];
    607c:	edcd 0a04 	vstr	s1, [sp, #16]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6080:	9003      	str	r0, [sp, #12]
    6082:	f003 fc01 	bl	9888 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    6086:	9803      	ldr	r0, [sp, #12]
    6088:	f003 fcc2 	bl	9a10 <__tExpSmooth_tick_veneer>
    608c:	9b00      	ldr	r3, [sp, #0]
    608e:	4aa3      	ldr	r2, [pc, #652]	; (631c <oscillator_tick+0x35c>)
    6090:	441a      	add	r2, r3
    6092:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6096:	ee30 0a27 	vadd.f32	s0, s0, s15
    609a:	f003 fb61 	bl	9760 <__mtofTableLookup_veneer>
    609e:	9b00      	ldr	r3, [sp, #0]
    60a0:	4a9f      	ldr	r2, [pc, #636]	; (6320 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    60a2:	a807      	add	r0, sp, #28
    60a4:	499f      	ldr	r1, [pc, #636]	; (6324 <oscillator_tick+0x364>)
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    60a6:	441a      	add	r2, r3
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    60a8:	9b05      	ldr	r3, [sp, #20]
			float sample = 0.0f;
    60aa:	f8cd b01c 	str.w	fp, [sp, #28]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    60ae:	edd2 7a00 	vldr	s15, [r2]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    60b2:	2200      	movs	r2, #0
    60b4:	f8d1 b000 	ldr.w	fp, [r1]
    60b8:	eee0 9a27 	vfma.f32	s19, s0, s15
    60bc:	4611      	mov	r1, r2
    60be:	eddd 0a04 	vldr	s1, [sp, #16]
    60c2:	9303      	str	r3, [sp, #12]
    60c4:	eeb0 0a69 	vmov.f32	s0, s19
    60c8:	47d8      	blx	fp
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    60ca:	4a91      	ldr	r2, [pc, #580]	; (6310 <oscillator_tick+0x350>)
    60cc:	9b03      	ldr	r3, [sp, #12]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    60ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= amp;
    60d2:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    60d6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
			sourceValues[osc][string] = sample;
    60da:	9900      	ldr	r1, [sp, #0]
			sample *= amp;
    60dc:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    60e0:	ed92 6aaa 	vldr	s12, [r2, #680]	; 0x2a8
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    60e4:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    60e8:	4a8f      	ldr	r2, [pc, #572]	; (6328 <oscillator_tick+0x368>)
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    60ea:	ee68 8a86 	vmul.f32	s17, s17, s12
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    60ee:	edd2 6a00 	vldr	s13, [r2]
			sourceValues[osc][string] = sample;
    60f2:	4a8e      	ldr	r2, [pc, #568]	; (632c <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    60f4:	ee67 6a26 	vmul.f32	s13, s14, s13
			sourceValues[osc][string] = sample;
    60f8:	440a      	add	r2, r1
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    60fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
			sourceValues[osc][string] = sample;
    60fe:	ed82 7a00 	vstr	s14, [r2]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6102:	ee68 8aa6 	vmul.f32	s17, s17, s13
	for (int osc = 0; osc < oscToTick; osc++)
    6106:	f899 2000 	ldrb.w	r2, [r9]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    610a:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    610e:	edca 8a00 	vstr	s17, [sl]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    6112:	edc6 7a00 	vstr	s15, [r6]
    6116:	e78a      	b.n	602e <oscillator_tick+0x6e>
			float freqOffset= oscParams[OscFreq].realVal[string];
    6118:	4e7d      	ldr	r6, [pc, #500]	; (6310 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    611a:	eeb0 0a48 	vmov.f32	s0, s16
    611e:	487d      	ldr	r0, [pc, #500]	; (6314 <oscillator_tick+0x354>)
			float freqOffset= oscParams[OscFreq].realVal[string];
    6120:	ea4f 0a85 	mov.w	sl, r5, lsl #2
			float fine = oscParams[OscFine].realVal[string];
    6124:	f206 4244 	addw	r2, r6, #1092	; 0x444
			float freqToSmooth = (note + (fine*0.01f));
    6128:	eddf 7a7b 	vldr	s15, [pc, #492]	; 6318 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    612c:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    6130:	9304      	str	r3, [sp, #16]
			float fine = oscParams[OscFine].realVal[string];
    6132:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6136:	9000      	str	r0, [sp, #0]
			float freqToSmooth = (note + (fine*0.01f));
    6138:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    613c:	f506 628c 	add.w	r2, r6, #1120	; 0x460
    6140:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6144:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    6148:	edd2 9a00 	vldr	s19, [r2]
			float shape = oscParams[OscShape].realVal[string];
    614c:	f206 427c 	addw	r2, r6, #1148	; 0x47c
    6150:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    6154:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    6158:	f506 6293 	add.w	r2, r6, #1176	; 0x498
    615c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    6160:	edcd 0a03 	vstr	s1, [sp, #12]
			float amp = oscParams[OscAmp].realVal[string];
    6164:	ed92 9a00 	vldr	s18, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    6168:	f206 525c 	addw	r2, r6, #1372	; 0x55c
    616c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    6170:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6174:	f003 fb88 	bl	9888 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    6178:	9800      	ldr	r0, [sp, #0]
    617a:	f003 fc49 	bl	9a10 <__tExpSmooth_tick_veneer>
    617e:	4a67      	ldr	r2, [pc, #412]	; (631c <oscillator_tick+0x35c>)
    6180:	4452      	add	r2, sl
    6182:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6186:	ee30 0a27 	vadd.f32	s0, s0, s15
    618a:	f003 fae9 	bl	9760 <__mtofTableLookup_veneer>
    618e:	4a64      	ldr	r2, [pc, #400]	; (6320 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6190:	9b04      	ldr	r3, [sp, #16]
    6192:	2101      	movs	r1, #1
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6194:	4452      	add	r2, sl
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6196:	a807      	add	r0, sp, #28
    6198:	eddd 0a03 	vldr	s1, [sp, #12]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    619c:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    61a0:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    61a2:	9300      	str	r3, [sp, #0]
    61a4:	eee0 9a27 	vfma.f32	s19, s0, s15
			float sample = 0.0f;
    61a8:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    61aa:	4a5e      	ldr	r2, [pc, #376]	; (6324 <oscillator_tick+0x364>)
    61ac:	f8d2 b004 	ldr.w	fp, [r2, #4]
    61b0:	2200      	movs	r2, #0
    61b2:	eeb0 0a69 	vmov.f32	s0, s19
    61b6:	47d8      	blx	fp
			sample *= amp;
    61b8:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    61bc:	9b01      	ldr	r3, [sp, #4]
    61be:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    61c2:	4859      	ldr	r0, [pc, #356]	; (6328 <oscillator_tick+0x368>)
			sample *= amp;
    61c4:	ee29 7a07 	vmul.f32	s14, s18, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    61c8:	eb04 0183 	add.w	r1, r4, r3, lsl #2
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    61cc:	9b00      	ldr	r3, [sp, #0]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    61ce:	edd0 6a00 	vldr	s13, [r0]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    61d2:	ee77 7ae8 	vsub.f32	s15, s15, s17
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    61d6:	f203 1005 	addw	r0, r3, #261	; 0x105
	for (int osc = 0; osc < oscToTick; osc++)
    61da:	f899 2000 	ldrb.w	r2, [r9]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    61de:	ee67 6a26 	vmul.f32	s13, s14, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    61e2:	eb06 0680 	add.w	r6, r6, r0, lsl #2
	for (int osc = 0; osc < oscToTick; osc++)
    61e6:	2a02      	cmp	r2, #2
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    61e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    61ec:	ed96 6a00 	vldr	s12, [r6]
    61f0:	ee68 8a86 	vmul.f32	s17, s17, s12
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    61f4:	ee67 7a86 	vmul.f32	s15, s15, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    61f8:	ee68 8aa6 	vmul.f32	s17, s17, s13
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    61fc:	edc1 7a00 	vstr	s15, [r1]
			sourceValues[osc][string] = sample;
    6200:	494a      	ldr	r1, [pc, #296]	; (632c <oscillator_tick+0x36c>)
    6202:	4451      	add	r1, sl
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    6204:	44a2      	add	sl, r4
			sourceValues[osc][string] = sample;
    6206:	ed81 7a00 	vstr	s14, [r1]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    620a:	edca 8a00 	vstr	s17, [sl]
	for (int osc = 0; osc < oscToTick; osc++)
    620e:	f63f af16 	bhi.w	603e <oscillator_tick+0x7e>
    6212:	e719      	b.n	6048 <oscillator_tick+0x88>
			float freqOffset= oscParams[OscFreq].realVal[string];
    6214:	4e3e      	ldr	r6, [pc, #248]	; (6310 <oscillator_tick+0x350>)
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6216:	eeb0 0a48 	vmov.f32	s0, s16
    621a:	483e      	ldr	r0, [pc, #248]	; (6314 <oscillator_tick+0x354>)
			float fine = oscParams[OscFine].realVal[string];
    621c:	f506 62b6 	add.w	r2, r6, #1456	; 0x5b0
			float freqToSmooth = (note + (fine*0.01f));
    6220:	eddf 7a3d 	vldr	s15, [pc, #244]	; 6318 <oscillator_tick+0x358>
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    6224:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    6228:	9303      	str	r3, [sp, #12]
			float fine = oscParams[OscFine].realVal[string];
    622a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    622e:	9000      	str	r0, [sp, #0]
    6230:	00bf      	lsls	r7, r7, #2
			float freqToSmooth = (note + (fine*0.01f));
    6232:	ed92 7a00 	vldr	s14, [r2]
			float freqOffset= oscParams[OscFreq].realVal[string];
    6236:	f206 52cc 	addw	r2, r6, #1484	; 0x5cc
    623a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    623e:	eea7 0a27 	vfma.f32	s0, s14, s15
			float freqOffset= oscParams[OscFreq].realVal[string];
    6242:	ed92 9a00 	vldr	s18, [r2]
			float shape = oscParams[OscShape].realVal[string];
    6246:	f506 62bd 	add.w	r2, r6, #1512	; 0x5e8
    624a:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    624e:	edd2 0a00 	vldr	s1, [r2]
			float amp = oscParams[OscAmp].realVal[string];
    6252:	f206 6204 	addw	r2, r6, #1540	; 0x604
    6256:	eb02 0285 	add.w	r2, r2, r5, lsl #2
			float shape = oscParams[OscShape].realVal[string];
    625a:	edcd 0a01 	vstr	s1, [sp, #4]
			float amp = oscParams[OscAmp].realVal[string];
    625e:	ed92 8a00 	vldr	s16, [r2]
			float filterSend = oscParams[OscFilterSend].realVal[string];
    6262:	f506 62d9 	add.w	r2, r6, #1736	; 0x6c8
    6266:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    626a:	edd2 8a00 	vldr	s17, [r2]
			tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
    626e:	f003 fb0b 	bl	9888 <__tExpSmooth_setDest_veneer>
			float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]) + midiAdd[osc][string];
    6272:	9800      	ldr	r0, [sp, #0]
    6274:	f003 fbcc 	bl	9a10 <__tExpSmooth_tick_veneer>
    6278:	4a28      	ldr	r2, [pc, #160]	; (631c <oscillator_tick+0x35c>)
    627a:	443a      	add	r2, r7
    627c:	edd2 7a00 	vldr	s15, [r2]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6280:	ee30 0a27 	vadd.f32	s0, s0, s15
    6284:	f003 fa6c 	bl	9760 <__mtofTableLookup_veneer>
    6288:	4a25      	ldr	r2, [pc, #148]	; (6320 <oscillator_tick+0x360>)
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    628a:	9b03      	ldr	r3, [sp, #12]
    628c:	a807      	add	r0, sp, #28
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    628e:	443a      	add	r2, r7
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    6290:	eddd 0a01 	vldr	s1, [sp, #4]
    6294:	2102      	movs	r1, #2
    6296:	9300      	str	r3, [sp, #0]
			float finalFreq = (mtofTableLookup(tempMIDI) * freqMult[osc][string]) + freqOffset;
    6298:	edd2 7a00 	vldr	s15, [r2]
			float sample = 0.0f;
    629c:	2200      	movs	r2, #0
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    629e:	eea0 9a27 	vfma.f32	s18, s0, s15
			float sample = 0.0f;
    62a2:	9207      	str	r2, [sp, #28]
			shapeTick[osc](&sample, osc, finalFreq, shape, 0, string);
    62a4:	4a1f      	ldr	r2, [pc, #124]	; (6324 <oscillator_tick+0x364>)
    62a6:	6895      	ldr	r5, [r2, #8]
    62a8:	2200      	movs	r2, #0
    62aa:	eeb0 0a49 	vmov.f32	s0, s18
    62ae:	47a8      	blx	r5
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62b0:	9b00      	ldr	r3, [sp, #0]
			sample *= amp;
    62b2:	ed9d 7a07 	vldr	s14, [sp, #28]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62ba:	f503 73b0 	add.w	r3, r3, #352	; 0x160
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    62be:	491a      	ldr	r1, [pc, #104]	; (6328 <oscillator_tick+0x368>)
			sample *= amp;
    62c0:	ee28 7a07 	vmul.f32	s14, s16, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62c4:	9802      	ldr	r0, [sp, #8]
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62c6:	eb06 0683 	add.w	r6, r6, r3, lsl #2
			sourceValues[osc][string] = sample;
    62ca:	4b18      	ldr	r3, [pc, #96]	; (632c <oscillator_tick+0x36c>)
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    62cc:	ed91 6a00 	vldr	s12, [r1]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62d0:	ee77 7ae8 	vsub.f32	s15, s15, s17
			sourceValues[osc][string] = sample;
    62d4:	443b      	add	r3, r7
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62d6:	edd6 6a00 	vldr	s13, [r6]
    62da:	19e2      	adds	r2, r4, r7
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62dc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
			sourceValues[osc][string] = sample;
    62e0:	ed83 7a00 	vstr	s14, [r3]
			sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)
    62e4:	ee27 7a06 	vmul.f32	s14, s14, s12
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62e8:	ee66 8aa8 	vmul.f32	s17, s13, s17
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62ec:	ee67 7a87 	vmul.f32	s15, s15, s14
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62f0:	ee68 8a87 	vmul.f32	s17, s17, s14
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
			oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
    62f8:	edc2 8a00 	vstr	s17, [r2]
			oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
    62fc:	edc4 7a00 	vstr	s15, [r4]
}
    6300:	b009      	add	sp, #36	; 0x24
    6302:	ecbd 8b04 	vpop	{d8-d9}
    6306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    630a:	bf00      	nop
    630c:	2001ced4 	.word	0x2001ced4
    6310:	20018bcc 	.word	0x20018bcc
    6314:	2001cfac 	.word	0x2001cfac
    6318:	3c23d70a 	.word	0x3c23d70a
    631c:	2001ce1c 	.word	0x2001ce1c
    6320:	2001cb30 	.word	0x2001cb30
    6324:	2001d074 	.word	0x2001d074
    6328:	200008a0 	.word	0x200008a0
    632c:	2001d0f0 	.word	0x2001d0f0
    6330:	200008b4 	.word	0x200008b4
    6334:	2001ced0 	.word	0x2001ced0
    6338:	f3af 8000 	nop.w
    633c:	f3af 8000 	nop.w

00006340 <sawSquareTick>:
{
    6340:	b538      	push	{r3, r4, r5, lr}
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    6342:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6346:	4c0e      	ldr	r4, [pc, #56]	; (6380 <sawSquareTick+0x40>)
{
    6348:	4605      	mov	r5, r0
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    634a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    634e:	ed2d 8b02 	vpush	{d8}
    6352:	eeb0 8a60 	vmov.f32	s16, s1
	tPBSawSquare_setFreq(&sawPaired[v][string], freq);
    6356:	4620      	mov	r0, r4
    6358:	f003 fc22 	bl	9ba0 <__tPBSawSquare_setFreq_veneer>
	tPBSawSquare_setShape(&sawPaired[v][string], shape);
    635c:	4620      	mov	r0, r4
    635e:	eeb0 0a48 	vmov.f32	s0, s16
    6362:	f003 fc55 	bl	9c10 <__tPBSawSquare_setShape_veneer>
    *sample += tPBSawSquare_tick(&sawPaired[v][string]);
    6366:	4620      	mov	r0, r4
    6368:	f003 fc42 	bl	9bf0 <__tPBSawSquare_tick_veneer>
    636c:	edd5 7a00 	vldr	s15, [r5]
    6370:	ee37 0a80 	vadd.f32	s0, s15, s0
    6374:	ed85 0a00 	vstr	s0, [r5]
}
    6378:	ecbd 8b02 	vpop	{d8}
    637c:	bd38      	pop	{r3, r4, r5, pc}
    637e:	bf00      	nop
    6380:	2001d01c 	.word	0x2001d01c
    6384:	f3af 8000 	nop.w
    6388:	f3af 8000 	nop.w
    638c:	f3af 8000 	nop.w
    6390:	f3af 8000 	nop.w
    6394:	f3af 8000 	nop.w
    6398:	f3af 8000 	nop.w
    639c:	f3af 8000 	nop.w

000063a0 <sineTriTick>:
{
    63a0:	b538      	push	{r3, r4, r5, lr}
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    63a2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    63a6:	4c0e      	ldr	r4, [pc, #56]	; (63e0 <sineTriTick+0x40>)
{
    63a8:	4605      	mov	r5, r0
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    63aa:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    63ae:	ed2d 8b02 	vpush	{d8}
    63b2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBSineTriangle_setFreq(&sinePaired[v][string], freq);
    63b6:	4620      	mov	r0, r4
    63b8:	f003 fc22 	bl	9c00 <__tPBSineTriangle_setFreq_veneer>
    tPBSineTriangle_setShape(&sinePaired[v][string],shape);
    63bc:	4620      	mov	r0, r4
    63be:	eeb0 0a48 	vmov.f32	s0, s16
    63c2:	f003 fbb1 	bl	9b28 <__tPBSineTriangle_setShape_veneer>
    *sample += tPBSineTriangle_tick(&sinePaired[v][string]);
    63c6:	4620      	mov	r0, r4
    63c8:	f003 faba 	bl	9940 <__tPBSineTriangle_tick_veneer>
    63cc:	edd5 7a00 	vldr	s15, [r5]
    63d0:	ee37 0a80 	vadd.f32	s0, s15, s0
    63d4:	ed85 0a00 	vstr	s0, [r5]
}
    63d8:	ecbd 8b02 	vpop	{d8}
    63dc:	bd38      	pop	{r3, r4, r5, pc}
    63de:	bf00      	nop
    63e0:	2001d0d8 	.word	0x2001d0d8
    63e4:	f3af 8000 	nop.w
    63e8:	f3af 8000 	nop.w
    63ec:	f3af 8000 	nop.w
    63f0:	f3af 8000 	nop.w
    63f4:	f3af 8000 	nop.w
    63f8:	f3af 8000 	nop.w
    63fc:	f3af 8000 	nop.w

00006400 <sawTick>:
	tPBSaw_setFreq(&saw[v][string], freq);
    6400:	4a0a      	ldr	r2, [pc, #40]	; (642c <sawTick+0x2c>)
    6402:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    6406:	b510      	push	{r4, lr}
    6408:	4604      	mov	r4, r0
    640a:	b082      	sub	sp, #8
	tPBSaw_setFreq(&saw[v][string], freq);
    640c:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    6410:	9001      	str	r0, [sp, #4]
    6412:	f003 fb91 	bl	9b38 <__tPBSaw_setFreq_veneer>
    *sample += tPBSaw_tick(&saw[v][string]);
    6416:	9801      	ldr	r0, [sp, #4]
    6418:	f003 f9aa 	bl	9770 <__tPBSaw_tick_veneer>
    641c:	edd4 7a00 	vldr	s15, [r4]
    6420:	ee37 0a80 	vadd.f32	s0, s15, s0
    6424:	ed84 0a00 	vstr	s0, [r4]
}
    6428:	b002      	add	sp, #8
    642a:	bd10      	pop	{r4, pc}
    642c:	2001d004 	.word	0x2001d004
    6430:	f3af 8000 	nop.w
    6434:	f3af 8000 	nop.w
    6438:	f3af 8000 	nop.w
    643c:	f3af 8000 	nop.w

00006440 <pulseTick>:
{
    6440:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_setFreq(&pulse[v][string], freq);
    6442:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    6446:	4c0e      	ldr	r4, [pc, #56]	; (6480 <pulseTick+0x40>)
{
    6448:	4605      	mov	r5, r0
    tPBPulse_setFreq(&pulse[v][string], freq);
    644a:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    644e:	ed2d 8b02 	vpush	{d8}
    6452:	eeb0 8a60 	vmov.f32	s16, s1
    tPBPulse_setFreq(&pulse[v][string], freq);
    6456:	4620      	mov	r0, r4
    6458:	f003 fbbe 	bl	9bd8 <__tPBPulse_setFreq_veneer>
    tPBPulse_setWidth(&pulse[v][string], shape);
    645c:	4620      	mov	r0, r4
    645e:	eeb0 0a48 	vmov.f32	s0, s16
    6462:	f003 f9f1 	bl	9848 <__tPBPulse_setWidth_veneer>
    *sample += tPBPulse_tick(&pulse[v][string]);
    6466:	4620      	mov	r0, r4
    6468:	f003 faca 	bl	9a00 <__tPBPulse_tick_veneer>
    646c:	edd5 7a00 	vldr	s15, [r5]
    6470:	ee37 0a80 	vadd.f32	s0, s15, s0
    6474:	ed85 0a00 	vstr	s0, [r5]
}
    6478:	ecbd 8b02 	vpop	{d8}
    647c:	bd38      	pop	{r3, r4, r5, pc}
    647e:	bf00      	nop
    6480:	2001cfe8 	.word	0x2001cfe8
    6484:	f3af 8000 	nop.w
    6488:	f3af 8000 	nop.w
    648c:	f3af 8000 	nop.w
    6490:	f3af 8000 	nop.w
    6494:	f3af 8000 	nop.w
    6498:	f3af 8000 	nop.w
    649c:	f3af 8000 	nop.w

000064a0 <sineTick>:
    tCycle_setFreq(&sine[v][string], freq);
    64a0:	4a0a      	ldr	r2, [pc, #40]	; (64cc <sineTick+0x2c>)
    64a2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
    64a6:	b510      	push	{r4, lr}
    64a8:	4604      	mov	r4, r0
    64aa:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
    64ac:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    64b0:	9001      	str	r0, [sp, #4]
    64b2:	f003 f991 	bl	97d8 <__tCycle_setFreq_veneer>
    *sample += tCycle_tick(&sine[v][string]);
    64b6:	9801      	ldr	r0, [sp, #4]
    64b8:	f003 fbb2 	bl	9c20 <__tCycle_tick_veneer>
    64bc:	edd4 7a00 	vldr	s15, [r4]
    64c0:	ee37 0a80 	vadd.f32	s0, s15, s0
    64c4:	ed84 0a00 	vstr	s0, [r4]
}
    64c8:	b002      	add	sp, #8
    64ca:	bd10      	pop	{r4, pc}
    64cc:	2001d0c0 	.word	0x2001d0c0
    64d0:	f3af 8000 	nop.w
    64d4:	f3af 8000 	nop.w
    64d8:	f3af 8000 	nop.w
    64dc:	f3af 8000 	nop.w

000064e0 <triTick>:
{
    64e0:	b538      	push	{r3, r4, r5, lr}
    tPBTriangle_setFreq(&tri[v][string], freq);
    64e2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    64e6:	4c0e      	ldr	r4, [pc, #56]	; (6520 <triTick+0x40>)
{
    64e8:	4605      	mov	r5, r0
    tPBTriangle_setFreq(&tri[v][string], freq);
    64ea:	eb04 0483 	add.w	r4, r4, r3, lsl #2
{
    64ee:	ed2d 8b02 	vpush	{d8}
    64f2:	eeb0 8a60 	vmov.f32	s16, s1
    tPBTriangle_setFreq(&tri[v][string], freq);
    64f6:	4620      	mov	r0, r4
    64f8:	f003 f946 	bl	9788 <__tPBTriangle_setFreq_veneer>
    tPBTriangle_setSkew(&tri[v][string], shape);
    64fc:	4620      	mov	r0, r4
    64fe:	eeb0 0a48 	vmov.f32	s0, s16
    6502:	f003 fa31 	bl	9968 <__tPBTriangle_setSkew_veneer>
    *sample += tPBTriangle_tick(&tri[v][string]);
    6506:	4620      	mov	r0, r4
    6508:	f003 f9a2 	bl	9850 <__tPBTriangle_tick_veneer>
    650c:	edd5 7a00 	vldr	s15, [r5]
    6510:	ee37 0a80 	vadd.f32	s0, s15, s0
    6514:	ed85 0a00 	vstr	s0, [r5]
}
    6518:	ecbd 8b02 	vpop	{d8}
    651c:	bd38      	pop	{r3, r4, r5, pc}
    651e:	bf00      	nop
    6520:	2001d270 	.word	0x2001d270
    6524:	f3af 8000 	nop.w
    6528:	f3af 8000 	nop.w
    652c:	f3af 8000 	nop.w
    6530:	f3af 8000 	nop.w
    6534:	f3af 8000 	nop.w
    6538:	f3af 8000 	nop.w
    653c:	f3af 8000 	nop.w

00006540 <userTick>:
}
    6540:	4770      	bx	lr
    6542:	bf00      	nop
    6544:	f3af 8000 	nop.w
    6548:	f3af 8000 	nop.w
    654c:	f3af 8000 	nop.w
    6550:	f3af 8000 	nop.w
    6554:	f3af 8000 	nop.w
    6558:	f3af 8000 	nop.w
    655c:	f3af 8000 	nop.w

00006560 <filter_tick>:
		float enabled = filtParams[FilterEnabled].realVal[string];
    6560:	4b50      	ldr	r3, [pc, #320]	; (66a4 <filter_tick+0x144>)
    6562:	f201 229b 	addw	r2, r1, #667	; 0x29b
		if (!enabledFilt[f]) continue;
    6566:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    656a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
{
    656e:	b570      	push	{r4, r5, r6, lr}
    6570:	ed2d 8b04 	vpush	{d8-d9}
		float enabled = filtParams[FilterEnabled].realVal[string];
    6574:	ed92 7a00 	vldr	s14, [r2]
{
    6578:	460c      	mov	r4, r1
    657a:	4605      	mov	r5, r0
		if (!enabledFilt[f]) continue;
    657c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6584:	d910      	bls.n	65a8 <filter_tick+0x48>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    6586:	1c8a      	adds	r2, r1, #2
    6588:	f503 612f 	add.w	r1, r3, #2800	; 0xaf0
    658c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    6590:	ed91 6a00 	vldr	s12, [r1]
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
    6594:	f603 219c 	addw	r1, r3, #2716	; 0xa9c
    6598:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    659c:	edd2 7a00 	vldr	s15, [r2]
    65a0:	eee0 7a06 	vfma.f32	s15, s0, s12
    65a4:	eef0 6a67 	vmov.f32	s13, s15
		float enabled = filtParams[FilterEnabled].realVal[string];
    65a8:	f204 22c5 	addw	r2, r4, #709	; 0x2c5
		if (!enabledFilt[f]) continue;
    65ac:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
    65b0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    65b4:	ed92 9a00 	vldr	s18, [r2]
		if (!enabledFilt[f]) continue;
    65b8:	eeb4 9ae7 	vcmpe.f32	s18, s15
    65bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    65c0:	d953      	bls.n	666a <filter_tick+0x10a>
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    65c2:	1ca1      	adds	r1, r4, #2
    65c4:	4a38      	ldr	r2, [pc, #224]	; (66a8 <filter_tick+0x148>)
	if (enabledFilt[0])
    65c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    65ca:	f204 20ef 	addw	r0, r4, #751	; 0x2ef
		float keyFollow = filtParams[FilterKeyFollow].realVal[string];
    65ce:	eb02 0181 	add.w	r1, r2, r1, lsl #2
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    65d2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    65d6:	edd1 5a00 	vldr	s11, [r1]
	if (enabledFilt[0])
    65da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    65de:	ed11 6a15 	vldr	s12, [r1, #-84]	; 0xffffffac
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    65e2:	ed93 8a00 	vldr	s16, [r3]
		cutoff[f] = MIDIcutoff + (note  * keyFollow);
    65e6:	eea0 6a25 	vfma.f32	s12, s0, s11
    65ea:	eef0 8a46 	vmov.f32	s17, s12
	if (enabledFilt[0])
    65ee:	dd1f      	ble.n	6630 <filter_tick+0xd0>
		filterTick[0](&samples[0], 0, cutoff[0], string);
    65f0:	4e2e      	ldr	r6, [pc, #184]	; (66ac <filter_tick+0x14c>)
    65f2:	eeb0 0a66 	vmov.f32	s0, s13
    65f6:	4622      	mov	r2, r4
    65f8:	2100      	movs	r1, #0
    65fa:	6833      	ldr	r3, [r6, #0]
    65fc:	4628      	mov	r0, r5
    65fe:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6600:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	if (enabledFilt[1])
    6604:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	samples[1] += sendToFilter2;
    6608:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    660c:	edd5 7a00 	vldr	s15, [r5]
    6610:	ee37 7a48 	vsub.f32	s14, s14, s16
	if (enabledFilt[1])
    6614:	eeb4 9ae6 	vcmpe.f32	s18, s13
	samples[1] += sendToFilter2;
    6618:	eea7 0a87 	vfma.f32	s0, s15, s14
	if (enabledFilt[1])
    661c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	samples[1] += sendToFilter2;
    6620:	ed85 0a01 	vstr	s0, [r5, #4]
	if (enabledFilt[1])
    6624:	dc11      	bgt.n	664a <filter_tick+0xea>
	return samples[1] + (samples[0] * sp);
    6626:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    662a:	ecbd 8b04 	vpop	{d8-d9}
    662e:	bd70      	pop	{r4, r5, r6, pc}
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6630:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    6634:	edd5 7a01 	vldr	s15, [r5, #4]
    6638:	edd5 6a00 	vldr	s13, [r5]
    663c:	4e1b      	ldr	r6, [pc, #108]	; (66ac <filter_tick+0x14c>)
	float sendToFilter2 = samples[0] * (1.0f - sp);
    663e:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    6642:	eee6 7a87 	vfma.f32	s15, s13, s14
    6646:	edc5 7a01 	vstr	s15, [r5, #4]
		filterTick[1](&samples[1], 1, cutoff[1], string);
    664a:	eeb0 0a68 	vmov.f32	s0, s17
    664e:	6873      	ldr	r3, [r6, #4]
    6650:	4622      	mov	r2, r4
    6652:	2101      	movs	r1, #1
    6654:	1d28      	adds	r0, r5, #4
    6656:	4798      	blx	r3
	return samples[1] + (samples[0] * sp);
    6658:	ed95 0a01 	vldr	s0, [r5, #4]
    665c:	edd5 7a00 	vldr	s15, [r5]
    6660:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    6664:	ecbd 8b04 	vpop	{d8-d9}
    6668:	bd70      	pop	{r4, r5, r6, pc}
	if (enabledFilt[0])
    666a:	eeb4 7ae7 	vcmpe.f32	s14, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    666e:	f204 22ef 	addw	r2, r4, #751	; 0x2ef
    6672:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (enabledFilt[0])
    6676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	float  sp = params[FilterSeriesParallelMix].realVal[string];
    667a:	ed93 8a00 	vldr	s16, [r3]
	if (enabledFilt[0])
    667e:	dcb7      	bgt.n	65f0 <filter_tick+0x90>
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
    6684:	ed95 0a01 	vldr	s0, [r5, #4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
    6688:	edd5 7a00 	vldr	s15, [r5]
    668c:	ee37 7a48 	vsub.f32	s14, s14, s16
	samples[1] += sendToFilter2;
    6690:	eea7 0a27 	vfma.f32	s0, s14, s15
    6694:	ed85 0a01 	vstr	s0, [r5, #4]
	return samples[1] + (samples[0] * sp);
    6698:	eea8 0a27 	vfma.f32	s0, s16, s15
}
    669c:	ecbd 8b04 	vpop	{d8-d9}
    66a0:	bd70      	pop	{r4, r5, r6, pc}
    66a2:	bf00      	nop
    66a4:	20018bcc 	.word	0x20018bcc
    66a8:	20019764 	.word	0x20019764
    66ac:	2001cb18 	.word	0x2001cb18
    66b0:	f3af 8000 	nop.w
    66b4:	f3af 8000 	nop.w
    66b8:	f3af 8000 	nop.w
    66bc:	f3af 8000 	nop.w

000066c0 <lowpassTick>:
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    66c0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    66c4:	4b0d      	ldr	r3, [pc, #52]	; (66fc <lowpassTick+0x3c>)
{
    66c6:	b530      	push	{r4, r5, lr}
    66c8:	4605      	mov	r5, r0
    66ca:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
    66cc:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    66d0:	0094      	lsls	r4, r2, #2
    66d2:	9001      	str	r0, [sp, #4]
    66d4:	f003 f854 	bl	9780 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    66d8:	ed95 0a00 	vldr	s0, [r5]
    66dc:	9801      	ldr	r0, [sp, #4]
    66de:	f003 f99b 	bl	9a18 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    66e2:	4b07      	ldr	r3, [pc, #28]	; (6700 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
    66e4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    66e8:	4423      	add	r3, r4
    66ea:	edd3 7a00 	vldr	s15, [r3]
    66ee:	ee67 7a80 	vmul.f32	s15, s15, s0
    66f2:	edc5 7a00 	vstr	s15, [r5]
}
    66f6:	b003      	add	sp, #12
    66f8:	bd30      	pop	{r4, r5, pc}
    66fa:	bf00      	nop
    66fc:	2001cd0c 	.word	0x2001cd0c
    6700:	2001cb08 	.word	0x2001cb08
    6704:	f3af 8000 	nop.w
    6708:	f3af 8000 	nop.w
    670c:	f3af 8000 	nop.w
    6710:	f3af 8000 	nop.w
    6714:	f3af 8000 	nop.w
    6718:	f3af 8000 	nop.w
    671c:	f3af 8000 	nop.w

00006720 <highpassTick>:
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    6720:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6724:	4b0d      	ldr	r3, [pc, #52]	; (675c <highpassTick+0x3c>)
{
    6726:	b530      	push	{r4, r5, lr}
    6728:	4605      	mov	r5, r0
    672a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
    672c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6730:	0094      	lsls	r4, r2, #2
    6732:	9001      	str	r0, [sp, #4]
    6734:	f003 f824 	bl	9780 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6738:	ed95 0a00 	vldr	s0, [r5]
    673c:	9801      	ldr	r0, [sp, #4]
    673e:	f003 f96b 	bl	9a18 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    6742:	4b07      	ldr	r3, [pc, #28]	; (6760 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
    6744:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6748:	4423      	add	r3, r4
    674a:	edd3 7a00 	vldr	s15, [r3]
    674e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6752:	edc5 7a00 	vstr	s15, [r5]
}
    6756:	b003      	add	sp, #12
    6758:	bd30      	pop	{r4, r5, pc}
    675a:	bf00      	nop
    675c:	2001cb88 	.word	0x2001cb88
    6760:	2001cb08 	.word	0x2001cb08
    6764:	f3af 8000 	nop.w
    6768:	f3af 8000 	nop.w
    676c:	f3af 8000 	nop.w
    6770:	f3af 8000 	nop.w
    6774:	f3af 8000 	nop.w
    6778:	f3af 8000 	nop.w
    677c:	f3af 8000 	nop.w

00006780 <bandpassTick>:
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    6780:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6784:	4b0d      	ldr	r3, [pc, #52]	; (67bc <bandpassTick+0x3c>)
{
    6786:	b530      	push	{r4, r5, lr}
    6788:	4605      	mov	r5, r0
    678a:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
    678c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6790:	0094      	lsls	r4, r2, #2
    6792:	9001      	str	r0, [sp, #4]
    6794:	f002 fff4 	bl	9780 <__tSVF_setFreqFast_veneer>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    6798:	ed95 0a00 	vldr	s0, [r5]
    679c:	9801      	ldr	r0, [sp, #4]
    679e:	f003 f93b 	bl	9a18 <__tSVF_tick_veneer>
    *sample *= filterGain[v][string];
    67a2:	4b07      	ldr	r3, [pc, #28]	; (67c0 <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
    67a4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    67a8:	4423      	add	r3, r4
    67aa:	edd3 7a00 	vldr	s15, [r3]
    67ae:	ee67 7a80 	vmul.f32	s15, s15, s0
    67b2:	edc5 7a00 	vstr	s15, [r5]
}
    67b6:	b003      	add	sp, #12
    67b8:	bd30      	pop	{r4, r5, pc}
    67ba:	bf00      	nop
    67bc:	2001c87c 	.word	0x2001c87c
    67c0:	2001cb08 	.word	0x2001cb08
    67c4:	f3af 8000 	nop.w
    67c8:	f3af 8000 	nop.w
    67cc:	f3af 8000 	nop.w
    67d0:	f3af 8000 	nop.w
    67d4:	f3af 8000 	nop.w
    67d8:	f3af 8000 	nop.w
    67dc:	f3af 8000 	nop.w

000067e0 <diodeLowpassTick>:
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    67e0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    67e4:	4b0d      	ldr	r3, [pc, #52]	; (681c <diodeLowpassTick+0x3c>)
{
    67e6:	b530      	push	{r4, r5, lr}
    67e8:	4605      	mov	r5, r0
    67ea:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
    67ec:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    67f0:	0094      	lsls	r4, r2, #2
    67f2:	9001      	str	r0, [sp, #4]
    67f4:	f003 f944 	bl	9a80 <__tDiodeFilter_setFreqFast_veneer>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    67f8:	ed95 0a00 	vldr	s0, [r5]
    67fc:	9801      	ldr	r0, [sp, #4]
    67fe:	f002 ffdb 	bl	97b8 <__tDiodeFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    6802:	4b07      	ldr	r3, [pc, #28]	; (6820 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
    6804:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6808:	4423      	add	r3, r4
    680a:	edd3 7a00 	vldr	s15, [r3]
    680e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6812:	edc5 7a00 	vstr	s15, [r5]
}
    6816:	b003      	add	sp, #12
    6818:	bd30      	pop	{r4, r5, pc}
    681a:	bf00      	nop
    681c:	2001ca94 	.word	0x2001ca94
    6820:	2001cb08 	.word	0x2001cb08
    6824:	f3af 8000 	nop.w
    6828:	f3af 8000 	nop.w
    682c:	f3af 8000 	nop.w
    6830:	f3af 8000 	nop.w
    6834:	f3af 8000 	nop.w
    6838:	f3af 8000 	nop.w
    683c:	f3af 8000 	nop.w

00006840 <VZpeakTick>:
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    6840:	4b09      	ldr	r3, [pc, #36]	; (6868 <VZpeakTick+0x28>)
    6842:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6846:	b510      	push	{r4, lr}
    6848:	4604      	mov	r4, r0
    684a:	b082      	sub	sp, #8
	tVZFilterBell_setFreq(&VZfilterPeak[v][string], cutoff);
    684c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6850:	9001      	str	r0, [sp, #4]
    6852:	f003 f93d 	bl	9ad0 <__tVZFilterBell_setFreq_veneer>
	*sample = tVZFilterBell_tick(&VZfilterPeak[v][string], *sample);
    6856:	9801      	ldr	r0, [sp, #4]
    6858:	ed94 0a00 	vldr	s0, [r4]
    685c:	f003 f878 	bl	9950 <__tVZFilterBell_tick_veneer>
    6860:	ed84 0a00 	vstr	s0, [r4]
}
    6864:	b002      	add	sp, #8
    6866:	bd10      	pop	{r4, pc}
    6868:	2001c864 	.word	0x2001c864
    686c:	f3af 8000 	nop.w
    6870:	f3af 8000 	nop.w
    6874:	f3af 8000 	nop.w
    6878:	f3af 8000 	nop.w
    687c:	f3af 8000 	nop.w

00006880 <VZlowshelfTick>:
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    6880:	4b09      	ldr	r3, [pc, #36]	; (68a8 <VZlowshelfTick+0x28>)
    6882:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    6886:	b510      	push	{r4, lr}
    6888:	4604      	mov	r4, r0
    688a:	b082      	sub	sp, #8
	tVZFilterLS_setFreqFast(&VZfilterLS[v][string], cutoff);
    688c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    6890:	9001      	str	r0, [sp, #4]
    6892:	f002 fff5 	bl	9880 <__tVZFilterLS_setFreqFast_veneer>
	*sample = tVZFilterLS_tick(&VZfilterLS[v][string], *sample);
    6896:	9801      	ldr	r0, [sp, #4]
    6898:	ed94 0a00 	vldr	s0, [r4]
    689c:	f002 ffac 	bl	97f8 <__tVZFilterLS_tick_veneer>
    68a0:	ed84 0a00 	vstr	s0, [r4]
}
    68a4:	b002      	add	sp, #8
    68a6:	bd10      	pop	{r4, pc}
    68a8:	2001c854 	.word	0x2001c854
    68ac:	f3af 8000 	nop.w
    68b0:	f3af 8000 	nop.w
    68b4:	f3af 8000 	nop.w
    68b8:	f3af 8000 	nop.w
    68bc:	f3af 8000 	nop.w

000068c0 <VZhighshelfTick>:
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    68c0:	4b09      	ldr	r3, [pc, #36]	; (68e8 <VZhighshelfTick+0x28>)
    68c2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    68c6:	b510      	push	{r4, lr}
    68c8:	4604      	mov	r4, r0
    68ca:	b082      	sub	sp, #8
	tVZFilterHS_setFreqFast(&VZfilterHS[v][string], cutoff);
    68cc:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    68d0:	9001      	str	r0, [sp, #4]
    68d2:	f003 f945 	bl	9b60 <__tVZFilterHS_setFreqFast_veneer>
	*sample = tVZFilterHS_tick(&VZfilterHS[v][string], *sample);
    68d6:	9801      	ldr	r0, [sp, #4]
    68d8:	ed94 0a00 	vldr	s0, [r4]
    68dc:	f002 ffe4 	bl	98a8 <__tVZFilterHS_tick_veneer>
    68e0:	ed84 0a00 	vstr	s0, [r4]
}
    68e4:	b002      	add	sp, #8
    68e6:	bd10      	pop	{r4, pc}
    68e8:	2001c844 	.word	0x2001c844
    68ec:	f3af 8000 	nop.w
    68f0:	f3af 8000 	nop.w
    68f4:	f3af 8000 	nop.w
    68f8:	f3af 8000 	nop.w
    68fc:	f3af 8000 	nop.w

00006900 <VZbandrejectTick>:
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    6900:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6904:	4b0d      	ldr	r3, [pc, #52]	; (693c <VZbandrejectTick+0x3c>)
{
    6906:	b530      	push	{r4, r5, lr}
    6908:	4605      	mov	r5, r0
    690a:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
    690c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6910:	0094      	lsls	r4, r2, #2
    6912:	9001      	str	r0, [sp, #4]
    6914:	f002 ffa0 	bl	9858 <__tVZFilter_setFreqFast_veneer>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    6918:	ed95 0a00 	vldr	s0, [r5]
    691c:	9801      	ldr	r0, [sp, #4]
    691e:	f003 f997 	bl	9c50 <__tVZFilter_tickEfficient_veneer>
    *sample *= filterGain[v][string];
    6922:	4b07      	ldr	r3, [pc, #28]	; (6940 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
    6924:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6928:	4423      	add	r3, r4
    692a:	edd3 7a00 	vldr	s15, [r3]
    692e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6932:	edc5 7a00 	vstr	s15, [r5]
}
    6936:	b003      	add	sp, #12
    6938:	bd30      	pop	{r4, r5, pc}
    693a:	bf00      	nop
    693c:	2001c834 	.word	0x2001c834
    6940:	2001cb08 	.word	0x2001cb08
    6944:	f3af 8000 	nop.w
    6948:	f3af 8000 	nop.w
    694c:	f3af 8000 	nop.w
    6950:	f3af 8000 	nop.w
    6954:	f3af 8000 	nop.w
    6958:	f3af 8000 	nop.w
    695c:	f3af 8000 	nop.w

00006960 <LadderLowpassTick>:
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    6960:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    6964:	4b0d      	ldr	r3, [pc, #52]	; (699c <LadderLowpassTick+0x3c>)
{
    6966:	b530      	push	{r4, r5, lr}
    6968:	4605      	mov	r5, r0
    696a:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
    696c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    6970:	0094      	lsls	r4, r2, #2
    6972:	9001      	str	r0, [sp, #4]
    6974:	f003 f968 	bl	9c48 <__tLadderFilter_setFreqFast_veneer>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6978:	ed95 0a00 	vldr	s0, [r5]
    697c:	9801      	ldr	r0, [sp, #4]
    697e:	f003 f84f 	bl	9a20 <__tLadderFilter_tick_veneer>
    *sample *= filterGain[v][string];
    6982:	4b07      	ldr	r3, [pc, #28]	; (69a0 <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
    6984:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
    6988:	4423      	add	r3, r4
    698a:	edd3 7a00 	vldr	s15, [r3]
    698e:	ee67 7a80 	vmul.f32	s15, s15, s0
    6992:	edc5 7a00 	vstr	s15, [r5]
}
    6996:	b003      	add	sp, #12
    6998:	bd30      	pop	{r4, r5, pc}
    699a:	bf00      	nop
    699c:	2001c824 	.word	0x2001c824
    69a0:	2001cb08 	.word	0x2001cb08
    69a4:	f3af 8000 	nop.w
    69a8:	f3af 8000 	nop.w
    69ac:	f3af 8000 	nop.w
    69b0:	f3af 8000 	nop.w
    69b4:	f3af 8000 	nop.w
    69b8:	f3af 8000 	nop.w
    69bc:	f3af 8000 	nop.w

000069c0 <setFreqMultPitch>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    69c0:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    69c4:	4b0f      	ldr	r3, [pc, #60]	; (6a04 <setFreqMultPitch+0x44>)
    69c6:	0042      	lsls	r2, r0, #1
	pitch *= 24.0f;
    69c8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    69cc:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    69d0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    69d4:	3020      	adds	r0, #32
	pitch *= 24.0f;
    69d6:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    69da:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    69de:	4408      	add	r0, r1
    69e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    69e4:	ed93 7a02 	vldr	s14, [r3, #8]
    69e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
    69ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    69f0:	dd01      	ble.n	69f6 <setFreqMultPitch+0x36>
		pitch = roundf(pitch);
    69f2:	feb8 0a40 	vrinta.f32	s0, s0
	midiAdd[osc][string] = pitch;
    69f6:	4b04      	ldr	r3, [pc, #16]	; (6a08 <setFreqMultPitch+0x48>)
    69f8:	440a      	add	r2, r1
    69fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    69fe:	ed83 0a00 	vstr	s0, [r3]
}
    6a02:	4770      	bx	lr
    6a04:	20018bcc 	.word	0x20018bcc
    6a08:	2001ce1c 	.word	0x2001ce1c
    6a0c:	f3af 8000 	nop.w
    6a10:	f3af 8000 	nop.w
    6a14:	f3af 8000 	nop.w
    6a18:	f3af 8000 	nop.w
    6a1c:	f3af 8000 	nop.w

00006a20 <setFreqMultHarm>:
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6a20:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
    6a24:	4b17      	ldr	r3, [pc, #92]	; (6a84 <setFreqMultHarm+0x64>)
    6a26:	0042      	lsls	r2, r0, #1
	harm *= 15.0f;
    6a28:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6a2c:	eb00 008c 	add.w	r0, r0, ip, lsl #2
    6a30:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    6a34:	3020      	adds	r0, #32
	harm *= 15.0f;
    6a36:	ee20 0a07 	vmul.f32	s0, s0, s14
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
    6a3a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6a3e:	4408      	add	r0, r1
    6a40:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6a44:	ed93 7a02 	vldr	s14, [r3, #8]
    6a48:	eeb4 7ae7 	vcmpe.f32	s14, s15
    6a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a50:	dd01      	ble.n	6a56 <setFreqMultHarm+0x36>
		harm = roundf(harm);
    6a52:	feb8 0a40 	vrinta.f32	s0, s0
	if (harm >= 0)
    6a56:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
		freqMult[osc][string] = (harm + 1);
    6a5a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
    6a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    6a62:	db08      	blt.n	6a76 <setFreqMultHarm+0x56>
		freqMult[osc][string] = (harm + 1);
    6a64:	ee30 0a27 	vadd.f32	s0, s0, s15
    6a68:	4b07      	ldr	r3, [pc, #28]	; (6a88 <setFreqMultHarm+0x68>)
    6a6a:	440a      	add	r2, r1
    6a6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    6a70:	ed83 0a00 	vstr	s0, [r3]
}
    6a74:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
    6a76:	ee30 0a67 	vsub.f32	s0, s0, s15
    6a7a:	eeb0 7ac0 	vabs.f32	s14, s0
    6a7e:	ee87 0a87 	vdiv.f32	s0, s15, s14
    6a82:	e7f1      	b.n	6a68 <setFreqMultHarm+0x48>
    6a84:	20018bcc 	.word	0x20018bcc
    6a88:	2001cb30 	.word	0x2001cb30
    6a8c:	f3af 8000 	nop.w
    6a90:	f3af 8000 	nop.w
    6a94:	f3af 8000 	nop.w
    6a98:	f3af 8000 	nop.w
    6a9c:	f3af 8000 	nop.w

00006aa0 <lowpassSetQ>:
    tSVF_setQ(&lowpass[v][string], q);
    6aa0:	4b03      	ldr	r3, [pc, #12]	; (6ab0 <lowpassSetQ+0x10>)
    6aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6aa6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aaa:	f002 beb9 	b.w	9820 <__tSVF_setQ_veneer>
    6aae:	bf00      	nop
    6ab0:	2001cd0c 	.word	0x2001cd0c
    6ab4:	f3af 8000 	nop.w
    6ab8:	f3af 8000 	nop.w
    6abc:	f3af 8000 	nop.w

00006ac0 <highpassSetQ>:
    tSVF_setQ(&highpass[v][string], q);
    6ac0:	4b03      	ldr	r3, [pc, #12]	; (6ad0 <highpassSetQ+0x10>)
    6ac2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ac6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aca:	f002 bea9 	b.w	9820 <__tSVF_setQ_veneer>
    6ace:	bf00      	nop
    6ad0:	2001cb88 	.word	0x2001cb88
    6ad4:	f3af 8000 	nop.w
    6ad8:	f3af 8000 	nop.w
    6adc:	f3af 8000 	nop.w

00006ae0 <bandpassSetQ>:
    tSVF_setQ(&bandpass[v][string], q);
    6ae0:	4b03      	ldr	r3, [pc, #12]	; (6af0 <bandpassSetQ+0x10>)
    6ae2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ae6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6aea:	f002 be99 	b.w	9820 <__tSVF_setQ_veneer>
    6aee:	bf00      	nop
    6af0:	2001c87c 	.word	0x2001c87c
    6af4:	f3af 8000 	nop.w
    6af8:	f3af 8000 	nop.w
    6afc:	f3af 8000 	nop.w

00006b00 <diodeLowpassSetQ>:
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
    6b00:	4b03      	ldr	r3, [pc, #12]	; (6b10 <diodeLowpassSetQ+0x10>)
    6b02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b0a:	f002 bf8d 	b.w	9a28 <__tDiodeFilter_setQ_veneer>
    6b0e:	bf00      	nop
    6b10:	2001ca94 	.word	0x2001ca94
    6b14:	f3af 8000 	nop.w
    6b18:	f3af 8000 	nop.w
    6b1c:	f3af 8000 	nop.w

00006b20 <VZpeakSetQ>:
	tVZFilterBell_setBandwidth(&VZfilterPeak[v][string], q);
    6b20:	4b03      	ldr	r3, [pc, #12]	; (6b30 <VZpeakSetQ+0x10>)
    6b22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b2a:	f002 bfc1 	b.w	9ab0 <__tVZFilterBell_setBandwidth_veneer>
    6b2e:	bf00      	nop
    6b30:	2001c864 	.word	0x2001c864
    6b34:	f3af 8000 	nop.w
    6b38:	f3af 8000 	nop.w
    6b3c:	f3af 8000 	nop.w

00006b40 <VZlowshelfSetQ>:
	tVZFilterLS_setResonance(&VZfilterLS[v][string], q);
    6b40:	4b03      	ldr	r3, [pc, #12]	; (6b50 <VZlowshelfSetQ+0x10>)
    6b42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b4a:	f002 bea5 	b.w	9898 <__tVZFilterLS_setResonance_veneer>
    6b4e:	bf00      	nop
    6b50:	2001c854 	.word	0x2001c854
    6b54:	f3af 8000 	nop.w
    6b58:	f3af 8000 	nop.w
    6b5c:	f3af 8000 	nop.w

00006b60 <VZhighshelfSetQ>:
	tVZFilterHS_setResonance(&VZfilterHS[v][string], q);
    6b60:	4b03      	ldr	r3, [pc, #12]	; (6b70 <VZhighshelfSetQ+0x10>)
    6b62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b6a:	f002 bed5 	b.w	9918 <__tVZFilterHS_setResonance_veneer>
    6b6e:	bf00      	nop
    6b70:	2001c844 	.word	0x2001c844
    6b74:	f3af 8000 	nop.w
    6b78:	f3af 8000 	nop.w
    6b7c:	f3af 8000 	nop.w

00006b80 <VZbandrejectSetQ>:
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
    6b80:	4b03      	ldr	r3, [pc, #12]	; (6b90 <VZbandrejectSetQ+0x10>)
    6b82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6b86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6b8a:	f002 bf51 	b.w	9a30 <__tVZFilter_setResonance_veneer>
    6b8e:	bf00      	nop
    6b90:	2001c834 	.word	0x2001c834
    6b94:	f3af 8000 	nop.w
    6b98:	f3af 8000 	nop.w
    6b9c:	f3af 8000 	nop.w

00006ba0 <LadderLowpassSetQ>:
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
    6ba0:	4b03      	ldr	r3, [pc, #12]	; (6bb0 <LadderLowpassSetQ+0x10>)
    6ba2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6ba6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6baa:	f003 b819 	b.w	9be0 <__tLadderFilter_setQ_veneer>
    6bae:	bf00      	nop
    6bb0:	2001c824 	.word	0x2001c824
    6bb4:	f3af 8000 	nop.w
    6bb8:	f3af 8000 	nop.w
    6bbc:	f3af 8000 	nop.w

00006bc0 <lowpassSetGain>:
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6bc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6bc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    6bc8:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6bca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    6bce:	4605      	mov	r5, r0
    6bd0:	460c      	mov	r4, r1
    filterGain[v][string] = dbToATableLookup((gain * 24.0f) - 12.0f);
    6bd2:	eeb0 0a67 	vmov.f32	s0, s15
    6bd6:	f002 ff47 	bl	9a68 <__dbToATableLookup_veneer>
    6bda:	4b04      	ldr	r3, [pc, #16]	; (6bec <lowpassSetGain+0x2c>)
    6bdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6be0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6be4:	ed83 0a00 	vstr	s0, [r3]
}
    6be8:	bd38      	pop	{r3, r4, r5, pc}
    6bea:	bf00      	nop
    6bec:	2001cb08 	.word	0x2001cb08
    6bf0:	f3af 8000 	nop.w
    6bf4:	f3af 8000 	nop.w
    6bf8:	f3af 8000 	nop.w
    6bfc:	f3af 8000 	nop.w

00006c00 <highpassSetGain>:
    6c00:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6c04:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6c08:	b538      	push	{r3, r4, r5, lr}
    6c0a:	eee0 7a07 	vfma.f32	s15, s0, s14
    6c0e:	4605      	mov	r5, r0
    6c10:	460c      	mov	r4, r1
    6c12:	eeb0 0a67 	vmov.f32	s0, s15
    6c16:	f002 ff27 	bl	9a68 <__dbToATableLookup_veneer>
    6c1a:	4b04      	ldr	r3, [pc, #16]	; (6c2c <highpassSetGain+0x2c>)
    6c1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6c20:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6c24:	ed83 0a00 	vstr	s0, [r3]
    6c28:	bd38      	pop	{r3, r4, r5, pc}
    6c2a:	bf00      	nop
    6c2c:	2001cb08 	.word	0x2001cb08
    6c30:	f3af 8000 	nop.w
    6c34:	f3af 8000 	nop.w
    6c38:	f3af 8000 	nop.w
    6c3c:	f3af 8000 	nop.w

00006c40 <bandpassSetGain>:
    6c40:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6c44:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6c48:	b538      	push	{r3, r4, r5, lr}
    6c4a:	eee0 7a07 	vfma.f32	s15, s0, s14
    6c4e:	4605      	mov	r5, r0
    6c50:	460c      	mov	r4, r1
    6c52:	eeb0 0a67 	vmov.f32	s0, s15
    6c56:	f002 ff07 	bl	9a68 <__dbToATableLookup_veneer>
    6c5a:	4b04      	ldr	r3, [pc, #16]	; (6c6c <bandpassSetGain+0x2c>)
    6c5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6c60:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6c64:	ed83 0a00 	vstr	s0, [r3]
    6c68:	bd38      	pop	{r3, r4, r5, pc}
    6c6a:	bf00      	nop
    6c6c:	2001cb08 	.word	0x2001cb08
    6c70:	f3af 8000 	nop.w
    6c74:	f3af 8000 	nop.w
    6c78:	f3af 8000 	nop.w
    6c7c:	f3af 8000 	nop.w

00006c80 <diodeLowpassSetGain>:
    6c80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6c84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6c88:	b538      	push	{r3, r4, r5, lr}
    6c8a:	eee0 7a07 	vfma.f32	s15, s0, s14
    6c8e:	4605      	mov	r5, r0
    6c90:	460c      	mov	r4, r1
    6c92:	eeb0 0a67 	vmov.f32	s0, s15
    6c96:	f002 fee7 	bl	9a68 <__dbToATableLookup_veneer>
    6c9a:	4b04      	ldr	r3, [pc, #16]	; (6cac <diodeLowpassSetGain+0x2c>)
    6c9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6ca0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6ca4:	ed83 0a00 	vstr	s0, [r3]
    6ca8:	bd38      	pop	{r3, r4, r5, pc}
    6caa:	bf00      	nop
    6cac:	2001cb08 	.word	0x2001cb08
    6cb0:	f3af 8000 	nop.w
    6cb4:	f3af 8000 	nop.w
    6cb8:	f3af 8000 	nop.w
    6cbc:	f3af 8000 	nop.w

00006cc0 <VZpeakSetGain>:
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6cc0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6cc4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 6cec <VZpeakSetGain+0x2c>
{
    6cc8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6cca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    6cce:	4605      	mov	r5, r0
    6cd0:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6cd2:	eeb0 0a67 	vmov.f32	s0, s15
    6cd6:	f002 fec7 	bl	9a68 <__dbToATableLookup_veneer>
    6cda:	4b05      	ldr	r3, [pc, #20]	; (6cf0 <VZpeakSetGain+0x30>)
    6cdc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&VZfilterPeak[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6ce8:	f002 befe 	b.w	9ae8 <__tVZFilterBell_setGain_veneer>
    6cec:	42480000 	.word	0x42480000
    6cf0:	2001c864 	.word	0x2001c864
    6cf4:	f3af 8000 	nop.w
    6cf8:	f3af 8000 	nop.w
    6cfc:	f3af 8000 	nop.w

00006d00 <VZlowshelfSetGain>:
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d00:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6d04:	ed9f 7a09 	vldr	s14, [pc, #36]	; 6d2c <VZlowshelfSetGain+0x2c>
{
    6d08:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d0a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    6d0e:	4605      	mov	r5, r0
    6d10:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d12:	eeb0 0a67 	vmov.f32	s0, s15
    6d16:	f002 fea7 	bl	9a68 <__dbToATableLookup_veneer>
    6d1a:	4b05      	ldr	r3, [pc, #20]	; (6d30 <VZlowshelfSetGain+0x30>)
    6d1c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6d20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&VZfilterLS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d28:	f002 bf32 	b.w	9b90 <__tVZFilterLS_setGain_veneer>
    6d2c:	42480000 	.word	0x42480000
    6d30:	2001c854 	.word	0x2001c854
    6d34:	f3af 8000 	nop.w
    6d38:	f3af 8000 	nop.w
    6d3c:	f3af 8000 	nop.w

00006d40 <VZhighshelfSetGain>:
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d40:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    6d44:	ed9f 7a09 	vldr	s14, [pc, #36]	; 6d6c <VZhighshelfSetGain+0x2c>
{
    6d48:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d4a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    6d4e:	4605      	mov	r5, r0
    6d50:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d52:	eeb0 0a67 	vmov.f32	s0, s15
    6d56:	f002 fe87 	bl	9a68 <__dbToATableLookup_veneer>
    6d5a:	4b05      	ldr	r3, [pc, #20]	; (6d70 <VZhighshelfSetGain+0x30>)
    6d5c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6d60:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    6d64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&VZfilterHS[v][string], dbToATableLookup((gain * 50.f) - 25.f));
    6d68:	f002 bec6 	b.w	9af8 <__tVZFilterHS_setGain_veneer>
    6d6c:	42480000 	.word	0x42480000
    6d70:	2001c844 	.word	0x2001c844
    6d74:	f3af 8000 	nop.w
    6d78:	f3af 8000 	nop.w
    6d7c:	f3af 8000 	nop.w

00006d80 <VZbandrejectSetGain>:
    6d80:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6d84:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6d88:	b538      	push	{r3, r4, r5, lr}
    6d8a:	eee0 7a07 	vfma.f32	s15, s0, s14
    6d8e:	4605      	mov	r5, r0
    6d90:	460c      	mov	r4, r1
    6d92:	eeb0 0a67 	vmov.f32	s0, s15
    6d96:	f002 fe67 	bl	9a68 <__dbToATableLookup_veneer>
    6d9a:	4b04      	ldr	r3, [pc, #16]	; (6dac <VZbandrejectSetGain+0x2c>)
    6d9c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6da0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6da4:	ed83 0a00 	vstr	s0, [r3]
    6da8:	bd38      	pop	{r3, r4, r5, pc}
    6daa:	bf00      	nop
    6dac:	2001cb08 	.word	0x2001cb08
    6db0:	f3af 8000 	nop.w
    6db4:	f3af 8000 	nop.w
    6db8:	f3af 8000 	nop.w
    6dbc:	f3af 8000 	nop.w

00006dc0 <LadderLowpassSetGain>:
    6dc0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    6dc4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
    6dc8:	b538      	push	{r3, r4, r5, lr}
    6dca:	eee0 7a07 	vfma.f32	s15, s0, s14
    6dce:	4605      	mov	r5, r0
    6dd0:	460c      	mov	r4, r1
    6dd2:	eeb0 0a67 	vmov.f32	s0, s15
    6dd6:	f002 fe47 	bl	9a68 <__dbToATableLookup_veneer>
    6dda:	4b04      	ldr	r3, [pc, #16]	; (6dec <LadderLowpassSetGain+0x2c>)
    6ddc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    6de0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    6de4:	ed83 0a00 	vstr	s0, [r3]
    6de8:	bd38      	pop	{r3, r4, r5, pc}
    6dea:	bf00      	nop
    6dec:	2001cb08 	.word	0x2001cb08
    6df0:	f3af 8000 	nop.w
    6df4:	f3af 8000 	nop.w
    6df8:	f3af 8000 	nop.w
    6dfc:	f3af 8000 	nop.w

00006e00 <envelope_tick>:
{
    6e00:	b538      	push	{r3, r4, r5, lr}
		if (envOn[v])
    6e02:	4d1d      	ldr	r5, [pc, #116]	; (6e78 <envelope_tick+0x78>)
{
    6e04:	4604      	mov	r4, r0
		if (envOn[v])
    6e06:	782b      	ldrb	r3, [r5, #0]
    6e08:	bb53      	cbnz	r3, 6e60 <envelope_tick+0x60>
    6e0a:	786b      	ldrb	r3, [r5, #1]
    6e0c:	b9e3      	cbnz	r3, 6e48 <envelope_tick+0x48>
    6e0e:	78ab      	ldrb	r3, [r5, #2]
    6e10:	b973      	cbnz	r3, 6e30 <envelope_tick+0x30>
    6e12:	78eb      	ldrb	r3, [r5, #3]
    6e14:	b903      	cbnz	r3, 6e18 <envelope_tick+0x18>
}
    6e16:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    6e18:	4b18      	ldr	r3, [pc, #96]	; (6e7c <envelope_tick+0x7c>)
    6e1a:	1da0      	adds	r0, r4, #6
    6e1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e20:	f002 fd26 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    6e24:	4b16      	ldr	r3, [pc, #88]	; (6e80 <envelope_tick+0x80>)
    6e26:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e2a:	ed83 0a2e 	vstr	s0, [r3, #184]	; 0xb8
}
    6e2e:	bd38      	pop	{r3, r4, r5, pc}
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    6e30:	4b12      	ldr	r3, [pc, #72]	; (6e7c <envelope_tick+0x7c>)
    6e32:	1d20      	adds	r0, r4, #4
    6e34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e38:	f002 fd1a 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    6e3c:	4b10      	ldr	r3, [pc, #64]	; (6e80 <envelope_tick+0x80>)
    6e3e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e42:	ed83 0a2c 	vstr	s0, [r3, #176]	; 0xb0
    6e46:	e7e4      	b.n	6e12 <envelope_tick+0x12>
    6e48:	4b0c      	ldr	r3, [pc, #48]	; (6e7c <envelope_tick+0x7c>)
    6e4a:	1ca0      	adds	r0, r4, #2
    6e4c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6e50:	f002 fd0e 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    6e54:	4b0a      	ldr	r3, [pc, #40]	; (6e80 <envelope_tick+0x80>)
    6e56:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e5a:	ed83 0a2a 	vstr	s0, [r3, #168]	; 0xa8
    6e5e:	e7d6      	b.n	6e0e <envelope_tick+0xe>
    6e60:	4806      	ldr	r0, [pc, #24]	; (6e7c <envelope_tick+0x7c>)
    6e62:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    6e66:	f002 fd03 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    6e6a:	4b05      	ldr	r3, [pc, #20]	; (6e80 <envelope_tick+0x80>)
    6e6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    6e70:	ed83 0a28 	vstr	s0, [r3, #160]	; 0xa0
    6e74:	e7c9      	b.n	6e0a <envelope_tick+0xa>
    6e76:	bf00      	nop
    6e78:	2001cab4 	.word	0x2001cab4
    6e7c:	2001cab8 	.word	0x2001cab8
    6e80:	2001d0f0 	.word	0x2001d0f0
    6e84:	f3af 8000 	nop.w
    6e88:	f3af 8000 	nop.w
    6e8c:	f3af 8000 	nop.w
    6e90:	f3af 8000 	nop.w
    6e94:	f3af 8000 	nop.w
    6e98:	f3af 8000 	nop.w
    6e9c:	f3af 8000 	nop.w

00006ea0 <lfo_tick>:
{
    6ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ea4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 6ef4 <lfo_tick+0x54>
    6ea8:	b082      	sub	sp, #8
    6eaa:	4d10      	ldr	r5, [pc, #64]	; (6eec <lfo_tick+0x4c>)
    6eac:	4607      	mov	r7, r0
    6eae:	4e10      	ldr	r6, [pc, #64]	; (6ef0 <lfo_tick+0x50>)
    6eb0:	f108 0904 	add.w	r9, r8, #4
    6eb4:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    6eb8:	4644      	mov	r4, r8
			float sample = 0.0f;
    6eba:	f04f 0a00 	mov.w	sl, #0
    6ebe:	eba4 0108 	sub.w	r1, r4, r8
		if (lfoOn[i])
    6ec2:	f814 3b01 	ldrb.w	r3, [r4], #1
			lfoShapeTick[i](&sample,i, string);
    6ec6:	463a      	mov	r2, r7
    6ec8:	a801      	add	r0, sp, #4
		if (lfoOn[i])
    6eca:	b133      	cbz	r3, 6eda <lfo_tick+0x3a>
			lfoShapeTick[i](&sample,i, string);
    6ecc:	6833      	ldr	r3, [r6, #0]
			float sample = 0.0f;
    6ece:	f8cd a004 	str.w	sl, [sp, #4]
			lfoShapeTick[i](&sample,i, string);
    6ed2:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    6ed4:	9b01      	ldr	r3, [sp, #4]
    6ed6:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    6eda:	454c      	cmp	r4, r9
    6edc:	f106 0604 	add.w	r6, r6, #4
    6ee0:	f105 0508 	add.w	r5, r5, #8
    6ee4:	d1eb      	bne.n	6ebe <lfo_tick+0x1e>
}
    6ee6:	b002      	add	sp, #8
    6ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6eec:	2001d0f0 	.word	0x2001d0f0
    6ef0:	2001cc9c 	.word	0x2001cc9c
    6ef4:	2001cc38 	.word	0x2001cc38
    6ef8:	f3af 8000 	nop.w
    6efc:	f3af 8000 	nop.w

00006f00 <setEnvelopeAttack>:
	a = a + 0.001f;
    6f00:	eddf 7a05 	vldr	s15, [pc, #20]	; 6f18 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
    6f04:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f08:	4b04      	ldr	r3, [pc, #16]	; (6f1c <setEnvelopeAttack+0x1c>)
    6f0a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6f0e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f12:	f002 bdfd 	b.w	9b10 <__tADSRT_setAttack_veneer>
    6f16:	bf00      	nop
    6f18:	3a83126f 	.word	0x3a83126f
    6f1c:	2001cab8 	.word	0x2001cab8

00006f20 <setEnvelopeDecay>:
	d = d + 0.001f;
    6f20:	eddf 7a05 	vldr	s15, [pc, #20]	; 6f38 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
    6f24:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f28:	4b04      	ldr	r3, [pc, #16]	; (6f3c <setEnvelopeDecay+0x1c>)
    6f2a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6f2e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f32:	f002 bd35 	b.w	99a0 <__tADSRT_setDecay_veneer>
    6f36:	bf00      	nop
    6f38:	3a83126f 	.word	0x3a83126f
    6f3c:	2001cab8 	.word	0x2001cab8

00006f40 <setEnvelopeSustain>:
	tADSRT_setSustain(&envs[v][string], s);
    6f40:	4b03      	ldr	r3, [pc, #12]	; (6f50 <setEnvelopeSustain+0x10>)
    6f42:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f46:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f4a:	f002 bcc1 	b.w	98d0 <__tADSRT_setSustain_veneer>
    6f4e:	bf00      	nop
    6f50:	2001cab8 	.word	0x2001cab8
    6f54:	f3af 8000 	nop.w
    6f58:	f3af 8000 	nop.w
    6f5c:	f3af 8000 	nop.w

00006f60 <setEnvelopeRelease>:
	r = r + 0.001f;
    6f60:	eddf 7a05 	vldr	s15, [pc, #20]	; 6f78 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
    6f64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f68:	4b04      	ldr	r3, [pc, #16]	; (6f7c <setEnvelopeRelease+0x1c>)
    6f6a:	ee30 0a27 	vadd.f32	s0, s0, s15
    6f6e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f72:	f002 bc29 	b.w	97c8 <__tADSRT_setRelease_veneer>
    6f76:	bf00      	nop
    6f78:	3a83126f 	.word	0x3a83126f
    6f7c:	2001cab8 	.word	0x2001cab8

00006f80 <setEnvelopeLeak>:
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
    6f80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    6f84:	eddf 6a08 	vldr	s13, [pc, #32]	; 6fa8 <setEnvelopeLeak+0x28>
    6f88:	ed9f 7a08 	vldr	s14, [pc, #32]	; 6fac <setEnvelopeLeak+0x2c>
    6f8c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6f90:	4b07      	ldr	r3, [pc, #28]	; (6fb0 <setEnvelopeLeak+0x30>)
    6f92:	ee77 7ac0 	vsub.f32	s15, s15, s0
    6f96:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    6f9a:	eea7 7aa6 	vfma.f32	s14, s15, s13
    6f9e:	eeb0 0a47 	vmov.f32	s0, s14
    6fa2:	f002 bdf1 	b.w	9b88 <__tADSRT_setLeakFactor_veneer>
    6fa6:	bf00      	nop
    6fa8:	3851b717 	.word	0x3851b717
    6fac:	3f7ffcb9 	.word	0x3f7ffcb9
    6fb0:	2001cab8 	.word	0x2001cab8
    6fb4:	f3af 8000 	nop.w
    6fb8:	f3af 8000 	nop.w
    6fbc:	f3af 8000 	nop.w

00006fc0 <setAmp>:
	amplitude[string] = amp;
    6fc0:	4b02      	ldr	r3, [pc, #8]	; (6fcc <setAmp+0xc>)
    6fc2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6fc6:	ed81 0a00 	vstr	s0, [r1]
}
    6fca:	4770      	bx	lr
    6fcc:	2001c874 	.word	0x2001c874
    6fd0:	f3af 8000 	nop.w
    6fd4:	f3af 8000 	nop.w
    6fd8:	f3af 8000 	nop.w
    6fdc:	f3af 8000 	nop.w

00006fe0 <setMaster>:
	finalMaster[string] = amp;
    6fe0:	4b02      	ldr	r3, [pc, #8]	; (6fec <setMaster+0xc>)
    6fe2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    6fe6:	ed81 0a00 	vstr	s0, [r1]
}
    6fea:	4770      	bx	lr
    6fec:	2001cb28 	.word	0x2001cb28
    6ff0:	f3af 8000 	nop.w
    6ff4:	f3af 8000 	nop.w
    6ff8:	f3af 8000 	nop.w
    6ffc:	f3af 8000 	nop.w

00007000 <setTranspose>:
	transpose = in;
    7000:	4b01      	ldr	r3, [pc, #4]	; (7008 <setTranspose+0x8>)
    7002:	ed83 0a00 	vstr	s0, [r3]
}
    7006:	4770      	bx	lr
    7008:	2001d26c 	.word	0x2001d26c
    700c:	f3af 8000 	nop.w
    7010:	f3af 8000 	nop.w
    7014:	f3af 8000 	nop.w
    7018:	f3af 8000 	nop.w
    701c:	f3af 8000 	nop.w

00007020 <setPitchBendRange>:
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
    7020:	eddf 7a03 	vldr	s15, [pc, #12]	; 7030 <setPitchBendRange+0x10>
    7024:	4b03      	ldr	r3, [pc, #12]	; (7034 <setPitchBendRange+0x14>)
    7026:	ee20 0a27 	vmul.f32	s0, s0, s15
    702a:	ed83 0a00 	vstr	s0, [r3]
}
    702e:	4770      	bx	lr
    7030:	39000200 	.word	0x39000200
    7034:	20000898 	.word	0x20000898
    7038:	f3af 8000 	nop.w
    703c:	f3af 8000 	nop.w

00007040 <setFinalLowpass>:
	tSVF_setFreqFast(&finalLowpass[string], in);
    7040:	4802      	ldr	r0, [pc, #8]	; (704c <setFinalLowpass+0xc>)
    7042:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7046:	f002 bb9b 	b.w	9780 <__tSVF_setFreqFast_veneer>
    704a:	bf00      	nop
    704c:	2001cb20 	.word	0x2001cb20
    7050:	f3af 8000 	nop.w
    7054:	f3af 8000 	nop.w
    7058:	f3af 8000 	nop.w
    705c:	f3af 8000 	nop.w

00007060 <tickMappings>:
{
    7060:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int i = 0; i < numMappings; i++)
    7064:	f8df 915c 	ldr.w	r9, [pc, #348]	; 71c4 <tickMappings+0x164>
	interruptChecker = 0;
    7068:	f04f 0b00 	mov.w	fp, #0
    706c:	4b51      	ldr	r3, [pc, #324]	; (71b4 <tickMappings+0x154>)
	for (int i = 0; i < numMappings; i++)
    706e:	f899 2000 	ldrb.w	r2, [r9]
{
    7072:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
    7076:	f883 b000 	strb.w	fp, [r3]
	for (int i = 0; i < numMappings; i++)
    707a:	2a00      	cmp	r2, #0
    707c:	f000 8087 	beq.w	718e <tickMappings+0x12e>
    7080:	4c4d      	ldr	r4, [pc, #308]	; (71b8 <tickMappings+0x158>)
			for (int v = 0; v < numStringsThisBoard; v++)
    7082:	f8df 8144 	ldr.w	r8, [pc, #324]	; 71c8 <tickMappings+0x168>
    7086:	e004      	b.n	7092 <tickMappings+0x32>
	for (int i = 0; i < numMappings; i++)
    7088:	f10b 0b01 	add.w	fp, fp, #1
    708c:	344c      	adds	r4, #76	; 0x4c
    708e:	455a      	cmp	r2, fp
    7090:	dd7d      	ble.n	718e <tickMappings+0x12e>
		if (mappings[i].destNumber != 255)
    7092:	f814 3c08 	ldrb.w	r3, [r4, #-8]
    7096:	2bff      	cmp	r3, #255	; 0xff
    7098:	d0f6      	beq.n	7088 <tickMappings+0x28>
			for (int v = 0; v < numStringsThisBoard; v++)
    709a:	f898 3000 	ldrb.w	r3, [r8]
    709e:	2b00      	cmp	r3, #0
    70a0:	d0f2      	beq.n	7088 <tickMappings+0x28>
    70a2:	4b46      	ldr	r3, [pc, #280]	; (71bc <tickMappings+0x15c>)
    70a4:	4626      	mov	r6, r4
    70a6:	2500      	movs	r5, #0
    70a8:	eb03 07cb 	add.w	r7, r3, fp, lsl #3
					if (mappings[i].hookActive[j])
    70ac:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
    70b0:	2b00      	cmp	r3, #0
    70b2:	d070      	beq.n	7196 <tickMappings+0x136>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    70b4:	6832      	ldr	r2, [r6, #0]
    70b6:	69f3      	ldr	r3, [r6, #28]
    70b8:	ed92 8a00 	vldr	s16, [r2]
    70bc:	ed93 7a00 	vldr	s14, [r3]
    70c0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
    70c4:	ee28 8a07 	vmul.f32	s16, s16, s14
						if (mappings[i].sourceSmoothed[j])
    70c8:	7e21      	ldrb	r1, [r4, #24]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    70ca:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (mappings[i].sourceSmoothed[j])
    70ce:	2900      	cmp	r1, #0
    70d0:	d069      	beq.n	71a6 <tickMappings+0x146>
							smoothedValue += sum;
    70d2:	eef0 7a48 	vmov.f32	s15, s16
				float unsmoothedValue = 0.0f;
    70d6:	ed9f 8a3a 	vldr	s16, [pc, #232]	; 71c0 <tickMappings+0x160>
					if (mappings[i].hookActive[j])
    70da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    70de:	b183      	cbz	r3, 7102 <tickMappings+0xa2>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    70e0:	68b2      	ldr	r2, [r6, #8]
    70e2:	6a73      	ldr	r3, [r6, #36]	; 0x24
    70e4:	ed92 7a00 	vldr	s14, [r2]
    70e8:	ed93 6a00 	vldr	s12, [r3]
    70ec:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
    70f0:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    70f4:	7e61      	ldrb	r1, [r4, #25]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    70f6:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    70fa:	2900      	cmp	r1, #0
    70fc:	d156      	bne.n	71ac <tickMappings+0x14c>
							unsmoothedValue += sum;
    70fe:	ee38 8a07 	vadd.f32	s16, s16, s14
					if (mappings[i].hookActive[j])
    7102:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
    7106:	b183      	cbz	r3, 712a <tickMappings+0xca>
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    7108:	6932      	ldr	r2, [r6, #16]
    710a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    710c:	ed92 7a00 	vldr	s14, [r2]
    7110:	ed93 6a00 	vldr	s12, [r3]
    7114:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    7118:	ee27 7a06 	vmul.f32	s14, s14, s12
						if (mappings[i].sourceSmoothed[j])
    711c:	7ea1      	ldrb	r1, [r4, #26]
						float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
    711e:	ee27 7a26 	vmul.f32	s14, s14, s13
						if (mappings[i].sourceSmoothed[j])
    7122:	2900      	cmp	r1, #0
    7124:	d13c      	bne.n	71a0 <tickMappings+0x140>
							unsmoothedValue += sum;
    7126:	ee38 8a07 	vadd.f32	s16, s16, s14
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    712a:	f854 3c04 	ldr.w	r3, [r4, #-4]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    712e:	4638      	mov	r0, r7
			for (int v = 0; v < numStringsThisBoard; v++)
    7130:	3604      	adds	r6, #4
				smoothedValue += mappings[i].dest->zeroToOneVal[v];
    7132:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7136:	ed93 0a00 	vldr	s0, [r3]
				tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
    713a:	ee37 0a80 	vadd.f32	s0, s15, s0
    713e:	f002 fba3 	bl	9888 <__tExpSmooth_setDest_veneer>
				smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
    7142:	4638      	mov	r0, r7
    7144:	f002 fc64 	bl	9a10 <__tExpSmooth_tick_veneer>
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    7148:	f854 ac04 	ldr.w	sl, [r4, #-4]
    714c:	ee30 0a08 	vadd.f32	s0, s0, s16
			for (int v = 0; v < numStringsThisBoard; v++)
    7150:	3704      	adds	r7, #4
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    7152:	f8da 3010 	ldr.w	r3, [sl, #16]
    7156:	4798      	blx	r3
    7158:	1cab      	adds	r3, r5, #2
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    715a:	4629      	mov	r1, r5
			for (int v = 0; v < numStringsThisBoard; v++)
    715c:	3501      	adds	r5, #1
				mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
    715e:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
    7162:	ed82 0a00 	vstr	s0, [r2]
				mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
    7166:	f854 0c04 	ldr.w	r0, [r4, #-4]
    716a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
    716e:	6942      	ldr	r2, [r0, #20]
    7170:	7e00      	ldrb	r0, [r0, #24]
    7172:	ed93 0a00 	vldr	s0, [r3]
    7176:	4790      	blx	r2
			for (int v = 0; v < numStringsThisBoard; v++)
    7178:	f898 3000 	ldrb.w	r3, [r8]
    717c:	42ab      	cmp	r3, r5
    717e:	dc95      	bgt.n	70ac <tickMappings+0x4c>
	for (int i = 0; i < numMappings; i++)
    7180:	f899 2000 	ldrb.w	r2, [r9]
    7184:	f10b 0b01 	add.w	fp, fp, #1
    7188:	344c      	adds	r4, #76	; 0x4c
    718a:	455a      	cmp	r2, fp
    718c:	dc81      	bgt.n	7092 <tickMappings+0x32>
}
    718e:	ecbd 8b02 	vpop	{d8}
    7192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				float smoothedValue = 0.0f;
    7196:	eddf 7a0a 	vldr	s15, [pc, #40]	; 71c0 <tickMappings+0x160>
				float unsmoothedValue = 0.0f;
    719a:	eeb0 8a67 	vmov.f32	s16, s15
    719e:	e79c      	b.n	70da <tickMappings+0x7a>
							smoothedValue += sum;
    71a0:	ee77 7a87 	vadd.f32	s15, s15, s14
    71a4:	e7c1      	b.n	712a <tickMappings+0xca>
				float smoothedValue = 0.0f;
    71a6:	eddf 7a06 	vldr	s15, [pc, #24]	; 71c0 <tickMappings+0x160>
    71aa:	e796      	b.n	70da <tickMappings+0x7a>
							smoothedValue += sum;
    71ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    71b0:	e7a7      	b.n	7102 <tickMappings+0xa2>
    71b2:	bf00      	nop
    71b4:	200161fb 	.word	0x200161fb
    71b8:	20018238 	.word	0x20018238
    71bc:	2001cd1c 	.word	0x2001cd1c
    71c0:	00000000 	.word	0x00000000
    71c4:	20018bbc 	.word	0x20018bbc
    71c8:	200004b1 	.word	0x200004b1
    71cc:	f3af 8000 	nop.w
    71d0:	f3af 8000 	nop.w
    71d4:	f3af 8000 	nop.w
    71d8:	f3af 8000 	nop.w
    71dc:	f3af 8000 	nop.w

000071e0 <lfoSawSquareTick>:
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    71e0:	4b05      	ldr	r3, [pc, #20]	; (71f8 <lfoSawSquareTick+0x18>)
    71e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    71e6:	b510      	push	{r4, lr}
    71e8:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
    71ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    71ee:	f002 fb57 	bl	98a0 <__tSawSquareLFO_tick_veneer>
    71f2:	ed84 0a00 	vstr	s0, [r4]
}
    71f6:	bd10      	pop	{r4, pc}
    71f8:	2001cc7c 	.word	0x2001cc7c
    71fc:	f3af 8000 	nop.w

00007200 <lfoSineTriTick>:
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    7200:	4b05      	ldr	r3, [pc, #20]	; (7218 <lfoSineTriTick+0x18>)
    7202:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7206:	b510      	push	{r4, lr}
    7208:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
    720a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    720e:	f002 fb87 	bl	9920 <__tSineTriLFO_tick_veneer>
    7212:	ed84 0a00 	vstr	s0, [r4]
}
    7216:	bd10      	pop	{r4, pc}
    7218:	2001cccc 	.word	0x2001cccc
    721c:	f3af 8000 	nop.w

00007220 <lfoSineTick>:
    *sample = tCycle_tick(&lfoSine[v][string]);
    7220:	4b05      	ldr	r3, [pc, #20]	; (7238 <lfoSineTick+0x18>)
    7222:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7226:	b510      	push	{r4, lr}
    7228:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
    722a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    722e:	f002 fcf7 	bl	9c20 <__tCycle_tick_veneer>
    7232:	ed84 0a00 	vstr	s0, [r4]
}
    7236:	bd10      	pop	{r4, pc}
    7238:	2001ccac 	.word	0x2001ccac
    723c:	f3af 8000 	nop.w

00007240 <lfoTriTick>:
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    7240:	4b05      	ldr	r3, [pc, #20]	; (7258 <lfoTriTick+0x18>)
    7242:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7246:	b510      	push	{r4, lr}
    7248:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
    724a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    724e:	f002 fb7b 	bl	9948 <__tTriLFO_tick_veneer>
    7252:	ed84 0a00 	vstr	s0, [r4]
}
    7256:	bd10      	pop	{r4, pc}
    7258:	2001ccec 	.word	0x2001ccec
    725c:	f3af 8000 	nop.w

00007260 <lfoSawTick>:
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    7260:	4b08      	ldr	r3, [pc, #32]	; (7284 <lfoSawTick+0x24>)
    7262:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    7266:	b510      	push	{r4, lr}
    7268:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
    726a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    726e:	f002 fae3 	bl	9838 <__tIntPhasor_tick_veneer>
    7272:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    7276:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    727a:	eee0 7a07 	vfma.f32	s15, s0, s14
    727e:	edc4 7a00 	vstr	s15, [r4]
}
    7282:	bd10      	pop	{r4, pc}
    7284:	2001cc5c 	.word	0x2001cc5c
    7288:	f3af 8000 	nop.w
    728c:	f3af 8000 	nop.w
    7290:	f3af 8000 	nop.w
    7294:	f3af 8000 	nop.w
    7298:	f3af 8000 	nop.w
    729c:	f3af 8000 	nop.w

000072a0 <lfoPulseTick>:
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    72a0:	4b05      	ldr	r3, [pc, #20]	; (72b8 <lfoPulseTick+0x18>)
    72a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
    72a6:	b510      	push	{r4, lr}
    72a8:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
    72aa:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    72ae:	f002 fc7b 	bl	9ba8 <__tSquareLFO_tick_veneer>
    72b2:	ed84 0a00 	vstr	s0, [r4]
}
    72b6:	bd10      	pop	{r4, pc}
    72b8:	2001cc3c 	.word	0x2001cc3c
    72bc:	f3af 8000 	nop.w

000072c0 <lfoSawSquareSetRate>:
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
    72c0:	4b03      	ldr	r3, [pc, #12]	; (72d0 <lfoSawSquareSetRate+0x10>)
    72c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    72ca:	f002 bc45 	b.w	9b58 <__tSawSquareLFO_setFreq_veneer>
    72ce:	bf00      	nop
    72d0:	2001cc7c 	.word	0x2001cc7c
    72d4:	f3af 8000 	nop.w
    72d8:	f3af 8000 	nop.w
    72dc:	f3af 8000 	nop.w

000072e0 <lfoSineTriSetRate>:
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
    72e0:	4b03      	ldr	r3, [pc, #12]	; (72f0 <lfoSineTriSetRate+0x10>)
    72e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    72e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    72ea:	f002 bbe9 	b.w	9ac0 <__tSineTriLFO_setFreq_veneer>
    72ee:	bf00      	nop
    72f0:	2001cccc 	.word	0x2001cccc
    72f4:	f3af 8000 	nop.w
    72f8:	f3af 8000 	nop.w
    72fc:	f3af 8000 	nop.w

00007300 <lfoSineSetRate>:
	tCycle_setFreq(&lfoSine[v][string], r);
    7300:	4b03      	ldr	r3, [pc, #12]	; (7310 <lfoSineSetRate+0x10>)
    7302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    730a:	f002 ba65 	b.w	97d8 <__tCycle_setFreq_veneer>
    730e:	bf00      	nop
    7310:	2001ccac 	.word	0x2001ccac
    7314:	f3af 8000 	nop.w
    7318:	f3af 8000 	nop.w
    731c:	f3af 8000 	nop.w

00007320 <lfoTriSetRate>:
	tTriLFO_setFreq(&lfoTri[v][string], r);
    7320:	4b03      	ldr	r3, [pc, #12]	; (7330 <lfoTriSetRate+0x10>)
    7322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    732a:	f002 ba59 	b.w	97e0 <__tTriLFO_setFreq_veneer>
    732e:	bf00      	nop
    7330:	2001ccec 	.word	0x2001ccec
    7334:	f3af 8000 	nop.w
    7338:	f3af 8000 	nop.w
    733c:	f3af 8000 	nop.w

00007340 <lfoSawSetRate>:
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
    7340:	4b03      	ldr	r3, [pc, #12]	; (7350 <lfoSawSetRate+0x10>)
    7342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    734a:	f002 bb85 	b.w	9a58 <__tIntPhasor_setFreq_veneer>
    734e:	bf00      	nop
    7350:	2001cc5c 	.word	0x2001cc5c
    7354:	f3af 8000 	nop.w
    7358:	f3af 8000 	nop.w
    735c:	f3af 8000 	nop.w

00007360 <lfoPulseSetRate>:
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
    7360:	4b03      	ldr	r3, [pc, #12]	; (7370 <lfoPulseSetRate+0x10>)
    7362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    736a:	f002 ba91 	b.w	9890 <__tSquareLFO_setFreq_veneer>
    736e:	bf00      	nop
    7370:	2001cc3c 	.word	0x2001cc3c
    7374:	f3af 8000 	nop.w
    7378:	f3af 8000 	nop.w
    737c:	f3af 8000 	nop.w

00007380 <lfoSawSquareSetPhase>:
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
    7380:	4b03      	ldr	r3, [pc, #12]	; (7390 <lfoSawSquareSetPhase+0x10>)
    7382:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7386:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    738a:	f002 bb25 	b.w	99d8 <__tSawSquareLFO_setPhase_veneer>
    738e:	bf00      	nop
    7390:	2001cc7c 	.word	0x2001cc7c
    7394:	f3af 8000 	nop.w
    7398:	f3af 8000 	nop.w
    739c:	f3af 8000 	nop.w

000073a0 <lfoSineTriSetPhase>:
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
    73a0:	4b03      	ldr	r3, [pc, #12]	; (73b0 <lfoSineTriSetPhase+0x10>)
    73a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    73a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    73aa:	f002 bc49 	b.w	9c40 <__tSineTriLFO_setPhase_veneer>
    73ae:	bf00      	nop
    73b0:	2001cccc 	.word	0x2001cccc
    73b4:	f3af 8000 	nop.w
    73b8:	f3af 8000 	nop.w
    73bc:	f3af 8000 	nop.w

000073c0 <lfoSineSetPhase>:
	tCycle_setPhase(&lfoSine[v][string],p);
    73c0:	4b03      	ldr	r3, [pc, #12]	; (73d0 <lfoSineSetPhase+0x10>)
    73c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    73c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    73ca:	f002 bc2d 	b.w	9c28 <__tCycle_setPhase_veneer>
    73ce:	bf00      	nop
    73d0:	2001ccac 	.word	0x2001ccac
    73d4:	f3af 8000 	nop.w
    73d8:	f3af 8000 	nop.w
    73dc:	f3af 8000 	nop.w

000073e0 <lfoTriSetPhase>:
	tTriLFO_setPhase(&lfoTri[v][string],p);
    73e0:	4b03      	ldr	r3, [pc, #12]	; (73f0 <lfoTriSetPhase+0x10>)
    73e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    73e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    73ea:	f002 ba39 	b.w	9860 <__tTriLFO_setPhase_veneer>
    73ee:	bf00      	nop
    73f0:	2001ccec 	.word	0x2001ccec
    73f4:	f3af 8000 	nop.w
    73f8:	f3af 8000 	nop.w
    73fc:	f3af 8000 	nop.w

00007400 <lfoSawSetPhase>:
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
    7400:	4b03      	ldr	r3, [pc, #12]	; (7410 <lfoSawSetPhase+0x10>)
    7402:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7406:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    740a:	f002 bb31 	b.w	9a70 <__tIntPhasor_setPhase_veneer>
    740e:	bf00      	nop
    7410:	2001cc5c 	.word	0x2001cc5c
    7414:	f3af 8000 	nop.w
    7418:	f3af 8000 	nop.w
    741c:	f3af 8000 	nop.w

00007420 <lfoPulseSetPhase>:
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
    7420:	4b03      	ldr	r3, [pc, #12]	; (7430 <lfoPulseSetPhase+0x10>)
    7422:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7426:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    742a:	f002 baa1 	b.w	9970 <__tSquareLFO_setPhase_veneer>
    742e:	bf00      	nop
    7430:	2001cc3c 	.word	0x2001cc3c
    7434:	f3af 8000 	nop.w
    7438:	f3af 8000 	nop.w
    743c:	f3af 8000 	nop.w

00007440 <lfoSawSquareSetShape>:
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
    7440:	4b03      	ldr	r3, [pc, #12]	; (7450 <lfoSawSquareSetShape+0x10>)
    7442:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7446:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    744a:	f002 bbcd 	b.w	9be8 <__tSawSquareLFO_setShape_veneer>
    744e:	bf00      	nop
    7450:	2001cc7c 	.word	0x2001cc7c
    7454:	f3af 8000 	nop.w
    7458:	f3af 8000 	nop.w
    745c:	f3af 8000 	nop.w

00007460 <lfoSineTriSetShape>:
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
    7460:	4b03      	ldr	r3, [pc, #12]	; (7470 <lfoSineTriSetShape+0x10>)
    7462:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7466:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    746a:	f002 ba75 	b.w	9958 <__tSineTriLFO_setShape_veneer>
    746e:	bf00      	nop
    7470:	2001cccc 	.word	0x2001cccc
    7474:	f3af 8000 	nop.w
    7478:	f3af 8000 	nop.w
    747c:	f3af 8000 	nop.w

00007480 <lfoSineSetShape>:
}
    7480:	4770      	bx	lr
    7482:	bf00      	nop
    7484:	f3af 8000 	nop.w
    7488:	f3af 8000 	nop.w
    748c:	f3af 8000 	nop.w
    7490:	f3af 8000 	nop.w
    7494:	f3af 8000 	nop.w
    7498:	f3af 8000 	nop.w
    749c:	f3af 8000 	nop.w

000074a0 <lfoTriSetShape>:
    74a0:	4770      	bx	lr
    74a2:	bf00      	nop
    74a4:	f3af 8000 	nop.w
    74a8:	f3af 8000 	nop.w
    74ac:	f3af 8000 	nop.w
    74b0:	f3af 8000 	nop.w
    74b4:	f3af 8000 	nop.w
    74b8:	f3af 8000 	nop.w
    74bc:	f3af 8000 	nop.w

000074c0 <lfoSawSetShape>:
    74c0:	4770      	bx	lr
    74c2:	bf00      	nop
    74c4:	f3af 8000 	nop.w
    74c8:	f3af 8000 	nop.w
    74cc:	f3af 8000 	nop.w
    74d0:	f3af 8000 	nop.w
    74d4:	f3af 8000 	nop.w
    74d8:	f3af 8000 	nop.w
    74dc:	f3af 8000 	nop.w

000074e0 <lfoPulseSetShape>:
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
    74e0:	4b03      	ldr	r3, [pc, #12]	; (74f0 <lfoPulseSetShape+0x10>)
    74e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    74e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    74ea:	f002 ba1d 	b.w	9928 <__tSquareLFO_setPulseWidth_veneer>
    74ee:	bf00      	nop
    74f0:	2001cc3c 	.word	0x2001cc3c
    74f4:	f3af 8000 	nop.w
    74f8:	f3af 8000 	nop.w
    74fc:	f3af 8000 	nop.w

00007500 <clipperGainSet>:
	param1[v][string] = dbToATableLookup(value * 24.0f);
    7500:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
    7504:	b538      	push	{r3, r4, r5, lr}
    7506:	4605      	mov	r5, r0
    7508:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 24.0f);
    750a:	ee20 0a27 	vmul.f32	s0, s0, s15
    750e:	f002 faab 	bl	9a68 <__dbToATableLookup_veneer>
    7512:	4b04      	ldr	r3, [pc, #16]	; (7524 <clipperGainSet+0x24>)
    7514:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7518:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    751c:	ed83 0a00 	vstr	s0, [r3]
}
    7520:	bd38      	pop	{r3, r4, r5, pc}
    7522:	bf00      	nop
    7524:	2001cf0c 	.word	0x2001cf0c
    7528:	f3af 8000 	nop.w
    752c:	f3af 8000 	nop.w
    7530:	f3af 8000 	nop.w
    7534:	f3af 8000 	nop.w
    7538:	f3af 8000 	nop.w
    753c:	f3af 8000 	nop.w

00007540 <wavefolderParam1>:
	param1[v][string] = dbToATableLookup(value * 12.0f);
    7540:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
    7544:	b538      	push	{r3, r4, r5, lr}
    7546:	4605      	mov	r5, r0
    7548:	460c      	mov	r4, r1
	param1[v][string] = dbToATableLookup(value * 12.0f);
    754a:	ee20 0a27 	vmul.f32	s0, s0, s15
    754e:	f002 fa8b 	bl	9a68 <__dbToATableLookup_veneer>
    7552:	4b04      	ldr	r3, [pc, #16]	; (7564 <wavefolderParam1+0x24>)
    7554:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7558:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    755c:	ed83 0a00 	vstr	s0, [r3]
}
    7560:	bd38      	pop	{r3, r4, r5, pc}
    7562:	bf00      	nop
    7564:	2001cf0c 	.word	0x2001cf0c
    7568:	f3af 8000 	nop.w
    756c:	f3af 8000 	nop.w
    7570:	f3af 8000 	nop.w
    7574:	f3af 8000 	nop.w
    7578:	f3af 8000 	nop.w
    757c:	f3af 8000 	nop.w

00007580 <wavefolderParam3>:
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7580:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7584:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7588:	4b07      	ldr	r3, [pc, #28]	; (75a8 <wavefolderParam3+0x28>)
	param3[v][string] = value;
    758a:	4a08      	ldr	r2, [pc, #32]	; (75ac <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
    758c:	ee70 6a27 	vadd.f32	s13, s0, s15
    7590:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
    7594:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
    7598:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
    759c:	ed82 0a00 	vstr	s0, [r2]
	invCurFB[v][string] = (1.0f / (1.0f + value));
    75a0:	ed83 7a00 	vstr	s14, [r3]
}
    75a4:	4770      	bx	lr
    75a6:	bf00      	nop
    75a8:	2001cc18 	.word	0x2001cc18
    75ac:	2001cf4c 	.word	0x2001cf4c
    75b0:	f3af 8000 	nop.w
    75b4:	f3af 8000 	nop.w
    75b8:	f3af 8000 	nop.w
    75bc:	f3af 8000 	nop.w

000075c0 <tiltParam1>:
{
    75c0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    75c2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    75c6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    75ca:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    75ce:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
    75d2:	0084      	lsls	r4, r0, #2
{
    75d4:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&shelf1[v][string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    75d8:	eee0 7a68 	vfms.f32	s15, s0, s17
    75dc:	eeb0 0a67 	vmov.f32	s0, s15
    75e0:	f002 fa42 	bl	9a68 <__dbToATableLookup_veneer>
    75e4:	4808      	ldr	r0, [pc, #32]	; (7608 <tiltParam1+0x48>)
    75e6:	4420      	add	r0, r4
    75e8:	f002 fad2 	bl	9b90 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    75ec:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    75f0:	eea8 0a28 	vfma.f32	s0, s16, s17
    75f4:	f002 fa38 	bl	9a68 <__dbToATableLookup_veneer>
    75f8:	4804      	ldr	r0, [pc, #16]	; (760c <tiltParam1+0x4c>)
}
    75fa:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    75fe:	4420      	add	r0, r4
}
    7600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&shelf2[v][string], dbToATableLookup((value * 30.0f) - 15.0f));
    7604:	f002 ba78 	b.w	9af8 <__tVZFilterHS_setGain_veneer>
    7608:	2001d080 	.word	0x2001d080
    760c:	2001d0a0 	.word	0x2001d0a0
    7610:	f3af 8000 	nop.w
    7614:	f3af 8000 	nop.w
    7618:	f3af 8000 	nop.w
    761c:	f3af 8000 	nop.w

00007620 <tiltParam2>:
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    7620:	eef3 0a0a 	vmov.f32	s1, #58	; 0x41d00000  26.0
    7624:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 7658 <tiltParam2+0x38>
    7628:	eddf 7a0c 	vldr	s15, [pc, #48]	; 765c <tiltParam2+0x3c>
    762c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 7660 <tiltParam2+0x40>
    7630:	eee0 0a07 	vfma.f32	s1, s0, s14
    7634:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 7664 <tiltParam2+0x44>
{
    7638:	b538      	push	{r3, r4, r5, lr}
    763a:	4605      	mov	r5, r0
    763c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
    763e:	ee60 0aa7 	vmul.f32	s1, s1, s15
    7642:	f002 f8a5 	bl	9790 <__LEAF_clip_veneer>
	tVZFilterBell_setFreq(&bell1[v][string], value);
    7646:	4b08      	ldr	r3, [pc, #32]	; (7668 <tiltParam2+0x48>)
    7648:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    764c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    7650:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setFreq(&bell1[v][string], value);
    7654:	f002 ba3c 	b.w	9ad0 <__tVZFilterBell_setFreq_veneer>
    7658:	429a0000 	.word	0x429a0000
    765c:	420fb824 	.word	0x420fb824
    7660:	457ff000 	.word	0x457ff000
    7664:	00000000 	.word	0x00000000
    7668:	2001c8ac 	.word	0x2001c8ac
    766c:	f3af 8000 	nop.w
    7670:	f3af 8000 	nop.w
    7674:	f3af 8000 	nop.w
    7678:	f3af 8000 	nop.w
    767c:	f3af 8000 	nop.w

00007680 <tiltParam3>:
	tVZFilterBell_setBandwidth(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
    7680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7684:	4b06      	ldr	r3, [pc, #24]	; (76a0 <tiltParam3+0x20>)
    7686:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
    768a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    768e:	ee30 0a07 	vadd.f32	s0, s0, s14
    7692:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7696:	ee20 0a27 	vmul.f32	s0, s0, s15
    769a:	f002 ba09 	b.w	9ab0 <__tVZFilterBell_setBandwidth_veneer>
    769e:	bf00      	nop
    76a0:	2001c8ac 	.word	0x2001c8ac
    76a4:	f3af 8000 	nop.w
    76a8:	f3af 8000 	nop.w
    76ac:	f3af 8000 	nop.w
    76b0:	f3af 8000 	nop.w
    76b4:	f3af 8000 	nop.w
    76b8:	f3af 8000 	nop.w
    76bc:	f3af 8000 	nop.w

000076c0 <tiltParam4>:
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    76c0:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    76c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 76ec <tiltParam4+0x2c>
{
    76c8:	b538      	push	{r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    76ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    76ce:	4605      	mov	r5, r0
    76d0:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    76d2:	eeb0 0a67 	vmov.f32	s0, s15
    76d6:	f002 f9c7 	bl	9a68 <__dbToATableLookup_veneer>
    76da:	4b05      	ldr	r3, [pc, #20]	; (76f0 <tiltParam4+0x30>)
    76dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    76e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    76e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterBell_setGain(&bell1[v][string], dbToATableLookup((value * 34.0f) - 17.0f));
    76e8:	f002 b9fe 	b.w	9ae8 <__tVZFilterBell_setGain_veneer>
    76ec:	42080000 	.word	0x42080000
    76f0:	2001c8ac 	.word	0x2001c8ac
    76f4:	f3af 8000 	nop.w
    76f8:	f3af 8000 	nop.w
    76fc:	f3af 8000 	nop.w

00007700 <compressorParam1>:
	comp[v][string]->T = value*-24.0f;
    7700:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
    7704:	4b04      	ldr	r3, [pc, #16]	; (7718 <compressorParam1+0x18>)
    7706:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    770a:	ee20 0a27 	vmul.f32	s0, s0, s15
    770e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7712:	ed83 0a03 	vstr	s0, [r3, #12]
}
    7716:	4770      	bx	lr
    7718:	2001c8cc 	.word	0x2001c8cc
    771c:	f3af 8000 	nop.w

00007720 <compressorParam2>:
	comp[v][string]->R = ((value*10.0f)+1.0f);
    7720:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7724:	4b0a      	ldr	r3, [pc, #40]	; (7750 <compressorParam2+0x30>)
    7726:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
    772a:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    772e:	eeb0 7a67 	vmov.f32	s14, s15
    7732:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
    7736:	eea0 7a26 	vfma.f32	s14, s0, s13
    773a:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
    773e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7742:	edd3 6a04 	vldr	s13, [r3, #16]
    7746:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    774a:	ed83 7a07 	vstr	s14, [r3, #28]
}
    774e:	4770      	bx	lr
    7750:	2001c8cc 	.word	0x2001c8cc
    7754:	f3af 8000 	nop.w
    7758:	f3af 8000 	nop.w
    775c:	f3af 8000 	nop.w

00007760 <compressorParam3>:
	comp[v][string]->M = value * 18.0f;
    7760:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
    7764:	4b04      	ldr	r3, [pc, #16]	; (7778 <compressorParam3+0x18>)
    7766:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    776a:	ee20 0a27 	vmul.f32	s0, s0, s15
    776e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    7772:	ed83 0a06 	vstr	s0, [r3, #24]
}
    7776:	4770      	bx	lr
    7778:	2001c8cc 	.word	0x2001c8cc
    777c:	f3af 8000 	nop.w

00007780 <compressorParam4>:
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7780:	4b0b      	ldr	r3, [pc, #44]	; (77b0 <compressorParam4+0x30>)
    7782:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
    7786:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 77b4 <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    778a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    778e:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7790:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
    7794:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    7798:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    779c:	ee20 0a07 	vmul.f32	s0, s0, s14
    77a0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    77a4:	f002 f8f4 	bl	9990 <__fasterexpf_veneer>
    77a8:	ed84 0a01 	vstr	s0, [r4, #4]
}
    77ac:	bd10      	pop	{r4, pc}
    77ae:	bf00      	nop
    77b0:	2001c8cc 	.word	0x2001c8cc
    77b4:	3a83126f 	.word	0x3a83126f
    77b8:	f3af 8000 	nop.w
    77bc:	f3af 8000 	nop.w

000077c0 <compressorParam5>:
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    77c0:	4b0b      	ldr	r3, [pc, #44]	; (77f0 <compressorParam5+0x30>)
    77c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
    77c6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 77f4 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    77ca:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
    77ce:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    77d0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
    77d4:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
    77d8:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
    77dc:	ee20 0a07 	vmul.f32	s0, s0, s14
    77e0:	ee87 0a80 	vdiv.f32	s0, s15, s0
    77e4:	f002 f8d4 	bl	9990 <__fasterexpf_veneer>
    77e8:	ed84 0a02 	vstr	s0, [r4, #8]
}
    77ec:	bd10      	pop	{r4, pc}
    77ee:	bf00      	nop
    77f0:	2001c8cc 	.word	0x2001c8cc
    77f4:	3a83126f 	.word	0x3a83126f
    77f8:	f3af 8000 	nop.w
    77fc:	f3af 8000 	nop.w

00007800 <offsetParam2>:
	param2[v][string] = (value * 2.0f) - 1.0f;
    7800:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
    7804:	4b05      	ldr	r3, [pc, #20]	; (781c <offsetParam2+0x1c>)
    7806:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    780a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    780e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7812:	eee0 7a07 	vfma.f32	s15, s0, s14
    7816:	edc3 7a00 	vstr	s15, [r3]
}
    781a:	4770      	bx	lr
    781c:	2001cf2c 	.word	0x2001cf2c

00007820 <param2Linear>:
	param2[v][string] = value;
    7820:	4b03      	ldr	r3, [pc, #12]	; (7830 <param2Linear+0x10>)
    7822:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7826:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    782a:	ed83 0a00 	vstr	s0, [r3]
}
    782e:	4770      	bx	lr
    7830:	2001cf2c 	.word	0x2001cf2c
    7834:	f3af 8000 	nop.w
    7838:	f3af 8000 	nop.w
    783c:	f3af 8000 	nop.w

00007840 <param3Linear>:
	param3[v][string] = value;
    7840:	4b03      	ldr	r3, [pc, #12]	; (7850 <param3Linear+0x10>)
    7842:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7846:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    784a:	ed83 0a00 	vstr	s0, [r3]
}
    784e:	4770      	bx	lr
    7850:	2001cf4c 	.word	0x2001cf4c
    7854:	f3af 8000 	nop.w
    7858:	f3af 8000 	nop.w
    785c:	f3af 8000 	nop.w

00007860 <param3Soft>:
	param3[v][string] = (value * .99f) + 0.01f;
    7860:	eddf 6a10 	vldr	s13, [pc, #64]	; 78a4 <param3Soft+0x44>
    7864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    7868:	eddf 7a0f 	vldr	s15, [pc, #60]	; 78a8 <param3Soft+0x48>
    786c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7870:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 78ac <param3Soft+0x4c>
    7874:	eee0 7a26 	vfma.f32	s15, s0, s13
    7878:	4a0d      	ldr	r2, [pc, #52]	; (78b0 <param3Soft+0x50>)
    787a:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    787e:	4b0d      	ldr	r3, [pc, #52]	; (78b4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
    7880:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    7884:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7888:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
    788c:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
    7890:	eee5 6a86 	vfma.f32	s13, s11, s12
    7894:	ee67 7aa6 	vmul.f32	s15, s15, s13
    7898:	eec7 6a27 	vdiv.f32	s13, s14, s15
    789c:	edc3 6a00 	vstr	s13, [r3]
}
    78a0:	4770      	bx	lr
    78a2:	bf00      	nop
    78a4:	3f7d70a4 	.word	0x3f7d70a4
    78a8:	3c23d70a 	.word	0x3c23d70a
    78ac:	3eaaaaaa 	.word	0x3eaaaaaa
    78b0:	2001cf4c 	.word	0x2001cf4c
    78b4:	2001d054 	.word	0x2001d054
    78b8:	f3af 8000 	nop.w
    78bc:	f3af 8000 	nop.w

000078c0 <param3Hard>:
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    78c0:	eddf 6a17 	vldr	s13, [pc, #92]	; 7920 <param3Hard+0x60>
    78c4:	eddf 7a17 	vldr	s15, [pc, #92]	; 7924 <param3Hard+0x64>
    78c8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 7928 <param3Hard+0x68>
    78cc:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    78d0:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    78d2:	4b16      	ldr	r3, [pc, #88]	; (792c <param3Hard+0x6c>)
    78d4:	0045      	lsls	r5, r0, #1
    78d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    78da:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
    78dc:	ee27 0a87 	vmul.f32	s0, s15, s14
    78e0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    78e4:	ed83 0a00 	vstr	s0, [r3]
	float tempDiv = arm_sin_f32(param3[v][string]);
    78e8:	f001 ff5a 	bl	97a0 <__arm_sin_f32_veneer>
	if (tempDiv == 0.0f)
    78ec:	eeb5 0a40 	vcmp.f32	s0, #0.0
    78f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    78f4:	d00a      	beq.n	790c <param3Hard+0x4c>
	shapeDividerH[v][string] = 1.0f/tempDiv;
    78f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    78fa:	4b0d      	ldr	r3, [pc, #52]	; (7930 <param3Hard+0x70>)
    78fc:	4425      	add	r5, r4
    78fe:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7902:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7906:	edc3 7a00 	vstr	s15, [r3]
}
    790a:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
    790c:	4b08      	ldr	r3, [pc, #32]	; (7930 <param3Hard+0x70>)
    790e:	4425      	add	r5, r4
    7910:	eddf 7a08 	vldr	s15, [pc, #32]	; 7934 <param3Hard+0x74>
    7914:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7918:	edc3 7a00 	vstr	s15, [r3]
}
    791c:	bd38      	pop	{r3, r4, r5, pc}
    791e:	bf00      	nop
    7920:	3f7d70a4 	.word	0x3f7d70a4
    7924:	3c23d70a 	.word	0x3c23d70a
    7928:	3fc90fdb 	.word	0x3fc90fdb
    792c:	2001cf4c 	.word	0x2001cf4c
    7930:	2001d034 	.word	0x2001d034
    7934:	4479ffff 	.word	0x4479ffff
    7938:	f3af 8000 	nop.w
    793c:	f3af 8000 	nop.w

00007940 <param3Poly>:
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    7940:	eddf 6a17 	vldr	s13, [pc, #92]	; 79a0 <param3Poly+0x60>
    7944:	eddf 7a17 	vldr	s15, [pc, #92]	; 79a4 <param3Poly+0x64>
    7948:	ed9f 7a17 	vldr	s14, [pc, #92]	; 79a8 <param3Poly+0x68>
    794c:	eee0 7a26 	vfma.f32	s15, s0, s13
{
    7950:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    7952:	4b16      	ldr	r3, [pc, #88]	; (79ac <param3Poly+0x6c>)
    7954:	0045      	lsls	r5, r0, #1
    7956:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
    795a:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f)* HALF_PI;
    795c:	ee27 0a87 	vmul.f32	s0, s15, s14
    7960:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7964:	ed83 0a00 	vstr	s0, [r3]
    float tempDiv = fastSine(param3[v][string]);
    7968:	f002 f846 	bl	99f8 <__fastSine_veneer>
    if (tempDiv == 0.0f)
    796c:	eeb5 0a40 	vcmp.f32	s0, #0.0
    7970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    7974:	d00a      	beq.n	798c <param3Poly+0x4c>
    polyDivider[v][string] = 1.0f/tempDiv;
    7976:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    797a:	4b0d      	ldr	r3, [pc, #52]	; (79b0 <param3Poly+0x70>)
    797c:	4425      	add	r5, r4
    797e:	eec7 7a00 	vdiv.f32	s15, s14, s0
    7982:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7986:	edc3 7a00 	vstr	s15, [r3]
}
    798a:	bd38      	pop	{r3, r4, r5, pc}
    polyDivider[v][string] = 1.0f/tempDiv;
    798c:	4b08      	ldr	r3, [pc, #32]	; (79b0 <param3Poly+0x70>)
    798e:	4425      	add	r5, r4
    7990:	eddf 7a08 	vldr	s15, [pc, #32]	; 79b4 <param3Poly+0x74>
    7994:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    7998:	edc3 7a00 	vstr	s15, [r3]
}
    799c:	bd38      	pop	{r3, r4, r5, pc}
    799e:	bf00      	nop
    79a0:	3f7d70a4 	.word	0x3f7d70a4
    79a4:	3c23d70a 	.word	0x3c23d70a
    79a8:	3fc90fdb 	.word	0x3fc90fdb
    79ac:	2001cf4c 	.word	0x2001cf4c
    79b0:	2001cfc4 	.word	0x2001cfc4
    79b4:	4479ffff 	.word	0x4479ffff
    79b8:	f3af 8000 	nop.w
    79bc:	f3af 8000 	nop.w

000079c0 <param4Linear>:
	param4[v][string] = value;
    79c0:	4b03      	ldr	r3, [pc, #12]	; (79d0 <param4Linear+0x10>)
    79c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    79c6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    79ca:	ed83 0a00 	vstr	s0, [r3]
}
    79ce:	4770      	bx	lr
    79d0:	2001cf6c 	.word	0x2001cf6c
    79d4:	f3af 8000 	nop.w
    79d8:	f3af 8000 	nop.w
    79dc:	f3af 8000 	nop.w

000079e0 <param5Linear>:
	param5[v][string] = value;
    79e0:	4b03      	ldr	r3, [pc, #12]	; (79f0 <param5Linear+0x10>)
    79e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    79e6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    79ea:	ed83 0a00 	vstr	s0, [r3]
}
    79ee:	4770      	bx	lr
    79f0:	2001cf8c 	.word	0x2001cf8c
    79f4:	f3af 8000 	nop.w
    79f8:	f3af 8000 	nop.w
    79fc:	f3af 8000 	nop.w

00007a00 <param2BC>:
	tCrusher_setQuality (&bc[v][string],value);
    7a00:	4b03      	ldr	r3, [pc, #12]	; (7a10 <param2BC+0x10>)
    7a02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a06:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a0a:	f001 bf91 	b.w	9930 <__tCrusher_setQuality_veneer>
    7a0e:	bf00      	nop
    7a10:	2001c88c 	.word	0x2001c88c
    7a14:	f3af 8000 	nop.w
    7a18:	f3af 8000 	nop.w
    7a1c:	f3af 8000 	nop.w

00007a20 <param3BC>:
	value = (value * inv_oversample) + 0.01f;
    7a20:	4a07      	ldr	r2, [pc, #28]	; (7a40 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
    7a22:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
    7a26:	eddf 7a07 	vldr	s15, [pc, #28]	; 7a44 <param3BC+0x24>
    7a2a:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
    7a2e:	4b06      	ldr	r3, [pc, #24]	; (7a48 <param3BC+0x28>)
    7a30:	eee7 7a00 	vfma.f32	s15, s14, s0
    7a34:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a38:	eeb0 0a67 	vmov.f32	s0, s15
    7a3c:	f002 b864 	b.w	9b08 <__tCrusher_setSamplingRatio_veneer>
    7a40:	2000089c 	.word	0x2000089c
    7a44:	3c23d70a 	.word	0x3c23d70a
    7a48:	2001c88c 	.word	0x2001c88c
    7a4c:	f3af 8000 	nop.w
    7a50:	f3af 8000 	nop.w
    7a54:	f3af 8000 	nop.w
    7a58:	f3af 8000 	nop.w
    7a5c:	f3af 8000 	nop.w

00007a60 <param4BC>:
	tCrusher_setRound(&bc[v][string], value);
    7a60:	4b03      	ldr	r3, [pc, #12]	; (7a70 <param4BC+0x10>)
    7a62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a6a:	f002 b80d 	b.w	9a88 <__tCrusher_setRound_veneer>
    7a6e:	bf00      	nop
    7a70:	2001c88c 	.word	0x2001c88c
    7a74:	f3af 8000 	nop.w
    7a78:	f3af 8000 	nop.w
    7a7c:	f3af 8000 	nop.w

00007a80 <param5BC>:
	tCrusher_setOperation(&bc[v][string], value);
    7a80:	4b03      	ldr	r3, [pc, #12]	; (7a90 <param5BC+0x10>)
    7a82:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7a86:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7a8a:	f002 b849 	b.w	9b20 <__tCrusher_setOperation_veneer>
    7a8e:	bf00      	nop
    7a90:	2001c88c 	.word	0x2001c88c
    7a94:	f3af 8000 	nop.w
    7a98:	f3af 8000 	nop.w
    7a9c:	f3af 8000 	nop.w

00007aa0 <fxMixSet>:
	fxMix[v][string] = value;
    7aa0:	4b03      	ldr	r3, [pc, #12]	; (7ab0 <fxMixSet+0x10>)
    7aa2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7aa6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7aaa:	ed83 0a00 	vstr	s0, [r3]
}
    7aae:	4770      	bx	lr
    7ab0:	2001cb48 	.word	0x2001cb48
    7ab4:	f3af 8000 	nop.w
    7ab8:	f3af 8000 	nop.w
    7abc:	f3af 8000 	nop.w

00007ac0 <fxPostGainSet>:
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7ac0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
    7ac4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
    7ac8:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7aca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    7ace:	4605      	mov	r5, r0
    7ad0:	460c      	mov	r4, r1
	fxPostGain[v][string] = dbToATableLookup((value * 24.0f) - 12.0f);
    7ad2:	eeb0 0a67 	vmov.f32	s0, s15
    7ad6:	f001 ffc7 	bl	9a68 <__dbToATableLookup_veneer>
    7ada:	4b04      	ldr	r3, [pc, #16]	; (7aec <fxPostGainSet+0x2c>)
    7adc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7ae0:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7ae4:	ed83 0a00 	vstr	s0, [r3]
}
    7ae8:	bd38      	pop	{r3, r4, r5, pc}
    7aea:	bf00      	nop
    7aec:	2001cb68 	.word	0x2001cb68
    7af0:	f3af 8000 	nop.w
    7af4:	f3af 8000 	nop.w
    7af8:	f3af 8000 	nop.w
    7afc:	f3af 8000 	nop.w

00007b00 <wavefolderTick>:
{
    7b00:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b02:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    float fbSample = wfState[v][string];
    7b06:	4d36      	ldr	r5, [pc, #216]	; (7be0 <wavefolderTick+0xe0>)
    7b08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b0c:	4b35      	ldr	r3, [pc, #212]	; (7be4 <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
    7b0e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
    7b12:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b16:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7b1a:	4a33      	ldr	r2, [pc, #204]	; (7be8 <wavefolderTick+0xe8>)
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7b1c:	eddf 3a33 	vldr	s7, [pc, #204]	; 7bec <wavefolderTick+0xec>
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b20:	0084      	lsls	r4, r0, #2
    7b22:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    float fb = curFB * fbSample;
    7b26:	ed9f 3a32 	vldr	s6, [pc, #200]	; 7bf0 <wavefolderTick+0xf0>
{
    7b2a:	ed2d 8b02 	vpush	{d8}
    7b2e:	ed95 6a00 	vldr	s12, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b32:	edd3 7a00 	vldr	s15, [r3]
    7b36:	fe86 6a66 	vminnm.f32	s12, s12, s13
    7b3a:	fe86 6a24 	vmaxnm.f32	s12, s12, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7b3e:	ee26 7a06 	vmul.f32	s14, s12, s12
    float curFB = param3[v][string];
    7b42:	4b2c      	ldr	r3, [pc, #176]	; (7bf4 <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b44:	ee30 0a27 	vadd.f32	s0, s0, s15
    7b48:	edd2 5a00 	vldr	s11, [r2]
    float curFB = param3[v][string];
    7b4c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
    7b50:	4a29      	ldr	r2, [pc, #164]	; (7bf8 <wavefolderTick+0xf8>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7b52:	ee67 7a23 	vmul.f32	s15, s14, s7
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
    7b56:	ee20 7a25 	vmul.f32	s14, s0, s11
    float fb = curFB * fbSample;
    7b5a:	ed93 4a00 	vldr	s8, [r3]
    float curFF = param4[v][string];
    7b5e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7b62:	4b26      	ldr	r3, [pc, #152]	; (7bfc <wavefolderTick+0xfc>)
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7b64:	ee76 7ae7 	vsub.f32	s15, s13, s15
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7b68:	ed9f 0a25 	vldr	s0, [pc, #148]	; 7c00 <wavefolderTick+0x100>
    7b6c:	fec7 5a66 	vminnm.f32	s11, s14, s13
    float fb = curFB * fbSample;
    7b70:	ee24 4a03 	vmul.f32	s8, s8, s6
    7b74:	fec5 5aa4 	vmaxnm.f32	s11, s11, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7b78:	ee65 4aa5 	vmul.f32	s9, s11, s11
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    7b7c:	ee67 7a86 	vmul.f32	s15, s15, s12
    float curFF = param4[v][string];
    7b80:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7b84:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7b88:	ee27 0a00 	vmul.f32	s0, s14, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
    7b8c:	ee76 2ac5 	vsub.f32	s5, s13, s10
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7b90:	ee24 6aa3 	vmul.f32	s12, s9, s7
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7b94:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
    7b98:	ee67 7a84 	vmul.f32	s15, s15, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7b9c:	ee25 5a03 	vmul.f32	s10, s10, s6
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    7ba0:	ee76 6ac6 	vsub.f32	s13, s13, s12
    7ba4:	eee2 7a87 	vfma.f32	s15, s5, s14
    7ba8:	ee66 6aa5 	vmul.f32	s13, s13, s11
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7bac:	eee6 7a85 	vfma.f32	s15, s13, s10
    7bb0:	eeb0 8a67 	vmov.f32	s16, s15
    7bb4:	f001 fdf4 	bl	97a0 <__arm_sin_f32_veneer>
    sample = wfState[v][string] * invCurFB[v][string];
    7bb8:	4b12      	ldr	r3, [pc, #72]	; (7c04 <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7bba:	4813      	ldr	r0, [pc, #76]	; (7c08 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7bbc:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
    7bc0:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7bc2:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
    7bc4:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
    7bc8:	eee8 7ac0 	vfms.f32	s15, s17, s0
    7bcc:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7bd0:	ee27 0a87 	vmul.f32	s0, s15, s14
}
    7bd4:	ecbd 8b02 	vpop	{d8}
    7bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    7bdc:	f001 bf04 	b.w	99e8 <__tHighpass_tick_veneer>
    7be0:	2001d28c 	.word	0x2001d28c
    7be4:	2001cf2c 	.word	0x2001cf2c
    7be8:	2001cf0c 	.word	0x2001cf0c
    7bec:	3eaaaaaa 	.word	0x3eaaaaaa
    7bf0:	3fbffff8 	.word	0x3fbffff8
    7bf4:	2001cf4c 	.word	0x2001cf4c
    7bf8:	2001cf6c 	.word	0x2001cf6c
    7bfc:	2001cf8c 	.word	0x2001cf8c
    7c00:	40c90fdb 	.word	0x40c90fdb
    7c04:	2001cc18 	.word	0x2001cc18
    7c08:	2001c8ec 	.word	0x2001c8ec
    7c0c:	f3af 8000 	nop.w
    7c10:	f3af 8000 	nop.w
    7c14:	f3af 8000 	nop.w
    7c18:	f3af 8000 	nop.w
    7c1c:	f3af 8000 	nop.w

00007c20 <chorusParam1>:
	param1[v][string] = value * 5780.0f + 10.0f;
    7c20:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
    7c24:	ed9f 7a05 	vldr	s14, [pc, #20]	; 7c3c <chorusParam1+0x1c>
    7c28:	4b05      	ldr	r3, [pc, #20]	; (7c40 <chorusParam1+0x20>)
    7c2a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7c2e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7c32:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7c36:	edc3 7a00 	vstr	s15, [r3]
}
    7c3a:	4770      	bx	lr
    7c3c:	45b4a000 	.word	0x45b4a000
    7c40:	2001cf0c 	.word	0x2001cf0c
    7c44:	f3af 8000 	nop.w
    7c48:	f3af 8000 	nop.w
    7c4c:	f3af 8000 	nop.w
    7c50:	f3af 8000 	nop.w
    7c54:	f3af 8000 	nop.w
    7c58:	f3af 8000 	nop.w
    7c5c:	f3af 8000 	nop.w

00007c60 <chorusParam2>:
	param2[v][string] = value * 0.1f;
    7c60:	eddf 7a05 	vldr	s15, [pc, #20]	; 7c78 <chorusParam2+0x18>
    7c64:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7c68:	4b04      	ldr	r3, [pc, #16]	; (7c7c <chorusParam2+0x1c>)
    7c6a:	ee20 0a27 	vmul.f32	s0, s0, s15
    7c6e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7c72:	ed83 0a00 	vstr	s0, [r3]
}
    7c76:	4770      	bx	lr
    7c78:	3dcccccd 	.word	0x3dcccccd
    7c7c:	2001cf2c 	.word	0x2001cf2c

00007c80 <chorusParam3>:
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
    7c80:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7ca0 <chorusParam3+0x20>
    7c84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7c88:	eddf 7a06 	vldr	s15, [pc, #24]	; 7ca4 <chorusParam3+0x24>
    7c8c:	4b06      	ldr	r3, [pc, #24]	; (7ca8 <chorusParam3+0x28>)
    7c8e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7c92:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7c96:	eeb0 0a67 	vmov.f32	s0, s15
    7c9a:	f001 bd9d 	b.w	97d8 <__tCycle_setFreq_veneer>
    7c9e:	bf00      	nop
    7ca0:	3ecccccd 	.word	0x3ecccccd
    7ca4:	3c23d70a 	.word	0x3c23d70a
    7ca8:	2001ce34 	.word	0x2001ce34
    7cac:	f3af 8000 	nop.w
    7cb0:	f3af 8000 	nop.w
    7cb4:	f3af 8000 	nop.w
    7cb8:	f3af 8000 	nop.w
    7cbc:	f3af 8000 	nop.w

00007cc0 <chorusParam4>:
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
    7cc0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 7ce0 <chorusParam4+0x20>
    7cc4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7cc8:	eddf 7a06 	vldr	s15, [pc, #24]	; 7ce4 <chorusParam4+0x24>
    7ccc:	4b06      	ldr	r3, [pc, #24]	; (7ce8 <chorusParam4+0x28>)
    7cce:	eee0 7a07 	vfma.f32	s15, s0, s14
    7cd2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7cd6:	eeb0 0a67 	vmov.f32	s0, s15
    7cda:	f001 bd7d 	b.w	97d8 <__tCycle_setFreq_veneer>
    7cde:	bf00      	nop
    7ce0:	3ee38e37 	.word	0x3ee38e37
    7ce4:	3c343958 	.word	0x3c343958
    7ce8:	2001ce54 	.word	0x2001ce54
    7cec:	f3af 8000 	nop.w
    7cf0:	f3af 8000 	nop.w
    7cf4:	f3af 8000 	nop.w
    7cf8:	f3af 8000 	nop.w
    7cfc:	f3af 8000 	nop.w

00007d00 <delayParam1>:
    tTapeDelay_setDelay(&tapeDelay[v][string], value * 30000.0f + 1.0f);
    7d00:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7d04:	ed9f 7a06 	vldr	s14, [pc, #24]	; 7d20 <delayParam1+0x20>
    7d08:	4b06      	ldr	r3, [pc, #24]	; (7d24 <delayParam1+0x24>)
    7d0a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7d0e:	eee0 7a07 	vfma.f32	s15, s0, s14
    7d12:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7d16:	eeb0 0a67 	vmov.f32	s0, s15
    7d1a:	f001 bd75 	b.w	9808 <__tTapeDelay_setDelay_veneer>
    7d1e:	bf00      	nop
    7d20:	46ea6000 	.word	0x46ea6000
    7d24:	2001d220 	.word	0x2001d220
    7d28:	f3af 8000 	nop.w
    7d2c:	f3af 8000 	nop.w
    7d30:	f3af 8000 	nop.w
    7d34:	f3af 8000 	nop.w
    7d38:	f3af 8000 	nop.w
    7d3c:	f3af 8000 	nop.w

00007d40 <delayParam2>:
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    7d40:	ed9f 1a09 	vldr	s2, [pc, #36]	; 7d68 <delayParam2+0x28>
{
    7d44:	b538      	push	{r3, r4, r5, lr}
    7d46:	4605      	mov	r5, r0
    7d48:	460c      	mov	r4, r1
	param2[v][string] = LEAF_clip(0.0f, value * 1.1f, 1.1f);
    7d4a:	ee60 0a01 	vmul.f32	s1, s0, s2
    7d4e:	ed9f 0a07 	vldr	s0, [pc, #28]	; 7d6c <delayParam2+0x2c>
    7d52:	f001 fd1d 	bl	9790 <__LEAF_clip_veneer>
    7d56:	4b06      	ldr	r3, [pc, #24]	; (7d70 <delayParam2+0x30>)
    7d58:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    7d5c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7d60:	ed83 0a00 	vstr	s0, [r3]
}
    7d64:	bd38      	pop	{r3, r4, r5, pc}
    7d66:	bf00      	nop
    7d68:	3f8ccccd 	.word	0x3f8ccccd
    7d6c:	00000000 	.word	0x00000000
    7d70:	2001cf2c 	.word	0x2001cf2c
    7d74:	f3af 8000 	nop.w
    7d78:	f3af 8000 	nop.w
    7d7c:	f3af 8000 	nop.w

00007d80 <delayParam3>:
    tSVF_setFreqFast(&FXlowpass[v][string], (value * 127.0f));
    7d80:	eddf 7a05 	vldr	s15, [pc, #20]	; 7d98 <delayParam3+0x18>
    7d84:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7d88:	4b04      	ldr	r3, [pc, #16]	; (7d9c <delayParam3+0x1c>)
    7d8a:	ee20 0a27 	vmul.f32	s0, s0, s15
    7d8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7d92:	f001 bcf5 	b.w	9780 <__tSVF_setFreqFast_veneer>
    7d96:	bf00      	nop
    7d98:	42fe0000 	.word	0x42fe0000
    7d9c:	2001c804 	.word	0x2001c804

00007da0 <delayParam4>:
    tSVF_setFreqFast(&FXhighpass[v][string], (value * 127.0f));
    7da0:	eddf 7a05 	vldr	s15, [pc, #20]	; 7db8 <delayParam4+0x18>
    7da4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7da8:	4b04      	ldr	r3, [pc, #16]	; (7dbc <delayParam4+0x1c>)
    7daa:	ee20 0a27 	vmul.f32	s0, s0, s15
    7dae:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    7db2:	f001 bce5 	b.w	9780 <__tSVF_setFreqFast_veneer>
    7db6:	bf00      	nop
    7db8:	42fe0000 	.word	0x42fe0000
    7dbc:	2001c7e4 	.word	0x2001c7e4

00007dc0 <delayParam5>:
	param5[v][string] = (value * 1.5f) + 1.0f;
    7dc0:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
    7dc4:	4b05      	ldr	r3, [pc, #20]	; (7ddc <delayParam5+0x1c>)
    7dc6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    7dca:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    7dce:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    7dd2:	eee0 7a07 	vfma.f32	s15, s0, s14
    7dd6:	edc3 7a00 	vstr	s15, [r3]
}
    7dda:	4770      	bx	lr
    7ddc:	2001cf8c 	.word	0x2001cf8c

00007de0 <chorusTick>:

float __ATTR_ITCMRAM chorusTick(float sample, int v, int string)
{
    7de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7de2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7de6:	4f2b      	ldr	r7, [pc, #172]	; (7e94 <chorusTick+0xb4>)
    7de8:	4d2b      	ldr	r5, [pc, #172]	; (7e98 <chorusTick+0xb8>)
    7dea:	482c      	ldr	r0, [pc, #176]	; (7e9c <chorusTick+0xbc>)
    7dec:	eb07 0781 	add.w	r7, r7, r1, lsl #2
    7df0:	eb05 0581 	add.w	r5, r5, r1, lsl #2
    7df4:	4e2a      	ldr	r6, [pc, #168]	; (7ea0 <chorusTick+0xc0>)
    7df6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    7dfa:	008c      	lsls	r4, r1, #2
    7dfc:	eb06 0681 	add.w	r6, r6, r1, lsl #2
{
    7e00:	ed2d 8b04 	vpush	{d8-d9}
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7e04:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    7e08:	edd5 9a00 	vldr	s19, [r5]
{
    7e0c:	eef0 8a40 	vmov.f32	s17, s0
	tLinearDelay_setDelay(&delay1[v][string], param1[v][string] * .707f * (1.0f + param2[v][string] * tCycle_tick(&mod1[v][string])));
    7e10:	ed97 9a00 	vldr	s18, [r7]
    7e14:	f001 ff04 	bl	9c20 <__tCycle_tick_veneer>
    7e18:	ed9f 7a22 	vldr	s14, [pc, #136]	; 7ea4 <chorusTick+0xc4>
    7e1c:	eef0 7a48 	vmov.f32	s15, s16
    7e20:	4630      	mov	r0, r6
    7e22:	ee29 9a07 	vmul.f32	s18, s18, s14
    7e26:	eee9 7a80 	vfma.f32	s15, s19, s0
    7e2a:	ee29 0a27 	vmul.f32	s0, s18, s15
    7e2e:	f001 fd23 	bl	9878 <__tLinearDelay_setDelay_veneer>
    tLinearDelay_setDelay(&delay2[v][string], param1[v][string] * .5f * (1.0f - param2[v][string] * tCycle_tick(&mod2[v][string])));
    7e32:	481d      	ldr	r0, [pc, #116]	; (7ea8 <chorusTick+0xc8>)
    7e34:	edd5 9a00 	vldr	s19, [r5]
    7e38:	4420      	add	r0, r4
    7e3a:	ed97 9a00 	vldr	s18, [r7]
    7e3e:	f001 feef 	bl	9c20 <__tCycle_tick_veneer>
    7e42:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    7e46:	eea9 8ac0 	vfms.f32	s16, s19, s0
    7e4a:	4d18      	ldr	r5, [pc, #96]	; (7eac <chorusTick+0xcc>)
    7e4c:	ee29 0a27 	vmul.f32	s0, s18, s15
    7e50:	4425      	add	r5, r4
    7e52:	4628      	mov	r0, r5
    7e54:	ee20 0a08 	vmul.f32	s0, s0, s16
    7e58:	f001 fd0e 	bl	9878 <__tLinearDelay_setDelay_veneer>
    float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    7e5c:	eeb0 0a68 	vmov.f32	s0, s17
    7e60:	4630      	mov	r0, r6
    7e62:	f001 ff05 	bl	9c70 <__tLinearDelay_tick_veneer>
    7e66:	eeb0 8a40 	vmov.f32	s16, s0
    temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    7e6a:	4628      	mov	r0, r5
    7e6c:	eeb0 0a68 	vmov.f32	s0, s17
    7e70:	f001 fefe 	bl	9c70 <__tLinearDelay_tick_veneer>
    7e74:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
    7e78:	ee38 0a00 	vadd.f32	s0, s16, s0
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7e7c:	480c      	ldr	r0, [pc, #48]	; (7eb0 <chorusTick+0xd0>)
    7e7e:	4420      	add	r0, r4
    7e80:	eea8 0ae7 	vfms.f32	s0, s17, s15
    7e84:	f001 fdb0 	bl	99e8 <__tHighpass_tick_veneer>
	//float temp = 0.0f;
    return -temp;
}
    7e88:	eeb1 0a40 	vneg.f32	s0, s0
    7e8c:	ecbd 8b04 	vpop	{d8-d9}
    7e90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7e92:	bf00      	nop
    7e94:	2001cf0c 	.word	0x2001cf0c
    7e98:	2001cf2c 	.word	0x2001cf2c
    7e9c:	2001ce34 	.word	0x2001ce34
    7ea0:	2001ca34 	.word	0x2001ca34
    7ea4:	3f34fdf4 	.word	0x3f34fdf4
    7ea8:	2001ce54 	.word	0x2001ce54
    7eac:	2001ca54 	.word	0x2001ca54
    7eb0:	2001c8ec 	.word	0x2001c8ec
    7eb4:	f3af 8000 	nop.w
    7eb8:	f3af 8000 	nop.w
    7ebc:	f3af 8000 	nop.w

00007ec0 <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7ec0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7ec4:	4a0e      	ldr	r2, [pc, #56]	; (7f00 <shaperTick+0x40>)
    sample = sample * param1[v][string];
    7ec6:	4b0f      	ldr	r3, [pc, #60]	; (7f04 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7ec8:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
    7ecc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7ed0:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
    7ed2:	edd2 7a00 	vldr	s15, [r2]
    7ed6:	008c      	lsls	r4, r1, #2
    7ed8:	ee30 0a27 	vadd.f32	s0, s0, s15
    7edc:	edd3 7a00 	vldr	s15, [r3]
    7ee0:	4b09      	ldr	r3, [pc, #36]	; (7f08 <shaperTick+0x48>)
    7ee2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7ee6:	ee20 0a27 	vmul.f32	s0, s0, s15
    7eea:	edd3 0a00 	vldr	s1, [r3]
    7eee:	f001 fc43 	bl	9778 <__LEAF_shaper_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7ef2:	4806      	ldr	r0, [pc, #24]	; (7f0c <shaperTick+0x4c>)
    7ef4:	4420      	add	r0, r4
    return temp;
}
    7ef6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7efa:	f001 bd75 	b.w	99e8 <__tHighpass_tick_veneer>
    7efe:	bf00      	nop
    7f00:	2001cf2c 	.word	0x2001cf2c
    7f04:	2001cf0c 	.word	0x2001cf0c
    7f08:	2001cf4c 	.word	0x2001cf4c
    7f0c:	2001c8ec 	.word	0x2001c8ec
    7f10:	f3af 8000 	nop.w
    7f14:	f3af 8000 	nop.w
    7f18:	f3af 8000 	nop.w
    7f1c:	f3af 8000 	nop.w

00007f20 <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
    7f20:	4770      	bx	lr
    7f22:	bf00      	nop
    7f24:	f3af 8000 	nop.w
    7f28:	f3af 8000 	nop.w
    7f2c:	f3af 8000 	nop.w
    7f30:	f3af 8000 	nop.w
    7f34:	f3af 8000 	nop.w
    7f38:	f3af 8000 	nop.w
    7f3c:	f3af 8000 	nop.w

00007f40 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7f40:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7f44:	4b08      	ldr	r3, [pc, #32]	; (7f68 <tiltFilterTick+0x28>)
{
    7f46:	b510      	push	{r4, lr}
    sample = tVZFilterLS_tick(&shelf1[v][string], sample);
    7f48:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    7f4c:	008c      	lsls	r4, r1, #2
    7f4e:	f001 fc53 	bl	97f8 <__tVZFilterLS_tick_veneer>
    sample = tVZFilterHS_tick(&shelf2[v][string], sample);
    7f52:	4806      	ldr	r0, [pc, #24]	; (7f6c <tiltFilterTick+0x2c>)
    7f54:	4420      	add	r0, r4
    7f56:	f001 fca7 	bl	98a8 <__tVZFilterHS_tick_veneer>
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7f5a:	4805      	ldr	r0, [pc, #20]	; (7f70 <tiltFilterTick+0x30>)
    7f5c:	4420      	add	r0, r4
    return sample;
}
    7f5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilterBell_tick(&bell1[v][string], sample);
    7f62:	f001 bcf5 	b.w	9950 <__tVZFilterBell_tick_veneer>
    7f66:	bf00      	nop
    7f68:	2001d080 	.word	0x2001d080
    7f6c:	2001d0a0 	.word	0x2001d0a0
    7f70:	2001c8ac 	.word	0x2001c8ac
    7f74:	f3af 8000 	nop.w
    7f78:	f3af 8000 	nop.w
    7f7c:	f3af 8000 	nop.w

00007f80 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
    7f80:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
    7f84:	4a0d      	ldr	r2, [pc, #52]	; (7fbc <tanhTick+0x3c>)
    7f86:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
    7f8a:	4b0d      	ldr	r3, [pc, #52]	; (7fc0 <tanhTick+0x40>)
    float temp = tanhf(sample + (param2[v][string]*gain));
    7f8c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    float gain = param1[v][string];
    7f90:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    7f94:	b510      	push	{r4, lr}
    7f96:	edd2 6a00 	vldr	s13, [r2]
    float gain = param1[v][string];
    7f9a:	008c      	lsls	r4, r1, #2
    7f9c:	edd3 7a00 	vldr	s15, [r3]
    float temp = tanhf(sample + (param2[v][string]*gain));
    7fa0:	eea6 0a87 	vfma.f32	s0, s13, s14
    7fa4:	ee27 0a80 	vmul.f32	s0, s15, s0
    7fa8:	f001 fcc6 	bl	9938 <__tanhf_veneer>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    7fac:	4805      	ldr	r0, [pc, #20]	; (7fc4 <tanhTick+0x44>)
    7fae:	4420      	add	r0, r4
    7fb0:	f001 fd1a 	bl	99e8 <__tHighpass_tick_veneer>
    //temp *= param4[v][string];
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
    7fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
    7fb8:	f001 bcbe 	b.w	9938 <__tanhf_veneer>
    7fbc:	2001cf2c 	.word	0x2001cf2c
    7fc0:	2001cf0c 	.word	0x2001cf0c
    7fc4:	2001c8ec 	.word	0x2001c8ec
    7fc8:	f3af 8000 	nop.w
    7fcc:	f3af 8000 	nop.w
    7fd0:	f3af 8000 	nop.w
    7fd4:	f3af 8000 	nop.w
    7fd8:	f3af 8000 	nop.w
    7fdc:	f3af 8000 	nop.w

00007fe0 <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    7fe0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    7fe4:	4a10      	ldr	r2, [pc, #64]	; (8028 <softClipTick+0x48>)
    sample = sample + param2[v][string];
    7fe6:	4b11      	ldr	r3, [pc, #68]	; (802c <softClipTick+0x4c>)
    7fe8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    7fec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    7ff0:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    7ff4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    7ff8:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8030 <softClipTick+0x50>
    7ffc:	edd2 5a00 	vldr	s11, [r2]
    8000:	edd3 7a00 	vldr	s15, [r3]
    {
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
        //sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    8004:	480b      	ldr	r0, [pc, #44]	; (8034 <softClipTick+0x54>)
    sample = sample + param2[v][string];
    8006:	eee5 7a80 	vfma.f32	s15, s11, s0
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    800a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    800e:	fec7 7ac7 	vminnm.f32	s15, s15, s14
    8012:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (sample) - (((sample * sample * sample))* 0.3333333f);
    8016:	ee27 6ae7 	vnmul.f32	s12, s15, s15
    801a:	eea6 7a26 	vfma.f32	s14, s12, s13
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    801e:	ee27 0a27 	vmul.f32	s0, s14, s15
    8022:	f001 bce1 	b.w	99e8 <__tHighpass_tick_veneer>
    8026:	bf00      	nop
    8028:	2001cf0c 	.word	0x2001cf0c
    802c:	2001cf2c 	.word	0x2001cf2c
    8030:	3eaaaaaa 	.word	0x3eaaaaaa
    8034:	2001c8ec 	.word	0x2001c8ec
    8038:	f3af 8000 	nop.w
    803c:	f3af 8000 	nop.w

00008040 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    8040:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8044:	4a1a      	ldr	r2, [pc, #104]	; (80b0 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
    8046:	4b1b      	ldr	r3, [pc, #108]	; (80b4 <hardClipTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    8048:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    804c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    8050:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    8054:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    8058:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    805a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    805e:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    8060:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    8064:	4e14      	ldr	r6, [pc, #80]	; (80b8 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
    8066:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
    806a:	4d14      	ldr	r5, [pc, #80]	; (80bc <hardClipTick+0x7c>)
    806c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    8070:	4425      	add	r5, r4
    8072:	ed96 7a00 	vldr	s14, [r6]
    8076:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    807a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    807e:	ee27 0a87 	vmul.f32	s0, s15, s14
    8082:	f001 fb8d 	bl	97a0 <__arm_sin_f32_veneer>
    8086:	ed96 7a00 	vldr	s14, [r6]
    808a:	edd5 7a00 	vldr	s15, [r5]
    808e:	ee67 7a87 	vmul.f32	s15, s15, s14
    8092:	ee27 0a80 	vmul.f32	s0, s15, s0
    8096:	f001 fb83 	bl	97a0 <__arm_sin_f32_veneer>
        sample = sample * shapeDividerH[v][string];
    809a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    809e:	4808      	ldr	r0, [pc, #32]	; (80c0 <hardClipTick+0x80>)
    80a0:	ee20 0a27 	vmul.f32	s0, s0, s15
    80a4:	4420      	add	r0, r4
    return sample;
}
    80a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    80aa:	f001 bc9d 	b.w	99e8 <__tHighpass_tick_veneer>
    80ae:	bf00      	nop
    80b0:	2001cf0c 	.word	0x2001cf0c
    80b4:	2001cf2c 	.word	0x2001cf2c
    80b8:	2001cf4c 	.word	0x2001cf4c
    80bc:	2001d034 	.word	0x2001d034
    80c0:	2001c8ec 	.word	0x2001c8ec
    80c4:	f3af 8000 	nop.w
    80c8:	f3af 8000 	nop.w
    80cc:	f3af 8000 	nop.w
    80d0:	f3af 8000 	nop.w
    80d4:	f3af 8000 	nop.w
    80d8:	f3af 8000 	nop.w
    80dc:	f3af 8000 	nop.w

000080e0 <polynomialShaperTick>:


float __ATTR_ITCMRAM polynomialShaperTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
    80e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    80e4:	4a1a      	ldr	r2, [pc, #104]	; (8150 <polynomialShaperTick+0x70>)
    sample = sample + param2[v][string];
    80e6:	4b1b      	ldr	r3, [pc, #108]	; (8154 <polynomialShaperTick+0x74>)
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }

	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    80e8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
    80ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    80f0:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
    80f4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
    80f8:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
    80fa:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
    80fe:	008c      	lsls	r4, r1, #2
    sample = sample + param2[v][string];
    8100:	edd3 7a00 	vldr	s15, [r3]
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    8104:	4e14      	ldr	r6, [pc, #80]	; (8158 <polynomialShaperTick+0x78>)
    sample = sample + param2[v][string];
    8106:	eee5 7a80 	vfma.f32	s15, s11, s0
	sample = fastSine(  (fastSine(sample*param3[v][string]) * polyDivider[v][string]) * param3[v][string]);
    810a:	4d14      	ldr	r5, [pc, #80]	; (815c <polynomialShaperTick+0x7c>)
    810c:	eb06 0681 	add.w	r6, r6, r1, lsl #2
    8110:	4425      	add	r5, r4
    8112:	ed96 7a00 	vldr	s14, [r6]
    8116:	fec7 7ac6 	vminnm.f32	s15, s15, s12
    811a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
    811e:	ee27 0a87 	vmul.f32	s0, s15, s14
    8122:	f001 fc69 	bl	99f8 <__fastSine_veneer>
    8126:	ed96 7a00 	vldr	s14, [r6]
    812a:	edd5 7a00 	vldr	s15, [r5]
    812e:	ee67 7a87 	vmul.f32	s15, s15, s14
    8132:	ee27 0a80 	vmul.f32	s0, s15, s0
    8136:	f001 fc5f 	bl	99f8 <__fastSine_veneer>
	sample = sample * polyDivider[v][string];
    813a:	edd5 7a00 	vldr	s15, [r5]


    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    813e:	4808      	ldr	r0, [pc, #32]	; (8160 <polynomialShaperTick+0x80>)
    8140:	ee20 0a27 	vmul.f32	s0, s0, s15
    8144:	4420      	add	r0, r4
    return sample;
}
    8146:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
    814a:	f001 bc4d 	b.w	99e8 <__tHighpass_tick_veneer>
    814e:	bf00      	nop
    8150:	2001cf0c 	.word	0x2001cf0c
    8154:	2001cf2c 	.word	0x2001cf2c
    8158:	2001cf4c 	.word	0x2001cf4c
    815c:	2001cfc4 	.word	0x2001cfc4
    8160:	2001c8ec 	.word	0x2001c8ec
    8164:	f3af 8000 	nop.w
    8168:	f3af 8000 	nop.w
    816c:	f3af 8000 	nop.w
    8170:	f3af 8000 	nop.w
    8174:	f3af 8000 	nop.w
    8178:	f3af 8000 	nop.w
    817c:	f3af 8000 	nop.w

00008180 <satTick>:
float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
    8180:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    8184:	4b17      	ldr	r3, [pc, #92]	; (81e4 <satTick+0x64>)
    sample = sample * param1[v][string];
    8186:	4a18      	ldr	r2, [pc, #96]	; (81e8 <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    8188:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
    818c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    8190:	4816      	ldr	r0, [pc, #88]	; (81ec <satTick+0x6c>)
    sample = sample * param1[v][string];
    8192:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    8196:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
    819a:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    819c:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
    81a0:	008c      	lsls	r4, r1, #2
    81a2:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
    81a6:	eeb0 6a47 	vmov.f32	s12, s14
    81aa:	ee27 7a87 	vmul.f32	s14, s15, s14
    81ae:	eea7 6a80 	vfma.f32	s12, s15, s0
    81b2:	eea7 7a80 	vfma.f32	s14, s15, s0
    81b6:	eeb0 6ac6 	vabs.f32	s12, s12
    81ba:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
    81be:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    81c2:	ee36 6b05 	vadd.f64	d6, d6, d5
    81c6:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
    81ca:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    81ce:	f001 fc0b 	bl	99e8 <__tHighpass_tick_veneer>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
    81d2:	4807      	ldr	r0, [pc, #28]	; (81f0 <satTick+0x70>)
    81d4:	4420      	add	r0, r4
    81d6:	f001 fc07 	bl	99e8 <__tHighpass_tick_veneer>
    temp = LEAF_tanh(temp);
    return temp;
}
    81da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
    81de:	f001 bcc3 	b.w	9b68 <__LEAF_tanh_veneer>
    81e2:	bf00      	nop
    81e4:	2001cf2c 	.word	0x2001cf2c
    81e8:	2001cf0c 	.word	0x2001cf0c
    81ec:	2001c8ec 	.word	0x2001c8ec
    81f0:	2001c90c 	.word	0x2001c90c
    81f4:	f3af 8000 	nop.w
    81f8:	f3af 8000 	nop.w
    81fc:	f3af 8000 	nop.w

00008200 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    8200:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    8204:	4b05      	ldr	r3, [pc, #20]	; (821c <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
    8206:	4806      	ldr	r0, [pc, #24]	; (8220 <bcTick+0x20>)
    sample = sample * param1[v][string];
    8208:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
    820c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
    8210:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
    8214:	ee20 0a27 	vmul.f32	s0, s0, s15
    8218:	f001 bbda 	b.w	99d0 <__tCrusher_tick_veneer>
    821c:	2001cf0c 	.word	0x2001cf0c
    8220:	2001c88c 	.word	0x2001c88c
    8224:	f3af 8000 	nop.w
    8228:	f3af 8000 	nop.w
    822c:	f3af 8000 	nop.w
    8230:	f3af 8000 	nop.w
    8234:	f3af 8000 	nop.w
    8238:	f3af 8000 	nop.w
    823c:	f3af 8000 	nop.w

00008240 <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
    8240:	4b03      	ldr	r3, [pc, #12]	; (8250 <compressorTick+0x10>)
    8242:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8246:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    824a:	f001 bae1 	b.w	9810 <__tCompressor_tick_veneer>
    824e:	bf00      	nop
    8250:	2001c8cc 	.word	0x2001c8cc
    8254:	f3af 8000 	nop.w
    8258:	f3af 8000 	nop.w
    825c:	f3af 8000 	nop.w

00008260 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
    8260:	4b03      	ldr	r3, [pc, #12]	; (8270 <FXlowpassTick+0x10>)
    8262:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8266:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    826a:	f001 bbd5 	b.w	9a18 <__tSVF_tick_veneer>
    826e:	bf00      	nop
    8270:	2001c804 	.word	0x2001c804
    8274:	f3af 8000 	nop.w
    8278:	f3af 8000 	nop.w
    827c:	f3af 8000 	nop.w

00008280 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
    8280:	4b03      	ldr	r3, [pc, #12]	; (8290 <FXhighpassTick+0x10>)
    8282:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    828a:	f001 bbc5 	b.w	9a18 <__tSVF_tick_veneer>
    828e:	bf00      	nop
    8290:	2001c7e4 	.word	0x2001c7e4
    8294:	f3af 8000 	nop.w
    8298:	f3af 8000 	nop.w
    829c:	f3af 8000 	nop.w

000082a0 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
    82a0:	4b03      	ldr	r3, [pc, #12]	; (82b0 <FXbandpassTick+0x10>)
    82a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82aa:	f001 bbb5 	b.w	9a18 <__tSVF_tick_veneer>
    82ae:	bf00      	nop
    82b0:	2001c7a4 	.word	0x2001c7a4
    82b4:	f3af 8000 	nop.w
    82b8:	f3af 8000 	nop.w
    82bc:	f3af 8000 	nop.w

000082c0 <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
    82c0:	4b03      	ldr	r3, [pc, #12]	; (82d0 <FXdiodeLowpassTick+0x10>)
    82c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82ca:	f001 bc9d 	b.w	9c08 <__tDiodeFilter_tick_veneer>
    82ce:	bf00      	nop
    82d0:	2001c7c4 	.word	0x2001c7c4
    82d4:	f3af 8000 	nop.w
    82d8:	f3af 8000 	nop.w
    82dc:	f3af 8000 	nop.w

000082e0 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilterBell_tick(&FXVZfilterPeak[v][string], sample);
    82e0:	4b03      	ldr	r3, [pc, #12]	; (82f0 <FXVZpeakTick+0x10>)
    82e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    82e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    82ea:	f001 bb31 	b.w	9950 <__tVZFilterBell_tick_veneer>
    82ee:	bf00      	nop
    82f0:	2001c784 	.word	0x2001c784
    82f4:	f3af 8000 	nop.w
    82f8:	f3af 8000 	nop.w
    82fc:	f3af 8000 	nop.w

00008300 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilterLS_tick(&FXVZfilterLS[v][string], sample);
    8300:	4b03      	ldr	r3, [pc, #12]	; (8310 <FXVZlowshelfTick+0x10>)
    8302:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8306:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    830a:	f001 ba75 	b.w	97f8 <__tVZFilterLS_tick_veneer>
    830e:	bf00      	nop
    8310:	2001c764 	.word	0x2001c764
    8314:	f3af 8000 	nop.w
    8318:	f3af 8000 	nop.w
    831c:	f3af 8000 	nop.w

00008320 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilterHS_tick(&FXVZfilterHS[v][string], sample);
    8320:	4b03      	ldr	r3, [pc, #12]	; (8330 <FXVZhighshelfTick+0x10>)
    8322:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8326:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    832a:	f001 babd 	b.w	98a8 <__tVZFilterHS_tick_veneer>
    832e:	bf00      	nop
    8330:	2001c744 	.word	0x2001c744
    8334:	f3af 8000 	nop.w
    8338:	f3af 8000 	nop.w
    833c:	f3af 8000 	nop.w

00008340 <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
    8340:	4b03      	ldr	r3, [pc, #12]	; (8350 <FXVZbandrejectTick+0x10>)
    8342:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8346:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    834a:	f001 bc81 	b.w	9c50 <__tVZFilter_tickEfficient_veneer>
    834e:	bf00      	nop
    8350:	2001c724 	.word	0x2001c724
    8354:	f3af 8000 	nop.w
    8358:	f3af 8000 	nop.w
    835c:	f3af 8000 	nop.w

00008360 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
    8360:	4b03      	ldr	r3, [pc, #12]	; (8370 <FXLadderLowpassTick+0x10>)
    8362:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8366:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    836a:	f001 bb59 	b.w	9a20 <__tLadderFilter_tick_veneer>
    836e:	bf00      	nop
    8370:	2001c704 	.word	0x2001c704
    8374:	f3af 8000 	nop.w
    8378:	f3af 8000 	nop.w
    837c:	f3af 8000 	nop.w

00008380 <FXLowpassParam1>:
}
//cutoffparams

void  __ATTR_ITCMRAM FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8380:	ed9f 7a07 	vldr	s14, [pc, #28]	; 83a0 <FXLowpassParam1+0x20>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    8384:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8388:	eddf 7a06 	vldr	s15, [pc, #24]	; 83a4 <FXLowpassParam1+0x24>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
    838c:	4b06      	ldr	r3, [pc, #24]	; (83a8 <FXLowpassParam1+0x28>)
    838e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8392:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8396:	eeb0 0a67 	vmov.f32	s0, s15
    839a:	f001 b9f1 	b.w	9780 <__tSVF_setFreqFast_veneer>
    839e:	bf00      	nop
    83a0:	429a0000 	.word	0x429a0000
    83a4:	42280000 	.word	0x42280000
    83a8:	2001c804 	.word	0x2001c804
    83ac:	f3af 8000 	nop.w
    83b0:	f3af 8000 	nop.w
    83b4:	f3af 8000 	nop.w
    83b8:	f3af 8000 	nop.w
    83bc:	f3af 8000 	nop.w

000083c0 <FXHighpassParam1>:
}
void __ATTR_ITCMRAM FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    83c0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 83e0 <FXHighpassParam1+0x20>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    83c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    83c8:	eddf 7a06 	vldr	s15, [pc, #24]	; 83e4 <FXHighpassParam1+0x24>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
    83cc:	4b06      	ldr	r3, [pc, #24]	; (83e8 <FXHighpassParam1+0x28>)
    83ce:	eee0 7a07 	vfma.f32	s15, s0, s14
    83d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    83d6:	eeb0 0a67 	vmov.f32	s0, s15
    83da:	f001 b9d1 	b.w	9780 <__tSVF_setFreqFast_veneer>
    83de:	bf00      	nop
    83e0:	429a0000 	.word	0x429a0000
    83e4:	42280000 	.word	0x42280000
    83e8:	2001c7e4 	.word	0x2001c7e4
    83ec:	f3af 8000 	nop.w
    83f0:	f3af 8000 	nop.w
    83f4:	f3af 8000 	nop.w
    83f8:	f3af 8000 	nop.w
    83fc:	f3af 8000 	nop.w

00008400 <FXBandpassParam1>:
}

void __ATTR_ITCMRAM FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8400:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8420 <FXBandpassParam1+0x20>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    8404:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8408:	eddf 7a06 	vldr	s15, [pc, #24]	; 8424 <FXBandpassParam1+0x24>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
    840c:	4b06      	ldr	r3, [pc, #24]	; (8428 <FXBandpassParam1+0x28>)
    840e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8412:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8416:	eeb0 0a67 	vmov.f32	s0, s15
    841a:	f001 b9b1 	b.w	9780 <__tSVF_setFreqFast_veneer>
    841e:	bf00      	nop
    8420:	429a0000 	.word	0x429a0000
    8424:	42280000 	.word	0x42280000
    8428:	2001c7a4 	.word	0x2001c7a4
    842c:	f3af 8000 	nop.w
    8430:	f3af 8000 	nop.w
    8434:	f3af 8000 	nop.w
    8438:	f3af 8000 	nop.w
    843c:	f3af 8000 	nop.w

00008440 <FXDiodeParam1>:
}

void __ATTR_ITCMRAM FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8440:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8460 <FXDiodeParam1+0x20>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    8444:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8448:	eddf 7a06 	vldr	s15, [pc, #24]	; 8464 <FXDiodeParam1+0x24>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
    844c:	4b06      	ldr	r3, [pc, #24]	; (8468 <FXDiodeParam1+0x28>)
    844e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8452:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8456:	eeb0 0a67 	vmov.f32	s0, s15
    845a:	f001 bb11 	b.w	9a80 <__tDiodeFilter_setFreqFast_veneer>
    845e:	bf00      	nop
    8460:	429a0000 	.word	0x429a0000
    8464:	42280000 	.word	0x42280000
    8468:	2001c7c4 	.word	0x2001c7c4
    846c:	f3af 8000 	nop.w
    8470:	f3af 8000 	nop.w
    8474:	f3af 8000 	nop.w
    8478:	f3af 8000 	nop.w
    847c:	f3af 8000 	nop.w

00008480 <FXPeakParam1>:
}
void __ATTR_ITCMRAM FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8480:	ed9f 7a07 	vldr	s14, [pc, #28]	; 84a0 <FXPeakParam1+0x20>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    8484:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8488:	eddf 7a06 	vldr	s15, [pc, #24]	; 84a4 <FXPeakParam1+0x24>
	tVZFilterBell_setFreq(&FXVZfilterPeak[v][string], value);
    848c:	4b06      	ldr	r3, [pc, #24]	; (84a8 <FXPeakParam1+0x28>)
    848e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8492:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8496:	eeb0 0a67 	vmov.f32	s0, s15
    849a:	f001 bb19 	b.w	9ad0 <__tVZFilterBell_setFreq_veneer>
    849e:	bf00      	nop
    84a0:	429a0000 	.word	0x429a0000
    84a4:	42280000 	.word	0x42280000
    84a8:	2001c784 	.word	0x2001c784
    84ac:	f3af 8000 	nop.w
    84b0:	f3af 8000 	nop.w
    84b4:	f3af 8000 	nop.w
    84b8:	f3af 8000 	nop.w
    84bc:	f3af 8000 	nop.w

000084c0 <FXLowShelfParam1>:
}
void __ATTR_ITCMRAM FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    84c0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 84e0 <FXLowShelfParam1+0x20>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    84c4:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    84c8:	eddf 7a06 	vldr	s15, [pc, #24]	; 84e4 <FXLowShelfParam1+0x24>
    tVZFilterLS_setFreqFast(&FXVZfilterLS[v][string], value);
    84cc:	4b06      	ldr	r3, [pc, #24]	; (84e8 <FXLowShelfParam1+0x28>)
    84ce:	eee0 7a07 	vfma.f32	s15, s0, s14
    84d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    84d6:	eeb0 0a67 	vmov.f32	s0, s15
    84da:	f001 b9d1 	b.w	9880 <__tVZFilterLS_setFreqFast_veneer>
    84de:	bf00      	nop
    84e0:	429a0000 	.word	0x429a0000
    84e4:	42280000 	.word	0x42280000
    84e8:	2001c764 	.word	0x2001c764
    84ec:	f3af 8000 	nop.w
    84f0:	f3af 8000 	nop.w
    84f4:	f3af 8000 	nop.w
    84f8:	f3af 8000 	nop.w
    84fc:	f3af 8000 	nop.w

00008500 <FXHighShelfParam1>:
}
void __ATTR_ITCMRAM FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8500:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8520 <FXHighShelfParam1+0x20>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    8504:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8508:	eddf 7a06 	vldr	s15, [pc, #24]	; 8524 <FXHighShelfParam1+0x24>
	tVZFilterHS_setFreqFast(&FXVZfilterHS[v][string], value);
    850c:	4b06      	ldr	r3, [pc, #24]	; (8528 <FXHighShelfParam1+0x28>)
    850e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8512:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8516:	eeb0 0a67 	vmov.f32	s0, s15
    851a:	f001 bb21 	b.w	9b60 <__tVZFilterHS_setFreqFast_veneer>
    851e:	bf00      	nop
    8520:	429a0000 	.word	0x429a0000
    8524:	42280000 	.word	0x42280000
    8528:	2001c744 	.word	0x2001c744
    852c:	f3af 8000 	nop.w
    8530:	f3af 8000 	nop.w
    8534:	f3af 8000 	nop.w
    8538:	f3af 8000 	nop.w
    853c:	f3af 8000 	nop.w

00008540 <FXNotchParam1>:
}
void __ATTR_ITCMRAM FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8540:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8560 <FXNotchParam1+0x20>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    8544:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8548:	eddf 7a06 	vldr	s15, [pc, #24]	; 8564 <FXNotchParam1+0x24>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
    854c:	4b06      	ldr	r3, [pc, #24]	; (8568 <FXNotchParam1+0x28>)
    854e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8552:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8556:	eeb0 0a67 	vmov.f32	s0, s15
    855a:	f001 b97d 	b.w	9858 <__tVZFilter_setFreqFast_veneer>
    855e:	bf00      	nop
    8560:	429a0000 	.word	0x429a0000
    8564:	42280000 	.word	0x42280000
    8568:	2001c724 	.word	0x2001c724
    856c:	f3af 8000 	nop.w
    8570:	f3af 8000 	nop.w
    8574:	f3af 8000 	nop.w
    8578:	f3af 8000 	nop.w
    857c:	f3af 8000 	nop.w

00008580 <FXLadderParam1>:
}
void __ATTR_ITCMRAM FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8580:	ed9f 7a07 	vldr	s14, [pc, #28]	; 85a0 <FXLadderParam1+0x20>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    8584:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * 77.0f) + 42.0f;
    8588:	eddf 7a06 	vldr	s15, [pc, #24]	; 85a4 <FXLadderParam1+0x24>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
    858c:	4b06      	ldr	r3, [pc, #24]	; (85a8 <FXLadderParam1+0x28>)
    858e:	eee0 7a07 	vfma.f32	s15, s0, s14
    8592:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    8596:	eeb0 0a67 	vmov.f32	s0, s15
    859a:	f001 bb55 	b.w	9c48 <__tLadderFilter_setFreqFast_veneer>
    859e:	bf00      	nop
    85a0:	429a0000 	.word	0x429a0000
    85a4:	42280000 	.word	0x42280000
    85a8:	2001c704 	.word	0x2001c704
    85ac:	f3af 8000 	nop.w
    85b0:	f3af 8000 	nop.w
    85b4:	f3af 8000 	nop.w
    85b8:	f3af 8000 	nop.w
    85bc:	f3af 8000 	nop.w

000085c0 <FXPeakParam2>:

//gain params

void __ATTR_ITCMRAM FXPeakParam2(float value, int v, int string)
{
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    85c0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    85c4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 85ec <FXPeakParam2+0x2c>
{
    85c8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    85ca:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    85ce:	4605      	mov	r5, r0
    85d0:	460c      	mov	r4, r1
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    85d2:	eeb0 0a67 	vmov.f32	s0, s15
    85d6:	f001 fa47 	bl	9a68 <__dbToATableLookup_veneer>
    85da:	4b05      	ldr	r3, [pc, #20]	; (85f0 <FXPeakParam2+0x30>)
    85dc:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    85e0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    85e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilterBell_setGain(&FXVZfilterPeak[v][string], dbToATableLookup((value * 50.f) - 25.f));
    85e8:	f001 ba7e 	b.w	9ae8 <__tVZFilterBell_setGain_veneer>
    85ec:	42480000 	.word	0x42480000
    85f0:	2001c784 	.word	0x2001c784
    85f4:	f3af 8000 	nop.w
    85f8:	f3af 8000 	nop.w
    85fc:	f3af 8000 	nop.w

00008600 <FXLowShelfParam2>:

void __ATTR_ITCMRAM FXLowShelfParam2(float value, int v, int string)
{
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8600:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8604:	ed9f 7a09 	vldr	s14, [pc, #36]	; 862c <FXLowShelfParam2+0x2c>
{
    8608:	b538      	push	{r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    860a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    860e:	4605      	mov	r5, r0
    8610:	460c      	mov	r4, r1
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8612:	eeb0 0a67 	vmov.f32	s0, s15
    8616:	f001 fa27 	bl	9a68 <__dbToATableLookup_veneer>
    861a:	4b05      	ldr	r3, [pc, #20]	; (8630 <FXLowShelfParam2+0x30>)
    861c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8620:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterLS_setGain(&FXVZfilterLS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8628:	f001 bab2 	b.w	9b90 <__tVZFilterLS_setGain_veneer>
    862c:	42480000 	.word	0x42480000
    8630:	2001c764 	.word	0x2001c764
    8634:	f3af 8000 	nop.w
    8638:	f3af 8000 	nop.w
    863c:	f3af 8000 	nop.w

00008640 <FXHighShelfParam2>:

void __ATTR_ITCMRAM FXHighShelfParam2(float value, int v, int string)
{
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8640:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8644:	ed9f 7a09 	vldr	s14, [pc, #36]	; 866c <FXHighShelfParam2+0x2c>
{
    8648:	b538      	push	{r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    864a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    864e:	4605      	mov	r5, r0
    8650:	460c      	mov	r4, r1
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8652:	eeb0 0a67 	vmov.f32	s0, s15
    8656:	f001 fa07 	bl	9a68 <__dbToATableLookup_veneer>
    865a:	4b05      	ldr	r3, [pc, #20]	; (8670 <FXHighShelfParam2+0x30>)
    865c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    8660:	eb03 0080 	add.w	r0, r3, r0, lsl #2
}
    8664:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilterHS_setGain(&FXVZfilterHS[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8668:	f001 ba46 	b.w	9af8 <__tVZFilterHS_setGain_veneer>
    866c:	42480000 	.word	0x42480000
    8670:	2001c744 	.word	0x2001c744
    8674:	f3af 8000 	nop.w
    8678:	f3af 8000 	nop.w
    867c:	f3af 8000 	nop.w

00008680 <FXNotchParam2>:

void __ATTR_ITCMRAM FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8680:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
    8684:	ed9f 7a09 	vldr	s14, [pc, #36]	; 86ac <FXNotchParam2+0x2c>
{
    8688:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    868a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    868e:	4605      	mov	r5, r0
    8690:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    8692:	eeb0 0a67 	vmov.f32	s0, s15
    8696:	f001 f9e7 	bl	9a68 <__dbToATableLookup_veneer>
    869a:	4b05      	ldr	r3, [pc, #20]	; (86b0 <FXNotchParam2+0x30>)
    869c:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    86a0:	eb03 0080 	add.w	r0, r3, r0, lsl #2

}
    86a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], dbToATableLookup((value * 50.f) - 25.f));
    86a8:	f001 b966 	b.w	9978 <__tVZFilter_setGain_veneer>
    86ac:	42480000 	.word	0x42480000
    86b0:	2001c724 	.word	0x2001c724
    86b4:	f3af 8000 	nop.w
    86b8:	f3af 8000 	nop.w
    86bc:	f3af 8000 	nop.w

000086c0 <FXLowpassParam3>:
//resonance params
void __ATTR_ITCMRAM FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
    86c0:	4b03      	ldr	r3, [pc, #12]	; (86d0 <FXLowpassParam3+0x10>)
    86c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    86c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    86ca:	f001 b8a9 	b.w	9820 <__tSVF_setQ_veneer>
    86ce:	bf00      	nop
    86d0:	2001c804 	.word	0x2001c804
    86d4:	f3af 8000 	nop.w
    86d8:	f3af 8000 	nop.w
    86dc:	f3af 8000 	nop.w

000086e0 <FXHighpassParam3>:
}

void __ATTR_ITCMRAM FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
    86e0:	4b03      	ldr	r3, [pc, #12]	; (86f0 <FXHighpassParam3+0x10>)
    86e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    86e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    86ea:	f001 b899 	b.w	9820 <__tSVF_setQ_veneer>
    86ee:	bf00      	nop
    86f0:	2001c7e4 	.word	0x2001c7e4
    86f4:	f3af 8000 	nop.w
    86f8:	f3af 8000 	nop.w
    86fc:	f3af 8000 	nop.w

00008700 <FXBandpassParam3>:
}

void __ATTR_ITCMRAM FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
    8700:	4b03      	ldr	r3, [pc, #12]	; (8710 <FXBandpassParam3+0x10>)
    8702:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8706:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    870a:	f001 b889 	b.w	9820 <__tSVF_setQ_veneer>
    870e:	bf00      	nop
    8710:	2001c7a4 	.word	0x2001c7a4
    8714:	f3af 8000 	nop.w
    8718:	f3af 8000 	nop.w
    871c:	f3af 8000 	nop.w

00008720 <FXDiodeParam3>:
}

void __ATTR_ITCMRAM FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
    8720:	4b03      	ldr	r3, [pc, #12]	; (8730 <FXDiodeParam3+0x10>)
    8722:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8726:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    872a:	f001 b97d 	b.w	9a28 <__tDiodeFilter_setQ_veneer>
    872e:	bf00      	nop
    8730:	2001c7c4 	.word	0x2001c7c4
    8734:	f3af 8000 	nop.w
    8738:	f3af 8000 	nop.w
    873c:	f3af 8000 	nop.w

00008740 <FXPeakParam3>:
}


void __ATTR_ITCMRAM FXPeakParam3(float value, int v, int string)
{
	tVZFilterBell_setBandwidth(&FXVZfilterPeak[v][string], value);
    8740:	4b03      	ldr	r3, [pc, #12]	; (8750 <FXPeakParam3+0x10>)
    8742:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8746:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    874a:	f001 b9b1 	b.w	9ab0 <__tVZFilterBell_setBandwidth_veneer>
    874e:	bf00      	nop
    8750:	2001c784 	.word	0x2001c784
    8754:	f3af 8000 	nop.w
    8758:	f3af 8000 	nop.w
    875c:	f3af 8000 	nop.w

00008760 <FXLowShelfParam3>:
}


void __ATTR_ITCMRAM FXLowShelfParam3(float value, int v, int string)
{
	tVZFilterLS_setResonance(&FXVZfilterLS[v][string], value);
    8760:	4b03      	ldr	r3, [pc, #12]	; (8770 <FXLowShelfParam3+0x10>)
    8762:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8766:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    876a:	f001 b895 	b.w	9898 <__tVZFilterLS_setResonance_veneer>
    876e:	bf00      	nop
    8770:	2001c764 	.word	0x2001c764
    8774:	f3af 8000 	nop.w
    8778:	f3af 8000 	nop.w
    877c:	f3af 8000 	nop.w

00008780 <FXHighShelfParam3>:
}


void __ATTR_ITCMRAM FXHighShelfParam3(float value, int v, int string)
{
	tVZFilterHS_setResonance(&FXVZfilterHS[v][string], value);
    8780:	4b03      	ldr	r3, [pc, #12]	; (8790 <FXHighShelfParam3+0x10>)
    8782:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    8786:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    878a:	f001 b8c5 	b.w	9918 <__tVZFilterHS_setResonance_veneer>
    878e:	bf00      	nop
    8790:	2001c744 	.word	0x2001c744
    8794:	f3af 8000 	nop.w
    8798:	f3af 8000 	nop.w
    879c:	f3af 8000 	nop.w

000087a0 <FXNotchParam3>:
}


void __ATTR_ITCMRAM FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
    87a0:	4b03      	ldr	r3, [pc, #12]	; (87b0 <FXNotchParam3+0x10>)
    87a2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    87a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    87aa:	f001 b941 	b.w	9a30 <__tVZFilter_setResonance_veneer>
    87ae:	bf00      	nop
    87b0:	2001c724 	.word	0x2001c724
    87b4:	f3af 8000 	nop.w
    87b8:	f3af 8000 	nop.w
    87bc:	f3af 8000 	nop.w

000087c0 <FXLadderParam3>:
}


void __ATTR_ITCMRAM FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
    87c0:	4b03      	ldr	r3, [pc, #12]	; (87d0 <FXLadderParam3+0x10>)
    87c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    87c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    87ca:	f001 ba09 	b.w	9be0 <__tLadderFilter_setQ_veneer>
    87ce:	bf00      	nop
    87d0:	2001c704 	.word	0x2001c704
    87d4:	f3af 8000 	nop.w
    87d8:	f3af 8000 	nop.w
    87dc:	f3af 8000 	nop.w

000087e0 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
    87e0:	b510      	push	{r4, lr}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    87e2:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
    87e6:	008c      	lsls	r4, r1, #2
{
    87e8:	ed2d 8b02 	vpush	{d8}
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    87ec:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
    87f0:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilterLS_setGain(&noiseShelf1[string], dbToATableLookup(-1.0f * ((value * 30.0f) - 15.0f)));
    87f4:	eee0 7a68 	vfms.f32	s15, s0, s17
    87f8:	eeb0 0a67 	vmov.f32	s0, s15
    87fc:	f001 f934 	bl	9a68 <__dbToATableLookup_veneer>
    8800:	4808      	ldr	r0, [pc, #32]	; (8824 <noiseSetTilt+0x44>)
    8802:	4420      	add	r0, r4
    8804:	f001 f9c4 	bl	9b90 <__tVZFilterLS_setGain_veneer>
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8808:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
    880c:	eea8 0a28 	vfma.f32	s0, s16, s17
    8810:	f001 f92a 	bl	9a68 <__dbToATableLookup_veneer>
    8814:	4804      	ldr	r0, [pc, #16]	; (8828 <noiseSetTilt+0x48>)
}
    8816:	ecbd 8b02 	vpop	{d8}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    881a:	4420      	add	r0, r4
}
    881c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterHS_setGain(&noiseShelf2[string], dbToATableLookup((value * 30.0f) - 15.0f));
    8820:	f001 b96a 	b.w	9af8 <__tVZFilterHS_setGain_veneer>
    8824:	2001ce90 	.word	0x2001ce90
    8828:	2001ce98 	.word	0x2001ce98
    882c:	f3af 8000 	nop.w
    8830:	f3af 8000 	nop.w
    8834:	f3af 8000 	nop.w
    8838:	f3af 8000 	nop.w
    883c:	f3af 8000 	nop.w

00008840 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8840:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
    8844:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8868 <noiseSetGain+0x28>
{
    8848:	b510      	push	{r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    884a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    884e:	460c      	mov	r4, r1
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8850:	eeb0 0a67 	vmov.f32	s0, s15
    8854:	f001 f908 	bl	9a68 <__dbToATableLookup_veneer>
    8858:	4804      	ldr	r0, [pc, #16]	; (886c <noiseSetGain+0x2c>)
    885a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
    885e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setGain(&noiseBell1[string], dbToATableLookup((value* 34.0f) - 17.0f));
    8862:	f001 b941 	b.w	9ae8 <__tVZFilterBell_setGain_veneer>
    8866:	bf00      	nop
    8868:	42080000 	.word	0x42080000
    886c:	2001ce74 	.word	0x2001ce74
    8870:	f3af 8000 	nop.w
    8874:	f3af 8000 	nop.w
    8878:	f3af 8000 	nop.w
    887c:	f3af 8000 	nop.w

00008880 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    8880:	ed9f 7a09 	vldr	s14, [pc, #36]	; 88a8 <noiseSetFreq+0x28>
    8884:	eddf 7a09 	vldr	s15, [pc, #36]	; 88ac <noiseSetFreq+0x2c>
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    8888:	eee0 7a07 	vfma.f32	s15, s0, s14
{
    888c:	b510      	push	{r4, lr}
    888e:	460c      	mov	r4, r1
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    8890:	eeb0 0a67 	vmov.f32	s0, s15
    8894:	f001 f824 	bl	98e0 <__faster_mtof_veneer>
    8898:	4805      	ldr	r0, [pc, #20]	; (88b0 <noiseSetFreq+0x30>)
    889a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	//value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);

}
    889e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilterBell_setFreq(&noiseBell1[string], faster_mtof(value));
    88a2:	f001 b915 	b.w	9ad0 <__tVZFilterBell_setFreq_veneer>
    88a6:	bf00      	nop
    88a8:	429a0000 	.word	0x429a0000
    88ac:	42280000 	.word	0x42280000
    88b0:	2001ce74 	.word	0x2001ce74
    88b4:	f3af 8000 	nop.w
    88b8:	f3af 8000 	nop.w
    88bc:	f3af 8000 	nop.w

000088c0 <noise_tick>:


void __ATTR_ITCMRAM noise_tick(int string)
{
    88c0:	b538      	push	{r3, r4, r5, lr}
	float enabled = params[Noise].realVal[string];
    88c2:	4b25      	ldr	r3, [pc, #148]	; (8958 <noise_tick+0x98>)
{
    88c4:	4604      	mov	r4, r0
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
    88c6:	4d25      	ldr	r5, [pc, #148]	; (895c <noise_tick+0x9c>)
	float enabled = params[Noise].realVal[string];
    88c8:	eb03 0280 	add.w	r2, r3, r0, lsl #2
	float sample = random_values[randomValPointer++];
    88cc:	4924      	ldr	r1, [pc, #144]	; (8960 <noise_tick+0xa0>)
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    88ce:	4825      	ldr	r0, [pc, #148]	; (8964 <noise_tick+0xa4>)
	float filterSend = params[NoiseFilterSend].realVal[string];
    88d0:	4613      	mov	r3, r2
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    88d2:	eb00 0084 	add.w	r0, r0, r4, lsl #2
{
    88d6:	ed2d 8b04 	vpush	{d8-d9}
	float enabled = params[Noise].realVal[string];
    88da:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float amp = params[NoiseAmp].realVal[string];
    88de:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	float sample = random_values[randomValPointer++];
    88e2:	782a      	ldrb	r2, [r5, #0]
	float filterSend = params[NoiseFilterSend].realVal[string];
    88e4:	ed93 8aa3 	vldr	s16, [r3, #652]	; 0x28c
	float sample = random_values[randomValPointer++];
    88e8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    88ec:	3201      	adds	r2, #1
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    88ee:	ed91 0a00 	vldr	s0, [r1]
	float sample = random_values[randomValPointer++];
    88f2:	702a      	strb	r2, [r5, #0]
	sample = tVZFilterLS_tick(&noiseShelf1[string], sample);
    88f4:	f000 ff80 	bl	97f8 <__tVZFilterLS_tick_veneer>
	sample = tVZFilterHS_tick(&noiseShelf2[string], sample);
    88f8:	00a5      	lsls	r5, r4, #2
    88fa:	481b      	ldr	r0, [pc, #108]	; (8968 <noise_tick+0xa8>)
    88fc:	4428      	add	r0, r5
    88fe:	f000 ffd3 	bl	98a8 <__tVZFilterHS_tick_veneer>
	sample = tVZFilterBell_tick(&noiseBell1[string], sample);
    8902:	481a      	ldr	r0, [pc, #104]	; (896c <noise_tick+0xac>)
    8904:	4428      	add	r0, r5
    8906:	f001 f823 	bl	9950 <__tVZFilterBell_tick_veneer>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
    890a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
    890e:	ed9f 6a18 	vldr	s12, [pc, #96]	; 8970 <noise_tick+0xb0>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8912:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
    8916:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	noiseOuts[0][string] = sample * filterSend *  enabled;
    891a:	4b16      	ldr	r3, [pc, #88]	; (8974 <noise_tick+0xb4>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    891c:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
    8920:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
    8924:	ee28 0a80 	vmul.f32	s0, s17, s0
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    8928:	4a13      	ldr	r2, [pc, #76]	; (8978 <noise_tick+0xb8>)
	noiseOuts[0][string] = sample * filterSend *  enabled;
    892a:	441d      	add	r5, r3
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    892c:	ee28 8a09 	vmul.f32	s16, s16, s18
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    8930:	eb02 0284 	add.w	r2, r2, r4, lsl #2
	float normSample = (sample + 1.f) * 0.5f;
    8934:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8938:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    893c:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
    8940:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
    8944:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
    8948:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
    894c:	edc2 7a06 	vstr	s15, [r2, #24]
}
    8950:	ecbd 8b04 	vpop	{d8-d9}
    8954:	bd38      	pop	{r3, r4, r5, pc}
    8956:	bf00      	nop
    8958:	20018bcc 	.word	0x20018bcc
    895c:	2001d000 	.word	0x2001d000
    8960:	20019d10 	.word	0x20019d10
    8964:	2001ce90 	.word	0x2001ce90
    8968:	2001ce98 	.word	0x2001ce98
    896c:	2001ce74 	.word	0x2001ce74
    8970:	00000000 	.word	0x00000000
    8974:	2001ce80 	.word	0x2001ce80
    8978:	2001d0f0 	.word	0x2001d0f0
    897c:	f3af 8000 	nop.w

00008980 <audioTickSynth>:
{
    8980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountTick = DWT->CYCCNT;
    8984:	4cbe      	ldr	r4, [pc, #760]	; (8c80 <audioTickSynth+0x300>)
    8986:	4dbf      	ldr	r5, [pc, #764]	; (8c84 <audioTickSynth+0x304>)
    8988:	f8df a37c 	ldr.w	sl, [pc, #892]	; 8d08 <audioTickSynth+0x388>
    898c:	f8df b37c 	ldr.w	fp, [pc, #892]	; 8d0c <audioTickSynth+0x38c>
    8990:	f10a 0830 	add.w	r8, sl, #48	; 0x30
    8994:	f8df 9378 	ldr.w	r9, [pc, #888]	; 8d10 <audioTickSynth+0x390>
{
    8998:	ed2d 8b06 	vpush	{d8-d10}
    899c:	b091      	sub	sp, #68	; 0x44
    899e:	af00      	add	r7, sp, #0
	uint32_t tempCountTick = DWT->CYCCNT;
    89a0:	6863      	ldr	r3, [r4, #4]
    89a2:	60bb      	str	r3, [r7, #8]
	uint32_t tempCountMap = DWT->CYCCNT;
    89a4:	6866      	ldr	r6, [r4, #4]
	tickMappings();
    89a6:	f7fe fb5b 	bl	7060 <tickMappings>
	timeMap = DWT->CYCCNT - tempCountMap;
    89aa:	6863      	ldr	r3, [r4, #4]
    89ac:	4ab6      	ldr	r2, [pc, #728]	; (8c88 <audioTickSynth+0x308>)
    89ae:	1b9b      	subs	r3, r3, r6
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    89b0:	48b6      	ldr	r0, [pc, #728]	; (8c8c <audioTickSynth+0x30c>)
    89b2:	462e      	mov	r6, r5
	timeMap = DWT->CYCCNT - tempCountMap;
    89b4:	6013      	str	r3, [r2, #0]
	uint32_t tempSmoothing = DWT->CYCCNT;
    89b6:	6863      	ldr	r3, [r4, #4]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    89b8:	462c      	mov	r4, r5
	uint32_t tempSmoothing = DWT->CYCCNT;
    89ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    89bc:	f001 f828 	bl	9a10 <__tExpSmooth_tick_veneer>
    89c0:	eef0 8a40 	vmov.f32	s17, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    89c4:	4658      	mov	r0, fp
    89c6:	f001 f823 	bl	9a10 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    89ca:	f899 3000 	ldrb.w	r3, [r9]
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    89ce:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    89d2:	b12b      	cbz	r3, 89e0 <audioTickSynth+0x60>
    89d4:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    89d6:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
    89da:	d001      	beq.n	89e0 <audioTickSynth+0x60>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
    89dc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
    89e0:	45c2      	cmp	sl, r8
    89e2:	f10b 0b04 	add.w	fp, fp, #4
    89e6:	f104 0408 	add.w	r4, r4, #8
    89ea:	d1eb      	bne.n	89c4 <audioTickSynth+0x44>
    89ec:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8d14 <audioTickSynth+0x394>
    89f0:	f8df a324 	ldr.w	sl, [pc, #804]	; 8d18 <audioTickSynth+0x398>
    89f4:	f108 0428 	add.w	r4, r8, #40	; 0x28
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    89f8:	4650      	mov	r0, sl
    89fa:	f001 f809 	bl	9a10 <__tExpSmooth_tick_veneer>
		for (int v = 0; v < numStringsThisBoard; v++)
    89fe:	f899 3000 	ldrb.w	r3, [r9]
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
    8a02:	eca8 0a01 	vstmia	r8!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
    8a06:	b12b      	cbz	r3, 8a14 <audioTickSynth+0x94>
    8a08:	2b01      	cmp	r3, #1
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    8a0a:	ed85 0a38 	vstr	s0, [r5, #224]	; 0xe0
		for (int v = 0; v < numStringsThisBoard; v++)
    8a0e:	d001      	beq.n	8a14 <audioTickSynth+0x94>
			sourceValues[PEDAL_SOURCE_OFFSET + i][v] = pedalScaled[i];
    8a10:	ed85 0a39 	vstr	s0, [r5, #228]	; 0xe4
	for (int i = 0; i < 10; i++)
    8a14:	45a0      	cmp	r8, r4
    8a16:	f10a 0a04 	add.w	sl, sl, #4
    8a1a:	f105 0508 	add.w	r5, r5, #8
    8a1e:	d1eb      	bne.n	89f8 <audioTickSynth+0x78>
	for (int v = 0; v < numStringsThisBoard; v++)
    8a20:	2b00      	cmp	r3, #0
    8a22:	f000 828d 	beq.w	8f40 <audioTickSynth+0x5c0>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8a26:	4a9a      	ldr	r2, [pc, #616]	; (8c90 <audioTickSynth+0x310>)
	for (int v = 0; v < numStringsThisBoard; v++)
    8a28:	2b01      	cmp	r3, #1
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8a2a:	6812      	ldr	r2, [r2, #0]
    8a2c:	f8c6 2080 	str.w	r2, [r6, #128]	; 0x80
	for (int v = 0; v < numStringsThisBoard; v++)
    8a30:	d001      	beq.n	8a36 <audioTickSynth+0xb6>
		sourceValues[EXPRESSION_PEDAL_SOURCE_OFFSET][v] = volumePedal;
    8a32:	f8c6 2084 	str.w	r2, [r6, #132]	; 0x84
	float note[numStringsThisBoard];
    8a36:	009b      	lsls	r3, r3, #2
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8a38:	f8df b244 	ldr.w	fp, [pc, #580]	; 8c80 <audioTickSynth+0x300>
    8a3c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
	float note[numStringsThisBoard];
    8a3e:	3307      	adds	r3, #7
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8a40:	f8db 2004 	ldr.w	r2, [fp, #4]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8a44:	ed9f 9a93 	vldr	s18, [pc, #588]	; 8c94 <audioTickSynth+0x314>
	float note[numStringsThisBoard];
    8a48:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8a4c:	1a52      	subs	r2, r2, r1
		float sample = 0.0f;
    8a4e:	eef0 9a49 	vmov.f32	s19, s18
    8a52:	ed9f aa91 	vldr	s20, [pc, #580]	; 8c98 <audioTickSynth+0x318>
	float note[numStringsThisBoard];
    8a56:	ebad 0d03 	sub.w	sp, sp, r3
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8a5a:	4b90      	ldr	r3, [pc, #576]	; (8c9c <audioTickSynth+0x31c>)
    8a5c:	601a      	str	r2, [r3, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8a5e:	4b90      	ldr	r3, [pc, #576]	; (8ca0 <audioTickSynth+0x320>)
    8a60:	4a90      	ldr	r2, [pc, #576]	; (8ca4 <audioTickSynth+0x324>)
    8a62:	62bb      	str	r3, [r7, #40]	; 0x28
    8a64:	f8db 3004 	ldr.w	r3, [fp, #4]
    8a68:	623a      	str	r2, [r7, #32]
    8a6a:	4a8f      	ldr	r2, [pc, #572]	; (8ca8 <audioTickSynth+0x328>)
    8a6c:	607b      	str	r3, [r7, #4]
    8a6e:	2300      	movs	r3, #0
    8a70:	61ba      	str	r2, [r7, #24]
    8a72:	4a8e      	ldr	r2, [pc, #568]	; (8cac <audioTickSynth+0x32c>)
    8a74:	469a      	mov	sl, r3
    8a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    8a78:	627a      	str	r2, [r7, #36]	; 0x24
    8a7a:	4a8d      	ldr	r2, [pc, #564]	; (8cb0 <audioTickSynth+0x330>)
    8a7c:	f8c7 d014 	str.w	sp, [r7, #20]
    8a80:	61fa      	str	r2, [r7, #28]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8a82:	4b8c      	ldr	r3, [pc, #560]	; (8cb4 <audioTickSynth+0x334>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8a84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8a86:	edd3 7a00 	vldr	s15, [r3]
    8a8a:	4b8b      	ldr	r3, [pc, #556]	; (8cb8 <audioTickSynth+0x338>)
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8a8c:	4a8b      	ldr	r2, [pc, #556]	; (8cbc <audioTickSynth+0x33c>)
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8a8e:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8a92:	4b8b      	ldr	r3, [pc, #556]	; (8cc0 <audioTickSynth+0x340>)
    8a94:	440a      	add	r2, r1
		float sample = 0.0f;
    8a96:	edc7 9a0d 	vstr	s19, [r7, #52]	; 0x34
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8a9a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
    8a9e:	edd2 6a00 	vldr	s13, [r2]
		uint32_t tempCountGettingNote = DWT->CYCCNT;
    8aa2:	f8db 2004 	ldr.w	r2, [fp, #4]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8aa6:	ed93 8a00 	vldr	s16, [r3]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8aaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
		note[v] = stringMIDIPitches[v] + stringOctave[v];
    8aac:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
    8ab0:	697b      	ldr	r3, [r7, #20]
    8ab2:	460d      	mov	r5, r1
    8ab4:	ee78 7a67 	vsub.f32	s15, s16, s15
    8ab8:	fe88 8a4a 	vminnm.f32	s16, s16, s20
    8abc:	fe88 8a29 	vmaxnm.f32	s16, s16, s19
    8ac0:	eca3 8a01 	vstmia	r3!, {s16}
    8ac4:	617b      	str	r3, [r7, #20]
    8ac6:	ee67 7a87 	vmul.f32	s15, s15, s14
    8aca:	edc1 7a00 	vstr	s15, [r1]
		timeGettingNote = DWT->CYCCNT - tempCountGettingNote;
    8ace:	f8db 3004 	ldr.w	r3, [fp, #4]
    8ad2:	1a9b      	subs	r3, r3, r2
    8ad4:	4a7b      	ldr	r2, [pc, #492]	; (8cc4 <audioTickSynth+0x344>)
    8ad6:	6013      	str	r3, [r2, #0]
    8ad8:	1d0a      	adds	r2, r1, #4
		if (envOn[v])
    8ada:	4b7b      	ldr	r3, [pc, #492]	; (8cc8 <audioTickSynth+0x348>)
    8adc:	62ba      	str	r2, [r7, #40]	; 0x28
    8ade:	781b      	ldrb	r3, [r3, #0]
		uint32_t tempCountEnv = DWT->CYCCNT;
    8ae0:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (envOn[v])
    8ae4:	2b00      	cmp	r3, #0
    8ae6:	f040 8206 	bne.w	8ef6 <audioTickSynth+0x576>
    8aea:	4b77      	ldr	r3, [pc, #476]	; (8cc8 <audioTickSynth+0x348>)
    8aec:	785b      	ldrb	r3, [r3, #1]
    8aee:	2b00      	cmp	r3, #0
    8af0:	f040 81f8 	bne.w	8ee4 <audioTickSynth+0x564>
    8af4:	4b74      	ldr	r3, [pc, #464]	; (8cc8 <audioTickSynth+0x348>)
    8af6:	789b      	ldrb	r3, [r3, #2]
    8af8:	2b00      	cmp	r3, #0
    8afa:	f040 81ea 	bne.w	8ed2 <audioTickSynth+0x552>
    8afe:	4b72      	ldr	r3, [pc, #456]	; (8cc8 <audioTickSynth+0x348>)
    8b00:	78db      	ldrb	r3, [r3, #3]
    8b02:	2b00      	cmp	r3, #0
    8b04:	f040 81dc 	bne.w	8ec0 <audioTickSynth+0x540>
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8b08:	f8db 3004 	ldr.w	r3, [fp, #4]
    8b0c:	3d88      	subs	r5, #136	; 0x88
    8b0e:	4a6f      	ldr	r2, [pc, #444]	; (8ccc <audioTickSynth+0x34c>)
    8b10:	1b1b      	subs	r3, r3, r4
    8b12:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8d1c <audioTickSynth+0x39c>
		uint32_t tempCountLFO = DWT->CYCCNT;
    8b16:	4c6e      	ldr	r4, [pc, #440]	; (8cd0 <audioTickSynth+0x350>)
		timeEnv = DWT->CYCCNT - tempCountEnv;
    8b18:	6013      	str	r3, [r2, #0]
		uint32_t tempCountLFO = DWT->CYCCNT;
    8b1a:	f8db 6004 	ldr.w	r6, [fp, #4]
			float sample = 0.0f;
    8b1e:	4b6c      	ldr	r3, [pc, #432]	; (8cd0 <audioTickSynth+0x350>)
			lfoShapeTick[i](&sample,i, string);
    8b20:	4652      	mov	r2, sl
    8b22:	f107 0038 	add.w	r0, r7, #56	; 0x38
    8b26:	1ae1      	subs	r1, r4, r3
		if (lfoOn[i])
    8b28:	f814 3b01 	ldrb.w	r3, [r4], #1
    8b2c:	b13b      	cbz	r3, 8b3e <audioTickSynth+0x1be>
			lfoShapeTick[i](&sample,i, string);
    8b2e:	f8d8 3000 	ldr.w	r3, [r8]
			float sample = 0.0f;
    8b32:	edc7 9a0e 	vstr	s19, [r7, #56]	; 0x38
			lfoShapeTick[i](&sample,i, string);
    8b36:	4798      	blx	r3
			sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
    8b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    8b3a:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
    8b3e:	4b65      	ldr	r3, [pc, #404]	; (8cd4 <audioTickSynth+0x354>)
    8b40:	f108 0804 	add.w	r8, r8, #4
    8b44:	3508      	adds	r5, #8
    8b46:	429c      	cmp	r4, r3
    8b48:	d1e9      	bne.n	8b1e <audioTickSynth+0x19e>
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8b4a:	f8db 3004 	ldr.w	r3, [fp, #4]
		oscillator_tick(note[v], v);
    8b4e:	eeb0 0a48 	vmov.f32	s0, s16
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8b52:	4a61      	ldr	r2, [pc, #388]	; (8cd8 <audioTickSynth+0x358>)
		oscillator_tick(note[v], v);
    8b54:	4650      	mov	r0, sl
		timeLFO = DWT->CYCCNT - tempCountLFO;
    8b56:	1b9b      	subs	r3, r3, r6
    8b58:	6013      	str	r3, [r2, #0]
		uint32_t tempCountOsc = DWT->CYCCNT;
    8b5a:	f8db 4004 	ldr.w	r4, [fp, #4]
		oscillator_tick(note[v], v);
    8b5e:	f7fd fa2f 	bl	5fc0 <oscillator_tick>
		timeOsc = DWT->CYCCNT - tempCountOsc;
    8b62:	f8db 3004 	ldr.w	r3, [fp, #4]
    8b66:	4a5d      	ldr	r2, [pc, #372]	; (8cdc <audioTickSynth+0x35c>)
    8b68:	1b1b      	subs	r3, r3, r4
    8b6a:	6013      	str	r3, [r2, #0]
		if (noiseOn)
    8b6c:	4b5c      	ldr	r3, [pc, #368]	; (8ce0 <audioTickSynth+0x360>)
		uint32_t tempCountNoise = DWT->CYCCNT;
    8b6e:	f8db 4004 	ldr.w	r4, [fp, #4]
		if (noiseOn)
    8b72:	781b      	ldrb	r3, [r3, #0]
    8b74:	2b00      	cmp	r3, #0
    8b76:	f040 819f 	bne.w	8eb8 <audioTickSynth+0x538>
		timeNoise = DWT->CYCCNT - tempCountNoise;
    8b7a:	f8db 3004 	ldr.w	r3, [fp, #4]
    8b7e:	4a59      	ldr	r2, [pc, #356]	; (8ce4 <audioTickSynth+0x364>)
    8b80:	1b1b      	subs	r3, r3, r4
    8b82:	6013      	str	r3, [r2, #0]
		for (int i = 0; i < oscToTick; i++)
    8b84:	4b58      	ldr	r3, [pc, #352]	; (8ce8 <audioTickSynth+0x368>)
    8b86:	781b      	ldrb	r3, [r3, #0]
    8b88:	2b00      	cmp	r3, #0
    8b8a:	f000 81c9 	beq.w	8f20 <audioTickSynth+0x5a0>
			filterSamps[0] += oscOuts[0][i][v];
    8b8e:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
    8b90:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
    8b92:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
    8b96:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
    8b9a:	d011      	beq.n	8bc0 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    8b9c:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
    8ba0:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
    8ba2:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
    8ba6:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    8baa:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
    8bae:	d007      	beq.n	8bc0 <audioTickSynth+0x240>
			filterSamps[0] += oscOuts[0][i][v];
    8bb0:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
    8bb4:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
    8bb8:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
    8bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
    8bc0:	69bb      	ldr	r3, [r7, #24]
		sample = filter_tick(&filterSamps[0], note[v], v);
    8bc2:	eeb0 0a48 	vmov.f32	s0, s16
    8bc6:	4651      	mov	r1, sl
    8bc8:	f107 0038 	add.w	r0, r7, #56	; 0x38
		filterSamps[0] += noiseOuts[0][v];
    8bcc:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
    8bd0:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
    8bd4:	ee76 6a86 	vadd.f32	s13, s13, s12
    8bd8:	61bb      	str	r3, [r7, #24]
		filterSamps[1] += noiseOuts[1][v];
    8bda:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
    8bde:	edc7 6a0e 	vstr	s13, [r7, #56]	; 0x38
		filterSamps[1] += noiseOuts[1][v];
    8be2:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		uint32_t tempCountFilt = DWT->CYCCNT;
    8be6:	f8db 4004 	ldr.w	r4, [fp, #4]
		sample = filter_tick(&filterSamps[0], note[v], v);
    8bea:	f7fd fcb9 	bl	6560 <filter_tick>
    8bee:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
    8bf2:	eeb0 8a40 	vmov.f32	s16, s0
		timeFilt = DWT->CYCCNT - tempCountFilt;
    8bf6:	f8db 3004 	ldr.w	r3, [fp, #4]
    8bfa:	4a3c      	ldr	r2, [pc, #240]	; (8cec <audioTickSynth+0x36c>)
    8bfc:	1b1b      	subs	r3, r3, r4
    8bfe:	6013      	str	r3, [r2, #0]
		if (fxPre)
    8c00:	4b3b      	ldr	r3, [pc, #236]	; (8cf0 <audioTickSynth+0x370>)
    8c02:	781b      	ldrb	r3, [r3, #0]
    8c04:	b133      	cbz	r3, 8c14 <audioTickSynth+0x294>
			sample *= amplitude[v];
    8c06:	6a3b      	ldr	r3, [r7, #32]
    8c08:	edd3 7a00 	vldr	s15, [r3]
    8c0c:	ee20 8a27 	vmul.f32	s16, s0, s15
    8c10:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
		if (overSampled)
    8c14:	4b37      	ldr	r3, [pc, #220]	; (8cf4 <audioTickSynth+0x374>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8c16:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
		if (overSampled)
    8c1a:	681c      	ldr	r4, [r3, #0]
		uint32_t tempCountOS = DWT->CYCCNT;
    8c1c:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c20:	613b      	str	r3, [r7, #16]
		if (overSampled)
    8c22:	2c00      	cmp	r4, #0
    8c24:	f040 80fe 	bne.w	8e24 <audioTickSynth+0x4a4>
    8c28:	4a33      	ldr	r2, [pc, #204]	; (8cf8 <audioTickSynth+0x378>)
    8c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c2c:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 8d20 <audioTickSynth+0x3a0>
    8c30:	18d6      	adds	r6, r2, r3
    8c32:	4a32      	ldr	r2, [pc, #200]	; (8cfc <audioTickSynth+0x37c>)
    8c34:	18d5      	adds	r5, r2, r3
				if (effectsActive[i])
    8c36:	f818 3b01 	ldrb.w	r3, [r8], #1
					sample = effectTick[i](sample, i, v); //run the effect
    8c3a:	eeb0 0a48 	vmov.f32	s0, s16
    8c3e:	4620      	mov	r0, r4
    8c40:	4651      	mov	r1, sl
				if (effectsActive[i])
    8c42:	b18b      	cbz	r3, 8c68 <audioTickSynth+0x2e8>
					sample = effectTick[i](sample, i, v); //run the effect
    8c44:	4b2e      	ldr	r3, [pc, #184]	; (8d00 <audioTickSynth+0x380>)
    8c46:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8c4a:	4798      	blx	r3
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8c4c:	edd6 7a00 	vldr	s15, [r6]
					sample *= fxPostGain[i][v];
    8c50:	ed95 7a00 	vldr	s14, [r5]
					sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
    8c54:	ee7a 6ae7 	vsub.f32	s13, s21, s15
    8c58:	ee60 7a27 	vmul.f32	s15, s0, s15
    8c5c:	eee6 7a88 	vfma.f32	s15, s13, s16
					sample *= fxPostGain[i][v];
    8c60:	ee27 8a87 	vmul.f32	s16, s15, s14
    8c64:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
			for (int i = 0; i < NUM_EFFECT; i++)
    8c68:	3401      	adds	r4, #1
    8c6a:	3608      	adds	r6, #8
    8c6c:	3508      	adds	r5, #8
    8c6e:	2c04      	cmp	r4, #4
    8c70:	d1e1      	bne.n	8c36 <audioTickSynth+0x2b6>
		timeOS = DWT->CYCCNT - tempCountOS;
    8c72:	f8db 3004 	ldr.w	r3, [fp, #4]
    8c76:	693a      	ldr	r2, [r7, #16]
    8c78:	1a9b      	subs	r3, r3, r2
    8c7a:	4a22      	ldr	r2, [pc, #136]	; (8d04 <audioTickSynth+0x384>)
    8c7c:	6013      	str	r3, [r2, #0]
    8c7e:	e051      	b.n	8d24 <audioTickSynth+0x3a4>
    8c80:	e0001000 	.word	0xe0001000
    8c84:	2001d0f0 	.word	0x2001d0f0
    8c88:	2001d250 	.word	0x2001d250
    8c8c:	20013f8c 	.word	0x20013f8c
    8c90:	20013f84 	.word	0x20013f84
    8c94:	00000000 	.word	0x00000000
    8c98:	42fe0000 	.word	0x42fe0000
    8c9c:	2001d264 	.word	0x2001d264
    8ca0:	2001d178 	.word	0x2001d178
    8ca4:	2001c874 	.word	0x2001c874
    8ca8:	2001ce80 	.word	0x2001ce80
    8cac:	2001cab8 	.word	0x2001cab8
    8cb0:	2001ced4 	.word	0x2001ced4
    8cb4:	20018bb4 	.word	0x20018bb4
    8cb8:	20018bb0 	.word	0x20018bb0
    8cbc:	20013f5c 	.word	0x20013f5c
    8cc0:	20013f54 	.word	0x20013f54
    8cc4:	2001d248 	.word	0x2001d248
    8cc8:	2001cab4 	.word	0x2001cab4
    8ccc:	2001d240 	.word	0x2001d240
    8cd0:	2001cc38 	.word	0x2001cc38
    8cd4:	2001cc3c 	.word	0x2001cc3c
    8cd8:	2001d24c 	.word	0x2001d24c
    8cdc:	2001d25c 	.word	0x2001d25c
    8ce0:	2001ce7c 	.word	0x2001ce7c
    8ce4:	2001d254 	.word	0x2001d254
    8ce8:	200008b4 	.word	0x200008b4
    8cec:	2001d244 	.word	0x2001d244
    8cf0:	200161f9 	.word	0x200161f9
    8cf4:	200008b8 	.word	0x200008b8
    8cf8:	2001cb48 	.word	0x2001cb48
    8cfc:	2001cb68 	.word	0x2001cb68
    8d00:	2001caa4 	.word	0x2001caa4
    8d04:	2001d258 	.word	0x2001d258
    8d08:	20004f60 	.word	0x20004f60
    8d0c:	20004f90 	.word	0x20004f90
    8d10:	200004b1 	.word	0x200004b1
    8d14:	20005034 	.word	0x20005034
    8d18:	2000505c 	.word	0x2000505c
    8d1c:	2001cc9c 	.word	0x2001cc9c
    8d20:	200140cc 	.word	0x200140cc
		if (!fxPre)
    8d24:	4b8c      	ldr	r3, [pc, #560]	; (8f58 <audioTickSynth+0x5d8>)
    8d26:	781b      	ldrb	r3, [r3, #0]
    8d28:	b933      	cbnz	r3, 8d38 <audioTickSynth+0x3b8>
			sample *= amplitude[v];
    8d2a:	6a3b      	ldr	r3, [r7, #32]
    8d2c:	edd3 7a00 	vldr	s15, [r3]
    8d30:	ee28 8a27 	vmul.f32	s16, s16, s15
    8d34:	ed87 8a0d 	vstr	s16, [r7, #52]	; 0x34
	for (int v = 0; v < numStringsThisBoard; v++)
    8d38:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    8d3a:	eeb0 0a48 	vmov.f32	s0, s16
    8d3e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	for (int v = 0; v < numStringsThisBoard; v++)
    8d40:	f10a 0a01 	add.w	sl, sl, #1
    8d44:	3304      	adds	r3, #4
    8d46:	623b      	str	r3, [r7, #32]
    8d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8d4a:	3304      	adds	r3, #4
    8d4c:	627b      	str	r3, [r7, #36]	; 0x24
    8d4e:	69fb      	ldr	r3, [r7, #28]
    8d50:	3304      	adds	r3, #4
    8d52:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * masterVolFromBrainForSynth;
    8d54:	4b81      	ldr	r3, [pc, #516]	; (8f5c <audioTickSynth+0x5dc>)
    8d56:	1918      	adds	r0, r3, r4
    8d58:	f000 fe5e 	bl	9a18 <__tSVF_tick_veneer>
		masterSample += sample;// * finalMaster[v];
    8d5c:	4b80      	ldr	r3, [pc, #512]	; (8f60 <audioTickSynth+0x5e0>)
    8d5e:	edd3 7a00 	vldr	s15, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
    8d62:	1d23      	adds	r3, r4, #4
    8d64:	62fb      	str	r3, [r7, #44]	; 0x2c
		masterSample += sample;// * finalMaster[v];
    8d66:	eea0 9a27 	vfma.f32	s18, s0, s15
	for (int v = 0; v < numStringsThisBoard; v++)
    8d6a:	f899 3000 	ldrb.w	r3, [r9]
    8d6e:	4553      	cmp	r3, sl
    8d70:	f73f ae87 	bgt.w	8a82 <audioTickSynth+0x102>
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8d74:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8f64 <audioTickSynth+0x5e4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8d78:	4b7b      	ldr	r3, [pc, #492]	; (8f68 <audioTickSynth+0x5e8>)
    8d7a:	6879      	ldr	r1, [r7, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8d7c:	eef0 0a40 	vmov.f32	s1, s0
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8d80:	685b      	ldr	r3, [r3, #4]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8d82:	eddf 7a7a 	vldr	s15, [pc, #488]	; 8f6c <audioTickSynth+0x5ec>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8d86:	1a5b      	subs	r3, r3, r1
    8d88:	4a79      	ldr	r2, [pc, #484]	; (8f70 <audioTickSynth+0x5f0>)
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8d8a:	eee8 0aa7 	vfma.f32	s1, s17, s15
    8d8e:	ed9f 1a79 	vldr	s2, [pc, #484]	; 8f74 <audioTickSynth+0x5f4>
	timePerStringTick = DWT->CYCCNT - tempPerStringTick;
    8d92:	6013      	str	r3, [r2, #0]
	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    8d94:	f000 fcfc 	bl	9790 <__LEAF_clip_veneer>
	int volIdxInt = (int) volIdx;
    8d98:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	if (pedalControlsMaster)
    8d9c:	4a76      	ldr	r2, [pc, #472]	; (8f78 <audioTickSynth+0x5f8>)
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8d9e:	4b77      	ldr	r3, [pc, #476]	; (8f7c <audioTickSynth+0x5fc>)
	if (pedalControlsMaster)
    8da0:	7810      	ldrb	r0, [r2, #0]
	int volIdxInt = (int) volIdx;
    8da2:	ee17 2a90 	vmov	r2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8da6:	1c51      	adds	r1, r2, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8da8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    8dac:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8db0:	ed94 6a00 	vldr	s12, [r4]
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8db4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    8db8:	edd3 6a00 	vldr	s13, [r3]
	if (pedalControlsMaster)
    8dbc:	b178      	cbz	r0, 8dde <audioTickSynth+0x45e>
	float omAlpha = 1.0f - alpha;
    8dbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	float alpha = volIdx-volIdxInt;
    8dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	float omAlpha = 1.0f - alpha;
    8dc6:	ee37 7a40 	vsub.f32	s14, s14, s0
	float alpha = volIdx-volIdxInt;
    8dca:	ee30 0a67 	vsub.f32	s0, s0, s15
	float omAlpha = 1.0f - alpha;
    8dce:	ee77 7a27 	vadd.f32	s15, s14, s15
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    8dd2:	ee67 7a86 	vmul.f32	s15, s15, s12
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    8dd6:	eee6 7a80 	vfma.f32	s15, s13, s0
		masterSample *= outVol;
    8dda:	ee29 9a27 	vmul.f32	s18, s18, s15
	if (masterSample  > .999999f)
    8dde:	eddf 7a68 	vldr	s15, [pc, #416]	; 8f80 <audioTickSynth+0x600>
    8de2:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8dea:	f340 808b 	ble.w	8f04 <audioTickSynth+0x584>
		masterSample  = .999999f;
    8dee:	eeb0 9a67 	vmov.f32	s18, s15
		sampleClippedCountdown = 65535;
    8df2:	4b64      	ldr	r3, [pc, #400]	; (8f84 <audioTickSynth+0x604>)
    8df4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    8df8:	801a      	strh	r2, [r3, #0]
	return masterSample * audioMasterLevel * 0.98f;
    8dfa:	4963      	ldr	r1, [pc, #396]	; (8f88 <audioTickSynth+0x608>)
	timeTick = DWT->CYCCNT - tempCountTick;
    8dfc:	4b5a      	ldr	r3, [pc, #360]	; (8f68 <audioTickSynth+0x5e8>)
	return masterSample * audioMasterLevel * 0.98f;
    8dfe:	eddf 7a63 	vldr	s15, [pc, #396]	; 8f8c <audioTickSynth+0x60c>
	timeTick = DWT->CYCCNT - tempCountTick;
    8e02:	685b      	ldr	r3, [r3, #4]
	return masterSample * audioMasterLevel * 0.98f;
    8e04:	ed91 0a00 	vldr	s0, [r1]
	timeTick = DWT->CYCCNT - tempCountTick;
    8e08:	68b9      	ldr	r1, [r7, #8]
}
    8e0a:	3744      	adds	r7, #68	; 0x44
	return masterSample * audioMasterLevel * 0.98f;
    8e0c:	ee20 0a27 	vmul.f32	s0, s0, s15
	timeTick = DWT->CYCCNT - tempCountTick;
    8e10:	4a5f      	ldr	r2, [pc, #380]	; (8f90 <audioTickSynth+0x610>)
    8e12:	1a5b      	subs	r3, r3, r1
	return masterSample * audioMasterLevel * 0.98f;
    8e14:	ee20 0a09 	vmul.f32	s0, s0, s18
	timeTick = DWT->CYCCNT - tempCountTick;
    8e18:	6013      	str	r3, [r2, #0]
}
    8e1a:	46bd      	mov	sp, r7
    8e1c:	ecbd 8b06 	vpop	{d8-d10}
    8e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    8e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8e26:	f107 0134 	add.w	r1, r7, #52	; 0x34
    8e2a:	485a      	ldr	r0, [pc, #360]	; (8f94 <audioTickSynth+0x614>)
			for (int i = 0; i < 4; i++)
    8e2c:	2400      	movs	r4, #0
    8e2e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    8e32:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8fc0 <audioTickSynth+0x640>
			arm_fir_interpolate_f32(&osI[v], &sample, (float*)&oversamplerArray, 1);
    8e36:	4410      	add	r0, r2
    8e38:	603a      	str	r2, [r7, #0]
    8e3a:	4a57      	ldr	r2, [pc, #348]	; (8f98 <audioTickSynth+0x618>)
    8e3c:	18d6      	adds	r6, r2, r3
    8e3e:	4a57      	ldr	r2, [pc, #348]	; (8f9c <audioTickSynth+0x61c>)
    8e40:	18d5      	adds	r5, r2, r3
    8e42:	2301      	movs	r3, #1
    8e44:	4a56      	ldr	r2, [pc, #344]	; (8fa0 <audioTickSynth+0x620>)
    8e46:	f000 fe93 	bl	9b70 <__arm_fir_interpolate_f32_veneer>
    8e4a:	4651      	mov	r1, sl
    8e4c:	46b2      	mov	sl, r6
    8e4e:	462e      	mov	r6, r5
				if (effectsActive[i])
    8e50:	f818 3b01 	ldrb.w	r3, [r8], #1
    8e54:	b993      	cbnz	r3, 8e7c <audioTickSynth+0x4fc>
			for (int i = 0; i < 4; i++)
    8e56:	3401      	adds	r4, #1
    8e58:	f10a 0a08 	add.w	sl, sl, #8
    8e5c:	3608      	adds	r6, #8
    8e5e:	2c04      	cmp	r4, #4
    8e60:	d1f6      	bne.n	8e50 <audioTickSynth+0x4d0>
			arm_fir_decimate_f32(&osD[v], (float*)&oversamplerArray, &sample, 2);
    8e62:	683b      	ldr	r3, [r7, #0]
    8e64:	468a      	mov	sl, r1
    8e66:	484f      	ldr	r0, [pc, #316]	; (8fa4 <audioTickSynth+0x624>)
    8e68:	f107 0234 	add.w	r2, r7, #52	; 0x34
    8e6c:	494c      	ldr	r1, [pc, #304]	; (8fa0 <audioTickSynth+0x620>)
    8e6e:	4418      	add	r0, r3
    8e70:	2302      	movs	r3, #2
    8e72:	f000 fdf5 	bl	9a60 <__arm_fir_decimate_f32_veneer>
			sample *= amplitude[v];
    8e76:	ed97 8a0d 	vldr	s16, [r7, #52]	; 0x34
    8e7a:	e6fa      	b.n	8c72 <audioTickSynth+0x2f2>
    8e7c:	4d48      	ldr	r5, [pc, #288]	; (8fa0 <audioTickSynth+0x620>)
						float dry = oversamplerArray[j]; //store the dry value to mix later
    8e7e:	ed95 8a00 	vldr	s16, [r5]
						oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
    8e82:	4620      	mov	r0, r4
    8e84:	4b48      	ldr	r3, [pc, #288]	; (8fa8 <audioTickSynth+0x628>)
    8e86:	eeb0 0a48 	vmov.f32	s0, s16
    8e8a:	60f9      	str	r1, [r7, #12]
    8e8c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    8e90:	4798      	blx	r3
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8e92:	edda 7a00 	vldr	s15, [sl]
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8e96:	ed96 7a00 	vldr	s14, [r6]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8e9a:	ee20 0a27 	vmul.f32	s0, s0, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    8e9e:	4b43      	ldr	r3, [pc, #268]	; (8fac <audioTickSynth+0x62c>)
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8ea0:	ee7a 7ae7 	vsub.f32	s15, s21, s15
					for (int j = 0; j < OVERSAMPLE; j++)
    8ea4:	68f9      	ldr	r1, [r7, #12]
						oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
    8ea6:	eea7 0a88 	vfma.f32	s0, s15, s16
						oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
    8eaa:	ee67 7a00 	vmul.f32	s15, s14, s0
    8eae:	ece5 7a01 	vstmia	r5!, {s15}
					for (int j = 0; j < OVERSAMPLE; j++)
    8eb2:	42ab      	cmp	r3, r5
    8eb4:	d1e3      	bne.n	8e7e <audioTickSynth+0x4fe>
    8eb6:	e7ce      	b.n	8e56 <audioTickSynth+0x4d6>
			noise_tick(v);
    8eb8:	4650      	mov	r0, sl
    8eba:	f7ff fd01 	bl	88c0 <noise_tick>
    8ebe:	e65c      	b.n	8b7a <audioTickSynth+0x1fa>
			sourceValues[ENV_SOURCE_OFFSET + v][string] = tADSRT_tickNoInterp(&envs[v][string]);
    8ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ec2:	f103 0018 	add.w	r0, r3, #24
    8ec6:	f000 fcd3 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    8eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ecc:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
    8ed0:	e61a      	b.n	8b08 <audioTickSynth+0x188>
    8ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ed4:	f103 0010 	add.w	r0, r3, #16
    8ed8:	f000 fcca 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    8edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ede:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    8ee2:	e60c      	b.n	8afe <audioTickSynth+0x17e>
    8ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8ee6:	f103 0008 	add.w	r0, r3, #8
    8eea:	f000 fcc1 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    8eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8ef0:	ed83 0a07 	vstr	s0, [r3, #28]
    8ef4:	e5fe      	b.n	8af4 <audioTickSynth+0x174>
    8ef6:	6a78      	ldr	r0, [r7, #36]	; 0x24
    8ef8:	f000 fcba 	bl	9870 <__tADSRT_tickNoInterp_veneer>
    8efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8efe:	ed83 0a05 	vstr	s0, [r3, #20]
    8f02:	e5f2      	b.n	8aea <audioTickSynth+0x16a>
	else if (masterSample < -.999999f)
    8f04:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8fb0 <audioTickSynth+0x630>
    8f08:	eeb4 9ae7 	vcmpe.f32	s18, s15
    8f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    8f10:	d50b      	bpl.n	8f2a <audioTickSynth+0x5aa>
		sampleClippedCountdown = 65535;
    8f12:	4b1c      	ldr	r3, [pc, #112]	; (8f84 <audioTickSynth+0x604>)
    8f14:	f64f 72ff 	movw	r2, #65535	; 0xffff
		masterSample = -.9999999f;
    8f18:	ed9f 9a26 	vldr	s18, [pc, #152]	; 8fb4 <audioTickSynth+0x634>
		sampleClippedCountdown = 65535;
    8f1c:	801a      	strh	r2, [r3, #0]
    8f1e:	e76c      	b.n	8dfa <audioTickSynth+0x47a>
		for (int i = 0; i < oscToTick; i++)
    8f20:	eddf 7a25 	vldr	s15, [pc, #148]	; 8fb8 <audioTickSynth+0x638>
    8f24:	eeb0 6a67 	vmov.f32	s12, s15
    8f28:	e64a      	b.n	8bc0 <audioTickSynth+0x240>
		if (sampleClippedCountdown > 0)
    8f2a:	4a16      	ldr	r2, [pc, #88]	; (8f84 <audioTickSynth+0x604>)
    8f2c:	8813      	ldrh	r3, [r2, #0]
    8f2e:	b29b      	uxth	r3, r3
    8f30:	2b00      	cmp	r3, #0
    8f32:	f43f af62 	beq.w	8dfa <audioTickSynth+0x47a>
			sampleClippedCountdown--;
    8f36:	8813      	ldrh	r3, [r2, #0]
    8f38:	3b01      	subs	r3, #1
    8f3a:	b29b      	uxth	r3, r3
    8f3c:	8013      	strh	r3, [r2, #0]
    8f3e:	e75c      	b.n	8dfa <audioTickSynth+0x47a>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8f40:	4a09      	ldr	r2, [pc, #36]	; (8f68 <audioTickSynth+0x5e8>)
    8f42:	6af8      	ldr	r0, [r7, #44]	; 0x2c
    8f44:	6853      	ldr	r3, [r2, #4]
    8f46:	491d      	ldr	r1, [pc, #116]	; (8fbc <audioTickSynth+0x63c>)
    8f48:	1a1b      	subs	r3, r3, r0
	float masterSample = 0.0f;
    8f4a:	ed9f 9a1b 	vldr	s18, [pc, #108]	; 8fb8 <audioTickSynth+0x638>
	timeSmoothing = DWT->CYCCNT - tempSmoothing;
    8f4e:	600b      	str	r3, [r1, #0]
	uint32_t tempPerStringTick = DWT->CYCCNT;
    8f50:	6853      	ldr	r3, [r2, #4]
    8f52:	607b      	str	r3, [r7, #4]
	for (int v = 0; v < numStringsThisBoard; v++)
    8f54:	e70e      	b.n	8d74 <audioTickSynth+0x3f4>
    8f56:	bf00      	nop
    8f58:	200161f9 	.word	0x200161f9
    8f5c:	2001cb20 	.word	0x2001cb20
    8f60:	200004ac 	.word	0x200004ac
    8f64:	423c0000 	.word	0x423c0000
    8f68:	e0001000 	.word	0xe0001000
    8f6c:	42a00000 	.word	0x42a00000
    8f70:	2001d260 	.word	0x2001d260
    8f74:	42fe0000 	.word	0x42fe0000
    8f78:	20019cdc 	.word	0x20019cdc
    8f7c:	2000051c 	.word	0x2000051c
    8f80:	3f7fffef 	.word	0x3f7fffef
    8f84:	200054aa 	.word	0x200054aa
    8f88:	20000724 	.word	0x20000724
    8f8c:	3f7ae148 	.word	0x3f7ae148
    8f90:	2001d268 	.word	0x2001d268
    8f94:	2001ceb8 	.word	0x2001ceb8
    8f98:	2001cb48 	.word	0x2001cb48
    8f9c:	2001cb68 	.word	0x2001cb68
    8fa0:	2001cf04 	.word	0x2001cf04
    8fa4:	2001cea0 	.word	0x2001cea0
    8fa8:	2001caa4 	.word	0x2001caa4
    8fac:	2001cf0c 	.word	0x2001cf0c
    8fb0:	bf7fffef 	.word	0xbf7fffef
    8fb4:	bf7ffffe 	.word	0xbf7ffffe
    8fb8:	00000000 	.word	0x00000000
    8fbc:	2001d264 	.word	0x2001d264
    8fc0:	200140cc 	.word	0x200140cc
    8fc4:	f3af 8000 	nop.w
    8fc8:	f3af 8000 	nop.w
    8fcc:	f3af 8000 	nop.w
    8fd0:	f3af 8000 	nop.w
    8fd4:	f3af 8000 	nop.w
    8fd8:	f3af 8000 	nop.w
    8fdc:	f3af 8000 	nop.w

00008fe0 <audioFrameSynth>:
	uint32_t tempCountFrame = DWT->CYCCNT;
    8fe0:	4bab      	ldr	r3, [pc, #684]	; (9290 <audioFrameSynth+0x2b0>)
{
    8fe2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (resetStringInputs)
    8fe6:	f8df 930c 	ldr.w	r9, [pc, #780]	; 92f4 <audioFrameSynth+0x314>
{
    8fea:	4607      	mov	r7, r0
    8fec:	ed2d 8b04 	vpush	{d8-d9}
	uint32_t tempCountFrame = DWT->CYCCNT;
    8ff0:	685b      	ldr	r3, [r3, #4]
{
    8ff2:	b087      	sub	sp, #28
	uint32_t tempCountFrame = DWT->CYCCNT;
    8ff4:	9301      	str	r3, [sp, #4]
	if (resetStringInputs)
    8ff6:	f899 3000 	ldrb.w	r3, [r9]
    8ffa:	2b00      	cmp	r3, #0
    8ffc:	f040 808a 	bne.w	9114 <audioFrameSynth+0x134>
    9000:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 92f8 <audioFrameSynth+0x318>
	if (newPluck)
    9004:	f8d8 3000 	ldr.w	r3, [r8]
    9008:	2b00      	cmp	r3, #0
    900a:	d03a      	beq.n	9082 <audioFrameSynth+0xa2>
		for (int i = 0; i < numStringsThisBoard; i++)
    900c:	4ea1      	ldr	r6, [pc, #644]	; (9294 <audioFrameSynth+0x2b4>)
    900e:	7833      	ldrb	r3, [r6, #0]
    9010:	2b00      	cmp	r3, #0
    9012:	d033      	beq.n	907c <audioFrameSynth+0x9c>
    9014:	4aa0      	ldr	r2, [pc, #640]	; (9298 <audioFrameSynth+0x2b8>)
    9016:	2500      	movs	r5, #0
    9018:	49a0      	ldr	r1, [pc, #640]	; (929c <audioFrameSynth+0x2bc>)
    901a:	9702      	str	r7, [sp, #8]
    901c:	9603      	str	r6, [sp, #12]
    901e:	460f      	mov	r7, r1
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9020:	eddf 8a9f 	vldr	s17, [pc, #636]	; 92a0 <audioFrameSynth+0x2c0>
    9024:	4616      	mov	r6, r2
    9026:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 92fc <audioFrameSynth+0x31c>
    902a:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 9300 <audioFrameSynth+0x320>
    902e:	4c9d      	ldr	r4, [pc, #628]	; (92a4 <audioFrameSynth+0x2c4>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    9030:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    9034:	b292      	uxth	r2, r2
    9036:	b932      	cbnz	r2, 9046 <audioFrameSynth+0x66>
    9038:	4a9b      	ldr	r2, [pc, #620]	; (92a8 <audioFrameSynth+0x2c8>)
    903a:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    903e:	b292      	uxth	r2, r2
    9040:	2a00      	cmp	r2, #0
    9042:	f040 8095 	bne.w	9170 <audioFrameSynth+0x190>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    9046:	f834 2015 	ldrh.w	r2, [r4, r5, lsl #1]
    904a:	b292      	uxth	r2, r2
    904c:	b132      	cbz	r2, 905c <audioFrameSynth+0x7c>
    904e:	4a96      	ldr	r2, [pc, #600]	; (92a8 <audioFrameSynth+0x2c8>)
    9050:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
    9054:	b292      	uxth	r2, r2
    9056:	2a00      	cmp	r2, #0
    9058:	f000 80f7 	beq.w	924a <audioFrameSynth+0x26a>
			previousStringInputs[i] = stringInputs[i];
    905c:	4a92      	ldr	r2, [pc, #584]	; (92a8 <audioFrameSynth+0x2c8>)
		for (int i = 0; i < numStringsThisBoard; i++)
    905e:	3604      	adds	r6, #4
    9060:	f109 0904 	add.w	r9, r9, #4
    9064:	f10b 0b04 	add.w	fp, fp, #4
			previousStringInputs[i] = stringInputs[i];
    9068:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    906c:	3704      	adds	r7, #4
			previousStringInputs[i] = stringInputs[i];
    906e:	b292      	uxth	r2, r2
    9070:	f824 2015 	strh.w	r2, [r4, r5, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    9074:	3501      	adds	r5, #1
    9076:	42ab      	cmp	r3, r5
    9078:	dcda      	bgt.n	9030 <audioFrameSynth+0x50>
    907a:	9f02      	ldr	r7, [sp, #8]
		newPluck = 0;
    907c:	2300      	movs	r3, #0
    907e:	f8c8 3000 	str.w	r3, [r8]
    9082:	4c8a      	ldr	r4, [pc, #552]	; (92ac <audioFrameSynth+0x2cc>)
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    9084:	ed9f 8a8a 	vldr	s16, [pc, #552]	; 92b0 <audioFrameSynth+0x2d0>
    9088:	f504 7500 	add.w	r5, r4, #512	; 0x200
    908c:	eb04 0487 	add.w	r4, r4, r7, lsl #2
    9090:	eb05 0587 	add.w	r5, r5, r7, lsl #2
    9094:	f7ff fc74 	bl	8980 <audioTickSynth>
    9098:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    909c:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    909e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    90a2:	42ac      	cmp	r4, r5
		current_sample = (int32_t)(audioTickSynth() * TWO_TO_23);
    90a4:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    90a8:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    90ac:	d1f2      	bne.n	9094 <audioFrameSynth+0xb4>
	if (switchStrings)
    90ae:	4c81      	ldr	r4, [pc, #516]	; (92b4 <audioFrameSynth+0x2d4>)
    90b0:	6823      	ldr	r3, [r4, #0]
    90b2:	2b00      	cmp	r3, #0
    90b4:	d150      	bne.n	9158 <audioFrameSynth+0x178>
	switchStrings = 0;
    90b6:	2000      	movs	r0, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    90b8:	4b75      	ldr	r3, [pc, #468]	; (9290 <audioFrameSynth+0x2b0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    90ba:	4a7f      	ldr	r2, [pc, #508]	; (92b8 <audioFrameSynth+0x2d8>)
	switchStrings = 0;
    90bc:	6020      	str	r0, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    90be:	9c01      	ldr	r4, [sp, #4]
    90c0:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    90c2:	edd2 6a00 	vldr	s13, [r2]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    90c6:	1b1b      	subs	r3, r3, r4
	if (frameLoadPercentage > .99f)
    90c8:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 92bc <audioFrameSynth+0x2dc>
	timeFrame = DWT->CYCCNT - tempCountFrame;
    90cc:	497c      	ldr	r1, [pc, #496]	; (92c0 <audioFrameSynth+0x2e0>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    90ce:	ee07 3a90 	vmov	s15, r3
    90d2:	4a7c      	ldr	r2, [pc, #496]	; (92c4 <audioFrameSynth+0x2e4>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
    90d4:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    90d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
    90da:	ee67 7aa6 	vmul.f32	s15, s15, s13
	if (frameLoadPercentage > .99f)
    90de:	eef4 7ac7 	vcmpe.f32	s15, s14
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    90e2:	edc2 7a00 	vstr	s15, [r2]
	if (frameLoadPercentage > .99f)
    90e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    90ea:	dd0e      	ble.n	910a <audioFrameSynth+0x12a>
		frameLoadOverCount++;
    90ec:	4a76      	ldr	r2, [pc, #472]	; (92c8 <audioFrameSynth+0x2e8>)
    90ee:	6813      	ldr	r3, [r2, #0]
    90f0:	3301      	adds	r3, #1
		if (frameLoadOverCount > 3)
    90f2:	2b03      	cmp	r3, #3
		frameLoadOverCount++;
    90f4:	6013      	str	r3, [r2, #0]
		if (frameLoadOverCount > 3)
    90f6:	d908      	bls.n	910a <audioFrameSynth+0x12a>
			if (overSampled == 1)
    90f8:	4b74      	ldr	r3, [pc, #464]	; (92cc <audioFrameSynth+0x2ec>)
    90fa:	681a      	ldr	r2, [r3, #0]
    90fc:	2a01      	cmp	r2, #1
    90fe:	d02f      	beq.n	9160 <audioFrameSynth+0x180>
			else if (oscToTick > 0)
    9100:	4a73      	ldr	r2, [pc, #460]	; (92d0 <audioFrameSynth+0x2f0>)
    9102:	7813      	ldrb	r3, [r2, #0]
    9104:	b10b      	cbz	r3, 910a <audioFrameSynth+0x12a>
				oscToTick--;
    9106:	3b01      	subs	r3, #1
    9108:	7013      	strb	r3, [r2, #0]
}
    910a:	b007      	add	sp, #28
    910c:	ecbd 8b04 	vpop	{d8-d9}
    9110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    9114:	4e5f      	ldr	r6, [pc, #380]	; (9294 <audioFrameSynth+0x2b4>)
    9116:	7833      	ldrb	r3, [r6, #0]
    9118:	b1ab      	cbz	r3, 9146 <audioFrameSynth+0x166>
    911a:	2500      	movs	r5, #0
    911c:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 9304 <audioFrameSynth+0x324>
    9120:	4c60      	ldr	r4, [pc, #384]	; (92a4 <audioFrameSynth+0x2c4>)
				previousStringInputs[i] = 0;
    9122:	46aa      	mov	sl, r5
    9124:	f1a8 0b20 	sub.w	fp, r8, #32
				tADSRT_clear(&envs[v][i]);
    9128:	4658      	mov	r0, fp
			for (int v = 0; v < NUM_ENV; v++)
    912a:	f10b 0b08 	add.w	fp, fp, #8
				tADSRT_clear(&envs[v][i]);
    912e:	f000 fd27 	bl	9b80 <__tADSRT_clear_veneer>
				previousStringInputs[i] = 0;
    9132:	f824 a015 	strh.w	sl, [r4, r5, lsl #1]
			for (int v = 0; v < NUM_ENV; v++)
    9136:	45c3      	cmp	fp, r8
    9138:	d1f6      	bne.n	9128 <audioFrameSynth+0x148>
		for (int i = 0; i < numStringsThisBoard; i++)
    913a:	3501      	adds	r5, #1
    913c:	7833      	ldrb	r3, [r6, #0]
    913e:	f108 0804 	add.w	r8, r8, #4
    9142:	42ab      	cmp	r3, r5
    9144:	dcee      	bgt.n	9124 <audioFrameSynth+0x144>
		resetStringInputs = 0;
    9146:	2300      	movs	r3, #0
		newPluck = 1;
    9148:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 92f8 <audioFrameSynth+0x318>
		resetStringInputs = 0;
    914c:	f889 3000 	strb.w	r3, [r9]
		newPluck = 1;
    9150:	2301      	movs	r3, #1
    9152:	f8c8 3000 	str.w	r3, [r8]
    9156:	e755      	b.n	9004 <audioFrameSynth+0x24>
		switchStringModel(switchStrings);
    9158:	6820      	ldr	r0, [r4, #0]
    915a:	f7f8 fa21 	bl	15a0 <switchStringModel>
    915e:	e7aa      	b.n	90b6 <audioFrameSynth+0xd6>
				overSampled = 0;
    9160:	6018      	str	r0, [r3, #0]
}
    9162:	b007      	add	sp, #28
    9164:	ecbd 8b04 	vpop	{d8-d9}
    9168:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				changeOversampling(overSampled);
    916c:	f000 bc98 	b.w	9aa0 <__changeOversampling_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9170:	4b4d      	ldr	r3, [pc, #308]	; (92a8 <audioFrameSynth+0x2c8>)
    9172:	f5ab 7213 	sub.w	r2, fp, #588	; 0x24c
    9176:	f8df a178 	ldr.w	sl, [pc, #376]	; 92f0 <audioFrameSynth+0x310>
						if (useVelocity == 0) envVel = 1.f;
    917a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    917e:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    9182:	f10a 0104 	add.w	r1, sl, #4
						voiceSounding = 1;
    9186:	9504      	str	r5, [sp, #16]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9188:	b29b      	uxth	r3, r3
						voiceSounding = 1;
    918a:	4655      	mov	r5, sl
    918c:	9405      	str	r4, [sp, #20]
    918e:	46ca      	mov	sl, r9
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9190:	ee08 3a10 	vmov	s16, r3
				stringOctave[i] = octave;
    9194:	4b4f      	ldr	r3, [pc, #316]	; (92d4 <audioFrameSynth+0x2f4>)
						voiceSounding = 1;
    9196:	4614      	mov	r4, r2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9198:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
				stringOctave[i] = octave;
    919c:	681b      	ldr	r3, [r3, #0]
    919e:	603b      	str	r3, [r7, #0]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    91a0:	ee28 8a28 	vmul.f32	s16, s16, s17
					if (envOn[v])
    91a4:	f815 3b01 	ldrb.w	r3, [r5], #1
						tADSRT_on(&envs[v][i], envVel);
    91a8:	4650      	mov	r0, sl
					if (envOn[v])
    91aa:	b16b      	cbz	r3, 91c8 <audioFrameSynth+0x1e8>
						if (useVelocity == 0) envVel = 1.f;
    91ac:	edd4 7a00 	vldr	s15, [r4]
    91b0:	eef5 7a40 	vcmp.f32	s15, #0.0
    91b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
						tADSRT_on(&envs[v][i], envVel);
    91b8:	fe09 0a08 	vseleq.f32	s0, s18, s16
    91bc:	f000 fbe4 	bl	9988 <__tADSRT_on_veneer>
						voiceSounding = 1;
    91c0:	2001      	movs	r0, #1
    91c2:	4b45      	ldr	r3, [pc, #276]	; (92d8 <audioFrameSynth+0x2f8>)
    91c4:	4945      	ldr	r1, [pc, #276]	; (92dc <audioFrameSynth+0x2fc>)
    91c6:	7018      	strb	r0, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
    91c8:	42a9      	cmp	r1, r5
    91ca:	f10a 0a08 	add.w	sl, sl, #8
    91ce:	f104 04a8 	add.w	r4, r4, #168	; 0xa8
    91d2:	d1e7      	bne.n	91a4 <audioFrameSynth+0x1c4>
						if (noteOnSync > 0.5f)
    91d4:	9d04      	ldr	r5, [sp, #16]
    91d6:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_ENV; v++)
    91da:	f8df a104 	ldr.w	sl, [pc, #260]	; 92e0 <audioFrameSynth+0x300>
    91de:	465c      	mov	r4, fp
    91e0:	ebc5 7385 	rsb	r3, r5, r5, lsl #30
    91e4:	009b      	lsls	r3, r3, #2
    91e6:	330c      	adds	r3, #12
    91e8:	9304      	str	r3, [sp, #16]
						if (noteOnSync > 0.5f)
    91ea:	4b3d      	ldr	r3, [pc, #244]	; (92e0 <audioFrameSynth+0x300>)
    91ec:	ebaa 0003 	sub.w	r0, sl, r3
					if (lfoOn[v])
    91f0:	f81a 3b01 	ldrb.w	r3, [sl], #1
    91f4:	b163      	cbz	r3, 9210 <audioFrameSynth+0x230>
						if (noteOnSync > 0.5f)
    91f6:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
    91fa:	eef4 7ac9 	vcmpe.f32	s15, s18
    91fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    9202:	dd05      	ble.n	9210 <audioFrameSynth+0x230>
							lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
    9204:	9b04      	ldr	r3, [sp, #16]
    9206:	4629      	mov	r1, r5
    9208:	ed94 0a00 	vldr	s0, [r4]
    920c:	58e3      	ldr	r3, [r4, r3]
    920e:	4798      	blx	r3
				for (int v = 0; v < NUM_LFOS; v++)
    9210:	4b34      	ldr	r3, [pc, #208]	; (92e4 <audioFrameSynth+0x304>)
    9212:	348c      	adds	r4, #140	; 0x8c
    9214:	4553      	cmp	r3, sl
    9216:	d1e8      	bne.n	91ea <audioFrameSynth+0x20a>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    9218:	4833      	ldr	r0, [pc, #204]	; (92e8 <audioFrameSynth+0x308>)
    921a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    921e:	4933      	ldr	r1, [pc, #204]	; (92ec <audioFrameSynth+0x30c>)
    9220:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    9224:	7802      	ldrb	r2, [r0, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
    9226:	9b03      	ldr	r3, [sp, #12]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    9228:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    922c:	3201      	adds	r2, #1
    922e:	9c05      	ldr	r4, [sp, #20]
    9230:	edd1 7a00 	vldr	s15, [r1]
		for (int i = 0; i < numStringsThisBoard; i++)
    9234:	781b      	ldrb	r3, [r3, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    9236:	ee77 7aa6 	vadd.f32	s15, s15, s13
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
    923a:	ed86 8a00 	vstr	s16, [r6]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
    923e:	7002      	strb	r2, [r0, #0]
    9240:	ee67 7a87 	vmul.f32	s15, s15, s14
    9244:	edc6 7a02 	vstr	s15, [r6, #8]
			{
    9248:	e708      	b.n	905c <audioFrameSynth+0x7c>
					if (envOn[v])
    924a:	4b29      	ldr	r3, [pc, #164]	; (92f0 <audioFrameSynth+0x310>)
    924c:	781b      	ldrb	r3, [r3, #0]
    924e:	b95b      	cbnz	r3, 9268 <audioFrameSynth+0x288>
    9250:	4b27      	ldr	r3, [pc, #156]	; (92f0 <audioFrameSynth+0x310>)
    9252:	785b      	ldrb	r3, [r3, #1]
    9254:	b9b3      	cbnz	r3, 9284 <audioFrameSynth+0x2a4>
    9256:	4b26      	ldr	r3, [pc, #152]	; (92f0 <audioFrameSynth+0x310>)
    9258:	789b      	ldrb	r3, [r3, #2]
    925a:	b973      	cbnz	r3, 927a <audioFrameSynth+0x29a>
    925c:	4b24      	ldr	r3, [pc, #144]	; (92f0 <audioFrameSynth+0x310>)
    925e:	78db      	ldrb	r3, [r3, #3]
    9260:	b933      	cbnz	r3, 9270 <audioFrameSynth+0x290>
		for (int i = 0; i < numStringsThisBoard; i++)
    9262:	9b03      	ldr	r3, [sp, #12]
    9264:	781b      	ldrb	r3, [r3, #0]
    9266:	e6f9      	b.n	905c <audioFrameSynth+0x7c>
						tADSRT_off(&envs[v][i]);
    9268:	4648      	mov	r0, r9
    926a:	f000 fae1 	bl	9830 <__tADSRT_off_veneer>
    926e:	e7ef      	b.n	9250 <audioFrameSynth+0x270>
    9270:	f109 0018 	add.w	r0, r9, #24
    9274:	f000 fadc 	bl	9830 <__tADSRT_off_veneer>
    9278:	e7f3      	b.n	9262 <audioFrameSynth+0x282>
    927a:	f109 0010 	add.w	r0, r9, #16
    927e:	f000 fad7 	bl	9830 <__tADSRT_off_veneer>
    9282:	e7eb      	b.n	925c <audioFrameSynth+0x27c>
    9284:	f109 0008 	add.w	r0, r9, #8
    9288:	f000 fad2 	bl	9830 <__tADSRT_off_veneer>
    928c:	e7e3      	b.n	9256 <audioFrameSynth+0x276>
    928e:	bf00      	nop
    9290:	e0001000 	.word	0xe0001000
    9294:	200004b1 	.word	0x200004b1
    9298:	2001d180 	.word	0x2001d180
    929c:	20013f5c 	.word	0x20013f5c
    92a0:	37800080 	.word	0x37800080
    92a4:	20005090 	.word	0x20005090
    92a8:	20013f3c 	.word	0x20013f3c
    92ac:	30000000 	.word	0x30000000
    92b0:	4b000000 	.word	0x4b000000
    92b4:	20013f74 	.word	0x20013f74
    92b8:	200004a4 	.word	0x200004a4
    92bc:	3f7d70a4 	.word	0x3f7d70a4
    92c0:	20013f78 	.word	0x20013f78
    92c4:	20004f4c 	.word	0x20004f4c
    92c8:	20004f48 	.word	0x20004f48
    92cc:	200008b8 	.word	0x200008b8
    92d0:	200008b4 	.word	0x200008b4
    92d4:	2000502c 	.word	0x2000502c
    92d8:	2001d288 	.word	0x2001d288
    92dc:	2001cab8 	.word	0x2001cab8
    92e0:	2001cc38 	.word	0x2001cc38
    92e4:	2001cc3c 	.word	0x2001cc3c
    92e8:	2001d000 	.word	0x2001d000
    92ec:	20019d10 	.word	0x20019d10
    92f0:	2001cab4 	.word	0x2001cab4
    92f4:	200054a8 	.word	0x200054a8
    92f8:	20005020 	.word	0x20005020
    92fc:	2001cab8 	.word	0x2001cab8
    9300:	20019a7c 	.word	0x20019a7c
    9304:	2001cad8 	.word	0x2001cad8
	...

00009320 <audioInitVocal>:

tVoc vocal[NUM_STRINGS_PER_BOARD];
int prevTractLength = 22;

void __ATTR_ITCMRAM audioInitVocal()
{
    9320:	b510      	push	{r4, lr}
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
	{
		tVoc_init(&vocal[v], 22, 65, &leaf);
    9322:	4c07      	ldr	r4, [pc, #28]	; (9340 <audioInitVocal+0x20>)
    9324:	2241      	movs	r2, #65	; 0x41
    9326:	4b07      	ldr	r3, [pc, #28]	; (9344 <audioInitVocal+0x24>)
    9328:	2116      	movs	r1, #22
    932a:	4620      	mov	r0, r4
    932c:	f000 fa34 	bl	9798 <__tVoc_init_veneer>
    9330:	1d20      	adds	r0, r4, #4
    9332:	4b04      	ldr	r3, [pc, #16]	; (9344 <audioInitVocal+0x24>)
    9334:	2241      	movs	r2, #65	; 0x41
    9336:	2116      	movs	r1, #22
	}
}
    9338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		tVoc_init(&vocal[v], 22, 65, &leaf);
    933c:	f000 ba2c 	b.w	9798 <__tVoc_init_veneer>
    9340:	2001d2ac 	.word	0x2001d2ac
    9344:	20004fc4 	.word	0x20004fc4
    9348:	f3af 8000 	nop.w
    934c:	f3af 8000 	nop.w
    9350:	f3af 8000 	nop.w
    9354:	f3af 8000 	nop.w
    9358:	f3af 8000 	nop.w
    935c:	f3af 8000 	nop.w

00009360 <audioFreeVocal>:

void __ATTR_ITCMRAM audioFreeVocal()
{
	;
}
    9360:	4770      	bx	lr
    9362:	bf00      	nop
    9364:	f3af 8000 	nop.w
    9368:	f3af 8000 	nop.w
    936c:	f3af 8000 	nop.w
    9370:	f3af 8000 	nop.w
    9374:	f3af 8000 	nop.w
    9378:	f3af 8000 	nop.w
    937c:	f3af 8000 	nop.w

00009380 <audioTickVocal>:
	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, GPIO_PIN_RESET);
}


float __ATTR_ITCMRAM audioTickVocal(void)
{
    9380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9384:	4f52      	ldr	r7, [pc, #328]	; (94d0 <audioTickVocal+0x150>)
    9386:	4d53      	ldr	r5, [pc, #332]	; (94d4 <audioTickVocal+0x154>)
    9388:	463c      	mov	r4, r7
    938a:	f107 0630 	add.w	r6, r7, #48	; 0x30
    938e:	ed2d 8b04 	vpush	{d8-d9}
	float tempSamp = 0.0f;
	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    9392:	4628      	mov	r0, r5
	for (int i = 0; i < 12; i++)
    9394:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
    9396:	f000 fb3b 	bl	9a10 <__tExpSmooth_tick_veneer>
    939a:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
    939e:	42b4      	cmp	r4, r6
    93a0:	d1f7      	bne.n	9392 <audioTickVocal+0x12>
	}

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    93a2:	484d      	ldr	r0, [pc, #308]	; (94d8 <audioTickVocal+0x158>)
    93a4:	f000 fb34 	bl	9a10 <__tExpSmooth_tick_veneer>

	int newTractLength = knobScaled[0] * 64 + 1;
    93a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    93ac:	edd7 6a00 	vldr	s13, [r7]
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
    93b0:	eeb0 9a40 	vmov.f32	s18, s0
	int newTractLength = knobScaled[0] * 64 + 1;
    93b4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 94dc <audioTickVocal+0x15c>
	if (newTractLength != prevTractLength)
    93b8:	4d49      	ldr	r5, [pc, #292]	; (94e0 <audioTickVocal+0x160>)
	int newTractLength = knobScaled[0] * 64 + 1;
    93ba:	eee6 7a87 	vfma.f32	s15, s13, s14
	if (newTractLength != prevTractLength)
    93be:	682b      	ldr	r3, [r5, #0]
	int newTractLength = knobScaled[0] * 64 + 1;
    93c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    93c4:	ee17 4a90 	vmov	r4, s15
	if (newTractLength != prevTractLength)
    93c8:	42a3      	cmp	r3, r4
    93ca:	d004      	beq.n	93d6 <audioTickVocal+0x56>
	{
		tVoc_set_tractLength(&vocal[0], newTractLength);
    93cc:	ee17 1a90 	vmov	r1, s15
    93d0:	4844      	ldr	r0, [pc, #272]	; (94e4 <audioTickVocal+0x164>)
    93d2:	f000 fa75 	bl	98c0 <__tVoc_set_tractLength_veneer>
	}

	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    93d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    93da:	ed97 7a01 	vldr	s14, [r7, #4]

	prevTractLength = newTractLength;
	for (int i = 0; i < numStringsThisBoard; i++)
    93de:	f8df 9124 	ldr.w	r9, [pc, #292]	; 9504 <audioTickVocal+0x184>
	tVoc_setDoubleComputeFlag(&vocal[0], knobScaled[1] > 0.5f);
    93e2:	4840      	ldr	r0, [pc, #256]	; (94e4 <audioTickVocal+0x164>)
    93e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
    93e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    93ec:	bfcc      	ite	gt
    93ee:	2101      	movgt	r1, #1
    93f0:	2100      	movle	r1, #0
    93f2:	f000 fb91 	bl	9b18 <__tVoc_setDoubleComputeFlag_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    93f6:	f899 3000 	ldrb.w	r3, [r9]
	prevTractLength = newTractLength;
    93fa:	602c      	str	r4, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    93fc:	2b00      	cmp	r3, #0
    93fe:	d064      	beq.n	94ca <audioTickVocal+0x14a>
    9400:	4d38      	ldr	r5, [pc, #224]	; (94e4 <audioTickVocal+0x164>)
    9402:	2400      	movs	r4, #0
    9404:	f8df 8100 	ldr.w	r8, [pc, #256]	; 9508 <audioTickVocal+0x188>
    9408:	4f37      	ldr	r7, [pc, #220]	; (94e8 <audioTickVocal+0x168>)
	float tempSamp = 0.0f;
    940a:	eddf 8a38 	vldr	s17, [pc, #224]	; 94ec <audioTickVocal+0x16c>
    940e:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 950c <audioTickVocal+0x18c>
    9412:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 9510 <audioTickVocal+0x190>
	{
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    9416:	4628      	mov	r0, r5
    9418:	00a6      	lsls	r6, r4, #2
    941a:	f000 f9f1 	bl	9800 <__tVoc_tick_veneer>
    941e:	eeb0 8a40 	vmov.f32	s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9422:	4456      	add	r6, sl
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    9424:	eb0b 0084 	add.w	r0, fp, r4, lsl #2
    9428:	f000 fa22 	bl	9870 <__tADSRT_tickNoInterp_veneer>
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    942c:	ecf8 7a01 	vldmia	r8!, {s15}
		tempSamp += tVoc_tick(&vocal[i]) * tADSRT_tickNoInterp(&fenvelopes[i]);
    9430:	eee8 8a00 	vfma.f32	s17, s16, s0
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9434:	ed96 0a00 	vldr	s0, [r6]
	for (int i = 0; i < numStringsThisBoard; i++)
    9438:	3401      	adds	r4, #1
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    943a:	ee30 0a27 	vadd.f32	s0, s0, s15
    943e:	f000 fa43 	bl	98c8 <__mtof_veneer>
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    9442:	4628      	mov	r0, r5
		stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9444:	eca7 0a01 	vstmia	r7!, {s0}
		tVoc_setFreq(&vocal[i], stringFrequencies[i]);
    9448:	f000 fb2e 	bl	9aa8 <__tVoc_setFreq_veneer>
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    944c:	4628      	mov	r0, r5
    944e:	eeb0 0a49 	vmov.f32	s0, s18
	for (int i = 0; i < numStringsThisBoard; i++)
    9452:	3504      	adds	r5, #4
		tVoc_set_tenseness(&vocal[i], volumeSmoothed);
    9454:	f000 faf8 	bl	9a48 <__tVoc_set_tenseness_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    9458:	f899 3000 	ldrb.w	r3, [r9]
    945c:	42a3      	cmp	r3, r4
    945e:	dcda      	bgt.n	9416 <audioTickVocal+0x96>
		//Lfloat tongue = 12.0f + (16.0f * knobScaled[0]);
		//tVoc_set_tongue_shape(&vocal[i], tongue, 2.9f * knobScaled[1] + 0.1f);

	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
    9460:	ed9f 0a23 	vldr	s0, [pc, #140]	; 94f0 <audioTickVocal+0x170>
    9464:	eddf 7a23 	vldr	s15, [pc, #140]	; 94f4 <audioTickVocal+0x174>
    9468:	eef0 0a40 	vmov.f32	s1, s0
    946c:	ed9f 1a22 	vldr	s2, [pc, #136]	; 94f8 <audioTickVocal+0x178>
    9470:	eee9 0a27 	vfma.f32	s1, s18, s15
    9474:	f000 f98c 	bl	9790 <__LEAF_clip_veneer>
	//float volIdx = LEAF_clip(0.0f, ((volumeSmoothed * 80.0f)), 127.0f);
	int volIdxInt = (int) volIdx;
    9478:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
	tempSamp *= outVol;
	tempSamp *= masterVolFromBrain;
    947c:	491f      	ldr	r1, [pc, #124]	; (94fc <audioTickVocal+0x17c>)
	float omAlpha = 1.0f - alpha;
    947e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9482:	4a1f      	ldr	r2, [pc, #124]	; (9500 <audioTickVocal+0x180>)
	int volIdxInt = (int) volIdx;
    9484:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
    9488:	edd1 6a00 	vldr	s13, [r1]
    948c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    9490:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
    9492:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float omAlpha = 1.0f - alpha;
    9496:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
    949a:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float alpha = volIdx-volIdxInt;
    949e:	ee30 0a47 	vsub.f32	s0, s0, s14
    94a2:	ee68 8aa6 	vmul.f32	s17, s17, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    94a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float omAlpha = 1.0f - alpha;
    94aa:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
    94ae:	ed93 7a00 	vldr	s14, [r3]
    94b2:	edd2 6a00 	vldr	s13, [r2]
    94b6:	ee20 0a26 	vmul.f32	s0, s0, s13
    94ba:	eea7 0a27 	vfma.f32	s0, s14, s15
	return tempSamp;
}
    94be:	ee28 0a80 	vmul.f32	s0, s17, s0
    94c2:	ecbd 8b04 	vpop	{d8-d9}
    94c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	float tempSamp = 0.0f;
    94ca:	eddf 8a08 	vldr	s17, [pc, #32]	; 94ec <audioTickVocal+0x16c>
    94ce:	e7c7      	b.n	9460 <audioTickVocal+0xe0>
    94d0:	20004f60 	.word	0x20004f60
    94d4:	20004f90 	.word	0x20004f90
    94d8:	20013f8c 	.word	0x20013f8c
    94dc:	42800000 	.word	0x42800000
    94e0:	200008c4 	.word	0x200008c4
    94e4:	2001d2ac 	.word	0x2001d2ac
    94e8:	20013f0c 	.word	0x20013f0c
    94ec:	00000000 	.word	0x00000000
    94f0:	423c0000 	.word	0x423c0000
    94f4:	42a00000 	.word	0x42a00000
    94f8:	42fe0000 	.word	0x42fe0000
    94fc:	200004a8 	.word	0x200004a8
    9500:	2000051c 	.word	0x2000051c
    9504:	200004b1 	.word	0x200004b1
    9508:	20013f5c 	.word	0x20013f5c
    950c:	20004f3c 	.word	0x20004f3c
    9510:	20013f54 	.word	0x20013f54
    9514:	f3af 8000 	nop.w
    9518:	f3af 8000 	nop.w
    951c:	f3af 8000 	nop.w

00009520 <audioFrameVocal>:
{
    9520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9524:	4b78      	ldr	r3, [pc, #480]	; (9708 <audioFrameVocal+0x1e8>)
{
    9526:	4680      	mov	r8, r0
	if (resetStringInputs)
    9528:	f8df b228 	ldr.w	fp, [pc, #552]	; 9754 <audioFrameVocal+0x234>
		for (int i = 0; i < numStringsThisBoard; i++)
    952c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 9758 <audioFrameVocal+0x238>
{
    9530:	ed2d 8b02 	vpush	{d8}
	uint32_t tempCountFrame = DWT->CYCCNT;
    9534:	685e      	ldr	r6, [r3, #4]
{
    9536:	b083      	sub	sp, #12
	if (resetStringInputs)
    9538:	f89b 3000 	ldrb.w	r3, [fp]
    953c:	2b00      	cmp	r3, #0
    953e:	f040 808e 	bne.w	965e <audioFrameVocal+0x13e>
    9542:	4d72      	ldr	r5, [pc, #456]	; (970c <audioFrameVocal+0x1ec>)
		for (int i = 0; i < numStringsThisBoard; i++)
    9544:	f899 1000 	ldrb.w	r1, [r9]
	if (newPluck)
    9548:	682b      	ldr	r3, [r5, #0]
    954a:	2b00      	cmp	r3, #0
    954c:	d034      	beq.n	95b8 <audioFrameVocal+0x98>
		for (int i = 0; i < numStringsThisBoard; i++)
    954e:	2900      	cmp	r1, #0
    9550:	f000 80d8 	beq.w	9704 <audioFrameVocal+0x1e4>
    9554:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 9748 <audioFrameVocal+0x228>
    9558:	2400      	movs	r4, #0
    955a:	4b6d      	ldr	r3, [pc, #436]	; (9710 <audioFrameVocal+0x1f0>)
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    955c:	9501      	str	r5, [sp, #4]
    955e:	465d      	mov	r5, fp
				float amplitz = stringInputs[i] * 0.000015259021897f;
    9560:	eddf 8a6c 	vldr	s17, [pc, #432]	; 9714 <audioFrameVocal+0x1f4>
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    9564:	469b      	mov	fp, r3
    9566:	f8df a1f4 	ldr.w	sl, [pc, #500]	; 975c <audioFrameVocal+0x23c>
    956a:	4f6b      	ldr	r7, [pc, #428]	; (9718 <audioFrameVocal+0x1f8>)
    956c:	4a6b      	ldr	r2, [pc, #428]	; (971c <audioFrameVocal+0x1fc>)
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
    956e:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    9572:	b29b      	uxth	r3, r3
    9574:	b92b      	cbnz	r3, 9582 <audioFrameVocal+0x62>
    9576:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    957a:	b29b      	uxth	r3, r3
    957c:	2b00      	cmp	r3, #0
    957e:	f040 8095 	bne.w	96ac <audioFrameVocal+0x18c>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
    9582:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
    9586:	b29b      	uxth	r3, r3
    9588:	b12b      	cbz	r3, 9596 <audioFrameVocal+0x76>
    958a:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
    958e:	b29b      	uxth	r3, r3
    9590:	2b00      	cmp	r3, #0
    9592:	f000 80b0 	beq.w	96f6 <audioFrameVocal+0x1d6>
			previousStringInputs[i] = stringInputs[i];
    9596:	f832 c014 	ldrh.w	ip, [r2, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    959a:	f10b 0b04 	add.w	fp, fp, #4
    959e:	f10a 0a04 	add.w	sl, sl, #4
    95a2:	3504      	adds	r5, #4
			previousStringInputs[i] = stringInputs[i];
    95a4:	fa1f fc8c 	uxth.w	ip, ip
    95a8:	f827 c014 	strh.w	ip, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    95ac:	3401      	adds	r4, #1
    95ae:	42a1      	cmp	r1, r4
    95b0:	dcdd      	bgt.n	956e <audioFrameVocal+0x4e>
    95b2:	9d01      	ldr	r5, [sp, #4]
		newPluck = 0;
    95b4:	2300      	movs	r3, #0
    95b6:	602b      	str	r3, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    95b8:	b301      	cbz	r1, 95fc <audioFrameVocal+0xdc>
    95ba:	4d59      	ldr	r5, [pc, #356]	; (9720 <audioFrameVocal+0x200>)
    95bc:	2700      	movs	r7, #0
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    95be:	eddf 8a59 	vldr	s17, [pc, #356]	; 9724 <audioFrameVocal+0x204>
    95c2:	ed9f 8a59 	vldr	s16, [pc, #356]	; 9728 <audioFrameVocal+0x208>
    95c6:	4c59      	ldr	r4, [pc, #356]	; (972c <audioFrameVocal+0x20c>)
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    95c8:	4628      	mov	r0, r5
    95ca:	edd4 1a0b 	vldr	s3, [r4, #44]	; 0x2c
    95ce:	ed94 1a0a 	vldr	s2, [r4, #40]	; 0x28
	for (int i = 0; i < numStringsThisBoard; i++)
    95d2:	3701      	adds	r7, #1
		tVoc_set_tongue_shape_and_touch(&vocal[i], knobScaled[8], knobScaled[9],knobScaled[10],knobScaled[11]);
    95d4:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    95d8:	ed94 0a08 	vldr	s0, [r4, #32]
    95dc:	f000 fab4 	bl	9b48 <__tVoc_set_tongue_shape_and_touch_veneer>
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    95e0:	eeb0 0a48 	vmov.f32	s0, s16
    95e4:	edd4 7a07 	vldr	s15, [r4, #28]
    95e8:	4628      	mov	r0, r5
	for (int i = 0; i < numStringsThisBoard; i++)
    95ea:	3504      	adds	r5, #4
		tVoc_set_velum(&vocal[i], (0.4f * knobScaled[7]) + 0.01f);
    95ec:	eea7 0aa8 	vfma.f32	s0, s15, s17
    95f0:	f000 f962 	bl	98b8 <__tVoc_set_velum_veneer>
	for (int i = 0; i < numStringsThisBoard; i++)
    95f4:	f899 3000 	ldrb.w	r3, [r9]
    95f8:	42bb      	cmp	r3, r7
    95fa:	dce5      	bgt.n	95c8 <audioFrameVocal+0xa8>
    95fc:	4c4c      	ldr	r4, [pc, #304]	; (9730 <audioFrameVocal+0x210>)
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    95fe:	ed9f 8a4d 	vldr	s16, [pc, #308]	; 9734 <audioFrameVocal+0x214>
    9602:	f504 7500 	add.w	r5, r4, #512	; 0x200
    9606:	eb04 0488 	add.w	r4, r4, r8, lsl #2
    960a:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    960e:	f7ff feb7 	bl	9380 <audioTickVocal>
    9612:	ee20 0a08 	vmul.f32	s0, s0, s16
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9616:	3408      	adds	r4, #8
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    9618:	eefd 7ac0 	vcvt.s32.f32	s15, s0
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    961c:	42a5      	cmp	r5, r4
		current_sample = (int32_t)(audioTickVocal() * TWO_TO_23);
    961e:	ee17 3a90 	vmov	r3, s15
		audioOutBuffer[buffer_offset + i + 1] = current_sample;
    9622:	e944 3302 	strd	r3, r3, [r4, #-8]
	for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
    9626:	d1f2      	bne.n	960e <audioFrameVocal+0xee>
	if (switchStrings)
    9628:	4c43      	ldr	r4, [pc, #268]	; (9738 <audioFrameVocal+0x218>)
    962a:	6823      	ldr	r3, [r4, #0]
    962c:	bb8b      	cbnz	r3, 9692 <audioFrameVocal+0x172>
	switchStrings = 0;
    962e:	2200      	movs	r2, #0
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9630:	4b35      	ldr	r3, [pc, #212]	; (9708 <audioFrameVocal+0x1e8>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9632:	4842      	ldr	r0, [pc, #264]	; (973c <audioFrameVocal+0x21c>)
	switchStrings = 0;
    9634:	6022      	str	r2, [r4, #0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9636:	685b      	ldr	r3, [r3, #4]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9638:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
    963c:	1b9b      	subs	r3, r3, r6
    963e:	4940      	ldr	r1, [pc, #256]	; (9740 <audioFrameVocal+0x220>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9640:	4a40      	ldr	r2, [pc, #256]	; (9744 <audioFrameVocal+0x224>)
    9642:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
    9646:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
    9648:	eef8 7a67 	vcvt.f32.u32	s15, s15
    964c:	ee67 7a87 	vmul.f32	s15, s15, s14
    9650:	edc2 7a00 	vstr	s15, [r2]
}
    9654:	b003      	add	sp, #12
    9656:	ecbd 8b02 	vpop	{d8}
    965a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		for (int i = 0; i < numStringsThisBoard; i++)
    965e:	f899 1000 	ldrb.w	r1, [r9]
    9662:	b1d1      	cbz	r1, 969a <audioFrameVocal+0x17a>
    9664:	2400      	movs	r4, #0
    9666:	4d38      	ldr	r5, [pc, #224]	; (9748 <audioFrameVocal+0x228>)
    9668:	4f2b      	ldr	r7, [pc, #172]	; (9718 <audioFrameVocal+0x1f8>)
			previousStringInputs[i] = 0;
    966a:	46a2      	mov	sl, r4
			tADSRT_clear(&fenvelopes[i]);
    966c:	4628      	mov	r0, r5
		for (int i = 0; i < numStringsThisBoard; i++)
    966e:	3504      	adds	r5, #4
			tADSRT_clear(&fenvelopes[i]);
    9670:	f000 fa86 	bl	9b80 <__tADSRT_clear_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    9674:	f899 1000 	ldrb.w	r1, [r9]
			previousStringInputs[i] = 0;
    9678:	f827 a014 	strh.w	sl, [r7, r4, lsl #1]
		for (int i = 0; i < numStringsThisBoard; i++)
    967c:	3401      	adds	r4, #1
			previousStringInputs[i] = 0;
    967e:	f04f 0300 	mov.w	r3, #0
		for (int i = 0; i < numStringsThisBoard; i++)
    9682:	42a1      	cmp	r1, r4
    9684:	dcf2      	bgt.n	966c <audioFrameVocal+0x14c>
		resetStringInputs = 0;
    9686:	f88b 3000 	strb.w	r3, [fp]
		newPluck = 1;
    968a:	2301      	movs	r3, #1
    968c:	4d1f      	ldr	r5, [pc, #124]	; (970c <audioFrameVocal+0x1ec>)
    968e:	602b      	str	r3, [r5, #0]
    9690:	e75a      	b.n	9548 <audioFrameVocal+0x28>
		switchStringModel(switchStrings);
    9692:	6820      	ldr	r0, [r4, #0]
    9694:	f7f7 ff84 	bl	15a0 <switchStringModel>
    9698:	e7c9      	b.n	962e <audioFrameVocal+0x10e>
		newPluck = 1;
    969a:	4d1c      	ldr	r5, [pc, #112]	; (970c <audioFrameVocal+0x1ec>)
    969c:	2301      	movs	r3, #1
		resetStringInputs = 0;
    969e:	f88b 1000 	strb.w	r1, [fp]
		newPluck = 1;
    96a2:	602b      	str	r3, [r5, #0]
	if (newPluck)
    96a4:	682b      	ldr	r3, [r5, #0]
    96a6:	2b00      	cmp	r3, #0
    96a8:	d184      	bne.n	95b4 <audioFrameVocal+0x94>
    96aa:	e7a7      	b.n	95fc <audioFrameVocal+0xdc>
				stringOctave[i] = octave;
    96ac:	4b27      	ldr	r3, [pc, #156]	; (974c <audioFrameVocal+0x22c>)
    96ae:	edd3 7a00 	vldr	s15, [r3]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    96b2:	4b27      	ldr	r3, [pc, #156]	; (9750 <audioFrameVocal+0x230>)
				stringOctave[i] = octave;
    96b4:	edcb 7a00 	vstr	s15, [fp]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    96b8:	eb03 0184 	add.w	r1, r3, r4, lsl #2
				float amplitz = stringInputs[i] * 0.000015259021897f;
    96bc:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    96c0:	ed91 0a00 	vldr	s0, [r1]
				float amplitz = stringInputs[i] * 0.000015259021897f;
    96c4:	b29b      	uxth	r3, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    96c6:	ee37 0a80 	vadd.f32	s0, s15, s0
				float amplitz = stringInputs[i] * 0.000015259021897f;
    96ca:	ee08 3a10 	vmov	s16, r3
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    96ce:	f000 f8fb 	bl	98c8 <__mtof_veneer>
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    96d2:	4628      	mov	r0, r5
				stringFrequencies[i] = mtof(stringMIDIPitches[i]+ stringOctave[i]);
    96d4:	ed8a 0a00 	vstr	s0, [sl]
				tADSRT_setSustain(&fenvelopes[i], 1.0f);// * randomFactors[currentRandom]);
    96d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    96dc:	f000 f8f8 	bl	98d0 <__tADSRT_setSustain_veneer>
				float amplitz = stringInputs[i] * 0.000015259021897f;
    96e0:	eeb8 0ac8 	vcvt.f32.s32	s0, s16
				tADSRT_on(&fenvelopes[i], amplitz);
    96e4:	4628      	mov	r0, r5
    96e6:	ee20 0a28 	vmul.f32	s0, s0, s17
    96ea:	f000 f94d 	bl	9988 <__tADSRT_on_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    96ee:	f899 1000 	ldrb.w	r1, [r9]
			{
    96f2:	4a0a      	ldr	r2, [pc, #40]	; (971c <audioFrameVocal+0x1fc>)
    96f4:	e74f      	b.n	9596 <audioFrameVocal+0x76>
				tADSRT_off(&fenvelopes[i]);
    96f6:	4628      	mov	r0, r5
    96f8:	f000 f89a 	bl	9830 <__tADSRT_off_veneer>
		for (int i = 0; i < numStringsThisBoard; i++)
    96fc:	f899 1000 	ldrb.w	r1, [r9]
    9700:	4a06      	ldr	r2, [pc, #24]	; (971c <audioFrameVocal+0x1fc>)
    9702:	e748      	b.n	9596 <audioFrameVocal+0x76>
		newPluck = 0;
    9704:	6029      	str	r1, [r5, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
    9706:	e779      	b.n	95fc <audioFrameVocal+0xdc>
    9708:	e0001000 	.word	0xe0001000
    970c:	20005020 	.word	0x20005020
    9710:	20013f5c 	.word	0x20013f5c
    9714:	37800080 	.word	0x37800080
    9718:	20005090 	.word	0x20005090
    971c:	20013f3c 	.word	0x20013f3c
    9720:	2001d2ac 	.word	0x2001d2ac
    9724:	3ecccccd 	.word	0x3ecccccd
    9728:	3c23d70a 	.word	0x3c23d70a
    972c:	20004f60 	.word	0x20004f60
    9730:	30000000 	.word	0x30000000
    9734:	4b000000 	.word	0x4b000000
    9738:	20013f74 	.word	0x20013f74
    973c:	200004a4 	.word	0x200004a4
    9740:	20013f78 	.word	0x20013f78
    9744:	20004f4c 	.word	0x20004f4c
    9748:	20004f3c 	.word	0x20004f3c
    974c:	2000502c 	.word	0x2000502c
    9750:	20013f54 	.word	0x20013f54
    9754:	200054a8 	.word	0x200054a8
    9758:	200004b1 	.word	0x200004b1
    975c:	20013f0c 	.word	0x20013f0c

00009760 <__mtofTableLookup_veneer>:
    9760:	f85f f000 	ldr.w	pc, [pc]	; 9764 <__mtofTableLookup_veneer+0x4>
    9764:	08000d15 	.word	0x08000d15

00009768 <__setFilterTypes_veneer>:
    9768:	f85f f000 	ldr.w	pc, [pc]	; 976c <__setFilterTypes_veneer+0x4>
    976c:	0800244d 	.word	0x0800244d

00009770 <__tPBSaw_tick_veneer>:
    9770:	f85f f000 	ldr.w	pc, [pc]	; 9774 <__tPBSaw_tick_veneer+0x4>
    9774:	08014ddd 	.word	0x08014ddd

00009778 <__LEAF_shaper_veneer>:
    9778:	f85f f000 	ldr.w	pc, [pc]	; 977c <__LEAF_shaper_veneer+0x4>
    977c:	08013e55 	.word	0x08013e55

00009780 <__tSVF_setFreqFast_veneer>:
    9780:	f85f f000 	ldr.w	pc, [pc]	; 9784 <__tSVF_setFreqFast_veneer+0x4>
    9784:	08011ab9 	.word	0x08011ab9

00009788 <__tPBTriangle_setFreq_veneer>:
    9788:	f85f f000 	ldr.w	pc, [pc]	; 978c <__tPBTriangle_setFreq_veneer+0x4>
    978c:	08014a35 	.word	0x08014a35

00009790 <__LEAF_clip_veneer>:
    9790:	f85f f000 	ldr.w	pc, [pc]	; 9794 <__LEAF_clip_veneer+0x4>
    9794:	08013f19 	.word	0x08013f19

00009798 <__tVoc_init_veneer>:
    9798:	f85f f000 	ldr.w	pc, [pc]	; 979c <__tVoc_init_veneer+0x4>
    979c:	0801845d 	.word	0x0801845d

000097a0 <__arm_sin_f32_veneer>:
    97a0:	f85f f000 	ldr.w	pc, [pc]	; 97a4 <__arm_sin_f32_veneer+0x4>
    97a4:	08000c01 	.word	0x08000c01

000097a8 <__tSimpleLivingString3_setLevSmoothFactor_veneer>:
    97a8:	f85f f000 	ldr.w	pc, [pc]	; 97ac <__tSimpleLivingString3_setLevSmoothFactor_veneer+0x4>
    97ac:	08015b2d 	.word	0x08015b2d

000097b0 <__MX_SPI1_Init_veneer>:
    97b0:	f85f f000 	ldr.w	pc, [pc]	; 97b4 <__MX_SPI1_Init_veneer+0x4>
    97b4:	08003511 	.word	0x08003511

000097b8 <__tDiodeFilter_tickEfficient_veneer>:
    97b8:	f85f f000 	ldr.w	pc, [pc]	; 97bc <__tDiodeFilter_tickEfficient_veneer+0x4>
    97bc:	080133e1 	.word	0x080133e1

000097c0 <__tTString_setFeedbackStrength_veneer>:
    97c0:	f85f f000 	ldr.w	pc, [pc]	; 97c4 <__tTString_setFeedbackStrength_veneer+0x4>
    97c4:	080170cd 	.word	0x080170cd

000097c8 <__tADSRT_setRelease_veneer>:
    97c8:	f85f f000 	ldr.w	pc, [pc]	; 97cc <__tADSRT_setRelease_veneer+0x4>
    97cc:	08010bcd 	.word	0x08010bcd

000097d0 <__tExpSmooth_init_veneer>:
    97d0:	f85f f000 	ldr.w	pc, [pc]	; 97d4 <__tExpSmooth_init_veneer+0x4>
    97d4:	080110c1 	.word	0x080110c1

000097d8 <__tCycle_setFreq_veneer>:
    97d8:	f85f f000 	ldr.w	pc, [pc]	; 97dc <__tCycle_setFreq_veneer+0x4>
    97dc:	0801486d 	.word	0x0801486d

000097e0 <__tTriLFO_setFreq_veneer>:
    97e0:	f85f f000 	ldr.w	pc, [pc]	; 97e4 <__tTriLFO_setFreq_veneer+0x4>
    97e4:	08015529 	.word	0x08015529

000097e8 <__LEAF_mapToZeroToOneOutput_veneer>:
    97e8:	f85f f000 	ldr.w	pc, [pc]	; 97ec <__LEAF_mapToZeroToOneOutput_veneer+0x4>
    97ec:	08013c69 	.word	0x08013c69

000097f0 <__tPickupNonLinearity_tick_veneer>:
    97f0:	f85f f000 	ldr.w	pc, [pc]	; 97f4 <__tPickupNonLinearity_tick_veneer+0x4>
    97f4:	08015711 	.word	0x08015711

000097f8 <__tVZFilterLS_tick_veneer>:
    97f8:	f85f f000 	ldr.w	pc, [pc]	; 97fc <__tVZFilterLS_tick_veneer+0x4>
    97fc:	080125d9 	.word	0x080125d9

00009800 <__tVoc_tick_veneer>:
    9800:	f85f f000 	ldr.w	pc, [pc]	; 9804 <__tVoc_tick_veneer+0x4>
    9804:	080184cd 	.word	0x080184cd

00009808 <__tTapeDelay_setDelay_veneer>:
    9808:	f85f f000 	ldr.w	pc, [pc]	; 980c <__tTapeDelay_setDelay_veneer+0x4>
    980c:	0801063d 	.word	0x0801063d

00009810 <__tCompressor_tick_veneer>:
    9810:	f85f f000 	ldr.w	pc, [pc]	; 9814 <__tCompressor_tick_veneer+0x4>
    9814:	08010859 	.word	0x08010859

00009818 <__tSimpleLivingString3_setPickupPoint_veneer>:
    9818:	f85f f000 	ldr.w	pc, [pc]	; 981c <__tSimpleLivingString3_setPickupPoint_veneer+0x4>
    981c:	08015e5d 	.word	0x08015e5d

00009820 <__tSVF_setQ_veneer>:
    9820:	f85f f000 	ldr.w	pc, [pc]	; 9824 <__tSVF_setQ_veneer+0x4>
    9824:	08011b3d 	.word	0x08011b3d

00009828 <__tTString_setHarmonic_veneer>:
    9828:	f85f f000 	ldr.w	pc, [pc]	; 982c <__tTString_setHarmonic_veneer+0x4>
    982c:	080170b9 	.word	0x080170b9

00009830 <__tADSRT_off_veneer>:
    9830:	f85f f000 	ldr.w	pc, [pc]	; 9834 <__tADSRT_off_veneer+0x4>
    9834:	08010c3d 	.word	0x08010c3d

00009838 <__tIntPhasor_tick_veneer>:
    9838:	f85f f000 	ldr.w	pc, [pc]	; 983c <__tIntPhasor_tick_veneer+0x4>
    983c:	08015061 	.word	0x08015061

00009840 <__tPickupNonLinearity_free_veneer>:
    9840:	f85f f000 	ldr.w	pc, [pc]	; 9844 <__tPickupNonLinearity_free_veneer+0x4>
    9844:	08015709 	.word	0x08015709

00009848 <__tPBPulse_setWidth_veneer>:
    9848:	f85f f000 	ldr.w	pc, [pc]	; 984c <__tPBPulse_setWidth_veneer+0x4>
    984c:	08014d61 	.word	0x08014d61

00009850 <__tPBTriangle_tick_veneer>:
    9850:	f85f f000 	ldr.w	pc, [pc]	; 9854 <__tPBTriangle_tick_veneer+0x4>
    9854:	08014909 	.word	0x08014909

00009858 <__tVZFilter_setFreqFast_veneer>:
    9858:	f85f f000 	ldr.w	pc, [pc]	; 985c <__tVZFilter_setFreqFast_veneer+0x4>
    985c:	080120e1 	.word	0x080120e1

00009860 <__tTriLFO_setPhase_veneer>:
    9860:	f85f f000 	ldr.w	pc, [pc]	; 9864 <__tTriLFO_setPhase_veneer+0x4>
    9864:	08015541 	.word	0x08015541

00009868 <__tSimpleLivingString3_setLevStrength_veneer>:
    9868:	f85f f000 	ldr.w	pc, [pc]	; 986c <__tSimpleLivingString3_setLevStrength_veneer+0x4>
    986c:	08015b35 	.word	0x08015b35

00009870 <__tADSRT_tickNoInterp_veneer>:
    9870:	f85f f000 	ldr.w	pc, [pc]	; 9874 <__tADSRT_tickNoInterp_veneer+0x4>
    9874:	08010f1d 	.word	0x08010f1d

00009878 <__tLinearDelay_setDelay_veneer>:
    9878:	f85f f000 	ldr.w	pc, [pc]	; 987c <__tLinearDelay_setDelay_veneer+0x4>
    987c:	08010195 	.word	0x08010195

00009880 <__tVZFilterLS_setFreqFast_veneer>:
    9880:	f85f f000 	ldr.w	pc, [pc]	; 9884 <__tVZFilterLS_setFreqFast_veneer+0x4>
    9884:	0801262d 	.word	0x0801262d

00009888 <__tExpSmooth_setDest_veneer>:
    9888:	f85f f000 	ldr.w	pc, [pc]	; 988c <__tExpSmooth_setDest_veneer+0x4>
    988c:	080111c5 	.word	0x080111c5

00009890 <__tSquareLFO_setFreq_veneer>:
    9890:	f85f f000 	ldr.w	pc, [pc]	; 9894 <__tSquareLFO_setFreq_veneer+0x4>
    9894:	0801524d 	.word	0x0801524d

00009898 <__tVZFilterLS_setResonance_veneer>:
    9898:	f85f f000 	ldr.w	pc, [pc]	; 989c <__tVZFilterLS_setResonance_veneer+0x4>
    989c:	08012719 	.word	0x08012719

000098a0 <__tSawSquareLFO_tick_veneer>:
    98a0:	f85f f000 	ldr.w	pc, [pc]	; 98a4 <__tSawSquareLFO_tick_veneer+0x4>
    98a4:	08015369 	.word	0x08015369

000098a8 <__tVZFilterHS_tick_veneer>:
    98a8:	f85f f000 	ldr.w	pc, [pc]	; 98ac <__tVZFilterHS_tick_veneer+0x4>
    98ac:	080128c1 	.word	0x080128c1

000098b0 <__memset_veneer>:
    98b0:	f85f f000 	ldr.w	pc, [pc]	; 98b4 <__memset_veneer+0x4>
    98b4:	080189e5 	.word	0x080189e5

000098b8 <__tVoc_set_velum_veneer>:
    98b8:	f85f f000 	ldr.w	pc, [pc]	; 98bc <__tVoc_set_velum_veneer+0x4>
    98bc:	08018591 	.word	0x08018591

000098c0 <__tVoc_set_tractLength_veneer>:
    98c0:	f85f f000 	ldr.w	pc, [pc]	; 98c4 <__tVoc_set_tractLength_veneer+0x4>
    98c4:	0801857d 	.word	0x0801857d

000098c8 <__mtof_veneer>:
    98c8:	f85f f000 	ldr.w	pc, [pc]	; 98cc <__mtof_veneer+0x4>
    98cc:	08014381 	.word	0x08014381

000098d0 <__tADSRT_setSustain_veneer>:
    98d0:	f85f f000 	ldr.w	pc, [pc]	; 98d4 <__tADSRT_setSustain_veneer+0x4>
    98d4:	08010bb1 	.word	0x08010bb1

000098d8 <__tPickupNonLinearity_init_veneer>:
    98d8:	f85f f000 	ldr.w	pc, [pc]	; 98dc <__tPickupNonLinearity_init_veneer+0x4>
    98dc:	080156f1 	.word	0x080156f1

000098e0 <__faster_mtof_veneer>:
    98e0:	f85f f000 	ldr.w	pc, [pc]	; 98e4 <__faster_mtof_veneer+0x4>
    98e4:	080143d5 	.word	0x080143d5

000098e8 <__tTString_pluck_veneer>:
    98e8:	f85f f000 	ldr.w	pc, [pc]	; 98ec <__tTString_pluck_veneer+0x4>
    98ec:	08017151 	.word	0x08017151

000098f0 <__MX_SPI5_Init_veneer>:
    98f0:	f85f f000 	ldr.w	pc, [pc]	; 98f4 <__MX_SPI5_Init_veneer+0x4>
    98f4:	08003569 	.word	0x08003569

000098f8 <__tTString_setFeedbackReactionSpeed_veneer>:
    98f8:	f85f f000 	ldr.w	pc, [pc]	; 98fc <__tTString_setFeedbackReactionSpeed_veneer+0x4>
    98fc:	08017115 	.word	0x08017115

00009900 <__tVZFilter_setFreq_veneer>:
    9900:	f85f f000 	ldr.w	pc, [pc]	; 9904 <__tVZFilter_setFreq_veneer+0x4>
    9904:	080120b1 	.word	0x080120b1

00009908 <__HAL_SPI_TransmitReceive_DMA_veneer>:
    9908:	f85f f000 	ldr.w	pc, [pc]	; 990c <__HAL_SPI_TransmitReceive_DMA_veneer+0x4>
    990c:	0800b019 	.word	0x0800b019

00009910 <__setEffectsFunctions_veneer>:
    9910:	f85f f000 	ldr.w	pc, [pc]	; 9914 <__setEffectsFunctions_veneer+0x4>
    9914:	08001f81 	.word	0x08001f81

00009918 <__tVZFilterHS_setResonance_veneer>:
    9918:	f85f f000 	ldr.w	pc, [pc]	; 991c <__tVZFilterHS_setResonance_veneer+0x4>
    991c:	080129fd 	.word	0x080129fd

00009920 <__tSineTriLFO_tick_veneer>:
    9920:	f85f f000 	ldr.w	pc, [pc]	; 9924 <__tSineTriLFO_tick_veneer+0x4>
    9924:	080155ed 	.word	0x080155ed

00009928 <__tSquareLFO_setPulseWidth_veneer>:
    9928:	f85f f000 	ldr.w	pc, [pc]	; 992c <__tSquareLFO_setPulseWidth_veneer+0x4>
    992c:	0801527d 	.word	0x0801527d

00009930 <__tCrusher_setQuality_veneer>:
    9930:	f85f f000 	ldr.w	pc, [pc]	; 9934 <__tCrusher_setQuality_veneer+0x4>
    9934:	08010755 	.word	0x08010755

00009938 <__tanhf_veneer>:
    9938:	f85f f000 	ldr.w	pc, [pc]	; 993c <__tanhf_veneer+0x4>
    993c:	08019555 	.word	0x08019555

00009940 <__tPBSineTriangle_tick_veneer>:
    9940:	f85f f000 	ldr.w	pc, [pc]	; 9944 <__tPBSineTriangle_tick_veneer+0x4>
    9944:	08014aed 	.word	0x08014aed

00009948 <__tTriLFO_tick_veneer>:
    9948:	f85f f000 	ldr.w	pc, [pc]	; 994c <__tTriLFO_tick_veneer+0x4>
    994c:	080154f5 	.word	0x080154f5

00009950 <__tVZFilterBell_tick_veneer>:
    9950:	f85f f000 	ldr.w	pc, [pc]	; 9954 <__tVZFilterBell_tick_veneer+0x4>
    9954:	08012bed 	.word	0x08012bed

00009958 <__tSineTriLFO_setShape_veneer>:
    9958:	f85f f000 	ldr.w	pc, [pc]	; 995c <__tSineTriLFO_setShape_veneer+0x4>
    995c:	080156e9 	.word	0x080156e9

00009960 <__tTString_tick_veneer>:
    9960:	f85f f000 	ldr.w	pc, [pc]	; 9964 <__tTString_tick_veneer+0x4>
    9964:	08016575 	.word	0x08016575

00009968 <__tPBTriangle_setSkew_veneer>:
    9968:	f85f f000 	ldr.w	pc, [pc]	; 996c <__tPBTriangle_setSkew_veneer+0x4>
    996c:	08014a49 	.word	0x08014a49

00009970 <__tSquareLFO_setPhase_veneer>:
    9970:	f85f f000 	ldr.w	pc, [pc]	; 9974 <__tSquareLFO_setPhase_veneer+0x4>
    9974:	080152bd 	.word	0x080152bd

00009978 <__tVZFilter_setGain_veneer>:
    9978:	f85f f000 	ldr.w	pc, [pc]	; 997c <__tVZFilter_setGain_veneer+0x4>
    997c:	080123b5 	.word	0x080123b5

00009980 <__tSimpleLivingString3_free_veneer>:
    9980:	f85f f000 	ldr.w	pc, [pc]	; 9984 <__tSimpleLivingString3_free_veneer+0x4>
    9984:	080159f1 	.word	0x080159f1

00009988 <__tADSRT_on_veneer>:
    9988:	f85f f000 	ldr.w	pc, [pc]	; 998c <__tADSRT_on_veneer+0x4>
    998c:	08010c19 	.word	0x08010c19

00009990 <__fasterexpf_veneer>:
    9990:	f85f f000 	ldr.w	pc, [pc]	; 9994 <__fasterexpf_veneer+0x4>
    9994:	08013cf5 	.word	0x08013cf5

00009998 <__tTString_setTensionSpeed_veneer>:
    9998:	f85f f000 	ldr.w	pc, [pc]	; 999c <__tTString_setTensionSpeed_veneer+0x4>
    999c:	08017005 	.word	0x08017005

000099a0 <__tADSRT_setDecay_veneer>:
    99a0:	f85f f000 	ldr.w	pc, [pc]	; 99a4 <__tADSRT_setDecay_veneer+0x4>
    99a4:	08010b89 	.word	0x08010b89

000099a8 <__tSimpleLivingString3_initToPool_veneer>:
    99a8:	f85f f000 	ldr.w	pc, [pc]	; 99ac <__tSimpleLivingString3_initToPool_veneer+0x4>
    99ac:	08015771 	.word	0x08015771

000099b0 <__tSimpleLivingString3_setTargetLev_veneer>:
    99b0:	f85f f000 	ldr.w	pc, [pc]	; 99b4 <__tSimpleLivingString3_setTargetLev_veneer+0x4>
    99b4:	08015b25 	.word	0x08015b25

000099b8 <__tSimpleLivingString3_setFreq_veneer>:
    99b8:	f85f f000 	ldr.w	pc, [pc]	; 99bc <__tSimpleLivingString3_setFreq_veneer+0x4>
    99bc:	08015a31 	.word	0x08015a31

000099c0 <__tTString_free_veneer>:
    99c0:	f85f f000 	ldr.w	pc, [pc]	; 99c4 <__tTString_free_veneer+0x4>
    99c4:	08016461 	.word	0x08016461

000099c8 <__tSimpleLivingString3_tick_veneer>:
    99c8:	f85f f000 	ldr.w	pc, [pc]	; 99cc <__tSimpleLivingString3_tick_veneer+0x4>
    99cc:	08015ca9 	.word	0x08015ca9

000099d0 <__tCrusher_tick_veneer>:
    99d0:	f85f f000 	ldr.w	pc, [pc]	; 99d4 <__tCrusher_tick_veneer+0x4>
    99d4:	080106c1 	.word	0x080106c1

000099d8 <__tSawSquareLFO_setPhase_veneer>:
    99d8:	f85f f000 	ldr.w	pc, [pc]	; 99dc <__tSawSquareLFO_setPhase_veneer+0x4>
    99dc:	08015435 	.word	0x08015435

000099e0 <__setLFOShapes_veneer>:
    99e0:	f85f f000 	ldr.w	pc, [pc]	; 99e4 <__setLFOShapes_veneer+0x4>
    99e4:	080025e5 	.word	0x080025e5

000099e8 <__tHighpass_tick_veneer>:
    99e8:	f85f f000 	ldr.w	pc, [pc]	; 99ec <__tHighpass_tick_veneer+0x4>
    99ec:	08011c2d 	.word	0x08011c2d

000099f0 <__tTString_setPickupModAmp_veneer>:
    99f0:	f85f f000 	ldr.w	pc, [pc]	; 99f4 <__tTString_setPickupModAmp_veneer+0x4>
    99f4:	08016f31 	.word	0x08016f31

000099f8 <__fastSine_veneer>:
    99f8:	f85f f000 	ldr.w	pc, [pc]	; 99fc <__fastSine_veneer+0x4>
    99fc:	08013ffd 	.word	0x08013ffd

00009a00 <__tPBPulse_tick_veneer>:
    9a00:	f85f f000 	ldr.w	pc, [pc]	; 9a04 <__tPBPulse_tick_veneer+0x4>
    9a04:	08014cc9 	.word	0x08014cc9

00009a08 <__tADSRT_tick_veneer>:
    9a08:	f85f f000 	ldr.w	pc, [pc]	; 9a0c <__tADSRT_tick_veneer+0x4>
    9a0c:	08010c59 	.word	0x08010c59

00009a10 <__tExpSmooth_tick_veneer>:
    9a10:	f85f f000 	ldr.w	pc, [pc]	; 9a14 <__tExpSmooth_tick_veneer+0x4>
    9a14:	080111e1 	.word	0x080111e1

00009a18 <__tSVF_tick_veneer>:
    9a18:	f85f f000 	ldr.w	pc, [pc]	; 9a1c <__tSVF_tick_veneer+0x4>
    9a1c:	080119dd 	.word	0x080119dd

00009a20 <__tLadderFilter_tick_veneer>:
    9a20:	f85f f000 	ldr.w	pc, [pc]	; 9a24 <__tLadderFilter_tick_veneer+0x4>
    9a24:	08013935 	.word	0x08013935

00009a28 <__tDiodeFilter_setQ_veneer>:
    9a28:	f85f f000 	ldr.w	pc, [pc]	; 9a2c <__tDiodeFilter_setQ_veneer+0x4>
    9a2c:	0801381d 	.word	0x0801381d

00009a30 <__tVZFilter_setResonance_veneer>:
    9a30:	f85f f000 	ldr.w	pc, [pc]	; 9a34 <__tVZFilter_setResonance_veneer+0x4>
    9a34:	080123ed 	.word	0x080123ed

00009a38 <__tTString_setRippleDepth_veneer>:
    9a38:	f85f f000 	ldr.w	pc, [pc]	; 9a3c <__tTString_setRippleDepth_veneer+0x4>
    9a3c:	08017035 	.word	0x08017035

00009a40 <__tTString_setDecayInSeconds_veneer>:
    9a40:	f85f f000 	ldr.w	pc, [pc]	; 9a44 <__tTString_setDecayInSeconds_veneer+0x4>
    9a44:	08016ed9 	.word	0x08016ed9

00009a48 <__tVoc_set_tenseness_veneer>:
    9a48:	f85f f000 	ldr.w	pc, [pc]	; 9a4c <__tVoc_set_tenseness_veneer+0x4>
    9a4c:	08018585 	.word	0x08018585

00009a50 <__tExpSmooth_setValAndDest_veneer>:
    9a50:	f85f f000 	ldr.w	pc, [pc]	; 9a54 <__tExpSmooth_setValAndDest_veneer+0x4>
    9a54:	080111d5 	.word	0x080111d5

00009a58 <__tIntPhasor_setFreq_veneer>:
    9a58:	f85f f000 	ldr.w	pc, [pc]	; 9a5c <__tIntPhasor_setFreq_veneer+0x4>
    9a5c:	08015081 	.word	0x08015081

00009a60 <__arm_fir_decimate_f32_veneer>:
    9a60:	f85f f000 	ldr.w	pc, [pc]	; 9a64 <__arm_fir_decimate_f32_veneer+0x4>
    9a64:	08000a19 	.word	0x08000a19

00009a68 <__dbToATableLookup_veneer>:
    9a68:	f85f f000 	ldr.w	pc, [pc]	; 9a6c <__dbToATableLookup_veneer+0x4>
    9a6c:	08000c99 	.word	0x08000c99

00009a70 <__tIntPhasor_setPhase_veneer>:
    9a70:	f85f f000 	ldr.w	pc, [pc]	; 9a74 <__tIntPhasor_setPhase_veneer+0x4>
    9a74:	08015099 	.word	0x08015099

00009a78 <__tTString_setPhantomHarmonicsGain_veneer>:
    9a78:	f85f f000 	ldr.w	pc, [pc]	; 9a7c <__tTString_setPhantomHarmonicsGain_veneer+0x4>
    9a7c:	08016ffd 	.word	0x08016ffd

00009a80 <__tDiodeFilter_setFreqFast_veneer>:
    9a80:	f85f f000 	ldr.w	pc, [pc]	; 9a84 <__tDiodeFilter_setFreqFast_veneer+0x4>
    9a84:	080137c1 	.word	0x080137c1

00009a88 <__tCrusher_setRound_veneer>:
    9a88:	f85f f000 	ldr.w	pc, [pc]	; 9a8c <__tCrusher_setRound_veneer+0x4>
    9a8c:	080107a1 	.word	0x080107a1

00009a90 <__tSimpleLivingString3_setLevMode_veneer>:
    9a90:	f85f f000 	ldr.w	pc, [pc]	; 9a94 <__tSimpleLivingString3_setLevMode_veneer+0x4>
    9a94:	08015b3d 	.word	0x08015b3d

00009a98 <__HAL_SPI_Abort_veneer>:
    9a98:	f85f f000 	ldr.w	pc, [pc]	; 9a9c <__HAL_SPI_Abort_veneer+0x4>
    9a9c:	0800b255 	.word	0x0800b255

00009aa0 <__changeOversampling_veneer>:
    9aa0:	f85f f000 	ldr.w	pc, [pc]	; 9aa4 <__changeOversampling_veneer+0x4>
    9aa4:	08003fc9 	.word	0x08003fc9

00009aa8 <__tVoc_setFreq_veneer>:
    9aa8:	f85f f000 	ldr.w	pc, [pc]	; 9aac <__tVoc_setFreq_veneer+0x4>
    9aac:	08018571 	.word	0x08018571

00009ab0 <__tVZFilterBell_setBandwidth_veneer>:
    9ab0:	f85f f000 	ldr.w	pc, [pc]	; 9ab4 <__tVZFilterBell_setBandwidth_veneer+0x4>
    9ab4:	08012c45 	.word	0x08012c45

00009ab8 <__fastPowf_veneer>:
    9ab8:	f85f f000 	ldr.w	pc, [pc]	; 9abc <__fastPowf_veneer+0x4>
    9abc:	08013dfd 	.word	0x08013dfd

00009ac0 <__tSineTriLFO_setFreq_veneer>:
    9ac0:	f85f f000 	ldr.w	pc, [pc]	; 9ac4 <__tSineTriLFO_setFreq_veneer+0x4>
    9ac4:	08015689 	.word	0x08015689

00009ac8 <__tTString_setTensionGain_veneer>:
    9ac8:	f85f f000 	ldr.w	pc, [pc]	; 9acc <__tTString_setTensionGain_veneer+0x4>
    9acc:	08016fcd 	.word	0x08016fcd

00009ad0 <__tVZFilterBell_setFreq_veneer>:
    9ad0:	f85f f000 	ldr.w	pc, [pc]	; 9ad4 <__tVZFilterBell_setFreq_veneer+0x4>
    9ad4:	08012cd1 	.word	0x08012cd1

00009ad8 <__tTString_mute_veneer>:
    9ad8:	f85f f000 	ldr.w	pc, [pc]	; 9adc <__tTString_mute_veneer+0x4>
    9adc:	08016f49 	.word	0x08016f49

00009ae0 <__tTString_setFreq_veneer>:
    9ae0:	f85f f000 	ldr.w	pc, [pc]	; 9ae4 <__tTString_setFreq_veneer+0x4>
    9ae4:	08016e59 	.word	0x08016e59

00009ae8 <__tVZFilterBell_setGain_veneer>:
    9ae8:	f85f f000 	ldr.w	pc, [pc]	; 9aec <__tVZFilterBell_setGain_veneer+0x4>
    9aec:	08012e9d 	.word	0x08012e9d

00009af0 <__tSimpleLivingString3_setDampFreq_veneer>:
    9af0:	f85f f000 	ldr.w	pc, [pc]	; 9af4 <__tSimpleLivingString3_setDampFreq_veneer+0x4>
    9af4:	08015ad1 	.word	0x08015ad1

00009af8 <__tVZFilterHS_setGain_veneer>:
    9af8:	f85f f000 	ldr.w	pc, [pc]	; 9afc <__tVZFilterHS_setGain_veneer+0x4>
    9afc:	080129a1 	.word	0x080129a1

00009b00 <__HAL_RNG_GenerateRandomNumber_veneer>:
    9b00:	f85f f000 	ldr.w	pc, [pc]	; 9b04 <__HAL_RNG_GenerateRandomNumber_veneer+0x4>
    9b04:	0800936d 	.word	0x0800936d

00009b08 <__tCrusher_setSamplingRatio_veneer>:
    9b08:	f85f f000 	ldr.w	pc, [pc]	; 9b0c <__tCrusher_setSamplingRatio_veneer+0x4>
    9b0c:	080107a9 	.word	0x080107a9

00009b10 <__tADSRT_setAttack_veneer>:
    9b10:	f85f f000 	ldr.w	pc, [pc]	; 9b14 <__tADSRT_setAttack_veneer+0x4>
    9b14:	08010b61 	.word	0x08010b61

00009b18 <__tVoc_setDoubleComputeFlag_veneer>:
    9b18:	f85f f000 	ldr.w	pc, [pc]	; 9b1c <__tVoc_setDoubleComputeFlag_veneer+0x4>
    9b1c:	08018569 	.word	0x08018569

00009b20 <__tCrusher_setOperation_veneer>:
    9b20:	f85f f000 	ldr.w	pc, [pc]	; 9b24 <__tCrusher_setOperation_veneer+0x4>
    9b24:	08010741 	.word	0x08010741

00009b28 <__tPBSineTriangle_setShape_veneer>:
    9b28:	f85f f000 	ldr.w	pc, [pc]	; 9b2c <__tPBSineTriangle_setShape_veneer+0x4>
    9b2c:	08014c71 	.word	0x08014c71

00009b30 <__LEAF_map_veneer>:
    9b30:	f85f f000 	ldr.w	pc, [pc]	; 9b34 <__LEAF_map_veneer+0x4>
    9b34:	08013c3d 	.word	0x08013c3d

00009b38 <__tPBSaw_setFreq_veneer>:
    9b38:	f85f f000 	ldr.w	pc, [pc]	; 9b3c <__tPBSaw_setFreq_veneer+0x4>
    9b3c:	08014e2d 	.word	0x08014e2d

00009b40 <__tSimpleLivingString3_setDecay_veneer>:
    9b40:	f85f f000 	ldr.w	pc, [pc]	; 9b44 <__tSimpleLivingString3_setDecay_veneer+0x4>
    9b44:	08015ad9 	.word	0x08015ad9

00009b48 <__tVoc_set_tongue_shape_and_touch_veneer>:
    9b48:	f85f f000 	ldr.w	pc, [pc]	; 9b4c <__tVoc_set_tongue_shape_and_touch_veneer+0x4>
    9b4c:	08018821 	.word	0x08018821

00009b50 <__tExpSmooth_free_veneer>:
    9b50:	f85f f000 	ldr.w	pc, [pc]	; 9b54 <__tExpSmooth_free_veneer+0x4>
    9b54:	08011171 	.word	0x08011171

00009b58 <__tSawSquareLFO_setFreq_veneer>:
    9b58:	f85f f000 	ldr.w	pc, [pc]	; 9b5c <__tSawSquareLFO_setFreq_veneer+0x4>
    9b5c:	080153ed 	.word	0x080153ed

00009b60 <__tVZFilterHS_setFreqFast_veneer>:
    9b60:	f85f f000 	ldr.w	pc, [pc]	; 9b64 <__tVZFilterHS_setFreqFast_veneer+0x4>
    9b64:	08012915 	.word	0x08012915

00009b68 <__LEAF_tanh_veneer>:
    9b68:	f85f f000 	ldr.w	pc, [pc]	; 9b6c <__LEAF_tanh_veneer+0x4>
    9b6c:	08013f29 	.word	0x08013f29

00009b70 <__arm_fir_interpolate_f32_veneer>:
    9b70:	f85f f000 	ldr.w	pc, [pc]	; 9b74 <__arm_fir_interpolate_f32_veneer+0x4>
    9b74:	08000ae9 	.word	0x08000ae9

00009b78 <__tTString_setFilterFreqDirectly_veneer>:
    9b78:	f85f f000 	ldr.w	pc, [pc]	; 9b7c <__tTString_setFilterFreqDirectly_veneer+0x4>
    9b7c:	08016f75 	.word	0x08016f75

00009b80 <__tADSRT_clear_veneer>:
    9b80:	f85f f000 	ldr.w	pc, [pc]	; 9b84 <__tADSRT_clear_veneer+0x4>
    9b84:	08010c4d 	.word	0x08010c4d

00009b88 <__tADSRT_setLeakFactor_veneer>:
    9b88:	f85f f000 	ldr.w	pc, [pc]	; 9b8c <__tADSRT_setLeakFactor_veneer+0x4>
    9b8c:	08010bf5 	.word	0x08010bf5

00009b90 <__tVZFilterLS_setGain_veneer>:
    9b90:	f85f f000 	ldr.w	pc, [pc]	; 9b94 <__tVZFilterLS_setGain_veneer+0x4>
    9b94:	080126b9 	.word	0x080126b9

00009b98 <__tTString_setOpenStringFrequency_veneer>:
    9b98:	f85f f000 	ldr.w	pc, [pc]	; 9b9c <__tTString_setOpenStringFrequency_veneer+0x4>
    9b9c:	08016fe5 	.word	0x08016fe5

00009ba0 <__tPBSawSquare_setFreq_veneer>:
    9ba0:	f85f f000 	ldr.w	pc, [pc]	; 9ba4 <__tPBSawSquare_setFreq_veneer+0x4>
    9ba4:	08014f19 	.word	0x08014f19

00009ba8 <__tSquareLFO_tick_veneer>:
    9ba8:	f85f f000 	ldr.w	pc, [pc]	; 9bac <__tSquareLFO_tick_veneer+0x4>
    9bac:	08015205 	.word	0x08015205

00009bb0 <__tTString_setPickupModFreq_veneer>:
    9bb0:	f85f f000 	ldr.w	pc, [pc]	; 9bb4 <__tTString_setPickupModFreq_veneer+0x4>
    9bb4:	08016f39 	.word	0x08016f39

00009bb8 <__tADSRT_init_veneer>:
    9bb8:	f85f f000 	ldr.w	pc, [pc]	; 9bbc <__tADSRT_init_veneer+0x4>
    9bbc:	08010a99 	.word	0x08010a99

00009bc0 <__tCycle_init_veneer>:
    9bc0:	f85f f000 	ldr.w	pc, [pc]	; 9bc4 <__tCycle_init_veneer+0x4>
    9bc4:	080147a9 	.word	0x080147a9

00009bc8 <__tTString_setHarmonicity_veneer>:
    9bc8:	f85f f000 	ldr.w	pc, [pc]	; 9bcc <__tTString_setHarmonicity_veneer+0x4>
    9bcc:	08017415 	.word	0x08017415

00009bd0 <__HAL_SPI_Receive_DMA_veneer>:
    9bd0:	f85f f000 	ldr.w	pc, [pc]	; 9bd4 <__HAL_SPI_Receive_DMA_veneer+0x4>
    9bd4:	0800ae59 	.word	0x0800ae59

00009bd8 <__tPBPulse_setFreq_veneer>:
    9bd8:	f85f f000 	ldr.w	pc, [pc]	; 9bdc <__tPBPulse_setFreq_veneer+0x4>
    9bdc:	08014d49 	.word	0x08014d49

00009be0 <__tLadderFilter_setQ_veneer>:
    9be0:	f85f f000 	ldr.w	pc, [pc]	; 9be4 <__tLadderFilter_setQ_veneer+0x4>
    9be4:	08013be9 	.word	0x08013be9

00009be8 <__tSawSquareLFO_setShape_veneer>:
    9be8:	f85f f000 	ldr.w	pc, [pc]	; 9bec <__tSawSquareLFO_setShape_veneer+0x4>
    9bec:	08015499 	.word	0x08015499

00009bf0 <__tPBSawSquare_tick_veneer>:
    9bf0:	f85f f000 	ldr.w	pc, [pc]	; 9bf4 <__tPBSawSquare_tick_veneer+0x4>
    9bf4:	08014e7d 	.word	0x08014e7d

00009bf8 <__tTString_setInharmonic_veneer>:
    9bf8:	f85f f000 	ldr.w	pc, [pc]	; 9bfc <__tTString_setInharmonic_veneer+0x4>
    9bfc:	0801746d 	.word	0x0801746d

00009c00 <__tPBSineTriangle_setFreq_veneer>:
    9c00:	f85f f000 	ldr.w	pc, [pc]	; 9c04 <__tPBSineTriangle_setFreq_veneer+0x4>
    9c04:	08014c45 	.word	0x08014c45

00009c08 <__tDiodeFilter_tick_veneer>:
    9c08:	f85f f000 	ldr.w	pc, [pc]	; 9c0c <__tDiodeFilter_tick_veneer+0x4>
    9c0c:	08013001 	.word	0x08013001

00009c10 <__tPBSawSquare_setShape_veneer>:
    9c10:	f85f f000 	ldr.w	pc, [pc]	; 9c14 <__tPBSawSquare_setShape_veneer+0x4>
    9c14:	08014f31 	.word	0x08014f31

00009c18 <__tTString_initToPool_veneer>:
    9c18:	f85f f000 	ldr.w	pc, [pc]	; 9c1c <__tTString_initToPool_veneer+0x4>
    9c1c:	08015e65 	.word	0x08015e65

00009c20 <__tCycle_tick_veneer>:
    9c20:	f85f f000 	ldr.w	pc, [pc]	; 9c24 <__tCycle_tick_veneer+0x4>
    9c24:	08014821 	.word	0x08014821

00009c28 <__tCycle_setPhase_veneer>:
    9c28:	f85f f000 	ldr.w	pc, [pc]	; 9c2c <__tCycle_setPhase_veneer+0x4>
    9c2c:	08014885 	.word	0x08014885

00009c30 <__tTString_setPickupPos_veneer>:
    9c30:	f85f f000 	ldr.w	pc, [pc]	; 9c34 <__tTString_setPickupPos_veneer+0x4>
    9c34:	08016f29 	.word	0x08016f29

00009c38 <__tEnvelopeFollower_tick_veneer>:
    9c38:	f85f f000 	ldr.w	pc, [pc]	; 9c3c <__tEnvelopeFollower_tick_veneer+0x4>
    9c3c:	0800fed5 	.word	0x0800fed5

00009c40 <__tSineTriLFO_setPhase_veneer>:
    9c40:	f85f f000 	ldr.w	pc, [pc]	; 9c44 <__tSineTriLFO_setPhase_veneer+0x4>
    9c44:	080156b9 	.word	0x080156b9

00009c48 <__tLadderFilter_setFreqFast_veneer>:
    9c48:	f85f f000 	ldr.w	pc, [pc]	; 9c4c <__tLadderFilter_setFreqFast_veneer+0x4>
    9c4c:	08013b85 	.word	0x08013b85

00009c50 <__tVZFilter_tickEfficient_veneer>:
    9c50:	f85f f000 	ldr.w	pc, [pc]	; 9c54 <__tVZFilter_tickEfficient_veneer+0x4>
    9c54:	08011c71 	.word	0x08011c71

00009c58 <__memcpy_veneer>:
    9c58:	f85f f000 	ldr.w	pc, [pc]	; 9c5c <__memcpy_veneer+0x4>
    9c5c:	08018a3d 	.word	0x08018a3d

00009c60 <__tNoise_tick_veneer>:
    9c60:	f85f f000 	ldr.w	pc, [pc]	; 9c64 <__tNoise_tick_veneer+0x4>
    9c64:	08014f8d 	.word	0x08014f8d

00009c68 <__tTString_setBarPosition_veneer>:
    9c68:	f85f f000 	ldr.w	pc, [pc]	; 9c6c <__tTString_setBarPosition_veneer+0x4>
    9c6c:	08016fd5 	.word	0x08016fd5

00009c70 <__tLinearDelay_tick_veneer>:
    9c70:	f85f f000 	ldr.w	pc, [pc]	; 9c74 <__tLinearDelay_tick_veneer+0x4>
    9c74:	0801009d 	.word	0x0801009d

00009c78 <__tSimpleLivingString3_pluck_veneer>:
    9c78:	f85f f000 	ldr.w	pc, [pc]	; 9c7c <__tSimpleLivingString3_pluck_veneer+0x4>
    9c7c:	08015b51 	.word	0x08015b51
