
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d288  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007060  0800d520  0800d520  0001d520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014580  08014580  000309a8  2**0
                  CONTENTS
  4 .ARM          00000000  08014580  08014580  000309a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08014580  08014580  000309a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014580  08014580  00024580  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014584  08014584  00024584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a8  20000000  08014588  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00017760  200009a8  08014f30  000309a8  2**3
                  ALLOC
 10 ._user_heap_stack 00006000  20018108  08014f30  00038108  2**0
                  ALLOC
 11 .RAM_D1       0007eb58  24000000  24000000  00040000  2**5
                  ALLOC
 12 .RAM_D2       000084f4  30000000  30000000  00040000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00040000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000309a8  2**0
                  CONTENTS, READONLY
 15 .debug_info   0004f3de  00000000  00000000  000309d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007a9e  00000000  00000000  0007fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    000404d0  00000000  00000000  00087852  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000026a0  00000000  00000000  000c7d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 00009398  00000000  00000000  000ca3c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0003e1d6  00000000  00000000  000d3760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004c182  00000000  00000000  00111936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    001675cd  00000000  00000000  0015dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .comment      00000050  00000000  00000000  002c5085  2**0
                  CONTENTS, READONLY
 24 .debug_frame  00008534  00000000  00000000  002c50d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	200009a8 	.word	0x200009a8
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800d508 	.word	0x0800d508

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	200009ac 	.word	0x200009ac
 80002d4:	0800d508 	.word	0x0800d508

080002d8 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <HAL_InitTick+0x40>)
 80002da:	781b      	ldrb	r3, [r3, #0]
 80002dc:	b90b      	cbnz	r3, 80002e2 <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 80002de:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80002e0:	4770      	bx	lr
{
 80002e2:	b510      	push	{r4, lr}
 80002e4:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80002e6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002ea:	4a0c      	ldr	r2, [pc, #48]	; (800031c <HAL_InitTick+0x44>)
 80002ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80002f0:	6810      	ldr	r0, [r2, #0]
 80002f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80002f6:	f000 f8d7 	bl	80004a8 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80002fa:	2c0f      	cmp	r4, #15
 80002fc:	d800      	bhi.n	8000300 <HAL_InitTick+0x28>
 80002fe:	b108      	cbz	r0, 8000304 <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8000300:	2001      	movs	r0, #1
}
 8000302:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000304:	2200      	movs	r2, #0
 8000306:	4621      	mov	r1, r4
 8000308:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800030c:	f000 f880 	bl	8000410 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <HAL_InitTick+0x48>)
 8000312:	2000      	movs	r0, #0
 8000314:	601c      	str	r4, [r3, #0]
}
 8000316:	bd10      	pop	{r4, pc}
 8000318:	20000000 	.word	0x20000000
 800031c:	2000093c 	.word	0x2000093c
 8000320:	20000004 	.word	0x20000004

08000324 <HAL_Init>:
{
 8000324:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000326:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000328:	4c12      	ldr	r4, [pc, #72]	; (8000374 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800032a:	f000 f85f 	bl	80003ec <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800032e:	f002 fbff 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8000332:	4b11      	ldr	r3, [pc, #68]	; (8000378 <HAL_Init+0x54>)
 8000334:	4911      	ldr	r1, [pc, #68]	; (800037c <HAL_Init+0x58>)
 8000336:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000338:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800033a:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800033e:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000342:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000344:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000346:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 800034a:	490d      	ldr	r1, [pc, #52]	; (8000380 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800034c:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000350:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000352:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8000356:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000358:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800035a:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800035c:	f7ff ffbc 	bl	80002d8 <HAL_InitTick>
 8000360:	b110      	cbz	r0, 8000368 <HAL_Init+0x44>
    return HAL_ERROR;
 8000362:	2401      	movs	r4, #1
}
 8000364:	4620      	mov	r0, r4
 8000366:	bd10      	pop	{r4, pc}
 8000368:	4604      	mov	r4, r0
  HAL_MspInit();
 800036a:	f00a fcc7 	bl	800acfc <HAL_MspInit>
}
 800036e:	4620      	mov	r0, r4
 8000370:	bd10      	pop	{r4, pc}
 8000372:	bf00      	nop
 8000374:	20000940 	.word	0x20000940
 8000378:	58024400 	.word	0x58024400
 800037c:	0800d53c 	.word	0x0800d53c
 8000380:	2000093c 	.word	0x2000093c

08000384 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8000384:	4a03      	ldr	r2, [pc, #12]	; (8000394 <HAL_IncTick+0x10>)
 8000386:	4b04      	ldr	r3, [pc, #16]	; (8000398 <HAL_IncTick+0x14>)
 8000388:	6811      	ldr	r1, [r2, #0]
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	440b      	add	r3, r1
 800038e:	6013      	str	r3, [r2, #0]
}
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	200009c4 	.word	0x200009c4
 8000398:	20000000 	.word	0x20000000

0800039c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800039c:	4b01      	ldr	r3, [pc, #4]	; (80003a4 <HAL_GetTick+0x8>)
 800039e:	6818      	ldr	r0, [r3, #0]
}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	200009c4 	.word	0x200009c4

080003a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80003a8:	b538      	push	{r3, r4, r5, lr}
 80003aa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80003ac:	f7ff fff6 	bl	800039c <HAL_GetTick>
 80003b0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80003b2:	1c63      	adds	r3, r4, #1
 80003b4:	d002      	beq.n	80003bc <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80003b6:	4b04      	ldr	r3, [pc, #16]	; (80003c8 <HAL_Delay+0x20>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80003bc:	f7ff ffee 	bl	800039c <HAL_GetTick>
 80003c0:	1b43      	subs	r3, r0, r5
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d3fa      	bcc.n	80003bc <HAL_Delay+0x14>
  {
  }
}
 80003c6:	bd38      	pop	{r3, r4, r5, pc}
 80003c8:	20000000 	.word	0x20000000

080003cc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80003cc:	4b01      	ldr	r3, [pc, #4]	; (80003d4 <HAL_GetREVID+0x8>)
 80003ce:	6818      	ldr	r0, [r3, #0]
}
 80003d0:	0c00      	lsrs	r0, r0, #16
 80003d2:	4770      	bx	lr
 80003d4:	5c001000 	.word	0x5c001000

080003d8 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 80003d8:	4a03      	ldr	r2, [pc, #12]	; (80003e8 <HAL_SetFMCMemorySwappingConfig+0x10>)
 80003da:	6813      	ldr	r3, [r2, #0]
 80003dc:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80003e0:	4318      	orrs	r0, r3
 80003e2:	6010      	str	r0, [r2, #0]
}
 80003e4:	4770      	bx	lr
 80003e6:	bf00      	nop
 80003e8:	52004000 	.word	0x52004000

080003ec <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003ec:	4906      	ldr	r1, [pc, #24]	; (8000408 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003ee:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003f2:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 80003f4:	4b05      	ldr	r3, [pc, #20]	; (800040c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80003f6:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80003f8:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80003fc:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000400:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 8000402:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000404:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000406:	4770      	bx	lr
 8000408:	e000ed00 	.word	0xe000ed00
 800040c:	05fa0000 	.word	0x05fa0000

08000410 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000410:	4b1b      	ldr	r3, [pc, #108]	; (8000480 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000412:	b500      	push	{lr}
 8000414:	68db      	ldr	r3, [r3, #12]
 8000416:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800041a:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800041e:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000422:	f1be 0f04 	cmp.w	lr, #4
 8000426:	bf28      	it	cs
 8000428:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800042c:	f1bc 0f06 	cmp.w	ip, #6
 8000430:	d91a      	bls.n	8000468 <HAL_NVIC_SetPriority+0x58>
 8000432:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000434:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000438:	fa0c fc03 	lsl.w	ip, ip, r3
 800043c:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000440:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 8000444:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000446:	fa0c fc0e 	lsl.w	ip, ip, lr
 800044a:	ea21 010c 	bic.w	r1, r1, ip
 800044e:	fa01 f103 	lsl.w	r1, r1, r3
 8000452:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8000456:	db0a      	blt.n	800046e <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000458:	0109      	lsls	r1, r1, #4
 800045a:	4b0a      	ldr	r3, [pc, #40]	; (8000484 <HAL_NVIC_SetPriority+0x74>)
 800045c:	b2c9      	uxtb	r1, r1
 800045e:	4403      	add	r3, r0
 8000460:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000464:	f85d fb04 	ldr.w	pc, [sp], #4
 8000468:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800046a:	4613      	mov	r3, r2
 800046c:	e7e8      	b.n	8000440 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800046e:	f000 000f 	and.w	r0, r0, #15
 8000472:	0109      	lsls	r1, r1, #4
 8000474:	4b04      	ldr	r3, [pc, #16]	; (8000488 <HAL_NVIC_SetPriority+0x78>)
 8000476:	b2c9      	uxtb	r1, r1
 8000478:	4403      	add	r3, r0
 800047a:	7619      	strb	r1, [r3, #24]
 800047c:	f85d fb04 	ldr.w	pc, [sp], #4
 8000480:	e000ed00 	.word	0xe000ed00
 8000484:	e000e100 	.word	0xe000e100
 8000488:	e000ecfc 	.word	0xe000ecfc

0800048c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800048c:	2800      	cmp	r0, #0
 800048e:	db07      	blt.n	80004a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000490:	2301      	movs	r3, #1
 8000492:	f000 011f 	and.w	r1, r0, #31
 8000496:	4a03      	ldr	r2, [pc, #12]	; (80004a4 <HAL_NVIC_EnableIRQ+0x18>)
 8000498:	0940      	lsrs	r0, r0, #5
 800049a:	408b      	lsls	r3, r1
 800049c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	e000e100 	.word	0xe000e100

080004a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80004a8:	1e43      	subs	r3, r0, #1
 80004aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80004ae:	d20c      	bcs.n	80004ca <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004b0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b4:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b6:	4906      	ldr	r1, [pc, #24]	; (80004d0 <HAL_SYSTICK_Config+0x28>)
 80004b8:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80004bc:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004be:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004c0:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004c4:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004c6:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004c8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80004ca:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop
 80004d0:	e000ed00 	.word	0xe000ed00

080004d4 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80004d4:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004d8:	4b04      	ldr	r3, [pc, #16]	; (80004ec <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80004da:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80004dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004e2:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 80004e4:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	e000ed00 	.word	0xe000ed00

080004f0 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <HAL_MPU_Enable+0x1c>)
 80004f2:	f040 0001 	orr.w	r0, r0, #1
 80004f6:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80004fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000500:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000502:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000506:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800050a:	4770      	bx	lr
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000510:	7843      	ldrb	r3, [r0, #1]
 8000512:	4a16      	ldr	r2, [pc, #88]	; (800056c <HAL_MPU_ConfigRegion+0x5c>)
 8000514:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8000518:	7803      	ldrb	r3, [r0, #0]
 800051a:	b313      	cbz	r3, 8000562 <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 800051c:	6843      	ldr	r3, [r0, #4]
 800051e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000522:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000524:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000528:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800052a:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800052c:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000530:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000534:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000536:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000538:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800053c:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000540:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000544:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000546:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800054a:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	7a01      	ldrb	r1, [r0, #8]
 8000554:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8000558:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800055c:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8000560:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 8000562:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 8000566:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 800056a:	4770      	bx	lr
 800056c:	e000ed00 	.word	0xe000ed00

08000570 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000570:	4b34      	ldr	r3, [pc, #208]	; (8000644 <DMA_CalcBaseAndBitshift+0xd4>)
 8000572:	4935      	ldr	r1, [pc, #212]	; (8000648 <DMA_CalcBaseAndBitshift+0xd8>)
{
 8000574:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000576:	4d35      	ldr	r5, [pc, #212]	; (800064c <DMA_CalcBaseAndBitshift+0xdc>)
 8000578:	6802      	ldr	r2, [r0, #0]
 800057a:	4c35      	ldr	r4, [pc, #212]	; (8000650 <DMA_CalcBaseAndBitshift+0xe0>)
 800057c:	42aa      	cmp	r2, r5
 800057e:	bf18      	it	ne
 8000580:	429a      	cmpne	r2, r3
 8000582:	bf0c      	ite	eq
 8000584:	2301      	moveq	r3, #1
 8000586:	2300      	movne	r3, #0
 8000588:	428a      	cmp	r2, r1
 800058a:	bf08      	it	eq
 800058c:	f043 0301 	orreq.w	r3, r3, #1
 8000590:	3130      	adds	r1, #48	; 0x30
 8000592:	42a2      	cmp	r2, r4
 8000594:	bf08      	it	eq
 8000596:	f043 0301 	orreq.w	r3, r3, #1
 800059a:	3430      	adds	r4, #48	; 0x30
 800059c:	428a      	cmp	r2, r1
 800059e:	bf08      	it	eq
 80005a0:	f043 0301 	orreq.w	r3, r3, #1
 80005a4:	3130      	adds	r1, #48	; 0x30
 80005a6:	42a2      	cmp	r2, r4
 80005a8:	bf08      	it	eq
 80005aa:	f043 0301 	orreq.w	r3, r3, #1
 80005ae:	3430      	adds	r4, #48	; 0x30
 80005b0:	428a      	cmp	r2, r1
 80005b2:	bf08      	it	eq
 80005b4:	f043 0301 	orreq.w	r3, r3, #1
 80005b8:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80005bc:	42a2      	cmp	r2, r4
 80005be:	bf08      	it	eq
 80005c0:	f043 0301 	orreq.w	r3, r3, #1
 80005c4:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80005c8:	428a      	cmp	r2, r1
 80005ca:	bf08      	it	eq
 80005cc:	f043 0301 	orreq.w	r3, r3, #1
 80005d0:	3130      	adds	r1, #48	; 0x30
 80005d2:	42a2      	cmp	r2, r4
 80005d4:	bf08      	it	eq
 80005d6:	f043 0301 	orreq.w	r3, r3, #1
 80005da:	3430      	adds	r4, #48	; 0x30
 80005dc:	428a      	cmp	r2, r1
 80005de:	bf08      	it	eq
 80005e0:	f043 0301 	orreq.w	r3, r3, #1
 80005e4:	3130      	adds	r1, #48	; 0x30
 80005e6:	42a2      	cmp	r2, r4
 80005e8:	bf08      	it	eq
 80005ea:	f043 0301 	orreq.w	r3, r3, #1
 80005ee:	3430      	adds	r4, #48	; 0x30
 80005f0:	428a      	cmp	r2, r1
 80005f2:	bf08      	it	eq
 80005f4:	f043 0301 	orreq.w	r3, r3, #1
 80005f8:	3130      	adds	r1, #48	; 0x30
 80005fa:	42a2      	cmp	r2, r4
 80005fc:	bf08      	it	eq
 80005fe:	f043 0301 	orreq.w	r3, r3, #1
 8000602:	428a      	cmp	r2, r1
 8000604:	bf08      	it	eq
 8000606:	f043 0301 	orreq.w	r3, r3, #1
 800060a:	b913      	cbnz	r3, 8000612 <DMA_CalcBaseAndBitshift+0xa2>
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <DMA_CalcBaseAndBitshift+0xe4>)
 800060e:	429a      	cmp	r2, r3
 8000610:	d113      	bne.n	800063a <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000612:	b2d3      	uxtb	r3, r2
 8000614:	4910      	ldr	r1, [pc, #64]	; (8000658 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000616:	4c11      	ldr	r4, [pc, #68]	; (800065c <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8000618:	3b10      	subs	r3, #16
 800061a:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 800061e:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000620:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000622:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8000626:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800062a:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800062c:	bf88      	it	hi
 800062e:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8000630:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8000632:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 8000634:	4618      	mov	r0, r3
 8000636:	bc30      	pop	{r4, r5}
 8000638:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800063a:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 800063e:	6583      	str	r3, [r0, #88]	; 0x58
 8000640:	e7f8      	b.n	8000634 <DMA_CalcBaseAndBitshift+0xc4>
 8000642:	bf00      	nop
 8000644:	40020010 	.word	0x40020010
 8000648:	40020040 	.word	0x40020040
 800064c:	40020028 	.word	0x40020028
 8000650:	40020058 	.word	0x40020058
 8000654:	400204b8 	.word	0x400204b8
 8000658:	aaaaaaab 	.word	0xaaaaaaab
 800065c:	0800d520 	.word	0x0800d520
 8000660:	fffffc00 	.word	0xfffffc00

08000664 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8000664:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000666:	4a29      	ldr	r2, [pc, #164]	; (800070c <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8000668:	4929      	ldr	r1, [pc, #164]	; (8000710 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 800066a:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800066c:	4d29      	ldr	r5, [pc, #164]	; (8000714 <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 800066e:	4c2a      	ldr	r4, [pc, #168]	; (8000718 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8000670:	42ab      	cmp	r3, r5
 8000672:	bf18      	it	ne
 8000674:	4293      	cmpne	r3, r2
 8000676:	bf0c      	ite	eq
 8000678:	2201      	moveq	r2, #1
 800067a:	2200      	movne	r2, #0
 800067c:	428b      	cmp	r3, r1
 800067e:	bf08      	it	eq
 8000680:	f042 0201 	orreq.w	r2, r2, #1
 8000684:	3128      	adds	r1, #40	; 0x28
 8000686:	42a3      	cmp	r3, r4
 8000688:	bf08      	it	eq
 800068a:	f042 0201 	orreq.w	r2, r2, #1
 800068e:	3428      	adds	r4, #40	; 0x28
 8000690:	428b      	cmp	r3, r1
 8000692:	bf08      	it	eq
 8000694:	f042 0201 	orreq.w	r2, r2, #1
 8000698:	3128      	adds	r1, #40	; 0x28
 800069a:	42a3      	cmp	r3, r4
 800069c:	bf08      	it	eq
 800069e:	f042 0201 	orreq.w	r2, r2, #1
 80006a2:	428b      	cmp	r3, r1
 80006a4:	bf08      	it	eq
 80006a6:	f042 0201 	orreq.w	r2, r2, #1
 80006aa:	b912      	cbnz	r2, 80006b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80006ac:	4a1b      	ldr	r2, [pc, #108]	; (800071c <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d113      	bne.n	80006da <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	4c1a      	ldr	r4, [pc, #104]	; (8000720 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006b6:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006b8:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80006ba:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80006bc:	4d1a      	ldr	r5, [pc, #104]	; (8000728 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80006be:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80006c2:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006c4:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006c8:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006cc:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006ce:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80006d2:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006d4:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80006d6:	bc30      	pop	{r4, r5}
 80006d8:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006da:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006dc:	4913      	ldr	r1, [pc, #76]	; (800072c <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006de:	4c14      	ldr	r4, [pc, #80]	; (8000730 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006e0:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006e2:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006e4:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80006e6:	fba4 2302 	umull	r2, r3, r4, r2
 80006ea:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80006ee:	d800      	bhi.n	80006f2 <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 80006f0:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006f4:	f003 051f 	and.w	r5, r3, #31
 80006f8:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80006fa:	4c0f      	ldr	r4, [pc, #60]	; (8000738 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80006fc:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80006fe:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000700:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000702:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8000704:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8000706:	6602      	str	r2, [r0, #96]	; 0x60
}
 8000708:	e7e5      	b.n	80006d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 800070a:	bf00      	nop
 800070c:	58025408 	.word	0x58025408
 8000710:	58025430 	.word	0x58025430
 8000714:	5802541c 	.word	0x5802541c
 8000718:	58025444 	.word	0x58025444
 800071c:	58025494 	.word	0x58025494
 8000720:	cccccccd 	.word	0xcccccccd
 8000724:	16009600 	.word	0x16009600
 8000728:	58025880 	.word	0x58025880
 800072c:	bffdfbf0 	.word	0xbffdfbf0
 8000730:	aaaaaaab 	.word	0xaaaaaaab
 8000734:	10008200 	.word	0x10008200
 8000738:	40020880 	.word	0x40020880

0800073c <HAL_DMA_Init>:
{
 800073c:	b538      	push	{r3, r4, r5, lr}
 800073e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000740:	f7ff fe2c 	bl	800039c <HAL_GetTick>
  if(hdma == NULL)
 8000744:	2c00      	cmp	r4, #0
 8000746:	f000 816b 	beq.w	8000a20 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800074a:	6822      	ldr	r2, [r4, #0]
 800074c:	4605      	mov	r5, r0
 800074e:	4ba3      	ldr	r3, [pc, #652]	; (80009dc <HAL_DMA_Init+0x2a0>)
 8000750:	429a      	cmp	r2, r3
 8000752:	d048      	beq.n	80007e6 <HAL_DMA_Init+0xaa>
 8000754:	3318      	adds	r3, #24
 8000756:	429a      	cmp	r2, r3
 8000758:	d045      	beq.n	80007e6 <HAL_DMA_Init+0xaa>
 800075a:	3330      	adds	r3, #48	; 0x30
 800075c:	49a0      	ldr	r1, [pc, #640]	; (80009e0 <HAL_DMA_Init+0x2a4>)
 800075e:	428a      	cmp	r2, r1
 8000760:	bf18      	it	ne
 8000762:	429a      	cmpne	r2, r3
 8000764:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000768:	bf0c      	ite	eq
 800076a:	2301      	moveq	r3, #1
 800076c:	2300      	movne	r3, #0
 800076e:	428a      	cmp	r2, r1
 8000770:	bf08      	it	eq
 8000772:	f043 0301 	orreq.w	r3, r3, #1
 8000776:	3118      	adds	r1, #24
 8000778:	428a      	cmp	r2, r1
 800077a:	bf08      	it	eq
 800077c:	f043 0301 	orreq.w	r3, r3, #1
 8000780:	3118      	adds	r1, #24
 8000782:	428a      	cmp	r2, r1
 8000784:	bf08      	it	eq
 8000786:	f043 0301 	orreq.w	r3, r3, #1
 800078a:	3118      	adds	r1, #24
 800078c:	428a      	cmp	r2, r1
 800078e:	bf08      	it	eq
 8000790:	f043 0301 	orreq.w	r3, r3, #1
 8000794:	f501 7156 	add.w	r1, r1, #856	; 0x358
 8000798:	428a      	cmp	r2, r1
 800079a:	bf08      	it	eq
 800079c:	f043 0301 	orreq.w	r3, r3, #1
 80007a0:	3118      	adds	r1, #24
 80007a2:	428a      	cmp	r2, r1
 80007a4:	bf08      	it	eq
 80007a6:	f043 0301 	orreq.w	r3, r3, #1
 80007aa:	3118      	adds	r1, #24
 80007ac:	428a      	cmp	r2, r1
 80007ae:	bf08      	it	eq
 80007b0:	f043 0301 	orreq.w	r3, r3, #1
 80007b4:	3118      	adds	r1, #24
 80007b6:	428a      	cmp	r2, r1
 80007b8:	bf08      	it	eq
 80007ba:	f043 0301 	orreq.w	r3, r3, #1
 80007be:	3118      	adds	r1, #24
 80007c0:	428a      	cmp	r2, r1
 80007c2:	bf08      	it	eq
 80007c4:	f043 0301 	orreq.w	r3, r3, #1
 80007c8:	3118      	adds	r1, #24
 80007ca:	428a      	cmp	r2, r1
 80007cc:	bf08      	it	eq
 80007ce:	f043 0301 	orreq.w	r3, r3, #1
 80007d2:	3118      	adds	r1, #24
 80007d4:	428a      	cmp	r2, r1
 80007d6:	bf08      	it	eq
 80007d8:	f043 0301 	orreq.w	r3, r3, #1
 80007dc:	b91b      	cbnz	r3, 80007e6 <HAL_DMA_Init+0xaa>
 80007de:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <HAL_DMA_Init+0x2a8>)
 80007e0:	429a      	cmp	r2, r3
 80007e2:	f040 8184 	bne.w	8000aee <HAL_DMA_Init+0x3b2>
    hdma->State = HAL_DMA_STATE_BUSY;
 80007e6:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 80007e8:	2100      	movs	r1, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80007ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 80007ee:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
    __HAL_DMA_DISABLE(hdma);
 80007f2:	6813      	ldr	r3, [r2, #0]
 80007f4:	f023 0301 	bic.w	r3, r3, #1
 80007f8:	6013      	str	r3, [r2, #0]
 80007fa:	e005      	b.n	8000808 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80007fc:	f7ff fdce 	bl	800039c <HAL_GetTick>
 8000800:	1b43      	subs	r3, r0, r5
 8000802:	2b05      	cmp	r3, #5
 8000804:	f200 80fe 	bhi.w	8000a04 <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	07d0      	lsls	r0, r2, #31
 800080e:	d4f5      	bmi.n	80007fc <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8000810:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000814:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 8000816:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8000818:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800081a:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800081c:	430a      	orrs	r2, r1
 800081e:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000820:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000822:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000826:	69a1      	ldr	r1, [r4, #24]
 8000828:	ea42 0201 	orr.w	r2, r2, r1
 800082c:	69e1      	ldr	r1, [r4, #28]
 800082e:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 8000832:	6a21      	ldr	r1, [r4, #32]
 8000834:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000838:	496b      	ldr	r1, [pc, #428]	; (80009e8 <HAL_DMA_Init+0x2ac>)
 800083a:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 800083e:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000842:	d103      	bne.n	800084c <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000844:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8000848:	4301      	orrs	r1, r0
 800084a:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800084c:	4867      	ldr	r0, [pc, #412]	; (80009ec <HAL_DMA_Init+0x2b0>)
 800084e:	4968      	ldr	r1, [pc, #416]	; (80009f0 <HAL_DMA_Init+0x2b4>)
 8000850:	6800      	ldr	r0, [r0, #0]
 8000852:	4001      	ands	r1, r0
 8000854:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8000858:	d30a      	bcc.n	8000870 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800085a:	6861      	ldr	r1, [r4, #4]
 800085c:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8000860:	281f      	cmp	r0, #31
 8000862:	f240 80d6 	bls.w	8000a12 <HAL_DMA_Init+0x2d6>
 8000866:	394f      	subs	r1, #79	; 0x4f
 8000868:	2903      	cmp	r1, #3
 800086a:	d801      	bhi.n	8000870 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 800086c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8000870:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000872:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 8000874:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8000876:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000878:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800087a:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 800087e:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000882:	d10e      	bne.n	80008a2 <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000884:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 8000888:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800088a:	b150      	cbz	r0, 80008a2 <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800088c:	69a5      	ldr	r5, [r4, #24]
 800088e:	2d00      	cmp	r5, #0
 8000890:	f040 8108 	bne.w	8000aa4 <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 8000894:	2a01      	cmp	r2, #1
 8000896:	f000 8125 	beq.w	8000ae4 <HAL_DMA_Init+0x3a8>
 800089a:	f032 0202 	bics.w	r2, r2, #2
 800089e:	f000 8109 	beq.w	8000ab4 <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80008a2:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80008a4:	4620      	mov	r0, r4
 80008a6:	f7ff fe63 	bl	8000570 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80008aa:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80008ac:	233f      	movs	r3, #63	; 0x3f
 80008ae:	f002 021f 	and.w	r2, r2, #31
 80008b2:	4093      	lsls	r3, r2
 80008b4:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80008b6:	6822      	ldr	r2, [r4, #0]
 80008b8:	4b48      	ldr	r3, [pc, #288]	; (80009dc <HAL_DMA_Init+0x2a0>)
 80008ba:	484e      	ldr	r0, [pc, #312]	; (80009f4 <HAL_DMA_Init+0x2b8>)
 80008bc:	4948      	ldr	r1, [pc, #288]	; (80009e0 <HAL_DMA_Init+0x2a4>)
 80008be:	4282      	cmp	r2, r0
 80008c0:	bf18      	it	ne
 80008c2:	429a      	cmpne	r2, r3
 80008c4:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80008c8:	bf0c      	ite	eq
 80008ca:	2301      	moveq	r3, #1
 80008cc:	2300      	movne	r3, #0
 80008ce:	428a      	cmp	r2, r1
 80008d0:	bf08      	it	eq
 80008d2:	f043 0301 	orreq.w	r3, r3, #1
 80008d6:	3130      	adds	r1, #48	; 0x30
 80008d8:	4282      	cmp	r2, r0
 80008da:	bf08      	it	eq
 80008dc:	f043 0301 	orreq.w	r3, r3, #1
 80008e0:	3030      	adds	r0, #48	; 0x30
 80008e2:	428a      	cmp	r2, r1
 80008e4:	bf08      	it	eq
 80008e6:	f043 0301 	orreq.w	r3, r3, #1
 80008ea:	3130      	adds	r1, #48	; 0x30
 80008ec:	4282      	cmp	r2, r0
 80008ee:	bf08      	it	eq
 80008f0:	f043 0301 	orreq.w	r3, r3, #1
 80008f4:	3030      	adds	r0, #48	; 0x30
 80008f6:	428a      	cmp	r2, r1
 80008f8:	bf08      	it	eq
 80008fa:	f043 0301 	orreq.w	r3, r3, #1
 80008fe:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8000902:	4282      	cmp	r2, r0
 8000904:	bf08      	it	eq
 8000906:	f043 0301 	orreq.w	r3, r3, #1
 800090a:	f500 705c 	add.w	r0, r0, #880	; 0x370
 800090e:	428a      	cmp	r2, r1
 8000910:	bf08      	it	eq
 8000912:	f043 0301 	orreq.w	r3, r3, #1
 8000916:	3130      	adds	r1, #48	; 0x30
 8000918:	4282      	cmp	r2, r0
 800091a:	bf08      	it	eq
 800091c:	f043 0301 	orreq.w	r3, r3, #1
 8000920:	3030      	adds	r0, #48	; 0x30
 8000922:	428a      	cmp	r2, r1
 8000924:	bf08      	it	eq
 8000926:	f043 0301 	orreq.w	r3, r3, #1
 800092a:	3130      	adds	r1, #48	; 0x30
 800092c:	4282      	cmp	r2, r0
 800092e:	bf08      	it	eq
 8000930:	f043 0301 	orreq.w	r3, r3, #1
 8000934:	3030      	adds	r0, #48	; 0x30
 8000936:	428a      	cmp	r2, r1
 8000938:	bf08      	it	eq
 800093a:	f043 0301 	orreq.w	r3, r3, #1
 800093e:	3130      	adds	r1, #48	; 0x30
 8000940:	4282      	cmp	r2, r0
 8000942:	bf08      	it	eq
 8000944:	f043 0301 	orreq.w	r3, r3, #1
 8000948:	3030      	adds	r0, #48	; 0x30
 800094a:	428a      	cmp	r2, r1
 800094c:	bf08      	it	eq
 800094e:	f043 0301 	orreq.w	r3, r3, #1
 8000952:	4929      	ldr	r1, [pc, #164]	; (80009f8 <HAL_DMA_Init+0x2bc>)
 8000954:	4282      	cmp	r2, r0
 8000956:	bf08      	it	eq
 8000958:	f043 0301 	orreq.w	r3, r3, #1
 800095c:	4827      	ldr	r0, [pc, #156]	; (80009fc <HAL_DMA_Init+0x2c0>)
 800095e:	428a      	cmp	r2, r1
 8000960:	bf08      	it	eq
 8000962:	f043 0301 	orreq.w	r3, r3, #1
 8000966:	3128      	adds	r1, #40	; 0x28
 8000968:	4282      	cmp	r2, r0
 800096a:	bf08      	it	eq
 800096c:	f043 0301 	orreq.w	r3, r3, #1
 8000970:	3028      	adds	r0, #40	; 0x28
 8000972:	428a      	cmp	r2, r1
 8000974:	bf08      	it	eq
 8000976:	f043 0301 	orreq.w	r3, r3, #1
 800097a:	3128      	adds	r1, #40	; 0x28
 800097c:	4282      	cmp	r2, r0
 800097e:	bf08      	it	eq
 8000980:	f043 0301 	orreq.w	r3, r3, #1
 8000984:	3028      	adds	r0, #40	; 0x28
 8000986:	428a      	cmp	r2, r1
 8000988:	bf08      	it	eq
 800098a:	f043 0301 	orreq.w	r3, r3, #1
 800098e:	3128      	adds	r1, #40	; 0x28
 8000990:	4282      	cmp	r2, r0
 8000992:	bf08      	it	eq
 8000994:	f043 0301 	orreq.w	r3, r3, #1
 8000998:	428a      	cmp	r2, r1
 800099a:	bf08      	it	eq
 800099c:	f043 0301 	orreq.w	r3, r3, #1
 80009a0:	b913      	cbnz	r3, 80009a8 <HAL_DMA_Init+0x26c>
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <HAL_DMA_Init+0x2c4>)
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d113      	bne.n	80009d0 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80009a8:	4620      	mov	r0, r4
 80009aa:	f7ff fe5b 	bl	8000664 <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80009ae:	68a3      	ldr	r3, [r4, #8]
 80009b0:	2b80      	cmp	r3, #128	; 0x80
 80009b2:	d037      	beq.n	8000a24 <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80009b4:	7922      	ldrb	r2, [r4, #4]
 80009b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80009b8:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80009ba:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80009be:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80009c0:	6861      	ldr	r1, [r4, #4]
 80009c2:	1e4b      	subs	r3, r1, #1
 80009c4:	2b07      	cmp	r3, #7
 80009c6:	d931      	bls.n	8000a2c <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
 80009c8:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80009ca:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80009ce:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d0:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80009d2:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009d4:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80009d6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80009da:	bd38      	pop	{r3, r4, r5, pc}
 80009dc:	40020010 	.word	0x40020010
 80009e0:	40020040 	.word	0x40020040
 80009e4:	400204b8 	.word	0x400204b8
 80009e8:	fe10803f 	.word	0xfe10803f
 80009ec:	5c001000 	.word	0x5c001000
 80009f0:	ffff0000 	.word	0xffff0000
 80009f4:	40020028 	.word	0x40020028
 80009f8:	58025408 	.word	0x58025408
 80009fc:	5802541c 	.word	0x5802541c
 8000a00:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a04:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a06:	2303      	movs	r3, #3
        return HAL_ERROR;
 8000a08:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000a0a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8000a0c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000a10:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8000a12:	496a      	ldr	r1, [pc, #424]	; (8000bbc <HAL_DMA_Init+0x480>)
 8000a14:	fa21 f000 	lsr.w	r0, r1, r0
 8000a18:	07c1      	lsls	r1, r0, #31
 8000a1a:	f57f af29 	bpl.w	8000870 <HAL_DMA_Init+0x134>
 8000a1e:	e725      	b.n	800086c <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 8000a20:	2001      	movs	r0, #1
}
 8000a22:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000a24:	2300      	movs	r3, #0
 8000a26:	461a      	mov	r2, r3
 8000a28:	6063      	str	r3, [r4, #4]
 8000a2a:	e7c4      	b.n	80009b6 <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8000a2c:	6820      	ldr	r0, [r4, #0]
 8000a2e:	4a64      	ldr	r2, [pc, #400]	; (8000bc0 <HAL_DMA_Init+0x484>)
 8000a30:	4d64      	ldr	r5, [pc, #400]	; (8000bc4 <HAL_DMA_Init+0x488>)
 8000a32:	42a8      	cmp	r0, r5
 8000a34:	bf18      	it	ne
 8000a36:	4290      	cmpne	r0, r2
 8000a38:	f105 0514 	add.w	r5, r5, #20
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2201      	moveq	r2, #1
 8000a40:	2200      	movne	r2, #0
 8000a42:	42a8      	cmp	r0, r5
 8000a44:	bf08      	it	eq
 8000a46:	f042 0201 	orreq.w	r2, r2, #1
 8000a4a:	3514      	adds	r5, #20
 8000a4c:	42a8      	cmp	r0, r5
 8000a4e:	bf08      	it	eq
 8000a50:	f042 0201 	orreq.w	r2, r2, #1
 8000a54:	3514      	adds	r5, #20
 8000a56:	42a8      	cmp	r0, r5
 8000a58:	bf08      	it	eq
 8000a5a:	f042 0201 	orreq.w	r2, r2, #1
 8000a5e:	3514      	adds	r5, #20
 8000a60:	42a8      	cmp	r0, r5
 8000a62:	bf08      	it	eq
 8000a64:	f042 0201 	orreq.w	r2, r2, #1
 8000a68:	3514      	adds	r5, #20
 8000a6a:	42a8      	cmp	r0, r5
 8000a6c:	bf08      	it	eq
 8000a6e:	f042 0201 	orreq.w	r2, r2, #1
 8000a72:	b93a      	cbnz	r2, 8000a84 <HAL_DMA_Init+0x348>
 8000a74:	4a54      	ldr	r2, [pc, #336]	; (8000bc8 <HAL_DMA_Init+0x48c>)
 8000a76:	4290      	cmp	r0, r2
 8000a78:	d004      	beq.n	8000a84 <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a7a:	4a54      	ldr	r2, [pc, #336]	; (8000bcc <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000a7c:	4854      	ldr	r0, [pc, #336]	; (8000bd0 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a7e:	440a      	add	r2, r1
 8000a80:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000a82:	e003      	b.n	8000a8c <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a84:	4a53      	ldr	r2, [pc, #332]	; (8000bd4 <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8000a86:	4854      	ldr	r0, [pc, #336]	; (8000bd8 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8000a88:	440a      	add	r2, r1
 8000a8a:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000a8c:	2101      	movs	r1, #1
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a92:	2100      	movs	r1, #0
 8000a94:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8000a98:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8000a9a:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000a9c:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 8000aa0:	605a      	str	r2, [r3, #4]
 8000aa2:	e795      	b.n	80009d0 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8000aa4:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 8000aa8:	d00e      	beq.n	8000ac8 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 8000aaa:	2a02      	cmp	r2, #2
 8000aac:	d905      	bls.n	8000aba <HAL_DMA_Init+0x37e>
 8000aae:	2a03      	cmp	r2, #3
 8000ab0:	f47f aef7 	bne.w	80008a2 <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000ab4:	01c2      	lsls	r2, r0, #7
 8000ab6:	f57f aef4 	bpl.w	80008a2 <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 8000aba:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000abc:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 8000abe:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000ac0:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 8000ac2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000ac6:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 8000ac8:	2a03      	cmp	r2, #3
 8000aca:	f63f aeea 	bhi.w	80008a2 <HAL_DMA_Init+0x166>
 8000ace:	a501      	add	r5, pc, #4	; (adr r5, 8000ad4 <HAL_DMA_Init+0x398>)
 8000ad0:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 8000ad4:	08000abb 	.word	0x08000abb
 8000ad8:	08000ab5 	.word	0x08000ab5
 8000adc:	08000abb 	.word	0x08000abb
 8000ae0:	08000ae5 	.word	0x08000ae5
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8000ae4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8000ae8:	f47f aedb 	bne.w	80008a2 <HAL_DMA_Init+0x166>
 8000aec:	e7e5      	b.n	8000aba <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8000aee:	4b34      	ldr	r3, [pc, #208]	; (8000bc0 <HAL_DMA_Init+0x484>)
 8000af0:	4834      	ldr	r0, [pc, #208]	; (8000bc4 <HAL_DMA_Init+0x488>)
 8000af2:	493a      	ldr	r1, [pc, #232]	; (8000bdc <HAL_DMA_Init+0x4a0>)
 8000af4:	4282      	cmp	r2, r0
 8000af6:	bf18      	it	ne
 8000af8:	429a      	cmpne	r2, r3
 8000afa:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	428a      	cmp	r2, r1
 8000b06:	bf08      	it	eq
 8000b08:	f043 0301 	orreq.w	r3, r3, #1
 8000b0c:	3128      	adds	r1, #40	; 0x28
 8000b0e:	4282      	cmp	r2, r0
 8000b10:	bf08      	it	eq
 8000b12:	f043 0301 	orreq.w	r3, r3, #1
 8000b16:	3028      	adds	r0, #40	; 0x28
 8000b18:	428a      	cmp	r2, r1
 8000b1a:	bf08      	it	eq
 8000b1c:	f043 0301 	orreq.w	r3, r3, #1
 8000b20:	3128      	adds	r1, #40	; 0x28
 8000b22:	4282      	cmp	r2, r0
 8000b24:	bf08      	it	eq
 8000b26:	f043 0301 	orreq.w	r3, r3, #1
 8000b2a:	428a      	cmp	r2, r1
 8000b2c:	bf08      	it	eq
 8000b2e:	f043 0301 	orreq.w	r3, r3, #1
 8000b32:	b913      	cbnz	r3, 8000b3a <HAL_DMA_Init+0x3fe>
 8000b34:	4b24      	ldr	r3, [pc, #144]	; (8000bc8 <HAL_DMA_Init+0x48c>)
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d138      	bne.n	8000bac <HAL_DMA_Init+0x470>
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b3a:	2302      	movs	r3, #2
    __HAL_UNLOCK(hdma);
 8000b3c:	2000      	movs	r0, #0
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000b3e:	4928      	ldr	r1, [pc, #160]	; (8000be0 <HAL_DMA_Init+0x4a4>)
    __HAL_UNLOCK(hdma);
 8000b40:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b44:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8000b48:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8000b4a:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b4c:	68a3      	ldr	r3, [r4, #8]
 8000b4e:	2b40      	cmp	r3, #64	; 0x40
 8000b50:	d02a      	beq.n	8000ba8 <HAL_DMA_Init+0x46c>
 8000b52:	2b80      	cmp	r3, #128	; 0x80
 8000b54:	bf08      	it	eq
 8000b56:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8000b5a:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8000b64:	6965      	ldr	r5, [r4, #20]
 8000b66:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8000b6a:	69a5      	ldr	r5, [r4, #24]
 8000b6c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8000b70:	69e5      	ldr	r5, [r4, #28]
 8000b72:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8000b76:	6a25      	ldr	r5, [r4, #32]
 8000b78:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 8000b7c:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b7e:	4919      	ldr	r1, [pc, #100]	; (8000be4 <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000b80:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b82:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8000b84:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8000b86:	6822      	ldr	r2, [r4, #0]
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_DMA_Init+0x4ac>)
 8000b8a:	4411      	add	r1, r2
 8000b8c:	fba3 2301 	umull	r2, r3, r3, r1
 8000b90:	091b      	lsrs	r3, r3, #4
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000b96:	f7ff fceb 	bl	8000570 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8000b9a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f002 021f 	and.w	r2, r2, #31
 8000ba2:	4093      	lsls	r3, r2
 8000ba4:	6043      	str	r3, [r0, #4]
 8000ba6:	e686      	b.n	80008b6 <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8000ba8:	2010      	movs	r0, #16
 8000baa:	e7d6      	b.n	8000b5a <HAL_DMA_Init+0x41e>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bac:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000bae:	2303      	movs	r3, #3
    return HAL_ERROR;
 8000bb0:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000bb2:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8000bb4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8000bb8:	bd38      	pop	{r3, r4, r5, pc}
 8000bba:	bf00      	nop
 8000bbc:	c3c0003f 	.word	0xc3c0003f
 8000bc0:	58025408 	.word	0x58025408
 8000bc4:	5802541c 	.word	0x5802541c
 8000bc8:	58025494 	.word	0x58025494
 8000bcc:	1000823f 	.word	0x1000823f
 8000bd0:	40020940 	.word	0x40020940
 8000bd4:	1600963f 	.word	0x1600963f
 8000bd8:	58025940 	.word	0x58025940
 8000bdc:	58025430 	.word	0x58025430
 8000be0:	fffe000f 	.word	0xfffe000f
 8000be4:	a7fdabf8 	.word	0xa7fdabf8
 8000be8:	cccccccd 	.word	0xcccccccd

08000bec <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8000bec:	2800      	cmp	r0, #0
 8000bee:	f000 8270 	beq.w	80010d2 <HAL_DMA_Start_IT+0x4e6>
 8000bf2:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 8000bf4:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8000bf8:	2801      	cmp	r0, #1
 8000bfa:	f000 826c 	beq.w	80010d6 <HAL_DMA_Start_IT+0x4ea>
 8000bfe:	2001      	movs	r0, #1
{
 8000c00:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c02:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 8000c06:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000c0a:	4284      	cmp	r4, r0
 8000c0c:	d008      	beq.n	8000c20 <HAL_DMA_Start_IT+0x34>
    __HAL_UNLOCK(hdma);
 8000c0e:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c10:	f44f 6300 	mov.w	r3, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 8000c14:	f88c 2034 	strb.w	r2, [ip, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8000c18:	f8cc 3054 	str.w	r3, [ip, #84]	; 0x54
}
 8000c1c:	bc70      	pop	{r4, r5, r6}
 8000c1e:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c20:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 8000c22:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c26:	4ea2      	ldr	r6, [pc, #648]	; (8000eb0 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c28:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c2c:	2000      	movs	r0, #0
 8000c2e:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 8000c32:	6820      	ldr	r0, [r4, #0]
 8000c34:	f020 0001 	bic.w	r0, r0, #1
 8000c38:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c3a:	489e      	ldr	r0, [pc, #632]	; (8000eb4 <HAL_DMA_Start_IT+0x2c8>)
 8000c3c:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000c40:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000c44:	42b4      	cmp	r4, r6
 8000c46:	bf18      	it	ne
 8000c48:	4284      	cmpne	r4, r0
 8000c4a:	f106 0618 	add.w	r6, r6, #24
 8000c4e:	bf0c      	ite	eq
 8000c50:	2001      	moveq	r0, #1
 8000c52:	2000      	movne	r0, #0
 8000c54:	42b4      	cmp	r4, r6
 8000c56:	bf08      	it	eq
 8000c58:	f040 0001 	orreq.w	r0, r0, #1
 8000c5c:	3618      	adds	r6, #24
 8000c5e:	42b4      	cmp	r4, r6
 8000c60:	bf08      	it	eq
 8000c62:	f040 0001 	orreq.w	r0, r0, #1
 8000c66:	3618      	adds	r6, #24
 8000c68:	42b4      	cmp	r4, r6
 8000c6a:	bf08      	it	eq
 8000c6c:	f040 0001 	orreq.w	r0, r0, #1
 8000c70:	3618      	adds	r6, #24
 8000c72:	42b4      	cmp	r4, r6
 8000c74:	bf08      	it	eq
 8000c76:	f040 0001 	orreq.w	r0, r0, #1
 8000c7a:	3618      	adds	r6, #24
 8000c7c:	42b4      	cmp	r4, r6
 8000c7e:	bf08      	it	eq
 8000c80:	f040 0001 	orreq.w	r0, r0, #1
 8000c84:	3618      	adds	r6, #24
 8000c86:	42b4      	cmp	r4, r6
 8000c88:	bf08      	it	eq
 8000c8a:	f040 0001 	orreq.w	r0, r0, #1
 8000c8e:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8000c92:	42b4      	cmp	r4, r6
 8000c94:	bf08      	it	eq
 8000c96:	f040 0001 	orreq.w	r0, r0, #1
 8000c9a:	3618      	adds	r6, #24
 8000c9c:	42b4      	cmp	r4, r6
 8000c9e:	bf08      	it	eq
 8000ca0:	f040 0001 	orreq.w	r0, r0, #1
 8000ca4:	3618      	adds	r6, #24
 8000ca6:	42b4      	cmp	r4, r6
 8000ca8:	bf08      	it	eq
 8000caa:	f040 0001 	orreq.w	r0, r0, #1
 8000cae:	3618      	adds	r6, #24
 8000cb0:	42b4      	cmp	r4, r6
 8000cb2:	bf08      	it	eq
 8000cb4:	f040 0001 	orreq.w	r0, r0, #1
 8000cb8:	3618      	adds	r6, #24
 8000cba:	42b4      	cmp	r4, r6
 8000cbc:	bf08      	it	eq
 8000cbe:	f040 0001 	orreq.w	r0, r0, #1
 8000cc2:	3618      	adds	r6, #24
 8000cc4:	42b4      	cmp	r4, r6
 8000cc6:	bf08      	it	eq
 8000cc8:	f040 0001 	orreq.w	r0, r0, #1
 8000ccc:	3618      	adds	r6, #24
 8000cce:	42b4      	cmp	r4, r6
 8000cd0:	bf08      	it	eq
 8000cd2:	f040 0001 	orreq.w	r0, r0, #1
 8000cd6:	3618      	adds	r6, #24
 8000cd8:	42b4      	cmp	r4, r6
 8000cda:	bf08      	it	eq
 8000cdc:	f040 0001 	orreq.w	r0, r0, #1
 8000ce0:	4e75      	ldr	r6, [pc, #468]	; (8000eb8 <HAL_DMA_Start_IT+0x2cc>)
 8000ce2:	42b4      	cmp	r4, r6
 8000ce4:	bf08      	it	eq
 8000ce6:	f040 0001 	orreq.w	r0, r0, #1
 8000cea:	3614      	adds	r6, #20
 8000cec:	42b4      	cmp	r4, r6
 8000cee:	bf08      	it	eq
 8000cf0:	f040 0001 	orreq.w	r0, r0, #1
 8000cf4:	3614      	adds	r6, #20
 8000cf6:	42b4      	cmp	r4, r6
 8000cf8:	bf08      	it	eq
 8000cfa:	f040 0001 	orreq.w	r0, r0, #1
 8000cfe:	3614      	adds	r6, #20
 8000d00:	42b4      	cmp	r4, r6
 8000d02:	bf08      	it	eq
 8000d04:	f040 0001 	orreq.w	r0, r0, #1
 8000d08:	3614      	adds	r6, #20
 8000d0a:	42b4      	cmp	r4, r6
 8000d0c:	bf08      	it	eq
 8000d0e:	f040 0001 	orreq.w	r0, r0, #1
 8000d12:	3614      	adds	r6, #20
 8000d14:	42b4      	cmp	r4, r6
 8000d16:	bf08      	it	eq
 8000d18:	f040 0001 	orreq.w	r0, r0, #1
 8000d1c:	3614      	adds	r6, #20
 8000d1e:	42b4      	cmp	r4, r6
 8000d20:	bf08      	it	eq
 8000d22:	f040 0001 	orreq.w	r0, r0, #1
 8000d26:	b910      	cbnz	r0, 8000d2e <HAL_DMA_Start_IT+0x142>
 8000d28:	4864      	ldr	r0, [pc, #400]	; (8000ebc <HAL_DMA_Start_IT+0x2d0>)
 8000d2a:	4284      	cmp	r4, r0
 8000d2c:	d10a      	bne.n	8000d44 <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000d2e:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 8000d32:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 8000d34:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8000d38:	b110      	cbz	r0, 8000d40 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d3a:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8000d3e:	6044      	str	r4, [r0, #4]
 8000d40:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <HAL_DMA_Start_IT+0x2c8>)
 8000d46:	4e5a      	ldr	r6, [pc, #360]	; (8000eb0 <HAL_DMA_Start_IT+0x2c4>)
 8000d48:	42b4      	cmp	r4, r6
 8000d4a:	bf18      	it	ne
 8000d4c:	4284      	cmpne	r4, r0
 8000d4e:	f106 0618 	add.w	r6, r6, #24
 8000d52:	bf0c      	ite	eq
 8000d54:	2001      	moveq	r0, #1
 8000d56:	2000      	movne	r0, #0
 8000d58:	42b4      	cmp	r4, r6
 8000d5a:	bf08      	it	eq
 8000d5c:	f040 0001 	orreq.w	r0, r0, #1
 8000d60:	3618      	adds	r6, #24
 8000d62:	42b4      	cmp	r4, r6
 8000d64:	bf08      	it	eq
 8000d66:	f040 0001 	orreq.w	r0, r0, #1
 8000d6a:	3618      	adds	r6, #24
 8000d6c:	42b4      	cmp	r4, r6
 8000d6e:	bf08      	it	eq
 8000d70:	f040 0001 	orreq.w	r0, r0, #1
 8000d74:	3618      	adds	r6, #24
 8000d76:	42b4      	cmp	r4, r6
 8000d78:	bf08      	it	eq
 8000d7a:	f040 0001 	orreq.w	r0, r0, #1
 8000d7e:	3618      	adds	r6, #24
 8000d80:	42b4      	cmp	r4, r6
 8000d82:	bf08      	it	eq
 8000d84:	f040 0001 	orreq.w	r0, r0, #1
 8000d88:	3618      	adds	r6, #24
 8000d8a:	42b4      	cmp	r4, r6
 8000d8c:	bf08      	it	eq
 8000d8e:	f040 0001 	orreq.w	r0, r0, #1
 8000d92:	f506 7656 	add.w	r6, r6, #856	; 0x358
 8000d96:	42b4      	cmp	r4, r6
 8000d98:	bf08      	it	eq
 8000d9a:	f040 0001 	orreq.w	r0, r0, #1
 8000d9e:	3618      	adds	r6, #24
 8000da0:	42b4      	cmp	r4, r6
 8000da2:	bf08      	it	eq
 8000da4:	f040 0001 	orreq.w	r0, r0, #1
 8000da8:	3618      	adds	r6, #24
 8000daa:	42b4      	cmp	r4, r6
 8000dac:	bf08      	it	eq
 8000dae:	f040 0001 	orreq.w	r0, r0, #1
 8000db2:	3618      	adds	r6, #24
 8000db4:	42b4      	cmp	r4, r6
 8000db6:	bf08      	it	eq
 8000db8:	f040 0001 	orreq.w	r0, r0, #1
 8000dbc:	3618      	adds	r6, #24
 8000dbe:	42b4      	cmp	r4, r6
 8000dc0:	bf08      	it	eq
 8000dc2:	f040 0001 	orreq.w	r0, r0, #1
 8000dc6:	3618      	adds	r6, #24
 8000dc8:	42b4      	cmp	r4, r6
 8000dca:	bf08      	it	eq
 8000dcc:	f040 0001 	orreq.w	r0, r0, #1
 8000dd0:	3618      	adds	r6, #24
 8000dd2:	42b4      	cmp	r4, r6
 8000dd4:	bf08      	it	eq
 8000dd6:	f040 0001 	orreq.w	r0, r0, #1
 8000dda:	b918      	cbnz	r0, 8000de4 <HAL_DMA_Start_IT+0x1f8>
 8000ddc:	4838      	ldr	r0, [pc, #224]	; (8000ec0 <HAL_DMA_Start_IT+0x2d4>)
 8000dde:	4284      	cmp	r4, r0
 8000de0:	f040 817b 	bne.w	80010da <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8000de4:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8000de8:	f000 041f 	and.w	r4, r0, #31
 8000dec:	203f      	movs	r0, #63	; 0x3f
 8000dee:	40a0      	lsls	r0, r4
 8000df0:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000df2:	f8dc 4000 	ldr.w	r4, [ip]
 8000df6:	6820      	ldr	r0, [r4, #0]
 8000df8:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8000dfc:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8000dfe:	f8dc 0000 	ldr.w	r0, [ip]
 8000e02:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e04:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8000e08:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8000e0a:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e0e:	f000 815b 	beq.w	80010c8 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8000e12:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8000e14:	f8dc 3000 	ldr.w	r3, [ip]
 8000e18:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8000e1a:	f8dc 4000 	ldr.w	r4, [ip]
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <HAL_DMA_Start_IT+0x2c8>)
 8000e20:	4923      	ldr	r1, [pc, #140]	; (8000eb0 <HAL_DMA_Start_IT+0x2c4>)
 8000e22:	4a28      	ldr	r2, [pc, #160]	; (8000ec4 <HAL_DMA_Start_IT+0x2d8>)
 8000e24:	428c      	cmp	r4, r1
 8000e26:	bf18      	it	ne
 8000e28:	429c      	cmpne	r4, r3
 8000e2a:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000e2e:	bf0c      	ite	eq
 8000e30:	2301      	moveq	r3, #1
 8000e32:	2300      	movne	r3, #0
 8000e34:	4294      	cmp	r4, r2
 8000e36:	bf08      	it	eq
 8000e38:	f043 0301 	orreq.w	r3, r3, #1
 8000e3c:	3230      	adds	r2, #48	; 0x30
 8000e3e:	428c      	cmp	r4, r1
 8000e40:	bf08      	it	eq
 8000e42:	f043 0301 	orreq.w	r3, r3, #1
 8000e46:	3130      	adds	r1, #48	; 0x30
 8000e48:	4294      	cmp	r4, r2
 8000e4a:	bf08      	it	eq
 8000e4c:	f043 0301 	orreq.w	r3, r3, #1
 8000e50:	3230      	adds	r2, #48	; 0x30
 8000e52:	428c      	cmp	r4, r1
 8000e54:	bf08      	it	eq
 8000e56:	f043 0301 	orreq.w	r3, r3, #1
 8000e5a:	3130      	adds	r1, #48	; 0x30
 8000e5c:	4294      	cmp	r4, r2
 8000e5e:	bf08      	it	eq
 8000e60:	f043 0301 	orreq.w	r3, r3, #1
 8000e64:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8000e68:	428c      	cmp	r4, r1
 8000e6a:	bf08      	it	eq
 8000e6c:	f043 0301 	orreq.w	r3, r3, #1
 8000e70:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8000e74:	4294      	cmp	r4, r2
 8000e76:	bf08      	it	eq
 8000e78:	f043 0301 	orreq.w	r3, r3, #1
 8000e7c:	3230      	adds	r2, #48	; 0x30
 8000e7e:	428c      	cmp	r4, r1
 8000e80:	bf08      	it	eq
 8000e82:	f043 0301 	orreq.w	r3, r3, #1
 8000e86:	3130      	adds	r1, #48	; 0x30
 8000e88:	4294      	cmp	r4, r2
 8000e8a:	bf08      	it	eq
 8000e8c:	f043 0301 	orreq.w	r3, r3, #1
 8000e90:	3230      	adds	r2, #48	; 0x30
 8000e92:	428c      	cmp	r4, r1
 8000e94:	bf08      	it	eq
 8000e96:	f043 0301 	orreq.w	r3, r3, #1
 8000e9a:	3130      	adds	r1, #48	; 0x30
 8000e9c:	4294      	cmp	r4, r2
 8000e9e:	bf08      	it	eq
 8000ea0:	f043 0301 	orreq.w	r3, r3, #1
 8000ea4:	3230      	adds	r2, #48	; 0x30
 8000ea6:	428c      	cmp	r4, r1
 8000ea8:	bf08      	it	eq
 8000eaa:	f043 0301 	orreq.w	r3, r3, #1
 8000eae:	e00b      	b.n	8000ec8 <HAL_DMA_Start_IT+0x2dc>
 8000eb0:	40020028 	.word	0x40020028
 8000eb4:	40020010 	.word	0x40020010
 8000eb8:	58025408 	.word	0x58025408
 8000ebc:	58025494 	.word	0x58025494
 8000ec0:	400204b8 	.word	0x400204b8
 8000ec4:	40020040 	.word	0x40020040
 8000ec8:	4294      	cmp	r4, r2
 8000eca:	bf08      	it	eq
 8000ecc:	f043 0301 	orreq.w	r3, r3, #1
 8000ed0:	b91b      	cbnz	r3, 8000eda <HAL_DMA_Start_IT+0x2ee>
 8000ed2:	4b9b      	ldr	r3, [pc, #620]	; (8001140 <HAL_DMA_Start_IT+0x554>)
 8000ed4:	429c      	cmp	r4, r3
 8000ed6:	f040 8143 	bne.w	8001160 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8000eda:	6823      	ldr	r3, [r4, #0]
 8000edc:	f023 031e 	bic.w	r3, r3, #30
 8000ee0:	f043 0316 	orr.w	r3, r3, #22
 8000ee4:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8000ee6:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8000eea:	b12b      	cbz	r3, 8000ef8 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8000eec:	f8dc 2000 	ldr.w	r2, [ip]
 8000ef0:	6813      	ldr	r3, [r2, #0]
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8000ef8:	f8dc 4000 	ldr.w	r4, [ip]
 8000efc:	4b91      	ldr	r3, [pc, #580]	; (8001144 <HAL_DMA_Start_IT+0x558>)
 8000efe:	4992      	ldr	r1, [pc, #584]	; (8001148 <HAL_DMA_Start_IT+0x55c>)
 8000f00:	4a92      	ldr	r2, [pc, #584]	; (800114c <HAL_DMA_Start_IT+0x560>)
 8000f02:	428c      	cmp	r4, r1
 8000f04:	bf18      	it	ne
 8000f06:	429c      	cmpne	r4, r3
 8000f08:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8000f0c:	bf0c      	ite	eq
 8000f0e:	2301      	moveq	r3, #1
 8000f10:	2300      	movne	r3, #0
 8000f12:	4294      	cmp	r4, r2
 8000f14:	bf08      	it	eq
 8000f16:	f043 0301 	orreq.w	r3, r3, #1
 8000f1a:	3230      	adds	r2, #48	; 0x30
 8000f1c:	428c      	cmp	r4, r1
 8000f1e:	bf08      	it	eq
 8000f20:	f043 0301 	orreq.w	r3, r3, #1
 8000f24:	3130      	adds	r1, #48	; 0x30
 8000f26:	4294      	cmp	r4, r2
 8000f28:	bf08      	it	eq
 8000f2a:	f043 0301 	orreq.w	r3, r3, #1
 8000f2e:	3230      	adds	r2, #48	; 0x30
 8000f30:	428c      	cmp	r4, r1
 8000f32:	bf08      	it	eq
 8000f34:	f043 0301 	orreq.w	r3, r3, #1
 8000f38:	3130      	adds	r1, #48	; 0x30
 8000f3a:	4294      	cmp	r4, r2
 8000f3c:	bf08      	it	eq
 8000f3e:	f043 0301 	orreq.w	r3, r3, #1
 8000f42:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8000f46:	428c      	cmp	r4, r1
 8000f48:	bf08      	it	eq
 8000f4a:	f043 0301 	orreq.w	r3, r3, #1
 8000f4e:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8000f52:	4294      	cmp	r4, r2
 8000f54:	bf08      	it	eq
 8000f56:	f043 0301 	orreq.w	r3, r3, #1
 8000f5a:	3230      	adds	r2, #48	; 0x30
 8000f5c:	428c      	cmp	r4, r1
 8000f5e:	bf08      	it	eq
 8000f60:	f043 0301 	orreq.w	r3, r3, #1
 8000f64:	3130      	adds	r1, #48	; 0x30
 8000f66:	4294      	cmp	r4, r2
 8000f68:	bf08      	it	eq
 8000f6a:	f043 0301 	orreq.w	r3, r3, #1
 8000f6e:	3230      	adds	r2, #48	; 0x30
 8000f70:	428c      	cmp	r4, r1
 8000f72:	bf08      	it	eq
 8000f74:	f043 0301 	orreq.w	r3, r3, #1
 8000f78:	3130      	adds	r1, #48	; 0x30
 8000f7a:	4294      	cmp	r4, r2
 8000f7c:	bf08      	it	eq
 8000f7e:	f043 0301 	orreq.w	r3, r3, #1
 8000f82:	3230      	adds	r2, #48	; 0x30
 8000f84:	428c      	cmp	r4, r1
 8000f86:	bf08      	it	eq
 8000f88:	f043 0301 	orreq.w	r3, r3, #1
 8000f8c:	3130      	adds	r1, #48	; 0x30
 8000f8e:	4294      	cmp	r4, r2
 8000f90:	bf08      	it	eq
 8000f92:	f043 0301 	orreq.w	r3, r3, #1
 8000f96:	4a6e      	ldr	r2, [pc, #440]	; (8001150 <HAL_DMA_Start_IT+0x564>)
 8000f98:	428c      	cmp	r4, r1
 8000f9a:	bf08      	it	eq
 8000f9c:	f043 0301 	orreq.w	r3, r3, #1
 8000fa0:	496c      	ldr	r1, [pc, #432]	; (8001154 <HAL_DMA_Start_IT+0x568>)
 8000fa2:	4294      	cmp	r4, r2
 8000fa4:	bf08      	it	eq
 8000fa6:	f043 0301 	orreq.w	r3, r3, #1
 8000faa:	3228      	adds	r2, #40	; 0x28
 8000fac:	428c      	cmp	r4, r1
 8000fae:	bf08      	it	eq
 8000fb0:	f043 0301 	orreq.w	r3, r3, #1
 8000fb4:	3128      	adds	r1, #40	; 0x28
 8000fb6:	4294      	cmp	r4, r2
 8000fb8:	bf08      	it	eq
 8000fba:	f043 0301 	orreq.w	r3, r3, #1
 8000fbe:	3228      	adds	r2, #40	; 0x28
 8000fc0:	428c      	cmp	r4, r1
 8000fc2:	bf08      	it	eq
 8000fc4:	f043 0301 	orreq.w	r3, r3, #1
 8000fc8:	3128      	adds	r1, #40	; 0x28
 8000fca:	4294      	cmp	r4, r2
 8000fcc:	bf08      	it	eq
 8000fce:	f043 0301 	orreq.w	r3, r3, #1
 8000fd2:	3228      	adds	r2, #40	; 0x28
 8000fd4:	428c      	cmp	r4, r1
 8000fd6:	bf08      	it	eq
 8000fd8:	f043 0301 	orreq.w	r3, r3, #1
 8000fdc:	4294      	cmp	r4, r2
 8000fde:	bf08      	it	eq
 8000fe0:	f043 0301 	orreq.w	r3, r3, #1
 8000fe4:	b913      	cbnz	r3, 8000fec <HAL_DMA_Start_IT+0x400>
 8000fe6:	4b5c      	ldr	r3, [pc, #368]	; (8001158 <HAL_DMA_Start_IT+0x56c>)
 8000fe8:	429c      	cmp	r4, r3
 8000fea:	d111      	bne.n	8001010 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000fec:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	03d2      	lsls	r2, r2, #15
 8000ff4:	d503      	bpl.n	8000ffe <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffc:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8000ffe:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8001002:	b11b      	cbz	r3, 800100c <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001004:	681a      	ldr	r2, [r3, #0]
 8001006:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8001010:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <HAL_DMA_Start_IT+0x558>)
 8001012:	494d      	ldr	r1, [pc, #308]	; (8001148 <HAL_DMA_Start_IT+0x55c>)
 8001014:	4a4d      	ldr	r2, [pc, #308]	; (800114c <HAL_DMA_Start_IT+0x560>)
 8001016:	428c      	cmp	r4, r1
 8001018:	bf18      	it	ne
 800101a:	429c      	cmpne	r4, r3
 800101c:	484f      	ldr	r0, [pc, #316]	; (800115c <HAL_DMA_Start_IT+0x570>)
 800101e:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8001022:	bf0c      	ite	eq
 8001024:	2301      	moveq	r3, #1
 8001026:	2300      	movne	r3, #0
 8001028:	4294      	cmp	r4, r2
 800102a:	bf08      	it	eq
 800102c:	f043 0301 	orreq.w	r3, r3, #1
 8001030:	3230      	adds	r2, #48	; 0x30
 8001032:	4284      	cmp	r4, r0
 8001034:	bf08      	it	eq
 8001036:	f043 0301 	orreq.w	r3, r3, #1
 800103a:	3060      	adds	r0, #96	; 0x60
 800103c:	4294      	cmp	r4, r2
 800103e:	bf08      	it	eq
 8001040:	f043 0301 	orreq.w	r3, r3, #1
 8001044:	3230      	adds	r2, #48	; 0x30
 8001046:	428c      	cmp	r4, r1
 8001048:	bf08      	it	eq
 800104a:	f043 0301 	orreq.w	r3, r3, #1
 800104e:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8001052:	4294      	cmp	r4, r2
 8001054:	bf08      	it	eq
 8001056:	f043 0301 	orreq.w	r3, r3, #1
 800105a:	f502 725c 	add.w	r2, r2, #880	; 0x370
 800105e:	4284      	cmp	r4, r0
 8001060:	bf08      	it	eq
 8001062:	f043 0301 	orreq.w	r3, r3, #1
 8001066:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 800106a:	4294      	cmp	r4, r2
 800106c:	bf08      	it	eq
 800106e:	f043 0301 	orreq.w	r3, r3, #1
 8001072:	3230      	adds	r2, #48	; 0x30
 8001074:	428c      	cmp	r4, r1
 8001076:	bf08      	it	eq
 8001078:	f043 0301 	orreq.w	r3, r3, #1
 800107c:	3160      	adds	r1, #96	; 0x60
 800107e:	4294      	cmp	r4, r2
 8001080:	bf08      	it	eq
 8001082:	f043 0301 	orreq.w	r3, r3, #1
 8001086:	3230      	adds	r2, #48	; 0x30
 8001088:	4284      	cmp	r4, r0
 800108a:	bf08      	it	eq
 800108c:	f043 0301 	orreq.w	r3, r3, #1
 8001090:	4294      	cmp	r4, r2
 8001092:	bf08      	it	eq
 8001094:	f043 0301 	orreq.w	r3, r3, #1
 8001098:	3230      	adds	r2, #48	; 0x30
 800109a:	428c      	cmp	r4, r1
 800109c:	bf08      	it	eq
 800109e:	f043 0301 	orreq.w	r3, r3, #1
 80010a2:	4294      	cmp	r4, r2
 80010a4:	bf08      	it	eq
 80010a6:	f043 0301 	orreq.w	r3, r3, #1
 80010aa:	b933      	cbnz	r3, 80010ba <HAL_DMA_Start_IT+0x4ce>
 80010ac:	3060      	adds	r0, #96	; 0x60
 80010ae:	1a20      	subs	r0, r4, r0
 80010b0:	fab0 f080 	clz	r0, r0
 80010b4:	0940      	lsrs	r0, r0, #5
 80010b6:	2800      	cmp	r0, #0
 80010b8:	d03d      	beq.n	8001136 <HAL_DMA_Start_IT+0x54a>
 80010ba:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010bc:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6023      	str	r3, [r4, #0]
}
 80010c4:	bc70      	pop	{r4, r5, r6}
 80010c6:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80010c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80010ca:	f8dc 3000 	ldr.w	r3, [ip]
 80010ce:	60d9      	str	r1, [r3, #12]
 80010d0:	e6a3      	b.n	8000e1a <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 80010d2:	2001      	movs	r0, #1
 80010d4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 80010d6:	2002      	movs	r0, #2
}
 80010d8:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80010da:	481d      	ldr	r0, [pc, #116]	; (8001150 <HAL_DMA_Start_IT+0x564>)
 80010dc:	4e1d      	ldr	r6, [pc, #116]	; (8001154 <HAL_DMA_Start_IT+0x568>)
 80010de:	42b4      	cmp	r4, r6
 80010e0:	bf18      	it	ne
 80010e2:	4284      	cmpne	r4, r0
 80010e4:	f106 0614 	add.w	r6, r6, #20
 80010e8:	bf0c      	ite	eq
 80010ea:	2001      	moveq	r0, #1
 80010ec:	2000      	movne	r0, #0
 80010ee:	42b4      	cmp	r4, r6
 80010f0:	bf08      	it	eq
 80010f2:	f040 0001 	orreq.w	r0, r0, #1
 80010f6:	3614      	adds	r6, #20
 80010f8:	42b4      	cmp	r4, r6
 80010fa:	bf08      	it	eq
 80010fc:	f040 0001 	orreq.w	r0, r0, #1
 8001100:	3614      	adds	r6, #20
 8001102:	42b4      	cmp	r4, r6
 8001104:	bf08      	it	eq
 8001106:	f040 0001 	orreq.w	r0, r0, #1
 800110a:	3614      	adds	r6, #20
 800110c:	42b4      	cmp	r4, r6
 800110e:	bf08      	it	eq
 8001110:	f040 0001 	orreq.w	r0, r0, #1
 8001114:	3614      	adds	r6, #20
 8001116:	42b4      	cmp	r4, r6
 8001118:	bf08      	it	eq
 800111a:	f040 0001 	orreq.w	r0, r0, #1
 800111e:	b910      	cbnz	r0, 8001126 <HAL_DMA_Start_IT+0x53a>
 8001120:	480d      	ldr	r0, [pc, #52]	; (8001158 <HAL_DMA_Start_IT+0x56c>)
 8001122:	4284      	cmp	r4, r0
 8001124:	d11c      	bne.n	8001160 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001126:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 800112a:	f000 041f 	and.w	r4, r0, #31
 800112e:	2001      	movs	r0, #1
 8001130:	40a0      	lsls	r0, r4
 8001132:	6068      	str	r0, [r5, #4]
 8001134:	e663      	b.n	8000dfe <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8001136:	6823      	ldr	r3, [r4, #0]
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6023      	str	r3, [r4, #0]
 800113e:	e56d      	b.n	8000c1c <HAL_DMA_Start_IT+0x30>
 8001140:	400204b8 	.word	0x400204b8
 8001144:	40020010 	.word	0x40020010
 8001148:	40020028 	.word	0x40020028
 800114c:	40020040 	.word	0x40020040
 8001150:	58025408 	.word	0x58025408
 8001154:	5802541c 	.word	0x5802541c
 8001158:	58025494 	.word	0x58025494
 800115c:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	f023 030e 	bic.w	r3, r3, #14
 8001166:	f043 030a 	orr.w	r3, r3, #10
 800116a:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 800116c:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8001170:	2b00      	cmp	r3, #0
 8001172:	f43f aec1 	beq.w	8000ef8 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001176:	f8dc 2000 	ldr.w	r2, [ip]
 800117a:	6813      	ldr	r3, [r2, #0]
 800117c:	f043 0304 	orr.w	r3, r3, #4
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	e6b9      	b.n	8000ef8 <HAL_DMA_Start_IT+0x30c>

08001184 <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8001184:	2800      	cmp	r0, #0
 8001186:	d065      	beq.n	8001254 <HAL_DMA_Abort_IT+0xd0>
{
 8001188:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800118c:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8001190:	4603      	mov	r3, r0
 8001192:	2a02      	cmp	r2, #2
 8001194:	d159      	bne.n	800124a <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001196:	6801      	ldr	r1, [r0, #0]
 8001198:	4883      	ldr	r0, [pc, #524]	; (80013a8 <HAL_DMA_Abort_IT+0x224>)
 800119a:	4281      	cmp	r1, r0
 800119c:	d04b      	beq.n	8001236 <HAL_DMA_Abort_IT+0xb2>
 800119e:	4c83      	ldr	r4, [pc, #524]	; (80013ac <HAL_DMA_Abort_IT+0x228>)
 80011a0:	42a1      	cmp	r1, r4
 80011a2:	d048      	beq.n	8001236 <HAL_DMA_Abort_IT+0xb2>
 80011a4:	f8df a228 	ldr.w	sl, [pc, #552]	; 80013d0 <HAL_DMA_Abort_IT+0x24c>
 80011a8:	f8df b214 	ldr.w	fp, [pc, #532]	; 80013c0 <HAL_DMA_Abort_IT+0x23c>
 80011ac:	f8df 9224 	ldr.w	r9, [pc, #548]	; 80013d4 <HAL_DMA_Abort_IT+0x250>
 80011b0:	4559      	cmp	r1, fp
 80011b2:	bf18      	it	ne
 80011b4:	4551      	cmpne	r1, sl
 80011b6:	f8df 8220 	ldr.w	r8, [pc, #544]	; 80013d8 <HAL_DMA_Abort_IT+0x254>
 80011ba:	f8df e220 	ldr.w	lr, [pc, #544]	; 80013dc <HAL_DMA_Abort_IT+0x258>
 80011be:	bf0c      	ite	eq
 80011c0:	2201      	moveq	r2, #1
 80011c2:	2200      	movne	r2, #0
 80011c4:	f8df c218 	ldr.w	ip, [pc, #536]	; 80013e0 <HAL_DMA_Abort_IT+0x25c>
 80011c8:	4549      	cmp	r1, r9
 80011ca:	bf08      	it	eq
 80011cc:	f042 0201 	orreq.w	r2, r2, #1
 80011d0:	4d77      	ldr	r5, [pc, #476]	; (80013b0 <HAL_DMA_Abort_IT+0x22c>)
 80011d2:	4f78      	ldr	r7, [pc, #480]	; (80013b4 <HAL_DMA_Abort_IT+0x230>)
 80011d4:	4541      	cmp	r1, r8
 80011d6:	bf08      	it	eq
 80011d8:	f042 0201 	orreq.w	r2, r2, #1
 80011dc:	4e76      	ldr	r6, [pc, #472]	; (80013b8 <HAL_DMA_Abort_IT+0x234>)
 80011de:	4571      	cmp	r1, lr
 80011e0:	bf08      	it	eq
 80011e2:	f042 0201 	orreq.w	r2, r2, #1
 80011e6:	4561      	cmp	r1, ip
 80011e8:	bf08      	it	eq
 80011ea:	f042 0201 	orreq.w	r2, r2, #1
 80011ee:	42a9      	cmp	r1, r5
 80011f0:	bf08      	it	eq
 80011f2:	f042 0201 	orreq.w	r2, r2, #1
 80011f6:	3518      	adds	r5, #24
 80011f8:	42a9      	cmp	r1, r5
 80011fa:	bf08      	it	eq
 80011fc:	f042 0201 	orreq.w	r2, r2, #1
 8001200:	3518      	adds	r5, #24
 8001202:	42a9      	cmp	r1, r5
 8001204:	bf08      	it	eq
 8001206:	f042 0201 	orreq.w	r2, r2, #1
 800120a:	3518      	adds	r5, #24
 800120c:	42a9      	cmp	r1, r5
 800120e:	bf08      	it	eq
 8001210:	f042 0201 	orreq.w	r2, r2, #1
 8001214:	3548      	adds	r5, #72	; 0x48
 8001216:	42b9      	cmp	r1, r7
 8001218:	bf08      	it	eq
 800121a:	f042 0201 	orreq.w	r2, r2, #1
 800121e:	42b1      	cmp	r1, r6
 8001220:	bf08      	it	eq
 8001222:	f042 0201 	orreq.w	r2, r2, #1
 8001226:	42a9      	cmp	r1, r5
 8001228:	bf08      	it	eq
 800122a:	f042 0201 	orreq.w	r2, r2, #1
 800122e:	b912      	cbnz	r2, 8001236 <HAL_DMA_Abort_IT+0xb2>
 8001230:	4a62      	ldr	r2, [pc, #392]	; (80013bc <HAL_DMA_Abort_IT+0x238>)
 8001232:	4291      	cmp	r1, r2
 8001234:	d110      	bne.n	8001258 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001236:	2204      	movs	r2, #4
  return HAL_OK;
 8001238:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 800123a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800123e:	680b      	ldr	r3, [r1, #0]
 8001240:	f023 0301 	bic.w	r3, r3, #1
 8001244:	600b      	str	r3, [r1, #0]
}
 8001246:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124a:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 800124c:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800124e:	655a      	str	r2, [r3, #84]	; 0x54
}
 8001250:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8001254:	2001      	movs	r0, #1
}
 8001256:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001258:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800125a:	4c54      	ldr	r4, [pc, #336]	; (80013ac <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800125c:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001260:	4857      	ldr	r0, [pc, #348]	; (80013c0 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001262:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8001264:	6819      	ldr	r1, [r3, #0]
 8001266:	680a      	ldr	r2, [r1, #0]
 8001268:	f022 0201 	bic.w	r2, r2, #1
 800126c:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800126e:	4a4e      	ldr	r2, [pc, #312]	; (80013a8 <HAL_DMA_Abort_IT+0x224>)
 8001270:	6819      	ldr	r1, [r3, #0]
 8001272:	42a1      	cmp	r1, r4
 8001274:	bf18      	it	ne
 8001276:	4291      	cmpne	r1, r2
 8001278:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800127c:	bf0c      	ite	eq
 800127e:	2201      	moveq	r2, #1
 8001280:	2200      	movne	r2, #0
 8001282:	4281      	cmp	r1, r0
 8001284:	bf08      	it	eq
 8001286:	f042 0201 	orreq.w	r2, r2, #1
 800128a:	3030      	adds	r0, #48	; 0x30
 800128c:	42a1      	cmp	r1, r4
 800128e:	bf08      	it	eq
 8001290:	f042 0201 	orreq.w	r2, r2, #1
 8001294:	3430      	adds	r4, #48	; 0x30
 8001296:	4281      	cmp	r1, r0
 8001298:	bf08      	it	eq
 800129a:	f042 0201 	orreq.w	r2, r2, #1
 800129e:	3030      	adds	r0, #48	; 0x30
 80012a0:	42a1      	cmp	r1, r4
 80012a2:	bf08      	it	eq
 80012a4:	f042 0201 	orreq.w	r2, r2, #1
 80012a8:	3430      	adds	r4, #48	; 0x30
 80012aa:	4281      	cmp	r1, r0
 80012ac:	bf08      	it	eq
 80012ae:	f042 0201 	orreq.w	r2, r2, #1
 80012b2:	f500 705c 	add.w	r0, r0, #880	; 0x370
 80012b6:	42a1      	cmp	r1, r4
 80012b8:	bf08      	it	eq
 80012ba:	f042 0201 	orreq.w	r2, r2, #1
 80012be:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80012c2:	4281      	cmp	r1, r0
 80012c4:	bf08      	it	eq
 80012c6:	f042 0201 	orreq.w	r2, r2, #1
 80012ca:	3030      	adds	r0, #48	; 0x30
 80012cc:	42a1      	cmp	r1, r4
 80012ce:	bf08      	it	eq
 80012d0:	f042 0201 	orreq.w	r2, r2, #1
 80012d4:	3430      	adds	r4, #48	; 0x30
 80012d6:	4281      	cmp	r1, r0
 80012d8:	bf08      	it	eq
 80012da:	f042 0201 	orreq.w	r2, r2, #1
 80012de:	3030      	adds	r0, #48	; 0x30
 80012e0:	42a1      	cmp	r1, r4
 80012e2:	bf08      	it	eq
 80012e4:	f042 0201 	orreq.w	r2, r2, #1
 80012e8:	3430      	adds	r4, #48	; 0x30
 80012ea:	4281      	cmp	r1, r0
 80012ec:	bf08      	it	eq
 80012ee:	f042 0201 	orreq.w	r2, r2, #1
 80012f2:	3030      	adds	r0, #48	; 0x30
 80012f4:	42a1      	cmp	r1, r4
 80012f6:	bf08      	it	eq
 80012f8:	f042 0201 	orreq.w	r2, r2, #1
 80012fc:	3430      	adds	r4, #48	; 0x30
 80012fe:	4281      	cmp	r1, r0
 8001300:	bf08      	it	eq
 8001302:	f042 0201 	orreq.w	r2, r2, #1
 8001306:	482f      	ldr	r0, [pc, #188]	; (80013c4 <HAL_DMA_Abort_IT+0x240>)
 8001308:	42a1      	cmp	r1, r4
 800130a:	bf08      	it	eq
 800130c:	f042 0201 	orreq.w	r2, r2, #1
 8001310:	4c2d      	ldr	r4, [pc, #180]	; (80013c8 <HAL_DMA_Abort_IT+0x244>)
 8001312:	4281      	cmp	r1, r0
 8001314:	bf08      	it	eq
 8001316:	f042 0201 	orreq.w	r2, r2, #1
 800131a:	3028      	adds	r0, #40	; 0x28
 800131c:	42a1      	cmp	r1, r4
 800131e:	bf08      	it	eq
 8001320:	f042 0201 	orreq.w	r2, r2, #1
 8001324:	3428      	adds	r4, #40	; 0x28
 8001326:	4281      	cmp	r1, r0
 8001328:	bf08      	it	eq
 800132a:	f042 0201 	orreq.w	r2, r2, #1
 800132e:	3028      	adds	r0, #40	; 0x28
 8001330:	42a1      	cmp	r1, r4
 8001332:	bf08      	it	eq
 8001334:	f042 0201 	orreq.w	r2, r2, #1
 8001338:	3428      	adds	r4, #40	; 0x28
 800133a:	4281      	cmp	r1, r0
 800133c:	bf08      	it	eq
 800133e:	f042 0201 	orreq.w	r2, r2, #1
 8001342:	3028      	adds	r0, #40	; 0x28
 8001344:	42a1      	cmp	r1, r4
 8001346:	bf08      	it	eq
 8001348:	f042 0201 	orreq.w	r2, r2, #1
 800134c:	4281      	cmp	r1, r0
 800134e:	bf08      	it	eq
 8001350:	f042 0201 	orreq.w	r2, r2, #1
 8001354:	b912      	cbnz	r2, 800135c <HAL_DMA_Abort_IT+0x1d8>
 8001356:	4a1d      	ldr	r2, [pc, #116]	; (80013cc <HAL_DMA_Abort_IT+0x248>)
 8001358:	4291      	cmp	r1, r2
 800135a:	d117      	bne.n	800138c <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800135c:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800135e:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001360:	6801      	ldr	r1, [r0, #0]
 8001362:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001366:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001368:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800136c:	f001 011f 	and.w	r1, r1, #31
 8001370:	408a      	lsls	r2, r1
 8001372:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001374:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8001378:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 800137a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800137c:	b132      	cbz	r2, 800138c <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800137e:	6811      	ldr	r1, [r2, #0]
 8001380:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8001384:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001386:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 800138a:	6051      	str	r1, [r2, #4]
      __HAL_UNLOCK(hdma);
 800138c:	2400      	movs	r4, #0
      hdma->State = HAL_DMA_STATE_READY;
 800138e:	2101      	movs	r1, #1
      if(hdma->XferAbortCallback != NULL)
 8001390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      __HAL_UNLOCK(hdma);
 8001392:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001396:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      if(hdma->XferAbortCallback != NULL)
 800139a:	b11a      	cbz	r2, 80013a4 <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 800139c:	4618      	mov	r0, r3
 800139e:	4790      	blx	r2
  return HAL_OK;
 80013a0:	4620      	mov	r0, r4
 80013a2:	e755      	b.n	8001250 <HAL_DMA_Abort_IT+0xcc>
 80013a4:	4610      	mov	r0, r2
 80013a6:	e753      	b.n	8001250 <HAL_DMA_Abort_IT+0xcc>
 80013a8:	40020010 	.word	0x40020010
 80013ac:	40020028 	.word	0x40020028
 80013b0:	40020410 	.word	0x40020410
 80013b4:	40020470 	.word	0x40020470
 80013b8:	40020488 	.word	0x40020488
 80013bc:	400204b8 	.word	0x400204b8
 80013c0:	40020040 	.word	0x40020040
 80013c4:	58025408 	.word	0x58025408
 80013c8:	5802541c 	.word	0x5802541c
 80013cc:	58025494 	.word	0x58025494
 80013d0:	40020058 	.word	0x40020058
 80013d4:	40020070 	.word	0x40020070
 80013d8:	40020088 	.word	0x40020088
 80013dc:	400200a0 	.word	0x400200a0
 80013e0:	400200b8 	.word	0x400200b8

080013e4 <HAL_DMA_IRQHandler>:
{
 80013e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 80013e8:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ea:	4b9e      	ldr	r3, [pc, #632]	; (8001664 <HAL_DMA_IRQHandler+0x280>)
{
 80013ec:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013ee:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80013f0:	681e      	ldr	r6, [r3, #0]
{
 80013f2:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 80013f4:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80013f6:	6803      	ldr	r3, [r0, #0]
 80013f8:	4a9b      	ldr	r2, [pc, #620]	; (8001668 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 80013fa:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80013fc:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 80013fe:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001400:	d048      	beq.n	8001494 <HAL_DMA_IRQHandler+0xb0>
 8001402:	3218      	adds	r2, #24
 8001404:	4293      	cmp	r3, r2
 8001406:	d045      	beq.n	8001494 <HAL_DMA_IRQHandler+0xb0>
 8001408:	3218      	adds	r2, #24
 800140a:	4f98      	ldr	r7, [pc, #608]	; (800166c <HAL_DMA_IRQHandler+0x288>)
 800140c:	42bb      	cmp	r3, r7
 800140e:	bf18      	it	ne
 8001410:	4293      	cmpne	r3, r2
 8001412:	f107 0718 	add.w	r7, r7, #24
 8001416:	bf0c      	ite	eq
 8001418:	2201      	moveq	r2, #1
 800141a:	2200      	movne	r2, #0
 800141c:	42bb      	cmp	r3, r7
 800141e:	bf08      	it	eq
 8001420:	f042 0201 	orreq.w	r2, r2, #1
 8001424:	3718      	adds	r7, #24
 8001426:	42bb      	cmp	r3, r7
 8001428:	bf08      	it	eq
 800142a:	f042 0201 	orreq.w	r2, r2, #1
 800142e:	3718      	adds	r7, #24
 8001430:	42bb      	cmp	r3, r7
 8001432:	bf08      	it	eq
 8001434:	f042 0201 	orreq.w	r2, r2, #1
 8001438:	3718      	adds	r7, #24
 800143a:	42bb      	cmp	r3, r7
 800143c:	bf08      	it	eq
 800143e:	f042 0201 	orreq.w	r2, r2, #1
 8001442:	f507 7756 	add.w	r7, r7, #856	; 0x358
 8001446:	42bb      	cmp	r3, r7
 8001448:	bf08      	it	eq
 800144a:	f042 0201 	orreq.w	r2, r2, #1
 800144e:	3718      	adds	r7, #24
 8001450:	42bb      	cmp	r3, r7
 8001452:	bf08      	it	eq
 8001454:	f042 0201 	orreq.w	r2, r2, #1
 8001458:	3718      	adds	r7, #24
 800145a:	42bb      	cmp	r3, r7
 800145c:	bf08      	it	eq
 800145e:	f042 0201 	orreq.w	r2, r2, #1
 8001462:	3718      	adds	r7, #24
 8001464:	42bb      	cmp	r3, r7
 8001466:	bf08      	it	eq
 8001468:	f042 0201 	orreq.w	r2, r2, #1
 800146c:	3718      	adds	r7, #24
 800146e:	42bb      	cmp	r3, r7
 8001470:	bf08      	it	eq
 8001472:	f042 0201 	orreq.w	r2, r2, #1
 8001476:	3718      	adds	r7, #24
 8001478:	42bb      	cmp	r3, r7
 800147a:	bf08      	it	eq
 800147c:	f042 0201 	orreq.w	r2, r2, #1
 8001480:	3718      	adds	r7, #24
 8001482:	42bb      	cmp	r3, r7
 8001484:	bf08      	it	eq
 8001486:	f042 0201 	orreq.w	r2, r2, #1
 800148a:	b91a      	cbnz	r2, 8001494 <HAL_DMA_IRQHandler+0xb0>
 800148c:	4a78      	ldr	r2, [pc, #480]	; (8001670 <HAL_DMA_IRQHandler+0x28c>)
 800148e:	4293      	cmp	r3, r2
 8001490:	f040 82b3 	bne.w	80019fa <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001494:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 8001498:	2208      	movs	r2, #8
 800149a:	f000 011f 	and.w	r1, r0, #31
 800149e:	408a      	lsls	r2, r1
 80014a0:	4222      	tst	r2, r4
 80014a2:	f040 81a5 	bne.w	80017f0 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014a6:	fa24 f201 	lsr.w	r2, r4, r1
 80014aa:	07d2      	lsls	r2, r2, #31
 80014ac:	d511      	bpl.n	80014d2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80014ae:	695a      	ldr	r2, [r3, #20]
 80014b0:	0612      	lsls	r2, r2, #24
 80014b2:	f140 8269 	bpl.w	8001988 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80014b6:	2301      	movs	r3, #1
 80014b8:	fa03 f101 	lsl.w	r1, r3, r1
 80014bc:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014be:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014c2:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014c6:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014ca:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014ce:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80014d2:	f04f 0c04 	mov.w	ip, #4
 80014d6:	fa0c fc01 	lsl.w	ip, ip, r1
 80014da:	ea1c 0f04 	tst.w	ip, r4
 80014de:	d062      	beq.n	80015a6 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80014e0:	f8d8 2000 	ldr.w	r2, [r8]
 80014e4:	4f60      	ldr	r7, [pc, #384]	; (8001668 <HAL_DMA_IRQHandler+0x284>)
 80014e6:	4b63      	ldr	r3, [pc, #396]	; (8001674 <HAL_DMA_IRQHandler+0x290>)
 80014e8:	429a      	cmp	r2, r3
 80014ea:	bf18      	it	ne
 80014ec:	42ba      	cmpne	r2, r7
 80014ee:	f103 0318 	add.w	r3, r3, #24
 80014f2:	bf0c      	ite	eq
 80014f4:	2701      	moveq	r7, #1
 80014f6:	2700      	movne	r7, #0
 80014f8:	429a      	cmp	r2, r3
 80014fa:	bf08      	it	eq
 80014fc:	f047 0701 	orreq.w	r7, r7, #1
 8001500:	3318      	adds	r3, #24
 8001502:	429a      	cmp	r2, r3
 8001504:	bf08      	it	eq
 8001506:	f047 0701 	orreq.w	r7, r7, #1
 800150a:	3318      	adds	r3, #24
 800150c:	429a      	cmp	r2, r3
 800150e:	bf08      	it	eq
 8001510:	f047 0701 	orreq.w	r7, r7, #1
 8001514:	3318      	adds	r3, #24
 8001516:	429a      	cmp	r2, r3
 8001518:	bf08      	it	eq
 800151a:	f047 0701 	orreq.w	r7, r7, #1
 800151e:	3318      	adds	r3, #24
 8001520:	429a      	cmp	r2, r3
 8001522:	bf08      	it	eq
 8001524:	f047 0701 	orreq.w	r7, r7, #1
 8001528:	3318      	adds	r3, #24
 800152a:	429a      	cmp	r2, r3
 800152c:	bf08      	it	eq
 800152e:	f047 0701 	orreq.w	r7, r7, #1
 8001532:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001536:	429a      	cmp	r2, r3
 8001538:	bf08      	it	eq
 800153a:	f047 0701 	orreq.w	r7, r7, #1
 800153e:	3318      	adds	r3, #24
 8001540:	429a      	cmp	r2, r3
 8001542:	bf08      	it	eq
 8001544:	f047 0701 	orreq.w	r7, r7, #1
 8001548:	3318      	adds	r3, #24
 800154a:	429a      	cmp	r2, r3
 800154c:	bf08      	it	eq
 800154e:	f047 0701 	orreq.w	r7, r7, #1
 8001552:	3318      	adds	r3, #24
 8001554:	429a      	cmp	r2, r3
 8001556:	bf08      	it	eq
 8001558:	f047 0701 	orreq.w	r7, r7, #1
 800155c:	3318      	adds	r3, #24
 800155e:	429a      	cmp	r2, r3
 8001560:	bf08      	it	eq
 8001562:	f047 0701 	orreq.w	r7, r7, #1
 8001566:	3318      	adds	r3, #24
 8001568:	429a      	cmp	r2, r3
 800156a:	bf08      	it	eq
 800156c:	f047 0701 	orreq.w	r7, r7, #1
 8001570:	3318      	adds	r3, #24
 8001572:	429a      	cmp	r2, r3
 8001574:	bf08      	it	eq
 8001576:	f047 0701 	orreq.w	r7, r7, #1
 800157a:	4613      	mov	r3, r2
 800157c:	b91f      	cbnz	r7, 8001586 <HAL_DMA_IRQHandler+0x1a2>
 800157e:	4f3c      	ldr	r7, [pc, #240]	; (8001670 <HAL_DMA_IRQHandler+0x28c>)
 8001580:	42ba      	cmp	r2, r7
 8001582:	f040 8277 	bne.w	8001a74 <HAL_DMA_IRQHandler+0x690>
 8001586:	681a      	ldr	r2, [r3, #0]
 8001588:	0797      	lsls	r7, r2, #30
 800158a:	f140 8209 	bpl.w	80019a0 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800158e:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001592:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001596:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800159a:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800159e:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80015a2:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80015a6:	f04f 0c10 	mov.w	ip, #16
 80015aa:	fa0c fc01 	lsl.w	ip, ip, r1
 80015ae:	ea1c 0f04 	tst.w	ip, r4
 80015b2:	d079      	beq.n	80016a8 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80015b4:	f8d8 2000 	ldr.w	r2, [r8]
 80015b8:	4f2b      	ldr	r7, [pc, #172]	; (8001668 <HAL_DMA_IRQHandler+0x284>)
 80015ba:	4b2e      	ldr	r3, [pc, #184]	; (8001674 <HAL_DMA_IRQHandler+0x290>)
 80015bc:	429a      	cmp	r2, r3
 80015be:	bf18      	it	ne
 80015c0:	42ba      	cmpne	r2, r7
 80015c2:	f103 0318 	add.w	r3, r3, #24
 80015c6:	bf0c      	ite	eq
 80015c8:	2701      	moveq	r7, #1
 80015ca:	2700      	movne	r7, #0
 80015cc:	429a      	cmp	r2, r3
 80015ce:	bf08      	it	eq
 80015d0:	f047 0701 	orreq.w	r7, r7, #1
 80015d4:	3318      	adds	r3, #24
 80015d6:	429a      	cmp	r2, r3
 80015d8:	bf08      	it	eq
 80015da:	f047 0701 	orreq.w	r7, r7, #1
 80015de:	3318      	adds	r3, #24
 80015e0:	429a      	cmp	r2, r3
 80015e2:	bf08      	it	eq
 80015e4:	f047 0701 	orreq.w	r7, r7, #1
 80015e8:	3318      	adds	r3, #24
 80015ea:	429a      	cmp	r2, r3
 80015ec:	bf08      	it	eq
 80015ee:	f047 0701 	orreq.w	r7, r7, #1
 80015f2:	3318      	adds	r3, #24
 80015f4:	429a      	cmp	r2, r3
 80015f6:	bf08      	it	eq
 80015f8:	f047 0701 	orreq.w	r7, r7, #1
 80015fc:	3318      	adds	r3, #24
 80015fe:	429a      	cmp	r2, r3
 8001600:	bf08      	it	eq
 8001602:	f047 0701 	orreq.w	r7, r7, #1
 8001606:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800160a:	429a      	cmp	r2, r3
 800160c:	bf08      	it	eq
 800160e:	f047 0701 	orreq.w	r7, r7, #1
 8001612:	3318      	adds	r3, #24
 8001614:	429a      	cmp	r2, r3
 8001616:	bf08      	it	eq
 8001618:	f047 0701 	orreq.w	r7, r7, #1
 800161c:	3318      	adds	r3, #24
 800161e:	429a      	cmp	r2, r3
 8001620:	bf08      	it	eq
 8001622:	f047 0701 	orreq.w	r7, r7, #1
 8001626:	3318      	adds	r3, #24
 8001628:	429a      	cmp	r2, r3
 800162a:	bf08      	it	eq
 800162c:	f047 0701 	orreq.w	r7, r7, #1
 8001630:	3318      	adds	r3, #24
 8001632:	429a      	cmp	r2, r3
 8001634:	bf08      	it	eq
 8001636:	f047 0701 	orreq.w	r7, r7, #1
 800163a:	3318      	adds	r3, #24
 800163c:	429a      	cmp	r2, r3
 800163e:	bf08      	it	eq
 8001640:	f047 0701 	orreq.w	r7, r7, #1
 8001644:	3318      	adds	r3, #24
 8001646:	429a      	cmp	r2, r3
 8001648:	bf08      	it	eq
 800164a:	f047 0701 	orreq.w	r7, r7, #1
 800164e:	4613      	mov	r3, r2
 8001650:	b91f      	cbnz	r7, 800165a <HAL_DMA_IRQHandler+0x276>
 8001652:	4f07      	ldr	r7, [pc, #28]	; (8001670 <HAL_DMA_IRQHandler+0x28c>)
 8001654:	42ba      	cmp	r2, r7
 8001656:	f040 814b 	bne.w	80018f0 <HAL_DMA_IRQHandler+0x50c>
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	0710      	lsls	r0, r2, #28
 800165e:	f140 818c 	bpl.w	800197a <HAL_DMA_IRQHandler+0x596>
 8001662:	e009      	b.n	8001678 <HAL_DMA_IRQHandler+0x294>
 8001664:	2000093c 	.word	0x2000093c
 8001668:	40020010 	.word	0x40020010
 800166c:	40020058 	.word	0x40020058
 8001670:	400204b8 	.word	0x400204b8
 8001674:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8001678:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800167c:	f8d8 3000 	ldr.w	r3, [r8]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	0352      	lsls	r2, r2, #13
 8001684:	f100 8195 	bmi.w	80019b2 <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	05d7      	lsls	r7, r2, #23
 800168c:	d403      	bmi.n	8001696 <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	f022 0208 	bic.w	r2, r2, #8
 8001694:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 8001696:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800169a:	b10b      	cbz	r3, 80016a0 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 800169c:	4640      	mov	r0, r8
 800169e:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80016a0:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 80016a4:	f001 011f 	and.w	r1, r1, #31
 80016a8:	2320      	movs	r3, #32
 80016aa:	fa03 f101 	lsl.w	r1, r3, r1
 80016ae:	4221      	tst	r1, r4
 80016b0:	d069      	beq.n	8001786 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80016b2:	f8d8 3000 	ldr.w	r3, [r8]
 80016b6:	4a97      	ldr	r2, [pc, #604]	; (8001914 <HAL_DMA_IRQHandler+0x530>)
 80016b8:	4c97      	ldr	r4, [pc, #604]	; (8001918 <HAL_DMA_IRQHandler+0x534>)
 80016ba:	42a3      	cmp	r3, r4
 80016bc:	bf18      	it	ne
 80016be:	4293      	cmpne	r3, r2
 80016c0:	f104 0418 	add.w	r4, r4, #24
 80016c4:	bf0c      	ite	eq
 80016c6:	2201      	moveq	r2, #1
 80016c8:	2200      	movne	r2, #0
 80016ca:	42a3      	cmp	r3, r4
 80016cc:	bf08      	it	eq
 80016ce:	f042 0201 	orreq.w	r2, r2, #1
 80016d2:	3418      	adds	r4, #24
 80016d4:	42a3      	cmp	r3, r4
 80016d6:	bf08      	it	eq
 80016d8:	f042 0201 	orreq.w	r2, r2, #1
 80016dc:	3418      	adds	r4, #24
 80016de:	42a3      	cmp	r3, r4
 80016e0:	bf08      	it	eq
 80016e2:	f042 0201 	orreq.w	r2, r2, #1
 80016e6:	3418      	adds	r4, #24
 80016e8:	42a3      	cmp	r3, r4
 80016ea:	bf08      	it	eq
 80016ec:	f042 0201 	orreq.w	r2, r2, #1
 80016f0:	3418      	adds	r4, #24
 80016f2:	42a3      	cmp	r3, r4
 80016f4:	bf08      	it	eq
 80016f6:	f042 0201 	orreq.w	r2, r2, #1
 80016fa:	3418      	adds	r4, #24
 80016fc:	42a3      	cmp	r3, r4
 80016fe:	bf08      	it	eq
 8001700:	f042 0201 	orreq.w	r2, r2, #1
 8001704:	f504 7456 	add.w	r4, r4, #856	; 0x358
 8001708:	42a3      	cmp	r3, r4
 800170a:	bf08      	it	eq
 800170c:	f042 0201 	orreq.w	r2, r2, #1
 8001710:	3418      	adds	r4, #24
 8001712:	42a3      	cmp	r3, r4
 8001714:	bf08      	it	eq
 8001716:	f042 0201 	orreq.w	r2, r2, #1
 800171a:	3418      	adds	r4, #24
 800171c:	42a3      	cmp	r3, r4
 800171e:	bf08      	it	eq
 8001720:	f042 0201 	orreq.w	r2, r2, #1
 8001724:	3418      	adds	r4, #24
 8001726:	42a3      	cmp	r3, r4
 8001728:	bf08      	it	eq
 800172a:	f042 0201 	orreq.w	r2, r2, #1
 800172e:	3418      	adds	r4, #24
 8001730:	42a3      	cmp	r3, r4
 8001732:	bf08      	it	eq
 8001734:	f042 0201 	orreq.w	r2, r2, #1
 8001738:	3418      	adds	r4, #24
 800173a:	42a3      	cmp	r3, r4
 800173c:	bf08      	it	eq
 800173e:	f042 0201 	orreq.w	r2, r2, #1
 8001742:	3418      	adds	r4, #24
 8001744:	42a3      	cmp	r3, r4
 8001746:	bf08      	it	eq
 8001748:	f042 0201 	orreq.w	r2, r2, #1
 800174c:	b91a      	cbnz	r2, 8001756 <HAL_DMA_IRQHandler+0x372>
 800174e:	4a73      	ldr	r2, [pc, #460]	; (800191c <HAL_DMA_IRQHandler+0x538>)
 8001750:	4293      	cmp	r3, r2
 8001752:	f040 80da 	bne.w	800190a <HAL_DMA_IRQHandler+0x526>
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	06dc      	lsls	r4, r3, #27
 800175a:	d514      	bpl.n	8001786 <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800175c:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800175e:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 8001762:	2b04      	cmp	r3, #4
 8001764:	f000 80de 	beq.w	8001924 <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8001768:	f8d8 3000 	ldr.w	r3, [r8]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	0352      	lsls	r2, r2, #13
 8001770:	f140 8129 	bpl.w	80019c6 <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	031b      	lsls	r3, r3, #12
 8001778:	f140 8134 	bpl.w	80019e4 <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 800177c:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001780:	b10b      	cbz	r3, 8001786 <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 8001782:	4640      	mov	r0, r8
 8001784:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001786:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800178a:	2b00      	cmp	r3, #0
 800178c:	f000 80f2 	beq.w	8001974 <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8001790:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8001794:	07df      	lsls	r7, r3, #31
 8001796:	d521      	bpl.n	80017dc <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 8001798:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 800179c:	2104      	movs	r1, #4
 800179e:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 80017a2:	6813      	ldr	r3, [r2, #0]
 80017a4:	f023 0301 	bic.w	r3, r3, #1
 80017a8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017aa:	4b5d      	ldr	r3, [pc, #372]	; (8001920 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80017ac:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017b0:	fba3 3606 	umull	r3, r6, r3, r6
 80017b4:	0ab6      	lsrs	r6, r6, #10
 80017b6:	e002      	b.n	80017be <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80017b8:	6813      	ldr	r3, [r2, #0]
 80017ba:	07dd      	lsls	r5, r3, #31
 80017bc:	d504      	bpl.n	80017c8 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 80017be:	9b01      	ldr	r3, [sp, #4]
 80017c0:	3301      	adds	r3, #1
 80017c2:	42b3      	cmp	r3, r6
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	d9f7      	bls.n	80017b8 <HAL_DMA_IRQHandler+0x3d4>
        __HAL_UNLOCK(hdma);
 80017c8:	2300      	movs	r3, #0
 80017ca:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80017ce:	6813      	ldr	r3, [r2, #0]
 80017d0:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 80017d2:	bf4c      	ite	mi
 80017d4:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 80017d6:	2301      	movpl	r3, #1
 80017d8:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      if(hdma->XferErrorCallback != NULL)
 80017dc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	f000 80c7 	beq.w	8001974 <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 80017e6:	4640      	mov	r0, r8
}
 80017e8:	b002      	add	sp, #8
 80017ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 80017ee:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	0752      	lsls	r2, r2, #29
 80017f4:	d514      	bpl.n	8001820 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	f022 0204 	bic.w	r2, r2, #4
 80017fc:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80017fe:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8001802:	f003 021f 	and.w	r2, r3, #31
 8001806:	2308      	movs	r3, #8
 8001808:	4093      	lsls	r3, r2
 800180a:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800180c:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001810:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001814:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001818:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800181c:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001820:	fa24 f301 	lsr.w	r3, r4, r1
 8001824:	07df      	lsls	r7, r3, #31
 8001826:	f57f ae54 	bpl.w	80014d2 <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800182a:	f8d8 2000 	ldr.w	r2, [r8]
 800182e:	4f39      	ldr	r7, [pc, #228]	; (8001914 <HAL_DMA_IRQHandler+0x530>)
 8001830:	4b39      	ldr	r3, [pc, #228]	; (8001918 <HAL_DMA_IRQHandler+0x534>)
 8001832:	429a      	cmp	r2, r3
 8001834:	bf18      	it	ne
 8001836:	42ba      	cmpne	r2, r7
 8001838:	f103 0318 	add.w	r3, r3, #24
 800183c:	bf0c      	ite	eq
 800183e:	2701      	moveq	r7, #1
 8001840:	2700      	movne	r7, #0
 8001842:	429a      	cmp	r2, r3
 8001844:	bf08      	it	eq
 8001846:	f047 0701 	orreq.w	r7, r7, #1
 800184a:	3318      	adds	r3, #24
 800184c:	429a      	cmp	r2, r3
 800184e:	bf08      	it	eq
 8001850:	f047 0701 	orreq.w	r7, r7, #1
 8001854:	3318      	adds	r3, #24
 8001856:	429a      	cmp	r2, r3
 8001858:	bf08      	it	eq
 800185a:	f047 0701 	orreq.w	r7, r7, #1
 800185e:	3318      	adds	r3, #24
 8001860:	429a      	cmp	r2, r3
 8001862:	bf08      	it	eq
 8001864:	f047 0701 	orreq.w	r7, r7, #1
 8001868:	3318      	adds	r3, #24
 800186a:	429a      	cmp	r2, r3
 800186c:	bf08      	it	eq
 800186e:	f047 0701 	orreq.w	r7, r7, #1
 8001872:	3318      	adds	r3, #24
 8001874:	429a      	cmp	r2, r3
 8001876:	bf08      	it	eq
 8001878:	f047 0701 	orreq.w	r7, r7, #1
 800187c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8001880:	429a      	cmp	r2, r3
 8001882:	bf08      	it	eq
 8001884:	f047 0701 	orreq.w	r7, r7, #1
 8001888:	3318      	adds	r3, #24
 800188a:	429a      	cmp	r2, r3
 800188c:	bf08      	it	eq
 800188e:	f047 0701 	orreq.w	r7, r7, #1
 8001892:	3318      	adds	r3, #24
 8001894:	429a      	cmp	r2, r3
 8001896:	bf08      	it	eq
 8001898:	f047 0701 	orreq.w	r7, r7, #1
 800189c:	3318      	adds	r3, #24
 800189e:	429a      	cmp	r2, r3
 80018a0:	bf08      	it	eq
 80018a2:	f047 0701 	orreq.w	r7, r7, #1
 80018a6:	3318      	adds	r3, #24
 80018a8:	429a      	cmp	r2, r3
 80018aa:	bf08      	it	eq
 80018ac:	f047 0701 	orreq.w	r7, r7, #1
 80018b0:	3318      	adds	r3, #24
 80018b2:	429a      	cmp	r2, r3
 80018b4:	bf08      	it	eq
 80018b6:	f047 0701 	orreq.w	r7, r7, #1
 80018ba:	3318      	adds	r3, #24
 80018bc:	429a      	cmp	r2, r3
 80018be:	bf08      	it	eq
 80018c0:	f047 0701 	orreq.w	r7, r7, #1
 80018c4:	4613      	mov	r3, r2
 80018c6:	2f00      	cmp	r7, #0
 80018c8:	f47f adf1 	bne.w	80014ae <HAL_DMA_IRQHandler+0xca>
 80018cc:	4f13      	ldr	r7, [pc, #76]	; (800191c <HAL_DMA_IRQHandler+0x538>)
 80018ce:	42ba      	cmp	r2, r7
 80018d0:	f43f aded 	beq.w	80014ae <HAL_DMA_IRQHandler+0xca>
 80018d4:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018d6:	2304      	movs	r3, #4
 80018d8:	408b      	lsls	r3, r1
 80018da:	4223      	tst	r3, r4
 80018dc:	f040 80ca 	bne.w	8001a74 <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018e0:	f04f 0c10 	mov.w	ip, #16
 80018e4:	fa0c fc01 	lsl.w	ip, ip, r1
 80018e8:	ea14 0f0c 	tst.w	r4, ip
 80018ec:	f43f aedc 	beq.w	80016a8 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80018f0:	6813      	ldr	r3, [r2, #0]
 80018f2:	0759      	lsls	r1, r3, #29
 80018f4:	f53f aec0 	bmi.w	8001678 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80018f8:	f000 0e1f 	and.w	lr, r0, #31
 80018fc:	2120      	movs	r1, #32
 80018fe:	fa01 f10e 	lsl.w	r1, r1, lr
 8001902:	420c      	tst	r4, r1
 8001904:	f43f af3f 	beq.w	8001786 <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8001908:	4613      	mov	r3, r2
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	0798      	lsls	r0, r3, #30
 800190e:	f57f af3a 	bpl.w	8001786 <HAL_DMA_IRQHandler+0x3a2>
 8001912:	e723      	b.n	800175c <HAL_DMA_IRQHandler+0x378>
 8001914:	40020010 	.word	0x40020010
 8001918:	40020028 	.word	0x40020028
 800191c:	400204b8 	.word	0x400204b8
 8001920:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001924:	f8d8 2000 	ldr.w	r2, [r8]
 8001928:	6813      	ldr	r3, [r2, #0]
 800192a:	f023 0316 	bic.w	r3, r3, #22
 800192e:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001930:	f8d8 2000 	ldr.w	r2, [r8]
 8001934:	6953      	ldr	r3, [r2, #20]
 8001936:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800193a:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800193c:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8001940:	2b00      	cmp	r3, #0
 8001942:	d055      	beq.n	80019f0 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8001944:	f8d8 2000 	ldr.w	r2, [r8]
 8001948:	6813      	ldr	r3, [r2, #0]
 800194a:	f023 0308 	bic.w	r3, r3, #8
 800194e:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001950:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 8001954:	233f      	movs	r3, #63	; 0x3f
          __HAL_UNLOCK(hdma);
 8001956:	2100      	movs	r1, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001958:	f002 021f 	and.w	r2, r2, #31
 800195c:	4093      	lsls	r3, r2
          hdma->State = HAL_DMA_STATE_READY;
 800195e:	2201      	movs	r2, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001960:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 8001962:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          __HAL_UNLOCK(hdma);
 8001966:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 800196a:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          if(hdma->XferAbortCallback != NULL)
 800196e:	2b00      	cmp	r3, #0
 8001970:	f47f af39 	bne.w	80017e6 <HAL_DMA_IRQHandler+0x402>
}
 8001974:	b002      	add	sp, #8
 8001976:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800197a:	2220      	movs	r2, #32
 800197c:	fa02 f101 	lsl.w	r1, r2, r1
 8001980:	420c      	tst	r4, r1
 8001982:	f47f aee8 	bne.w	8001756 <HAL_DMA_IRQHandler+0x372>
 8001986:	e6fe      	b.n	8001786 <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001988:	f04f 0c04 	mov.w	ip, #4
 800198c:	fa0c fc01 	lsl.w	ip, ip, r1
 8001990:	ea14 0f0c 	tst.w	r4, ip
 8001994:	f43f ae07 	beq.w	80015a6 <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	0797      	lsls	r7, r2, #30
 800199c:	f53f adf7 	bmi.w	800158e <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80019a0:	f04f 0c10 	mov.w	ip, #16
 80019a4:	fa0c fc01 	lsl.w	ip, ip, r1
 80019a8:	ea14 0f0c 	tst.w	r4, ip
 80019ac:	f47f ae55 	bne.w	800165a <HAL_DMA_IRQHandler+0x276>
 80019b0:	e67a      	b.n	80016a8 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	031b      	lsls	r3, r3, #12
 80019b6:	f57f ae6e 	bpl.w	8001696 <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 80019ba:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f47f ae6c 	bne.w	800169c <HAL_DMA_IRQHandler+0x2b8>
 80019c4:	e66c      	b.n	80016a0 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80019cc:	f47f aed6 	bne.w	800177c <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80019d0:	6819      	ldr	r1, [r3, #0]
 80019d2:	f021 0110 	bic.w	r1, r1, #16
 80019d6:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 80019d8:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 80019da:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 80019de:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
 80019e2:	e6cb      	b.n	800177c <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 80019e4:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f aeca 	bne.w	8001782 <HAL_DMA_IRQHandler+0x39e>
 80019ee:	e6ca      	b.n	8001786 <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80019f0:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d1a5      	bne.n	8001944 <HAL_DMA_IRQHandler+0x560>
 80019f8:	e7aa      	b.n	8001950 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80019fa:	4aa0      	ldr	r2, [pc, #640]	; (8001c7c <HAL_DMA_IRQHandler+0x898>)
 80019fc:	4ca0      	ldr	r4, [pc, #640]	; (8001c80 <HAL_DMA_IRQHandler+0x89c>)
 80019fe:	42a3      	cmp	r3, r4
 8001a00:	bf18      	it	ne
 8001a02:	4293      	cmpne	r3, r2
 8001a04:	f104 0414 	add.w	r4, r4, #20
 8001a08:	bf0c      	ite	eq
 8001a0a:	2201      	moveq	r2, #1
 8001a0c:	2200      	movne	r2, #0
 8001a0e:	42a3      	cmp	r3, r4
 8001a10:	bf08      	it	eq
 8001a12:	f042 0201 	orreq.w	r2, r2, #1
 8001a16:	3414      	adds	r4, #20
 8001a18:	42a3      	cmp	r3, r4
 8001a1a:	bf08      	it	eq
 8001a1c:	f042 0201 	orreq.w	r2, r2, #1
 8001a20:	3414      	adds	r4, #20
 8001a22:	42a3      	cmp	r3, r4
 8001a24:	bf08      	it	eq
 8001a26:	f042 0201 	orreq.w	r2, r2, #1
 8001a2a:	3414      	adds	r4, #20
 8001a2c:	42a3      	cmp	r3, r4
 8001a2e:	bf08      	it	eq
 8001a30:	f042 0201 	orreq.w	r2, r2, #1
 8001a34:	3414      	adds	r4, #20
 8001a36:	42a3      	cmp	r3, r4
 8001a38:	bf08      	it	eq
 8001a3a:	f042 0201 	orreq.w	r2, r2, #1
 8001a3e:	b912      	cbnz	r2, 8001a46 <HAL_DMA_IRQHandler+0x662>
 8001a40:	4a90      	ldr	r2, [pc, #576]	; (8001c84 <HAL_DMA_IRQHandler+0x8a0>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d196      	bne.n	8001974 <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001a46:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 8001a4a:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8001a4c:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8001a4e:	f004 041f 	and.w	r4, r4, #31
 8001a52:	40a6      	lsls	r6, r4
 8001a54:	420e      	tst	r6, r1
 8001a56:	d019      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x6a8>
 8001a58:	0750      	lsls	r0, r2, #29
 8001a5a:	d517      	bpl.n	8001a8c <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a5c:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8001a5e:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a60:	d549      	bpl.n	8001af6 <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001a62:	03d2      	lsls	r2, r2, #15
 8001a64:	f100 809f 	bmi.w	8001ba6 <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a68:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f aeba 	bne.w	80017e6 <HAL_DMA_IRQHandler+0x402>
 8001a72:	e77f      	b.n	8001974 <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a74:	f000 011f 	and.w	r1, r0, #31
 8001a78:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8001a7c:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001a7e:	fa0c fc01 	lsl.w	ip, ip, r1
 8001a82:	ea14 0f0c 	tst.w	r4, ip
 8001a86:	f47f af33 	bne.w	80018f0 <HAL_DMA_IRQHandler+0x50c>
 8001a8a:	e60d      	b.n	80016a8 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8001a8c:	2602      	movs	r6, #2
 8001a8e:	40a6      	lsls	r6, r4
 8001a90:	420e      	tst	r6, r1
 8001a92:	d00e      	beq.n	8001ab2 <HAL_DMA_IRQHandler+0x6ce>
 8001a94:	0797      	lsls	r7, r2, #30
 8001a96:	d50c      	bpl.n	8001ab2 <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8001a98:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8001a9a:	0415      	lsls	r5, r2, #16
 8001a9c:	f140 8089 	bpl.w	8001bb2 <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8001aa0:	03d4      	lsls	r4, r2, #15
 8001aa2:	f100 80e4 	bmi.w	8001c6e <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 8001aa6:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	f47f ae9b 	bne.w	80017e6 <HAL_DMA_IRQHandler+0x402>
 8001ab0:	e760      	b.n	8001974 <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8001ab2:	2608      	movs	r6, #8
 8001ab4:	fa06 f404 	lsl.w	r4, r6, r4
 8001ab8:	420c      	tst	r4, r1
 8001aba:	f43f af5b 	beq.w	8001974 <HAL_DMA_IRQHandler+0x590>
 8001abe:	0711      	lsls	r1, r2, #28
 8001ac0:	f57f af58 	bpl.w	8001974 <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac4:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001ac6:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ac8:	f021 010e 	bic.w	r1, r1, #14
 8001acc:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 8001ace:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8001ad0:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 8001ad4:	f003 031f 	and.w	r3, r3, #31
 8001ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8001adc:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 8001ade:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ae2:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 8001ae6:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001aea:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	f47f ae79 	bne.w	80017e6 <HAL_DMA_IRQHandler+0x402>
 8001af4:	e73e      	b.n	8001974 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001af6:	0693      	lsls	r3, r2, #26
 8001af8:	d455      	bmi.n	8001ba6 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001afa:	f8d8 2000 	ldr.w	r2, [r8]
 8001afe:	4b62      	ldr	r3, [pc, #392]	; (8001c88 <HAL_DMA_IRQHandler+0x8a4>)
 8001b00:	4c62      	ldr	r4, [pc, #392]	; (8001c8c <HAL_DMA_IRQHandler+0x8a8>)
 8001b02:	4963      	ldr	r1, [pc, #396]	; (8001c90 <HAL_DMA_IRQHandler+0x8ac>)
 8001b04:	42a2      	cmp	r2, r4
 8001b06:	bf18      	it	ne
 8001b08:	429a      	cmpne	r2, r3
 8001b0a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8001b0e:	bf0c      	ite	eq
 8001b10:	2301      	moveq	r3, #1
 8001b12:	2300      	movne	r3, #0
 8001b14:	428a      	cmp	r2, r1
 8001b16:	bf08      	it	eq
 8001b18:	f043 0301 	orreq.w	r3, r3, #1
 8001b1c:	3130      	adds	r1, #48	; 0x30
 8001b1e:	42a2      	cmp	r2, r4
 8001b20:	bf08      	it	eq
 8001b22:	f043 0301 	orreq.w	r3, r3, #1
 8001b26:	3430      	adds	r4, #48	; 0x30
 8001b28:	428a      	cmp	r2, r1
 8001b2a:	bf08      	it	eq
 8001b2c:	f043 0301 	orreq.w	r3, r3, #1
 8001b30:	3130      	adds	r1, #48	; 0x30
 8001b32:	42a2      	cmp	r2, r4
 8001b34:	bf08      	it	eq
 8001b36:	f043 0301 	orreq.w	r3, r3, #1
 8001b3a:	3430      	adds	r4, #48	; 0x30
 8001b3c:	428a      	cmp	r2, r1
 8001b3e:	bf08      	it	eq
 8001b40:	f043 0301 	orreq.w	r3, r3, #1
 8001b44:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001b48:	42a2      	cmp	r2, r4
 8001b4a:	bf08      	it	eq
 8001b4c:	f043 0301 	orreq.w	r3, r3, #1
 8001b50:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001b54:	428a      	cmp	r2, r1
 8001b56:	bf08      	it	eq
 8001b58:	f043 0301 	orreq.w	r3, r3, #1
 8001b5c:	3130      	adds	r1, #48	; 0x30
 8001b5e:	42a2      	cmp	r2, r4
 8001b60:	bf08      	it	eq
 8001b62:	f043 0301 	orreq.w	r3, r3, #1
 8001b66:	3430      	adds	r4, #48	; 0x30
 8001b68:	428a      	cmp	r2, r1
 8001b6a:	bf08      	it	eq
 8001b6c:	f043 0301 	orreq.w	r3, r3, #1
 8001b70:	3130      	adds	r1, #48	; 0x30
 8001b72:	42a2      	cmp	r2, r4
 8001b74:	bf08      	it	eq
 8001b76:	f043 0301 	orreq.w	r3, r3, #1
 8001b7a:	3430      	adds	r4, #48	; 0x30
 8001b7c:	428a      	cmp	r2, r1
 8001b7e:	bf08      	it	eq
 8001b80:	f043 0301 	orreq.w	r3, r3, #1
 8001b84:	3130      	adds	r1, #48	; 0x30
 8001b86:	42a2      	cmp	r2, r4
 8001b88:	bf08      	it	eq
 8001b8a:	f043 0301 	orreq.w	r3, r3, #1
 8001b8e:	428a      	cmp	r2, r1
 8001b90:	bf08      	it	eq
 8001b92:	f043 0301 	orreq.w	r3, r3, #1
 8001b96:	b913      	cbnz	r3, 8001b9e <HAL_DMA_IRQHandler+0x7ba>
 8001b98:	4b3e      	ldr	r3, [pc, #248]	; (8001c94 <HAL_DMA_IRQHandler+0x8b0>)
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d17c      	bne.n	8001c98 <HAL_DMA_IRQHandler+0x8b4>
 8001b9e:	6813      	ldr	r3, [r2, #0]
 8001ba0:	f023 0308 	bic.w	r3, r3, #8
 8001ba4:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 8001ba6:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	f47f ae1b 	bne.w	80017e6 <HAL_DMA_IRQHandler+0x402>
 8001bb0:	e6e0      	b.n	8001974 <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8001bb2:	0690      	lsls	r0, r2, #26
 8001bb4:	d45b      	bmi.n	8001c6e <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001bb6:	f8d8 2000 	ldr.w	r2, [r8]
 8001bba:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_DMA_IRQHandler+0x8a4>)
 8001bbc:	4c33      	ldr	r4, [pc, #204]	; (8001c8c <HAL_DMA_IRQHandler+0x8a8>)
 8001bbe:	4934      	ldr	r1, [pc, #208]	; (8001c90 <HAL_DMA_IRQHandler+0x8ac>)
 8001bc0:	42a2      	cmp	r2, r4
 8001bc2:	bf18      	it	ne
 8001bc4:	429a      	cmpne	r2, r3
 8001bc6:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8001bca:	bf0c      	ite	eq
 8001bcc:	2301      	moveq	r3, #1
 8001bce:	2300      	movne	r3, #0
 8001bd0:	428a      	cmp	r2, r1
 8001bd2:	bf08      	it	eq
 8001bd4:	f043 0301 	orreq.w	r3, r3, #1
 8001bd8:	3130      	adds	r1, #48	; 0x30
 8001bda:	42a2      	cmp	r2, r4
 8001bdc:	bf08      	it	eq
 8001bde:	f043 0301 	orreq.w	r3, r3, #1
 8001be2:	3430      	adds	r4, #48	; 0x30
 8001be4:	428a      	cmp	r2, r1
 8001be6:	bf08      	it	eq
 8001be8:	f043 0301 	orreq.w	r3, r3, #1
 8001bec:	3130      	adds	r1, #48	; 0x30
 8001bee:	42a2      	cmp	r2, r4
 8001bf0:	bf08      	it	eq
 8001bf2:	f043 0301 	orreq.w	r3, r3, #1
 8001bf6:	3430      	adds	r4, #48	; 0x30
 8001bf8:	428a      	cmp	r2, r1
 8001bfa:	bf08      	it	eq
 8001bfc:	f043 0301 	orreq.w	r3, r3, #1
 8001c00:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8001c04:	42a2      	cmp	r2, r4
 8001c06:	bf08      	it	eq
 8001c08:	f043 0301 	orreq.w	r3, r3, #1
 8001c0c:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8001c10:	428a      	cmp	r2, r1
 8001c12:	bf08      	it	eq
 8001c14:	f043 0301 	orreq.w	r3, r3, #1
 8001c18:	3130      	adds	r1, #48	; 0x30
 8001c1a:	42a2      	cmp	r2, r4
 8001c1c:	bf08      	it	eq
 8001c1e:	f043 0301 	orreq.w	r3, r3, #1
 8001c22:	3430      	adds	r4, #48	; 0x30
 8001c24:	428a      	cmp	r2, r1
 8001c26:	bf08      	it	eq
 8001c28:	f043 0301 	orreq.w	r3, r3, #1
 8001c2c:	3130      	adds	r1, #48	; 0x30
 8001c2e:	42a2      	cmp	r2, r4
 8001c30:	bf08      	it	eq
 8001c32:	f043 0301 	orreq.w	r3, r3, #1
 8001c36:	3430      	adds	r4, #48	; 0x30
 8001c38:	428a      	cmp	r2, r1
 8001c3a:	bf08      	it	eq
 8001c3c:	f043 0301 	orreq.w	r3, r3, #1
 8001c40:	3130      	adds	r1, #48	; 0x30
 8001c42:	42a2      	cmp	r2, r4
 8001c44:	bf08      	it	eq
 8001c46:	f043 0301 	orreq.w	r3, r3, #1
 8001c4a:	428a      	cmp	r2, r1
 8001c4c:	bf08      	it	eq
 8001c4e:	f043 0301 	orreq.w	r3, r3, #1
 8001c52:	b913      	cbnz	r3, 8001c5a <HAL_DMA_IRQHandler+0x876>
 8001c54:	4b0f      	ldr	r3, [pc, #60]	; (8001c94 <HAL_DMA_IRQHandler+0x8b0>)
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d123      	bne.n	8001ca2 <HAL_DMA_IRQHandler+0x8be>
 8001c5a:	6813      	ldr	r3, [r2, #0]
 8001c5c:	f023 0314 	bic.w	r3, r3, #20
 8001c60:	6013      	str	r3, [r2, #0]
          __HAL_UNLOCK(hdma);
 8001c62:	2200      	movs	r2, #0
          hdma->State = HAL_DMA_STATE_READY;
 8001c64:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8001c66:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001c6a:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001c6e:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f47f adb7 	bne.w	80017e6 <HAL_DMA_IRQHandler+0x402>
 8001c78:	e67c      	b.n	8001974 <HAL_DMA_IRQHandler+0x590>
 8001c7a:	bf00      	nop
 8001c7c:	58025408 	.word	0x58025408
 8001c80:	5802541c 	.word	0x5802541c
 8001c84:	58025494 	.word	0x58025494
 8001c88:	40020010 	.word	0x40020010
 8001c8c:	40020028 	.word	0x40020028
 8001c90:	40020040 	.word	0x40020040
 8001c94:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c98:	6813      	ldr	r3, [r2, #0]
 8001c9a:	f023 0304 	bic.w	r3, r3, #4
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	e781      	b.n	8001ba6 <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001ca2:	6813      	ldr	r3, [r2, #0]
 8001ca4:	f023 030a 	bic.w	r3, r3, #10
 8001ca8:	6013      	str	r3, [r2, #0]
 8001caa:	e7da      	b.n	8001c62 <HAL_DMA_IRQHandler+0x87e>

08001cac <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8001cac:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cb4:	f8d1 e000 	ldr.w	lr, [r1]
{
 8001cb8:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001cba:	f1be 0f00 	cmp.w	lr, #0
 8001cbe:	f000 80fa 	beq.w	8001eb6 <HAL_GPIO_Init+0x206>
 8001cc2:	2200      	movs	r2, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc4:	4c9b      	ldr	r4, [pc, #620]	; (8001f34 <HAL_GPIO_Init+0x284>)
 8001cc6:	4d9c      	ldr	r5, [pc, #624]	; (8001f38 <HAL_GPIO_Init+0x288>)
  uint32_t position = 0x00U;
 8001cc8:	4613      	mov	r3, r2

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cca:	4e9c      	ldr	r6, [pc, #624]	; (8001f3c <HAL_GPIO_Init+0x28c>)
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ccc:	f04f 0901 	mov.w	r9, #1
 8001cd0:	fa09 f903 	lsl.w	r9, r9, r3
    if (iocurrent != 0x00U)
 8001cd4:	ea19 080e 	ands.w	r8, r9, lr
 8001cd8:	f000 80e7 	beq.w	8001eaa <HAL_GPIO_Init+0x1fa>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cdc:	684f      	ldr	r7, [r1, #4]
 8001cde:	f027 0c10 	bic.w	ip, r7, #16
 8001ce2:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ce6:	f1bc 0f01 	cmp.w	ip, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cea:	f04f 0c03 	mov.w	ip, #3
 8001cee:	fa0c fc02 	lsl.w	ip, ip, r2
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf2:	f200 80e3 	bhi.w	8001ebc <HAL_GPIO_Init+0x20c>
        temp = GPIOx->OSPEEDR;
 8001cf6:	f8d0 a008 	ldr.w	sl, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cfa:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cfc:	ea2a 0a0c 	bic.w	sl, sl, ip
 8001d00:	ea6f 0c0c 	mvn.w	ip, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d04:	fa07 fe02 	lsl.w	lr, r7, r2
 8001d08:	ea4e 0e0a 	orr.w	lr, lr, sl
        GPIOx->OSPEEDR = temp;
 8001d0c:	f8c0 e008 	str.w	lr, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d10:	684f      	ldr	r7, [r1, #4]
        temp = GPIOx->OTYPER;
 8001d12:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d16:	f3c7 1e00 	ubfx	lr, r7, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d1a:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d1e:	fa0e fe03 	lsl.w	lr, lr, r3
 8001d22:	ea4e 0909 	orr.w	r9, lr, r9
        GPIOx->OTYPER = temp;
 8001d26:	f8c0 9004 	str.w	r9, [r0, #4]
      temp = GPIOx->PUPDR;
 8001d2a:	f8d0 900c 	ldr.w	r9, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2e:	688f      	ldr	r7, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d30:	ea09 090c 	and.w	r9, r9, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d34:	fa07 fe02 	lsl.w	lr, r7, r2
 8001d38:	ea4e 0e09 	orr.w	lr, lr, r9
      GPIOx->PUPDR = temp;
 8001d3c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d40:	f8d1 e004 	ldr.w	lr, [r1, #4]
 8001d44:	f02e 0910 	bic.w	r9, lr, #16
 8001d48:	f1b9 0f02 	cmp.w	r9, #2
 8001d4c:	d118      	bne.n	8001d80 <HAL_GPIO_Init+0xd0>
        temp = GPIOx->AFR[position >> 3U];
 8001d4e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d52:	f003 0e07 	and.w	lr, r3, #7
 8001d56:	f04f 0a0f 	mov.w	sl, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d5a:	690f      	ldr	r7, [r1, #16]
 8001d5c:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d60:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8001d64:	f8d9 b020 	ldr.w	fp, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d68:	fa0a fa0e 	lsl.w	sl, sl, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d6c:	fa07 fe0e 	lsl.w	lr, r7, lr
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d70:	ea2b 0a0a 	bic.w	sl, fp, sl
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d74:	ea4e 0e0a 	orr.w	lr, lr, sl
        GPIOx->AFR[position >> 3U] = temp;
 8001d78:	f8c9 e020 	str.w	lr, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	f8d1 e004 	ldr.w	lr, [r1, #4]
      temp = GPIOx->MODER;
 8001d80:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d84:	f00e 0e03 	and.w	lr, lr, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d88:	ea09 0c0c 	and.w	ip, r9, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d8c:	fa0e fe02 	lsl.w	lr, lr, r2
 8001d90:	ea4e 0c0c 	orr.w	ip, lr, ip
      GPIOx->MODER = temp;
 8001d94:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d98:	684f      	ldr	r7, [r1, #4]
 8001d9a:	00ff      	lsls	r7, r7, #3
 8001d9c:	f140 8083 	bpl.w	8001ea6 <HAL_GPIO_Init+0x1f6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da0:	f8d4 c0f4 	ldr.w	ip, [r4, #244]	; 0xf4
 8001da4:	f023 0e03 	bic.w	lr, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001da8:	f003 0903 	and.w	r9, r3, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dac:	42b0      	cmp	r0, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dae:	f04c 0c02 	orr.w	ip, ip, #2
 8001db2:	44ae      	add	lr, r5
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001db4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db8:	f8c4 c0f4 	str.w	ip, [r4, #244]	; 0xf4
 8001dbc:	f8d4 c0f4 	ldr.w	ip, [r4, #244]	; 0xf4
 8001dc0:	f00c 0c02 	and.w	ip, ip, #2
 8001dc4:	f8cd c004 	str.w	ip, [sp, #4]
 8001dc8:	f8dd c004 	ldr.w	ip, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dcc:	f04f 0c0f 	mov.w	ip, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 8001dd0:	f8de a008 	ldr.w	sl, [lr, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dd4:	fa0c fc09 	lsl.w	ip, ip, r9
 8001dd8:	ea2a 0c0c 	bic.w	ip, sl, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ddc:	d029      	beq.n	8001e32 <HAL_GPIO_Init+0x182>
 8001dde:	4f58      	ldr	r7, [pc, #352]	; (8001f40 <HAL_GPIO_Init+0x290>)
 8001de0:	42b8      	cmp	r0, r7
 8001de2:	d075      	beq.n	8001ed0 <HAL_GPIO_Init+0x220>
 8001de4:	4f57      	ldr	r7, [pc, #348]	; (8001f44 <HAL_GPIO_Init+0x294>)
 8001de6:	42b8      	cmp	r0, r7
 8001de8:	d079      	beq.n	8001ede <HAL_GPIO_Init+0x22e>
 8001dea:	4f57      	ldr	r7, [pc, #348]	; (8001f48 <HAL_GPIO_Init+0x298>)
 8001dec:	42b8      	cmp	r0, r7
 8001dee:	d068      	beq.n	8001ec2 <HAL_GPIO_Init+0x212>
 8001df0:	4f56      	ldr	r7, [pc, #344]	; (8001f4c <HAL_GPIO_Init+0x29c>)
 8001df2:	42b8      	cmp	r0, r7
 8001df4:	f000 8081 	beq.w	8001efa <HAL_GPIO_Init+0x24a>
 8001df8:	4f55      	ldr	r7, [pc, #340]	; (8001f50 <HAL_GPIO_Init+0x2a0>)
 8001dfa:	42b8      	cmp	r0, r7
 8001dfc:	f000 8084 	beq.w	8001f08 <HAL_GPIO_Init+0x258>
 8001e00:	4f54      	ldr	r7, [pc, #336]	; (8001f54 <HAL_GPIO_Init+0x2a4>)
 8001e02:	42b8      	cmp	r0, r7
 8001e04:	d072      	beq.n	8001eec <HAL_GPIO_Init+0x23c>
 8001e06:	f8df a150 	ldr.w	sl, [pc, #336]	; 8001f58 <HAL_GPIO_Init+0x2a8>
 8001e0a:	4550      	cmp	r0, sl
 8001e0c:	f000 8083 	beq.w	8001f16 <HAL_GPIO_Init+0x266>
 8001e10:	f8df a148 	ldr.w	sl, [pc, #328]	; 8001f5c <HAL_GPIO_Init+0x2ac>
 8001e14:	4550      	cmp	r0, sl
 8001e16:	f000 8085 	beq.w	8001f24 <HAL_GPIO_Init+0x274>
 8001e1a:	f8df a144 	ldr.w	sl, [pc, #324]	; 8001f60 <HAL_GPIO_Init+0x2b0>
 8001e1e:	4550      	cmp	r0, sl
 8001e20:	bf0c      	ite	eq
 8001e22:	f04f 0a09 	moveq.w	sl, #9
 8001e26:	f04f 0a0a 	movne.w	sl, #10
 8001e2a:	fa0a f909 	lsl.w	r9, sl, r9
 8001e2e:	ea4c 0c09 	orr.w	ip, ip, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e32:	f8ce c008 	str.w	ip, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e36:	f04f 4cb0 	mov.w	ip, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e3a:	684f      	ldr	r7, [r1, #4]
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e3c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        temp = EXTI_CurrentCPU->IMR1;
 8001e40:	f8dc e080 	ldr.w	lr, [ip, #128]	; 0x80
        temp &= ~(iocurrent);
 8001e44:	ea6f 0c08 	mvn.w	ip, r8
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e48:	03ff      	lsls	r7, r7, #15
        temp &= ~(iocurrent);
 8001e4a:	bf54      	ite	pl
 8001e4c:	ea0c 0e0e 	andpl.w	lr, ip, lr
          temp |= iocurrent;
 8001e50:	ea48 0e0e 	orrmi.w	lr, r8, lr
        EXTI_CurrentCPU->IMR1 = temp;
 8001e54:	f8c9 e080 	str.w	lr, [r9, #128]	; 0x80

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e58:	684f      	ldr	r7, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8001e5a:	f8d9 e084 	ldr.w	lr, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e5e:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e62:	03bf      	lsls	r7, r7, #14
        temp &= ~(iocurrent);
 8001e64:	bf54      	ite	pl
 8001e66:	ea0c 0e0e 	andpl.w	lr, ip, lr
          temp |= iocurrent;
 8001e6a:	ea48 0e0e 	orrmi.w	lr, r8, lr
        EXTI_CurrentCPU->EMR1 = temp;
 8001e6e:	f8c9 e084 	str.w	lr, [r9, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e72:	684f      	ldr	r7, [r1, #4]
        temp = EXTI->RTSR1;
 8001e74:	f8d9 e000 	ldr.w	lr, [r9]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 8001e78:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e7c:	02ff      	lsls	r7, r7, #11
        temp &= ~(iocurrent);
 8001e7e:	bf54      	ite	pl
 8001e80:	ea0c 0e0e 	andpl.w	lr, ip, lr
          temp |= iocurrent;
 8001e84:	ea48 0e0e 	orrmi.w	lr, r8, lr
        EXTI->RTSR1 = temp;
 8001e88:	f8c9 e000 	str.w	lr, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e8c:	684f      	ldr	r7, [r1, #4]
        temp = EXTI->FTSR1;
 8001e8e:	f8d9 e004 	ldr.w	lr, [r9, #4]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e92:	02bf      	lsls	r7, r7, #10
        temp &= ~(iocurrent);
 8001e94:	bf54      	ite	pl
 8001e96:	ea0c 0e0e 	andpl.w	lr, ip, lr
        {
          temp |= iocurrent;
 8001e9a:	ea48 0e0e 	orrmi.w	lr, r8, lr
        }
        EXTI->FTSR1 = temp;
 8001e9e:	f04f 4cb0 	mov.w	ip, #1476395008	; 0x58000000
 8001ea2:	f8cc e004 	str.w	lr, [ip, #4]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ea6:	f8d1 e000 	ldr.w	lr, [r1]
      }
    }

    position++;
 8001eaa:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eac:	3202      	adds	r2, #2
 8001eae:	fa3e f703 	lsrs.w	r7, lr, r3
 8001eb2:	f47f af0b 	bne.w	8001ccc <HAL_GPIO_Init+0x1c>
  }
}
 8001eb6:	b003      	add	sp, #12
 8001eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ebc:	ea6f 0c0c 	mvn.w	ip, ip
 8001ec0:	e733      	b.n	8001d2a <HAL_GPIO_Init+0x7a>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ec2:	f04f 0a03 	mov.w	sl, #3
 8001ec6:	fa0a f909 	lsl.w	r9, sl, r9
 8001eca:	ea4c 0c09 	orr.w	ip, ip, r9
 8001ece:	e7b0      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001ed0:	f04f 0a01 	mov.w	sl, #1
 8001ed4:	fa0a f909 	lsl.w	r9, sl, r9
 8001ed8:	ea4c 0c09 	orr.w	ip, ip, r9
 8001edc:	e7a9      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001ede:	f04f 0a02 	mov.w	sl, #2
 8001ee2:	fa0a f909 	lsl.w	r9, sl, r9
 8001ee6:	ea4c 0c09 	orr.w	ip, ip, r9
 8001eea:	e7a2      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001eec:	f04f 0a06 	mov.w	sl, #6
 8001ef0:	fa0a f909 	lsl.w	r9, sl, r9
 8001ef4:	ea4c 0c09 	orr.w	ip, ip, r9
 8001ef8:	e79b      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001efa:	f04f 0a04 	mov.w	sl, #4
 8001efe:	fa0a f909 	lsl.w	r9, sl, r9
 8001f02:	ea4c 0c09 	orr.w	ip, ip, r9
 8001f06:	e794      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001f08:	f04f 0a05 	mov.w	sl, #5
 8001f0c:	fa0a f909 	lsl.w	r9, sl, r9
 8001f10:	ea4c 0c09 	orr.w	ip, ip, r9
 8001f14:	e78d      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001f16:	f04f 0a07 	mov.w	sl, #7
 8001f1a:	fa0a f909 	lsl.w	r9, sl, r9
 8001f1e:	ea4c 0c09 	orr.w	ip, ip, r9
 8001f22:	e786      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001f24:	f04f 0a08 	mov.w	sl, #8
 8001f28:	fa0a f909 	lsl.w	r9, sl, r9
 8001f2c:	ea4c 0c09 	orr.w	ip, ip, r9
 8001f30:	e77f      	b.n	8001e32 <HAL_GPIO_Init+0x182>
 8001f32:	bf00      	nop
 8001f34:	58024400 	.word	0x58024400
 8001f38:	58000400 	.word	0x58000400
 8001f3c:	58020000 	.word	0x58020000
 8001f40:	58020400 	.word	0x58020400
 8001f44:	58020800 	.word	0x58020800
 8001f48:	58020c00 	.word	0x58020c00
 8001f4c:	58021000 	.word	0x58021000
 8001f50:	58021400 	.word	0x58021400
 8001f54:	58021800 	.word	0x58021800
 8001f58:	58021c00 	.word	0x58021c00
 8001f5c:	58022000 	.word	0x58022000
 8001f60:	58022400 	.word	0x58022400

08001f64 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8001f64:	6903      	ldr	r3, [r0, #16]
 8001f66:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001f68:	bf14      	ite	ne
 8001f6a:	2001      	movne	r0, #1
 8001f6c:	2000      	moveq	r0, #0
 8001f6e:	4770      	bx	lr

08001f70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f70:	b902      	cbnz	r2, 8001f74 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f72:	0409      	lsls	r1, r1, #16
 8001f74:	6181      	str	r1, [r0, #24]
  }
}
 8001f76:	4770      	bx	lr

08001f78 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f7a:	4605      	mov	r5, r0
 8001f7c:	460e      	mov	r6, r1
 8001f7e:	4617      	mov	r7, r2
 8001f80:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f82:	682c      	ldr	r4, [r5, #0]
 8001f84:	d12e      	bne.n	8001fe4 <I2C_WaitOnTXISFlagUntilTimeout+0x6c>
 8001f86:	69a3      	ldr	r3, [r4, #24]
 8001f88:	0799      	lsls	r1, r3, #30
 8001f8a:	d451      	bmi.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0xb8>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f8c:	69a3      	ldr	r3, [r4, #24]
 8001f8e:	06da      	lsls	r2, r3, #27
 8001f90:	d5f9      	bpl.n	8001f86 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f92:	69a3      	ldr	r3, [r4, #24]
 8001f94:	069a      	lsls	r2, r3, #26
 8001f96:	d5fc      	bpl.n	8001f92 <I2C_WaitOnTXISFlagUntilTimeout+0x1a>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f98:	2310      	movs	r3, #16

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f9c:	61e3      	str	r3, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fa2:	682b      	ldr	r3, [r5, #0]
 8001fa4:	699a      	ldr	r2, [r3, #24]
 8001fa6:	0796      	lsls	r6, r2, #30
 8001fa8:	d502      	bpl.n	8001fb0 <I2C_WaitOnTXISFlagUntilTimeout+0x38>
    hi2c->Instance->TXDR = 0x00U;
 8001faa:	2200      	movs	r2, #0
 8001fac:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fae:	682b      	ldr	r3, [r5, #0]
 8001fb0:	699a      	ldr	r2, [r3, #24]
 8001fb2:	07d4      	lsls	r4, r2, #31
 8001fb4:	d404      	bmi.n	8001fc0 <I2C_WaitOnTXISFlagUntilTimeout+0x48>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fb6:	699a      	ldr	r2, [r3, #24]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	619a      	str	r2, [r3, #24]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fc2:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8001fc4:	481b      	ldr	r0, [pc, #108]	; (8002034 <I2C_WaitOnTXISFlagUntilTimeout+0xbc>)
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc6:	2420      	movs	r4, #32
    I2C_RESET_CR2(hi2c);
 8001fc8:	4002      	ands	r2, r0
      return HAL_ERROR;
 8001fca:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8001fcc:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fce:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fd4:	f043 0304 	orr.w	r3, r3, #4
 8001fd8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fda:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fde:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 8001fe2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001fe4:	69a3      	ldr	r3, [r4, #24]
 8001fe6:	079b      	lsls	r3, r3, #30
 8001fe8:	d422      	bmi.n	8002030 <I2C_WaitOnTXISFlagUntilTimeout+0xb8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fea:	69a3      	ldr	r3, [r4, #24]
 8001fec:	06d9      	lsls	r1, r3, #27
 8001fee:	d41b      	bmi.n	8002028 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff0:	f7fe f9d4 	bl	800039c <HAL_GetTick>
 8001ff4:	1bc0      	subs	r0, r0, r7
 8001ff6:	42b0      	cmp	r0, r6
 8001ff8:	d801      	bhi.n	8001ffe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8001ffa:	2e00      	cmp	r6, #0
 8001ffc:	d1c0      	bne.n	8001f80 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ffe:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002000:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002002:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 8002004:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002006:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 8002008:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800200c:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800200e:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002012:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 8002016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002018:	f7fe f9c0 	bl	800039c <HAL_GetTick>
 800201c:	1bc0      	subs	r0, r0, r7
 800201e:	4286      	cmp	r6, r0
 8002020:	d3ed      	bcc.n	8001ffe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
 8002022:	2e00      	cmp	r6, #0
 8002024:	d0eb      	beq.n	8001ffe <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002026:	682c      	ldr	r4, [r5, #0]
 8002028:	69a3      	ldr	r3, [r4, #24]
 800202a:	069b      	lsls	r3, r3, #26
 800202c:	d5f4      	bpl.n	8002018 <I2C_WaitOnTXISFlagUntilTimeout+0xa0>
 800202e:	e7b3      	b.n	8001f98 <I2C_WaitOnTXISFlagUntilTimeout+0x20>
  return HAL_OK;
 8002030:	2000      	movs	r0, #0
}
 8002032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002034:	fe00e800 	.word	0xfe00e800

08002038 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8002038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800203a:	4605      	mov	r5, r0
 800203c:	460e      	mov	r6, r1
 800203e:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002040:	e006      	b.n	8002050 <I2C_WaitOnSTOPFlagUntilTimeout+0x18>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7fe f9ab 	bl	800039c <HAL_GetTick>
 8002046:	1bc0      	subs	r0, r0, r7
 8002048:	42b0      	cmp	r0, r6
 800204a:	d83e      	bhi.n	80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
 800204c:	2e00      	cmp	r6, #0
 800204e:	d03c      	beq.n	80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002050:	682c      	ldr	r4, [r5, #0]
 8002052:	69a3      	ldr	r3, [r4, #24]
 8002054:	069b      	lsls	r3, r3, #26
 8002056:	d445      	bmi.n	80020e4 <I2C_WaitOnSTOPFlagUntilTimeout+0xac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002058:	69a3      	ldr	r3, [r4, #24]
 800205a:	06da      	lsls	r2, r3, #27
 800205c:	d5f1      	bpl.n	8002042 <I2C_WaitOnSTOPFlagUntilTimeout+0xa>
 800205e:	1c73      	adds	r3, r6, #1
 8002060:	d128      	bne.n	80020b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7c>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002062:	69a3      	ldr	r3, [r4, #24]
 8002064:	069e      	lsls	r6, r3, #26
 8002066:	d5fc      	bpl.n	8002062 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002068:	2310      	movs	r3, #16
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800206a:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800206c:	61e3      	str	r3, [r4, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800206e:	682b      	ldr	r3, [r5, #0]
 8002070:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002072:	682b      	ldr	r3, [r5, #0]
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	0791      	lsls	r1, r2, #30
 8002078:	d502      	bpl.n	8002080 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    hi2c->Instance->TXDR = 0x00U;
 800207a:	2200      	movs	r2, #0
 800207c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800207e:	682b      	ldr	r3, [r5, #0]
 8002080:	699a      	ldr	r2, [r3, #24]
 8002082:	07d2      	lsls	r2, r2, #31
 8002084:	d404      	bmi.n	8002090 <I2C_WaitOnSTOPFlagUntilTimeout+0x58>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002086:	699a      	ldr	r2, [r3, #24]
 8002088:	f042 0201 	orr.w	r2, r2, #1
 800208c:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800208e:	682b      	ldr	r3, [r5, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002092:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 8002094:	4814      	ldr	r0, [pc, #80]	; (80020e8 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>)
    hi2c->State = HAL_I2C_STATE_READY;
 8002096:	2420      	movs	r4, #32
    I2C_RESET_CR2(hi2c);
 8002098:	4002      	ands	r2, r0
      return HAL_ERROR;
 800209a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800209c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800209e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80020a0:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	646b      	str	r3, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020aa:	f885 4041 	strb.w	r4, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ae:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 80020b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b4:	69a3      	ldr	r3, [r4, #24]
 80020b6:	0698      	lsls	r0, r3, #26
 80020b8:	d4d6      	bmi.n	8002068 <I2C_WaitOnSTOPFlagUntilTimeout+0x30>
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ba:	f7fe f96f 	bl	800039c <HAL_GetTick>
 80020be:	1bc0      	subs	r0, r0, r7
 80020c0:	4286      	cmp	r6, r0
 80020c2:	d302      	bcc.n	80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
 80020c4:	b10e      	cbz	r6, 80020ca <I2C_WaitOnSTOPFlagUntilTimeout+0x92>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020c6:	682c      	ldr	r4, [r5, #0]
 80020c8:	e7c9      	b.n	800205e <I2C_WaitOnSTOPFlagUntilTimeout+0x26>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020ca:	6c6b      	ldr	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020cc:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ce:	2200      	movs	r2, #0
        __HAL_UNLOCK(hi2c);
 80020d0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80020d4:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	646b      	str	r3, [r5, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020da:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020de:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 80020e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 80020e4:	2000      	movs	r0, #0
}
 80020e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020e8:	fe00e800 	.word	0xfe00e800

080020ec <HAL_I2C_Init>:
  if (hi2c == NULL)
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d056      	beq.n	800219e <HAL_I2C_Init+0xb2>
{
 80020f0:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80020f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80020f6:	4604      	mov	r4, r0
 80020f8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d049      	beq.n	8002194 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 8002100:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002102:	2324      	movs	r3, #36	; 0x24
 8002104:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8002108:	6813      	ldr	r3, [r2, #0]
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002110:	e9d4 2300 	ldrd	r2, r3, [r4]
 8002114:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002118:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800211a:	6822      	ldr	r2, [r4, #0]
 800211c:	6893      	ldr	r3, [r2, #8]
 800211e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002122:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002124:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002126:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002128:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800212a:	68a3      	ldr	r3, [r4, #8]
 800212c:	bf0c      	ite	eq
 800212e:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002132:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 8002136:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002138:	68e3      	ldr	r3, [r4, #12]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d103      	bne.n	8002146 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800213e:	6823      	ldr	r3, [r4, #0]
 8002140:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002144:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002146:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002148:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800214c:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_I2C_Init+0xb8>)
 800214e:	6851      	ldr	r1, [r2, #4]
 8002150:	430b      	orrs	r3, r1
 8002152:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002154:	6822      	ldr	r2, [r4, #0]
 8002156:	68d3      	ldr	r3, [r2, #12]
 8002158:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800215c:	60d3      	str	r3, [r2, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800215e:	69a0      	ldr	r0, [r4, #24]
 8002160:	6821      	ldr	r1, [r4, #0]
 8002162:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 8002166:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002168:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800216a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800216e:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002170:	6821      	ldr	r1, [r4, #0]
 8002172:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002176:	4303      	orrs	r3, r0
  return HAL_OK;
 8002178:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800217a:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 800217c:	6821      	ldr	r1, [r4, #0]
 800217e:	680b      	ldr	r3, [r1, #0]
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002186:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002188:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800218c:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800218e:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002192:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002194:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002198:	f007 ff7a 	bl	800a090 <HAL_I2C_MspInit>
 800219c:	e7b0      	b.n	8002100 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800219e:	2001      	movs	r0, #1
}
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	02008000 	.word	0x02008000

080021a8 <HAL_I2C_Master_Transmit>:
{
 80021a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80021ac:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80021b2:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	f040 808b 	bne.w	80022d0 <HAL_I2C_Master_Transmit+0x128>
    __HAL_LOCK(hi2c);
 80021ba:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80021be:	4604      	mov	r4, r0
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f000 8085 	beq.w	80022d0 <HAL_I2C_Master_Transmit+0x128>
 80021c6:	2301      	movs	r3, #1
 80021c8:	4689      	mov	r9, r1
 80021ca:	4617      	mov	r7, r2
 80021cc:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80021d0:	f7fe f8e4 	bl	800039c <HAL_GetTick>
 80021d4:	4605      	mov	r5, r0
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
 80021d6:	e005      	b.n	80021e4 <HAL_I2C_Master_Transmit+0x3c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d8:	f7fe f8e0 	bl	800039c <HAL_GetTick>
 80021dc:	1b40      	subs	r0, r0, r5
 80021de:	2819      	cmp	r0, #25
 80021e0:	f200 8083 	bhi.w	80022ea <HAL_I2C_Master_Transmit+0x142>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	6998      	ldr	r0, [r3, #24]
 80021e8:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
 80021ec:	d1f4      	bne.n	80021d8 <HAL_I2C_Master_Transmit+0x30>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021ee:	2221      	movs	r2, #33	; 0x21
    hi2c->pBuffPtr  = pData;
 80021f0:	6267      	str	r7, [r4, #36]	; 0x24
    hi2c->XferISR   = NULL;
 80021f2:	6360      	str	r0, [r4, #52]	; 0x34
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80021f4:	f3c9 0709 	ubfx	r7, r9, #0, #10
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f8:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021fc:	2210      	movs	r2, #16
 80021fe:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002204:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002208:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800220a:	b292      	uxth	r2, r2
 800220c:	2aff      	cmp	r2, #255	; 0xff
 800220e:	d87a      	bhi.n	8002306 <HAL_I2C_Master_Transmit+0x15e>
      hi2c->XferSize = hi2c->XferCount;
 8002210:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2,
 8002212:	484a      	ldr	r0, [pc, #296]	; (800233c <HAL_I2C_Master_Transmit+0x194>)
      hi2c->XferSize = hi2c->XferCount;
 8002214:	b292      	uxth	r2, r2
  MODIFY_REG(hi2c->Instance->CR2,
 8002216:	b2d1      	uxtb	r1, r2
      hi2c->XferSize = hi2c->XferCount;
 8002218:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4002      	ands	r2, r0
 800221e:	433a      	orrs	r2, r7
 8002220:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002224:	4946      	ldr	r1, [pc, #280]	; (8002340 <HAL_I2C_Master_Transmit+0x198>)
 8002226:	4311      	orrs	r1, r2
 8002228:	6059      	str	r1, [r3, #4]
 800222a:	f8df 8120 	ldr.w	r8, [pc, #288]	; 800234c <HAL_I2C_Master_Transmit+0x1a4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800222e:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8002232:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8002350 <HAL_I2C_Master_Transmit+0x1a8>
    while (hi2c->XferCount > 0U)
 8002236:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002238:	462a      	mov	r2, r5
 800223a:	4631      	mov	r1, r6
 800223c:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d032      	beq.n	80022aa <HAL_I2C_Master_Transmit+0x102>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002244:	f7ff fe98 	bl	8001f78 <I2C_WaitOnTXISFlagUntilTimeout>
 8002248:	2800      	cmp	r0, #0
 800224a:	d174      	bne.n	8002336 <HAL_I2C_Master_Transmit+0x18e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800224c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800224e:	6823      	ldr	r3, [r4, #0]
 8002250:	7812      	ldrb	r2, [r2, #0]
 8002252:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002254:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002256:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002258:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800225a:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800225c:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800225e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8002260:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8002262:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 8002264:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002266:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8002268:	6261      	str	r1, [r4, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800226a:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800226c:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1e1      	bne.n	8002236 <HAL_I2C_Master_Transmit+0x8e>
 8002272:	2a00      	cmp	r2, #0
 8002274:	d0df      	beq.n	8002236 <HAL_I2C_Master_Transmit+0x8e>
 8002276:	1c70      	adds	r0, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002278:	6822      	ldr	r2, [r4, #0]
 800227a:	d12c      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0x12e>
 800227c:	6993      	ldr	r3, [r2, #24]
 800227e:	0619      	lsls	r1, r3, #24
 8002280:	d5fc      	bpl.n	800227c <HAL_I2C_Master_Transmit+0xd4>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002282:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002284:	b29b      	uxth	r3, r3
 8002286:	2bff      	cmp	r3, #255	; 0xff
 8002288:	d947      	bls.n	800231a <HAL_I2C_Master_Transmit+0x172>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800228a:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800228e:	4631      	mov	r1, r6
  MODIFY_REG(hi2c->Instance->CR2,
 8002290:	6853      	ldr	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002292:	4620      	mov	r0, r4
  MODIFY_REG(hi2c->Instance->CR2,
 8002294:	ea03 0308 	and.w	r3, r3, r8
 8002298:	433b      	orrs	r3, r7
 800229a:	ea43 0309 	orr.w	r3, r3, r9
 800229e:	6053      	str	r3, [r2, #4]
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	462a      	mov	r2, r5
    while (hi2c->XferCount > 0U)
 80022a2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80022a4:	b29b      	uxth	r3, r3
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1cc      	bne.n	8002244 <HAL_I2C_Master_Transmit+0x9c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022aa:	f7ff fec5 	bl	8002038 <I2C_WaitOnSTOPFlagUntilTimeout>
 80022ae:	2800      	cmp	r0, #0
 80022b0:	d141      	bne.n	8002336 <HAL_I2C_Master_Transmit+0x18e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 80022b6:	4d23      	ldr	r5, [pc, #140]	; (8002344 <HAL_I2C_Master_Transmit+0x19c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022b8:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80022ba:	6821      	ldr	r1, [r4, #0]
 80022bc:	684b      	ldr	r3, [r1, #4]
 80022be:	402b      	ands	r3, r5
 80022c0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80022c2:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80022c6:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022ca:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 80022ce:	e000      	b.n	80022d2 <HAL_I2C_Master_Transmit+0x12a>
    return HAL_BUSY;
 80022d0:	2002      	movs	r0, #2
}
 80022d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d6:	6993      	ldr	r3, [r2, #24]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	d4d2      	bmi.n	8002282 <HAL_I2C_Master_Transmit+0xda>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022dc:	f7fe f85e 	bl	800039c <HAL_GetTick>
 80022e0:	1b40      	subs	r0, r0, r5
 80022e2:	4286      	cmp	r6, r0
 80022e4:	d301      	bcc.n	80022ea <HAL_I2C_Master_Transmit+0x142>
 80022e6:	2e00      	cmp	r6, #0
 80022e8:	d1c5      	bne.n	8002276 <HAL_I2C_Master_Transmit+0xce>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022ec:	2120      	movs	r1, #32
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ee:	2200      	movs	r2, #0
          return HAL_ERROR;
 80022f0:	2001      	movs	r0, #1
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f2:	430b      	orrs	r3, r1
        __HAL_UNLOCK(hi2c);
 80022f4:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022f8:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022fa:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022fe:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 8002302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002306:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2,
 8002308:	490c      	ldr	r1, [pc, #48]	; (800233c <HAL_I2C_Master_Transmit+0x194>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800230a:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	400a      	ands	r2, r1
 8002310:	490d      	ldr	r1, [pc, #52]	; (8002348 <HAL_I2C_Master_Transmit+0x1a0>)
 8002312:	433a      	orrs	r2, r7
 8002314:	4311      	orrs	r1, r2
 8002316:	6059      	str	r1, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002318:	e787      	b.n	800222a <HAL_I2C_Master_Transmit+0x82>
          hi2c->XferSize = hi2c->XferCount;
 800231a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800231c:	b29b      	uxth	r3, r3
  MODIFY_REG(hi2c->Instance->CR2,
 800231e:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 8002320:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2,
 8002322:	6853      	ldr	r3, [r2, #4]
 8002324:	ea03 0308 	and.w	r3, r3, r8
 8002328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800232c:	433b      	orrs	r3, r7
 800232e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002332:	6053      	str	r3, [r2, #4]
}
 8002334:	e77f      	b.n	8002236 <HAL_I2C_Master_Transmit+0x8e>
        return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
}
 8002338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800233c:	fc009800 	.word	0xfc009800
 8002340:	82002000 	.word	0x82002000
 8002344:	fe00e800 	.word	0xfe00e800
 8002348:	81ff2000 	.word	0x81ff2000
 800234c:	fc009c00 	.word	0xfc009c00
 8002350:	01ff0000 	.word	0x01ff0000

08002354 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002354:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002358:	2a20      	cmp	r2, #32
 800235a:	d129      	bne.n	80023b0 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 800235c:	4603      	mov	r3, r0
{
 800235e:	b500      	push	{lr}
 8002360:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002364:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002368:	2a01      	cmp	r2, #1
 800236a:	d023      	beq.n	80023b4 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 800236c:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800236e:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002370:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 8002374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002378:	2224      	movs	r2, #36	; 0x24
 800237a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800237e:	6802      	ldr	r2, [r0, #0]
 8002380:	f022 0201 	bic.w	r2, r2, #1
 8002384:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002386:	6818      	ldr	r0, [r3, #0]
 8002388:	6802      	ldr	r2, [r0, #0]
 800238a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800238e:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002390:	6818      	ldr	r0, [r3, #0]
 8002392:	6802      	ldr	r2, [r0, #0]
 8002394:	4311      	orrs	r1, r2
 8002396:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8002398:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800239a:	6819      	ldr	r1, [r3, #0]
 800239c:	680a      	ldr	r2, [r1, #0]
 800239e:	f042 0201 	orr.w	r2, r2, #1
 80023a2:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80023a4:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 80023a8:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80023ac:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 80023b0:	2002      	movs	r0, #2
}
 80023b2:	4770      	bx	lr
    return HAL_BUSY;
 80023b4:	2002      	movs	r0, #2
}
 80023b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80023ba:	bf00      	nop

080023bc <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023bc:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80023c0:	2a20      	cmp	r2, #32
 80023c2:	d127      	bne.n	8002414 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80023c4:	4603      	mov	r3, r0
{
 80023c6:	b500      	push	{lr}
 80023c8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023cc:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 80023d0:	2a01      	cmp	r2, #1
 80023d2:	d021      	beq.n	8002418 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 80023d4:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023d6:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023d8:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 80023dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 80023e0:	2224      	movs	r2, #36	; 0x24
 80023e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 80023e6:	6802      	ldr	r2, [r0, #0]
 80023e8:	f022 0201 	bic.w	r2, r2, #1
 80023ec:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 80023ee:	6818      	ldr	r0, [r3, #0]
 80023f0:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80023f2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 80023f6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 80023fa:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 80023fc:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 80023fe:	6819      	ldr	r1, [r3, #0]
 8002400:	680a      	ldr	r2, [r1, #0]
 8002402:	f042 0201 	orr.w	r2, r2, #1
 8002406:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002408:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800240c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002410:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8002414:	2002      	movs	r0, #2
}
 8002416:	4770      	bx	lr
    return HAL_BUSY;
 8002418:	2002      	movs	r0, #2
}
 800241a:	f85d fb04 	ldr.w	pc, [sp], #4
 800241e:	bf00      	nop

08002420 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002420:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002422:	4c10      	ldr	r4, [pc, #64]	; (8002464 <HAL_PWREx_ConfigSupply+0x44>)
 8002424:	68e3      	ldr	r3, [r4, #12]
 8002426:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800242a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800242c:	d105      	bne.n	800243a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800242e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002432:	1a18      	subs	r0, r3, r0
 8002434:	bf18      	it	ne
 8002436:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8002438:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	4318      	orrs	r0, r3
 8002440:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 8002442:	f7fd ffab 	bl	800039c <HAL_GetTick>
 8002446:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002448:	e005      	b.n	8002456 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800244a:	f7fd ffa7 	bl	800039c <HAL_GetTick>
 800244e:	1b40      	subs	r0, r0, r5
 8002450:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002454:	d804      	bhi.n	8002460 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002456:	6863      	ldr	r3, [r4, #4]
 8002458:	049b      	lsls	r3, r3, #18
 800245a:	d5f6      	bpl.n	800244a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800245c:	2000      	movs	r0, #0
}
 800245e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002460:	2001      	movs	r0, #1
}
 8002462:	bd38      	pop	{r3, r4, r5, pc}
 8002464:	58024800 	.word	0x58024800

08002468 <HAL_RCC_GetSysClockFreq.part.0>:
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002468:	4b3b      	ldr	r3, [pc, #236]	; (8002558 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800246a:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800246c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800246e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002470:	6add      	ldr	r5, [r3, #44]	; 0x2c
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));

    if (pllm != 0U)
 8002472:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002476:	6b59      	ldr	r1, [r3, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002478:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 800247c:	d038      	beq.n	80024f0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800247e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002482:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002486:	f002 0203 	and.w	r2, r2, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800248a:	fb05 f101 	mul.w	r1, r5, r1
 800248e:	2a01      	cmp	r2, #1
 8002490:	ee07 1a90 	vmov	s15, r1
 8002494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    {
      switch (pllsource)
 8002498:	d002      	beq.n	80024a0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800249a:	2a02      	cmp	r2, #2
 800249c:	d04e      	beq.n	800253c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800249e:	b34a      	cbz	r2, 80024f4 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        break;

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024a0:	ee07 0a90 	vmov	s15, r0
 80024a4:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800255c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 80024a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 80024b2:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8002560 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 80024b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ba:	ee06 3a90 	vmov	s13, r3
 80024be:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 80024c2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80024c6:	ee76 6a85 	vadd.f32	s13, s13, s10
 80024ca:	eee7 6a25 	vfma.f32	s13, s14, s11
 80024ce:	ee66 6a26 	vmul.f32	s13, s12, s13
        break;
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80024d2:	4b21      	ldr	r3, [pc, #132]	; (8002558 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 80024da:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80024dc:	ee07 3a90 	vmov	s15, r3
 80024e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ec:	ee17 0a90 	vmov	r0, s15
    sysclockfreq = CSI_VALUE;
    break;
  }

  return sysclockfreq;
}
 80024f0:	bc30      	pop	{r4, r5}
 80024f2:	4770      	bx	lr
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	0692      	lsls	r2, r2, #26
 80024f8:	d527      	bpl.n	800254a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024fa:	6819      	ldr	r1, [r3, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80024fc:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002500:	4a18      	ldr	r2, [pc, #96]	; (8002564 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002502:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002508:	f3c1 01c1 	ubfx	r1, r1, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800250c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002510:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002560 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 8002514:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002518:	40ca      	lsrs	r2, r1
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800251a:	ee06 3a90 	vmov	s13, r3
 800251e:	ee05 2a90 	vmov	s11, r2
 8002522:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002526:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800252a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800252e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002532:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002536:	ee66 6a26 	vmul.f32	s13, s12, s13
 800253a:	e7ca      	b.n	80024d2 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800253c:	ee07 0a90 	vmov	s15, r0
 8002540:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002568 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 8002544:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002548:	e7b0      	b.n	80024ac <HAL_RCC_GetSysClockFreq.part.0+0x44>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800254a:	ee07 0a90 	vmov	s15, r0
 800254e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800256c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 8002552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002556:	e7a9      	b.n	80024ac <HAL_RCC_GetSysClockFreq.part.0+0x44>
 8002558:	58024400 	.word	0x58024400
 800255c:	4a742400 	.word	0x4a742400
 8002560:	39000000 	.word	0x39000000
 8002564:	03d09000 	.word	0x03d09000
 8002568:	4bbebc20 	.word	0x4bbebc20
 800256c:	4c742400 	.word	0x4c742400

08002570 <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8002570:	2800      	cmp	r0, #0
 8002572:	f000 81ee 	beq.w	8002952 <HAL_RCC_OscConfig+0x3e2>
{
 8002576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002578:	6803      	ldr	r3, [r0, #0]
 800257a:	4604      	mov	r4, r0
 800257c:	07d9      	lsls	r1, r3, #31
 800257e:	d52e      	bpl.n	80025de <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002580:	499f      	ldr	r1, [pc, #636]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 8002582:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002584:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002586:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800258a:	2a10      	cmp	r2, #16
 800258c:	f000 8125 	beq.w	80027da <HAL_RCC_OscConfig+0x26a>
 8002590:	2a18      	cmp	r2, #24
 8002592:	f000 811d 	beq.w	80027d0 <HAL_RCC_OscConfig+0x260>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002596:	6863      	ldr	r3, [r4, #4]
 8002598:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800259c:	f000 8160 	beq.w	8002860 <HAL_RCC_OscConfig+0x2f0>
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f040 81a9 	bne.w	80028f8 <HAL_RCC_OscConfig+0x388>
 80025a6:	4b96      	ldr	r3, [pc, #600]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025b6:	601a      	str	r2, [r3, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b8:	6863      	ldr	r3, [r4, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f000 816b 	beq.w	8002896 <HAL_RCC_OscConfig+0x326>
        tickstart = HAL_GetTick();
 80025c0:	f7fd feec 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c4:	4e8e      	ldr	r6, [pc, #568]	; (8002800 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80025c6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025c8:	e005      	b.n	80025d6 <HAL_RCC_OscConfig+0x66>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ca:	f7fd fee7 	bl	800039c <HAL_GetTick>
 80025ce:	1b40      	subs	r0, r0, r5
 80025d0:	2864      	cmp	r0, #100	; 0x64
 80025d2:	f200 815e 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d6:	6833      	ldr	r3, [r6, #0]
 80025d8:	039f      	lsls	r7, r3, #14
 80025da:	d5f6      	bpl.n	80025ca <HAL_RCC_OscConfig+0x5a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025dc:	6823      	ldr	r3, [r4, #0]
 80025de:	0799      	lsls	r1, r3, #30
 80025e0:	d521      	bpl.n	8002626 <HAL_RCC_OscConfig+0xb6>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025e2:	4a87      	ldr	r2, [pc, #540]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 80025e4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80025e6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80025e8:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 80025ec:	f040 80a4 	bne.w	8002738 <HAL_RCC_OscConfig+0x1c8>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025f0:	4b83      	ldr	r3, [pc, #524]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	075b      	lsls	r3, r3, #29
 80025f6:	d503      	bpl.n	8002600 <HAL_RCC_OscConfig+0x90>
 80025f8:	68e3      	ldr	r3, [r4, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 80e6 	beq.w	80027cc <HAL_RCC_OscConfig+0x25c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	f7fd fee4 	bl	80003cc <HAL_GetREVID>
 8002604:	f241 0303 	movw	r3, #4099	; 0x1003
 8002608:	4298      	cmp	r0, r3
 800260a:	f200 8183 	bhi.w	8002914 <HAL_RCC_OscConfig+0x3a4>
 800260e:	6922      	ldr	r2, [r4, #16]
 8002610:	2a40      	cmp	r2, #64	; 0x40
 8002612:	f000 823d 	beq.w	8002a90 <HAL_RCC_OscConfig+0x520>
 8002616:	497a      	ldr	r1, [pc, #488]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 8002618:	684b      	ldr	r3, [r1, #4]
 800261a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800261e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002622:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002624:	6823      	ldr	r3, [r4, #0]
 8002626:	06d9      	lsls	r1, r3, #27
 8002628:	d453      	bmi.n	80026d2 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262a:	071d      	lsls	r5, r3, #28
 800262c:	d516      	bpl.n	800265c <HAL_RCC_OscConfig+0xec>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800262e:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002630:	4d73      	ldr	r5, [pc, #460]	; (8002800 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 80ae 	beq.w	8002794 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_LSI_ENABLE();
 8002638:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8002640:	f7fd feac 	bl	800039c <HAL_GetTick>
 8002644:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002646:	e005      	b.n	8002654 <HAL_RCC_OscConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002648:	f7fd fea8 	bl	800039c <HAL_GetTick>
 800264c:	1b80      	subs	r0, r0, r6
 800264e:	2802      	cmp	r0, #2
 8002650:	f200 811f 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002654:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002656:	0798      	lsls	r0, r3, #30
 8002658:	d5f6      	bpl.n	8002648 <HAL_RCC_OscConfig+0xd8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800265a:	6823      	ldr	r3, [r4, #0]
 800265c:	069a      	lsls	r2, r3, #26
 800265e:	d516      	bpl.n	800268e <HAL_RCC_OscConfig+0x11e>
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002660:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 8002662:	4d67      	ldr	r5, [pc, #412]	; (8002800 <HAL_RCC_OscConfig+0x290>)
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8124 	beq.w	80028b2 <HAL_RCC_OscConfig+0x342>
      __HAL_RCC_HSI48_ENABLE();
 800266a:	682b      	ldr	r3, [r5, #0]
 800266c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002670:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002672:	f7fd fe93 	bl	800039c <HAL_GetTick>
 8002676:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002678:	e005      	b.n	8002686 <HAL_RCC_OscConfig+0x116>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800267a:	f7fd fe8f 	bl	800039c <HAL_GetTick>
 800267e:	1b80      	subs	r0, r0, r6
 8002680:	2802      	cmp	r0, #2
 8002682:	f200 8106 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002686:	682b      	ldr	r3, [r5, #0]
 8002688:	049f      	lsls	r7, r3, #18
 800268a:	d5f6      	bpl.n	800267a <HAL_RCC_OscConfig+0x10a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800268c:	6823      	ldr	r3, [r4, #0]
 800268e:	0759      	lsls	r1, r3, #29
 8002690:	f100 80ad 	bmi.w	80027ee <HAL_RCC_OscConfig+0x27e>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002694:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002696:	b1d0      	cbz	r0, 80026ce <HAL_RCC_OscConfig+0x15e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002698:	4d59      	ldr	r5, [pc, #356]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 800269a:	692b      	ldr	r3, [r5, #16]
 800269c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026a0:	2b18      	cmp	r3, #24
 80026a2:	f000 81c7 	beq.w	8002a34 <HAL_RCC_OscConfig+0x4c4>
        __HAL_RCC_PLL_DISABLE();
 80026a6:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80026aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026ae:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b0:	f000 815b 	beq.w	800296a <HAL_RCC_OscConfig+0x3fa>
        tickstart = HAL_GetTick();
 80026b4:	f7fd fe72 	bl	800039c <HAL_GetTick>
 80026b8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026ba:	e005      	b.n	80026c8 <HAL_RCC_OscConfig+0x158>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026bc:	f7fd fe6e 	bl	800039c <HAL_GetTick>
 80026c0:	1b00      	subs	r0, r0, r4
 80026c2:	2802      	cmp	r0, #2
 80026c4:	f200 80e5 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c8:	682b      	ldr	r3, [r5, #0]
 80026ca:	019b      	lsls	r3, r3, #6
 80026cc:	d4f6      	bmi.n	80026bc <HAL_RCC_OscConfig+0x14c>
  return HAL_OK;
 80026ce:	2000      	movs	r0, #0
}
 80026d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d2:	4a4b      	ldr	r2, [pc, #300]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 80026d4:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026d6:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80026dc:	2b08      	cmp	r3, #8
 80026de:	d06e      	beq.n	80027be <HAL_RCC_OscConfig+0x24e>
 80026e0:	2b18      	cmp	r3, #24
 80026e2:	d068      	beq.n	80027b6 <HAL_RCC_OscConfig+0x246>
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026e4:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 80026e6:	4d46      	ldr	r5, [pc, #280]	; (8002800 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80f3 	beq.w	80028d4 <HAL_RCC_OscConfig+0x364>
        __HAL_RCC_CSI_ENABLE();
 80026ee:	682b      	ldr	r3, [r5, #0]
 80026f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026f6:	f7fd fe51 	bl	800039c <HAL_GetTick>
 80026fa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fc:	e005      	b.n	800270a <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80026fe:	f7fd fe4d 	bl	800039c <HAL_GetTick>
 8002702:	1b80      	subs	r0, r0, r6
 8002704:	2802      	cmp	r0, #2
 8002706:	f200 80c4 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800270a:	682b      	ldr	r3, [r5, #0]
 800270c:	05db      	lsls	r3, r3, #23
 800270e:	d5f6      	bpl.n	80026fe <HAL_RCC_OscConfig+0x18e>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002710:	f7fd fe5c 	bl	80003cc <HAL_GetREVID>
 8002714:	f241 0303 	movw	r3, #4099	; 0x1003
 8002718:	4298      	cmp	r0, r3
 800271a:	f200 81d9 	bhi.w	8002ad0 <HAL_RCC_OscConfig+0x560>
 800271e:	6a22      	ldr	r2, [r4, #32]
 8002720:	686b      	ldr	r3, [r5, #4]
 8002722:	2a20      	cmp	r2, #32
 8002724:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002728:	bf0c      	ite	eq
 800272a:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800272e:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8002732:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002734:	6823      	ldr	r3, [r4, #0]
 8002736:	e778      	b.n	800262a <HAL_RCC_OscConfig+0xba>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002738:	2b18      	cmp	r3, #24
 800273a:	f000 8106 	beq.w	800294a <HAL_RCC_OscConfig+0x3da>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800273e:	4d30      	ldr	r5, [pc, #192]	; (8002800 <HAL_RCC_OscConfig+0x290>)
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002740:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002742:	682b      	ldr	r3, [r5, #0]
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002744:	2a00      	cmp	r2, #0
 8002746:	f000 80ef 	beq.w	8002928 <HAL_RCC_OscConfig+0x3b8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800274a:	f023 0319 	bic.w	r3, r3, #25
 800274e:	4313      	orrs	r3, r2
 8002750:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002752:	f7fd fe23 	bl	800039c <HAL_GetTick>
 8002756:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002758:	e005      	b.n	8002766 <HAL_RCC_OscConfig+0x1f6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800275a:	f7fd fe1f 	bl	800039c <HAL_GetTick>
 800275e:	1b80      	subs	r0, r0, r6
 8002760:	2802      	cmp	r0, #2
 8002762:	f200 8096 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002766:	682b      	ldr	r3, [r5, #0]
 8002768:	075f      	lsls	r7, r3, #29
 800276a:	d5f6      	bpl.n	800275a <HAL_RCC_OscConfig+0x1ea>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	f7fd fe2e 	bl	80003cc <HAL_GetREVID>
 8002770:	f241 0303 	movw	r3, #4099	; 0x1003
 8002774:	4298      	cmp	r0, r3
 8002776:	f200 81b4 	bhi.w	8002ae2 <HAL_RCC_OscConfig+0x572>
 800277a:	6922      	ldr	r2, [r4, #16]
 800277c:	686b      	ldr	r3, [r5, #4]
 800277e:	2a40      	cmp	r2, #64	; 0x40
 8002780:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002784:	bf0c      	ite	eq
 8002786:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800278a:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800278e:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002790:	6823      	ldr	r3, [r4, #0]
 8002792:	e748      	b.n	8002626 <HAL_RCC_OscConfig+0xb6>
      __HAL_RCC_LSI_DISABLE();
 8002794:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8002796:	f023 0301 	bic.w	r3, r3, #1
 800279a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800279c:	f7fd fdfe 	bl	800039c <HAL_GetTick>
 80027a0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027a2:	e004      	b.n	80027ae <HAL_RCC_OscConfig+0x23e>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fd fdfa 	bl	800039c <HAL_GetTick>
 80027a8:	1b80      	subs	r0, r0, r6
 80027aa:	2802      	cmp	r0, #2
 80027ac:	d871      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80027ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80027b0:	0799      	lsls	r1, r3, #30
 80027b2:	d4f7      	bmi.n	80027a4 <HAL_RCC_OscConfig+0x234>
 80027b4:	e751      	b.n	800265a <HAL_RCC_OscConfig+0xea>
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027b6:	f002 0203 	and.w	r2, r2, #3
 80027ba:	2a01      	cmp	r2, #1
 80027bc:	d192      	bne.n	80026e4 <HAL_RCC_OscConfig+0x174>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	05da      	lsls	r2, r3, #23
 80027c4:	d552      	bpl.n	800286c <HAL_RCC_OscConfig+0x2fc>
 80027c6:	69e3      	ldr	r3, [r4, #28]
 80027c8:	2b80      	cmp	r3, #128	; 0x80
 80027ca:	d04f      	beq.n	800286c <HAL_RCC_OscConfig+0x2fc>
        return HAL_ERROR;
 80027cc:	2001      	movs	r0, #1
}
 80027ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80027d0:	f001 0103 	and.w	r1, r1, #3
 80027d4:	2902      	cmp	r1, #2
 80027d6:	f47f aede 	bne.w	8002596 <HAL_RCC_OscConfig+0x26>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027da:	4a09      	ldr	r2, [pc, #36]	; (8002800 <HAL_RCC_OscConfig+0x290>)
 80027dc:	6812      	ldr	r2, [r2, #0]
 80027de:	0392      	lsls	r2, r2, #14
 80027e0:	f57f aefd 	bpl.w	80025de <HAL_RCC_OscConfig+0x6e>
 80027e4:	6862      	ldr	r2, [r4, #4]
 80027e6:	2a00      	cmp	r2, #0
 80027e8:	f47f aef9 	bne.w	80025de <HAL_RCC_OscConfig+0x6e>
 80027ec:	e7ee      	b.n	80027cc <HAL_RCC_OscConfig+0x25c>
    PWR->CR1 |= PWR_CR1_DBP;
 80027ee:	4d05      	ldr	r5, [pc, #20]	; (8002804 <HAL_RCC_OscConfig+0x294>)
 80027f0:	682b      	ldr	r3, [r5, #0]
 80027f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f6:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80027f8:	f7fd fdd0 	bl	800039c <HAL_GetTick>
 80027fc:	4606      	mov	r6, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x2a2>
 8002800:	58024400 	.word	0x58024400
 8002804:	58024800 	.word	0x58024800
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002808:	f7fd fdc8 	bl	800039c <HAL_GetTick>
 800280c:	1b80      	subs	r0, r0, r6
 800280e:	2864      	cmp	r0, #100	; 0x64
 8002810:	d83f      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002812:	682b      	ldr	r3, [r5, #0]
 8002814:	05da      	lsls	r2, r3, #23
 8002816:	d5f7      	bpl.n	8002808 <HAL_RCC_OscConfig+0x298>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	68a3      	ldr	r3, [r4, #8]
 800281a:	2b01      	cmp	r3, #1
 800281c:	f000 816a 	beq.w	8002af4 <HAL_RCC_OscConfig+0x584>
 8002820:	2b00      	cmp	r3, #0
 8002822:	f040 816d 	bne.w	8002b00 <HAL_RCC_OscConfig+0x590>
 8002826:	4ba7      	ldr	r3, [pc, #668]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 8002828:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	671a      	str	r2, [r3, #112]	; 0x70
 8002830:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002832:	f022 0204 	bic.w	r2, r2, #4
 8002836:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002838:	68a3      	ldr	r3, [r4, #8]
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8131 	beq.w	8002aa2 <HAL_RCC_OscConfig+0x532>
      tickstart = HAL_GetTick();
 8002840:	f7fd fdac 	bl	800039c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002844:	4e9f      	ldr	r6, [pc, #636]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002846:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800284a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800284c:	e004      	b.n	8002858 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284e:	f7fd fda5 	bl	800039c <HAL_GetTick>
 8002852:	1b40      	subs	r0, r0, r5
 8002854:	42b8      	cmp	r0, r7
 8002856:	d81c      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002858:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800285a:	079b      	lsls	r3, r3, #30
 800285c:	d5f7      	bpl.n	800284e <HAL_RCC_OscConfig+0x2de>
 800285e:	e719      	b.n	8002694 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	4a98      	ldr	r2, [pc, #608]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002868:	6013      	str	r3, [r2, #0]
 800286a:	e6a5      	b.n	80025b8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800286c:	f7fd fdae 	bl	80003cc <HAL_GetREVID>
 8002870:	f241 0303 	movw	r3, #4099	; 0x1003
 8002874:	4298      	cmp	r0, r3
 8002876:	d86e      	bhi.n	8002956 <HAL_RCC_OscConfig+0x3e6>
 8002878:	6a22      	ldr	r2, [r4, #32]
 800287a:	2a20      	cmp	r2, #32
 800287c:	f000 814d 	beq.w	8002b1a <HAL_RCC_OscConfig+0x5aa>
 8002880:	4990      	ldr	r1, [pc, #576]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 8002882:	684b      	ldr	r3, [r1, #4]
 8002884:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002888:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800288c:	604b      	str	r3, [r1, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	e6cb      	b.n	800262a <HAL_RCC_OscConfig+0xba>
            return HAL_TIMEOUT;
 8002892:	2003      	movs	r0, #3
}
 8002894:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 8002896:	f7fd fd81 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289a:	4e8a      	ldr	r6, [pc, #552]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800289c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800289e:	e004      	b.n	80028aa <HAL_RCC_OscConfig+0x33a>
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028a0:	f7fd fd7c 	bl	800039c <HAL_GetTick>
 80028a4:	1b40      	subs	r0, r0, r5
 80028a6:	2864      	cmp	r0, #100	; 0x64
 80028a8:	d8f3      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028aa:	6833      	ldr	r3, [r6, #0]
 80028ac:	0398      	lsls	r0, r3, #14
 80028ae:	d4f7      	bmi.n	80028a0 <HAL_RCC_OscConfig+0x330>
 80028b0:	e694      	b.n	80025dc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSI48_DISABLE();
 80028b2:	682b      	ldr	r3, [r5, #0]
 80028b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80028b8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80028ba:	f7fd fd6f 	bl	800039c <HAL_GetTick>
 80028be:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028c0:	e004      	b.n	80028cc <HAL_RCC_OscConfig+0x35c>
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80028c2:	f7fd fd6b 	bl	800039c <HAL_GetTick>
 80028c6:	1b80      	subs	r0, r0, r6
 80028c8:	2802      	cmp	r0, #2
 80028ca:	d8e2      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028cc:	682b      	ldr	r3, [r5, #0]
 80028ce:	0498      	lsls	r0, r3, #18
 80028d0:	d4f7      	bmi.n	80028c2 <HAL_RCC_OscConfig+0x352>
 80028d2:	e6db      	b.n	800268c <HAL_RCC_OscConfig+0x11c>
        __HAL_RCC_CSI_DISABLE();
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80028da:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028dc:	f7fd fd5e 	bl	800039c <HAL_GetTick>
 80028e0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028e2:	e004      	b.n	80028ee <HAL_RCC_OscConfig+0x37e>
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80028e4:	f7fd fd5a 	bl	800039c <HAL_GetTick>
 80028e8:	1b80      	subs	r0, r0, r6
 80028ea:	2802      	cmp	r0, #2
 80028ec:	d8d1      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80028ee:	682b      	ldr	r3, [r5, #0]
 80028f0:	05df      	lsls	r7, r3, #23
 80028f2:	d4f7      	bmi.n	80028e4 <HAL_RCC_OscConfig+0x374>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f4:	6823      	ldr	r3, [r4, #0]
 80028f6:	e698      	b.n	800262a <HAL_RCC_OscConfig+0xba>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028fc:	4b71      	ldr	r3, [pc, #452]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	f47f ae53 	bne.w	80025aa <HAL_RCC_OscConfig+0x3a>
 8002904:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002908:	601a      	str	r2, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002910:	601a      	str	r2, [r3, #0]
 8002912:	e651      	b.n	80025b8 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002914:	4a6b      	ldr	r2, [pc, #428]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 8002916:	6921      	ldr	r1, [r4, #16]
 8002918:	6853      	ldr	r3, [r2, #4]
 800291a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800291e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002922:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	e67e      	b.n	8002626 <HAL_RCC_OscConfig+0xb6>
        __HAL_RCC_HSI_DISABLE();
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800292e:	f7fd fd35 	bl	800039c <HAL_GetTick>
 8002932:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002934:	e004      	b.n	8002940 <HAL_RCC_OscConfig+0x3d0>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002936:	f7fd fd31 	bl	800039c <HAL_GetTick>
 800293a:	1b80      	subs	r0, r0, r6
 800293c:	2802      	cmp	r0, #2
 800293e:	d8a8      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002940:	682b      	ldr	r3, [r5, #0]
 8002942:	0758      	lsls	r0, r3, #29
 8002944:	d4f7      	bmi.n	8002936 <HAL_RCC_OscConfig+0x3c6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	e66d      	b.n	8002626 <HAL_RCC_OscConfig+0xb6>
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800294a:	0792      	lsls	r2, r2, #30
 800294c:	f47f aef7 	bne.w	800273e <HAL_RCC_OscConfig+0x1ce>
 8002950:	e64e      	b.n	80025f0 <HAL_RCC_OscConfig+0x80>
    return HAL_ERROR;
 8002952:	2001      	movs	r0, #1
}
 8002954:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002956:	4a5b      	ldr	r2, [pc, #364]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 8002958:	6a21      	ldr	r1, [r4, #32]
 800295a:	68d3      	ldr	r3, [r2, #12]
 800295c:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002960:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8002964:	60d3      	str	r3, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002966:	6823      	ldr	r3, [r4, #0]
 8002968:	e65f      	b.n	800262a <HAL_RCC_OscConfig+0xba>
        tickstart = HAL_GetTick();
 800296a:	f7fd fd17 	bl	800039c <HAL_GetTick>
 800296e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002970:	e004      	b.n	800297c <HAL_RCC_OscConfig+0x40c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fd fd13 	bl	800039c <HAL_GetTick>
 8002976:	1b80      	subs	r0, r0, r6
 8002978:	2802      	cmp	r0, #2
 800297a:	d88a      	bhi.n	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800297c:	682b      	ldr	r3, [r5, #0]
 800297e:	0199      	lsls	r1, r3, #6
 8002980:	d4f7      	bmi.n	8002972 <HAL_RCC_OscConfig+0x402>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002982:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 8002984:	4b50      	ldr	r3, [pc, #320]	; (8002ac8 <HAL_RCC_OscConfig+0x558>)
 8002986:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002988:	400b      	ands	r3, r1
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800298a:	4950      	ldr	r1, [pc, #320]	; (8002acc <HAL_RCC_OscConfig+0x55c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800298c:	4e4d      	ldr	r6, [pc, #308]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800298e:	4313      	orrs	r3, r2
 8002990:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002992:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002996:	62ab      	str	r3, [r5, #40]	; 0x28
 8002998:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800299c:	3b01      	subs	r3, #1
 800299e:	3a01      	subs	r2, #1
 80029a0:	025b      	lsls	r3, r3, #9
 80029a2:	0412      	lsls	r2, r2, #16
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80029aa:	4313      	orrs	r3, r2
 80029ac:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80029ae:	3a01      	subs	r2, #1
 80029b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029b4:	4313      	orrs	r3, r2
 80029b6:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0612      	lsls	r2, r2, #24
 80029bc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80029c0:	4313      	orrs	r3, r2
 80029c2:	632b      	str	r3, [r5, #48]	; 0x30
         __HAL_RCC_PLLFRACN_DISABLE();
 80029c4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029c6:	f023 0301 	bic.w	r3, r3, #1
 80029ca:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80029cc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80029ce:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80029d0:	4011      	ands	r1, r2
 80029d2:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 80029d6:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80029d8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029dc:	f023 030c 	bic.w	r3, r3, #12
 80029e0:	4313      	orrs	r3, r2
 80029e2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80029e4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029e6:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80029e8:	f023 0302 	bic.w	r3, r3, #2
 80029ec:	4313      	orrs	r3, r2
 80029ee:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80029f0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f6:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029f8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80029fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029fe:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002a00:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a02:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a06:	62eb      	str	r3, [r5, #44]	; 0x2c
         __HAL_RCC_PLLFRACN_ENABLE();
 8002a08:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002a0a:	f043 0301 	orr.w	r3, r3, #1
 8002a0e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a16:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a18:	f7fd fcc0 	bl	800039c <HAL_GetTick>
 8002a1c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a1e:	e005      	b.n	8002a2c <HAL_RCC_OscConfig+0x4bc>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a20:	f7fd fcbc 	bl	800039c <HAL_GetTick>
 8002a24:	1b00      	subs	r0, r0, r4
 8002a26:	2802      	cmp	r0, #2
 8002a28:	f63f af33 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a2c:	6833      	ldr	r3, [r6, #0]
 8002a2e:	019a      	lsls	r2, r3, #6
 8002a30:	d5f6      	bpl.n	8002a20 <HAL_RCC_OscConfig+0x4b0>
 8002a32:	e64c      	b.n	80026ce <HAL_RCC_OscConfig+0x15e>
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a34:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002a36:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002a38:	6b2d      	ldr	r5, [r5, #48]	; 0x30
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	f43f ae49 	beq.w	80026d0 <HAL_RCC_OscConfig+0x160>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3e:	f002 0303 	and.w	r3, r2, #3
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a42:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a44:	428b      	cmp	r3, r1
 8002a46:	f47f aec1 	bne.w	80027cc <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a4a:	f3c2 1205 	ubfx	r2, r2, #4, #6
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	f47f aebb 	bne.w	80027cc <HAL_RCC_OscConfig+0x25c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a56:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a58:	f3c5 0208 	ubfx	r2, r5, #0, #9
 8002a5c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	f47f aeb4 	bne.w	80027cc <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a66:	f3c5 2246 	ubfx	r2, r5, #9, #7
 8002a6a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a6c:	429a      	cmp	r2, r3
 8002a6e:	f47f aead 	bne.w	80027cc <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002a74:	f3c5 4206 	ubfx	r2, r5, #16, #7
 8002a78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	f47f aea6 	bne.w	80027cc <HAL_RCC_OscConfig+0x25c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a80:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002a82:	f3c5 6506 	ubfx	r5, r5, #24, #7
 8002a86:	3801      	subs	r0, #1
  return HAL_OK;
 8002a88:	1a28      	subs	r0, r5, r0
 8002a8a:	bf18      	it	ne
 8002a8c:	2001      	movne	r0, #1
}
 8002a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a90:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
 8002a92:	6853      	ldr	r3, [r2, #4]
 8002a94:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9c:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	e5c1      	b.n	8002626 <HAL_RCC_OscConfig+0xb6>
      tickstart = HAL_GetTick();
 8002aa2:	f7fd fc7b 	bl	800039c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aa6:	4e07      	ldr	r6, [pc, #28]	; (8002ac4 <HAL_RCC_OscConfig+0x554>)
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aa8:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002aac:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aae:	e005      	b.n	8002abc <HAL_RCC_OscConfig+0x54c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ab0:	f7fd fc74 	bl	800039c <HAL_GetTick>
 8002ab4:	1b40      	subs	r0, r0, r5
 8002ab6:	42b8      	cmp	r0, r7
 8002ab8:	f63f aeeb 	bhi.w	8002892 <HAL_RCC_OscConfig+0x322>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002abc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8002abe:	0798      	lsls	r0, r3, #30
 8002ac0:	d4f6      	bmi.n	8002ab0 <HAL_RCC_OscConfig+0x540>
 8002ac2:	e5e7      	b.n	8002694 <HAL_RCC_OscConfig+0x124>
 8002ac4:	58024400 	.word	0x58024400
 8002ac8:	fffffc0c 	.word	0xfffffc0c
 8002acc:	ffff0007 	.word	0xffff0007
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002ad0:	68eb      	ldr	r3, [r5, #12]
 8002ad2:	6a22      	ldr	r2, [r4, #32]
 8002ad4:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 8002ad8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002adc:	60eb      	str	r3, [r5, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ade:	6823      	ldr	r3, [r4, #0]
 8002ae0:	e5a3      	b.n	800262a <HAL_RCC_OscConfig+0xba>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae2:	686b      	ldr	r3, [r5, #4]
 8002ae4:	6922      	ldr	r2, [r4, #16]
 8002ae6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8002aea:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002aee:	606b      	str	r3, [r5, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002af0:	6823      	ldr	r3, [r4, #0]
 8002af2:	e598      	b.n	8002626 <HAL_RCC_OscConfig+0xb6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <HAL_RCC_OscConfig+0x5bc>)
 8002af6:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	e69b      	b.n	8002838 <HAL_RCC_OscConfig+0x2c8>
 8002b00:	2b05      	cmp	r3, #5
 8002b02:	4b0a      	ldr	r3, [pc, #40]	; (8002b2c <HAL_RCC_OscConfig+0x5bc>)
 8002b04:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b06:	f47f ae90 	bne.w	800282a <HAL_RCC_OscConfig+0x2ba>
 8002b0a:	f042 0204 	orr.w	r2, r2, #4
 8002b0e:	671a      	str	r2, [r3, #112]	; 0x70
 8002b10:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b12:	f042 0201 	orr.w	r2, r2, #1
 8002b16:	671a      	str	r2, [r3, #112]	; 0x70
 8002b18:	e68e      	b.n	8002838 <HAL_RCC_OscConfig+0x2c8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002b1a:	4a04      	ldr	r2, [pc, #16]	; (8002b2c <HAL_RCC_OscConfig+0x5bc>)
 8002b1c:	6853      	ldr	r3, [r2, #4]
 8002b1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002b22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b26:	6053      	str	r3, [r2, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b28:	6823      	ldr	r3, [r4, #0]
 8002b2a:	e57e      	b.n	800262a <HAL_RCC_OscConfig+0xba>
 8002b2c:	58024400 	.word	0x58024400

08002b30 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b30:	4a47      	ldr	r2, [pc, #284]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x120>)
 8002b32:	6913      	ldr	r3, [r2, #16]
 8002b34:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b38:	2b10      	cmp	r3, #16
 8002b3a:	d004      	beq.n	8002b46 <HAL_RCC_GetSysClockFreq+0x16>
 8002b3c:	2b18      	cmp	r3, #24
 8002b3e:	d00d      	beq.n	8002b5c <HAL_RCC_GetSysClockFreq+0x2c>
 8002b40:	b11b      	cbz	r3, 8002b4a <HAL_RCC_GetSysClockFreq+0x1a>
    sysclockfreq = CSI_VALUE;
 8002b42:	4844      	ldr	r0, [pc, #272]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x124>)
 8002b44:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b46:	4844      	ldr	r0, [pc, #272]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x128>)
 8002b48:	4770      	bx	lr
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b4a:	6813      	ldr	r3, [r2, #0]
 8002b4c:	0699      	lsls	r1, r3, #26
 8002b4e:	d54a      	bpl.n	8002be6 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002b50:	6813      	ldr	r3, [r2, #0]
 8002b52:	4842      	ldr	r0, [pc, #264]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x12c>)
 8002b54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8002b58:	40d8      	lsrs	r0, r3
 8002b5a:	4770      	bx	lr
{
 8002b5c:	b430      	push	{r4, r5}
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b60:	6a94      	ldr	r4, [r2, #40]	; 0x28
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b62:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
    if (pllm != 0U)
 8002b64:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b68:	6b51      	ldr	r1, [r2, #52]	; 0x34
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002b6a:	f3c4 1005 	ubfx	r0, r4, #4, #6
    if (pllm != 0U)
 8002b6e:	d038      	beq.n	8002be2 <HAL_RCC_GetSysClockFreq+0xb2>
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b70:	f3c1 01cc 	ubfx	r1, r1, #3, #13
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002b74:	f005 0501 	and.w	r5, r5, #1
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b78:	f003 0303 	and.w	r3, r3, #3
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8002b7c:	fb05 f101 	mul.w	r1, r5, r1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	ee07 1a90 	vmov	s15, r1
 8002b86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      switch (pllsource)
 8002b8a:	d002      	beq.n	8002b92 <HAL_RCC_GetSysClockFreq+0x62>
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d02c      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0xba>
 8002b90:	b393      	cbz	r3, 8002bf8 <HAL_RCC_GetSysClockFreq+0xc8>
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002b92:	ee07 0a90 	vmov	s15, r0
 8002b96:	eddf 6a32 	vldr	s13, [pc, #200]	; 8002c60 <HAL_RCC_GetSysClockFreq+0x130>
 8002b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002ba0:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8002ba4:	eddf 5a2f 	vldr	s11, [pc, #188]	; 8002c64 <HAL_RCC_GetSysClockFreq+0x134>
 8002ba8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bac:	ee06 3a90 	vmov	s13, r3
 8002bb0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8002bb4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002bb8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8002bbc:	eee7 6a25 	vfma.f32	s13, s14, s11
 8002bc0:	ee66 6a26 	vmul.f32	s13, s12, s13
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002bc4:	4b22      	ldr	r3, [pc, #136]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x120>)
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002bcc:	3301      	adds	r3, #1
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8002bce:	ee07 3a90 	vmov	s15, r3
 8002bd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bde:	ee17 0a90 	vmov	r0, s15
}
 8002be2:	bc30      	pop	{r4, r5}
 8002be4:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002be6:	481d      	ldr	r0, [pc, #116]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x12c>)
}
 8002be8:	4770      	bx	lr
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002bea:	ee07 0a90 	vmov	s15, r0
 8002bee:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002c68 <HAL_RCC_GetSysClockFreq+0x138>
 8002bf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf6:	e7d2      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x6e>
       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf8:	6813      	ldr	r3, [r2, #0]
 8002bfa:	069b      	lsls	r3, r3, #26
 8002bfc:	d520      	bpl.n	8002c40 <HAL_RCC_GetSysClockFreq+0x110>
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002bfe:	6814      	ldr	r4, [r2, #0]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c00:	ee07 0a90 	vmov	s15, r0
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c04:	4915      	ldr	r1, [pc, #84]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x12c>)
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c06:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002c0a:	6b13      	ldr	r3, [r2, #48]	; 0x30
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c0c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c14:	ed9f 5a13 	vldr	s10, [pc, #76]	; 8002c64 <HAL_RCC_GetSysClockFreq+0x134>
 8002c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002c1c:	40e1      	lsrs	r1, r4
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c1e:	ee06 3a90 	vmov	s13, r3
 8002c22:	ee05 1a90 	vmov	s11, r1
 8002c26:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8002c2a:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8002c2e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002c32:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8002c36:	eee7 6a05 	vfma.f32	s13, s14, s10
 8002c3a:	ee66 6a26 	vmul.f32	s13, s12, s13
 8002c3e:	e7c1      	b.n	8002bc4 <HAL_RCC_GetSysClockFreq+0x94>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002c40:	ee07 0a90 	vmov	s15, r0
 8002c44:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002c6c <HAL_RCC_GetSysClockFreq+0x13c>
 8002c48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c4c:	e7a7      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x6e>
 8002c4e:	bf00      	nop
 8002c50:	58024400 	.word	0x58024400
 8002c54:	003d0900 	.word	0x003d0900
 8002c58:	017d7840 	.word	0x017d7840
 8002c5c:	03d09000 	.word	0x03d09000
 8002c60:	4a742400 	.word	0x4a742400
 8002c64:	39000000 	.word	0x39000000
 8002c68:	4bbebc20 	.word	0x4bbebc20
 8002c6c:	4c742400 	.word	0x4c742400

08002c70 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002c70:	2800      	cmp	r0, #0
 8002c72:	f000 811a 	beq.w	8002eaa <HAL_RCC_ClockConfig+0x23a>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c76:	4a92      	ldr	r2, [pc, #584]	; (8002ec0 <HAL_RCC_ClockConfig+0x250>)
{
 8002c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	6813      	ldr	r3, [r2, #0]
 8002c7e:	4604      	mov	r4, r0
 8002c80:	460d      	mov	r5, r1
 8002c82:	f003 030f 	and.w	r3, r3, #15
 8002c86:	428b      	cmp	r3, r1
 8002c88:	d20c      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	6813      	ldr	r3, [r2, #0]
 8002c8c:	f023 030f 	bic.w	r3, r3, #15
 8002c90:	430b      	orrs	r3, r1
 8002c92:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c94:	6813      	ldr	r3, [r2, #0]
 8002c96:	f003 030f 	and.w	r3, r3, #15
 8002c9a:	428b      	cmp	r3, r1
 8002c9c:	d002      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8002c9e:	2001      	movs	r0, #1
}
 8002ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ca4:	6823      	ldr	r3, [r4, #0]
 8002ca6:	075f      	lsls	r7, r3, #29
 8002ca8:	d50c      	bpl.n	8002cc4 <HAL_RCC_ClockConfig+0x54>
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002caa:	4986      	ldr	r1, [pc, #536]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002cac:	6920      	ldr	r0, [r4, #16]
 8002cae:	698a      	ldr	r2, [r1, #24]
 8002cb0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002cb4:	4290      	cmp	r0, r2
 8002cb6:	d905      	bls.n	8002cc4 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cb8:	698b      	ldr	r3, [r1, #24]
 8002cba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cbe:	4303      	orrs	r3, r0
 8002cc0:	618b      	str	r3, [r1, #24]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	6823      	ldr	r3, [r4, #0]
 8002cc4:	071e      	lsls	r6, r3, #28
 8002cc6:	d50c      	bpl.n	8002ce2 <HAL_RCC_ClockConfig+0x72>
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cc8:	497e      	ldr	r1, [pc, #504]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002cca:	6960      	ldr	r0, [r4, #20]
 8002ccc:	69ca      	ldr	r2, [r1, #28]
 8002cce:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002cd2:	4290      	cmp	r0, r2
 8002cd4:	d905      	bls.n	8002ce2 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002cd6:	69cb      	ldr	r3, [r1, #28]
 8002cd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cdc:	4303      	orrs	r3, r0
 8002cde:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	06d8      	lsls	r0, r3, #27
 8002ce4:	d50c      	bpl.n	8002d00 <HAL_RCC_ClockConfig+0x90>
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ce6:	4977      	ldr	r1, [pc, #476]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002ce8:	69a0      	ldr	r0, [r4, #24]
 8002cea:	69ca      	ldr	r2, [r1, #28]
 8002cec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002cf0:	4290      	cmp	r0, r2
 8002cf2:	d905      	bls.n	8002d00 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002cf4:	69cb      	ldr	r3, [r1, #28]
 8002cf6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cfa:	4303      	orrs	r3, r0
 8002cfc:	61cb      	str	r3, [r1, #28]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002cfe:	6823      	ldr	r3, [r4, #0]
 8002d00:	0699      	lsls	r1, r3, #26
 8002d02:	d50c      	bpl.n	8002d1e <HAL_RCC_ClockConfig+0xae>
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d04:	496f      	ldr	r1, [pc, #444]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002d06:	69e0      	ldr	r0, [r4, #28]
 8002d08:	6a0a      	ldr	r2, [r1, #32]
 8002d0a:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002d0e:	4290      	cmp	r0, r2
 8002d10:	d905      	bls.n	8002d1e <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002d12:	6a0b      	ldr	r3, [r1, #32]
 8002d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d18:	4303      	orrs	r3, r0
 8002d1a:	620b      	str	r3, [r1, #32]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	079a      	lsls	r2, r3, #30
 8002d20:	f140 8083 	bpl.w	8002e2a <HAL_RCC_ClockConfig+0x1ba>
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d24:	4867      	ldr	r0, [pc, #412]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002d26:	68e1      	ldr	r1, [r4, #12]
 8002d28:	6982      	ldr	r2, [r0, #24]
 8002d2a:	f002 020f 	and.w	r2, r2, #15
 8002d2e:	4291      	cmp	r1, r2
 8002d30:	f240 80a9 	bls.w	8002e86 <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d34:	6983      	ldr	r3, [r0, #24]
 8002d36:	f023 030f 	bic.w	r3, r3, #15
 8002d3a:	4319      	orrs	r1, r3
 8002d3c:	6181      	str	r1, [r0, #24]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d3e:	6823      	ldr	r3, [r4, #0]
 8002d40:	07df      	lsls	r7, r3, #31
 8002d42:	d474      	bmi.n	8002e2e <HAL_RCC_ClockConfig+0x1be>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d44:	079f      	lsls	r7, r3, #30
 8002d46:	d507      	bpl.n	8002d58 <HAL_RCC_ClockConfig+0xe8>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d48:	4a5e      	ldr	r2, [pc, #376]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002d4a:	68e1      	ldr	r1, [r4, #12]
 8002d4c:	6993      	ldr	r3, [r2, #24]
 8002d4e:	f003 030f 	and.w	r3, r3, #15
 8002d52:	428b      	cmp	r3, r1
 8002d54:	f200 80a0 	bhi.w	8002e98 <HAL_RCC_ClockConfig+0x228>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d58:	4a59      	ldr	r2, [pc, #356]	; (8002ec0 <HAL_RCC_ClockConfig+0x250>)
 8002d5a:	6813      	ldr	r3, [r2, #0]
 8002d5c:	f003 030f 	and.w	r3, r3, #15
 8002d60:	42ab      	cmp	r3, r5
 8002d62:	d909      	bls.n	8002d78 <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d64:	6813      	ldr	r3, [r2, #0]
 8002d66:	f023 030f 	bic.w	r3, r3, #15
 8002d6a:	432b      	orrs	r3, r5
 8002d6c:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6e:	6813      	ldr	r3, [r2, #0]
 8002d70:	f003 030f 	and.w	r3, r3, #15
 8002d74:	42ab      	cmp	r3, r5
 8002d76:	d192      	bne.n	8002c9e <HAL_RCC_ClockConfig+0x2e>
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d78:	6823      	ldr	r3, [r4, #0]
 8002d7a:	075e      	lsls	r6, r3, #29
 8002d7c:	d50c      	bpl.n	8002d98 <HAL_RCC_ClockConfig+0x128>
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d7e:	4951      	ldr	r1, [pc, #324]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002d80:	6920      	ldr	r0, [r4, #16]
 8002d82:	698a      	ldr	r2, [r1, #24]
 8002d84:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002d88:	4290      	cmp	r0, r2
 8002d8a:	d205      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x128>
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d8c:	698b      	ldr	r3, [r1, #24]
 8002d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d92:	4303      	orrs	r3, r0
 8002d94:	618b      	str	r3, [r1, #24]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d96:	6823      	ldr	r3, [r4, #0]
 8002d98:	071d      	lsls	r5, r3, #28
 8002d9a:	d50c      	bpl.n	8002db6 <HAL_RCC_ClockConfig+0x146>
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d9c:	4949      	ldr	r1, [pc, #292]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002d9e:	6960      	ldr	r0, [r4, #20]
 8002da0:	69ca      	ldr	r2, [r1, #28]
 8002da2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002da6:	4290      	cmp	r0, r2
 8002da8:	d205      	bcs.n	8002db6 <HAL_RCC_ClockConfig+0x146>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002daa:	69cb      	ldr	r3, [r1, #28]
 8002dac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002db0:	4303      	orrs	r3, r0
 8002db2:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	06d8      	lsls	r0, r3, #27
 8002db8:	d50c      	bpl.n	8002dd4 <HAL_RCC_ClockConfig+0x164>
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dba:	4942      	ldr	r1, [pc, #264]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002dbc:	69a0      	ldr	r0, [r4, #24]
 8002dbe:	69ca      	ldr	r2, [r1, #28]
 8002dc0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002dc4:	4290      	cmp	r0, r2
 8002dc6:	d205      	bcs.n	8002dd4 <HAL_RCC_ClockConfig+0x164>
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dc8:	69cb      	ldr	r3, [r1, #28]
 8002dca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dce:	4303      	orrs	r3, r0
 8002dd0:	61cb      	str	r3, [r1, #28]
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dd2:	6823      	ldr	r3, [r4, #0]
 8002dd4:	0699      	lsls	r1, r3, #26
 8002dd6:	d50b      	bpl.n	8002df0 <HAL_RCC_ClockConfig+0x180>
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dd8:	4a3a      	ldr	r2, [pc, #232]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002dda:	69e1      	ldr	r1, [r4, #28]
 8002ddc:	6a13      	ldr	r3, [r2, #32]
 8002dde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002de2:	4299      	cmp	r1, r3
 8002de4:	d204      	bcs.n	8002df0 <HAL_RCC_ClockConfig+0x180>
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002de6:	6a13      	ldr	r3, [r2, #32]
 8002de8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002df0:	f7ff fe9e 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002df4:	4a33      	ldr	r2, [pc, #204]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002df6:	4603      	mov	r3, r0
 8002df8:	4833      	ldr	r0, [pc, #204]	; (8002ec8 <HAL_RCC_ClockConfig+0x258>)
 8002dfa:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dfc:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dfe:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 8002e02:	4d32      	ldr	r5, [pc, #200]	; (8002ecc <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e04:	f002 020f 	and.w	r2, r2, #15
 8002e08:	4c31      	ldr	r4, [pc, #196]	; (8002ed0 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e0a:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e0c:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e0e:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick (uwTickPrio);
 8002e12:	4830      	ldr	r0, [pc, #192]	; (8002ed4 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e14:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e18:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick (uwTickPrio);
 8002e1a:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 8002e1c:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002e1e:	40d3      	lsrs	r3, r2
 8002e20:	6023      	str	r3, [r4, #0]
}
 8002e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick (uwTickPrio);
 8002e26:	f7fd ba57 	b.w	80002d8 <HAL_InitTick>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e2a:	07db      	lsls	r3, r3, #31
 8002e2c:	d594      	bpl.n	8002d58 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e2e:	4a25      	ldr	r2, [pc, #148]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002e30:	68a1      	ldr	r1, [r4, #8]
 8002e32:	6993      	ldr	r3, [r2, #24]
 8002e34:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e38:	430b      	orrs	r3, r1
 8002e3a:	6193      	str	r3, [r2, #24]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3c:	6861      	ldr	r1, [r4, #4]
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e3e:	6813      	ldr	r3, [r2, #0]
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e40:	2902      	cmp	r1, #2
 8002e42:	d034      	beq.n	8002eae <HAL_RCC_ClockConfig+0x23e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e44:	2903      	cmp	r1, #3
 8002e46:	d02d      	beq.n	8002ea4 <HAL_RCC_ClockConfig+0x234>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e48:	2901      	cmp	r1, #1
 8002e4a:	d035      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x248>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e4c:	075b      	lsls	r3, r3, #29
 8002e4e:	f57f af26 	bpl.w	8002c9e <HAL_RCC_ClockConfig+0x2e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e52:	4e1c      	ldr	r6, [pc, #112]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e54:	f241 3888 	movw	r8, #5000	; 0x1388
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e58:	6933      	ldr	r3, [r6, #16]
 8002e5a:	f023 0307 	bic.w	r3, r3, #7
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	6133      	str	r3, [r6, #16]
      tickstart = HAL_GetTick();
 8002e62:	f7fd fa9b 	bl	800039c <HAL_GetTick>
 8002e66:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e68:	e004      	b.n	8002e74 <HAL_RCC_ClockConfig+0x204>
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6a:	f7fd fa97 	bl	800039c <HAL_GetTick>
 8002e6e:	1bc0      	subs	r0, r0, r7
 8002e70:	4540      	cmp	r0, r8
 8002e72:	d81f      	bhi.n	8002eb4 <HAL_RCC_ClockConfig+0x244>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e74:	6933      	ldr	r3, [r6, #16]
 8002e76:	6862      	ldr	r2, [r4, #4]
 8002e78:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e7c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8002e80:	d1f3      	bne.n	8002e6a <HAL_RCC_ClockConfig+0x1fa>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e82:	6823      	ldr	r3, [r4, #0]
 8002e84:	e75e      	b.n	8002d44 <HAL_RCC_ClockConfig+0xd4>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e86:	07da      	lsls	r2, r3, #31
 8002e88:	d4d1      	bmi.n	8002e2e <HAL_RCC_ClockConfig+0x1be>
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e8a:	4a0e      	ldr	r2, [pc, #56]	; (8002ec4 <HAL_RCC_ClockConfig+0x254>)
 8002e8c:	6993      	ldr	r3, [r2, #24]
 8002e8e:	f003 030f 	and.w	r3, r3, #15
 8002e92:	428b      	cmp	r3, r1
 8002e94:	f67f af60 	bls.w	8002d58 <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e98:	6993      	ldr	r3, [r2, #24]
 8002e9a:	f023 030f 	bic.w	r3, r3, #15
 8002e9e:	4319      	orrs	r1, r3
 8002ea0:	6191      	str	r1, [r2, #24]
 8002ea2:	e759      	b.n	8002d58 <HAL_RCC_ClockConfig+0xe8>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ea4:	0198      	lsls	r0, r3, #6
 8002ea6:	d4d4      	bmi.n	8002e52 <HAL_RCC_ClockConfig+0x1e2>
 8002ea8:	e6f9      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002eaa:	2001      	movs	r0, #1
}
 8002eac:	4770      	bx	lr
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002eae:	039e      	lsls	r6, r3, #14
 8002eb0:	d4cf      	bmi.n	8002e52 <HAL_RCC_ClockConfig+0x1e2>
 8002eb2:	e6f4      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2e>
            return HAL_TIMEOUT;
 8002eb4:	2003      	movs	r0, #3
 8002eb6:	e6f3      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x30>
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002eb8:	05da      	lsls	r2, r3, #23
 8002eba:	d4ca      	bmi.n	8002e52 <HAL_RCC_ClockConfig+0x1e2>
 8002ebc:	e6ef      	b.n	8002c9e <HAL_RCC_ClockConfig+0x2e>
 8002ebe:	bf00      	nop
 8002ec0:	52002000 	.word	0x52002000
 8002ec4:	58024400 	.word	0x58024400
 8002ec8:	0800d53c 	.word	0x0800d53c
 8002ecc:	2000093c 	.word	0x2000093c
 8002ed0:	20000940 	.word	0x20000940
 8002ed4:	20000004 	.word	0x20000004

08002ed8 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ed8:	4a18      	ldr	r2, [pc, #96]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eda:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002edc:	6913      	ldr	r3, [r2, #16]
 8002ede:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d01a      	beq.n	8002f1c <HAL_RCC_GetHCLKFreq+0x44>
 8002ee6:	2b18      	cmp	r3, #24
 8002ee8:	d023      	beq.n	8002f32 <HAL_RCC_GetHCLKFreq+0x5a>
 8002eea:	b1cb      	cbz	r3, 8002f20 <HAL_RCC_GetHCLKFreq+0x48>
    sysclockfreq = CSI_VALUE;
 8002eec:	4814      	ldr	r0, [pc, #80]	; (8002f40 <HAL_RCC_GetHCLKFreq+0x68>)
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_RCC_GetHCLKFreq+0x64>)
 8002ef0:	4914      	ldr	r1, [pc, #80]	; (8002f44 <HAL_RCC_GetHCLKFreq+0x6c>)
 8002ef2:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ef4:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002ef6:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002efa:	4c13      	ldr	r4, [pc, #76]	; (8002f48 <HAL_RCC_GetHCLKFreq+0x70>)
 8002efc:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f00:	4d12      	ldr	r5, [pc, #72]	; (8002f4c <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f02:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f06:	f002 021f 	and.w	r2, r2, #31
 8002f0a:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f0e:	f003 001f 	and.w	r0, r3, #31
 8002f12:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 8002f16:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f18:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 8002f1a:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f1c:	480c      	ldr	r0, [pc, #48]	; (8002f50 <HAL_RCC_GetHCLKFreq+0x78>)
 8002f1e:	e7e6      	b.n	8002eee <HAL_RCC_GetHCLKFreq+0x16>
   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	069b      	lsls	r3, r3, #26
 8002f24:	d508      	bpl.n	8002f38 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002f26:	6812      	ldr	r2, [r2, #0]
 8002f28:	480a      	ldr	r0, [pc, #40]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002f2a:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002f2e:	40d0      	lsrs	r0, r2
 8002f30:	e7dd      	b.n	8002eee <HAL_RCC_GetHCLKFreq+0x16>
 8002f32:	f7ff fa99 	bl	8002468 <HAL_RCC_GetSysClockFreq.part.0>
 8002f36:	e7da      	b.n	8002eee <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002f38:	4806      	ldr	r0, [pc, #24]	; (8002f54 <HAL_RCC_GetHCLKFreq+0x7c>)
 8002f3a:	e7d8      	b.n	8002eee <HAL_RCC_GetHCLKFreq+0x16>
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	003d0900 	.word	0x003d0900
 8002f44:	0800d53c 	.word	0x0800d53c
 8002f48:	20000940 	.word	0x20000940
 8002f4c:	2000093c 	.word	0x2000093c
 8002f50:	017d7840 	.word	0x017d7840
 8002f54:	03d09000 	.word	0x03d09000

08002f58 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8002f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8002f5a:	4c3a      	ldr	r4, [pc, #232]	; (8003044 <RCCEx_PLL2_Config+0xec>)
 8002f5c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f5e:	f003 0303 	and.w	r3, r3, #3
 8002f62:	2b03      	cmp	r3, #3
 8002f64:	d067      	beq.n	8003036 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8002f66:	6823      	ldr	r3, [r4, #0]
 8002f68:	4606      	mov	r6, r0
 8002f6a:	460f      	mov	r7, r1
 8002f6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f70:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f72:	f7fd fa13 	bl	800039c <HAL_GetTick>
 8002f76:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f78:	e004      	b.n	8002f84 <RCCEx_PLL2_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8002f7a:	f7fd fa0f 	bl	800039c <HAL_GetTick>
 8002f7e:	1b43      	subs	r3, r0, r5
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d856      	bhi.n	8003032 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8002f84:	6823      	ldr	r3, [r4, #0]
 8002f86:	011a      	lsls	r2, r3, #4
 8002f88:	d4f7      	bmi.n	8002f7a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8002f8a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002f8c:	6832      	ldr	r2, [r6, #0]
 8002f8e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002f92:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 8002f96:	62a3      	str	r3, [r4, #40]	; 0x28
 8002f98:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	3a01      	subs	r2, #1
 8002fa0:	025b      	lsls	r3, r3, #9
 8002fa2:	0412      	lsls	r2, r2, #16
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8002faa:	4313      	orrs	r3, r2
 8002fac:	6872      	ldr	r2, [r6, #4]
 8002fae:	3a01      	subs	r2, #1
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	6932      	ldr	r2, [r6, #16]
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0612      	lsls	r2, r2, #24
 8002fbc:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8002fc4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002fc6:	6972      	ldr	r2, [r6, #20]
 8002fc8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002fd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fd2:	69b3      	ldr	r3, [r6, #24]
 8002fd4:	f022 0220 	bic.w	r2, r2, #32
 8002fd8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002fda:	4b1b      	ldr	r3, [pc, #108]	; (8003048 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8002fdc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 8002fde:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002fe0:	f022 0210 	bic.w	r2, r2, #16
 8002fe4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8002fe6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002fe8:	69f2      	ldr	r2, [r6, #28]
 8002fea:	400b      	ands	r3, r1
 8002fec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002ff0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8002ff2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002ff4:	f043 0310 	orr.w	r3, r3, #16
 8002ff8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8002ffa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 8002ffc:	b1ef      	cbz	r7, 800303a <RCCEx_PLL2_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8002ffe:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003000:	bf0c      	ite	eq
 8003002:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003006:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800300a:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800300c:	4c0d      	ldr	r4, [pc, #52]	; (8003044 <RCCEx_PLL2_Config+0xec>)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003014:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003016:	f7fd f9c1 	bl	800039c <HAL_GetTick>
 800301a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800301c:	e004      	b.n	8003028 <RCCEx_PLL2_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800301e:	f7fd f9bd 	bl	800039c <HAL_GetTick>
 8003022:	1b40      	subs	r0, r0, r5
 8003024:	2802      	cmp	r0, #2
 8003026:	d804      	bhi.n	8003032 <RCCEx_PLL2_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003028:	6823      	ldr	r3, [r4, #0]
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	d5f7      	bpl.n	800301e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800302e:	2000      	movs	r0, #0
}
 8003030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003032:	2003      	movs	r0, #3
}
 8003034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8003036:	2001      	movs	r0, #1
}
 8003038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800303a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800303e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003040:	e7e4      	b.n	800300c <RCCEx_PLL2_Config+0xb4>
 8003042:	bf00      	nop
 8003044:	58024400 	.word	0x58024400
 8003048:	ffff0007 	.word	0xffff0007

0800304c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800304e:	4c3a      	ldr	r4, [pc, #232]	; (8003138 <RCCEx_PLL3_Config+0xec>)
 8003050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	2b03      	cmp	r3, #3
 8003058:	d067      	beq.n	800312a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	4606      	mov	r6, r0
 800305e:	460f      	mov	r7, r1
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003066:	f7fd f999 	bl	800039c <HAL_GetTick>
 800306a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800306c:	e004      	b.n	8003078 <RCCEx_PLL3_Config+0x2c>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800306e:	f7fd f995 	bl	800039c <HAL_GetTick>
 8003072:	1b43      	subs	r3, r0, r5
 8003074:	2b02      	cmp	r3, #2
 8003076:	d856      	bhi.n	8003126 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003078:	6823      	ldr	r3, [r4, #0]
 800307a:	009a      	lsls	r2, r3, #2
 800307c:	d4f7      	bmi.n	800306e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800307e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003080:	6832      	ldr	r2, [r6, #0]
 8003082:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 8003086:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800308a:	62a3      	str	r3, [r4, #40]	; 0x28
 800308c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 8003090:	3b01      	subs	r3, #1
 8003092:	3a01      	subs	r2, #1
 8003094:	025b      	lsls	r3, r3, #9
 8003096:	0412      	lsls	r2, r2, #16
 8003098:	b29b      	uxth	r3, r3
 800309a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800309e:	4313      	orrs	r3, r2
 80030a0:	6872      	ldr	r2, [r6, #4]
 80030a2:	3a01      	subs	r2, #1
 80030a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a8:	4313      	orrs	r3, r2
 80030aa:	6932      	ldr	r2, [r6, #16]
 80030ac:	3a01      	subs	r2, #1
 80030ae:	0612      	lsls	r2, r2, #24
 80030b0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80030b4:	4313      	orrs	r3, r2
 80030b6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80030b8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030ba:	6972      	ldr	r2, [r6, #20]
 80030bc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80030c0:	4313      	orrs	r3, r2
 80030c2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80030c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030c6:	69b3      	ldr	r3, [r6, #24]
 80030c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030cc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80030ce:	4b1b      	ldr	r3, [pc, #108]	; (800313c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80030d0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 80030d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80030d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80030da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80030dc:	69f2      	ldr	r2, [r6, #28]
 80030de:	400b      	ands	r3, r1
 80030e0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80030e4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80030e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80030e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030ec:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80030ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if(Divider == DIVIDER_P_UPDATE)
 80030f0:	b1ef      	cbz	r7, 800312e <RCCEx_PLL3_Config+0xe2>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80030f2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80030f4:	bf0c      	ite	eq
 80030f6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80030fa:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 80030fe:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003100:	4c0d      	ldr	r4, [pc, #52]	; (8003138 <RCCEx_PLL3_Config+0xec>)
 8003102:	6823      	ldr	r3, [r4, #0]
 8003104:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003108:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310a:	f7fd f947 	bl	800039c <HAL_GetTick>
 800310e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003110:	e004      	b.n	800311c <RCCEx_PLL3_Config+0xd0>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003112:	f7fd f943 	bl	800039c <HAL_GetTick>
 8003116:	1b40      	subs	r0, r0, r5
 8003118:	2802      	cmp	r0, #2
 800311a:	d804      	bhi.n	8003126 <RCCEx_PLL3_Config+0xda>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	d5f7      	bpl.n	8003112 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 8003122:	2000      	movs	r0, #0
}
 8003124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003126:	2003      	movs	r0, #3
}
 8003128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800312a:	2001      	movs	r0, #1
}
 800312c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800312e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003132:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003134:	e7e4      	b.n	8003100 <RCCEx_PLL3_Config+0xb4>
 8003136:	bf00      	nop
 8003138:	58024400 	.word	0x58024400
 800313c:	ffff0007 	.word	0xffff0007

08003140 <HAL_RCCEx_PeriphCLKConfig>:
{
 8003140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003144:	6803      	ldr	r3, [r0, #0]
{
 8003146:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003148:	f013 6600 	ands.w	r6, r3, #134217728	; 0x8000000
 800314c:	d020      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x50>
    switch(PeriphClkInit->SpdifrxClockSelection)
 800314e:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003150:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003154:	f000 84bf 	beq.w	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x996>
 8003158:	d80e      	bhi.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x38>
 800315a:	2a00      	cmp	r2, #0
 800315c:	f000 851b 	beq.w	8003b96 <HAL_RCCEx_PeriphCLKConfig+0xa56>
 8003160:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003164:	f040 8514 	bne.w	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003168:	2102      	movs	r1, #2
 800316a:	3004      	adds	r0, #4
 800316c:	f7ff fef4 	bl	8002f58 <RCCEx_PLL2_Config>
 8003170:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003172:	b966      	cbnz	r6, 800318e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003174:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003176:	e003      	b.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003178:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800317c:	f040 8508 	bne.w	8003b90 <HAL_RCCEx_PeriphCLKConfig+0xa50>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003180:	499b      	ldr	r1, [pc, #620]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003182:	2600      	movs	r6, #0
 8003184:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8003186:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800318a:	431a      	orrs	r2, r3
 800318c:	650a      	str	r2, [r1, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800318e:	6823      	ldr	r3, [r4, #0]
 8003190:	05dd      	lsls	r5, r3, #23
 8003192:	d50a      	bpl.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x6a>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003194:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003196:	2a04      	cmp	r2, #4
 8003198:	d806      	bhi.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x68>
 800319a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800319e:	04b6      	.short	0x04b6
 80031a0:	04cb04c5 	.word	0x04cb04c5
 80031a4:	02d902d9 	.word	0x02d902d9
 80031a8:	2601      	movs	r6, #1
 80031aa:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80031ac:	0598      	lsls	r0, r3, #22
 80031ae:	d515      	bpl.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch(PeriphClkInit->Sai23ClockSelection)
 80031b0:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80031b2:	2a80      	cmp	r2, #128	; 0x80
 80031b4:	f000 84a1 	beq.w	8003afa <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80031b8:	f200 80d3 	bhi.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80031bc:	2a00      	cmp	r2, #0
 80031be:	f000 83a3 	beq.w	8003908 <HAL_RCCEx_PeriphCLKConfig+0x7c8>
 80031c2:	2a40      	cmp	r2, #64	; 0x40
 80031c4:	f040 80d4 	bne.w	8003370 <HAL_RCCEx_PeriphCLKConfig+0x230>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031c8:	2100      	movs	r1, #0
 80031ca:	1d20      	adds	r0, r4, #4
 80031cc:	f7ff fec4 	bl	8002f58 <RCCEx_PLL2_Config>
 80031d0:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80031d2:	2d00      	cmp	r5, #0
 80031d4:	f000 835f 	beq.w	8003896 <HAL_RCCEx_PeriphCLKConfig+0x756>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031d8:	6823      	ldr	r3, [r4, #0]
 80031da:	462e      	mov	r6, r5
 80031dc:	0559      	lsls	r1, r3, #21
 80031de:	d518      	bpl.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch(PeriphClkInit->Sai4AClockSelection)
 80031e0:	f8d4 20a4 	ldr.w	r2, [r4, #164]	; 0xa4
 80031e4:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80031e8:	f000 84ab 	beq.w	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xa02>
 80031ec:	f200 80c3 	bhi.w	8003376 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80031f0:	2a00      	cmp	r2, #0
 80031f2:	f000 839b 	beq.w	800392c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
 80031f6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80031fa:	f040 80c4 	bne.w	8003386 <HAL_RCCEx_PeriphCLKConfig+0x246>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031fe:	2100      	movs	r1, #0
 8003200:	1d20      	adds	r0, r4, #4
 8003202:	f7ff fea9 	bl	8002f58 <RCCEx_PLL2_Config>
 8003206:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003208:	2d00      	cmp	r5, #0
 800320a:	f000 8356 	beq.w	80038ba <HAL_RCCEx_PeriphCLKConfig+0x77a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800320e:	6823      	ldr	r3, [r4, #0]
 8003210:	462e      	mov	r6, r5
 8003212:	051a      	lsls	r2, r3, #20
 8003214:	d518      	bpl.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x108>
    switch(PeriphClkInit->Sai4BClockSelection)
 8003216:	f8d4 20a8 	ldr.w	r2, [r4, #168]	; 0xa8
 800321a:	f1b2 7f00 	cmp.w	r2, #33554432	; 0x2000000
 800321e:	f000 847b 	beq.w	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x9d8>
 8003222:	f200 80b3 	bhi.w	800338c <HAL_RCCEx_PeriphCLKConfig+0x24c>
 8003226:	2a00      	cmp	r2, #0
 8003228:	f000 8374 	beq.w	8003914 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
 800322c:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8003230:	f040 80b4 	bne.w	800339c <HAL_RCCEx_PeriphCLKConfig+0x25c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003234:	2100      	movs	r1, #0
 8003236:	1d20      	adds	r0, r4, #4
 8003238:	f7ff fe8e 	bl	8002f58 <RCCEx_PLL2_Config>
 800323c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800323e:	2d00      	cmp	r5, #0
 8003240:	f000 834e 	beq.w	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x7a0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003244:	6823      	ldr	r3, [r4, #0]
 8003246:	462e      	mov	r6, r5
 8003248:	019f      	lsls	r7, r3, #6
 800324a:	d519      	bpl.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch(PeriphClkInit->QspiClockSelection)
 800324c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800324e:	2a20      	cmp	r2, #32
 8003250:	f000 83f5 	beq.w	8003a3e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 8003254:	f200 80a5 	bhi.w	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
 8003258:	b13a      	cbz	r2, 800326a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 800325a:	2a10      	cmp	r2, #16
 800325c:	f040 80a4 	bne.w	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003260:	4a63      	ldr	r2, [pc, #396]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003262:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003264:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003268:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 800326a:	2d00      	cmp	r5, #0
 800326c:	f040 8389 	bne.w	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003270:	4a5f      	ldr	r2, [pc, #380]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8003272:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8003274:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8003276:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800327a:	430b      	orrs	r3, r1
 800327c:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	04d8      	lsls	r0, r3, #19
 8003282:	d517      	bpl.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch(PeriphClkInit->Spi123ClockSelection)
 8003284:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8003286:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800328a:	f000 842e 	beq.w	8003aea <HAL_RCCEx_PeriphCLKConfig+0x9aa>
 800328e:	f200 808e 	bhi.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003292:	2a00      	cmp	r2, #0
 8003294:	f000 8344 	beq.w	8003920 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
 8003298:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800329c:	f040 808f 	bne.w	80033be <HAL_RCCEx_PeriphCLKConfig+0x27e>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80032a0:	2100      	movs	r1, #0
 80032a2:	1d20      	adds	r0, r4, #4
 80032a4:	f7ff fe58 	bl	8002f58 <RCCEx_PLL2_Config>
 80032a8:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032aa:	2d00      	cmp	r5, #0
 80032ac:	f000 82fc 	beq.w	80038a8 <HAL_RCCEx_PeriphCLKConfig+0x768>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	462e      	mov	r6, r5
 80032b4:	0499      	lsls	r1, r3, #18
 80032b6:	d51a      	bpl.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->Spi45ClockSelection)
 80032b8:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80032ba:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80032be:	f000 83de 	beq.w	8003a7e <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80032c2:	d87f      	bhi.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 80032c4:	b142      	cbz	r2, 80032d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032c6:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80032ca:	f040 8083 	bne.w	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x294>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80032ce:	2101      	movs	r1, #1
 80032d0:	1d20      	adds	r0, r4, #4
 80032d2:	f7ff fe41 	bl	8002f58 <RCCEx_PLL2_Config>
 80032d6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80032d8:	2d00      	cmp	r5, #0
 80032da:	f040 8355 	bne.w	8003988 <HAL_RCCEx_PeriphCLKConfig+0x848>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032de:	4a44      	ldr	r2, [pc, #272]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 80032e0:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80032e2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80032e4:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80032e8:	430b      	orrs	r3, r1
 80032ea:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032ec:	6823      	ldr	r3, [r4, #0]
 80032ee:	045a      	lsls	r2, r3, #17
 80032f0:	d51b      	bpl.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    switch(PeriphClkInit->Spi6ClockSelection)
 80032f2:	f8d4 20ac 	ldr.w	r2, [r4, #172]	; 0xac
 80032f6:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80032fa:	f000 83ca 	beq.w	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80032fe:	d86c      	bhi.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x29a>
 8003300:	b13a      	cbz	r2, 8003312 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 8003302:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003306:	d170      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x2aa>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003308:	2101      	movs	r1, #1
 800330a:	1d20      	adds	r0, r4, #4
 800330c:	f7ff fe24 	bl	8002f58 <RCCEx_PLL2_Config>
 8003310:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003312:	2d00      	cmp	r5, #0
 8003314:	f040 833b 	bne.w	800398e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003318:	4a35      	ldr	r2, [pc, #212]	; (80033f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800331a:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800331e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003320:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003324:	430b      	orrs	r3, r1
 8003326:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003328:	6823      	ldr	r3, [r4, #0]
 800332a:	041f      	lsls	r7, r3, #16
 800332c:	d50d      	bpl.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x20a>
    switch(PeriphClkInit->FdcanClockSelection)
 800332e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8003330:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 8003334:	f000 8390 	beq.w	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x918>
 8003338:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800333c:	f000 820f 	beq.w	800375e <HAL_RCCEx_PeriphCLKConfig+0x61e>
 8003340:	2a00      	cmp	r2, #0
 8003342:	f000 8211 	beq.w	8003768 <HAL_RCCEx_PeriphCLKConfig+0x628>
 8003346:	2601      	movs	r6, #1
 8003348:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800334a:	01d8      	lsls	r0, r3, #7
 800334c:	d55c      	bpl.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    switch(PeriphClkInit->FmcClockSelection)
 800334e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003350:	2a03      	cmp	r2, #3
 8003352:	f200 844c 	bhi.w	8003bee <HAL_RCCEx_PeriphCLKConfig+0xaae>
 8003356:	e8df f012 	tbh	[pc, r2, lsl #1]
 800335a:	0052      	.short	0x0052
 800335c:	004d0360 	.word	0x004d0360
 8003360:	0052      	.short	0x0052
    switch(PeriphClkInit->Sai23ClockSelection)
 8003362:	2ac0      	cmp	r2, #192	; 0xc0
 8003364:	f43f af35 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003368:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800336c:	f43f af31 	beq.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
 8003370:	2601      	movs	r6, #1
 8003372:	4635      	mov	r5, r6
 8003374:	e732      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    switch(PeriphClkInit->Sai4AClockSelection)
 8003376:	f5b2 0fc0 	cmp.w	r2, #6291456	; 0x600000
 800337a:	f43f af45 	beq.w	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 800337e:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8003382:	f43f af41 	beq.w	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc8>
 8003386:	2601      	movs	r6, #1
 8003388:	4635      	mov	r5, r6
 800338a:	e742      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    switch(PeriphClkInit->Sai4BClockSelection)
 800338c:	f1b2 7f40 	cmp.w	r2, #50331648	; 0x3000000
 8003390:	f43f af55 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003394:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
 8003398:	f43f af51 	beq.w	800323e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800339c:	2601      	movs	r6, #1
 800339e:	4635      	mov	r5, r6
 80033a0:	e752      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x108>
    switch(PeriphClkInit->QspiClockSelection)
 80033a2:	2a30      	cmp	r2, #48	; 0x30
 80033a4:	f43f af61 	beq.w	800326a <HAL_RCCEx_PeriphCLKConfig+0x12a>
 80033a8:	2601      	movs	r6, #1
 80033aa:	4635      	mov	r5, r6
 80033ac:	e768      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>
    switch(PeriphClkInit->Spi123ClockSelection)
 80033ae:	f5b2 5f40 	cmp.w	r2, #12288	; 0x3000
 80033b2:	f43f af7a 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80033b6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80033ba:	f43f af76 	beq.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80033be:	2601      	movs	r6, #1
 80033c0:	4635      	mov	r5, r6
 80033c2:	e777      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    switch(PeriphClkInit->Spi45ClockSelection)
 80033c4:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 80033c8:	f5b1 2f80 	cmp.w	r1, #262144	; 0x40000
 80033cc:	d084      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033ce:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 80033d2:	d081      	beq.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80033d4:	2601      	movs	r6, #1
 80033d6:	4635      	mov	r5, r6
 80033d8:	e789      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
    switch(PeriphClkInit->Spi6ClockSelection)
 80033da:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80033de:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80033e2:	d096      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80033e4:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80033e8:	d093      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
 80033ea:	2601      	movs	r6, #1
 80033ec:	4635      	mov	r5, r6
 80033ee:	e79c      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80033f0:	58024400 	.word	0x58024400
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80033f4:	2102      	movs	r1, #2
 80033f6:	1d20      	adds	r0, r4, #4
 80033f8:	f7ff fdae 	bl	8002f58 <RCCEx_PLL2_Config>
 80033fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80033fe:	2d00      	cmp	r5, #0
 8003400:	f000 82a0 	beq.w	8003944 <HAL_RCCEx_PeriphCLKConfig+0x804>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003404:	6823      	ldr	r3, [r4, #0]
 8003406:	462e      	mov	r6, r5
 8003408:	0259      	lsls	r1, r3, #9
 800340a:	f100 81f4 	bmi.w	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800340e:	07df      	lsls	r7, r3, #31
 8003410:	d52f      	bpl.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x332>
    switch(PeriphClkInit->Usart16ClockSelection)
 8003412:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8003414:	2a28      	cmp	r2, #40	; 0x28
 8003416:	d82a      	bhi.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 8003418:	e8df f012 	tbh	[pc, r2, lsl #1]
 800341c:	002901e1 	.word	0x002901e1
 8003420:	00290029 	.word	0x00290029
 8003424:	00290029 	.word	0x00290029
 8003428:	00290029 	.word	0x00290029
 800342c:	002903ad 	.word	0x002903ad
 8003430:	00290029 	.word	0x00290029
 8003434:	00290029 	.word	0x00290029
 8003438:	00290029 	.word	0x00290029
 800343c:	002901db 	.word	0x002901db
 8003440:	00290029 	.word	0x00290029
 8003444:	00290029 	.word	0x00290029
 8003448:	00290029 	.word	0x00290029
 800344c:	002901e1 	.word	0x002901e1
 8003450:	00290029 	.word	0x00290029
 8003454:	00290029 	.word	0x00290029
 8003458:	00290029 	.word	0x00290029
 800345c:	002901e1 	.word	0x002901e1
 8003460:	00290029 	.word	0x00290029
 8003464:	00290029 	.word	0x00290029
 8003468:	00290029 	.word	0x00290029
 800346c:	01e1      	.short	0x01e1
 800346e:	2601      	movs	r6, #1
 8003470:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003472:	0798      	lsls	r0, r3, #30
 8003474:	d516      	bpl.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003476:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8003478:	2a05      	cmp	r2, #5
 800347a:	f200 83b5 	bhi.w	8003be8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800347e:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003482:	000c      	.short	0x000c
 8003484:	00060368 	.word	0x00060368
 8003488:	000c000c 	.word	0x000c000c
 800348c:	000c      	.short	0x000c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800348e:	2101      	movs	r1, #1
 8003490:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003494:	f7ff fdda 	bl	800304c <RCCEx_PLL3_Config>
 8003498:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800349a:	2d00      	cmp	r5, #0
 800349c:	f000 825e 	beq.w	800395c <HAL_RCCEx_PeriphCLKConfig+0x81c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80034a0:	6823      	ldr	r3, [r4, #0]
 80034a2:	462e      	mov	r6, r5
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d517      	bpl.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80034a8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80034ac:	2a05      	cmp	r2, #5
 80034ae:	f200 83a1 	bhi.w	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80034b2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80034b6:	000c      	.short	0x000c
 80034b8:	00060357 	.word	0x00060357
 80034bc:	000c000c 	.word	0x000c000c
 80034c0:	000c      	.short	0x000c
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80034c2:	2101      	movs	r1, #1
 80034c4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80034c8:	f7ff fdc0 	bl	800304c <RCCEx_PLL3_Config>
 80034cc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80034ce:	2d00      	cmp	r5, #0
 80034d0:	f000 824d 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x82e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	462e      	mov	r6, r5
 80034d8:	069a      	lsls	r2, r3, #26
 80034da:	d51d      	bpl.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    switch(PeriphClkInit->Lptim1ClockSelection)
 80034dc:	f8d4 208c 	ldr.w	r2, [r4, #140]	; 0x8c
 80034e0:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 80034e4:	f000 828f 	beq.w	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
 80034e8:	f200 80ed 	bhi.w	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80034ec:	b142      	cbz	r2, 8003500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80034ee:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
 80034f2:	f040 80f2 	bne.w	80036da <HAL_RCCEx_PeriphCLKConfig+0x59a>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80034f6:	2100      	movs	r1, #0
 80034f8:	1d20      	adds	r0, r4, #4
 80034fa:	f7ff fd2d 	bl	8002f58 <RCCEx_PLL2_Config>
 80034fe:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003500:	2d00      	cmp	r5, #0
 8003502:	f040 821c 	bne.w	800393e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003506:	4aa8      	ldr	r2, [pc, #672]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003508:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800350c:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800350e:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8003512:	430b      	orrs	r3, r1
 8003514:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	065f      	lsls	r7, r3, #25
 800351a:	d51d      	bpl.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->Lptim2ClockSelection)
 800351c:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 8003520:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8003524:	f000 8281 	beq.w	8003a2a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 8003528:	f200 80da 	bhi.w	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
 800352c:	b142      	cbz	r2, 8003540 <HAL_RCCEx_PeriphCLKConfig+0x400>
 800352e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003532:	f040 80df 	bne.w	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5b4>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003536:	2100      	movs	r1, #0
 8003538:	1d20      	adds	r0, r4, #4
 800353a:	f7ff fd0d 	bl	8002f58 <RCCEx_PLL2_Config>
 800353e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003540:	2d00      	cmp	r5, #0
 8003542:	f040 8227 	bne.w	8003994 <HAL_RCCEx_PeriphCLKConfig+0x854>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003546:	4a98      	ldr	r2, [pc, #608]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003548:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
 800354c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800354e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8003552:	430b      	orrs	r3, r1
 8003554:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003556:	6823      	ldr	r3, [r4, #0]
 8003558:	0618      	lsls	r0, r3, #24
 800355a:	d51d      	bpl.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x458>
    switch(PeriphClkInit->Lptim345ClockSelection)
 800355c:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8003560:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8003564:	f000 8281 	beq.w	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x92a>
 8003568:	f200 80c7 	bhi.w	80036fa <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 800356c:	b142      	cbz	r2, 8003580 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800356e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8003572:	f040 80cc 	bne.w	800370e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003576:	2100      	movs	r1, #0
 8003578:	1d20      	adds	r0, r4, #4
 800357a:	f7ff fced 	bl	8002f58 <RCCEx_PLL2_Config>
 800357e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003580:	2d00      	cmp	r5, #0
 8003582:	f040 81e8 	bne.w	8003956 <HAL_RCCEx_PeriphCLKConfig+0x816>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003586:	4a88      	ldr	r2, [pc, #544]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003588:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800358c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800358e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8003592:	430b      	orrs	r3, r1
 8003594:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003596:	6823      	ldr	r3, [r4, #0]
 8003598:	0719      	lsls	r1, r3, #28
 800359a:	d50c      	bpl.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x476>
    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800359c:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80035a0:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80035a4:	f000 828b 	beq.w	8003abe <HAL_RCCEx_PeriphCLKConfig+0x97e>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80035a8:	497f      	ldr	r1, [pc, #508]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 80035aa:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80035ac:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035b0:	4313      	orrs	r3, r2
 80035b2:	654b      	str	r3, [r1, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80035b4:	6823      	ldr	r3, [r4, #0]
 80035b6:	06da      	lsls	r2, r3, #27
 80035b8:	d50c      	bpl.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80035ba:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
 80035be:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80035c2:	f000 8270 	beq.w	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x966>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035c6:	4978      	ldr	r1, [pc, #480]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 80035c8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 80035ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ce:	4313      	orrs	r3, r2
 80035d0:	658b      	str	r3, [r1, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035d2:	6823      	ldr	r3, [r4, #0]
 80035d4:	031f      	lsls	r7, r3, #12
 80035d6:	d50e      	bpl.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
    switch(PeriphClkInit->AdcClockSelection)
 80035d8:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80035dc:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 80035e0:	f000 80e4 	beq.w	80037ac <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80035e4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 80035e8:	f000 80e6 	beq.w	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x678>
 80035ec:	2900      	cmp	r1, #0
 80035ee:	f000 8202 	beq.w	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x8b6>
 80035f2:	2601      	movs	r6, #1
 80035f4:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035f6:	0358      	lsls	r0, r3, #13
 80035f8:	d50f      	bpl.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4da>
    switch(PeriphClkInit->UsbClockSelection)
 80035fa:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 80035fe:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 8003602:	f000 80bd 	beq.w	8003780 <HAL_RCCEx_PeriphCLKConfig+0x640>
 8003606:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 800360a:	f000 80bf 	beq.w	800378c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800360e:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 8003612:	f000 81e7 	beq.w	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
 8003616:	2601      	movs	r6, #1
 8003618:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800361a:	03d9      	lsls	r1, r3, #15
 800361c:	d509      	bpl.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch(PeriphClkInit->SdmmcClockSelection)
 800361e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8003620:	2a00      	cmp	r2, #0
 8003622:	f000 81cf 	beq.w	80039c4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 8003626:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800362a:	f000 8163 	beq.w	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
 800362e:	2601      	movs	r6, #1
 8003630:	4635      	mov	r5, r6
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003632:	009a      	lsls	r2, r3, #2
 8003634:	f100 8124 	bmi.w	8003880 <HAL_RCCEx_PeriphCLKConfig+0x740>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003638:	039f      	lsls	r7, r3, #14
 800363a:	d46b      	bmi.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
    return HAL_OK;
 800363c:	1e30      	subs	r0, r6, #0
 800363e:	bf18      	it	ne
 8003640:	2001      	movne	r0, #1
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003642:	02de      	lsls	r6, r3, #11
 8003644:	d507      	bpl.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x516>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003646:	4a58      	ldr	r2, [pc, #352]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003648:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800364a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800364c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003650:	430b      	orrs	r3, r1
 8003652:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	00dd      	lsls	r5, r3, #3
 8003658:	d508      	bpl.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800365a:	4a53      	ldr	r2, [pc, #332]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 800365c:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
 8003660:	6913      	ldr	r3, [r2, #16]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	430b      	orrs	r3, r1
 8003668:	6113      	str	r3, [r2, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800366a:	6823      	ldr	r3, [r4, #0]
 800366c:	0299      	lsls	r1, r3, #10
 800366e:	d507      	bpl.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x540>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003670:	4a4d      	ldr	r2, [pc, #308]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003672:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8003674:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	430b      	orrs	r3, r1
 800367c:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800367e:	6823      	ldr	r3, [r4, #0]
 8003680:	005a      	lsls	r2, r3, #1
 8003682:	d50a      	bpl.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003684:	4b48      	ldr	r3, [pc, #288]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003686:	691a      	ldr	r2, [r3, #16]
 8003688:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800368c:	611a      	str	r2, [r3, #16]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 8003694:	430a      	orrs	r2, r1
 8003696:	611a      	str	r2, [r3, #16]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003698:	6823      	ldr	r3, [r4, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	da07      	bge.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x56e>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800369e:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 80036a0:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80036a2:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80036a4:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80036a8:	430b      	orrs	r3, r1
 80036aa:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80036ac:	6823      	ldr	r3, [r4, #0]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	d507      	bpl.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80036b2:	4a3d      	ldr	r2, [pc, #244]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 80036b4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 80036b8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80036ba:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80036be:	430b      	orrs	r3, r1
 80036c0:	6553      	str	r3, [r2, #84]	; 0x54
}
 80036c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch(PeriphClkInit->Lptim1ClockSelection)
 80036c6:	f022 5180 	bic.w	r1, r2, #268435456	; 0x10000000
 80036ca:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80036ce:	f43f af17 	beq.w	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80036d2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
 80036d6:	f43f af13 	beq.w	8003500 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80036da:	2601      	movs	r6, #1
 80036dc:	4635      	mov	r5, r6
 80036de:	e71b      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    switch(PeriphClkInit->Lptim2ClockSelection)
 80036e0:	f422 6180 	bic.w	r1, r2, #1024	; 0x400
 80036e4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80036e8:	f43f af2a 	beq.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80036ec:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 80036f0:	f43f af26 	beq.w	8003540 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80036f4:	2601      	movs	r6, #1
 80036f6:	4635      	mov	r5, r6
 80036f8:	e72e      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x418>
    switch(PeriphClkInit->Lptim345ClockSelection)
 80036fa:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 80036fe:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003702:	f43f af3d 	beq.w	8003580 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8003706:	f5b2 4fc0 	cmp.w	r2, #24576	; 0x6000
 800370a:	f43f af39 	beq.w	8003580 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800370e:	2601      	movs	r6, #1
 8003710:	4635      	mov	r5, r6
 8003712:	e741      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x458>
    switch(PeriphClkInit->RngClockSelection)
 8003714:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003716:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800371a:	f000 814a 	beq.w	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x872>
 800371e:	d906      	bls.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x5ee>
 8003720:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003724:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8003728:	d003      	beq.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800372a:	2001      	movs	r0, #1
 800372c:	e789      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->RngClockSelection)
 800372e:	2a00      	cmp	r2, #0
 8003730:	d1fb      	bne.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
    if(ret == HAL_OK)
 8003732:	2d00      	cmp	r5, #0
 8003734:	f040 813a 	bne.w	80039ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003738:	4a1b      	ldr	r2, [pc, #108]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
    return HAL_OK;
 800373a:	1e30      	subs	r0, r6, #0
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800373c:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800373e:	6d53      	ldr	r3, [r2, #84]	; 0x54
    return HAL_OK;
 8003740:	bf18      	it	ne
 8003742:	2001      	movne	r0, #1
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003744:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003748:	430b      	orrs	r3, r1
 800374a:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800374c:	6823      	ldr	r3, [r4, #0]
 800374e:	e778      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x502>
    switch(PeriphClkInit->Sai1ClockSelection)
 8003750:	4635      	mov	r5, r6
    if(ret == HAL_OK)
 8003752:	2d00      	cmp	r5, #0
 8003754:	f000 80bb 	beq.w	80038ce <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	462e      	mov	r6, r5
 800375c:	e526      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800375e:	2101      	movs	r1, #1
 8003760:	1d20      	adds	r0, r4, #4
 8003762:	f7ff fbf9 	bl	8002f58 <RCCEx_PLL2_Config>
 8003766:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003768:	2d00      	cmp	r5, #0
 800376a:	f040 80e5 	bne.w	8003938 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003770:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8003772:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8003774:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8003778:	430b      	orrs	r3, r1
 800377a:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	e5e4      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003780:	2101      	movs	r1, #1
 8003782:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003786:	f7ff fc61 	bl	800304c <RCCEx_PLL3_Config>
 800378a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 800378c:	2d00      	cmp	r5, #0
 800378e:	f040 810a 	bne.w	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x866>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003792:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x668>)
 8003794:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8003798:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800379a:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800379e:	430b      	orrs	r3, r1
 80037a0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	e739      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80037a6:	bf00      	nop
 80037a8:	58024400 	.word	0x58024400
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80037ac:	2102      	movs	r1, #2
 80037ae:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037b2:	f7ff fc4b 	bl	800304c <RCCEx_PLL3_Config>
 80037b6:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037b8:	2d00      	cmp	r5, #0
 80037ba:	f040 80f1 	bne.w	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037be:	4aa4      	ldr	r2, [pc, #656]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80037c4:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80037c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80037ca:	430b      	orrs	r3, r1
 80037cc:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037ce:	6823      	ldr	r3, [r4, #0]
 80037d0:	e711      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80037d2:	2101      	movs	r1, #1
 80037d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80037d8:	f7ff fc38 	bl	800304c <RCCEx_PLL3_Config>
 80037dc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80037de:	2d00      	cmp	r5, #0
 80037e0:	f040 80db 	bne.w	800399a <HAL_RCCEx_PeriphCLKConfig+0x85a>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80037e4:	4a9a      	ldr	r2, [pc, #616]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037e6:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 80037e8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80037ea:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80037ee:	430b      	orrs	r3, r1
 80037f0:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80037f2:	6823      	ldr	r3, [r4, #0]
 80037f4:	e63d      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x332>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f6:	4f97      	ldr	r7, [pc, #604]	; (8003a54 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fe:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 8003800:	f7fc fdcc 	bl	800039c <HAL_GetTick>
 8003804:	4680      	mov	r8, r0
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003806:	e006      	b.n	8003816 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003808:	f7fc fdc8 	bl	800039c <HAL_GetTick>
 800380c:	eba0 0008 	sub.w	r0, r0, r8
 8003810:	2864      	cmp	r0, #100	; 0x64
 8003812:	f200 81b9 	bhi.w	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa48>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	05da      	lsls	r2, r3, #23
 800381a:	d5f5      	bpl.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x6c8>
    if(ret == HAL_OK)
 800381c:	2d00      	cmp	r5, #0
 800381e:	f040 81e0 	bne.w	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003822:	4b8b      	ldr	r3, [pc, #556]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003824:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003828:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800382a:	4051      	eors	r1, r2
 800382c:	f411 7f40 	tst.w	r1, #768	; 0x300
 8003830:	d00d      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x70e>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003832:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 8003834:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003836:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800383a:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800383e:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003840:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003842:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003846:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 8003848:	671a      	str	r2, [r3, #112]	; 0x70
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800384a:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 800384e:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8003852:	f000 81a8 	beq.w	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xa66>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003856:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800385a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800385e:	f000 81b6 	beq.w	8003bce <HAL_RCCEx_PeriphCLKConfig+0xa8e>
 8003862:	4a7b      	ldr	r2, [pc, #492]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003864:	6913      	ldr	r3, [r2, #16]
 8003866:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800386a:	6113      	str	r3, [r2, #16]
 800386c:	4a78      	ldr	r2, [pc, #480]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800386e:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
 8003872:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8003874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003878:	430b      	orrs	r3, r1
 800387a:	6713      	str	r3, [r2, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	e5c6      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8003880:	2102      	movs	r1, #2
 8003882:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003886:	f7ff fbe1 	bl	800304c <RCCEx_PLL3_Config>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800388a:	6823      	ldr	r3, [r4, #0]
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800388c:	2800      	cmp	r0, #0
 800388e:	f43f aed3 	beq.w	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      status=HAL_ERROR;
 8003892:	2601      	movs	r6, #1
 8003894:	e6d0      	b.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003896:	4a6e      	ldr	r2, [pc, #440]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003898:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800389a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800389c:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 80038a0:	430b      	orrs	r3, r1
 80038a2:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80038a4:	6823      	ldr	r3, [r4, #0]
 80038a6:	e499      	b.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80038a8:	4a69      	ldr	r2, [pc, #420]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038aa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80038ac:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80038ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80038b2:	430b      	orrs	r3, r1
 80038b4:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	e4fc      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80038ba:	4a65      	ldr	r2, [pc, #404]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038bc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 80038c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80038c2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 80038c6:	430b      	orrs	r3, r1
 80038c8:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	e4a1      	b.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80038ce:	4a60      	ldr	r2, [pc, #384]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 80038d2:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80038d4:	f023 0307 	bic.w	r3, r3, #7
 80038d8:	430b      	orrs	r3, r1
 80038da:	6513      	str	r3, [r2, #80]	; 0x50
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80038dc:	6823      	ldr	r3, [r4, #0]
 80038de:	e465      	b.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038e0:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e2:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 80038e6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80038e8:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80038ec:	430b      	orrs	r3, r1
 80038ee:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038f0:	6823      	ldr	r3, [r4, #0]
 80038f2:	e4a9      	b.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x108>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038f4:	2102      	movs	r1, #2
 80038f6:	1d20      	adds	r0, r4, #4
 80038f8:	f7ff fb2e 	bl	8002f58 <RCCEx_PLL2_Config>
 80038fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80038fe:	2d00      	cmp	r5, #0
 8003900:	d067      	beq.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x892>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	462e      	mov	r6, r5
 8003906:	e694      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003908:	4a51      	ldr	r2, [pc, #324]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800390c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003910:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003912:	e45e      	b.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003914:	4a4e      	ldr	r2, [pc, #312]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003916:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003918:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800391c:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800391e:	e48e      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003920:	4a4b      	ldr	r2, [pc, #300]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003922:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003928:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 800392a:	e4be      	b.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800392c:	4a48      	ldr	r2, [pc, #288]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800392e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003930:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003934:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003936:	e467      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	462e      	mov	r6, r5
 800393c:	e505      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x20a>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800393e:	6823      	ldr	r3, [r4, #0]
 8003940:	462e      	mov	r6, r5
 8003942:	e5e9      	b.n	8003518 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003944:	4a42      	ldr	r2, [pc, #264]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003946:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8003948:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800394a:	f023 0303 	bic.w	r3, r3, #3
 800394e:	430b      	orrs	r3, r1
 8003950:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003952:	6823      	ldr	r3, [r4, #0]
 8003954:	e558      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003956:	6823      	ldr	r3, [r4, #0]
 8003958:	462e      	mov	r6, r5
 800395a:	e61d      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x458>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800395c:	4a3c      	ldr	r2, [pc, #240]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395e:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8003960:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003962:	f023 0307 	bic.w	r3, r3, #7
 8003966:	430b      	orrs	r3, r1
 8003968:	6553      	str	r3, [r2, #84]	; 0x54
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800396a:	6823      	ldr	r3, [r4, #0]
 800396c:	e59a      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800396e:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003970:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003974:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8003976:	f023 0307 	bic.w	r3, r3, #7
 800397a:	430b      	orrs	r3, r1
 800397c:	6593      	str	r3, [r2, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800397e:	6823      	ldr	r3, [r4, #0]
 8003980:	e5aa      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	462e      	mov	r6, r5
 8003986:	e47b      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x140>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003988:	6823      	ldr	r3, [r4, #0]
 800398a:	462e      	mov	r6, r5
 800398c:	e4af      	b.n	80032ee <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	462e      	mov	r6, r5
 8003992:	e4ca      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	462e      	mov	r6, r5
 8003998:	e5de      	b.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x418>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	462e      	mov	r6, r5
 800399e:	e568      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x332>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80039a0:	6823      	ldr	r3, [r4, #0]
 80039a2:	462e      	mov	r6, r5
 80039a4:	e627      	b.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x4b6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	462e      	mov	r6, r5
 80039aa:	e636      	b.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x4da>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80039ac:	6823      	ldr	r3, [r4, #0]
 80039ae:	2001      	movs	r0, #1
 80039b0:	e647      	b.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x502>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039b2:	4a27      	ldr	r2, [pc, #156]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039b4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ba:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80039bc:	2d00      	cmp	r5, #0
 80039be:	f43f aebb 	beq.w	8003738 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80039c2:	e7f3      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x86c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039c4:	4a22      	ldr	r2, [pc, #136]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039cc:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80039ce:	2d00      	cmp	r5, #0
 80039d0:	d197      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80039d2:	4a1f      	ldr	r2, [pc, #124]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039d4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80039d6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039dc:	430b      	orrs	r3, r1
 80039de:	64d3      	str	r3, [r2, #76]	; 0x4c
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039e0:	6823      	ldr	r3, [r4, #0]
 80039e2:	e626      	b.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e4:	4a1a      	ldr	r2, [pc, #104]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80039e6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039ec:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 80039ee:	2d00      	cmp	r5, #0
 80039f0:	f43f aecf 	beq.w	8003792 <HAL_RCCEx_PeriphCLKConfig+0x652>
 80039f4:	e7d7      	b.n	80039a6 <HAL_RCCEx_PeriphCLKConfig+0x866>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80039f6:	1d20      	adds	r0, r4, #4
 80039f8:	f7ff faae 	bl	8002f58 <RCCEx_PLL2_Config>
 80039fc:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 80039fe:	2d00      	cmp	r5, #0
 8003a00:	f43f aedd 	beq.w	80037be <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8003a04:	e7cc      	b.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a06:	2102      	movs	r1, #2
 8003a08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a0c:	f7ff fb1e 	bl	800304c <RCCEx_PLL3_Config>
 8003a10:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a12:	2d00      	cmp	r5, #0
 8003a14:	f43f ad77 	beq.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
 8003a18:	e791      	b.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a1a:	4a0d      	ldr	r2, [pc, #52]	; (8003a50 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a1c:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a22:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a24:	2d00      	cmp	r5, #0
 8003a26:	d08d      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x804>
 8003a28:	e4ec      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a2a:	2102      	movs	r1, #2
 8003a2c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a30:	f7ff fb0c 	bl	800304c <RCCEx_PLL3_Config>
 8003a34:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a36:	2d00      	cmp	r5, #0
 8003a38:	f43f ad85 	beq.w	8003546 <HAL_RCCEx_PeriphCLKConfig+0x406>
 8003a3c:	e7aa      	b.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0x854>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003a3e:	2102      	movs	r1, #2
 8003a40:	1d20      	adds	r0, r4, #4
 8003a42:	f7ff fa89 	bl	8002f58 <RCCEx_PLL2_Config>
 8003a46:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a48:	2d00      	cmp	r5, #0
 8003a4a:	f43f ac11 	beq.w	8003270 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003a4e:	e798      	b.n	8003982 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003a50:	58024400 	.word	0x58024400
 8003a54:	58024800 	.word	0x58024800
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a58:	4a68      	ldr	r2, [pc, #416]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8003a5a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	; 0x2c
    if(ret == HAL_OK)
 8003a62:	2d00      	cmp	r5, #0
 8003a64:	f43f ae83 	beq.w	800376e <HAL_RCCEx_PeriphCLKConfig+0x62e>
 8003a68:	e766      	b.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x7f8>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a70:	f7ff faec 	bl	800304c <RCCEx_PLL3_Config>
 8003a74:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a76:	2d00      	cmp	r5, #0
 8003a78:	f43f ad85 	beq.w	8003586 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8003a7c:	e76b      	b.n	8003956 <HAL_RCCEx_PeriphCLKConfig+0x816>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a7e:	2101      	movs	r1, #1
 8003a80:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a84:	f7ff fae2 	bl	800304c <RCCEx_PLL3_Config>
 8003a88:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a8a:	2d00      	cmp	r5, #0
 8003a8c:	f43f ac27 	beq.w	80032de <HAL_RCCEx_PeriphCLKConfig+0x19e>
 8003a90:	e77a      	b.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x848>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a92:	2101      	movs	r1, #1
 8003a94:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003a98:	f7ff fad8 	bl	800304c <RCCEx_PLL3_Config>
 8003a9c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003a9e:	2d00      	cmp	r5, #0
 8003aa0:	f43f ac3a 	beq.w	8003318 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003aa4:	e773      	b.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003aa6:	2102      	movs	r1, #2
 8003aa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003aac:	f7ff face 	bl	800304c <RCCEx_PLL3_Config>
      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ab0:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003ab4:	2800      	cmp	r0, #0
 8003ab6:	f43f ad86 	beq.w	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
        status = HAL_ERROR;
 8003aba:	2601      	movs	r6, #1
 8003abc:	e583      	b.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x486>
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003abe:	2102      	movs	r1, #2
 8003ac0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003ac4:	f7ff fac2 	bl	800304c <RCCEx_PLL3_Config>
      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003ac8:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8003acc:	2800      	cmp	r0, #0
 8003ace:	f43f ad6b 	beq.w	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
          status = HAL_ERROR;
 8003ad2:	2601      	movs	r6, #1
 8003ad4:	e568      	b.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	3024      	adds	r0, #36	; 0x24
 8003ada:	f7ff fab7 	bl	800304c <RCCEx_PLL3_Config>
 8003ade:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8003ae0:	2e00      	cmp	r6, #0
 8003ae2:	f43f ab47 	beq.w	8003174 <HAL_RCCEx_PeriphCLKConfig+0x34>
 8003ae6:	f7ff bb52 	b.w	800318e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003aea:	2100      	movs	r1, #0
 8003aec:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003af0:	f7ff faac 	bl	800304c <RCCEx_PLL3_Config>
 8003af4:	4605      	mov	r5, r0
      break;
 8003af6:	f7ff bbd8 	b.w	80032aa <HAL_RCCEx_PeriphCLKConfig+0x16a>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003afa:	2100      	movs	r1, #0
 8003afc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b00:	f7ff faa4 	bl	800304c <RCCEx_PLL3_Config>
 8003b04:	4605      	mov	r5, r0
      break;
 8003b06:	f7ff bb64 	b.w	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x92>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0a:	4a3c      	ldr	r2, [pc, #240]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xabc>)
      break;
 8003b0c:	4635      	mov	r5, r6
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b14:	62d3      	str	r3, [r2, #44]	; 0x2c
      break;
 8003b16:	e61c      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x612>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b18:	2100      	movs	r1, #0
 8003b1a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b1e:	f7ff fa95 	bl	800304c <RCCEx_PLL3_Config>
 8003b22:	4605      	mov	r5, r0
      break;
 8003b24:	f7ff bb8b 	b.w	800323e <HAL_RCCEx_PeriphCLKConfig+0xfe>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003b28:	2100      	movs	r1, #0
 8003b2a:	1d20      	adds	r0, r4, #4
 8003b2c:	f7ff fa14 	bl	8002f58 <RCCEx_PLL2_Config>
 8003b30:	4605      	mov	r5, r0
      break;
 8003b32:	e60e      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x612>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b34:	2100      	movs	r1, #0
 8003b36:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b3a:	f7ff fa87 	bl	800304c <RCCEx_PLL3_Config>
 8003b3e:	4605      	mov	r5, r0
      break;
 8003b40:	e607      	b.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x612>
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003b42:	2100      	movs	r1, #0
 8003b44:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b48:	f7ff fa80 	bl	800304c <RCCEx_PLL3_Config>
 8003b4c:	4605      	mov	r5, r0
      break;
 8003b4e:	f7ff bb5b 	b.w	8003208 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b52:	2101      	movs	r1, #1
 8003b54:	1d20      	adds	r0, r4, #4
 8003b56:	f7ff f9ff 	bl	8002f58 <RCCEx_PLL2_Config>
 8003b5a:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b5c:	2d00      	cmp	r5, #0
 8003b5e:	f43f aefd 	beq.w	800395c <HAL_RCCEx_PeriphCLKConfig+0x81c>
 8003b62:	e49d      	b.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x360>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b64:	2101      	movs	r1, #1
 8003b66:	1d20      	adds	r0, r4, #4
 8003b68:	f7ff f9f6 	bl	8002f58 <RCCEx_PLL2_Config>
 8003b6c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b6e:	2d00      	cmp	r5, #0
 8003b70:	f43f aefd 	beq.w	800396e <HAL_RCCEx_PeriphCLKConfig+0x82e>
 8003b74:	e4ae      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x394>
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b76:	2101      	movs	r1, #1
 8003b78:	1d20      	adds	r0, r4, #4
 8003b7a:	f7ff f9ed 	bl	8002f58 <RCCEx_PLL2_Config>
 8003b7e:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8003b80:	2d00      	cmp	r5, #0
 8003b82:	f43f ae2f 	beq.w	80037e4 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8003b86:	e708      	b.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x85a>
            ret = HAL_TIMEOUT;
 8003b88:	2603      	movs	r6, #3
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b8a:	6823      	ldr	r3, [r4, #0]
            ret = HAL_TIMEOUT;
 8003b8c:	4635      	mov	r5, r6
 8003b8e:	e43e      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->SpdifrxClockSelection)
 8003b90:	2601      	movs	r6, #1
 8003b92:	f7ff bafd 	b.w	8003190 <HAL_RCCEx_PeriphCLKConfig+0x50>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b96:	4a19      	ldr	r2, [pc, #100]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8003b98:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003b9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9e:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003ba0:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8003ba2:	f7ff baed 	b.w	8003180 <HAL_RCCEx_PeriphCLKConfig+0x40>
        tickstart = HAL_GetTick();
 8003ba6:	f7fc fbf9 	bl	800039c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003baa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 8003bfc <HAL_RCCEx_PeriphCLKConfig+0xabc>
        tickstart = HAL_GetTick();
 8003bae:	4607      	mov	r7, r0
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb0:	f241 3988 	movw	r9, #5000	; 0x1388
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bb4:	e004      	b.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0xa80>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bb6:	f7fc fbf1 	bl	800039c <HAL_GetTick>
 8003bba:	1bc0      	subs	r0, r0, r7
 8003bbc:	4548      	cmp	r0, r9
 8003bbe:	d8e3      	bhi.n	8003b88 <HAL_RCCEx_PeriphCLKConfig+0xa48>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003bc0:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 8003bc4:	079b      	lsls	r3, r3, #30
 8003bc6:	d5f6      	bpl.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xa76>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bc8:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
 8003bcc:	e643      	b.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x716>
 8003bce:	490b      	ldr	r1, [pc, #44]	; (8003bfc <HAL_RCCEx_PeriphCLKConfig+0xabc>)
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	; (8003c00 <HAL_RCCEx_PeriphCLKConfig+0xac0>)
 8003bd2:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 8003bd6:	690a      	ldr	r2, [r1, #16]
 8003bd8:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	610b      	str	r3, [r1, #16]
 8003be0:	e644      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x72c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	462e      	mov	r6, r5
 8003be6:	e412      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003be8:	2601      	movs	r6, #1
 8003bea:	4635      	mov	r5, r6
 8003bec:	e45a      	b.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x364>
    switch(PeriphClkInit->FmcClockSelection)
 8003bee:	2601      	movs	r6, #1
 8003bf0:	4635      	mov	r5, r6
 8003bf2:	e409      	b.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003bf4:	2601      	movs	r6, #1
 8003bf6:	4635      	mov	r5, r6
 8003bf8:	e46e      	b.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x398>
 8003bfa:	bf00      	nop
 8003bfc:	58024400 	.word	0x58024400
 8003c00:	00ffffcf 	.word	0x00ffffcf

08003c04 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c04:	4b4f      	ldr	r3, [pc, #316]	; (8003d44 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 8003c06:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c08:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c0a:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c0c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 8003c0e:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8003c12:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c16:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 8003c18:	d05c      	beq.n	8003cd4 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c1a:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003c1e:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003c22:	f001 0103 	and.w	r1, r1, #3
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c26:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8003c2a:	2901      	cmp	r1, #1
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003c2c:	ee07 4a90 	vmov	s15, r4
 8003c30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8003c34:	d003      	beq.n	8003c3e <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 8003c36:	2902      	cmp	r1, #2
 8003c38:	d075      	beq.n	8003d26 <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 8003c3a:	2900      	cmp	r1, #0
 8003c3c:	d04f      	beq.n	8003cde <HAL_RCCEx_GetPLL2ClockFreq+0xda>
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003c3e:	ee07 2a90 	vmov	s15, r2
 8003c42:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 8003c46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003c50:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8003c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c58:	ee06 3a90 	vmov	s13, r3
 8003c5c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003c60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003c64:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003c68:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003c6c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003c70:	4a34      	ldr	r2, [pc, #208]	; (8003d44 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 8003c72:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003c76:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c78:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003c7c:	ee07 3a10 	vmov	s14, r3
 8003c80:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8003c84:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8003c86:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003c8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c92:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8003c96:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003c98:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003c9c:	ee07 3a10 	vmov	s14, r3
 8003ca0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003ca4:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003ca8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cb0:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003cb4:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8003cb6:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003cba:	ee07 3a90 	vmov	s15, r3
 8003cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cc2:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cca:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003cce:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003cd2:	4770      	bx	lr
 8003cd4:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003cd6:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003cda:	6082      	str	r2, [r0, #8]
}
 8003cdc:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003cde:	6819      	ldr	r1, [r3, #0]
 8003ce0:	0689      	lsls	r1, r1, #26
 8003ce2:	d527      	bpl.n	8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ce4:	681c      	ldr	r4, [r3, #0]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003ce6:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cea:	4919      	ldr	r1, [pc, #100]	; (8003d50 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cec:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003cf2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003cf6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cfa:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8003d4c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 8003cfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003d02:	40d1      	lsrs	r1, r2
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d04:	ee06 3a90 	vmov	s13, r3
 8003d08:	ee05 1a90 	vmov	s11, r1
 8003d0c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003d10:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003d14:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003d18:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003d1c:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003d20:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003d24:	e7a4      	b.n	8003c70 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d26:	ee07 2a90 	vmov	s15, r2
 8003d2a:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003d54 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 8003d2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d32:	e78a      	b.n	8003c4a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003d34:	ee07 2a90 	vmov	s15, r2
 8003d38:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003d58 <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 8003d3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d40:	e783      	b.n	8003c4a <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
 8003d48:	4a742400 	.word	0x4a742400
 8003d4c:	39000000 	.word	0x39000000
 8003d50:	03d09000 	.word	0x03d09000
 8003d54:	4bbebc20 	.word	0x4bbebc20
 8003d58:	4c742400 	.word	0x4c742400

08003d5c <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d5c:	4b4f      	ldr	r3, [pc, #316]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 8003d5e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d60:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d62:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d64:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 8003d66:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8003d6a:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d6e:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 8003d70:	d05c      	beq.n	8003e2c <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d72:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d76:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d7a:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d7e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8003d82:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8003d84:	ee07 4a90 	vmov	s15, r4
 8003d88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8003d8c:	d003      	beq.n	8003d96 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 8003d8e:	2902      	cmp	r1, #2
 8003d90:	d075      	beq.n	8003e7e <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 8003d92:	2900      	cmp	r1, #0
 8003d94:	d04f      	beq.n	8003e36 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003d96:	ee07 2a90 	vmov	s15, r2
 8003d9a:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 8003d9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003da8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003db0:	ee06 3a90 	vmov	s13, r3
 8003db4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003db8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003dbc:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003dc0:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003dc4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003dc8:	4a34      	ldr	r2, [pc, #208]	; (8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 8003dca:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003dce:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003dd0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003dd4:	ee07 3a10 	vmov	s14, r3
 8003dd8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8003ddc:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003dde:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dea:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003dee:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003df0:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003df4:	ee07 3a10 	vmov	s14, r3
 8003df8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003dfc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e08:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003e0c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8003e0e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003e12:	ee07 3a90 	vmov	s15, r3
 8003e16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e1a:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e22:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003e26:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003e2a:	4770      	bx	lr
 8003e2c:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e2e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e32:	6082      	str	r2, [r0, #8]
}
 8003e34:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e36:	6819      	ldr	r1, [r3, #0]
 8003e38:	0689      	lsls	r1, r1, #26
 8003e3a:	d527      	bpl.n	8003e8c <HAL_RCCEx_GetPLL3ClockFreq+0x130>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e3c:	681c      	ldr	r4, [r3, #0]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e3e:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e42:	4919      	ldr	r1, [pc, #100]	; (8003ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e44:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e4a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e52:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8003ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 8003e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003e5a:	40d1      	lsrs	r1, r2
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e5c:	ee06 3a90 	vmov	s13, r3
 8003e60:	ee05 1a90 	vmov	s11, r1
 8003e64:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003e68:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003e6c:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003e70:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003e74:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003e78:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003e7c:	e7a4      	b.n	8003dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e7e:	ee07 2a90 	vmov	s15, r2
 8003e82:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003eac <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 8003e86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e8a:	e78a      	b.n	8003da2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003e8c:	ee07 2a90 	vmov	s15, r2
 8003e90:	eddf 6a07 	vldr	s13, [pc, #28]	; 8003eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 8003e94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e98:	e783      	b.n	8003da2 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 8003e9a:	bf00      	nop
 8003e9c:	58024400 	.word	0x58024400
 8003ea0:	4a742400 	.word	0x4a742400
 8003ea4:	39000000 	.word	0x39000000
 8003ea8:	03d09000 	.word	0x03d09000
 8003eac:	4bbebc20 	.word	0x4bbebc20
 8003eb0:	4c742400 	.word	0x4c742400

08003eb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eb4:	4b4f      	ldr	r3, [pc, #316]	; (8003ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 8003eb6:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003eb8:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003eba:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003ebc:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 8003ebe:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8003ec2:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ec6:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 8003ec8:	d05c      	beq.n	8003f84 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003eca:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8003ece:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ed2:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003ed6:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 8003eda:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003edc:	ee07 4a90 	vmov	s15, r4
 8003ee0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 8003ee4:	d07e      	beq.n	8003fe4 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 8003ee6:	2902      	cmp	r1, #2
 8003ee8:	d075      	beq.n	8003fd6 <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d04f      	beq.n	8003f8e <HAL_RCCEx_GetPLL1ClockFreq+0xda>
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003eee:	ee07 2a90 	vmov	s15, r2
 8003ef2:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003ff8 <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 8003ef6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 8003f00:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ffc <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8003f04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f08:	ee06 3a90 	vmov	s13, r3
 8003f0c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 8003f10:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003f14:	ee76 6a85 	vadd.f32	s13, s13, s10
 8003f18:	eee7 6a25 	vfma.f32	s13, s14, s11
 8003f1c:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003f20:	4a34      	ldr	r2, [pc, #208]	; (8003ff4 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 8003f22:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003f26:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f28:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8003f2c:	ee07 3a10 	vmov	s14, r3
 8003f30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 8003f34:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8003f36:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003f3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f42:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8003f46:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f48:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8003f4c:	ee07 3a10 	vmov	s14, r3
 8003f50:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003f54:	ee37 7a06 	vadd.f32	s14, s14, s12
 8003f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f60:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8003f64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003f66:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f72:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8003f7e:	ed80 7a02 	vstr	s14, [r0, #8]
}
 8003f82:	4770      	bx	lr
 8003f84:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8003f86:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8003f8a:	6082      	str	r2, [r0, #8]
}
 8003f8c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	0689      	lsls	r1, r1, #26
 8003f92:	d5ac      	bpl.n	8003eee <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f94:	681c      	ldr	r4, [r3, #0]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f96:	ee07 2a90 	vmov	s15, r2
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003f9a:	4919      	ldr	r1, [pc, #100]	; (8004000 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003f9c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8003fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fa2:	f3c4 02c1 	ubfx	r2, r4, #3, #2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003faa:	ed9f 5a14 	vldr	s10, [pc, #80]	; 8003ffc <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 8003fae:	f3c3 0308 	ubfx	r3, r3, #0, #9
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003fb2:	40d1      	lsrs	r1, r2
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fb4:	ee06 3a90 	vmov	s13, r3
 8003fb8:	ee05 1a90 	vmov	s11, r1
 8003fbc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003fc0:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 8003fc4:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003fc8:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8003fcc:	eee7 6a05 	vfma.f32	s13, s14, s10
 8003fd0:	ee66 6a26 	vmul.f32	s13, s12, s13
 8003fd4:	e7a4      	b.n	8003f20 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fd6:	ee07 2a90 	vmov	s15, r2
 8003fda:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8004004 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 8003fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe2:	e78a      	b.n	8003efa <HAL_RCCEx_GetPLL1ClockFreq+0x46>
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003fe4:	ee07 2a90 	vmov	s15, r2
 8003fe8:	eddf 6a07 	vldr	s13, [pc, #28]	; 8004008 <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 8003fec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ff0:	e783      	b.n	8003efa <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 8003ff2:	bf00      	nop
 8003ff4:	58024400 	.word	0x58024400
 8003ff8:	4c742400 	.word	0x4c742400
 8003ffc:	39000000 	.word	0x39000000
 8004000:	03d09000 	.word	0x03d09000
 8004004:	4bbebc20 	.word	0x4bbebc20
 8004008:	4a742400 	.word	0x4a742400

0800400c <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800400c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
{
 8004010:	b500      	push	{lr}
 8004012:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8004014:	d074      	beq.n	8004100 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8004016:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800401a:	d02c      	beq.n	8004076 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800401c:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004020:	f000 80cd 	beq.w	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x1b2>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8004024:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
 8004028:	d07e      	beq.n	8004128 <HAL_RCCEx_GetPeriphCLKFreq+0x11c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800402a:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800402e:	d058      	beq.n	80040e2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8004030:	f5b0 2f00 	cmp.w	r0, #524288	; 0x80000
 8004034:	f000 8102 	beq.w	800423c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8004038:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
 800403c:	f000 810d 	beq.w	800425a <HAL_RCCEx_GetPeriphCLKFreq+0x24e>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8004040:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
 8004044:	f000 80e1 	beq.w	800420a <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8004048:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800404c:	d138      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 800404e:	4b99      	ldr	r3, [pc, #612]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004052:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
      switch (srcclk)
 8004056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800405a:	f000 808d 	beq.w	8004178 <HAL_RCCEx_GetPeriphCLKFreq+0x16c>
 800405e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004062:	f000 813d 	beq.w	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004066:	bb5b      	cbnz	r3, 80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004068:	4b92      	ldr	r3, [pc, #584]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800406a:	6818      	ldr	r0, [r3, #0]
 800406c:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 8004070:	d043      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = HSE_VALUE;
 8004072:	4891      	ldr	r0, [pc, #580]	; (80042b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>)
 8004074:	e041      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8004076:	4a8f      	ldr	r2, [pc, #572]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004078:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800407a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
      switch (saiclocksource)
 800407e:	2b80      	cmp	r3, #128	; 0x80
 8004080:	f000 8098 	beq.w	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8004084:	d920      	bls.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004086:	2bc0      	cmp	r3, #192	; 0xc0
 8004088:	d036      	beq.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800408a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408e:	d117      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004090:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004092:	6811      	ldr	r1, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004094:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004098:	0749      	lsls	r1, r1, #29
 800409a:	d502      	bpl.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 800409c:	2b00      	cmp	r3, #0
 800409e:	f000 80ae 	beq.w	80041fe <HAL_RCCEx_GetPeriphCLKFreq+0x1f2>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80040a2:	4a84      	ldr	r2, [pc, #528]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80040a4:	6812      	ldr	r2, [r2, #0]
 80040a6:	05d0      	lsls	r0, r2, #23
 80040a8:	d503      	bpl.n	80040b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
 80040aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ae:	f000 80ff 	beq.w	80042b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>
          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80040b2:	4a80      	ldr	r2, [pc, #512]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80040b4:	6812      	ldr	r2, [r2, #0]
 80040b6:	0391      	lsls	r1, r2, #14
 80040b8:	d502      	bpl.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80040ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040be:	d0d8      	beq.n	8004072 <HAL_RCCEx_GetPeriphCLKFreq+0x66>
      switch (srcclk)
 80040c0:	2000      	movs	r0, #0
}
 80040c2:	b005      	add	sp, #20
 80040c4:	f85d fb04 	ldr.w	pc, [sp], #4
      switch (saiclocksource)
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d04c      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80040cc:	2b40      	cmp	r3, #64	; 0x40
 80040ce:	d1f7      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80040d0:	6810      	ldr	r0, [r2, #0]
 80040d2:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80040d6:	d010      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80040d8:	a801      	add	r0, sp, #4
 80040da:	f7ff fd93 	bl	8003c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80040de:	9801      	ldr	r0, [sp, #4]
 80040e0:	e00b      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 80040e2:	4a74      	ldr	r2, [pc, #464]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80040e4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80040e6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
      switch (srcclk)
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d061      	beq.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80040f0:	d937      	bls.n	8004162 <HAL_RCCEx_GetPeriphCLKFreq+0x156>
 80040f2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040f6:	d179      	bne.n	80041ec <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
          frequency = EXTERNAL_CLOCK_VALUE;
 80040f8:	4870      	ldr	r0, [pc, #448]	; (80042bc <HAL_RCCEx_GetPeriphCLKFreq+0x2b0>)
}
 80040fa:	b005      	add	sp, #20
 80040fc:	f85d fb04 	ldr.w	pc, [sp], #4
      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8004100:	4b6c      	ldr	r3, [pc, #432]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004104:	f003 0307 	and.w	r3, r3, #7
      switch (saiclocksource)
 8004108:	2b04      	cmp	r3, #4
 800410a:	d8d9      	bhi.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 800410c:	a201      	add	r2, pc, #4	; (adr r2, 8004114 <HAL_RCCEx_GetPeriphCLKFreq+0x108>)
 800410e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004112:	bf00      	nop
 8004114:	08004179 	.word	0x08004179
 8004118:	0800419d 	.word	0x0800419d
 800411c:	08004189 	.word	0x08004189
 8004120:	080040f9 	.word	0x080040f9
 8004124:	08004185 	.word	0x08004185
      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8004128:	4a62      	ldr	r2, [pc, #392]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800412a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800412c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
      switch (saiclocksource)
 8004130:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004134:	d03e      	beq.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 8004136:	d937      	bls.n	80041a8 <HAL_RCCEx_GetPeriphCLKFreq+0x19c>
 8004138:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800413c:	d0dc      	beq.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800413e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004142:	d1bd      	bne.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004144:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8004146:	6812      	ldr	r2, [r2, #0]
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004148:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800414c:	0752      	lsls	r2, r2, #29
 800414e:	d5a8      	bpl.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1a6      	bne.n	80040a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004154:	4b57      	ldr	r3, [pc, #348]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004156:	485a      	ldr	r0, [pc, #360]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800415e:	40d8      	lsrs	r0, r3
 8004160:	e7cb      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8004162:	2b00      	cmp	r3, #0
 8004164:	d146      	bne.n	80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004166:	6810      	ldr	r0, [r2, #0]
 8004168:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800416c:	d0c5      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800416e:	a801      	add	r0, sp, #4
 8004170:	f7ff fea0 	bl	8003eb4 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8004174:	9802      	ldr	r0, [sp, #8]
 8004176:	e7c0      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8004178:	4b4e      	ldr	r3, [pc, #312]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800417a:	6818      	ldr	r0, [r3, #0]
 800417c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004180:	d0bb      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004182:	e7f4      	b.n	800416e <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8004184:	4a4b      	ldr	r2, [pc, #300]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004186:	e783      	b.n	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004188:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800418a:	6818      	ldr	r0, [r3, #0]
 800418c:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 8004190:	d0b3      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004192:	a801      	add	r0, sp, #4
 8004194:	f7ff fde2 	bl	8003d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8004198:	9801      	ldr	r0, [sp, #4]
 800419a:	e7ae      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800419c:	4b45      	ldr	r3, [pc, #276]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80041a4:	d0a9      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80041a6:	e797      	b.n	80040d8 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
      switch (saiclocksource)
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0dc      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80041ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041b0:	d08e      	beq.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80041b2:	e785      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80041b4:	6810      	ldr	r0, [r2, #0]
 80041b6:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80041ba:	d09e      	beq.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80041bc:	e7e9      	b.n	8004192 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 80041be:	4a3d      	ldr	r2, [pc, #244]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80041c0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80041c2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
      switch (saiclocksource)
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ca:	d0f3      	beq.n	80041b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
 80041cc:	d806      	bhi.n	80041dc <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d0c9      	beq.n	8004166 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 80041d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041d6:	f43f af7b 	beq.w	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80041da:	e771      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80041dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80041e0:	d08a      	beq.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80041e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80041e6:	f43f af53 	beq.w	8004090 <HAL_RCCEx_GetPeriphCLKFreq+0x84>
 80041ea:	e769      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
      switch (srcclk)
 80041ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041f0:	d0a8      	beq.n	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 80041f2:	e765      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 80041f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041f8:	f43f af6a 	beq.w	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
 80041fc:	e760      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	482f      	ldr	r0, [pc, #188]	; (80042c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8004202:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8004206:	40d8      	lsrs	r0, r3
 8004208:	e777      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800420a:	4a2a      	ldr	r2, [pc, #168]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800420c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800420e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
      switch (srcclk)
 8004212:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004216:	d06e      	beq.n	80042f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2ea>
 8004218:	d83c      	bhi.n	8004294 <HAL_RCCEx_GetPeriphCLKFreq+0x288>
 800421a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800421e:	d05f      	beq.n	80042e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>
 8004220:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004224:	d127      	bne.n	8004276 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8004226:	4b23      	ldr	r3, [pc, #140]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800422e:	f43f af64 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004232:	a801      	add	r0, sp, #4
 8004234:	f7ff fd92 	bl	8003d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8004238:	9802      	ldr	r0, [sp, #8]
 800423a:	e75e      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800423c:	4a1d      	ldr	r2, [pc, #116]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800423e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004240:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
      switch (srcclk)
 8004244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004248:	d040      	beq.n	80042cc <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800424a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800424e:	f43f af79 	beq.w	8004144 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8004252:	2b00      	cmp	r3, #0
 8004254:	f47f af34 	bne.w	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
 8004258:	e73a      	b.n	80040d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800425a:	4b16      	ldr	r3, [pc, #88]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800425c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
      switch (srcclk)
 800425e:	03d2      	lsls	r2, r2, #15
 8004260:	d58b      	bpl.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8004262:	6818      	ldr	r0, [r3, #0]
 8004264:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 8004268:	f43f af47 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800426c:	a801      	add	r0, sp, #4
 800426e:	f7ff fcc9 	bl	8003c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8004272:	9803      	ldr	r0, [sp, #12]
 8004274:	e741      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8004276:	2b00      	cmp	r3, #0
 8004278:	f47f af22 	bne.w	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800427c:	f7fe fe2c 	bl	8002ed8 <HAL_RCC_GetHCLKFreq>
 8004280:	4b0c      	ldr	r3, [pc, #48]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8004282:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800428a:	5cd3      	ldrb	r3, [r2, r3]
 800428c:	f003 031f 	and.w	r3, r3, #31
 8004290:	40d8      	lsrs	r0, r3
          break;
 8004292:	e732      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
      switch (srcclk)
 8004294:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004298:	d004      	beq.n	80042a4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>
 800429a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800429e:	f43f aee3 	beq.w	8004068 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
 80042a2:	e70d      	b.n	80040c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80042a4:	4b03      	ldr	r3, [pc, #12]	; (80042b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 80042ac:	f43f af25 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
            frequency = CSI_VALUE;
 80042b0:	4805      	ldr	r0, [pc, #20]	; (80042c8 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80042b2:	e722      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 80042b4:	58024400 	.word	0x58024400
 80042b8:	017d7840 	.word	0x017d7840
 80042bc:	00bb8000 	.word	0x00bb8000
 80042c0:	03d09000 	.word	0x03d09000
 80042c4:	0800d53c 	.word	0x0800d53c
 80042c8:	003d0900 	.word	0x003d0900
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80042cc:	6810      	ldr	r0, [r2, #0]
 80042ce:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 80042d2:	f43f af12 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80042d6:	a801      	add	r0, sp, #4
 80042d8:	f7ff fd40 	bl	8003d5c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 80042dc:	9803      	ldr	r0, [sp, #12]
 80042de:	e70c      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80042e0:	4b08      	ldr	r3, [pc, #32]	; (8004304 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80042e2:	6818      	ldr	r0, [r3, #0]
 80042e4:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 80042e8:	f43f af07 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80042ec:	a801      	add	r0, sp, #4
 80042ee:	f7ff fc89 	bl	8003c04 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80042f2:	9802      	ldr	r0, [sp, #8]
 80042f4:	e701      	b.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042f6:	6810      	ldr	r0, [r2, #0]
 80042f8:	f010 0004 	ands.w	r0, r0, #4
 80042fc:	f43f aefd 	beq.w	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0xee>
 8004300:	e728      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 8004302:	bf00      	nop
 8004304:	58024400 	.word	0x58024400

08004308 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004308:	2800      	cmp	r0, #0
 800430a:	d038      	beq.n	800437e <HAL_RNG_Init+0x76>
{
 800430c:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800430e:	7a43      	ldrb	r3, [r0, #9]
 8004310:	4604      	mov	r4, r0
 8004312:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004316:	b343      	cbz	r3, 800436a <HAL_RNG_Init+0x62>
      return HAL_ERROR;
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004318:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800431a:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800431c:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800431e:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004320:	6813      	ldr	r3, [r2, #0]
 8004322:	f023 0320 	bic.w	r3, r3, #32
 8004326:	430b      	orrs	r3, r1
 8004328:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800432a:	6822      	ldr	r2, [r4, #0]
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	f043 0304 	orr.w	r3, r3, #4
 8004332:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8004334:	6823      	ldr	r3, [r4, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	065b      	lsls	r3, r3, #25
 800433a:	d503      	bpl.n	8004344 <HAL_RNG_Init+0x3c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800433c:	2304      	movs	r3, #4
    return HAL_ERROR;
 800433e:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 8004340:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 8004342:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 8004344:	f7fc f82a 	bl	800039c <HAL_GetTick>
 8004348:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800434a:	e004      	b.n	8004356 <HAL_RNG_Init+0x4e>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800434c:	f7fc f826 	bl	800039c <HAL_GetTick>
 8004350:	1b43      	subs	r3, r0, r5
 8004352:	2b02      	cmp	r3, #2
 8004354:	d80d      	bhi.n	8004372 <HAL_RNG_Init+0x6a>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	f013 0304 	ands.w	r3, r3, #4
 800435e:	d1f5      	bne.n	800434c <HAL_RNG_Init+0x44>
  hrng->State = HAL_RNG_STATE_READY;
 8004360:	2201      	movs	r2, #1
  return HAL_OK;
 8004362:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 8004364:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004366:	60e3      	str	r3, [r4, #12]
}
 8004368:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800436a:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800436c:	f006 f8d0 	bl	800a510 <HAL_RNG_MspInit>
 8004370:	e7d2      	b.n	8004318 <HAL_RNG_Init+0x10>
      hrng->State = HAL_RNG_STATE_ERROR;
 8004372:	2204      	movs	r2, #4
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004374:	2302      	movs	r3, #2
      return HAL_ERROR;
 8004376:	2001      	movs	r0, #1
      hrng->State = HAL_RNG_STATE_ERROR;
 8004378:	7262      	strb	r2, [r4, #9]
      hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800437a:	60e3      	str	r3, [r4, #12]
}
 800437c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800437e:	2001      	movs	r0, #1
}
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop

08004384 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004388:	7a03      	ldrb	r3, [r0, #8]
 800438a:	2b01      	cmp	r3, #1
 800438c:	d028      	beq.n	80043e0 <HAL_RNG_GenerateRandomNumber+0x5c>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800438e:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 8004390:	2201      	movs	r2, #1
 8004392:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 8004394:	4293      	cmp	r3, r2
 8004396:	fa5f f883 	uxtb.w	r8, r3
  __HAL_LOCK(hrng);
 800439a:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800439c:	d007      	beq.n	80043ae <HAL_RNG_GenerateRandomNumber+0x2a>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800439e:	2304      	movs	r3, #4
    status = HAL_ERROR;
 80043a0:	4690      	mov	r8, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80043a2:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80043a4:	2300      	movs	r3, #0
 80043a6:	7223      	strb	r3, [r4, #8]

  return status;
}
 80043a8:	4640      	mov	r0, r8
 80043aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 80043ae:	2302      	movs	r3, #2
 80043b0:	460e      	mov	r6, r1
 80043b2:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 80043b4:	f7fb fff2 	bl	800039c <HAL_GetTick>
 80043b8:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80043ba:	e004      	b.n	80043c6 <HAL_RNG_GenerateRandomNumber+0x42>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80043bc:	f7fb ffee 	bl	800039c <HAL_GetTick>
 80043c0:	1bc0      	subs	r0, r0, r7
 80043c2:	2802      	cmp	r0, #2
 80043c4:	d811      	bhi.n	80043ea <HAL_RNG_GenerateRandomNumber+0x66>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80043c6:	6822      	ldr	r2, [r4, #0]
 80043c8:	6855      	ldr	r5, [r2, #4]
 80043ca:	f015 0501 	ands.w	r5, r5, #1
 80043ce:	d0f5      	beq.n	80043bc <HAL_RNG_GenerateRandomNumber+0x38>
    hrng->RandomNumber = hrng->Instance->DR;
 80043d0:	6893      	ldr	r3, [r2, #8]
    hrng->State = HAL_RNG_STATE_READY;
 80043d2:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 80043d4:	f04f 0800 	mov.w	r8, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80043d8:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 80043da:	6033      	str	r3, [r6, #0]
    hrng->State = HAL_RNG_STATE_READY;
 80043dc:	7262      	strb	r2, [r4, #9]
 80043de:	e7e1      	b.n	80043a4 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 80043e0:	f04f 0802 	mov.w	r8, #2
}
 80043e4:	4640      	mov	r0, r8
 80043e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hrng->State = HAL_RNG_STATE_READY;
 80043ea:	2201      	movs	r2, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80043ec:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 80043ee:	7225      	strb	r5, [r4, #8]
        hrng->State = HAL_RNG_STATE_READY;
 80043f0:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80043f2:	60e3      	str	r3, [r4, #12]
        return HAL_ERROR;
 80043f4:	e7d8      	b.n	80043a8 <HAL_RNG_GenerateRandomNumber+0x24>
 80043f6:	bf00      	nop

080043f8 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 80043f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80043fa:	4ba6      	ldr	r3, [pc, #664]	; (8004694 <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 80043fc:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80043fe:	6802      	ldr	r2, [r0, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d01c      	beq.n	800443e <HAL_SAI_Init.part.0+0x46>
 8004404:	3320      	adds	r3, #32
 8004406:	429a      	cmp	r2, r3
 8004408:	d019      	beq.n	800443e <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800440a:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800440e:	429a      	cmp	r2, r3
 8004410:	d04d      	beq.n	80044ae <HAL_SAI_Init.part.0+0xb6>
 8004412:	3320      	adds	r3, #32
 8004414:	429a      	cmp	r2, r3
 8004416:	d04a      	beq.n	80044ae <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004418:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800441c:	429a      	cmp	r2, r3
 800441e:	f000 8134 	beq.w	800468a <HAL_SAI_Init.part.0+0x292>
 8004422:	3320      	adds	r3, #32
 8004424:	429a      	cmp	r2, r3
 8004426:	f000 8130 	beq.w	800468a <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800442a:	4b9b      	ldr	r3, [pc, #620]	; (8004698 <HAL_SAI_Init.part.0+0x2a0>)
 800442c:	429a      	cmp	r2, r3
 800442e:	f000 812e 	beq.w	800468e <HAL_SAI_Init.part.0+0x296>
 8004432:	3320      	adds	r3, #32
 8004434:	429a      	cmp	r2, r3
 8004436:	f000 812a 	beq.w	800468e <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800443a:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800443e:	4e97      	ldr	r6, [pc, #604]	; (800469c <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 8004440:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8004444:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8004448:	2b00      	cmp	r3, #0
 800444a:	d037      	beq.n	80044bc <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800444c:	4b94      	ldr	r3, [pc, #592]	; (80046a0 <HAL_SAI_Init.part.0+0x2a8>)
 800444e:	4995      	ldr	r1, [pc, #596]	; (80046a4 <HAL_SAI_Init.part.0+0x2ac>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8004456:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004458:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800445a:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800445e:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004460:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8004462:	2b00      	cmp	r3, #0
 8004464:	d031      	beq.n	80044ca <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004466:	6822      	ldr	r2, [r4, #0]
    count--;
 8004468:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800446a:	6815      	ldr	r5, [r2, #0]
 800446c:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 8004470:	d1f7      	bne.n	8004462 <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 8004472:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 8004474:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 8004476:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 8004478:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800447c:	f000 8156 	beq.w	800472c <HAL_SAI_Init.part.0+0x334>
 8004480:	4293      	cmp	r3, r2
 8004482:	bf19      	ittee	ne
 8004484:	4610      	movne	r0, r2
 8004486:	2103      	movne	r1, #3
 8004488:	2123      	moveq	r1, #35	; 0x23
 800448a:	2022      	moveq	r0, #34	; 0x22
 800448c:	bf15      	itete	ne
 800448e:	2701      	movne	r7, #1
 8004490:	2721      	moveq	r7, #33	; 0x21
 8004492:	2200      	movne	r2, #0
 8004494:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 8004496:	68a3      	ldr	r3, [r4, #8]
 8004498:	3b01      	subs	r3, #1
 800449a:	2b04      	cmp	r3, #4
 800449c:	f200 817c 	bhi.w	8004798 <HAL_SAI_Init.part.0+0x3a0>
 80044a0:	e8df f013 	tbh	[pc, r3, lsl #1]
 80044a4:	001c00e8 	.word	0x001c00e8
 80044a8:	001b00ef 	.word	0x001b00ef
 80044ac:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 80044ae:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 80044b2:	4e7d      	ldr	r6, [pc, #500]	; (80046a8 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 80044b4:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1c7      	bne.n	800444c <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 80044bc:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 80044be:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 80044c2:	f006 f88d 	bl	800a5e0 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 80044c6:	6822      	ldr	r2, [r4, #0]
 80044c8:	e7c0      	b.n	800444c <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80044ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 80044ce:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80044d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80044d4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 80044d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 80044da:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80044dc:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 80044e0:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80044e2:	6a23      	ldr	r3, [r4, #32]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d04a      	beq.n	800457e <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80044e8:	6823      	ldr	r3, [r4, #0]
 80044ea:	4a6a      	ldr	r2, [pc, #424]	; (8004694 <HAL_SAI_Init.part.0+0x29c>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	f000 8131 	beq.w	8004754 <HAL_SAI_Init.part.0+0x35c>
 80044f2:	486e      	ldr	r0, [pc, #440]	; (80046ac <HAL_SAI_Init.part.0+0x2b4>)
 80044f4:	1a18      	subs	r0, r3, r0
 80044f6:	fab0 f080 	clz	r0, r0
 80044fa:	0940      	lsrs	r0, r0, #5
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f040 8129 	bne.w	8004754 <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8004502:	4a6b      	ldr	r2, [pc, #428]	; (80046b0 <HAL_SAI_Init.part.0+0x2b8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	f000 8131 	beq.w	800476c <HAL_SAI_Init.part.0+0x374>
 800450a:	3220      	adds	r2, #32
 800450c:	4293      	cmp	r3, r2
 800450e:	f000 812d 	beq.w	800476c <HAL_SAI_Init.part.0+0x374>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004512:	4a68      	ldr	r2, [pc, #416]	; (80046b4 <HAL_SAI_Init.part.0+0x2bc>)
 8004514:	4293      	cmp	r3, r2
 8004516:	f000 8123 	beq.w	8004760 <HAL_SAI_Init.part.0+0x368>
 800451a:	3220      	adds	r2, #32
 800451c:	4293      	cmp	r3, r2
 800451e:	f000 811f 	beq.w	8004760 <HAL_SAI_Init.part.0+0x368>
    if (hsai->Instance == SAI4_Block_A)
 8004522:	4a5d      	ldr	r2, [pc, #372]	; (8004698 <HAL_SAI_Init.part.0+0x2a0>)
 8004524:	4293      	cmp	r3, r2
 8004526:	f000 812f 	beq.w	8004788 <HAL_SAI_Init.part.0+0x390>
    if (hsai->Instance == SAI4_Block_B)
 800452a:	4a63      	ldr	r2, [pc, #396]	; (80046b8 <HAL_SAI_Init.part.0+0x2c0>)
 800452c:	4293      	cmp	r3, r2
 800452e:	f000 8126 	beq.w	800477e <HAL_SAI_Init.part.0+0x386>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8004532:	69a3      	ldr	r3, [r4, #24]
 8004534:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004538:	f000 80fd 	beq.w	8004736 <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800453c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800453e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004542:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8004544:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004548:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800454c:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800454e:	bf0c      	ite	eq
 8004550:	2202      	moveq	r2, #2
 8004552:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8004554:	fb00 f202 	mul.w	r2, r0, r2
 8004558:	0212      	lsls	r2, r2, #8
 800455a:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800455e:	4a57      	ldr	r2, [pc, #348]	; (80046bc <HAL_SAI_Init.part.0+0x2c4>)
 8004560:	fba2 0203 	umull	r0, r2, r2, r3
 8004564:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 8004566:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800456a:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800456e:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 8004570:	bf08      	it	eq
 8004572:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004574:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 8004576:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004578:	d101      	bne.n	800457e <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800457a:	0852      	lsrs	r2, r2, #1
 800457c:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800457e:	6863      	ldr	r3, [r4, #4]
 8004580:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004584:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004586:	f040 80cc 	bne.w	8004722 <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800458a:	2b01      	cmp	r3, #1
 800458c:	bf14      	ite	ne
 800458e:	f44f 7500 	movne.w	r5, #512	; 0x200
 8004592:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004594:	f7fb ff1a 	bl	80003cc <HAL_GetREVID>
 8004598:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800459c:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800459e:	f0c0 80ac 	bcc.w	80046fa <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80045a2:	6811      	ldr	r1, [r2, #0]
 80045a4:	4b46      	ldr	r3, [pc, #280]	; (80046c0 <HAL_SAI_Init.part.0+0x2c8>)
 80045a6:	400b      	ands	r3, r1
 80045a8:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045aa:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80045ac:	e9d4 1300 	ldrd	r1, r3, [r4]
 80045b0:	431a      	orrs	r2, r3
 80045b2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80045b4:	431a      	orrs	r2, r3
 80045b6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80045b8:	431a      	orrs	r2, r3
 80045ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045bc:	431a      	orrs	r2, r3
 80045be:	6963      	ldr	r3, [r4, #20]
 80045c0:	431a      	orrs	r2, r3
 80045c2:	69a3      	ldr	r3, [r4, #24]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80045c8:	431a      	orrs	r2, r3
 80045ca:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045cc:	431a      	orrs	r2, r3
 80045ce:	680b      	ldr	r3, [r1, #0]
 80045d0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80045d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045d4:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80045d8:	4b3a      	ldr	r3, [pc, #232]	; (80046c4 <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80045da:	433a      	orrs	r2, r7
 80045dc:	432a      	orrs	r2, r5
 80045de:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	6851      	ldr	r1, [r2, #4]
 80045e4:	400b      	ands	r3, r1
 80045e6:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80045e8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80045ea:	69e3      	ldr	r3, [r4, #28]
 80045ec:	6822      	ldr	r2, [r4, #0]
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80045f2:	430b      	orrs	r3, r1
 80045f4:	6851      	ldr	r1, [r2, #4]
 80045f6:	430b      	orrs	r3, r1
 80045f8:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80045fa:	6822      	ldr	r2, [r4, #0]
 80045fc:	4b32      	ldr	r3, [pc, #200]	; (80046c8 <HAL_SAI_Init.part.0+0x2d0>)
 80045fe:	6891      	ldr	r1, [r2, #8]
 8004600:	400b      	ands	r3, r1
 8004602:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004604:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004606:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004608:	6821      	ldr	r1, [r4, #0]
 800460a:	4313      	orrs	r3, r2
 800460c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800460e:	6888      	ldr	r0, [r1, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8004614:	4303      	orrs	r3, r0
 8004616:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004618:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800461c:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800461e:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8004620:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004622:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8004626:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004628:	6822      	ldr	r2, [r4, #0]
 800462a:	68d3      	ldr	r3, [r2, #12]
 800462c:	4003      	ands	r3, r0
 800462e:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004630:	6821      	ldr	r1, [r4, #0]
 8004632:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 8004636:	68ca      	ldr	r2, [r1, #12]
 8004638:	4303      	orrs	r3, r0
 800463a:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800463c:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800463e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004642:	6f22      	ldr	r2, [r4, #112]	; 0x70
 8004644:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004646:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800464a:	4a12      	ldr	r2, [pc, #72]	; (8004694 <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800464c:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	4293      	cmp	r3, r2
 8004652:	d03f      	beq.n	80046d4 <HAL_SAI_Init.part.0+0x2dc>
 8004654:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 8004658:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800465c:	4293      	cmp	r3, r2
 800465e:	d039      	beq.n	80046d4 <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004660:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 8004662:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004664:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 8004668:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800466a:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800466e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8004672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 8004674:	f44f 6780 	mov.w	r7, #1024	; 0x400
 8004678:	e732      	b.n	80044e0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800467a:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800467c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8004680:	e72e      	b.n	80044e0 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004682:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004684:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 8004688:	e72a      	b.n	80044e0 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800468a:	4e10      	ldr	r6, [pc, #64]	; (80046cc <HAL_SAI_Init.part.0+0x2d4>)
 800468c:	e6d8      	b.n	8004440 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800468e:	4e10      	ldr	r6, [pc, #64]	; (80046d0 <HAL_SAI_Init.part.0+0x2d8>)
 8004690:	e6d6      	b.n	8004440 <HAL_SAI_Init.part.0+0x48>
 8004692:	bf00      	nop
 8004694:	40015804 	.word	0x40015804
 8004698:	58005404 	.word	0x58005404
 800469c:	40015800 	.word	0x40015800
 80046a0:	2000093c 	.word	0x2000093c
 80046a4:	95cbec1b 	.word	0x95cbec1b
 80046a8:	40015c00 	.word	0x40015c00
 80046ac:	40015824 	.word	0x40015824
 80046b0:	40015c04 	.word	0x40015c04
 80046b4:	40016004 	.word	0x40016004
 80046b8:	58005424 	.word	0x58005424
 80046bc:	cccccccd 	.word	0xcccccccd
 80046c0:	f005c010 	.word	0xf005c010
 80046c4:	ffff1ff0 	.word	0xffff1ff0
 80046c8:	fff88000 	.word	0xfff88000
 80046cc:	40016000 	.word	0x40016000
 80046d0:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80046d4:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80046d6:	f023 0301 	bic.w	r3, r3, #1
 80046da:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80046dc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d1bd      	bne.n	8004660 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80046e4:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80046e8:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80046ea:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80046ee:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80046f0:	6c73      	ldr	r3, [r6, #68]	; 0x44
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	6473      	str	r3, [r6, #68]	; 0x44
 80046f8:	e7b2      	b.n	8004660 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80046fa:	6811      	ldr	r1, [r2, #0]
 80046fc:	4b27      	ldr	r3, [pc, #156]	; (800479c <HAL_SAI_Init.part.0+0x3a4>)
 80046fe:	400b      	ands	r3, r1
 8004700:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004702:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004704:	e9d4 1300 	ldrd	r1, r3, [r4]
 8004708:	431a      	orrs	r2, r3
 800470a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800470c:	431a      	orrs	r2, r3
 800470e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004710:	431a      	orrs	r2, r3
 8004712:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004714:	431a      	orrs	r2, r3
 8004716:	6963      	ldr	r3, [r4, #20]
 8004718:	431a      	orrs	r2, r3
 800471a:	69a3      	ldr	r3, [r4, #24]
 800471c:	431a      	orrs	r2, r3
 800471e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004720:	e754      	b.n	80045cc <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004722:	2b01      	cmp	r3, #1
 8004724:	bf08      	it	eq
 8004726:	f44f 7500 	moveq.w	r5, #512	; 0x200
 800472a:	e733      	b.n	8004594 <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 800472c:	2113      	movs	r1, #19
 800472e:	2012      	movs	r0, #18
 8004730:	2711      	movs	r7, #17
 8004732:	2210      	movs	r2, #16
 8004734:	e6af      	b.n	8004496 <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004736:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004738:	2904      	cmp	r1, #4
 800473a:	d02b      	beq.n	8004794 <HAL_SAI_Init.part.0+0x39c>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800473c:	2908      	cmp	r1, #8
 800473e:	d01b      	beq.n	8004778 <HAL_SAI_Init.part.0+0x380>
        tmpframelength = hsai->FrameInit.FrameLength;
 8004740:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8004742:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8004746:	0043      	lsls	r3, r0, #1
 8004748:	6a20      	ldr	r0, [r4, #32]
 800474a:	fb00 f202 	mul.w	r2, r0, r2
 800474e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004752:	e704      	b.n	800455e <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004754:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004758:	f7ff fc58 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	e6d0      	b.n	8004502 <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 8004760:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004764:	f7ff fc52 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 8004768:	6823      	ldr	r3, [r4, #0]
 800476a:	e6da      	b.n	8004522 <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800476c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004770:	f7ff fc4c 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8004774:	6823      	ldr	r3, [r4, #0]
 8004776:	e6cc      	b.n	8004512 <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = 256U;
 8004778:	f44f 7280 	mov.w	r2, #256	; 0x100
 800477c:	e7e1      	b.n	8004742 <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800477e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004782:	f7ff fc43 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
 8004786:	e6d4      	b.n	8004532 <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 8004788:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800478c:	f7ff fc3e 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 8004790:	6823      	ldr	r3, [r4, #0]
 8004792:	e6ca      	b.n	800452a <HAL_SAI_Init.part.0+0x132>
        tmpframelength = 64U;
 8004794:	2240      	movs	r2, #64	; 0x40
 8004796:	e7d4      	b.n	8004742 <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
 8004798:	2700      	movs	r7, #0
 800479a:	e6a1      	b.n	80044e0 <HAL_SAI_Init.part.0+0xe8>
 800479c:	f805c010 	.word	0xf805c010

080047a0 <HAL_SAI_InitProtocol>:
  switch (protocol)
 80047a0:	2902      	cmp	r1, #2
{
 80047a2:	b538      	push	{r3, r4, r5, lr}
 80047a4:	4604      	mov	r4, r0
  switch (protocol)
 80047a6:	d935      	bls.n	8004814 <HAL_SAI_InitProtocol+0x74>
 80047a8:	1ec8      	subs	r0, r1, #3
 80047aa:	2801      	cmp	r0, #1
 80047ac:	d830      	bhi.n	8004810 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80047ae:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 80047b0:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80047b2:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80047b4:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80047b6:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 80047b8:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80047ba:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80047be:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80047c0:	6860      	ldr	r0, [r4, #4]
 80047c2:	f030 0002 	bics.w	r0, r0, #2
 80047c6:	bf0c      	ite	eq
 80047c8:	2501      	moveq	r5, #1
 80047ca:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 80047cc:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047ce:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 80047d2:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 80047d4:	bf0c      	ite	eq
 80047d6:	2001      	moveq	r0, #1
 80047d8:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80047da:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80047dc:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 80047e0:	65a0      	str	r0, [r4, #88]	; 0x58
 80047e2:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 80047e4:	2a03      	cmp	r2, #3
 80047e6:	d813      	bhi.n	8004810 <HAL_SAI_InitProtocol+0x70>
 80047e8:	e8df f002 	tbb	[pc, r2]
 80047ec:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	4a47      	ldr	r2, [pc, #284]	; (8004910 <HAL_SAI_InitProtocol+0x170>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d005      	beq.n	8004804 <HAL_SAI_InitProtocol+0x64>
 80047f8:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 80047fc:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 8004800:	4293      	cmp	r3, r2
 8004802:	d105      	bne.n	8004810 <HAL_SAI_InitProtocol+0x70>
 8004804:	6863      	ldr	r3, [r4, #4]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d102      	bne.n	8004810 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800480a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800480c:	2b00      	cmp	r3, #0
 800480e:	d037      	beq.n	8004880 <HAL_SAI_InitProtocol+0xe0>
}
 8004810:	2001      	movs	r0, #1
 8004812:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004814:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 8004816:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8004818:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800481a:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800481c:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800481e:	6860      	ldr	r0, [r4, #4]
 8004820:	f030 0002 	bics.w	r0, r0, #2
 8004824:	bf14      	ite	ne
 8004826:	2001      	movne	r0, #1
 8004828:	2000      	moveq	r0, #0
 800482a:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800482c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004830:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8004832:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004836:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 8004838:	f013 0001 	ands.w	r0, r3, #1
 800483c:	d1e8      	bne.n	8004810 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800483e:	b949      	cbnz	r1, 8004854 <HAL_SAI_InitProtocol+0xb4>
 8004840:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8004844:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 8004848:	2a03      	cmp	r2, #3
 800484a:	d8e1      	bhi.n	8004810 <HAL_SAI_InitProtocol+0x70>
 800484c:	e8df f002 	tbb	[pc, r2]
 8004850:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8004854:	6660      	str	r0, [r4, #100]	; 0x64
 8004856:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800485a:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800485c:	2a03      	cmp	r2, #3
 800485e:	d8d7      	bhi.n	8004810 <HAL_SAI_InitProtocol+0x70>
 8004860:	e8df f002 	tbb	[pc, r2]
 8004864:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004868:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800486a:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800486c:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800486e:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8004870:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004872:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 8004874:	f7fb fdaa 	bl	80003cc <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8004878:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800487c:	2b01      	cmp	r3, #1
 800487e:	d0b7      	beq.n	80047f0 <HAL_SAI_InitProtocol+0x50>
 8004880:	4620      	mov	r0, r4
}
 8004882:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004886:	f7ff bdb7 	b.w	80043f8 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800488a:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800488c:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800488e:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004890:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8004892:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 8004894:	e7ee      	b.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8004896:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8004898:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800489a:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800489c:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800489e:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048a0:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 80048a2:	e7e7      	b.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048a4:	21e0      	movs	r1, #224	; 0xe0
 80048a6:	e7f7      	b.n	8004898 <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048a8:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048aa:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048ac:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048ae:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 80048b0:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048b2:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048b4:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048b6:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80048ba:	e7db      	b.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048bc:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80048be:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048c0:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80048c2:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048c4:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80048c8:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048ca:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048ce:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048d0:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048d2:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80048d4:	d1ce      	bne.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 80048d6:	2308      	movs	r3, #8
 80048d8:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80048da:	e7cb      	b.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048dc:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048de:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80048e0:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80048e2:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048e6:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048e8:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80048ec:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80048ee:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 80048f2:	d1bf      	bne.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 80048f4:	2310      	movs	r3, #16
 80048f6:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 80048f8:	e7bc      	b.n	8004874 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80048fa:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80048fc:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80048fe:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 8004900:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8004902:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004904:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8004906:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8004908:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800490c:	e7b2      	b.n	8004874 <HAL_SAI_InitProtocol+0xd4>
 800490e:	bf00      	nop
 8004910:	40015804 	.word	0x40015804

08004914 <HAL_SAI_Transmit_DMA>:
{
 8004914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004918:	460f      	mov	r7, r1
 800491a:	4604      	mov	r4, r0
 800491c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800491e:	f7fb fd3d 	bl	800039c <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 8004922:	2f00      	cmp	r7, #0
 8004924:	d06b      	beq.n	80049fe <HAL_SAI_Transmit_DMA+0xea>
 8004926:	fab5 f885 	clz	r8, r5
 800492a:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800492e:	2d00      	cmp	r5, #0
 8004930:	d065      	beq.n	80049fe <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004932:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 8004936:	2b01      	cmp	r3, #1
 8004938:	fa5f f983 	uxtb.w	r9, r3
 800493c:	d15a      	bne.n	80049f4 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 800493e:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 8004942:	2b01      	cmp	r3, #1
 8004944:	d056      	beq.n	80049f4 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 8004946:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004948:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800494c:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <HAL_SAI_Transmit_DMA+0x12c>)
 800494e:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 8004950:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
 8004954:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
 8004956:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800495a:	f365 431f 	bfi	r3, r5, #16, #16
 800495e:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8004960:	2312      	movs	r3, #18
 8004962:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8004966:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800496a:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800496c:	4a35      	ldr	r2, [pc, #212]	; (8004a44 <HAL_SAI_Transmit_DMA+0x130>)
 800496e:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8004974:	4a34      	ldr	r2, [pc, #208]	; (8004a48 <HAL_SAI_Transmit_DMA+0x134>)
 8004976:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800497a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800497c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004980:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8004984:	6822      	ldr	r2, [r4, #0]
 8004986:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800498a:	321c      	adds	r2, #28
 800498c:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800498e:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004992:	f7fc f92b 	bl	8000bec <HAL_DMA_Start_IT>
 8004996:	2800      	cmp	r0, #0
 8004998:	d13f      	bne.n	8004a1a <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800499a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800499c:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800499e:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80049a0:	d032      	beq.n	8004a08 <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80049a2:	2205      	movs	r2, #5
 80049a4:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80049a6:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	bf98      	it	ls
 80049ac:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80049ae:	6821      	ldr	r1, [r4, #0]
 80049b0:	690b      	ldr	r3, [r1, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80049b6:	6822      	ldr	r2, [r4, #0]
 80049b8:	6813      	ldr	r3, [r2, #0]
 80049ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049be:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80049c0:	e005      	b.n	80049ce <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 80049c2:	f7fb fceb 	bl	800039c <HAL_GetTick>
 80049c6:	1b83      	subs	r3, r0, r6
 80049c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80049cc:	d82a      	bhi.n	8004a24 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 80049ce:	6822      	ldr	r2, [r4, #0]
 80049d0:	6955      	ldr	r5, [r2, #20]
 80049d2:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 80049d6:	d0f4      	beq.n	80049c2 <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 80049d8:	6813      	ldr	r3, [r2, #0]
 80049da:	03db      	lsls	r3, r3, #15
 80049dc:	d403      	bmi.n	80049e6 <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 80049de:	6813      	ldr	r3, [r2, #0]
 80049e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049e4:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 80049e6:	2300      	movs	r3, #0
    return HAL_OK;
 80049e8:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 80049ea:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 80049ee:	4648      	mov	r0, r9
 80049f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80049f4:	f04f 0902 	mov.w	r9, #2
}
 80049f8:	4648      	mov	r0, r9
 80049fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 80049fe:	f04f 0901 	mov.w	r9, #1
}
 8004a02:	4648      	mov	r0, r9
 8004a04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004a08:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004a0c:	2a01      	cmp	r2, #1
 8004a0e:	bf0b      	itete	eq
 8004a10:	2215      	moveq	r2, #21
 8004a12:	2205      	movne	r2, #5
 8004a14:	2171      	moveq	r1, #113	; 0x71
 8004a16:	2161      	movne	r1, #97	; 0x61
 8004a18:	e7c5      	b.n	80049a6 <HAL_SAI_Transmit_DMA+0x92>
}
 8004a1a:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 8004a1c:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 8004a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a24:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 8004a28:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 8004a2c:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a30:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 8004a34:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004a36:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 8004a3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a3e:	bf00      	nop
 8004a40:	08004b99 	.word	0x08004b99
 8004a44:	08004b35 	.word	0x08004b35
 8004a48:	08004c15 	.word	0x08004c15

08004a4c <HAL_SAI_Receive_DMA>:
{
 8004a4c:	b570      	push	{r4, r5, r6, lr}
  if ((pData == NULL) || (Size == 0U))
 8004a4e:	2900      	cmp	r1, #0
 8004a50:	d059      	beq.n	8004b06 <HAL_SAI_Receive_DMA+0xba>
 8004a52:	fab2 f582 	clz	r5, r2
 8004a56:	096d      	lsrs	r5, r5, #5
 8004a58:	2a00      	cmp	r2, #0
 8004a5a:	d054      	beq.n	8004b06 <HAL_SAI_Receive_DMA+0xba>
  if (hsai->State == HAL_SAI_STATE_READY)
 8004a5c:	f890 3091 	ldrb.w	r3, [r0, #145]	; 0x91
 8004a60:	4604      	mov	r4, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	b2de      	uxtb	r6, r3
 8004a66:	d14b      	bne.n	8004b00 <HAL_SAI_Receive_DMA+0xb4>
    __HAL_LOCK(hsai);
 8004a68:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d047      	beq.n	8004b00 <HAL_SAI_Receive_DMA+0xb4>
    hsai->XferSize = Size;
 8004a70:	462b      	mov	r3, r5
    hsai->pBuffPtr = pData;
 8004a72:	6781      	str	r1, [r0, #120]	; 0x78
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004a74:	2122      	movs	r1, #34	; 0x22
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004a76:	f8c0 5094 	str.w	r5, [r0, #148]	; 0x94
    hsai->XferSize = Size;
 8004a7a:	f362 030f 	bfi	r3, r2, #0, #16
    __HAL_LOCK(hsai);
 8004a7e:	f880 6090 	strb.w	r6, [r0, #144]	; 0x90
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8004a82:	f880 1091 	strb.w	r1, [r0, #145]	; 0x91
    hsai->XferSize = Size;
 8004a86:	f362 431f 	bfi	r3, r2, #16, #16
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004a8a:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    hsai->XferSize = Size;
 8004a8e:	67c3      	str	r3, [r0, #124]	; 0x7c
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8004a90:	4b25      	ldr	r3, [pc, #148]	; (8004b28 <HAL_SAI_Receive_DMA+0xdc>)
 8004a92:	6413      	str	r3, [r2, #64]	; 0x40
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8004a94:	4a25      	ldr	r2, [pc, #148]	; (8004b2c <HAL_SAI_Receive_DMA+0xe0>)
 8004a96:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004a9a:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <HAL_SAI_Receive_DMA+0xe4>)
 8004a9e:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004aa2:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmarx->XferAbortCallback = NULL;
 8004aa4:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
 8004aa8:	651d      	str	r5, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8004aaa:	6801      	ldr	r1, [r0, #0]
 8004aac:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 8004ab0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8004ab2:	311c      	adds	r1, #28
 8004ab4:	f8d0 0084 	ldr.w	r0, [r0, #132]	; 0x84
 8004ab8:	f7fc f898 	bl	8000bec <HAL_DMA_Start_IT>
 8004abc:	bb30      	cbnz	r0, 8004b0c <HAL_SAI_Receive_DMA+0xc0>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004abe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004ac0:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004ac2:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004ac4:	d026      	beq.n	8004b14 <HAL_SAI_Receive_DMA+0xc8>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004ac6:	2205      	movs	r2, #5
 8004ac8:	2061      	movs	r0, #97	; 0x61
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004aca:	6821      	ldr	r1, [r4, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004acc:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	bf98      	it	ls
 8004ad2:	4602      	movls	r2, r0
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004ad4:	690b      	ldr	r3, [r1, #16]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	6813      	ldr	r3, [r2, #0]
 8004ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ae2:	6013      	str	r3, [r2, #0]
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8004ae4:	6823      	ldr	r3, [r4, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	03d2      	lsls	r2, r2, #15
 8004aea:	d403      	bmi.n	8004af4 <HAL_SAI_Receive_DMA+0xa8>
      __HAL_SAI_ENABLE(hsai);
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004af2:	601a      	str	r2, [r3, #0]
    __HAL_UNLOCK(hsai);
 8004af4:	2300      	movs	r3, #0
    return HAL_OK;
 8004af6:	461e      	mov	r6, r3
    __HAL_UNLOCK(hsai);
 8004af8:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 8004afc:	4630      	mov	r0, r6
 8004afe:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8004b00:	2602      	movs	r6, #2
}
 8004b02:	4630      	mov	r0, r6
 8004b04:	bd70      	pop	{r4, r5, r6, pc}
    return  HAL_ERROR;
 8004b06:	2601      	movs	r6, #1
}
 8004b08:	4630      	mov	r0, r6
 8004b0a:	bd70      	pop	{r4, r5, r6, pc}
 8004b0c:	4630      	mov	r0, r6
      __HAL_UNLOCK(hsai);
 8004b0e:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
}
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b14:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b18:	2a01      	cmp	r2, #1
 8004b1a:	bf0b      	itete	eq
 8004b1c:	2215      	moveq	r2, #21
 8004b1e:	2205      	movne	r2, #5
 8004b20:	2071      	moveq	r0, #113	; 0x71
 8004b22:	2061      	movne	r0, #97	; 0x61
 8004b24:	e7d1      	b.n	8004aca <HAL_SAI_Receive_DMA+0x7e>
 8004b26:	bf00      	nop
 8004b28:	08004c09 	.word	0x08004c09
 8004b2c:	08004ba5 	.word	0x08004ba5
 8004b30:	08004c15 	.word	0x08004c15

08004b34 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8004b34:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b36:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b38:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d01b      	beq.n	8004b78 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b40:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8004b42:	2300      	movs	r3, #0
 8004b44:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004b48:	6813      	ldr	r3, [r2, #0]
 8004b4a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004b4e:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b50:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004b52:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b54:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b56:	d012      	beq.n	8004b7e <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b58:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8004b5c:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b60:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b62:	3b02      	subs	r3, #2
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	bf98      	it	ls
 8004b68:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b6a:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004b6c:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004b70:	4013      	ands	r3, r2
 8004b72:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8004b74:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8004b78:	f004 ff52 	bl	8009a20 <HAL_SAI_TxCpltCallback>
#endif
}
 8004b7c:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004b7e:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004b82:	2a01      	cmp	r2, #1
 8004b84:	bf0b      	itete	eq
 8004b86:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8004b8a:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8004b8e:	f06f 0215 	mvneq.w	r2, #21
 8004b92:	f06f 0205 	mvnne.w	r2, #5
 8004b96:	e7e3      	b.n	8004b60 <SAI_DMATxCplt+0x2c>

08004b98 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b98:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8004b9a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004b9c:	f004 ff42 	bl	8009a24 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8004ba0:	bd08      	pop	{r3, pc}
 8004ba2:	bf00      	nop

08004ba4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004ba6:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ba8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bae:	d01b      	beq.n	8004be8 <SAI_DMARxCplt+0x44>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004bb0:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 8004bb2:	2100      	movs	r1, #0
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8004bb4:	6813      	ldr	r3, [r2, #0]
 8004bb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004bba:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004bbc:	6c43      	ldr	r3, [r0, #68]	; 0x44
    hsai->XferCount = 0;
 8004bbe:	f8a0 107e 	strh.w	r1, [r0, #126]	; 0x7e
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004bc2:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004bc4:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004bc6:	d012      	beq.n	8004bee <SAI_DMARxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004bc8:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 8004bcc:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004bd0:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004bd2:	3b02      	subs	r3, #2
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf98      	it	ls
 8004bd8:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004bda:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8004bdc:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8004be0:	4013      	ands	r3, r2
 8004be2:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 8004be4:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8004be8:	f004 ff1e 	bl	8009a28 <HAL_SAI_RxCpltCallback>
#endif
}
 8004bec:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8004bee:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8004bf2:	2a01      	cmp	r2, #1
 8004bf4:	bf0b      	itete	eq
 8004bf6:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 8004bfa:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 8004bfe:	f06f 0215 	mvneq.w	r2, #21
 8004c02:	f06f 0205 	mvnne.w	r2, #5
 8004c06:	e7e3      	b.n	8004bd0 <SAI_DMARxCplt+0x2c>

08004c08 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c08:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8004c0a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8004c0c:	f004 ff10 	bl	8009a30 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8004c10:	bd08      	pop	{r3, pc}
 8004c12:	bf00      	nop

08004c14 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c14:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c16:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c18:	f7fd f848 	bl	8001cac <HAL_DMA_GetError>
 8004c1c:	2802      	cmp	r0, #2
 8004c1e:	d025      	beq.n	8004c6c <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c20:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c24:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c2a:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <SAI_DMAError+0x68>)
 8004c2c:	4814      	ldr	r0, [pc, #80]	; (8004c80 <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004c2e:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004c32:	680a      	ldr	r2, [r1, #0]
 8004c34:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8004c38:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c3a:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 8004c3c:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c3e:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 8004c42:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c44:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 8004c46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8004c4a:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 8004c4c:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 8004c4e:	b173      	cbz	r3, 8004c6e <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004c50:	6822      	ldr	r2, [r4, #0]
    count--;
 8004c52:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	03d2      	lsls	r2, r2, #15
 8004c58:	d4f9      	bmi.n	8004c4e <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8004c5a:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8004c5c:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8004c5e:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 8004c60:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 8004c64:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 8004c68:	f004 fed8 	bl	8009a1c <HAL_SAI_ErrorCallback>
#endif
  }
}
 8004c6c:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8004c6e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8004c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c76:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 8004c7a:	e7ee      	b.n	8004c5a <SAI_DMAError+0x46>
 8004c7c:	2000093c 	.word	0x2000093c
 8004c80:	95cbec1b 	.word	0x95cbec1b

08004c84 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	4605      	mov	r5, r0
 8004c8a:	b086      	sub	sp, #24
 8004c8c:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c8e:	f7fb fb85 	bl	800039c <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c92:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 8004c94:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c96:	6828      	ldr	r0, [r5, #0]
 8004c98:	f001 fd70 	bl	800677c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004c9c:	4604      	mov	r4, r0
 8004c9e:	b118      	cbz	r0, 8004ca8 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	b006      	add	sp, #24
 8004ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004ca8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
 8004caa:	6828      	ldr	r0, [r5, #0]
 8004cac:	0409      	lsls	r1, r1, #16
 8004cae:	f002 fabf 	bl	8007230 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004cb2:	4604      	mov	r4, r0
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d1f3      	bne.n	8004ca0 <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cbc:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004cbe:	4669      	mov	r1, sp
 8004cc0:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cc2:	e9cd 2300 	strd	r2, r3, [sp]
 8004cc6:	2230      	movs	r2, #48	; 0x30
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004cd6:	f001 fd3b 	bl	8006750 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004cda:	6828      	ldr	r0, [r5, #0]
 8004cdc:	f002 fc2e 	bl	800753c <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8004ce0:	4604      	mov	r4, r0
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d1dc      	bne.n	8004ca0 <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 8004ce6:	4682      	mov	sl, r0
 8004ce8:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004cea:	f240 582a 	movw	r8, #1322	; 0x52a
 8004cee:	e004      	b.n	8004cfa <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004cf0:	f7fb fb54 	bl	800039c <HAL_GetTick>
 8004cf4:	1b83      	subs	r3, r0, r6
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	d024      	beq.n	8004d44 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004cfa:	6828      	ldr	r0, [r5, #0]
 8004cfc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004cfe:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004d02:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8004d04:	d10c      	bne.n	8004d20 <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8004d06:	0319      	lsls	r1, r3, #12
 8004d08:	d4f2      	bmi.n	8004cf0 <SD_FindSCR+0x6c>
 8004d0a:	2c00      	cmp	r4, #0
 8004d0c:	d1f0      	bne.n	8004cf0 <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8004d0e:	f001 fd05 	bl	800671c <SDMMC_ReadFIFO>
 8004d12:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d14:	6828      	ldr	r0, [r5, #0]
      index++;
 8004d16:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8004d18:	f001 fd00 	bl	800671c <SDMMC_ReadFIFO>
 8004d1c:	4682      	mov	sl, r0
      index++;
 8004d1e:	e7e7      	b.n	8004cf0 <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004d20:	071a      	lsls	r2, r3, #28
 8004d22:	d416      	bmi.n	8004d52 <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004d24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004d26:	079b      	lsls	r3, r3, #30
 8004d28:	d40f      	bmi.n	8004d4a <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004d2a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8004d2c:	f014 0420 	ands.w	r4, r4, #32
 8004d30:	d113      	bne.n	8004d5a <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004d32:	fa9a f28a 	rev.w	r2, sl
 8004d36:	fa99 f389 	rev.w	r3, r9
 8004d3a:	490a      	ldr	r1, [pc, #40]	; (8004d64 <SD_FindSCR+0xe0>)
 8004d3c:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8004d3e:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 8004d42:	e7ad      	b.n	8004ca0 <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 8004d44:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8004d48:	e7aa      	b.n	8004ca0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004d4a:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d4c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8004d4e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d50:	e7a6      	b.n	8004ca0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004d52:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d54:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004d56:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d58:	e7a2      	b.n	8004ca0 <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004d5a:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 8004d5c:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004d5e:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 8004d60:	e79e      	b.n	8004ca0 <SD_FindSCR+0x1c>
 8004d62:	bf00      	nop
 8004d64:	18000f3a 	.word	0x18000f3a

08004d68 <HAL_SD_ReadBlocks>:
{
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	460d      	mov	r5, r1
 8004d6e:	b087      	sub	sp, #28
 8004d70:	4604      	mov	r4, r0
 8004d72:	4692      	mov	sl, r2
 8004d74:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 8004d76:	f7fb fb11 	bl	800039c <HAL_GetTick>
  if (NULL == pData)
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	f000 8093 	beq.w	8004ea6 <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
 8004d80:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	fa5f f983 	uxtb.w	r9, r3
 8004d8a:	d17b      	bne.n	8004e84 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d8c:	eb0a 0307 	add.w	r3, sl, r7
 8004d90:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d92:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d94:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004d96:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004d98:	f200 808f 	bhi.w	8004eba <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
 8004d9c:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004d9e:	f04f 0b02 	mov.w	fp, #2
 8004da2:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 8004da4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004da8:	6823      	ldr	r3, [r4, #0]
 8004daa:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004dac:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004dae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004db0:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004db2:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004db4:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004db8:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8004dc0:	bf18      	it	ne
 8004dc2:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004dc6:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004dc8:	027b      	lsls	r3, r7, #9
 8004dca:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8004dcc:	2390      	movs	r3, #144	; 0x90
 8004dce:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004dd2:	f001 fcbd 	bl	8006750 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004dd6:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8004dd8:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004dda:	68d3      	ldr	r3, [r2, #12]
 8004ddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004de0:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8004de2:	d959      	bls.n	8004e98 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004de4:	4651      	mov	r1, sl
 8004de6:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8004de8:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004dec:	f001 fe12 	bl	8006a14 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d16a      	bne.n	8004eca <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 8004df4:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004df8:	e005      	b.n	8004e06 <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004dfa:	f7fb facf 	bl	800039c <HAL_GetTick>
 8004dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e00:	1b80      	subs	r0, r0, r6
 8004e02:	4298      	cmp	r0, r3
 8004e04:	d22c      	bcs.n	8004e60 <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8004e06:	6820      	ldr	r0, [r4, #0]
 8004e08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e0a:	f413 7f95 	tst.w	r3, #298	; 0x12a
 8004e0e:	d168      	bne.n	8004ee2 <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 8004e10:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004e12:	041a      	lsls	r2, r3, #16
 8004e14:	d5f1      	bpl.n	8004dfa <HAL_SD_ReadBlocks+0x92>
 8004e16:	f1bb 0f1f 	cmp.w	fp, #31
 8004e1a:	d9ee      	bls.n	8004dfa <HAL_SD_ReadBlocks+0x92>
 8004e1c:	f105 0804 	add.w	r8, r5, #4
 8004e20:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 8004e24:	e000      	b.n	8004e28 <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004e26:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 8004e28:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 8004e2c:	f001 fc76 	bl	800671c <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e30:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e34:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 8004e36:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e38:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 8004e3c:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004e40:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004e44:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004e48:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 8004e4c:	d1eb      	bne.n	8004e26 <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004e4e:	f7fb faa5 	bl	800039c <HAL_GetTick>
 8004e52:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004e54:	1b80      	subs	r0, r0, r6
          tempbuff++;
 8004e56:	3520      	adds	r5, #32
        dataremaining -= 32U;
 8004e58:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8004e5c:	4298      	cmp	r0, r3
 8004e5e:	d3d2      	bcc.n	8004e06 <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e60:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 8004e62:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e66:	4842      	ldr	r0, [pc, #264]	; (8004f70 <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
 8004e68:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 8004e6a:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004e6c:	6398      	str	r0, [r3, #56]	; 0x38
}
 8004e6e:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004e70:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004e76:	63a3      	str	r3, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004e78:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004e7c:	6322      	str	r2, [r4, #48]	; 0x30
}
 8004e7e:	b007      	add	sp, #28
 8004e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e84:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004e86:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004e8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e8e:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004e90:	4648      	mov	r0, r9
 8004e92:	b007      	add	sp, #28
 8004e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004e98:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004e9a:	4651      	mov	r1, sl
 8004e9c:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8004e9e:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004ea0:	f001 fd12 	bl	80068c8 <SDMMC_CmdReadSingleBlock>
 8004ea4:	e7a4      	b.n	8004df0 <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 8004ea8:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004eac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8004eb0:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004eb2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004eb4:	b007      	add	sp, #28
 8004eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 8004ebc:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004ebe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004ec2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8004ec4:	b007      	add	sp, #28
 8004ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <HAL_SD_ReadBlocks+0x208>)
 8004ece:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004ed0:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 8004ed2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004ed4:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 8004ed6:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 8004ed8:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004eda:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004ede:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 8004ee0:	e7d6      	b.n	8004e90 <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8004ee2:	68c3      	ldr	r3, [r0, #12]
 8004ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ee8:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004eea:	6820      	ldr	r0, [r4, #0]
 8004eec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004eee:	05db      	lsls	r3, r3, #23
 8004ef0:	d509      	bpl.n	8004f06 <HAL_SD_ReadBlocks+0x19e>
 8004ef2:	2f01      	cmp	r7, #1
 8004ef4:	d907      	bls.n	8004f06 <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
 8004ef6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004ef8:	2b03      	cmp	r3, #3
 8004efa:	d004      	beq.n	8004f06 <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004efc:	f001 ff7c 	bl	8006df8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 8004f00:	2800      	cmp	r0, #0
 8004f02:	d1e2      	bne.n	8004eca <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004f04:	6820      	ldr	r0, [r4, #0]
 8004f06:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f08:	f013 0308 	ands.w	r3, r3, #8
 8004f0c:	d112      	bne.n	8004f34 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004f0e:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8004f10:	f012 0202 	ands.w	r2, r2, #2
 8004f14:	d11a      	bne.n	8004f4c <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8004f16:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004f18:	f013 0320 	ands.w	r3, r3, #32
 8004f1c:	d021      	beq.n	8004f62 <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f1e:	4b14      	ldr	r3, [pc, #80]	; (8004f70 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8004f20:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f22:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8004f24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f26:	f043 0320 	orr.w	r3, r3, #32
 8004f2a:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f2c:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f30:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004f32:	e7ad      	b.n	8004e90 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f34:	4b0e      	ldr	r3, [pc, #56]	; (8004f70 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8004f36:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f38:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004f3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f3c:	f043 0308 	orr.w	r3, r3, #8
 8004f40:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8004f42:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 8004f44:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f48:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004f4a:	e7a1      	b.n	8004e90 <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f4c:	4a08      	ldr	r2, [pc, #32]	; (8004f70 <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 8004f4e:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8004f50:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004f52:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004f54:	f042 0202 	orr.w	r2, r2, #2
 8004f58:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f5a:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f5e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8004f60:	e796      	b.n	8004e90 <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f62:	4904      	ldr	r1, [pc, #16]	; (8004f74 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 8004f64:	2201      	movs	r2, #1
    return HAL_OK;
 8004f66:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004f68:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004f6a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8004f6e:	e78f      	b.n	8004e90 <HAL_SD_ReadBlocks+0x128>
 8004f70:	1fe00fff 	.word	0x1fe00fff
 8004f74:	18000f3a 	.word	0x18000f3a

08004f78 <HAL_SD_WriteBlocks>:
{
 8004f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f7c:	460d      	mov	r5, r1
 8004f7e:	b089      	sub	sp, #36	; 0x24
 8004f80:	4604      	mov	r4, r0
 8004f82:	4692      	mov	sl, r2
 8004f84:	461f      	mov	r7, r3
 8004f86:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8004f8a:	f7fb fa07 	bl	800039c <HAL_GetTick>
  if (NULL == pData)
 8004f8e:	2d00      	cmp	r5, #0
 8004f90:	d07c      	beq.n	800508c <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
 8004f92:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004f96:	2b01      	cmp	r3, #1
 8004f98:	fa5f f983 	uxtb.w	r9, r3
 8004f9c:	d166      	bne.n	800506c <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004f9e:	eb0a 0307 	add.w	r3, sl, r7
 8004fa2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fa4:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004fa6:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004fa8:	63a1      	str	r1, [r4, #56]	; 0x38
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004faa:	d879      	bhi.n	80050a0 <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 8004fac:	2303      	movs	r3, #3
 8004fae:	4606      	mov	r6, r0
 8004fb0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hsd->Instance->DCTRL = 0U;
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004fb8:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004fbc:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004fbe:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8004fc0:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8004fc4:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8004fc8:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 8004fce:	bf18      	it	ne
 8004fd0:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004fd4:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004fd6:	027b      	lsls	r3, r7, #9
 8004fd8:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8004fda:	2390      	movs	r3, #144	; 0x90
 8004fdc:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8004fde:	f001 fbb7 	bl	8006750 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004fe2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 8004fe4:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004fe6:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 8004fe8:	68d3      	ldr	r3, [r2, #12]
 8004fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fee:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 8004ff0:	d946      	bls.n	8005080 <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004ff2:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004ff4:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004ff6:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004ff8:	f001 fe58 	bl	8006cac <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d157      	bne.n	80050b0 <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
 8005000:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005004:	e004      	b.n	8005010 <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005006:	f7fb f9c9 	bl	800039c <HAL_GetTick>
 800500a:	1b80      	subs	r0, r0, r6
 800500c:	4540      	cmp	r0, r8
 800500e:	d21d      	bcs.n	800504c <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8005010:	6820      	ldr	r0, [r4, #0]
 8005012:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005014:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 8005018:	d156      	bne.n	80050c8 <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800501a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800501c:	045a      	lsls	r2, r3, #17
 800501e:	d5f2      	bpl.n	8005006 <HAL_SD_WriteBlocks+0x8e>
 8005020:	f1bb 0f1f 	cmp.w	fp, #31
 8005024:	d9ef      	bls.n	8005006 <HAL_SD_WriteBlocks+0x8e>
 8005026:	f105 0a20 	add.w	sl, r5, #32
 800502a:	e000      	b.n	800502e <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800502c:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800502e:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005032:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005034:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8005036:	f001 fb75 	bl	8006724 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800503a:	4555      	cmp	r5, sl
 800503c:	d1f6      	bne.n	800502c <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800503e:	f7fb f9ad 	bl	800039c <HAL_GetTick>
 8005042:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 8005044:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8005048:	4540      	cmp	r0, r8
 800504a:	d3e1      	bcc.n	8005010 <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800504c:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 800504e:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005052:	4841      	ldr	r0, [pc, #260]	; (8005158 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
 8005054:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 8005056:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005058:	6388      	str	r0, [r1, #56]	; 0x38
}
 800505a:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 800505c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800505e:	63a1      	str	r1, [r4, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005060:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005064:	6323      	str	r3, [r4, #48]	; 0x30
}
 8005066:	b009      	add	sp, #36	; 0x24
 8005068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800506c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800506e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005072:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005076:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005078:	4648      	mov	r0, r9
 800507a:	b009      	add	sp, #36	; 0x24
 800507c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005080:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005082:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005084:	6323      	str	r3, [r4, #48]	; 0x30
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005086:	f001 fd6b 	bl	8006b60 <SDMMC_CmdWriteSingleBlock>
 800508a:	e7b7      	b.n	8004ffc <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800508c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    return HAL_ERROR;
 800508e:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005092:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 8005096:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005098:	63a3      	str	r3, [r4, #56]	; 0x38
}
 800509a:	b009      	add	sp, #36	; 0x24
 800509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
}
 80050a2:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80050a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80050a8:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80050aa:	b009      	add	sp, #36	; 0x24
 80050ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80050b0:	6823      	ldr	r3, [r4, #0]
 80050b2:	4a29      	ldr	r2, [pc, #164]	; (8005158 <HAL_SD_WriteBlocks+0x1e0>)
 80050b4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80050b6:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 80050b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80050ba:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 80050bc:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 80050be:	63a0      	str	r0, [r4, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80050c0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80050c4:	6323      	str	r3, [r4, #48]	; 0x30
          return HAL_ERROR;
 80050c6:	e7d7      	b.n	8005078 <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 80050c8:	68c3      	ldr	r3, [r0, #12]
 80050ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ce:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050d4:	05db      	lsls	r3, r3, #23
 80050d6:	d509      	bpl.n	80050ec <HAL_SD_WriteBlocks+0x174>
 80050d8:	2f01      	cmp	r7, #1
 80050da:	d907      	bls.n	80050ec <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
 80050dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050de:	2b03      	cmp	r3, #3
 80050e0:	d004      	beq.n	80050ec <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80050e2:	f001 fe89 	bl	8006df8 <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 80050e6:	2800      	cmp	r0, #0
 80050e8:	d1e2      	bne.n	80050b0 <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80050ea:	6820      	ldr	r0, [r4, #0]
 80050ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050ee:	f013 0308 	ands.w	r3, r3, #8
 80050f2:	d112      	bne.n	800511a <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80050f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
 80050f6:	f012 0202 	ands.w	r2, r2, #2
 80050fa:	d11a      	bne.n	8005132 <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 80050fc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80050fe:	f013 0310 	ands.w	r3, r3, #16
 8005102:	d021      	beq.n	8005148 <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005104:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8005106:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005108:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800510a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800510c:	f043 0310 	orr.w	r3, r3, #16
 8005110:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005112:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005116:	6322      	str	r2, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005118:	e7ae      	b.n	8005078 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800511a:	4b0f      	ldr	r3, [pc, #60]	; (8005158 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800511c:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800511e:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005120:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005122:	f043 0308 	orr.w	r3, r3, #8
 8005126:	63a3      	str	r3, [r4, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 8005128:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800512a:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800512e:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005130:	e7a2      	b.n	8005078 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005132:	4a09      	ldr	r2, [pc, #36]	; (8005158 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 8005134:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005136:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005138:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800513a:	f042 0202 	orr.w	r2, r2, #2
 800513e:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005140:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005144:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8005146:	e797      	b.n	8005078 <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005148:	4904      	ldr	r1, [pc, #16]	; (800515c <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 800514a:	2201      	movs	r2, #1
    return HAL_OK;
 800514c:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800514e:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005150:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_OK;
 8005154:	e790      	b.n	8005078 <HAL_SD_WriteBlocks+0x100>
 8005156:	bf00      	nop
 8005158:	1fe00fff 	.word	0x1fe00fff
 800515c:	18000f3a 	.word	0x18000f3a

08005160 <HAL_SD_DriveTransceiver_1_8V_Callback>:
}
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop

08005164 <HAL_SD_GetCardCSD>:
{
 8005164:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005166:	6e02      	ldr	r2, [r0, #96]	; 0x60
  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005168:	f04f 0c00 	mov.w	ip, #0
{
 800516c:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800516e:	0f92      	lsrs	r2, r2, #30
 8005170:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005172:	6e02      	ldr	r2, [r0, #96]	; 0x60
 8005174:	f3c2 6283 	ubfx	r2, r2, #26, #4
 8005178:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800517a:	f890 2063 	ldrb.w	r2, [r0, #99]	; 0x63
 800517e:	f002 0203 	and.w	r2, r2, #3
 8005182:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005184:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
 8005188:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800518a:	f890 2061 	ldrb.w	r2, [r0, #97]	; 0x61
 800518e:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005190:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
 8005194:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005196:	6e42      	ldr	r2, [r0, #100]	; 0x64
 8005198:	0d12      	lsrs	r2, r2, #20
 800519a:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800519c:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
 80051a0:	f002 020f 	and.w	r2, r2, #15
 80051a4:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80051a6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80051a8:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 80051ac:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80051ae:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80051b0:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80051b4:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80051b6:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80051b8:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80051bc:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80051be:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80051c0:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80051c4:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 80051c6:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 80051ca:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80051cc:	2a00      	cmp	r2, #0
 80051ce:	f040 808a 	bne.w	80052e6 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80051d2:	f640 72fc 	movw	r2, #4092	; 0xffc
 80051d6:	e9d0 4019 	ldrd	r4, r0, [r0, #100]	; 0x64
 80051da:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 80051de:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 80051e2:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80051e4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80051e6:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 80051ea:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80051ec:	f893 206b 	ldrb.w	r2, [r3, #107]	; 0x6b
 80051f0:	f002 0207 	and.w	r2, r2, #7
 80051f4:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80051f6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80051f8:	f3c2 5242 	ubfx	r2, r2, #21, #3
 80051fc:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80051fe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005200:	f3c2 4282 	ubfx	r2, r2, #18, #3
 8005204:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005206:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005208:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800520c:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800520e:	690a      	ldr	r2, [r1, #16]
 8005210:	3201      	adds	r2, #1
 8005212:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005214:	7e08      	ldrb	r0, [r1, #24]
 8005216:	f000 0007 	and.w	r0, r0, #7
 800521a:	3002      	adds	r0, #2
 800521c:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800521e:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005220:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005222:	f891 c008 	ldrb.w	ip, [r1, #8]
 8005226:	f00c 0c0f 	and.w	ip, ip, #15
 800522a:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800522e:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005232:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8005234:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005238:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
 800523c:	e9c3 2015 	strd	r2, r0, [r3, #84]	; 0x54
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005240:	6e9a      	ldr	r2, [r3, #104]	; 0x68
  pCSD->Reserved3 = 0;
 8005242:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 8005244:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005248:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800524c:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800524e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005250:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 8005254:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005256:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005258:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800525c:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800525e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005260:	0fd2      	lsrs	r2, r2, #31
 8005262:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005264:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005266:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800526a:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800526c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800526e:	f3c2 6282 	ubfx	r2, r2, #26, #3
 8005272:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005274:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005276:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800527a:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800527c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800527e:	f3c2 5240 	ubfx	r2, r2, #21, #1
 8005282:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 8005286:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800528a:	f8b3 206e 	ldrh.w	r2, [r3, #110]	; 0x6e
 800528e:	ea02 020c 	and.w	r2, r2, ip
 8005292:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005296:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005298:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800529c:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80052a0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052a2:	f3c2 3280 	ubfx	r2, r2, #14, #1
 80052a6:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80052aa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052ac:	f3c2 3240 	ubfx	r2, r2, #13, #1
 80052b0:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80052b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052b6:	f3c2 3200 	ubfx	r2, r2, #12, #1
 80052ba:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80052be:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052c0:	f3c2 2281 	ubfx	r2, r2, #10, #2
 80052c4:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80052c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80052ca:	f3c2 2201 	ubfx	r2, r2, #8, #2
 80052ce:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80052d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052d4:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80052d8:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80052dc:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 80052e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80052e4:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80052e6:	2a01      	cmp	r2, #1
 80052e8:	d112      	bne.n	8005310 <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052ea:	6e42      	ldr	r2, [r0, #100]	; 0x64
 80052ec:	f8b0 c06a 	ldrh.w	ip, [r0, #106]	; 0x6a
    hsd->SdCard.BlockSize = 512U;
 80052f0:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80052f4:	0412      	lsls	r2, r2, #16
 80052f6:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 80052fa:	ea42 020c 	orr.w	r2, r2, ip
 80052fe:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005300:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 8005302:	6518      	str	r0, [r3, #80]	; 0x50
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005304:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005306:	6598      	str	r0, [r3, #88]	; 0x58
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005308:	0292      	lsls	r2, r2, #10
 800530a:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800530c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800530e:	e797      	b.n	8005240 <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005310:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 8005312:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005314:	4805      	ldr	r0, [pc, #20]	; (800532c <HAL_SD_GetCardCSD+0x1c8>)
 8005316:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 8005318:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800531a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800531c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005320:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005322:	f883 1034 	strb.w	r1, [r3, #52]	; 0x34
}
 8005326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800532a:	4770      	bx	lr
 800532c:	1fe00fff 	.word	0x1fe00fff

08005330 <HAL_SD_InitCard>:
{
 8005330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005334:	2200      	movs	r2, #0
{
 8005336:	b098      	sub	sp, #96	; 0x60
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005338:	2300      	movs	r3, #0
{
 800533a:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800533c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8005340:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005344:	e9cd 2308 	strd	r2, r3, [sp, #32]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8005348:	f7fe fe60 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800534c:	2800      	cmp	r0, #0
 800534e:	d06b      	beq.n	8005428 <HAL_SD_InitCard+0xf8>
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 8005350:	69a3      	ldr	r3, [r4, #24]
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 8005352:	0a06      	lsrs	r6, r0, #8
 8005354:	4aa1      	ldr	r2, [pc, #644]	; (80055dc <HAL_SD_InitCard+0x2ac>)
 8005356:	4605      	mov	r5, r0
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005358:	2b02      	cmp	r3, #2
  Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 800535a:	930b      	str	r3, [sp, #44]	; 0x2c
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800535c:	fba2 2606 	umull	r2, r6, r2, r6
 8005360:	ea4f 1616 	mov.w	r6, r6, lsr #4
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005364:	d05a      	beq.n	800541c <HAL_SD_InitCard+0xec>
  (void)SDMMC_Init(hsd->Instance, Init);
 8005366:	aa09      	add	r2, sp, #36	; 0x24
 8005368:	960a      	str	r6, [sp, #40]	; 0x28
 800536a:	ab06      	add	r3, sp, #24
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800536c:	0076      	lsls	r6, r6, #1
  (void)SDMMC_Init(hsd->Instance, Init);
 800536e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005370:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8005374:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005376:	6820      	ldr	r0, [r4, #0]
 8005378:	f001 f9b4 	bl	80066e4 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800537c:	6820      	ldr	r0, [r4, #0]
 800537e:	f001 f9d7 	bl	8006730 <SDMMC_PowerState_ON>
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005382:	4897      	ldr	r0, [pc, #604]	; (80055e0 <HAL_SD_InitCard+0x2b0>)
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8005384:	fbb5 f5f6 	udiv	r5, r5, r6
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 8005388:	fbb0 f0f5 	udiv	r0, r0, r5
 800538c:	3001      	adds	r0, #1
 800538e:	f7fb f80b 	bl	80003a8 <HAL_Delay>
  __IO uint32_t count = 0U;
 8005392:	2300      	movs	r3, #0
 8005394:	9305      	str	r3, [sp, #20]
  uint32_t tickstart = HAL_GetTick();
 8005396:	f7fb f801 	bl	800039c <HAL_GetTick>
 800539a:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800539c:	6820      	ldr	r0, [r4, #0]
 800539e:	f001 fedb 	bl	8007158 <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 80053a2:	4605      	mov	r5, r0
 80053a4:	b148      	cbz	r0, 80053ba <HAL_SD_InitCard+0x8a>
    hsd->State = HAL_SD_STATE_READY;
 80053a6:	2601      	movs	r6, #1
 80053a8:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80053ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80053ae:	432b      	orrs	r3, r5
 80053b0:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80053b2:	4630      	mov	r0, r6
 80053b4:	b018      	add	sp, #96	; 0x60
 80053b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80053ba:	6820      	ldr	r0, [r4, #0]
 80053bc:	f001 fef8 	bl	80071b0 <SDMMC_CmdOperCond>
  if (errorstate != HAL_SD_ERROR_NONE)
 80053c0:	2800      	cmp	r0, #0
 80053c2:	f040 80d3 	bne.w	800556c <HAL_SD_InitCard+0x23c>
    hsd->SdCard.CardVersion = CARD_V2_X;
 80053c6:	2301      	movs	r3, #1
 80053c8:	6423      	str	r3, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80053ca:	2100      	movs	r1, #0
 80053cc:	6820      	ldr	r0, [r4, #0]
 80053ce:	f001 ff2f 	bl	8007230 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80053d2:	2800      	cmp	r0, #0
 80053d4:	d132      	bne.n	800543c <HAL_SD_InitCard+0x10c>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80053d6:	9b05      	ldr	r3, [sp, #20]
 80053d8:	f64f 77fe 	movw	r7, #65534	; 0xfffe
 80053dc:	42bb      	cmp	r3, r7
 80053de:	f200 811f 	bhi.w	8005620 <HAL_SD_InitCard+0x2f0>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 80053e2:	f8df 8204 	ldr.w	r8, [pc, #516]	; 80055e8 <HAL_SD_InitCard+0x2b8>
 80053e6:	e010      	b.n	800540a <HAL_SD_InitCard+0xda>
 80053e8:	6820      	ldr	r0, [r4, #0]
 80053ea:	f001 ffc7 	bl	800737c <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 80053ee:	4601      	mov	r1, r0
 80053f0:	bb20      	cbnz	r0, 800543c <HAL_SD_InitCard+0x10c>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80053f2:	6820      	ldr	r0, [r4, #0]
 80053f4:	f001 f9a8 	bl	8006748 <SDMMC_GetResponse>
    count++;
 80053f8:	9b05      	ldr	r3, [sp, #20]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80053fa:	2800      	cmp	r0, #0
    count++;
 80053fc:	f103 0301 	add.w	r3, r3, #1
 8005400:	9305      	str	r3, [sp, #20]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8005402:	9b05      	ldr	r3, [sp, #20]
 8005404:	db1d      	blt.n	8005442 <HAL_SD_InitCard+0x112>
 8005406:	42bb      	cmp	r3, r7
 8005408:	d81b      	bhi.n	8005442 <HAL_SD_InitCard+0x112>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800540a:	2100      	movs	r1, #0
 800540c:	6820      	ldr	r0, [r4, #0]
 800540e:	f001 ff0f 	bl	8007230 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8005412:	4641      	mov	r1, r8
    if (errorstate != HAL_SD_ERROR_NONE)
 8005414:	4605      	mov	r5, r0
 8005416:	2800      	cmp	r0, #0
 8005418:	d0e6      	beq.n	80053e8 <HAL_SD_InitCard+0xb8>
 800541a:	e7c4      	b.n	80053a6 <HAL_SD_InitCard+0x76>
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800541c:	6822      	ldr	r2, [r4, #0]
 800541e:	6813      	ldr	r3, [r2, #0]
 8005420:	f043 0310 	orr.w	r3, r3, #16
 8005424:	6013      	str	r3, [r2, #0]
 8005426:	e79e      	b.n	8005366 <HAL_SD_InitCard+0x36>
    hsd->State = HAL_SD_STATE_READY;
 8005428:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800542a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
}
 800542e:	4630      	mov	r0, r6
    hsd->State = HAL_SD_STATE_READY;
 8005430:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8005434:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8005436:	b018      	add	sp, #96	; 0x60
 8005438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800543c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8005440:	e7b1      	b.n	80053a6 <HAL_SD_InitCard+0x76>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005442:	9a05      	ldr	r2, [sp, #20]
 8005444:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8005448:	429a      	cmp	r2, r3
 800544a:	f200 80ed 	bhi.w	8005628 <HAL_SD_InitCard+0x2f8>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800544e:	0043      	lsls	r3, r0, #1
 8005450:	d505      	bpl.n	800545e <HAL_SD_InitCard+0x12e>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005452:	69a3      	ldr	r3, [r4, #24]
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005454:	2201      	movs	r2, #1
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8005456:	2b02      	cmp	r3, #2
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005458:	63e2      	str	r2, [r4, #60]	; 0x3c
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800545a:	f000 8094 	beq.w	8005586 <HAL_SD_InitCard+0x256>
  uint16_t sd_rca = 1U;
 800545e:	2301      	movs	r3, #1
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005460:	6820      	ldr	r0, [r4, #0]
  uint16_t sd_rca = 1U;
 8005462:	f8ad 3012 	strh.w	r3, [sp, #18]
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8005466:	f001 f96b 	bl	8006740 <SDMMC_GetPowerState>
 800546a:	b348      	cbz	r0, 80054c0 <HAL_SD_InitCard+0x190>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800546c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800546e:	2b03      	cmp	r3, #3
 8005470:	d132      	bne.n	80054d8 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005472:	2104      	movs	r1, #4
 8005474:	6820      	ldr	r0, [r4, #0]
 8005476:	f001 f967 	bl	8006748 <SDMMC_GetResponse>
 800547a:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800547c:	a90d      	add	r1, sp, #52	; 0x34
 800547e:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8005480:	0d1b      	lsrs	r3, r3, #20
 8005482:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8005484:	f7ff fe6e 	bl	8005164 <HAL_SD_GetCardCSD>
 8005488:	4606      	mov	r6, r0
 800548a:	2800      	cmp	r0, #0
 800548c:	f040 80c5 	bne.w	800561a <HAL_SD_InitCard+0x2ea>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8005490:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005492:	6820      	ldr	r0, [r4, #0]
 8005494:	0409      	lsls	r1, r1, #16
 8005496:	f001 fdb9 	bl	800700c <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800549a:	b998      	cbnz	r0, 80054c4 <HAL_SD_InitCard+0x194>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800549c:	f44f 7100 	mov.w	r1, #512	; 0x200
 80054a0:	6820      	ldr	r0, [r4, #0]
 80054a2:	f001 f96b 	bl	800677c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d083      	beq.n	80053b2 <HAL_SD_InitCard+0x82>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054aa:	6823      	ldr	r3, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 80054ac:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054ae:	494d      	ldr	r1, [pc, #308]	; (80055e4 <HAL_SD_InitCard+0x2b4>)
    return HAL_ERROR;
 80054b0:	4616      	mov	r6, r2
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80054b2:	6399      	str	r1, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80054b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054b6:	4318      	orrs	r0, r3
 80054b8:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80054ba:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    return HAL_ERROR;
 80054be:	e778      	b.n	80053b2 <HAL_SD_InitCard+0x82>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054c0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 80054c4:	2601      	movs	r6, #1
 80054c6:	f884 6034 	strb.w	r6, [r4, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80054ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80054cc:	4318      	orrs	r0, r3
 80054ce:	63a0      	str	r0, [r4, #56]	; 0x38
}
 80054d0:	4630      	mov	r0, r6
 80054d2:	b018      	add	sp, #96	; 0x60
 80054d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054d8:	6820      	ldr	r0, [r4, #0]
 80054da:	f002 f8d7 	bl	800768c <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 80054de:	2800      	cmp	r0, #0
 80054e0:	d1f0      	bne.n	80054c4 <HAL_SD_InitCard+0x194>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054e2:	4601      	mov	r1, r0
 80054e4:	6820      	ldr	r0, [r4, #0]
 80054e6:	f001 f92f 	bl	8006748 <SDMMC_GetResponse>
 80054ea:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80054ec:	2104      	movs	r1, #4
 80054ee:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80054f0:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80054f2:	f001 f929 	bl	8006748 <SDMMC_GetResponse>
 80054f6:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80054f8:	2108      	movs	r1, #8
 80054fa:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80054fc:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80054fe:	f001 f923 	bl	8006748 <SDMMC_GetResponse>
 8005502:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005504:	210c      	movs	r1, #12
 8005506:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005508:	67a3      	str	r3, [r4, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800550a:	f001 f91d 	bl	8006748 <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800550e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005510:	67e0      	str	r0, [r4, #124]	; 0x7c
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005512:	2b03      	cmp	r3, #3
 8005514:	d0ad      	beq.n	8005472 <HAL_SD_InitCard+0x142>
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8005516:	f10d 0112 	add.w	r1, sp, #18
 800551a:	6820      	ldr	r0, [r4, #0]
 800551c:	f002 f934 	bl	8007788 <SDMMC_CmdSetRelAdd>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005520:	2800      	cmp	r0, #0
 8005522:	d1cf      	bne.n	80054c4 <HAL_SD_InitCard+0x194>
  if (hsd->SdCard.CardType != CARD_SECURED)
 8005524:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005526:	2b03      	cmp	r3, #3
 8005528:	d0a3      	beq.n	8005472 <HAL_SD_InitCard+0x142>
    hsd->SdCard.RelCardAdd = sd_rca;
 800552a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800552e:	6820      	ldr	r0, [r4, #0]
 8005530:	0419      	lsls	r1, r3, #16
    hsd->SdCard.RelCardAdd = sd_rca;
 8005532:	64a3      	str	r3, [r4, #72]	; 0x48
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005534:	f002 f8e8 	bl	8007708 <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005538:	2800      	cmp	r0, #0
 800553a:	d1c3      	bne.n	80054c4 <HAL_SD_InitCard+0x194>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800553c:	4601      	mov	r1, r0
 800553e:	6820      	ldr	r0, [r4, #0]
 8005540:	f001 f902 	bl	8006748 <SDMMC_GetResponse>
 8005544:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005546:	2104      	movs	r1, #4
 8005548:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800554a:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800554c:	f001 f8fc 	bl	8006748 <SDMMC_GetResponse>
 8005550:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005552:	2108      	movs	r1, #8
 8005554:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8005556:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005558:	f001 f8f6 	bl	8006748 <SDMMC_GetResponse>
 800555c:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800555e:	210c      	movs	r1, #12
 8005560:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8005562:	66a3      	str	r3, [r4, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8005564:	f001 f8f0 	bl	8006748 <SDMMC_GetResponse>
 8005568:	66e0      	str	r0, [r4, #108]	; 0x6c
 800556a:	e782      	b.n	8005472 <HAL_SD_InitCard+0x142>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800556c:	6425      	str	r5, [r4, #64]	; 0x40
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800556e:	6820      	ldr	r0, [r4, #0]
 8005570:	f001 fdf2 	bl	8007158 <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005574:	4605      	mov	r5, r0
 8005576:	2800      	cmp	r0, #0
 8005578:	f47f af15 	bne.w	80053a6 <HAL_SD_InitCard+0x76>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800557c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800557e:	2b01      	cmp	r3, #1
 8005580:	f47f af29 	bne.w	80053d6 <HAL_SD_InitCard+0xa6>
 8005584:	e721      	b.n	80053ca <HAL_SD_InitCard+0x9a>
      if ((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8005586:	01c7      	lsls	r7, r0, #7
 8005588:	f57f af69 	bpl.w	800545e <HAL_SD_InitCard+0x12e>
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800558c:	6822      	ldr	r2, [r4, #0]
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800558e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005592:	65e3      	str	r3, [r4, #92]	; 0x5c
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8005594:	6813      	ldr	r3, [r2, #0]
 8005596:	f043 0308 	orr.w	r3, r3, #8
 800559a:	6013      	str	r3, [r2, #0]
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800559c:	6820      	ldr	r0, [r4, #0]
 800559e:	f002 fa99 	bl	8007ad4 <SDMMC_CmdVoltageSwitch>
        if (errorstate != HAL_SD_ERROR_NONE)
 80055a2:	4605      	mov	r5, r0
 80055a4:	b128      	cbz	r0, 80055b2 <HAL_SD_InitCard+0x282>
 80055a6:	e6fe      	b.n	80053a6 <HAL_SD_InitCard+0x76>
          if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055a8:	f7fa fef8 	bl	800039c <HAL_GetTick>
 80055ac:	1b80      	subs	r0, r0, r6
 80055ae:	3001      	adds	r0, #1
 80055b0:	d03d      	beq.n	800562e <HAL_SD_InitCard+0x2fe>
        while ((hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b6:	0155      	lsls	r5, r2, #5
 80055b8:	d5f6      	bpl.n	80055a8 <HAL_SD_InitCard+0x278>
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80055ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80055be:	639a      	str	r2, [r3, #56]	; 0x38
        if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80055c0:	6823      	ldr	r3, [r4, #0]
 80055c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055c4:	02d8      	lsls	r0, r3, #11
 80055c6:	f57f af39 	bpl.w	800543c <HAL_SD_InitCard+0x10c>
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80055ca:	2001      	movs	r0, #1
 80055cc:	f7ff fdc8 	bl	8005160 <HAL_SD_DriveTransceiver_1_8V_Callback>
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80055d0:	6822      	ldr	r2, [r4, #0]
 80055d2:	6813      	ldr	r3, [r2, #0]
 80055d4:	f043 0304 	orr.w	r3, r3, #4
 80055d8:	6013      	str	r3, [r2, #0]
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80055da:	e00c      	b.n	80055f6 <HAL_SD_InitCard+0x2c6>
 80055dc:	014f8b59 	.word	0x014f8b59
 80055e0:	00012110 	.word	0x00012110
 80055e4:	1fe00fff 	.word	0x1fe00fff
 80055e8:	c1100000 	.word	0xc1100000
            if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80055ec:	f7fa fed6 	bl	800039c <HAL_GetTick>
 80055f0:	1b80      	subs	r0, r0, r6
 80055f2:	3001      	adds	r0, #1
 80055f4:	d01b      	beq.n	800562e <HAL_SD_InitCard+0x2fe>
          while ((hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80055f6:	6823      	ldr	r3, [r4, #0]
 80055f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055fa:	0191      	lsls	r1, r2, #6
 80055fc:	d5f6      	bpl.n	80055ec <HAL_SD_InitCard+0x2bc>
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 80055fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005602:	639a      	str	r2, [r3, #56]	; 0x38
          if ((hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8005604:	6823      	ldr	r3, [r4, #0]
 8005606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005608:	02d2      	lsls	r2, r2, #11
 800560a:	d40d      	bmi.n	8005628 <HAL_SD_InitCard+0x2f8>
          hsd->Instance->POWER = 0x13U;
 800560c:	2113      	movs	r1, #19
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800560e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
          hsd->Instance->POWER = 0x13U;
 8005612:	6019      	str	r1, [r3, #0]
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8005618:	e721      	b.n	800545e <HAL_SD_InitCard+0x12e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800561a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800561e:	e751      	b.n	80054c4 <HAL_SD_InitCard+0x194>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 8005620:	9b05      	ldr	r3, [sp, #20]
 8005622:	42bb      	cmp	r3, r7
 8005624:	f67f af1b 	bls.w	800545e <HAL_SD_InitCard+0x12e>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005628:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800562c:	e6bb      	b.n	80053a6 <HAL_SD_InitCard+0x76>
            return HAL_SD_ERROR_TIMEOUT;
 800562e:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005632:	e6b8      	b.n	80053a6 <HAL_SD_InitCard+0x76>

08005634 <HAL_SD_GetCardStatus>:
{
 8005634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	b096      	sub	sp, #88	; 0x58
 800563c:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800563e:	f7fa fead 	bl	800039c <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005642:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 8005644:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005646:	6820      	ldr	r0, [r4, #0]
 8005648:	f001 f87e 	bl	8006748 <SDMMC_GetResponse>
 800564c:	0182      	lsls	r2, r0, #6
 800564e:	d45c      	bmi.n	800570a <HAL_SD_GetCardStatus+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8005650:	2140      	movs	r1, #64	; 0x40
 8005652:	6820      	ldr	r0, [r4, #0]
 8005654:	f001 f892 	bl	800677c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005658:	4603      	mov	r3, r0
 800565a:	b1e8      	cbz	r0, 8005698 <HAL_SD_GetCardStatus+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800565c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800565e:	63a2      	str	r2, [r4, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005660:	6820      	ldr	r0, [r4, #0]
 8005662:	4956      	ldr	r1, [pc, #344]	; (80057bc <HAL_SD_GetCardStatus+0x188>)
    hsd->State = HAL_SD_STATE_READY;
 8005664:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005666:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8005668:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800566a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800566c:	4303      	orrs	r3, r0
 800566e:	63a3      	str	r3, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005670:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005678:	6820      	ldr	r0, [r4, #0]
 800567a:	f001 f87f 	bl	800677c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800567e:	b138      	cbz	r0, 8005690 <HAL_SD_GetCardStatus+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 8005680:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005682:	6822      	ldr	r2, [r4, #0]
 8005684:	494d      	ldr	r1, [pc, #308]	; (80057bc <HAL_SD_GetCardStatus+0x188>)
    status = HAL_ERROR;
 8005686:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005688:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800568a:	63a0      	str	r0, [r4, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800568c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 8005690:	4630      	mov	r0, r6
 8005692:	b016      	add	sp, #88	; 0x58
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005698:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800569a:	6820      	ldr	r0, [r4, #0]
 800569c:	0409      	lsls	r1, r1, #16
 800569e:	f001 fdc7 	bl	8007230 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 80056a2:	4603      	mov	r3, r0
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d1d9      	bne.n	800565c <HAL_SD_GetCardStatus+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056ac:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80056ae:	4669      	mov	r1, sp
 80056b0:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056b2:	e9cd 2300 	strd	r2, r3, [sp]
 80056b6:	2260      	movs	r2, #96	; 0x60
 80056b8:	2302      	movs	r3, #2
 80056ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80056be:	2301      	movs	r3, #1
 80056c0:	2200      	movs	r2, #0
 80056c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80056c6:	f001 f843 	bl	8006750 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80056ca:	6820      	ldr	r0, [r4, #0]
 80056cc:	f002 f95a 	bl	8007984 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 80056d0:	4603      	mov	r3, r0
 80056d2:	2800      	cmp	r0, #0
 80056d4:	d1c2      	bne.n	800565c <HAL_SD_GetCardStatus+0x28>
  uint32_t *pData = pSDstatus;
 80056d6:	ae06      	add	r6, sp, #24
 80056d8:	e004      	b.n	80056e4 <HAL_SD_GetCardStatus+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80056da:	f7fa fe5f 	bl	800039c <HAL_GetTick>
 80056de:	1bc0      	subs	r0, r0, r7
 80056e0:	3001      	adds	r0, #1
 80056e2:	d016      	beq.n	8005712 <HAL_SD_GetCardStatus+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80056e4:	6820      	ldr	r0, [r4, #0]
 80056e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80056e8:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80056ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80056ee:	d113      	bne.n	8005718 <HAL_SD_GetCardStatus+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	d5f2      	bpl.n	80056da <HAL_SD_GetCardStatus+0xa6>
 80056f4:	f106 0820 	add.w	r8, r6, #32
 80056f8:	e000      	b.n	80056fc <HAL_SD_GetCardStatus+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80056fa:	6820      	ldr	r0, [r4, #0]
 80056fc:	f001 f80e 	bl	800671c <SDMMC_ReadFIFO>
 8005700:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 8005704:	4546      	cmp	r6, r8
 8005706:	d1f8      	bne.n	80056fa <HAL_SD_GetCardStatus+0xc6>
 8005708:	e7e7      	b.n	80056da <HAL_SD_GetCardStatus+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800570a:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800570c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005710:	e7a7      	b.n	8005662 <HAL_SD_GetCardStatus+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 8005712:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005716:	e7a3      	b.n	8005660 <HAL_SD_GetCardStatus+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8005718:	0719      	lsls	r1, r3, #28
 800571a:	d448      	bmi.n	80057ae <HAL_SD_GetCardStatus+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800571c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800571e:	079a      	lsls	r2, r3, #30
 8005720:	d447      	bmi.n	80057b2 <HAL_SD_GetCardStatus+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8005722:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005724:	069b      	lsls	r3, r3, #26
 8005726:	d50a      	bpl.n	800573e <HAL_SD_GetCardStatus+0x10a>
 8005728:	e045      	b.n	80057b6 <HAL_SD_GetCardStatus+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800572a:	f000 fff7 	bl	800671c <SDMMC_ReadFIFO>
 800572e:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005732:	f7fa fe33 	bl	800039c <HAL_GetTick>
 8005736:	1bc0      	subs	r0, r0, r7
 8005738:	3001      	adds	r0, #1
 800573a:	d0ea      	beq.n	8005712 <HAL_SD_GetCardStatus+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800573c:	6820      	ldr	r0, [r4, #0]
 800573e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8005740:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 8005744:	d1f1      	bne.n	800572a <HAL_SD_GetCardStatus+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <HAL_SD_GetCardStatus+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
 8005748:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800574a:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800574c:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800574e:	f3c3 1281 	ubfx	r2, r3, #6, #2
 8005752:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8005754:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8005758:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800575a:	0a1a      	lsrs	r2, r3, #8
 800575c:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005760:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 8005764:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 8005768:	b292      	uxth	r2, r2
 800576a:	ba09      	rev	r1, r1
 800576c:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800576e:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8005770:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8005772:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8005774:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8005778:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800577c:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800577e:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005782:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8005784:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8005786:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005788:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800578c:	b2d0      	uxtb	r0, r2
 800578e:	4303      	orrs	r3, r0
 8005790:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8005792:	f3c2 2385 	ubfx	r3, r2, #10, #6
 8005796:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8005798:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800579c:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800579e:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80057a2:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 80057a6:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 80057a8:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 80057aa:	74a9      	strb	r1, [r5, #18]
 80057ac:	e762      	b.n	8005674 <HAL_SD_GetCardStatus+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80057ae:	2308      	movs	r3, #8
 80057b0:	e757      	b.n	8005662 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80057b2:	2302      	movs	r3, #2
 80057b4:	e755      	b.n	8005662 <HAL_SD_GetCardStatus+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 80057b6:	2320      	movs	r3, #32
 80057b8:	e753      	b.n	8005662 <HAL_SD_GetCardStatus+0x2e>
 80057ba:	bf00      	nop
 80057bc:	1fe00fff 	.word	0x1fe00fff
 80057c0:	18000f3a 	.word	0x18000f3a

080057c4 <HAL_SD_GetCardInfo>:
{
 80057c4:	4603      	mov	r3, r0
}
 80057c6:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80057c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057ca:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80057cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057ce:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80057d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057d2:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80057d4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057d6:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80057d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80057da:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80057dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80057de:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80057e0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057e2:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80057e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e6:	61cb      	str	r3, [r1, #28]
}
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop

080057ec <HAL_SD_ConfigWideBusOperation>:
{
 80057ec:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 80057ee:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 80057f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
{
 80057f2:	b08b      	sub	sp, #44	; 0x2c
 80057f4:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 80057f6:	4293      	cmp	r3, r2
{
 80057f8:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 80057fa:	f880 2034 	strb.w	r2, [r0, #52]	; 0x34
  if (hsd->SdCard.CardType != CARD_SECURED)
 80057fe:	d033      	beq.n	8005868 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8005800:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8005804:	d030      	beq.n	8005868 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8005806:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800580a:	f000 8086 	beq.w	800591a <HAL_SD_ConfigWideBusOperation+0x12e>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800580e:	2900      	cmp	r1, #0
 8005810:	d064      	beq.n	80058dc <HAL_SD_ConfigWideBusOperation+0xf0>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005812:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8005814:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005818:	6383      	str	r3, [r0, #56]	; 0x38
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800581a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800581c:	bb5b      	cbnz	r3, 8005876 <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800581e:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8005822:	f7fe fbf3 	bl	800400c <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 8005826:	2800      	cmp	r0, #0
 8005828:	d03c      	beq.n	80058a4 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800582a:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800582c:	4b56      	ldr	r3, [pc, #344]	; (8005988 <HAL_SD_ConfigWideBusOperation+0x19c>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800582e:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 8005830:	9506      	str	r5, [sp, #24]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005832:	9207      	str	r2, [sp, #28]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005834:	fba3 5300 	umull	r5, r3, r3, r0
 8005838:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800583a:	9104      	str	r1, [sp, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800583c:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005840:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005842:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005846:	9105      	str	r1, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8005848:	d239      	bcs.n	80058be <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800584a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800584c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005850:	d035      	beq.n	80058be <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8005852:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8005856:	f000 8082 	beq.w	800595e <HAL_SD_ConfigWideBusOperation+0x172>
        if (hsd->Init.ClockDiv == 0U)
 800585a:	bb4a      	cbnz	r2, 80058b0 <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800585c:	4b4b      	ldr	r3, [pc, #300]	; (800598c <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800585e:	4298      	cmp	r0, r3
 8005860:	f240 8087 	bls.w	8005972 <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8005864:	9508      	str	r5, [sp, #32]
 8005866:	e02b      	b.n	80058c0 <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005868:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800586a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800586e:	63a3      	str	r3, [r4, #56]	; 0x38
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005870:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005872:	2b00      	cmp	r3, #0
 8005874:	d0d3      	beq.n	800581e <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8005876:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 8005878:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800587a:	4a45      	ldr	r2, [pc, #276]	; (8005990 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800587e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005882:	6820      	ldr	r0, [r4, #0]
 8005884:	f000 ff7a 	bl	800677c <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005888:	b130      	cbz	r0, 8005898 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800588a:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800588c:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800588e:	4a40      	ldr	r2, [pc, #256]	; (8005990 <HAL_SD_ConfigWideBusOperation+0x1a4>)
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005892:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005894:	4318      	orrs	r0, r3
 8005896:	63a0      	str	r0, [r4, #56]	; 0x38
  hsd->State = HAL_SD_STATE_READY;
 8005898:	2301      	movs	r3, #1
}
 800589a:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800589c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
}
 80058a0:	b00b      	add	sp, #44	; 0x2c
 80058a2:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80058a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 80058a6:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 80058a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058ac:	63a3      	str	r3, [r4, #56]	; 0x38
      status = HAL_ERROR;
 80058ae:	e7e6      	b.n	800587e <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80058b0:	0053      	lsls	r3, r2, #1
 80058b2:	fbb0 f0f3 	udiv	r0, r0, r3
 80058b6:	4b35      	ldr	r3, [pc, #212]	; (800598c <HAL_SD_ConfigWideBusOperation+0x1a0>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80058b8:	4298      	cmp	r0, r3
 80058ba:	bf88      	it	hi
 80058bc:	462a      	movhi	r2, r5
 80058be:	9208      	str	r2, [sp, #32]
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80058c0:	69a2      	ldr	r2, [r4, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 80058c2:	ab04      	add	r3, sp, #16
  HAL_StatusTypeDef status = HAL_OK;
 80058c4:	2500      	movs	r5, #0
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
 80058c6:	9209      	str	r2, [sp, #36]	; 0x24
      (void)SDMMC_Init(hsd->Instance, Init);
 80058c8:	aa0a      	add	r2, sp, #40	; 0x28
 80058ca:	e912 0007 	ldmdb	r2, {r0, r1, r2}
 80058ce:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80058d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	f000 ff05 	bl	80066e4 <SDMMC_Init>
 80058da:	e7d0      	b.n	800587e <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
 80058dc:	2200      	movs	r2, #0
 80058de:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058e0:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 80058e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80058e6:	f000 ff2f 	bl	8006748 <SDMMC_GetResponse>
 80058ea:	0182      	lsls	r2, r0, #6
 80058ec:	d434      	bmi.n	8005958 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
 80058ee:	a904      	add	r1, sp, #16
 80058f0:	4620      	mov	r0, r4
 80058f2:	f7ff f9c7 	bl	8004c84 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 80058f6:	b960      	cbnz	r0, 8005912 <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80058f8:	9b05      	ldr	r3, [sp, #20]
 80058fa:	03db      	lsls	r3, r3, #15
 80058fc:	d536      	bpl.n	800596c <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80058fe:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005900:	6820      	ldr	r0, [r4, #0]
 8005902:	0409      	lsls	r1, r1, #16
 8005904:	f001 fc94 	bl	8007230 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005908:	b918      	cbnz	r0, 8005912 <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800590a:	4601      	mov	r1, r0
 800590c:	6820      	ldr	r0, [r4, #0]
 800590e:	f001 fd6f 	bl	80073f0 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 8005912:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005914:	4318      	orrs	r0, r3
 8005916:	63a0      	str	r0, [r4, #56]	; 0x38
 8005918:	e7aa      	b.n	8005870 <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
 800591a:	2200      	movs	r2, #0
 800591c:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800591e:	2100      	movs	r1, #0
 8005920:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 8005922:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8005926:	f000 ff0f 	bl	8006748 <SDMMC_GetResponse>
 800592a:	0180      	lsls	r0, r0, #6
 800592c:	d414      	bmi.n	8005958 <HAL_SD_ConfigWideBusOperation+0x16c>
  errorstate = SD_FindSCR(hsd, scr);
 800592e:	a904      	add	r1, sp, #16
 8005930:	4620      	mov	r0, r4
 8005932:	f7ff f9a7 	bl	8004c84 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005936:	2800      	cmp	r0, #0
 8005938:	d1eb      	bne.n	8005912 <HAL_SD_ConfigWideBusOperation+0x126>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800593a:	9b05      	ldr	r3, [sp, #20]
 800593c:	0359      	lsls	r1, r3, #13
 800593e:	d515      	bpl.n	800596c <HAL_SD_ConfigWideBusOperation+0x180>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005940:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005942:	6820      	ldr	r0, [r4, #0]
 8005944:	0409      	lsls	r1, r1, #16
 8005946:	f001 fc73 	bl	8007230 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800594a:	2800      	cmp	r0, #0
 800594c:	d1e1      	bne.n	8005912 <HAL_SD_ConfigWideBusOperation+0x126>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800594e:	2102      	movs	r1, #2
 8005950:	6820      	ldr	r0, [r4, #0]
 8005952:	f001 fd4d 	bl	80073f0 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 8005956:	e7dc      	b.n	8005912 <HAL_SD_ConfigWideBusOperation+0x126>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8005958:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800595c:	e7d9      	b.n	8005912 <HAL_SD_ConfigWideBusOperation+0x126>
        if (hsd->Init.ClockDiv == 0U)
 800595e:	b95a      	cbnz	r2, 8005978 <HAL_SD_ConfigWideBusOperation+0x18c>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8005960:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <HAL_SD_ConfigWideBusOperation+0x1a8>)
 8005962:	4290      	cmp	r0, r2
 8005964:	d905      	bls.n	8005972 <HAL_SD_ConfigWideBusOperation+0x186>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8005966:	0e5b      	lsrs	r3, r3, #25
 8005968:	9308      	str	r3, [sp, #32]
 800596a:	e7a9      	b.n	80058c0 <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800596c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005970:	e7cf      	b.n	8005912 <HAL_SD_ConfigWideBusOperation+0x126>
            Init.ClockDiv = hsd->Init.ClockDiv;
 8005972:	2300      	movs	r3, #0
 8005974:	9308      	str	r3, [sp, #32]
 8005976:	e7a3      	b.n	80058c0 <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk/(2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8005978:	0051      	lsls	r1, r2, #1
 800597a:	fbb0 f0f1 	udiv	r0, r0, r1
 800597e:	4905      	ldr	r1, [pc, #20]	; (8005994 <HAL_SD_ConfigWideBusOperation+0x1a8>)
 8005980:	4288      	cmp	r0, r1
 8005982:	d99c      	bls.n	80058be <HAL_SD_ConfigWideBusOperation+0xd2>
 8005984:	e7ef      	b.n	8005966 <HAL_SD_ConfigWideBusOperation+0x17a>
 8005986:	bf00      	nop
 8005988:	55e63b89 	.word	0x55e63b89
 800598c:	017d7840 	.word	0x017d7840
 8005990:	1fe00fff 	.word	0x1fe00fff
 8005994:	02faf080 	.word	0x02faf080

08005998 <HAL_SD_Init>:
{
 8005998:	b5f0      	push	{r4, r5, r6, r7, lr}
 800599a:	b087      	sub	sp, #28
  if (hsd == NULL)
 800599c:	b1a0      	cbz	r0, 80059c8 <HAL_SD_Init+0x30>
  if (hsd->State == HAL_SD_STATE_RESET)
 800599e:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
 80059a2:	4604      	mov	r4, r0
 80059a4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059a8:	b93b      	cbnz	r3, 80059ba <HAL_SD_Init+0x22>
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80059aa:	6983      	ldr	r3, [r0, #24]
    hsd->Lock = HAL_UNLOCKED;
 80059ac:	7702      	strb	r2, [r0, #28]
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 80059ae:	b90b      	cbnz	r3, 80059b4 <HAL_SD_Init+0x1c>
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 80059b0:	2302      	movs	r3, #2
 80059b2:	6183      	str	r3, [r0, #24]
    HAL_SD_MspInit(hsd);
 80059b4:	4620      	mov	r0, r4
 80059b6:	f004 ff6b 	bl	800a890 <HAL_SD_MspInit>
  hsd->State = HAL_SD_STATE_BUSY;
 80059ba:	2303      	movs	r3, #3
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80059bc:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_BUSY;
 80059be:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80059c2:	f7ff fcb5 	bl	8005330 <HAL_SD_InitCard>
 80059c6:	b118      	cbz	r0, 80059d0 <HAL_SD_Init+0x38>
    return HAL_ERROR;
 80059c8:	2601      	movs	r6, #1
}
 80059ca:	4630      	mov	r0, r6
 80059cc:	b007      	add	sp, #28
 80059ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80059d0:	a901      	add	r1, sp, #4
 80059d2:	4620      	mov	r0, r4
 80059d4:	f7ff fe2e 	bl	8005634 <HAL_SD_GetCardStatus>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d1f5      	bne.n	80059c8 <HAL_SD_Init+0x30>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80059dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
  speedgrade = CardStatus.UhsSpeedGrade;
 80059de:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80059e2:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 80059e4:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 80059e8:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 80059ea:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80059ec:	d024      	beq.n	8005a38 <HAL_SD_Init+0xa0>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 80059ee:	65e0      	str	r0, [r4, #92]	; 0x5c
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 80059f0:	68e1      	ldr	r1, [r4, #12]
 80059f2:	4620      	mov	r0, r4
 80059f4:	f7ff fefa 	bl	80057ec <HAL_SD_ConfigWideBusOperation>
 80059f8:	4606      	mov	r6, r0
 80059fa:	2800      	cmp	r0, #0
 80059fc:	d1e4      	bne.n	80059c8 <HAL_SD_Init+0x30>
  tickstart = HAL_GetTick();
 80059fe:	f7fa fccd 	bl	800039c <HAL_GetTick>
 8005a02:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a04:	e00c      	b.n	8005a20 <HAL_SD_Init+0x88>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a06:	6820      	ldr	r0, [r4, #0]
 8005a08:	4629      	mov	r1, r5
 8005a0a:	f000 fe9d 	bl	8006748 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a0e:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8005a12:	2804      	cmp	r0, #4
 8005a14:	d018      	beq.n	8005a48 <HAL_SD_Init+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8005a16:	f7fa fcc1 	bl	800039c <HAL_GetTick>
 8005a1a:	1bc3      	subs	r3, r0, r7
 8005a1c:	3301      	adds	r3, #1
 8005a1e:	d019      	beq.n	8005a54 <HAL_SD_Init+0xbc>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a20:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005a22:	6820      	ldr	r0, [r4, #0]
 8005a24:	0409      	lsls	r1, r1, #16
 8005a26:	f001 ff07 	bl	8007838 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a2a:	4605      	mov	r5, r0
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d0ea      	beq.n	8005a06 <HAL_SD_Init+0x6e>
    hsd->ErrorCode |= errorstate;
 8005a30:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a32:	4303      	orrs	r3, r0
 8005a34:	63a3      	str	r3, [r4, #56]	; 0x38
  return (HAL_SD_CardStateTypeDef)cardstate;
 8005a36:	e7ee      	b.n	8005a16 <HAL_SD_Init+0x7e>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8005a38:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8005a3a:	bf14      	ite	ne
 8005a3c:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8005a40:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8005a44:	65e3      	str	r3, [r4, #92]	; 0x5c
 8005a46:	e7d3      	b.n	80059f0 <HAL_SD_Init+0x58>
  hsd->State = HAL_SD_STATE_READY;
 8005a48:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005a4a:	63a5      	str	r5, [r4, #56]	; 0x38
  hsd->Context = SD_CONTEXT_NONE;
 8005a4c:	6325      	str	r5, [r4, #48]	; 0x30
  hsd->State = HAL_SD_STATE_READY;
 8005a4e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005a52:	e7ba      	b.n	80059ca <HAL_SD_Init+0x32>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005a54:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 8005a58:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 8005a5a:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8005a5c:	63a2      	str	r2, [r4, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a5e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      return HAL_TIMEOUT;
 8005a62:	e7b2      	b.n	80059ca <HAL_SD_Init+0x32>

08005a64 <HAL_SD_GetCardState>:
{
 8005a64:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a66:	6c81      	ldr	r1, [r0, #72]	; 0x48
{
 8005a68:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8005a6a:	6800      	ldr	r0, [r0, #0]
 8005a6c:	0409      	lsls	r1, r1, #16
 8005a6e:	f001 fee3 	bl	8007838 <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 8005a72:	4601      	mov	r1, r0
 8005a74:	b120      	cbz	r0, 8005a80 <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 8005a76:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a78:	2000      	movs	r0, #0
 8005a7a:	4319      	orrs	r1, r3
 8005a7c:	63a1      	str	r1, [r4, #56]	; 0x38
}
 8005a7e:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8005a80:	6820      	ldr	r0, [r4, #0]
 8005a82:	f000 fe61 	bl	8006748 <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005a86:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005a8c:	b318      	cbz	r0, 8005ad6 <HAL_SDRAM_Init+0x4a>
{
 8005a8e:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a90:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8005a94:	4604      	mov	r4, r0
 8005a96:	460d      	mov	r5, r1
 8005a98:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a9c:	b1b3      	cbz	r3, 8005acc <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a9e:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005aa6:	f851 0b04 	ldr.w	r0, [r1], #4
 8005aaa:	f000 fd69 	bl	8006580 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005aae:	6862      	ldr	r2, [r4, #4]
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	6820      	ldr	r0, [r4, #0]
 8005ab4:	f000 fda2 	bl	80065fc <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8005ab8:	4a08      	ldr	r2, [pc, #32]	; (8005adc <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005aba:	2101      	movs	r1, #1

  return HAL_OK;
 8005abc:	2000      	movs	r0, #0
  __FMC_ENABLE();
 8005abe:	6813      	ldr	r3, [r2, #0]
 8005ac0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ac4:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005ac6:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 8005aca:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 8005acc:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 8005ad0:	f004 f932 	bl	8009d38 <HAL_SDRAM_MspInit>
 8005ad4:	e7e3      	b.n	8005a9e <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 8005ad6:	2001      	movs	r0, #1
}
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	52004000 	.word	0x52004000

08005ae0 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8005ae0:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005ae2:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005ae6:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8005ae8:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8005aea:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 8005aec:	d004      	beq.n	8005af8 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8005aee:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 8005af2:	2e01      	cmp	r6, #1
 8005af4:	d001      	beq.n	8005afa <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 8005af6:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005afa:	2302      	movs	r3, #2
 8005afc:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005afe:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b00:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8005b04:	f000 fdc8 	bl	8006698 <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8005b08:	682b      	ldr	r3, [r5, #0]
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d003      	beq.n	8005b16 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 8005b0e:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 8005b10:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005b16:	2305      	movs	r3, #5
  return HAL_OK;
 8005b18:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8005b1a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8005b1e:	bd70      	pop	{r4, r5, r6, pc}

08005b20 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8005b20:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b22:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 8005b26:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	b2d8      	uxtb	r0, r3
 8005b2c:	d005      	beq.n	8005b3a <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8005b2e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	b2dd      	uxtb	r5, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 8005b3a:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b3c:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005b3e:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005b40:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8005b44:	f000 fdc0 	bl	80066c8 <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 8005b48:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 8005b4a:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 8005b4e:	bd38      	pop	{r3, r4, r5, pc}

08005b50 <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 8005b50:	6802      	ldr	r2, [r0, #0]
{
 8005b52:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 8005b54:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8005b56:	6991      	ldr	r1, [r2, #24]
 8005b58:	f041 0108 	orr.w	r1, r1, #8
 8005b5c:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8005b5e:	6801      	ldr	r1, [r0, #0]
 8005b60:	698a      	ldr	r2, [r1, #24]
 8005b62:	f042 0210 	orr.w	r2, r2, #16
 8005b66:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b68:	6801      	ldr	r1, [r0, #0]
 8005b6a:	680a      	ldr	r2, [r1, #0]
 8005b6c:	f022 0201 	bic.w	r2, r2, #1
 8005b70:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8005b72:	6801      	ldr	r1, [r0, #0]
 8005b74:	4a27      	ldr	r2, [pc, #156]	; (8005c14 <SPI_CloseTransfer+0xc4>)
 8005b76:	690c      	ldr	r4, [r1, #16]
 8005b78:	4022      	ands	r2, r4
 8005b7a:	610a      	str	r2, [r1, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005b7c:	6801      	ldr	r1, [r0, #0]
 8005b7e:	688a      	ldr	r2, [r1, #8]
 8005b80:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005b84:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005b86:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8005b8a:	2a04      	cmp	r2, #4
 8005b8c:	d001      	beq.n	8005b92 <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8005b8e:	069c      	lsls	r4, r3, #26
 8005b90:	d433      	bmi.n	8005bfa <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005b92:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8005b96:	2a03      	cmp	r2, #3
 8005b98:	d001      	beq.n	8005b9e <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8005b9a:	0659      	lsls	r1, r3, #25
 8005b9c:	d421      	bmi.n	8005be2 <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8005b9e:	059a      	lsls	r2, r3, #22
 8005ba0:	d50a      	bpl.n	8005bb8 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ba2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005ba6:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005ba8:	f042 0201 	orr.w	r2, r2, #1
 8005bac:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005bb0:	698a      	ldr	r2, [r1, #24]
 8005bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bb6:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8005bb8:	05db      	lsls	r3, r3, #23
 8005bba:	d50a      	bpl.n	8005bd2 <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bbc:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bc0:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005bc2:	f043 0308 	orr.w	r3, r3, #8
 8005bc6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005bca:	6993      	ldr	r3, [r2, #24]
 8005bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bd0:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8005bd2:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 8005bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 8005bd8:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8005bdc:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 8005be0:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005be2:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be6:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005be8:	f042 0204 	orr.w	r2, r2, #4
 8005bec:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf0:	698a      	ldr	r2, [r1, #24]
 8005bf2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bf6:	618a      	str	r2, [r1, #24]
 8005bf8:	e7d1      	b.n	8005b9e <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005bfa:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005bfe:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8005c00:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c04:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8005c08:	698a      	ldr	r2, [r1, #24]
 8005c0a:	f042 0220 	orr.w	r2, r2, #32
 8005c0e:	618a      	str	r2, [r1, #24]
 8005c10:	e7bf      	b.n	8005b92 <SPI_CloseTransfer+0x42>
 8005c12:	bf00      	nop
 8005c14:	fffffc90 	.word	0xfffffc90

08005c18 <HAL_SPI_Init>:
  if (hspi == NULL)
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	f000 80a8 	beq.w	8005d6e <HAL_SPI_Init+0x156>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c1e:	4a57      	ldr	r2, [pc, #348]	; (8005d7c <HAL_SPI_Init+0x164>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c20:	2100      	movs	r1, #0
{
 8005c22:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c24:	6803      	ldr	r3, [r0, #0]
 8005c26:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c28:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d015      	beq.n	8005c5a <HAL_SPI_Init+0x42>
 8005c2e:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d011      	beq.n	8005c5a <HAL_SPI_Init+0x42>
 8005c36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	68c2      	ldr	r2, [r0, #12]
 8005c3e:	f000 808f 	beq.w	8005d60 <HAL_SPI_Init+0x148>
 8005c42:	2a0f      	cmp	r2, #15
 8005c44:	d807      	bhi.n	8005c56 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c46:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8005c48:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c4a:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8005c4c:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 8005c4e:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005c52:	2a08      	cmp	r2, #8
 8005c54:	d914      	bls.n	8005c80 <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 8005c56:	2001      	movs	r0, #1
}
 8005c58:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 8005c5a:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c5c:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005c5e:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c60:	4d46      	ldr	r5, [pc, #280]	; (8005d7c <HAL_SPI_Init+0x164>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005c62:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 8005c64:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c66:	4946      	ldr	r1, [pc, #280]	; (8005d80 <HAL_SPI_Init+0x168>)
 8005c68:	428b      	cmp	r3, r1
 8005c6a:	bf18      	it	ne
 8005c6c:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 8005c6e:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8005c72:	d003      	beq.n	8005c7c <HAL_SPI_Init+0x64>
 8005c74:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005c78:	428b      	cmp	r3, r1
 8005c7a:	d101      	bne.n	8005c80 <HAL_SPI_Init+0x68>
 8005c7c:	2a10      	cmp	r2, #16
 8005c7e:	d8ea      	bhi.n	8005c56 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c80:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005c84:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	d062      	beq.n	8005d52 <HAL_SPI_Init+0x13a>
  hspi->State = HAL_SPI_STATE_BUSY;
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	f022 0201 	bic.w	r2, r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005c9a:	69a3      	ldr	r3, [r4, #24]
 8005c9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ca0:	d047      	beq.n	8005d32 <HAL_SPI_Init+0x11a>
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8005ca2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8005ca4:	69e3      	ldr	r3, [r4, #28]
 8005ca6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	68e1      	ldr	r1, [r4, #12]
 8005cac:	6822      	ldr	r2, [r4, #0]
 8005cae:	4303      	orrs	r3, r0
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 8005cb4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005cb6:	69a0      	ldr	r0, [r4, #24]
 8005cb8:	6822      	ldr	r2, [r4, #0]
 8005cba:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 8005cbe:	432b      	orrs	r3, r5
 8005cc0:	430b      	orrs	r3, r1
 8005cc2:	6921      	ldr	r1, [r4, #16]
 8005cc4:	4303      	orrs	r3, r0
 8005cc6:	6960      	ldr	r0, [r4, #20]
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	6a21      	ldr	r1, [r4, #32]
 8005ccc:	4303      	orrs	r3, r0
 8005cce:	6860      	ldr	r0, [r4, #4]
 8005cd0:	430b      	orrs	r3, r1
 8005cd2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8005cd4:	4303      	orrs	r3, r0
 8005cd6:	68a0      	ldr	r0, [r4, #8]
 8005cd8:	430b      	orrs	r3, r1
 8005cda:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005cdc:	4303      	orrs	r3, r0
 8005cde:	430b      	orrs	r3, r1
 8005ce0:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8005ce6:	6863      	ldr	r3, [r4, #4]
 8005ce8:	b96b      	cbnz	r3, 8005d06 <HAL_SPI_Init+0xee>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	6893      	ldr	r3, [r2, #8]
 8005cee:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8005cf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005cf6:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8005cf8:	6822      	ldr	r2, [r4, #0]
 8005cfa:	6893      	ldr	r3, [r2, #8]
 8005cfc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005d00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005d04:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d06:	6822      	ldr	r2, [r4, #0]
 8005d08:	6d13      	ldr	r3, [r2, #80]	; 0x50
 8005d0a:	f023 0301 	bic.w	r3, r3, #1
 8005d0e:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8005d10:	6863      	ldr	r3, [r4, #4]
 8005d12:	025b      	lsls	r3, r3, #9
 8005d14:	d506      	bpl.n	8005d24 <HAL_SPI_Init+0x10c>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8005d16:	6822      	ldr	r2, [r4, #0]
 8005d18:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005d1a:	68d3      	ldr	r3, [r2, #12]
 8005d1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d20:	430b      	orrs	r3, r1
 8005d22:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d24:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8005d26:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d28:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8005d2c:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 8005d30:	bd38      	pop	{r3, r4, r5, pc}
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d38:	d01b      	beq.n	8005d72 <HAL_SPI_Init+0x15a>
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1b1      	bne.n	8005ca2 <HAL_SPI_Init+0x8a>
     ((hspi->Init.Mode == SPI_MODE_SLAVE) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8005d3e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d40:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d44:	d1ad      	bne.n	8005ca2 <HAL_SPI_Init+0x8a>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8005d46:	6822      	ldr	r2, [r4, #0]
 8005d48:	6813      	ldr	r3, [r2, #0]
 8005d4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	e7a7      	b.n	8005ca2 <HAL_SPI_Init+0x8a>
    HAL_SPI_MspInit(hspi);
 8005d52:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8005d54:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 8005d58:	f004 fe76 	bl	800aa48 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8005d5c:	6823      	ldr	r3, [r4, #0]
 8005d5e:	e795      	b.n	8005c8c <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d60:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 8005d62:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8005d64:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 8005d66:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 8005d68:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8005d6c:	e786      	b.n	8005c7c <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 8005d6e:	2001      	movs	r0, #1
}
 8005d70:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8005d72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0e6      	beq.n	8005d46 <HAL_SPI_Init+0x12e>
 8005d78:	e793      	b.n	8005ca2 <HAL_SPI_Init+0x8a>
 8005d7a:	bf00      	nop
 8005d7c:	40013000 	.word	0x40013000
 8005d80:	40003800 	.word	0x40003800

08005d84 <HAL_SPI_TransmitReceive_DMA>:
{
 8005d84:	b538      	push	{r3, r4, r5, lr}
 8005d86:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 8005d88:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	f000 80d9 	beq.w	8005f44 <HAL_SPI_TransmitReceive_DMA+0x1c0>
 8005d92:	2301      	movs	r3, #1
 8005d94:	4604      	mov	r4, r0
 8005d96:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  tmp_state   = hspi->State;
 8005d9a:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005d9e:	6840      	ldr	r0, [r0, #4]
  tmp_state   = hspi->State;
 8005da0:	b2db      	uxtb	r3, r3
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005da2:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
 8005da6:	f000 808c 	beq.w	8005ec2 <HAL_SPI_TransmitReceive_DMA+0x13e>
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	f040 8093 	bne.w	8005ed6 <HAL_SPI_TransmitReceive_DMA+0x152>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	bf18      	it	ne
 8005db4:	2a00      	cmpne	r2, #0
 8005db6:	d07f      	beq.n	8005eb8 <HAL_SPI_TransmitReceive_DMA+0x134>
 8005db8:	2900      	cmp	r1, #0
 8005dba:	d07d      	beq.n	8005eb8 <HAL_SPI_TransmitReceive_DMA+0x134>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005dbc:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005dc0:	2b04      	cmp	r3, #4
 8005dc2:	d002      	beq.n	8005dca <HAL_SPI_TransmitReceive_DMA+0x46>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dc4:	2305      	movs	r3, #5
 8005dc6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dca:	2300      	movs	r3, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005dcc:	65e1      	str	r1, [r4, #92]	; 0x5c
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005dce:	6821      	ldr	r1, [r4, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dd0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = Size;
 8005dd4:	f8a4 5060 	strh.w	r5, [r4, #96]	; 0x60
  hspi->TxXferCount = Size;
 8005dd8:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005ddc:	6662      	str	r2, [r4, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8005dde:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->RxXferCount = Size;
 8005de2:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8005de6:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8005dea:	688b      	ldr	r3, [r1, #8]
 8005dec:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005df0:	608b      	str	r3, [r1, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005df2:	68e3      	ldr	r3, [r4, #12]
 8005df4:	2b0f      	cmp	r3, #15
 8005df6:	d973      	bls.n	8005ee0 <HAL_SPI_TransmitReceive_DMA+0x15c>
 8005df8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005dfa:	699a      	ldr	r2, [r3, #24]
 8005dfc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005e00:	d15a      	bne.n	8005eb8 <HAL_SPI_TransmitReceive_DMA+0x134>
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005e02:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8005e06:	2a04      	cmp	r2, #4
 8005e08:	f000 80a9 	beq.w	8005f5e <HAL_SPI_TransmitReceive_DMA+0x1da>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005e0c:	496a      	ldr	r1, [pc, #424]	; (8005fb8 <HAL_SPI_TransmitReceive_DMA+0x234>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005e0e:	4a6b      	ldr	r2, [pc, #428]	; (8005fbc <HAL_SPI_TransmitReceive_DMA+0x238>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005e10:	6419      	str	r1, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005e12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e14:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e16:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e18:	2200      	movs	r2, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005e1a:	4969      	ldr	r1, [pc, #420]	; (8005fc0 <HAL_SPI_TransmitReceive_DMA+0x23c>)
 8005e1c:	64d9      	str	r1, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 8005e1e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005e20:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 8005e22:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8005e26:	6821      	ldr	r1, [r4, #0]
 8005e28:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3130      	adds	r1, #48	; 0x30
 8005e2e:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8005e30:	f7fa fedc 	bl	8000bec <HAL_DMA_Start_IT>
 8005e34:	2800      	cmp	r0, #0
 8005e36:	f040 8087 	bne.w	8005f48 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8005e3a:	6822      	ldr	r2, [r4, #0]
 8005e3c:	6893      	ldr	r3, [r2, #8]
 8005e3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005e42:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8005e44:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005e46:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005e48:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005e4a:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8005e4c:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005e4e:	64d8      	str	r0, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8005e50:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8005e52:	6518      	str	r0, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR, hspi->TxXferCount))
 8005e54:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005e58:	6822      	ldr	r2, [r4, #0]
 8005e5a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	3220      	adds	r2, #32
 8005e60:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8005e62:	f7fa fec3 	bl	8000bec <HAL_DMA_Start_IT>
 8005e66:	2800      	cmp	r0, #0
 8005e68:	d16e      	bne.n	8005f48 <HAL_SPI_TransmitReceive_DMA+0x1c4>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005e6a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005e6c:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 8005e6e:	69db      	ldr	r3, [r3, #28]
 8005e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e74:	d079      	beq.n	8005f6a <HAL_SPI_TransmitReceive_DMA+0x1e6>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8005e76:	6851      	ldr	r1, [r2, #4]
 8005e78:	4b52      	ldr	r3, [pc, #328]	; (8005fc4 <HAL_SPI_TransmitReceive_DMA+0x240>)
 8005e7a:	400b      	ands	r3, r1
 8005e7c:	432b      	orrs	r3, r5
 8005e7e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 8005e80:	6822      	ldr	r2, [r4, #0]
 8005e82:	6893      	ldr	r3, [r2, #8]
 8005e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e88:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 8005e8a:	6822      	ldr	r2, [r4, #0]
 8005e8c:	6913      	ldr	r3, [r2, #16]
 8005e8e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 8005e92:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 8005e94:	6822      	ldr	r2, [r4, #0]
 8005e96:	6813      	ldr	r3, [r2, #0]
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e9e:	6863      	ldr	r3, [r4, #4]
 8005ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ea4:	d104      	bne.n	8005eb0 <HAL_SPI_TransmitReceive_DMA+0x12c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8005ea6:	6822      	ldr	r2, [r4, #0]
 8005ea8:	6813      	ldr	r3, [r2, #0]
 8005eaa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005eae:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005eb6:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hspi);
 8005eb8:	2300      	movs	r3, #0
    return errorcode;
 8005eba:	2001      	movs	r0, #1
    __HAL_UNLOCK(hspi);
 8005ebc:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005ec0:	bd38      	pop	{r3, r4, r5, pc}
  if (!(((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX)) || (tmp_state == HAL_SPI_STATE_READY)))
 8005ec2:	68a0      	ldr	r0, [r4, #8]
 8005ec4:	2800      	cmp	r0, #0
 8005ec6:	f47f af70 	bne.w	8005daa <HAL_SPI_TransmitReceive_DMA+0x26>
 8005eca:	2b04      	cmp	r3, #4
 8005ecc:	f43f af70 	beq.w	8005db0 <HAL_SPI_TransmitReceive_DMA+0x2c>
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	f43f af6d 	beq.w	8005db0 <HAL_SPI_TransmitReceive_DMA+0x2c>
    __HAL_UNLOCK(hspi);
 8005ed6:	2300      	movs	r3, #0
    return errorcode;
 8005ed8:	2002      	movs	r0, #2
    __HAL_UNLOCK(hspi);
 8005eda:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8005ede:	bd38      	pop	{r3, r4, r5, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8005ee0:	2b07      	cmp	r3, #7
 8005ee2:	d847      	bhi.n	8005f74 <HAL_SPI_TransmitReceive_DMA+0x1f0>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ee4:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8005ee6:	6993      	ldr	r3, [r2, #24]
 8005ee8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005eec:	d107      	bne.n	8005efe <HAL_SPI_TransmitReceive_DMA+0x17a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005eee:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	085b      	lsrs	r3, r3, #1
 8005ef8:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005efc:	6993      	ldr	r3, [r2, #24]
 8005efe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005f02:	d106      	bne.n	8005f12 <HAL_SPI_TransmitReceive_DMA+0x18e>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 8005f04:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 8005f08:	b29b      	uxth	r3, r3
 8005f0a:	3303      	adds	r3, #3
 8005f0c:	089b      	lsrs	r3, r3, #2
 8005f0e:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f12:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005f1a:	d107      	bne.n	8005f2c <HAL_SPI_TransmitReceive_DMA+0x1a8>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005f1c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005f20:	b292      	uxth	r2, r2
 8005f22:	3201      	adds	r2, #1
 8005f24:	0852      	lsrs	r2, r2, #1
 8005f26:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005f2a:	699a      	ldr	r2, [r3, #24]
 8005f2c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005f30:	f47f af67 	bne.w	8005e02 <HAL_SPI_TransmitReceive_DMA+0x7e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8005f34:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005f38:	b292      	uxth	r2, r2
 8005f3a:	3203      	adds	r2, #3
 8005f3c:	0892      	lsrs	r2, r2, #2
 8005f3e:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8005f42:	e75e      	b.n	8005e02 <HAL_SPI_TransmitReceive_DMA+0x7e>
  __HAL_LOCK(hspi);
 8005f44:	2002      	movs	r0, #2
}
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005f4c:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f4e:	f043 0310 	orr.w	r3, r3, #16
    return errorcode;
 8005f52:	4610      	mov	r0, r2
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005f54:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8005f58:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
}
 8005f5c:	bd38      	pop	{r3, r4, r5, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005f5e:	491a      	ldr	r1, [pc, #104]	; (8005fc8 <HAL_SPI_TransmitReceive_DMA+0x244>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005f60:	4a1a      	ldr	r2, [pc, #104]	; (8005fcc <HAL_SPI_TransmitReceive_DMA+0x248>)
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005f62:	6419      	str	r1, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005f64:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f66:	63da      	str	r2, [r3, #60]	; 0x3c
 8005f68:	e755      	b.n	8005e16 <HAL_SPI_TransmitReceive_DMA+0x92>
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 8005f6a:	6851      	ldr	r1, [r2, #4]
 8005f6c:	4b15      	ldr	r3, [pc, #84]	; (8005fc4 <HAL_SPI_TransmitReceive_DMA+0x240>)
 8005f6e:	400b      	ands	r3, r1
 8005f70:	6053      	str	r3, [r2, #4]
 8005f72:	e785      	b.n	8005e80 <HAL_SPI_TransmitReceive_DMA+0xfc>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8005f74:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005f7c:	d002      	beq.n	8005f84 <HAL_SPI_TransmitReceive_DMA+0x200>
 8005f7e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8005f82:	d199      	bne.n	8005eb8 <HAL_SPI_TransmitReceive_DMA+0x134>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005f84:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 8005f86:	6989      	ldr	r1, [r1, #24]
 8005f88:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 8005f8c:	d107      	bne.n	8005f9e <HAL_SPI_TransmitReceive_DMA+0x21a>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 8005f8e:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 8005f92:	b292      	uxth	r2, r2
 8005f94:	3201      	adds	r2, #1
 8005f96:	0852      	lsrs	r2, r2, #1
 8005f98:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8005f9c:	699a      	ldr	r2, [r3, #24]
 8005f9e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005fa2:	f47f af2e 	bne.w	8005e02 <HAL_SPI_TransmitReceive_DMA+0x7e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8005fa6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8005faa:	b292      	uxth	r2, r2
 8005fac:	3201      	adds	r2, #1
 8005fae:	0852      	lsrs	r2, r2, #1
 8005fb0:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 8005fb4:	e725      	b.n	8005e02 <HAL_SPI_TransmitReceive_DMA+0x7e>
 8005fb6:	bf00      	nop
 8005fb8:	08006211 	.word	0x08006211
 8005fbc:	080061d9 	.word	0x080061d9
 8005fc0:	08006221 	.word	0x08006221
 8005fc4:	ffff0000 	.word	0xffff0000
 8005fc8:	08006201 	.word	0x08006201
 8005fcc:	080061ad 	.word	0x080061ad

08005fd0 <HAL_SPI_Receive_DMA>:
{
 8005fd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005fd4:	4615      	mov	r5, r2
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fd6:	6882      	ldr	r2, [r0, #8]
{
 8005fd8:	4604      	mov	r4, r0
 8005fda:	460e      	mov	r6, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fdc:	b922      	cbnz	r2, 8005fe8 <HAL_SPI_Receive_DMA+0x18>
 8005fde:	6843      	ldr	r3, [r0, #4]
 8005fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fe4:	f000 80a7 	beq.w	8006136 <HAL_SPI_Receive_DMA+0x166>
  __HAL_LOCK(hspi);
 8005fe8:	f894 3080 	ldrb.w	r3, [r4, #128]	; 0x80
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	f000 80ab 	beq.w	8006148 <HAL_SPI_Receive_DMA+0x178>
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 8005ff8:	f894 3081 	ldrb.w	r3, [r4, #129]	; 0x81
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	b2df      	uxtb	r7, r3
 8006000:	f040 8092 	bne.w	8006128 <HAL_SPI_Receive_DMA+0x158>
  if ((pData == NULL) || (Size == 0UL))
 8006004:	2e00      	cmp	r6, #0
 8006006:	f000 8089 	beq.w	800611c <HAL_SPI_Receive_DMA+0x14c>
 800600a:	fab5 f385 	clz	r3, r5
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	2d00      	cmp	r5, #0
 8006012:	f000 8083 	beq.w	800611c <HAL_SPI_Receive_DMA+0x14c>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006016:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006018:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800601c:	6666      	str	r6, [r4, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800601e:	f884 1081 	strb.w	r1, [r4, #129]	; 0x81
  hspi->RxXferSize  = Size;
 8006022:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006026:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800602a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  hspi->RxXferCount = Size;
 800602e:	f8a4 506a 	strh.w	r5, [r4, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006032:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->TxISR       = NULL;
 8006036:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800603a:	d104      	bne.n	8006046 <HAL_SPI_Receive_DMA+0x76>
    SPI_1LINE_RX(hspi);
 800603c:	6822      	ldr	r2, [r4, #0]
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006044:	6013      	str	r3, [r2, #0]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006046:	68e3      	ldr	r3, [r4, #12]
 8006048:	2b0f      	cmp	r3, #15
 800604a:	d862      	bhi.n	8006112 <HAL_SPI_Receive_DMA+0x142>
 800604c:	2b07      	cmp	r3, #7
 800604e:	f200 8098 	bhi.w	8006182 <HAL_SPI_Receive_DMA+0x1b2>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 8006052:	6822      	ldr	r2, [r4, #0]
 8006054:	6893      	ldr	r3, [r2, #8]
 8006056:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800605a:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800605c:	68e3      	ldr	r3, [r4, #12]
 800605e:	2b07      	cmp	r3, #7
 8006060:	d876      	bhi.n	8006150 <HAL_SPI_Receive_DMA+0x180>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006062:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800606a:	d107      	bne.n	800607c <HAL_SPI_Receive_DMA+0xac>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800606c:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006070:	b292      	uxth	r2, r2
 8006072:	3201      	adds	r2, #1
 8006074:	0852      	lsrs	r2, r2, #1
 8006076:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800607a:	699a      	ldr	r2, [r3, #24]
 800607c:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8006080:	d106      	bne.n	8006090 <HAL_SPI_Receive_DMA+0xc0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8006082:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006086:	b292      	uxth	r2, r2
 8006088:	3203      	adds	r2, #3
 800608a:	0892      	lsrs	r2, r2, #2
 800608c:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006090:	4a41      	ldr	r2, [pc, #260]	; (8006198 <HAL_SPI_Receive_DMA+0x1c8>)
 8006092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8006094:	4a41      	ldr	r2, [pc, #260]	; (800619c <HAL_SPI_Receive_DMA+0x1cc>)
 8006096:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006098:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800609a:	4a41      	ldr	r2, [pc, #260]	; (80061a0 <HAL_SPI_Receive_DMA+0x1d0>)
 800609c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800609e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 80060a0:	2200      	movs	r2, #0
 80060a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80060a4:	651a      	str	r2, [r3, #80]	; 0x50
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80060a6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80060aa:	6821      	ldr	r1, [r4, #0]
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060b0:	3130      	adds	r1, #48	; 0x30
 80060b2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80060b4:	f7fa fd9a 	bl	8000bec <HAL_DMA_Start_IT>
 80060b8:	2800      	cmp	r0, #0
 80060ba:	d158      	bne.n	800616e <HAL_SPI_Receive_DMA+0x19e>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060bc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80060be:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060c0:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80060c2:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80060c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80060c8:	4b36      	ldr	r3, [pc, #216]	; (80061a4 <HAL_SPI_Receive_DMA+0x1d4>)
 80060ca:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80060ce:	bf18      	it	ne
 80060d0:	432b      	orrne	r3, r5
 80060d2:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80060d4:	6822      	ldr	r2, [r4, #0]
 80060d6:	6893      	ldr	r3, [r2, #8]
 80060d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060dc:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80060de:	6822      	ldr	r2, [r4, #0]
 80060e0:	6913      	ldr	r3, [r2, #16]
 80060e2:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 80060e6:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 80060e8:	6822      	ldr	r2, [r4, #0]
 80060ea:	6813      	ldr	r3, [r2, #0]
 80060ec:	f043 0301 	orr.w	r3, r3, #1
 80060f0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060f2:	6863      	ldr	r3, [r4, #4]
 80060f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060f8:	d104      	bne.n	8006104 <HAL_SPI_Receive_DMA+0x134>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 80060fa:	6822      	ldr	r2, [r4, #0]
 80060fc:	6813      	ldr	r3, [r2, #0]
 80060fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006102:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8006104:	2300      	movs	r3, #0
  return errorcode;
 8006106:	461f      	mov	r7, r3
  __HAL_UNLOCK(hspi);
 8006108:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800610c:	4638      	mov	r0, r7
 800610e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8006112:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006114:	699b      	ldr	r3, [r3, #24]
 8006116:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800611a:	d09a      	beq.n	8006052 <HAL_SPI_Receive_DMA+0x82>
    __HAL_UNLOCK(hspi);
 800611c:	2300      	movs	r3, #0
 800611e:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006122:	4638      	mov	r0, r7
 8006124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hspi);
 8006128:	2300      	movs	r3, #0
    return errorcode;
 800612a:	2702      	movs	r7, #2
    __HAL_UNLOCK(hspi);
 800612c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 8006130:	4638      	mov	r0, r7
 8006132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006136:	462b      	mov	r3, r5
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006138:	2504      	movs	r5, #4
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800613a:	460a      	mov	r2, r1
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800613c:	f880 5081 	strb.w	r5, [r0, #129]	; 0x81
}
 8006140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8006144:	f7ff be1e 	b.w	8005d84 <HAL_SPI_TransmitReceive_DMA>
  __HAL_LOCK(hspi);
 8006148:	2702      	movs	r7, #2
}
 800614a:	4638      	mov	r0, r7
 800614c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006150:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006152:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 8006154:	d89c      	bhi.n	8006090 <HAL_SPI_Receive_DMA+0xc0>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8006156:	699a      	ldr	r2, [r3, #24]
 8006158:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800615c:	d198      	bne.n	8006090 <HAL_SPI_Receive_DMA+0xc0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800615e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 8006162:	b292      	uxth	r2, r2
 8006164:	3201      	adds	r2, #1
 8006166:	0852      	lsrs	r2, r2, #1
 8006168:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800616c:	e790      	b.n	8006090 <HAL_SPI_Receive_DMA+0xc0>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800616e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8006172:	2201      	movs	r2, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006174:	f043 0310 	orr.w	r3, r3, #16
 8006178:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800617c:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 8006180:	e7cf      	b.n	8006122 <HAL_SPI_Receive_DMA+0x152>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 8006182:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800618a:	f43f af62 	beq.w	8006052 <HAL_SPI_Receive_DMA+0x82>
 800618e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006192:	d1c3      	bne.n	800611c <HAL_SPI_Receive_DMA+0x14c>
 8006194:	e75d      	b.n	8006052 <HAL_SPI_Receive_DMA+0x82>
 8006196:	bf00      	nop
 8006198:	08006201 	.word	0x08006201
 800619c:	080061ad 	.word	0x080061ad
 80061a0:	08006221 	.word	0x08006221
 80061a4:	ffff0000 	.word	0xffff0000

080061a8 <HAL_SPI_TxCpltCallback>:
 80061a8:	4770      	bx	lr
 80061aa:	bf00      	nop

080061ac <SPI_DMAReceiveCplt>:
{
 80061ac:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061ae:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80061b0:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80061b4:	2b07      	cmp	r3, #7
 80061b6:	d009      	beq.n	80061cc <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80061b8:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80061ba:	69db      	ldr	r3, [r3, #28]
 80061bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061c0:	d005      	beq.n	80061ce <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80061c2:	6802      	ldr	r2, [r0, #0]
 80061c4:	6913      	ldr	r3, [r2, #16]
 80061c6:	f043 0308 	orr.w	r3, r3, #8
 80061ca:	6113      	str	r3, [r2, #16]
}
 80061cc:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 80061ce:	f003 fb39 	bl	8009844 <HAL_SPI_RxCpltCallback>
}
 80061d2:	bd08      	pop	{r3, pc}

080061d4 <HAL_SPI_TxRxCpltCallback>:
 80061d4:	4770      	bx	lr
 80061d6:	bf00      	nop

080061d8 <SPI_DMATransmitReceiveCplt>:
{
 80061d8:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 80061dc:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 80061e0:	2b07      	cmp	r3, #7
 80061e2:	d009      	beq.n	80061f8 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 80061e4:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80061e6:	69db      	ldr	r3, [r3, #28]
 80061e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ec:	d005      	beq.n	80061fa <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 80061ee:	6802      	ldr	r2, [r0, #0]
 80061f0:	6913      	ldr	r3, [r2, #16]
 80061f2:	f043 0308 	orr.w	r3, r3, #8
 80061f6:	6113      	str	r3, [r2, #16]
}
 80061f8:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 80061fa:	f7ff ffeb 	bl	80061d4 <HAL_SPI_TxRxCpltCallback>
}
 80061fe:	bd08      	pop	{r3, pc}

08006200 <SPI_DMAHalfReceiveCplt>:
{
 8006200:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006202:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006204:	f003 fb94 	bl	8009930 <HAL_SPI_RxHalfCpltCallback>
}
 8006208:	bd08      	pop	{r3, pc}
 800620a:	bf00      	nop

0800620c <HAL_SPI_TxRxHalfCpltCallback>:
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop

08006210 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8006210:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8006212:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8006214:	f7ff fffa 	bl	800620c <HAL_SPI_TxRxHalfCpltCallback>
}
 8006218:	bd08      	pop	{r3, pc}
 800621a:	bf00      	nop

0800621c <HAL_SPI_ErrorCallback>:
 800621c:	4770      	bx	lr
 800621e:	bf00      	nop

08006220 <SPI_DMAError>:
{
 8006220:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006222:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006224:	f7fb fd42 	bl	8001cac <HAL_DMA_GetError>
 8006228:	2802      	cmp	r0, #2
 800622a:	d100      	bne.n	800622e <SPI_DMAError+0xe>
}
 800622c:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800622e:	6822      	ldr	r2, [r4, #0]
 8006230:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006232:	6991      	ldr	r1, [r2, #24]
 8006234:	f041 0108 	orr.w	r1, r1, #8
 8006238:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800623a:	6821      	ldr	r1, [r4, #0]
 800623c:	698a      	ldr	r2, [r1, #24]
 800623e:	f042 0210 	orr.w	r2, r2, #16
 8006242:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 8006244:	6821      	ldr	r1, [r4, #0]
 8006246:	680a      	ldr	r2, [r1, #0]
 8006248:	f022 0201 	bic.w	r2, r2, #1
 800624c:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800624e:	6821      	ldr	r1, [r4, #0]
 8006250:	4a2c      	ldr	r2, [pc, #176]	; (8006304 <SPI_DMAError+0xe4>)
 8006252:	6908      	ldr	r0, [r1, #16]
 8006254:	4002      	ands	r2, r0
 8006256:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006258:	6821      	ldr	r1, [r4, #0]
 800625a:	688a      	ldr	r2, [r1, #8]
 800625c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006260:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006262:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006266:	2a04      	cmp	r2, #4
 8006268:	d001      	beq.n	800626e <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800626a:	0698      	lsls	r0, r3, #26
 800626c:	d43d      	bmi.n	80062ea <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800626e:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 8006272:	2a03      	cmp	r2, #3
 8006274:	d001      	beq.n	800627a <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006276:	0659      	lsls	r1, r3, #25
 8006278:	d42b      	bmi.n	80062d2 <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800627a:	059a      	lsls	r2, r3, #22
 800627c:	d50a      	bpl.n	8006294 <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800627e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006282:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006284:	f042 0201 	orr.w	r2, r2, #1
 8006288:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800628c:	698a      	ldr	r2, [r1, #24]
 800628e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006292:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006294:	05db      	lsls	r3, r3, #23
 8006296:	d50a      	bpl.n	80062ae <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006298:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800629c:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800629e:	f043 0308 	orr.w	r3, r3, #8
 80062a2:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80062a6:	6993      	ldr	r3, [r2, #24]
 80062a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062ac:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 80062ae:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 80062b0:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 80062b2:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 80062b4:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80062b8:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062bc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80062c0:	f043 0310 	orr.w	r3, r3, #16
 80062c4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80062c8:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 80062cc:	f7ff ffa6 	bl	800621c <HAL_SPI_ErrorCallback>
}
 80062d0:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062d2:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062d6:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80062d8:	f042 0204 	orr.w	r2, r2, #4
 80062dc:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80062e0:	698a      	ldr	r2, [r1, #24]
 80062e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e6:	618a      	str	r2, [r1, #24]
 80062e8:	e7c7      	b.n	800627a <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062ea:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062ee:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80062f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80062f4:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80062f8:	698a      	ldr	r2, [r1, #24]
 80062fa:	f042 0220 	orr.w	r2, r2, #32
 80062fe:	618a      	str	r2, [r1, #24]
 8006300:	e7b5      	b.n	800626e <SPI_DMAError+0x4e>
 8006302:	bf00      	nop
 8006304:	fffffc90 	.word	0xfffffc90

08006308 <HAL_SPI_IRQHandler>:
{
 8006308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800630c:	6802      	ldr	r2, [r0, #0]
{
 800630e:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 8006310:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 8006312:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006314:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 8006316:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800631a:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800631e:	f005 0c64 	and.w	ip, r5, #100	; 0x64
 8006322:	f1bc 0f04 	cmp.w	ip, #4
 8006326:	d032      	beq.n	800638e <HAL_SPI_IRQHandler+0x86>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006328:	f005 0045 	and.w	r0, r5, #69	; 0x45
 800632c:	2801      	cmp	r0, #1
 800632e:	d037      	beq.n	80063a0 <HAL_SPI_IRQHandler+0x98>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006330:	f005 0026 	and.w	r0, r5, #38	; 0x26
 8006334:	2802      	cmp	r0, #2
 8006336:	f000 80ef 	beq.w	8006518 <HAL_SPI_IRQHandler+0x210>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800633a:	0728      	lsls	r0, r5, #28
 800633c:	d577      	bpl.n	800642e <HAL_SPI_IRQHandler+0x126>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800633e:	6993      	ldr	r3, [r2, #24]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 8006340:	f417 4f40 	tst.w	r7, #49152	; 0xc000
 8006344:	b2f6      	uxtb	r6, r6
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006346:	f043 0308 	orr.w	r3, r3, #8
 800634a:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800634c:	6821      	ldr	r1, [r4, #0]
 800634e:	698b      	ldr	r3, [r1, #24]
 8006350:	f043 0310 	orr.w	r3, r3, #16
 8006354:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006356:	6821      	ldr	r1, [r4, #0]
 8006358:	698b      	ldr	r3, [r1, #24]
 800635a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800635e:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	690b      	ldr	r3, [r1, #16]
 8006364:	f023 0308 	bic.w	r3, r3, #8
 8006368:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN) ||                    // IT based transfer is done
 800636a:	d023      	beq.n	80063b4 <HAL_SPI_IRQHandler+0xac>
 800636c:	2e04      	cmp	r6, #4
 800636e:	f000 80ec 	beq.w	800654a <HAL_SPI_IRQHandler+0x242>
      ((State != HAL_SPI_STATE_BUSY_RX) && (hspi->hdmatx->Init.Mode == DMA_NORMAL)) ||  // DMA is used in normal mode
 8006372:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006374:	69db      	ldr	r3, [r3, #28]
 8006376:	b1eb      	cbz	r3, 80063b4 <HAL_SPI_IRQHandler+0xac>
 8006378:	2e03      	cmp	r6, #3
 800637a:	d054      	beq.n	8006426 <HAL_SPI_IRQHandler+0x11e>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800637c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800637e:	69db      	ldr	r3, [r3, #28]
 8006380:	b1c3      	cbz	r3, 80063b4 <HAL_SPI_IRQHandler+0xac>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006382:	2e05      	cmp	r6, #5
 8006384:	d114      	bne.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
      HAL_SPI_TxRxCpltCallback(hspi);
 8006386:	4620      	mov	r0, r4
 8006388:	f7ff ff24 	bl	80061d4 <HAL_SPI_TxRxCpltCallback>
 800638c:	e010      	b.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
    hspi->TxISR(hspi);
 800638e:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006390:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006392:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006394:	4620      	mov	r0, r4
 8006396:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006398:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800639c:	2b01      	cmp	r3, #1
 800639e:	d102      	bne.n	80063a6 <HAL_SPI_IRQHandler+0x9e>
    hspi->RxISR(hspi);
 80063a0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80063a2:	4620      	mov	r0, r4
 80063a4:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 80063a6:	f005 0526 	and.w	r5, r5, #38	; 0x26
 80063aa:	2d02      	cmp	r5, #2
 80063ac:	f000 80b4 	beq.w	8006518 <HAL_SPI_IRQHandler+0x210>
}
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80063b4:	6823      	ldr	r3, [r4, #0]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80063bc:	d121      	bne.n	8006402 <HAL_SPI_IRQHandler+0xfa>
        while (hspi->RxXferCount != 0UL)
 80063be:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80063c2:	b29b      	uxth	r3, r3
 80063c4:	b1eb      	cbz	r3, 8006402 <HAL_SPI_IRQHandler+0xfa>
            *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80063c6:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80063c8:	e00f      	b.n	80063ea <HAL_SPI_IRQHandler+0xe2>
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ce:	600b      	str	r3, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint32_t);
 80063d0:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80063d2:	3104      	adds	r1, #4
 80063d4:	6661      	str	r1, [r4, #100]	; 0x64
          hspi->RxXferCount--;
 80063d6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80063da:	3b01      	subs	r3, #1
 80063dc:	b29b      	uxth	r3, r3
 80063de:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
        while (hspi->RxXferCount != 0UL)
 80063e2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	b15b      	cbz	r3, 8006402 <HAL_SPI_IRQHandler+0xfa>
          if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80063ea:	68e3      	ldr	r3, [r4, #12]
 80063ec:	2b0f      	cmp	r3, #15
 80063ee:	d8ec      	bhi.n	80063ca <HAL_SPI_IRQHandler+0xc2>
          else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063f0:	2b07      	cmp	r3, #7
 80063f2:	f240 809d 	bls.w	8006530 <HAL_SPI_IRQHandler+0x228>
            *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80063f6:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 80063f8:	800b      	strh	r3, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint16_t);
 80063fa:	6e61      	ldr	r1, [r4, #100]	; 0x64
 80063fc:	3102      	adds	r1, #2
 80063fe:	6661      	str	r1, [r4, #100]	; 0x64
 8006400:	e7e9      	b.n	80063d6 <HAL_SPI_IRQHandler+0xce>
      SPI_CloseTransfer(hspi);
 8006402:	4620      	mov	r0, r4
 8006404:	f7ff fba4 	bl	8005b50 <SPI_CloseTransfer>
      hspi->State = HAL_SPI_STATE_READY;
 8006408:	2301      	movs	r3, #1
 800640a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
      if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800640e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006412:	2b00      	cmp	r3, #0
 8006414:	f040 8089 	bne.w	800652a <HAL_SPI_IRQHandler+0x222>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006418:	2e05      	cmp	r6, #5
 800641a:	d0b4      	beq.n	8006386 <HAL_SPI_IRQHandler+0x7e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800641c:	2e04      	cmp	r6, #4
 800641e:	f000 8099 	beq.w	8006554 <HAL_SPI_IRQHandler+0x24c>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006422:	2e03      	cmp	r6, #3
 8006424:	d1c4      	bne.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
      HAL_SPI_TxCpltCallback(hspi);
 8006426:	4620      	mov	r0, r4
 8006428:	f7ff febe 	bl	80061a8 <HAL_SPI_TxCpltCallback>
 800642c:	e7c0      	b.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800642e:	051b      	lsls	r3, r3, #20
 8006430:	d502      	bpl.n	8006438 <HAL_SPI_IRQHandler+0x130>
 8006432:	070e      	lsls	r6, r1, #28
 8006434:	f100 8084 	bmi.w	8006540 <HAL_SPI_IRQHandler+0x238>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006438:	f415 7f58 	tst.w	r5, #864	; 0x360
 800643c:	d0b8      	beq.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800643e:	0668      	lsls	r0, r5, #25
 8006440:	d509      	bpl.n	8006456 <HAL_SPI_IRQHandler+0x14e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006442:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8006446:	f043 0304 	orr.w	r3, r3, #4
 800644a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800644e:	6993      	ldr	r3, [r2, #24]
 8006450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006454:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006456:	05a9      	lsls	r1, r5, #22
 8006458:	d50a      	bpl.n	8006470 <HAL_SPI_IRQHandler+0x168>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800645a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800645e:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006468:	6993      	ldr	r3, [r2, #24]
 800646a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800646e:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006470:	05ea      	lsls	r2, r5, #23
 8006472:	d50a      	bpl.n	800648a <HAL_SPI_IRQHandler+0x182>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006474:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006478:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800647a:	f043 0308 	orr.w	r3, r3, #8
 800647e:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006482:	6993      	ldr	r3, [r2, #24]
 8006484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006488:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800648a:	06ab      	lsls	r3, r5, #26
 800648c:	d50a      	bpl.n	80064a4 <HAL_SPI_IRQHandler+0x19c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800648e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006492:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006498:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800649c:	6993      	ldr	r3, [r2, #24]
 800649e:	f043 0320 	orr.w	r3, r3, #32
 80064a2:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064a4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d081      	beq.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
      __HAL_SPI_DISABLE(hspi);
 80064ac:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80064ae:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80064b2:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80064b4:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 80064b8:	f023 0301 	bic.w	r3, r3, #1
 80064bc:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR);
 80064be:	6822      	ldr	r2, [r4, #0]
 80064c0:	4b26      	ldr	r3, [pc, #152]	; (800655c <HAL_SPI_IRQHandler+0x254>)
 80064c2:	6911      	ldr	r1, [r2, #16]
 80064c4:	ea03 0301 	and.w	r3, r3, r1
 80064c8:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 80064ca:	d12a      	bne.n	8006522 <HAL_SPI_IRQHandler+0x21a>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80064cc:	6822      	ldr	r2, [r4, #0]
 80064ce:	6893      	ldr	r3, [r2, #8]
 80064d0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80064d4:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 80064d6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 80064d8:	b15b      	cbz	r3, 80064f2 <HAL_SPI_IRQHandler+0x1ea>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064da:	4a21      	ldr	r2, [pc, #132]	; (8006560 <HAL_SPI_IRQHandler+0x258>)
 80064dc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064de:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80064e0:	f7fa fe50 	bl	8001184 <HAL_DMA_Abort_IT>
 80064e4:	b128      	cbz	r0, 80064f2 <HAL_SPI_IRQHandler+0x1ea>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064e6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 80064ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ee:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 80064f2:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f43f af5b 	beq.w	80063b0 <HAL_SPI_IRQHandler+0xa8>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80064fa:	4a19      	ldr	r2, [pc, #100]	; (8006560 <HAL_SPI_IRQHandler+0x258>)
 80064fc:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80064fe:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8006500:	f7fa fe40 	bl	8001184 <HAL_DMA_Abort_IT>
 8006504:	2800      	cmp	r0, #0
 8006506:	f43f af53 	beq.w	80063b0 <HAL_SPI_IRQHandler+0xa8>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800650a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800650e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006512:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8006516:	e74b      	b.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
    hspi->TxISR(hspi);
 8006518:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800651a:	4620      	mov	r0, r4
}
 800651c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 8006520:	4718      	bx	r3
        hspi->State = HAL_SPI_STATE_READY;
 8006522:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 8006524:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 8006526:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800652a:	f7ff fe77 	bl	800621c <HAL_SPI_ErrorCallback>
 800652e:	e73f      	b.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
            *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006530:	6823      	ldr	r3, [r4, #0]
 8006532:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006536:	700b      	strb	r3, [r1, #0]
            hspi->pRxBuffPtr += sizeof(uint8_t);
 8006538:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800653a:	3101      	adds	r1, #1
 800653c:	6661      	str	r1, [r4, #100]	; 0x64
 800653e:	e74a      	b.n	80063d6 <HAL_SPI_IRQHandler+0xce>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006540:	6993      	ldr	r3, [r2, #24]
 8006542:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006546:	6193      	str	r3, [r2, #24]
    return;
 8006548:	e732      	b.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
      ((State != HAL_SPI_STATE_BUSY_TX) && (hspi->hdmarx->Init.Mode == DMA_NORMAL)))    // DMA is used in normal mode
 800654a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f43f af30 	beq.w	80063b4 <HAL_SPI_IRQHandler+0xac>
      HAL_SPI_RxCpltCallback(hspi);
 8006554:	4620      	mov	r0, r4
 8006556:	f003 f975 	bl	8009844 <HAL_SPI_RxCpltCallback>
 800655a:	e729      	b.n	80063b0 <HAL_SPI_IRQHandler+0xa8>
 800655c:	fffffc94 	.word	0xfffffc94
 8006560:	08006565 	.word	0x08006565

08006564 <SPI_DMAAbortOnError>:
{
 8006564:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 8006566:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006568:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800656a:	2300      	movs	r3, #0
 800656c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8006570:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 8006574:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 8006578:	f7ff fe50 	bl	800621c <HAL_SPI_ErrorCallback>
}
 800657c:	bd08      	pop	{r3, pc}
 800657e:	bf00      	nop

08006580 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006580:	680b      	ldr	r3, [r1, #0]
{
 8006582:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8006584:	b9d3      	cbnz	r3, 80065bc <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006586:	6804      	ldr	r4, [r0, #0]
 8006588:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800658c:	684a      	ldr	r2, [r1, #4]
 800658e:	4023      	ands	r3, r4
 8006590:	4313      	orrs	r3, r2
 8006592:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 8006596:	4323      	orrs	r3, r4
 8006598:	4313      	orrs	r3, r2
 800659a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800659e:	4323      	orrs	r3, r4
 80065a0:	4313      	orrs	r3, r2
 80065a2:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 80065a6:	4323      	orrs	r3, r4
 80065a8:	4313      	orrs	r3, r2
 80065aa:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 80065ae:	4323      	orrs	r3, r4
 80065b0:	4313      	orrs	r3, r2
 80065b2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 80065b4:	2000      	movs	r0, #0
 80065b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ba:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80065bc:	6802      	ldr	r2, [r0, #0]
 80065be:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 80065c2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 80065c6:	4322      	orrs	r2, r4
 80065c8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 80065ca:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80065ce:	4322      	orrs	r2, r4
 80065d0:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80065d2:	6842      	ldr	r2, [r0, #4]
 80065d4:	4013      	ands	r3, r2
 80065d6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 80065da:	4323      	orrs	r3, r4
 80065dc:	4313      	orrs	r3, r2
 80065de:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 80065e2:	4323      	orrs	r3, r4
 80065e4:	4313      	orrs	r3, r2
 80065e6:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 80065ea:	4323      	orrs	r3, r4
 80065ec:	4313      	orrs	r3, r2
 80065ee:	6043      	str	r3, [r0, #4]
}
 80065f0:	2000      	movs	r0, #0
 80065f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065f6:	4770      	bx	lr
 80065f8:	ffff8000 	.word	0xffff8000

080065fc <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80065fc:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80065fe:	bb02      	cbnz	r2, 8006642 <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006600:	6883      	ldr	r3, [r0, #8]
 8006602:	e9d1 2400 	ldrd	r2, r4, [r1]
 8006606:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800660a:	3c01      	subs	r4, #1
 800660c:	3a01      	subs	r2, #1
 800660e:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8006612:	4313      	orrs	r3, r2
 8006614:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 8006618:	3a01      	subs	r2, #1
 800661a:	3c01      	subs	r4, #1
 800661c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006620:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 8006624:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 8006628:	6989      	ldr	r1, [r1, #24]
 800662a:	3b01      	subs	r3, #1
 800662c:	3c01      	subs	r4, #1
 800662e:	3901      	subs	r1, #1
 8006630:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 8006634:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8006638:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800663c:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800663e:	2000      	movs	r0, #0
 8006640:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006642:	6885      	ldr	r5, [r0, #8]
 8006644:	68ca      	ldr	r2, [r1, #12]
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <FMC_SDRAM_Timing_Init+0x98>)
 8006648:	1e54      	subs	r4, r2, #1
 800664a:	694a      	ldr	r2, [r1, #20]
 800664c:	402b      	ands	r3, r5
 800664e:	3a01      	subs	r2, #1
 8006650:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 8006654:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 8006658:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800665a:	68c3      	ldr	r3, [r0, #12]
 800665c:	e9d1 4200 	ldrd	r4, r2, [r1]
 8006660:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006664:	3a01      	subs	r2, #1
 8006666:	3c01      	subs	r4, #1
 8006668:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800666c:	ea43 0204 	orr.w	r2, r3, r4
 8006670:	688c      	ldr	r4, [r1, #8]
 8006672:	690b      	ldr	r3, [r1, #16]
 8006674:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 8006678:	6989      	ldr	r1, [r1, #24]
 800667a:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800667e:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
 8006682:	3901      	subs	r1, #1
 8006684:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 8006688:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800668c:	60c3      	str	r3, [r0, #12]
}
 800668e:	2000      	movs	r0, #0
 8006690:	bd30      	pop	{r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	ff0f0fff 	.word	0xff0f0fff

08006698 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006698:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800669a:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800669e:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80066a0:	6900      	ldr	r0, [r0, #16]
 80066a2:	4323      	orrs	r3, r4
 80066a4:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 80066a8:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 80066ac:	4c05      	ldr	r4, [pc, #20]	; (80066c4 <FMC_SDRAM_SendCommand+0x2c>)
 80066ae:	3901      	subs	r1, #1
 80066b0:	4004      	ands	r4, r0
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 80066b2:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 80066b4:	4323      	orrs	r3, r4
 80066b6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 80066ba:	6113      	str	r3, [r2, #16]
}
 80066bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066c0:	4770      	bx	lr
 80066c2:	bf00      	nop
 80066c4:	ffc00000 	.word	0xffc00000

080066c8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80066c8:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80066ca:	4b05      	ldr	r3, [pc, #20]	; (80066e0 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 80066cc:	2000      	movs	r0, #0
{
 80066ce:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80066d0:	6954      	ldr	r4, [r2, #20]
 80066d2:	4023      	ands	r3, r4
 80066d4:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 80066d8:	6151      	str	r1, [r2, #20]
}
 80066da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	ffffc001 	.word	0xffffc001

080066e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80066e4:	b084      	sub	sp, #16
 80066e6:	b410      	push	{r4}
 80066e8:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80066ec:	4614      	mov	r4, r2
{
 80066ee:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 80066f2:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 80066f4:	9904      	ldr	r1, [sp, #16]
{
 80066f6:	4602      	mov	r2, r0
             Init.BusWide             | \
 80066f8:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 80066fa:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 80066fc:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 80066fe:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 8006700:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 8006702:	4303      	orrs	r3, r0

  return HAL_OK;
}
 8006704:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 8006706:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8006708:	4903      	ldr	r1, [pc, #12]	; (8006718 <SDMMC_Init+0x34>)
 800670a:	4021      	ands	r1, r4
 800670c:	430b      	orrs	r3, r1
 800670e:	6053      	str	r3, [r2, #4]
}
 8006710:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006714:	b004      	add	sp, #16
 8006716:	4770      	bx	lr
 8006718:	ffc02c00 	.word	0xffc02c00

0800671c <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800671c:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 8006720:	4770      	bx	lr
 8006722:	bf00      	nop

08006724 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8006724:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8006726:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 8006728:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800672a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800672e:	4770      	bx	lr

08006730 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8006730:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 8006732:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	f042 0203 	orr.w	r2, r2, #3
 800673a:	601a      	str	r2, [r3, #0]
}
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8006740:	6800      	ldr	r0, [r0, #0]
}
 8006742:	f000 0003 	and.w	r0, r0, #3
 8006746:	4770      	bx	lr

08006748 <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8006748:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800674a:	5840      	ldr	r0, [r0, r1]
}
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop

08006750 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8006750:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006752:	680b      	ldr	r3, [r1, #0]
{
 8006754:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 8006756:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8006758:	684b      	ldr	r3, [r1, #4]
 800675a:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800675c:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800675e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8006760:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 8006764:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 8006766:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006768:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800676c:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800676e:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 8006770:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006772:	430b      	orrs	r3, r1
 8006774:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8006776:	bc30      	pop	{r4, r5}
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop

0800677c <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800677c:	4a4c      	ldr	r2, [pc, #304]	; (80068b0 <SDMMC_CmdBlockLength+0x134>)
 800677e:	4b4d      	ldr	r3, [pc, #308]	; (80068b4 <SDMMC_CmdBlockLength+0x138>)
{
 8006780:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006782:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006784:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006786:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800678a:	68c1      	ldr	r1, [r0, #12]
 800678c:	4c4a      	ldr	r4, [pc, #296]	; (80068b8 <SDMMC_CmdBlockLength+0x13c>)
 800678e:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006792:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006794:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006796:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800679a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800679c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80067a0:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 80067a2:	b14a      	cbz	r2, 80067b8 <SDMMC_CmdBlockLength+0x3c>
 80067a4:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80067a6:	4945      	ldr	r1, [pc, #276]	; (80068bc <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 80067a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80067aa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80067ac:	420a      	tst	r2, r1
 80067ae:	d001      	beq.n	80067b4 <SDMMC_CmdBlockLength+0x38>
 80067b0:	0492      	lsls	r2, r2, #18
 80067b2:	d507      	bpl.n	80067c4 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 80067b4:	1c5c      	adds	r4, r3, #1
 80067b6:	d1f7      	bne.n	80067a8 <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80067b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80067bc:	4618      	mov	r0, r3
 80067be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80067c2:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80067c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067c6:	075c      	lsls	r4, r3, #29
 80067c8:	d43d      	bmi.n	8006846 <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80067ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80067cc:	f013 0301 	ands.w	r3, r3, #1
 80067d0:	d134      	bne.n	800683c <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80067d2:	4b3b      	ldr	r3, [pc, #236]	; (80068c0 <SDMMC_CmdBlockLength+0x144>)
 80067d4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80067d6:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b10      	cmp	r3, #16
 80067dc:	d131      	bne.n	8006842 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 80067de:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80067e0:	4b38      	ldr	r3, [pc, #224]	; (80068c4 <SDMMC_CmdBlockLength+0x148>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d0e9      	beq.n	80067bc <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80067e8:	2a00      	cmp	r2, #0
 80067ea:	db30      	blt.n	800684e <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80067ec:	0051      	lsls	r1, r2, #1
 80067ee:	d431      	bmi.n	8006854 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80067f0:	0094      	lsls	r4, r2, #2
 80067f2:	d431      	bmi.n	8006858 <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80067f4:	00d0      	lsls	r0, r2, #3
 80067f6:	d431      	bmi.n	800685c <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80067f8:	0111      	lsls	r1, r2, #4
 80067fa:	d432      	bmi.n	8006862 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80067fc:	0154      	lsls	r4, r2, #5
 80067fe:	d433      	bmi.n	8006868 <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006800:	01d0      	lsls	r0, r2, #7
 8006802:	d434      	bmi.n	800686e <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006804:	0211      	lsls	r1, r2, #8
 8006806:	d435      	bmi.n	8006874 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006808:	0254      	lsls	r4, r2, #9
 800680a:	d436      	bmi.n	800687a <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800680c:	0290      	lsls	r0, r2, #10
 800680e:	d440      	bmi.n	8006892 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006810:	02d1      	lsls	r1, r2, #11
 8006812:	d43b      	bmi.n	800688c <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006814:	0354      	lsls	r4, r2, #13
 8006816:	d436      	bmi.n	8006886 <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006818:	0390      	lsls	r0, r2, #14
 800681a:	d431      	bmi.n	8006880 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800681c:	03d1      	lsls	r1, r2, #15
 800681e:	d444      	bmi.n	80068aa <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006820:	0414      	lsls	r4, r2, #16
 8006822:	d43f      	bmi.n	80068a4 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006824:	0450      	lsls	r0, r2, #17
 8006826:	d43a      	bmi.n	800689e <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006828:	0491      	lsls	r1, r2, #18
 800682a:	d435      	bmi.n	8006898 <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800682c:	f012 0f08 	tst.w	r2, #8
 8006830:	bf14      	ite	ne
 8006832:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006836:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 800683a:	e7bf      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800683c:	2201      	movs	r2, #1
 800683e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006840:	e7bc      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006842:	2301      	movs	r3, #1
 8006844:	e7ba      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006846:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006848:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800684a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800684c:	e7b6      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800684e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006852:	e7b3      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006854:	2340      	movs	r3, #64	; 0x40
 8006856:	e7b1      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006858:	2380      	movs	r3, #128	; 0x80
 800685a:	e7af      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800685c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006860:	e7ac      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006866:	e7a9      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006868:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800686c:	e7a6      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800686e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006872:	e7a3      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006874:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006878:	e7a0      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800687a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800687e:	e79d      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006880:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006884:	e79a      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006886:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800688a:	e797      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 800688c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006890:	e794      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006892:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006896:	e791      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006898:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800689c:	e78e      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800689e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068a2:	e78b      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80068a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068a8:	e788      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80068aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80068ae:	e785      	b.n	80067bc <SDMMC_CmdBlockLength+0x40>
 80068b0:	2000093c 	.word	0x2000093c
 80068b4:	10624dd3 	.word	0x10624dd3
 80068b8:	fffee0c0 	.word	0xfffee0c0
 80068bc:	00200045 	.word	0x00200045
 80068c0:	002000c5 	.word	0x002000c5
 80068c4:	fdffe008 	.word	0xfdffe008

080068c8 <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80068c8:	4a4c      	ldr	r2, [pc, #304]	; (80069fc <SDMMC_CmdReadSingleBlock+0x134>)
 80068ca:	4b4d      	ldr	r3, [pc, #308]	; (8006a00 <SDMMC_CmdReadSingleBlock+0x138>)
{
 80068cc:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80068ce:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80068d0:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80068d2:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068d6:	68c1      	ldr	r1, [r0, #12]
 80068d8:	4c4a      	ldr	r4, [pc, #296]	; (8006a04 <SDMMC_CmdReadSingleBlock+0x13c>)
 80068da:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80068de:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068e0:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80068e2:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068e6:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80068e8:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80068ec:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80068ee:	b14a      	cbz	r2, 8006904 <SDMMC_CmdReadSingleBlock+0x3c>
 80068f0:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80068f2:	4945      	ldr	r1, [pc, #276]	; (8006a08 <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 80068f4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80068f6:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80068f8:	420a      	tst	r2, r1
 80068fa:	d001      	beq.n	8006900 <SDMMC_CmdReadSingleBlock+0x38>
 80068fc:	0492      	lsls	r2, r2, #18
 80068fe:	d507      	bpl.n	8006910 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 8006900:	1c5c      	adds	r4, r3, #1
 8006902:	d1f7      	bne.n	80068f4 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006904:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006908:	4618      	mov	r0, r3
 800690a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800690e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006910:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006912:	075c      	lsls	r4, r3, #29
 8006914:	d43d      	bmi.n	8006992 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006916:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006918:	f013 0301 	ands.w	r3, r3, #1
 800691c:	d134      	bne.n	8006988 <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800691e:	4b3b      	ldr	r3, [pc, #236]	; (8006a0c <SDMMC_CmdReadSingleBlock+0x144>)
 8006920:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006922:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006924:	b2db      	uxtb	r3, r3
 8006926:	2b11      	cmp	r3, #17
 8006928:	d131      	bne.n	800698e <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 800692a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800692c:	4b38      	ldr	r3, [pc, #224]	; (8006a10 <SDMMC_CmdReadSingleBlock+0x148>)
 800692e:	4013      	ands	r3, r2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d0e9      	beq.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006934:	2a00      	cmp	r2, #0
 8006936:	db30      	blt.n	800699a <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006938:	0051      	lsls	r1, r2, #1
 800693a:	d431      	bmi.n	80069a0 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800693c:	0094      	lsls	r4, r2, #2
 800693e:	d431      	bmi.n	80069a4 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006940:	00d0      	lsls	r0, r2, #3
 8006942:	d431      	bmi.n	80069a8 <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006944:	0111      	lsls	r1, r2, #4
 8006946:	d432      	bmi.n	80069ae <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006948:	0154      	lsls	r4, r2, #5
 800694a:	d433      	bmi.n	80069b4 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800694c:	01d0      	lsls	r0, r2, #7
 800694e:	d434      	bmi.n	80069ba <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006950:	0211      	lsls	r1, r2, #8
 8006952:	d435      	bmi.n	80069c0 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006954:	0254      	lsls	r4, r2, #9
 8006956:	d436      	bmi.n	80069c6 <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006958:	0290      	lsls	r0, r2, #10
 800695a:	d440      	bmi.n	80069de <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800695c:	02d1      	lsls	r1, r2, #11
 800695e:	d43b      	bmi.n	80069d8 <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006960:	0354      	lsls	r4, r2, #13
 8006962:	d436      	bmi.n	80069d2 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006964:	0390      	lsls	r0, r2, #14
 8006966:	d431      	bmi.n	80069cc <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006968:	03d1      	lsls	r1, r2, #15
 800696a:	d444      	bmi.n	80069f6 <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800696c:	0414      	lsls	r4, r2, #16
 800696e:	d43f      	bmi.n	80069f0 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006970:	0450      	lsls	r0, r2, #17
 8006972:	d43a      	bmi.n	80069ea <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006974:	0491      	lsls	r1, r2, #18
 8006976:	d435      	bmi.n	80069e4 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006978:	f012 0f08 	tst.w	r2, #8
 800697c:	bf14      	ite	ne
 800697e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006982:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006986:	e7bf      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006988:	2201      	movs	r2, #1
 800698a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800698c:	e7bc      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800698e:	2301      	movs	r3, #1
 8006990:	e7ba      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006992:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006994:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006996:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006998:	e7b6      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800699a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800699e:	e7b3      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80069a0:	2340      	movs	r3, #64	; 0x40
 80069a2:	e7b1      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80069a4:	2380      	movs	r3, #128	; 0x80
 80069a6:	e7af      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80069a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80069ac:	e7ac      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80069ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069b2:	e7a9      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80069b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069b8:	e7a6      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80069ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80069be:	e7a3      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80069c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80069c4:	e7a0      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80069c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069ca:	e79d      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80069cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80069d0:	e79a      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80069d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069d6:	e797      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80069d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069dc:	e794      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80069de:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80069e2:	e791      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80069e4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80069e8:	e78e      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80069ea:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80069ee:	e78b      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80069f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069f4:	e788      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80069f6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80069fa:	e785      	b.n	8006908 <SDMMC_CmdReadSingleBlock+0x40>
 80069fc:	2000093c 	.word	0x2000093c
 8006a00:	10624dd3 	.word	0x10624dd3
 8006a04:	fffee0c0 	.word	0xfffee0c0
 8006a08:	00200045 	.word	0x00200045
 8006a0c:	002000c5 	.word	0x002000c5
 8006a10:	fdffe008 	.word	0xfdffe008

08006a14 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a14:	4a4c      	ldr	r2, [pc, #304]	; (8006b48 <SDMMC_CmdReadMultiBlock+0x134>)
 8006a16:	4b4d      	ldr	r3, [pc, #308]	; (8006b4c <SDMMC_CmdReadMultiBlock+0x138>)
{
 8006a18:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a1a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006a1c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a1e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a22:	68c1      	ldr	r1, [r0, #12]
 8006a24:	4c4a      	ldr	r4, [pc, #296]	; (8006b50 <SDMMC_CmdReadMultiBlock+0x13c>)
 8006a26:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a2a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a2c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a2e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a32:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006a34:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006a38:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8006a3a:	b14a      	cbz	r2, 8006a50 <SDMMC_CmdReadMultiBlock+0x3c>
 8006a3c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006a3e:	4945      	ldr	r1, [pc, #276]	; (8006b54 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8006a40:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006a42:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006a44:	420a      	tst	r2, r1
 8006a46:	d001      	beq.n	8006a4c <SDMMC_CmdReadMultiBlock+0x38>
 8006a48:	0492      	lsls	r2, r2, #18
 8006a4a:	d507      	bpl.n	8006a5c <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 8006a4c:	1c5c      	adds	r4, r3, #1
 8006a4e:	d1f7      	bne.n	8006a40 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006a50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a5a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006a5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a5e:	075c      	lsls	r4, r3, #29
 8006a60:	d43d      	bmi.n	8006ade <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006a62:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006a64:	f013 0301 	ands.w	r3, r3, #1
 8006a68:	d134      	bne.n	8006ad4 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006a6a:	4b3b      	ldr	r3, [pc, #236]	; (8006b58 <SDMMC_CmdReadMultiBlock+0x144>)
 8006a6c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006a6e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b12      	cmp	r3, #18
 8006a74:	d131      	bne.n	8006ada <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8006a76:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006a78:	4b38      	ldr	r3, [pc, #224]	; (8006b5c <SDMMC_CmdReadMultiBlock+0x148>)
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0e9      	beq.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006a80:	2a00      	cmp	r2, #0
 8006a82:	db30      	blt.n	8006ae6 <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006a84:	0051      	lsls	r1, r2, #1
 8006a86:	d431      	bmi.n	8006aec <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006a88:	0094      	lsls	r4, r2, #2
 8006a8a:	d431      	bmi.n	8006af0 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006a8c:	00d0      	lsls	r0, r2, #3
 8006a8e:	d431      	bmi.n	8006af4 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006a90:	0111      	lsls	r1, r2, #4
 8006a92:	d432      	bmi.n	8006afa <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006a94:	0154      	lsls	r4, r2, #5
 8006a96:	d433      	bmi.n	8006b00 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006a98:	01d0      	lsls	r0, r2, #7
 8006a9a:	d434      	bmi.n	8006b06 <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006a9c:	0211      	lsls	r1, r2, #8
 8006a9e:	d435      	bmi.n	8006b0c <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006aa0:	0254      	lsls	r4, r2, #9
 8006aa2:	d436      	bmi.n	8006b12 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006aa4:	0290      	lsls	r0, r2, #10
 8006aa6:	d440      	bmi.n	8006b2a <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006aa8:	02d1      	lsls	r1, r2, #11
 8006aaa:	d43b      	bmi.n	8006b24 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006aac:	0354      	lsls	r4, r2, #13
 8006aae:	d436      	bmi.n	8006b1e <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006ab0:	0390      	lsls	r0, r2, #14
 8006ab2:	d431      	bmi.n	8006b18 <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006ab4:	03d1      	lsls	r1, r2, #15
 8006ab6:	d444      	bmi.n	8006b42 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006ab8:	0414      	lsls	r4, r2, #16
 8006aba:	d43f      	bmi.n	8006b3c <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006abc:	0450      	lsls	r0, r2, #17
 8006abe:	d43a      	bmi.n	8006b36 <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ac0:	0491      	lsls	r1, r2, #18
 8006ac2:	d435      	bmi.n	8006b30 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ac4:	f012 0f08 	tst.w	r2, #8
 8006ac8:	bf14      	ite	ne
 8006aca:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006ace:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006ad2:	e7bf      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ad8:	e7bc      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ada:	2301      	movs	r3, #1
 8006adc:	e7ba      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ade:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ae0:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006ae2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006ae4:	e7b6      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006aea:	e7b3      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006aec:	2340      	movs	r3, #64	; 0x40
 8006aee:	e7b1      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006af0:	2380      	movs	r3, #128	; 0x80
 8006af2:	e7af      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006af8:	e7ac      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006afe:	e7a9      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b04:	e7a6      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006b06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b0a:	e7a3      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006b0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b10:	e7a0      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006b12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006b16:	e79d      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006b18:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006b1c:	e79a      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006b1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006b22:	e797      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006b24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b28:	e794      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006b2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006b2e:	e791      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006b30:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006b34:	e78e      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006b36:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006b3a:	e78b      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006b3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006b40:	e788      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006b42:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006b46:	e785      	b.n	8006a54 <SDMMC_CmdReadMultiBlock+0x40>
 8006b48:	2000093c 	.word	0x2000093c
 8006b4c:	10624dd3 	.word	0x10624dd3
 8006b50:	fffee0c0 	.word	0xfffee0c0
 8006b54:	00200045 	.word	0x00200045
 8006b58:	002000c5 	.word	0x002000c5
 8006b5c:	fdffe008 	.word	0xfdffe008

08006b60 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b60:	4a4c      	ldr	r2, [pc, #304]	; (8006c94 <SDMMC_CmdWriteSingleBlock+0x134>)
 8006b62:	4b4d      	ldr	r3, [pc, #308]	; (8006c98 <SDMMC_CmdWriteSingleBlock+0x138>)
{
 8006b64:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b66:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006b68:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b6a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b6e:	68c1      	ldr	r1, [r0, #12]
 8006b70:	4c4a      	ldr	r4, [pc, #296]	; (8006c9c <SDMMC_CmdWriteSingleBlock+0x13c>)
 8006b72:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b76:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b78:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b7a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b7e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006b80:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006b84:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8006b86:	b14a      	cbz	r2, 8006b9c <SDMMC_CmdWriteSingleBlock+0x3c>
 8006b88:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006b8a:	4945      	ldr	r1, [pc, #276]	; (8006ca0 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8006b8c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006b8e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006b90:	420a      	tst	r2, r1
 8006b92:	d001      	beq.n	8006b98 <SDMMC_CmdWriteSingleBlock+0x38>
 8006b94:	0492      	lsls	r2, r2, #18
 8006b96:	d507      	bpl.n	8006ba8 <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 8006b98:	1c5c      	adds	r4, r3, #1
 8006b9a:	d1f7      	bne.n	8006b8c <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006b9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba6:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006ba8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006baa:	075c      	lsls	r4, r3, #29
 8006bac:	d43d      	bmi.n	8006c2a <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006bae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006bb0:	f013 0301 	ands.w	r3, r3, #1
 8006bb4:	d134      	bne.n	8006c20 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006bb6:	4b3b      	ldr	r3, [pc, #236]	; (8006ca4 <SDMMC_CmdWriteSingleBlock+0x144>)
 8006bb8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006bba:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006bbc:	b2db      	uxtb	r3, r3
 8006bbe:	2b18      	cmp	r3, #24
 8006bc0:	d131      	bne.n	8006c26 <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8006bc2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006bc4:	4b38      	ldr	r3, [pc, #224]	; (8006ca8 <SDMMC_CmdWriteSingleBlock+0x148>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0e9      	beq.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006bcc:	2a00      	cmp	r2, #0
 8006bce:	db30      	blt.n	8006c32 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006bd0:	0051      	lsls	r1, r2, #1
 8006bd2:	d431      	bmi.n	8006c38 <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006bd4:	0094      	lsls	r4, r2, #2
 8006bd6:	d431      	bmi.n	8006c3c <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006bd8:	00d0      	lsls	r0, r2, #3
 8006bda:	d431      	bmi.n	8006c40 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006bdc:	0111      	lsls	r1, r2, #4
 8006bde:	d432      	bmi.n	8006c46 <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006be0:	0154      	lsls	r4, r2, #5
 8006be2:	d433      	bmi.n	8006c4c <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006be4:	01d0      	lsls	r0, r2, #7
 8006be6:	d434      	bmi.n	8006c52 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006be8:	0211      	lsls	r1, r2, #8
 8006bea:	d435      	bmi.n	8006c58 <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006bec:	0254      	lsls	r4, r2, #9
 8006bee:	d436      	bmi.n	8006c5e <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006bf0:	0290      	lsls	r0, r2, #10
 8006bf2:	d440      	bmi.n	8006c76 <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006bf4:	02d1      	lsls	r1, r2, #11
 8006bf6:	d43b      	bmi.n	8006c70 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006bf8:	0354      	lsls	r4, r2, #13
 8006bfa:	d436      	bmi.n	8006c6a <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006bfc:	0390      	lsls	r0, r2, #14
 8006bfe:	d431      	bmi.n	8006c64 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006c00:	03d1      	lsls	r1, r2, #15
 8006c02:	d444      	bmi.n	8006c8e <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006c04:	0414      	lsls	r4, r2, #16
 8006c06:	d43f      	bmi.n	8006c88 <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006c08:	0450      	lsls	r0, r2, #17
 8006c0a:	d43a      	bmi.n	8006c82 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006c0c:	0491      	lsls	r1, r2, #18
 8006c0e:	d435      	bmi.n	8006c7c <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006c10:	f012 0f08 	tst.w	r2, #8
 8006c14:	bf14      	ite	ne
 8006c16:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006c1a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006c1e:	e7bf      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006c20:	2201      	movs	r2, #1
 8006c22:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c24:	e7bc      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e7ba      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c2a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c2c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006c2e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006c30:	e7b6      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c36:	e7b3      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006c38:	2340      	movs	r3, #64	; 0x40
 8006c3a:	e7b1      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006c3c:	2380      	movs	r3, #128	; 0x80
 8006c3e:	e7af      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006c40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c44:	e7ac      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006c46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c4a:	e7a9      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006c4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c50:	e7a6      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c56:	e7a3      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006c5c:	e7a0      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006c5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006c62:	e79d      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006c64:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006c68:	e79a      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006c6e:	e797      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c74:	e794      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006c76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006c7a:	e791      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006c7c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006c80:	e78e      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006c82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006c86:	e78b      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006c88:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006c8c:	e788      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006c8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006c92:	e785      	b.n	8006ba0 <SDMMC_CmdWriteSingleBlock+0x40>
 8006c94:	2000093c 	.word	0x2000093c
 8006c98:	10624dd3 	.word	0x10624dd3
 8006c9c:	fffee0c0 	.word	0xfffee0c0
 8006ca0:	00200045 	.word	0x00200045
 8006ca4:	002000c5 	.word	0x002000c5
 8006ca8:	fdffe008 	.word	0xfdffe008

08006cac <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006cac:	4a4c      	ldr	r2, [pc, #304]	; (8006de0 <SDMMC_CmdWriteMultiBlock+0x134>)
 8006cae:	4b4d      	ldr	r3, [pc, #308]	; (8006de4 <SDMMC_CmdWriteMultiBlock+0x138>)
{
 8006cb0:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006cb2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8006cb4:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006cb6:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006cba:	68c1      	ldr	r1, [r0, #12]
 8006cbc:	4c4a      	ldr	r4, [pc, #296]	; (8006de8 <SDMMC_CmdWriteMultiBlock+0x13c>)
 8006cbe:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006cc2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006cc4:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006cc6:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006cca:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006ccc:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006cd0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8006cd2:	b14a      	cbz	r2, 8006ce8 <SDMMC_CmdWriteMultiBlock+0x3c>
 8006cd4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006cd6:	4945      	ldr	r1, [pc, #276]	; (8006dec <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8006cd8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006cda:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006cdc:	420a      	tst	r2, r1
 8006cde:	d001      	beq.n	8006ce4 <SDMMC_CmdWriteMultiBlock+0x38>
 8006ce0:	0492      	lsls	r2, r2, #18
 8006ce2:	d507      	bpl.n	8006cf4 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 8006ce4:	1c5c      	adds	r4, r3, #1
 8006ce6:	d1f7      	bne.n	8006cd8 <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8006ce8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006cf2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006cf4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cf6:	075c      	lsls	r4, r3, #29
 8006cf8:	d43d      	bmi.n	8006d76 <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006cfa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006cfc:	f013 0301 	ands.w	r3, r3, #1
 8006d00:	d134      	bne.n	8006d6c <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006d02:	4b3b      	ldr	r3, [pc, #236]	; (8006df0 <SDMMC_CmdWriteMultiBlock+0x144>)
 8006d04:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006d06:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	2b19      	cmp	r3, #25
 8006d0c:	d131      	bne.n	8006d72 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8006d0e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006d10:	4b38      	ldr	r3, [pc, #224]	; (8006df4 <SDMMC_CmdWriteMultiBlock+0x148>)
 8006d12:	4013      	ands	r3, r2
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d0e9      	beq.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006d18:	2a00      	cmp	r2, #0
 8006d1a:	db30      	blt.n	8006d7e <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006d1c:	0051      	lsls	r1, r2, #1
 8006d1e:	d431      	bmi.n	8006d84 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006d20:	0094      	lsls	r4, r2, #2
 8006d22:	d431      	bmi.n	8006d88 <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006d24:	00d0      	lsls	r0, r2, #3
 8006d26:	d431      	bmi.n	8006d8c <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006d28:	0111      	lsls	r1, r2, #4
 8006d2a:	d432      	bmi.n	8006d92 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006d2c:	0154      	lsls	r4, r2, #5
 8006d2e:	d433      	bmi.n	8006d98 <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006d30:	01d0      	lsls	r0, r2, #7
 8006d32:	d434      	bmi.n	8006d9e <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006d34:	0211      	lsls	r1, r2, #8
 8006d36:	d435      	bmi.n	8006da4 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006d38:	0254      	lsls	r4, r2, #9
 8006d3a:	d436      	bmi.n	8006daa <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006d3c:	0290      	lsls	r0, r2, #10
 8006d3e:	d440      	bmi.n	8006dc2 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006d40:	02d1      	lsls	r1, r2, #11
 8006d42:	d43b      	bmi.n	8006dbc <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006d44:	0354      	lsls	r4, r2, #13
 8006d46:	d436      	bmi.n	8006db6 <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006d48:	0390      	lsls	r0, r2, #14
 8006d4a:	d431      	bmi.n	8006db0 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006d4c:	03d1      	lsls	r1, r2, #15
 8006d4e:	d444      	bmi.n	8006dda <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006d50:	0414      	lsls	r4, r2, #16
 8006d52:	d43f      	bmi.n	8006dd4 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006d54:	0450      	lsls	r0, r2, #17
 8006d56:	d43a      	bmi.n	8006dce <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006d58:	0491      	lsls	r1, r2, #18
 8006d5a:	d435      	bmi.n	8006dc8 <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006d5c:	f012 0f08 	tst.w	r2, #8
 8006d60:	bf14      	ite	ne
 8006d62:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8006d66:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8006d6a:	e7bf      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d70:	e7bc      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e7ba      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d76:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d78:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006d7a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006d7c:	e7b6      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006d7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d82:	e7b3      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006d84:	2340      	movs	r3, #64	; 0x40
 8006d86:	e7b1      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	e7af      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006d8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006d90:	e7ac      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d96:	e7a9      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d9c:	e7a6      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006d9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006da2:	e7a3      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006da4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006da8:	e7a0      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006daa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006dae:	e79d      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006db0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006db4:	e79a      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006dba:	e797      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8006dbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dc0:	e794      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006dc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006dc6:	e791      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8006dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006dcc:	e78e      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006dce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006dd2:	e78b      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006dd4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006dd8:	e788      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006dda:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006dde:	e785      	b.n	8006cec <SDMMC_CmdWriteMultiBlock+0x40>
 8006de0:	2000093c 	.word	0x2000093c
 8006de4:	10624dd3 	.word	0x10624dd3
 8006de8:	fffee0c0 	.word	0xfffee0c0
 8006dec:	00200045 	.word	0x00200045
 8006df0:	002000c5 	.word	0x002000c5
 8006df4:	fdffe008 	.word	0xfdffe008

08006df8 <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006df8:	4b7d      	ldr	r3, [pc, #500]	; (8006ff0 <SDMMC_CmdStopTransfer+0x1f8>)
 8006dfa:	497e      	ldr	r1, [pc, #504]	; (8006ff4 <SDMMC_CmdStopTransfer+0x1fc>)
{
 8006dfc:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006dfe:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8006e00:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e02:	4b7d      	ldr	r3, [pc, #500]	; (8006ff8 <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e04:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006e08:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e0a:	4d7c      	ldr	r5, [pc, #496]	; (8006ffc <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006e0c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e10:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8006e12:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006e14:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8006e16:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8006e1a:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8006e1e:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e20:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8006e24:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8006e26:	68c4      	ldr	r4, [r0, #12]
 8006e28:	4023      	ands	r3, r4
 8006e2a:	4319      	orrs	r1, r3
 8006e2c:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8006e2e:	b14a      	cbz	r2, 8006e44 <SDMMC_CmdStopTransfer+0x4c>
 8006e30:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8006e32:	4973      	ldr	r1, [pc, #460]	; (8007000 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8006e34:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8006e36:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8006e38:	420a      	tst	r2, r1
 8006e3a:	d001      	beq.n	8006e40 <SDMMC_CmdStopTransfer+0x48>
 8006e3c:	0492      	lsls	r2, r2, #18
 8006e3e:	d50a      	bpl.n	8006e56 <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8006e40:	1c5c      	adds	r4, r3, #1
 8006e42:	d1f7      	bne.n	8006e34 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006e44:	68c2      	ldr	r2, [r0, #12]
 8006e46:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4e:	60c2      	str	r2, [r0, #12]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	bc30      	pop	{r4, r5}
 8006e54:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8006e56:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e58:	075b      	lsls	r3, r3, #29
 8006e5a:	d454      	bmi.n	8006f06 <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8006e5c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006e5e:	f013 0301 	ands.w	r3, r3, #1
 8006e62:	d13c      	bne.n	8006ede <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8006e64:	4a67      	ldr	r2, [pc, #412]	; (8007004 <SDMMC_CmdStopTransfer+0x20c>)
 8006e66:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8006e68:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8006e6a:	b2d2      	uxtb	r2, r2
 8006e6c:	2a0c      	cmp	r2, #12
 8006e6e:	d144      	bne.n	8006efa <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 8006e70:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e72:	4965      	ldr	r1, [pc, #404]	; (8007008 <SDMMC_CmdStopTransfer+0x210>)
 8006e74:	4011      	ands	r1, r2
 8006e76:	2900      	cmp	r1, #0
 8006e78:	d038      	beq.n	8006eec <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e7a:	2a00      	cmp	r2, #0
 8006e7c:	db36      	blt.n	8006eec <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e7e:	0055      	lsls	r5, r2, #1
 8006e80:	d448      	bmi.n	8006f14 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e82:	0094      	lsls	r4, r2, #2
 8006e84:	d44c      	bmi.n	8006f20 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e86:	00d1      	lsls	r1, r2, #3
 8006e88:	d450      	bmi.n	8006f2c <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e8a:	0113      	lsls	r3, r2, #4
 8006e8c:	d455      	bmi.n	8006f3a <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006e8e:	0155      	lsls	r5, r2, #5
 8006e90:	d45a      	bmi.n	8006f48 <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006e92:	01d4      	lsls	r4, r2, #7
 8006e94:	d466      	bmi.n	8006f64 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006e96:	0211      	lsls	r1, r2, #8
 8006e98:	d45d      	bmi.n	8006f56 <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006e9a:	0253      	lsls	r3, r2, #9
 8006e9c:	d470      	bmi.n	8006f80 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006e9e:	0295      	lsls	r5, r2, #10
 8006ea0:	d467      	bmi.n	8006f72 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006ea2:	02d4      	lsls	r4, r2, #11
 8006ea4:	f100 8081 	bmi.w	8006faa <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006ea8:	0351      	lsls	r1, r2, #13
 8006eaa:	d477      	bmi.n	8006f9c <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006eac:	0393      	lsls	r3, r2, #14
 8006eae:	d46e      	bmi.n	8006f8e <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006eb0:	03d5      	lsls	r5, r2, #15
 8006eb2:	f100 8096 	bmi.w	8006fe2 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006eb6:	0414      	lsls	r4, r2, #16
 8006eb8:	f100 8085 	bmi.w	8006fc6 <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006ebc:	0451      	lsls	r1, r2, #17
 8006ebe:	d47b      	bmi.n	8006fb8 <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006ec0:	0493      	lsls	r3, r2, #18
 8006ec2:	f100 8087 	bmi.w	8006fd4 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006ec6:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006eca:	68c2      	ldr	r2, [r0, #12]
 8006ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006ed0:	bf14      	ite	ne
 8006ed2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ed6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006eda:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006edc:	e7b8      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8006ede:	2201      	movs	r2, #1
 8006ee0:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006ee2:	68c2      	ldr	r2, [r0, #12]
 8006ee4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ee8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006eea:	e7b1      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006eec:	68c2      	ldr	r2, [r0, #12]
 8006eee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006ef2:	60c2      	str	r2, [r0, #12]
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	bc30      	pop	{r4, r5}
 8006ef8:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006efa:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006efc:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f02:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f04:	e7a4      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8006f06:	2304      	movs	r3, #4
 8006f08:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f0a:	68c2      	ldr	r2, [r0, #12]
 8006f0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f10:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f12:	e79d      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f14:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006f16:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f1c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f1e:	e797      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f20:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006f22:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f28:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f2a:	e791      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f2c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f2e:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f36:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f38:	e78a      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f3a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f3c:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f40:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f44:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f46:	e783      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f48:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f52:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f54:	e77c      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f56:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f60:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f62:	e775      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f64:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f66:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f6e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f70:	e76e      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f72:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f74:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f7c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f7e:	e767      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f80:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f8a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f8c:	e760      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f8e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006f90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f98:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006f9a:	e759      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006f9c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fa2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fa6:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fa8:	e752      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006faa:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 8006fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fb6:	e74b      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fb8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006fba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fc2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fc4:	e744      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fc6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fc8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fd2:	e73d      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fd4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 8006fd6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fde:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fe0:	e736      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fe2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fe4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8006fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fec:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8006fee:	e72f      	b.n	8006e50 <SDMMC_CmdStopTransfer+0x58>
 8006ff0:	2000093c 	.word	0x2000093c
 8006ff4:	10624dd3 	.word	0x10624dd3
 8006ff8:	fffee0c0 	.word	0xfffee0c0
 8006ffc:	05f5e100 	.word	0x05f5e100
 8007000:	00200045 	.word	0x00200045
 8007004:	002000c5 	.word	0x002000c5
 8007008:	fdffe008 	.word	0xfdffe008

0800700c <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800700c:	4a4c      	ldr	r2, [pc, #304]	; (8007140 <SDMMC_CmdSelDesel+0x134>)
 800700e:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <SDMMC_CmdSelDesel+0x138>)
{
 8007010:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007012:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007014:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007016:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800701a:	68c1      	ldr	r1, [r0, #12]
 800701c:	4c4a      	ldr	r4, [pc, #296]	; (8007148 <SDMMC_CmdSelDesel+0x13c>)
 800701e:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007022:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007024:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007026:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800702a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800702c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007030:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8007032:	b14a      	cbz	r2, 8007048 <SDMMC_CmdSelDesel+0x3c>
 8007034:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007036:	4945      	ldr	r1, [pc, #276]	; (800714c <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 8007038:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800703a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800703c:	420a      	tst	r2, r1
 800703e:	d001      	beq.n	8007044 <SDMMC_CmdSelDesel+0x38>
 8007040:	0492      	lsls	r2, r2, #18
 8007042:	d507      	bpl.n	8007054 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 8007044:	1c5c      	adds	r4, r3, #1
 8007046:	d1f7      	bne.n	8007038 <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007048:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800704c:	4618      	mov	r0, r3
 800704e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007052:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007054:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007056:	075c      	lsls	r4, r3, #29
 8007058:	d43d      	bmi.n	80070d6 <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800705a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800705c:	f013 0301 	ands.w	r3, r3, #1
 8007060:	d134      	bne.n	80070cc <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007062:	4b3b      	ldr	r3, [pc, #236]	; (8007150 <SDMMC_CmdSelDesel+0x144>)
 8007064:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007066:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b07      	cmp	r3, #7
 800706c:	d131      	bne.n	80070d2 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 800706e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007070:	4b38      	ldr	r3, [pc, #224]	; (8007154 <SDMMC_CmdSelDesel+0x148>)
 8007072:	4013      	ands	r3, r2
 8007074:	2b00      	cmp	r3, #0
 8007076:	d0e9      	beq.n	800704c <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007078:	2a00      	cmp	r2, #0
 800707a:	db30      	blt.n	80070de <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800707c:	0051      	lsls	r1, r2, #1
 800707e:	d431      	bmi.n	80070e4 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007080:	0094      	lsls	r4, r2, #2
 8007082:	d431      	bmi.n	80070e8 <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007084:	00d0      	lsls	r0, r2, #3
 8007086:	d431      	bmi.n	80070ec <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007088:	0111      	lsls	r1, r2, #4
 800708a:	d432      	bmi.n	80070f2 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800708c:	0154      	lsls	r4, r2, #5
 800708e:	d433      	bmi.n	80070f8 <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007090:	01d0      	lsls	r0, r2, #7
 8007092:	d434      	bmi.n	80070fe <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007094:	0211      	lsls	r1, r2, #8
 8007096:	d435      	bmi.n	8007104 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007098:	0254      	lsls	r4, r2, #9
 800709a:	d436      	bmi.n	800710a <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800709c:	0290      	lsls	r0, r2, #10
 800709e:	d440      	bmi.n	8007122 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80070a0:	02d1      	lsls	r1, r2, #11
 80070a2:	d43b      	bmi.n	800711c <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80070a4:	0354      	lsls	r4, r2, #13
 80070a6:	d436      	bmi.n	8007116 <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80070a8:	0390      	lsls	r0, r2, #14
 80070aa:	d431      	bmi.n	8007110 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80070ac:	03d1      	lsls	r1, r2, #15
 80070ae:	d444      	bmi.n	800713a <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80070b0:	0414      	lsls	r4, r2, #16
 80070b2:	d43f      	bmi.n	8007134 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80070b4:	0450      	lsls	r0, r2, #17
 80070b6:	d43a      	bmi.n	800712e <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80070b8:	0491      	lsls	r1, r2, #18
 80070ba:	d435      	bmi.n	8007128 <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80070bc:	f012 0f08 	tst.w	r2, #8
 80070c0:	bf14      	ite	ne
 80070c2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80070c6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80070ca:	e7bf      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80070cc:	2201      	movs	r2, #1
 80070ce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070d0:	e7bc      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80070d2:	2301      	movs	r3, #1
 80070d4:	e7ba      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070d6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070d8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80070da:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070dc:	e7b6      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80070de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070e2:	e7b3      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80070e4:	2340      	movs	r3, #64	; 0x40
 80070e6:	e7b1      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	e7af      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80070ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80070f0:	e7ac      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80070f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f6:	e7a9      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80070f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070fc:	e7a6      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80070fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007102:	e7a3      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007108:	e7a0      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800710a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800710e:	e79d      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007110:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007114:	e79a      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007116:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800711a:	e797      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 800711c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007120:	e794      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007122:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007126:	e791      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8007128:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800712c:	e78e      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800712e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007132:	e78b      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007134:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007138:	e788      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800713a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800713e:	e785      	b.n	800704c <SDMMC_CmdSelDesel+0x40>
 8007140:	2000093c 	.word	0x2000093c
 8007144:	10624dd3 	.word	0x10624dd3
 8007148:	fffee0c0 	.word	0xfffee0c0
 800714c:	00200045 	.word	0x00200045
 8007150:	002000c5 	.word	0x002000c5
 8007154:	fdffe008 	.word	0xfdffe008

08007158 <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007158:	4b11      	ldr	r3, [pc, #68]	; (80071a0 <SDMMC_CmdGoIdleState+0x48>)
{
 800715a:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800715c:	4a11      	ldr	r2, [pc, #68]	; (80071a4 <SDMMC_CmdGoIdleState+0x4c>)
{
 800715e:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007160:	4c11      	ldr	r4, [pc, #68]	; (80071a8 <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 8007162:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007164:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8007166:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007168:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800716c:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800716e:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007172:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007174:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007176:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800717a:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800717e:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007180:	e002      	b.n	8007188 <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8007182:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8007184:	0612      	lsls	r2, r2, #24
 8007186:	d405      	bmi.n	8007194 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 8007188:	3b01      	subs	r3, #1
 800718a:	d2fa      	bcs.n	8007182 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 800718c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007190:	bc30      	pop	{r4, r5}
 8007192:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007194:	4b05      	ldr	r3, [pc, #20]	; (80071ac <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 8007196:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007198:	638b      	str	r3, [r1, #56]	; 0x38
}
 800719a:	bc30      	pop	{r4, r5}
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	2000093c 	.word	0x2000093c
 80071a4:	fffee0c0 	.word	0xfffee0c0
 80071a8:	10624dd3 	.word	0x10624dd3
 80071ac:	002000c5 	.word	0x002000c5

080071b0 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071b0:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <SDMMC_CmdOperCond+0x74>)
{
 80071b2:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80071b4:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071b8:	481b      	ldr	r0, [pc, #108]	; (8007228 <SDMMC_CmdOperCond+0x78>)
{
 80071ba:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071bc:	4c1b      	ldr	r4, [pc, #108]	; (800722c <SDMMC_CmdOperCond+0x7c>)
 80071be:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80071c0:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071c2:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071c6:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071ca:	68cc      	ldr	r4, [r1, #12]
 80071cc:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071ce:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071d0:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80071d2:	f241 3088 	movw	r0, #5000	; 0x1388
 80071d6:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80071da:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 80071dc:	b14a      	cbz	r2, 80071f2 <SDMMC_CmdOperCond+0x42>
 80071de:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80071e0:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 80071e2:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80071e4:	f012 0f45 	tst.w	r2, #69	; 0x45
 80071e8:	d001      	beq.n	80071ee <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80071ea:	0490      	lsls	r0, r2, #18
 80071ec:	d506      	bpl.n	80071fc <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 80071ee:	1c5c      	adds	r4, r3, #1
 80071f0:	d1f6      	bne.n	80071e0 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 80071f2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80071f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fa:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80071fc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80071fe:	075a      	lsls	r2, r3, #29
 8007200:	d40c      	bmi.n	800721c <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007202:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8007204:	f010 0001 	ands.w	r0, r0, #1
 8007208:	d105      	bne.n	8007216 <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800720a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 800720c:	065b      	lsls	r3, r3, #25
 800720e:	d5f2      	bpl.n	80071f6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8007210:	2340      	movs	r3, #64	; 0x40
 8007212:	638b      	str	r3, [r1, #56]	; 0x38
 8007214:	e7ef      	b.n	80071f6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007216:	2301      	movs	r3, #1
 8007218:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800721a:	e7ec      	b.n	80071f6 <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800721c:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800721e:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007220:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007222:	e7e8      	b.n	80071f6 <SDMMC_CmdOperCond+0x46>
 8007224:	2000093c 	.word	0x2000093c
 8007228:	fffee0c0 	.word	0xfffee0c0
 800722c:	10624dd3 	.word	0x10624dd3

08007230 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007230:	4a4c      	ldr	r2, [pc, #304]	; (8007364 <SDMMC_CmdAppCommand+0x134>)
 8007232:	4b4d      	ldr	r3, [pc, #308]	; (8007368 <SDMMC_CmdAppCommand+0x138>)
{
 8007234:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007236:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007238:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800723a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800723e:	68c1      	ldr	r1, [r0, #12]
 8007240:	4c4a      	ldr	r4, [pc, #296]	; (800736c <SDMMC_CmdAppCommand+0x13c>)
 8007242:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007246:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007248:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800724a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800724e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007250:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007254:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8007256:	b14a      	cbz	r2, 800726c <SDMMC_CmdAppCommand+0x3c>
 8007258:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800725a:	4945      	ldr	r1, [pc, #276]	; (8007370 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 800725c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800725e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007260:	420a      	tst	r2, r1
 8007262:	d001      	beq.n	8007268 <SDMMC_CmdAppCommand+0x38>
 8007264:	0492      	lsls	r2, r2, #18
 8007266:	d507      	bpl.n	8007278 <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 8007268:	1c5c      	adds	r4, r3, #1
 800726a:	d1f7      	bne.n	800725c <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800726c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007270:	4618      	mov	r0, r3
 8007272:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007276:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007278:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800727a:	075c      	lsls	r4, r3, #29
 800727c:	d43d      	bmi.n	80072fa <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800727e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007280:	f013 0301 	ands.w	r3, r3, #1
 8007284:	d134      	bne.n	80072f0 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007286:	4b3b      	ldr	r3, [pc, #236]	; (8007374 <SDMMC_CmdAppCommand+0x144>)
 8007288:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800728a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b37      	cmp	r3, #55	; 0x37
 8007290:	d131      	bne.n	80072f6 <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 8007292:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007294:	4b38      	ldr	r3, [pc, #224]	; (8007378 <SDMMC_CmdAppCommand+0x148>)
 8007296:	4013      	ands	r3, r2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d0e9      	beq.n	8007270 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800729c:	2a00      	cmp	r2, #0
 800729e:	db30      	blt.n	8007302 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80072a0:	0051      	lsls	r1, r2, #1
 80072a2:	d431      	bmi.n	8007308 <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80072a4:	0094      	lsls	r4, r2, #2
 80072a6:	d431      	bmi.n	800730c <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80072a8:	00d0      	lsls	r0, r2, #3
 80072aa:	d431      	bmi.n	8007310 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80072ac:	0111      	lsls	r1, r2, #4
 80072ae:	d432      	bmi.n	8007316 <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80072b0:	0154      	lsls	r4, r2, #5
 80072b2:	d433      	bmi.n	800731c <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80072b4:	01d0      	lsls	r0, r2, #7
 80072b6:	d434      	bmi.n	8007322 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80072b8:	0211      	lsls	r1, r2, #8
 80072ba:	d435      	bmi.n	8007328 <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80072bc:	0254      	lsls	r4, r2, #9
 80072be:	d436      	bmi.n	800732e <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80072c0:	0290      	lsls	r0, r2, #10
 80072c2:	d440      	bmi.n	8007346 <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80072c4:	02d1      	lsls	r1, r2, #11
 80072c6:	d43b      	bmi.n	8007340 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80072c8:	0354      	lsls	r4, r2, #13
 80072ca:	d436      	bmi.n	800733a <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80072cc:	0390      	lsls	r0, r2, #14
 80072ce:	d431      	bmi.n	8007334 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80072d0:	03d1      	lsls	r1, r2, #15
 80072d2:	d444      	bmi.n	800735e <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80072d4:	0414      	lsls	r4, r2, #16
 80072d6:	d43f      	bmi.n	8007358 <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80072d8:	0450      	lsls	r0, r2, #17
 80072da:	d43a      	bmi.n	8007352 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80072dc:	0491      	lsls	r1, r2, #18
 80072de:	d435      	bmi.n	800734c <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80072e0:	f012 0f08 	tst.w	r2, #8
 80072e4:	bf14      	ite	ne
 80072e6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80072ea:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80072ee:	e7bf      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80072f0:	2201      	movs	r2, #1
 80072f2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f4:	e7bc      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072f6:	2301      	movs	r3, #1
 80072f8:	e7ba      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072fa:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072fc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80072fe:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007300:	e7b6      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007306:	e7b3      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007308:	2340      	movs	r3, #64	; 0x40
 800730a:	e7b1      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800730c:	2380      	movs	r3, #128	; 0x80
 800730e:	e7af      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007314:	e7ac      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007316:	f44f 7300 	mov.w	r3, #512	; 0x200
 800731a:	e7a9      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800731c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007320:	e7a6      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007326:	e7a3      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800732c:	e7a0      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800732e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007332:	e79d      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007334:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007338:	e79a      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800733a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800733e:	e797      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8007340:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007344:	e794      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007346:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800734a:	e791      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800734c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007350:	e78e      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007352:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007356:	e78b      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007358:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800735c:	e788      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800735e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007362:	e785      	b.n	8007270 <SDMMC_CmdAppCommand+0x40>
 8007364:	2000093c 	.word	0x2000093c
 8007368:	10624dd3 	.word	0x10624dd3
 800736c:	fffee0c0 	.word	0xfffee0c0
 8007370:	00200045 	.word	0x00200045
 8007374:	002000c5 	.word	0x002000c5
 8007378:	fdffe008 	.word	0xfdffe008

0800737c <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800737c:	4a18      	ldr	r2, [pc, #96]	; (80073e0 <SDMMC_CmdAppOperCommand+0x64>)
 800737e:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <SDMMC_CmdAppOperCommand+0x68>)
{
 8007380:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007382:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007384:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007386:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800738a:	68c1      	ldr	r1, [r0, #12]
 800738c:	4c16      	ldr	r4, [pc, #88]	; (80073e8 <SDMMC_CmdAppOperCommand+0x6c>)
 800738e:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007392:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007394:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007396:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800739a:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800739c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073a0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80073a2:	b14a      	cbz	r2, 80073b8 <SDMMC_CmdAppOperCommand+0x3c>
 80073a4:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80073a6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80073a8:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80073aa:	f012 0f45 	tst.w	r2, #69	; 0x45
 80073ae:	d001      	beq.n	80073b4 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80073b0:	0492      	lsls	r2, r2, #18
 80073b2:	d507      	bpl.n	80073c4 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 80073b4:	1c59      	adds	r1, r3, #1
 80073b6:	d1f6      	bne.n	80073a6 <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80073b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80073bc:	4618      	mov	r0, r3
 80073be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073c2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80073c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80073c6:	f013 0304 	ands.w	r3, r3, #4
 80073ca:	d105      	bne.n	80073d8 <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80073cc:	4a07      	ldr	r2, [pc, #28]	; (80073ec <SDMMC_CmdAppOperCommand+0x70>)
 80073ce:	6382      	str	r2, [r0, #56]	; 0x38
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073d6:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073d8:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073da:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80073dc:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80073de:	e7ed      	b.n	80073bc <SDMMC_CmdAppOperCommand+0x40>
 80073e0:	2000093c 	.word	0x2000093c
 80073e4:	10624dd3 	.word	0x10624dd3
 80073e8:	fffee0c0 	.word	0xfffee0c0
 80073ec:	002000c5 	.word	0x002000c5

080073f0 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80073f0:	4a4c      	ldr	r2, [pc, #304]	; (8007524 <SDMMC_CmdBusWidth+0x134>)
 80073f2:	4b4d      	ldr	r3, [pc, #308]	; (8007528 <SDMMC_CmdBusWidth+0x138>)
{
 80073f4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80073f6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80073f8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80073fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80073fe:	68c1      	ldr	r1, [r0, #12]
 8007400:	4c4a      	ldr	r4, [pc, #296]	; (800752c <SDMMC_CmdBusWidth+0x13c>)
 8007402:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007406:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007408:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800740a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800740e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007410:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007414:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8007416:	b14a      	cbz	r2, 800742c <SDMMC_CmdBusWidth+0x3c>
 8007418:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800741a:	4945      	ldr	r1, [pc, #276]	; (8007530 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 800741c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800741e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007420:	420a      	tst	r2, r1
 8007422:	d001      	beq.n	8007428 <SDMMC_CmdBusWidth+0x38>
 8007424:	0492      	lsls	r2, r2, #18
 8007426:	d507      	bpl.n	8007438 <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 8007428:	1c5c      	adds	r4, r3, #1
 800742a:	d1f7      	bne.n	800741c <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800742c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007430:	4618      	mov	r0, r3
 8007432:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007436:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007438:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800743a:	075c      	lsls	r4, r3, #29
 800743c:	d43d      	bmi.n	80074ba <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800743e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007440:	f013 0301 	ands.w	r3, r3, #1
 8007444:	d134      	bne.n	80074b0 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007446:	4b3b      	ldr	r3, [pc, #236]	; (8007534 <SDMMC_CmdBusWidth+0x144>)
 8007448:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 800744a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b06      	cmp	r3, #6
 8007450:	d131      	bne.n	80074b6 <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 8007452:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007454:	4b38      	ldr	r3, [pc, #224]	; (8007538 <SDMMC_CmdBusWidth+0x148>)
 8007456:	4013      	ands	r3, r2
 8007458:	2b00      	cmp	r3, #0
 800745a:	d0e9      	beq.n	8007430 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800745c:	2a00      	cmp	r2, #0
 800745e:	db30      	blt.n	80074c2 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007460:	0051      	lsls	r1, r2, #1
 8007462:	d431      	bmi.n	80074c8 <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007464:	0094      	lsls	r4, r2, #2
 8007466:	d431      	bmi.n	80074cc <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007468:	00d0      	lsls	r0, r2, #3
 800746a:	d431      	bmi.n	80074d0 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800746c:	0111      	lsls	r1, r2, #4
 800746e:	d432      	bmi.n	80074d6 <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007470:	0154      	lsls	r4, r2, #5
 8007472:	d433      	bmi.n	80074dc <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007474:	01d0      	lsls	r0, r2, #7
 8007476:	d434      	bmi.n	80074e2 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007478:	0211      	lsls	r1, r2, #8
 800747a:	d435      	bmi.n	80074e8 <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800747c:	0254      	lsls	r4, r2, #9
 800747e:	d436      	bmi.n	80074ee <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007480:	0290      	lsls	r0, r2, #10
 8007482:	d440      	bmi.n	8007506 <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007484:	02d1      	lsls	r1, r2, #11
 8007486:	d43b      	bmi.n	8007500 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007488:	0354      	lsls	r4, r2, #13
 800748a:	d436      	bmi.n	80074fa <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800748c:	0390      	lsls	r0, r2, #14
 800748e:	d431      	bmi.n	80074f4 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007490:	03d1      	lsls	r1, r2, #15
 8007492:	d444      	bmi.n	800751e <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007494:	0414      	lsls	r4, r2, #16
 8007496:	d43f      	bmi.n	8007518 <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007498:	0450      	lsls	r0, r2, #17
 800749a:	d43a      	bmi.n	8007512 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800749c:	0491      	lsls	r1, r2, #18
 800749e:	d435      	bmi.n	800750c <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80074a0:	f012 0f08 	tst.w	r2, #8
 80074a4:	bf14      	ite	ne
 80074a6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80074aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80074ae:	e7bf      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80074b0:	2201      	movs	r2, #1
 80074b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074b4:	e7bc      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074b6:	2301      	movs	r3, #1
 80074b8:	e7ba      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074ba:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074bc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80074be:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074c0:	e7b6      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80074c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80074c6:	e7b3      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80074c8:	2340      	movs	r3, #64	; 0x40
 80074ca:	e7b1      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80074cc:	2380      	movs	r3, #128	; 0x80
 80074ce:	e7af      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80074d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80074d4:	e7ac      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80074d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074da:	e7a9      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80074dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074e0:	e7a6      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80074e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80074e6:	e7a3      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80074e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074ec:	e7a0      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80074ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80074f2:	e79d      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80074f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80074f8:	e79a      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80074fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80074fe:	e797      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8007500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007504:	e794      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007506:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800750a:	e791      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 800750c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007510:	e78e      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007512:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007516:	e78b      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007518:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800751c:	e788      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800751e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007522:	e785      	b.n	8007430 <SDMMC_CmdBusWidth+0x40>
 8007524:	2000093c 	.word	0x2000093c
 8007528:	10624dd3 	.word	0x10624dd3
 800752c:	fffee0c0 	.word	0xfffee0c0
 8007530:	00200045 	.word	0x00200045
 8007534:	002000c5 	.word	0x002000c5
 8007538:	fdffe008 	.word	0xfdffe008

0800753c <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800753c:	4a4d      	ldr	r2, [pc, #308]	; (8007674 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 800753e:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007540:	494d      	ldr	r1, [pc, #308]	; (8007678 <SDMMC_CmdSendSCR+0x13c>)
{
 8007542:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007544:	4c4d      	ldr	r4, [pc, #308]	; (800767c <SDMMC_CmdSendSCR+0x140>)
 8007546:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007548:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800754a:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800754e:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007552:	68c4      	ldr	r4, [r0, #12]
 8007554:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007556:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007558:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800755a:	f241 3188 	movw	r1, #5000	; 0x1388
 800755e:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007562:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8007564:	b14a      	cbz	r2, 800757a <SDMMC_CmdSendSCR+0x3e>
 8007566:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007568:	4945      	ldr	r1, [pc, #276]	; (8007680 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 800756a:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800756c:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800756e:	420a      	tst	r2, r1
 8007570:	d001      	beq.n	8007576 <SDMMC_CmdSendSCR+0x3a>
 8007572:	0492      	lsls	r2, r2, #18
 8007574:	d507      	bpl.n	8007586 <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 8007576:	1c5c      	adds	r4, r3, #1
 8007578:	d1f7      	bne.n	800756a <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 800757a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 800757e:	4618      	mov	r0, r3
 8007580:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007584:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007586:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007588:	075c      	lsls	r4, r3, #29
 800758a:	d43d      	bmi.n	8007608 <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800758c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800758e:	f013 0301 	ands.w	r3, r3, #1
 8007592:	d134      	bne.n	80075fe <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007594:	4b3b      	ldr	r3, [pc, #236]	; (8007684 <SDMMC_CmdSendSCR+0x148>)
 8007596:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007598:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800759a:	b2db      	uxtb	r3, r3
 800759c:	2b33      	cmp	r3, #51	; 0x33
 800759e:	d131      	bne.n	8007604 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 80075a0:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80075a2:	4b39      	ldr	r3, [pc, #228]	; (8007688 <SDMMC_CmdSendSCR+0x14c>)
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d0e9      	beq.n	800757e <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	db30      	blt.n	8007610 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80075ae:	0051      	lsls	r1, r2, #1
 80075b0:	d431      	bmi.n	8007616 <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80075b2:	0094      	lsls	r4, r2, #2
 80075b4:	d431      	bmi.n	800761a <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80075b6:	00d0      	lsls	r0, r2, #3
 80075b8:	d431      	bmi.n	800761e <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80075ba:	0111      	lsls	r1, r2, #4
 80075bc:	d432      	bmi.n	8007624 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80075be:	0154      	lsls	r4, r2, #5
 80075c0:	d433      	bmi.n	800762a <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80075c2:	01d0      	lsls	r0, r2, #7
 80075c4:	d434      	bmi.n	8007630 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80075c6:	0211      	lsls	r1, r2, #8
 80075c8:	d435      	bmi.n	8007636 <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80075ca:	0254      	lsls	r4, r2, #9
 80075cc:	d436      	bmi.n	800763c <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80075ce:	0290      	lsls	r0, r2, #10
 80075d0:	d440      	bmi.n	8007654 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80075d2:	02d1      	lsls	r1, r2, #11
 80075d4:	d43b      	bmi.n	800764e <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80075d6:	0354      	lsls	r4, r2, #13
 80075d8:	d436      	bmi.n	8007648 <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80075da:	0390      	lsls	r0, r2, #14
 80075dc:	d431      	bmi.n	8007642 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80075de:	03d1      	lsls	r1, r2, #15
 80075e0:	d444      	bmi.n	800766c <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80075e2:	0414      	lsls	r4, r2, #16
 80075e4:	d43f      	bmi.n	8007666 <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80075e6:	0450      	lsls	r0, r2, #17
 80075e8:	d43a      	bmi.n	8007660 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80075ea:	0491      	lsls	r1, r2, #18
 80075ec:	d435      	bmi.n	800765a <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80075ee:	f012 0f08 	tst.w	r2, #8
 80075f2:	bf14      	ite	ne
 80075f4:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80075f8:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80075fc:	e7bf      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80075fe:	2201      	movs	r2, #1
 8007600:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007602:	e7bc      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007604:	2301      	movs	r3, #1
 8007606:	e7ba      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007608:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800760a:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800760c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800760e:	e7b6      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007610:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007614:	e7b3      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007616:	2340      	movs	r3, #64	; 0x40
 8007618:	e7b1      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800761a:	2380      	movs	r3, #128	; 0x80
 800761c:	e7af      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800761e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007622:	e7ac      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007624:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007628:	e7a9      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800762a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800762e:	e7a6      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007634:	e7a3      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007636:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800763a:	e7a0      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800763c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007640:	e79d      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007642:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007646:	e79a      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007648:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800764c:	e797      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 800764e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007652:	e794      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007658:	e791      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 800765a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800765e:	e78e      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007660:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007664:	e78b      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800766a:	e788      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800766c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007670:	e785      	b.n	800757e <SDMMC_CmdSendSCR+0x42>
 8007672:	bf00      	nop
 8007674:	2000093c 	.word	0x2000093c
 8007678:	fffee0c0 	.word	0xfffee0c0
 800767c:	10624dd3 	.word	0x10624dd3
 8007680:	00200045 	.word	0x00200045
 8007684:	002000c5 	.word	0x002000c5
 8007688:	fdffe008 	.word	0xfdffe008

0800768c <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800768c:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <SDMMC_CmdSendCID+0x6c>)
{
 800768e:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8007690:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007692:	481a      	ldr	r0, [pc, #104]	; (80076fc <SDMMC_CmdSendCID+0x70>)
{
 8007694:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007696:	4c1a      	ldr	r4, [pc, #104]	; (8007700 <SDMMC_CmdSendCID+0x74>)
 8007698:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800769a:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800769c:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076a0:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076a4:	68cc      	ldr	r4, [r1, #12]
 80076a6:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076a8:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076aa:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80076ac:	f241 3088 	movw	r0, #5000	; 0x1388
 80076b0:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80076b4:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 80076b6:	b14a      	cbz	r2, 80076cc <SDMMC_CmdSendCID+0x40>
 80076b8:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80076ba:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 80076bc:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80076be:	f012 0f45 	tst.w	r2, #69	; 0x45
 80076c2:	d001      	beq.n	80076c8 <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80076c4:	0492      	lsls	r2, r2, #18
 80076c6:	d506      	bpl.n	80076d6 <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 80076c8:	1c58      	adds	r0, r3, #1
 80076ca:	d1f6      	bne.n	80076ba <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80076cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80076d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076d4:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80076d6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80076d8:	075b      	lsls	r3, r3, #29
 80076da:	d409      	bmi.n	80076f0 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80076dc:	6b48      	ldr	r0, [r1, #52]	; 0x34
 80076de:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80076e2:	bf14      	ite	ne
 80076e4:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80076e6:	4b07      	ldreq	r3, [pc, #28]	; (8007704 <SDMMC_CmdSendCID+0x78>)
 80076e8:	638b      	str	r3, [r1, #56]	; 0x38
}
 80076ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ee:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076f0:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076f2:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80076f4:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076f6:	e7eb      	b.n	80076d0 <SDMMC_CmdSendCID+0x44>
 80076f8:	2000093c 	.word	0x2000093c
 80076fc:	fffee0c0 	.word	0xfffee0c0
 8007700:	10624dd3 	.word	0x10624dd3
 8007704:	002000c5 	.word	0x002000c5

08007708 <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007708:	4a1b      	ldr	r2, [pc, #108]	; (8007778 <SDMMC_CmdSendCSD+0x70>)
{
 800770a:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800770c:	4b1b      	ldr	r3, [pc, #108]	; (800777c <SDMMC_CmdSendCSD+0x74>)
 800770e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007710:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007714:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007718:	f8dc 100c 	ldr.w	r1, [ip, #12]
 800771c:	4818      	ldr	r0, [pc, #96]	; (8007780 <SDMMC_CmdSendCSD+0x78>)
 800771e:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007722:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007724:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007726:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800772a:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800772c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007730:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8007734:	1e53      	subs	r3, r2, #1
 8007736:	b14a      	cbz	r2, 800774c <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 8007738:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 800773c:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800773e:	f012 0f45 	tst.w	r2, #69	; 0x45
 8007742:	d001      	beq.n	8007748 <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8007744:	0492      	lsls	r2, r2, #18
 8007746:	d504      	bpl.n	8007752 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 8007748:	1c59      	adds	r1, r3, #1
 800774a:	d1f5      	bne.n	8007738 <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 800774c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8007750:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007752:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8007756:	075b      	lsls	r3, r3, #29
 8007758:	d409      	bmi.n	800776e <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800775a:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 800775e:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007762:	bf14      	ite	ne
 8007764:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007766:	4b07      	ldreq	r3, [pc, #28]	; (8007784 <SDMMC_CmdSendCSD+0x7c>)
 8007768:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 800776c:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800776e:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007770:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007772:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007776:	4770      	bx	lr
 8007778:	2000093c 	.word	0x2000093c
 800777c:	10624dd3 	.word	0x10624dd3
 8007780:	fffee0c0 	.word	0xfffee0c0
 8007784:	002000c5 	.word	0x002000c5

08007788 <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 8007788:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800778a:	4a27      	ldr	r2, [pc, #156]	; (8007828 <SDMMC_CmdSetRelAdd+0xa0>)
{
 800778c:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 800778e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007790:	4c26      	ldr	r4, [pc, #152]	; (800782c <SDMMC_CmdSetRelAdd+0xa4>)
 8007792:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8007794:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007796:	401c      	ands	r4, r3
 8007798:	f241 1303 	movw	r3, #4355	; 0x1103
 800779c:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 800779e:	4c24      	ldr	r4, [pc, #144]	; (8007830 <SDMMC_CmdSetRelAdd+0xa8>)
 80077a0:	fba4 4202 	umull	r4, r2, r4, r2
 80077a4:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80077a8:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80077aa:	0a52      	lsrs	r2, r2, #9
 80077ac:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 80077b0:	b14a      	cbz	r2, 80077c6 <SDMMC_CmdSetRelAdd+0x3e>
 80077b2:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 80077b4:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80077b6:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80077b8:	f012 0f45 	tst.w	r2, #69	; 0x45
 80077bc:	d001      	beq.n	80077c2 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80077be:	0492      	lsls	r2, r2, #18
 80077c0:	d507      	bpl.n	80077d2 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 80077c2:	1c5c      	adds	r4, r3, #1
 80077c4:	d1f6      	bne.n	80077b4 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80077c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80077d0:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80077d2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077d4:	075c      	lsls	r4, r3, #29
 80077d6:	d41c      	bmi.n	8007812 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80077d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80077da:	f013 0301 	ands.w	r3, r3, #1
 80077de:	d113      	bne.n	8007808 <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 80077e0:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80077e2:	b2db      	uxtb	r3, r3
 80077e4:	2b03      	cmp	r3, #3
 80077e6:	d112      	bne.n	800780e <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80077e8:	4b12      	ldr	r3, [pc, #72]	; (8007834 <SDMMC_CmdSetRelAdd+0xac>)
 80077ea:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 80077ec:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 80077ee:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 80077f2:	d015      	beq.n	8007820 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80077f4:	0451      	lsls	r1, r2, #17
 80077f6:	d410      	bmi.n	800781a <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80077f8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 80077fc:	bf14      	ite	ne
 80077fe:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8007802:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007806:	e7e0      	b.n	80077ca <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007808:	2201      	movs	r2, #1
 800780a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800780c:	e7dd      	b.n	80077ca <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800780e:	2301      	movs	r3, #1
 8007810:	e7db      	b.n	80077ca <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007812:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007814:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007816:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007818:	e7d7      	b.n	80077ca <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 800781a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800781e:	e7d4      	b.n	80077ca <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8007820:	0c12      	lsrs	r2, r2, #16
 8007822:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8007824:	e7d1      	b.n	80077ca <SDMMC_CmdSetRelAdd+0x42>
 8007826:	bf00      	nop
 8007828:	2000093c 	.word	0x2000093c
 800782c:	fffee0c0 	.word	0xfffee0c0
 8007830:	10624dd3 	.word	0x10624dd3
 8007834:	002000c5 	.word	0x002000c5

08007838 <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007838:	4a4c      	ldr	r2, [pc, #304]	; (800796c <SDMMC_CmdSendStatus+0x134>)
 800783a:	4b4d      	ldr	r3, [pc, #308]	; (8007970 <SDMMC_CmdSendStatus+0x138>)
{
 800783c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800783e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007840:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007842:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007846:	68c1      	ldr	r1, [r0, #12]
 8007848:	4c4a      	ldr	r4, [pc, #296]	; (8007974 <SDMMC_CmdSendStatus+0x13c>)
 800784a:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800784e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007850:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007852:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007856:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007858:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800785c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 800785e:	b14a      	cbz	r2, 8007874 <SDMMC_CmdSendStatus+0x3c>
 8007860:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007862:	4945      	ldr	r1, [pc, #276]	; (8007978 <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 8007864:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007866:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007868:	420a      	tst	r2, r1
 800786a:	d001      	beq.n	8007870 <SDMMC_CmdSendStatus+0x38>
 800786c:	0492      	lsls	r2, r2, #18
 800786e:	d507      	bpl.n	8007880 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 8007870:	1c5c      	adds	r4, r3, #1
 8007872:	d1f7      	bne.n	8007864 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8007874:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007878:	4618      	mov	r0, r3
 800787a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800787e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007880:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007882:	075c      	lsls	r4, r3, #29
 8007884:	d43d      	bmi.n	8007902 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007886:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007888:	f013 0301 	ands.w	r3, r3, #1
 800788c:	d134      	bne.n	80078f8 <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800788e:	4b3b      	ldr	r3, [pc, #236]	; (800797c <SDMMC_CmdSendStatus+0x144>)
 8007890:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007892:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b0d      	cmp	r3, #13
 8007898:	d131      	bne.n	80078fe <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 800789a:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800789c:	4b38      	ldr	r3, [pc, #224]	; (8007980 <SDMMC_CmdSendStatus+0x148>)
 800789e:	4013      	ands	r3, r2
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d0e9      	beq.n	8007878 <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80078a4:	2a00      	cmp	r2, #0
 80078a6:	db30      	blt.n	800790a <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80078a8:	0051      	lsls	r1, r2, #1
 80078aa:	d431      	bmi.n	8007910 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80078ac:	0094      	lsls	r4, r2, #2
 80078ae:	d431      	bmi.n	8007914 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80078b0:	00d0      	lsls	r0, r2, #3
 80078b2:	d431      	bmi.n	8007918 <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80078b4:	0111      	lsls	r1, r2, #4
 80078b6:	d432      	bmi.n	800791e <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80078b8:	0154      	lsls	r4, r2, #5
 80078ba:	d433      	bmi.n	8007924 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80078bc:	01d0      	lsls	r0, r2, #7
 80078be:	d434      	bmi.n	800792a <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80078c0:	0211      	lsls	r1, r2, #8
 80078c2:	d435      	bmi.n	8007930 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80078c4:	0254      	lsls	r4, r2, #9
 80078c6:	d436      	bmi.n	8007936 <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80078c8:	0290      	lsls	r0, r2, #10
 80078ca:	d440      	bmi.n	800794e <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80078cc:	02d1      	lsls	r1, r2, #11
 80078ce:	d43b      	bmi.n	8007948 <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80078d0:	0354      	lsls	r4, r2, #13
 80078d2:	d436      	bmi.n	8007942 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80078d4:	0390      	lsls	r0, r2, #14
 80078d6:	d431      	bmi.n	800793c <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80078d8:	03d1      	lsls	r1, r2, #15
 80078da:	d444      	bmi.n	8007966 <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80078dc:	0414      	lsls	r4, r2, #16
 80078de:	d43f      	bmi.n	8007960 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80078e0:	0450      	lsls	r0, r2, #17
 80078e2:	d43a      	bmi.n	800795a <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80078e4:	0491      	lsls	r1, r2, #18
 80078e6:	d435      	bmi.n	8007954 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80078e8:	f012 0f08 	tst.w	r2, #8
 80078ec:	bf14      	ite	ne
 80078ee:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80078f2:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80078f6:	e7bf      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80078f8:	2201      	movs	r2, #1
 80078fa:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078fc:	e7bc      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078fe:	2301      	movs	r3, #1
 8007900:	e7ba      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007902:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007904:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007906:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007908:	e7b6      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800790a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800790e:	e7b3      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007910:	2340      	movs	r3, #64	; 0x40
 8007912:	e7b1      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007914:	2380      	movs	r3, #128	; 0x80
 8007916:	e7af      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800791c:	e7ac      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800791e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007922:	e7a9      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007928:	e7a6      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800792a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800792e:	e7a3      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007930:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007934:	e7a0      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007936:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800793a:	e79d      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800793c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007940:	e79a      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007942:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007946:	e797      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 8007948:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800794c:	e794      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800794e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007952:	e791      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8007954:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007958:	e78e      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800795a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800795e:	e78b      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007960:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007964:	e788      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007966:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800796a:	e785      	b.n	8007878 <SDMMC_CmdSendStatus+0x40>
 800796c:	2000093c 	.word	0x2000093c
 8007970:	10624dd3 	.word	0x10624dd3
 8007974:	fffee0c0 	.word	0xfffee0c0
 8007978:	00200045 	.word	0x00200045
 800797c:	002000c5 	.word	0x002000c5
 8007980:	fdffe008 	.word	0xfdffe008

08007984 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007984:	4a4d      	ldr	r2, [pc, #308]	; (8007abc <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 8007986:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007988:	494d      	ldr	r1, [pc, #308]	; (8007ac0 <SDMMC_CmdStatusRegister+0x13c>)
{
 800798a:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800798c:	4c4d      	ldr	r4, [pc, #308]	; (8007ac4 <SDMMC_CmdStatusRegister+0x140>)
 800798e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007990:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007992:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007996:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800799a:	68c4      	ldr	r4, [r0, #12]
 800799c:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800799e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079a0:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80079a2:	f241 3188 	movw	r1, #5000	; 0x1388
 80079a6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80079aa:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80079ac:	b14a      	cbz	r2, 80079c2 <SDMMC_CmdStatusRegister+0x3e>
 80079ae:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80079b0:	4945      	ldr	r1, [pc, #276]	; (8007ac8 <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 80079b2:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80079b4:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80079b6:	420a      	tst	r2, r1
 80079b8:	d001      	beq.n	80079be <SDMMC_CmdStatusRegister+0x3a>
 80079ba:	0492      	lsls	r2, r2, #18
 80079bc:	d507      	bpl.n	80079ce <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 80079be:	1c5c      	adds	r4, r3, #1
 80079c0:	d1f7      	bne.n	80079b2 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 80079c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079cc:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80079ce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079d0:	075c      	lsls	r4, r3, #29
 80079d2:	d43d      	bmi.n	8007a50 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80079d4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80079d6:	f013 0301 	ands.w	r3, r3, #1
 80079da:	d134      	bne.n	8007a46 <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80079dc:	4b3b      	ldr	r3, [pc, #236]	; (8007acc <SDMMC_CmdStatusRegister+0x148>)
 80079de:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80079e0:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b0d      	cmp	r3, #13
 80079e6:	d131      	bne.n	8007a4c <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 80079e8:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80079ea:	4b39      	ldr	r3, [pc, #228]	; (8007ad0 <SDMMC_CmdStatusRegister+0x14c>)
 80079ec:	4013      	ands	r3, r2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0e9      	beq.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80079f2:	2a00      	cmp	r2, #0
 80079f4:	db30      	blt.n	8007a58 <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80079f6:	0051      	lsls	r1, r2, #1
 80079f8:	d431      	bmi.n	8007a5e <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80079fa:	0094      	lsls	r4, r2, #2
 80079fc:	d431      	bmi.n	8007a62 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80079fe:	00d0      	lsls	r0, r2, #3
 8007a00:	d431      	bmi.n	8007a66 <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007a02:	0111      	lsls	r1, r2, #4
 8007a04:	d432      	bmi.n	8007a6c <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007a06:	0154      	lsls	r4, r2, #5
 8007a08:	d433      	bmi.n	8007a72 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007a0a:	01d0      	lsls	r0, r2, #7
 8007a0c:	d434      	bmi.n	8007a78 <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007a0e:	0211      	lsls	r1, r2, #8
 8007a10:	d435      	bmi.n	8007a7e <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007a12:	0254      	lsls	r4, r2, #9
 8007a14:	d436      	bmi.n	8007a84 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007a16:	0290      	lsls	r0, r2, #10
 8007a18:	d440      	bmi.n	8007a9c <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007a1a:	02d1      	lsls	r1, r2, #11
 8007a1c:	d43b      	bmi.n	8007a96 <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007a1e:	0354      	lsls	r4, r2, #13
 8007a20:	d436      	bmi.n	8007a90 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007a22:	0390      	lsls	r0, r2, #14
 8007a24:	d431      	bmi.n	8007a8a <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007a26:	03d1      	lsls	r1, r2, #15
 8007a28:	d444      	bmi.n	8007ab4 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007a2a:	0414      	lsls	r4, r2, #16
 8007a2c:	d43f      	bmi.n	8007aae <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007a2e:	0450      	lsls	r0, r2, #17
 8007a30:	d43a      	bmi.n	8007aa8 <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007a32:	0491      	lsls	r1, r2, #18
 8007a34:	d435      	bmi.n	8007aa2 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a36:	f012 0f08 	tst.w	r2, #8
 8007a3a:	bf14      	ite	ne
 8007a3c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007a40:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007a44:	e7bf      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007a46:	2201      	movs	r2, #1
 8007a48:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a4a:	e7bc      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e7ba      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a50:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a52:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007a54:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007a56:	e7b6      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a5c:	e7b3      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007a5e:	2340      	movs	r3, #64	; 0x40
 8007a60:	e7b1      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007a62:	2380      	movs	r3, #128	; 0x80
 8007a64:	e7af      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007a6a:	e7ac      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a70:	e7a9      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007a72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a76:	e7a6      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007a78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a7c:	e7a3      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a82:	e7a0      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a88:	e79d      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007a8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007a8e:	e79a      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007a90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007a94:	e797      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 8007a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9a:	e794      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007a9c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007aa0:	e791      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8007aa2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007aa6:	e78e      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007aa8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007aac:	e78b      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007aae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007ab2:	e788      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007ab8:	e785      	b.n	80079c6 <SDMMC_CmdStatusRegister+0x42>
 8007aba:	bf00      	nop
 8007abc:	2000093c 	.word	0x2000093c
 8007ac0:	fffee0c0 	.word	0xfffee0c0
 8007ac4:	10624dd3 	.word	0x10624dd3
 8007ac8:	00200045 	.word	0x00200045
 8007acc:	002000c5 	.word	0x002000c5
 8007ad0:	fdffe008 	.word	0xfdffe008

08007ad4 <SDMMC_CmdVoltageSwitch>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007ad4:	4a4d      	ldr	r2, [pc, #308]	; (8007c0c <SDMMC_CmdVoltageSwitch+0x138>)
  SDMMCx->ARG = Command->Argument;
 8007ad6:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007ad8:	494d      	ldr	r1, [pc, #308]	; (8007c10 <SDMMC_CmdVoltageSwitch+0x13c>)
{
 8007ada:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007adc:	4c4d      	ldr	r4, [pc, #308]	; (8007c14 <SDMMC_CmdVoltageSwitch+0x140>)
 8007ade:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8007ae0:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007ae2:	f241 130b 	movw	r3, #4363	; 0x110b
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007ae6:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007aea:	68c4      	ldr	r4, [r0, #12]
 8007aec:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007aee:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007af0:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8007af2:	f241 3188 	movw	r1, #5000	; 0x1388
 8007af6:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8007afa:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8007afc:	b14a      	cbz	r2, 8007b12 <SDMMC_CmdVoltageSwitch+0x3e>
 8007afe:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8007b00:	4945      	ldr	r1, [pc, #276]	; (8007c18 <SDMMC_CmdVoltageSwitch+0x144>)
    sta_reg = SDMMCx->STA;
 8007b02:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8007b04:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8007b06:	420a      	tst	r2, r1
 8007b08:	d001      	beq.n	8007b0e <SDMMC_CmdVoltageSwitch+0x3a>
 8007b0a:	0492      	lsls	r2, r2, #18
 8007b0c:	d507      	bpl.n	8007b1e <SDMMC_CmdVoltageSwitch+0x4a>
    if (count-- == 0U)
 8007b0e:	1c5c      	adds	r4, r3, #1
 8007b10:	d1f7      	bne.n	8007b02 <SDMMC_CmdVoltageSwitch+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8007b12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b1c:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8007b1e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b20:	075c      	lsls	r4, r3, #29
 8007b22:	d43d      	bmi.n	8007ba0 <SDMMC_CmdVoltageSwitch+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8007b24:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007b26:	f013 0301 	ands.w	r3, r3, #1
 8007b2a:	d134      	bne.n	8007b96 <SDMMC_CmdVoltageSwitch+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8007b2c:	4b3b      	ldr	r3, [pc, #236]	; (8007c1c <SDMMC_CmdVoltageSwitch+0x148>)
 8007b2e:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8007b30:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	2b0b      	cmp	r3, #11
 8007b36:	d131      	bne.n	8007b9c <SDMMC_CmdVoltageSwitch+0xc8>
  return (*(__IO uint32_t *) tmp);
 8007b38:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007b3a:	4b39      	ldr	r3, [pc, #228]	; (8007c20 <SDMMC_CmdVoltageSwitch+0x14c>)
 8007b3c:	4013      	ands	r3, r2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0e9      	beq.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007b42:	2a00      	cmp	r2, #0
 8007b44:	db30      	blt.n	8007ba8 <SDMMC_CmdVoltageSwitch+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007b46:	0051      	lsls	r1, r2, #1
 8007b48:	d431      	bmi.n	8007bae <SDMMC_CmdVoltageSwitch+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007b4a:	0094      	lsls	r4, r2, #2
 8007b4c:	d431      	bmi.n	8007bb2 <SDMMC_CmdVoltageSwitch+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007b4e:	00d0      	lsls	r0, r2, #3
 8007b50:	d431      	bmi.n	8007bb6 <SDMMC_CmdVoltageSwitch+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007b52:	0111      	lsls	r1, r2, #4
 8007b54:	d432      	bmi.n	8007bbc <SDMMC_CmdVoltageSwitch+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007b56:	0154      	lsls	r4, r2, #5
 8007b58:	d433      	bmi.n	8007bc2 <SDMMC_CmdVoltageSwitch+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007b5a:	01d0      	lsls	r0, r2, #7
 8007b5c:	d434      	bmi.n	8007bc8 <SDMMC_CmdVoltageSwitch+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007b5e:	0211      	lsls	r1, r2, #8
 8007b60:	d435      	bmi.n	8007bce <SDMMC_CmdVoltageSwitch+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007b62:	0254      	lsls	r4, r2, #9
 8007b64:	d436      	bmi.n	8007bd4 <SDMMC_CmdVoltageSwitch+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8007b66:	0290      	lsls	r0, r2, #10
 8007b68:	d440      	bmi.n	8007bec <SDMMC_CmdVoltageSwitch+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8007b6a:	02d1      	lsls	r1, r2, #11
 8007b6c:	d43b      	bmi.n	8007be6 <SDMMC_CmdVoltageSwitch+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8007b6e:	0354      	lsls	r4, r2, #13
 8007b70:	d436      	bmi.n	8007be0 <SDMMC_CmdVoltageSwitch+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8007b72:	0390      	lsls	r0, r2, #14
 8007b74:	d431      	bmi.n	8007bda <SDMMC_CmdVoltageSwitch+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8007b76:	03d1      	lsls	r1, r2, #15
 8007b78:	d444      	bmi.n	8007c04 <SDMMC_CmdVoltageSwitch+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8007b7a:	0414      	lsls	r4, r2, #16
 8007b7c:	d43f      	bmi.n	8007bfe <SDMMC_CmdVoltageSwitch+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007b7e:	0450      	lsls	r0, r2, #17
 8007b80:	d43a      	bmi.n	8007bf8 <SDMMC_CmdVoltageSwitch+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007b82:	0491      	lsls	r1, r2, #18
 8007b84:	d435      	bmi.n	8007bf2 <SDMMC_CmdVoltageSwitch+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007b86:	f012 0f08 	tst.w	r2, #8
 8007b8a:	bf14      	ite	ne
 8007b8c:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8007b90:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8007b94:	e7bf      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8007b96:	2201      	movs	r2, #1
 8007b98:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b9a:	e7bc      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e7ba      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ba0:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ba2:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8007ba4:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007ba6:	e7b6      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007ba8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bac:	e7b3      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007bae:	2340      	movs	r3, #64	; 0x40
 8007bb0:	e7b1      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8007bb2:	2380      	movs	r3, #128	; 0x80
 8007bb4:	e7af      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007bb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bba:	e7ac      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007bbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc0:	e7a9      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007bc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bc6:	e7a6      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8007bc8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007bcc:	e7a3      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007bd2:	e7a0      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007bd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bd8:	e79d      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007bda:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007bde:	e79a      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8007be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007be4:	e797      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CC_ERR;
 8007be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bea:	e794      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8007bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bf0:	e791      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8007bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007bf6:	e78e      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007bf8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007bfc:	e78b      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007bfe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007c02:	e788      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007c04:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8007c08:	e785      	b.n	8007b16 <SDMMC_CmdVoltageSwitch+0x42>
 8007c0a:	bf00      	nop
 8007c0c:	2000093c 	.word	0x2000093c
 8007c10:	fffee0c0 	.word	0xfffee0c0
 8007c14:	10624dd3 	.word	0x10624dd3
 8007c18:	00200045 	.word	0x00200045
 8007c1c:	002000c5 	.word	0x002000c5
 8007c20:	fdffe008 	.word	0xfdffe008

08007c24 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8007c24:	4b10      	ldr	r3, [pc, #64]	; (8007c68 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007c26:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 8007c28:	7a5c      	ldrb	r4, [r3, #9]
 8007c2a:	b9cc      	cbnz	r4, 8007c60 <FATFS_LinkDriver+0x3c>
 8007c2c:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 8007c2e:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 8007c32:	7a5c      	ldrb	r4, [r3, #9]
 8007c34:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 8007c36:	7a5c      	ldrb	r4, [r3, #9]
 8007c38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007c3c:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 8007c3e:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 8007c40:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 8007c42:	441c      	add	r4, r3
 8007c44:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 8007c46:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 8007c48:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8007c4a:	b2e4      	uxtb	r4, r4
 8007c4c:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 8007c4e:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 8007c50:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 8007c52:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 8007c54:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 8007c56:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 8007c58:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 8007c5c:	708b      	strb	r3, [r1, #2]
}
 8007c5e:	4770      	bx	lr
  uint8_t ret = 1;
 8007c60:	2001      	movs	r0, #1
}
 8007c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007c66:	4770      	bx	lr
 8007c68:	200009c8 	.word	0x200009c8
 8007c6c:	00000000 	.word	0x00000000

08007c70 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007c74:	4ced      	ldr	r4, [pc, #948]	; (800802c <audioInit+0x3bc>)
{
 8007c76:	4605      	mov	r5, r0
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007c78:	ed9f 0aed 	vldr	s0, [pc, #948]	; 8008030 <audioInit+0x3c0>
 8007c7c:	4620      	mov	r0, r4
 8007c7e:	4bed      	ldr	r3, [pc, #948]	; (8008034 <audioInit+0x3c4>)
 8007c80:	4fed      	ldr	r7, [pc, #948]	; (8008038 <audioInit+0x3c8>)
{
 8007c82:	ed2d 8b10 	vpush	{d8-d15}
 8007c86:	b08b      	sub	sp, #44	; 0x2c
 8007c88:	e9cd 5107 	strd	r5, r1, [sp, #28]
 8007c8c:	9209      	str	r2, [sp, #36]	; 0x24
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8007c8e:	49eb      	ldr	r1, [pc, #940]	; (800803c <audioInit+0x3cc>)
 8007c90:	4aeb      	ldr	r2, [pc, #940]	; (8008040 <audioInit+0x3d0>)
 8007c92:	f004 f8dd 	bl	800be50 <LEAF_init>

	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8007c96:	4623      	mov	r3, r4
 8007c98:	4aea      	ldr	r2, [pc, #936]	; (8008044 <audioInit+0x3d4>)
 8007c9a:	49eb      	ldr	r1, [pc, #940]	; (8008048 <audioInit+0x3d8>)
 8007c9c:	48eb      	ldr	r0, [pc, #940]	; (800804c <audioInit+0x3dc>)
 8007c9e:	f003 ffdd 	bl	800bc5c <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8007ca2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007ca6:	4623      	mov	r3, r4
 8007ca8:	49e9      	ldr	r1, [pc, #932]	; (8008050 <audioInit+0x3e0>)
 8007caa:	48ea      	ldr	r0, [pc, #936]	; (8008054 <audioInit+0x3e4>)
 8007cac:	f003 ffd6 	bl	800bc5c <tMempool_init>

	leaf.clearOnAllocation = 1;
 8007cb0:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8007cb2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8007cb6:	eddf 1ae8 	vldr	s3, [pc, #928]	; 8008058 <audioInit+0x3e8>
 8007cba:	eddf 0ae8 	vldr	s1, [pc, #928]	; 800805c <audioInit+0x3ec>
 8007cbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007cc2:	ed9f 0ae7 	vldr	s0, [pc, #924]	; 8008060 <audioInit+0x3f0>
 8007cc6:	48e7      	ldr	r0, [pc, #924]	; (8008064 <audioInit+0x3f4>)
	leaf.clearOnAllocation = 1;
 8007cc8:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 8007cca:	f003 fedf 	bl	800ba8c <LEAF_generate_exp>

	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8007cce:	2102      	movs	r1, #2
 8007cd0:	48e5      	ldr	r0, [pc, #916]	; (8008068 <audioInit+0x3f8>)
 8007cd2:	f7fa f947 	bl	8001f64 <HAL_GPIO_ReadPin>
 8007cd6:	4604      	mov	r4, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8007cd8:	2120      	movs	r1, #32
 8007cda:	48e4      	ldr	r0, [pc, #912]	; (800806c <audioInit+0x3fc>)
 8007cdc:	f7fa f942 	bl	8001f64 <HAL_GPIO_ReadPin>

	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8007ce0:	4ae3      	ldr	r2, [pc, #908]	; (8008070 <audioInit+0x400>)
 8007ce2:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 8007ce6:	4ce3      	ldr	r4, [pc, #908]	; (8008074 <audioInit+0x404>)

	invNumOvertones = 1.0f / NUM_OVERTONES;
 8007ce8:	4be3      	ldr	r3, [pc, #908]	; (8008078 <audioInit+0x408>)
	firstString = (bit0+(bit1 << 1)) * NUM_STRINGS_PER_BOARD;
 8007cea:	0080      	lsls	r0, r0, #2
 8007cec:	4626      	mov	r6, r4
 8007cee:	f104 0824 	add.w	r8, r4, #36	; 0x24
 8007cf2:	6010      	str	r0, [r2, #0]
	invNumOvertones = 1.0f / NUM_OVERTONES;
 8007cf4:	4ae1      	ldr	r2, [pc, #900]	; (800807c <audioInit+0x40c>)
 8007cf6:	601a      	str	r2, [r3, #0]
{
 8007cf8:	46ba      	mov	sl, r7
 8007cfa:	46b1      	mov	r9, r6


	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
 8007cfc:	2500      	movs	r5, #0
 8007cfe:	3501      	adds	r5, #1
		{
			stringFundamentalsMIDI[i][j] = LEAF_frequencyToMidi(stringFundamentals[i][j]);
 8007d00:	ecb9 0a01 	vldmia	r9!, {s0}
 8007d04:	f003 fe9a 	bl	800ba3c <LEAF_frequencyToMidi>
 8007d08:	ecaa 0a01 	vstmia	sl!, {s0}
		for (int j = 0; j < 3; j++)
 8007d0c:	2d03      	cmp	r5, #3
 8007d0e:	d1f6      	bne.n	8007cfe <audioInit+0x8e>
	for (int i = 0; i < 3; i++)
 8007d10:	360c      	adds	r6, #12
 8007d12:	370c      	adds	r7, #12
 8007d14:	4546      	cmp	r6, r8
 8007d16:	d1ef      	bne.n	8007cf8 <audioInit+0x88>
	}


	for (int i = 0; i < NUM_OVERTONES; i++)
	{
		totalGain[0] += partials[i];
 8007d18:	4ad9      	ldr	r2, [pc, #868]	; (8008080 <audioInit+0x410>)

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8007d1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		totalGain[0] += partials[i];
 8007d1e:	4dd9      	ldr	r5, [pc, #868]	; (8008084 <audioInit+0x414>)
 8007d20:	ed92 0a00 	vldr	s0, [r2]
 8007d24:	edd5 7a00 	vldr	s15, [r5]
 8007d28:	edd2 0a01 	vldr	s1, [r2, #4]
 8007d2c:	ee77 7a80 	vadd.f32	s15, s15, s0
 8007d30:	ed92 1a02 	vldr	s2, [r2, #8]
 8007d34:	ed92 2a03 	vldr	s4, [r2, #12]
 8007d38:	edd2 2a04 	vldr	s5, [r2, #16]
 8007d3c:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007d40:	edd2 3a05 	vldr	s7, [r2, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d44:	4bd0      	ldr	r3, [pc, #832]	; (8008088 <audioInit+0x418>)
 8007d46:	48d1      	ldr	r0, [pc, #836]	; (800808c <audioInit+0x41c>)
		totalGain[0] += partials[i];
 8007d48:	ee77 7a81 	vadd.f32	s15, s15, s2
 8007d4c:	ed92 4a06 	vldr	s8, [r2, #24]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d50:	edd3 4a00 	vldr	s9, [r3]
 8007d54:	ed90 3a00 	vldr	s6, [r0]
		totalGain[0] += partials[i];
 8007d58:	ee77 7a82 	vadd.f32	s15, s15, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d5c:	ed93 5a01 	vldr	s10, [r3, #4]
 8007d60:	ee33 3a24 	vadd.f32	s6, s6, s9
		totalGain[0] += partials[i];
 8007d64:	edd2 4a07 	vldr	s9, [r2, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d68:	edd3 5a02 	vldr	s11, [r3, #8]
		totalGain[0] += partials[i];
 8007d6c:	ee77 7aa2 	vadd.f32	s15, s15, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d70:	ed93 6a03 	vldr	s12, [r3, #12]
 8007d74:	ee33 3a05 	vadd.f32	s6, s6, s10
		totalGain[0] += partials[i];
 8007d78:	ed92 5a08 	vldr	s10, [r2, #32]
		totalGain[1] += partialsHigh[i];
 8007d7c:	49c4      	ldr	r1, [pc, #784]	; (8008090 <audioInit+0x420>)
		totalGain[0] += partials[i];
 8007d7e:	ee77 7aa3 	vadd.f32	s15, s15, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d82:	ed93 7a04 	vldr	s14, [r3, #16]
 8007d86:	ee33 3a25 	vadd.f32	s6, s6, s11
		totalGain[0] += partials[i];
 8007d8a:	edd2 5a09 	vldr	s11, [r2, #36]	; 0x24
		totalGain[1] += partialsHigh[i];
 8007d8e:	edd5 1a01 	vldr	s3, [r5, #4]
		totalGain[0] += partials[i];
 8007d92:	ee77 7a84 	vadd.f32	s15, s15, s8
		totalGain[1] += partialsHigh[i];
 8007d96:	edd1 3a00 	vldr	s7, [r1]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007d9a:	ee33 3a06 	vadd.f32	s6, s6, s12
		totalGain[0] += partials[i];
 8007d9e:	ed92 6a0a 	vldr	s12, [r2, #40]	; 0x28
		totalGain[1] += partialsHigh[i];
 8007da2:	edd1 0a03 	vldr	s1, [r1, #12]
 8007da6:	ee71 1aa3 	vadd.f32	s3, s3, s7
		totalGain[0] += partials[i];
 8007daa:	ee77 7aa4 	vadd.f32	s15, s15, s9
		totalGain[1] += partialsHigh[i];
 8007dae:	ed91 4a04 	vldr	s8, [r1, #16]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007db2:	ee33 3a07 	vadd.f32	s6, s6, s14
		totalGain[0] += partials[i];
 8007db6:	ed92 7a0b 	vldr	s14, [r2, #44]	; 0x2c
		totalGain[1] += partialsHigh[i];
 8007dba:	edd1 4a02 	vldr	s9, [r1, #8]
		totalGain[0] += partials[i];
 8007dbe:	ee77 7a85 	vadd.f32	s15, s15, s10
		totalGain[1] += partialsHigh[i];
 8007dc2:	ed91 1a05 	vldr	s2, [r1, #20]
 8007dc6:	ed91 2a06 	vldr	s4, [r1, #24]
 8007dca:	ed91 0a07 	vldr	s0, [r1, #28]
		totalGain[0] += partials[i];
 8007dce:	ee77 7aa5 	vadd.f32	s15, s15, s11
		totalGain[1] += partialsHigh[i];
 8007dd2:	edd1 2a08 	vldr	s5, [r1, #32]
 8007dd6:	edd1 5a01 	vldr	s11, [r1, #4]
 8007dda:	ed91 5a09 	vldr	s10, [r1, #36]	; 0x24
		totalGain[0] += partials[i];
 8007dde:	ee77 7a86 	vadd.f32	s15, s15, s12
		totalGain[1] += partialsHigh[i];
 8007de2:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8007de6:	ee71 1aa5 	vadd.f32	s3, s3, s11
		totalGain[0] += partials[i];
 8007dea:	ee77 7a87 	vadd.f32	s15, s15, s14
		totalGain[1] += partialsHigh[i];
 8007dee:	ed91 7a0b 	vldr	s14, [r1, #44]	; 0x2c
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007df2:	edd3 3a05 	vldr	s7, [r3, #20]
		totalGain[1] += partialsHigh[i];
 8007df6:	ee71 1aa4 	vadd.f32	s3, s3, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007dfa:	edd3 5a06 	vldr	s11, [r3, #24]
 8007dfe:	ee33 3a23 	vadd.f32	s6, s6, s7
 8007e02:	edd3 3a07 	vldr	s7, [r3, #28]
		totalGain[1] += partialsHigh[i];
 8007e06:	ee71 1aa0 	vadd.f32	s3, s3, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e0a:	edd3 4a09 	vldr	s9, [r3, #36]	; 0x24
 8007e0e:	ed93 8a13 	vldr	s16, [r3, #76]	; 0x4c
 8007e12:	ee33 3a25 	vadd.f32	s6, s6, s11
 8007e16:	edd3 5a08 	vldr	s11, [r3, #32]
		totalGain[1] += partialsHigh[i];
 8007e1a:	ee71 1a84 	vadd.f32	s3, s3, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e1e:	ed93 4a0a 	vldr	s8, [r3, #40]	; 0x28
 8007e22:	edd3 0a0b 	vldr	s1, [r3, #44]	; 0x2c
 8007e26:	ee33 3a23 	vadd.f32	s6, s6, s7
 8007e2a:	edd0 3a01 	vldr	s7, [r0, #4]
		totalGain[1] += partialsHigh[i];
 8007e2e:	ee71 1a81 	vadd.f32	s3, s3, s2
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e32:	ed93 1a0e 	vldr	s2, [r3, #56]	; 0x38
 8007e36:	ee33 3a25 	vadd.f32	s6, s6, s11
 8007e3a:	edd3 5a0c 	vldr	s11, [r3, #48]	; 0x30
		totalGain[1] += partialsHigh[i];
 8007e3e:	ee71 1a82 	vadd.f32	s3, s3, s4
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e42:	ed93 2a12 	vldr	s4, [r3, #72]	; 0x48
 8007e46:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8007e4a:	edd3 5a0f 	vldr	s11, [r3, #60]	; 0x3c
 8007e4e:	ee33 3a24 	vadd.f32	s6, s6, s9
 8007e52:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
		totalGain[1] += partialsHigh[i];
 8007e56:	ee71 1a80 	vadd.f32	s3, s3, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e5a:	ed93 0a1a 	vldr	s0, [r3, #104]	; 0x68
 8007e5e:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8007e62:	edd3 4a11 	vldr	s9, [r3, #68]	; 0x44
 8007e66:	ee33 3a04 	vadd.f32	s6, s6, s8
 8007e6a:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
		totalGain[1] += partialsHigh[i];
 8007e6e:	ee71 1aa2 	vadd.f32	s3, s3, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e72:	edd3 2a14 	vldr	s5, [r3, #80]	; 0x50
 8007e76:	ee73 3a81 	vadd.f32	s7, s7, s2
 8007e7a:	ed93 1a16 	vldr	s2, [r3, #88]	; 0x58
 8007e7e:	ee33 3a20 	vadd.f32	s6, s6, s1
 8007e82:	edd3 0a15 	vldr	s1, [r3, #84]	; 0x54
		totalGain[1] += partialsHigh[i];
 8007e86:	ee71 1a85 	vadd.f32	s3, s3, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e8a:	ed93 5a18 	vldr	s10, [r3, #96]	; 0x60
 8007e8e:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8007e92:	edd3 5a17 	vldr	s11, [r3, #92]	; 0x5c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8007e96:	ee86 aa83 	vdiv.f32	s20, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007e9a:	ee73 3a84 	vadd.f32	s7, s7, s8
 8007e9e:	ed90 4a02 	vldr	s8, [r0, #8]
		totalGain[1] += partialsHigh[i];
 8007ea2:	ee71 1a86 	vadd.f32	s3, s3, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007ea6:	ed93 6a1e 	vldr	s12, [r3, #120]	; 0x78
 8007eaa:	ee34 4a05 	vadd.f32	s8, s8, s10
 8007eae:	ed93 5a1b 	vldr	s10, [r3, #108]	; 0x6c
 8007eb2:	ee73 3aa4 	vadd.f32	s7, s7, s9
 8007eb6:	edd3 4a19 	vldr	s9, [r3, #100]	; 0x64
		totalGain[1] += partialsHigh[i];
 8007eba:	ee71 1a87 	vadd.f32	s3, s3, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007ebe:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
 8007ec2:	ee34 4a24 	vadd.f32	s8, s8, s9
 8007ec6:	edd3 4a1c 	vldr	s9, [r3, #112]	; 0x70
 8007eca:	ee73 3a82 	vadd.f32	s7, s7, s4
 8007ece:	ed93 2a1d 	vldr	s4, [r3, #116]	; 0x74
 8007ed2:	ee34 4a00 	vadd.f32	s8, s8, s0
 8007ed6:	ed93 0a21 	vldr	s0, [r3, #132]	; 0x84
 8007eda:	ee73 3a88 	vadd.f32	s7, s7, s16
 8007ede:	ee34 4a05 	vadd.f32	s8, s8, s10
 8007ee2:	ed93 5a22 	vldr	s10, [r3, #136]	; 0x88
 8007ee6:	ee73 3aa2 	vadd.f32	s7, s7, s5
 8007eea:	edd3 2a20 	vldr	s5, [r3, #128]	; 0x80
 8007eee:	ee34 4a24 	vadd.f32	s8, s8, s9
 8007ef2:	ee73 3aa0 	vadd.f32	s7, s7, s1
 8007ef6:	edd3 0a23 	vldr	s1, [r3, #140]	; 0x8c
 8007efa:	edd0 4a03 	vldr	s9, [r0, #12]
 8007efe:	ee34 4a02 	vadd.f32	s8, s8, s4
 8007f02:	ed93 2a27 	vldr	s4, [r3, #156]	; 0x9c
 8007f06:	ee73 3a81 	vadd.f32	s7, s7, s2
 8007f0a:	ed93 1a25 	vldr	s2, [r3, #148]	; 0x94
 8007f0e:	ee34 4a06 	vadd.f32	s8, s8, s12
 8007f12:	ed93 6a26 	vldr	s12, [r3, #152]	; 0x98
 8007f16:	ee73 3aa5 	vadd.f32	s7, s7, s11
 8007f1a:	edd3 5a24 	vldr	s11, [r3, #144]	; 0x90
 8007f1e:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8007f22:	edd3 5a28 	vldr	s11, [r3, #160]	; 0xa0
 8007f26:	ee34 4a07 	vadd.f32	s8, s8, s14
 8007f2a:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8007f2e:	eec6 9aa3 	vdiv.f32	s19, s13, s7
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007f32:	ee74 4a81 	vadd.f32	s9, s9, s2
 8007f36:	ed93 1a2b 	vldr	s2, [r3, #172]	; 0xac
 8007f3a:	ee34 4a22 	vadd.f32	s8, s8, s5
 8007f3e:	edd3 2a2a 	vldr	s5, [r3, #168]	; 0xa8
 8007f42:	ee74 4a86 	vadd.f32	s9, s9, s12
 8007f46:	ed93 6a2c 	vldr	s12, [r3, #176]	; 0xb0
 8007f4a:	ee34 4a00 	vadd.f32	s8, s8, s0
 8007f4e:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
 8007f52:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007f56:	ed93 2a2f 	vldr	s4, [r3, #188]	; 0xbc
 8007f5a:	ee34 4a05 	vadd.f32	s8, s8, s10
 8007f5e:	ed90 5a04 	vldr	s10, [r0, #16]
 8007f62:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8007f66:	edd3 5a2e 	vldr	s11, [r3, #184]	; 0xb8
 8007f6a:	ee34 4a20 	vadd.f32	s8, s8, s1
 8007f6e:	edd3 0a30 	vldr	s1, [r3, #192]	; 0xc0
 8007f72:	ee74 4a87 	vadd.f32	s9, s9, s14
 8007f76:	ed93 7a31 	vldr	s14, [r3, #196]	; 0xc4
 8007f7a:	ee35 5a20 	vadd.f32	s10, s10, s1
 8007f7e:	edd3 0a34 	vldr	s1, [r3, #208]	; 0xd0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8007f82:	ee86 9a84 	vdiv.f32	s18, s13, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007f86:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8007f8a:	edd3 2a32 	vldr	s5, [r3, #200]	; 0xc8
 8007f8e:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007f92:	ed93 7a33 	vldr	s14, [r3, #204]	; 0xcc
 8007f96:	ee74 4a81 	vadd.f32	s9, s9, s2
 8007f9a:	ed93 1a38 	vldr	s2, [r3, #224]	; 0xe0
 8007f9e:	ee35 5a22 	vadd.f32	s10, s10, s5
 8007fa2:	edd3 2a37 	vldr	s5, [r3, #220]	; 0xdc
 8007fa6:	ee74 4a86 	vadd.f32	s9, s9, s12
 8007faa:	ed93 6a35 	vldr	s12, [r3, #212]	; 0xd4
 8007fae:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007fb2:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8007fb6:	ee74 4a80 	vadd.f32	s9, s9, s0
 8007fba:	ed93 0a3b 	vldr	s0, [r3, #236]	; 0xec
 8007fbe:	ee35 5a20 	vadd.f32	s10, s10, s1
 8007fc2:	edd3 0a3a 	vldr	s1, [r3, #232]	; 0xe8
 8007fc6:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8007fca:	edd0 5a05 	vldr	s11, [r0, #20]
 8007fce:	ee35 5a06 	vadd.f32	s10, s10, s12
 8007fd2:	ed93 6a39 	vldr	s12, [r3, #228]	; 0xe4
 8007fd6:	ee74 4a82 	vadd.f32	s9, s9, s4
 8007fda:	ed93 2a3c 	vldr	s4, [r3, #240]	; 0xf0
 8007fde:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007fe2:	ed93 7a3d 	vldr	s14, [r3, #244]	; 0xf4
 8007fe6:	ee75 5a82 	vadd.f32	s11, s11, s4
 8007fea:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8007fee:	eec6 8aa4 	vdiv.f32	s17, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8007ff2:	ee75 5a87 	vadd.f32	s11, s11, s14
 8007ff6:	ed93 7a3f 	vldr	s14, [r3, #252]	; 0xfc
 8007ffa:	ee35 5a22 	vadd.f32	s10, s10, s5
 8007ffe:	edd3 2a40 	vldr	s5, [r3, #256]	; 0x100
 8008002:	ed93 8a5c 	vldr	s16, [r3, #368]	; 0x170
 8008006:	ee75 5a82 	vadd.f32	s11, s11, s4
 800800a:	ed93 2a44 	vldr	s4, [r3, #272]	; 0x110
 800800e:	ee35 5a01 	vadd.f32	s10, s10, s2
 8008012:	ed93 1a43 	vldr	s2, [r3, #268]	; 0x10c
 8008016:	ee75 5a87 	vadd.f32	s11, s11, s14
 800801a:	ed93 7a42 	vldr	s14, [r3, #264]	; 0x108
 800801e:	ee35 5a06 	vadd.f32	s10, s10, s12
 8008022:	ed93 6a41 	vldr	s12, [r3, #260]	; 0x104
 8008026:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800802a:	e033      	b.n	8008094 <audioInit+0x424>
 800802c:	20001328 	.word	0x20001328
 8008030:	473b8000 	.word	0x473b8000
 8008034:	0800a331 	.word	0x0800a331
 8008038:	200179c4 	.word	0x200179c4
 800803c:	2000189c 	.word	0x2000189c
 8008040:	000160d8 	.word	0x000160d8
 8008044:	0007eb58 	.word	0x0007eb58
 8008048:	24000000 	.word	0x24000000
 800804c:	20001398 	.word	0x20001398
 8008050:	60000000 	.word	0x60000000
 8008054:	20001324 	.word	0x20001324
 8008058:	ba51b717 	.word	0xba51b717
 800805c:	00000000 	.word	0x00000000
 8008060:	3a83126f 	.word	0x3a83126f
 8008064:	30000400 	.word	0x30000400
 8008068:	58020400 	.word	0x58020400
 800806c:	58020800 	.word	0x58020800
 8008070:	200012c0 	.word	0x200012c0
 8008074:	20000760 	.word	0x20000760
 8008078:	20001300 	.word	0x20001300
 800807c:	3daaaaab 	.word	0x3daaaaab
 8008080:	20000160 	.word	0x20000160
 8008084:	20017a78 	.word	0x20017a78
 8008088:	20000784 	.word	0x20000784
 800808c:	20017a80 	.word	0x20017a80
 8008090:	200001a8 	.word	0x200001a8
 8008094:	edd3 2a46 	vldr	s5, [r3, #280]	; 0x118
 8008098:	ee35 5a20 	vadd.f32	s10, s10, s1
 800809c:	edd3 0a45 	vldr	s1, [r3, #276]	; 0x114
 80080a0:	ee75 5a86 	vadd.f32	s11, s11, s12
 80080a4:	ed90 6a06 	vldr	s12, [r0, #24]
 80080a8:	ee35 5a00 	vadd.f32	s10, s10, s0
 80080ac:	ed93 0a47 	vldr	s0, [r3, #284]	; 0x11c
 80080b0:	ee75 5a87 	vadd.f32	s11, s11, s14
 80080b4:	ed93 7a48 	vldr	s14, [r3, #288]	; 0x120
 80080b8:	ee36 6a07 	vadd.f32	s12, s12, s14
 80080bc:	ed93 7a49 	vldr	s14, [r3, #292]	; 0x124
 80080c0:	ee75 5a81 	vadd.f32	s11, s11, s2
 80080c4:	ed93 1a4b 	vldr	s2, [r3, #300]	; 0x12c
 80080c8:	ee36 6a07 	vadd.f32	s12, s12, s14
 80080cc:	ed93 7a4a 	vldr	s14, [r3, #296]	; 0x128
 80080d0:	ee75 5a82 	vadd.f32	s11, s11, s4
 80080d4:	ed93 2a4d 	vldr	s4, [r3, #308]	; 0x134
 80080d8:	ee36 6a07 	vadd.f32	s12, s12, s14
 80080dc:	ed93 7a4c 	vldr	s14, [r3, #304]	; 0x130
 80080e0:	ee75 5aa0 	vadd.f32	s11, s11, s1
 80080e4:	edd3 0a50 	vldr	s1, [r3, #320]	; 0x140
 80080e8:	ee36 6a01 	vadd.f32	s12, s12, s2
 80080ec:	ed93 1a51 	vldr	s2, [r3, #324]	; 0x144
 80080f0:	ee75 5aa2 	vadd.f32	s11, s11, s5
 80080f4:	edd3 2a4e 	vldr	s5, [r3, #312]	; 0x138
 80080f8:	ee36 6a07 	vadd.f32	s12, s12, s14
 80080fc:	ed93 7a4f 	vldr	s14, [r3, #316]	; 0x13c
 8008100:	ee75 5a80 	vadd.f32	s11, s11, s0
 8008104:	ed93 0a52 	vldr	s0, [r3, #328]	; 0x148
 8008108:	ee36 6a02 	vadd.f32	s12, s12, s4
 800810c:	ed93 2a53 	vldr	s4, [r3, #332]	; 0x14c
 8008110:	ee36 6a22 	vadd.f32	s12, s12, s5
 8008114:	edd3 2a54 	vldr	s5, [r3, #336]	; 0x150
 8008118:	ee36 6a07 	vadd.f32	s12, s12, s14
 800811c:	ed90 7a07 	vldr	s14, [r0, #28]
 8008120:	ee37 7a22 	vadd.f32	s14, s14, s5
 8008124:	edd3 2a55 	vldr	s5, [r3, #340]	; 0x154
 8008128:	ee36 6a20 	vadd.f32	s12, s12, s1
 800812c:	edd3 0a57 	vldr	s1, [r3, #348]	; 0x15c
 8008130:	ee37 7a22 	vadd.f32	s14, s14, s5
 8008134:	edd3 2a56 	vldr	s5, [r3, #344]	; 0x158
 8008138:	ee36 6a01 	vadd.f32	s12, s12, s2
 800813c:	ed93 1a59 	vldr	s2, [r3, #356]	; 0x164
 8008140:	ee37 7a22 	vadd.f32	s14, s14, s5
 8008144:	edd3 2a58 	vldr	s5, [r3, #352]	; 0x160
 8008148:	ee36 6a00 	vadd.f32	s12, s12, s0
 800814c:	ed93 0a5d 	vldr	s0, [r3, #372]	; 0x174
 8008150:	ee37 7a20 	vadd.f32	s14, s14, s1
 8008154:	ee36 6a02 	vadd.f32	s12, s12, s4
 8008158:	ed93 2a5a 	vldr	s4, [r3, #360]	; 0x168
 800815c:	ee37 7a22 	vadd.f32	s14, s14, s5
 8008160:	edd3 2a5b 	vldr	s5, [r3, #364]	; 0x16c
 8008164:	edd3 0a5e 	vldr	s1, [r3, #376]	; 0x178
 8008168:	ed80 4a02 	vstr	s8, [r0, #8]
 800816c:	ee37 7a01 	vadd.f32	s14, s14, s2
 8008170:	ed93 4a60 	vldr	s8, [r3, #384]	; 0x180
 8008174:	edc5 7a00 	vstr	s15, [r5]
 8008178:	edc0 4a03 	vstr	s9, [r0, #12]
 800817c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8008180:	edd3 4a61 	vldr	s9, [r3, #388]	; 0x184
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
 8008184:	ee86 2aa7 	vdiv.f32	s4, s13, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8008188:	edd0 7a08 	vldr	s15, [r0, #32]
 800818c:	edc0 5a05 	vstr	s11, [r0, #20]
 8008190:	ed80 5a04 	vstr	s10, [r0, #16]
 8008194:	ed93 1a5f 	vldr	s2, [r3, #380]	; 0x17c
 8008198:	ed80 6a06 	vstr	s12, [r0, #24]
 800819c:	ee37 7a22 	vadd.f32	s14, s14, s5
 80081a0:	edc5 1a01 	vstr	s3, [r5, #4]
 80081a4:	ee77 7a84 	vadd.f32	s15, s15, s8
 80081a8:	ed93 4a63 	vldr	s8, [r3, #396]	; 0x18c
	gainNormalizers[1] = 1.0f / totalGain[1];
 80081ac:	eec6 2aa1 	vdiv.f32	s5, s13, s3
 80081b0:	ed80 3a00 	vstr	s6, [r0]
 80081b4:	edc0 3a01 	vstr	s7, [r0, #4]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80081b8:	ee37 7a08 	vadd.f32	s14, s14, s16
 80081bc:	ee77 7aa4 	vadd.f32	s15, s15, s9
 80081c0:	edd3 4a65 	vldr	s9, [r3, #404]	; 0x194
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80081c4:	ee86 8a85 	vdiv.f32	s16, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80081c8:	ed93 5a64 	vldr	s10, [r3, #400]	; 0x190
 80081cc:	ee37 7a00 	vadd.f32	s14, s14, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80081d0:	ee86 0aa5 	vdiv.f32	s0, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80081d4:	edd3 5a62 	vldr	s11, [r3, #392]	; 0x188
 80081d8:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80081dc:	edd3 5a66 	vldr	s11, [r3, #408]	; 0x198
 80081e0:	ee37 7a20 	vadd.f32	s14, s14, s1
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80081e4:	eec6 0a86 	vdiv.f32	s1, s13, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80081e8:	ed93 6a6a 	vldr	s12, [r3, #424]	; 0x1a8
 80081ec:	ee77 7a84 	vadd.f32	s15, s15, s8
 80081f0:	ee37 7a01 	vadd.f32	s14, s14, s2
 80081f4:	ee77 7a85 	vadd.f32	s15, s15, s10
 80081f8:	ed93 5a67 	vldr	s10, [r3, #412]	; 0x19c
 80081fc:	ed80 7a07 	vstr	s14, [r0, #28]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8008200:	ee86 1a87 	vdiv.f32	s2, s13, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8008204:	ed93 7a68 	vldr	s14, [r3, #416]	; 0x1a0
 8008208:	ee77 7aa4 	vadd.f32	s15, s15, s9
 800820c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008210:	edd3 5a69 	vldr	s11, [r3, #420]	; 0x1a4
 8008214:	ee77 7a85 	vadd.f32	s15, s15, s10
 8008218:	ee77 7a87 	vadd.f32	s15, s15, s14
 800821c:	ed93 7a6b 	vldr	s14, [r3, #428]	; 0x1ac
 8008220:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8008224:	ee77 7a86 	vadd.f32	s15, s15, s12
 8008228:	ee77 7a87 	vadd.f32	s15, s15, s14
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 800822c:	eec6 1aa7 	vdiv.f32	s3, s13, s15
 8008230:	edc0 7a08 	vstr	s15, [r0, #32]
 8008234:	48e7      	ldr	r0, [pc, #924]	; (80085d4 <audioInit+0x964>)
 8008236:	ed80 aa00 	vstr	s20, [r0]
 800823a:	edc0 9a01 	vstr	s19, [r0, #4]
 800823e:	ed80 9a02 	vstr	s18, [r0, #8]
 8008242:	edc0 8a03 	vstr	s17, [r0, #12]
 8008246:	ed80 8a04 	vstr	s16, [r0, #16]
 800824a:	ed80 0a05 	vstr	s0, [r0, #20]
 800824e:	edc0 0a06 	vstr	s1, [r0, #24]
 8008252:	ed80 1a07 	vstr	s2, [r0, #28]
 8008256:	edc0 1a08 	vstr	s3, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
 800825a:	48df      	ldr	r0, [pc, #892]	; (80085d8 <audioInit+0x968>)
 800825c:	ed80 2a00 	vstr	s4, [r0]
	gainNormalizers[1] = 1.0f / totalGain[1];
 8008260:	edc0 2a01 	vstr	s5, [r0, #4]


	for (int i = 0; i < NUM_OVERTONES; i++)
 8008264:	f102 0030 	add.w	r0, r2, #48	; 0x30
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8008268:	edd3 7a00 	vldr	s15, [r3]
		partials[i] = partials[i] * gainNormalizers[0];
 800826c:	ed92 3a00 	vldr	s6, [r2]
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8008270:	ee6a 7a27 	vmul.f32	s15, s20, s15
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8008274:	edd1 3a00 	vldr	s7, [r1]
		partials[i] = partials[i] * gainNormalizers[0];
 8008278:	ee22 3a03 	vmul.f32	s6, s4, s6
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 800827c:	ee62 3aa3 	vmul.f32	s7, s5, s7
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8008280:	ece3 7a01 	vstmia	r3!, {s15}
 8008284:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
 8008288:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
 800828c:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
 8008290:	ee24 4a29 	vmul.f32	s8, s8, s19
 8008294:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8008298:	ee64 4a89 	vmul.f32	s9, s9, s18
 800829c:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
 80082a0:	ee25 5a28 	vmul.f32	s10, s10, s17
 80082a4:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
 80082a8:	ee65 5a88 	vmul.f32	s11, s11, s16
 80082ac:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 80082b0:	ee26 6a00 	vmul.f32	s12, s12, s0
 80082b4:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 80082b8:	ee66 6aa0 	vmul.f32	s13, s13, s1
 80082bc:	ee27 7a01 	vmul.f32	s14, s14, s2
		partials[i] = partials[i] * gainNormalizers[0];
 80082c0:	eca2 3a01 	vstmia	r2!, {s6}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 80082c4:	ee67 7aa1 	vmul.f32	s15, s15, s3
	for (int i = 0; i < NUM_OVERTONES; i++)
 80082c8:	4282      	cmp	r2, r0
		partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 80082ca:	ece1 3a01 	vstmia	r1!, {s7}
				stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 80082ce:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
 80082d2:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
 80082d6:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
 80082da:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
 80082de:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
 80082e2:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
 80082e6:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
 80082ea:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
 80082ee:	d1bb      	bne.n	8008268 <audioInit+0x5f8>
		  for (int j = 0; j < 3; j++)
		  {

			  for (int k = 0; k < 2; k++)
			  {
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 80082f0:	edd4 3a01 	vldr	s7, [r4, #4]
 80082f4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80082f8:	ed94 4a04 	vldr	s8, [r4, #16]
 80082fc:	edd4 4a07 	vldr	s9, [r4, #28]
 8008300:	ed94 6a02 	vldr	s12, [r4, #8]
 8008304:	edd4 2a03 	vldr	s5, [r4, #12]
 8008308:	edd4 6a05 	vldr	s13, [r4, #20]
 800830c:	ee36 6a63 	vsub.f32	s12, s12, s7
 8008310:	ed94 3a06 	vldr	s6, [r4, #24]
 8008314:	ee34 5a62 	vsub.f32	s10, s8, s5
 8008318:	ed94 7a08 	vldr	s14, [r4, #32]
 800831c:	ee76 6ac4 	vsub.f32	s13, s13, s8
 8008320:	ee74 5ac3 	vsub.f32	s11, s9, s6
 8008324:	ed94 2a00 	vldr	s4, [r4]
 8008328:	ee37 7a64 	vsub.f32	s14, s14, s9
 800832c:	4cab      	ldr	r4, [pc, #684]	; (80085dc <audioInit+0x96c>)
 800832e:	ee87 9a86 	vdiv.f32	s18, s15, s12
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8008332:	ed9f 1aab 	vldr	s2, [pc, #684]	; 80085e0 <audioInit+0x970>
 8008336:	f8df c330 	ldr.w	ip, [pc, #816]	; 8008668 <audioInit+0x9f8>
 800833a:	f104 0830 	add.w	r8, r4, #48	; 0x30
 800833e:	4fa9      	ldr	r7, [pc, #676]	; (80085e4 <audioInit+0x974>)
 8008340:	4ea9      	ldr	r6, [pc, #676]	; (80085e8 <audioInit+0x978>)
 8008342:	4baa      	ldr	r3, [pc, #680]	; (80085ec <audioInit+0x97c>)
 8008344:	eec7 8a85 	vdiv.f32	s17, s15, s10
 8008348:	48a9      	ldr	r0, [pc, #676]	; (80085f0 <audioInit+0x980>)
 800834a:	49aa      	ldr	r1, [pc, #680]	; (80085f4 <audioInit+0x984>)
 800834c:	4aaa      	ldr	r2, [pc, #680]	; (80085f8 <audioInit+0x988>)
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 800834e:	4dab      	ldr	r5, [pc, #684]	; (80085fc <audioInit+0x98c>)
 8008350:	ee87 8aa6 	vdiv.f32	s16, s15, s13
 8008354:	ee87 0aa5 	vdiv.f32	s0, s15, s11
 8008358:	eec7 0a87 	vdiv.f32	s1, s15, s14
 800835c:	ee73 1ac2 	vsub.f32	s3, s7, s4
 8008360:	eec7 9aa1 	vdiv.f32	s19, s15, s3
		  decayAf1[i] = decayAfParts[i] * 123.0f;
 8008364:	eddf 1aa6 	vldr	s3, [pc, #664]	; 8008600 <audioInit+0x990>
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008368:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800836c:	3304      	adds	r3, #4
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 800836e:	ecf4 6a01 	vldmia	r4!, {s13}
 8008372:	ecb5 6a01 	vldmia	r5!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008376:	ed53 ba01 	vldr	s23, [r3, #-4]
	for (int i = 0; i < NUM_OVERTONES; i++)
 800837a:	4544      	cmp	r4, r8
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 800837c:	ee87 aa87 	vdiv.f32	s20, s15, s14
 8008380:	edd3 aa23 	vldr	s21, [r3, #140]	; 0x8c
 8008384:	ed93 ca53 	vldr	s24, [r3, #332]	; 0x14c
 8008388:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
 800838c:	ed93 ba5f 	vldr	s22, [r3, #380]	; 0x17c
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8008390:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8008394:	eec7 6a86 	vdiv.f32	s13, s15, s12
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008398:	eec7 caab 	vdiv.f32	s25, s15, s23
 800839c:	eec7 baaa 	vdiv.f32	s23, s15, s21
 80083a0:	eec7 aaa5 	vdiv.f32	s21, s15, s11
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 80083a4:	ee37 7a66 	vsub.f32	s14, s14, s13
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083a8:	ee3a da6c 	vsub.f32	s26, s20, s25
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 80083ac:	ee27 7a01 	vmul.f32	s14, s14, s2
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083b0:	ee2d da29 	vmul.f32	s26, s26, s19
		  decayAf1[i] = decayAfParts[i] * 123.0f;
 80083b4:	ee27 6a21 	vmul.f32	s12, s14, s3
		  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 80083b8:	ecac 7a01 	vstmia	ip!, {s14}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083bc:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec

				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 80083c0:	ee62 fa0d 	vmul.f32	s31, s4, s26
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083c4:	eca0 da01 	vstmia	r0!, {s26}
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 80083c8:	ee76 6ac6 	vsub.f32	s13, s13, s12
		  decayAf1[i] = decayAfParts[i] * 123.0f;
 80083cc:	eca7 6a01 	vstmia	r7!, {s12}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083d0:	ed93 6a17 	vldr	s12, [r3, #92]	; 0x5c

				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 80083d4:	ee7c caef 	vsub.f32	s25, s25, s31
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 80083d8:	ece1 fa01 	vstmia	r1!, {s31}
		  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 80083dc:	ece6 6a01 	vstmia	r6!, {s13}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083e0:	eec7 5a86 	vdiv.f32	s11, s15, s12
 80083e4:	edd3 6a2f 	vldr	s13, [r3, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 80083e8:	ece2 ca01 	vstmia	r2!, {s25}
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 80083ec:	ee87 5aa6 	vdiv.f32	s10, s15, s13
 80083f0:	ee87 6a87 	vdiv.f32	s12, s15, s14
 80083f4:	eec7 6a8c 	vdiv.f32	s13, s15, s24
 80083f8:	ee87 7a8b 	vdiv.f32	s14, s15, s22
 80083fc:	ee35 ca6b 	vsub.f32	s24, s10, s23
 8008400:	ee75 5aca 	vsub.f32	s11, s11, s20
 8008404:	ee36 6a45 	vsub.f32	s12, s12, s10
 8008408:	ee2c ca28 	vmul.f32	s24, s24, s17
 800840c:	ee65 5a89 	vmul.f32	s11, s11, s18
 8008410:	ee26 6a08 	vmul.f32	s12, s12, s16
 8008414:	ee36 baea 	vsub.f32	s22, s13, s21
 8008418:	ed80 ca17 	vstr	s24, [r0, #92]	; 0x5c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800841c:	ee62 ea8c 	vmul.f32	s29, s5, s24
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008420:	edc0 5a0b 	vstr	s11, [r0, #44]	; 0x2c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8008424:	ee23 faa5 	vmul.f32	s30, s7, s11
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008428:	ed80 6a23 	vstr	s12, [r0, #140]	; 0x8c
 800842c:	ee2b ba00 	vmul.f32	s22, s22, s0
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8008430:	ee24 ea06 	vmul.f32	s28, s8, s12
 8008434:	edc1 ea17 	vstr	s29, [r1, #92]	; 0x5c
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008438:	ee37 7a66 	vsub.f32	s14, s14, s13
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800843c:	ed81 fa0b 	vstr	s30, [r1, #44]	; 0x2c
 8008440:	ee63 da0b 	vmul.f32	s27, s6, s22
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008444:	ed80 ba2f 	vstr	s22, [r0, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8008448:	ee7b baee 	vsub.f32	s23, s23, s29
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800844c:	ed81 ea23 	vstr	s28, [r1, #140]	; 0x8c
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008450:	ee27 7a20 	vmul.f32	s14, s14, s1
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8008454:	ee3a aa4f 	vsub.f32	s20, s20, s30
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8008458:	edc1 da2f 	vstr	s27, [r1, #188]	; 0xbc
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 800845c:	ee7a aaed 	vsub.f32	s21, s21, s27
 8008460:	edc2 ba17 	vstr	s23, [r2, #92]	; 0x5c
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8008464:	ee24 da87 	vmul.f32	s26, s9, s14
				  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8008468:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 800846c:	ee35 5a4e 	vsub.f32	s10, s10, s28
 8008470:	ed82 aa0b 	vstr	s20, [r2, #44]	; 0x2c
 8008474:	edc2 aa2f 	vstr	s21, [r2, #188]	; 0xbc
 8008478:	ee76 6acd 	vsub.f32	s13, s13, s26
				  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 800847c:	ed81 da3b 	vstr	s26, [r1, #236]	; 0xec
				  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8008480:	ed82 5a23 	vstr	s10, [r2, #140]	; 0x8c
 8008484:	edc2 6a3b 	vstr	s13, [r2, #236]	; 0xec
	for (int i = 0; i < NUM_OVERTONES; i++)
 8008488:	f47f af6e 	bne.w	8008368 <audioInit+0x6f8>
 800848c:	4c5d      	ldr	r4, [pc, #372]	; (8008604 <audioInit+0x994>)

	}

	for (int i = 0; i < 256; i++)
	{
		randomFactors[i] = randomNumber()* 2.0f + 0.125f;
 800848e:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 8008492:	eeb4 8a00 	vmov.f32	s16, #64	; 0x3e000000  0.125
 8008496:	f504 6580 	add.w	r5, r4, #1024	; 0x400
 800849a:	f001 ff49 	bl	800a330 <randomNumber>
 800849e:	eef0 7a48 	vmov.f32	s15, s16
 80084a2:	eee0 7a28 	vfma.f32	s15, s0, s17
 80084a6:	ece4 7a01 	vstmia	r4!, {s15}
	for (int i = 0; i < 256; i++)
 80084aa:	42ac      	cmp	r4, r5
 80084ac:	d1f5      	bne.n	800849a <audioInit+0x82a>
 80084ae:	4b56      	ldr	r3, [pc, #344]	; (8008608 <audioInit+0x998>)
 80084b0:	f04f 0800 	mov.w	r8, #0
		//tWaveSynth_setAntiAliasing(&wt[i], 1.0f);

		for (int j = 0; j < NUM_OVERTONES; j++)
		{
			tCycle_init(&additive[i][j], &leaf);
			tADSRT_init(&additiveEnv[i][j], 3.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084b4:	ed9f 9a55 	vldr	s18, [pc, #340]	; 800860c <audioInit+0x99c>
 80084b8:	9305      	str	r3, [sp, #20]
 80084ba:	4b55      	ldr	r3, [pc, #340]	; (8008610 <audioInit+0x9a0>)
 80084bc:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 800866c <audioInit+0x9fc>
 80084c0:	9306      	str	r3, [sp, #24]
 80084c2:	4b54      	ldr	r3, [pc, #336]	; (8008614 <audioInit+0x9a4>)
			tCycle_init(&additive[i][j], &leaf);
 80084c4:	f8df a1a8 	ldr.w	sl, [pc, #424]	; 8008670 <audioInit+0xa00>
 80084c8:	9302      	str	r3, [sp, #8]
 80084ca:	4b53      	ldr	r3, [pc, #332]	; (8008618 <audioInit+0x9a8>)
			tADSRT_init(&additiveEnv[i][j], 3.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084cc:	4f53      	ldr	r7, [pc, #332]	; (800861c <audioInit+0x9ac>)
 80084ce:	9303      	str	r3, [sp, #12]
 80084d0:	4b53      	ldr	r3, [pc, #332]	; (8008620 <audioInit+0x9b0>)
 80084d2:	ed9f 8a54 	vldr	s16, [pc, #336]	; 8008624 <audioInit+0x9b4>
 80084d6:	9304      	str	r3, [sp, #16]
 80084d8:	4b48      	ldr	r3, [pc, #288]	; (80085fc <audioInit+0x98c>)
		//tLivingString2_setPrepIndex(&strings[i], 0.0f);
		//tLivingString2_setPickupPos(&strings[i], 1.0f);
		tExpSmooth_init(&smoother[i],0.0f, 0.002f, &leaf);
		tVZFilter_init(&filts[i], Lowpass, 8000.0f, 6.1f, &leaf);

		tADSRT_init(&fenvelopes[i], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084da:	eddf 9a53 	vldr	s19, [pc, #332]	; 8008628 <audioInit+0x9b8>
 80084de:	f103 0930 	add.w	r9, r3, #48	; 0x30
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80084e2:	f8cd 8004 	str.w	r8, [sp, #4]
				  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 80084e6:	9e04      	ldr	r6, [sp, #16]
 80084e8:	4d44      	ldr	r5, [pc, #272]	; (80085fc <audioInit+0x98c>)
 80084ea:	9c03      	ldr	r4, [sp, #12]
			tADSRT_init(&additiveEnv[i][j], 3.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084ec:	eddf 8a4f 	vldr	s17, [pc, #316]	; 800862c <audioInit+0x9bc>
			tCycle_init(&additive[i][j], &leaf);
 80084f0:	4620      	mov	r0, r4
 80084f2:	4651      	mov	r1, sl
 80084f4:	f003 fc32 	bl	800bd5c <tCycle_init>
			tADSRT_init(&additiveEnv[i][j], 3.0f, partialDecays[j] * 1000.0f, 0.0f, 150.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80084f8:	ecf5 0a01 	vldmia	r5!, {s1}
 80084fc:	4630      	mov	r0, r6
 80084fe:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 8008502:	eef0 1a68 	vmov.f32	s3, s17
 8008506:	4653      	mov	r3, sl
 8008508:	ee60 0a89 	vmul.f32	s1, s1, s18
 800850c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008510:	eeb0 1a48 	vmov.f32	s2, s16
 8008514:	4639      	mov	r1, r7
 8008516:	f002 fcf3 	bl	800af00 <tADSRT_init>
		for (int j = 0; j < NUM_OVERTONES; j++)
 800851a:	454d      	cmp	r5, r9
 800851c:	f104 0404 	add.w	r4, r4, #4
 8008520:	f106 0604 	add.w	r6, r6, #4
 8008524:	d1e4      	bne.n	80084f0 <audioInit+0x880>
		tEfficientSVF_init(&filts2[i], SVFTypeLowpass, 4000, 0.5f, &leaf);
 8008526:	4942      	ldr	r1, [pc, #264]	; (8008630 <audioInit+0x9c0>)
 8008528:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800852c:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8008530:	4653      	mov	r3, sl
 8008532:	eb01 0008 	add.w	r0, r1, r8
 8008536:	2101      	movs	r1, #1
 8008538:	f003 f836 	bl	800b5a8 <tEfficientSVF_init>
		tSlide_init(&freqSlider[i], 1, 20, &leaf);
 800853c:	4b3d      	ldr	r3, [pc, #244]	; (8008634 <audioInit+0x9c4>)
 800853e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8008542:	4651      	mov	r1, sl
 8008544:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008548:	eb03 0008 	add.w	r0, r3, r8
 800854c:	f002 ffd4 	bl	800b4f8 <tSlide_init>
		tCycle_init(&sines[i], &leaf);
 8008550:	4b39      	ldr	r3, [pc, #228]	; (8008638 <audioInit+0x9c8>)
 8008552:	4651      	mov	r1, sl
 8008554:	eb08 0548 	add.w	r5, r8, r8, lsl #1
 8008558:	eb03 0008 	add.w	r0, r3, r8
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
		tPBPulse_init(&pulseW[i], &leaf);
		for (int j = 0; j < NUM_LFOS; j++)
		{
			tCycle_init(&LFOs[i][j], &leaf);
			LFOdetunes[i][j] = randomNumber() * 0.4f;
 800855c:	eddf 8a37 	vldr	s17, [pc, #220]	; 800863c <audioInit+0x9cc>
		tCycle_init(&sines[i], &leaf);
 8008560:	f003 fbfc 	bl	800bd5c <tCycle_init>
		tExpSmooth_init(&smoother[i],0.0f, 0.002f, &leaf);
 8008564:	4b36      	ldr	r3, [pc, #216]	; (8008640 <audioInit+0x9d0>)
 8008566:	eeb0 0a48 	vmov.f32	s0, s16
 800856a:	4651      	mov	r1, sl
 800856c:	eb03 0008 	add.w	r0, r3, r8
 8008570:	eddf 0a34 	vldr	s1, [pc, #208]	; 8008644 <audioInit+0x9d4>
 8008574:	f002 ff80 	bl	800b478 <tExpSmooth_init>
		tVZFilter_init(&filts[i], Lowpass, 8000.0f, 6.1f, &leaf);
 8008578:	4b33      	ldr	r3, [pc, #204]	; (8008648 <audioInit+0x9d8>)
 800857a:	4652      	mov	r2, sl
 800857c:	eddf 0a33 	vldr	s1, [pc, #204]	; 800864c <audioInit+0x9dc>
 8008580:	eb03 0008 	add.w	r0, r3, r8
 8008584:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8008650 <audioInit+0x9e0>
 8008588:	2101      	movs	r1, #1
 800858a:	f003 fa15 	bl	800b9b8 <tVZFilter_init>
		tADSRT_init(&fenvelopes[i], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800858e:	4931      	ldr	r1, [pc, #196]	; (8008654 <audioInit+0x9e4>)
 8008590:	eef0 1a69 	vmov.f32	s3, s19
 8008594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008598:	eeb0 1a48 	vmov.f32	s2, s16
 800859c:	eb01 0008 	add.w	r0, r1, r8
 80085a0:	4653      	mov	r3, sl
 80085a2:	eddf 0a2d 	vldr	s1, [pc, #180]	; 8008658 <audioInit+0x9e8>
 80085a6:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8008624 <audioInit+0x9b4>
 80085aa:	4639      	mov	r1, r7
 80085ac:	f002 fca8 	bl	800af00 <tADSRT_init>
		tExpSmooth_init(&stringFreqSmoothers[i],1.0f, 0.05f, &leaf);
 80085b0:	4b2a      	ldr	r3, [pc, #168]	; (800865c <audioInit+0x9ec>)
 80085b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80085b6:	4651      	mov	r1, sl
 80085b8:	eb03 0008 	add.w	r0, r3, r8
 80085bc:	eddf 0a28 	vldr	s1, [pc, #160]	; 8008660 <audioInit+0x9f0>
 80085c0:	f002 ff5a 	bl	800b478 <tExpSmooth_init>
		tPBPulse_init(&pulseW[i], &leaf);
 80085c4:	4b27      	ldr	r3, [pc, #156]	; (8008664 <audioInit+0x9f4>)
 80085c6:	4651      	mov	r1, sl
 80085c8:	eb03 0008 	add.w	r0, r3, r8
 80085cc:	f003 fc1a 	bl	800be04 <tPBPulse_init>
 80085d0:	e050      	b.n	8008674 <audioInit+0xa04>
 80085d2:	bf00      	nop
 80085d4:	200012dc 	.word	0x200012dc
 80085d8:	200012d4 	.word	0x200012d4
 80085dc:	20000118 	.word	0x20000118
 80085e0:	3b84a9fa 	.word	0x3b84a9fa
 80085e4:	20001180 	.word	0x20001180
 80085e8:	20001210 	.word	0x20001210
 80085ec:	200005b0 	.word	0x200005b0
 80085f0:	20000f40 	.word	0x20000f40
 80085f4:	20000e20 	.word	0x20000e20
 80085f8:	20001060 	.word	0x20001060
 80085fc:	200000d0 	.word	0x200000d0
 8008600:	42f60000 	.word	0x42f60000
 8008604:	20001488 	.word	0x20001488
 8008608:	200000a0 	.word	0x200000a0
 800860c:	447a0000 	.word	0x447a0000
 8008610:	20000070 	.word	0x20000070
 8008614:	20000a10 	.word	0x20000a10
 8008618:	20000a34 	.word	0x20000a34
 800861c:	30000400 	.word	0x30000400
 8008620:	20000b54 	.word	0x20000b54
 8008624:	00000000 	.word	0x00000000
 8008628:	43480000 	.word	0x43480000
 800862c:	43160000 	.word	0x43160000
 8008630:	200012b0 	.word	0x200012b0
 8008634:	200012c4 	.word	0x200012c4
 8008638:	2000188c 	.word	0x2000188c
 800863c:	3ecccccd 	.word	0x3ecccccd
 8008640:	20017974 	.word	0x20017974
 8008644:	3b03126f 	.word	0x3b03126f
 8008648:	200012a0 	.word	0x200012a0
 800864c:	40c33333 	.word	0x40c33333
 8008650:	45fa0000 	.word	0x45fa0000
 8008654:	20001290 	.word	0x20001290
 8008658:	42480000 	.word	0x42480000
 800865c:	20017984 	.word	0x20017984
 8008660:	3d4ccccd 	.word	0x3d4ccccd
 8008664:	20001478 	.word	0x20001478
 8008668:	200011c8 	.word	0x200011c8
 800866c:	2000126c 	.word	0x2000126c
 8008670:	20001328 	.word	0x20001328
		for (int j = 0; j < NUM_LFOS; j++)
 8008674:	4bd4      	ldr	r3, [pc, #848]	; (80089c8 <audioInit+0xd58>)
 8008676:	9e02      	ldr	r6, [sp, #8]
 8008678:	441d      	add	r5, r3
 800867a:	f1a6 040c 	sub.w	r4, r6, #12
			tCycle_init(&LFOs[i][j], &leaf);
 800867e:	4620      	mov	r0, r4
 8008680:	4651      	mov	r1, sl
		for (int j = 0; j < NUM_LFOS; j++)
 8008682:	3404      	adds	r4, #4
			tCycle_init(&LFOs[i][j], &leaf);
 8008684:	f003 fb6a 	bl	800bd5c <tCycle_init>
			LFOdetunes[i][j] = randomNumber() * 0.4f;
 8008688:	f001 fe52 	bl	800a330 <randomNumber>
 800868c:	ee20 0a28 	vmul.f32	s0, s0, s17
		for (int j = 0; j < NUM_LFOS; j++)
 8008690:	42a6      	cmp	r6, r4
			LFOdetunes[i][j] = randomNumber() * 0.4f;
 8008692:	eca5 0a01 	vstmia	r5!, {s0}
		for (int j = 0; j < NUM_LFOS; j++)
 8008696:	d1f2      	bne.n	800867e <audioInit+0xa0e>
 8008698:	f1ab 040c 	sub.w	r4, fp, #12
		}
		for (int j = 0; j < NUM_ENVS; j++)
		{
			tADSRT_init(&envelopes[i][j], 3.0f, 300.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800869c:	ed9f aacb 	vldr	s20, [pc, #812]	; 80089cc <audioInit+0xd5c>
			tADSRT_setLeakFactor(&envelopes[i][j], 0.999999f);
 80086a0:	eddf 8acb 	vldr	s17, [pc, #812]	; 80089d0 <audioInit+0xd60>
			tADSRT_init(&envelopes[i][j], 3.0f, 300.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80086a4:	4620      	mov	r0, r4
 80086a6:	eef0 1a69 	vmov.f32	s3, s19
 80086aa:	eeb0 1a48 	vmov.f32	s2, s16
 80086ae:	4653      	mov	r3, sl
 80086b0:	eef0 0a4a 	vmov.f32	s1, s20
 80086b4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80086b8:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80086bc:	4639      	mov	r1, r7
 80086be:	f002 fc1f 	bl	800af00 <tADSRT_init>
			tADSRT_setLeakFactor(&envelopes[i][j], 0.999999f);
 80086c2:	4620      	mov	r0, r4
		for (int j = 0; j < NUM_ENVS; j++)
 80086c4:	3404      	adds	r4, #4
			tADSRT_setLeakFactor(&envelopes[i][j], 0.999999f);
 80086c6:	eeb0 0a68 	vmov.f32	s0, s17
 80086ca:	f002 fc8d 	bl	800afe8 <tADSRT_setLeakFactor>
		for (int j = 0; j < NUM_ENVS; j++)
 80086ce:	45a3      	cmp	fp, r4
 80086d0:	d1e8      	bne.n	80086a4 <audioInit+0xa34>
 80086d2:	4ac0      	ldr	r2, [pc, #768]	; (80089d4 <audioInit+0xd64>)
 80086d4:	2600      	movs	r6, #0
 80086d6:	9b01      	ldr	r3, [sp, #4]
		}
		for (int j = 0; j < 2; j++)
		{
			tCycle_init(&mySine[i][j], &leaf);
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 80086d8:	eddf aabf 	vldr	s21, [pc, #764]	; 80089d8 <audioInit+0xd68>
 80086dc:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80086e0:	4abe      	ldr	r2, [pc, #760]	; (80089dc <audioInit+0xd6c>)
 80086e2:	ed9f aabf 	vldr	s20, [pc, #764]	; 80089e0 <audioInit+0xd70>
 80086e6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
			tFeedbackLeveler_init(&levelers[i][j], 1.0f, 0.01f, 0.01f, 0, &leaf);
 80086ea:	eddf 8abe 	vldr	s17, [pc, #760]	; 80089e4 <audioInit+0xd74>
			tCycle_init(&mySine[i][j], &leaf);
 80086ee:	1970      	adds	r0, r6, r5
 80086f0:	4651      	mov	r1, sl
 80086f2:	9000      	str	r0, [sp, #0]
 80086f4:	f003 fb32 	bl	800bd5c <tCycle_init>
			tCycle_setFreq(&mySine[i][j], (randomNumber() * 0.1f) + 0.001f);
 80086f8:	f001 fe1a 	bl	800a330 <randomNumber>
 80086fc:	eef0 7a4a 	vmov.f32	s15, s20
 8008700:	9800      	ldr	r0, [sp, #0]
 8008702:	eee0 7a2a 	vfma.f32	s15, s0, s21
 8008706:	eeb0 0a67 	vmov.f32	s0, s15
 800870a:	f003 fb43 	bl	800bd94 <tCycle_setFreq>
			tFeedbackLeveler_init(&levelers[i][j], 1.0f, 0.01f, 0.01f, 0, &leaf);
 800870e:	1930      	adds	r0, r6, r4
		for (int j = 0; j < 2; j++)
 8008710:	3604      	adds	r6, #4
			tFeedbackLeveler_init(&levelers[i][j], 1.0f, 0.01f, 0.01f, 0, &leaf);
 8008712:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008716:	eeb0 1a68 	vmov.f32	s2, s17
 800871a:	4652      	mov	r2, sl
 800871c:	eddf 0ab1 	vldr	s1, [pc, #708]	; 80089e4 <audioInit+0xd74>
 8008720:	2100      	movs	r1, #0
 8008722:	f002 fbc5 	bl	800aeb0 <tFeedbackLeveler_init>
		for (int j = 0; j < 2; j++)
 8008726:	2e08      	cmp	r6, #8
 8008728:	d1e1      	bne.n	80086ee <audioInit+0xa7e>
		}
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 800872a:	9b05      	ldr	r3, [sp, #20]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800872c:	f108 0804 	add.w	r8, r8, #4
 8008730:	f10b 0b0c 	add.w	fp, fp, #12
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8008734:	ecb3 0a01 	vldmia	r3!, {s0}
 8008738:	9305      	str	r3, [sp, #20]
 800873a:	f003 f9e3 	bl	800bb04 <mtof>
 800873e:	9b06      	ldr	r3, [sp, #24]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008740:	f1b8 0f10 	cmp.w	r8, #16
		openStringFrequencies[i] = mtof(openStringMidinotes[i]);
 8008744:	eca3 0a01 	vstmia	r3!, {s0}
 8008748:	9306      	str	r3, [sp, #24]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800874a:	9b01      	ldr	r3, [sp, #4]
 800874c:	f103 0301 	add.w	r3, r3, #1
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	9b02      	ldr	r3, [sp, #8]
 8008754:	f103 030c 	add.w	r3, r3, #12
 8008758:	9302      	str	r3, [sp, #8]
 800875a:	9b03      	ldr	r3, [sp, #12]
 800875c:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8008760:	9303      	str	r3, [sp, #12]
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	f103 0348 	add.w	r3, r3, #72	; 0x48
 8008768:	9304      	str	r3, [sp, #16]
 800876a:	f47f aebc 	bne.w	80084e6 <audioInit+0x876>
	}
	tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 800876e:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 8008772:	4a9d      	ldr	r2, [pc, #628]	; (80089e8 <audioInit+0xd78>)
 8008774:	ed9f 0a9d 	vldr	s0, [pc, #628]	; 80089ec <audioInit+0xd7c>
 8008778:	2103      	movs	r1, #3
 800877a:	489d      	ldr	r0, [pc, #628]	; (80089f0 <audioInit+0xd80>)
 800877c:	f003 f91c 	bl	800b9b8 <tVZFilter_init>
	tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8008780:	4c9c      	ldr	r4, [pc, #624]	; (80089f4 <audioInit+0xd84>)
 8008782:	4a99      	ldr	r2, [pc, #612]	; (80089e8 <audioInit+0xd78>)
 8008784:	2101      	movs	r1, #1
 8008786:	eddf 0a9c 	vldr	s1, [pc, #624]	; 80089f8 <audioInit+0xd88>
 800878a:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800878e:	ed9f 0a9b 	vldr	s0, [pc, #620]	; 80089fc <audioInit+0xd8c>
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 8008792:	4615      	mov	r5, r2
	tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 8008794:	489a      	ldr	r0, [pc, #616]	; (8008a00 <audioInit+0xd90>)
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 8008796:	eddf 8a9b 	vldr	s17, [pc, #620]	; 8008a04 <audioInit+0xd94>
 800879a:	ed9f 8a9b 	vldr	s16, [pc, #620]	; 8008a08 <audioInit+0xd98>
	tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 800879e:	f003 f90b 	bl	800b9b8 <tVZFilter_init>
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 80087a2:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 80087a4:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.02f, &leaf);
 80087a6:	eef0 0a68 	vmov.f32	s1, s17
 80087aa:	4629      	mov	r1, r5
 80087ac:	eeb0 0a48 	vmov.f32	s0, s16
 80087b0:	f002 fe62 	bl	800b478 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 80087b4:	42b4      	cmp	r4, r6
 80087b6:	d1f4      	bne.n	80087a2 <audioInit+0xb32>
 80087b8:	4c94      	ldr	r4, [pc, #592]	; (8008a0c <audioInit+0xd9c>)
 80087ba:	4d95      	ldr	r5, [pc, #596]	; (8008a10 <audioInit+0xda0>)
 80087bc:	f504 76f0 	add.w	r6, r4, #480	; 0x1e0
	}
	for (int i = 0; i < 10; i++)
	{
		for (int j = 0; j < NUM_STRINGS; j++)
		{
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 80087c0:	ed9f 9b7d 	vldr	d9, [pc, #500]	; 80089b8 <audioInit+0xd48>
 80087c4:	ed9f 8b7e 	vldr	d8, [pc, #504]	; 80089c0 <audioInit+0xd50>
 80087c8:	ed94 0a00 	vldr	s0, [r4]
	for (int i = 0; i < 10; i++)
 80087cc:	3430      	adds	r4, #48	; 0x30
 80087ce:	3530      	adds	r5, #48	; 0x30
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 80087d0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80087d4:	ee20 0b09 	vmul.f64	d0, d0, d9
 80087d8:	ee20 0b08 	vmul.f64	d0, d0, d8
 80087dc:	f003 fba0 	bl	800bf20 <exp>
 80087e0:	ed14 7a0b 	vldr	s14, [r4, #-44]	; 0xffffffd4
 80087e4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80087e8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80087ec:	ed05 0a0c 	vstr	s0, [r5, #-48]	; 0xffffffd0
 80087f0:	ee27 0b09 	vmul.f64	d0, d7, d9
 80087f4:	ee20 0b08 	vmul.f64	d0, d0, d8
 80087f8:	f003 fb92 	bl	800bf20 <exp>
 80087fc:	ed14 7a0a 	vldr	s14, [r4, #-40]	; 0xffffffd8
 8008800:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008804:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008808:	ed05 0a0b 	vstr	s0, [r5, #-44]	; 0xffffffd4
 800880c:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008810:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008814:	f003 fb84 	bl	800bf20 <exp>
 8008818:	ed14 7a09 	vldr	s14, [r4, #-36]	; 0xffffffdc
 800881c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008820:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008824:	ed05 0a0a 	vstr	s0, [r5, #-40]	; 0xffffffd8
 8008828:	ee27 0b09 	vmul.f64	d0, d7, d9
 800882c:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008830:	f003 fb76 	bl	800bf20 <exp>
 8008834:	ed14 7a08 	vldr	s14, [r4, #-32]	; 0xffffffe0
 8008838:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800883c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008840:	ed05 0a09 	vstr	s0, [r5, #-36]	; 0xffffffdc
 8008844:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008848:	ee20 0b08 	vmul.f64	d0, d0, d8
 800884c:	f003 fb68 	bl	800bf20 <exp>
 8008850:	ed14 7a07 	vldr	s14, [r4, #-28]	; 0xffffffe4
 8008854:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008858:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800885c:	ed05 0a08 	vstr	s0, [r5, #-32]	; 0xffffffe0
 8008860:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008864:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008868:	f003 fb5a 	bl	800bf20 <exp>
 800886c:	ed14 7a06 	vldr	s14, [r4, #-24]	; 0xffffffe8
 8008870:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008874:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008878:	ed05 0a07 	vstr	s0, [r5, #-28]	; 0xffffffe4
 800887c:	ee27 0b09 	vmul.f64	d0, d7, d9
 8008880:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008884:	f003 fb4c 	bl	800bf20 <exp>
 8008888:	ed14 7a05 	vldr	s14, [r4, #-20]	; 0xffffffec
 800888c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008890:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008894:	ed05 0a06 	vstr	s0, [r5, #-24]	; 0xffffffe8
 8008898:	ee27 0b09 	vmul.f64	d0, d7, d9
 800889c:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088a0:	f003 fb3e 	bl	800bf20 <exp>
 80088a4:	ed14 7a04 	vldr	s14, [r4, #-16]
 80088a8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088ac:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80088b0:	ed05 0a05 	vstr	s0, [r5, #-20]	; 0xffffffec
 80088b4:	ee27 0b09 	vmul.f64	d0, d7, d9
 80088b8:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088bc:	f003 fb30 	bl	800bf20 <exp>
 80088c0:	ed14 7a03 	vldr	s14, [r4, #-12]
 80088c4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088c8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80088cc:	ed05 0a04 	vstr	s0, [r5, #-16]
 80088d0:	ee27 0b09 	vmul.f64	d0, d7, d9
 80088d4:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088d8:	f003 fb22 	bl	800bf20 <exp>
 80088dc:	ed14 7a02 	vldr	s14, [r4, #-8]
 80088e0:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80088e4:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80088e8:	ed05 0a03 	vstr	s0, [r5, #-12]
 80088ec:	ee27 0b09 	vmul.f64	d0, d7, d9
 80088f0:	ee20 0b08 	vmul.f64	d0, d0, d8
 80088f4:	f003 fb14 	bl	800bf20 <exp>
 80088f8:	ed14 7a01 	vldr	s14, [r4, #-4]
 80088fc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8008900:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8008904:	ed05 0a02 	vstr	s0, [r5, #-8]
 8008908:	ee27 0b09 	vmul.f64	d0, d7, d9
 800890c:	ee20 0b08 	vmul.f64	d0, d0, d8
 8008910:	f003 fb06 	bl	800bf20 <exp>
	for (int i = 0; i < 10; i++)
 8008914:	42b4      	cmp	r4, r6
			pedals[i][j] = pow(2.0, (pedalsInCents[i][j] / 1200.0));
 8008916:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800891a:	ed05 0a01 	vstr	s0, [r5, #-4]
	for (int i = 0; i < 10; i++)
 800891e:	f47f af53 	bne.w	80087c8 <audioInit+0xb58>
		}
	}
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8008922:	4c3c      	ldr	r4, [pc, #240]	; (8008a14 <audioInit+0xda4>)
	for (int i = 0; i < 4; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8008924:	4d30      	ldr	r5, [pc, #192]	; (80089e8 <audioInit+0xd78>)
 8008926:	f104 0610 	add.w	r6, r4, #16
 800892a:	eddf 8a3b 	vldr	s17, [pc, #236]	; 8008a18 <audioInit+0xda8>
 800892e:	ed9f 8a36 	vldr	s16, [pc, #216]	; 8008a08 <audioInit+0xd98>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8008932:	492d      	ldr	r1, [pc, #180]	; (80089e8 <audioInit+0xd78>)
 8008934:	eddf 0a38 	vldr	s1, [pc, #224]	; 8008a18 <audioInit+0xda8>
 8008938:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8008a08 <audioInit+0xd98>
 800893c:	4837      	ldr	r0, [pc, #220]	; (8008a1c <audioInit+0xdac>)
 800893e:	f002 fd9b 	bl	800b478 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8008942:	4620      	mov	r0, r4
	for (int i = 0; i < 4; i++)
 8008944:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8008946:	eef0 0a68 	vmov.f32	s1, s17
 800894a:	4629      	mov	r1, r5
 800894c:	eeb0 0a48 	vmov.f32	s0, s16
 8008950:	f002 fd92 	bl	800b478 <tExpSmooth_init>
	for (int i = 0; i < 4; i++)
 8008954:	42b4      	cmp	r4, r6
 8008956:	d1f4      	bne.n	8008942 <audioInit+0xcd2>
	}
	//loadingPreset = 1;
	//previousPreset = PresetNil;
	tNoise_init(&myNoise, WhiteNoise, &leaf);
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <audioInit+0xd78>)
 800895a:	2100      	movs	r1, #0
 800895c:	4830      	ldr	r0, [pc, #192]	; (8008a20 <audioInit+0xdb0>)
 800895e:	f003 fa65 	bl	800be2c <tNoise_init>


	tCycle_setFreq(&sines[0], 440.0f);
 8008962:	ed9f 0a30 	vldr	s0, [pc, #192]	; 8008a24 <audioInit+0xdb4>
 8008966:	4830      	ldr	r0, [pc, #192]	; (8008a28 <audioInit+0xdb8>)
 8008968:	f003 fa14 	bl	800bd94 <tCycle_setFreq>
	//HAL_Delay(100 * firstString);

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 800896c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008970:	2100      	movs	r1, #0
 8008972:	482e      	ldr	r0, [pc, #184]	; (8008a2c <audioInit+0xdbc>)
 8008974:	f003 faca 	bl	800bf0c <memset>
	}

	HAL_Delay(1000);
 8008978:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800897c:	f7f7 fd14 	bl	80003a8 <HAL_Delay>

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8008980:	2280      	movs	r2, #128	; 0x80
 8008982:	492a      	ldr	r1, [pc, #168]	; (8008a2c <audioInit+0xdbc>)
 8008984:	9808      	ldr	r0, [sp, #32]
 8008986:	f7fb ffc5 	bl	8004914 <HAL_SAI_Transmit_DMA>
 800898a:	4b29      	ldr	r3, [pc, #164]	; (8008a30 <audioInit+0xdc0>)
 800898c:	4601      	mov	r1, r0
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 800898e:	2280      	movs	r2, #128	; 0x80
 8008990:	9809      	ldr	r0, [sp, #36]	; 0x24
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 8008992:	7019      	strb	r1, [r3, #0]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 8008994:	4927      	ldr	r1, [pc, #156]	; (8008a34 <audioInit+0xdc4>)
 8008996:	f7fc f859 	bl	8004a4c <HAL_SAI_Receive_DMA>
 800899a:	4b27      	ldr	r3, [pc, #156]	; (8008a38 <audioInit+0xdc8>)
 800899c:	4602      	mov	r2, r0
	// with the CS4271 codec IC, the SAI Transmit and Receive must be happening before the chip will respond to
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready

	//now to send all the necessary messages to the codec
	AudioCodec_init(hi2c);
 800899e:	9807      	ldr	r0, [sp, #28]
	receive_status = HAL_SAI_Receive_DMA(hsaiIn, (uint8_t *)&audioInBuffer[0], AUDIO_BUFFER_SIZE);
 80089a0:	701a      	strb	r2, [r3, #0]
	AudioCodec_init(hi2c);
 80089a2:	f001 f8a5 	bl	8009af0 <AudioCodec_init>
	HAL_Delay(1);
 80089a6:	2001      	movs	r0, #1

}
 80089a8:	b00b      	add	sp, #44	; 0x2c
 80089aa:	ecbd 8b10 	vpop	{d8-d15}
 80089ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 80089b2:	f7f7 bcf9 	b.w	80003a8 <HAL_Delay>
 80089b6:	bf00      	nop
 80089b8:	b4e81b4f 	.word	0xb4e81b4f
 80089bc:	3f4b4e81 	.word	0x3f4b4e81
 80089c0:	fefa39ef 	.word	0xfefa39ef
 80089c4:	3fe62e42 	.word	0x3fe62e42
 80089c8:	200009d4 	.word	0x200009d4
 80089cc:	43960000 	.word	0x43960000
 80089d0:	3f7fffef 	.word	0x3f7fffef
 80089d4:	200013a0 	.word	0x200013a0
 80089d8:	3dcccccd 	.word	0x3dcccccd
 80089dc:	20001378 	.word	0x20001378
 80089e0:	3a83126f 	.word	0x3a83126f
 80089e4:	3c23d70a 	.word	0x3c23d70a
 80089e8:	20001328 	.word	0x20001328
 80089ec:	44bb8000 	.word	0x44bb8000
 80089f0:	200013d0 	.word	0x200013d0
 80089f4:	20001418 	.word	0x20001418
 80089f8:	3f666666 	.word	0x3f666666
 80089fc:	44480000 	.word	0x44480000
 8008a00:	200013d4 	.word	0x200013d4
 8008a04:	3ca3d70a 	.word	0x3ca3d70a
 8008a08:	00000000 	.word	0x00000000
 8008a0c:	200003d0 	.word	0x200003d0
 8008a10:	200001f0 	.word	0x200001f0
 8008a14:	20001314 	.word	0x20001314
 8008a18:	3a03126f 	.word	0x3a03126f
 8008a1c:	20017ab4 	.word	0x20017ab4
 8008a20:	2000139c 	.word	0x2000139c
 8008a24:	43dc0000 	.word	0x43dc0000
 8008a28:	2000188c 	.word	0x2000188c
 8008a2c:	30000000 	.word	0x30000000
 8008a30:	20017aa4 	.word	0x20017aa4
 8008a34:	30000200 	.word	0x30000200
 8008a38:	20001888 	.word	0x20001888

08008a3c <audioTick>:
}



uint32_t audioTick(float* samples)
{
 8008a3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a40:	4cb0      	ldr	r4, [pc, #704]	; (8008d04 <audioTick+0x2c8>)
 8008a42:	4602      	mov	r2, r0
	for (int i = 0; i < 12; i++)
	{
		pedalScaled[i] = tExpSmooth_tick(&pedalSmoothers[i]);
	}
*/
	samples[0]= 0.0f;
 8008a44:	2300      	movs	r3, #0
 8008a46:	4db0      	ldr	r5, [pc, #704]	; (8008d08 <audioTick+0x2cc>)
 8008a48:	f104 0610 	add.w	r6, r4, #16
{
 8008a4c:	ed2d 8b10 	vpush	{d8-d15}
 8008a50:	b089      	sub	sp, #36	; 0x24
	samples[0]= 0.0f;
 8008a52:	6013      	str	r3, [r2, #0]
{
 8008a54:	9004      	str	r0, [sp, #16]

	float audioInput = samples[0] + samples[1];

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8008a56:	48ad      	ldr	r0, [pc, #692]	; (8008d0c <audioTick+0x2d0>)
 8008a58:	f002 fd3e 	bl	800b4d8 <tExpSmooth_tick>

	for (int i = 0; i < 4; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8008a5c:	4628      	mov	r0, r5
	for (int i = 0; i < 4; i++)
 8008a5e:	3504      	adds	r5, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8008a60:	f002 fd3a 	bl	800b4d8 <tExpSmooth_tick>
 8008a64:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 4; i++)
 8008a68:	42b4      	cmp	r4, r6
 8008a6a:	d1f7      	bne.n	8008a5c <audioTick+0x20>
 8008a6c:	f8df 92dc 	ldr.w	r9, [pc, #732]	; 8008d4c <audioTick+0x310>
 8008a70:	4da7      	ldr	r5, [pc, #668]	; (8008d10 <audioTick+0x2d4>)
 8008a72:	f109 0610 	add.w	r6, r9, #16
 8008a76:	464c      	mov	r4, r9
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8008a78:	4628      	mov	r0, r5
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008a7a:	3504      	adds	r5, #4
		stringFrequencies[i] = tExpSmooth_tick(&stringFreqSmoothers[i]);
 8008a7c:	f002 fd2c 	bl	800b4d8 <tExpSmooth_tick>
 8008a80:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008a84:	42b4      	cmp	r4, r6
 8008a86:	d1f7      	bne.n	8008a78 <audioTick+0x3c>
	}

	if (newPluck)
 8008a88:	4ba2      	ldr	r3, [pc, #648]	; (8008d14 <audioTick+0x2d8>)
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	f040 80b2 	bne.w	8008bf6 <audioTick+0x1ba>
 8008a92:	4ba1      	ldr	r3, [pc, #644]	; (8008d18 <audioTick+0x2dc>)
 8008a94:	9305      	str	r3, [sp, #20]
 8008a96:	4ba1      	ldr	r3, [pc, #644]	; (8008d1c <audioTick+0x2e0>)
			//tempSamp = filtNoise * env;
			for (int j = 0; j < NUM_OVERTONES; j++)
			{

				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
				float tempFreq = stringFrequencies[i] * octaveRatios[stringOctaveIndex[i]] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env1 * params[10])+ 1.0f);
 8008a98:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
 8008a9c:	f8df b2d0 	ldr.w	fp, [pc, #720]	; 8008d70 <audioTick+0x334>
 8008aa0:	9302      	str	r3, [sp, #8]
 8008aa2:	4b9f      	ldr	r3, [pc, #636]	; (8008d20 <audioTick+0x2e4>)
 8008aa4:	eddf ba9f 	vldr	s23, [pc, #636]	; 8008d24 <audioTick+0x2e8>
 8008aa8:	9301      	str	r3, [sp, #4]
 8008aaa:	2300      	movs	r3, #0
				tCycle_setFreq(&additive[i][j], tempFreq);
					//float upRamp = (j * invNumOvertones);
					//float downRamp = 1.0f - (j * invNumOvertones);

					//float freqWeight = (upRamp * knobScaled[0]) + (downRamp * (1.0f - knobScaled[0]));
				float highRolloffGain = LEAF_clip( 0.0f, (0.0005f * (18000.0f - tempFreq)), 1.0f);
 8008aac:	ed9f ba9e 	vldr	s22, [pc, #632]	; 8008d28 <audioTick+0x2ec>
 8008ab0:	eddf aa9e 	vldr	s21, [pc, #632]	; 8008d2c <audioTick+0x2f0>
 8008ab4:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8008d5c <audioTick+0x320>
 8008ab8:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8008d74 <audioTick+0x338>
 8008abc:	4f9c      	ldr	r7, [pc, #624]	; (8008d30 <audioTick+0x2f4>)
 8008abe:	ed9f aa9d 	vldr	s20, [pc, #628]	; 8008d34 <audioTick+0x2f8>
 8008ac2:	9303      	str	r3, [sp, #12]
		Env1 = tADSRT_tick(&envelopes[i][0]);
 8008ac4:	4658      	mov	r0, fp
 8008ac6:	f002 fabb 	bl	800b040 <tADSRT_tick>
		if (voice == 2)
 8008aca:	9b05      	ldr	r3, [sp, #20]
		Env1 = tADSRT_tick(&envelopes[i][0]);
 8008acc:	eeb0 9a40 	vmov.f32	s18, s0
		if (voice == 2)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d040      	beq.n	8008b58 <audioTick+0x11c>
			}
		}
		else
		{

			tCycle_setFreq(&sines[i], stringFrequencies[i] * octaveRatios[stringOctaveIndex[i]]);
 8008ad6:	4a98      	ldr	r2, [pc, #608]	; (8008d38 <audioTick+0x2fc>)
 8008ad8:	4650      	mov	r0, sl
 8008ada:	f8d8 3000 	ldr.w	r3, [r8]
 8008ade:	edd9 7a00 	vldr	s15, [r9]
 8008ae2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008ae6:	ed93 0a00 	vldr	s0, [r3]
 8008aea:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008aee:	f003 f951 	bl	800bd94 <tCycle_setFreq>
			tempSamp = tCycle_tick(&sines[i]);
 8008af2:	4650      	mov	r0, sl
 8008af4:	f003 f95a 	bl	800bdac <tCycle_tick>
			tempSamp *= Env1 * knobScaled[2];
 8008af8:	4b82      	ldr	r3, [pc, #520]	; (8008d04 <audioTick+0x2c8>)
 8008afa:	ed93 ca02 	vldr	s24, [r3, #8]
 8008afe:	ee29 9a0c 	vmul.f32	s18, s18, s24
 8008b02:	ee29 ca00 	vmul.f32	s24, s18, s0
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b06:	9902      	ldr	r1, [sp, #8]
 8008b08:	f10b 0b0c 	add.w	fp, fp, #12
		}

		samples[0] += tempSamp;
 8008b0c:	9a04      	ldr	r2, [sp, #16]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b0e:	f109 0904 	add.w	r9, r9, #4
 8008b12:	9b03      	ldr	r3, [sp, #12]
 8008b14:	3148      	adds	r1, #72	; 0x48
		samples[0] += tempSamp;
 8008b16:	ed92 0a00 	vldr	s0, [r2]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b1a:	f108 0804 	add.w	r8, r8, #4
 8008b1e:	3312      	adds	r3, #18
 8008b20:	9102      	str	r1, [sp, #8]
 8008b22:	9901      	ldr	r1, [sp, #4]
		samples[0] += tempSamp;
 8008b24:	ee3c ca00 	vadd.f32	s24, s24, s0
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b28:	2b48      	cmp	r3, #72	; 0x48
 8008b2a:	f10a 0a04 	add.w	sl, sl, #4
 8008b2e:	f101 0148 	add.w	r1, r1, #72	; 0x48
 8008b32:	9303      	str	r3, [sp, #12]
		samples[0] += tempSamp;
 8008b34:	ed82 ca00 	vstr	s24, [r2]
	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008b38:	9101      	str	r1, [sp, #4]
 8008b3a:	d1c3      	bne.n	8008ac4 <audioTick+0x88>

	//samples[0] *= out; //put back in!!!!!!!!!!!!!!!!!

	//samples[0] =

	samples[0] = (samples[0] * 0.25f);
 8008b3c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
	//samples[0] = tanhf(samples[0] * 0.25f);
	//samples[0] *= 0.25f;
	samples[1] = samples[0];
	return 0;
}
 8008b40:	2000      	movs	r0, #0
	samples[0] = (samples[0] * 0.25f);
 8008b42:	ee2c ca27 	vmul.f32	s24, s24, s15
 8008b46:	ed82 ca00 	vstr	s24, [r2]
	samples[1] = samples[0];
 8008b4a:	ed82 ca01 	vstr	s24, [r2, #4]
}
 8008b4e:	b009      	add	sp, #36	; 0x24
 8008b50:	ecbd 8b10 	vpop	{d8-d15}
 8008b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		float tempSamp = 0.0f;
 8008b58:	ed9f ca76 	vldr	s24, [pc, #472]	; 8008d34 <audioTick+0x2f8>
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008b5c:	2400      	movs	r4, #0
 8008b5e:	e9dd 5601 	ldrd	r5, r6, [sp, #4]
				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 8008b62:	4630      	mov	r0, r6
				float tempFreq = stringFrequencies[i] * octaveRatios[stringOctaveIndex[i]] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env1 * params[10])+ 1.0f);
 8008b64:	eeb0 8a69 	vmov.f32	s16, s19
				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 8008b68:	f002 fbc0 	bl	800b2ec <tADSRT_tickNoInterp>
				float tempFreq = stringFrequencies[i] * octaveRatios[stringOctaveIndex[i]] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env1 * params[10])+ 1.0f);
 8008b6c:	edd7 6a0a 	vldr	s13, [r7, #40]	; 0x28
 8008b70:	ee07 4a10 	vmov	s14, r4
 8008b74:	edd7 7a00 	vldr	s15, [r7]
 8008b78:	eea6 8a89 	vfma.f32	s16, s13, s18
 8008b7c:	4a6e      	ldr	r2, [pc, #440]	; (8008d38 <audioTick+0x2fc>)
 8008b7e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b82:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008b86:	edd9 6a00 	vldr	s13, [r9]
 8008b8a:	ee67 7aab 	vmul.f32	s15, s15, s23
 8008b8e:	eef0 0a69 	vmov.f32	s1, s19
 8008b92:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008b96:	3401      	adds	r4, #1
				tCycle_setFreq(&additive[i][j], tempFreq);
 8008b98:	4628      	mov	r0, r5
				float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 8008b9a:	eef0 8a40 	vmov.f32	s17, s0
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008b9e:	3604      	adds	r6, #4
				float tempFreq = stringFrequencies[i] * octaveRatios[stringOctaveIndex[i]] * (j+1) * ((params[0]* 0.001f * j) + 1.0f) * ((Env1 * params[10])+ 1.0f);
 8008ba0:	ee28 8a26 	vmul.f32	s16, s16, s13
 8008ba4:	eee7 0a27 	vfma.f32	s1, s14, s15
 8008ba8:	ed93 7a00 	vldr	s14, [r3]
 8008bac:	ee07 4a90 	vmov	s15, r4
 8008bb0:	ee28 8a07 	vmul.f32	s16, s16, s14
 8008bb4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008bb8:	ee28 8a27 	vmul.f32	s16, s16, s15
 8008bbc:	ee28 8a20 	vmul.f32	s16, s16, s1
				tCycle_setFreq(&additive[i][j], tempFreq);
 8008bc0:	eeb0 0a48 	vmov.f32	s0, s16
 8008bc4:	f003 f8e6 	bl	800bd94 <tCycle_setFreq>
				float highRolloffGain = LEAF_clip( 0.0f, (0.0005f * (18000.0f - tempFreq)), 1.0f);
 8008bc8:	ee7b 0a48 	vsub.f32	s1, s22, s16
 8008bcc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008bd0:	eeb0 0a4a 	vmov.f32	s0, s20
 8008bd4:	ee60 0aaa 	vmul.f32	s1, s1, s21
 8008bd8:	f002 ff44 	bl	800ba64 <LEAF_clip>
 8008bdc:	eeb0 8a40 	vmov.f32	s16, s0
				tempSamp += tCycle_tick(&additive[i][j]) * thisEnv* highRolloffGain;// * freqWeight;
 8008be0:	4628      	mov	r0, r5
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008be2:	3504      	adds	r5, #4
				tempSamp += tCycle_tick(&additive[i][j]) * thisEnv* highRolloffGain;// * freqWeight;
 8008be4:	f003 f8e2 	bl	800bdac <tCycle_tick>
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008be8:	2c0c      	cmp	r4, #12
				tempSamp += tCycle_tick(&additive[i][j]) * thisEnv* highRolloffGain;// * freqWeight;
 8008bea:	ee68 8a88 	vmul.f32	s17, s17, s16
 8008bee:	eea0 ca28 	vfma.f32	s24, s0, s17
			for (int j = 0; j < NUM_OVERTONES; j++)
 8008bf2:	d1b6      	bne.n	8008b62 <audioTick+0x126>
 8008bf4:	e787      	b.n	8008b06 <audioTick+0xca>
 8008bf6:	4b49      	ldr	r3, [pc, #292]	; (8008d1c <audioTick+0x2e0>)
	if (newPluck)
 8008bf8:	f04f 0b00 	mov.w	fp, #0
 8008bfc:	4c4f      	ldr	r4, [pc, #316]	; (8008d3c <audioTick+0x300>)
 8008bfe:	9301      	str	r3, [sp, #4]
		for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008c00:	465d      	mov	r5, fp
 8008c02:	4b45      	ldr	r3, [pc, #276]	; (8008d18 <audioTick+0x2dc>)
				float amplitz = stringInputs[i] * 0.00005f;
 8008c04:	ed9f ca4e 	vldr	s24, [pc, #312]	; 8008d40 <audioTick+0x304>
				tADSRT_setDecay(&envelopes[i][0], (knobScaled[2]  * 50000.0f) + 1.0f);//other env
 8008c08:	eddf ba4e 	vldr	s23, [pc, #312]	; 8008d44 <audioTick+0x308>
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 8008c0c:	ed9f ba4e 	vldr	s22, [pc, #312]	; 8008d48 <audioTick+0x30c>
 8008c10:	f8df a164 	ldr.w	sl, [pc, #356]	; 8008d78 <audioTick+0x33c>
 8008c14:	f8df 8158 	ldr.w	r8, [pc, #344]	; 8008d70 <audioTick+0x334>
	if (newPluck)
 8008c18:	4e4c      	ldr	r6, [pc, #304]	; (8008d4c <audioTick+0x310>)
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8008c1a:	eddf 9a46 	vldr	s19, [pc, #280]	; 8008d34 <audioTick+0x2f8>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008c1e:	eddf aa4c 	vldr	s21, [pc, #304]	; 8008d50 <audioTick+0x314>
 8008c22:	9305      	str	r3, [sp, #20]
 8008c24:	f8cd 9008 	str.w	r9, [sp, #8]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 8008c28:	f854 9b04 	ldr.w	r9, [r4], #4
 8008c2c:	f8da 2000 	ldr.w	r2, [sl]
 8008c30:	f1b9 0f00 	cmp.w	r9, #0
 8008c34:	d117      	bne.n	8008c66 <audioTick+0x22a>
 8008c36:	bb42      	cbnz	r2, 8008c8a <audioTick+0x24e>
		for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	f10b 0b12 	add.w	fp, fp, #18
 8008c3e:	3501      	adds	r5, #1
 8008c40:	f10a 0a04 	add.w	sl, sl, #4
 8008c44:	3348      	adds	r3, #72	; 0x48
 8008c46:	f1bb 0f48 	cmp.w	fp, #72	; 0x48
 8008c4a:	f108 080c 	add.w	r8, r8, #12
 8008c4e:	f106 0604 	add.w	r6, r6, #4
			previousStringInputs[i] = stringInputs[i];
 8008c52:	f844 2c04 	str.w	r2, [r4, #-4]
		for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8008c56:	9301      	str	r3, [sp, #4]
 8008c58:	d1e6      	bne.n	8008c28 <audioTick+0x1ec>
		newPluck = 0;
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	4a2d      	ldr	r2, [pc, #180]	; (8008d14 <audioTick+0x2d8>)
 8008c5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	e717      	b.n	8008a96 <audioTick+0x5a>
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8008c66:	dde7      	ble.n	8008c38 <audioTick+0x1fc>
 8008c68:	2a00      	cmp	r2, #0
 8008c6a:	d1e5      	bne.n	8008c38 <audioTick+0x1fc>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8008c6c:	2110      	movs	r1, #16
 8008c6e:	4839      	ldr	r0, [pc, #228]	; (8008d54 <audioTick+0x318>)
 8008c70:	f7f9 f97e 	bl	8001f70 <HAL_GPIO_WritePin>
				tADSRT_off(&envelopes[i][0]);
 8008c74:	4640      	mov	r0, r8
 8008c76:	f002 f9db 	bl	800b030 <tADSRT_off>
				if (voice == 2)
 8008c7a:	9b05      	ldr	r3, [sp, #20]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	2b02      	cmp	r3, #2
 8008c80:	f000 8249 	beq.w	8009116 <audioTick+0x6da>
			previousStringInputs[i] = stringInputs[i];
 8008c84:	f8da 2000 	ldr.w	r2, [sl]
 8008c88:	e7d6      	b.n	8008c38 <audioTick+0x1fc>
				float amplitz = stringInputs[i] * 0.00005f;
 8008c8a:	ee07 2a90 	vmov	s15, r2
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8008c8e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8008c92:	eeb0 0a69 	vmov.f32	s0, s19
				float amplitz = stringInputs[i] * 0.00005f;
 8008c96:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8008c9a:	ee60 0a8c 	vmul.f32	s1, s1, s24
 8008c9e:	f002 fee1 	bl	800ba64 <LEAF_clip>
				tADSRT_setDecay(&envelopes[i][0], (knobScaled[2]  * 50000.0f) + 1.0f);//other env
 8008ca2:	4b18      	ldr	r3, [pc, #96]	; (8008d04 <audioTick+0x2c8>)
				stringOctaveIndex[i] = octaveIndex;
 8008ca4:	4a2c      	ldr	r2, [pc, #176]	; (8008d58 <audioTick+0x31c>)
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8008ca6:	eeb0 aa40 	vmov.f32	s20, s0
				tADSRT_setDecay(&envelopes[i][0], (knobScaled[2]  * 50000.0f) + 1.0f);//other env
 8008caa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008cae:	edd3 7a02 	vldr	s15, [r3, #8]
				stringOctaveIndex[i] = octaveIndex;
 8008cb2:	6812      	ldr	r2, [r2, #0]
				tADSRT_setDecay(&envelopes[i][0], (knobScaled[2]  * 50000.0f) + 1.0f);//other env
 8008cb4:	4640      	mov	r0, r8
				stringOctaveIndex[i] = octaveIndex;
 8008cb6:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <audioTick+0x320>)
				tADSRT_setDecay(&envelopes[i][0], (knobScaled[2]  * 50000.0f) + 1.0f);//other env
 8008cb8:	eea7 0aab 	vfma.f32	s0, s15, s23
				stringOctaveIndex[i] = octaveIndex;
 8008cbc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
				tADSRT_setDecay(&envelopes[i][0], (knobScaled[2]  * 50000.0f) + 1.0f);//other env
 8008cc0:	f002 f982 	bl	800afc8 <tADSRT_setDecay>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8008cc4:	2201      	movs	r2, #1
 8008cc6:	2110      	movs	r1, #16
 8008cc8:	4822      	ldr	r0, [pc, #136]	; (8008d54 <audioTick+0x318>)
 8008cca:	f7f9 f951 	bl	8001f70 <HAL_GPIO_WritePin>
				tADSRT_on(&envelopes[i][0], amplitz);
 8008cce:	eeb0 0a4a 	vmov.f32	s0, s20
 8008cd2:	4640      	mov	r0, r8
 8008cd4:	f002 f99a 	bl	800b00c <tADSRT_on>
				if (voice == 2)
 8008cd8:	9b05      	ldr	r3, [sp, #20]
 8008cda:	681a      	ldr	r2, [r3, #0]
 8008cdc:	2a02      	cmp	r2, #2
 8008cde:	d1d1      	bne.n	8008c84 <audioTick+0x248>
 8008ce0:	4b1f      	ldr	r3, [pc, #124]	; (8008d60 <audioTick+0x324>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[0] * 4.0f);
 8008ce2:	eeb1 da00 	vmov.f32	s26, #16	; 0x40800000  4.0
 8008ce6:	4a1f      	ldr	r2, [pc, #124]	; (8008d64 <audioTick+0x328>)
				if (voice == 2)
 8008ce8:	9901      	ldr	r1, [sp, #4]
 8008cea:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cee:	f8cd b018 	str.w	fp, [sp, #24]
 8008cf2:	4688      	mov	r8, r1
 8008cf4:	f8cd a01c 	str.w	sl, [sp, #28]
 8008cf8:	469b      	mov	fp, r3
						thisDecay *= 10000.0f * knobScaled[1];
 8008cfa:	eddf ca1b 	vldr	s25, [pc, #108]	; 8008d68 <audioTick+0x32c>
 8008cfe:	4692      	mov	sl, r2
 8008d00:	4f1a      	ldr	r7, [pc, #104]	; (8008d6c <audioTick+0x330>)
 8008d02:	e10b      	b.n	8008f1c <audioTick+0x4e0>
 8008d04:	20001304 	.word	0x20001304
 8008d08:	20001314 	.word	0x20001314
 8008d0c:	20017ab4 	.word	0x20017ab4
 8008d10:	20017984 	.word	0x20017984
 8008d14:	200013cc 	.word	0x200013cc
 8008d18:	20017aa8 	.word	0x20017aa8
 8008d1c:	20000b54 	.word	0x20000b54
 8008d20:	20000a34 	.word	0x20000a34
 8008d24:	3a83126f 	.word	0x3a83126f
 8008d28:	468ca000 	.word	0x468ca000
 8008d2c:	3a03126f 	.word	0x3a03126f
 8008d30:	200013d8 	.word	0x200013d8
 8008d34:	00000000 	.word	0x00000000
 8008d38:	20000060 	.word	0x20000060
 8008d3c:	20001448 	.word	0x20001448
 8008d40:	3851b717 	.word	0x3851b717
 8008d44:	47435000 	.word	0x47435000
 8008d48:	3e4ccccd 	.word	0x3e4ccccd
 8008d4c:	20017994 	.word	0x20017994
 8008d50:	3ffeb852 	.word	0x3ffeb852
 8008d54:	58020400 	.word	0x58020400
 8008d58:	2000005c 	.word	0x2000005c
 8008d5c:	20017a58 	.word	0x20017a58
 8008d60:	20000f40 	.word	0x20000f40
 8008d64:	20001060 	.word	0x20001060
 8008d68:	461c4000 	.word	0x461c4000
 8008d6c:	20000760 	.word	0x20000760
 8008d70:	20001260 	.word	0x20001260
 8008d74:	2000188c 	.word	0x2000188c
 8008d78:	200179e8 	.word	0x200179e8
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8008d7c:	ed97 7a06 	vldr	s14, [r7, #24]
 8008d80:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008d84:	edd7 7a08 	vldr	s15, [r7, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8008d88:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008d8c:	ee78 6a47 	vsub.f32	s13, s16, s14
 8008d90:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008d94:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
 8008d98:	ee29 9a0b 	vmul.f32	s18, s18, s22
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008d9c:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8008da0:	ee3f eac9 	vsub.f32	s28, s31, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8008da4:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8008da8:	f002 fe5c 	bl	800ba64 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008dac:	ed97 7a03 	vldr	s14, [r7, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008db0:	edd7 7a05 	vldr	s15, [r7, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8008db4:	eeb0 fa40 	vmov.f32	s30, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008db8:	ee78 6a47 	vsub.f32	s13, s16, s14
 8008dbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008dc0:	eeb0 1a6a 	vmov.f32	s2, s21
 8008dc4:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008dc8:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008dcc:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8008dd0:	f002 fe48 	bl	800ba64 <LEAF_clip>
							int height2Int = floor(height2);
 8008dd4:	eeb7 7acf 	vcvt.f64.f32	d7, s30
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008dd8:	48d8      	ldr	r0, [pc, #864]	; (800913c <audioTick+0x700>)
							int height1Int = floor(height1);
 8008dda:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
							if (height2 < 1.0f)
 8008dde:	eeb4 faef 	vcmpe.f32	s30, s31
							int height2Int = floor(height2);
 8008de2:	febb 7b47 	vrintm.f64	d7, d7
 8008de6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							int height1Int = floor(height1);
 8008dea:	febb 6b46 	vrintm.f64	d6, d6
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008dee:	eef0 ea40 	vmov.f32	s29, s0
							if (height2 < 1.0f)
 8008df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
 8008df6:	ee17 2a90 	vmov	r2, s15
							float height2Float = height2 - height2Int;
 8008dfa:	eef8 5ae7 	vcvt.f32.s32	s11, s15
							int height1Int = floor(height1);
 8008dfe:	eefd 7bc6 	vcvt.s32.f64	s15, d6
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e02:	f102 0101 	add.w	r1, r2, #1
 8008e06:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
 8008e0a:	ee7f 8a65 	vsub.f32	s17, s30, s11
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e0e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							int height1Int = floor(height1);
 8008e12:	ee17 3a90 	vmov	r3, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e16:	eb09 0282 	add.w	r2, r9, r2, lsl #2
							float height1Float = height1 - height1Int;
 8008e1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e1e:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008e22:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008e26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008e2a:	ed92 5a48 	vldr	s10, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e2e:	f103 0201 	add.w	r2, r3, #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e32:	ed91 7a48 	vldr	s14, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8008e3a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e3e:	ee68 8a87 	vmul.f32	s17, s17, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e42:	eb09 0383 	add.w	r3, r9, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e46:	ee3f 7acf 	vsub.f32	s14, s31, s30
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e4a:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008e4e:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008e52:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e56:	ee37 7a25 	vadd.f32	s14, s14, s11
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e5a:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 8008e5e:	ed92 6a24 	vldr	s12, [r2, #144]	; 0x90
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008e62:	eee5 8a07 	vfma.f32	s17, s10, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e66:	ee3f 7ac0 	vsub.f32	s14, s31, s0
 8008e6a:	ee37 7a27 	vadd.f32	s14, s14, s15
							float height1Float = height1 - height1Int;
 8008e6e:	ee70 7a67 	vsub.f32	s15, s0, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8008e72:	ee6e 8a28 	vmul.f32	s17, s28, s17
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008e76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008e7a:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8008e7e:	eee9 8a27 	vfma.f32	s17, s18, s15
							if (height2 < 1.0f)
 8008e82:	f100 8115 	bmi.w	80090b0 <audioTick+0x674>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
 8008e86:	eef0 0a48 	vmov.f32	s1, s16
 8008e8a:	ed97 1a08 	vldr	s2, [r7, #32]
 8008e8e:	ed97 0a07 	vldr	s0, [r7, #28]
 8008e92:	ed9b fa3c 	vldr	s30, [fp, #240]	; 0xf0
 8008e96:	f002 fde5 	bl	800ba64 <LEAF_clip>
 8008e9a:	edda 7a3c 	vldr	s15, [sl, #240]	; 0xf0
 8008e9e:	eeef 7a00 	vfma.f32	s15, s30, s0
 8008ea2:	eecf daa7 	vdiv.f32	s27, s31, s15
							if (height1 < 1.0f)
 8008ea6:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 8008eaa:	eef4 eacf 	vcmpe.f32	s29, s30
 8008eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb2:	f100 80ec 	bmi.w	800908e <audioTick+0x652>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 8008eb6:	eef0 0a48 	vmov.f32	s1, s16
 8008eba:	ed97 1a05 	vldr	s2, [r7, #20]
 8008ebe:	ed97 0a04 	vldr	s0, [r7, #16]
 8008ec2:	ed9b 8a24 	vldr	s16, [fp, #144]	; 0x90
 8008ec6:	f002 fdcd 	bl	800ba64 <LEAF_clip>
 8008eca:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 8008ece:	eee8 7a00 	vfma.f32	s15, s16, s0
 8008ed2:	ee8f 7a27 	vdiv.f32	s14, s30, s15
						thisDecay *= 10000.0f * knobScaled[1];
 8008ed6:	4b9a      	ldr	r3, [pc, #616]	; (8009140 <audioTick+0x704>)
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8008ed8:	4640      	mov	r0, r8
					for (int j = 0; j < NUM_OVERTONES; j++)
 8008eda:	f109 0901 	add.w	r9, r9, #1
 8008ede:	f10b 0b04 	add.w	fp, fp, #4
						thisDecay *= 10000.0f * knobScaled[1];
 8008ee2:	ed93 0a01 	vldr	s0, [r3, #4]
					for (int j = 0; j < NUM_OVERTONES; j++)
 8008ee6:	f10a 0a04 	add.w	sl, sl, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 8008eea:	ee2e ea2d 	vmul.f32	s28, s28, s27
						thisDecay *= 10000.0f * knobScaled[1];
 8008eee:	ee20 0a2c 	vmul.f32	s0, s0, s25
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 8008ef2:	eea7 ea09 	vfma.f32	s28, s14, s18
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay);// * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8008ef6:	ee20 0a0e 	vmul.f32	s0, s0, s28
 8008efa:	f002 f865 	bl	800afc8 <tADSRT_setDecay>
						currentRandom++;
 8008efe:	4a91      	ldr	r2, [pc, #580]	; (8009144 <audioTick+0x708>)
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain));// * (randomFactors[currentRandom])));
 8008f00:	4640      	mov	r0, r8
 8008f02:	ee28 0a8a 	vmul.f32	s0, s17, s20
						currentRandom++;
 8008f06:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
 8008f08:	f108 0804 	add.w	r8, r8, #4
						currentRandom++;
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	7013      	strb	r3, [r2, #0]
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain));// * (randomFactors[currentRandom])));
 8008f10:	f002 f87c 	bl	800b00c <tADSRT_on>
					for (int j = 0; j < NUM_OVERTONES; j++)
 8008f14:	f1b9 0f0c 	cmp.w	r9, #12
 8008f18:	f000 8109 	beq.w	800912e <audioTick+0x6f2>
						float fakedFreq = stringFrequencies[i] * (knobScaled[0] * 4.0f);
 8008f1c:	4b88      	ldr	r3, [pc, #544]	; (8009140 <audioTick+0x704>)
 8008f1e:	edd6 7a00 	vldr	s15, [r6]
 8008f22:	ed93 8a00 	vldr	s16, [r3]
						int thisString = i + firstString;
 8008f26:	4b88      	ldr	r3, [pc, #544]	; (8009148 <audioTick+0x70c>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[0] * 4.0f);
 8008f28:	ee28 8a0d 	vmul.f32	s16, s16, s26
						int thisString = i + firstString;
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	442b      	add	r3, r5
						float fakedFreq = stringFrequencies[i] * (knobScaled[0] * 4.0f);
 8008f30:	ee28 8a27 	vmul.f32	s16, s16, s15
						if (thisString < 6)
 8008f34:	2b05      	cmp	r3, #5
							stringFade = (float)thisString * 0.2f;
 8008f36:	ee07 3a90 	vmov	s15, r3
 8008f3a:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
						if (thisString < 6)
 8008f3e:	f77f af1d 	ble.w	8008d7c <audioTick+0x340>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008f42:	ed97 7a03 	vldr	s14, [r7, #12]
 8008f46:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008f4a:	edd7 7a05 	vldr	s15, [r7, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008f4e:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008f52:	ee78 6a47 	vsub.f32	s13, s16, s14
 8008f56:	ee77 7ac7 	vsub.f32	s15, s15, s14
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 8008f5a:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8008f5e:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008f62:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 8008f66:	ee39 9a47 	vsub.f32	s18, s18, s14
 8008f6a:	ee29 9a0b 	vmul.f32	s18, s18, s22
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8008f6e:	ee3f eac9 	vsub.f32	s28, s31, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008f72:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8008f76:	f002 fd75 	bl	800ba64 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8008f7a:	ed97 7a00 	vldr	s14, [r7]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008f7e:	edd7 7a02 	vldr	s15, [r7, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8008f82:	eeb0 fa40 	vmov.f32	s30, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008f86:	ee78 6a47 	vsub.f32	s13, s16, s14
 8008f8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8008f8e:	eeb0 1a6a 	vmov.f32	s2, s21
 8008f92:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8008f96:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8008f9a:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8008f9e:	f002 fd61 	bl	800ba64 <LEAF_clip>
							int height2Int = floor(height2);
 8008fa2:	eeb7 6acf 	vcvt.f64.f32	d6, s30
							int height1Int = floor(height1);
 8008fa6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008faa:	4864      	ldr	r0, [pc, #400]	; (800913c <audioTick+0x700>)
							if (height2 < 1.0f)
 8008fac:	eeb4 faef 	vcmpe.f32	s30, s31
							int height2Int = floor(height2);
 8008fb0:	febb 6b46 	vrintm.f64	d6, d6
 8008fb4:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
 8008fb8:	febb 7b47 	vrintm.f64	d7, d7
 8008fbc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
 8008fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
 8008fc4:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
 8008fc8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
 8008fcc:	ee17 3a90 	vmov	r3, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8008fd0:	eef0 ea40 	vmov.f32	s29, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008fd4:	f102 0101 	add.w	r1, r2, #1
 8008fd8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
 8008fdc:	ee7f 6a66 	vsub.f32	s13, s30, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8008fe0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8008fe4:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8008fe8:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8008fec:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8008ff0:	edd2 8a24 	vldr	s17, [r2, #144]	; 0x90
 8008ff4:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8008ff8:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8008ffc:	f103 0201 	add.w	r2, r3, #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8009000:	eee7 8aa6 	vfma.f32	s17, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8009004:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height1Float = height1 - height1Int;
 8009008:	ee07 3a90 	vmov	s15, r3
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 800900c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009010:	eb09 0282 	add.w	r2, r9, r2, lsl #2
							float height1Float = height1 - height1Int;
 8009014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8009018:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800901c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8009020:	eb00 0383 	add.w	r3, r0, r3, lsl #2
							float height1Float = height1 - height1Int;
 8009024:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8009028:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
 800902c:	edd3 7a00 	vldr	s15, [r3]
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8009030:	ee6e 8a28 	vmul.f32	s17, s28, s17
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8009034:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8009038:	eee9 8a27 	vfma.f32	s17, s18, s15
							if (height2 < 1.0f)
 800903c:	d45a      	bmi.n	80090f4 <audioTick+0x6b8>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 800903e:	eef0 0a48 	vmov.f32	s1, s16
 8009042:	ed97 1a05 	vldr	s2, [r7, #20]
 8009046:	ed97 0a04 	vldr	s0, [r7, #16]
 800904a:	ed9b fa24 	vldr	s30, [fp, #144]	; 0x90
 800904e:	f002 fd09 	bl	800ba64 <LEAF_clip>
 8009052:	edda 7a24 	vldr	s15, [sl, #144]	; 0x90
 8009056:	eeef 7a00 	vfma.f32	s15, s30, s0
 800905a:	eecf daa7 	vdiv.f32	s27, s31, s15
							if (height1 < 1.0f)
 800905e:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
 8009062:	eef4 eacf 	vcmpe.f32	s29, s30
 8009066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800906a:	d432      	bmi.n	80090d2 <audioTick+0x696>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
 800906c:	eef0 0a48 	vmov.f32	s1, s16
 8009070:	ed97 1a02 	vldr	s2, [r7, #8]
 8009074:	ed97 0a01 	vldr	s0, [r7, #4]
 8009078:	ed9b 8a0c 	vldr	s16, [fp, #48]	; 0x30
 800907c:	f002 fcf2 	bl	800ba64 <LEAF_clip>
 8009080:	edda 7a0c 	vldr	s15, [sl, #48]	; 0x30
 8009084:	eee8 7a00 	vfma.f32	s15, s16, s0
 8009088:	ee8f 7a27 	vdiv.f32	s14, s30, s15
 800908c:	e723      	b.n	8008ed6 <audioTick+0x49a>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 800908e:	eef0 0a48 	vmov.f32	s1, s16
 8009092:	ed97 1a04 	vldr	s2, [r7, #16]
 8009096:	ed97 0a03 	vldr	s0, [r7, #12]
 800909a:	ed9b 8a18 	vldr	s16, [fp, #96]	; 0x60
 800909e:	f002 fce1 	bl	800ba64 <LEAF_clip>
 80090a2:	edda 7a18 	vldr	s15, [sl, #96]	; 0x60
 80090a6:	eee8 7a00 	vfma.f32	s15, s16, s0
 80090aa:	ee8f 7a27 	vdiv.f32	s14, s30, s15
 80090ae:	e712      	b.n	8008ed6 <audioTick+0x49a>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
 80090b0:	eef0 0a48 	vmov.f32	s1, s16
 80090b4:	ed97 1a07 	vldr	s2, [r7, #28]
 80090b8:	ed97 0a06 	vldr	s0, [r7, #24]
 80090bc:	ed9b fa30 	vldr	s30, [fp, #192]	; 0xc0
 80090c0:	f002 fcd0 	bl	800ba64 <LEAF_clip>
 80090c4:	edda 7a30 	vldr	s15, [sl, #192]	; 0xc0
 80090c8:	eeef 7a00 	vfma.f32	s15, s30, s0
 80090cc:	eecf daa7 	vdiv.f32	s27, s31, s15
 80090d0:	e6e9      	b.n	8008ea6 <audioTick+0x46a>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
 80090d2:	eef0 0a48 	vmov.f32	s1, s16
 80090d6:	ed97 1a01 	vldr	s2, [r7, #4]
 80090da:	ed97 0a00 	vldr	s0, [r7]
 80090de:	ed9b 8a00 	vldr	s16, [fp]
 80090e2:	f002 fcbf 	bl	800ba64 <LEAF_clip>
 80090e6:	edda 7a00 	vldr	s15, [sl]
 80090ea:	eee8 7a00 	vfma.f32	s15, s16, s0
 80090ee:	ee8f 7a27 	vdiv.f32	s14, s30, s15
 80090f2:	e6f0      	b.n	8008ed6 <audioTick+0x49a>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 80090f4:	eef0 0a48 	vmov.f32	s1, s16
 80090f8:	ed97 1a04 	vldr	s2, [r7, #16]
 80090fc:	ed97 0a03 	vldr	s0, [r7, #12]
 8009100:	ed9b fa18 	vldr	s30, [fp, #96]	; 0x60
 8009104:	f002 fcae 	bl	800ba64 <LEAF_clip>
 8009108:	edda 7a18 	vldr	s15, [sl, #96]	; 0x60
 800910c:	eeef 7a00 	vfma.f32	s15, s30, s0
 8009110:	eecf daa7 	vdiv.f32	s27, s31, s15
 8009114:	e7a3      	b.n	800905e <audioTick+0x622>
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	4699      	mov	r9, r3
 800911a:	f103 0730 	add.w	r7, r3, #48	; 0x30
						tADSRT_off(&additiveEnv[i][j]);
 800911e:	4648      	mov	r0, r9
					for (int j = 0; j < NUM_OVERTONES; j++)
 8009120:	f109 0904 	add.w	r9, r9, #4
						tADSRT_off(&additiveEnv[i][j]);
 8009124:	f001 ff84 	bl	800b030 <tADSRT_off>
					for (int j = 0; j < NUM_OVERTONES; j++)
 8009128:	454f      	cmp	r7, r9
 800912a:	d1f8      	bne.n	800911e <audioTick+0x6e2>
 800912c:	e5aa      	b.n	8008c84 <audioTick+0x248>
			previousStringInputs[i] = stringInputs[i];
 800912e:	e9dd ba06 	ldrd	fp, sl, [sp, #24]
 8009132:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8009136:	f8da 2000 	ldr.w	r2, [sl]
 800913a:	e57d      	b.n	8008c38 <audioTick+0x1fc>
 800913c:	20000784 	.word	0x20000784
 8009140:	20001304 	.word	0x20001304
 8009144:	20000e1c 	.word	0x20000e1c
 8009148:	200012c0 	.word	0x200012c0
 800914c:	00000000 	.word	0x00000000

08009150 <audioFrame>:
	betweenBarCounter++;
 8009150:	4931      	ldr	r1, [pc, #196]	; (8009218 <audioFrame+0xc8>)
{
 8009152:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (newBar)
 8009156:	4c31      	ldr	r4, [pc, #196]	; (800921c <audioFrame+0xcc>)
{
 8009158:	4605      	mov	r5, r0
 800915a:	ed2d 8b04 	vpush	{d8-d9}
	betweenBarCounter++;
 800915e:	680b      	ldr	r3, [r1, #0]
{
 8009160:	b083      	sub	sp, #12
	if (newBar)
 8009162:	6822      	ldr	r2, [r4, #0]
	betweenBarCounter++;
 8009164:	3301      	adds	r3, #1
 8009166:	600b      	str	r3, [r1, #0]
	if (newBar)
 8009168:	b162      	cbz	r2, 8009184 <audioFrame+0x34>
		int currentBarBufferL = currentBarBuffer;
 800916a:	4a2d      	ldr	r2, [pc, #180]	; (8009220 <audioFrame+0xd0>)
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 800916c:	482d      	ldr	r0, [pc, #180]	; (8009224 <audioFrame+0xd4>)
		int currentBarBufferL = currentBarBuffer;
 800916e:	6812      	ldr	r2, [r2, #0]
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8009170:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8009174:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
 8009178:	79b7      	ldrb	r7, [r6, #6]
 800917a:	2ffe      	cmp	r7, #254	; 0xfe
 800917c:	f000 820c 	beq.w	8009598 <audioFrame+0x448>
		newBar = 0;
 8009180:	2300      	movs	r3, #0
 8009182:	6023      	str	r3, [r4, #0]
	if (newLevers)
 8009184:	4b28      	ldr	r3, [pc, #160]	; (8009228 <audioFrame+0xd8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	b153      	cbz	r3, 80091a0 <audioFrame+0x50>
		int currentLeverBufferL = currentLeverBuffer;
 800918a:	4a28      	ldr	r2, [pc, #160]	; (800922c <audioFrame+0xdc>)
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 800918c:	234a      	movs	r3, #74	; 0x4a
 800918e:	4f28      	ldr	r7, [pc, #160]	; (8009230 <audioFrame+0xe0>)
 8009190:	6814      	ldr	r4, [r2, #0]
 8009192:	fb03 f404 	mul.w	r4, r3, r4
 8009196:	193a      	adds	r2, r7, r4
 8009198:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 800919c:	29fe      	cmp	r1, #254	; 0xfe
 800919e:	d051      	beq.n	8009244 <audioFrame+0xf4>
	if (codecReady)
 80091a0:	4b24      	ldr	r3, [pc, #144]	; (8009234 <audioFrame+0xe4>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	b39b      	cbz	r3, 800920e <audioFrame+0xbe>
 80091a6:	4c24      	ldr	r4, [pc, #144]	; (8009238 <audioFrame+0xe8>)
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80091a8:	ed9f 8a24 	vldr	s16, [pc, #144]	; 800923c <audioFrame+0xec>
 80091ac:	eb04 0685 	add.w	r6, r4, r5, lsl #2
 80091b0:	f504 7380 	add.w	r3, r4, #256	; 0x100
 80091b4:	4634      	mov	r4, r6
 80091b6:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80091ba:	f506 7601 	add.w	r6, r6, #516	; 0x204
 80091be:	f856 2c04 	ldr.w	r2, [r6, #-4]
			clipCatcher |= audioTick(theSamples);
 80091c2:	4668      	mov	r0, sp
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80091c4:	f856 3b08 	ldr.w	r3, [r6], #8
		for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 80091c8:	3408      	adds	r4, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80091ca:	0212      	lsls	r2, r2, #8
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80091cc:	021b      	lsls	r3, r3, #8
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80091ce:	ee07 2a10 	vmov	s14, r2
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80091d2:	ee07 3a90 	vmov	s15, r3
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80091d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80091da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80091de:	ee27 7a08 	vmul.f32	s14, s14, s16
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80091e2:	ee67 7a88 	vmul.f32	s15, s15, s16
			theSamples[0] = ((float)(audioInBuffer[buffer_offset + i] << 8)) * INV_TWO_TO_31;
 80091e6:	ed8d 7a00 	vstr	s14, [sp]
			theSamples[1] = ((float)(audioInBuffer[buffer_offset + i + 1] << 8)) * INV_TWO_TO_31;
 80091ea:	edcd 7a01 	vstr	s15, [sp, #4]
			clipCatcher |= audioTick(theSamples);
 80091ee:	f7ff fc25 	bl	8008a3c <audioTick>
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 80091f2:	ed9d 7a01 	vldr	s14, [sp, #4]
		for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 80091f6:	42ac      	cmp	r4, r5
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 80091f8:	eddd 7a00 	vldr	s15, [sp]
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 80091fc:	eebe 7ae4 	vcvt.s32.f32	s14, s14, #23
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 8009200:	eefe 7ae4 	vcvt.s32.f32	s15, s15, #23
			audioOutBuffer[buffer_offset + i] = (int32_t)(theSamples[1] * TWO_TO_23);
 8009204:	ed04 7a02 	vstr	s14, [r4, #-8]
			audioOutBuffer[buffer_offset + i + 1] = (int32_t)(theSamples[0] * TWO_TO_23);
 8009208:	ed44 7a01 	vstr	s15, [r4, #-4]
		for (int i = 0; i < (HALF_BUFFER_SIZE); i += 2)
 800920c:	d1d7      	bne.n	80091be <audioFrame+0x6e>
}
 800920e:	b003      	add	sp, #12
 8009210:	ecbd 8b04 	vpop	{d8-d9}
 8009214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009218:	20000c74 	.word	0x20000c74
 800921c:	200013c4 	.word	0x200013c4
 8009220:	20000e10 	.word	0x20000e10
 8009224:	30008400 	.word	0x30008400
 8009228:	200013c8 	.word	0x200013c8
 800922c:	20017b48 	.word	0x20017b48
 8009230:	30008460 	.word	0x30008460
 8009234:	20000e0c 	.word	0x20000e0c
 8009238:	30000000 	.word	0x30000000
 800923c:	2ffffff6 	.word	0x2ffffff6
 8009240:	3b808081 	.word	0x3b808081
		if ((SPI_LEVERS[72 + (currentLeverBufferL * 74)] == 254) && (SPI_LEVERS[73 + (currentLeverBufferL * 74)] == 253))
 8009244:	f892 3049 	ldrb.w	r3, [r2, #73]	; 0x49
 8009248:	2bfd      	cmp	r3, #253	; 0xfd
 800924a:	d1a9      	bne.n	80091a0 <audioFrame+0x50>
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 800924c:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
 8009250:	ed5f 7a05 	vldr	s15, [pc, #-20]	; 8009240 <audioFrame+0xf0>
 8009254:	ee07 3a10 	vmov	s14, r3
 8009258:	49c1      	ldr	r1, [pc, #772]	; (8009560 <audioFrame+0x410>)
 800925a:	f892 3038 	ldrb.w	r3, [r2, #56]	; 0x38
 800925e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 8009262:	ed9f 8bbd 	vldr	d8, [pc, #756]	; 8009558 <audioFrame+0x408>
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009266:	ee27 7a27 	vmul.f32	s14, s14, s15
 800926a:	ed81 7a01 	vstr	s14, [r1, #4]
 800926e:	ee07 3a10 	vmov	s14, r3
 8009272:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
 8009276:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800927a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800927e:	ed81 7a00 	vstr	s14, [r1]
 8009282:	ee07 3a10 	vmov	s14, r3
 8009286:	f892 303b 	ldrb.w	r3, [r2, #59]	; 0x3b
 800928a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800928e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009292:	ed81 7a02 	vstr	s14, [r1, #8]
 8009296:	ee07 3a10 	vmov	s14, r3
 800929a:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 800929e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092a6:	ed81 7a03 	vstr	s14, [r1, #12]
 80092aa:	ee07 3a10 	vmov	s14, r3
 80092ae:	f892 303d 	ldrb.w	r3, [r2, #61]	; 0x3d
 80092b2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092ba:	ed81 7a04 	vstr	s14, [r1, #16]
 80092be:	ee07 3a10 	vmov	s14, r3
 80092c2:	f892 303e 	ldrb.w	r3, [r2, #62]	; 0x3e
 80092c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092ce:	ed81 7a05 	vstr	s14, [r1, #20]
 80092d2:	ee07 3a10 	vmov	s14, r3
 80092d6:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 80092da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092e2:	ed81 7a06 	vstr	s14, [r1, #24]
 80092e6:	ee07 3a10 	vmov	s14, r3
 80092ea:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
 80092ee:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80092f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80092f6:	ed81 7a07 	vstr	s14, [r1, #28]
 80092fa:	ee07 3a10 	vmov	s14, r3
 80092fe:	f892 3041 	ldrb.w	r3, [r2, #65]	; 0x41
 8009302:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009306:	ee27 7a27 	vmul.f32	s14, s14, s15
 800930a:	ed81 7a08 	vstr	s14, [r1, #32]
 800930e:	ee07 3a10 	vmov	s14, r3
 8009312:	f892 3042 	ldrb.w	r3, [r2, #66]	; 0x42
 8009316:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800931a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800931e:	ed81 7a09 	vstr	s14, [r1, #36]	; 0x24
 8009322:	ee07 3a10 	vmov	s14, r3
 8009326:	f892 3043 	ldrb.w	r3, [r2, #67]	; 0x43
 800932a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800932e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009332:	ed81 7a0a 	vstr	s14, [r1, #40]	; 0x28
 8009336:	ee07 3a10 	vmov	s14, r3
 800933a:	f892 3044 	ldrb.w	r3, [r2, #68]	; 0x44
 800933e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009342:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009346:	ed81 7a0b 	vstr	s14, [r1, #44]	; 0x2c
 800934a:	ee07 3a10 	vmov	s14, r3
 800934e:	f892 3045 	ldrb.w	r3, [r2, #69]	; 0x45
 8009352:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8009356:	ee27 7a27 	vmul.f32	s14, s14, s15
 800935a:	ed81 7a0c 	vstr	s14, [r1, #48]	; 0x30
 800935e:	ee07 3a10 	vmov	s14, r3
 8009362:	f892 3046 	ldrb.w	r3, [r2, #70]	; 0x46
 8009366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800936a:	ee06 3a90 	vmov	s13, r3
 800936e:	f892 3047 	ldrb.w	r3, [r2, #71]	; 0x47
 8009372:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009376:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800937a:	ed81 7a0d 	vstr	s14, [r1, #52]	; 0x34
 800937e:	ee07 3a10 	vmov	s14, r3
 8009382:	ee66 6aa7 	vmul.f32	s13, s13, s15
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009386:	4b77      	ldr	r3, [pc, #476]	; (8009564 <audioFrame+0x414>)
				params[i] = SPI_LEVERS[(i + 56) + (currentLeverBuffer * 74)] * 0.003921568627451f; //scaled 0.0 to 1.0
 8009388:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800938c:	edc1 6a0e 	vstr	s13, [r1, #56]	; 0x38
 8009390:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009394:	edc1 7a0f 	vstr	s15, [r1, #60]	; 0x3c
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 800939e:	5d11      	ldrb	r1, [r2, r4]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80093a0:	681a      	ldr	r2, [r3, #0]
 80093a2:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80093a6:	4422      	add	r2, r4
 80093a8:	7856      	ldrb	r6, [r2, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80093aa:	681a      	ldr	r2, [r3, #0]
 80093ac:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80093b0:	4422      	add	r2, r4
 80093b2:	f892 c002 	ldrb.w	ip, [r2, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80093bc:	4422      	add	r2, r4
 80093be:	78d0      	ldrb	r0, [r2, #3]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80093c0:	2200      	movs	r2, #0
 80093c2:	f361 0207 	bfi	r2, r1, #0, #8
 80093c6:	6819      	ldr	r1, [r3, #0]
 80093c8:	3101      	adds	r1, #1
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80093ca:	f366 220f 	bfi	r2, r6, #8, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80093ce:	eb07 0181 	add.w	r1, r7, r1, lsl #2
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80093d2:	f36c 4217 	bfi	r2, ip, #16, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80093d6:	f811 a004 	ldrb.w	sl, [r1, r4]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80093da:	f360 621f 	bfi	r2, r0, #24, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80093de:	6819      	ldr	r1, [r3, #0]
				stringMIDIPitches[i] = tempBreak.f;
 80093e0:	4696      	mov	lr, r2
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 80093e2:	f36a 0207 	bfi	r2, sl, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80093e6:	3101      	adds	r1, #1
 80093e8:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80093ec:	4421      	add	r1, r4
 80093ee:	f891 9001 	ldrb.w	r9, [r1, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80093f2:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 80093f4:	f369 220f 	bfi	r2, r9, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80093f8:	3101      	adds	r1, #1
 80093fa:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80093fe:	4421      	add	r1, r4
 8009400:	f891 8002 	ldrb.w	r8, [r1, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009404:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009406:	f368 4217 	bfi	r2, r8, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 800940a:	3101      	adds	r1, #1
 800940c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8009410:	4421      	add	r1, r4
 8009412:	f891 c003 	ldrb.w	ip, [r1, #3]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009416:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009418:	f36c 621f 	bfi	r2, ip, #24, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 800941c:	3102      	adds	r1, #2
				stringMIDIPitches[i] = tempBreak.f;
 800941e:	4694      	mov	ip, r2
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009420:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8009424:	5d0e      	ldrb	r6, [r1, r4]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009426:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009428:	f366 0207 	bfi	r2, r6, #0, #8
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 800942c:	3102      	adds	r1, #2
 800942e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8009432:	4421      	add	r1, r4
 8009434:	7848      	ldrb	r0, [r1, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009436:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009438:	f360 220f 	bfi	r2, r0, #8, #8
				stringMIDIPitches[i] = tempBreak.f;
 800943c:	484a      	ldr	r0, [pc, #296]	; (8009568 <audioFrame+0x418>)
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800943e:	3102      	adds	r1, #2
				stringMIDIPitches[i] = tempBreak.f;
 8009440:	f8c0 c004 	str.w	ip, [r0, #4]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009444:	eb07 0181 	add.w	r1, r7, r1, lsl #2
				stringMIDIPitches[i] = tempBreak.f;
 8009448:	f8c0 e000 	str.w	lr, [r0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800944c:	4421      	add	r1, r4
 800944e:	f891 8002 	ldrb.w	r8, [r1, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009452:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009454:	f368 4217 	bfi	r2, r8, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 8009458:	3102      	adds	r1, #2
 800945a:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 800945e:	4421      	add	r1, r4
 8009460:	78c9      	ldrb	r1, [r1, #3]
 8009462:	f361 621f 	bfi	r2, r1, #24, #8
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009466:	6819      	ldr	r1, [r3, #0]
 8009468:	3103      	adds	r1, #3
				stringMIDIPitches[i] = tempBreak.f;
 800946a:	4694      	mov	ip, r2
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 800946c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
				stringMIDIPitches[i] = tempBreak.f;
 8009470:	f8c0 c008 	str.w	ip, [r0, #8]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009474:	5d0e      	ldrb	r6, [r1, r4]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009476:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[0] = SPI_LEVERS[((i+firstString) * 4) + (currentLeverBufferL * 74)];
 8009478:	f366 0207 	bfi	r2, r6, #0, #8
 800947c:	4e3b      	ldr	r6, [pc, #236]	; (800956c <audioFrame+0x41c>)
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 800947e:	3103      	adds	r1, #3
 8009480:	f106 0910 	add.w	r9, r6, #16
 8009484:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 8009488:	4421      	add	r1, r4
 800948a:	f891 8001 	ldrb.w	r8, [r1, #1]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 800948e:	6819      	ldr	r1, [r3, #0]
				tempBreak.b[1] = SPI_LEVERS[((i+firstString) * 4) + 1 + (currentLeverBufferL * 74)];
 8009490:	f368 220f 	bfi	r2, r8, #8, #8
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 8009494:	f104 0831 	add.w	r8, r4, #49	; 0x31
 8009498:	3103      	adds	r1, #3
 800949a:	44b8      	add	r8, r7
 800949c:	eb07 0181 	add.w	r1, r7, r1, lsl #2
 80094a0:	4421      	add	r1, r4
 80094a2:	7889      	ldrb	r1, [r1, #2]
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80094a4:	681b      	ldr	r3, [r3, #0]
				tempBreak.b[2] = SPI_LEVERS[((i+firstString) * 4) + 2 + (currentLeverBufferL * 74)];
 80094a6:	f361 4217 	bfi	r2, r1, #16, #8
				tempBreak.b[3] = SPI_LEVERS[((i+firstString) * 4) + 3 + (currentLeverBufferL * 74)];
 80094aa:	3303      	adds	r3, #3
 80094ac:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80094b0:	4423      	add	r3, r4
 80094b2:	78db      	ldrb	r3, [r3, #3]
 80094b4:	f363 621f 	bfi	r2, r3, #24, #8
				stringMIDIPitches[i] = tempBreak.f;
 80094b8:	60c2      	str	r2, [r0, #12]
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 80094ba:	f818 3b01 	ldrb.w	r3, [r8], #1
 80094be:	4630      	mov	r0, r6
			for (int i = 0; i < 4; i++)
 80094c0:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[(i + 49) + (currentLeverBufferL * 74)] * 0.0078125)); //   divided by 128
 80094c2:	ee00 3a10 	vmov	s0, r3
 80094c6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 80094ca:	ee20 0b08 	vmul.f64	d0, d0, d8
 80094ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80094d2:	f001 fffd 	bl	800b4d0 <tExpSmooth_setDest>
			for (int i = 0; i < 4; i++)
 80094d6:	45b1      	cmp	r9, r6
 80094d8:	d1ef      	bne.n	80094ba <audioFrame+0x36a>
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 80094da:	193b      	adds	r3, r7, r4
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80094dc:	4824      	ldr	r0, [pc, #144]	; (8009570 <audioFrame+0x420>)
			volumePedal = volumePedalInt * 0.0002442002442f;
 80094de:	eddf 7a25 	vldr	s15, [pc, #148]	; 8009574 <audioFrame+0x424>
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 80094e2:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80094e6:	f893 4035 	ldrb.w	r4, [r3, #53]	; 0x35
 80094ea:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
			int modeBit = SPI_LEVERS[48 + (currentLeverBufferL * 74)];
 80094ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80094f2:	eb01 2104 	add.w	r1, r1, r4, lsl #8
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 80094f6:	f893 4037 	ldrb.w	r4, [r3, #55]	; 0x37
			neck = (modeBit >> 6) & 1;
 80094fa:	f3c2 1680 	ubfx	r6, r2, #6, #1
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 80094fe:	b28b      	uxth	r3, r1
			neck = (modeBit >> 6) & 1;
 8009500:	491d      	ldr	r1, [pc, #116]	; (8009578 <audioFrame+0x428>)
			volumePedalInt = ((uint16_t)SPI_LEVERS[53 + (currentLeverBufferL * 74)] << 8) + ((uint16_t)SPI_LEVERS[54 + (currentLeverBufferL * 74)] & 0xff);
 8009502:	8003      	strh	r3, [r0, #0]
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009504:	8803      	ldrh	r3, [r0, #0]
			neck = (modeBit >> 6) & 1;
 8009506:	600e      	str	r6, [r1, #0]
			dualSlider = (modeBit >> 5) & 1;
 8009508:	f3c2 1640 	ubfx	r6, r2, #5, #1
			volumePedal = volumePedalInt * 0.0002442002442f;
 800950c:	b29b      	uxth	r3, r3
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 800950e:	481b      	ldr	r0, [pc, #108]	; (800957c <audioFrame+0x42c>)
			volumePedal = volumePedalInt * 0.0002442002442f;
 8009510:	ee00 3a10 	vmov	s0, r3
 8009514:	4b1a      	ldr	r3, [pc, #104]	; (8009580 <audioFrame+0x430>)
 8009516:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800951a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800951e:	ed83 0a00 	vstr	s0, [r3]
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 8009522:	f002 030f 	and.w	r3, r2, #15
			edit = (modeBit >> 4) & 1;
 8009526:	f3c2 1200 	ubfx	r2, r2, #4, #1
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 800952a:	1e59      	subs	r1, r3, #1
 800952c:	ee07 1a90 	vmov	s15, r1
			dualSlider = (modeBit >> 5) & 1;
 8009530:	4914      	ldr	r1, [pc, #80]	; (8009584 <audioFrame+0x434>)
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 8009532:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			dualSlider = (modeBit >> 5) & 1;
 8009536:	600e      	str	r6, [r1, #0]
			edit = (modeBit >> 4) & 1;
 8009538:	4913      	ldr	r1, [pc, #76]	; (8009588 <audioFrame+0x438>)
 800953a:	600a      	str	r2, [r1, #0]
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 800953c:	ee67 7a87 	vmul.f32	s15, s15, s14
			voice = SPI_LEVERS[55 + (currentLeverBufferL * 74)];
 8009540:	4a12      	ldr	r2, [pc, #72]	; (800958c <audioFrame+0x43c>)
 8009542:	6014      	str	r4, [r2, #0]
			octave = (((int32_t) (modeBit & 15) - 1 ) * 12.0f);
 8009544:	4a12      	ldr	r2, [pc, #72]	; (8009590 <audioFrame+0x440>)
 8009546:	edc2 7a00 	vstr	s15, [r2]
			octaveIndex = (modeBit & 15);
 800954a:	4a12      	ldr	r2, [pc, #72]	; (8009594 <audioFrame+0x444>)
 800954c:	6013      	str	r3, [r2, #0]
			tExpSmooth_setDest(&volumeSmoother,volumePedal);
 800954e:	f001 ffbf 	bl	800b4d0 <tExpSmooth_setDest>
 8009552:	e625      	b.n	80091a0 <audioFrame+0x50>
 8009554:	f3af 8000 	nop.w
 8009558:	00000000 	.word	0x00000000
 800955c:	3f800000 	.word	0x3f800000
 8009560:	200013d8 	.word	0x200013d8
 8009564:	200012c0 	.word	0x200012c0
 8009568:	20017a18 	.word	0x20017a18
 800956c:	20001314 	.word	0x20001314
 8009570:	20017ab0 	.word	0x20017ab0
 8009574:	39800801 	.word	0x39800801
 8009578:	200013c0 	.word	0x200013c0
 800957c:	20017ab4 	.word	0x20017ab4
 8009580:	20017aac 	.word	0x20017aac
 8009584:	20001258 	.word	0x20001258
 8009588:	2000125c 	.word	0x2000125c
 800958c:	20017aa8 	.word	0x20017aa8
 8009590:	20000058 	.word	0x20000058
 8009594:	2000005c 	.word	0x2000005c
		if ((SPI_RX[6 + (8 * currentBarBufferL)] == 254) && (SPI_RX[7 + (8 * currentBarBufferL)] == 253))
 8009598:	79f6      	ldrb	r6, [r6, #7]
 800959a:	2efd      	cmp	r6, #253	; 0xfd
 800959c:	f47f adf0 	bne.w	8009180 <audioFrame+0x30>
			betweenBarCounts[(currentBarCount++) % 100] = betweenBarCounter;
 80095a0:	f8df 828c 	ldr.w	r8, [pc, #652]	; 8009830 <audioFrame+0x6e0>
 80095a4:	f04f 0a64 	mov.w	sl, #100	; 0x64
 80095a8:	4f98      	ldr	r7, [pc, #608]	; (800980c <audioFrame+0x6bc>)
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 80095aa:	4484      	add	ip, r0
			betweenBarCounts[(currentBarCount++) % 100] = betweenBarCounter;
 80095ac:	f8d8 6000 	ldr.w	r6, [r8]
			if (betweenBarCounter > betweenBarMaximum)
 80095b0:	f8df e280 	ldr.w	lr, [pc, #640]	; 8009834 <audioFrame+0x6e4>
			betweenBarCounts[(currentBarCount++) % 100] = betweenBarCounter;
 80095b4:	fb87 7906 	smull	r7, r9, r7, r6
 80095b8:	17f7      	asrs	r7, r6, #31
 80095ba:	ebc7 1769 	rsb	r7, r7, r9, asr #5
 80095be:	fb0a 6717 	mls	r7, sl, r7, r6
 80095c2:	3601      	adds	r6, #1
 80095c4:	f8c8 6000 	str.w	r6, [r8]
 80095c8:	4e91      	ldr	r6, [pc, #580]	; (8009810 <audioFrame+0x6c0>)
 80095ca:	f846 3027 	str.w	r3, [r6, r7, lsl #2]
			if (betweenBarCounter > betweenBarMaximum)
 80095ce:	f8de 6000 	ldr.w	r6, [lr]
 80095d2:	42b3      	cmp	r3, r6
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 80095d4:	f89c 6001 	ldrb.w	r6, [ip, #1]
				betweenBarMaximum = betweenBarCounter;
 80095d8:	bfc8      	it	gt
 80095da:	f8ce 3000 	strgt.w	r3, [lr]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80095de:	4b8d      	ldr	r3, [pc, #564]	; (8009814 <audioFrame+0x6c4>)
 80095e0:	ed93 7a02 	vldr	s14, [r3, #8]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80095e4:	edd3 6a01 	vldr	s13, [r3, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80095e8:	edd3 7a03 	vldr	s15, [r3, #12]
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80095ec:	ed93 6a00 	vldr	s12, [r3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80095f0:	ee37 4a66 	vsub.f32	s8, s14, s13
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 80095f4:	f810 3032 	ldrb.w	r3, [r0, r2, lsl #3]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80095f8:	ee77 4ac7 	vsub.f32	s9, s15, s14
 80095fc:	ee76 3ac6 	vsub.f32	s7, s13, s12
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009600:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8009604:	0093      	lsls	r3, r2, #2
			betweenBarCounter = 0;
 8009606:	2200      	movs	r2, #0
 8009608:	600a      	str	r2, [r1, #0]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 800960a:	f64f 71ff 	movw	r1, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 800960e:	4a82      	ldr	r2, [pc, #520]	; (8009818 <audioFrame+0x6c8>)
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009610:	428e      	cmp	r6, r1
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009612:	6016      	str	r6, [r2, #0]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009614:	f000 80a0 	beq.w	8009758 <audioFrame+0x608>
 8009618:	ee07 6a90 	vmov	s15, r6
 800961c:	497f      	ldr	r1, [pc, #508]	; (800981c <audioFrame+0x6cc>)
 800961e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009622:	ed91 5a00 	vldr	s10, [r1]
 8009626:	eef4 7ac5 	vcmpe.f32	s15, s10
 800962a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800962e:	f300 8093 	bgt.w	8009758 <audioFrame+0x608>
				else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 8009632:	edd1 5a04 	vldr	s11, [r1, #16]
 8009636:	eef4 7ae5 	vcmpe.f32	s15, s11
 800963a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800963e:	f280 80b8 	bge.w	80097b2 <audioFrame+0x662>
				else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8009642:	ed91 5a08 	vldr	s10, [r1, #32]
 8009646:	eef4 7ac5 	vcmpe.f32	s15, s10
 800964a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800964e:	f2c0 80bf 	blt.w	80097d0 <audioFrame+0x680>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8009652:	ee77 7ae5 	vsub.f32	s15, s15, s11
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8009656:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8009838 <audioFrame+0x6e8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800965a:	ee75 5a65 	vsub.f32	s11, s10, s11
 800965e:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 8009662:	eef0 7a66 	vmov.f32	s15, s13
 8009666:	eee4 7a05 	vfma.f32	s15, s8, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 800966a:	edc8 7a00 	vstr	s15, [r8]
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 800966e:	3301      	adds	r3, #1
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009670:	f64f 71ff 	movw	r1, #65535	; 0xffff
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009674:	eb00 0643 	add.w	r6, r0, r3, lsl #1
 8009678:	f810 0013 	ldrb.w	r0, [r0, r3, lsl #1]
 800967c:	7873      	ldrb	r3, [r6, #1]
 800967e:	eb03 2300 	add.w	r3, r3, r0, lsl #8
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009682:	428b      	cmp	r3, r1
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL)] << 8) + ((uint16_t)SPI_RX[(j * 2) + (8 * currentBarBufferL) + 1] & 0xff);
 8009684:	6053      	str	r3, [r2, #4]
				if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8009686:	d07d      	beq.n	8009784 <audioFrame+0x634>
 8009688:	ee07 3a90 	vmov	s15, r3
 800968c:	4a63      	ldr	r2, [pc, #396]	; (800981c <audioFrame+0x6cc>)
 800968e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009692:	ed92 5a01 	vldr	s10, [r2, #4]
 8009696:	eeb4 5ae7 	vcmpe.f32	s10, s15
 800969a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969e:	d471      	bmi.n	8009784 <audioFrame+0x634>
				else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 80096a0:	edd2 5a05 	vldr	s11, [r2, #20]
 80096a4:	eef4 5ae7 	vcmpe.f32	s11, s15
 80096a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096ac:	d86f      	bhi.n	800978e <audioFrame+0x63e>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80096ae:	ee77 7ac5 	vsub.f32	s15, s15, s10
 80096b2:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80096b6:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 80096ba:	eea3 6a87 	vfma.f32	s12, s7, s14
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80096be:	ed88 6a01 	vstr	s12, [r8, #4]
			for (int j = 0; j < 2; j++)
 80096c2:	f8df a178 	ldr.w	sl, [pc, #376]	; 800983c <audioFrame+0x6ec>
					if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80096c6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80096ca:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8009840 <audioFrame+0x6f0>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80096ce:	f04f 0b00 	mov.w	fp, #0
				if (dualSlider)
 80096d2:	f8da 2000 	ldr.w	r2, [sl]
 80096d6:	4f52      	ldr	r7, [pc, #328]	; (8009820 <audioFrame+0x6d0>)
					myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * 0.090909090909091f);
 80096d8:	ed9f 9a52 	vldr	s18, [pc, #328]	; 8009824 <audioFrame+0x6d4>
 80096dc:	4e52      	ldr	r6, [pc, #328]	; (8009828 <audioFrame+0x6d8>)
				if (dualSlider)
 80096de:	b3c2      	cbz	r2, 8009752 <audioFrame+0x602>
					if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80096e0:	ed98 0a00 	vldr	s0, [r8]
 80096e4:	edd8 0a01 	vldr	s1, [r8, #4]
 80096e8:	eeb4 0a68 	vcmp.f32	s0, s17
 80096ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096f0:	d139      	bne.n	8009766 <audioFrame+0x616>
 80096f2:	eef4 0ae8 	vcmpe.f32	s1, s17
 80096f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096fa:	d503      	bpl.n	8009704 <audioFrame+0x5b4>
						stringMappedPositions[0] = stringMappedPositions[1];
 80096fc:	eeb0 0a60 	vmov.f32	s0, s1
 8009700:	edc8 0a00 	vstr	s1, [r8]
					myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * 0.090909090909091f);
 8009704:	4b49      	ldr	r3, [pc, #292]	; (800982c <audioFrame+0x6dc>)
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	eb02 030b 	add.w	r3, r2, fp
 800970c:	ee01 3a10 	vmov	s2, r3
 8009710:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8009714:	ee21 1a09 	vmul.f32	s2, s2, s18
 8009718:	f002 f9e0 	bl	800badc <LEAF_interpolation_linear>
 800971c:	eeb0 8a40 	vmov.f32	s16, s0
				float tempFreq = (1.0f / myMappedPos) * mtof(stringMIDIPitches[i]);
 8009720:	ecb9 0a01 	vldmia	r9!, {s0}
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8009724:	f10b 0b01 	add.w	fp, fp, #1
				float tempFreq = (1.0f / myMappedPos) * mtof(stringMIDIPitches[i]);
 8009728:	f002 f9ec 	bl	800bb04 <mtof>
				tempFreq = tSlide_tick(&freqSlider[i], tempFreq);
 800972c:	4638      	mov	r0, r7
 800972e:	ee80 0a08 	vdiv.f32	s0, s0, s16
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 8009732:	3704      	adds	r7, #4
				tempFreq = tSlide_tick(&freqSlider[i], tempFreq);
 8009734:	f001 ff06 	bl	800b544 <tSlide_tick>
				tExpSmooth_setDest(&stringFreqSmoothers[i], tempFreq);
 8009738:	4630      	mov	r0, r6
 800973a:	f001 fec9 	bl	800b4d0 <tExpSmooth_setDest>
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 800973e:	f1bb 0f04 	cmp.w	fp, #4
 8009742:	f106 0604 	add.w	r6, r6, #4
 8009746:	f43f ad1b 	beq.w	8009180 <audioFrame+0x30>
				if (dualSlider)
 800974a:	f8da 2000 	ldr.w	r2, [sl]
 800974e:	2a00      	cmp	r2, #0
 8009750:	d1c6      	bne.n	80096e0 <audioFrame+0x590>
					myMappedPos =  stringMappedPositions[0];
 8009752:	ed98 8a00 	vldr	s16, [r8]
 8009756:	e7e3      	b.n	8009720 <audioFrame+0x5d0>
					stringMappedPositions[j] = 1.0f;
 8009758:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800975c:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8009838 <audioFrame+0x6e8>
 8009760:	f8c8 1000 	str.w	r1, [r8]
 8009764:	e783      	b.n	800966e <audioFrame+0x51e>
					else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 8009766:	eef4 0a68 	vcmp.f32	s1, s17
 800976a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800976e:	d1c9      	bne.n	8009704 <audioFrame+0x5b4>
 8009770:	eeb4 0a68 	vcmp.f32	s0, s17
 8009774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009778:	d5c4      	bpl.n	8009704 <audioFrame+0x5b4>
						stringMappedPositions[1] = stringMappedPositions[0];
 800977a:	eef0 0a40 	vmov.f32	s1, s0
 800977e:	ed88 0a01 	vstr	s0, [r8, #4]
 8009782:	e7bf      	b.n	8009704 <audioFrame+0x5b4>
					stringMappedPositions[j] = 1.0f;
 8009784:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8009788:	f8c8 3004 	str.w	r3, [r8, #4]
 800978c:	e799      	b.n	80096c2 <audioFrame+0x572>
				else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 800978e:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 8009792:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8009796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979a:	d82a      	bhi.n	80097f2 <audioFrame+0x6a2>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800979c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80097a0:	ee36 6a65 	vsub.f32	s12, s12, s11
 80097a4:	ee87 7a86 	vdiv.f32	s14, s15, s12
 80097a8:	eee4 6a07 	vfma.f32	s13, s8, s14
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80097ac:	edc8 6a01 	vstr	s13, [r8, #4]
 80097b0:	e787      	b.n	80096c2 <audioFrame+0x572>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80097b2:	ee77 7ac5 	vsub.f32	s15, s15, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80097b6:	f8df 8080 	ldr.w	r8, [pc, #128]	; 8009838 <audioFrame+0x6e8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80097ba:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80097be:	ee87 5aa5 	vdiv.f32	s10, s15, s11
 80097c2:	eef0 7a46 	vmov.f32	s15, s12
 80097c6:	eee3 7a85 	vfma.f32	s15, s7, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80097ca:	edc8 7a00 	vstr	s15, [r8]
 80097ce:	e74e      	b.n	800966e <audioFrame+0x51e>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80097d0:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 80097d4:	ee77 7ac5 	vsub.f32	s15, s15, s10
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80097d8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8009838 <audioFrame+0x6e8>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80097dc:	ee35 5ac5 	vsub.f32	s10, s11, s10
 80097e0:	eec7 5a85 	vdiv.f32	s11, s15, s10
 80097e4:	eef0 7a47 	vmov.f32	s15, s14
 80097e8:	eee4 7aa5 	vfma.f32	s15, s9, s11
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80097ec:	edc8 7a00 	vstr	s15, [r8]
 80097f0:	e73d      	b.n	800966e <audioFrame+0x51e>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80097f2:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 80097f6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80097fa:	ee36 6ac6 	vsub.f32	s12, s13, s12
 80097fe:	eec7 6a86 	vdiv.f32	s13, s15, s12
 8009802:	eea4 7aa6 	vfma.f32	s14, s9, s13
					stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8009806:	ed88 7a01 	vstr	s14, [r8, #4]
 800980a:	e75a      	b.n	80096c2 <audioFrame+0x572>
 800980c:	51eb851f 	.word	0x51eb851f
 8009810:	20000c78 	.word	0x20000c78
 8009814:	20000048 	.word	0x20000048
 8009818:	20017a68 	.word	0x20017a68
 800981c:	20000008 	.word	0x20000008
 8009820:	200012c4 	.word	0x200012c4
 8009824:	3dba2e8c 	.word	0x3dba2e8c
 8009828:	20017984 	.word	0x20017984
 800982c:	200012c0 	.word	0x200012c0
 8009830:	20000e14 	.word	0x20000e14
 8009834:	20000e08 	.word	0x20000e08
 8009838:	20017a28 	.word	0x20017a28
 800983c:	20001258 	.word	0x20001258
 8009840:	20017a18 	.word	0x20017a18

08009844 <HAL_SPI_RxCpltCallback>:



void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi5)
 8009844:	4b2e      	ldr	r3, [pc, #184]	; (8009900 <HAL_SPI_RxCpltCallback+0xbc>)
 8009846:	4298      	cmp	r0, r3
{
 8009848:	b570      	push	{r4, r5, r6, lr}
 800984a:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 800984c:	d012      	beq.n	8009874 <HAL_SPI_RxCpltCallback+0x30>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 800984e:	4b2d      	ldr	r3, [pc, #180]	; (8009904 <HAL_SPI_RxCpltCallback+0xc0>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d009      	beq.n	8009868 <HAL_SPI_RxCpltCallback+0x24>
		*/
		newBar = 1;
		currentBarBuffer = 1;
	}

	if (hspi == &hspi1)
 8009854:	4b2c      	ldr	r3, [pc, #176]	; (8009908 <HAL_SPI_RxCpltCallback+0xc4>)
 8009856:	429c      	cmp	r4, r3
 8009858:	d000      	beq.n	800985c <HAL_SPI_RxCpltCallback+0x18>
		}


	*/

}
 800985a:	bd70      	pop	{r4, r5, r6, pc}
		newLevers = 1;
 800985c:	2301      	movs	r3, #1
 800985e:	492b      	ldr	r1, [pc, #172]	; (800990c <HAL_SPI_RxCpltCallback+0xc8>)
		currentLeverBuffer = 1;
 8009860:	4a2b      	ldr	r2, [pc, #172]	; (8009910 <HAL_SPI_RxCpltCallback+0xcc>)
		newLevers = 1;
 8009862:	600b      	str	r3, [r1, #0]
		currentLeverBuffer = 1;
 8009864:	6013      	str	r3, [r2, #0]
}
 8009866:	bd70      	pop	{r4, r5, r6, pc}
		newBar = 1;
 8009868:	2301      	movs	r3, #1
 800986a:	492a      	ldr	r1, [pc, #168]	; (8009914 <HAL_SPI_RxCpltCallback+0xd0>)
		currentBarBuffer = 1;
 800986c:	4a2a      	ldr	r2, [pc, #168]	; (8009918 <HAL_SPI_RxCpltCallback+0xd4>)
		newBar = 1;
 800986e:	600b      	str	r3, [r1, #0]
		currentBarBuffer = 1;
 8009870:	6013      	str	r3, [r2, #0]
 8009872:	e7ef      	b.n	8009854 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8009874:	4b29      	ldr	r3, [pc, #164]	; (800991c <HAL_SPI_RxCpltCallback+0xd8>)
		currentPluckBuffer = 1;
 8009876:	2001      	movs	r0, #1
 8009878:	4929      	ldr	r1, [pc, #164]	; (8009920 <HAL_SPI_RxCpltCallback+0xdc>)
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 800987a:	7e9a      	ldrb	r2, [r3, #26]
		currentPluckBuffer = 1;
 800987c:	6008      	str	r0, [r1, #0]
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 800987e:	2afe      	cmp	r2, #254	; 0xfe
 8009880:	d008      	beq.n	8009894 <HAL_SPI_RxCpltCallback+0x50>
		newPluck = 1;
 8009882:	4b28      	ldr	r3, [pc, #160]	; (8009924 <HAL_SPI_RxCpltCallback+0xe0>)
 8009884:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8009886:	2234      	movs	r2, #52	; 0x34
 8009888:	4924      	ldr	r1, [pc, #144]	; (800991c <HAL_SPI_RxCpltCallback+0xd8>)
		newPluck = 1;
 800988a:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800988c:	481c      	ldr	r0, [pc, #112]	; (8009900 <HAL_SPI_RxCpltCallback+0xbc>)
 800988e:	f7fc fb9f 	bl	8005fd0 <HAL_SPI_Receive_DMA>
 8009892:	e7dc      	b.n	800984e <HAL_SPI_RxCpltCallback+0xa>
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8009894:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8009898:	2afd      	cmp	r2, #253	; 0xfd
 800989a:	d1f2      	bne.n	8009882 <HAL_SPI_RxCpltCallback+0x3e>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBuffer)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBuffer)];
 800989c:	4a22      	ldr	r2, [pc, #136]	; (8009928 <HAL_SPI_RxCpltCallback+0xe4>)
 800989e:	6810      	ldr	r0, [r2, #0]
 80098a0:	6811      	ldr	r1, [r2, #0]
 80098a2:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80098a6:	310e      	adds	r1, #14
 80098a8:	7ec5      	ldrb	r5, [r0, #27]
 80098aa:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 80098ae:	6811      	ldr	r1, [r2, #0]
 80098b0:	eb00 2005 	add.w	r0, r0, r5, lsl #8
 80098b4:	6815      	ldr	r5, [r2, #0]
 80098b6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80098ba:	350f      	adds	r5, #15
 80098bc:	7f4e      	ldrb	r6, [r1, #29]
 80098be:	f813 1015 	ldrb.w	r1, [r3, r5, lsl #1]
 80098c2:	6815      	ldr	r5, [r2, #0]
 80098c4:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 80098c8:	6816      	ldr	r6, [r2, #0]
 80098ca:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80098ce:	3610      	adds	r6, #16
 80098d0:	f895 c01f 	ldrb.w	ip, [r5, #31]
 80098d4:	f813 5016 	ldrb.w	r5, [r3, r6, lsl #1]
 80098d8:	6816      	ldr	r6, [r2, #0]
 80098da:	6812      	ldr	r2, [r2, #0]
 80098dc:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80098e0:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 80098e4:	3211      	adds	r2, #17
 80098e6:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80098ea:	f89c 3021 	ldrb.w	r3, [ip, #33]	; 0x21
 80098ee:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80098f2:	4b0e      	ldr	r3, [pc, #56]	; (800992c <HAL_SPI_RxCpltCallback+0xe8>)
 80098f4:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80098f8:	e9c3 0100 	strd	r0, r1, [r3]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80098fc:	e7c1      	b.n	8009882 <HAL_SPI_RxCpltCallback+0x3e>
 80098fe:	bf00      	nop
 8009900:	20018080 	.word	0x20018080
 8009904:	20017ff8 	.word	0x20017ff8
 8009908:	20017f70 	.word	0x20017f70
 800990c:	200013c8 	.word	0x200013c8
 8009910:	20017b48 	.word	0x20017b48
 8009914:	200013c4 	.word	0x200013c4
 8009918:	20000e10 	.word	0x20000e10
 800991c:	30008420 	.word	0x30008420
 8009920:	20000e18 	.word	0x20000e18
 8009924:	200013cc 	.word	0x200013cc
 8009928:	200012c0 	.word	0x200012c0
 800992c:	200179e8 	.word	0x200179e8

08009930 <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	if (hspi == &hspi5)
 8009930:	4b2e      	ldr	r3, [pc, #184]	; (80099ec <HAL_SPI_RxHalfCpltCallback+0xbc>)
 8009932:	4298      	cmp	r0, r3
{
 8009934:	b470      	push	{r4, r5, r6}
	if (hspi == &hspi5)
 8009936:	d007      	beq.n	8009948 <HAL_SPI_RxHalfCpltCallback+0x18>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 8009938:	4b2d      	ldr	r3, [pc, #180]	; (80099f0 <HAL_SPI_RxHalfCpltCallback+0xc0>)
 800993a:	4298      	cmp	r0, r3
 800993c:	d011      	beq.n	8009962 <HAL_SPI_RxHalfCpltCallback+0x32>
		}
		*/
		newBar = 1;
		currentBarBuffer = 0;
	}
	if (hspi == &hspi1)
 800993e:	4b2d      	ldr	r3, [pc, #180]	; (80099f4 <HAL_SPI_RxHalfCpltCallback+0xc4>)
 8009940:	4298      	cmp	r0, r3
 8009942:	d017      	beq.n	8009974 <HAL_SPI_RxHalfCpltCallback+0x44>
		}
		*/
		newLevers = 1;
		currentLeverBuffer = 0;
	}
}
 8009944:	bc70      	pop	{r4, r5, r6}
 8009946:	4770      	bx	lr
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8009948:	4b2b      	ldr	r3, [pc, #172]	; (80099f8 <HAL_SPI_RxHalfCpltCallback+0xc8>)
		currentPluckBuffer = 0;
 800994a:	2400      	movs	r4, #0
 800994c:	492b      	ldr	r1, [pc, #172]	; (80099fc <HAL_SPI_RxHalfCpltCallback+0xcc>)
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 800994e:	781a      	ldrb	r2, [r3, #0]
		currentPluckBuffer = 0;
 8009950:	600c      	str	r4, [r1, #0]
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8009952:	2afe      	cmp	r2, #254	; 0xfe
 8009954:	d016      	beq.n	8009984 <HAL_SPI_RxHalfCpltCallback+0x54>
		newPluck = 1;
 8009956:	4b2a      	ldr	r3, [pc, #168]	; (8009a00 <HAL_SPI_RxHalfCpltCallback+0xd0>)
 8009958:	2201      	movs	r2, #1
 800995a:	601a      	str	r2, [r3, #0]
	if (hspi == &hspi2)
 800995c:	4b24      	ldr	r3, [pc, #144]	; (80099f0 <HAL_SPI_RxHalfCpltCallback+0xc0>)
 800995e:	4298      	cmp	r0, r3
 8009960:	d1ed      	bne.n	800993e <HAL_SPI_RxHalfCpltCallback+0xe>
		currentBarBuffer = 0;
 8009962:	4b28      	ldr	r3, [pc, #160]	; (8009a04 <HAL_SPI_RxHalfCpltCallback+0xd4>)
 8009964:	2200      	movs	r2, #0
		newBar = 1;
 8009966:	4928      	ldr	r1, [pc, #160]	; (8009a08 <HAL_SPI_RxHalfCpltCallback+0xd8>)
 8009968:	2401      	movs	r4, #1
		currentBarBuffer = 0;
 800996a:	601a      	str	r2, [r3, #0]
	if (hspi == &hspi1)
 800996c:	4b21      	ldr	r3, [pc, #132]	; (80099f4 <HAL_SPI_RxHalfCpltCallback+0xc4>)
		newBar = 1;
 800996e:	600c      	str	r4, [r1, #0]
	if (hspi == &hspi1)
 8009970:	4298      	cmp	r0, r3
 8009972:	d1e7      	bne.n	8009944 <HAL_SPI_RxHalfCpltCallback+0x14>
		newLevers = 1;
 8009974:	4925      	ldr	r1, [pc, #148]	; (8009a0c <HAL_SPI_RxHalfCpltCallback+0xdc>)
 8009976:	2001      	movs	r0, #1
		currentLeverBuffer = 0;
 8009978:	4b25      	ldr	r3, [pc, #148]	; (8009a10 <HAL_SPI_RxHalfCpltCallback+0xe0>)
 800997a:	2200      	movs	r2, #0
		newLevers = 1;
 800997c:	6008      	str	r0, [r1, #0]
		currentLeverBuffer = 0;
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bc70      	pop	{r4, r5, r6}
 8009982:	4770      	bx	lr
		if ((SPI_PLUCK_RX[0 + (26*currentPluckBuffer)] == 254) && (SPI_PLUCK_RX[25 + (26*currentPluckBuffer)] == 253))
 8009984:	7e5a      	ldrb	r2, [r3, #25]
 8009986:	2afd      	cmp	r2, #253	; 0xfd
 8009988:	d1e5      	bne.n	8009956 <HAL_SPI_RxHalfCpltCallback+0x26>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1 + (26*currentPluckBuffer)] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2 + (26*currentPluckBuffer)];
 800998a:	4a22      	ldr	r2, [pc, #136]	; (8009a14 <HAL_SPI_RxHalfCpltCallback+0xe4>)
 800998c:	6814      	ldr	r4, [r2, #0]
 800998e:	6811      	ldr	r1, [r2, #0]
 8009990:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 8009994:	3101      	adds	r1, #1
 8009996:	7865      	ldrb	r5, [r4, #1]
 8009998:	f813 4011 	ldrb.w	r4, [r3, r1, lsl #1]
 800999c:	6811      	ldr	r1, [r2, #0]
 800999e:	eb04 2405 	add.w	r4, r4, r5, lsl #8
 80099a2:	6815      	ldr	r5, [r2, #0]
 80099a4:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80099a8:	3502      	adds	r5, #2
 80099aa:	78ce      	ldrb	r6, [r1, #3]
 80099ac:	f813 1015 	ldrb.w	r1, [r3, r5, lsl #1]
 80099b0:	6815      	ldr	r5, [r2, #0]
 80099b2:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 80099b6:	6816      	ldr	r6, [r2, #0]
 80099b8:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80099bc:	3603      	adds	r6, #3
 80099be:	f895 c005 	ldrb.w	ip, [r5, #5]
 80099c2:	f813 5016 	ldrb.w	r5, [r3, r6, lsl #1]
 80099c6:	6816      	ldr	r6, [r2, #0]
 80099c8:	6812      	ldr	r2, [r2, #0]
 80099ca:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80099ce:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 80099d2:	3204      	adds	r2, #4
 80099d4:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 80099d8:	f89c 3007 	ldrb.w	r3, [ip, #7]
 80099dc:	eb02 2203 	add.w	r2, r2, r3, lsl #8
 80099e0:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <HAL_SPI_RxHalfCpltCallback+0xe8>)
 80099e2:	e9c3 5202 	strd	r5, r2, [r3, #8]
 80099e6:	e9c3 4100 	strd	r4, r1, [r3]
			for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
 80099ea:	e7b4      	b.n	8009956 <HAL_SPI_RxHalfCpltCallback+0x26>
 80099ec:	20018080 	.word	0x20018080
 80099f0:	20017ff8 	.word	0x20017ff8
 80099f4:	20017f70 	.word	0x20017f70
 80099f8:	30008420 	.word	0x30008420
 80099fc:	20000e18 	.word	0x20000e18
 8009a00:	200013cc 	.word	0x200013cc
 8009a04:	20000e10 	.word	0x20000e10
 8009a08:	200013c4 	.word	0x200013c4
 8009a0c:	200013c8 	.word	0x200013c8
 8009a10:	20017b48 	.word	0x20017b48
 8009a14:	200012c0 	.word	0x200012c0
 8009a18:	200179e8 	.word	0x200179e8

08009a1c <HAL_SAI_ErrorCallback>:
 8009a1c:	4770      	bx	lr
 8009a1e:	bf00      	nop

08009a20 <HAL_SAI_TxCpltCallback>:
 8009a20:	4770      	bx	lr
 8009a22:	bf00      	nop

08009a24 <HAL_SAI_TxHalfCpltCallback>:
}

void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{

}
 8009a24:	4770      	bx	lr
 8009a26:	bf00      	nop

08009a28 <HAL_SAI_RxCpltCallback>:


void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(HALF_BUFFER_SIZE);
 8009a28:	2040      	movs	r0, #64	; 0x40
 8009a2a:	f7ff bb91 	b.w	8009150 <audioFrame>
 8009a2e:	bf00      	nop

08009a30 <HAL_SAI_RxHalfCpltCallback>:
}

void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	audioFrame(0);
 8009a30:	2000      	movs	r0, #0
 8009a32:	f7ff bb8d 	b.w	8009150 <audioFrame>
 8009a36:	bf00      	nop

08009a38 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a38:	b510      	push	{r4, lr}
 8009a3a:	4694      	mov	ip, r2
 8009a3c:	b082      	sub	sp, #8
 8009a3e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009a40:	460a      	mov	r2, r1
 8009a42:	4663      	mov	r3, ip
 8009a44:	4601      	mov	r1, r0
 8009a46:	9400      	str	r4, [sp, #0]
 8009a48:	4803      	ldr	r0, [pc, #12]	; (8009a58 <BSP_SD_ReadBlocks+0x20>)
 8009a4a:	f7fb f98d 	bl	8004d68 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8009a4e:	3800      	subs	r0, #0
 8009a50:	bf18      	it	ne
 8009a52:	2001      	movne	r0, #1
 8009a54:	b002      	add	sp, #8
 8009a56:	bd10      	pop	{r4, pc}
 8009a58:	20017d84 	.word	0x20017d84

08009a5c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8009a5c:	b510      	push	{r4, lr}
 8009a5e:	4694      	mov	ip, r2
 8009a60:	b082      	sub	sp, #8
 8009a62:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8009a64:	460a      	mov	r2, r1
 8009a66:	4663      	mov	r3, ip
 8009a68:	4601      	mov	r1, r0
 8009a6a:	9400      	str	r4, [sp, #0]
 8009a6c:	4803      	ldr	r0, [pc, #12]	; (8009a7c <BSP_SD_WriteBlocks+0x20>)
 8009a6e:	f7fb fa83 	bl	8004f78 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8009a72:	3800      	subs	r0, #0
 8009a74:	bf18      	it	ne
 8009a76:	2001      	movne	r0, #1
 8009a78:	b002      	add	sp, #8
 8009a7a:	bd10      	pop	{r4, pc}
 8009a7c:	20017d84 	.word	0x20017d84

08009a80 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8009a80:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8009a82:	4803      	ldr	r0, [pc, #12]	; (8009a90 <BSP_SD_GetCardState+0x10>)
 8009a84:	f7fb ffee 	bl	8005a64 <HAL_SD_GetCardState>
}
 8009a88:	3804      	subs	r0, #4
 8009a8a:	bf18      	it	ne
 8009a8c:	2001      	movne	r0, #1
 8009a8e:	bd08      	pop	{r3, pc}
 8009a90:	20017d84 	.word	0x20017d84

08009a94 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009a94:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8009a96:	4801      	ldr	r0, [pc, #4]	; (8009a9c <BSP_SD_GetCardInfo+0x8>)
 8009a98:	f7fb be94 	b.w	80057c4 <HAL_SD_GetCardInfo>
 8009a9c:	20017d84 	.word	0x20017d84

08009aa0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009aa0:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8009aa2:	2301      	movs	r3, #1
{
 8009aa4:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8009aa6:	f88d 3007 	strb.w	r3, [sp, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009aaa:	f000 f8f5 	bl	8009c98 <BSP_PlatformIsDetected>
 8009aae:	b908      	cbnz	r0, 8009ab4 <BSP_SD_IsDetected+0x14>
  {
    status = SD_NOT_PRESENT;
 8009ab0:	f88d 0007 	strb.w	r0, [sp, #7]
  }

  return status;
 8009ab4:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8009ab8:	b003      	add	sp, #12
 8009aba:	f85d fb04 	ldr.w	pc, [sp], #4
 8009abe:	bf00      	nop

08009ac0 <BSP_SD_Init>:
{
 8009ac0:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009ac2:	f7ff ffed 	bl	8009aa0 <BSP_SD_IsDetected>
 8009ac6:	2801      	cmp	r0, #1
 8009ac8:	d001      	beq.n	8009ace <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 8009aca:	2002      	movs	r0, #2
}
 8009acc:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 8009ace:	4807      	ldr	r0, [pc, #28]	; (8009aec <BSP_SD_Init+0x2c>)
 8009ad0:	f7fb ff62 	bl	8005998 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	d1f9      	bne.n	8009acc <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8009ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009adc:	4803      	ldr	r0, [pc, #12]	; (8009aec <BSP_SD_Init+0x2c>)
 8009ade:	f7fb fe85 	bl	80057ec <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 8009ae2:	3800      	subs	r0, #0
 8009ae4:	bf18      	it	ne
 8009ae6:	2001      	movne	r0, #1
}
 8009ae8:	bd08      	pop	{r3, pc}
 8009aea:	bf00      	nop
 8009aec:	20017d84 	.word	0x20017d84

08009af0 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8009af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009af4:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8009af6:	b082      	sub	sp, #8
 8009af8:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8009afa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009afe:	483b      	ldr	r0, [pc, #236]	; (8009bec <AudioCodec_init+0xfc>)
 8009b00:	f7f8 fa36 	bl	8001f70 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 8009b04:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 8009b06:	4c3a      	ldr	r4, [pc, #232]	; (8009bf0 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8009b08:	f7f6 fc4e 	bl	80003a8 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b0c:	4f39      	ldr	r7, [pc, #228]	; (8009bf4 <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8009b0e:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b12:	4e39      	ldr	r6, [pc, #228]	; (8009bf8 <AudioCodec_init+0x108>)
 8009b14:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8009b16:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b18:	2120      	movs	r1, #32
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	4628      	mov	r0, r5
 8009b1e:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8009c00 <AudioCodec_init+0x110>
 8009b22:	9300      	str	r3, [sp, #0]
 8009b24:	8833      	ldrh	r3, [r6, #0]
 8009b26:	f7f8 fb3f 	bl	80021a8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b2e:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b32:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 8009b34:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b38:	2120      	movs	r1, #32
 8009b3a:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 8009b3c:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b3e:	8833      	ldrh	r3, [r6, #0]
 8009b40:	f7f8 fb32 	bl	80021a8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b48:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b4c:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 8009b4e:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b50:	2120      	movs	r1, #32
 8009b52:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 8009b54:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b56:	8833      	ldrh	r3, [r6, #0]
 8009b58:	f7f8 fb26 	bl	80021a8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b60:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b64:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 8009b66:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b6a:	2120      	movs	r1, #32
 8009b6c:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 8009b6e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b70:	8833      	ldrh	r3, [r6, #0]
 8009b72:	f7f8 fb19 	bl	80021a8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b7a:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b7e:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 8009b80:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b84:	2120      	movs	r1, #32
 8009b86:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8009b88:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b8a:	8833      	ldrh	r3, [r6, #0]
 8009b8c:	f7f8 fb0c 	bl	80021a8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b94:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b98:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8009b9a:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009b9e:	2120      	movs	r1, #32
 8009ba0:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 8009ba2:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009ba4:	8833      	ldrh	r3, [r6, #0]
 8009ba6:	f7f8 faff 	bl	80021a8 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009baa:	683b      	ldr	r3, [r7, #0]
 8009bac:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bae:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bb2:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 8009bb4:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bb8:	2120      	movs	r1, #32
 8009bba:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8009bbc:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bbe:	8833      	ldrh	r3, [r6, #0]
 8009bc0:	f7f8 faf2 	bl	80021a8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bc4:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 8009bc6:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bca:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bcc:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bd0:	4628      	mov	r0, r5
 8009bd2:	9200      	str	r2, [sp, #0]
 8009bd4:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 8009bd6:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8009bd8:	2120      	movs	r1, #32
 8009bda:	f7f8 fae5 	bl	80021a8 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8009bde:	4b07      	ldr	r3, [pc, #28]	; (8009bfc <AudioCodec_init+0x10c>)
 8009be0:	2201      	movs	r2, #1
 8009be2:	601a      	str	r2, [r3, #0]

}
 8009be4:	b002      	add	sp, #8
 8009be6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bea:	bf00      	nop
 8009bec:	58020800 	.word	0x58020800
 8009bf0:	20017ab8 	.word	0x20017ab8
 8009bf4:	20000934 	.word	0x20000934
 8009bf8:	20000938 	.word	0x20000938
 8009bfc:	20000e0c 	.word	0x20000e0c
 8009c00:	20017aba 	.word	0x20017aba

08009c04 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009c04:	4b1c      	ldr	r3, [pc, #112]	; (8009c78 <MX_DMA_Init+0x74>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8009c06:	2200      	movs	r2, #0
 8009c08:	200b      	movs	r0, #11
 8009c0a:	4611      	mov	r1, r2
{
 8009c0c:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009c0e:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 8009c12:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 8009c14:	f044 0401 	orr.w	r4, r4, #1
 8009c18:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8009c1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009c20:	f003 0301 	and.w	r3, r3, #1
 8009c24:	9301      	str	r3, [sp, #4]
 8009c26:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8009c28:	f7f6 fbf2 	bl	8000410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8009c2c:	200b      	movs	r0, #11
 8009c2e:	f7f6 fc2d 	bl	800048c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 4, 0);
 8009c32:	2200      	movs	r2, #0
 8009c34:	2104      	movs	r1, #4
 8009c36:	200c      	movs	r0, #12
 8009c38:	f7f6 fbea 	bl	8000410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8009c3c:	200c      	movs	r0, #12
 8009c3e:	f7f6 fc25 	bl	800048c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8009c42:	2200      	movs	r2, #0
 8009c44:	2105      	movs	r1, #5
 8009c46:	200d      	movs	r0, #13
 8009c48:	f7f6 fbe2 	bl	8000410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8009c4c:	200d      	movs	r0, #13
 8009c4e:	f7f6 fc1d 	bl	800048c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8009c52:	2200      	movs	r2, #0
 8009c54:	200e      	movs	r0, #14
 8009c56:	4611      	mov	r1, r2
 8009c58:	f7f6 fbda 	bl	8000410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8009c5c:	200e      	movs	r0, #14
 8009c5e:	f7f6 fc15 	bl	800048c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8009c62:	2200      	movs	r2, #0
 8009c64:	200f      	movs	r0, #15
 8009c66:	4611      	mov	r1, r2
 8009c68:	f7f6 fbd2 	bl	8000410 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8009c6c:	200f      	movs	r0, #15

}
 8009c6e:	b002      	add	sp, #8
 8009c70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8009c74:	f7f6 bc0a 	b.w	800048c <HAL_NVIC_EnableIRQ>
 8009c78:	58024400 	.word	0x58024400

08009c7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009c7c:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8009c7e:	4903      	ldr	r1, [pc, #12]	; (8009c8c <MX_FATFS_Init+0x10>)
 8009c80:	4803      	ldr	r0, [pc, #12]	; (8009c90 <MX_FATFS_Init+0x14>)
 8009c82:	f7fd ffcf 	bl	8007c24 <FATFS_LinkDriver>
 8009c86:	4b03      	ldr	r3, [pc, #12]	; (8009c94 <MX_FATFS_Init+0x18>)
 8009c88:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8009c8a:	bd08      	pop	{r3, pc}
 8009c8c:	20017abc 	.word	0x20017abc
 8009c90:	0800d528 	.word	0x0800d528
 8009c94:	20017ac0 	.word	0x20017ac0

08009c98 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009c98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8009c9c:	4803      	ldr	r0, [pc, #12]	; (8009cac <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 8009c9e:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009ca0:	f7f8 f960 	bl	8001f64 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 8009ca4:	fab0 f080 	clz	r0, r0
 8009ca8:	0940      	lsrs	r0, r0, #5
 8009caa:	bd08      	pop	{r3, pc}
 8009cac:	58020800 	.word	0x58020800

08009cb0 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009cb0:	481f      	ldr	r0, [pc, #124]	; (8009d30 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8009cb2:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8009cb4:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8009cb6:	2108      	movs	r1, #8
{
 8009cb8:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009cba:	4c1e      	ldr	r4, [pc, #120]	; (8009d34 <MX_FMC_Init+0x84>)
{
 8009cbc:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8009cbe:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8009cc0:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 8009cc2:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 8009cc4:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8009cc8:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8009cca:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8009cce:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8009cd0:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8009cd2:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8009cd6:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8009cd8:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8009cda:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8009cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 8009ce2:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8009ce4:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8009ce8:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009cea:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 8009cec:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 8009cee:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009d28 <MX_FMC_Init+0x78>
 8009cf2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	2302      	movs	r3, #2
 8009cfa:	ed8d 7b00 	vstr	d7, [sp]
 8009cfe:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8009d02:	f7fb fec3 	bl	8005a8c <HAL_SDRAM_Init>
 8009d06:	b928      	cbnz	r0, 8009d14 <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8009d08:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009d0c:	f7f6 fb64 	bl	80003d8 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8009d10:	b008      	add	sp, #32
 8009d12:	bd10      	pop	{r4, pc}
    Error_Handler( );
 8009d14:	f000 fbe8 	bl	800a4e8 <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8009d18:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8009d1c:	f7f6 fb5c 	bl	80003d8 <HAL_SetFMCMemorySwappingConfig>
}
 8009d20:	b008      	add	sp, #32
 8009d22:	bd10      	pop	{r4, pc}
 8009d24:	f3af 8000 	nop.w
 8009d28:	00000002 	.word	0x00000002
 8009d2c:	00000006 	.word	0x00000006
 8009d30:	20017ac8 	.word	0x20017ac8
 8009d34:	52004140 	.word	0x52004140

08009d38 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8009d38:	4835      	ldr	r0, [pc, #212]	; (8009e10 <HAL_SDRAM_MspInit+0xd8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d3a:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8009d3c:	b5d0      	push	{r4, r6, r7, lr}
 8009d3e:	b0b6      	sub	sp, #216	; 0xd8
  if (FMC_Initialized) {
 8009d40:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009d42:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d46:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8009d4a:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 8009d4c:	b109      	cbz	r1, 8009d52 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8009d4e:	b036      	add	sp, #216	; 0xd8
 8009d50:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 8009d52:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d54:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 8009d56:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009d58:	a808      	add	r0, sp, #32
 8009d5a:	f002 f8d7 	bl	800bf0c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8009d5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d62:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8009d64:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8009d66:	f7f9 f9eb 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d14c      	bne.n	8009e08 <HAL_SDRAM_MspInit+0xd0>
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d6e:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009d70:	f64f 003f 	movw	r0, #63551	; 0xf83f
 8009d74:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009d76:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d78:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009d7c:	2600      	movs	r6, #0
 8009d7e:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009d84:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 8009d88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009d8c:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009d92:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d96:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009d98:	a902      	add	r1, sp, #8
 8009d9a:	481f      	ldr	r0, [pc, #124]	; (8009e18 <HAL_SDRAM_MspInit+0xe0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8009d9c:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009d9e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009da2:	f7f7 ff85 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8009da6:	2219      	movs	r2, #25
 8009da8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009daa:	a902      	add	r1, sp, #8
 8009dac:	481b      	ldr	r0, [pc, #108]	; (8009e1c <HAL_SDRAM_MspInit+0xe4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dae:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8009db0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009db4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009db8:	f7f7 ff7a 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8009dbc:	f248 1237 	movw	r2, #33079	; 0x8137
 8009dc0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009dc2:	a902      	add	r1, sp, #8
 8009dc4:	4816      	ldr	r0, [pc, #88]	; (8009e20 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dc6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8009dc8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009dcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009dd0:	f7f7 ff6e 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8009dd4:	f64f 7283 	movw	r2, #65411	; 0xff83
 8009dd8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009dda:	a902      	add	r1, sp, #8
 8009ddc:	4811      	ldr	r0, [pc, #68]	; (8009e24 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009dde:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8009de0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009de4:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009de8:	f7f7 ff62 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8009dec:	f24c 7203 	movw	r2, #50947	; 0xc703
 8009df0:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009df2:	a902      	add	r1, sp, #8
 8009df4:	480c      	ldr	r0, [pc, #48]	; (8009e28 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8009df6:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8009df8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009dfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009e00:	f7f7 ff56 	bl	8001cb0 <HAL_GPIO_Init>
}
 8009e04:	b036      	add	sp, #216	; 0xd8
 8009e06:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8009e08:	f000 fb6e 	bl	800a4e8 <Error_Handler>
 8009e0c:	e7af      	b.n	8009d6e <HAL_SDRAM_MspInit+0x36>
 8009e0e:	bf00      	nop
 8009e10:	20017ac4 	.word	0x20017ac4
 8009e14:	58024400 	.word	0x58024400
 8009e18:	58021400 	.word	0x58021400
 8009e1c:	58020800 	.word	0x58020800
 8009e20:	58021800 	.word	0x58021800
 8009e24:	58021000 	.word	0x58021000
 8009e28:	58020c00 	.word	0x58020c00

08009e2c <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8009e2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e30:	4b74      	ldr	r3, [pc, #464]	; (800a004 <MX_GPIO_Init+0x1d8>)
{
 8009e32:	b08f      	sub	sp, #60	; 0x3c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e34:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009e36:	4d74      	ldr	r5, [pc, #464]	; (800a008 <MX_GPIO_Init+0x1dc>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8009e38:	4e74      	ldr	r6, [pc, #464]	; (800a00c <MX_GPIO_Init+0x1e0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009e3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e3e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009e40:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009e42:	f04f 0800 	mov.w	r8, #0
 8009e46:	f04f 0900 	mov.w	r9, #0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009e4a:	2701      	movs	r7, #1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009e4c:	e9cd 4408 	strd	r4, r4, [sp, #32]
 8009e50:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e58:	f042 0210 	orr.w	r2, r2, #16
 8009e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e64:	f002 0210 	and.w	r2, r2, #16
 8009e68:	9200      	str	r2, [sp, #0]
 8009e6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e70:	f042 0204 	orr.w	r2, r2, #4
 8009e74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e7c:	f002 0204 	and.w	r2, r2, #4
 8009e80:	9201      	str	r2, [sp, #4]
 8009e82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8009e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e88:	f042 0220 	orr.w	r2, r2, #32
 8009e8c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009e94:	f002 0220 	and.w	r2, r2, #32
 8009e98:	9202      	str	r2, [sp, #8]
 8009e9a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009e9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ea0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009ea4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009eac:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8009eb0:	9203      	str	r2, [sp, #12]
 8009eb2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8009eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009eb8:	f042 0201 	orr.w	r2, r2, #1
 8009ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ec4:	f002 0201 	and.w	r2, r2, #1
 8009ec8:	9204      	str	r2, [sp, #16]
 8009eca:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ed0:	f042 0202 	orr.w	r2, r2, #2
 8009ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009ed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009edc:	f002 0202 	and.w	r2, r2, #2
 8009ee0:	9205      	str	r2, [sp, #20]
 8009ee2:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8009ee4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009eec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8009ef0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009ef4:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8009ef8:	9206      	str	r2, [sp, #24]
 8009efa:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009efc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8009f00:	f042 0208 	orr.w	r2, r2, #8
 8009f04:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009f08:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8009f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f0e:	f003 0308 	and.w	r3, r3, #8
 8009f12:	9307      	str	r3, [sp, #28]
 8009f14:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8009f16:	f7f8 f82b 	bl	8001f70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8009f1a:	4622      	mov	r2, r4
 8009f1c:	4630      	mov	r0, r6
 8009f1e:	2110      	movs	r1, #16
 8009f20:	f7f8 f826 	bl	8001f70 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009f24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009f28:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f2a:	a908      	add	r1, sp, #32
 8009f2c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f2e:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8009f30:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f34:	f7f7 febc 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009f3c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f3e:	a908      	add	r1, sp, #32
 8009f40:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8009f42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f46:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f4a:	f7f7 feb1 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8009f4e:	f248 02c6 	movw	r2, #32966	; 0x80c6
 8009f52:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f54:	a908      	add	r1, sp, #32
 8009f56:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f58:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 8009f5a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f5e:	f7f7 fea7 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009f62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009f66:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009f68:	a908      	add	r1, sp, #32
 8009f6a:	4829      	ldr	r0, [pc, #164]	; (800a010 <MX_GPIO_Init+0x1e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f6c:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009f6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8009f72:	f7f7 fe9d 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009f76:	f649 720f 	movw	r2, #40719	; 0x9f0f
 8009f7a:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f7c:	a908      	add	r1, sp, #32
 8009f7e:	4825      	ldr	r0, [pc, #148]	; (800a014 <MX_GPIO_Init+0x1e8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009f80:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8009f82:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009f86:	f7f7 fe93 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f8e:	4628      	mov	r0, r5
 8009f90:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009f92:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8009f94:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009f98:	f7f7 fe8a 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8009f9c:	f240 32e5 	movw	r2, #997	; 0x3e5
 8009fa0:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fa2:	a908      	add	r1, sp, #32
 8009fa4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa6:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 8009fa8:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fac:	f7f7 fe80 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009fb0:	2202      	movs	r2, #2
 8009fb2:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fb4:	a908      	add	r1, sp, #32
 8009fb6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009fb8:	970a      	str	r7, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8009fba:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fbe:	f7f7 fe77 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8009fc2:	f643 02f8 	movw	r2, #14584	; 0x38f8
 8009fc6:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fc8:	a908      	add	r1, sp, #32
 8009fca:	4813      	ldr	r0, [pc, #76]	; (800a018 <MX_GPIO_Init+0x1ec>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fcc:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8009fce:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8009fd2:	f7f7 fe6d 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8009fd6:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 8009fda:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fdc:	a908      	add	r1, sp, #32
 8009fde:	480f      	ldr	r0, [pc, #60]	; (800a01c <MX_GPIO_Init+0x1f0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fe0:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8009fe2:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009fe6:	f7f7 fe63 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009fea:	2210      	movs	r2, #16
 8009fec:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009fee:	a908      	add	r1, sp, #32
 8009ff0:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8009ff2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8009ff6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009ffa:	f7f7 fe59 	bl	8001cb0 <HAL_GPIO_Init>

}
 8009ffe:	b00f      	add	sp, #60	; 0x3c
 800a000:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a004:	58024400 	.word	0x58024400
 800a008:	58020800 	.word	0x58020800
 800a00c:	58020400 	.word	0x58020400
 800a010:	58021400 	.word	0x58021400
 800a014:	58020000 	.word	0x58020000
 800a018:	58020c00 	.word	0x58020c00
 800a01c:	58021800 	.word	0x58021800

0800a020 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800a020:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800a022:	4817      	ldr	r0, [pc, #92]	; (800a080 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a024:	2300      	movs	r3, #0
 800a026:	4917      	ldr	r1, [pc, #92]	; (800a084 <MX_I2C2_Init+0x64>)
 800a028:	2401      	movs	r4, #1
 800a02a:	4a17      	ldr	r2, [pc, #92]	; (800a088 <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800a02c:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800a02e:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 800a032:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800a036:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800a03a:	f7f8 f857 	bl	80020ec <HAL_I2C_Init>
 800a03e:	b950      	cbnz	r0, 800a056 <MX_I2C2_Init+0x36>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a040:	2100      	movs	r1, #0
 800a042:	480f      	ldr	r0, [pc, #60]	; (800a080 <MX_I2C2_Init+0x60>)
 800a044:	f7f8 f986 	bl	8002354 <HAL_I2CEx_ConfigAnalogFilter>
 800a048:	b968      	cbnz	r0, 800a066 <MX_I2C2_Init+0x46>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a04a:	2100      	movs	r1, #0
 800a04c:	480c      	ldr	r0, [pc, #48]	; (800a080 <MX_I2C2_Init+0x60>)
 800a04e:	f7f8 f9b5 	bl	80023bc <HAL_I2CEx_ConfigDigitalFilter>
 800a052:	b980      	cbnz	r0, 800a076 <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800a054:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a056:	f000 fa47 	bl	800a4e8 <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800a05a:	2100      	movs	r1, #0
 800a05c:	4808      	ldr	r0, [pc, #32]	; (800a080 <MX_I2C2_Init+0x60>)
 800a05e:	f7f8 f979 	bl	8002354 <HAL_I2CEx_ConfigAnalogFilter>
 800a062:	2800      	cmp	r0, #0
 800a064:	d0f1      	beq.n	800a04a <MX_I2C2_Init+0x2a>
    Error_Handler();
 800a066:	f000 fa3f 	bl	800a4e8 <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800a06a:	2100      	movs	r1, #0
 800a06c:	4804      	ldr	r0, [pc, #16]	; (800a080 <MX_I2C2_Init+0x60>)
 800a06e:	f7f8 f9a5 	bl	80023bc <HAL_I2CEx_ConfigDigitalFilter>
 800a072:	2800      	cmp	r0, #0
 800a074:	d0ee      	beq.n	800a054 <MX_I2C2_Init+0x34>
}
 800a076:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800a07a:	f000 ba35 	b.w	800a4e8 <Error_Handler>
 800a07e:	bf00      	nop
 800a080:	20017afc 	.word	0x20017afc
 800a084:	40005800 	.word	0x40005800
 800a088:	00b03fdb 	.word	0x00b03fdb
 800a08c:	00000000 	.word	0x00000000

0800a090 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800a090:	b510      	push	{r4, lr}
 800a092:	b0b6      	sub	sp, #216	; 0xd8

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a094:	2100      	movs	r1, #0
{
 800a096:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a098:	22bc      	movs	r2, #188	; 0xbc
 800a09a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a09c:	9106      	str	r1, [sp, #24]
 800a09e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 800a0a2:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a0a6:	f001 ff31 	bl	800bf0c <memset>
  if(i2cHandle->Instance==I2C2)
 800a0aa:	4b1f      	ldr	r3, [pc, #124]	; (800a128 <HAL_I2C_MspInit+0x98>)
 800a0ac:	6822      	ldr	r2, [r4, #0]
 800a0ae:	429a      	cmp	r2, r3
 800a0b0:	d001      	beq.n	800a0b6 <HAL_I2C_MspInit+0x26>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800a0b2:	b036      	add	sp, #216	; 0xd8
 800a0b4:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a0b6:	2308      	movs	r3, #8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a0b8:	a807      	add	r0, sp, #28
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a0ba:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a0bc:	f7f9 f840 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 800a0c0:	bb40      	cbnz	r0, 800a114 <HAL_I2C_MspInit+0x84>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0c2:	4c1a      	ldr	r4, [pc, #104]	; (800a12c <HAL_I2C_MspInit+0x9c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a0c4:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0c6:	a902      	add	r1, sp, #8
 800a0c8:	4819      	ldr	r0, [pc, #100]	; (800a130 <HAL_I2C_MspInit+0xa0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 800a0ce:	f043 0302 	orr.w	r3, r3, #2
 800a0d2:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800a0d6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a0da:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a0dc:	2200      	movs	r2, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0de:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a0e2:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800a120 <HAL_I2C_MspInit+0x90>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a0e6:	9300      	str	r3, [sp, #0]
 800a0e8:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a0ea:	2303      	movs	r3, #3
 800a0ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a0f0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a0f4:	f7f7 fddc 	bl	8001cb0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a0f8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a0fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a100:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 800a104:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 800a108:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a10c:	9301      	str	r3, [sp, #4]
 800a10e:	9b01      	ldr	r3, [sp, #4]
}
 800a110:	b036      	add	sp, #216	; 0xd8
 800a112:	bd10      	pop	{r4, pc}
      Error_Handler();
 800a114:	f000 f9e8 	bl	800a4e8 <Error_Handler>
 800a118:	e7d3      	b.n	800a0c2 <HAL_I2C_MspInit+0x32>
 800a11a:	bf00      	nop
 800a11c:	f3af 8000 	nop.w
 800a120:	00000c00 	.word	0x00000c00
 800a124:	00000012 	.word	0x00000012
 800a128:	40005800 	.word	0x40005800
 800a12c:	58024400 	.word	0x58024400
 800a130:	58020400 	.word	0x58020400
 800a134:	00000000 	.word	0x00000000

0800a138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800a138:	b500      	push	{lr}
 800a13a:	b09f      	sub	sp, #124	; 0x7c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800a13c:	224c      	movs	r2, #76	; 0x4c
 800a13e:	2100      	movs	r1, #0
 800a140:	a80a      	add	r0, sp, #40	; 0x28
 800a142:	f001 fee3 	bl	800bf0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800a146:	2220      	movs	r2, #32
 800a148:	2100      	movs	r1, #0
 800a14a:	a802      	add	r0, sp, #8
 800a14c:	f001 fede 	bl	800bf0c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800a150:	2002      	movs	r0, #2
 800a152:	f7f8 f965 	bl	8002420 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800a156:	4a2e      	ldr	r2, [pc, #184]	; (800a210 <SystemClock_Config+0xd8>)
 800a158:	2100      	movs	r1, #0
 800a15a:	4b2e      	ldr	r3, [pc, #184]	; (800a214 <SystemClock_Config+0xdc>)
 800a15c:	9101      	str	r1, [sp, #4]
 800a15e:	6991      	ldr	r1, [r2, #24]
 800a160:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 800a164:	6191      	str	r1, [r2, #24]
 800a166:	6991      	ldr	r1, [r2, #24]
 800a168:	f401 4140 	and.w	r1, r1, #49152	; 0xc000
 800a16c:	9101      	str	r1, [sp, #4]
 800a16e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a170:	f041 0101 	orr.w	r1, r1, #1
 800a174:	62d9      	str	r1, [r3, #44]	; 0x2c
 800a176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	9301      	str	r3, [sp, #4]
 800a17e:	9b01      	ldr	r3, [sp, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800a180:	6993      	ldr	r3, [r2, #24]
 800a182:	049b      	lsls	r3, r3, #18
 800a184:	d5fc      	bpl.n	800a180 <SystemClock_Config+0x48>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a186:	4a24      	ldr	r2, [pc, #144]	; (800a218 <SystemClock_Config+0xe0>)
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a188:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a18a:	a80a      	add	r0, sp, #40	; 0x28
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800a18c:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800a18e:	f023 0303 	bic.w	r3, r3, #3
 800a192:	f043 0302 	orr.w	r3, r3, #2
 800a196:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800a198:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800a19a:	9110      	str	r1, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a19c:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800a19e:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 800a1a0:	9319      	str	r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLM = 5;
 800a1a2:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a1a4:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800a1a6:	921c      	str	r2, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 192;
 800a1a8:	9116      	str	r1, [sp, #88]	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a1aa:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800a1f8 <SystemClock_Config+0xc0>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800a1ae:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800a1b2:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a1b6:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 800a1b8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800a1bc:	e9cd 321a 	strd	r3, r2, [sp, #104]	; 0x68
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800a1c0:	f7f8 f9d6 	bl	8002570 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	2308      	movs	r3, #8
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a1c8:	2104      	movs	r1, #4
 800a1ca:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800a1cc:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 800a200 <SystemClock_Config+0xc8>
 800a1d0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a1d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a1d8:	2340      	movs	r3, #64	; 0x40
 800a1da:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a1de:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 800a208 <SystemClock_Config+0xd0>
 800a1e2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a1e6:	ed8d 7b06 	vstr	d7, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800a1ea:	f7f8 fd41 	bl	8002c70 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800a1ee:	b01f      	add	sp, #124	; 0x7c
 800a1f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800a1f4:	f3af 8000 	nop.w
 800a1f8:	00000021 	.word	0x00000021
 800a1fc:	00010000 	.word	0x00010000
 800a200:	0000003f 	.word	0x0000003f
 800a204:	00000003 	.word	0x00000003
 800a208:	00000040 	.word	0x00000040
 800a20c:	00000040 	.word	0x00000040
 800a210:	58024800 	.word	0x58024800
 800a214:	58000400 	.word	0x58000400
 800a218:	58024400 	.word	0x58024400
 800a21c:	00000000 	.word	0x00000000

0800a220 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800a220:	b500      	push	{lr}
 800a222:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a224:	22a4      	movs	r2, #164	; 0xa4
 800a226:	2100      	movs	r1, #0
 800a228:	a806      	add	r0, sp, #24
 800a22a:	f001 fe6f 	bl	800bf0c <memset>
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
  PeriphClkInitStruct.PLL2.PLL2R = 2;
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_0;
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a22e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a232:	2107      	movs	r1, #7
 800a234:	f44f 70ac 	mov.w	r0, #344	; 0x158
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800a238:	2201      	movs	r2, #1
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 800a23a:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a23c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800a240:	9215      	str	r2, [sp, #84]	; 0x54
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800a242:	9317      	str	r3, [sp, #92]	; 0x5c
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a244:	ed9f 7b08 	vldr	d7, [pc, #32]	; 800a268 <PeriphCommonClock_Config+0x48>
 800a248:	e9cd 0102 	strd	r0, r1, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a24c:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 800a24e:	ed8d 7b00 	vstr	d7, [sp]
 800a252:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a270 <PeriphCommonClock_Config+0x50>
 800a256:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a25a:	f7f8 ff71 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800a25e:	b031      	add	sp, #196	; 0xc4
 800a260:	f85d fb04 	ldr.w	pc, [sp], #4
 800a264:	f3af 8000 	nop.w
 800a268:	00011100 	.word	0x00011100
 800a26c:	00000019 	.word	0x00000019
 800a270:	00000002 	.word	0x00000002
 800a274:	00000002 	.word	0x00000002

0800a278 <SDRAM_Initialization_sequence>:
#define SDRAM_MODEREG_WRITEBURST_MODE_SINGLE     ((uint16_t)0x0200)

//#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)956)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
#define SDRAM_REFRESH_COUNT                   	 ((uint32_t)0x0569)// 7.9us in cycles of 8.333333ns + 20 cycles as recommended by datasheet page 866/3289 for STM32H743
void SDRAM_Initialization_sequence(void)
{
 800a278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    __IO uint32_t tmpmrd = 0;
 800a27c:	2300      	movs	r3, #0
{
 800a27e:	b087      	sub	sp, #28
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a280:	4c2a      	ldr	r4, [pc, #168]	; (800a32c <SDRAM_Initialization_sequence+0xb4>)
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a282:	2201      	movs	r2, #1
    __IO uint32_t tmpmrd = 0;
 800a284:	9301      	str	r3, [sp, #4]
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a286:	2310      	movs	r3, #16
 800a288:	2601      	movs	r6, #1
 800a28a:	2700      	movs	r7, #0
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a28c:	a902      	add	r1, sp, #8
 800a28e:	4620      	mov	r0, r4
        | SDRAM_MODEREG_CAS_LATENCY_2 | SDRAM_MODEREG_OPERATING_MODE_STANDARD
        | SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 1;
 800a290:	2501      	movs	r5, #1

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);

    /* Step 4: Configure the 1st Auto Refresh command */
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a292:	f04f 0803 	mov.w	r8, #3
 800a296:	f04f 0910 	mov.w	r9, #16
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a29a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800a2a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2a6:	f7fb fc1b 	bl	8005ae0 <HAL_SDRAM_SendCommand>
    HAL_Delay(1);
 800a2aa:	2001      	movs	r0, #1
 800a2ac:	f7f6 f87c 	bl	80003a8 <HAL_Delay>
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2b0:	a902      	add	r1, sp, #8
 800a2b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2b6:	4620      	mov	r0, r4
    Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800a2b8:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800a2bc:	2602      	movs	r6, #2
 800a2be:	2710      	movs	r7, #16
 800a2c0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2c4:	f7fb fc0c 	bl	8005ae0 <HAL_SDRAM_SendCommand>
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800a2c8:	f240 2322 	movw	r3, #546	; 0x222
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800a2cc:	2004      	movs	r0, #4
 800a2ce:	2110      	movs	r1, #16
    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4 | SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL
 800a2d0:	9301      	str	r3, [sp, #4]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a2d2:	2608      	movs	r6, #8
    Command.ModeRegisterDefinition = tmpmrd;
 800a2d4:	9b01      	ldr	r3, [sp, #4]
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a2d6:	2700      	movs	r7, #0
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
    Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800a2dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2e0:	a902      	add	r1, sp, #8
 800a2e2:	4620      	mov	r0, r4
    Command.ModeRegisterDefinition = tmpmrd;
 800a2e4:	e9cd 5304 	strd	r5, r3, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2e8:	f7fb fbfa 	bl	8005ae0 <HAL_SDRAM_SendCommand>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2ec:	a902      	add	r1, sp, #8
 800a2ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2f2:	4620      	mov	r0, r4
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a2f4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a2f8:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a2fc:	f7fb fbf0 	bl	8005ae0 <HAL_SDRAM_SendCommand>

    /* Step 2: Insert 100 us minimum delay */
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    HAL_Delay(1);
 800a300:	4628      	mov	r0, r5
 800a302:	f7f6 f851 	bl	80003a8 <HAL_Delay>
    Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
    Command.AutoRefreshNumber = 8;
    Command.ModeRegisterDefinition = 0;

    /* Send the command */
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a306:	a902      	add	r1, sp, #8
 800a308:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a30c:	4620      	mov	r0, r4
    Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800a30e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800a312:	e9cd 6704 	strd	r6, r7, [sp, #16]
    HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 800a316:	f7fb fbe3 	bl	8005ae0 <HAL_SDRAM_SendCommand>

    /* Step 6: Set the refresh rate counter */
    /* Set the device refresh rate */
    HAL_SDRAM_ProgramRefreshRate(&hsdram1, SDRAM_REFRESH_COUNT);
 800a31a:	f240 5169 	movw	r1, #1385	; 0x569
 800a31e:	4620      	mov	r0, r4
 800a320:	f7fb fbfe 	bl	8005b20 <HAL_SDRAM_ProgramRefreshRate>
}
 800a324:	b007      	add	sp, #28
 800a326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a32a:	bf00      	nop
 800a32c:	20017ac8 	.word	0x20017ac8

0800a330 <randomNumber>:

float randomNumber(void) {
 800a330:	b500      	push	{lr}
 800a332:	b083      	sub	sp, #12

	uint32_t rand;
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 800a334:	4807      	ldr	r0, [pc, #28]	; (800a354 <randomNumber+0x24>)
 800a336:	a901      	add	r1, sp, #4
 800a338:	f7fa f824 	bl	8004384 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 800a33c:	eddd 7a01 	vldr	s15, [sp, #4]
 800a340:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800a358 <randomNumber+0x28>
 800a344:	eef8 7a67 	vcvt.f32.u32	s15, s15
	return num;
}
 800a348:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a34c:	b003      	add	sp, #12
 800a34e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a352:	bf00      	nop
 800a354:	20017b4c 	.word	0x20017b4c
 800a358:	2f80000d 	.word	0x2f80000d

0800a35c <MPU_Conf>:


void MPU_Conf(void)
{
 800a35c:	b510      	push	{r4, lr}
 800a35e:	b084      	sub	sp, #16
  // So a buffer size for read/write of 4096 would take up 64k = 4096*8 * 2 (read and write).
  // I increased that to 256k so that there would be room for the ADC knob inputs and other peripherals that might require DMA access.
  // we have a total of 256k in SRAM1 (128k, 0x30000000-0x30020000) and SRAM2 (128k, 0x30020000-0x3004000) of D2 domain.
  // There is an SRAM3 in D2 domain as well (32k, 0x30040000-0x3004800) that is currently not mapped by the MPU (memory protection unit) controller.

  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800a360:	2400      	movs	r4, #0
	HAL_MPU_Disable();
 800a362:	f7f6 f8b7 	bl	80004d4 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x30000000;
 800a366:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a36a:	f240 1201 	movw	r2, #257	; 0x101
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800a36e:	4b0d      	ldr	r3, [pc, #52]	; (800a3a4 <MPU_Conf+0x48>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a370:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x30000000;
 800a372:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a374:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800a378:	9302      	str	r3, [sp, #8]
 800a37a:	9403      	str	r4, [sp, #12]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a37c:	f7f6 f8c8 	bl	8000510 <HAL_MPU_ConfigRegion>
  //now set up D3 domain RAM

  MPU_InitStruct.Enable = MPU_REGION_ENABLE;

  //D3 Domain�SRAM1
  MPU_InitStruct.BaseAddress = 0x38000000;
 800a380:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a384:	f240 2201 	movw	r2, #513	; 0x201


  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800a388:	4b07      	ldr	r3, [pc, #28]	; (800a3a8 <MPU_Conf+0x4c>)


  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;


  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a38a:	4668      	mov	r0, sp
  MPU_InitStruct.BaseAddress = 0x38000000;
 800a38c:	9101      	str	r1, [sp, #4]
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800a38e:	f8ad 2000 	strh.w	r2, [sp]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800a392:	e9cd 3402 	strd	r3, r4, [sp, #8]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800a396:	f7f6 f8bb 	bl	8000510 <HAL_MPU_ConfigRegion>
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
  */



  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800a39a:	2004      	movs	r0, #4
 800a39c:	f7f6 f8a8 	bl	80004f0 <HAL_MPU_Enable>
}
 800a3a0:	b004      	add	sp, #16
 800a3a2:	bd10      	pop	{r4, pc}
 800a3a4:	03010011 	.word	0x03010011
 800a3a8:	0301000f 	.word	0x0301000f

0800a3ac <main>:
{
 800a3ac:	b510      	push	{r4, lr}
	  MPU_Conf();
 800a3ae:	f7ff ffd5 	bl	800a35c <MPU_Conf>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800a3b2:	4a42      	ldr	r2, [pc, #264]	; (800a4bc <main+0x110>)
 800a3b4:	6953      	ldr	r3, [r2, #20]
 800a3b6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
 800a3ba:	d111      	bne.n	800a3e0 <main+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800a3bc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a3c0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a3c4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a3c8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a3cc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a3d0:	6953      	ldr	r3, [r2, #20]
 800a3d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a3d6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a3dc:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800a3e0:	4836      	ldr	r0, [pc, #216]	; (800a4bc <main+0x110>)
 800a3e2:	6943      	ldr	r3, [r0, #20]
 800a3e4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 800a3e8:	d126      	bne.n	800a438 <main+0x8c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800a3ea:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a3ee:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 800a3f2:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a3f6:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a3fa:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a3fe:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
 800a402:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a406:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a40a:	4673      	mov	r3, lr
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a40c:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
 800a410:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a412:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	d1f8      	bne.n	800a40c <main+0x60>
    } while(sets-- != 0U);
 800a41a:	f1ac 0c20 	sub.w	ip, ip, #32
 800a41e:	f11c 0f20 	cmn.w	ip, #32
 800a422:	d1f0      	bne.n	800a406 <main+0x5a>
 800a424:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a428:	6943      	ldr	r3, [r0, #20]
 800a42a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a42e:	6143      	str	r3, [r0, #20]
 800a430:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800a434:	f3bf 8f6f 	isb	sy
  HAL_Init();
 800a438:	f7f5 ff74 	bl	8000324 <HAL_Init>
  SystemClock_Config();
 800a43c:	f7ff fe7c 	bl	800a138 <SystemClock_Config>
  PeriphCommonClock_Config();
 800a440:	f7ff feee 	bl	800a220 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800a444:	f7ff fcf2 	bl	8009e2c <MX_GPIO_Init>
  MX_DMA_Init();
 800a448:	f7ff fbdc 	bl	8009c04 <MX_DMA_Init>
  MX_FMC_Init();
 800a44c:	f7ff fc30 	bl	8009cb0 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 800a450:	f000 fa08 	bl	800a864 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 800a454:	f7ff fc12 	bl	8009c7c <MX_FATFS_Init>
  MX_SAI1_Init();
 800a458:	f000 f886 	bl	800a568 <MX_SAI1_Init>
  MX_RNG_Init();
 800a45c:	f000 f846 	bl	800a4ec <MX_RNG_Init>
  MX_SPI2_Init();
 800a460:	f000 fa9a 	bl	800a998 <MX_SPI2_Init>
  MX_I2C2_Init();
 800a464:	f7ff fddc 	bl	800a020 <MX_I2C2_Init>
  MX_SPI1_Init();
 800a468:	f000 fa6a 	bl	800a940 <MX_SPI1_Init>
  MX_SPI5_Init();
 800a46c:	f000 fac0 	bl	800a9f0 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800a470:	2200      	movs	r2, #0
 800a472:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a476:	4812      	ldr	r0, [pc, #72]	; (800a4c0 <main+0x114>)
 800a478:	f7f7 fd7a 	bl	8001f70 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 800a47c:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 800a480:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 800a484:	eee1 3a10 	vmsr	fpscr, r3
  HAL_Delay(200);
 800a488:	20c8      	movs	r0, #200	; 0xc8
 800a48a:	f7f5 ff8d 	bl	80003a8 <HAL_Delay>
  HAL_SPI_Receive_DMA(&hspi2, SPI_RX, 24);
 800a48e:	2218      	movs	r2, #24
 800a490:	490c      	ldr	r1, [pc, #48]	; (800a4c4 <main+0x118>)
 800a492:	480d      	ldr	r0, [pc, #52]	; (800a4c8 <main+0x11c>)
 800a494:	f7fb fd9c 	bl	8005fd0 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 800a498:	2234      	movs	r2, #52	; 0x34
 800a49a:	490c      	ldr	r1, [pc, #48]	; (800a4cc <main+0x120>)
 800a49c:	480c      	ldr	r0, [pc, #48]	; (800a4d0 <main+0x124>)
 800a49e:	f7fb fd97 	bl	8005fd0 <HAL_SPI_Receive_DMA>
  HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, 74);
 800a4a2:	224a      	movs	r2, #74	; 0x4a
 800a4a4:	490b      	ldr	r1, [pc, #44]	; (800a4d4 <main+0x128>)
 800a4a6:	480c      	ldr	r0, [pc, #48]	; (800a4d8 <main+0x12c>)
 800a4a8:	f7fb fd92 	bl	8005fd0 <HAL_SPI_Receive_DMA>
  SDRAM_Initialization_sequence();
 800a4ac:	f7ff fee4 	bl	800a278 <SDRAM_Initialization_sequence>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800a4b0:	4a0a      	ldr	r2, [pc, #40]	; (800a4dc <main+0x130>)
 800a4b2:	490b      	ldr	r1, [pc, #44]	; (800a4e0 <main+0x134>)
 800a4b4:	480b      	ldr	r0, [pc, #44]	; (800a4e4 <main+0x138>)
 800a4b6:	f7fd fbdb 	bl	8007c70 <audioInit>
  while (1)
 800a4ba:	e7fe      	b.n	800a4ba <main+0x10e>
 800a4bc:	e000ed00 	.word	0xe000ed00
 800a4c0:	58020800 	.word	0x58020800
 800a4c4:	30008400 	.word	0x30008400
 800a4c8:	20017ff8 	.word	0x20017ff8
 800a4cc:	30008420 	.word	0x30008420
 800a4d0:	20018080 	.word	0x20018080
 800a4d4:	30008460 	.word	0x30008460
 800a4d8:	20017f70 	.word	0x20017f70
 800a4dc:	20017cec 	.word	0x20017cec
 800a4e0:	20017c54 	.word	0x20017c54
 800a4e4:	20017afc 	.word	0x20017afc

0800a4e8 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800a4e8:	4770      	bx	lr
 800a4ea:	bf00      	nop

0800a4ec <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800a4ec:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800a4ee:	4806      	ldr	r0, [pc, #24]	; (800a508 <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	4a06      	ldr	r2, [pc, #24]	; (800a50c <MX_RNG_Init+0x20>)
 800a4f4:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800a4f8:	f7f9 ff06 	bl	8004308 <HAL_RNG_Init>
 800a4fc:	b900      	cbnz	r0, 800a500 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800a4fe:	bd08      	pop	{r3, pc}
 800a500:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a504:	f7ff bff0 	b.w	800a4e8 <Error_Handler>
 800a508:	20017b4c 	.word	0x20017b4c
 800a50c:	48021800 	.word	0x48021800

0800a510 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800a510:	b510      	push	{r4, lr}
 800a512:	b0b0      	sub	sp, #192	; 0xc0
 800a514:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a516:	22bc      	movs	r2, #188	; 0xbc
 800a518:	2100      	movs	r1, #0
 800a51a:	a801      	add	r0, sp, #4
 800a51c:	f001 fcf6 	bl	800bf0c <memset>
  if(rngHandle->Instance==RNG)
 800a520:	4b0f      	ldr	r3, [pc, #60]	; (800a560 <HAL_RNG_MspInit+0x50>)
 800a522:	6822      	ldr	r2, [r4, #0]
 800a524:	429a      	cmp	r2, r3
 800a526:	d001      	beq.n	800a52c <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 800a528:	b030      	add	sp, #192	; 0xc0
 800a52a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800a52c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a530:	a801      	add	r0, sp, #4
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800a532:	9301      	str	r3, [sp, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a534:	f7f8 fe04 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 800a538:	b970      	cbnz	r0, 800a558 <HAL_RNG_MspInit+0x48>
    __HAL_RCC_RNG_CLK_ENABLE();
 800a53a:	4b0a      	ldr	r3, [pc, #40]	; (800a564 <HAL_RNG_MspInit+0x54>)
 800a53c:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 800a540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a544:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 800a548:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800a54c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a550:	9300      	str	r3, [sp, #0]
 800a552:	9b00      	ldr	r3, [sp, #0]
}
 800a554:	b030      	add	sp, #192	; 0xc0
 800a556:	bd10      	pop	{r4, pc}
      Error_Handler();
 800a558:	f7ff ffc6 	bl	800a4e8 <Error_Handler>
 800a55c:	e7ed      	b.n	800a53a <HAL_RNG_MspInit+0x2a>
 800a55e:	bf00      	nop
 800a560:	48021800 	.word	0x48021800
 800a564:	58024400 	.word	0x58024400

0800a568 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 800a568:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 800a56a:	4818      	ldr	r0, [pc, #96]	; (800a5cc <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 800a56c:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 800a56e:	4c18      	ldr	r4, [pc, #96]	; (800a5d0 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800a570:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a572:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800a574:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800a576:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a578:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a57a:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a57c:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 800a57e:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800a582:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800a586:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800a58a:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a58c:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a590:	f7fa f906 	bl	80047a0 <HAL_SAI_InitProtocol>
 800a594:	b998      	cbnz	r0, 800a5be <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800a596:	480f      	ldr	r0, [pc, #60]	; (800a5d4 <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800a598:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 800a59a:	4c0f      	ldr	r4, [pc, #60]	; (800a5d8 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a59c:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a59e:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 800a5a0:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 800a5a2:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800a5a4:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800a5a6:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a5a8:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800a5aa:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800a5ac:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800a5ae:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800a5b0:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800a5b2:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800a5b6:	f7fa f8f3 	bl	80047a0 <HAL_SAI_InitProtocol>
 800a5ba:	b918      	cbnz	r0, 800a5c4 <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800a5bc:	bd10      	pop	{r4, pc}
    Error_Handler();
 800a5be:	f7ff ff93 	bl	800a4e8 <Error_Handler>
 800a5c2:	e7e8      	b.n	800a596 <MX_SAI1_Init+0x2e>
}
 800a5c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800a5c8:	f7ff bf8e 	b.w	800a4e8 <Error_Handler>
 800a5cc:	20017c54 	.word	0x20017c54
 800a5d0:	40015804 	.word	0x40015804
 800a5d4:	20017cec 	.word	0x20017cec
 800a5d8:	40015824 	.word	0x40015824
 800a5dc:	00000000 	.word	0x00000000

0800a5e0 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 800a5e0:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 800a5e2:	4a55      	ldr	r2, [pc, #340]	; (800a738 <HAL_SAI_MspInit+0x158>)
{
 800a5e4:	b089      	sub	sp, #36	; 0x24
    if(hsai->Instance==SAI1_Block_A)
 800a5e6:	6803      	ldr	r3, [r0, #0]
{
 800a5e8:	4604      	mov	r4, r0
    if(hsai->Instance==SAI1_Block_A)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d004      	beq.n	800a5f8 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
    }
    if(hsai->Instance==SAI1_Block_B)
 800a5ee:	4a53      	ldr	r2, [pc, #332]	; (800a73c <HAL_SAI_MspInit+0x15c>)
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d03f      	beq.n	800a674 <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
    }
}
 800a5f4:	b009      	add	sp, #36	; 0x24
 800a5f6:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 800a5f8:	4b51      	ldr	r3, [pc, #324]	; (800a740 <HAL_SAI_MspInit+0x160>)
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	f000 8081 	beq.w	800a704 <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 800a602:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a604:	2074      	movs	r0, #116	; 0x74
 800a606:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 800a608:	4d4e      	ldr	r5, [pc, #312]	; (800a744 <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 800a60a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a60c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a60e:	ed9f 7b48 	vldr	d7, [pc, #288]	; 800a730 <HAL_SAI_MspInit+0x150>
 800a612:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a616:	a902      	add	r1, sp, #8
 800a618:	484b      	ldr	r0, [pc, #300]	; (800a748 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a61a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800a61c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a620:	f7f7 fb46 	bl	8001cb0 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 800a624:	4949      	ldr	r1, [pc, #292]	; (800a74c <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800a626:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800a628:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800a62a:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800a62c:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800a62e:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 800a630:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800a634:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a638:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a63a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 800a63e:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a648:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a64a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800a64e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800a652:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a656:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a65a:	2304      	movs	r3, #4
 800a65c:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 800a65e:	f7f6 f86d 	bl	800073c <HAL_DMA_Init>
 800a662:	2800      	cmp	r0, #0
 800a664:	d15c      	bne.n	800a720 <HAL_SAI_MspInit+0x140>
    if(hsai->Instance==SAI1_Block_B)
 800a666:	4a35      	ldr	r2, [pc, #212]	; (800a73c <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_a);
 800a668:	63ac      	str	r4, [r5, #56]	; 0x38
    if(hsai->Instance==SAI1_Block_B)
 800a66a:	6823      	ldr	r3, [r4, #0]
 800a66c:	4293      	cmp	r3, r2
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_a);
 800a66e:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(hsai->Instance==SAI1_Block_B)
 800a672:	d1bf      	bne.n	800a5f4 <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 800a674:	4b32      	ldr	r3, [pc, #200]	; (800a740 <HAL_SAI_MspInit+0x160>)
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	b3b2      	cbz	r2, 800a6e8 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 800a67a:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a67c:	2008      	movs	r0, #8
 800a67e:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 800a680:	4d33      	ldr	r5, [pc, #204]	; (800a750 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 800a682:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a684:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a686:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 800a730 <HAL_SAI_MspInit+0x150>
 800a68a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a68e:	a902      	add	r1, sp, #8
 800a690:	482d      	ldr	r0, [pc, #180]	; (800a748 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800a692:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a694:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a698:	f7f7 fb0a 	bl	8001cb0 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 800a69c:	492d      	ldr	r1, [pc, #180]	; (800a754 <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800a69e:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a6a0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800a6a2:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a6a4:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800a6a6:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800a6aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a6ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a6b2:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800a6b6:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a6ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800a6be:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800a6c2:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800a6c6:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a6ca:	2304      	movs	r3, #4
 800a6cc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800a6d0:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800a6d4:	f7f6 f832 	bl	800073c <HAL_DMA_Init>
 800a6d8:	bb28      	cbnz	r0, 800a726 <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 800a6da:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 800a6de:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 800a6e0:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 800a6e4:	b009      	add	sp, #36	; 0x24
 800a6e6:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 800a6e8:	491b      	ldr	r1, [pc, #108]	; (800a758 <HAL_SAI_MspInit+0x178>)
 800a6ea:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800a6ee:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800a6f2:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800a6f6:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800a6fa:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a6fe:	9101      	str	r1, [sp, #4]
 800a700:	9901      	ldr	r1, [sp, #4]
 800a702:	e7ba      	b.n	800a67a <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 800a704:	4914      	ldr	r1, [pc, #80]	; (800a758 <HAL_SAI_MspInit+0x178>)
 800a706:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 800a70a:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 800a70e:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 800a712:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 800a716:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a71a:	9100      	str	r1, [sp, #0]
 800a71c:	9900      	ldr	r1, [sp, #0]
 800a71e:	e770      	b.n	800a602 <HAL_SAI_MspInit+0x22>
      Error_Handler();
 800a720:	f7ff fee2 	bl	800a4e8 <Error_Handler>
 800a724:	e79f      	b.n	800a666 <HAL_SAI_MspInit+0x86>
      Error_Handler();
 800a726:	f7ff fedf 	bl	800a4e8 <Error_Handler>
 800a72a:	e7d6      	b.n	800a6da <HAL_SAI_MspInit+0xfa>
 800a72c:	f3af 8000 	nop.w
 800a730:	00000000 	.word	0x00000000
 800a734:	00000003 	.word	0x00000003
 800a738:	40015804 	.word	0x40015804
 800a73c:	40015824 	.word	0x40015824
 800a740:	20017b60 	.word	0x20017b60
 800a744:	20017b64 	.word	0x20017b64
 800a748:	58021000 	.word	0x58021000
 800a74c:	40020028 	.word	0x40020028
 800a750:	20017bdc 	.word	0x20017bdc
 800a754:	40020040 	.word	0x40020040
 800a758:	58024400 	.word	0x58024400

0800a75c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800a75c:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 800a75e:	4c0a      	ldr	r4, [pc, #40]	; (800a788 <SD_initialize+0x2c>)
 800a760:	2501      	movs	r5, #1
 800a762:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800a764:	f7ff f9ac 	bl	8009ac0 <BSP_SD_Init>
 800a768:	b108      	cbz	r0, 800a76e <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800a76a:	7820      	ldrb	r0, [r4, #0]
}
 800a76c:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 800a76e:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a770:	f7ff f986 	bl	8009a80 <BSP_SD_GetCardState>
 800a774:	b918      	cbnz	r0, 800a77e <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 800a776:	7823      	ldrb	r3, [r4, #0]
 800a778:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a77c:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a77e:	7823      	ldrb	r3, [r4, #0]
 800a780:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 800a782:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a784:	7820      	ldrb	r0, [r4, #0]
}
 800a786:	bd38      	pop	{r3, r4, r5, pc}
 800a788:	2000093a 	.word	0x2000093a

0800a78c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800a78c:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 800a78e:	2301      	movs	r3, #1
 800a790:	4c05      	ldr	r4, [pc, #20]	; (800a7a8 <SD_status+0x1c>)
 800a792:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 800a794:	f7ff f974 	bl	8009a80 <BSP_SD_GetCardState>
 800a798:	b918      	cbnz	r0, 800a7a2 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 800a79a:	7823      	ldrb	r3, [r4, #0]
 800a79c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800a7a0:	7023      	strb	r3, [r4, #0]
  return Stat;
 800a7a2:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 800a7a4:	bd10      	pop	{r4, pc}
 800a7a6:	bf00      	nop
 800a7a8:	2000093a 	.word	0x2000093a

0800a7ac <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800a7ac:	b508      	push	{r3, lr}
 800a7ae:	4608      	mov	r0, r1
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800a7b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a7b8:	f7ff f93e 	bl	8009a38 <BSP_SD_ReadBlocks>
 800a7bc:	b108      	cbz	r0, 800a7c2 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 800a7be:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 800a7c0:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a7c2:	f7ff f95d 	bl	8009a80 <BSP_SD_GetCardState>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d0fa      	beq.n	800a7c0 <SD_read+0x14>
 800a7ca:	f7ff f959 	bl	8009a80 <BSP_SD_GetCardState>
 800a7ce:	2800      	cmp	r0, #0
 800a7d0:	d1f7      	bne.n	800a7c2 <SD_read+0x16>
 800a7d2:	e7f5      	b.n	800a7c0 <SD_read+0x14>

0800a7d4 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7d4:	4b18      	ldr	r3, [pc, #96]	; (800a838 <SD_ioctl+0x64>)
{
 800a7d6:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7d8:	7818      	ldrb	r0, [r3, #0]
{
 800a7da:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7dc:	f010 0401 	ands.w	r4, r0, #1
 800a7e0:	d106      	bne.n	800a7f0 <SD_ioctl+0x1c>
 800a7e2:	4615      	mov	r5, r2

  switch (cmd)
 800a7e4:	2903      	cmp	r1, #3
 800a7e6:	d824      	bhi.n	800a832 <SD_ioctl+0x5e>
 800a7e8:	e8df f001 	tbb	[pc, r1]
 800a7ec:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800a7f0:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	b00b      	add	sp, #44	; 0x2c
 800a7f6:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 800a7f8:	460c      	mov	r4, r1
}
 800a7fa:	4620      	mov	r0, r4
 800a7fc:	b00b      	add	sp, #44	; 0x2c
 800a7fe:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a800:	a801      	add	r0, sp, #4
 800a802:	f7ff f947 	bl	8009a94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a806:	9b07      	ldr	r3, [sp, #28]
}
 800a808:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800a80a:	602b      	str	r3, [r5, #0]
}
 800a80c:	b00b      	add	sp, #44	; 0x2c
 800a80e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a810:	a801      	add	r0, sp, #4
 800a812:	f7ff f93f 	bl	8009a94 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a816:	9b08      	ldr	r3, [sp, #32]
}
 800a818:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 800a81a:	802b      	strh	r3, [r5, #0]
}
 800a81c:	b00b      	add	sp, #44	; 0x2c
 800a81e:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 800a820:	a801      	add	r0, sp, #4
 800a822:	f7ff f937 	bl	8009a94 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a826:	9b08      	ldr	r3, [sp, #32]
}
 800a828:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800a82a:	0a5b      	lsrs	r3, r3, #9
 800a82c:	602b      	str	r3, [r5, #0]
}
 800a82e:	b00b      	add	sp, #44	; 0x2c
 800a830:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 800a832:	2404      	movs	r4, #4
 800a834:	e7dd      	b.n	800a7f2 <SD_ioctl+0x1e>
 800a836:	bf00      	nop
 800a838:	2000093a 	.word	0x2000093a

0800a83c <SD_write>:
{
 800a83c:	b508      	push	{r3, lr}
 800a83e:	4608      	mov	r0, r1
 800a840:	4611      	mov	r1, r2
 800a842:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800a844:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a848:	f7ff f908 	bl	8009a5c <BSP_SD_WriteBlocks>
 800a84c:	b108      	cbz	r0, 800a852 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 800a84e:	2001      	movs	r0, #1
}
 800a850:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 800a852:	f7ff f915 	bl	8009a80 <BSP_SD_GetCardState>
 800a856:	2800      	cmp	r0, #0
 800a858:	d0fa      	beq.n	800a850 <SD_write+0x14>
 800a85a:	f7ff f911 	bl	8009a80 <BSP_SD_GetCardState>
 800a85e:	2800      	cmp	r0, #0
 800a860:	d1f7      	bne.n	800a852 <SD_write+0x16>
 800a862:	e7f5      	b.n	800a850 <SD_write+0x14>

0800a864 <MX_SDMMC1_SD_Init>:
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800a864:	4b08      	ldr	r3, [pc, #32]	; (800a888 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800a866:	2200      	movs	r2, #0
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800a868:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 16;
 800a86c:	2010      	movs	r0, #16
{
 800a86e:	b410      	push	{r4}
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800a870:	e9c3 2102 	strd	r2, r1, [r3, #8]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800a874:	2101      	movs	r1, #1
  hsd1.Instance = SDMMC1;
 800a876:	4c05      	ldr	r4, [pc, #20]	; (800a88c <MX_SDMMC1_SD_Init+0x28>)
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 800a878:	6199      	str	r1, [r3, #24]
  hsd1.Instance = SDMMC1;
 800a87a:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.ClockDiv = 16;
 800a87e:	e9c3 2004 	strd	r2, r0, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800a882:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a886:	4770      	bx	lr
 800a888:	20017d84 	.word	0x20017d84
 800a88c:	52007000 	.word	0x52007000

0800a890 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800a890:	b5d0      	push	{r4, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 800a892:	4a27      	ldr	r2, [pc, #156]	; (800a930 <HAL_SD_MspInit+0xa0>)
{
 800a894:	b08a      	sub	sp, #40	; 0x28
  if(sdHandle->Instance==SDMMC1)
 800a896:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a898:	2300      	movs	r3, #0
  if(sdHandle->Instance==SDMMC1)
 800a89a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a89c:	9308      	str	r3, [sp, #32]
 800a89e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800a8a2:	e9cd 3306 	strd	r3, r3, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 800a8a6:	d001      	beq.n	800a8ac <HAL_SD_MspInit+0x1c>

  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 800a8a8:	b00a      	add	sp, #40	; 0x28
 800a8aa:	bdd0      	pop	{r4, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a8ac:	4b21      	ldr	r3, [pc, #132]	; (800a934 <HAL_SD_MspInit+0xa4>)
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800a8ae:	f44f 50f8 	mov.w	r0, #7936	; 0x1f00
 800a8b2:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800a8b4:	240c      	movs	r4, #12
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a8b6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800a8ba:	2601      	movs	r6, #1
 800a8bc:	2701      	movs	r7, #1
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 800a8be:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800a8c2:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800a8c6:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 800a8ca:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800a8ce:	9201      	str	r2, [sp, #4]
 800a8d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a8d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a8d6:	f042 0204 	orr.w	r2, r2, #4
 800a8da:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a8de:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a8e2:	f002 0204 	and.w	r2, r2, #4
 800a8e6:	9202      	str	r2, [sp, #8]
 800a8e8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800a8ee:	f042 0208 	orr.w	r2, r2, #8
 800a8f2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800a8f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800a8fa:	9408      	str	r4, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a8fc:	f003 0308 	and.w	r3, r3, #8
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800a900:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a904:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a906:	a904      	add	r1, sp, #16
 800a908:	480b      	ldr	r0, [pc, #44]	; (800a938 <HAL_SD_MspInit+0xa8>)
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a90a:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800a90c:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a910:	f7f7 f9ce 	bl	8001cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a914:	2204      	movs	r2, #4
 800a916:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a918:	a904      	add	r1, sp, #16
 800a91a:	4808      	ldr	r0, [pc, #32]	; (800a93c <HAL_SD_MspInit+0xac>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800a91c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a91e:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a922:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a926:	f7f7 f9c3 	bl	8001cb0 <HAL_GPIO_Init>
}
 800a92a:	b00a      	add	sp, #40	; 0x28
 800a92c:	bdd0      	pop	{r4, r6, r7, pc}
 800a92e:	bf00      	nop
 800a930:	52007000 	.word	0x52007000
 800a934:	58024400 	.word	0x58024400
 800a938:	58020800 	.word	0x58020800
 800a93c:	58020c00 	.word	0x58020c00

0800a940 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800a940:	4813      	ldr	r0, [pc, #76]	; (800a990 <MX_SPI1_Init+0x50>)
 800a942:	4a14      	ldr	r2, [pc, #80]	; (800a994 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a944:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a988 <MX_SPI1_Init+0x48>
{
 800a948:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800a94a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 800a94c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a94e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800a950:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800a952:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a954:	ed80 7b08 	vstr	d7, [r0, #32]
 800a958:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800a95c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a960:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800a964:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800a968:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800a96c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800a970:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800a974:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800a978:	f7fb f94e 	bl	8005c18 <HAL_SPI_Init>
 800a97c:	b900      	cbnz	r0, 800a980 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800a97e:	bd08      	pop	{r3, pc}
 800a980:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a984:	f7ff bdb0 	b.w	800a4e8 <Error_Handler>
	...
 800a990:	20017f70 	.word	0x20017f70
 800a994:	40013000 	.word	0x40013000

0800a998 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800a998:	4813      	ldr	r0, [pc, #76]	; (800a9e8 <MX_SPI2_Init+0x50>)
 800a99a:	4a14      	ldr	r2, [pc, #80]	; (800a9ec <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a99c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800a9e0 <MX_SPI2_Init+0x48>
{
 800a9a0:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800a9a2:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 800a9a4:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a9a6:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800a9a8:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800a9aa:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a9ac:	ed80 7b08 	vstr	d7, [r0, #32]
 800a9b0:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800a9b4:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a9b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800a9bc:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800a9c0:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800a9c4:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800a9c8:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800a9cc:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800a9d0:	f7fb f922 	bl	8005c18 <HAL_SPI_Init>
 800a9d4:	b900      	cbnz	r0, 800a9d8 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800a9d6:	bd08      	pop	{r3, pc}
 800a9d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800a9dc:	f7ff bd84 	b.w	800a4e8 <Error_Handler>
	...
 800a9e8:	20017ff8 	.word	0x20017ff8
 800a9ec:	40003800 	.word	0x40003800

0800a9f0 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800a9f0:	4813      	ldr	r0, [pc, #76]	; (800aa40 <MX_SPI5_Init+0x50>)
 800a9f2:	4a14      	ldr	r2, [pc, #80]	; (800aa44 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a9f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800aa38 <MX_SPI5_Init+0x48>
{
 800a9f8:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 800a9fa:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 800a9fc:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a9fe:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 800aa00:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800aa02:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800aa04:	ed80 7b08 	vstr	d7, [r0, #32]
 800aa08:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800aa0c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800aa10:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800aa14:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800aa18:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800aa1c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800aa20:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800aa24:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800aa28:	f7fb f8f6 	bl	8005c18 <HAL_SPI_Init>
 800aa2c:	b900      	cbnz	r0, 800aa30 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800aa2e:	bd08      	pop	{r3, pc}
 800aa30:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800aa34:	f7ff bd58 	b.w	800a4e8 <Error_Handler>
	...
 800aa40:	20018080 	.word	0x20018080
 800aa44:	40015000 	.word	0x40015000

0800aa48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800aa48:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa4a:	2400      	movs	r4, #0
{
 800aa4c:	b0ba      	sub	sp, #232	; 0xe8
 800aa4e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aa50:	22bc      	movs	r2, #188	; 0xbc
 800aa52:	4621      	mov	r1, r4
 800aa54:	a80b      	add	r0, sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa56:	940a      	str	r4, [sp, #40]	; 0x28
 800aa58:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800aa5c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800aa60:	f001 fa54 	bl	800bf0c <memset>
  if(spiHandle->Instance==SPI1)
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	4a98      	ldr	r2, [pc, #608]	; (800acc8 <HAL_SPI_MspInit+0x280>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d008      	beq.n	800aa7e <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 800aa6c:	4a97      	ldr	r2, [pc, #604]	; (800accc <HAL_SPI_MspInit+0x284>)
 800aa6e:	4293      	cmp	r3, r2
 800aa70:	d061      	beq.n	800ab36 <HAL_SPI_MspInit+0xee>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 800aa72:	4a97      	ldr	r2, [pc, #604]	; (800acd0 <HAL_SPI_MspInit+0x288>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	f000 80bb 	beq.w	800abf0 <HAL_SPI_MspInit+0x1a8>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800aa7a:	b03a      	add	sp, #232	; 0xe8
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa7e:	4b95      	ldr	r3, [pc, #596]	; (800acd4 <HAL_SPI_MspInit+0x28c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa80:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa82:	4895      	ldr	r0, [pc, #596]	; (800acd8 <HAL_SPI_MspInit+0x290>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 800aa84:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800aa88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aa8c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800aa90:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800aa94:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800aa98:	9200      	str	r2, [sp, #0]
 800aa9a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800aaa0:	f042 0201 	orr.w	r2, r2, #1
 800aaa4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800aaa8:	22b0      	movs	r2, #176	; 0xb0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aaaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800aaae:	f003 0301 	and.w	r3, r3, #1
 800aab2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800aab4:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aab6:	9901      	ldr	r1, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aab8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800aaba:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aabe:	2303      	movs	r3, #3
 800aac0:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aac4:	f7f7 f8f4 	bl	8001cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800aac8:	2240      	movs	r2, #64	; 0x40
 800aaca:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aacc:	4882      	ldr	r0, [pc, #520]	; (800acd8 <HAL_SPI_MspInit+0x290>)
 800aace:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800aad0:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800aad2:	4e82      	ldr	r6, [pc, #520]	; (800acdc <HAL_SPI_MspInit+0x294>)
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800aad4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aad8:	2200      	movs	r2, #0
 800aada:	2302      	movs	r3, #2
 800aadc:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aae0:	f7f7 f8e6 	bl	8001cb0 <HAL_GPIO_Init>
    hdma_spi1_rx.Instance = DMA1_Stream4;
 800aae4:	4a7e      	ldr	r2, [pc, #504]	; (800ace0 <HAL_SPI_MspInit+0x298>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800aae6:	2325      	movs	r3, #37	; 0x25
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800aae8:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 800aaea:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aaee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800aaf2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800aaf6:	6132      	str	r2, [r6, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800aaf8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 800aafc:	61f3      	str	r3, [r6, #28]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800aafe:	2304      	movs	r3, #4
 800ab00:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800ab04:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ab06:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ab0a:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800ab0e:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800ab12:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800ab14:	f7f5 fe12 	bl	800073c <HAL_DMA_Init>
 800ab18:	2800      	cmp	r0, #0
 800ab1a:	f040 80c9 	bne.w	800acb0 <HAL_SPI_MspInit+0x268>
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ab1e:	2200      	movs	r2, #0
 800ab20:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800ab22:	67ee      	str	r6, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ab24:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800ab26:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 800ab28:	f7f5 fc72 	bl	8000410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800ab2c:	2023      	movs	r0, #35	; 0x23
 800ab2e:	f7f5 fcad 	bl	800048c <HAL_NVIC_EnableIRQ>
}
 800ab32:	b03a      	add	sp, #232	; 0xe8
 800ab34:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ab36:	4b67      	ldr	r3, [pc, #412]	; (800acd4 <HAL_SPI_MspInit+0x28c>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab38:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab3a:	486a      	ldr	r0, [pc, #424]	; (800ace4 <HAL_SPI_MspInit+0x29c>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800ab3c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800ab40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab44:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800ab48:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800ab4c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800ab50:	9202      	str	r2, [sp, #8]
 800ab52:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ab58:	f042 0202 	orr.w	r2, r2, #2
 800ab5c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800ab60:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ab68:	f003 0302 	and.w	r3, r3, #2
 800ab6c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800ab6e:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ab70:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab72:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800ab74:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab78:	2303      	movs	r3, #3
 800ab7a:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab7e:	f7f7 f897 	bl	8001cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ab82:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ab86:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab88:	4856      	ldr	r0, [pc, #344]	; (800ace4 <HAL_SPI_MspInit+0x29c>)
 800ab8a:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800ab8c:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 800ab8e:	4e56      	ldr	r6, [pc, #344]	; (800ace8 <HAL_SPI_MspInit+0x2a0>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800ab90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ab94:	2200      	movs	r2, #0
 800ab96:	2302      	movs	r3, #2
 800ab98:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800ab9c:	f7f7 f888 	bl	8001cb0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 800aba0:	4a52      	ldr	r2, [pc, #328]	; (800acec <HAL_SPI_MspInit+0x2a4>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800aba2:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800aba4:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800aba6:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800abaa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800abae:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800abb2:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800abb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 800abb8:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800abba:	2304      	movs	r3, #4
 800abbc:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800abc0:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800abc2:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800abc6:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800abca:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800abce:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800abd0:	f7f5 fdb4 	bl	800073c <HAL_DMA_Init>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d16e      	bne.n	800acb6 <HAL_SPI_MspInit+0x26e>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800abd8:	2200      	movs	r2, #0
 800abda:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800abdc:	67ee      	str	r6, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800abde:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 800abe0:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 800abe2:	f7f5 fc15 	bl	8000410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800abe6:	2024      	movs	r0, #36	; 0x24
 800abe8:	f7f5 fc50 	bl	800048c <HAL_NVIC_EnableIRQ>
}
 800abec:	b03a      	add	sp, #232	; 0xe8
 800abee:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800abf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800abf4:	a80b      	add	r0, sp, #44	; 0x2c
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 800abf6:	930b      	str	r3, [sp, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800abf8:	f7f8 faa2 	bl	8003140 <HAL_RCCEx_PeriphCLKConfig>
 800abfc:	2800      	cmp	r0, #0
 800abfe:	d160      	bne.n	800acc2 <HAL_SPI_MspInit+0x27a>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800ac00:	4b34      	ldr	r3, [pc, #208]	; (800acd4 <HAL_SPI_MspInit+0x28c>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800ac02:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac04:	483a      	ldr	r0, [pc, #232]	; (800acf0 <HAL_SPI_MspInit+0x2a8>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 800ac06:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800ac0a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800ac0e:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800ac12:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800ac16:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800ac1a:	9204      	str	r2, [sp, #16]
 800ac1c:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ac1e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800ac22:	f042 0220 	orr.w	r2, r2, #32
 800ac26:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800ac2a:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ac2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800ac32:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800ac3a:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800ac3c:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac3e:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 800ac40:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac44:	2200      	movs	r2, #0
 800ac46:	2302      	movs	r3, #2
 800ac48:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac4c:	f7f7 f830 	bl	8001cb0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ac50:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ac54:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac56:	a906      	add	r1, sp, #24
 800ac58:	4825      	ldr	r0, [pc, #148]	; (800acf0 <HAL_SPI_MspInit+0x2a8>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800ac5a:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800ac5c:	4c25      	ldr	r4, [pc, #148]	; (800acf4 <HAL_SPI_MspInit+0x2ac>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800ac5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ac62:	2200      	movs	r2, #0
 800ac64:	2300      	movs	r3, #0
 800ac66:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ac6a:	f7f7 f821 	bl	8001cb0 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 800ac6e:	4922      	ldr	r1, [pc, #136]	; (800acf8 <HAL_SPI_MspInit+0x2b0>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800ac70:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800ac72:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800ac74:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800ac76:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 800ac78:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ac7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac80:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800ac84:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800ac88:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800ac8c:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800ac8e:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800ac92:	f7f5 fd53 	bl	800073c <HAL_DMA_Init>
 800ac96:	b988      	cbnz	r0, 800acbc <HAL_SPI_MspInit+0x274>
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800ac98:	2200      	movs	r2, #0
 800ac9a:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800ac9c:	67ec      	str	r4, [r5, #124]	; 0x7c
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800ac9e:	4611      	mov	r1, r2
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800aca0:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 800aca2:	f7f5 fbb5 	bl	8000410 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 800aca6:	2055      	movs	r0, #85	; 0x55
 800aca8:	f7f5 fbf0 	bl	800048c <HAL_NVIC_EnableIRQ>
}
 800acac:	b03a      	add	sp, #232	; 0xe8
 800acae:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800acb0:	f7ff fc1a 	bl	800a4e8 <Error_Handler>
 800acb4:	e733      	b.n	800ab1e <HAL_SPI_MspInit+0xd6>
      Error_Handler();
 800acb6:	f7ff fc17 	bl	800a4e8 <Error_Handler>
 800acba:	e78d      	b.n	800abd8 <HAL_SPI_MspInit+0x190>
      Error_Handler();
 800acbc:	f7ff fc14 	bl	800a4e8 <Error_Handler>
 800acc0:	e7ea      	b.n	800ac98 <HAL_SPI_MspInit+0x250>
      Error_Handler();
 800acc2:	f7ff fc11 	bl	800a4e8 <Error_Handler>
 800acc6:	e79b      	b.n	800ac00 <HAL_SPI_MspInit+0x1b8>
 800acc8:	40013000 	.word	0x40013000
 800accc:	40003800 	.word	0x40003800
 800acd0:	40015000 	.word	0x40015000
 800acd4:	58024400 	.word	0x58024400
 800acd8:	58020000 	.word	0x58020000
 800acdc:	20017e04 	.word	0x20017e04
 800ace0:	40020070 	.word	0x40020070
 800ace4:	58020400 	.word	0x58020400
 800ace8:	20017e7c 	.word	0x20017e7c
 800acec:	40020010 	.word	0x40020010
 800acf0:	58021400 	.word	0x58021400
 800acf4:	20017ef4 	.word	0x20017ef4
 800acf8:	40020058 	.word	0x40020058

0800acfc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acfc:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <HAL_MspInit+0x20>)
{
 800acfe:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ad00:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800ad04:	f042 0202 	orr.w	r2, r2, #2
 800ad08:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 800ad0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	9301      	str	r3, [sp, #4]
 800ad16:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800ad18:	b002      	add	sp, #8
 800ad1a:	4770      	bx	lr
 800ad1c:	58024400 	.word	0x58024400

0800ad20 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800ad20:	4770      	bx	lr
 800ad22:	bf00      	nop

0800ad24 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ad24:	e7fe      	b.n	800ad24 <HardFault_Handler>
 800ad26:	bf00      	nop

0800ad28 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ad28:	e7fe      	b.n	800ad28 <MemManage_Handler>
 800ad2a:	bf00      	nop

0800ad2c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ad2c:	e7fe      	b.n	800ad2c <BusFault_Handler>
 800ad2e:	bf00      	nop

0800ad30 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ad30:	e7fe      	b.n	800ad30 <UsageFault_Handler>
 800ad32:	bf00      	nop

0800ad34 <SVC_Handler>:
 800ad34:	4770      	bx	lr
 800ad36:	bf00      	nop

0800ad38 <DebugMon_Handler>:
 800ad38:	4770      	bx	lr
 800ad3a:	bf00      	nop

0800ad3c <PendSV_Handler>:
 800ad3c:	4770      	bx	lr
 800ad3e:	bf00      	nop

0800ad40 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad40:	f7f5 bb20 	b.w	8000384 <HAL_IncTick>

0800ad44 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ad44:	4801      	ldr	r0, [pc, #4]	; (800ad4c <DMA1_Stream0_IRQHandler+0x8>)
 800ad46:	f7f6 bb4d 	b.w	80013e4 <HAL_DMA_IRQHandler>
 800ad4a:	bf00      	nop
 800ad4c:	20017e7c 	.word	0x20017e7c

0800ad50 <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 800ad50:	4801      	ldr	r0, [pc, #4]	; (800ad58 <DMA1_Stream1_IRQHandler+0x8>)
 800ad52:	f7f6 bb47 	b.w	80013e4 <HAL_DMA_IRQHandler>
 800ad56:	bf00      	nop
 800ad58:	20017b64 	.word	0x20017b64

0800ad5c <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800ad5c:	4801      	ldr	r0, [pc, #4]	; (800ad64 <DMA1_Stream2_IRQHandler+0x8>)
 800ad5e:	f7f6 bb41 	b.w	80013e4 <HAL_DMA_IRQHandler>
 800ad62:	bf00      	nop
 800ad64:	20017bdc 	.word	0x20017bdc

0800ad68 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800ad68:	4801      	ldr	r0, [pc, #4]	; (800ad70 <DMA1_Stream3_IRQHandler+0x8>)
 800ad6a:	f7f6 bb3b 	b.w	80013e4 <HAL_DMA_IRQHandler>
 800ad6e:	bf00      	nop
 800ad70:	20017ef4 	.word	0x20017ef4

0800ad74 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800ad74:	4801      	ldr	r0, [pc, #4]	; (800ad7c <DMA1_Stream4_IRQHandler+0x8>)
 800ad76:	f7f6 bb35 	b.w	80013e4 <HAL_DMA_IRQHandler>
 800ad7a:	bf00      	nop
 800ad7c:	20017e04 	.word	0x20017e04

0800ad80 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800ad80:	4801      	ldr	r0, [pc, #4]	; (800ad88 <SPI1_IRQHandler+0x8>)
 800ad82:	f7fb bac1 	b.w	8006308 <HAL_SPI_IRQHandler>
 800ad86:	bf00      	nop
 800ad88:	20017f70 	.word	0x20017f70

0800ad8c <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800ad8c:	4801      	ldr	r0, [pc, #4]	; (800ad94 <SPI2_IRQHandler+0x8>)
 800ad8e:	f7fb babb 	b.w	8006308 <HAL_SPI_IRQHandler>
 800ad92:	bf00      	nop
 800ad94:	20017ff8 	.word	0x20017ff8

0800ad98 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 800ad98:	4801      	ldr	r0, [pc, #4]	; (800ada0 <SPI5_IRQHandler+0x8>)
 800ad9a:	f7fb bab5 	b.w	8006308 <HAL_SPI_IRQHandler>
 800ad9e:	bf00      	nop
 800ada0:	20018080 	.word	0x20018080

0800ada4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800ada4:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800ada6:	4c1a      	ldr	r4, [pc, #104]	; (800ae10 <SystemInit+0x6c>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800ada8:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
 800adaa:	4b1a      	ldr	r3, [pc, #104]	; (800ae14 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800adac:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800adb0:	4819      	ldr	r0, [pc, #100]	; (800ae18 <SystemInit+0x74>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800adb2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800adb6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
 800adba:	6819      	ldr	r1, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800adbc:	4c17      	ldr	r4, [pc, #92]	; (800ae1c <SystemInit+0x78>)
  RCC->CR |= RCC_CR_HSION;
 800adbe:	f041 0101 	orr.w	r1, r1, #1
 800adc2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 800adc4:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 800adc6:	6819      	ldr	r1, [r3, #0]
 800adc8:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800adca:	4915      	ldr	r1, [pc, #84]	; (800ae20 <SystemInit+0x7c>)
  RCC->CR &= 0xEAF6ED7FU;
 800adcc:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
 800adce:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 800add0:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 800add2:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
 800add4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
 800add6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
 800add8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
 800adda:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
 800addc:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
 800adde:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
 800ade0:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
 800ade2:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
 800ade4:	6818      	ldr	r0, [r3, #0]
 800ade6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 800adea:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 800adec:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800adee:	6823      	ldr	r3, [r4, #0]
 800adf0:	4019      	ands	r1, r3
 800adf2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800adf6:	d203      	bcs.n	800ae00 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800adf8:	4b0a      	ldr	r3, [pc, #40]	; (800ae24 <SystemInit+0x80>)
 800adfa:	2201      	movs	r2, #1
 800adfc:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800ae00:	4b03      	ldr	r3, [pc, #12]	; (800ae10 <SystemInit+0x6c>)
 800ae02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800ae06:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800ae08:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae0c:	4770      	bx	lr
 800ae0e:	bf00      	nop
 800ae10:	e000ed00 	.word	0xe000ed00
 800ae14:	58024400 	.word	0x58024400
 800ae18:	eaf6ed7f 	.word	0xeaf6ed7f
 800ae1c:	5c001000 	.word	0x5c001000
 800ae20:	ffff0000 	.word	0xffff0000
 800ae24:	51008000 	.word	0x51008000

0800ae28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800ae28:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ae60 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800ae2c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800ae2e:	e003      	b.n	800ae38 <LoopCopyDataInit>

0800ae30 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800ae30:	4b0c      	ldr	r3, [pc, #48]	; (800ae64 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800ae32:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800ae34:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800ae36:	3104      	adds	r1, #4

0800ae38 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800ae38:	480b      	ldr	r0, [pc, #44]	; (800ae68 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800ae3a:	4b0c      	ldr	r3, [pc, #48]	; (800ae6c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800ae3c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800ae3e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800ae40:	d3f6      	bcc.n	800ae30 <CopyDataInit>
  ldr  r2, =_sbss
 800ae42:	4a0b      	ldr	r2, [pc, #44]	; (800ae70 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800ae44:	e002      	b.n	800ae4c <LoopFillZerobss>

0800ae46 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800ae46:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800ae48:	f842 3b04 	str.w	r3, [r2], #4

0800ae4c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800ae4c:	4b09      	ldr	r3, [pc, #36]	; (800ae74 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800ae4e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800ae50:	d3f9      	bcc.n	800ae46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800ae52:	f7ff ffa7 	bl	800ada4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800ae56:	f001 f835 	bl	800bec4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ae5a:	f7ff faa7 	bl	800a3ac <main>
  bx  lr    
 800ae5e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ae60:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800ae64:	08014588 	.word	0x08014588
  ldr  r0, =_sdata
 800ae68:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800ae6c:	200009a8 	.word	0x200009a8
  ldr  r2, =_sbss
 800ae70:	200009a8 	.word	0x200009a8
  ldr  r3, = _ebss
 800ae74:	20018108 	.word	0x20018108

0800ae78 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ae78:	e7fe      	b.n	800ae78 <ADC3_IRQHandler>
	...

0800ae7c <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 800ae7c:	b538      	push	{r3, r4, r5, lr}
 800ae7e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800ae82:	680d      	ldr	r5, [r1, #0]
{
 800ae84:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800ae86:	2010      	movs	r0, #16
{
 800ae88:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	f000 fe81 	bl	800bb94 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 800ae92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 800ae96:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 800ae98:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 800ae9a:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 800ae9c:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 800aea0:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 800aea2:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 800aea6:	edc0 7a02 	vstr	s15, [r0, #8]
}
 800aeaa:	ecbd 8b02 	vpop	{d8}
 800aeae:	bd38      	pop	{r3, r4, r5, pc}

0800aeb0 <tFeedbackLeveler_init>:
}

/* Feedback Leveler */

void tFeedbackLeveler_init (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, LEAF* const leaf)
{
 800aeb0:	b5f0      	push	{r4, r5, r6, r7, lr}
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
    _tMempool* m = *mp;
 800aeb2:	4614      	mov	r4, r2
{
 800aeb4:	4606      	mov	r6, r0
 800aeb6:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800aeb8:	2018      	movs	r0, #24
{
 800aeba:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800aebe:	f854 7f18 	ldr.w	r7, [r4, #24]!
{
 800aec2:	b083      	sub	sp, #12
 800aec4:	eef0 8a40 	vmov.f32	s17, s0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800aec8:	4639      	mov	r1, r7
{
 800aeca:	eeb0 8a41 	vmov.f32	s16, s2
 800aece:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800aed2:	f000 fe5f 	bl	800bb94 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800aed6:	4621      	mov	r1, r4
    p->curr=0.0f;
 800aed8:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 800aeda:	4604      	mov	r4, r0
 800aedc:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800aede:	ed9d 0a01 	vldr	s0, [sp, #4]
 800aee2:	3014      	adds	r0, #20
    p->mempool = m;
 800aee4:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 800aee8:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 800aeec:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 800aeee:	f7ff ffc5 	bl	800ae7c <tPowerFollower_initToPool>
    p->mode=mode;
 800aef2:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 800aef4:	ed84 8a02 	vstr	s16, [r4, #8]
}
 800aef8:	b003      	add	sp, #12
 800aefa:	ecbd 8b02 	vpop	{d8}
 800aefe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800af00 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 800af06:	699e      	ldr	r6, [r3, #24]
{
 800af08:	4614      	mov	r4, r2
 800af0a:	4607      	mov	r7, r0
 800af0c:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800af0e:	2068      	movs	r0, #104	; 0x68
 800af10:	4631      	mov	r1, r6
{
 800af12:	eef0 9a40 	vmov.f32	s19, s0
 800af16:	eeb0 9a60 	vmov.f32	s18, s1
 800af1a:	eeb0 8a41 	vmov.f32	s16, s2
 800af1e:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800af22:	f000 fe37 	bl	800bb94 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800af26:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 800af2a:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800af2c:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 800af2e:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800af30:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800af34:	eddf 7a22 	vldr	s15, [pc, #136]	; 800afc0 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 800af38:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 800af3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 800af3e:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800af40:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800af44:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
 800af48:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 800af4a:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 800af4c:	fe88 8a66 	vminnm.f32	s16, s16, s13
 800af50:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 800af54:	2200      	movs	r2, #0
 800af56:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 800afc4 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800af5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
 800af5e:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800af62:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
 800af66:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
 800af6a:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
 800af6e:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 800af72:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 800af76:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
 800af7a:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
 800af7e:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 800af80:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
 800af84:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
 800af88:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 800af8c:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800af90:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 800af94:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800af98:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800af9c:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800afa0:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 800afa4:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 800afa8:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800afac:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 800afb0:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	6643      	str	r3, [r0, #100]	; 0x64
}
 800afb8:	ecbd 8b04 	vpop	{d8-d9}
 800afbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afbe:	bf00      	nop
 800afc0:	4479ffff 	.word	0x4479ffff
 800afc4:	00000000 	.word	0x00000000

0800afc8 <tADSRT_setDecay>:
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
}

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;
 800afc8:	6803      	ldr	r3, [r0, #0]

    if (decay < 0.0f)
 800afca:	eddf 7a06 	vldr	s15, [pc, #24]	; 800afe4 <tADSRT_setDecay+0x1c>
    {
        decay = 0.0f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800afce:	ed93 7a05 	vldr	s14, [r3, #20]
 800afd2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    adsr->decay = decay;
 800afd6:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 800afda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afde:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 800afe2:	4770      	bx	lr
 800afe4:	00000000 	.word	0x00000000

0800afe8 <tADSRT_setLeakFactor>:
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
}

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 800afe8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800afea:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800afec:	eddf 7a06 	vldr	s15, [pc, #24]	; 800b008 <tADSRT_setLeakFactor+0x20>
 800aff0:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 800aff4:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 800aff8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800affc:	f001 f9f4 	bl	800c3e8 <powf>
 800b000:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 800b004:	bd10      	pop	{r4, pc}
 800b006:	bf00      	nop
 800b008:	472c4400 	.word	0x472c4400

0800b00c <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 800b00c:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 800b00e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b010:	b162      	cbz	r2, 800b02c <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 800b012:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 800b014:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 800b016:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 800b018:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 800b01a:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 800b01c:	2200      	movs	r2, #0
 800b01e:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 800b020:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 800b024:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 800b026:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 800b028:	655a      	str	r2, [r3, #84]	; 0x54
}
 800b02a:	4770      	bx	lr
        adsr->whichStage = env_attack;
 800b02c:	2101      	movs	r1, #1
 800b02e:	e7f5      	b.n	800b01c <tADSRT_on+0x10>

0800b030 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 800b030:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 800b032:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b034:	b11a      	cbz	r2, 800b03e <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 800b036:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 800b038:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 800b03a:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 800b03c:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 800b03e:	4770      	bx	lr

0800b040 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 800b040:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 800b042:	6804      	ldr	r4, [r0, #0]
{
 800b044:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 800b048:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b04a:	3b01      	subs	r3, #1
 800b04c:	2b04      	cmp	r3, #4
 800b04e:	f200 8148 	bhi.w	800b2e2 <tADSRT_tick+0x2a2>
 800b052:	e8df f003 	tbb	[pc, r3]
 800b056:	441f      	.short	0x441f
 800b058:	6339      	.short	0x6339
 800b05a:	03          	.byte	0x03
 800b05b:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800b05c:	edd4 7a03 	vldr	s15, [r4, #12]
 800b060:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 800b064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b068:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800b06c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b070:	dd71      	ble.n	800b156 <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 800b072:	eddf 7a9d 	vldr	s15, [pc, #628]	; 800b2e8 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
 800b076:	2301      	movs	r3, #1
 800b078:	eeb0 0a67 	vmov.f32	s0, s15
 800b07c:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 800b07e:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 800b082:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 800b086:	ee37 1a81 	vadd.f32	s2, s15, s2
 800b08a:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 800b08e:	ecbd 8b02 	vpop	{d8}
 800b092:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800b094:	edd4 7a03 	vldr	s15, [r4, #12]
 800b098:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 800b09c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0a0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800b0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0a8:	dd7f      	ble.n	800b1aa <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
 800b0aa:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 800b0ac:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
 800b0b0:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
 800b0b2:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 800b0b6:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 800b0ba:	ee37 1a81 	vadd.f32	s2, s15, s2
 800b0be:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
 800b0c2:	ecbd 8b02 	vpop	{d8}
 800b0c6:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 800b0c8:	ed94 0a06 	vldr	s0, [r4, #24]
 800b0cc:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 800b0d0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b0d4:	ed84 0a06 	vstr	s0, [r4, #24]
}
 800b0d8:	ecbd 8b02 	vpop	{d8}
 800b0dc:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800b0de:	edd4 7a03 	vldr	s15, [r4, #12]
 800b0e2:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 800b0e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0ea:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800b0ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f2:	f340 8088 	ble.w	800b206 <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
 800b0f6:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800b0fa:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 800b0fc:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 800b100:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 800b102:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b106:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 800b10a:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 800b10e:	ee37 1a81 	vadd.f32	s2, s15, s2
 800b112:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
 800b116:	ecbd 8b02 	vpop	{d8}
 800b11a:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800b11c:	edd4 7a03 	vldr	s15, [r4, #12]
 800b120:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 800b124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b128:	eeb4 1ae7 	vcmpe.f32	s2, s15
 800b12c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b130:	f340 809e 	ble.w	800b270 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
 800b134:	eddf 7a6c 	vldr	s15, [pc, #432]	; 800b2e8 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
 800b138:	2300      	movs	r3, #0
 800b13a:	eeb0 0a67 	vmov.f32	s0, s15
 800b13e:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 800b140:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 800b144:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 800b148:	ee37 1a81 	vadd.f32	s2, s15, s2
 800b14c:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
 800b150:	ecbd 8b02 	vpop	{d8}
 800b154:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 800b15a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b15e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 800b162:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b166:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 800b16a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b16e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b172:	f100 80b2 	bmi.w	800b2da <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800b176:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b17a:	6862      	ldr	r2, [r4, #4]
 800b17c:	ee17 3a90 	vmov	r3, s15
 800b180:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b184:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 800b188:	ee16 3a90 	vmov	r3, s13
 800b18c:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 800b190:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b194:	ed92 0a00 	vldr	s0, [r2]
 800b198:	f000 fca0 	bl	800badc <LEAF_interpolation_linear>
 800b19c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 800b1a0:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 800b1a4:	ed84 0a06 	vstr	s0, [r4, #24]
 800b1a8:	e76b      	b.n	800b082 <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b1aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 800b1ae:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b1b2:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 800b1b6:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b1ba:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 800b1be:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b1c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c6:	f100 8084 	bmi.w	800b2d2 <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 800b1ca:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b1ce:	6862      	ldr	r2, [r4, #4]
 800b1d0:	ee17 3a90 	vmov	r3, s15
 800b1d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b1d8:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800b1dc:	ee16 3a90 	vmov	r3, s13
 800b1e0:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 800b1e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b1e8:	ed92 0a00 	vldr	s0, [r2]
 800b1ec:	f000 fc76 	bl	800badc <LEAF_interpolation_linear>
 800b1f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 800b1f4:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 800b1f8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b1fc:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b200:	ed84 0a06 	vstr	s0, [r4, #24]
 800b204:	e757      	b.n	800b0b6 <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b206:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 800b20a:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b20e:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 800b212:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b216:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 800b21a:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 800b21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b222:	d452      	bmi.n	800b2ca <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 800b224:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b228:	6862      	ldr	r2, [r4, #4]
 800b22a:	ee17 3a90 	vmov	r3, s15
 800b22e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b232:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 800b236:	ee16 3a90 	vmov	r3, s13
 800b23a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b23e:	ed92 0a00 	vldr	s0, [r2]
 800b242:	f000 fc4b 	bl	800badc <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800b246:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b24a:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 800b24e:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 800b252:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b256:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
 800b25a:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 800b25e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b262:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b266:	ee27 0a87 	vmul.f32	s0, s15, s14
 800b26a:	ed84 0a06 	vstr	s0, [r4, #24]
 800b26e:	e74c      	b.n	800b10a <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800b270:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 800b274:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800b278:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 800b27c:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800b280:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 800b284:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 800b288:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28c:	d419      	bmi.n	800b2c2 <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 800b28e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b292:	6862      	ldr	r2, [r4, #4]
 800b294:	ee17 3a90 	vmov	r3, s15
 800b298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b29c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 800b2a0:	ee16 3a90 	vmov	r3, s13
 800b2a4:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 800b2a8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800b2ac:	ed92 0a00 	vldr	s0, [r2]
 800b2b0:	f000 fc14 	bl	800badc <LEAF_interpolation_linear>
 800b2b4:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 800b2b8:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 800b2bc:	ed84 0a06 	vstr	s0, [r4, #24]
 800b2c0:	e740      	b.n	800b144 <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800b2c2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800b2c4:	eddf 0a08 	vldr	s1, [pc, #32]	; 800b2e8 <tADSRT_tick+0x2a8>
 800b2c8:	e7ea      	b.n	800b2a0 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800b2ca:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800b2cc:	eddf 0a06 	vldr	s1, [pc, #24]	; 800b2e8 <tADSRT_tick+0x2a8>
 800b2d0:	e7b1      	b.n	800b236 <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800b2d2:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800b2d4:	eddf 0a04 	vldr	s1, [pc, #16]	; 800b2e8 <tADSRT_tick+0x2a8>
 800b2d8:	e780      	b.n	800b1dc <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 800b2da:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 800b2dc:	eddf 0a02 	vldr	s1, [pc, #8]	; 800b2e8 <tADSRT_tick+0x2a8>
 800b2e0:	e752      	b.n	800b188 <tADSRT_tick+0x148>
    return adsr->next;
 800b2e2:	ed94 0a06 	vldr	s0, [r4, #24]
 800b2e6:	e6d2      	b.n	800b08e <tADSRT_tick+0x4e>
 800b2e8:	00000000 	.word	0x00000000

0800b2ec <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 800b2ec:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 800b2ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b2f0:	3a01      	subs	r2, #1
 800b2f2:	2a04      	cmp	r2, #4
 800b2f4:	f200 80ba 	bhi.w	800b46c <tADSRT_tickNoInterp+0x180>
 800b2f8:	e8df f002 	tbb	[pc, r2]
 800b2fc:	58333c1b 	.word	0x58333c1b
 800b300:	03          	.byte	0x03
 800b301:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 800b302:	edd3 7a03 	vldr	s15, [r3, #12]
 800b306:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 800b30a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b30e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b316:	dd61      	ble.n	800b3dc <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 800b318:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 800b31a:	ed9f 0a56 	vldr	s0, [pc, #344]	; 800b474 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 800b31e:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 800b320:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800b324:	ed83 0a06 	vstr	s0, [r3, #24]
 800b328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 800b330:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 800b332:	edd3 7a03 	vldr	s15, [r3, #12]
 800b336:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 800b33a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b33e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b346:	dd57      	ble.n	800b3f8 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 800b348:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 800b34a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 800b350:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800b354:	ed83 0a06 	vstr	s0, [r3, #24]
 800b358:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b35c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 800b360:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 800b362:	ed93 0a06 	vldr	s0, [r3, #24]
 800b366:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800b36a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b36e:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 800b372:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 800b374:	edd3 7a03 	vldr	s15, [r3, #12]
 800b378:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 800b37c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b380:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b388:	dd48      	ble.n	800b41c <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 800b38a:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 800b38e:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 800b390:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 800b394:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 800b396:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 800b39a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800b39e:	ed83 0a06 	vstr	s0, [r3, #24]
 800b3a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3a6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 800b3aa:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 800b3ac:	edd3 7a03 	vldr	s15, [r3, #12]
 800b3b0:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 800b3b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b3b8:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b3bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b3c0:	dd46      	ble.n	800b450 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 800b3c2:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 800b3c4:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 800b474 <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 800b3c8:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 800b3ca:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800b3ce:	ed83 0a06 	vstr	s0, [r3, #24]
 800b3d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b3d6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 800b3da:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 800b3dc:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800b3e0:	685a      	ldr	r2, [r3, #4]
 800b3e2:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800b3e6:	ee17 1a10 	vmov	r1, s14
 800b3ea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b3ee:	ed92 0a00 	vldr	s0, [r2]
 800b3f2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b3f6:	e793      	b.n	800b320 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 800b3f8:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800b3fc:	685a      	ldr	r2, [r3, #4]
 800b3fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b402:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b406:	ee17 1a10 	vmov	r1, s14
 800b40a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b40e:	ed92 7a00 	vldr	s14, [r2]
 800b412:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b416:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b41a:	e799      	b.n	800b350 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 800b41c:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 800b420:	685a      	ldr	r2, [r3, #4]
 800b422:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b426:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 800b42a:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 800b42e:	ee15 1a90 	vmov	r1, s11
 800b432:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800b436:	ee37 7a40 	vsub.f32	s14, s14, s0
 800b43a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b43e:	ee67 7a86 	vmul.f32	s15, s15, s12
 800b442:	ed92 6a00 	vldr	s12, [r2]
 800b446:	eea6 0a07 	vfma.f32	s0, s12, s14
 800b44a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b44e:	e7a4      	b.n	800b39a <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 800b450:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 800b454:	685a      	ldr	r2, [r3, #4]
 800b456:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800b45a:	ee17 1a10 	vmov	r1, s14
 800b45e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800b462:	ed92 0a00 	vldr	s0, [r2]
 800b466:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b46a:	e7ae      	b.n	800b3ca <tADSRT_tickNoInterp+0xde>
    return adsr->next;
 800b46c:	ed93 0a06 	vldr	s0, [r3, #24]
 800b470:	4770      	bx	lr
 800b472:	bf00      	nop
 800b474:	00000000 	.word	0x00000000

0800b478 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 800b47e:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800b480:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800b482:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800b484:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800b488:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 800b48a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 800b48e:	f000 fb81 	bl	800bb94 <mpool_alloc>
 800b492:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b496:	eddf 0a0d 	vldr	s1, [pc, #52]	; 800b4cc <tExpSmooth_init+0x54>
 800b49a:	6028      	str	r0, [r5, #0]
 800b49c:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 800b4a0:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0) factor = 0;
    if (factor > 1) factor = 1;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 800b4a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 800b4a8:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 800b4aa:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 800b4ae:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 800b4b2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 800b4b6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 800b4ba:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 800b4be:	6863      	ldr	r3, [r4, #4]
 800b4c0:	685b      	ldr	r3, [r3, #4]
 800b4c2:	6183      	str	r3, [r0, #24]
}
 800b4c4:	ecbd 8b02 	vpop	{d8}
 800b4c8:	bd38      	pop	{r3, r4, r5, pc}
 800b4ca:	bf00      	nop
 800b4cc:	00000000 	.word	0x00000000

0800b4d0 <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 800b4d0:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 800b4d2:	ed83 0a05 	vstr	s0, [r3, #20]
}
 800b4d6:	4770      	bx	lr

0800b4d8 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 800b4d8:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 800b4da:	edd3 6a04 	vldr	s13, [r3, #16]
 800b4de:	ed93 0a03 	vldr	s0, [r3, #12]
 800b4e2:	ed93 7a02 	vldr	s14, [r3, #8]
 800b4e6:	ee20 0a26 	vmul.f32	s0, s0, s13
 800b4ea:	edd3 7a05 	vldr	s15, [r3, #20]
 800b4ee:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b4f2:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 800b4f6:	4770      	bx	lr

0800b4f8 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 800b4f8:	b538      	push	{r3, r4, r5, lr}
 800b4fa:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 800b4fe:	698d      	ldr	r5, [r1, #24]
{
 800b500:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800b502:	201c      	movs	r0, #28
{
 800b504:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800b508:	4629      	mov	r1, r5
{
 800b50a:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800b50e:	f000 fb41 	bl	800bb94 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 800b512:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 800b516:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 800b518:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 800b51a:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 800b51c:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 800b520:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 800b524:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 800b528:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 800b52a:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 800b52c:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 800b52e:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 800b530:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 800b534:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 800b538:	ed80 7a05 	vstr	s14, [r0, #20]
}
 800b53c:	ecbd 8b02 	vpop	{d8}
 800b540:	bd38      	pop	{r3, r4, r5, pc}
 800b542:	bf00      	nop

0800b544 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 800b544:	6803      	ldr	r3, [r0, #0]
{
 800b546:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 800b54a:	edd3 7a01 	vldr	s15, [r3, #4]
 800b54e:	eef4 7ac0 	vcmpe.f32	s15, s0
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800b552:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 800b556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 800b55a:	bf94      	ite	ls
 800b55c:	edd3 6a04 	vldrls	s13, [r3, #16]
    }
    else
    {
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 800b560:	edd3 6a05 	vldrhi	s13, [r3, #20]
 800b564:	eee6 7a26 	vfma.f32	s15, s12, s13
 800b568:	eeb0 0a67 	vmov.f32	s0, s15
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800b56c:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800b5a0 <tSlide_tick+0x5c>
 800b570:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b578:	d406      	bmi.n	800b588 <tSlide_tick+0x44>
 800b57a:	ed83 0a02 	vstr	s0, [r3, #8]
#endif
    s->prevIn = in;
 800b57e:	ed83 7a03 	vstr	s14, [r3, #12]
    s->prevOut = s->currentOut;
 800b582:	ed83 0a01 	vstr	s0, [r3, #4]
    return s->currentOut;
}
 800b586:	4770      	bx	lr
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800b588:	eddf 7a06 	vldr	s15, [pc, #24]	; 800b5a4 <tSlide_tick+0x60>
    s->prevIn = in;
 800b58c:	ed83 7a03 	vstr	s14, [r3, #12]
    if (s->currentOut < VSF) s->currentOut = 0.0f;
 800b590:	eeb0 0a67 	vmov.f32	s0, s15
 800b594:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 800b598:	ed83 0a01 	vstr	s0, [r3, #4]
}
 800b59c:	4770      	bx	lr
 800b59e:	bf00      	nop
 800b5a0:	006ce3ee 	.word	0x006ce3ee
 800b5a4:	00000000 	.word	0x00000000

0800b5a8 <tEfficientSVF_init>:
}

#if LEAF_INCLUDE_FILTERTAN_TABLE
// Efficient version of tSVF where frequency is set based on 12-bit integer input for lookup in tanh wavetable.
void   tEfficientSVF_init(tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, LEAF* const leaf)
{
 800b5a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5aa:	ed2d 8b02 	vpush	{d8}
    tEfficientSVF_initToPool(svff, type, input, Q, &leaf->mempool);
}

void    tEfficientSVF_initToPool    (tEfficientSVF* const svff, SVFType type, uint16_t input, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 800b5ae:	699f      	ldr	r7, [r3, #24]
{
 800b5b0:	4606      	mov	r6, r0
 800b5b2:	460c      	mov	r4, r1
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800b5b4:	202c      	movs	r0, #44	; 0x2c
 800b5b6:	4639      	mov	r1, r7
{
 800b5b8:	eeb0 8a40 	vmov.f32	s16, s0
 800b5bc:	4615      	mov	r5, r2
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800b5be:	f000 fae9 	bl	800bb94 <mpool_alloc>
    
    svf->ic1eq = 0;
    svf->ic2eq = 0;
    
    svf->g = __leaf_table_filtertan[input];
    svf->k = 1.0f/Q;
 800b5c2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    svf->g = __leaf_table_filtertan[input];
 800b5c6:	4a13      	ldr	r2, [pc, #76]	; (800b614 <tEfficientSVF_init+0x6c>)
    _tEfficientSVF* svf = *svff = (_tEfficientSVF*) mpool_alloc(sizeof(_tEfficientSVF), m);
 800b5c8:	6030      	str	r0, [r6, #0]
    svf->ic1eq = 0;
 800b5ca:	2100      	movs	r1, #0
    svf->g = __leaf_table_filtertan[input];
 800b5cc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
    svf->mempool = m;
 800b5d0:	6007      	str	r7, [r0, #0]
    svf->k = 1.0f/Q;
 800b5d2:	eec7 6a08 	vdiv.f32	s13, s14, s16
    svf->type = type;
 800b5d6:	7104      	strb	r4, [r0, #4]
    svf->g = __leaf_table_filtertan[input];
 800b5d8:	edd2 7a00 	vldr	s15, [r2]
    svf->ic1eq = 0;
 800b5dc:	6101      	str	r1, [r0, #16]
    svf->g = __leaf_table_filtertan[input];
 800b5de:	edc0 7a06 	vstr	s15, [r0, #24]
    svf->ic2eq = 0;
 800b5e2:	6141      	str	r1, [r0, #20]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 800b5e4:	eeb0 6a47 	vmov.f32	s12, s14
 800b5e8:	ee77 5aa6 	vadd.f32	s11, s15, s13
    svf->k = 1.0f/Q;
 800b5ec:	edc0 6a07 	vstr	s13, [r0, #28]
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 800b5f0:	eea7 6aa5 	vfma.f32	s12, s15, s11
 800b5f4:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g*svf->a1;
 800b5f8:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f+svf->g*(svf->g+svf->k));
 800b5fc:	edc0 6a08 	vstr	s13, [r0, #32]
    svf->a3 = svf->g*svf->a2;
 800b600:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g*svf->a1;
 800b604:	ed80 7a09 	vstr	s14, [r0, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 800b608:	edc0 7a0a 	vstr	s15, [r0, #40]	; 0x28
}
 800b60c:	ecbd 8b02 	vpop	{d8}
 800b610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b612:	bf00      	nop
 800b614:	0800d54c 	.word	0x0800d54c

0800b618 <tVZFilter_calcCoeffs>:
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 800b618:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 800b61a:	6804      	ldr	r4, [r0, #0]
{
 800b61c:	4605      	mov	r5, r0
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800b61e:	eddf 7ae3 	vldr	s15, [pc, #908]	; 800b9ac <tVZFilter_calcCoeffs+0x394>
{
 800b622:	ed2d 8b04 	vpush	{d8-d9}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800b626:	ed94 7a10 	vldr	s14, [r4, #64]	; 0x40
 800b62a:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
 800b62e:	ee28 8a07 	vmul.f32	s16, s16, s14
 800b632:	ee28 8a27 	vmul.f32	s16, s16, s15
 800b636:	eeb0 0a48 	vmov.f32	s0, s16
 800b63a:	f001 f835 	bl	800c6a8 <tanf>
    
    switch( f->type )
 800b63e:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 800b640:	eef0 8a40 	vmov.f32	s17, s0
 800b644:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 800b648:	2b0a      	cmp	r3, #10
 800b64a:	f200 81ac 	bhi.w	800b9a6 <tVZFilter_calcCoeffs+0x38e>
 800b64e:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b652:	0053      	.short	0x0053
 800b654:	0069005e 	.word	0x0069005e
 800b658:	00ab0074 	.word	0x00ab0074
 800b65c:	011800e3 	.word	0x011800e3
 800b660:	01580138 	.word	0x01580138
 800b664:	000b019f 	.word	0x000b019f
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b668:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800b66c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800b670:	682d      	ldr	r5, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b672:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b676:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b67a:	f000 feb5 	bl	800c3e8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800b67e:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800b682:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800b686:	ed9f 7ac9 	vldr	s14, [pc, #804]	; 800b9ac <tVZFilter_calcCoeffs+0x394>
 800b68a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b68e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b692:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b696:	f001 f807 	bl	800c6a8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b69a:	ed95 6a04 	vldr	s12, [r5, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b69e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b6a2:	ee80 7a06 	vdiv.f32	s14, s0, s12
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800b6a6:	edc4 7a07 	vstr	s15, [r4, #28]
 800b6aa:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b6ae:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800b6b2:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b6b6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6ba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b6be:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b6c2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b6c6:	eef1 7ae6 	vsqrt.f32	s15, s13
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b6ca:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800b6ce:	eeb1 7a67 	vneg.f32	s14, s15
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b6d2:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 800b6d6:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800b6da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b6de:	ee77 7aa8 	vadd.f32	s15, s15, s17
 800b6e2:	eef0 6a47 	vmov.f32	s13, s14
 800b6e6:	eee7 6aa8 	vfma.f32	s13, s15, s17
 800b6ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800b6ee:	edc4 7a06 	vstr	s15, [r4, #24]
}
 800b6f2:	ecbd 8b04 	vpop	{d8-d9}
 800b6f6:	bd38      	pop	{r3, r4, r5, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800b6fe:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b702:	61e3      	str	r3, [r4, #28]
 800b704:	6223      	str	r3, [r4, #32]
            f->R2 = f->invG;
 800b706:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b70a:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 800b70c:	e7e5      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800b70e:	2300      	movs	r3, #0
 800b710:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800b714:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800b718:	6223      	str	r3, [r4, #32]
 800b71a:	6263      	str	r3, [r4, #36]	; 0x24
            f->R2 = f->invG;
 800b71c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 800b720:	61e2      	str	r2, [r4, #28]
            break;
 800b722:	e7da      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800b724:	2300      	movs	r3, #0
 800b726:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 800b72a:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800b72e:	61e3      	str	r3, [r4, #28]
 800b730:	6263      	str	r3, [r4, #36]	; 0x24
            f->R2 = f->invG;
 800b732:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 800b736:	6222      	str	r2, [r4, #32]
            break;
 800b738:	e7cf      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b73a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800b73e:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800b742:	682d      	ldr	r5, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b744:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b748:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b74c:	f000 fe4c 	bl	800c3e8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800b750:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800b754:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800b758:	ed9f 7a94 	vldr	s14, [pc, #592]	; 800b9ac <tVZFilter_calcCoeffs+0x394>
 800b75c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b760:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b764:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b768:	f000 ff9e 	bl	800c6a8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b76c:	ed95 6a04 	vldr	s12, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b770:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800b774:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b776:	ee80 7a06 	vdiv.f32	s14, s0, s12
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800b77a:	61e3      	str	r3, [r4, #28]
 800b77c:	6263      	str	r3, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b77e:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800b782:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b786:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b78a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b78e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b792:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b796:	eef1 7ae6 	vsqrt.f32	s15, s13
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b79a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b79e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = f->R2; f->cH = 0.0f;
 800b7a2:	edc4 7a08 	vstr	s15, [r4, #32]
            break;
 800b7a6:	e798      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b7a8:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800b7ac:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
    _tVZFilter* f = *vf;
 800b7b0:	682d      	ldr	r5, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 800b7b2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b7b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b7ba:	f000 fe15 	bl	800c3e8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800b7be:	edd5 6a10 	vldr	s13, [r5, #64]	; 0x40
 800b7c2:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 800b7c6:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800b9ac <tVZFilter_calcCoeffs+0x394>
 800b7ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b7ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b7d2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b7d6:	f000 ff67 	bl	800c6a8 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b7da:	ed95 6a04 	vldr	s12, [r5, #16]
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b7de:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b7e2:	2300      	movs	r3, #0
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 800b7e4:	ee80 7a06 	vdiv.f32	s14, s0, s12
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 800b7e8:	6223      	str	r3, [r4, #32]
 800b7ea:	edc4 7a07 	vstr	s15, [r4, #28]
 800b7ee:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 800b7f2:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 800b7f6:	ee27 7a07 	vmul.f32	s14, s14, s14
 800b7fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b7fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b802:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b806:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b80a:	eef1 7ae6 	vsqrt.f32	s15, s13
            f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 800b80e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800b812:	edc4 7a05 	vstr	s15, [r4, #20]
            break;
 800b816:	e760      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 800b818:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800b81c:	edd4 0a0d 	vldr	s1, [r4, #52]	; 0x34
 800b820:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 800b824:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800b828:	f000 fdde 	bl	800c3e8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 800b82c:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b830:	f000 ff3a 	bl	800c6a8 <tanf>
            float r  = f->g/wl;
 800b834:	eec8 7a80 	vdiv.f32	s15, s17, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800b838:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 800b83c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b840:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 800b844:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800b848:	ed84 7a07 	vstr	s14, [r4, #28]
 800b84c:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 800b850:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800b854:	eea7 7aa7 	vfma.f32	s14, s15, s15
 800b858:	eef0 6a47 	vmov.f32	s13, s14
 800b85c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b860:	ee77 7a45 	vsub.f32	s15, s14, s10
 800b864:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b868:	ee87 7a86 	vdiv.f32	s14, s15, s12
 800b86c:	eef1 7ac7 	vsqrt.f32	s15, s14
 800b870:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800b874:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 800b878:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 800b87c:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 800b880:	e72b      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            float A = sqrtf(f->G);
 800b882:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800b886:	f04f 557e 	mov.w	r5, #1065353216	; 0x3f800000
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800b88a:	eddf 7a49 	vldr	s15, [pc, #292]	; 800b9b0 <tVZFilter_calcCoeffs+0x398>
            float A = sqrtf(f->G);
 800b88e:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800b892:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800b896:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b89a:	eef1 7ac8 	vsqrt.f32	s15, s16
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800b89e:	eec8 8aa7 	vdiv.f32	s17, s17, s15
 800b8a2:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800b8a6:	f000 ff2b 	bl	800c700 <sinhf>
 800b8aa:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800b8ae:	ed84 9a07 	vstr	s18, [r4, #28]
 800b8b2:	6265      	str	r5, [r4, #36]	; 0x24
 800b8b4:	ee27 8a88 	vmul.f32	s16, s15, s16
            f->R2 = 2*sinhf(f->B*logf(2.0f)*0.5f);
 800b8b8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = f->G; f->cB = f->R2*A; f->cH = 1.0f;
 800b8bc:	ed84 8a08 	vstr	s16, [r4, #32]
            break;
 800b8c0:	e70b      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            float A = sqrtf(f->G);
 800b8c2:	ed94 9a0b 	vldr	s18, [r4, #44]	; 0x2c
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800b8c6:	eddf 7a3a 	vldr	s15, [pc, #232]	; 800b9b0 <tVZFilter_calcCoeffs+0x398>
            float A = sqrtf(f->G);
 800b8ca:	eeb1 8ac9 	vsqrt.f32	s16, s18
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800b8ce:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 800b8d2:	ee20 0a27 	vmul.f32	s0, s0, s15
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 800b8d6:	eef1 7ac8 	vsqrt.f32	s15, s16
 800b8da:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800b8de:	edc4 8a04 	vstr	s17, [r4, #16]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800b8e2:	f000 ff0d 	bl	800c700 <sinhf>
 800b8e6:	ee70 7a00 	vadd.f32	s15, s0, s0
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800b8ea:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800b8ee:	ed84 9a09 	vstr	s18, [r4, #36]	; 0x24
 800b8f2:	ee27 8a88 	vmul.f32	s16, s15, s16
 800b8f6:	61e3      	str	r3, [r4, #28]
            f->R2 = 2.0f*sinhf(f->B*logf(2.0f)*0.5f);
 800b8f8:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*A; f->cH = f->G;
 800b8fc:	ed84 8a08 	vstr	s16, [r4, #32]
            break;
 800b900:	e6eb      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            float x  = 2.0f*f->m-1.0f;
 800b902:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b906:	ed94 7a0e 	vldr	s14, [r4, #56]	; 0x38
 800b90a:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->R2 = f->invG;
 800b90e:	6b23      	ldr	r3, [r4, #48]	; 0x30
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800b910:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b914:	eddf 0a27 	vldr	s1, [pc, #156]	; 800b9b4 <tVZFilter_calcCoeffs+0x39c>
            f->R2 = f->invG;
 800b918:	6163      	str	r3, [r4, #20]
            float x  = 2.0f*f->m-1.0f;
 800b91a:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800b91e:	eeb0 0a48 	vmov.f32	s0, s16
 800b922:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b926:	f000 f917 	bl	800bb58 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800b92a:	eddf 0a22 	vldr	s1, [pc, #136]	; 800b9b4 <tVZFilter_calcCoeffs+0x39c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 800b92e:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 800b932:	eeb0 0a68 	vmov.f32	s0, s17
 800b936:	f000 f913 	bl	800bb60 <minimum>
            f->cB = 1.0f-x*x;
 800b93a:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800b93e:	edd4 6a07 	vldr	s13, [r4, #28]
 800b942:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cB = 1.0f-x*x;
 800b946:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800b94a:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
 800b94e:	ee36 5aa6 	vadd.f32	s10, s13, s13
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800b952:	edd4 8a04 	vldr	s17, [r4, #16]
            float s = f->G * sqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH));
 800b956:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800b95a:	ee27 6a07 	vmul.f32	s12, s14, s14
 800b95e:	eea6 6aa6 	vfma.f32	s12, s13, s13
 800b962:	eea0 6a00 	vfma.f32	s12, s0, s0
 800b966:	eea0 6a45 	vfms.f32	s12, s0, s10
 800b96a:	ee84 5a86 	vdiv.f32	s10, s9, s12
 800b96e:	eeb1 6ac5 	vsqrt.f32	s12, s10
 800b972:	ee26 6a25 	vmul.f32	s12, s12, s11
            f->cL *= s; f->cB *= s; f->cH *= s;
 800b976:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b97a:	ee27 7a06 	vmul.f32	s14, s14, s12
 800b97e:	ee20 0a06 	vmul.f32	s0, s0, s12
 800b982:	edc4 6a07 	vstr	s13, [r4, #28]
 800b986:	ed84 7a08 	vstr	s14, [r4, #32]
 800b98a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            break;
 800b98e:	e6a4      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
            f->cL = 1.0f;
 800b990:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800b994:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 800b998:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;  // can we use an arbitrary value here, for example R2 = 1?
 800b99a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 800b99e:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 800b9a2:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 800b9a4:	e699      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
    f->h = 1.0f / (1.0f + f->R2*f->g + f->g*f->g);  // factor for feedback precomputation
 800b9a6:	edd4 7a05 	vldr	s15, [r4, #20]
 800b9aa:	e696      	b.n	800b6da <tVZFilter_calcCoeffs+0xc2>
 800b9ac:	40490fdb 	.word	0x40490fdb
 800b9b0:	3eb17218 	.word	0x3eb17218
 800b9b4:	00000000 	.word	0x00000000

0800b9b8 <tVZFilter_init>:
{
 800b9b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b9ba:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 800b9be:	6997      	ldr	r7, [r2, #24]
{
 800b9c0:	b083      	sub	sp, #12
 800b9c2:	4605      	mov	r5, r0
 800b9c4:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800b9c6:	2044      	movs	r0, #68	; 0x44
 800b9c8:	4639      	mov	r1, r7
{
 800b9ca:	eef0 8a60 	vmov.f32	s17, s1
 800b9ce:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800b9d2:	f000 f8df 	bl	800bb94 <mpool_alloc>
 800b9d6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 800b9d8:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800b9da:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
    LEAF* leaf = f->mempool->leaf;
 800b9de:	687b      	ldr	r3, [r7, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 800b9e0:	4604      	mov	r4, r0
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800b9e2:	ed9f 8a13 	vldr	s16, [pc, #76]	; 800ba30 <tVZFilter_init+0x78>
    f->sampleRate = leaf->sampleRate;
 800b9e6:	edd3 7a00 	vldr	s15, [r3]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800b9ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b9ee:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 800b9f2:	edc0 7a0f 	vstr	s15, [r0, #60]	; 0x3c
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800b9f6:	ee27 1a81 	vmul.f32	s2, s15, s2
    f->invSampleRate = leaf->invSampleRate;
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	6403      	str	r3, [r0, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800b9fe:	f000 f831 	bl	800ba64 <LEAF_clip>
    f->G    = ONE_OVER_SQRT2;
 800ba02:	4a0c      	ldr	r2, [pc, #48]	; (800ba34 <tVZFilter_init+0x7c>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800ba04:	4b0c      	ldr	r3, [pc, #48]	; (800ba38 <tVZFilter_init+0x80>)
    tVZFilter_calcCoeffs(vf);
 800ba06:	4628      	mov	r0, r5
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 800ba08:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->type = type;
 800ba0c:	7126      	strb	r6, [r4, #4]
    f->G    = ONE_OVER_SQRT2;
 800ba0e:	62e2      	str	r2, [r4, #44]	; 0x2c
    f->B    = bandWidth;
 800ba10:	edc4 8a0d 	vstr	s17, [r4, #52]	; 0x34
    f->m    = 0.0f;
 800ba14:	ed84 8a0e 	vstr	s16, [r4, #56]	; 0x38
    f->invG = 1.0f/ONE_OVER_SQRT2;
 800ba18:	6323      	str	r3, [r4, #48]	; 0x30
    f->s1 = 0.0f;
 800ba1a:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2 = 0.0f;
 800ba1e:	ed84 8a03 	vstr	s16, [r4, #12]
}
 800ba22:	b003      	add	sp, #12
 800ba24:	ecbd 8b02 	vpop	{d8}
 800ba28:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 800ba2c:	f7ff bdf4 	b.w	800b618 <tVZFilter_calcCoeffs>
 800ba30:	00000000 	.word	0x00000000
 800ba34:	3f3504f3 	.word	0x3f3504f3
 800ba38:	3fb504f3 	.word	0x3fb504f3

0800ba3c <LEAF_frequencyToMidi>:
}
#endif

float LEAF_frequencyToMidi(float f)
{
    return (69.0f + 12.0f * log2f(f * INV_440));
 800ba3c:	eddf 7a07 	vldr	s15, [pc, #28]	; 800ba5c <LEAF_frequencyToMidi+0x20>
{
 800ba40:	b508      	push	{r3, lr}
    return (69.0f + 12.0f * log2f(f * INV_440));
 800ba42:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ba46:	f000 fc4f 	bl	800c2e8 <log2f>
 800ba4a:	eeb2 7a08 	vmov.f32	s14, #40	; 0x41400000  12.0
 800ba4e:	eddf 7a04 	vldr	s15, [pc, #16]	; 800ba60 <LEAF_frequencyToMidi+0x24>
}
 800ba52:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ba56:	eeb0 0a67 	vmov.f32	s0, s15
 800ba5a:	bd08      	pop	{r3, pc}
 800ba5c:	3b14f209 	.word	0x3b14f209
 800ba60:	428a0000 	.word	0x428a0000

0800ba64 <LEAF_clip>:

float   LEAF_clip(float min, float val, float max)
{
    float tempmin = min;
    float tempmax = max;
    if (min > max)
 800ba64:	eeb4 0ac1 	vcmpe.f32	s0, s2
 800ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6c:	dd05      	ble.n	800ba7a <LEAF_clip+0x16>
 800ba6e:	eef0 7a40 	vmov.f32	s15, s0
    {
        tempmin = max;
 800ba72:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 800ba76:	eeb0 1a67 	vmov.f32	s2, s15
    }
    if (val < tempmin)
 800ba7a:	eeb4 0ae0 	vcmpe.f32	s0, s1
 800ba7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba82:	dc01      	bgt.n	800ba88 <LEAF_clip+0x24>
    {
        return tempmin;
    }
    else if (val > tempmax)
 800ba84:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
    else
    {
        return val;
    }
}
 800ba88:	4770      	bx	lr
 800ba8a:	bf00      	nop

0800ba8c <LEAF_generate_exp>:


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
    float increment = (end - start) / (float)size;
 800ba8c:	ee07 1a90 	vmov	s15, r1
 800ba90:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 800ba94:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)size;
 800ba96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 800ba9a:	b538      	push	{r3, r4, r5, lr}
 800ba9c:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)size;
 800baa0:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 800baa4:	dd16      	ble.n	800bad4 <LEAF_generate_exp+0x48>
 800baa6:	4604      	mov	r4, r0
 800baa8:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 800baac:	eeb0 8a60 	vmov.f32	s16, s1
 800bab0:	eef0 8a40 	vmov.f32	s17, s0
 800bab4:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 800bab8:	eef0 0a48 	vmov.f32	s1, s16
 800babc:	eeb0 0a68 	vmov.f32	s0, s17
 800bac0:	f000 fc92 	bl	800c3e8 <powf>
 800bac4:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 800bac8:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 800bacc:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 800bad0:	42a5      	cmp	r5, r4
 800bad2:	d1f1      	bne.n	800bab8 <LEAF_generate_exp+0x2c>
    }
}
 800bad4:	ecbd 8b04 	vpop	{d8-d9}
 800bad8:	bd38      	pop	{r3, r4, r5, pc}
 800bada:	bf00      	nop

0800badc <LEAF_interpolation_linear>:
}

// alpha, [0.0, 1.0]
float LEAF_interpolation_linear (float A, float B, float alpha)
{
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 800badc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 800bae0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800bb00 <LEAF_interpolation_linear+0x24>
 800bae4:	fe81 1a67 	vminnm.f32	s2, s2, s15
 800bae8:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    
    float omAlpha = 1.0f - alpha;
 800baec:	ee77 7ac1 	vsub.f32	s15, s15, s2
    
    // First 1/2 of interpolation
    float out = A * omAlpha;
    
    out += B * alpha;
 800baf0:	ee61 0a20 	vmul.f32	s1, s2, s1
    
    return out;
}
 800baf4:	eee7 0a80 	vfma.f32	s1, s15, s0
 800baf8:	eeb0 0a60 	vmov.f32	s0, s1
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	00000000 	.word	0x00000000

0800bb04 <mtof>:

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 800bb04:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800bb44 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 800bb08:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800bb48 <mtof+0x44>
 800bb0c:	e006      	b.n	800bb1c <mtof+0x18>
 800bb0e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb16:	dd09      	ble.n	800bb2c <mtof+0x28>
 800bb18:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 800bb1c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800bb20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb24:	d8f3      	bhi.n	800bb0e <mtof+0xa>
 800bb26:	ed9f 0a09 	vldr	s0, [pc, #36]	; 800bb4c <mtof+0x48>
    else return (8.17579891564f * expf(0.0577622650f * f));
}
 800bb2a:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 800bb2c:	eddf 7a08 	vldr	s15, [pc, #32]	; 800bb50 <mtof+0x4c>
{
 800bb30:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 800bb32:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bb36:	f000 fb5b 	bl	800c1f0 <expf>
 800bb3a:	eddf 7a06 	vldr	s15, [pc, #24]	; 800bb54 <mtof+0x50>
 800bb3e:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 800bb42:	bd08      	pop	{r3, pc}
 800bb44:	c4bb8000 	.word	0xc4bb8000
 800bb48:	44bb6000 	.word	0x44bb6000
 800bb4c:	00000000 	.word	0x00000000
 800bb50:	3d6c9820 	.word	0x3d6c9820
 800bb54:	4102d013 	.word	0x4102d013

0800bb58 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 800bb58:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 800bb5c:	4770      	bx	lr
 800bb5e:	bf00      	nop

0800bb60 <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 800bb60:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 800bb64:	4770      	bx	lr
 800bb66:	bf00      	nop

0800bb68 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800bb68:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 800bb6a:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800bb6c:	2510      	movs	r5, #16
    pool->usize  = 0;
 800bb6e:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800bb70:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800bb72:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 800bb74:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 800bb76:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800bb7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb7c:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 800bb7e:	440b      	add	r3, r1
 800bb80:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 800bb82:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 800bb86:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 800bb88:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 800bb8c:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800bb8e:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 800bb90:	6183      	str	r3, [r0, #24]
}
 800bb92:	4770      	bx	lr

0800bb94 <mpool_alloc>:
{
 800bb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 800bb96:	684a      	ldr	r2, [r1, #4]
{
 800bb98:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 800bb9a:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 800bba0:	694b      	ldr	r3, [r1, #20]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d04a      	beq.n	800bc3c <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 800bba6:	1dc4      	adds	r4, r0, #7
 800bba8:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 800bbac:	e002      	b.n	800bbb4 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 800bbae:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d043      	beq.n	800bc3c <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 800bbb4:	68da      	ldr	r2, [r3, #12]
 800bbb6:	42a2      	cmp	r2, r4
 800bbb8:	d3f9      	bcc.n	800bbae <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 800bbba:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800bbbc:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 800bbbe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bbc2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bbc4:	4281      	cmp	r1, r0
 800bbc6:	d246      	bcs.n	800bc56 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800bbc8:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800bbcc:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 800bbce:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800bbd0:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 800bbd2:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 800bbd4:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 800bbd6:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 800bbda:	4429      	add	r1, r5
 800bbdc:	5111      	str	r1, [r2, r4]
    node->size = size;
 800bbde:	60e8      	str	r0, [r5, #12]
    node->next = next;
 800bbe0:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 800bbe4:	f8dc 2014 	ldr.w	r2, [ip, #20]
 800bbe8:	429a      	cmp	r2, r3
        pool->head = new_node;
 800bbea:	bf08      	it	eq
 800bbec:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 800bbf0:	685a      	ldr	r2, [r3, #4]
 800bbf2:	b10a      	cbz	r2, 800bbf8 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 800bbf4:	6899      	ldr	r1, [r3, #8]
 800bbf6:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 800bbf8:	689a      	ldr	r2, [r3, #8]
 800bbfa:	b10a      	cbz	r2, 800bc00 <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 800bbfc:	6859      	ldr	r1, [r3, #4]
 800bbfe:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 800bc00:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800bc02:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 800bc04:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800bc08:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800bc0c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 800bc10:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 800bc12:	4422      	add	r2, r4
 800bc14:	4402      	add	r2, r0
 800bc16:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800bc1a:	694a      	ldr	r2, [r1, #20]
 800bc1c:	42aa      	cmp	r2, r5
 800bc1e:	dd0b      	ble.n	800bc38 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800bc20:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800bc22:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800bc24:	b14a      	cbz	r2, 800bc3a <mpool_alloc+0xa6>
 800bc26:	1e41      	subs	r1, r0, #1
 800bc28:	460a      	mov	r2, r1
 800bc2a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800bc2e:	68dc      	ldr	r4, [r3, #12]
 800bc30:	3202      	adds	r2, #2
 800bc32:	1a12      	subs	r2, r2, r0
 800bc34:	4294      	cmp	r4, r2
 800bc36:	d8f7      	bhi.n	800bc28 <mpool_alloc+0x94>
    return node_to_alloc->pool;
 800bc38:	6818      	ldr	r0, [r3, #0]
}
 800bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 800bc3c:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 800bc40:	1a9b      	subs	r3, r3, r2
 800bc42:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800bc44:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800bc48:	bf8c      	ite	hi
 800bc4a:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800bc4c:	2100      	movls	r1, #0
 800bc4e:	f000 f929 	bl	800bea4 <LEAF_internalErrorCallback>
        return NULL;
 800bc52:	2000      	movs	r0, #0
}
 800bc54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 800bc56:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 800bc58:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 800bc5a:	e7c3      	b.n	800bbe4 <mpool_alloc+0x50>

0800bc5c <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 800bc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 800bc60:	699d      	ldr	r5, [r3, #24]
{
 800bc62:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 800bc64:	6868      	ldr	r0, [r5, #4]
 800bc66:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800bc68:	3301      	adds	r3, #1
 800bc6a:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 800bc6c:	696b      	ldr	r3, [r5, #20]
 800bc6e:	b91b      	cbnz	r3, 800bc78 <tMempool_init+0x1c>
 800bc70:	e063      	b.n	800bd3a <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
 800bc72:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d060      	beq.n	800bd3a <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
 800bc78:	68dc      	ldr	r4, [r3, #12]
 800bc7a:	2c17      	cmp	r4, #23
 800bc7c:	d9f9      	bls.n	800bc72 <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 800bc7e:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 800bc80:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 800bc84:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 800bc86:	6868      	ldr	r0, [r5, #4]
 800bc88:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800bc8a:	4287      	cmp	r7, r0
 800bc8c:	d952      	bls.n	800bd34 <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800bc8e:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800bc92:	f100 0c18 	add.w	ip, r0, #24
 800bc96:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 800bc9a:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 800bc9c:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
 800bca0:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 800bca4:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 800bca6:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 800bcaa:	4420      	add	r0, r4
 800bcac:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 800bcb0:	60e7      	str	r7, [r4, #12]
    node->next = next;
 800bcb2:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 800bcb6:	6968      	ldr	r0, [r5, #20]
 800bcb8:	4283      	cmp	r3, r0
        pool->head = new_node;
 800bcba:	bf08      	it	eq
 800bcbc:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 800bcbe:	6858      	ldr	r0, [r3, #4]
 800bcc0:	b108      	cbz	r0, 800bcc6 <tMempool_init+0x6a>
        node->next->prev = node->prev;
 800bcc2:	689c      	ldr	r4, [r3, #8]
 800bcc4:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 800bcc6:	6898      	ldr	r0, [r3, #8]
 800bcc8:	b108      	cbz	r0, 800bcce <tMempool_init+0x72>
        node->prev->next = node->next;
 800bcca:	685c      	ldr	r4, [r3, #4]
 800bccc:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 800bcce:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800bcd0:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 800bcd2:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 800bcd6:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800bcda:	68e8      	ldr	r0, [r5, #12]
 800bcdc:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
 800bce0:	4430      	add	r0, r6
 800bce2:	4404      	add	r4, r0
 800bce4:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 800bce6:	f8dc 0014 	ldr.w	r0, [ip, #20]
 800bcea:	42b8      	cmp	r0, r7
 800bcec:	dd0c      	ble.n	800bd08 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800bcee:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 800bcf0:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 800bcf2:	b154      	cbz	r4, 800bd0a <tMempool_init+0xae>
 800bcf4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800bcf8:	4664      	mov	r4, ip
 800bcfa:	f80c 7f01 	strb.w	r7, [ip, #1]!
 800bcfe:	68de      	ldr	r6, [r3, #12]
 800bd00:	3402      	adds	r4, #2
 800bd02:	1a24      	subs	r4, r4, r0
 800bd04:	42a6      	cmp	r6, r4
 800bd06:	d8f7      	bhi.n	800bcf8 <tMempool_init+0x9c>
    return node_to_alloc->pool;
 800bd08:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800bd0a:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800bd0e:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 800bd10:	686b      	ldr	r3, [r5, #4]
 800bd12:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 800bd14:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 800bd16:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800bd18:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 800bd1a:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 800bd1c:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800bd20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd22:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 800bd24:	440b      	add	r3, r1
    node->prev = prev;
 800bd26:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 800bd2a:	600b      	str	r3, [r1, #0]
    node->size = size;
 800bd2c:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 800bd2e:	6141      	str	r1, [r0, #20]
}
 800bd30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 800bd34:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 800bd36:	685c      	ldr	r4, [r3, #4]
 800bd38:	e7bd      	b.n	800bcb6 <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 800bd3a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800bd3e:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 800bd40:	1a52      	subs	r2, r2, r1
 800bd42:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800bd44:	bf94      	ite	ls
 800bd46:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 800bd48:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 800bd4a:	f000 f8ab 	bl	800bea4 <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 800bd54:	686a      	ldr	r2, [r5, #4]
 800bd56:	605a      	str	r2, [r3, #4]
 800bd58:	deff      	udf	#255	; 0xff
 800bd5a:	bf00      	nop

0800bd5c <tCycle_init>:
#endif

#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 800bd5c:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 800bd5e:	698c      	ldr	r4, [r1, #24]
{
 800bd60:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800bd62:	2018      	movs	r0, #24
 800bd64:	4621      	mov	r1, r4
 800bd66:	f7ff ff15 	bl	800bb94 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 800bd6a:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 800bd6c:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 800bd6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 800bd72:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 800bd74:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800bd76:	ed9f 7a06 	vldr	s14, [pc, #24]	; 800bd90 <tCycle_init+0x34>
    c->phase    =  0;
 800bd7a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800bd7e:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 800bd82:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 800bd84:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bd88:	edc0 7a04 	vstr	s15, [r0, #16]
}
 800bd8c:	bd38      	pop	{r3, r4, r5, pc}
 800bd8e:	bf00      	nop
 800bd90:	4f800000 	.word	0x4f800000

0800bd94 <tCycle_setFreq>:
    mpool_free((char*)c, c->mempool);
}

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 800bd94:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;

    c->inc = freq * c->invSampleRateTimesTwoTo32;
 800bd96:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 800bd9a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 800bd9e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bda2:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800bda6:	ed83 0a02 	vstr	s0, [r3, #8]
}
 800bdaa:	4770      	bx	lr

0800bdac <tCycle_tick>:

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
 800bdac:	b410      	push	{r4}
    _tCycle* c = *cy;
 800bdae:	6803      	ldr	r3, [r0, #0]
    // Wavetable synthesis

    temp = ((float)c->phase * 0.000000476837158f);
    idx = ((int)temp) & c->mask;
    frac = temp - (float)idx;
    samp0 = __leaf_table_sinewave[idx];
 800bdb0:	4a13      	ldr	r2, [pc, #76]	; (800be00 <tCycle_tick+0x54>)
    c->phase += c->inc;
 800bdb2:	6859      	ldr	r1, [r3, #4]
 800bdb4:	689c      	ldr	r4, [r3, #8]
    idx = ((int)temp) & c->mask;
 800bdb6:	6958      	ldr	r0, [r3, #20]
    c->phase += c->inc;
 800bdb8:	4421      	add	r1, r4
    temp = ((float)c->phase * 0.000000476837158f);
 800bdba:	ee07 1a10 	vmov	s14, r1
    c->phase += c->inc;
 800bdbe:	6059      	str	r1, [r3, #4]
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];

    return (samp0 + (samp1 - samp0) * frac);
}
 800bdc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    temp = ((float)c->phase * 0.000000476837158f);
 800bdc4:	eebb 7ae5 	vcvt.f32.u32	s14, s14, #21
    idx = ((int)temp) & c->mask;
 800bdc8:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 800bdcc:	ee17 3a90 	vmov	r3, s15
 800bdd0:	4003      	ands	r3, r0
    idx = (idx + 1) & c->mask;
 800bdd2:	1c59      	adds	r1, r3, #1
    frac = temp - (float)idx;
 800bdd4:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 800bdd8:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
    idx = (idx + 1) & c->mask;
 800bddc:	ea01 0300 	and.w	r3, r1, r0
    frac = temp - (float)idx;
 800bde0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 800bde4:	ed9c 0a00 	vldr	s0, [ip]
    samp1 = __leaf_table_sinewave[idx];
 800bde8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    frac = temp - (float)idx;
 800bdec:	ee77 7a67 	vsub.f32	s15, s14, s15
    return (samp0 + (samp1 - samp0) * frac);
 800bdf0:	ed92 7a00 	vldr	s14, [r2]
 800bdf4:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 800bdf8:	eea7 0a27 	vfma.f32	s0, s14, s15
 800bdfc:	4770      	bx	lr
 800bdfe:	bf00      	nop
 800be00:	0801154c 	.word	0x0801154c

0800be04 <tPBPulse_init>:

//==============================================================================

/* tPulse: Anti-aliased pulse waveform. */
void    tPBPulse_init        (tPBPulse* const osc, LEAF* const leaf)
{
 800be04:	b538      	push	{r3, r4, r5, lr}
    tPBPulse_initToPool(osc, &leaf->mempool);
}

void    tPBPulse_initToPool  (tPBPulse* const osc, tMempool* const mp)
{
    _tMempool* m = *mp;
 800be06:	698c      	ldr	r4, [r1, #24]
{
 800be08:	4605      	mov	r5, r0
    _tPBPulse* c = *osc = (_tPBPulse*) mpool_alloc(sizeof(_tPBPulse), m);
 800be0a:	2018      	movs	r0, #24
 800be0c:	4621      	mov	r1, r4
 800be0e:	f7ff fec1 	bl	800bb94 <mpool_alloc>
 800be12:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 800be14:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
    
    c->invSampleRate = leaf->invSampleRate;
    c->inc      =  0.0f;
 800be16:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 800be18:	6862      	ldr	r2, [r4, #4]
    c->phase    =  0.0f;
    c->width     =  0.5f;
 800be1a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 800be1e:	6852      	ldr	r2, [r2, #4]
    c->inc      =  0.0f;
 800be20:	6083      	str	r3, [r0, #8]
    c->phase    =  0.0f;
 800be22:	6043      	str	r3, [r0, #4]
    c->width     =  0.5f;
 800be24:	6101      	str	r1, [r0, #16]
    c->invSampleRate = leaf->invSampleRate;
 800be26:	6142      	str	r2, [r0, #20]
}
 800be28:	bd38      	pop	{r3, r4, r5, pc}
 800be2a:	bf00      	nop

0800be2c <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 800be2c:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 800be2e:	6995      	ldr	r5, [r2, #24]
{
 800be30:	4606      	mov	r6, r0
 800be32:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 800be34:	2018      	movs	r0, #24
 800be36:	4629      	mov	r1, r5
 800be38:	f7ff feac 	bl	800bb94 <mpool_alloc>
 800be3c:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 800be3e:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 800be40:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 800be42:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	6143      	str	r3, [r0, #20]
}
 800be48:	bd70      	pop	{r4, r5, r6, pc}
 800be4a:	bf00      	nop

0800be4c <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 800be4c:	4770      	bx	lr
 800be4e:	bf00      	nop

0800be50 <LEAF_init>:
{
 800be50:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 800be52:	6200      	str	r0, [r0, #32]
{
 800be54:	4604      	mov	r4, r0
 800be56:	461d      	mov	r5, r3
 800be58:	ed2d 8b02 	vpush	{d8}
 800be5c:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 800be60:	f7ff fe82 	bl	800bb68 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 800be64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800be68:	eddf 7a0c 	vldr	s15, [pc, #48]	; 800be9c <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 800be6c:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 800be6e:	4b0c      	ldr	r3, [pc, #48]	; (800bea0 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 800be70:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 800be74:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 800be78:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 800be7a:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 800be7c:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800be80:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 800be84:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800be88:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 800be8c:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 800be90:	edc4 7a03 	vstr	s15, [r4, #12]
}
 800be94:	ecbd 8b02 	vpop	{d8}
 800be98:	bd38      	pop	{r3, r4, r5, pc}
 800be9a:	bf00      	nop
 800be9c:	40c90fdb 	.word	0x40c90fdb
 800bea0:	0800be4d 	.word	0x0800be4d

0800bea4 <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 800bea4:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 800bea6:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800beaa:	2401      	movs	r4, #1
 800beac:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 800beae:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 800beb2:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800beb4:	4718      	bx	r3
 800beb6:	bf00      	nop

0800beb8 <__errno>:
 800beb8:	4b01      	ldr	r3, [pc, #4]	; (800bec0 <__errno+0x8>)
 800beba:	6818      	ldr	r0, [r3, #0]
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	20000944 	.word	0x20000944

0800bec4 <__libc_init_array>:
 800bec4:	b570      	push	{r4, r5, r6, lr}
 800bec6:	4d0d      	ldr	r5, [pc, #52]	; (800befc <__libc_init_array+0x38>)
 800bec8:	4c0d      	ldr	r4, [pc, #52]	; (800bf00 <__libc_init_array+0x3c>)
 800beca:	1b64      	subs	r4, r4, r5
 800becc:	10a4      	asrs	r4, r4, #2
 800bece:	2600      	movs	r6, #0
 800bed0:	42a6      	cmp	r6, r4
 800bed2:	d109      	bne.n	800bee8 <__libc_init_array+0x24>
 800bed4:	4d0b      	ldr	r5, [pc, #44]	; (800bf04 <__libc_init_array+0x40>)
 800bed6:	4c0c      	ldr	r4, [pc, #48]	; (800bf08 <__libc_init_array+0x44>)
 800bed8:	f001 fb16 	bl	800d508 <_init>
 800bedc:	1b64      	subs	r4, r4, r5
 800bede:	10a4      	asrs	r4, r4, #2
 800bee0:	2600      	movs	r6, #0
 800bee2:	42a6      	cmp	r6, r4
 800bee4:	d105      	bne.n	800bef2 <__libc_init_array+0x2e>
 800bee6:	bd70      	pop	{r4, r5, r6, pc}
 800bee8:	f855 3b04 	ldr.w	r3, [r5], #4
 800beec:	4798      	blx	r3
 800beee:	3601      	adds	r6, #1
 800bef0:	e7ee      	b.n	800bed0 <__libc_init_array+0xc>
 800bef2:	f855 3b04 	ldr.w	r3, [r5], #4
 800bef6:	4798      	blx	r3
 800bef8:	3601      	adds	r6, #1
 800befa:	e7f2      	b.n	800bee2 <__libc_init_array+0x1e>
 800befc:	08014580 	.word	0x08014580
 800bf00:	08014580 	.word	0x08014580
 800bf04:	08014580 	.word	0x08014580
 800bf08:	08014584 	.word	0x08014584

0800bf0c <memset>:
 800bf0c:	4402      	add	r2, r0
 800bf0e:	4603      	mov	r3, r0
 800bf10:	4293      	cmp	r3, r2
 800bf12:	d100      	bne.n	800bf16 <memset+0xa>
 800bf14:	4770      	bx	lr
 800bf16:	f803 1b01 	strb.w	r1, [r3], #1
 800bf1a:	e7f9      	b.n	800bf10 <memset+0x4>
 800bf1c:	0000      	movs	r0, r0
	...

0800bf20 <exp>:
 800bf20:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 800bf22:	ee10 3a90 	vmov	r3, s1
 800bf26:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 800bf2a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800bf2e:	18a2      	adds	r2, r4, r2
 800bf30:	2a3e      	cmp	r2, #62	; 0x3e
 800bf32:	ee10 1a10 	vmov	r1, s0
 800bf36:	d922      	bls.n	800bf7e <exp+0x5e>
 800bf38:	2a00      	cmp	r2, #0
 800bf3a:	da06      	bge.n	800bf4a <exp+0x2a>
 800bf3c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bf40:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bf44:	b004      	add	sp, #16
 800bf46:	bcf0      	pop	{r4, r5, r6, r7}
 800bf48:	4770      	bx	lr
 800bf4a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 800bf4e:	f04f 0000 	mov.w	r0, #0
 800bf52:	d913      	bls.n	800bf7c <exp+0x5c>
 800bf54:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 800bf58:	bf08      	it	eq
 800bf5a:	4281      	cmpeq	r1, r0
 800bf5c:	f000 80a0 	beq.w	800c0a0 <exp+0x180>
 800bf60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800bf64:	4294      	cmp	r4, r2
 800bf66:	d0e9      	beq.n	800bf3c <exp+0x1c>
 800bf68:	4283      	cmp	r3, r0
 800bf6a:	da03      	bge.n	800bf74 <exp+0x54>
 800bf6c:	b004      	add	sp, #16
 800bf6e:	bcf0      	pop	{r4, r5, r6, r7}
 800bf70:	f000 b8c6 	b.w	800c100 <__math_uflow>
 800bf74:	b004      	add	sp, #16
 800bf76:	bcf0      	pop	{r4, r5, r6, r7}
 800bf78:	f000 b8ca 	b.w	800c110 <__math_oflow>
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	4950      	ldr	r1, [pc, #320]	; (800c0c0 <exp+0x1a0>)
 800bf80:	ed91 6b02 	vldr	d6, [r1, #8]
 800bf84:	ed91 5b00 	vldr	d5, [r1]
 800bf88:	eeb0 7b46 	vmov.f64	d7, d6
 800bf8c:	eea5 7b00 	vfma.f64	d7, d5, d0
 800bf90:	ee17 5a10 	vmov	r5, s14
 800bf94:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bf98:	ed91 6b04 	vldr	d6, [r1, #16]
 800bf9c:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 800bfa0:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bfa4:	ed91 6b06 	vldr	d6, [r1, #24]
 800bfa8:	18d8      	adds	r0, r3, r3
 800bfaa:	f100 030f 	add.w	r3, r0, #15
 800bfae:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800bfb2:	eea6 0b07 	vfma.f64	d0, d6, d7
 800bfb6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 800bfba:	ee20 7b00 	vmul.f64	d7, d0, d0
 800bfbe:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 800bfc2:	ed91 5b08 	vldr	d5, [r1, #32]
 800bfc6:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bfca:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800bfce:	eea4 5b00 	vfma.f64	d5, d4, d0
 800bfd2:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 800bfd6:	eea5 6b07 	vfma.f64	d6, d5, d7
 800bfda:	ee27 7b07 	vmul.f64	d7, d7, d7
 800bfde:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 800bfe2:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 800bfe6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800bfea:	eea4 5b00 	vfma.f64	d5, d4, d0
 800bfee:	2600      	movs	r6, #0
 800bff0:	19f2      	adds	r2, r6, r7
 800bff2:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 800bff6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bffa:	2c00      	cmp	r4, #0
 800bffc:	d14b      	bne.n	800c096 <exp+0x176>
 800bffe:	42b5      	cmp	r5, r6
 800c000:	db10      	blt.n	800c024 <exp+0x104>
 800c002:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 800c006:	ed9f 7b28 	vldr	d7, [pc, #160]	; 800c0a8 <exp+0x188>
 800c00a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 800c00e:	4610      	mov	r0, r2
 800c010:	ec41 0b10 	vmov	d0, r0, r1
 800c014:	eea6 0b00 	vfma.f64	d0, d6, d0
 800c018:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c01c:	b004      	add	sp, #16
 800c01e:	bcf0      	pop	{r4, r5, r6, r7}
 800c020:	f000 b88a 	b.w	800c138 <__math_check_oflow>
 800c024:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 800c028:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800c02c:	4610      	mov	r0, r2
 800c02e:	ec41 0b17 	vmov	d7, r0, r1
 800c032:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800c036:	ee26 6b07 	vmul.f64	d6, d6, d7
 800c03a:	ee37 5b06 	vadd.f64	d5, d7, d6
 800c03e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 800c042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c046:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c0b0 <exp+0x190>
 800c04a:	d51e      	bpl.n	800c08a <exp+0x16a>
 800c04c:	ee35 3b04 	vadd.f64	d3, d5, d4
 800c050:	ee37 7b45 	vsub.f64	d7, d7, d5
 800c054:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c058:	ee34 6b43 	vsub.f64	d6, d4, d3
 800c05c:	ee36 5b05 	vadd.f64	d5, d6, d5
 800c060:	ee35 5b07 	vadd.f64	d5, d5, d7
 800c064:	ee35 5b03 	vadd.f64	d5, d5, d3
 800c068:	ee35 5b44 	vsub.f64	d5, d5, d4
 800c06c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 800c070:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c074:	d101      	bne.n	800c07a <exp+0x15a>
 800c076:	ed9f 5b10 	vldr	d5, [pc, #64]	; 800c0b8 <exp+0x198>
 800c07a:	ed8d 0b00 	vstr	d0, [sp]
 800c07e:	ed9d 7b00 	vldr	d7, [sp]
 800c082:	ee27 7b00 	vmul.f64	d7, d7, d0
 800c086:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c08a:	ee25 0b00 	vmul.f64	d0, d5, d0
 800c08e:	b004      	add	sp, #16
 800c090:	bcf0      	pop	{r4, r5, r6, r7}
 800c092:	f000 b845 	b.w	800c120 <__math_check_uflow>
 800c096:	ec43 2b10 	vmov	d0, r2, r3
 800c09a:	eea6 0b00 	vfma.f64	d0, d6, d0
 800c09e:	e751      	b.n	800bf44 <exp+0x24>
 800c0a0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 800c0b8 <exp+0x198>
 800c0a4:	e74e      	b.n	800bf44 <exp+0x24>
 800c0a6:	bf00      	nop
 800c0a8:	00000000 	.word	0x00000000
 800c0ac:	7f000000 	.word	0x7f000000
 800c0b0:	00000000 	.word	0x00000000
 800c0b4:	00100000 	.word	0x00100000
	...
 800c0c0:	080135b0 	.word	0x080135b0

0800c0c4 <with_errno>:
 800c0c4:	b513      	push	{r0, r1, r4, lr}
 800c0c6:	4604      	mov	r4, r0
 800c0c8:	ed8d 0b00 	vstr	d0, [sp]
 800c0cc:	f7ff fef4 	bl	800beb8 <__errno>
 800c0d0:	ed9d 0b00 	vldr	d0, [sp]
 800c0d4:	6004      	str	r4, [r0, #0]
 800c0d6:	b002      	add	sp, #8
 800c0d8:	bd10      	pop	{r4, pc}

0800c0da <xflow>:
 800c0da:	b082      	sub	sp, #8
 800c0dc:	b158      	cbz	r0, 800c0f6 <xflow+0x1c>
 800c0de:	eeb1 7b40 	vneg.f64	d7, d0
 800c0e2:	ed8d 7b00 	vstr	d7, [sp]
 800c0e6:	ed9d 7b00 	vldr	d7, [sp]
 800c0ea:	2022      	movs	r0, #34	; 0x22
 800c0ec:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c0f0:	b002      	add	sp, #8
 800c0f2:	f7ff bfe7 	b.w	800c0c4 <with_errno>
 800c0f6:	eeb0 7b40 	vmov.f64	d7, d0
 800c0fa:	e7f2      	b.n	800c0e2 <xflow+0x8>
 800c0fc:	0000      	movs	r0, r0
	...

0800c100 <__math_uflow>:
 800c100:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c108 <__math_uflow+0x8>
 800c104:	f7ff bfe9 	b.w	800c0da <xflow>
 800c108:	00000000 	.word	0x00000000
 800c10c:	10000000 	.word	0x10000000

0800c110 <__math_oflow>:
 800c110:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c118 <__math_oflow+0x8>
 800c114:	f7ff bfe1 	b.w	800c0da <xflow>
 800c118:	00000000 	.word	0x00000000
 800c11c:	70000000 	.word	0x70000000

0800c120 <__math_check_uflow>:
 800c120:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800c124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c128:	d102      	bne.n	800c130 <__math_check_uflow+0x10>
 800c12a:	2022      	movs	r0, #34	; 0x22
 800c12c:	f7ff bfca 	b.w	800c0c4 <with_errno>
 800c130:	4770      	bx	lr
 800c132:	0000      	movs	r0, r0
 800c134:	0000      	movs	r0, r0
	...

0800c138 <__math_check_oflow>:
 800c138:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800c158 <__math_check_oflow+0x20>
 800c13c:	eeb0 7bc0 	vabs.f64	d7, d0
 800c140:	eeb4 7b46 	vcmp.f64	d7, d6
 800c144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c148:	dd02      	ble.n	800c150 <__math_check_oflow+0x18>
 800c14a:	2022      	movs	r0, #34	; 0x22
 800c14c:	f7ff bfba 	b.w	800c0c4 <with_errno>
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	f3af 8000 	nop.w
 800c158:	ffffffff 	.word	0xffffffff
 800c15c:	7fefffff 	.word	0x7fefffff

0800c160 <with_errnof>:
 800c160:	b513      	push	{r0, r1, r4, lr}
 800c162:	4604      	mov	r4, r0
 800c164:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c168:	f7ff fea6 	bl	800beb8 <__errno>
 800c16c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c170:	6004      	str	r4, [r0, #0]
 800c172:	b002      	add	sp, #8
 800c174:	bd10      	pop	{r4, pc}

0800c176 <xflowf>:
 800c176:	b130      	cbz	r0, 800c186 <xflowf+0x10>
 800c178:	eef1 7a40 	vneg.f32	s15, s0
 800c17c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c180:	2022      	movs	r0, #34	; 0x22
 800c182:	f7ff bfed 	b.w	800c160 <with_errnof>
 800c186:	eef0 7a40 	vmov.f32	s15, s0
 800c18a:	e7f7      	b.n	800c17c <xflowf+0x6>

0800c18c <__math_uflowf>:
 800c18c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c194 <__math_uflowf+0x8>
 800c190:	f7ff bff1 	b.w	800c176 <xflowf>
 800c194:	10000000 	.word	0x10000000

0800c198 <__math_may_uflowf>:
 800c198:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1a0 <__math_may_uflowf+0x8>
 800c19c:	f7ff bfeb 	b.w	800c176 <xflowf>
 800c1a0:	1a200000 	.word	0x1a200000

0800c1a4 <__math_oflowf>:
 800c1a4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1ac <__math_oflowf+0x8>
 800c1a8:	f7ff bfe5 	b.w	800c176 <xflowf>
 800c1ac:	70000000 	.word	0x70000000

0800c1b0 <__math_divzerof>:
 800c1b0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c1b4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	fe40 7a27 	vseleq.f32	s15, s0, s15
 800c1be:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c1cc <__math_divzerof+0x1c>
 800c1c2:	2022      	movs	r0, #34	; 0x22
 800c1c4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c1c8:	f7ff bfca 	b.w	800c160 <with_errnof>
 800c1cc:	00000000 	.word	0x00000000

0800c1d0 <__math_invalidf>:
 800c1d0:	eef0 7a40 	vmov.f32	s15, s0
 800c1d4:	ee30 7a40 	vsub.f32	s14, s0, s0
 800c1d8:	eef4 7a67 	vcmp.f32	s15, s15
 800c1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1e0:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800c1e4:	d602      	bvs.n	800c1ec <__math_invalidf+0x1c>
 800c1e6:	2021      	movs	r0, #33	; 0x21
 800c1e8:	f7ff bfba 	b.w	800c160 <with_errnof>
 800c1ec:	4770      	bx	lr
	...

0800c1f0 <expf>:
 800c1f0:	ee10 2a10 	vmov	r2, s0
 800c1f4:	f240 412a 	movw	r1, #1066	; 0x42a
 800c1f8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800c1fc:	428b      	cmp	r3, r1
 800c1fe:	b430      	push	{r4, r5}
 800c200:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c204:	d92a      	bls.n	800c25c <expf+0x6c>
 800c206:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800c20a:	d058      	beq.n	800c2be <expf+0xce>
 800c20c:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c210:	d303      	bcc.n	800c21a <expf+0x2a>
 800c212:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c216:	bc30      	pop	{r4, r5}
 800c218:	4770      	bx	lr
 800c21a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c2c4 <expf+0xd4>
 800c21e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c222:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c226:	dd03      	ble.n	800c230 <expf+0x40>
 800c228:	bc30      	pop	{r4, r5}
 800c22a:	2000      	movs	r0, #0
 800c22c:	f7ff bfba 	b.w	800c1a4 <__math_oflowf>
 800c230:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c2c8 <expf+0xd8>
 800c234:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c23c:	d503      	bpl.n	800c246 <expf+0x56>
 800c23e:	bc30      	pop	{r4, r5}
 800c240:	2000      	movs	r0, #0
 800c242:	f7ff bfa3 	b.w	800c18c <__math_uflowf>
 800c246:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c2cc <expf+0xdc>
 800c24a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c24e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c252:	d503      	bpl.n	800c25c <expf+0x6c>
 800c254:	bc30      	pop	{r4, r5}
 800c256:	2000      	movs	r0, #0
 800c258:	f7ff bf9e 	b.w	800c198 <__math_may_uflowf>
 800c25c:	4b1c      	ldr	r3, [pc, #112]	; (800c2d0 <expf+0xe0>)
 800c25e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c262:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800c266:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800c26a:	eeb0 7b44 	vmov.f64	d7, d4
 800c26e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c272:	ee17 0a10 	vmov	r0, s14
 800c276:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c27a:	f000 021f 	and.w	r2, r0, #31
 800c27e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c282:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800c286:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c28a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800c28e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800c292:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c296:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800c29a:	684d      	ldr	r5, [r1, #4]
 800c29c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800c2a0:	2100      	movs	r1, #0
 800c2a2:	190a      	adds	r2, r1, r4
 800c2a4:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800c2a8:	eea5 0b07 	vfma.f64	d0, d5, d7
 800c2ac:	ec43 2b17 	vmov	d7, r2, r3
 800c2b0:	eea6 0b04 	vfma.f64	d0, d6, d4
 800c2b4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c2b8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c2bc:	e7ab      	b.n	800c216 <expf+0x26>
 800c2be:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c2d4 <expf+0xe4>
 800c2c2:	e7a8      	b.n	800c216 <expf+0x26>
 800c2c4:	42b17217 	.word	0x42b17217
 800c2c8:	c2cff1b4 	.word	0xc2cff1b4
 800c2cc:	c2ce8ecf 	.word	0xc2ce8ecf
 800c2d0:	08013e20 	.word	0x08013e20
 800c2d4:	00000000 	.word	0x00000000

0800c2d8 <fabsf>:
 800c2d8:	ee10 3a10 	vmov	r3, s0
 800c2dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2e0:	ee00 3a10 	vmov	s0, r3
 800c2e4:	4770      	bx	lr
	...

0800c2e8 <log2f>:
 800c2e8:	ee10 2a10 	vmov	r2, s0
 800c2ec:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c2f0:	b410      	push	{r4}
 800c2f2:	d055      	beq.n	800c3a0 <log2f+0xb8>
 800c2f4:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 800c2f8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c2fc:	d31a      	bcc.n	800c334 <log2f+0x4c>
 800c2fe:	0053      	lsls	r3, r2, #1
 800c300:	d104      	bne.n	800c30c <log2f+0x24>
 800c302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c306:	2001      	movs	r0, #1
 800c308:	f7ff bf52 	b.w	800c1b0 <__math_divzerof>
 800c30c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800c310:	d043      	beq.n	800c39a <log2f+0xb2>
 800c312:	2a00      	cmp	r2, #0
 800c314:	db02      	blt.n	800c31c <log2f+0x34>
 800c316:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c31a:	d303      	bcc.n	800c324 <log2f+0x3c>
 800c31c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c320:	f7ff bf56 	b.w	800c1d0 <__math_invalidf>
 800c324:	eddf 7a20 	vldr	s15, [pc, #128]	; 800c3a8 <log2f+0xc0>
 800c328:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c32c:	ee10 3a10 	vmov	r3, s0
 800c330:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 800c334:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 800c338:	491c      	ldr	r1, [pc, #112]	; (800c3ac <log2f+0xc4>)
 800c33a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800c33e:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 800c342:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 800c346:	0ddc      	lsrs	r4, r3, #23
 800c348:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800c34c:	05e4      	lsls	r4, r4, #23
 800c34e:	ed90 5b00 	vldr	d5, [r0]
 800c352:	1b12      	subs	r2, r2, r4
 800c354:	ee07 2a90 	vmov	s15, r2
 800c358:	15db      	asrs	r3, r3, #23
 800c35a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c35e:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c362:	ed90 7b02 	vldr	d7, [r0, #8]
 800c366:	ee26 4b06 	vmul.f64	d4, d6, d6
 800c36a:	ee00 3a10 	vmov	s0, r3
 800c36e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 800c372:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800c376:	ee30 0b07 	vadd.f64	d0, d0, d7
 800c37a:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 800c37e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c382:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 800c386:	eea5 7b04 	vfma.f64	d7, d5, d4
 800c38a:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 800c38e:	eea5 0b06 	vfma.f64	d0, d5, d6
 800c392:	eea4 0b07 	vfma.f64	d0, d4, d7
 800c396:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c39a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c39e:	4770      	bx	lr
 800c3a0:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800c3b0 <log2f+0xc8>
 800c3a4:	e7f9      	b.n	800c39a <log2f+0xb2>
 800c3a6:	bf00      	nop
 800c3a8:	4b000000 	.word	0x4b000000
 800c3ac:	08013f68 	.word	0x08013f68
 800c3b0:	00000000 	.word	0x00000000

0800c3b4 <checkint>:
 800c3b4:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c3b8:	2b7e      	cmp	r3, #126	; 0x7e
 800c3ba:	dd10      	ble.n	800c3de <checkint+0x2a>
 800c3bc:	2b96      	cmp	r3, #150	; 0x96
 800c3be:	dc0c      	bgt.n	800c3da <checkint+0x26>
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800c3c6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ca:	1e5a      	subs	r2, r3, #1
 800c3cc:	4202      	tst	r2, r0
 800c3ce:	d106      	bne.n	800c3de <checkint+0x2a>
 800c3d0:	4203      	tst	r3, r0
 800c3d2:	bf0c      	ite	eq
 800c3d4:	2002      	moveq	r0, #2
 800c3d6:	2001      	movne	r0, #1
 800c3d8:	4770      	bx	lr
 800c3da:	2002      	movs	r0, #2
 800c3dc:	4770      	bx	lr
 800c3de:	2000      	movs	r0, #0
 800c3e0:	4770      	bx	lr
 800c3e2:	0000      	movs	r0, r0
 800c3e4:	0000      	movs	r0, r0
	...

0800c3e8 <powf>:
 800c3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3ea:	ee10 1a10 	vmov	r1, s0
 800c3ee:	ee10 4a90 	vmov	r4, s1
 800c3f2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 800c3f6:	0062      	lsls	r2, r4, #1
 800c3f8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c3fc:	eef0 7a40 	vmov.f32	s15, s0
 800c400:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 800c404:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 800c408:	d252      	bcs.n	800c4b0 <powf+0xc8>
 800c40a:	4298      	cmp	r0, r3
 800c40c:	d252      	bcs.n	800c4b4 <powf+0xcc>
 800c40e:	2000      	movs	r0, #0
 800c410:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 800c414:	4ca0      	ldr	r4, [pc, #640]	; (800c698 <powf+0x2b0>)
 800c416:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 800c41a:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 800c41e:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 800c422:	0dd2      	lsrs	r2, r2, #23
 800c424:	05d2      	lsls	r2, r2, #23
 800c426:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 800c42a:	1a8b      	subs	r3, r1, r2
 800c42c:	ed95 6b00 	vldr	d6, [r5]
 800c430:	ee07 3a90 	vmov	s15, r3
 800c434:	15d2      	asrs	r2, r2, #23
 800c436:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800c43a:	eea6 5b07 	vfma.f64	d5, d6, d7
 800c43e:	ed95 6b02 	vldr	d6, [r5, #8]
 800c442:	ee25 2b05 	vmul.f64	d2, d5, d5
 800c446:	ee22 1b02 	vmul.f64	d1, d2, d2
 800c44a:	ee07 2a90 	vmov	s15, r2
 800c44e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 800c452:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800c456:	ee37 7b06 	vadd.f64	d7, d7, d6
 800c45a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 800c45e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 800c462:	eea5 3b06 	vfma.f64	d3, d5, d6
 800c466:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 800c46a:	eea5 6b04 	vfma.f64	d6, d5, d4
 800c46e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 800c472:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 800c476:	eea5 7b04 	vfma.f64	d7, d5, d4
 800c47a:	eea2 7b06 	vfma.f64	d7, d2, d6
 800c47e:	eea3 7b01 	vfma.f64	d7, d3, d1
 800c482:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c486:	ee10 3a90 	vmov	r3, s1
 800c48a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800c48e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 800c492:	429a      	cmp	r2, r3
 800c494:	f0c0 80b1 	bcc.w	800c5fa <powf+0x212>
 800c498:	ed9f 7b77 	vldr	d7, [pc, #476]	; 800c678 <powf+0x290>
 800c49c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c4a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c4a4:	dd79      	ble.n	800c59a <powf+0x1b2>
 800c4a6:	b003      	add	sp, #12
 800c4a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c4ac:	f7ff be7a 	b.w	800c1a4 <__math_oflowf>
 800c4b0:	4298      	cmp	r0, r3
 800c4b2:	d32d      	bcc.n	800c510 <powf+0x128>
 800c4b4:	b952      	cbnz	r2, 800c4cc <powf+0xe4>
 800c4b6:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 800c4ba:	005b      	lsls	r3, r3, #1
 800c4bc:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 800c4c0:	f240 80c9 	bls.w	800c656 <powf+0x26e>
 800c4c4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 800c4c8:	b003      	add	sp, #12
 800c4ca:	bd30      	pop	{r4, r5, pc}
 800c4cc:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 800c4d0:	d105      	bne.n	800c4de <powf+0xf6>
 800c4d2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800c4d6:	0064      	lsls	r4, r4, #1
 800c4d8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800c4dc:	e7f0      	b.n	800c4c0 <powf+0xd8>
 800c4de:	004b      	lsls	r3, r1, #1
 800c4e0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 800c4e4:	d8ee      	bhi.n	800c4c4 <powf+0xdc>
 800c4e6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 800c4ea:	d1eb      	bne.n	800c4c4 <powf+0xdc>
 800c4ec:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c4f0:	f000 80b1 	beq.w	800c656 <powf+0x26e>
 800c4f4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800c4f8:	ea6f 0404 	mvn.w	r4, r4
 800c4fc:	bf34      	ite	cc
 800c4fe:	2300      	movcc	r3, #0
 800c500:	2301      	movcs	r3, #1
 800c502:	0fe4      	lsrs	r4, r4, #31
 800c504:	42a3      	cmp	r3, r4
 800c506:	f040 80a9 	bne.w	800c65c <powf+0x274>
 800c50a:	ee20 0aa0 	vmul.f32	s0, s1, s1
 800c50e:	e7db      	b.n	800c4c8 <powf+0xe0>
 800c510:	004d      	lsls	r5, r1, #1
 800c512:	1e6a      	subs	r2, r5, #1
 800c514:	429a      	cmp	r2, r3
 800c516:	d31c      	bcc.n	800c552 <powf+0x16a>
 800c518:	2900      	cmp	r1, #0
 800c51a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c51e:	da0f      	bge.n	800c540 <powf+0x158>
 800c520:	ee10 0a90 	vmov	r0, s1
 800c524:	f7ff ff46 	bl	800c3b4 <checkint>
 800c528:	2801      	cmp	r0, #1
 800c52a:	d109      	bne.n	800c540 <powf+0x158>
 800c52c:	eeb1 0a40 	vneg.f32	s0, s0
 800c530:	b945      	cbnz	r5, 800c544 <powf+0x15c>
 800c532:	2c00      	cmp	r4, #0
 800c534:	dac8      	bge.n	800c4c8 <powf+0xe0>
 800c536:	b003      	add	sp, #12
 800c538:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c53c:	f7ff be38 	b.w	800c1b0 <__math_divzerof>
 800c540:	2000      	movs	r0, #0
 800c542:	e7f5      	b.n	800c530 <powf+0x148>
 800c544:	2c00      	cmp	r4, #0
 800c546:	dabf      	bge.n	800c4c8 <powf+0xe0>
 800c548:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800c54c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800c550:	e7ba      	b.n	800c4c8 <powf+0xe0>
 800c552:	2900      	cmp	r1, #0
 800c554:	da1f      	bge.n	800c596 <powf+0x1ae>
 800c556:	ee10 0a90 	vmov	r0, s1
 800c55a:	f7ff ff2b 	bl	800c3b4 <checkint>
 800c55e:	b920      	cbnz	r0, 800c56a <powf+0x182>
 800c560:	b003      	add	sp, #12
 800c562:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c566:	f7ff be33 	b.w	800c1d0 <__math_invalidf>
 800c56a:	2801      	cmp	r0, #1
 800c56c:	bf14      	ite	ne
 800c56e:	2000      	movne	r0, #0
 800c570:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 800c574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c578:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c57c:	f4bf af48 	bcs.w	800c410 <powf+0x28>
 800c580:	ed9f 0a46 	vldr	s0, [pc, #280]	; 800c69c <powf+0x2b4>
 800c584:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c588:	ee10 3a10 	vmov	r3, s0
 800c58c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c590:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 800c594:	e73c      	b.n	800c410 <powf+0x28>
 800c596:	2000      	movs	r0, #0
 800c598:	e7ee      	b.n	800c578 <powf+0x190>
 800c59a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 800c680 <powf+0x298>
 800c59e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5a6:	dd10      	ble.n	800c5ca <powf+0x1e2>
 800c5a8:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d158      	bne.n	800c662 <powf+0x27a>
 800c5b0:	9300      	str	r3, [sp, #0]
 800c5b2:	eddd 7a00 	vldr	s15, [sp]
 800c5b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c5ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c5be:	eef4 7a47 	vcmp.f32	s15, s14
 800c5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5c6:	f47f af6e 	bne.w	800c4a6 <powf+0xbe>
 800c5ca:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 800c688 <powf+0x2a0>
 800c5ce:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c5d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5d6:	d804      	bhi.n	800c5e2 <powf+0x1fa>
 800c5d8:	b003      	add	sp, #12
 800c5da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5de:	f7ff bdd5 	b.w	800c18c <__math_uflowf>
 800c5e2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800c690 <powf+0x2a8>
 800c5e6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800c5ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5ee:	d504      	bpl.n	800c5fa <powf+0x212>
 800c5f0:	b003      	add	sp, #12
 800c5f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5f6:	f7ff bdcf 	b.w	800c198 <__math_may_uflowf>
 800c5fa:	4b29      	ldr	r3, [pc, #164]	; (800c6a0 <powf+0x2b8>)
 800c5fc:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 800c600:	ee30 6b07 	vadd.f64	d6, d0, d7
 800c604:	ee16 2a10 	vmov	r2, s12
 800c608:	ee36 7b47 	vsub.f64	d7, d6, d7
 800c60c:	f002 011f 	and.w	r1, r2, #31
 800c610:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 800c614:	ee30 7b47 	vsub.f64	d7, d0, d7
 800c618:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c61c:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 800c620:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c624:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800c628:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800c62c:	eea7 6b05 	vfma.f64	d6, d7, d5
 800c630:	686d      	ldr	r5, [r5, #4]
 800c632:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 800c636:	1882      	adds	r2, r0, r2
 800c638:	2300      	movs	r3, #0
 800c63a:	1918      	adds	r0, r3, r4
 800c63c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 800c640:	eea7 0b05 	vfma.f64	d0, d7, d5
 800c644:	ec41 0b17 	vmov	d7, r0, r1
 800c648:	eea6 0b04 	vfma.f64	d0, d6, d4
 800c64c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c650:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c654:	e738      	b.n	800c4c8 <powf+0xe0>
 800c656:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800c65a:	e735      	b.n	800c4c8 <powf+0xe0>
 800c65c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c6a4 <powf+0x2bc>
 800c660:	e732      	b.n	800c4c8 <powf+0xe0>
 800c662:	9301      	str	r3, [sp, #4]
 800c664:	eddd 7a01 	vldr	s15, [sp, #4]
 800c668:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800c66c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c670:	e7a5      	b.n	800c5be <powf+0x1d6>
 800c672:	bf00      	nop
 800c674:	f3af 8000 	nop.w
 800c678:	ffd1d571 	.word	0xffd1d571
 800c67c:	405fffff 	.word	0x405fffff
 800c680:	ffa3aae2 	.word	0xffa3aae2
 800c684:	405fffff 	.word	0x405fffff
 800c688:	00000000 	.word	0x00000000
 800c68c:	c062c000 	.word	0xc062c000
 800c690:	00000000 	.word	0x00000000
 800c694:	c062a000 	.word	0xc062a000
 800c698:	08014088 	.word	0x08014088
 800c69c:	4b000000 	.word	0x4b000000
 800c6a0:	08013e20 	.word	0x08013e20
 800c6a4:	00000000 	.word	0x00000000

0800c6a8 <tanf>:
 800c6a8:	ee10 3a10 	vmov	r3, s0
 800c6ac:	b507      	push	{r0, r1, r2, lr}
 800c6ae:	4a12      	ldr	r2, [pc, #72]	; (800c6f8 <tanf+0x50>)
 800c6b0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	dc07      	bgt.n	800c6c8 <tanf+0x20>
 800c6b8:	eddf 0a10 	vldr	s1, [pc, #64]	; 800c6fc <tanf+0x54>
 800c6bc:	2001      	movs	r0, #1
 800c6be:	b003      	add	sp, #12
 800c6c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6c4:	f000 bc66 	b.w	800cf94 <__kernel_tanf>
 800c6c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c6cc:	db04      	blt.n	800c6d8 <tanf+0x30>
 800c6ce:	ee30 0a40 	vsub.f32	s0, s0, s0
 800c6d2:	b003      	add	sp, #12
 800c6d4:	f85d fb04 	ldr.w	pc, [sp], #4
 800c6d8:	4668      	mov	r0, sp
 800c6da:	f000 f839 	bl	800c750 <__ieee754_rem_pio2f>
 800c6de:	0040      	lsls	r0, r0, #1
 800c6e0:	f000 0002 	and.w	r0, r0, #2
 800c6e4:	eddd 0a01 	vldr	s1, [sp, #4]
 800c6e8:	ed9d 0a00 	vldr	s0, [sp]
 800c6ec:	f1c0 0001 	rsb	r0, r0, #1
 800c6f0:	f000 fc50 	bl	800cf94 <__kernel_tanf>
 800c6f4:	e7ed      	b.n	800c6d2 <tanf+0x2a>
 800c6f6:	bf00      	nop
 800c6f8:	3f490fda 	.word	0x3f490fda
 800c6fc:	00000000 	.word	0x00000000

0800c700 <sinhf>:
 800c700:	b508      	push	{r3, lr}
 800c702:	ed2d 8b02 	vpush	{d8}
 800c706:	eef0 8a40 	vmov.f32	s17, s0
 800c70a:	f000 f95d 	bl	800c9c8 <__ieee754_sinhf>
 800c70e:	eeb0 8a40 	vmov.f32	s16, s0
 800c712:	f000 fe39 	bl	800d388 <finitef>
 800c716:	b990      	cbnz	r0, 800c73e <sinhf+0x3e>
 800c718:	eeb0 0a68 	vmov.f32	s0, s17
 800c71c:	f000 fe34 	bl	800d388 <finitef>
 800c720:	b168      	cbz	r0, 800c73e <sinhf+0x3e>
 800c722:	f7ff fbc9 	bl	800beb8 <__errno>
 800c726:	ed9f 8a08 	vldr	s16, [pc, #32]	; 800c748 <sinhf+0x48>
 800c72a:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800c74c <sinhf+0x4c>
 800c72e:	2322      	movs	r3, #34	; 0x22
 800c730:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c738:	6003      	str	r3, [r0, #0]
 800c73a:	fe38 8a00 	vselgt.f32	s16, s16, s0
 800c73e:	eeb0 0a48 	vmov.f32	s0, s16
 800c742:	ecbd 8b02 	vpop	{d8}
 800c746:	bd08      	pop	{r3, pc}
 800c748:	7f800000 	.word	0x7f800000
 800c74c:	ff800000 	.word	0xff800000

0800c750 <__ieee754_rem_pio2f>:
 800c750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c752:	ee10 6a10 	vmov	r6, s0
 800c756:	4b8e      	ldr	r3, [pc, #568]	; (800c990 <__ieee754_rem_pio2f+0x240>)
 800c758:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800c75c:	429d      	cmp	r5, r3
 800c75e:	b087      	sub	sp, #28
 800c760:	eef0 7a40 	vmov.f32	s15, s0
 800c764:	4604      	mov	r4, r0
 800c766:	dc05      	bgt.n	800c774 <__ieee754_rem_pio2f+0x24>
 800c768:	2300      	movs	r3, #0
 800c76a:	ed80 0a00 	vstr	s0, [r0]
 800c76e:	6043      	str	r3, [r0, #4]
 800c770:	2000      	movs	r0, #0
 800c772:	e01a      	b.n	800c7aa <__ieee754_rem_pio2f+0x5a>
 800c774:	4b87      	ldr	r3, [pc, #540]	; (800c994 <__ieee754_rem_pio2f+0x244>)
 800c776:	429d      	cmp	r5, r3
 800c778:	dc46      	bgt.n	800c808 <__ieee754_rem_pio2f+0xb8>
 800c77a:	2e00      	cmp	r6, #0
 800c77c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800c998 <__ieee754_rem_pio2f+0x248>
 800c780:	4b86      	ldr	r3, [pc, #536]	; (800c99c <__ieee754_rem_pio2f+0x24c>)
 800c782:	f025 050f 	bic.w	r5, r5, #15
 800c786:	dd1f      	ble.n	800c7c8 <__ieee754_rem_pio2f+0x78>
 800c788:	429d      	cmp	r5, r3
 800c78a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c78e:	d00e      	beq.n	800c7ae <__ieee754_rem_pio2f+0x5e>
 800c790:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800c9a0 <__ieee754_rem_pio2f+0x250>
 800c794:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800c798:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c79c:	ed80 0a00 	vstr	s0, [r0]
 800c7a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c7a4:	2001      	movs	r0, #1
 800c7a6:	edc4 7a01 	vstr	s15, [r4, #4]
 800c7aa:	b007      	add	sp, #28
 800c7ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c7ae:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800c9a4 <__ieee754_rem_pio2f+0x254>
 800c7b2:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800c9a8 <__ieee754_rem_pio2f+0x258>
 800c7b6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c7ba:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800c7be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c7c2:	edc0 6a00 	vstr	s13, [r0]
 800c7c6:	e7eb      	b.n	800c7a0 <__ieee754_rem_pio2f+0x50>
 800c7c8:	429d      	cmp	r5, r3
 800c7ca:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c7ce:	d00e      	beq.n	800c7ee <__ieee754_rem_pio2f+0x9e>
 800c7d0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800c9a0 <__ieee754_rem_pio2f+0x250>
 800c7d4:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c7d8:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800c7dc:	ed80 0a00 	vstr	s0, [r0]
 800c7e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c7e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7e8:	edc4 7a01 	vstr	s15, [r4, #4]
 800c7ec:	e7dd      	b.n	800c7aa <__ieee754_rem_pio2f+0x5a>
 800c7ee:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800c9a4 <__ieee754_rem_pio2f+0x254>
 800c7f2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800c9a8 <__ieee754_rem_pio2f+0x258>
 800c7f6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c7fa:	ee77 6a87 	vadd.f32	s13, s15, s14
 800c7fe:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c802:	edc0 6a00 	vstr	s13, [r0]
 800c806:	e7eb      	b.n	800c7e0 <__ieee754_rem_pio2f+0x90>
 800c808:	4b68      	ldr	r3, [pc, #416]	; (800c9ac <__ieee754_rem_pio2f+0x25c>)
 800c80a:	429d      	cmp	r5, r3
 800c80c:	dc72      	bgt.n	800c8f4 <__ieee754_rem_pio2f+0x1a4>
 800c80e:	f7ff fd63 	bl	800c2d8 <fabsf>
 800c812:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800c9b0 <__ieee754_rem_pio2f+0x260>
 800c816:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c81a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c81e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c822:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c826:	ee17 0a90 	vmov	r0, s15
 800c82a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800c998 <__ieee754_rem_pio2f+0x248>
 800c82e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c832:	281f      	cmp	r0, #31
 800c834:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800c9a0 <__ieee754_rem_pio2f+0x250>
 800c838:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c83c:	eeb1 6a47 	vneg.f32	s12, s14
 800c840:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c844:	ee16 2a90 	vmov	r2, s13
 800c848:	dc1c      	bgt.n	800c884 <__ieee754_rem_pio2f+0x134>
 800c84a:	495a      	ldr	r1, [pc, #360]	; (800c9b4 <__ieee754_rem_pio2f+0x264>)
 800c84c:	1e47      	subs	r7, r0, #1
 800c84e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800c852:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800c856:	428b      	cmp	r3, r1
 800c858:	d014      	beq.n	800c884 <__ieee754_rem_pio2f+0x134>
 800c85a:	6022      	str	r2, [r4, #0]
 800c85c:	ed94 7a00 	vldr	s14, [r4]
 800c860:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c864:	2e00      	cmp	r6, #0
 800c866:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c86a:	ed84 0a01 	vstr	s0, [r4, #4]
 800c86e:	da9c      	bge.n	800c7aa <__ieee754_rem_pio2f+0x5a>
 800c870:	eeb1 7a47 	vneg.f32	s14, s14
 800c874:	eeb1 0a40 	vneg.f32	s0, s0
 800c878:	ed84 7a00 	vstr	s14, [r4]
 800c87c:	ed84 0a01 	vstr	s0, [r4, #4]
 800c880:	4240      	negs	r0, r0
 800c882:	e792      	b.n	800c7aa <__ieee754_rem_pio2f+0x5a>
 800c884:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c888:	15eb      	asrs	r3, r5, #23
 800c88a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800c88e:	2d08      	cmp	r5, #8
 800c890:	dde3      	ble.n	800c85a <__ieee754_rem_pio2f+0x10a>
 800c892:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c9a4 <__ieee754_rem_pio2f+0x254>
 800c896:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c9a8 <__ieee754_rem_pio2f+0x258>
 800c89a:	eef0 6a40 	vmov.f32	s13, s0
 800c89e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c8a2:	ee30 0a66 	vsub.f32	s0, s0, s13
 800c8a6:	eea6 0a27 	vfma.f32	s0, s12, s15
 800c8aa:	eef0 7a40 	vmov.f32	s15, s0
 800c8ae:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c8b2:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c8b6:	ee15 2a90 	vmov	r2, s11
 800c8ba:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c8be:	1a5b      	subs	r3, r3, r1
 800c8c0:	2b19      	cmp	r3, #25
 800c8c2:	dc04      	bgt.n	800c8ce <__ieee754_rem_pio2f+0x17e>
 800c8c4:	edc4 5a00 	vstr	s11, [r4]
 800c8c8:	eeb0 0a66 	vmov.f32	s0, s13
 800c8cc:	e7c6      	b.n	800c85c <__ieee754_rem_pio2f+0x10c>
 800c8ce:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800c9b8 <__ieee754_rem_pio2f+0x268>
 800c8d2:	eeb0 0a66 	vmov.f32	s0, s13
 800c8d6:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c8da:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c8de:	eddf 6a37 	vldr	s13, [pc, #220]	; 800c9bc <__ieee754_rem_pio2f+0x26c>
 800c8e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c8e6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c8ea:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c8ee:	ed84 7a00 	vstr	s14, [r4]
 800c8f2:	e7b3      	b.n	800c85c <__ieee754_rem_pio2f+0x10c>
 800c8f4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800c8f8:	db06      	blt.n	800c908 <__ieee754_rem_pio2f+0x1b8>
 800c8fa:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c8fe:	edc0 7a01 	vstr	s15, [r0, #4]
 800c902:	edc0 7a00 	vstr	s15, [r0]
 800c906:	e733      	b.n	800c770 <__ieee754_rem_pio2f+0x20>
 800c908:	15ea      	asrs	r2, r5, #23
 800c90a:	3a86      	subs	r2, #134	; 0x86
 800c90c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c910:	ee07 3a90 	vmov	s15, r3
 800c914:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c918:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c9c0 <__ieee754_rem_pio2f+0x270>
 800c91c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c920:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c924:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c928:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c92c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c930:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c934:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c938:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c93c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c940:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c948:	edcd 7a05 	vstr	s15, [sp, #20]
 800c94c:	d11e      	bne.n	800c98c <__ieee754_rem_pio2f+0x23c>
 800c94e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c956:	bf14      	ite	ne
 800c958:	2302      	movne	r3, #2
 800c95a:	2301      	moveq	r3, #1
 800c95c:	4919      	ldr	r1, [pc, #100]	; (800c9c4 <__ieee754_rem_pio2f+0x274>)
 800c95e:	9101      	str	r1, [sp, #4]
 800c960:	2102      	movs	r1, #2
 800c962:	9100      	str	r1, [sp, #0]
 800c964:	a803      	add	r0, sp, #12
 800c966:	4621      	mov	r1, r4
 800c968:	f000 f89e 	bl	800caa8 <__kernel_rem_pio2f>
 800c96c:	2e00      	cmp	r6, #0
 800c96e:	f6bf af1c 	bge.w	800c7aa <__ieee754_rem_pio2f+0x5a>
 800c972:	edd4 7a00 	vldr	s15, [r4]
 800c976:	eef1 7a67 	vneg.f32	s15, s15
 800c97a:	edc4 7a00 	vstr	s15, [r4]
 800c97e:	edd4 7a01 	vldr	s15, [r4, #4]
 800c982:	eef1 7a67 	vneg.f32	s15, s15
 800c986:	edc4 7a01 	vstr	s15, [r4, #4]
 800c98a:	e779      	b.n	800c880 <__ieee754_rem_pio2f+0x130>
 800c98c:	2303      	movs	r3, #3
 800c98e:	e7e5      	b.n	800c95c <__ieee754_rem_pio2f+0x20c>
 800c990:	3f490fd8 	.word	0x3f490fd8
 800c994:	4016cbe3 	.word	0x4016cbe3
 800c998:	3fc90f80 	.word	0x3fc90f80
 800c99c:	3fc90fd0 	.word	0x3fc90fd0
 800c9a0:	37354443 	.word	0x37354443
 800c9a4:	37354400 	.word	0x37354400
 800c9a8:	2e85a308 	.word	0x2e85a308
 800c9ac:	43490f80 	.word	0x43490f80
 800c9b0:	3f22f984 	.word	0x3f22f984
 800c9b4:	080141b0 	.word	0x080141b0
 800c9b8:	2e85a300 	.word	0x2e85a300
 800c9bc:	248d3132 	.word	0x248d3132
 800c9c0:	43800000 	.word	0x43800000
 800c9c4:	08014230 	.word	0x08014230

0800c9c8 <__ieee754_sinhf>:
 800c9c8:	b510      	push	{r4, lr}
 800c9ca:	ee10 3a10 	vmov	r3, s0
 800c9ce:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800c9d2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c9d6:	ed2d 8b02 	vpush	{d8}
 800c9da:	eef0 7a40 	vmov.f32	s15, s0
 800c9de:	db06      	blt.n	800c9ee <__ieee754_sinhf+0x26>
 800c9e0:	ee70 7a00 	vadd.f32	s15, s0, s0
 800c9e4:	ecbd 8b02 	vpop	{d8}
 800c9e8:	eeb0 0a67 	vmov.f32	s0, s15
 800c9ec:	bd10      	pop	{r4, pc}
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	4b29      	ldr	r3, [pc, #164]	; (800ca98 <__ieee754_sinhf+0xd0>)
 800c9f2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800c9f6:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800c9fa:	fe28 8a88 	vselge.f32	s16, s17, s16
 800c9fe:	429c      	cmp	r4, r3
 800ca00:	dc2c      	bgt.n	800ca5c <__ieee754_sinhf+0x94>
 800ca02:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800ca06:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ca0a:	da08      	bge.n	800ca1e <__ieee754_sinhf+0x56>
 800ca0c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800ca9c <__ieee754_sinhf+0xd4>
 800ca10:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ca14:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800ca18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca1c:	dce2      	bgt.n	800c9e4 <__ieee754_sinhf+0x1c>
 800ca1e:	eeb0 0a67 	vmov.f32	s0, s15
 800ca22:	f7ff fc59 	bl	800c2d8 <fabsf>
 800ca26:	f000 fb95 	bl	800d154 <expm1f>
 800ca2a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ca2e:	da0c      	bge.n	800ca4a <__ieee754_sinhf+0x82>
 800ca30:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ca34:	ee70 8a28 	vadd.f32	s17, s0, s17
 800ca38:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 800ca3c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800ca40:	ee90 7a27 	vfnms.f32	s14, s0, s15
 800ca44:	ee67 7a08 	vmul.f32	s15, s14, s16
 800ca48:	e7cc      	b.n	800c9e4 <__ieee754_sinhf+0x1c>
 800ca4a:	ee70 8a28 	vadd.f32	s17, s0, s17
 800ca4e:	ee80 7a28 	vdiv.f32	s14, s0, s17
 800ca52:	ee77 7a00 	vadd.f32	s15, s14, s0
 800ca56:	ee67 7a88 	vmul.f32	s15, s15, s16
 800ca5a:	e7c3      	b.n	800c9e4 <__ieee754_sinhf+0x1c>
 800ca5c:	4b10      	ldr	r3, [pc, #64]	; (800caa0 <__ieee754_sinhf+0xd8>)
 800ca5e:	429c      	cmp	r4, r3
 800ca60:	dc06      	bgt.n	800ca70 <__ieee754_sinhf+0xa8>
 800ca62:	f7ff fc39 	bl	800c2d8 <fabsf>
 800ca66:	f7ff fbc3 	bl	800c1f0 <expf>
 800ca6a:	ee60 7a08 	vmul.f32	s15, s0, s16
 800ca6e:	e7b9      	b.n	800c9e4 <__ieee754_sinhf+0x1c>
 800ca70:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <__ieee754_sinhf+0xdc>)
 800ca72:	429c      	cmp	r4, r3
 800ca74:	dc0a      	bgt.n	800ca8c <__ieee754_sinhf+0xc4>
 800ca76:	f7ff fc2f 	bl	800c2d8 <fabsf>
 800ca7a:	ee20 0a28 	vmul.f32	s0, s0, s17
 800ca7e:	f7ff fbb7 	bl	800c1f0 <expf>
 800ca82:	ee68 7a00 	vmul.f32	s15, s16, s0
 800ca86:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ca8a:	e7ab      	b.n	800c9e4 <__ieee754_sinhf+0x1c>
 800ca8c:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800ca9c <__ieee754_sinhf+0xd4>
 800ca90:	ee60 7a07 	vmul.f32	s15, s0, s14
 800ca94:	e7a6      	b.n	800c9e4 <__ieee754_sinhf+0x1c>
 800ca96:	bf00      	nop
 800ca98:	41afffff 	.word	0x41afffff
 800ca9c:	7cf0bdc2 	.word	0x7cf0bdc2
 800caa0:	42b17217 	.word	0x42b17217
 800caa4:	42b2d4fc 	.word	0x42b2d4fc

0800caa8 <__kernel_rem_pio2f>:
 800caa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caac:	ed2d 8b04 	vpush	{d8-d9}
 800cab0:	b0d9      	sub	sp, #356	; 0x164
 800cab2:	4688      	mov	r8, r1
 800cab4:	9002      	str	r0, [sp, #8]
 800cab6:	49bb      	ldr	r1, [pc, #748]	; (800cda4 <__kernel_rem_pio2f+0x2fc>)
 800cab8:	9866      	ldr	r0, [sp, #408]	; 0x198
 800caba:	9301      	str	r3, [sp, #4]
 800cabc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800cac0:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800cac4:	1e59      	subs	r1, r3, #1
 800cac6:	1d13      	adds	r3, r2, #4
 800cac8:	db27      	blt.n	800cb1a <__kernel_rem_pio2f+0x72>
 800caca:	f1b2 0b03 	subs.w	fp, r2, #3
 800cace:	bf48      	it	mi
 800cad0:	f102 0b04 	addmi.w	fp, r2, #4
 800cad4:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800cad8:	1c45      	adds	r5, r0, #1
 800cada:	00ec      	lsls	r4, r5, #3
 800cadc:	1a47      	subs	r7, r0, r1
 800cade:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800cae2:	9403      	str	r4, [sp, #12]
 800cae4:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800cae8:	eb0a 0c01 	add.w	ip, sl, r1
 800caec:	ae1c      	add	r6, sp, #112	; 0x70
 800caee:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800caf2:	2400      	movs	r4, #0
 800caf4:	4564      	cmp	r4, ip
 800caf6:	dd12      	ble.n	800cb1e <__kernel_rem_pio2f+0x76>
 800caf8:	9b01      	ldr	r3, [sp, #4]
 800cafa:	ac1c      	add	r4, sp, #112	; 0x70
 800cafc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800cb00:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800cb04:	f04f 0c00 	mov.w	ip, #0
 800cb08:	45d4      	cmp	ip, sl
 800cb0a:	dc27      	bgt.n	800cb5c <__kernel_rem_pio2f+0xb4>
 800cb0c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800cb10:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800cb14:	4627      	mov	r7, r4
 800cb16:	2600      	movs	r6, #0
 800cb18:	e016      	b.n	800cb48 <__kernel_rem_pio2f+0xa0>
 800cb1a:	2000      	movs	r0, #0
 800cb1c:	e7dc      	b.n	800cad8 <__kernel_rem_pio2f+0x30>
 800cb1e:	42e7      	cmn	r7, r4
 800cb20:	bf5d      	ittte	pl
 800cb22:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800cb26:	ee07 3a90 	vmovpl	s15, r3
 800cb2a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800cb2e:	eef0 7a47 	vmovmi.f32	s15, s14
 800cb32:	ece6 7a01 	vstmia	r6!, {s15}
 800cb36:	3401      	adds	r4, #1
 800cb38:	e7dc      	b.n	800caf4 <__kernel_rem_pio2f+0x4c>
 800cb3a:	ecf9 6a01 	vldmia	r9!, {s13}
 800cb3e:	ed97 7a00 	vldr	s14, [r7]
 800cb42:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cb46:	3601      	adds	r6, #1
 800cb48:	428e      	cmp	r6, r1
 800cb4a:	f1a7 0704 	sub.w	r7, r7, #4
 800cb4e:	ddf4      	ble.n	800cb3a <__kernel_rem_pio2f+0x92>
 800cb50:	eceb 7a01 	vstmia	fp!, {s15}
 800cb54:	f10c 0c01 	add.w	ip, ip, #1
 800cb58:	3404      	adds	r4, #4
 800cb5a:	e7d5      	b.n	800cb08 <__kernel_rem_pio2f+0x60>
 800cb5c:	ab08      	add	r3, sp, #32
 800cb5e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800cb62:	eddf 8a93 	vldr	s17, [pc, #588]	; 800cdb0 <__kernel_rem_pio2f+0x308>
 800cb66:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800cdac <__kernel_rem_pio2f+0x304>
 800cb6a:	9304      	str	r3, [sp, #16]
 800cb6c:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800cb70:	4656      	mov	r6, sl
 800cb72:	00b3      	lsls	r3, r6, #2
 800cb74:	9305      	str	r3, [sp, #20]
 800cb76:	ab58      	add	r3, sp, #352	; 0x160
 800cb78:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cb7c:	ac08      	add	r4, sp, #32
 800cb7e:	ab44      	add	r3, sp, #272	; 0x110
 800cb80:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800cb84:	46a4      	mov	ip, r4
 800cb86:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800cb8a:	4637      	mov	r7, r6
 800cb8c:	2f00      	cmp	r7, #0
 800cb8e:	f1a0 0004 	sub.w	r0, r0, #4
 800cb92:	dc4f      	bgt.n	800cc34 <__kernel_rem_pio2f+0x18c>
 800cb94:	4628      	mov	r0, r5
 800cb96:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800cb9a:	f000 fc45 	bl	800d428 <scalbnf>
 800cb9e:	eeb0 8a40 	vmov.f32	s16, s0
 800cba2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800cba6:	ee28 0a00 	vmul.f32	s0, s16, s0
 800cbaa:	f000 fbfb 	bl	800d3a4 <floorf>
 800cbae:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800cbb2:	eea0 8a67 	vfms.f32	s16, s0, s15
 800cbb6:	2d00      	cmp	r5, #0
 800cbb8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800cbbc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800cbc0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800cbc4:	ee17 9a90 	vmov	r9, s15
 800cbc8:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cbcc:	dd44      	ble.n	800cc58 <__kernel_rem_pio2f+0x1b0>
 800cbce:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800cbd2:	ab08      	add	r3, sp, #32
 800cbd4:	f1c5 0e08 	rsb	lr, r5, #8
 800cbd8:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800cbdc:	fa47 f00e 	asr.w	r0, r7, lr
 800cbe0:	4481      	add	r9, r0
 800cbe2:	fa00 f00e 	lsl.w	r0, r0, lr
 800cbe6:	1a3f      	subs	r7, r7, r0
 800cbe8:	f1c5 0007 	rsb	r0, r5, #7
 800cbec:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800cbf0:	4107      	asrs	r7, r0
 800cbf2:	2f00      	cmp	r7, #0
 800cbf4:	dd3f      	ble.n	800cc76 <__kernel_rem_pio2f+0x1ce>
 800cbf6:	f04f 0e00 	mov.w	lr, #0
 800cbfa:	f109 0901 	add.w	r9, r9, #1
 800cbfe:	4673      	mov	r3, lr
 800cc00:	4576      	cmp	r6, lr
 800cc02:	dc6b      	bgt.n	800ccdc <__kernel_rem_pio2f+0x234>
 800cc04:	2d00      	cmp	r5, #0
 800cc06:	dd04      	ble.n	800cc12 <__kernel_rem_pio2f+0x16a>
 800cc08:	2d01      	cmp	r5, #1
 800cc0a:	d078      	beq.n	800ccfe <__kernel_rem_pio2f+0x256>
 800cc0c:	2d02      	cmp	r5, #2
 800cc0e:	f000 8081 	beq.w	800cd14 <__kernel_rem_pio2f+0x26c>
 800cc12:	2f02      	cmp	r7, #2
 800cc14:	d12f      	bne.n	800cc76 <__kernel_rem_pio2f+0x1ce>
 800cc16:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cc1a:	ee30 8a48 	vsub.f32	s16, s0, s16
 800cc1e:	b353      	cbz	r3, 800cc76 <__kernel_rem_pio2f+0x1ce>
 800cc20:	4628      	mov	r0, r5
 800cc22:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800cc26:	f000 fbff 	bl	800d428 <scalbnf>
 800cc2a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800cc2e:	ee38 8a40 	vsub.f32	s16, s16, s0
 800cc32:	e020      	b.n	800cc76 <__kernel_rem_pio2f+0x1ce>
 800cc34:	ee60 7a28 	vmul.f32	s15, s0, s17
 800cc38:	3f01      	subs	r7, #1
 800cc3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cc3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cc42:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800cc46:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cc4a:	ecac 0a01 	vstmia	ip!, {s0}
 800cc4e:	ed90 0a00 	vldr	s0, [r0]
 800cc52:	ee37 0a80 	vadd.f32	s0, s15, s0
 800cc56:	e799      	b.n	800cb8c <__kernel_rem_pio2f+0xe4>
 800cc58:	d105      	bne.n	800cc66 <__kernel_rem_pio2f+0x1be>
 800cc5a:	1e70      	subs	r0, r6, #1
 800cc5c:	ab08      	add	r3, sp, #32
 800cc5e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800cc62:	11ff      	asrs	r7, r7, #7
 800cc64:	e7c5      	b.n	800cbf2 <__kernel_rem_pio2f+0x14a>
 800cc66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cc6a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800cc6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc72:	da31      	bge.n	800ccd8 <__kernel_rem_pio2f+0x230>
 800cc74:	2700      	movs	r7, #0
 800cc76:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800cc7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cc7e:	f040 809b 	bne.w	800cdb8 <__kernel_rem_pio2f+0x310>
 800cc82:	1e74      	subs	r4, r6, #1
 800cc84:	46a4      	mov	ip, r4
 800cc86:	2000      	movs	r0, #0
 800cc88:	45d4      	cmp	ip, sl
 800cc8a:	da4a      	bge.n	800cd22 <__kernel_rem_pio2f+0x27a>
 800cc8c:	2800      	cmp	r0, #0
 800cc8e:	d07a      	beq.n	800cd86 <__kernel_rem_pio2f+0x2de>
 800cc90:	ab08      	add	r3, sp, #32
 800cc92:	3d08      	subs	r5, #8
 800cc94:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	f000 8081 	beq.w	800cda0 <__kernel_rem_pio2f+0x2f8>
 800cc9e:	4628      	mov	r0, r5
 800cca0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800cca4:	00a5      	lsls	r5, r4, #2
 800cca6:	f000 fbbf 	bl	800d428 <scalbnf>
 800ccaa:	aa44      	add	r2, sp, #272	; 0x110
 800ccac:	1d2b      	adds	r3, r5, #4
 800ccae:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800cdb0 <__kernel_rem_pio2f+0x308>
 800ccb2:	18d1      	adds	r1, r2, r3
 800ccb4:	4622      	mov	r2, r4
 800ccb6:	2a00      	cmp	r2, #0
 800ccb8:	f280 80ae 	bge.w	800ce18 <__kernel_rem_pio2f+0x370>
 800ccbc:	4622      	mov	r2, r4
 800ccbe:	2a00      	cmp	r2, #0
 800ccc0:	f2c0 80cc 	blt.w	800ce5c <__kernel_rem_pio2f+0x3b4>
 800ccc4:	a944      	add	r1, sp, #272	; 0x110
 800ccc6:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800ccca:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800cda8 <__kernel_rem_pio2f+0x300>
 800ccce:	eddf 7a39 	vldr	s15, [pc, #228]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800ccd2:	2000      	movs	r0, #0
 800ccd4:	1aa1      	subs	r1, r4, r2
 800ccd6:	e0b6      	b.n	800ce46 <__kernel_rem_pio2f+0x39e>
 800ccd8:	2702      	movs	r7, #2
 800ccda:	e78c      	b.n	800cbf6 <__kernel_rem_pio2f+0x14e>
 800ccdc:	6820      	ldr	r0, [r4, #0]
 800ccde:	b94b      	cbnz	r3, 800ccf4 <__kernel_rem_pio2f+0x24c>
 800cce0:	b118      	cbz	r0, 800ccea <__kernel_rem_pio2f+0x242>
 800cce2:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800cce6:	6020      	str	r0, [r4, #0]
 800cce8:	2001      	movs	r0, #1
 800ccea:	f10e 0e01 	add.w	lr, lr, #1
 800ccee:	3404      	adds	r4, #4
 800ccf0:	4603      	mov	r3, r0
 800ccf2:	e785      	b.n	800cc00 <__kernel_rem_pio2f+0x158>
 800ccf4:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800ccf8:	6020      	str	r0, [r4, #0]
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	e7f5      	b.n	800ccea <__kernel_rem_pio2f+0x242>
 800ccfe:	1e74      	subs	r4, r6, #1
 800cd00:	a808      	add	r0, sp, #32
 800cd02:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cd06:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800cd0a:	f10d 0c20 	add.w	ip, sp, #32
 800cd0e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800cd12:	e77e      	b.n	800cc12 <__kernel_rem_pio2f+0x16a>
 800cd14:	1e74      	subs	r4, r6, #1
 800cd16:	a808      	add	r0, sp, #32
 800cd18:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800cd1c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800cd20:	e7f3      	b.n	800cd0a <__kernel_rem_pio2f+0x262>
 800cd22:	ab08      	add	r3, sp, #32
 800cd24:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800cd28:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 800cd2c:	4318      	orrs	r0, r3
 800cd2e:	e7ab      	b.n	800cc88 <__kernel_rem_pio2f+0x1e0>
 800cd30:	f10c 0c01 	add.w	ip, ip, #1
 800cd34:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800cd38:	2c00      	cmp	r4, #0
 800cd3a:	d0f9      	beq.n	800cd30 <__kernel_rem_pio2f+0x288>
 800cd3c:	9b05      	ldr	r3, [sp, #20]
 800cd3e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800cd42:	eb0d 0003 	add.w	r0, sp, r3
 800cd46:	9b01      	ldr	r3, [sp, #4]
 800cd48:	18f4      	adds	r4, r6, r3
 800cd4a:	ab1c      	add	r3, sp, #112	; 0x70
 800cd4c:	1c77      	adds	r7, r6, #1
 800cd4e:	384c      	subs	r0, #76	; 0x4c
 800cd50:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cd54:	4466      	add	r6, ip
 800cd56:	42be      	cmp	r6, r7
 800cd58:	f6ff af0b 	blt.w	800cb72 <__kernel_rem_pio2f+0xca>
 800cd5c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800cd60:	f8dd e008 	ldr.w	lr, [sp, #8]
 800cd64:	ee07 3a90 	vmov	s15, r3
 800cd68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd6c:	f04f 0c00 	mov.w	ip, #0
 800cd70:	ece4 7a01 	vstmia	r4!, {s15}
 800cd74:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800cd78:	46a1      	mov	r9, r4
 800cd7a:	458c      	cmp	ip, r1
 800cd7c:	dd07      	ble.n	800cd8e <__kernel_rem_pio2f+0x2e6>
 800cd7e:	ece0 7a01 	vstmia	r0!, {s15}
 800cd82:	3701      	adds	r7, #1
 800cd84:	e7e7      	b.n	800cd56 <__kernel_rem_pio2f+0x2ae>
 800cd86:	9804      	ldr	r0, [sp, #16]
 800cd88:	f04f 0c01 	mov.w	ip, #1
 800cd8c:	e7d2      	b.n	800cd34 <__kernel_rem_pio2f+0x28c>
 800cd8e:	ecfe 6a01 	vldmia	lr!, {s13}
 800cd92:	ed39 7a01 	vldmdb	r9!, {s14}
 800cd96:	f10c 0c01 	add.w	ip, ip, #1
 800cd9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cd9e:	e7ec      	b.n	800cd7a <__kernel_rem_pio2f+0x2d2>
 800cda0:	3c01      	subs	r4, #1
 800cda2:	e775      	b.n	800cc90 <__kernel_rem_pio2f+0x1e8>
 800cda4:	08014574 	.word	0x08014574
 800cda8:	08014548 	.word	0x08014548
 800cdac:	43800000 	.word	0x43800000
 800cdb0:	3b800000 	.word	0x3b800000
 800cdb4:	00000000 	.word	0x00000000
 800cdb8:	9b03      	ldr	r3, [sp, #12]
 800cdba:	eeb0 0a48 	vmov.f32	s0, s16
 800cdbe:	1a98      	subs	r0, r3, r2
 800cdc0:	f000 fb32 	bl	800d428 <scalbnf>
 800cdc4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800cdac <__kernel_rem_pio2f+0x304>
 800cdc8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800cdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cdd0:	db19      	blt.n	800ce06 <__kernel_rem_pio2f+0x35e>
 800cdd2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800cdb0 <__kernel_rem_pio2f+0x308>
 800cdd6:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cdda:	aa08      	add	r2, sp, #32
 800cddc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cde0:	1c74      	adds	r4, r6, #1
 800cde2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cde6:	3508      	adds	r5, #8
 800cde8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cdec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cdf0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cdf4:	ee10 3a10 	vmov	r3, s0
 800cdf8:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800cdfc:	ee17 3a90 	vmov	r3, s15
 800ce00:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ce04:	e74b      	b.n	800cc9e <__kernel_rem_pio2f+0x1f6>
 800ce06:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ce0a:	aa08      	add	r2, sp, #32
 800ce0c:	ee10 3a10 	vmov	r3, s0
 800ce10:	4634      	mov	r4, r6
 800ce12:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ce16:	e742      	b.n	800cc9e <__kernel_rem_pio2f+0x1f6>
 800ce18:	a808      	add	r0, sp, #32
 800ce1a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ce1e:	9001      	str	r0, [sp, #4]
 800ce20:	ee07 0a90 	vmov	s15, r0
 800ce24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ce28:	3a01      	subs	r2, #1
 800ce2a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ce2e:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ce32:	ed61 7a01 	vstmdb	r1!, {s15}
 800ce36:	e73e      	b.n	800ccb6 <__kernel_rem_pio2f+0x20e>
 800ce38:	ecfc 6a01 	vldmia	ip!, {s13}
 800ce3c:	ecb6 7a01 	vldmia	r6!, {s14}
 800ce40:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ce44:	3001      	adds	r0, #1
 800ce46:	4550      	cmp	r0, sl
 800ce48:	dc01      	bgt.n	800ce4e <__kernel_rem_pio2f+0x3a6>
 800ce4a:	4288      	cmp	r0, r1
 800ce4c:	ddf4      	ble.n	800ce38 <__kernel_rem_pio2f+0x390>
 800ce4e:	a858      	add	r0, sp, #352	; 0x160
 800ce50:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ce54:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800ce58:	3a01      	subs	r2, #1
 800ce5a:	e730      	b.n	800ccbe <__kernel_rem_pio2f+0x216>
 800ce5c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800ce5e:	2a02      	cmp	r2, #2
 800ce60:	dc09      	bgt.n	800ce76 <__kernel_rem_pio2f+0x3ce>
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	dc2a      	bgt.n	800cebc <__kernel_rem_pio2f+0x414>
 800ce66:	d043      	beq.n	800cef0 <__kernel_rem_pio2f+0x448>
 800ce68:	f009 0007 	and.w	r0, r9, #7
 800ce6c:	b059      	add	sp, #356	; 0x164
 800ce6e:	ecbd 8b04 	vpop	{d8-d9}
 800ce72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce76:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	d1f5      	bne.n	800ce68 <__kernel_rem_pio2f+0x3c0>
 800ce7c:	ab30      	add	r3, sp, #192	; 0xc0
 800ce7e:	442b      	add	r3, r5
 800ce80:	461a      	mov	r2, r3
 800ce82:	4619      	mov	r1, r3
 800ce84:	4620      	mov	r0, r4
 800ce86:	2800      	cmp	r0, #0
 800ce88:	f1a1 0104 	sub.w	r1, r1, #4
 800ce8c:	dc51      	bgt.n	800cf32 <__kernel_rem_pio2f+0x48a>
 800ce8e:	4621      	mov	r1, r4
 800ce90:	2901      	cmp	r1, #1
 800ce92:	f1a2 0204 	sub.w	r2, r2, #4
 800ce96:	dc5c      	bgt.n	800cf52 <__kernel_rem_pio2f+0x4aa>
 800ce98:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	2c01      	cmp	r4, #1
 800cea0:	dc67      	bgt.n	800cf72 <__kernel_rem_pio2f+0x4ca>
 800cea2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800cea6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800ceaa:	2f00      	cmp	r7, #0
 800ceac:	d167      	bne.n	800cf7e <__kernel_rem_pio2f+0x4d6>
 800ceae:	edc8 6a00 	vstr	s13, [r8]
 800ceb2:	ed88 7a01 	vstr	s14, [r8, #4]
 800ceb6:	edc8 7a02 	vstr	s15, [r8, #8]
 800ceba:	e7d5      	b.n	800ce68 <__kernel_rem_pio2f+0x3c0>
 800cebc:	aa30      	add	r2, sp, #192	; 0xc0
 800cebe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800cec2:	4413      	add	r3, r2
 800cec4:	4622      	mov	r2, r4
 800cec6:	2a00      	cmp	r2, #0
 800cec8:	da24      	bge.n	800cf14 <__kernel_rem_pio2f+0x46c>
 800ceca:	b34f      	cbz	r7, 800cf20 <__kernel_rem_pio2f+0x478>
 800cecc:	eef1 7a47 	vneg.f32	s15, s14
 800ced0:	edc8 7a00 	vstr	s15, [r8]
 800ced4:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800ced8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cedc:	aa31      	add	r2, sp, #196	; 0xc4
 800cede:	2301      	movs	r3, #1
 800cee0:	429c      	cmp	r4, r3
 800cee2:	da20      	bge.n	800cf26 <__kernel_rem_pio2f+0x47e>
 800cee4:	b10f      	cbz	r7, 800ceea <__kernel_rem_pio2f+0x442>
 800cee6:	eef1 7a67 	vneg.f32	s15, s15
 800ceea:	edc8 7a01 	vstr	s15, [r8, #4]
 800ceee:	e7bb      	b.n	800ce68 <__kernel_rem_pio2f+0x3c0>
 800cef0:	aa30      	add	r2, sp, #192	; 0xc0
 800cef2:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800cdb4 <__kernel_rem_pio2f+0x30c>
 800cef6:	4413      	add	r3, r2
 800cef8:	2c00      	cmp	r4, #0
 800cefa:	da05      	bge.n	800cf08 <__kernel_rem_pio2f+0x460>
 800cefc:	b10f      	cbz	r7, 800cf02 <__kernel_rem_pio2f+0x45a>
 800cefe:	eef1 7a67 	vneg.f32	s15, s15
 800cf02:	edc8 7a00 	vstr	s15, [r8]
 800cf06:	e7af      	b.n	800ce68 <__kernel_rem_pio2f+0x3c0>
 800cf08:	ed33 7a01 	vldmdb	r3!, {s14}
 800cf0c:	3c01      	subs	r4, #1
 800cf0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf12:	e7f1      	b.n	800cef8 <__kernel_rem_pio2f+0x450>
 800cf14:	ed73 7a01 	vldmdb	r3!, {s15}
 800cf18:	3a01      	subs	r2, #1
 800cf1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cf1e:	e7d2      	b.n	800cec6 <__kernel_rem_pio2f+0x41e>
 800cf20:	eef0 7a47 	vmov.f32	s15, s14
 800cf24:	e7d4      	b.n	800ced0 <__kernel_rem_pio2f+0x428>
 800cf26:	ecb2 7a01 	vldmia	r2!, {s14}
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf30:	e7d6      	b.n	800cee0 <__kernel_rem_pio2f+0x438>
 800cf32:	edd1 7a00 	vldr	s15, [r1]
 800cf36:	edd1 6a01 	vldr	s13, [r1, #4]
 800cf3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf3e:	3801      	subs	r0, #1
 800cf40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf44:	ed81 7a00 	vstr	s14, [r1]
 800cf48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf4c:	edc1 7a01 	vstr	s15, [r1, #4]
 800cf50:	e799      	b.n	800ce86 <__kernel_rem_pio2f+0x3de>
 800cf52:	edd2 7a00 	vldr	s15, [r2]
 800cf56:	edd2 6a01 	vldr	s13, [r2, #4]
 800cf5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cf5e:	3901      	subs	r1, #1
 800cf60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cf64:	ed82 7a00 	vstr	s14, [r2]
 800cf68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf6c:	edc2 7a01 	vstr	s15, [r2, #4]
 800cf70:	e78e      	b.n	800ce90 <__kernel_rem_pio2f+0x3e8>
 800cf72:	ed33 7a01 	vldmdb	r3!, {s14}
 800cf76:	3c01      	subs	r4, #1
 800cf78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cf7c:	e78f      	b.n	800ce9e <__kernel_rem_pio2f+0x3f6>
 800cf7e:	eef1 6a66 	vneg.f32	s13, s13
 800cf82:	eeb1 7a47 	vneg.f32	s14, s14
 800cf86:	edc8 6a00 	vstr	s13, [r8]
 800cf8a:	ed88 7a01 	vstr	s14, [r8, #4]
 800cf8e:	eef1 7a67 	vneg.f32	s15, s15
 800cf92:	e790      	b.n	800ceb6 <__kernel_rem_pio2f+0x40e>

0800cf94 <__kernel_tanf>:
 800cf94:	b508      	push	{r3, lr}
 800cf96:	ee10 3a10 	vmov	r3, s0
 800cf9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cf9e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800cfa2:	eef0 7a40 	vmov.f32	s15, s0
 800cfa6:	da17      	bge.n	800cfd8 <__kernel_tanf+0x44>
 800cfa8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800cfac:	ee17 1a10 	vmov	r1, s14
 800cfb0:	bb41      	cbnz	r1, 800d004 <__kernel_tanf+0x70>
 800cfb2:	1c43      	adds	r3, r0, #1
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	d108      	bne.n	800cfca <__kernel_tanf+0x36>
 800cfb8:	f7ff f98e 	bl	800c2d8 <fabsf>
 800cfbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cfc0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cfc4:	eeb0 0a67 	vmov.f32	s0, s15
 800cfc8:	bd08      	pop	{r3, pc}
 800cfca:	2801      	cmp	r0, #1
 800cfcc:	d0fa      	beq.n	800cfc4 <__kernel_tanf+0x30>
 800cfce:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800cfd2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800cfd6:	e7f5      	b.n	800cfc4 <__kernel_tanf+0x30>
 800cfd8:	494c      	ldr	r1, [pc, #304]	; (800d10c <__kernel_tanf+0x178>)
 800cfda:	428a      	cmp	r2, r1
 800cfdc:	db12      	blt.n	800d004 <__kernel_tanf+0x70>
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	bfb8      	it	lt
 800cfe2:	eef1 7a40 	vneglt.f32	s15, s0
 800cfe6:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 800d110 <__kernel_tanf+0x17c>
 800cfea:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cfee:	ed9f 0a49 	vldr	s0, [pc, #292]	; 800d114 <__kernel_tanf+0x180>
 800cff2:	bfb8      	it	lt
 800cff4:	eef1 0a60 	vneglt.f32	s1, s1
 800cff8:	ee70 0a60 	vsub.f32	s1, s0, s1
 800cffc:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800d000:	eddf 0a45 	vldr	s1, [pc, #276]	; 800d118 <__kernel_tanf+0x184>
 800d004:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d11c <__kernel_tanf+0x188>
 800d008:	ed9f 6a45 	vldr	s12, [pc, #276]	; 800d120 <__kernel_tanf+0x18c>
 800d00c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800d124 <__kernel_tanf+0x190>
 800d010:	493e      	ldr	r1, [pc, #248]	; (800d10c <__kernel_tanf+0x178>)
 800d012:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800d016:	428a      	cmp	r2, r1
 800d018:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800d01c:	eea7 6a25 	vfma.f32	s12, s14, s11
 800d020:	eddf 5a41 	vldr	s11, [pc, #260]	; 800d128 <__kernel_tanf+0x194>
 800d024:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d028:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800d12c <__kernel_tanf+0x198>
 800d02c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d030:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d130 <__kernel_tanf+0x19c>
 800d034:	eee6 5a07 	vfma.f32	s11, s12, s14
 800d038:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800d134 <__kernel_tanf+0x1a0>
 800d03c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800d040:	eddf 5a3d 	vldr	s11, [pc, #244]	; 800d138 <__kernel_tanf+0x1a4>
 800d044:	eee7 5a05 	vfma.f32	s11, s14, s10
 800d048:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800d13c <__kernel_tanf+0x1a8>
 800d04c:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d050:	eddf 5a3b 	vldr	s11, [pc, #236]	; 800d140 <__kernel_tanf+0x1ac>
 800d054:	eee5 5a07 	vfma.f32	s11, s10, s14
 800d058:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800d144 <__kernel_tanf+0x1b0>
 800d05c:	eea5 5a87 	vfma.f32	s10, s11, s14
 800d060:	eddf 5a39 	vldr	s11, [pc, #228]	; 800d148 <__kernel_tanf+0x1b4>
 800d064:	eee5 5a07 	vfma.f32	s11, s10, s14
 800d068:	eeb0 7a46 	vmov.f32	s14, s12
 800d06c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800d070:	ee27 5aa6 	vmul.f32	s10, s15, s13
 800d074:	eeb0 6a60 	vmov.f32	s12, s1
 800d078:	eea7 6a05 	vfma.f32	s12, s14, s10
 800d07c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800d14c <__kernel_tanf+0x1b8>
 800d080:	eee6 0a26 	vfma.f32	s1, s12, s13
 800d084:	eee5 0a07 	vfma.f32	s1, s10, s14
 800d088:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d08c:	db1d      	blt.n	800d0ca <__kernel_tanf+0x136>
 800d08e:	ee06 0a90 	vmov	s13, r0
 800d092:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 800d096:	ee27 6a07 	vmul.f32	s12, s14, s14
 800d09a:	ee37 7a00 	vadd.f32	s14, s14, s0
 800d09e:	179b      	asrs	r3, r3, #30
 800d0a0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800d0a4:	f003 0302 	and.w	r3, r3, #2
 800d0a8:	f1c3 0301 	rsb	r3, r3, #1
 800d0ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800d0b0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 800d0b4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d0b8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800d0bc:	ee07 3a90 	vmov	s15, r3
 800d0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d0c4:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d0c8:	e77c      	b.n	800cfc4 <__kernel_tanf+0x30>
 800d0ca:	2801      	cmp	r0, #1
 800d0cc:	d01b      	beq.n	800d106 <__kernel_tanf+0x172>
 800d0ce:	4b20      	ldr	r3, [pc, #128]	; (800d150 <__kernel_tanf+0x1bc>)
 800d0d0:	ee17 2a10 	vmov	r2, s14
 800d0d4:	401a      	ands	r2, r3
 800d0d6:	ee06 2a10 	vmov	s12, r2
 800d0da:	ee76 7a67 	vsub.f32	s15, s12, s15
 800d0de:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d0e2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d0e6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800d0ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ee:	ee16 2a90 	vmov	r2, s13
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	ee07 3a90 	vmov	s15, r3
 800d0f8:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d0fc:	eea0 7aa7 	vfma.f32	s14, s1, s15
 800d100:	eee7 7a26 	vfma.f32	s15, s14, s13
 800d104:	e75e      	b.n	800cfc4 <__kernel_tanf+0x30>
 800d106:	eef0 7a47 	vmov.f32	s15, s14
 800d10a:	e75b      	b.n	800cfc4 <__kernel_tanf+0x30>
 800d10c:	3f2ca140 	.word	0x3f2ca140
 800d110:	3f490fda 	.word	0x3f490fda
 800d114:	33222168 	.word	0x33222168
 800d118:	00000000 	.word	0x00000000
 800d11c:	b79bae5f 	.word	0xb79bae5f
 800d120:	38a3f445 	.word	0x38a3f445
 800d124:	37d95384 	.word	0x37d95384
 800d128:	3a1a26c8 	.word	0x3a1a26c8
 800d12c:	3b6b6916 	.word	0x3b6b6916
 800d130:	3cb327a4 	.word	0x3cb327a4
 800d134:	3e088889 	.word	0x3e088889
 800d138:	3895c07a 	.word	0x3895c07a
 800d13c:	398137b9 	.word	0x398137b9
 800d140:	3abede48 	.word	0x3abede48
 800d144:	3c11371f 	.word	0x3c11371f
 800d148:	3d5d0dd1 	.word	0x3d5d0dd1
 800d14c:	3eaaaaab 	.word	0x3eaaaaab
 800d150:	fffff000 	.word	0xfffff000

0800d154 <expm1f>:
 800d154:	ee10 2a10 	vmov	r2, s0
 800d158:	497c      	ldr	r1, [pc, #496]	; (800d34c <expm1f+0x1f8>)
 800d15a:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800d15e:	428b      	cmp	r3, r1
 800d160:	d920      	bls.n	800d1a4 <expm1f+0x50>
 800d162:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800d166:	d902      	bls.n	800d16e <expm1f+0x1a>
 800d168:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d16c:	4770      	bx	lr
 800d16e:	d105      	bne.n	800d17c <expm1f+0x28>
 800d170:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800d174:	2a00      	cmp	r2, #0
 800d176:	fe20 0a27 	vselge.f32	s0, s0, s15
 800d17a:	4770      	bx	lr
 800d17c:	2a00      	cmp	r2, #0
 800d17e:	db05      	blt.n	800d18c <expm1f+0x38>
 800d180:	4973      	ldr	r1, [pc, #460]	; (800d350 <expm1f+0x1fc>)
 800d182:	428b      	cmp	r3, r1
 800d184:	d95c      	bls.n	800d240 <expm1f+0xec>
 800d186:	2000      	movs	r0, #0
 800d188:	f7ff b80c 	b.w	800c1a4 <__math_oflowf>
 800d18c:	eddf 7a71 	vldr	s15, [pc, #452]	; 800d354 <expm1f+0x200>
 800d190:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d194:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800d198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d19c:	d550      	bpl.n	800d240 <expm1f+0xec>
 800d19e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d1a2:	4770      	bx	lr
 800d1a4:	496c      	ldr	r1, [pc, #432]	; (800d358 <expm1f+0x204>)
 800d1a6:	428b      	cmp	r3, r1
 800d1a8:	d966      	bls.n	800d278 <expm1f+0x124>
 800d1aa:	496c      	ldr	r1, [pc, #432]	; (800d35c <expm1f+0x208>)
 800d1ac:	428b      	cmp	r3, r1
 800d1ae:	d847      	bhi.n	800d240 <expm1f+0xec>
 800d1b0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 800d360 <expm1f+0x20c>
 800d1b4:	2a00      	cmp	r2, #0
 800d1b6:	bfa7      	ittee	ge
 800d1b8:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800d1bc:	eddf 7a69 	vldrge	s15, [pc, #420]	; 800d364 <expm1f+0x210>
 800d1c0:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 800d368 <expm1f+0x214>
 800d1c4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800d1c8:	bfac      	ite	ge
 800d1ca:	2301      	movge	r3, #1
 800d1cc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800d1d0:	ee37 0a67 	vsub.f32	s0, s14, s15
 800d1d4:	ee37 7a40 	vsub.f32	s14, s14, s0
 800d1d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1dc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800d1e0:	ee20 4a25 	vmul.f32	s8, s0, s11
 800d1e4:	ed9f 6a61 	vldr	s12, [pc, #388]	; 800d36c <expm1f+0x218>
 800d1e8:	eddf 6a61 	vldr	s13, [pc, #388]	; 800d370 <expm1f+0x21c>
 800d1ec:	ed9f 5a61 	vldr	s10, [pc, #388]	; 800d374 <expm1f+0x220>
 800d1f0:	ee20 7a04 	vmul.f32	s14, s0, s8
 800d1f4:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800d1f8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800d1fc:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 800d378 <expm1f+0x224>
 800d200:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d204:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800d37c <expm1f+0x228>
 800d208:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d20c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d210:	eea6 5a87 	vfma.f32	s10, s13, s14
 800d214:	eef0 6a46 	vmov.f32	s13, s12
 800d218:	eee5 6a07 	vfma.f32	s13, s10, s14
 800d21c:	eee4 4a66 	vfms.f32	s9, s8, s13
 800d220:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800d224:	eea0 4a64 	vfms.f32	s8, s0, s9
 800d228:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800d22c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800d230:	ee66 6a87 	vmul.f32	s13, s13, s14
 800d234:	bb73      	cbnz	r3, 800d294 <expm1f+0x140>
 800d236:	eef0 7a47 	vmov.f32	s15, s14
 800d23a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800d23e:	e024      	b.n	800d28a <expm1f+0x136>
 800d240:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800d244:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d248:	2a00      	cmp	r2, #0
 800d24a:	fe67 7a87 	vselge.f32	s15, s15, s14
 800d24e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800d380 <expm1f+0x22c>
 800d252:	eddf 6a43 	vldr	s13, [pc, #268]	; 800d360 <expm1f+0x20c>
 800d256:	ee40 7a07 	vmla.f32	s15, s0, s14
 800d25a:	eeb0 7a40 	vmov.f32	s14, s0
 800d25e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d262:	ee17 3a90 	vmov	r3, s15
 800d266:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d26a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800d26e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d364 <expm1f+0x210>
 800d272:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d276:	e7ab      	b.n	800d1d0 <expm1f+0x7c>
 800d278:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800d27c:	d208      	bcs.n	800d290 <expm1f+0x13c>
 800d27e:	eddf 7a41 	vldr	s15, [pc, #260]	; 800d384 <expm1f+0x230>
 800d282:	ee70 7a27 	vadd.f32	s15, s0, s15
 800d286:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800d28a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d28e:	4770      	bx	lr
 800d290:	2300      	movs	r3, #0
 800d292:	e7a3      	b.n	800d1dc <expm1f+0x88>
 800d294:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800d298:	1c5a      	adds	r2, r3, #1
 800d29a:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800d29e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2a2:	d106      	bne.n	800d2b2 <expm1f+0x15e>
 800d2a4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d2a8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800d2ac:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800d2b0:	4770      	bx	lr
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d118      	bne.n	800d2e8 <expm1f+0x194>
 800d2b6:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800d2ba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800d2be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d2c2:	bf5b      	ittet	pl
 800d2c4:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800d2c8:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800d2cc:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800d2d0:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800d2d4:	bf43      	ittte	mi
 800d2d6:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 800d2da:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800d2de:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800d2e2:	eeb0 0a46 	vmovpl.f32	s0, s12
 800d2e6:	4770      	bx	lr
 800d2e8:	1c5a      	adds	r2, r3, #1
 800d2ea:	2a39      	cmp	r2, #57	; 0x39
 800d2ec:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800d2f0:	d90b      	bls.n	800d30a <expm1f+0x1b6>
 800d2f2:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d2f6:	ee36 0a40 	vsub.f32	s0, s12, s0
 800d2fa:	ee10 3a10 	vmov	r3, s0
 800d2fe:	440b      	add	r3, r1
 800d300:	ee00 3a10 	vmov	s0, r3
 800d304:	ee30 0a46 	vsub.f32	s0, s0, s12
 800d308:	4770      	bx	lr
 800d30a:	2b16      	cmp	r3, #22
 800d30c:	dc11      	bgt.n	800d332 <expm1f+0x1de>
 800d30e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d312:	fa42 f303 	asr.w	r3, r2, r3
 800d316:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800d31a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d326:	ee10 3a10 	vmov	r3, s0
 800d32a:	440b      	add	r3, r1
 800d32c:	ee00 3a10 	vmov	s0, r3
 800d330:	4770      	bx	lr
 800d332:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800d336:	05db      	lsls	r3, r3, #23
 800d338:	ee07 3a10 	vmov	s14, r3
 800d33c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d340:	ee70 7a67 	vsub.f32	s15, s0, s15
 800d344:	ee37 0a86 	vadd.f32	s0, s15, s12
 800d348:	e7ed      	b.n	800d326 <expm1f+0x1d2>
 800d34a:	bf00      	nop
 800d34c:	4195b843 	.word	0x4195b843
 800d350:	42b17217 	.word	0x42b17217
 800d354:	0da24260 	.word	0x0da24260
 800d358:	3eb17218 	.word	0x3eb17218
 800d35c:	3f851591 	.word	0x3f851591
 800d360:	3f317180 	.word	0x3f317180
 800d364:	3717f7d1 	.word	0x3717f7d1
 800d368:	b717f7d1 	.word	0xb717f7d1
 800d36c:	b457edbb 	.word	0xb457edbb
 800d370:	36867e54 	.word	0x36867e54
 800d374:	bd088889 	.word	0xbd088889
 800d378:	b8a670cd 	.word	0xb8a670cd
 800d37c:	3ad00d01 	.word	0x3ad00d01
 800d380:	3fb8aa3b 	.word	0x3fb8aa3b
 800d384:	7149f2ca 	.word	0x7149f2ca

0800d388 <finitef>:
 800d388:	b082      	sub	sp, #8
 800d38a:	ed8d 0a01 	vstr	s0, [sp, #4]
 800d38e:	9801      	ldr	r0, [sp, #4]
 800d390:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d394:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800d398:	bfac      	ite	ge
 800d39a:	2000      	movge	r0, #0
 800d39c:	2001      	movlt	r0, #1
 800d39e:	b002      	add	sp, #8
 800d3a0:	4770      	bx	lr
	...

0800d3a4 <floorf>:
 800d3a4:	ee10 3a10 	vmov	r3, s0
 800d3a8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d3ac:	3a7f      	subs	r2, #127	; 0x7f
 800d3ae:	2a16      	cmp	r2, #22
 800d3b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d3b4:	dc2a      	bgt.n	800d40c <floorf+0x68>
 800d3b6:	2a00      	cmp	r2, #0
 800d3b8:	da11      	bge.n	800d3de <floorf+0x3a>
 800d3ba:	eddf 7a18 	vldr	s15, [pc, #96]	; 800d41c <floorf+0x78>
 800d3be:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d3c2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d3c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3ca:	dd05      	ble.n	800d3d8 <floorf+0x34>
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	da23      	bge.n	800d418 <floorf+0x74>
 800d3d0:	4a13      	ldr	r2, [pc, #76]	; (800d420 <floorf+0x7c>)
 800d3d2:	2900      	cmp	r1, #0
 800d3d4:	bf18      	it	ne
 800d3d6:	4613      	movne	r3, r2
 800d3d8:	ee00 3a10 	vmov	s0, r3
 800d3dc:	4770      	bx	lr
 800d3de:	4911      	ldr	r1, [pc, #68]	; (800d424 <floorf+0x80>)
 800d3e0:	4111      	asrs	r1, r2
 800d3e2:	420b      	tst	r3, r1
 800d3e4:	d0fa      	beq.n	800d3dc <floorf+0x38>
 800d3e6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800d41c <floorf+0x78>
 800d3ea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800d3ee:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800d3f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d3f6:	ddef      	ble.n	800d3d8 <floorf+0x34>
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	bfbe      	ittt	lt
 800d3fc:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800d400:	fa40 f202 	asrlt.w	r2, r0, r2
 800d404:	189b      	addlt	r3, r3, r2
 800d406:	ea23 0301 	bic.w	r3, r3, r1
 800d40a:	e7e5      	b.n	800d3d8 <floorf+0x34>
 800d40c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800d410:	d3e4      	bcc.n	800d3dc <floorf+0x38>
 800d412:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d416:	4770      	bx	lr
 800d418:	2300      	movs	r3, #0
 800d41a:	e7dd      	b.n	800d3d8 <floorf+0x34>
 800d41c:	7149f2ca 	.word	0x7149f2ca
 800d420:	bf800000 	.word	0xbf800000
 800d424:	007fffff 	.word	0x007fffff

0800d428 <scalbnf>:
 800d428:	ee10 3a10 	vmov	r3, s0
 800d42c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800d430:	d024      	beq.n	800d47c <scalbnf+0x54>
 800d432:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800d436:	d302      	bcc.n	800d43e <scalbnf+0x16>
 800d438:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d43c:	4770      	bx	lr
 800d43e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800d442:	d121      	bne.n	800d488 <scalbnf+0x60>
 800d444:	4b29      	ldr	r3, [pc, #164]	; (800d4ec <scalbnf+0xc4>)
 800d446:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800d4f0 <scalbnf+0xc8>
 800d44a:	4298      	cmp	r0, r3
 800d44c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d450:	db15      	blt.n	800d47e <scalbnf+0x56>
 800d452:	ee10 3a10 	vmov	r3, s0
 800d456:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d45a:	3a19      	subs	r2, #25
 800d45c:	4402      	add	r2, r0
 800d45e:	2afe      	cmp	r2, #254	; 0xfe
 800d460:	dd14      	ble.n	800d48c <scalbnf+0x64>
 800d462:	eddf 7a24 	vldr	s15, [pc, #144]	; 800d4f4 <scalbnf+0xcc>
 800d466:	eddf 6a24 	vldr	s13, [pc, #144]	; 800d4f8 <scalbnf+0xd0>
 800d46a:	ee10 3a10 	vmov	r3, s0
 800d46e:	eeb0 7a67 	vmov.f32	s14, s15
 800d472:	2b00      	cmp	r3, #0
 800d474:	fe67 7aa6 	vselge.f32	s15, s15, s13
 800d478:	ee27 0a27 	vmul.f32	s0, s14, s15
 800d47c:	4770      	bx	lr
 800d47e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800d4fc <scalbnf+0xd4>
 800d482:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d486:	4770      	bx	lr
 800d488:	0dd2      	lsrs	r2, r2, #23
 800d48a:	e7e7      	b.n	800d45c <scalbnf+0x34>
 800d48c:	2a00      	cmp	r2, #0
 800d48e:	dd06      	ble.n	800d49e <scalbnf+0x76>
 800d490:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d494:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d498:	ee00 3a10 	vmov	s0, r3
 800d49c:	4770      	bx	lr
 800d49e:	f112 0f16 	cmn.w	r2, #22
 800d4a2:	da19      	bge.n	800d4d8 <scalbnf+0xb0>
 800d4a4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800d4a8:	4298      	cmp	r0, r3
 800d4aa:	ee10 3a10 	vmov	r3, s0
 800d4ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d4b2:	dd09      	ble.n	800d4c8 <scalbnf+0xa0>
 800d4b4:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 800d4f4 <scalbnf+0xcc>
 800d4b8:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800d4f8 <scalbnf+0xd0>
 800d4bc:	eef0 7a40 	vmov.f32	s15, s0
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	fe00 0a07 	vseleq.f32	s0, s0, s14
 800d4c6:	e7dc      	b.n	800d482 <scalbnf+0x5a>
 800d4c8:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800d4fc <scalbnf+0xd4>
 800d4cc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800d500 <scalbnf+0xd8>
 800d4d0:	eef0 7a40 	vmov.f32	s15, s0
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	e7f4      	b.n	800d4c2 <scalbnf+0x9a>
 800d4d8:	3219      	adds	r2, #25
 800d4da:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800d4de:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800d4e2:	eddf 7a08 	vldr	s15, [pc, #32]	; 800d504 <scalbnf+0xdc>
 800d4e6:	ee07 3a10 	vmov	s14, r3
 800d4ea:	e7c5      	b.n	800d478 <scalbnf+0x50>
 800d4ec:	ffff3cb0 	.word	0xffff3cb0
 800d4f0:	4c000000 	.word	0x4c000000
 800d4f4:	7149f2ca 	.word	0x7149f2ca
 800d4f8:	f149f2ca 	.word	0xf149f2ca
 800d4fc:	0da24260 	.word	0x0da24260
 800d500:	8da24260 	.word	0x8da24260
 800d504:	33000000 	.word	0x33000000

0800d508 <_init>:
 800d508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d50a:	bf00      	nop
 800d50c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d50e:	bc08      	pop	{r3}
 800d510:	469e      	mov	lr, r3
 800d512:	4770      	bx	lr

0800d514 <_fini>:
 800d514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d516:	bf00      	nop
 800d518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d51a:	bc08      	pop	{r3}
 800d51c:	469e      	mov	lr, r3
 800d51e:	4770      	bx	lr
