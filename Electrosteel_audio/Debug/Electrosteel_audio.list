
Electrosteel_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f7c8  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00018ee0  0801fa60  0801fa60  0002fa60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08038940  08038940  00050820  2**0
                  CONTENTS
  4 .ARM          00000000  08038940  08038940  00050820  2**0
                  CONTENTS
  5 .preinit_array 00000000  08038940  08038940  00050820  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08038940  08038940  00048940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08038944  08038944  00048944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000820  20000000  08038948  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001960c  20000820  08039168  00050820  2**3
                  ALLOC
 10 ._user_heap_stack 00006004  20019e2c  08039168  00059e2c  2**0
                  ALLOC
 11 .RAM_D1       0007efc0  24000000  24000000  00060000  2**5
                  ALLOC
 12 .RAM_D2       000011e0  30000000  30000000  00060000  2**5
                  ALLOC
 13 .SDRAM        02000000  60000000  60000000  00060000  2**5
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  00050820  2**0
                  CONTENTS, READONLY
 15 .debug_info   000845e3  00000000  00000000  0005084e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00009913  00000000  00000000  000d4e31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0007a024  00000000  00000000  000de744  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 000038c8  00000000  00000000  00158768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000f670  00000000  00000000  0015c030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0005ab4c  00000000  00000000  0016b6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00011a95  00000000  00000000  001c61ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000c5  00000000  00000000  001d7c81  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000c8e4  00000000  00000000  001d7d48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	20000820 	.word	0x20000820
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0801fa48 	.word	0x0801fa48

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	20000824 	.word	0x20000824
 80002d4:	0801fa48 	.word	0x0801fa48

080002d8 <strlen>:
 80002d8:	4603      	mov	r3, r0
 80002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002de:	2a00      	cmp	r2, #0
 80002e0:	d1fb      	bne.n	80002da <strlen+0x2>
 80002e2:	1a18      	subs	r0, r3, r0
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_drsub>:
 80002e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002ec:	e002      	b.n	80002f4 <__adddf3>
 80002ee:	bf00      	nop

080002f0 <__aeabi_dsub>:
 80002f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002f4 <__adddf3>:
 80002f4:	b530      	push	{r4, r5, lr}
 80002f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002fe:	ea94 0f05 	teq	r4, r5
 8000302:	bf08      	it	eq
 8000304:	ea90 0f02 	teqeq	r0, r2
 8000308:	bf1f      	itttt	ne
 800030a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800030e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000312:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000316:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800031a:	f000 80e2 	beq.w	80004e2 <__adddf3+0x1ee>
 800031e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000322:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000326:	bfb8      	it	lt
 8000328:	426d      	neglt	r5, r5
 800032a:	dd0c      	ble.n	8000346 <__adddf3+0x52>
 800032c:	442c      	add	r4, r5
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	ea82 0000 	eor.w	r0, r2, r0
 800033a:	ea83 0101 	eor.w	r1, r3, r1
 800033e:	ea80 0202 	eor.w	r2, r0, r2
 8000342:	ea81 0303 	eor.w	r3, r1, r3
 8000346:	2d36      	cmp	r5, #54	; 0x36
 8000348:	bf88      	it	hi
 800034a:	bd30      	pophi	{r4, r5, pc}
 800034c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000350:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000354:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000358:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800035c:	d002      	beq.n	8000364 <__adddf3+0x70>
 800035e:	4240      	negs	r0, r0
 8000360:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000364:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000368:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800036c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000370:	d002      	beq.n	8000378 <__adddf3+0x84>
 8000372:	4252      	negs	r2, r2
 8000374:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000378:	ea94 0f05 	teq	r4, r5
 800037c:	f000 80a7 	beq.w	80004ce <__adddf3+0x1da>
 8000380:	f1a4 0401 	sub.w	r4, r4, #1
 8000384:	f1d5 0e20 	rsbs	lr, r5, #32
 8000388:	db0d      	blt.n	80003a6 <__adddf3+0xb2>
 800038a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800038e:	fa22 f205 	lsr.w	r2, r2, r5
 8000392:	1880      	adds	r0, r0, r2
 8000394:	f141 0100 	adc.w	r1, r1, #0
 8000398:	fa03 f20e 	lsl.w	r2, r3, lr
 800039c:	1880      	adds	r0, r0, r2
 800039e:	fa43 f305 	asr.w	r3, r3, r5
 80003a2:	4159      	adcs	r1, r3
 80003a4:	e00e      	b.n	80003c4 <__adddf3+0xd0>
 80003a6:	f1a5 0520 	sub.w	r5, r5, #32
 80003aa:	f10e 0e20 	add.w	lr, lr, #32
 80003ae:	2a01      	cmp	r2, #1
 80003b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003b4:	bf28      	it	cs
 80003b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003ba:	fa43 f305 	asr.w	r3, r3, r5
 80003be:	18c0      	adds	r0, r0, r3
 80003c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	d507      	bpl.n	80003da <__adddf3+0xe6>
 80003ca:	f04f 0e00 	mov.w	lr, #0
 80003ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80003d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003de:	d31b      	bcc.n	8000418 <__adddf3+0x124>
 80003e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003e4:	d30c      	bcc.n	8000400 <__adddf3+0x10c>
 80003e6:	0849      	lsrs	r1, r1, #1
 80003e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f0:	f104 0401 	add.w	r4, r4, #1
 80003f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003fc:	f080 809a 	bcs.w	8000534 <__adddf3+0x240>
 8000400:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000404:	bf08      	it	eq
 8000406:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800040a:	f150 0000 	adcs.w	r0, r0, #0
 800040e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000412:	ea41 0105 	orr.w	r1, r1, r5
 8000416:	bd30      	pop	{r4, r5, pc}
 8000418:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800041c:	4140      	adcs	r0, r0
 800041e:	eb41 0101 	adc.w	r1, r1, r1
 8000422:	3c01      	subs	r4, #1
 8000424:	bf28      	it	cs
 8000426:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800042a:	d2e9      	bcs.n	8000400 <__adddf3+0x10c>
 800042c:	f091 0f00 	teq	r1, #0
 8000430:	bf04      	itt	eq
 8000432:	4601      	moveq	r1, r0
 8000434:	2000      	moveq	r0, #0
 8000436:	fab1 f381 	clz	r3, r1
 800043a:	bf08      	it	eq
 800043c:	3320      	addeq	r3, #32
 800043e:	f1a3 030b 	sub.w	r3, r3, #11
 8000442:	f1b3 0220 	subs.w	r2, r3, #32
 8000446:	da0c      	bge.n	8000462 <__adddf3+0x16e>
 8000448:	320c      	adds	r2, #12
 800044a:	dd08      	ble.n	800045e <__adddf3+0x16a>
 800044c:	f102 0c14 	add.w	ip, r2, #20
 8000450:	f1c2 020c 	rsb	r2, r2, #12
 8000454:	fa01 f00c 	lsl.w	r0, r1, ip
 8000458:	fa21 f102 	lsr.w	r1, r1, r2
 800045c:	e00c      	b.n	8000478 <__adddf3+0x184>
 800045e:	f102 0214 	add.w	r2, r2, #20
 8000462:	bfd8      	it	le
 8000464:	f1c2 0c20 	rsble	ip, r2, #32
 8000468:	fa01 f102 	lsl.w	r1, r1, r2
 800046c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000470:	bfdc      	itt	le
 8000472:	ea41 010c 	orrle.w	r1, r1, ip
 8000476:	4090      	lslle	r0, r2
 8000478:	1ae4      	subs	r4, r4, r3
 800047a:	bfa2      	ittt	ge
 800047c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000480:	4329      	orrge	r1, r5
 8000482:	bd30      	popge	{r4, r5, pc}
 8000484:	ea6f 0404 	mvn.w	r4, r4
 8000488:	3c1f      	subs	r4, #31
 800048a:	da1c      	bge.n	80004c6 <__adddf3+0x1d2>
 800048c:	340c      	adds	r4, #12
 800048e:	dc0e      	bgt.n	80004ae <__adddf3+0x1ba>
 8000490:	f104 0414 	add.w	r4, r4, #20
 8000494:	f1c4 0220 	rsb	r2, r4, #32
 8000498:	fa20 f004 	lsr.w	r0, r0, r4
 800049c:	fa01 f302 	lsl.w	r3, r1, r2
 80004a0:	ea40 0003 	orr.w	r0, r0, r3
 80004a4:	fa21 f304 	lsr.w	r3, r1, r4
 80004a8:	ea45 0103 	orr.w	r1, r5, r3
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f1c4 040c 	rsb	r4, r4, #12
 80004b2:	f1c4 0220 	rsb	r2, r4, #32
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 f304 	lsl.w	r3, r1, r4
 80004be:	ea40 0003 	orr.w	r0, r0, r3
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	f094 0f00 	teq	r4, #0
 80004d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004d6:	bf06      	itte	eq
 80004d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004dc:	3401      	addeq	r4, #1
 80004de:	3d01      	subne	r5, #1
 80004e0:	e74e      	b.n	8000380 <__adddf3+0x8c>
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf18      	it	ne
 80004e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004ec:	d029      	beq.n	8000542 <__adddf3+0x24e>
 80004ee:	ea94 0f05 	teq	r4, r5
 80004f2:	bf08      	it	eq
 80004f4:	ea90 0f02 	teqeq	r0, r2
 80004f8:	d005      	beq.n	8000506 <__adddf3+0x212>
 80004fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80004fe:	bf04      	itt	eq
 8000500:	4619      	moveq	r1, r3
 8000502:	4610      	moveq	r0, r2
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	ea91 0f03 	teq	r1, r3
 800050a:	bf1e      	ittt	ne
 800050c:	2100      	movne	r1, #0
 800050e:	2000      	movne	r0, #0
 8000510:	bd30      	popne	{r4, r5, pc}
 8000512:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000516:	d105      	bne.n	8000524 <__adddf3+0x230>
 8000518:	0040      	lsls	r0, r0, #1
 800051a:	4149      	adcs	r1, r1
 800051c:	bf28      	it	cs
 800051e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000522:	bd30      	pop	{r4, r5, pc}
 8000524:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000528:	bf3c      	itt	cc
 800052a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800052e:	bd30      	popcc	{r4, r5, pc}
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000538:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800053c:	f04f 0000 	mov.w	r0, #0
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000546:	bf1a      	itte	ne
 8000548:	4619      	movne	r1, r3
 800054a:	4610      	movne	r0, r2
 800054c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000550:	bf1c      	itt	ne
 8000552:	460b      	movne	r3, r1
 8000554:	4602      	movne	r2, r0
 8000556:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800055a:	bf06      	itte	eq
 800055c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000560:	ea91 0f03 	teqeq	r1, r3
 8000564:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	bf00      	nop

0800056c <__aeabi_ui2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f04f 0500 	mov.w	r5, #0
 8000584:	f04f 0100 	mov.w	r1, #0
 8000588:	e750      	b.n	800042c <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_i2d>:
 800058c:	f090 0f00 	teq	r0, #0
 8000590:	bf04      	itt	eq
 8000592:	2100      	moveq	r1, #0
 8000594:	4770      	bxeq	lr
 8000596:	b530      	push	{r4, r5, lr}
 8000598:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005a4:	bf48      	it	mi
 80005a6:	4240      	negmi	r0, r0
 80005a8:	f04f 0100 	mov.w	r1, #0
 80005ac:	e73e      	b.n	800042c <__adddf3+0x138>
 80005ae:	bf00      	nop

080005b0 <__aeabi_f2d>:
 80005b0:	0042      	lsls	r2, r0, #1
 80005b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005be:	bf1f      	itttt	ne
 80005c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005cc:	4770      	bxne	lr
 80005ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005d2:	bf08      	it	eq
 80005d4:	4770      	bxeq	lr
 80005d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005da:	bf04      	itt	eq
 80005dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f0:	e71c      	b.n	800042c <__adddf3+0x138>
 80005f2:	bf00      	nop

080005f4 <__aeabi_ul2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	e00a      	b.n	800061a <__aeabi_l2d+0x16>

08000604 <__aeabi_l2d>:
 8000604:	ea50 0201 	orrs.w	r2, r0, r1
 8000608:	bf08      	it	eq
 800060a:	4770      	bxeq	lr
 800060c:	b530      	push	{r4, r5, lr}
 800060e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000612:	d502      	bpl.n	800061a <__aeabi_l2d+0x16>
 8000614:	4240      	negs	r0, r0
 8000616:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800061a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800061e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000622:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000626:	f43f aed8 	beq.w	80003da <__adddf3+0xe6>
 800062a:	f04f 0203 	mov.w	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000642:	f1c2 0320 	rsb	r3, r2, #32
 8000646:	fa00 fc03 	lsl.w	ip, r0, r3
 800064a:	fa20 f002 	lsr.w	r0, r0, r2
 800064e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000652:	ea40 000e 	orr.w	r0, r0, lr
 8000656:	fa21 f102 	lsr.w	r1, r1, r2
 800065a:	4414      	add	r4, r2
 800065c:	e6bd      	b.n	80003da <__adddf3+0xe6>
 800065e:	bf00      	nop

08000660 <audioInit>:
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
}


void audioInit(I2C_HandleTypeDef* hi2c, SAI_HandleTypeDef* hsaiOut, SAI_HandleTypeDef* hsaiIn)
{
 8000660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	// Initialize LEAF.

	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000664:	4cf2      	ldr	r4, [pc, #968]	; (8000a30 <audioInit+0x3d0>)
{
 8000666:	460d      	mov	r5, r1
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000668:	ed9f 0af2 	vldr	s0, [pc, #968]	; 8000a34 <audioInit+0x3d4>
 800066c:	f24d 22f0 	movw	r2, #54000	; 0xd2f0
 8000670:	4620      	mov	r0, r4
 8000672:	49f1      	ldr	r1, [pc, #964]	; (8000a38 <audioInit+0x3d8>)
 8000674:	4bf1      	ldr	r3, [pc, #964]	; (8000a3c <audioInit+0x3dc>)
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);

	leaf.clearOnAllocation = 1;
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 8000676:	4ef2      	ldr	r6, [pc, #968]	; (8000a40 <audioInit+0x3e0>)
{
 8000678:	ed2d 8b10 	vpush	{d8-d15}
 800067c:	b087      	sub	sp, #28
 800067e:	9505      	str	r5, [sp, #20]
	LEAF_init(&leaf, SAMPLE_RATE, small_memory, SMALL_MEM_SIZE, &randomNumber);
 8000680:	f01c fe62 	bl	801d348 <LEAF_init>
	tMempool_init (&mediumPool, medium_memory, MED_MEM_SIZE, &leaf);
 8000684:	4623      	mov	r3, r4
 8000686:	4aef      	ldr	r2, [pc, #956]	; (8000a44 <audioInit+0x3e4>)
 8000688:	49ef      	ldr	r1, [pc, #956]	; (8000a48 <audioInit+0x3e8>)
 800068a:	48f0      	ldr	r0, [pc, #960]	; (8000a4c <audioInit+0x3ec>)
 800068c:	f017 f892 	bl	80177b4 <tMempool_init>
	tMempool_init (&largePool, large_memory, LARGE_MEM_SIZE, &leaf);
 8000690:	4623      	mov	r3, r4
 8000692:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000696:	49ee      	ldr	r1, [pc, #952]	; (8000a50 <audioInit+0x3f0>)
 8000698:	48ee      	ldr	r0, [pc, #952]	; (8000a54 <audioInit+0x3f4>)
 800069a:	f017 f88b 	bl	80177b4 <tMempool_init>
	leaf.clearOnAllocation = 1;
 800069e:	2301      	movs	r3, #1
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80006a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80006a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80006a8:	eddf 1aeb 	vldr	s3, [pc, #940]	; 8000a58 <audioInit+0x3f8>
 80006ac:	eddf 0aeb 	vldr	s1, [pc, #940]	; 8000a5c <audioInit+0x3fc>
 80006b0:	ed9f 0aeb 	vldr	s0, [pc, #940]	; 8000a60 <audioInit+0x400>
 80006b4:	48eb      	ldr	r0, [pc, #940]	; (8000a64 <audioInit+0x404>)
	leaf.clearOnAllocation = 1;
 80006b6:	6163      	str	r3, [r4, #20]
	LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE); // exponential decay buffer falling from 1 to 0
 80006b8:	f016 fe02 	bl	80172c0 <LEAF_generate_exp>
	invNumOvertones = 1.0f / NUM_OVERTONES;

	for (int i = 0; i < NUM_OVERTONES; i++)
	{
		totalGain[0] += partials[i];
 80006bc:	4cea      	ldr	r4, [pc, #936]	; (8000a68 <audioInit+0x408>)
 80006be:	4aeb      	ldr	r2, [pc, #940]	; (8000a6c <audioInit+0x40c>)
		totalGain[1] += partialsHigh[i];
 80006c0:	49eb      	ldr	r1, [pc, #940]	; (8000a70 <audioInit+0x410>)
		totalGain[0] += partials[i];
 80006c2:	ed92 1a00 	vldr	s2, [r2]
 80006c6:	ed94 3a00 	vldr	s6, [r4]
		totalGain[1] += partialsHigh[i];
 80006ca:	edd1 7a00 	vldr	s15, [r1]
		totalGain[0] += partials[i];
 80006ce:	ee33 3a01 	vadd.f32	s6, s6, s2
		totalGain[1] += partialsHigh[i];
 80006d2:	edd4 3a01 	vldr	s7, [r4, #4]
		totalGain[0] += partials[i];
 80006d6:	edd2 0a01 	vldr	s1, [r2, #4]
		totalGain[1] += partialsHigh[i];
 80006da:	ee73 3aa7 	vadd.f32	s7, s7, s15
 80006de:	edd1 1a01 	vldr	s3, [r1, #4]
		totalGain[0] += partials[i];
 80006e2:	ee33 3a20 	vadd.f32	s6, s6, s1
 80006e6:	edd2 2a02 	vldr	s5, [r2, #8]
		totalGain[1] += partialsHigh[i];
 80006ea:	edd1 4a02 	vldr	s9, [r1, #8]
 80006ee:	ee73 3aa1 	vadd.f32	s7, s7, s3
		totalGain[0] += partials[i];
 80006f2:	ed92 6a03 	vldr	s12, [r2, #12]
 80006f6:	ee33 3a22 	vadd.f32	s6, s6, s5
		totalGain[1] += partialsHigh[i];
 80006fa:	ed91 1a03 	vldr	s2, [r1, #12]
		for (int j = 0; j < 3; j++)

		{
			for (int k = 0; k < 3; k++)
			{
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80006fe:	4bdd      	ldr	r3, [pc, #884]	; (8000a74 <audioInit+0x414>)
		totalGain[1] += partialsHigh[i];
 8000700:	ee73 3aa4 	vadd.f32	s7, s7, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000704:	48dc      	ldr	r0, [pc, #880]	; (8000a78 <audioInit+0x418>)
		totalGain[0] += partials[i];
 8000706:	ee33 3a06 	vadd.f32	s6, s6, s12
 800070a:	ed92 4a04 	vldr	s8, [r2, #16]
		totalGain[1] += partialsHigh[i];
 800070e:	edd1 7a04 	vldr	s15, [r1, #16]
 8000712:	ee73 3a81 	vadd.f32	s7, s7, s2
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000716:	ed93 1a00 	vldr	s2, [r3]
		totalGain[0] += partials[i];
 800071a:	ee33 3a04 	vadd.f32	s6, s6, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800071e:	ed90 4a00 	vldr	s8, [r0]
		totalGain[0] += partials[i];
 8000722:	ed92 0a05 	vldr	s0, [r2, #20]
		totalGain[1] += partialsHigh[i];
 8000726:	ee73 3aa7 	vadd.f32	s7, s7, s15
 800072a:	edd1 2a05 	vldr	s5, [r1, #20]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800072e:	ee34 4a01 	vadd.f32	s8, s8, s2
		totalGain[1] += partialsHigh[i];
 8000732:	edd1 0a06 	vldr	s1, [r1, #24]
		totalGain[0] += partials[i];
 8000736:	ee33 3a00 	vadd.f32	s6, s6, s0
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800073a:	ed93 0a01 	vldr	s0, [r3, #4]
		totalGain[1] += partialsHigh[i];
 800073e:	ee73 3aa2 	vadd.f32	s7, s7, s5
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000742:	ed93 1a02 	vldr	s2, [r3, #8]
 8000746:	ee34 4a00 	vadd.f32	s8, s8, s0
		totalGain[0] += partials[i];
 800074a:	edd2 5a06 	vldr	s11, [r2, #24]
		totalGain[1] += partialsHigh[i];
 800074e:	edd1 1a07 	vldr	s3, [r1, #28]
 8000752:	ee73 3aa0 	vadd.f32	s7, s7, s1
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000756:	edd3 2a03 	vldr	s5, [r3, #12]
 800075a:	ee34 4a01 	vadd.f32	s8, s8, s2
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800075e:	4dc7      	ldr	r5, [pc, #796]	; (8000a7c <audioInit+0x41c>)
		totalGain[0] += partials[i];
 8000760:	ee33 3a25 	vadd.f32	s6, s6, s11
 8000764:	edd2 6a07 	vldr	s13, [r2, #28]
		totalGain[1] += partialsHigh[i];
 8000768:	ee73 3aa1 	vadd.f32	s7, s7, s3
	decayExpBufferSizeMinusOne = DECAY_EXP_BUFFER_SIZE - 1;
 800076c:	602e      	str	r6, [r5, #0]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800076e:	ee34 4a22 	vadd.f32	s8, s8, s5
		totalGain[1] += partialsHigh[i];
 8000772:	edd1 4a08 	vldr	s9, [r1, #32]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000776:	edd3 5a04 	vldr	s11, [r3, #16]
		totalGain[0] += partials[i];
 800077a:	ee33 3a26 	vadd.f32	s6, s6, s13
	invNumOvertones = 1.0f / NUM_OVERTONES;
 800077e:	4dc0      	ldr	r5, [pc, #768]	; (8000a80 <audioInit+0x420>)
		totalGain[1] += partialsHigh[i];
 8000780:	ee73 3aa4 	vadd.f32	s7, s7, s9
	invNumOvertones = 1.0f / NUM_OVERTONES;
 8000784:	4ebf      	ldr	r6, [pc, #764]	; (8000a84 <audioInit+0x424>)
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000786:	ee34 4a25 	vadd.f32	s8, s8, s11
		totalGain[0] += partials[i];
 800078a:	ed92 2a08 	vldr	s4, [r2, #32]
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 800078e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
		totalGain[0] += partials[i];
 8000792:	ed92 5a09 	vldr	s10, [r2, #36]	; 0x24
 8000796:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
 800079a:	ee33 3a02 	vadd.f32	s6, s6, s4
		totalGain[1] += partialsHigh[i];
 800079e:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80007a2:	edd1 7a0a 	vldr	s15, [r1, #40]	; 0x28
	invNumOvertones = 1.0f / NUM_OVERTONES;
 80007a6:	602e      	str	r6, [r5, #0]
		totalGain[0] += partials[i];
 80007a8:	ee33 3a05 	vadd.f32	s6, s6, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007ac:	edd3 0a05 	vldr	s1, [r3, #20]
		totalGain[1] += partialsHigh[i];
 80007b0:	ee73 3a86 	vadd.f32	s7, s7, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007b4:	edd0 4a01 	vldr	s9, [r0, #4]
 80007b8:	ed93 0a0c 	vldr	s0, [r3, #48]	; 0x30
 80007bc:	ee34 4a20 	vadd.f32	s8, s8, s1
 80007c0:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
		totalGain[0] += partials[i];
 80007c4:	ee33 3a07 	vadd.f32	s6, s6, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007c8:	ee74 4a80 	vadd.f32	s9, s9, s0
 80007cc:	edd3 2a06 	vldr	s5, [r3, #24]
 80007d0:	edd3 5a0e 	vldr	s11, [r3, #56]	; 0x38
		totalGain[1] += partialsHigh[i];
 80007d4:	ee73 3aa7 	vadd.f32	s7, s7, s15
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80007d8:	ee34 4a22 	vadd.f32	s8, s8, s5
 80007dc:	ed93 5a07 	vldr	s10, [r3, #28]
 80007e0:	ee74 4a82 	vadd.f32	s9, s9, s4
 80007e4:	ed93 6a0f 	vldr	s12, [r3, #60]	; 0x3c
 80007e8:	ed93 7a08 	vldr	s14, [r3, #32]
 80007ec:	ee34 4a05 	vadd.f32	s8, s8, s10
 80007f0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80007f4:	ee74 4aa5 	vadd.f32	s9, s9, s11
 80007f8:	ed90 5a02 	vldr	s10, [r0, #8]
 80007fc:	ed93 0a11 	vldr	s0, [r3, #68]	; 0x44
 8000800:	ee34 4a07 	vadd.f32	s8, s8, s14
 8000804:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8000808:	ee74 4a86 	vadd.f32	s9, s9, s12
 800080c:	ed93 1a09 	vldr	s2, [r3, #36]	; 0x24
 8000810:	ee35 5a07 	vadd.f32	s10, s10, s14
 8000814:	edd3 0a12 	vldr	s1, [r3, #72]	; 0x48
 8000818:	ee34 4a01 	vadd.f32	s8, s8, s2
 800081c:	ed93 1a1a 	vldr	s2, [r3, #104]	; 0x68
 8000820:	ee74 4aa7 	vadd.f32	s9, s9, s15
 8000824:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 8000828:	edd3 2a13 	vldr	s5, [r3, #76]	; 0x4c
 800082c:	ee35 5a27 	vadd.f32	s10, s10, s15
 8000830:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 8000834:	ee74 4a80 	vadd.f32	s9, s9, s0
 8000838:	edd3 5a14 	vldr	s11, [r3, #80]	; 0x50
 800083c:	edd3 7a1c 	vldr	s15, [r3, #112]	; 0x70
 8000840:	ee35 5a01 	vadd.f32	s10, s10, s2
 8000844:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 8000848:	ee74 4aa0 	vadd.f32	s9, s9, s1
 800084c:	ed93 2a15 	vldr	s4, [r3, #84]	; 0x54
 8000850:	ee34 4a21 	vadd.f32	s8, s8, s3
 8000854:	ed93 6a16 	vldr	s12, [r3, #88]	; 0x58
 8000858:	ee35 5a07 	vadd.f32	s10, s10, s14
 800085c:	edd3 1a1d 	vldr	s3, [r3, #116]	; 0x74
 8000860:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8000864:	ed93 0a1e 	vldr	s0, [r3, #120]	; 0x78
 8000868:	ed93 7a1f 	vldr	s14, [r3, #124]	; 0x7c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 800086c:	ee86 aa84 	vdiv.f32	s20, s13, s8
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000870:	edd3 0a20 	vldr	s1, [r3, #128]	; 0x80
 8000874:	ed93 1a21 	vldr	s2, [r3, #132]	; 0x84
 8000878:	edd3 2a22 	vldr	s5, [r3, #136]	; 0x88
 800087c:	ee74 4aa5 	vadd.f32	s9, s9, s11
 8000880:	edd0 5a03 	vldr	s11, [r0, #12]
 8000884:	ee35 5a27 	vadd.f32	s10, s10, s15
 8000888:	edd3 7a24 	vldr	s15, [r3, #144]	; 0x90
 800088c:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8000890:	edd3 7a25 	vldr	s15, [r3, #148]	; 0x94
 8000894:	ee74 4a82 	vadd.f32	s9, s9, s4
 8000898:	ed93 2a26 	vldr	s4, [r3, #152]	; 0x98
 800089c:	ee35 5a21 	vadd.f32	s10, s10, s3
 80008a0:	edd3 1a29 	vldr	s3, [r3, #164]	; 0xa4
 80008a4:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80008a8:	edd3 7a27 	vldr	s15, [r3, #156]	; 0x9c
 80008ac:	ee74 4a86 	vadd.f32	s9, s9, s12
 80008b0:	ed93 6a28 	vldr	s12, [r3, #160]	; 0xa0
 80008b4:	ee35 5a00 	vadd.f32	s10, s10, s0
 80008b8:	ed93 0a2d 	vldr	s0, [r3, #180]	; 0xb4
 80008bc:	ee75 5a82 	vadd.f32	s11, s11, s4
 80008c0:	ed93 2a2c 	vldr	s4, [r3, #176]	; 0xb0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 80008c4:	eec6 9aa4 	vdiv.f32	s19, s13, s9
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 80008c8:	ee75 5aa7 	vadd.f32	s11, s11, s15
 80008cc:	edd3 7a2b 	vldr	s15, [r3, #172]	; 0xac
 80008d0:	ee35 5a07 	vadd.f32	s10, s10, s14
 80008d4:	ed93 7a2a 	vldr	s14, [r3, #168]	; 0xa8
 80008d8:	ee75 5a86 	vadd.f32	s11, s11, s12
 80008dc:	ed90 6a04 	vldr	s12, [r0, #16]
 80008e0:	ee35 5a20 	vadd.f32	s10, s10, s1
 80008e4:	edd3 0a2e 	vldr	s1, [r3, #184]	; 0xb8
 80008e8:	ee75 5aa1 	vadd.f32	s11, s11, s3
 80008ec:	edd3 1a33 	vldr	s3, [r3, #204]	; 0xcc
 80008f0:	ee35 5a01 	vadd.f32	s10, s10, s2
 80008f4:	ed93 1a31 	vldr	s2, [r3, #196]	; 0xc4
 80008f8:	ee75 5a87 	vadd.f32	s11, s11, s14
 80008fc:	ed93 7a30 	vldr	s14, [r3, #192]	; 0xc0
 8000900:	ee35 5a22 	vadd.f32	s10, s10, s5
 8000904:	edd3 2a32 	vldr	s5, [r3, #200]	; 0xc8
 8000908:	ee36 6a07 	vadd.f32	s12, s12, s14
 800090c:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8000910:	ee75 5aa7 	vadd.f32	s11, s11, s15
 8000914:	edd3 7a35 	vldr	s15, [r3, #212]	; 0xd4
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000918:	ee86 9a85 	vdiv.f32	s18, s13, s10
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 800091c:	ee36 6a01 	vadd.f32	s12, s12, s2
 8000920:	ed93 1a37 	vldr	s2, [r3, #220]	; 0xdc
 8000924:	ee75 5a82 	vadd.f32	s11, s11, s4
 8000928:	ed93 2a36 	vldr	s4, [r3, #216]	; 0xd8
 800092c:	ee36 6a22 	vadd.f32	s12, s12, s5
 8000930:	edd3 2a38 	vldr	s5, [r3, #224]	; 0xe0
 8000934:	ee75 5a80 	vadd.f32	s11, s11, s0
 8000938:	ed93 0a39 	vldr	s0, [r3, #228]	; 0xe4
 800093c:	ee36 6a21 	vadd.f32	s12, s12, s3
 8000940:	edd3 1a3a 	vldr	s3, [r3, #232]	; 0xe8
 8000944:	ee75 5aa0 	vadd.f32	s11, s11, s1
 8000948:	edd3 0a3c 	vldr	s1, [r3, #240]	; 0xf0
 800094c:	ee36 6a07 	vadd.f32	s12, s12, s14
 8000950:	ed90 7a05 	vldr	s14, [r0, #20]
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000954:	eec6 8aa5 	vdiv.f32	s17, s13, s11
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000958:	ee37 7a20 	vadd.f32	s14, s14, s1
 800095c:	edd3 0a40 	vldr	s1, [r3, #256]	; 0x100
 8000960:	ee36 6a27 	vadd.f32	s12, s12, s15
 8000964:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8000968:	ee37 7a27 	vadd.f32	s14, s14, s15
 800096c:	edd3 7a3f 	vldr	s15, [r3, #252]	; 0xfc
 8000970:	ee36 6a02 	vadd.f32	s12, s12, s4
 8000974:	ed93 2a3e 	vldr	s4, [r3, #248]	; 0xf8
 8000978:	ee37 7a02 	vadd.f32	s14, s14, s4
 800097c:	ed93 2a43 	vldr	s4, [r3, #268]	; 0x10c
 8000980:	ee36 6a01 	vadd.f32	s12, s12, s2
 8000984:	ed93 1a44 	vldr	s2, [r3, #272]	; 0x110
 8000988:	ee37 7a27 	vadd.f32	s14, s14, s15
 800098c:	edd3 7a42 	vldr	s15, [r3, #264]	; 0x108
 8000990:	ee36 6a22 	vadd.f32	s12, s12, s5
 8000994:	edd3 2a41 	vldr	s5, [r3, #260]	; 0x104
 8000998:	ee37 7a20 	vadd.f32	s14, s14, s1
 800099c:	ee36 6a00 	vadd.f32	s12, s12, s0
 80009a0:	ed93 0a45 	vldr	s0, [r3, #276]	; 0x114
 80009a4:	ed93 8a48 	vldr	s16, [r3, #288]	; 0x120
 80009a8:	ee37 7a22 	vadd.f32	s14, s14, s5
 80009ac:	edd3 2a49 	vldr	s5, [r3, #292]	; 0x124
 80009b0:	ee36 6a21 	vadd.f32	s12, s12, s3
 80009b4:	edd0 1a06 	vldr	s3, [r0, #24]
 80009b8:	edd3 0a46 	vldr	s1, [r3, #280]	; 0x118
 80009bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80009c0:	edd0 7a07 	vldr	s15, [r0, #28]
 80009c4:	ee71 1a88 	vadd.f32	s3, s3, s16
 80009c8:	ed93 8a54 	vldr	s16, [r3, #336]	; 0x150
 80009cc:	edd3 aa5e 	vldr	s21, [r3, #376]	; 0x178
 80009d0:	ee77 7a88 	vadd.f32	s15, s15, s16
 80009d4:	ed93 8a4a 	vldr	s16, [r3, #296]	; 0x128
 80009d8:	ee37 7a02 	vadd.f32	s14, s14, s4
 80009dc:	ed93 2a55 	vldr	s4, [r3, #340]	; 0x154
 80009e0:	ee71 1aa2 	vadd.f32	s3, s3, s5
 80009e4:	edd0 2a08 	vldr	s5, [r0, #32]
 80009e8:	ee77 7a82 	vadd.f32	s15, s15, s4
 80009ec:	ed93 2a56 	vldr	s4, [r3, #344]	; 0x158
 80009f0:	ee37 7a01 	vadd.f32	s14, s14, s2
 80009f4:	ed93 1a61 	vldr	s2, [r3, #388]	; 0x184
 80009f8:	ee71 1a88 	vadd.f32	s3, s3, s16
 80009fc:	ed93 8a60 	vldr	s16, [r3, #384]	; 0x180
 8000a00:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a04:	ed93 2a57 	vldr	s4, [r3, #348]	; 0x15c
 8000a08:	ee72 2a88 	vadd.f32	s5, s5, s16
 8000a0c:	ee37 7a00 	vadd.f32	s14, s14, s0
 8000a10:	ed93 0a63 	vldr	s0, [r3, #396]	; 0x18c
 8000a14:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a18:	ed93 2a58 	vldr	s4, [r3, #352]	; 0x160
 8000a1c:	ee72 2a81 	vadd.f32	s5, s5, s2
 8000a20:	ed93 1a62 	vldr	s2, [r3, #392]	; 0x188
 8000a24:	ee37 7a20 	vadd.f32	s14, s14, s1
 8000a28:	edd3 0a5a 	vldr	s1, [r3, #360]	; 0x168
 8000a2c:	e02c      	b.n	8000a88 <audioInit+0x428>
 8000a2e:	bf00      	nop
 8000a30:	200051d0 	.word	0x200051d0
 8000a34:	473b8000 	.word	0x473b8000
 8000a38:	20005b08 	.word	0x20005b08
 8000a3c:	08005e29 	.word	0x08005e29
 8000a40:	457ff000 	.word	0x457ff000
 8000a44:	00053020 	.word	0x00053020
 8000a48:	24028020 	.word	0x24028020
 8000a4c:	20005410 	.word	0x20005410
 8000a50:	60000000 	.word	0x60000000
 8000a54:	200051cc 	.word	0x200051cc
 8000a58:	ba51b717 	.word	0xba51b717
 8000a5c:	00000000 	.word	0x00000000
 8000a60:	3a83126f 	.word	0x3a83126f
 8000a64:	20000fc8 	.word	0x20000fc8
 8000a68:	20012fb4 	.word	0x20012fb4
 8000a6c:	200000fc 	.word	0x200000fc
 8000a70:	20000144 	.word	0x20000144
 8000a74:	20000364 	.word	0x20000364
 8000a78:	20012fbc 	.word	0x20012fbc
 8000a7c:	20004fc8 	.word	0x20004fc8
 8000a80:	20005124 	.word	0x20005124
 8000a84:	3dba2e8c 	.word	0x3dba2e8c
 8000a88:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000a8c:	ed93 2a59 	vldr	s4, [r3, #356]	; 0x164
 8000a90:	ee72 2a81 	vadd.f32	s5, s5, s2
 8000a94:	ed93 1a64 	vldr	s2, [r3, #400]	; 0x190
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000a98:	ee86 8a86 	vdiv.f32	s16, s13, s12
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000a9c:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000aa0:	ed93 2a5b 	vldr	s4, [r3, #364]	; 0x16c
 8000aa4:	ee72 2a80 	vadd.f32	s5, s5, s0
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000aa8:	ee86 0a87 	vdiv.f32	s0, s13, s14
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000aac:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8000ab0:	ee72 2a81 	vadd.f32	s5, s5, s2
 8000ab4:	ed93 1a5c 	vldr	s2, [r3, #368]	; 0x170
 8000ab8:	ee77 7a82 	vadd.f32	s15, s15, s4
 8000abc:	ed93 2a5d 	vldr	s4, [r3, #372]	; 0x174
 8000ac0:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000ac4:	ee77 7a82 	vadd.f32	s15, s15, s4
		}
	}
	gainNormalizers[0] = 1.0f / totalGain[0];
 8000ac8:	ee86 2a83 	vdiv.f32	s4, s13, s6
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000acc:	ee77 aaaa 	vadd.f32	s21, s15, s21
 8000ad0:	edd3 7a4b 	vldr	s15, [r3, #300]	; 0x12c
 8000ad4:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000ad8:	edd3 7a4c 	vldr	s15, [r3, #304]	; 0x130
 8000adc:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000ae0:	edd3 7a4d 	vldr	s15, [r3, #308]	; 0x134
 8000ae4:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000ae8:	edd3 7a4e 	vldr	s15, [r3, #312]	; 0x138
 8000aec:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000af0:	edd3 7a4f 	vldr	s15, [r3, #316]	; 0x13c
 8000af4:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000af8:	edd3 7a50 	vldr	s15, [r3, #320]	; 0x140
 8000afc:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000b00:	edd3 7a51 	vldr	s15, [r3, #324]	; 0x144
 8000b04:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000b08:	edd3 7a52 	vldr	s15, [r3, #328]	; 0x148
 8000b0c:	ee71 1aa7 	vadd.f32	s3, s3, s15
 8000b10:	edd3 7a65 	vldr	s15, [r3, #404]	; 0x194
 8000b14:	ed93 1a66 	vldr	s2, [r3, #408]	; 0x198
 8000b18:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8000b1c:	ed80 4a00 	vstr	s8, [r0]
 8000b20:	ed93 4a67 	vldr	s8, [r3, #412]	; 0x19c
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000b24:	eec6 0aa1 	vdiv.f32	s1, s13, s3
 8000b28:	ed80 5a02 	vstr	s10, [r0, #8]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000b2c:	ed93 5a68 	vldr	s10, [r3, #416]	; 0x1a0
 8000b30:	ed80 6a04 	vstr	s12, [r0, #16]
 8000b34:	ed93 6a69 	vldr	s12, [r3, #420]	; 0x1a4
 8000b38:	ee77 7a81 	vadd.f32	s15, s15, s2
 8000b3c:	ed80 7a05 	vstr	s14, [r0, #20]
 8000b40:	ed93 7a6a 	vldr	s14, [r3, #424]	; 0x1a8
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000b44:	ee86 1aaa 	vdiv.f32	s2, s13, s21
 8000b48:	edc0 1a06 	vstr	s3, [r0, #24]
 8000b4c:	edc0 4a01 	vstr	s9, [r0, #4]
 8000b50:	edc0 5a03 	vstr	s11, [r0, #12]
 8000b54:	edc0 aa07 	vstr	s21, [r0, #28]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000b58:	ee77 7a84 	vadd.f32	s15, s15, s8
 8000b5c:	ed84 3a00 	vstr	s6, [r4]
	gainNormalizers[1] = 1.0f / totalGain[1];
 8000b60:	eec6 2aa3 	vdiv.f32	s5, s13, s7
 8000b64:	edc4 3a01 	vstr	s7, [r4, #4]
				totalGain_s[j][k] += stringPartialGains[j][k][i];
 8000b68:	ee77 7a85 	vadd.f32	s15, s15, s10
 8000b6c:	ee77 7a86 	vadd.f32	s15, s15, s12
 8000b70:	ee77 7a87 	vadd.f32	s15, s15, s14
			gainNormalizers_s[i][j] = 1.0f / totalGain_s[i][j];
 8000b74:	eec6 1aa7 	vdiv.f32	s3, s13, s15
 8000b78:	edc0 7a08 	vstr	s15, [r0, #32]
 8000b7c:	48e2      	ldr	r0, [pc, #904]	; (8000f08 <audioInit+0x8a8>)
 8000b7e:	ed80 aa00 	vstr	s20, [r0]
 8000b82:	edc0 9a01 	vstr	s19, [r0, #4]
 8000b86:	ed80 9a02 	vstr	s18, [r0, #8]
 8000b8a:	edc0 8a03 	vstr	s17, [r0, #12]
 8000b8e:	ed80 8a04 	vstr	s16, [r0, #16]
 8000b92:	ed80 0a05 	vstr	s0, [r0, #20]
 8000b96:	edc0 0a06 	vstr	s1, [r0, #24]
 8000b9a:	ed80 1a07 	vstr	s2, [r0, #28]
 8000b9e:	edc0 1a08 	vstr	s3, [r0, #32]
	gainNormalizers[0] = 1.0f / totalGain[0];
 8000ba2:	48da      	ldr	r0, [pc, #872]	; (8000f0c <audioInit+0x8ac>)
 8000ba4:	ed80 2a00 	vstr	s4, [r0]
	gainNormalizers[1] = 1.0f / totalGain[1];
 8000ba8:	edc0 2a01 	vstr	s5, [r0, #4]
	for (int i = 0; i < NUM_OVERTONES; i++)
 8000bac:	f102 002c 	add.w	r0, r2, #44	; 0x2c
			for (int j = 0; j < 3; j++)

			{
				for (int k = 0; k < 3; k++)
				{
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000bb0:	edd3 7a00 	vldr	s15, [r3]
			partials[i] = partials[i] * gainNormalizers[0];
 8000bb4:	ed92 3a00 	vldr	s6, [r2]
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000bb8:	ee6a 7a27 	vmul.f32	s15, s20, s15
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8000bbc:	edd1 3a00 	vldr	s7, [r1]
			partials[i] = partials[i] * gainNormalizers[0];
 8000bc0:	ee22 3a03 	vmul.f32	s6, s4, s6
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8000bc4:	ee62 3aa3 	vmul.f32	s7, s5, s7
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000bc8:	ece3 7a01 	vstmia	r3!, {s15}
 8000bcc:	ed93 4a0b 	vldr	s8, [r3, #44]	; 0x2c
 8000bd0:	edd3 4a17 	vldr	s9, [r3, #92]	; 0x5c
 8000bd4:	ed93 5a23 	vldr	s10, [r3, #140]	; 0x8c
 8000bd8:	ee24 4a29 	vmul.f32	s8, s8, s19
 8000bdc:	edd3 5a2f 	vldr	s11, [r3, #188]	; 0xbc
 8000be0:	ee64 4a89 	vmul.f32	s9, s9, s18
 8000be4:	ed93 6a3b 	vldr	s12, [r3, #236]	; 0xec
 8000be8:	ee25 5a28 	vmul.f32	s10, s10, s17
 8000bec:	edd3 6a47 	vldr	s13, [r3, #284]	; 0x11c
 8000bf0:	ee65 5a88 	vmul.f32	s11, s11, s16
 8000bf4:	ed93 7a53 	vldr	s14, [r3, #332]	; 0x14c
 8000bf8:	ee26 6a00 	vmul.f32	s12, s12, s0
 8000bfc:	edd3 7a5f 	vldr	s15, [r3, #380]	; 0x17c
 8000c00:	ee66 6aa0 	vmul.f32	s13, s13, s1
 8000c04:	ee27 7a01 	vmul.f32	s14, s14, s2
			partials[i] = partials[i] * gainNormalizers[0];
 8000c08:	eca2 3a01 	vstmia	r2!, {s6}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000c0c:	ee67 7aa1 	vmul.f32	s15, s15, s3
	for (int i = 0; i < NUM_OVERTONES; i++)
 8000c10:	4282      	cmp	r2, r0
			partialsHigh[i] = partialsHigh[i] * gainNormalizers[1];
 8000c12:	ece1 3a01 	vstmia	r1!, {s7}
					stringPartialGains[j][k][i] *= gainNormalizers_s[j][k];
 8000c16:	ed83 4a0b 	vstr	s8, [r3, #44]	; 0x2c
 8000c1a:	edc3 4a17 	vstr	s9, [r3, #92]	; 0x5c
 8000c1e:	ed83 5a23 	vstr	s10, [r3, #140]	; 0x8c
 8000c22:	edc3 5a2f 	vstr	s11, [r3, #188]	; 0xbc
 8000c26:	ed83 6a3b 	vstr	s12, [r3, #236]	; 0xec
 8000c2a:	edc3 6a47 	vstr	s13, [r3, #284]	; 0x11c
 8000c2e:	ed83 7a53 	vstr	s14, [r3, #332]	; 0x14c
 8000c32:	edc3 7a5f 	vstr	s15, [r3, #380]	; 0x17c
	for (int i = 0; i < NUM_OVERTONES; i++)
 8000c36:	d1bb      	bne.n	8000bb0 <audioInit+0x550>
			  for (int j = 0; j < 3; j++)
			  {

				  for (int k = 0; k < 2; k++)
				  {
					  float tempDivisor = (stringFundamentals[j][k+1] -  stringFundamentals[j][k]);
 8000c38:	4bb5      	ldr	r3, [pc, #724]	; (8000f10 <audioInit+0x8b0>)
 8000c3a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000c3e:	4cb5      	ldr	r4, [pc, #724]	; (8000f14 <audioInit+0x8b4>)
 8000c40:	ed93 8a01 	vldr	s16, [r3, #4]
 8000c44:	ed93 0a04 	vldr	s0, [r3, #16]
 8000c48:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 8000c4c:	edd3 0a07 	vldr	s1, [r3, #28]
 8000c50:	edd3 9a00 	vldr	s19, [r3]
 8000c54:	ed93 6a02 	vldr	s12, [r3, #8]
 8000c58:	ed93 9a03 	vldr	s18, [r3, #12]
 8000c5c:	ee78 4a69 	vsub.f32	s9, s16, s19
 8000c60:	edd3 6a05 	vldr	s13, [r3, #20]
 8000c64:	ee36 6a48 	vsub.f32	s12, s12, s16
 8000c68:	edd3 8a06 	vldr	s17, [r3, #24]
 8000c6c:	ee30 5a49 	vsub.f32	s10, s0, s18
 8000c70:	ed93 7a08 	vldr	s14, [r3, #32]
 8000c74:	ee76 6ac0 	vsub.f32	s13, s13, s0
 8000c78:	ee70 5ae8 	vsub.f32	s11, s1, s17
 8000c7c:	f8df c328 	ldr.w	ip, [pc, #808]	; 8000fa8 <audioInit+0x948>
 8000c80:	ee37 7a60 	vsub.f32	s14, s14, s1
 8000c84:	4fa4      	ldr	r7, [pc, #656]	; (8000f18 <audioInit+0x8b8>)
 8000c86:	eec7 daa4 	vdiv.f32	s27, s15, s9
 8000c8a:	4ea4      	ldr	r6, [pc, #656]	; (8000f1c <audioInit+0x8bc>)
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000c8c:	eddf aaa4 	vldr	s21, [pc, #656]	; 8000f20 <audioInit+0x8c0>
			  decayAf1[i] = decayAfParts[i] * 123.0f;
 8000c90:	ed9f aaa4 	vldr	s20, [pc, #656]	; 8000f24 <audioInit+0x8c4>
 8000c94:	4da4      	ldr	r5, [pc, #656]	; (8000f28 <audioInit+0x8c8>)
 8000c96:	4ba5      	ldr	r3, [pc, #660]	; (8000f2c <audioInit+0x8cc>)
 8000c98:	ee87 da86 	vdiv.f32	s26, s15, s12
 8000c9c:	48a4      	ldr	r0, [pc, #656]	; (8000f30 <audioInit+0x8d0>)
 8000c9e:	49a5      	ldr	r1, [pc, #660]	; (8000f34 <audioInit+0x8d4>)
 8000ca0:	4aa5      	ldr	r2, [pc, #660]	; (8000f38 <audioInit+0x8d8>)
 8000ca2:	eec7 ca85 	vdiv.f32	s25, s15, s10
 8000ca6:	ee87 caa6 	vdiv.f32	s24, s15, s13
 8000caa:	eec7 baa5 	vdiv.f32	s23, s15, s11
 8000cae:	ee87 ba87 	vdiv.f32	s22, s15, s14
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000cb2:	edd3 4a0c 	vldr	s9, [r3, #48]	; 0x30
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	ed53 2a01 	vldr	s5, [r3, #-4]
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000cbc:	ecbc 2a01 	vldmia	ip!, {s4}
 8000cc0:	ecb4 6a01 	vldmia	r4!, {s12}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000cc4:	ee87 4aa4 	vdiv.f32	s8, s15, s9
 8000cc8:	edd3 6a17 	vldr	s13, [r3, #92]	; 0x5c
 8000ccc:	ed93 5a2f 	vldr	s10, [r3, #188]	; 0xbc
		for (int i = 0; i < NUM_OVERTONES; i++)
 8000cd0:	4544      	cmp	r4, r8
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000cd2:	edd3 3a23 	vldr	s7, [r3, #140]	; 0x8c
 8000cd6:	ed93 7a3b 	vldr	s14, [r3, #236]	; 0xec
 8000cda:	edd3 1a53 	vldr	s3, [r3, #332]	; 0x14c
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000cde:	eec7 ea82 	vdiv.f32	s29, s15, s4
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000ce2:	edd3 5a47 	vldr	s11, [r3, #284]	; 0x11c
 8000ce6:	ed93 3a5f 	vldr	s6, [r3, #380]	; 0x17c
 8000cea:	ee87 2aa2 	vdiv.f32	s4, s15, s5
 8000cee:	eec7 4a85 	vdiv.f32	s9, s15, s10
 8000cf2:	eec7 faa3 	vdiv.f32	s31, s15, s7
 8000cf6:	ee87 5aa1 	vdiv.f32	s10, s15, s3
 8000cfa:	eec7 3aa5 	vdiv.f32	s7, s15, s11
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000cfe:	eec7 5a86 	vdiv.f32	s11, s15, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d02:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8000d06:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d0a:	ee87 7a83 	vdiv.f32	s14, s15, s6
 8000d0e:	ee74 1a42 	vsub.f32	s3, s8, s4
 8000d12:	ee35 3a63 	vsub.f32	s6, s10, s7
 8000d16:	ee74 2aef 	vsub.f32	s5, s9, s31
 8000d1a:	ee61 1aad 	vmul.f32	s3, s3, s27
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000d1e:	ee75 5aee 	vsub.f32	s11, s11, s29
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d22:	ee36 6a44 	vsub.f32	s12, s12, s8

					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d26:	ee29 1aa1 	vmul.f32	s2, s19, s3
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d2a:	ece0 1a01 	vstmia	r0!, {s3}
 8000d2e:	ee76 6ae4 	vsub.f32	s13, s13, s9
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000d32:	ee65 5aaa 	vmul.f32	s11, s11, s21
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d36:	ee26 6a0d 	vmul.f32	s12, s12, s26
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d3a:	eca1 1a01 	vstmia	r1!, {s2}

					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000d3e:	ee32 2a41 	vsub.f32	s4, s4, s2
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d42:	ee37 7a45 	vsub.f32	s14, s14, s10
			  decayAfParts[i] = (((1.0f/partialDecaysHigh[i])-(1.0f/partialDecays[i])) * 0.004048582995951f);  // divided by 370-123 = 247. value is 1/247
 8000d46:	ece7 5a01 	vstmia	r7!, {s11}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d4a:	ee62 2aac 	vmul.f32	s5, s5, s25
 8000d4e:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8000d52:	ee66 6a8c 	vmul.f32	s13, s13, s24
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000d56:	eca2 2a01 	vstmia	r2!, {s4}
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d5a:	ee27 7a0b 	vmul.f32	s14, s14, s22
 8000d5e:	ee23 3a2b 	vmul.f32	s6, s6, s23
 8000d62:	edc0 2a17 	vstr	s5, [r0, #92]	; 0x5c
			  decayAf1[i] = decayAfParts[i] * 123.0f;
 8000d66:	ee25 fa8a 	vmul.f32	s30, s11, s20
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d6a:	edc0 6a23 	vstr	s13, [r0, #140]	; 0x8c
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d6e:	ee28 ea06 	vmul.f32	s28, s16, s12
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d72:	ed80 7a3b 	vstr	s14, [r0, #236]	; 0xec
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d76:	ee29 1a22 	vmul.f32	s2, s18, s5
					  dAp[j][k][i] = ((1.0f / stringDecays[j][k+1][i]) - (1.0f / stringDecays[j][k][i])) / tempDivisor;
 8000d7a:	ed80 3a2f 	vstr	s6, [r0, #188]	; 0xbc
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d7e:	ee60 1a26 	vmul.f32	s3, s0, s13
			  decayAf1[i] = decayAfParts[i] * 123.0f;
 8000d82:	eca6 fa01 	vstmia	r6!, {s30}
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d86:	ee28 2a83 	vmul.f32	s4, s17, s6
 8000d8a:	ed81 ea0b 	vstr	s28, [r1, #44]	; 0x2c
 8000d8e:	ee20 6a87 	vmul.f32	s12, s1, s14
 8000d92:	ed81 1a17 	vstr	s2, [r1, #92]	; 0x5c
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 8000d96:	ee7e eacf 	vsub.f32	s29, s29, s30
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000d9a:	edc1 1a23 	vstr	s3, [r1, #140]	; 0x8c
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000d9e:	ee34 4a4e 	vsub.f32	s8, s8, s28
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000da2:	ed81 2a2f 	vstr	s4, [r1, #188]	; 0xbc
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000da6:	ee7f 5ac1 	vsub.f32	s11, s31, s2
					  dAi[j][k][i] = dAp[j][k][i] * stringFundamentals[j][k];
 8000daa:	ed81 6a3b 	vstr	s12, [r1, #236]	; 0xec
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000dae:	ee74 4ae1 	vsub.f32	s9, s9, s3
			  decayBs[i] = (1.0f/partialDecays[i]) - decayAf1[i];
 8000db2:	ece5 ea01 	vstmia	r5!, {s29}
					  dBs[j][k][i] = (1.0f/stringDecays[j][k][i]) - dAi[j][k][i];
 8000db6:	ee73 3ac2 	vsub.f32	s7, s7, s4
 8000dba:	ed82 4a0b 	vstr	s8, [r2, #44]	; 0x2c
 8000dbe:	ee35 5a46 	vsub.f32	s10, s10, s12
 8000dc2:	edc2 5a17 	vstr	s11, [r2, #92]	; 0x5c
 8000dc6:	edc2 4a23 	vstr	s9, [r2, #140]	; 0x8c
 8000dca:	edc2 3a2f 	vstr	s7, [r2, #188]	; 0xbc
 8000dce:	ed82 5a3b 	vstr	s10, [r2, #236]	; 0xec
		for (int i = 0; i < NUM_OVERTONES; i++)
 8000dd2:	f47f af6e 	bne.w	8000cb2 <audioInit+0x652>
 8000dd6:	4c59      	ldr	r4, [pc, #356]	; (8000f3c <audioInit+0x8dc>)

		}

		for (int i = 0; i < 256; i++)
		{
			randomFactors[i] = randomNumber() + 0.5f;
 8000dd8:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8000ddc:	f504 6580 	add.w	r5, r4, #1024	; 0x400
 8000de0:	f005 f822 	bl	8005e28 <randomNumber>
 8000de4:	ee30 0a08 	vadd.f32	s0, s0, s16
 8000de8:	eca4 0a01 	vstmia	r4!, {s0}
		for (int i = 0; i < 256; i++)
 8000dec:	42ac      	cmp	r4, r5
 8000dee:	d1f7      	bne.n	8000de0 <audioInit+0x780>
		}
	//LEAF_generate_atodb(atoDbTable, ATODB_TABLE_SIZE, 0.00001f, 1.0f);
	//LEAF_generate_dbtoa(dbtoATable, DBTOA_TABLE_SIZE, -90.0f, 30.0f);

	LEAF_generate_mtof(mtofTable, -163.8375f, 163.8375f,  MTOF_TABLE_SIZE); //mtof table for fast calc
 8000df0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df4:	eddf 0a52 	vldr	s1, [pc, #328]	; 8000f40 <audioInit+0x8e0>
 8000df8:	ed9f 0a52 	vldr	s0, [pc, #328]	; 8000f44 <audioInit+0x8e4>
 8000dfc:	4852      	ldr	r0, [pc, #328]	; (8000f48 <audioInit+0x8e8>)
 8000dfe:	f016 fac3 	bl	8017388 <LEAF_generate_mtof>

	//a table that maps bar mapping values (frequency ratios from 1 to 8) to midinote offsets caused by the bar (for the filter computation, which stays in midi world)
    float increment = 1.0f / (float)(MAPPING_TABLE_SIZE - 1);
    float x = 0.0f;
    float scalar = 7.0f;
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000e02:	4c52      	ldr	r4, [pc, #328]	; (8000f4c <audioInit+0x8ec>)
 8000e04:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <audioInit+0x8f0>)
 8000e06:	4a53      	ldr	r2, [pc, #332]	; (8000f54 <audioInit+0x8f4>)
 8000e08:	4d53      	ldr	r5, [pc, #332]	; (8000f58 <audioInit+0x8f8>)
    float x = 0.0f;
 8000e0a:	ed9f 8a54 	vldr	s16, [pc, #336]	; 8000f5c <audioInit+0x8fc>
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
    {
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000e0e:	eddf 9a54 	vldr	s19, [pc, #336]	; 8000f60 <audioInit+0x900>
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000e12:	ed9f 9a54 	vldr	s18, [pc, #336]	; 8000f64 <audioInit+0x904>
        x += increment;
 8000e16:	eddf 8a54 	vldr	s17, [pc, #336]	; 8000f68 <audioInit+0x908>
    midiTableMappingScalar = (MAPPING_TABLE_SIZE - 1) / scalar;
 8000e1a:	601a      	str	r2, [r3, #0]
        float mappingVal = (((x * scalar) + 1.0f) * 220.0f);
 8000e1c:	eef1 7a0c 	vmov.f32	s15, #28	; 0x40e00000  7.0
 8000e20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000e24:	eea8 0a27 	vfma.f32	s0, s16, s15
        x += increment;
 8000e28:	ee38 8a28 	vadd.f32	s16, s16, s17
        mappingToMIDITable[i] = (ftom(mappingVal)) - 57.0f;
 8000e2c:	ee20 0a29 	vmul.f32	s0, s0, s19
 8000e30:	f016 fb78 	bl	8017524 <ftom>
 8000e34:	ee30 0a49 	vsub.f32	s0, s0, s18
 8000e38:	eca4 0a01 	vstmia	r4!, {s0}
    for (int i = 0; i < MAPPING_TABLE_SIZE; i++)
 8000e3c:	42ac      	cmp	r4, r5
 8000e3e:	d1ed      	bne.n	8000e1c <audioInit+0x7bc>
    }


	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000e40:	2102      	movs	r1, #2
 8000e42:	484a      	ldr	r0, [pc, #296]	; (8000f6c <audioInit+0x90c>)
 8000e44:	f009 fe96 	bl	800ab74 <HAL_GPIO_ReadPin>
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000e48:	2120      	movs	r1, #32
	int bit0 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000e4a:	4605      	mov	r5, r0
	int bit1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8000e4c:	4848      	ldr	r0, [pc, #288]	; (8000f70 <audioInit+0x910>)
 8000e4e:	f009 fe91 	bl	800ab74 <HAL_GPIO_ReadPin>
 8000e52:	4604      	mov	r4, r0
	int bit2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000e54:	2101      	movs	r1, #1
 8000e56:	4847      	ldr	r0, [pc, #284]	; (8000f74 <audioInit+0x914>)
 8000e58:	f009 fe8c 	bl	800ab74 <HAL_GPIO_ReadPin>
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));


	if (numStrings == 6)
 8000e5c:	4b46      	ldr	r3, [pc, #280]	; (8000f78 <audioInit+0x918>)
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000e5e:	00a4      	lsls	r4, r4, #2
 8000e60:	4946      	ldr	r1, [pc, #280]	; (8000f7c <audioInit+0x91c>)
	if (numStrings == 6)
 8000e62:	781a      	ldrb	r2, [r3, #0]
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000e64:	eb04 0345 	add.w	r3, r4, r5, lsl #1
	if (numStrings == 6)
 8000e68:	2a06      	cmp	r2, #6
	boardNumber = ((bit0 << 1)+(bit1 << 2)+(bit2));
 8000e6a:	4418      	add	r0, r3
 8000e6c:	b2c3      	uxtb	r3, r0
 8000e6e:	700b      	strb	r3, [r1, #0]
	if (numStrings == 6)
 8000e70:	f000 83b0 	beq.w	80015d4 <audioInit+0xf74>
	{
		firstString = boardNumber;
		numStringsThisBoard = 1;
	}

	else if (numStrings == 10)
 8000e74:	2a0a      	cmp	r2, #10
 8000e76:	f000 83a2 	beq.w	80015be <audioInit+0xf5e>
	}

	else //otherwise 12-string version
	{

		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	4840      	ldr	r0, [pc, #256]	; (8000f80 <audioInit+0x920>)
		numStringsThisBoard = 2;
 8000e7e:	4a41      	ldr	r2, [pc, #260]	; (8000f84 <audioInit+0x924>)
 8000e80:	2102      	movs	r1, #2
		firstString = boardNumber * NUM_STRINGS_PER_BOARD;
 8000e82:	6003      	str	r3, [r0, #0]
		numStringsThisBoard = 2;
 8000e84:	7011      	strb	r1, [r2, #0]
	}

	for (int i = 0; i < NUM_STRINGS_PER_BOARD; i++)
	{

		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000e86:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000e8a:	493f      	ldr	r1, [pc, #252]	; (8000f88 <audioInit+0x928>)
 8000e8c:	483f      	ldr	r0, [pc, #252]	; (8000f8c <audioInit+0x92c>)
 8000e8e:	4c40      	ldr	r4, [pc, #256]	; (8000f90 <audioInit+0x930>)
 8000e90:	eeb0 0a60 	vmov.f32	s0, s1


	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
	for (int i = 0; i < 12; i++)
	{
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000e94:	4d3c      	ldr	r5, [pc, #240]	; (8000f88 <audioInit+0x928>)
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000e96:	f014 fc27 	bl	80156e8 <tSlide_init>
 8000e9a:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000e9e:	493a      	ldr	r1, [pc, #232]	; (8000f88 <audioInit+0x928>)
 8000ea0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8000ea4:	483b      	ldr	r0, [pc, #236]	; (8000f94 <audioInit+0x934>)
 8000ea6:	eeb0 0a60 	vmov.f32	s0, s1
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000eaa:	eddf 8a3b 	vldr	s17, [pc, #236]	; 8000f98 <audioInit+0x938>
 8000eae:	ed9f 8a2b 	vldr	s16, [pc, #172]	; 8000f5c <audioInit+0x8fc>
		tSlide_init(&freqSlider[i], 2, 2, &leaf);
 8000eb2:	f014 fc19 	bl	80156e8 <tSlide_init>
	tExpSmooth_init(&volumeSmoother,0.0f, 0.0005f, &leaf);
 8000eb6:	4934      	ldr	r1, [pc, #208]	; (8000f88 <audioInit+0x928>)
 8000eb8:	eddf 0a37 	vldr	s1, [pc, #220]	; 8000f98 <audioInit+0x938>
 8000ebc:	ed9f 0a27 	vldr	s0, [pc, #156]	; 8000f5c <audioInit+0x8fc>
 8000ec0:	4836      	ldr	r0, [pc, #216]	; (8000f9c <audioInit+0x93c>)
 8000ec2:	f014 fba5 	bl	8015610 <tExpSmooth_init>
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000ec6:	4620      	mov	r0, r4
	for (int i = 0; i < 12; i++)
 8000ec8:	3404      	adds	r4, #4
		tExpSmooth_init(&knobSmoothers[i],0.0f, 0.0005f, &leaf);
 8000eca:	eef0 0a68 	vmov.f32	s1, s17
 8000ece:	4629      	mov	r1, r5
 8000ed0:	eeb0 0a48 	vmov.f32	s0, s16
 8000ed4:	f014 fb9c 	bl	8015610 <tExpSmooth_init>
	for (int i = 0; i < 12; i++)
 8000ed8:	42b4      	cmp	r4, r6
 8000eda:	d1f4      	bne.n	8000ec6 <audioInit+0x866>
 8000edc:	4c30      	ldr	r4, [pc, #192]	; (8000fa0 <audioInit+0x940>)
	}
	for (int i = 0; i < 10; i++)
	{
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000ede:	4e2a      	ldr	r6, [pc, #168]	; (8000f88 <audioInit+0x928>)
 8000ee0:	eddf 8a2d 	vldr	s17, [pc, #180]	; 8000f98 <audioInit+0x938>
 8000ee4:	f104 0528 	add.w	r5, r4, #40	; 0x28
 8000ee8:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 8000f5c <audioInit+0x8fc>
 8000eec:	4620      	mov	r0, r4
	for (int i = 0; i < 10; i++)
 8000eee:	3404      	adds	r4, #4
		tExpSmooth_init(&pedalSmoothers[i],0.0f, 0.0005f, &leaf);
 8000ef0:	eef0 0a68 	vmov.f32	s1, s17
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	eeb0 0a48 	vmov.f32	s0, s16
 8000efa:	f014 fb89 	bl	8015610 <tExpSmooth_init>
	for (int i = 0; i < 10; i++)
 8000efe:	42ac      	cmp	r4, r5
 8000f00:	d1f4      	bne.n	8000eec <audioInit+0x88c>
 8000f02:	2600      	movs	r6, #0
 8000f04:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <audioInit+0x944>)
 8000f06:	e051      	b.n	8000fac <audioInit+0x94c>
 8000f08:	200050c4 	.word	0x200050c4
 8000f0c:	200050bc 	.word	0x200050bc
 8000f10:	20000340 	.word	0x20000340
 8000f14:	200000b4 	.word	0x200000b4
 8000f18:	20000f38 	.word	0x20000f38
 8000f1c:	20000ef0 	.word	0x20000ef0
 8000f20:	3b84a9fa 	.word	0x3b84a9fa
 8000f24:	42f60000 	.word	0x42f60000
 8000f28:	20000f80 	.word	0x20000f80
 8000f2c:	20000190 	.word	0x20000190
 8000f30:	20000c70 	.word	0x20000c70
 8000f34:	20000b50 	.word	0x20000b50
 8000f38:	20000d90 	.word	0x20000d90
 8000f3c:	20005618 	.word	0x20005618
 8000f40:	4323d666 	.word	0x4323d666
 8000f44:	c323d666 	.word	0xc323d666
 8000f48:	24008020 	.word	0x24008020
 8000f4c:	24000000 	.word	0x24000000
 8000f50:	2000004c 	.word	0x2000004c
 8000f54:	449256db 	.word	0x449256db
 8000f58:	24008010 	.word	0x24008010
 8000f5c:	00000000 	.word	0x00000000
 8000f60:	435c0000 	.word	0x435c0000
 8000f64:	42640000 	.word	0x42640000
 8000f68:	38ffe802 	.word	0x38ffe802
 8000f6c:	58020400 	.word	0x58020400
 8000f70:	58020800 	.word	0x58020800
 8000f74:	58020000 	.word	0x58020000
 8000f78:	20000051 	.word	0x20000051
 8000f7c:	200130c4 	.word	0x200130c4
 8000f80:	20005054 	.word	0x20005054
 8000f84:	20000052 	.word	0x20000052
 8000f88:	200051d0 	.word	0x200051d0
 8000f8c:	20005074 	.word	0x20005074
 8000f90:	2000519c 	.word	0x2000519c
 8000f94:	20005078 	.word	0x20005078
 8000f98:	3a03126f 	.word	0x3a03126f
 8000f9c:	20013010 	.word	0x20013010
 8000fa0:	20005580 	.word	0x20005580
 8000fa4:	20005014 	.word	0x20005014
 8000fa8:	2000006c 	.word	0x2000006c
 8000fac:	f8df b498 	ldr.w	fp, [pc, #1176]	; 8001448 <audioInit+0xde8>

		for(int i = 0; i < NUM_OSC; i++)
		{


			tMBSaw_init(&saw[i][v],  &leaf);
 8000fb0:	4ce0      	ldr	r4, [pc, #896]	; (8001334 <audioInit+0xcd4>)

			tMBSawPulse_init(&sawPaired[i][v], &leaf);

			tMBSineTri_init(&sinePaired[i][v],&leaf);

			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8000fb2:	eddf bae1 	vldr	s23, [pc, #900]	; 8001338 <audioInit+0xcd8>


		}
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8000fb6:	ed9f cae1 	vldr	s24, [pc, #900]	; 800133c <audioInit+0xcdc>
 8000fba:	eddf 8ae1 	vldr	s17, [pc, #900]	; 8001340 <audioInit+0xce0>
					                                 0.99999f, 0.0f, 0.01f,
					                                 0.01f, 0, &mediumPool);

		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &mediumPool);
 8000fbe:	ed9f 9ae1 	vldr	s18, [pc, #900]	; 8001344 <audioInit+0xce4>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
		}
		//noise
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8000fc2:	eddf aae1 	vldr	s21, [pc, #900]	; 8001348 <audioInit+0xce8>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8000fc6:	e9cd 3601 	strd	r3, r6, [sp, #4]
    float x = 0.0f;
 8000fca:	2500      	movs	r5, #0
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8000fcc:	ed9f 8adf 	vldr	s16, [pc, #892]	; 800134c <audioInit+0xcec>
			tMBSaw_init(&saw[i][v],  &leaf);
 8000fd0:	4bdf      	ldr	r3, [pc, #892]	; (8001350 <audioInit+0xcf0>)
 8000fd2:	4621      	mov	r1, r4
 8000fd4:	1998      	adds	r0, r3, r6
 8000fd6:	4428      	add	r0, r5
 8000fd8:	f019 fc4e 	bl	801a878 <tMBSaw_init>
			tMBPulse_init(&pulse[i][v], &leaf);
 8000fdc:	4bdd      	ldr	r3, [pc, #884]	; (8001354 <audioInit+0xcf4>)
 8000fde:	4621      	mov	r1, r4
 8000fe0:	1998      	adds	r0, r3, r6
 8000fe2:	4428      	add	r0, r5
 8000fe4:	f016 fd26 	bl	8017a34 <tMBPulse_init>
			tCycle_init(&sine[i][v],  &leaf);
 8000fe8:	4bdb      	ldr	r3, [pc, #876]	; (8001358 <audioInit+0xcf8>)
 8000fea:	4621      	mov	r1, r4
 8000fec:	1998      	adds	r0, r3, r6
 8000fee:	4428      	add	r0, r5
 8000ff0:	f016 fc60 	bl	80178b4 <tCycle_init>
			tMBTriangle_init(&tri[i][v],  &leaf);
 8000ff4:	4bd9      	ldr	r3, [pc, #868]	; (800135c <audioInit+0xcfc>)
 8000ff6:	4621      	mov	r1, r4
 8000ff8:	1998      	adds	r0, r3, r6
 8000ffa:	4428      	add	r0, r5
 8000ffc:	f017 fb06 	bl	801860c <tMBTriangle_init>
			tMBSawPulse_init(&sawPaired[i][v], &leaf);
 8001000:	4bd7      	ldr	r3, [pc, #860]	; (8001360 <audioInit+0xd00>)
 8001002:	4621      	mov	r1, r4
 8001004:	1998      	adds	r0, r3, r6
 8001006:	4428      	add	r0, r5
 8001008:	f019 fef4 	bl	801adf4 <tMBSawPulse_init>
			tMBSineTri_init(&sinePaired[i][v],&leaf);
 800100c:	4bd5      	ldr	r3, [pc, #852]	; (8001364 <audioInit+0xd04>)
 800100e:	4621      	mov	r1, r4
 8001010:	1998      	adds	r0, r3, r6
 8001012:	4428      	add	r0, r5
 8001014:	f018 fb70 	bl	80196f8 <tMBSineTri_init>
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 8001018:	4bd3      	ldr	r3, [pc, #844]	; (8001368 <audioInit+0xd08>)
 800101a:	eef0 0a48 	vmov.f32	s1, s16
 800101e:	4621      	mov	r1, r4
 8001020:	1998      	adds	r0, r3, r6
 8001022:	eeb0 0a6b 	vmov.f32	s0, s23
 8001026:	4428      	add	r0, r5
		for(int i = 0; i < NUM_OSC; i++)
 8001028:	3508      	adds	r5, #8
			tExpSmooth_init(&pitchSmoother[i][v], 64.0f, 0.02f, &leaf);
 800102a:	f014 faf1 	bl	8015610 <tExpSmooth_init>
		for(int i = 0; i < NUM_OSC; i++)
 800102e:	2d18      	cmp	r5, #24
 8001030:	d1ce      	bne.n	8000fd0 <audioInit+0x970>
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8001032:	48ce      	ldr	r0, [pc, #824]	; (800136c <audioInit+0xd0c>)
 8001034:	eef0 2a4c 	vmov.f32	s5, s24
 8001038:	eef0 1a68 	vmov.f32	s3, s17
 800103c:	ed9f 2abf 	vldr	s4, [pc, #764]	; 800133c <audioInit+0xcdc>
 8001040:	ed9f 1acb 	vldr	s2, [pc, #812]	; 8001370 <audioInit+0xd10>
 8001044:	2200      	movs	r2, #0
 8001046:	eddf 0acb 	vldr	s1, [pc, #812]	; 8001374 <audioInit+0xd14>
 800104a:	2104      	movs	r1, #4
 800104c:	ed9f 0aca 	vldr	s0, [pc, #808]	; 8001378 <audioInit+0xd18>
 8001050:	4430      	add	r0, r6
 8001052:	4bca      	ldr	r3, [pc, #808]	; (800137c <audioInit+0xd1c>)
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8001054:	4635      	mov	r5, r6
		tSimpleLivingString3_initToPool(&livStr[v], 4, 220.0f, 17000.0f,
 8001056:	f01b f9c7 	bl	801c3e8 <tSimpleLivingString3_initToPool>
		tLivingString2_initToPool(&strings[v], 100.0f, 0.6f, 0.3f, .9f, 0.0f, .9999f, .9999f, 0.0f, 0.05f, 0.05f, 1, &mediumPool);
 800105a:	4bc9      	ldr	r3, [pc, #804]	; (8001380 <audioInit+0xd20>)
 800105c:	ed9f 3ac9 	vldr	s6, [pc, #804]	; 8001384 <audioInit+0xd24>
 8001060:	eef0 4a49 	vmov.f32	s9, s18
 8001064:	1998      	adds	r0, r3, r6
 8001066:	eef0 3a68 	vmov.f32	s7, s17
 800106a:	eef0 2a43 	vmov.f32	s5, s6
 800106e:	ed9f 4ab5 	vldr	s8, [pc, #724]	; 8001344 <audioInit+0xce4>
 8001072:	ed9f 2ab3 	vldr	s4, [pc, #716]	; 8001340 <audioInit+0xce0>
 8001076:	2101      	movs	r1, #1
 8001078:	eddf 1ac3 	vldr	s3, [pc, #780]	; 8001388 <audioInit+0xd28>
 800107c:	f106 0710 	add.w	r7, r6, #16
 8001080:	ed9f 1ac2 	vldr	s2, [pc, #776]	; 800138c <audioInit+0xd2c>
 8001084:	eddf 0ac2 	vldr	s1, [pc, #776]	; 8001390 <audioInit+0xd30>
 8001088:	4abc      	ldr	r2, [pc, #752]	; (800137c <audioInit+0xd1c>)
 800108a:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8001394 <audioInit+0xd34>
 800108e:	9003      	str	r0, [sp, #12]
 8001090:	f01b fcf0 	bl	801ca74 <tLivingString2_initToPool>
		tLivingString2_setBrightness(&strings[v], .99f);
 8001094:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8001398 <audioInit+0xd38>
 8001098:	9803      	ldr	r0, [sp, #12]
 800109a:	f01b fe99 	bl	801cdd0 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[v], .5f);
 800109e:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80010a2:	9803      	ldr	r0, [sp, #12]
 80010a4:	f01b fe50 	bl	801cd48 <tLivingString2_setPickPos>
		tLivingString2_setPrepPos(&strings[v], .4f);
 80010a8:	ed9f 0abc 	vldr	s0, [pc, #752]	; 800139c <audioInit+0xd3c>
 80010ac:	9803      	ldr	r0, [sp, #12]
 80010ae:	f01b fe5d 	bl	801cd6c <tLivingString2_setPrepPos>
		tLivingString2_setPrepIndex(&strings[v], 0.0f);
 80010b2:	eeb0 0a68 	vmov.f32	s0, s17
 80010b6:	9803      	ldr	r0, [sp, #12]
 80010b8:	f01b fe7c 	bl	801cdb4 <tLivingString2_setPrepIndex>
		tLivingString2_setPickupPos(&strings[v], 1.0f);
 80010bc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80010c0:	9803      	ldr	r0, [sp, #12]
 80010c2:	f01b fe65 	bl	801cd90 <tLivingString2_setPickupPos>
		tADSRT_init(&fenvelopes[v], 0.0f,  50.0f, 0.0f, 200.0f, decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 80010c6:	4ab6      	ldr	r2, [pc, #728]	; (80013a0 <audioInit+0xd40>)
 80010c8:	eeb0 1a68 	vmov.f32	s2, s17
 80010cc:	4623      	mov	r3, r4
 80010ce:	eddf 1ab5 	vldr	s3, [pc, #724]	; 80013a4 <audioInit+0xd44>
 80010d2:	1990      	adds	r0, r2, r6
 80010d4:	eddf 0ab4 	vldr	s1, [pc, #720]	; 80013a8 <audioInit+0xd48>
 80010d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010dc:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8001340 <audioInit+0xce0>
 80010e0:	49b2      	ldr	r1, [pc, #712]	; (80013ac <audioInit+0xd4c>)
 80010e2:	f013 ff97 	bl	8015014 <tADSRT_init>
		tVZFilter_init(&noiseFilt, BandpassPeak, 1500.0f, 1.5f, &leaf);
 80010e6:	eef7 0a08 	vmov.f32	s1, #120	; 0x3fc00000  1.5
 80010ea:	4622      	mov	r2, r4
 80010ec:	ed9f 0ab0 	vldr	s0, [pc, #704]	; 80013b0 <audioInit+0xd50>
 80010f0:	2103      	movs	r1, #3
 80010f2:	48b0      	ldr	r0, [pc, #704]	; (80013b4 <audioInit+0xd54>)
 80010f4:	f014 ffb4 	bl	8016060 <tVZFilter_init>
		tVZFilter_init(&noiseFilt2, Lowpass, 800.0f, 0.9f, &leaf);
 80010f8:	4622      	mov	r2, r4
 80010fa:	2101      	movs	r1, #1
 80010fc:	48ae      	ldr	r0, [pc, #696]	; (80013b8 <audioInit+0xd58>)
 80010fe:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8001388 <audioInit+0xd28>
 8001102:	ed9f 0aae 	vldr	s0, [pc, #696]	; 80013bc <audioInit+0xd5c>
 8001106:	f014 ffab 	bl	8016060 <tVZFilter_init>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 800110a:	4622      	mov	r2, r4
 800110c:	2100      	movs	r1, #0
 800110e:	48ac      	ldr	r0, [pc, #688]	; (80013c0 <audioInit+0xd60>)
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 8001110:	eddf 9aac 	vldr	s19, [pc, #688]	; 80013c4 <audioInit+0xd64>
 8001114:	ed9f 8aac 	vldr	s16, [pc, #688]	; 80013c8 <audioInit+0xd68>
		tNoise_init(&myNoise, WhiteNoise, &leaf);
 8001118:	f016 fc2c 	bl	8017974 <tNoise_init>
			tSVF_init(&lowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 800111c:	4bab      	ldr	r3, [pc, #684]	; (80013cc <audioInit+0xd6c>)
 800111e:	eef0 0a69 	vmov.f32	s1, s19
 8001122:	eeb0 0a48 	vmov.f32	s0, s16
 8001126:	2101      	movs	r1, #1
 8001128:	1958      	adds	r0, r3, r5
 800112a:	4622      	mov	r2, r4
 800112c:	f014 fc2e 	bl	801598c <tSVF_init>
			tSVF_init(&highpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 8001130:	4ba7      	ldr	r3, [pc, #668]	; (80013d0 <audioInit+0xd70>)
 8001132:	eef0 0a69 	vmov.f32	s1, s19
 8001136:	4622      	mov	r2, r4
 8001138:	1958      	adds	r0, r3, r5
 800113a:	eeb0 0a48 	vmov.f32	s0, s16
 800113e:	2100      	movs	r1, #0
 8001140:	f014 fc24 	bl	801598c <tSVF_init>
			tSVF_init(&bandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 8001144:	4ba3      	ldr	r3, [pc, #652]	; (80013d4 <audioInit+0xd74>)
 8001146:	4622      	mov	r2, r4
 8001148:	eef0 0a69 	vmov.f32	s1, s19
 800114c:	1958      	adds	r0, r3, r5
 800114e:	eeb0 0a48 	vmov.f32	s0, s16
 8001152:	2102      	movs	r1, #2
 8001154:	f014 fc1a 	bl	801598c <tSVF_init>
			tDiodeFilter_init(&diodeFilters[i][v], 2000.f, 0.5f, &leaf);
 8001158:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <audioInit+0xd78>)
 800115a:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800115e:	4621      	mov	r1, r4
 8001160:	1958      	adds	r0, r3, r5
 8001162:	eeb0 0a48 	vmov.f32	s0, s16
 8001166:	f015 fa6f 	bl	8016648 <tDiodeFilter_init>
			tVZFilter_init(&VZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 800116a:	4b9c      	ldr	r3, [pc, #624]	; (80013dc <audioInit+0xd7c>)
 800116c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001170:	4622      	mov	r2, r4
 8001172:	1958      	adds	r0, r3, r5
 8001174:	eeb0 0a48 	vmov.f32	s0, s16
 8001178:	2105      	movs	r1, #5
 800117a:	f014 ff71 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&VZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 800117e:	4b98      	ldr	r3, [pc, #608]	; (80013e0 <audioInit+0xd80>)
 8001180:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001184:	4622      	mov	r2, r4
 8001186:	1958      	adds	r0, r3, r5
 8001188:	eeb0 0a48 	vmov.f32	s0, s16
 800118c:	2106      	movs	r1, #6
 800118e:	f014 ff67 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&VZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 8001192:	4b94      	ldr	r3, [pc, #592]	; (80013e4 <audioInit+0xd84>)
 8001194:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001198:	4622      	mov	r2, r4
 800119a:	1958      	adds	r0, r3, r5
 800119c:	eeb0 0a48 	vmov.f32	s0, s16
 80011a0:	2107      	movs	r1, #7
 80011a2:	f014 ff5d 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&VZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 80011a6:	4b90      	ldr	r3, [pc, #576]	; (80013e8 <audioInit+0xd88>)
 80011a8:	4622      	mov	r2, r4
 80011aa:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011ae:	1958      	adds	r0, r3, r5
 80011b0:	eeb0 0a48 	vmov.f32	s0, s16
 80011b4:	2104      	movs	r1, #4
 80011b6:	f014 ff53 	bl	8016060 <tVZFilter_init>
			tLadderFilter_init(&Ladderfilter[i][v], 2000.f, 1.0f, &leaf);
 80011ba:	4b8c      	ldr	r3, [pc, #560]	; (80013ec <audioInit+0xd8c>)
 80011bc:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80011c0:	4621      	mov	r1, r4
 80011c2:	1958      	adds	r0, r3, r5
 80011c4:	eeb0 0a48 	vmov.f32	s0, s16
 80011c8:	f015 fdd2 	bl	8016d70 <tLadderFilter_init>
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80011cc:	4b88      	ldr	r3, [pc, #544]	; (80013f0 <audioInit+0xd90>)
 80011ce:	eef0 0a4c 	vmov.f32	s1, s24
 80011d2:	4621      	mov	r1, r4
 80011d4:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_FILT; i++)
 80011d6:	3508      	adds	r5, #8
			tExpSmooth_init(&filterCutoffSmoother[i][v], 64.0f, 0.01f, &leaf);
 80011d8:	eeb0 0a6b 	vmov.f32	s0, s23
 80011dc:	f014 fa18 	bl	8015610 <tExpSmooth_init>
		for (int i = 0; i < NUM_FILT; i++)
 80011e0:	42af      	cmp	r7, r5
 80011e2:	d19b      	bne.n	800111c <audioInit+0xabc>
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80011e4:	4b83      	ldr	r3, [pc, #524]	; (80013f4 <audioInit+0xd94>)
 80011e6:	2500      	movs	r5, #0
 80011e8:	eb03 0806 	add.w	r8, r3, r6
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80011ec:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <audioInit+0xd98>)
 80011ee:	199f      	adds	r7, r3, r6
			tIntPhasor_init(&lfoSaw[i][v], &leaf);
 80011f0:	eb08 0005 	add.w	r0, r8, r5
 80011f4:	4621      	mov	r1, r4
 80011f6:	f01a fd9f 	bl	801bd38 <tIntPhasor_init>
			tSquareLFO_init(&lfoPulse[i][v], &leaf);
 80011fa:	1978      	adds	r0, r7, r5
 80011fc:	4621      	mov	r1, r4
 80011fe:	f01a fde1 	bl	801bdc4 <tSquareLFO_init>
			tCycle_init(&lfoSine[i][v], &leaf);
 8001202:	4b7e      	ldr	r3, [pc, #504]	; (80013fc <audioInit+0xd9c>)
 8001204:	4621      	mov	r1, r4
 8001206:	1998      	adds	r0, r3, r6
 8001208:	4428      	add	r0, r5
 800120a:	f016 fb53 	bl	80178b4 <tCycle_init>
			tTriLFO_init(&lfoTri[i][v], &leaf);
 800120e:	4b7c      	ldr	r3, [pc, #496]	; (8001400 <audioInit+0xda0>)
 8001210:	4621      	mov	r1, r4
 8001212:	1998      	adds	r0, r3, r6
 8001214:	4428      	add	r0, r5
 8001216:	f01a ffc1 	bl	801c19c <tTriLFO_init>
			tSineTriLFO_init(&lfoSineTri[i][v], &leaf);
 800121a:	4b7a      	ldr	r3, [pc, #488]	; (8001404 <audioInit+0xda4>)
 800121c:	4621      	mov	r1, r4
 800121e:	1998      	adds	r0, r3, r6
 8001220:	4428      	add	r0, r5
 8001222:	f01b f817 	bl	801c254 <tSineTriLFO_init>
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8001226:	4b78      	ldr	r3, [pc, #480]	; (8001408 <audioInit+0xda8>)
 8001228:	4621      	mov	r1, r4
 800122a:	1998      	adds	r0, r3, r6
 800122c:	4428      	add	r0, r5
		for (int i = 0; i < NUM_LFOS; i++)
 800122e:	3508      	adds	r5, #8
			tSawSquareLFO_init(&lfoSawSquare[i][v], &leaf);
 8001230:	f01a fef2 	bl	801c018 <tSawSquareLFO_init>
		for (int i = 0; i < NUM_LFOS; i++)
 8001234:	2d20      	cmp	r5, #32
 8001236:	d1db      	bne.n	80011f0 <audioInit+0xb90>
		tVZFilter_init(&noiseShelf1[v], Lowshelf, 80.0f, 6.0f, &leaf);
 8001238:	4b74      	ldr	r3, [pc, #464]	; (800140c <audioInit+0xdac>)
 800123a:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 800123e:	ed9f 0a74 	vldr	s0, [pc, #464]	; 8001410 <audioInit+0xdb0>
 8001242:	2106      	movs	r1, #6
 8001244:	1998      	adds	r0, r3, r6
 8001246:	4622      	mov	r2, r4
 8001248:	f014 ff0a 	bl	8016060 <tVZFilter_init>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 800124c:	4b71      	ldr	r3, [pc, #452]	; (8001414 <audioInit+0xdb4>)
 800124e:	eef1 0a08 	vmov.f32	s1, #24	; 0x40c00000  6.0
 8001252:	4622      	mov	r2, r4
 8001254:	1998      	adds	r0, r3, r6
 8001256:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8001418 <audioInit+0xdb8>
 800125a:	2107      	movs	r1, #7
		//LEAF_generate_exp(decayExpBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, DECAY_EXP_BUFFER_SIZE);


		for (int i = 0; i < NUM_ENV; i++)
		{
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 800125c:	eddf 9a6f 	vldr	s19, [pc, #444]	; 800141c <audioInit+0xdbc>
		tVZFilter_init(&noiseShelf2[v], Highshelf, 12000.0f, 6.0f, &leaf);
 8001260:	f014 fefe 	bl	8016060 <tVZFilter_init>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 8001264:	4b6e      	ldr	r3, [pc, #440]	; (8001420 <audioInit+0xdc0>)
 8001266:	9f01      	ldr	r7, [sp, #4]
 8001268:	eeb0 0a6a 	vmov.f32	s0, s21
 800126c:	4622      	mov	r2, r4
 800126e:	eddf 0a77 	vldr	s1, [pc, #476]	; 800144c <audioInit+0xdec>
 8001272:	2105      	movs	r1, #5
 8001274:	1998      	adds	r0, r3, r6
 8001276:	f1a7 0520 	sub.w	r5, r7, #32
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 800127a:	ed9f 8a6a 	vldr	s16, [pc, #424]	; 8001424 <audioInit+0xdc4>
		tVZFilter_init(&noiseBell1[v], Bell, 1000.0f, 1.9f, &leaf);
 800127e:	f014 feef 	bl	8016060 <tVZFilter_init>
			tADSRT_init(&envs[i][v], 0.1f,1000.f,0.5f,1.0f,decayExpBuffer, DECAY_EXP_BUFFER_SIZE, &leaf);
 8001282:	4628      	mov	r0, r5
 8001284:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 8001288:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800128c:	4623      	mov	r3, r4
 800128e:	eef0 0a6a 	vmov.f32	s1, s21
 8001292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001296:	eeb0 0a69 	vmov.f32	s0, s19
 800129a:	4944      	ldr	r1, [pc, #272]	; (80013ac <audioInit+0xd4c>)
 800129c:	f013 feba 	bl	8015014 <tADSRT_init>
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80012a0:	4628      	mov	r0, r5
		for (int i = 0; i < NUM_ENV; i++)
 80012a2:	3508      	adds	r5, #8
			tADSRT_setLeakFactor(&envs[i][v], ((1.0f - 0.1f) * 0.00005f) + 0.99995f);
 80012a4:	eeb0 0a48 	vmov.f32	s0, s16
 80012a8:	f013 ff6a 	bl	8015180 <tADSRT_setLeakFactor>
		for (int i = 0; i < NUM_ENV; i++)
 80012ac:	42af      	cmp	r7, r5
 80012ae:	d1e8      	bne.n	8001282 <audioInit+0xc22>
 80012b0:	4b5d      	ldr	r3, [pc, #372]	; (8001428 <audioInit+0xdc8>)
 80012b2:	4635      	mov	r5, r6
		for (int i = 0; i < NUM_EFFECT; i++)
		{
			tCrusher_init(&bc[i][v],&leaf);
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 80012b4:	ed9f ba5d 	vldr	s22, [pc, #372]	; 800142c <audioInit+0xdcc>
 80012b8:	eb03 0806 	add.w	r8, r3, r6
 80012bc:	4b5c      	ldr	r3, [pc, #368]	; (8001430 <audioInit+0xdd0>)
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 80012be:	ed9f aa5d 	vldr	s20, [pc, #372]	; 8001434 <audioInit+0xdd4>
 80012c2:	199f      	adds	r7, r3, r6
 80012c4:	f106 0320 	add.w	r3, r6, #32
			tCycle_init(&mod2[i][v], &leaf);
			tCycle_setFreq(&mod1[i][v], 0.2f);
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);

			//filters
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80012c8:	eddf 9a3e 	vldr	s19, [pc, #248]	; 80013c4 <audioInit+0xd64>
 80012cc:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 80013c8 <audioInit+0xd68>
 80012d0:	e9cd b603 	strd	fp, r6, [sp, #12]
 80012d4:	469b      	mov	fp, r3
			tCrusher_init(&bc[i][v],&leaf);
 80012d6:	4640      	mov	r0, r8
 80012d8:	4621      	mov	r1, r4
 80012da:	f013 fd4f 	bl	8014d7c <tCrusher_init>
			tHighpass_init(&dcBlock1[i][v], 5.0f,&leaf);
 80012de:	4638      	mov	r0, r7
 80012e0:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80012e4:	4621      	mov	r1, r4
 80012e6:	f014 fc4b 	bl	8015b80 <tHighpass_init>
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80012ea:	4b53      	ldr	r3, [pc, #332]	; (8001438 <audioInit+0xdd8>)
 80012ec:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 80012f0:	4621      	mov	r1, r4
 80012f2:	195e      	adds	r6, r3, r5
 80012f4:	4b51      	ldr	r3, [pc, #324]	; (800143c <audioInit+0xddc>)
		for (int i = 0; i < NUM_EFFECT; i++)
 80012f6:	f108 0808 	add.w	r8, r8, #8
 80012fa:	3708      	adds	r7, #8
			tHighpass_init(&dcBlock2[i][v], 5.0f,&leaf);
 80012fc:	1958      	adds	r0, r3, r5
 80012fe:	f014 fc3f 	bl	8015b80 <tHighpass_init>
			tVZFilter_init(&shelf1[i][v], Lowshelf, 80.0f, 32.0f,  &leaf);
 8001302:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <audioInit+0xde0>)
 8001304:	eef0 0a4b 	vmov.f32	s1, s22
 8001308:	ed9f 0a41 	vldr	s0, [pc, #260]	; 8001410 <audioInit+0xdb0>
 800130c:	eb03 0a05 	add.w	sl, r3, r5
 8001310:	4b4c      	ldr	r3, [pc, #304]	; (8001444 <audioInit+0xde4>)
 8001312:	4622      	mov	r2, r4
 8001314:	2106      	movs	r1, #6
 8001316:	eb03 0905 	add.w	r9, r3, r5
 800131a:	4630      	mov	r0, r6
 800131c:	f014 fea0 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&shelf2[i][v], Highshelf, 12000.0f, 32.0f, &leaf);
 8001320:	4650      	mov	r0, sl
 8001322:	eef0 0a4b 	vmov.f32	s1, s22
 8001326:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 8001418 <audioInit+0xdb8>
 800132a:	4622      	mov	r2, r4
 800132c:	2107      	movs	r1, #7
 800132e:	f014 fe97 	bl	8016060 <tVZFilter_init>
 8001332:	e08d      	b.n	8001450 <audioInit+0xdf0>
 8001334:	200051d0 	.word	0x200051d0
 8001338:	42800000 	.word	0x42800000
 800133c:	3c23d70a 	.word	0x3c23d70a
 8001340:	00000000 	.word	0x00000000
 8001344:	3d4ccccd 	.word	0x3d4ccccd
 8001348:	447a0000 	.word	0x447a0000
 800134c:	3ca3d70a 	.word	0x3ca3d70a
 8001350:	20005a1c 	.word	0x20005a1c
 8001354:	20005600 	.word	0x20005600
 8001358:	20005ad8 	.word	0x20005ad8
 800135c:	20012fe8 	.word	0x20012fe8
 8001360:	20005a34 	.word	0x20005a34
 8001364:	20005af0 	.word	0x20005af0
 8001368:	200055a8 	.word	0x200055a8
 800136c:	200052f4 	.word	0x200052f4
 8001370:	3f7fff58 	.word	0x3f7fff58
 8001374:	4684d000 	.word	0x4684d000
 8001378:	435c0000 	.word	0x435c0000
 800137c:	20005410 	.word	0x20005410
 8001380:	20012f88 	.word	0x20012f88
 8001384:	3f7ff972 	.word	0x3f7ff972
 8001388:	3f666666 	.word	0x3f666666
 800138c:	3e99999a 	.word	0x3e99999a
 8001390:	3f19999a 	.word	0x3f19999a
 8001394:	42c80000 	.word	0x42c80000
 8001398:	3f7d70a4 	.word	0x3f7d70a4
 800139c:	3ecccccd 	.word	0x3ecccccd
 80013a0:	20005014 	.word	0x20005014
 80013a4:	43480000 	.word	0x43480000
 80013a8:	42480000 	.word	0x42480000
 80013ac:	20000fc8 	.word	0x20000fc8
 80013b0:	44bb8000 	.word	0x44bb8000
 80013b4:	20005470 	.word	0x20005470
 80013b8:	20005474 	.word	0x20005474
 80013bc:	44480000 	.word	0x44480000
 80013c0:	20005454 	.word	0x20005454
 80013c4:	3f333333 	.word	0x3f333333
 80013c8:	44fa0000 	.word	0x44fa0000
 80013cc:	200052fc 	.word	0x200052fc
 80013d0:	200050e8 	.word	0x200050e8
 80013d4:	20000ad4 	.word	0x20000ad4
 80013d8:	20004fcc 	.word	0x20004fcc
 80013dc:	2000099c 	.word	0x2000099c
 80013e0:	2000098c 	.word	0x2000098c
 80013e4:	2000097c 	.word	0x2000097c
 80013e8:	2000096c 	.word	0x2000096c
 80013ec:	2000095c 	.word	0x2000095c
 80013f0:	2000501c 	.word	0x2000501c
 80013f4:	20005244 	.word	0x20005244
 80013f8:	20005224 	.word	0x20005224
 80013fc:	20005294 	.word	0x20005294
 8001400:	200052d4 	.word	0x200052d4
 8001404:	200052b4 	.word	0x200052b4
 8001408:	20005264 	.word	0x20005264
 800140c:	20005488 	.word	0x20005488
 8001410:	42a00000 	.word	0x42a00000
 8001414:	20005490 	.word	0x20005490
 8001418:	463b8000 	.word	0x463b8000
 800141c:	3dcccccd 	.word	0x3dcccccd
 8001420:	20005468 	.word	0x20005468
 8001424:	3f7fffac 	.word	0x3f7fffac
 8001428:	20000aec 	.word	0x20000aec
 800142c:	42000000 	.word	0x42000000
 8001430:	20000eb0 	.word	0x20000eb0
 8001434:	47bb8000 	.word	0x47bb8000
 8001438:	20005a98 	.word	0x20005a98
 800143c:	20000ed0 	.word	0x20000ed0
 8001440:	20005ab8 	.word	0x20005ab8
 8001444:	20000b0c 	.word	0x20000b0c
 8001448:	20005410 	.word	0x20005410
 800144c:	3ff33333 	.word	0x3ff33333
			tVZFilter_init(&bell1[i][v], Bell, 1000.0f, 1.9f, &leaf);
 8001450:	ed5f 0a02 	vldr	s1, [pc, #-8]	; 800144c <audioInit+0xdec>
 8001454:	4622      	mov	r2, r4
 8001456:	2105      	movs	r1, #5
 8001458:	4648      	mov	r0, r9
 800145a:	eeb0 0a6a 	vmov.f32	s0, s21
 800145e:	f014 fdff 	bl	8016060 <tVZFilter_init>
			tVZFilter_setSampleRate(&shelf1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8001462:	eeb0 0a4a 	vmov.f32	s0, s20
 8001466:	4630      	mov	r0, r6
 8001468:	f014 ffac 	bl	80163c4 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&shelf2[i][v], SAMPLE_RATE * OVERSAMPLE);
 800146c:	4650      	mov	r0, sl
 800146e:	eeb0 0a4a 	vmov.f32	s0, s20
 8001472:	f014 ffa7 	bl	80163c4 <tVZFilter_setSampleRate>
			tVZFilter_setSampleRate(&bell1[i][v], SAMPLE_RATE * OVERSAMPLE);
 8001476:	eeb0 0a4a 	vmov.f32	s0, s20
 800147a:	4648      	mov	r0, r9
 800147c:	f014 ffa2 	bl	80163c4 <tVZFilter_setSampleRate>
			tCycle_init(&mod1[i][v], &leaf);
 8001480:	4b64      	ldr	r3, [pc, #400]	; (8001614 <audioInit+0xfb4>)
 8001482:	4621      	mov	r1, r4
 8001484:	eb03 0a05 	add.w	sl, r3, r5
 8001488:	4b63      	ldr	r3, [pc, #396]	; (8001618 <audioInit+0xfb8>)
 800148a:	eb03 0905 	add.w	r9, r3, r5
 800148e:	4650      	mov	r0, sl
 8001490:	f016 fa10 	bl	80178b4 <tCycle_init>
			tCycle_init(&mod2[i][v], &leaf);
 8001494:	4621      	mov	r1, r4
 8001496:	4648      	mov	r0, r9
 8001498:	f016 fa0c 	bl	80178b4 <tCycle_init>
			tCycle_setFreq(&mod1[i][v], 0.2f);
 800149c:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 800161c <audioInit+0xfbc>
 80014a0:	4650      	mov	r0, sl
 80014a2:	f016 fa49 	bl	8017938 <tCycle_setFreq>
			tCycle_setFreq(&mod2[i][v], 0.22222222222f);
 80014a6:	4648      	mov	r0, r9
 80014a8:	ed9f 0a5d 	vldr	s0, [pc, #372]	; 8001620 <audioInit+0xfc0>
 80014ac:	f016 fa44 	bl	8017938 <tCycle_setFreq>
			tSVF_init(&FXlowpass[i][v], SVFTypeLowpass, 2000.f, 0.7f, &leaf);
 80014b0:	4b5c      	ldr	r3, [pc, #368]	; (8001624 <audioInit+0xfc4>)
 80014b2:	eef0 0a69 	vmov.f32	s1, s19
 80014b6:	4622      	mov	r2, r4
 80014b8:	1958      	adds	r0, r3, r5
 80014ba:	eeb0 0a48 	vmov.f32	s0, s16
 80014be:	2101      	movs	r1, #1
 80014c0:	f014 fa64 	bl	801598c <tSVF_init>
			tSVF_init(&FXhighpass[i][v], SVFTypeHighpass, 2000.f, 0.7f, &leaf);
 80014c4:	4b58      	ldr	r3, [pc, #352]	; (8001628 <audioInit+0xfc8>)
 80014c6:	eef0 0a69 	vmov.f32	s1, s19
 80014ca:	4622      	mov	r2, r4
 80014cc:	1958      	adds	r0, r3, r5
 80014ce:	eeb0 0a48 	vmov.f32	s0, s16
 80014d2:	2100      	movs	r1, #0
 80014d4:	f014 fa5a 	bl	801598c <tSVF_init>
			tSVF_init(&FXbandpass[i][v], SVFTypeBandpass, 2000.f, 0.7f, &leaf);
 80014d8:	4b54      	ldr	r3, [pc, #336]	; (800162c <audioInit+0xfcc>)
 80014da:	4622      	mov	r2, r4
 80014dc:	eef0 0a69 	vmov.f32	s1, s19
 80014e0:	1958      	adds	r0, r3, r5
 80014e2:	eeb0 0a48 	vmov.f32	s0, s16
 80014e6:	2102      	movs	r1, #2
 80014e8:	f014 fa50 	bl	801598c <tSVF_init>
			tDiodeFilter_init(&FXdiodeFilters[i][v], 2000.f, 1.0f, &leaf);
 80014ec:	4b50      	ldr	r3, [pc, #320]	; (8001630 <audioInit+0xfd0>)
 80014ee:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80014f2:	4621      	mov	r1, r4
 80014f4:	1958      	adds	r0, r3, r5
 80014f6:	eeb0 0a48 	vmov.f32	s0, s16
 80014fa:	f015 f8a5 	bl	8016648 <tDiodeFilter_init>
			tVZFilter_init(&FXVZfilterPeak[i][v], Bell, 2000.f, 1.0f, &leaf);
 80014fe:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <audioInit+0xfd4>)
 8001500:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001504:	4622      	mov	r2, r4
 8001506:	1958      	adds	r0, r3, r5
 8001508:	eeb0 0a48 	vmov.f32	s0, s16
 800150c:	2105      	movs	r1, #5
 800150e:	f014 fda7 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterLS[i][v], Lowshelf, 2000.f, 1.0f, &leaf);
 8001512:	4b49      	ldr	r3, [pc, #292]	; (8001638 <audioInit+0xfd8>)
 8001514:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001518:	4622      	mov	r2, r4
 800151a:	1958      	adds	r0, r3, r5
 800151c:	eeb0 0a48 	vmov.f32	s0, s16
 8001520:	2106      	movs	r1, #6
 8001522:	f014 fd9d 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterHS[i][v], Highshelf, 2000.f, 1.0f, &leaf);
 8001526:	4b45      	ldr	r3, [pc, #276]	; (800163c <audioInit+0xfdc>)
 8001528:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800152c:	4622      	mov	r2, r4
 800152e:	1958      	adds	r0, r3, r5
 8001530:	eeb0 0a48 	vmov.f32	s0, s16
 8001534:	2107      	movs	r1, #7
 8001536:	f014 fd93 	bl	8016060 <tVZFilter_init>
			tVZFilter_init(&FXVZfilterBR[i][v], BandReject, 2000.f, 1.0f, &leaf);
 800153a:	4b41      	ldr	r3, [pc, #260]	; (8001640 <audioInit+0xfe0>)
 800153c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001540:	4622      	mov	r2, r4
 8001542:	1958      	adds	r0, r3, r5
 8001544:	eeb0 0a48 	vmov.f32	s0, s16
 8001548:	2104      	movs	r1, #4
 800154a:	f014 fd89 	bl	8016060 <tVZFilter_init>
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <audioInit+0xfe4>)
 8001550:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001554:	4621      	mov	r1, r4
 8001556:	1958      	adds	r0, r3, r5
		for (int i = 0; i < NUM_EFFECT; i++)
 8001558:	3508      	adds	r5, #8
			tLadderFilter_init(&FXLadderfilter[i][v], 2000.f, 1.0f, &leaf);
 800155a:	eeb0 0a48 	vmov.f32	s0, s16
 800155e:	f015 fc07 	bl	8016d70 <tLadderFilter_init>
		for (int i = 0; i < NUM_EFFECT; i++)
 8001562:	45ab      	cmp	fp, r5
 8001564:	f47f aeb7 	bne.w	80012d6 <audioInit+0xc76>
 8001568:	e9dd b603 	ldrd	fp, r6, [sp, #12]
 800156c:	f5ab 7580 	sub.w	r5, fp, #256	; 0x100
		}

		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
		{
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
 8001570:	4628      	mov	r0, r5
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8001572:	3508      	adds	r5, #8
			tExpSmooth_init(&mapSmoothers[i][v], 0.0f, 0.05f, &leaf);
 8001574:	eef0 0a49 	vmov.f32	s1, s18
 8001578:	4621      	mov	r1, r4
 800157a:	eeb0 0a68 	vmov.f32	s0, s17
 800157e:	f014 f847 	bl	8015610 <tExpSmooth_init>
		for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8001582:	455d      	cmp	r5, fp
 8001584:	d1f4      	bne.n	8001570 <audioInit+0xf10>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 8001586:	9b01      	ldr	r3, [sp, #4]
		}

		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 8001588:	2102      	movs	r1, #2
 800158a:	2200      	movs	r2, #0
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 800158c:	f10b 0b04 	add.w	fp, fp, #4
 8001590:	3304      	adds	r3, #4
 8001592:	9301      	str	r3, [sp, #4]
		tOversampler_init(&os[v], OVERSAMPLE, 0, &leaf);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <audioInit+0xfe8>)
 8001596:	1998      	adds	r0, r3, r6
 8001598:	4623      	mov	r3, r4
 800159a:	f013 faf1 	bl	8014b80 <tOversampler_init>

		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <audioInit+0xfec>)
 80015a0:	4622      	mov	r2, r4
 80015a2:	eddf 0a2b 	vldr	s1, [pc, #172]	; 8001650 <audioInit+0xff0>
 80015a6:	1998      	adds	r0, r3, r6
 80015a8:	ed9f 0a2a 	vldr	s0, [pc, #168]	; 8001654 <audioInit+0xff4>
 80015ac:	2101      	movs	r1, #1
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80015ae:	3604      	adds	r6, #4
		tSVF_init(&finalLowpass[v], SVFTypeLowpass, 19000.f, 0.3f, &leaf);
 80015b0:	f014 f9ec 	bl	801598c <tSVF_init>
	for (int v = 0; v < NUM_STRINGS_PER_BOARD; v++)
 80015b4:	9b02      	ldr	r3, [sp, #8]
 80015b6:	b99b      	cbnz	r3, 80015e0 <audioInit+0xf80>
 80015b8:	2301      	movs	r3, #1
 80015ba:	9302      	str	r3, [sp, #8]
 80015bc:	e505      	b.n	8000fca <audioInit+0x96a>
		if (boardNumber == 0)
 80015be:	b14b      	cbz	r3, 80015d4 <audioInit+0xf74>
		else if (boardNumber == 1)
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d022      	beq.n	800160a <audioInit+0xfaa>
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80015c4:	3b01      	subs	r3, #1
 80015c6:	4a24      	ldr	r2, [pc, #144]	; (8001658 <audioInit+0xff8>)
			numStringsThisBoard = 2;
 80015c8:	4924      	ldr	r1, [pc, #144]	; (800165c <audioInit+0xffc>)
 80015ca:	2002      	movs	r0, #2
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80015cc:	005b      	lsls	r3, r3, #1
			numStringsThisBoard = 2;
 80015ce:	7008      	strb	r0, [r1, #0]
			firstString = (boardNumber - 1) * NUM_STRINGS_PER_BOARD;
 80015d0:	6013      	str	r3, [r2, #0]
			numStringsThisBoard = 2;
 80015d2:	e458      	b.n	8000e86 <audioInit+0x826>
			firstString = 0;
 80015d4:	4820      	ldr	r0, [pc, #128]	; (8001658 <audioInit+0xff8>)
			numStringsThisBoard = 1;
 80015d6:	2101      	movs	r1, #1
 80015d8:	4a20      	ldr	r2, [pc, #128]	; (800165c <audioInit+0xffc>)
			firstString = 0;
 80015da:	6003      	str	r3, [r0, #0]
			numStringsThisBoard = 1;
 80015dc:	7011      	strb	r1, [r2, #0]
 80015de:	e452      	b.n	8000e86 <audioInit+0x826>
	}

	for (int i = 0; i < AUDIO_BUFFER_SIZE; i++)
	{
		audioOutBuffer[i] = 0;
 80015e0:	2280      	movs	r2, #128	; 0x80
 80015e2:	2100      	movs	r1, #0
 80015e4:	481e      	ldr	r0, [pc, #120]	; (8001660 <audioInit+0x1000>)
 80015e6:	f01b ff75 	bl	801d4d4 <memset>
	}

	// set up the I2S driver to send audio data to the codec (and retrieve input as well)
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80015ea:	2220      	movs	r2, #32
 80015ec:	491c      	ldr	r1, [pc, #112]	; (8001660 <audioInit+0x1000>)
 80015ee:	9805      	ldr	r0, [sp, #20]
 80015f0:	f00c fd62 	bl	800e0b8 <HAL_SAI_Transmit_DMA>
 80015f4:	4b1b      	ldr	r3, [pc, #108]	; (8001664 <audioInit+0x1004>)
 80015f6:	4602      	mov	r2, r0
	// I2C setup messages (it seems to use the masterclock input as it's own internal clock for i2c data, etc)
	// so while we used to set up codec before starting SAI, now we need to set up codec afterwards, and set a flag to make sure it's ready



	HAL_Delay(1);
 80015f8:	9802      	ldr	r0, [sp, #8]
	transmit_status = HAL_SAI_Transmit_DMA(hsaiOut, (uint8_t *)&audioOutBuffer[0], AUDIO_BUFFER_SIZE);
 80015fa:	701a      	strb	r2, [r3, #0]

}
 80015fc:	b007      	add	sp, #28
 80015fe:	ecbd 8b10 	vpop	{d8-d15}
 8001602:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	HAL_Delay(1);
 8001606:	f007 bce3 	b.w	8008fd0 <HAL_Delay>
			firstString = 1;
 800160a:	4913      	ldr	r1, [pc, #76]	; (8001658 <audioInit+0xff8>)
			numStringsThisBoard = 1;
 800160c:	4a13      	ldr	r2, [pc, #76]	; (800165c <audioInit+0xffc>)
			firstString = 1;
 800160e:	600b      	str	r3, [r1, #0]
			numStringsThisBoard = 1;
 8001610:	7013      	strb	r3, [r2, #0]
 8001612:	e438      	b.n	8000e86 <audioInit+0x826>
 8001614:	20005414 	.word	0x20005414
 8001618:	20005434 	.word	0x20005434
 800161c:	3e4ccccd 	.word	0x3e4ccccd
 8001620:	3e638e39 	.word	0x3e638e39
 8001624:	2000093c 	.word	0x2000093c
 8001628:	2000091c 	.word	0x2000091c
 800162c:	200008dc 	.word	0x200008dc
 8001630:	200008fc 	.word	0x200008fc
 8001634:	200008bc 	.word	0x200008bc
 8001638:	2000089c 	.word	0x2000089c
 800163c:	2000087c 	.word	0x2000087c
 8001640:	2000085c 	.word	0x2000085c
 8001644:	2000083c 	.word	0x2000083c
 8001648:	2000549c 	.word	0x2000549c
 800164c:	20005044 	.word	0x20005044
 8001650:	3e99999a 	.word	0x3e99999a
 8001654:	46947000 	.word	0x46947000
 8001658:	20005054 	.word	0x20005054
 800165c:	20000052 	.word	0x20000052
 8001660:	30000000 	.word	0x30000000
 8001664:	20012fe0 	.word	0x20012fe0

08001668 <updateStateFromSPIMessage>:
const int syncMap[3] = {2, 0, 1};
float pluckPos = 0.5f;

void updateStateFromSPIMessage(uint8_t offset)
{
	int modeBit = SPI_LEVERS[24 + offset];
 8001668:	4a27      	ldr	r2, [pc, #156]	; (8001708 <updateStateFromSPIMessage+0xa0>)

	neck = (modeBit >> 6) & 1;
	dualSlider = (modeBit >> 5) & 1;

	edit = (modeBit >> 4) & 1;
	voice = SPI_LEVERS[25 + offset];
 800166a:	f8df c0d0 	ldr.w	ip, [pc, #208]	; 800173c <updateStateFromSPIMessage+0xd4>
	int modeBit = SPI_LEVERS[24 + offset];
 800166e:	1811      	adds	r1, r2, r0
{
 8001670:	b4f0      	push	{r4, r5, r6, r7}
	int modeBit = SPI_LEVERS[24 + offset];
 8001672:	7e0b      	ldrb	r3, [r1, #24]
	voice = SPI_LEVERS[25 + offset];
 8001674:	7e49      	ldrb	r1, [r1, #25]
	neck = (modeBit >> 6) & 1;
 8001676:	4f25      	ldr	r7, [pc, #148]	; (800170c <updateStateFromSPIMessage+0xa4>)
	voice = SPI_LEVERS[25 + offset];
 8001678:	f8cc 1000 	str.w	r1, [ip]
	neck = (modeBit >> 6) & 1;
 800167c:	f3c3 1c80 	ubfx	ip, r3, #6, #1
	dualSlider = (modeBit >> 5) & 1;
 8001680:	4e23      	ldr	r6, [pc, #140]	; (8001710 <updateStateFromSPIMessage+0xa8>)
	neck = (modeBit >> 6) & 1;
 8001682:	f8c7 c000 	str.w	ip, [r7]
	dualSlider = (modeBit >> 5) & 1;
 8001686:	f3c3 1740 	ubfx	r7, r3, #5, #1
	edit = (modeBit >> 4) & 1;
 800168a:	4d22      	ldr	r5, [pc, #136]	; (8001714 <updateStateFromSPIMessage+0xac>)

	if (voice != prevVoice)
 800168c:	4c22      	ldr	r4, [pc, #136]	; (8001718 <updateStateFromSPIMessage+0xb0>)
	dualSlider = (modeBit >> 5) & 1;
 800168e:	6037      	str	r7, [r6, #0]
	edit = (modeBit >> 4) & 1;
 8001690:	f3c3 1600 	ubfx	r6, r3, #4, #1
 8001694:	602e      	str	r6, [r5, #0]
	if (voice != prevVoice)
 8001696:	6825      	ldr	r5, [r4, #0]
 8001698:	42a9      	cmp	r1, r5
 800169a:	d005      	beq.n	80016a8 <updateStateFromSPIMessage+0x40>
	{
		if ((voice == 63) || (voice == 62) || (voice == 61))
 800169c:	f1a1 053d 	sub.w	r5, r1, #61	; 0x3d
 80016a0:	2d02      	cmp	r5, #2
 80016a2:	d82a      	bhi.n	80016fa <updateStateFromSPIMessage+0x92>
		{
			currentActivePreset = voice;
 80016a4:	4d1d      	ldr	r5, [pc, #116]	; (800171c <updateStateFromSPIMessage+0xb4>)
 80016a6:	7029      	strb	r1, [r5, #0]

	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
	//octaveIndex = (modeBit & 15);
	//octave = powf(2.0f,((int32_t) (modeBit & 3) - 1 ));

	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016a8:	4410      	add	r0, r2
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	eef2 6a08 	vmov.f32	s13, #40	; 0x41400000  12.0
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016b2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001720 <updateStateFromSPIMessage+0xb8>
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016b6:	f890 c01a 	ldrb.w	ip, [r0, #26]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016ba:	3b05      	subs	r3, #5
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016bc:	7ec2      	ldrb	r2, [r0, #27]
 80016be:	4819      	ldr	r0, [pc, #100]	; (8001724 <updateStateFromSPIMessage+0xbc>)
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016c0:	ee07 3a90 	vmov	s15, r3
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016c4:	eb02 220c 	add.w	r2, r2, ip, lsl #8
	prevVoice = voice;
 80016c8:	6021      	str	r1, [r4, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ce:	4c16      	ldr	r4, [pc, #88]	; (8001728 <updateStateFromSPIMessage+0xc0>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016d0:	b292      	uxth	r2, r2
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016d2:	4916      	ldr	r1, [pc, #88]	; (800172c <updateStateFromSPIMessage+0xc4>)
	volumePedalInt = ((uint16_t)SPI_LEVERS[26 + offset] << 8) + ((uint16_t)SPI_LEVERS[27 + offset] & 0xff);
 80016d4:	8002      	strh	r2, [r0, #0]
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016da:	8803      	ldrh	r3, [r0, #0]
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 80016dc:	4814      	ldr	r0, [pc, #80]	; (8001730 <updateStateFromSPIMessage+0xc8>)
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016de:	b29b      	uxth	r3, r3
	octave = (((int32_t) (modeBit & 15) - 5 ) * 12.0f);
 80016e0:	edc4 7a00 	vstr	s15, [r4]
	volumePedal = volumePedalInt * 0.0002442002442f;
 80016e4:	ee00 3a10 	vmov	s0, r3
 80016e8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80016ec:	ee20 0a07 	vmul.f32	s0, s0, s14
 80016f0:	ed81 0a00 	vstr	s0, [r1]
}
 80016f4:	bcf0      	pop	{r4, r5, r6, r7}
	tExpSmooth_setDest(&volumeSmoother,volumePedal);
 80016f6:	f013 bfe3 	b.w	80156c0 <tExpSmooth_setDest>
			presetWaitingToLoad = 1;
 80016fa:	4d0e      	ldr	r5, [pc, #56]	; (8001734 <updateStateFromSPIMessage+0xcc>)
 80016fc:	2601      	movs	r6, #1
 80016fe:	602e      	str	r6, [r5, #0]
			presetNumberToLoad = voice;
 8001700:	4d0d      	ldr	r5, [pc, #52]	; (8001738 <updateStateFromSPIMessage+0xd0>)
 8001702:	7029      	strb	r1, [r5, #0]
 8001704:	e7d0      	b.n	80016a8 <updateStateFromSPIMessage+0x40>
 8001706:	bf00      	nop
 8001708:	30000100 	.word	0x30000100
 800170c:	20005458 	.word	0x20005458
 8001710:	20004fdc 	.word	0x20004fdc
 8001714:	20004fe0 	.word	0x20004fe0
 8001718:	200055cc 	.word	0x200055cc
 800171c:	200130c8 	.word	0x200130c8
 8001720:	39800801 	.word	0x39800801
 8001724:	2001300c 	.word	0x2001300c
 8001728:	20005498 	.word	0x20005498
 800172c:	20013008 	.word	0x20013008
 8001730:	20013010 	.word	0x20013010
 8001734:	20016d4c 	.word	0x20016d4c
 8001738:	20000724 	.word	0x20000724
 800173c:	20013000 	.word	0x20013000

08001740 <oscillator_tick>:
uint32_t timeApprox = 0;
uint32_t timeTrue = 0;
volatile float MIDIerror = 0.0f;

void __ATTR_ITCMRAM oscillator_tick(float note, int string)
{
 8001740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //if (loadingTables || !enabled) return;
	interruptChecker = 0;
 8001744:	496f      	ldr	r1, [pc, #444]	; (8001904 <oscillator_tick+0x1c4>)
 8001746:	2500      	movs	r5, #0
	uint32_t tempCount1 = DWT->CYCCNT;
	for (int i = 0; i < NUM_OSC; i++)
	{
		oscOuts[0][i][string] = 0.0f;
 8001748:	4a6f      	ldr	r2, [pc, #444]	; (8001908 <oscillator_tick+0x1c8>)
{
 800174a:	ed2d 8b0c 	vpush	{d8-d13}
	interruptChecker = 0;
 800174e:	700d      	strb	r5, [r1, #0]
{
 8001750:	b089      	sub	sp, #36	; 0x24
	uint32_t tempCount1 = DWT->CYCCNT;
 8001752:	496e      	ldr	r1, [pc, #440]	; (800190c <oscillator_tick+0x1cc>)
		oscOuts[0][i][string] = 0.0f;
 8001754:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8001758:	ed9f 9a6d 	vldr	s18, [pc, #436]	; 8001910 <oscillator_tick+0x1d0>
	uint32_t tempCount1 = DWT->CYCCNT;
 800175c:	684b      	ldr	r3, [r1, #4]
		oscOuts[0][i][string] = 0.0f;
 800175e:	ed86 9a00 	vstr	s18, [r6]
	uint32_t tempCount1 = DWT->CYCCNT;
 8001762:	9305      	str	r3, [sp, #20]
		oscOuts[1][i][string] = 0.0f;
	}
	//for (int osc = 0; osc < 1; osc++)
	for (int osc = 0; osc < oscToTick; osc++)
 8001764:	4b6b      	ldr	r3, [pc, #428]	; (8001914 <oscillator_tick+0x1d4>)
		oscOuts[1][i][string] = 0.0f;
 8001766:	ed86 9a06 	vstr	s18, [r6, #24]
	for (int osc = 0; osc < oscToTick; osc++)
 800176a:	781a      	ldrb	r2, [r3, #0]
		oscOuts[0][i][string] = 0.0f;
 800176c:	ed86 9a02 	vstr	s18, [r6, #8]
		oscOuts[1][i][string] = 0.0f;
 8001770:	ed86 9a08 	vstr	s18, [r6, #32]
		oscOuts[0][i][string] = 0.0f;
 8001774:	ed86 9a04 	vstr	s18, [r6, #16]
		oscOuts[1][i][string] = 0.0f;
 8001778:	ed86 9a0a 	vstr	s18, [r6, #40]	; 0x28
	for (int osc = 0; osc < oscToTick; osc++)
 800177c:	2a00      	cmp	r2, #0
 800177e:	f000 80b6 	beq.w	80018ee <oscillator_tick+0x1ae>
 8001782:	ea4f 0a80 	mov.w	sl, r0, lsl #2
 8001786:	4a64      	ldr	r2, [pc, #400]	; (8001918 <oscillator_tick+0x1d8>)
 8001788:	4c64      	ldr	r4, [pc, #400]	; (800191c <oscillator_tick+0x1dc>)
 800178a:	eef0 9a40 	vmov.f32	s19, s0
 800178e:	eb02 0b0a 	add.w	fp, r2, sl
 8001792:	4a63      	ldr	r2, [pc, #396]	; (8001920 <oscillator_tick+0x1e0>)
 8001794:	4f63      	ldr	r7, [pc, #396]	; (8001924 <oscillator_tick+0x1e4>)
 8001796:	4681      	mov	r9, r0
 8001798:	eb02 030a 	add.w	r3, r2, sl
		float freqOffset= oscParams[OscFreq].realVal[string];
		float shape = oscParams[OscShape].realVal[string];
		float amp = oscParams[OscAmp].realVal[string];
		float filterSend = oscParams[OscFilterSend].realVal[string];
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
		float freqToSmooth = (note + (fine*0.01f));
 800179c:	ed9f ca62 	vldr	s24, [pc, #392]	; 8001928 <oscillator_tick+0x1e8>
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);

		uint32_t tempCountappr = DWT->CYCCNT;
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 80017a0:	eddf ba62 	vldr	s23, [pc, #392]	; 800192c <oscillator_tick+0x1ec>
 80017a4:	4454      	add	r4, sl
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	4457      	add	r7, sl
 80017aa:	4b61      	ldr	r3, [pc, #388]	; (8001930 <oscillator_tick+0x1f0>)
 80017ac:	ed9f ba61 	vldr	s22, [pc, #388]	; 8001934 <oscillator_tick+0x1f4>
 80017b0:	eddf aa61 	vldr	s21, [pc, #388]	; 8001938 <oscillator_tick+0x1f8>
 80017b4:	ed9f aa61 	vldr	s20, [pc, #388]	; 800193c <oscillator_tick+0x1fc>
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	f8cd a010 	str.w	sl, [sp, #16]
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80017be:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80017c2:	edd4 6ae9 	vldr	s13, [r4, #932]	; 0x3a4
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80017c6:	eeb0 0a69 	vmov.f32	s0, s19
		float freqToSmooth = (note + (fine*0.01f));
 80017ca:	edd4 7ab8 	vldr	s15, [r4, #736]	; 0x2e0
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80017ce:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 80017d0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 800190c <oscillator_tick+0x1cc>
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80017d4:	eef4 6ac7 	vcmpe.f32	s13, s14
		float filterSend = oscParams[OscFilterSend].realVal[string];
 80017d8:	edd4 8afe 	vldr	s17, [r4, #1016]	; 0x3f8
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 80017dc:	eea7 0a8c 	vfma.f32	s0, s15, s24
		float freqOffset= oscParams[OscFreq].realVal[string];
 80017e0:	ed94 dabf 	vldr	s26, [r4, #764]	; 0x2fc
		float amp = oscParams[OscAmp].realVal[string];
 80017e4:	edd4 cacd 	vldr	s25, [r4, #820]	; 0x334
		int tempIndexI = (int)tempIndexF;
		tempIndexF = tempIndexF -tempIndexI;

		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 80017e8:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80017ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		float shape = oscParams[OscShape].realVal[string];
 80017f0:	edd4 dac6 	vldr	s27, [r4, #792]	; 0x318
	for (int osc = 0; osc < oscToTick; osc++)
 80017f4:	f504 74b6 	add.w	r4, r4, #364	; 0x16c
 80017f8:	f106 0608 	add.w	r6, r6, #8
		int sync = oscParams[OscisSync].realVal[string] > 0.5f; // probably faster than previous roundf version but haven't tested
 80017fc:	bfcc      	ite	gt
 80017fe:	2201      	movgt	r2, #1
 8001800:	2200      	movle	r2, #0
 8001802:	9203      	str	r2, [sp, #12]
		tExpSmooth_setDest(&pitchSmoother[osc][string], freqToSmooth);
 8001804:	f013 ff5c 	bl	80156c0 <tExpSmooth_setDest>
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8001808:	4638      	mov	r0, r7
		uint32_t tempCountappr = DWT->CYCCNT;
 800180a:	f8d8 a004 	ldr.w	sl, [r8, #4]
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 800180e:	f013 ff5b 	bl	80156c8 <tExpSmooth_tick>
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8001812:	eeb0 1a6a 	vmov.f32	s2, s21
		float tempMIDI = tExpSmooth_tick(&pitchSmoother[osc][string]);
 8001816:	eef0 0a40 	vmov.f32	s1, s0
	for (int osc = 0; osc < oscToTick; osc++)
 800181a:	3708      	adds	r7, #8
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 800181c:	eeb0 0a4a 	vmov.f32	s0, s20
 8001820:	f015 fd16 	bl	8017250 <LEAF_clip>
 8001824:	eef0 7a4b 	vmov.f32	s15, s22
		timeApprox = DWT->CYCCNT - tempCountappr;

		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001828:	465b      	mov	r3, fp
		timeApprox = DWT->CYCCNT - tempCountappr;
 800182a:	4a45      	ldr	r2, [pc, #276]	; (8001940 <oscillator_tick+0x200>)
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800182c:	4845      	ldr	r0, [pc, #276]	; (8001944 <oscillator_tick+0x204>)

		float sample = 0.0f;


		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800182e:	eef0 0a6d 	vmov.f32	s1, s27
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8001832:	eee0 7a2b 	vfma.f32	s15, s0, s23
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001836:	edd3 5a00 	vldr	s11, [r3]
		timeApprox = DWT->CYCCNT - tempCountappr;
 800183a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 800183e:	eeb0 0a4d 	vmov.f32	s0, s26
		float sample = 0.0f;
 8001842:	ed8d 9a07 	vstr	s18, [sp, #28]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001846:	f10b 0b08 	add.w	fp, fp, #8
		timeApprox = DWT->CYCCNT - tempCountappr;
 800184a:	eba3 030a 	sub.w	r3, r3, sl
 800184e:	6013      	str	r3, [r2, #0]
		int tempIndexI = (int)tempIndexF;
 8001850:	eebd 7ae7 	vcvt.s32.f32	s14, s15
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001854:	9a03      	ldr	r2, [sp, #12]
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001856:	ee78 6a67 	vsub.f32	s13, s16, s15
		sourceValues[osc][string] = sample;

		//sample *= oscAmpMult; // divide down gain if more than one oscillator is sounding (computed at preset load)

		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 800185a:	ee38 8a68 	vsub.f32	s16, s16, s17
		int tempIndexI = (int)tempIndexF;
 800185e:	ee17 3a10 	vmov	r3, s14
		tempIndexF = tempIndexF -tempIndexI;
 8001862:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001866:	1c59      	adds	r1, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8001868:	f3c3 030e 	ubfx	r3, r3, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 800186c:	ee77 7ac6 	vsub.f32	s15, s15, s12
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8001870:	eb00 0383 	add.w	r3, r0, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001874:	f3c1 010e 	ubfx	r1, r1, #0, #15
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001878:	ee76 6a86 	vadd.f32	s13, s13, s12
 800187c:	ed93 7a00 	vldr	s14, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8001880:	eb00 0381 	add.w	r3, r0, r1, lsl #2
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001884:	9904      	ldr	r1, [sp, #16]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001886:	a807      	add	r0, sp, #28
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001888:	ed93 6a00 	vldr	s12, [r3]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 800188c:	4b2e      	ldr	r3, [pc, #184]	; (8001948 <oscillator_tick+0x208>)
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800188e:	ee67 7a86 	vmul.f32	s15, s15, s12
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 8001892:	440b      	add	r3, r1
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 8001894:	4629      	mov	r1, r5
	for (int osc = 0; osc < oscToTick; osc++)
 8001896:	3501      	adds	r5, #1
		freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8001898:	eee6 7a87 	vfma.f32	s15, s13, s14
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 800189c:	ed93 7a00 	vldr	s14, [r3]
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 80018a0:	9b02      	ldr	r3, [sp, #8]
		float finalFreq = (freqToSmooth * invMapping[string] * freqMult[osc][string]) + freqOffset;
 80018a2:	ee27 7a25 	vmul.f32	s14, s14, s11
		shapeTick[osc](&sample, osc, finalFreq, shape, sync, string);
 80018a6:	f853 8b04 	ldr.w	r8, [r3], #4
 80018aa:	9302      	str	r3, [sp, #8]
 80018ac:	464b      	mov	r3, r9
 80018ae:	eea7 0a87 	vfma.f32	s0, s15, s14
 80018b2:	47c0      	blx	r8
		sample *= amp;
 80018b4:	eddd 7a07 	vldr	s15, [sp, #28]
		sourceValues[osc][string] = sample;
 80018b8:	9b01      	ldr	r3, [sp, #4]
		sample *= amp;
 80018ba:	ee6c 7aa7 	vmul.f32	s15, s25, s15
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018be:	ed94 7a4f 	vldr	s14, [r4, #316]	; 0x13c
		sourceValues[osc][string] = sample;
 80018c2:	461a      	mov	r2, r3
 80018c4:	3308      	adds	r3, #8
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018c6:	ee67 8a28 	vmul.f32	s17, s14, s17
		sourceValues[osc][string] = sample;
 80018ca:	9301      	str	r3, [sp, #4]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80018cc:	ee27 7a87 	vmul.f32	s14, s15, s14
	for (int osc = 0; osc < oscToTick; osc++)
 80018d0:	4b10      	ldr	r3, [pc, #64]	; (8001914 <oscillator_tick+0x1d4>)
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018d2:	ee68 8aa7 	vmul.f32	s17, s17, s15
		sourceValues[osc][string] = sample;
 80018d6:	edc2 7a00 	vstr	s15, [r2]
	for (int osc = 0; osc < oscToTick; osc++)
 80018da:	781b      	ldrb	r3, [r3, #0]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80018dc:	ee28 8a07 	vmul.f32	s16, s16, s14
	for (int osc = 0; osc < oscToTick; osc++)
 80018e0:	42ab      	cmp	r3, r5
		oscOuts[0][osc][string] = sample * (filterSend) * oscParams[OscEnabled].realVal[string];
 80018e2:	ed46 8a02 	vstr	s17, [r6, #-8]
		oscOuts[1][osc][string] = sample * (1.0f - filterSend) * oscParams[OscEnabled].realVal[string];
 80018e6:	ed86 8a04 	vstr	s16, [r6, #16]
	for (int osc = 0; osc < oscToTick; osc++)
 80018ea:	f73f af68 	bgt.w	80017be <oscillator_tick+0x7e>
	}

	timeOsc = DWT->CYCCNT - tempCount1;
 80018ee:	4b07      	ldr	r3, [pc, #28]	; (800190c <oscillator_tick+0x1cc>)
 80018f0:	9905      	ldr	r1, [sp, #20]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4a15      	ldr	r2, [pc, #84]	; (800194c <oscillator_tick+0x20c>)
 80018f6:	1a5b      	subs	r3, r3, r1
 80018f8:	6013      	str	r3, [r2, #0]
}
 80018fa:	b009      	add	sp, #36	; 0x24
 80018fc:	ecbd 8b0c 	vpop	{d8-d13}
 8001900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001904:	20015281 	.word	0x20015281
 8001908:	200054a4 	.word	0x200054a4
 800190c:	e0001000 	.word	0xe0001000
 8001910:	00000000 	.word	0x00000000
 8001914:	20000068 	.word	0x20000068
 8001918:	2000505c 	.word	0x2000505c
 800191c:	20015c48 	.word	0x20015c48
 8001920:	20012df8 	.word	0x20012df8
 8001924:	200055a8 	.word	0x200055a8
 8001928:	3c23d70a 	.word	0x3c23d70a
 800192c:	42c80000 	.word	0x42c80000
 8001930:	20005a8c 	.word	0x20005a8c
 8001934:	46800000 	.word	0x46800000
 8001938:	43480000 	.word	0x43480000
 800193c:	c3480000 	.word	0xc3480000
 8001940:	20012f90 	.word	0x20012f90
 8001944:	24008020 	.word	0x24008020
 8001948:	2000511c 	.word	0x2000511c
 800194c:	20012fa8 	.word	0x20012fa8

08001950 <sawSquareTick>:


void __ATTR_ITCMRAM  sawSquareTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001954:	4605      	mov	r5, r0
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001956:	4c1a      	ldr	r4, [pc, #104]	; (80019c0 <sawSquareTick+0x70>)
 8001958:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 800195c:	4617      	mov	r7, r2
 800195e:	4688      	mov	r8, r1
 8001960:	461e      	mov	r6, r3
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001962:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8001966:	ed2d 8b02 	vpush	{d8}
 800196a:	eeb0 8a60 	vmov.f32	s16, s1
 800196e:	b082      	sub	sp, #8
    tMBSawPulse_setFreq(&sawPaired[v][string], freq);
 8001970:	9001      	str	r0, [sp, #4]
 8001972:	f01a f97b 	bl	801bc6c <tMBSawPulse_setFreq>
    tMBSawPulse_setShape(&sawPaired[v][string], shape);
 8001976:	9801      	ldr	r0, [sp, #4]
 8001978:	eeb0 0a48 	vmov.f32	s0, s16
 800197c:	f01a f9d8 	bl	801bd30 <tMBSawPulse_setShape>
    if (sync)
 8001980:	9801      	ldr	r0, [sp, #4]
 8001982:	b977      	cbnz	r7, 80019a2 <sawSquareTick+0x52>
    {
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);

    }
    *sample += tMBSawPulse_tick(&sawPaired[v][string]) * 2.f;
 8001984:	f019 fa80 	bl	801ae88 <tMBSawPulse_tick>
 8001988:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800198c:	edd5 7a00 	vldr	s15, [r5]
 8001990:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001994:	edc5 7a00 	vstr	s15, [r5]
}
 8001998:	b002      	add	sp, #8
 800199a:	ecbd 8b02 	vpop	{d8}
 800199e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSawPulse_sync(&sawPaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <sawSquareTick+0x74>)
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <sawSquareTick+0x78>)
 80019a6:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 80019aa:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 80019ae:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 80019b2:	ed96 0a00 	vldr	s0, [r6]
 80019b6:	f01a f98b 	bl	801bcd0 <tMBSawPulse_sync>
 80019ba:	9801      	ldr	r0, [sp, #4]
 80019bc:	e7e2      	b.n	8001984 <sawSquareTick+0x34>
 80019be:	bf00      	nop
 80019c0:	20005a34 	.word	0x20005a34
 80019c4:	0801fa60 	.word	0x0801fa60
 80019c8:	20012df8 	.word	0x20012df8

080019cc <sineTriTick>:

void __ATTR_ITCMRAM  sineTriTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 80019cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d0:	4605      	mov	r5, r0
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80019d2:	4c1a      	ldr	r4, [pc, #104]	; (8001a3c <sineTriTick+0x70>)
 80019d4:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 80019d8:	4617      	mov	r7, r2
 80019da:	4688      	mov	r8, r1
 80019dc:	461e      	mov	r6, r3
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80019de:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 80019e2:	ed2d 8b02 	vpush	{d8}
 80019e6:	eeb0 8a60 	vmov.f32	s16, s1
 80019ea:	b082      	sub	sp, #8
    tMBSineTri_setFreq(&sinePaired[v][string], freq);
 80019ec:	9001      	str	r0, [sp, #4]
 80019ee:	f018 feff 	bl	801a7f0 <tMBSineTri_setFreq>
    tMBSineTri_setShape(&sinePaired[v][string],shape);
 80019f2:	9801      	ldr	r0, [sp, #4]
 80019f4:	eeb0 0a48 	vmov.f32	s0, s16
 80019f8:	f018 ff3a 	bl	801a870 <tMBSineTri_setShape>
    if (sync)
 80019fc:	9801      	ldr	r0, [sp, #4]
 80019fe:	b977      	cbnz	r7, 8001a1e <sineTriTick+0x52>
    {
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
    }
    *sample += tMBSineTri_tick(&sinePaired[v][string]) * 2.0f;
 8001a00:	f017 fec6 	bl	8019790 <tMBSineTri_tick>
 8001a04:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a08:	edd5 7a00 	vldr	s15, [r5]
 8001a0c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001a10:	edc5 7a00 	vstr	s15, [r5]
}
 8001a14:	b002      	add	sp, #8
 8001a16:	ecbd 8b02 	vpop	{d8}
 8001a1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    	tMBSineTri_sync(&sinePaired[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001a1e:	4a08      	ldr	r2, [pc, #32]	; (8001a40 <sineTriTick+0x74>)
 8001a20:	4b08      	ldr	r3, [pc, #32]	; (8001a44 <sineTriTick+0x78>)
 8001a22:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001a26:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001a2a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001a2e:	ed96 0a00 	vldr	s0, [r6]
 8001a32:	f018 feed 	bl	801a810 <tMBSineTri_sync>
 8001a36:	9801      	ldr	r0, [sp, #4]
 8001a38:	e7e2      	b.n	8001a00 <sineTriTick+0x34>
 8001a3a:	bf00      	nop
 8001a3c:	20005af0 	.word	0x20005af0
 8001a40:	0801fa60 	.word	0x0801fa60
 8001a44:	20012df8 	.word	0x20012df8

08001a48 <sawTick>:

void __ATTR_ITCMRAM  sawTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a4c:	4c14      	ldr	r4, [pc, #80]	; (8001aa0 <sawTick+0x58>)
{
 8001a4e:	4605      	mov	r5, r0
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a50:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8001a54:	b082      	sub	sp, #8
 8001a56:	4617      	mov	r7, r2
 8001a58:	4688      	mov	r8, r1
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a5a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8001a5e:	461e      	mov	r6, r3
    tMBSaw_setFreq(&saw[v][string], freq);
 8001a60:	9001      	str	r0, [sp, #4]
 8001a62:	f019 f987 	bl	801ad74 <tMBSaw_setFreq>
    if (sync)
 8001a66:	9801      	ldr	r0, [sp, #4]
 8001a68:	b967      	cbnz	r7, 8001a84 <sawTick+0x3c>
	{
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBSaw_tick(&saw[v][string]) * 2.f;;
 8001a6a:	f018 ff45 	bl	801a8f8 <tMBSaw_tick>
 8001a6e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001a72:	edd5 7a00 	vldr	s15, [r5]
 8001a76:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001a7a:	edc5 7a00 	vstr	s15, [r5]
}
 8001a7e:	b002      	add	sp, #8
 8001a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBSaw_sync(&saw[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001a84:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <sawTick+0x5c>)
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <sawTick+0x60>)
 8001a88:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001a8c:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001a90:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001a94:	ed96 0a00 	vldr	s0, [r6]
 8001a98:	f019 f97c 	bl	801ad94 <tMBSaw_sync>
 8001a9c:	9801      	ldr	r0, [sp, #4]
 8001a9e:	e7e4      	b.n	8001a6a <sawTick+0x22>
 8001aa0:	20005a1c 	.word	0x20005a1c
 8001aa4:	0801fa60 	.word	0x0801fa60
 8001aa8:	20012df8 	.word	0x20012df8

08001aac <pulseTick>:

void __ATTR_ITCMRAM  pulseTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ab0:	4605      	mov	r5, r0
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001ab2:	4c1a      	ldr	r4, [pc, #104]	; (8001b1c <pulseTick+0x70>)
 8001ab4:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8001ab8:	4617      	mov	r7, r2
 8001aba:	4688      	mov	r8, r1
 8001abc:	461e      	mov	r6, r3
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001abe:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8001ac2:	ed2d 8b02 	vpush	{d8}
 8001ac6:	eeb0 8a60 	vmov.f32	s16, s1
 8001aca:	b082      	sub	sp, #8
    tMBPulse_setFreq(&pulse[v][string], freq);
 8001acc:	9001      	str	r0, [sp, #4]
 8001ace:	f016 fd4f 	bl	8018570 <tMBPulse_setFreq>
    tMBPulse_setWidth(&pulse[v][string], shape);
 8001ad2:	9801      	ldr	r0, [sp, #4]
 8001ad4:	eeb0 0a48 	vmov.f32	s0, s16
 8001ad8:	f016 fd5a 	bl	8018590 <tMBPulse_setWidth>
    if (sync)
 8001adc:	9801      	ldr	r0, [sp, #4]
 8001ade:	b977      	cbnz	r7, 8001afe <pulseTick+0x52>
	{
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBPulse_tick(&pulse[v][string]) * 2.f;;
 8001ae0:	f015 ffee 	bl	8017ac0 <tMBPulse_tick>
 8001ae4:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001ae8:	edd5 7a00 	vldr	s15, [r5]
 8001aec:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001af0:	edc5 7a00 	vstr	s15, [r5]
}
 8001af4:	b002      	add	sp, #8
 8001af6:	ecbd 8b02 	vpop	{d8}
 8001afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBPulse_sync(&pulse[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <pulseTick+0x74>)
 8001b00:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <pulseTick+0x78>)
 8001b02:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001b06:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001b0a:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001b0e:	ed96 0a00 	vldr	s0, [r6]
 8001b12:	f016 fd4b 	bl	80185ac <tMBPulse_sync>
 8001b16:	9801      	ldr	r0, [sp, #4]
 8001b18:	e7e2      	b.n	8001ae0 <pulseTick+0x34>
 8001b1a:	bf00      	nop
 8001b1c:	20005600 	.word	0x20005600
 8001b20:	0801fa60 	.word	0x0801fa60
 8001b24:	20012df8 	.word	0x20012df8

08001b28 <sineTick>:

void __ATTR_ITCMRAM  sineTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    tCycle_setFreq(&sine[v][string], freq);
 8001b28:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <sineTick+0x2c>)
 8001b2a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
{
 8001b2e:	b510      	push	{r4, lr}
 8001b30:	4604      	mov	r4, r0
 8001b32:	b082      	sub	sp, #8
    tCycle_setFreq(&sine[v][string], freq);
 8001b34:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8001b38:	9001      	str	r0, [sp, #4]
 8001b3a:	f015 fefd 	bl	8017938 <tCycle_setFreq>
    *sample += tCycle_tick(&sine[v][string]);
 8001b3e:	9801      	ldr	r0, [sp, #4]
 8001b40:	f015 fed4 	bl	80178ec <tCycle_tick>
 8001b44:	edd4 7a00 	vldr	s15, [r4]
 8001b48:	ee37 0a80 	vadd.f32	s0, s15, s0
 8001b4c:	ed84 0a00 	vstr	s0, [r4]
}
 8001b50:	b002      	add	sp, #8
 8001b52:	bd10      	pop	{r4, pc}
 8001b54:	20005ad8 	.word	0x20005ad8

08001b58 <triTick>:

void __ATTR_ITCMRAM  triTick(float* sample, int v, float freq, float shape, int sync, int string)
{
 8001b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b5c:	4605      	mov	r5, r0
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001b5e:	4c1a      	ldr	r4, [pc, #104]	; (8001bc8 <triTick+0x70>)
 8001b60:	eb03 0041 	add.w	r0, r3, r1, lsl #1
{
 8001b64:	4617      	mov	r7, r2
 8001b66:	4688      	mov	r8, r1
 8001b68:	461e      	mov	r6, r3
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001b6a:	eb04 0080 	add.w	r0, r4, r0, lsl #2
{
 8001b6e:	ed2d 8b02 	vpush	{d8}
 8001b72:	eeb0 8a60 	vmov.f32	s16, s1
 8001b76:	b082      	sub	sp, #8
    tMBTriangle_setFreq(&tri[v][string], freq);
 8001b78:	9001      	str	r0, [sp, #4]
 8001b7a:	f017 fd6b 	bl	8019654 <tMBTriangle_setFreq>
    tMBTriangle_setWidth(&tri[v][string], shape);
 8001b7e:	9801      	ldr	r0, [sp, #4]
 8001b80:	eeb0 0a48 	vmov.f32	s0, s16
 8001b84:	f017 fd76 	bl	8019674 <tMBTriangle_setWidth>
    if (sync)
 8001b88:	9801      	ldr	r0, [sp, #4]
 8001b8a:	b977      	cbnz	r7, 8001baa <triTick+0x52>
	{
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
	}
    *sample += tMBTriangle_tick(&tri[v][string]) * 2.0f;;
 8001b8c:	f016 fd84 	bl	8018698 <tMBTriangle_tick>
 8001b90:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001b94:	edd5 7a00 	vldr	s15, [r5]
 8001b98:	eee0 7a07 	vfma.f32	s15, s0, s14
 8001b9c:	edc5 7a00 	vstr	s15, [r5]
}
 8001ba0:	b002      	add	sp, #8
 8001ba2:	ecbd 8b02 	vpop	{d8}
 8001ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tMBTriangle_sync(&tri[v][string], sourceValues[syncMap[OSC_SOURCE_OFFSET + v]][string]);
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <triTick+0x74>)
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <triTick+0x78>)
 8001bae:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
 8001bb2:	eb06 0642 	add.w	r6, r6, r2, lsl #1
 8001bb6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8001bba:	ed96 0a00 	vldr	s0, [r6]
 8001bbe:	f017 fd6b 	bl	8019698 <tMBTriangle_sync>
 8001bc2:	9801      	ldr	r0, [sp, #4]
 8001bc4:	e7e2      	b.n	8001b8c <triTick+0x34>
 8001bc6:	bf00      	nop
 8001bc8:	20012fe8 	.word	0x20012fe8
 8001bcc:	0801fa60 	.word	0x0801fa60
 8001bd0:	20012df8 	.word	0x20012df8

08001bd4 <userTick>:
void __ATTR_ITCMRAM  userTick(float* sample, int v, float freq, float shape, int sync, int string)
{
    //tWaveOscS_setFreq(&wave[v], freq);
    //tWaveOscS_setIndex(&wave[v], shape);
    //*sample += tWaveOscS_tick(&wave[v]);
}
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop

08001bd8 <filter_tick>:

uint32_t timeFilt = 0;

float __ATTR_ITCMRAM filter_tick(float* samples, float note, int string)
{
	interruptChecker = 0;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	4a72      	ldr	r2, [pc, #456]	; (8001da4 <filter_tick+0x1cc>)
{
 8001bdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t tempCount1 = DWT->CYCCNT;
	float cutoff[2];
	uint8_t enabledFilt[2] = {0,0};
	for (int f = 0; f < filterToTick; f++)
 8001be0:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 8001dd0 <filter_tick+0x1f8>
{
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 8001bec:	7013      	strb	r3, [r2, #0]
{
 8001bee:	b086      	sub	sp, #24
	uint32_t tempCount1 = DWT->CYCCNT;
 8001bf0:	4a6d      	ldr	r2, [pc, #436]	; (8001da8 <filter_tick+0x1d0>)
 8001bf2:	6857      	ldr	r7, [r2, #4]
	uint8_t enabledFilt[2] = {0,0};
 8001bf4:	f8ad 300c 	strh.w	r3, [sp, #12]
	for (int f = 0; f < filterToTick; f++)
 8001bf8:	f898 3000 	ldrb.w	r3, [r8]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	f000 80bc 	beq.w	8001d7a <filter_tick+0x1a2>
	{
		param* filtParams = &params[FILTER_PARAMS_OFFSET + f * FilterParamsNum];
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c02:	4e6a      	ldr	r6, [pc, #424]	; (8001dac <filter_tick+0x1d4>)
 8001c04:	f201 229b 	addw	r2, r1, #667	; 0x29b
		enabledFilt[f] = (enabled > 0.5f);
		if (!enabledFilt[f]) continue;
 8001c08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c0c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8001c10:	eeb0 8a40 	vmov.f32	s16, s0
 8001c14:	edd2 8a00 	vldr	s17, [r2]
		if (!enabledFilt[f]) continue;
 8001c18:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c20:	d87b      	bhi.n	8001d1a <filter_tick+0x142>
	for (int f = 0; f < filterToTick; f++)
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d93b      	bls.n	8001c9e <filter_tick+0xc6>
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c26:	f205 23c5 	addw	r3, r5, #709	; 0x2c5
		enabledFilt[f] = (enabled > 0.5f);
 8001c2a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		float enabled = filtParams[FilterEnabled].realVal[string];
 8001c2e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8001c32:	ed93 7a00 	vldr	s14, [r3]
		enabledFilt[f] = (enabled > 0.5f);
 8001c36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3e:	bfcc      	ite	gt
 8001c40:	2301      	movgt	r3, #1
 8001c42:	2300      	movle	r3, #0
 8001c44:	f88d 300d 	strb.w	r3, [sp, #13]
		if (!enabledFilt[f]) continue;
 8001c48:	d929      	bls.n	8001c9e <filter_tick+0xc6>

		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <filter_tick+0x1d8>)
			note = 0.0f; //is this necessary?
		}

		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);

		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001c4c:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001c50:	eddf 0a58 	vldr	s1, [pc, #352]	; 8001db4 <filter_tick+0x1dc>
 8001c54:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001c58:	ed9f 1a57 	vldr	s2, [pc, #348]	; 8001db8 <filter_tick+0x1e0>
 8001c5c:	ed9f 0a57 	vldr	s0, [pc, #348]	; 8001dbc <filter_tick+0x1e4>
 8001c60:	ed93 7a25 	vldr	s14, [r3, #148]	; 0x94
 8001c64:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001c68:	4b55      	ldr	r3, [pc, #340]	; (8001dc0 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001c6a:	ee77 7ae6 	vsub.f32	s15, s15, s13
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001c6e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8001c72:	edd3 6a00 	vldr	s13, [r3]
 8001c76:	ee38 8a26 	vadd.f32	s16, s16, s13
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001c7a:	eee8 7a07 	vfma.f32	s15, s16, s14
 8001c7e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001c82:	f015 fae5 	bl	8017250 <LEAF_clip>
		//smoothing may not be necessary
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8001c86:	1cab      	adds	r3, r5, #2
 8001c88:	484e      	ldr	r0, [pc, #312]	; (8001dc4 <filter_tick+0x1ec>)
 8001c8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8001c8e:	9001      	str	r0, [sp, #4]
 8001c90:	f013 fd16 	bl	80156c0 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001c94:	9801      	ldr	r0, [sp, #4]
 8001c96:	f013 fd17 	bl	80156c8 <tExpSmooth_tick>
 8001c9a:	ed8d 0a05 	vstr	s0, [sp, #20]
	}

	float  sp = params[FilterSeriesParallelMix].realVal[string];

	if (enabledFilt[0])
 8001c9e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001ca2:	f205 23ef 	addw	r3, r5, #751	; 0x2ef
		filterTick[0](&samples[0], 0, cutoff[0], string);
	}
	float sendToFilter2 = samples[0] * (1.0f - sp);
	samples[1] += sendToFilter2;
	//compute what gets sent to the second filter
	if (enabledFilt[1])
 8001ca6:	f89d 800d 	ldrb.w	r8, [sp, #13]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001caa:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	if (enabledFilt[0])
 8001cae:	eef4 8ae7 	vcmpe.f32	s17, s15
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001cb2:	ed96 8a00 	vldr	s16, [r6]
	if (enabledFilt[0])
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd07      	ble.n	8001ccc <filter_tick+0xf4>
		filterTick[0](&samples[0], 0, cutoff[0], string);
 8001cbc:	4b42      	ldr	r3, [pc, #264]	; (8001dc8 <filter_tick+0x1f0>)
 8001cbe:	462a      	mov	r2, r5
 8001cc0:	ed9d 0a04 	vldr	s0, [sp, #16]
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4620      	mov	r0, r4
 8001cca:	4798      	blx	r3
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001ccc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001cd0:	ed94 0a01 	vldr	s0, [r4, #4]
 8001cd4:	ed94 7a00 	vldr	s14, [r4]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001cd8:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001cdc:	eea7 0a27 	vfma.f32	s0, s14, s15
 8001ce0:	ed84 0a01 	vstr	s0, [r4, #4]
	if (enabledFilt[1])
 8001ce4:	f1b8 0f00 	cmp.w	r8, #0
 8001ce8:	d009      	beq.n	8001cfe <filter_tick+0x126>
	{
		filterTick[1](&samples[1], 1, cutoff[1], string);
 8001cea:	4b37      	ldr	r3, [pc, #220]	; (8001dc8 <filter_tick+0x1f0>)
 8001cec:	462a      	mov	r2, r5
 8001cee:	ed9d 0a05 	vldr	s0, [sp, #20]
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	1d20      	adds	r0, r4, #4
 8001cf8:	4798      	blx	r3
	}

	timeFilt = DWT->CYCCNT - tempCount1;
	return samples[1] + (samples[0] * sp);
 8001cfa:	ed94 0a01 	vldr	s0, [r4, #4]
	timeFilt = DWT->CYCCNT - tempCount1;
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <filter_tick+0x1d0>)
 8001d00:	4a32      	ldr	r2, [pc, #200]	; (8001dcc <filter_tick+0x1f4>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	1bdb      	subs	r3, r3, r7
 8001d06:	6013      	str	r3, [r2, #0]
	return samples[1] + (samples[0] * sp);
 8001d08:	edd4 7a00 	vldr	s15, [r4]
}
 8001d0c:	eea7 0a88 	vfma.f32	s0, s15, s16
 8001d10:	b006      	add	sp, #24
 8001d12:	ecbd 8b02 	vpop	{d8}
 8001d16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		float MIDIcutoff = filtParams[FilterCutoff].realVal[string];
 8001d1a:	f606 2364 	addw	r3, r6, #2660	; 0xa64
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001d1e:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 8001d22:	eddf 0a24 	vldr	s1, [pc, #144]	; 8001db4 <filter_tick+0x1dc>
 8001d26:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001d2a:	ed9f 1a23 	vldr	s2, [pc, #140]	; 8001db8 <filter_tick+0x1e0>
 8001d2e:	ed9f 0a23 	vldr	s0, [pc, #140]	; 8001dbc <filter_tick+0x1e4>
 8001d32:	edd3 6a25 	vldr	s13, [r3, #148]	; 0x94
 8001d36:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001d3a:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <filter_tick+0x1e8>)
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001d3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
		cutoff[f] = MIDIcutoff + ((note + barInMIDI[string]) * keyFollow);
 8001d40:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8001d44:	ed93 7a00 	vldr	s14, [r3]
 8001d48:	ee38 7a07 	vadd.f32	s14, s16, s14
		cutoff[f] = LEAF_clip(0.0f, (cutoff[f]-16.0f) * 35.929824561403509f, 4095.0f);
 8001d4c:	eee7 7a26 	vfma.f32	s15, s14, s13
 8001d50:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8001d54:	f015 fa7c 	bl	8017250 <LEAF_clip>
		tExpSmooth_setDest(&filterCutoffSmoother[f][string], cutoff[f]);
 8001d58:	481a      	ldr	r0, [pc, #104]	; (8001dc4 <filter_tick+0x1ec>)
 8001d5a:	00ab      	lsls	r3, r5, #2
 8001d5c:	4418      	add	r0, r3
 8001d5e:	9001      	str	r0, [sp, #4]
 8001d60:	f013 fcae 	bl	80156c0 <tExpSmooth_setDest>
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001d64:	9801      	ldr	r0, [sp, #4]
 8001d66:	f013 fcaf 	bl	80156c8 <tExpSmooth_tick>
	for (int f = 0; f < filterToTick; f++)
 8001d6a:	f898 3000 	ldrb.w	r3, [r8]
		cutoff[f] = tExpSmooth_tick(&filterCutoffSmoother[f][string]);
 8001d6e:	ed8d 0a04 	vstr	s0, [sp, #16]
	for (int f = 0; f < filterToTick; f++)
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	f63f af57 	bhi.w	8001c26 <filter_tick+0x4e>
 8001d78:	e791      	b.n	8001c9e <filter_tick+0xc6>
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001d7a:	4b0c      	ldr	r3, [pc, #48]	; (8001dac <filter_tick+0x1d4>)
 8001d7c:	f201 25ef 	addw	r5, r1, #751	; 0x2ef
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001d80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	samples[1] += sendToFilter2;
 8001d84:	ed90 0a01 	vldr	s0, [r0, #4]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001d88:	eb03 0385 	add.w	r3, r3, r5, lsl #2
	samples[1] += sendToFilter2;
 8001d8c:	ed90 7a00 	vldr	s14, [r0]
	float  sp = params[FilterSeriesParallelMix].realVal[string];
 8001d90:	ed93 8a00 	vldr	s16, [r3]
	float sendToFilter2 = samples[0] * (1.0f - sp);
 8001d94:	ee77 7ac8 	vsub.f32	s15, s15, s16
	samples[1] += sendToFilter2;
 8001d98:	eea7 0a87 	vfma.f32	s0, s15, s14
 8001d9c:	ed80 0a01 	vstr	s0, [r0, #4]
	if (enabledFilt[1])
 8001da0:	e7ad      	b.n	8001cfe <filter_tick+0x126>
 8001da2:	bf00      	nop
 8001da4:	20015281 	.word	0x20015281
 8001da8:	e0001000 	.word	0xe0001000
 8001dac:	20015c48 	.word	0x20015c48
 8001db0:	20016754 	.word	0x20016754
 8001db4:	420fb824 	.word	0x420fb824
 8001db8:	457ff000 	.word	0x457ff000
 8001dbc:	00000000 	.word	0x00000000
 8001dc0:	20000ae4 	.word	0x20000ae4
 8001dc4:	2000501c 	.word	0x2000501c
 8001dc8:	2000503c 	.word	0x2000503c
 8001dcc:	20012f98 	.word	0x20012f98
 8001dd0:	20000004 	.word	0x20000004

08001dd4 <lowpassTick>:


void __ATTR_ITCMRAM  lowpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001dd4:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <lowpassTick+0x3c>)
{
 8001dda:	b530      	push	{r4, r5, lr}
 8001ddc:	4605      	mov	r5, r0
 8001dde:	b083      	sub	sp, #12
	tSVF_setFreqFast(&lowpass[v][string], cutoff);
 8001de0:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001de4:	0094      	lsls	r4, r2, #2
 8001de6:	9001      	str	r0, [sp, #4]
 8001de8:	f013 fe76 	bl	8015ad8 <tSVF_setFreqFast>
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 8001dec:	ed95 0a00 	vldr	s0, [r5]
 8001df0:	9801      	ldr	r0, [sp, #4]
 8001df2:	f013 fe3b 	bl	8015a6c <tSVF_tick>
    *sample *= filterGain[v][string];
 8001df6:	4a07      	ldr	r2, [pc, #28]	; (8001e14 <lowpassTick+0x40>)
	*sample = tSVF_tick(&lowpass[v][string], *sample);
 8001df8:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001dfc:	4422      	add	r2, r4
 8001dfe:	edd2 7a00 	vldr	s15, [r2]
 8001e02:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e06:	ed85 0a00 	vstr	s0, [r5]
}
 8001e0a:	b003      	add	sp, #12
 8001e0c:	bd30      	pop	{r4, r5, pc}
 8001e0e:	bf00      	nop
 8001e10:	200052fc 	.word	0x200052fc
 8001e14:	2000502c 	.word	0x2000502c

08001e18 <highpassTick>:

void __ATTR_ITCMRAM  highpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001e18:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001e1c:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <highpassTick+0x3c>)
{
 8001e1e:	b530      	push	{r4, r5, lr}
 8001e20:	4605      	mov	r5, r0
 8001e22:	b083      	sub	sp, #12
	tSVF_setFreqFast(&highpass[v][string], cutoff);
 8001e24:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001e28:	0094      	lsls	r4, r2, #2
 8001e2a:	9001      	str	r0, [sp, #4]
 8001e2c:	f013 fe54 	bl	8015ad8 <tSVF_setFreqFast>
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001e30:	ed95 0a00 	vldr	s0, [r5]
 8001e34:	9801      	ldr	r0, [sp, #4]
 8001e36:	f013 fe19 	bl	8015a6c <tSVF_tick>
    *sample *= filterGain[v][string];
 8001e3a:	4a07      	ldr	r2, [pc, #28]	; (8001e58 <highpassTick+0x40>)
	*sample = tSVF_tick(&highpass[v][string], *sample);
 8001e3c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001e40:	4422      	add	r2, r4
 8001e42:	edd2 7a00 	vldr	s15, [r2]
 8001e46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e4a:	ed85 0a00 	vstr	s0, [r5]
}
 8001e4e:	b003      	add	sp, #12
 8001e50:	bd30      	pop	{r4, r5, pc}
 8001e52:	bf00      	nop
 8001e54:	200050e8 	.word	0x200050e8
 8001e58:	2000502c 	.word	0x2000502c

08001e5c <bandpassTick>:

void __ATTR_ITCMRAM  bandpassTick(float* sample, int v, float cutoff, int string)
{
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001e5c:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001e60:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <bandpassTick+0x3c>)
{
 8001e62:	b530      	push	{r4, r5, lr}
 8001e64:	4605      	mov	r5, r0
 8001e66:	b083      	sub	sp, #12
	tSVF_setFreqFast(&bandpass[v][string], cutoff);
 8001e68:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001e6c:	0094      	lsls	r4, r2, #2
 8001e6e:	9001      	str	r0, [sp, #4]
 8001e70:	f013 fe32 	bl	8015ad8 <tSVF_setFreqFast>
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001e74:	ed95 0a00 	vldr	s0, [r5]
 8001e78:	9801      	ldr	r0, [sp, #4]
 8001e7a:	f013 fdf7 	bl	8015a6c <tSVF_tick>
    *sample *= filterGain[v][string];
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <bandpassTick+0x40>)
	*sample = tSVF_tick(&bandpass[v][string], *sample);
 8001e80:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001e84:	4422      	add	r2, r4
 8001e86:	edd2 7a00 	vldr	s15, [r2]
 8001e8a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e8e:	ed85 0a00 	vstr	s0, [r5]
}
 8001e92:	b003      	add	sp, #12
 8001e94:	bd30      	pop	{r4, r5, pc}
 8001e96:	bf00      	nop
 8001e98:	20000ad4 	.word	0x20000ad4
 8001e9c:	2000502c 	.word	0x2000502c

08001ea0 <diodeLowpassTick>:

void __ATTR_ITCMRAM  diodeLowpassTick(float* sample, int v, float cutoff, int string)
{
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001ea0:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001ea4:	4b0d      	ldr	r3, [pc, #52]	; (8001edc <diodeLowpassTick+0x3c>)
{
 8001ea6:	b530      	push	{r4, r5, lr}
 8001ea8:	4605      	mov	r5, r0
 8001eaa:	b083      	sub	sp, #12
	tDiodeFilter_setFreqFast(&diodeFilters[v][string], cutoff);
 8001eac:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001eb0:	0094      	lsls	r4, r2, #2
 8001eb2:	9001      	str	r0, [sp, #4]
 8001eb4:	f014 ff28 	bl	8016d08 <tDiodeFilter_setFreqFast>
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 8001eb8:	ed95 0a00 	vldr	s0, [r5]
 8001ebc:	9801      	ldr	r0, [sp, #4]
 8001ebe:	f014 fda1 	bl	8016a04 <tDiodeFilter_tickEfficient>
    *sample *= filterGain[v][string];
 8001ec2:	4a07      	ldr	r2, [pc, #28]	; (8001ee0 <diodeLowpassTick+0x40>)
	*sample = tDiodeFilter_tickEfficient(&diodeFilters[v][string], *sample);
 8001ec4:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001ec8:	4422      	add	r2, r4
 8001eca:	edd2 7a00 	vldr	s15, [r2]
 8001ece:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001ed2:	ed85 0a00 	vstr	s0, [r5]
}
 8001ed6:	b003      	add	sp, #12
 8001ed8:	bd30      	pop	{r4, r5, pc}
 8001eda:	bf00      	nop
 8001edc:	20004fcc 	.word	0x20004fcc
 8001ee0:	2000502c 	.word	0x2000502c

08001ee4 <VZpeakTick>:

void __ATTR_ITCMRAM  VZpeakTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <VZpeakTick+0x28>)
 8001ee6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001eea:	b510      	push	{r4, lr}
 8001eec:	4604      	mov	r4, r0
 8001eee:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterPeak[v][string], cutoff);
 8001ef0:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001ef4:	9001      	str	r0, [sp, #4]
 8001ef6:	f014 f8cf 	bl	8016098 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterPeak[v][string], *sample);
 8001efa:	9801      	ldr	r0, [sp, #4]
 8001efc:	ed94 0a00 	vldr	s0, [r4]
 8001f00:	f013 feac 	bl	8015c5c <tVZFilter_tickEfficient>
 8001f04:	ed84 0a00 	vstr	s0, [r4]
}
 8001f08:	b002      	add	sp, #8
 8001f0a:	bd10      	pop	{r4, pc}
 8001f0c:	2000099c 	.word	0x2000099c

08001f10 <VZlowshelfTick>:

void __ATTR_ITCMRAM  VZlowshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <VZlowshelfTick+0x28>)
 8001f12:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001f16:	b510      	push	{r4, lr}
 8001f18:	4604      	mov	r4, r0
 8001f1a:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterLS[v][string], cutoff);
 8001f1c:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001f20:	9001      	str	r0, [sp, #4]
 8001f22:	f014 f8b9 	bl	8016098 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterLS[v][string], *sample);
 8001f26:	9801      	ldr	r0, [sp, #4]
 8001f28:	ed94 0a00 	vldr	s0, [r4]
 8001f2c:	f013 fe96 	bl	8015c5c <tVZFilter_tickEfficient>
 8001f30:	ed84 0a00 	vstr	s0, [r4]
}
 8001f34:	b002      	add	sp, #8
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	2000098c 	.word	0x2000098c

08001f3c <VZhighshelfTick>:
void __ATTR_ITCMRAM  VZhighshelfTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <VZhighshelfTick+0x28>)
 8001f3e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8001f42:	b510      	push	{r4, lr}
 8001f44:	4604      	mov	r4, r0
 8001f46:	b082      	sub	sp, #8
	tVZFilter_setFreqFast(&VZfilterHS[v][string], cutoff);
 8001f48:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8001f4c:	9001      	str	r0, [sp, #4]
 8001f4e:	f014 f8a3 	bl	8016098 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterHS[v][string], *sample);
 8001f52:	9801      	ldr	r0, [sp, #4]
 8001f54:	ed94 0a00 	vldr	s0, [r4]
 8001f58:	f013 fe80 	bl	8015c5c <tVZFilter_tickEfficient>
 8001f5c:	ed84 0a00 	vstr	s0, [r4]
}
 8001f60:	b002      	add	sp, #8
 8001f62:	bd10      	pop	{r4, pc}
 8001f64:	2000097c 	.word	0x2000097c

08001f68 <VZbandrejectTick>:
void __ATTR_ITCMRAM  VZbandrejectTick(float* sample, int v, float cutoff, int string)
{
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001f68:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001f6c:	4b0d      	ldr	r3, [pc, #52]	; (8001fa4 <VZbandrejectTick+0x3c>)
{
 8001f6e:	b530      	push	{r4, r5, lr}
 8001f70:	4605      	mov	r5, r0
 8001f72:	b083      	sub	sp, #12
	tVZFilter_setFreqFast(&VZfilterBR[v][string], cutoff);
 8001f74:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001f78:	0094      	lsls	r4, r2, #2
 8001f7a:	9001      	str	r0, [sp, #4]
 8001f7c:	f014 f88c 	bl	8016098 <tVZFilter_setFreqFast>
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001f80:	ed95 0a00 	vldr	s0, [r5]
 8001f84:	9801      	ldr	r0, [sp, #4]
 8001f86:	f013 fe69 	bl	8015c5c <tVZFilter_tickEfficient>
    *sample *= filterGain[v][string];
 8001f8a:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <VZbandrejectTick+0x40>)
	*sample = tVZFilter_tickEfficient(&VZfilterBR[v][string], *sample);
 8001f8c:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001f90:	4422      	add	r2, r4
 8001f92:	edd2 7a00 	vldr	s15, [r2]
 8001f96:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001f9a:	ed85 0a00 	vstr	s0, [r5]
}
 8001f9e:	b003      	add	sp, #12
 8001fa0:	bd30      	pop	{r4, r5, pc}
 8001fa2:	bf00      	nop
 8001fa4:	2000096c 	.word	0x2000096c
 8001fa8:	2000502c 	.word	0x2000502c

08001fac <LadderLowpassTick>:

void __ATTR_ITCMRAM  LadderLowpassTick(float* sample, int v, float cutoff, int string)
{
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 8001fac:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001fb0:	4b0d      	ldr	r3, [pc, #52]	; (8001fe8 <LadderLowpassTick+0x3c>)
{
 8001fb2:	b530      	push	{r4, r5, lr}
 8001fb4:	4605      	mov	r5, r0
 8001fb6:	b083      	sub	sp, #12
	tLadderFilter_setFreqFast(&Ladderfilter[v][string], cutoff);
 8001fb8:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8001fbc:	0094      	lsls	r4, r2, #2
 8001fbe:	9001      	str	r0, [sp, #4]
 8001fc0:	f015 f840 	bl	8017044 <tLadderFilter_setFreqFast>
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 8001fc4:	ed95 0a00 	vldr	s0, [r5]
 8001fc8:	9801      	ldr	r0, [sp, #4]
 8001fca:	f014 ff15 	bl	8016df8 <tLadderFilter_tick>
    *sample *= filterGain[v][string];
 8001fce:	4a07      	ldr	r2, [pc, #28]	; (8001fec <LadderLowpassTick+0x40>)
	*sample = tLadderFilter_tick(&Ladderfilter[v][string], *sample);
 8001fd0:	ed85 0a00 	vstr	s0, [r5]
    *sample *= filterGain[v][string];
 8001fd4:	4422      	add	r2, r4
 8001fd6:	edd2 7a00 	vldr	s15, [r2]
 8001fda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001fde:	ed85 0a00 	vstr	s0, [r5]
}
 8001fe2:	b003      	add	sp, #12
 8001fe4:	bd30      	pop	{r4, r5, pc}
 8001fe6:	bf00      	nop
 8001fe8:	2000095c 	.word	0x2000095c
 8001fec:	2000502c 	.word	0x2000502c

08001ff0 <setFreqMultPitch>:



void __ATTR_ITCMRAM setFreqMultPitch(float pitch, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001ff0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8001ff4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8001ff8:	eef0 0a40 	vmov.f32	s1, s0
 8001ffc:	b538      	push	{r3, r4, r5, lr}
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8001ffe:	0045      	lsls	r5, r0, #1
 8002000:	4b0e      	ldr	r3, [pc, #56]	; (800203c <setFreqMultPitch+0x4c>)
 8002002:	eb00 0082 	add.w	r0, r0, r2, lsl #2
{
 8002006:	460c      	mov	r4, r1
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8002008:	3020      	adds	r0, #32
 800200a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800200e:	4408      	add	r0, r1
 8002010:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002014:	ed90 7a02 	vldr	s14, [r0, #8]
 8002018:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800201c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002020:	dd01      	ble.n	8002026 <setFreqMultPitch+0x36>
	{
		pitch = roundf(pitch);
 8002022:	fef8 0a40 	vrinta.f32	s1, s0
	}

	freqMult[osc][string] = powf(1.059463094359295f, pitch);
 8002026:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8002040 <setFreqMultPitch+0x50>
 800202a:	442c      	add	r4, r5
 800202c:	f01b fecc 	bl	801ddc8 <powf>
 8002030:	4b04      	ldr	r3, [pc, #16]	; (8002044 <setFreqMultPitch+0x54>)
 8002032:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002036:	ed84 0a00 	vstr	s0, [r4]

}
 800203a:	bd38      	pop	{r3, r4, r5, pc}
 800203c:	20015c48 	.word	0x20015c48
 8002040:	3f879c7d 	.word	0x3f879c7d
 8002044:	2000505c 	.word	0x2000505c

08002048 <setFreqMultHarm>:

void __ATTR_ITCMRAM setFreqMultHarm(float harm, int osc, int string)
{
	if (params[OSC_PARAMS_OFFSET + osc * OscParamsNum + OscisStepped].realVal[string] > 0.5f) ///check for value of 1 since this is a float
 8002048:	eb00 0c40 	add.w	ip, r0, r0, lsl #1
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <setFreqMultHarm+0x5c>)
 800204e:	0042      	lsls	r2, r0, #1
 8002050:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8002054:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8002058:	3020      	adds	r0, #32
 800205a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 800205e:	4408      	add	r0, r1
 8002060:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002064:	ed90 7a02 	vldr	s14, [r0, #8]
 8002068:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800206c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002070:	dd01      	ble.n	8002076 <setFreqMultHarm+0x2e>
	{
		harm = roundf(harm);
 8002072:	feb8 0a40 	vrinta.f32	s0, s0
	}

	if (harm >= 0)
 8002076:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
	{
		freqMult[osc][string] = (harm + 1);
 800207a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	if (harm >= 0)
 800207e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002082:	db08      	blt.n	8002096 <setFreqMultHarm+0x4e>
		freqMult[osc][string] = (harm + 1);
 8002084:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <setFreqMultHarm+0x60>)
 800208a:	4411      	add	r1, r2
 800208c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002090:	ed81 0a00 	vstr	s0, [r1]
	else
	{
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
	}

}
 8002094:	4770      	bx	lr
		freqMult[osc][string] = (1.0f / fabsf((harm - 1)));
 8002096:	ee30 0a67 	vsub.f32	s0, s0, s15
 800209a:	eeb0 7ac0 	vabs.f32	s14, s0
 800209e:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80020a2:	e7f1      	b.n	8002088 <setFreqMultHarm+0x40>
 80020a4:	20015c48 	.word	0x20015c48
 80020a8:	2000505c 	.word	0x2000505c

080020ac <lowpassSetQ>:



void __ATTR_ITCMRAM  lowpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&lowpass[v][string], q);
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <lowpassSetQ+0x10>)
 80020ae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020b6:	f013 bd45 	b.w	8015b44 <tSVF_setQ>
 80020ba:	bf00      	nop
 80020bc:	200052fc 	.word	0x200052fc

080020c0 <highpassSetQ>:
}

void __ATTR_ITCMRAM  highpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&highpass[v][string], q);
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <highpassSetQ+0x10>)
 80020c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020ca:	f013 bd3b 	b.w	8015b44 <tSVF_setQ>
 80020ce:	bf00      	nop
 80020d0:	200050e8 	.word	0x200050e8

080020d4 <bandpassSetQ>:
}

void __ATTR_ITCMRAM  bandpassSetQ(float q, int v, int string)
{
    tSVF_setQ(&bandpass[v][string], q);
 80020d4:	4b03      	ldr	r3, [pc, #12]	; (80020e4 <bandpassSetQ+0x10>)
 80020d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020de:	f013 bd31 	b.w	8015b44 <tSVF_setQ>
 80020e2:	bf00      	nop
 80020e4:	20000ad4 	.word	0x20000ad4

080020e8 <diodeLowpassSetQ>:
}

void __ATTR_ITCMRAM  diodeLowpassSetQ(float q, int v, int string)
{
	tDiodeFilter_setQ(&diodeFilters[v][string], q);
 80020e8:	4b03      	ldr	r3, [pc, #12]	; (80020f8 <diodeLowpassSetQ+0x10>)
 80020ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80020ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80020f2:	f014 be29 	b.w	8016d48 <tDiodeFilter_setQ>
 80020f6:	bf00      	nop
 80020f8:	20004fcc 	.word	0x20004fcc

080020fc <VZpeakSetQ>:
}

void __ATTR_ITCMRAM  VZpeakSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterPeak[v][string], q);
 80020fc:	4b03      	ldr	r3, [pc, #12]	; (800210c <VZpeakSetQ+0x10>)
 80020fe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002102:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002106:	f014 b941 	b.w	801638c <tVZFilter_setResonance>
 800210a:	bf00      	nop
 800210c:	2000099c 	.word	0x2000099c

08002110 <VZlowshelfSetQ>:
}

void __ATTR_ITCMRAM  VZlowshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterLS[v][string], q);
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <VZlowshelfSetQ+0x10>)
 8002112:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002116:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800211a:	f014 b937 	b.w	801638c <tVZFilter_setResonance>
 800211e:	bf00      	nop
 8002120:	2000098c 	.word	0x2000098c

08002124 <VZhighshelfSetQ>:
}

void __ATTR_ITCMRAM  VZhighshelfSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterHS[v][string], q);
 8002124:	4b03      	ldr	r3, [pc, #12]	; (8002134 <VZhighshelfSetQ+0x10>)
 8002126:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800212a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800212e:	f014 b92d 	b.w	801638c <tVZFilter_setResonance>
 8002132:	bf00      	nop
 8002134:	2000097c 	.word	0x2000097c

08002138 <VZbandrejectSetQ>:
}

void __ATTR_ITCMRAM  VZbandrejectSetQ(float q, int v, int string)
{
	tVZFilter_setResonance(&VZfilterBR[v][string], q);
 8002138:	4b03      	ldr	r3, [pc, #12]	; (8002148 <VZbandrejectSetQ+0x10>)
 800213a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800213e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002142:	f014 b923 	b.w	801638c <tVZFilter_setResonance>
 8002146:	bf00      	nop
 8002148:	2000096c 	.word	0x2000096c

0800214c <LadderLowpassSetQ>:
}

void __ATTR_ITCMRAM  LadderLowpassSetQ(float q, int v, int string)
{
	tLadderFilter_setQ(&Ladderfilter[v][string], q);
 800214c:	4b03      	ldr	r3, [pc, #12]	; (800215c <LadderLowpassSetQ+0x10>)
 800214e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002152:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002156:	f014 bf99 	b.w	801708c <tLadderFilter_setQ>
 800215a:	bf00      	nop
 800215c:	2000095c 	.word	0x2000095c

08002160 <lowpassSetGain>:
}

void __ATTR_ITCMRAM  lowpassSetGain(float gain, int v, int string)
{
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8002160:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002164:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 8002168:	b538      	push	{r3, r4, r5, lr}
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 800216a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800216e:	4605      	mov	r5, r0
 8002170:	460c      	mov	r4, r1
    filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
 8002172:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002176:	eeb0 0a67 	vmov.f32	s0, s15
 800217a:	f015 fa21 	bl	80175c0 <fasterdbtoa>
 800217e:	4b03      	ldr	r3, [pc, #12]	; (800218c <lowpassSetGain+0x2c>)
 8002180:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002184:	ed84 0a00 	vstr	s0, [r4]
}
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	2000502c 	.word	0x2000502c

08002190 <highpassSetGain>:
 8002190:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 8002194:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 8002198:	b538      	push	{r3, r4, r5, lr}
 800219a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800219e:	4605      	mov	r5, r0
 80021a0:	460c      	mov	r4, r1
 80021a2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80021a6:	eeb0 0a67 	vmov.f32	s0, s15
 80021aa:	f015 fa09 	bl	80175c0 <fasterdbtoa>
 80021ae:	4b03      	ldr	r3, [pc, #12]	; (80021bc <highpassSetGain+0x2c>)
 80021b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80021b4:	ed84 0a00 	vstr	s0, [r4]
 80021b8:	bd38      	pop	{r3, r4, r5, pc}
 80021ba:	bf00      	nop
 80021bc:	2000502c 	.word	0x2000502c

080021c0 <bandpassSetGain>:
 80021c0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80021c4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80021c8:	b538      	push	{r3, r4, r5, lr}
 80021ca:	eee0 7a07 	vfma.f32	s15, s0, s14
 80021ce:	4605      	mov	r5, r0
 80021d0:	460c      	mov	r4, r1
 80021d2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80021d6:	eeb0 0a67 	vmov.f32	s0, s15
 80021da:	f015 f9f1 	bl	80175c0 <fasterdbtoa>
 80021de:	4b03      	ldr	r3, [pc, #12]	; (80021ec <bandpassSetGain+0x2c>)
 80021e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80021e4:	ed84 0a00 	vstr	s0, [r4]
 80021e8:	bd38      	pop	{r3, r4, r5, pc}
 80021ea:	bf00      	nop
 80021ec:	2000502c 	.word	0x2000502c

080021f0 <diodeLowpassSetGain>:
 80021f0:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80021f4:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	eee0 7a07 	vfma.f32	s15, s0, s14
 80021fe:	4605      	mov	r5, r0
 8002200:	460c      	mov	r4, r1
 8002202:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002206:	eeb0 0a67 	vmov.f32	s0, s15
 800220a:	f015 f9d9 	bl	80175c0 <fasterdbtoa>
 800220e:	4b03      	ldr	r3, [pc, #12]	; (800221c <diodeLowpassSetGain+0x2c>)
 8002210:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002214:	ed84 0a00 	vstr	s0, [r4]
 8002218:	bd38      	pop	{r3, r4, r5, pc}
 800221a:	bf00      	nop
 800221c:	2000502c 	.word	0x2000502c

08002220 <VZpeakSetGain>:
	filterGain[v][string] = fasterdbtoa((gain * 24.0f) - 12.0f);
}

void __ATTR_ITCMRAM  VZpeakSetGain(float gain, int v, int string)
{
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002220:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002224:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800224c <VZpeakSetGain+0x2c>
{
 8002228:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800222a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800222e:	4605      	mov	r5, r0
 8002230:	460c      	mov	r4, r1
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002232:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002236:	eeb0 0a67 	vmov.f32	s0, s15
 800223a:	f015 f9c1 	bl	80175c0 <fasterdbtoa>
 800223e:	4804      	ldr	r0, [pc, #16]	; (8002250 <VZpeakSetGain+0x30>)
 8002240:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002244:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&VZfilterPeak[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002248:	f014 b884 	b.w	8016354 <tVZFilter_setGain>
 800224c:	42480000 	.word	0x42480000
 8002250:	2000099c 	.word	0x2000099c

08002254 <VZlowshelfSetGain>:

void __ATTR_ITCMRAM  VZlowshelfSetGain(float gain, int v, int string)
{
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002254:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8002258:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002280 <VZlowshelfSetGain+0x2c>
{
 800225c:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800225e:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002262:	4605      	mov	r5, r0
 8002264:	460c      	mov	r4, r1
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 8002266:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800226a:	eeb0 0a67 	vmov.f32	s0, s15
 800226e:	f015 f9a7 	bl	80175c0 <fasterdbtoa>
 8002272:	4804      	ldr	r0, [pc, #16]	; (8002284 <VZlowshelfSetGain+0x30>)
 8002274:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&VZfilterLS[v][string], fasterdbtoa((gain * 50.f) - 25.f));
 800227c:	f014 b86a 	b.w	8016354 <tVZFilter_setGain>
 8002280:	42480000 	.word	0x42480000
 8002284:	2000098c 	.word	0x2000098c

08002288 <VZhighshelfSetGain>:
 8002288:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 800228c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80022b4 <VZhighshelfSetGain+0x2c>
 8002290:	b538      	push	{r3, r4, r5, lr}
 8002292:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002296:	4605      	mov	r5, r0
 8002298:	460c      	mov	r4, r1
 800229a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800229e:	eeb0 0a67 	vmov.f32	s0, s15
 80022a2:	f015 f98d 	bl	80175c0 <fasterdbtoa>
 80022a6:	4804      	ldr	r0, [pc, #16]	; (80022b8 <VZhighshelfSetGain+0x30>)
 80022a8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 80022ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022b0:	f014 b850 	b.w	8016354 <tVZFilter_setGain>
 80022b4:	42480000 	.word	0x42480000
 80022b8:	2000098c 	.word	0x2000098c

080022bc <VZbandrejectSetGain>:
 80022bc:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80022c0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80022ca:	4605      	mov	r5, r0
 80022cc:	460c      	mov	r4, r1
 80022ce:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80022d2:	eeb0 0a67 	vmov.f32	s0, s15
 80022d6:	f015 f973 	bl	80175c0 <fasterdbtoa>
 80022da:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <VZbandrejectSetGain+0x2c>)
 80022dc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80022e0:	ed84 0a00 	vstr	s0, [r4]
 80022e4:	bd38      	pop	{r3, r4, r5, pc}
 80022e6:	bf00      	nop
 80022e8:	2000502c 	.word	0x2000502c

080022ec <LadderLowpassSetGain>:
 80022ec:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80022f0:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
 80022f4:	b538      	push	{r3, r4, r5, lr}
 80022f6:	eee0 7a07 	vfma.f32	s15, s0, s14
 80022fa:	4605      	mov	r5, r0
 80022fc:	460c      	mov	r4, r1
 80022fe:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002302:	eeb0 0a67 	vmov.f32	s0, s15
 8002306:	f015 f95b 	bl	80175c0 <fasterdbtoa>
 800230a:	4b03      	ldr	r3, [pc, #12]	; (8002318 <LadderLowpassSetGain+0x2c>)
 800230c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002310:	ed84 0a00 	vstr	s0, [r4]
 8002314:	bd38      	pop	{r3, r4, r5, pc}
 8002316:	bf00      	nop
 8002318:	2000502c 	.word	0x2000502c

0800231c <setEnvelopeAttack>:
}


void  __ATTR_ITCMRAM  setEnvelopeAttack(float a, int v, int string)
{
	a = a + 0.01f;
 800231c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002334 <setEnvelopeAttack+0x18>
	tADSRT_setAttack(&envs[v][string], a);
 8002320:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <setEnvelopeAttack+0x1c>)
 8002326:	ee30 0a27 	vadd.f32	s0, s0, s15
 800232a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800232e:	f012 bed5 	b.w	80150dc <tADSRT_setAttack>
 8002332:	bf00      	nop
 8002334:	3c23d70a 	.word	0x3c23d70a
 8002338:	20004ff4 	.word	0x20004ff4

0800233c <setEnvelopeDecay>:
}

void  __ATTR_ITCMRAM  setEnvelopeDecay(float d, int v, int string)
{
	d = d + 0.01f;
 800233c:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002354 <setEnvelopeDecay+0x18>
	tADSRT_setDecay(&envs[v][string], d);
 8002340:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002344:	4b04      	ldr	r3, [pc, #16]	; (8002358 <setEnvelopeDecay+0x1c>)
 8002346:	ee30 0a27 	vadd.f32	s0, s0, s15
 800234a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800234e:	f012 bed9 	b.w	8015104 <tADSRT_setDecay>
 8002352:	bf00      	nop
 8002354:	3c23d70a 	.word	0x3c23d70a
 8002358:	20004ff4 	.word	0x20004ff4

0800235c <setEnvelopeSustain>:
}

void  __ATTR_ITCMRAM  setEnvelopeSustain(float s, int v, int string)
{
	tADSRT_setSustain(&envs[v][string], s);
 800235c:	4b03      	ldr	r3, [pc, #12]	; (800236c <setEnvelopeSustain+0x10>)
 800235e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002362:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002366:	f012 bee1 	b.w	801512c <tADSRT_setSustain>
 800236a:	bf00      	nop
 800236c:	20004ff4 	.word	0x20004ff4

08002370 <setEnvelopeRelease>:
}

void  __ATTR_ITCMRAM  setEnvelopeRelease(float r, int v, int string)
{
	r = r + 0.01f;
 8002370:	eddf 7a05 	vldr	s15, [pc, #20]	; 8002388 <setEnvelopeRelease+0x18>
	tADSRT_setRelease(&envs[v][string], r);
 8002374:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <setEnvelopeRelease+0x1c>)
 800237a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800237e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002382:	f012 bee9 	b.w	8015158 <tADSRT_setRelease>
 8002386:	bf00      	nop
 8002388:	3c23d70a 	.word	0x3c23d70a
 800238c:	20004ff4 	.word	0x20004ff4

08002390 <setEnvelopeLeak>:
}

void  __ATTR_ITCMRAM  setEnvelopeLeak(float leak, int v, int string)
{
	tADSRT_setLeakFactor(&envs[v][string], 0.99995f + 0.00005f*(1.f-leak));
 8002390:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002394:	eddf 6a08 	vldr	s13, [pc, #32]	; 80023b8 <setEnvelopeLeak+0x28>
 8002398:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80023bc <setEnvelopeLeak+0x2c>
 800239c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80023a0:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <setEnvelopeLeak+0x30>)
 80023a2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80023a6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80023aa:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80023ae:	eeb0 0a47 	vmov.f32	s0, s14
 80023b2:	f012 bee5 	b.w	8015180 <tADSRT_setLeakFactor>
 80023b6:	bf00      	nop
 80023b8:	3851b717 	.word	0x3851b717
 80023bc:	3f7ffcb9 	.word	0x3f7ffcb9
 80023c0:	20004ff4 	.word	0x20004ff4

080023c4 <setAmp>:
}

void  __ATTR_ITCMRAM  setAmp(float amp, int v, int string)
{
	amplitude[string] = amp;
 80023c4:	4b02      	ldr	r3, [pc, #8]	; (80023d0 <setAmp+0xc>)
 80023c6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023ca:	ed81 0a00 	vstr	s0, [r1]
}
 80023ce:	4770      	bx	lr
 80023d0:	20000acc 	.word	0x20000acc

080023d4 <setMaster>:

void  __ATTR_ITCMRAM  setMaster(float amp,  int v, int string)
{
	finalMaster[string] = amp;
 80023d4:	4b02      	ldr	r3, [pc, #8]	; (80023e0 <setMaster+0xc>)
 80023d6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80023da:	ed81 0a00 	vstr	s0, [r1]
}
 80023de:	4770      	bx	lr
 80023e0:	2000504c 	.word	0x2000504c

080023e4 <setTranspose>:

void  __ATTR_ITCMRAM  setTranspose(float in, int v, int string)
{
	transpose = in;
 80023e4:	4b01      	ldr	r3, [pc, #4]	; (80023ec <setTranspose+0x8>)
 80023e6:	ed83 0a00 	vstr	s0, [r3]
}
 80023ea:	4770      	bx	lr
 80023ec:	20012fe4 	.word	0x20012fe4

080023f0 <setPitchBendRange>:

void  __ATTR_ITCMRAM  setPitchBendRange(float in, int v, int string)
{
	bendRangeMultiplier = 1.0f / (16383.0f / (in * 2.0f));
 80023f0:	eddf 7a03 	vldr	s15, [pc, #12]	; 8002400 <setPitchBendRange+0x10>
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <setPitchBendRange+0x14>)
 80023f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 80023fa:	ed83 0a00 	vstr	s0, [r3]
}
 80023fe:	4770      	bx	lr
 8002400:	39000200 	.word	0x39000200
 8002404:	20000000 	.word	0x20000000

08002408 <setFinalLowpass>:

void  __ATTR_ITCMRAM  setFinalLowpass(float in, int v, int string)
{
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002408:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
 800240c:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800243c <setFinalLowpass+0x34>
{
 8002410:	eef0 7a40 	vmov.f32	s15, s0
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002414:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8002440 <setFinalLowpass+0x38>
 8002418:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002444 <setFinalLowpass+0x3c>
 800241c:	ee77 7ac7 	vsub.f32	s15, s15, s14
{
 8002420:	b510      	push	{r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002422:	ee67 0aa0 	vmul.f32	s1, s15, s1
{
 8002426:	460c      	mov	r4, r1
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002428:	f014 ff12 	bl	8017250 <LEAF_clip>
 800242c:	4806      	ldr	r0, [pc, #24]	; (8002448 <setFinalLowpass+0x40>)
 800242e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tSVF_setFreqFast(&finalLowpass[string], LEAF_clip(0.0f, (in-16.0f) * 35.929824561403509f, 4095.0f));
 8002436:	f013 bb4f 	b.w	8015ad8 <tSVF_setFreqFast>
 800243a:	bf00      	nop
 800243c:	420fb824 	.word	0x420fb824
 8002440:	457ff000 	.word	0x457ff000
 8002444:	00000000 	.word	0x00000000
 8002448:	20005044 	.word	0x20005044

0800244c <tickMappings>:

uint32_t timeMap = 0;
void __ATTR_ITCMRAM tickMappings(void)
{
 800244c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interruptChecker = 0;
 8002450:	4956      	ldr	r1, [pc, #344]	; (80025ac <tickMappings+0x160>)
 8002452:	2700      	movs	r7, #0
	uint32_t tempCount1 = DWT->CYCCNT;
 8002454:	4a56      	ldr	r2, [pc, #344]	; (80025b0 <tickMappings+0x164>)
	for (int i = 0; i < numMappings; i++)
 8002456:	4b57      	ldr	r3, [pc, #348]	; (80025b4 <tickMappings+0x168>)
{
 8002458:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 0;
 800245c:	700f      	strb	r7, [r1, #0]
{
 800245e:	b083      	sub	sp, #12
	uint32_t tempCount1 = DWT->CYCCNT;
 8002460:	6852      	ldr	r2, [r2, #4]
	for (int i = 0; i < numMappings; i++)
 8002462:	781b      	ldrb	r3, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8002464:	9201      	str	r2, [sp, #4]
	for (int i = 0; i < numMappings; i++)
 8002466:	2b00      	cmp	r3, #0
 8002468:	f000 8086 	beq.w	8002578 <tickMappings+0x12c>
	{
		for (int v = 0; v < numStringsThisBoard; v++)
 800246c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 80025c4 <tickMappings+0x178>
 8002470:	f8df 9154 	ldr.w	r9, [pc, #340]	; 80025c8 <tickMappings+0x17c>
 8002474:	f898 2000 	ldrb.w	r2, [r8]
 8002478:	4c4f      	ldr	r4, [pc, #316]	; (80025b8 <tickMappings+0x16c>)
 800247a:	2a00      	cmp	r2, #0
 800247c:	d07c      	beq.n	8002578 <tickMappings+0x12c>
 800247e:	46a3      	mov	fp, r4
 8002480:	464e      	mov	r6, r9
 8002482:	2500      	movs	r5, #0
		{

			float unsmoothedValue = 0.0f;
			float smoothedValue = 0.0f;
			for (int j = 0; j < mappings[i].numHooks; j++)
 8002484:	f894 0040 	ldrb.w	r0, [r4, #64]	; 0x40
 8002488:	2800      	cmp	r0, #0
 800248a:	f000 8086 	beq.w	800259a <tickMappings+0x14e>
			{
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 800248e:	f8db 101c 	ldr.w	r1, [fp, #28]
 8002492:	f8db 2000 	ldr.w	r2, [fp]
 8002496:	edd1 7a00 	vldr	s15, [r1]
 800249a:	ed92 7a00 	vldr	s14, [r2]
 800249e:	ed94 0a0d 	vldr	s0, [r4, #52]	; 0x34
 80024a2:	ee67 7a87 	vmul.f32	s15, s15, s14
				if (mappings[i].sourceSmoothed[j])
 80024a6:	7e23      	ldrb	r3, [r4, #24]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024a8:	ee67 7a80 	vmul.f32	s15, s15, s0
				if (mappings[i].sourceSmoothed[j])
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d16e      	bne.n	800258e <tickMappings+0x142>
				{
					smoothedValue += sum;
				}
				else
				{
					unsmoothedValue += sum;
 80024b0:	eeb0 8a67 	vmov.f32	s16, s15
			float smoothedValue = 0.0f;
 80024b4:	eddf 7a41 	vldr	s15, [pc, #260]	; 80025bc <tickMappings+0x170>
			for (int j = 0; j < mappings[i].numHooks; j++)
 80024b8:	2801      	cmp	r0, #1
 80024ba:	d027      	beq.n	800250c <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024bc:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
 80024c0:	f8db 2008 	ldr.w	r2, [fp, #8]
 80024c4:	ed91 7a00 	vldr	s14, [r1]
 80024c8:	ed92 6a00 	vldr	s12, [r2]
 80024cc:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 80024d0:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 80024d4:	7e63      	ldrb	r3, [r4, #25]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024d6:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d15a      	bne.n	8002594 <tickMappings+0x148>
					unsmoothedValue += sum;
 80024de:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80024e2:	2802      	cmp	r0, #2
 80024e4:	d012      	beq.n	800250c <tickMappings+0xc0>
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 80024e6:	f8db 1010 	ldr.w	r1, [fp, #16]
 80024ea:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
 80024ee:	ed91 7a00 	vldr	s14, [r1]
 80024f2:	ed92 6a00 	vldr	s12, [r2]
 80024f6:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
 80024fa:	ee27 7a06 	vmul.f32	s14, s14, s12
				if (mappings[i].sourceSmoothed[j])
 80024fe:	7ea0      	ldrb	r0, [r4, #26]
				float sum = *mappings[i].sourceValPtr[j][v] * mappings[i].amount[j] * *mappings[i].scalarSourceValPtr[j][v];
 8002500:	ee27 7a26 	vmul.f32	s14, s14, s13
				if (mappings[i].sourceSmoothed[j])
 8002504:	2800      	cmp	r0, #0
 8002506:	d04d      	beq.n	80025a4 <tickMappings+0x158>
					smoothedValue += sum;
 8002508:	ee77 7a87 	vadd.f32	s15, s15, s14
				}
			}
			//sources are now summed - let's add the initial value
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 800250c:	f854 2c04 	ldr.w	r2, [r4, #-4]

			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 8002510:	4630      	mov	r0, r6
		for (int v = 0; v < numStringsThisBoard; v++)
 8002512:	f10b 0b04 	add.w	fp, fp, #4
			smoothedValue += mappings[i].dest->zeroToOneVal[v];
 8002516:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800251a:	ed92 0a00 	vldr	s0, [r2]
			tExpSmooth_setDest(&mapSmoothers[i][v], smoothedValue);
 800251e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8002522:	f013 f8cd 	bl	80156c0 <tExpSmooth_setDest>
			smoothedValue = tExpSmooth_tick(&mapSmoothers[i][v]);
 8002526:	4630      	mov	r0, r6
 8002528:	f013 f8ce 	bl	80156c8 <tExpSmooth_tick>
			float finalVal = unsmoothedValue + smoothedValue;

			//now scale the value with the correct scaling function
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 800252c:	f854 ac04 	ldr.w	sl, [r4, #-4]
 8002530:	ee30 0a08 	vadd.f32	s0, s0, s16
		for (int v = 0; v < numStringsThisBoard; v++)
 8002534:	3604      	adds	r6, #4
			mappings[i].dest->realVal[v] = mappings[i].dest->scaleFunc(finalVal);
 8002536:	f8da 2010 	ldr.w	r2, [sl, #16]
 800253a:	4790      	blx	r2
 800253c:	1caa      	adds	r2, r5, #2
 800253e:	eb0a 0182 	add.w	r1, sl, r2, lsl #2
 8002542:	ed81 0a00 	vstr	s0, [r1]

			//and pop that value where it belongs by setting the actual parameter
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 8002546:	4629      	mov	r1, r5
 8002548:	f854 0c04 	ldr.w	r0, [r4, #-4]
		for (int v = 0; v < numStringsThisBoard; v++)
 800254c:	3501      	adds	r5, #1
			mappings[i].dest->setParam(mappings[i].dest->realVal[v], mappings[i].dest->objectNumber, v);
 800254e:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 8002552:	6942      	ldr	r2, [r0, #20]
 8002554:	7e00      	ldrb	r0, [r0, #24]
 8002556:	ed9c 0a00 	vldr	s0, [ip]
 800255a:	4790      	blx	r2
		for (int v = 0; v < numStringsThisBoard; v++)
 800255c:	f898 2000 	ldrb.w	r2, [r8]
 8002560:	42aa      	cmp	r2, r5
 8002562:	dc8f      	bgt.n	8002484 <tickMappings+0x38>
	for (int i = 0; i < numMappings; i++)
 8002564:	4b13      	ldr	r3, [pc, #76]	; (80025b4 <tickMappings+0x168>)
 8002566:	3701      	adds	r7, #1
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	429f      	cmp	r7, r3
 800256c:	da04      	bge.n	8002578 <tickMappings+0x12c>
 800256e:	f109 0908 	add.w	r9, r9, #8
 8002572:	344c      	adds	r4, #76	; 0x4c
		for (int v = 0; v < numStringsThisBoard; v++)
 8002574:	2a00      	cmp	r2, #0
 8002576:	d182      	bne.n	800247e <tickMappings+0x32>
		}
	}
	timeMap = DWT->CYCCNT - tempCount1;
 8002578:	4b0d      	ldr	r3, [pc, #52]	; (80025b0 <tickMappings+0x164>)
 800257a:	9901      	ldr	r1, [sp, #4]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	4a10      	ldr	r2, [pc, #64]	; (80025c0 <tickMappings+0x174>)
 8002580:	1a5b      	subs	r3, r3, r1
 8002582:	6013      	str	r3, [r2, #0]

}
 8002584:	b003      	add	sp, #12
 8002586:	ecbd 8b02 	vpop	{d8}
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			float unsmoothedValue = 0.0f;
 800258e:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 80025bc <tickMappings+0x170>
 8002592:	e791      	b.n	80024b8 <tickMappings+0x6c>
					smoothedValue += sum;
 8002594:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002598:	e7a3      	b.n	80024e2 <tickMappings+0x96>
			float smoothedValue = 0.0f;
 800259a:	eddf 7a08 	vldr	s15, [pc, #32]	; 80025bc <tickMappings+0x170>
			float unsmoothedValue = 0.0f;
 800259e:	eeb0 8a67 	vmov.f32	s16, s15
 80025a2:	e7b3      	b.n	800250c <tickMappings+0xc0>
					unsmoothedValue += sum;
 80025a4:	ee38 8a07 	vadd.f32	s16, s16, s14
			for (int j = 0; j < mappings[i].numHooks; j++)
 80025a8:	e7b0      	b.n	800250c <tickMappings+0xc0>
 80025aa:	bf00      	nop
 80025ac:	20015281 	.word	0x20015281
 80025b0:	e0001000 	.word	0xe0001000
 80025b4:	20015c44 	.word	0x20015c44
 80025b8:	200152c0 	.word	0x200152c0
 80025bc:	00000000 	.word	0x00000000
 80025c0:	20012fa4 	.word	0x20012fa4
 80025c4:	20000052 	.word	0x20000052
 80025c8:	20005310 	.word	0x20005310

080025cc <audioTickString>:




float  audioTickString(void)
{
 80025cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
 80025d0:	f8df 9210 	ldr.w	r9, [pc, #528]	; 80027e4 <audioTickString+0x218>
 80025d4:	4d74      	ldr	r5, [pc, #464]	; (80027a8 <audioTickString+0x1dc>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80025d6:	4875      	ldr	r0, [pc, #468]	; (80027ac <audioTickString+0x1e0>)
 80025d8:	f8df 820c 	ldr.w	r8, [pc, #524]	; 80027e8 <audioTickString+0x21c>
 80025dc:	462c      	mov	r4, r5
 80025de:	f105 0a30 	add.w	sl, r5, #48	; 0x30
{
 80025e2:	ed2d 8b0c 	vpush	{d8-d13}
 80025e6:	b083      	sub	sp, #12
	float note[numStringsThisBoard];
 80025e8:	f899 3000 	ldrb.w	r3, [r9]
{
 80025ec:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3307      	adds	r3, #7
 80025f2:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80025f6:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80025fa:	f013 f865 	bl	80156c8 <tExpSmooth_tick>
 80025fe:	eeb0 ba40 	vmov.f32	s22, s0
	float note[numStringsThisBoard];
 8002602:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002604:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
 8002606:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 800260a:	f013 f85d 	bl	80156c8 <tExpSmooth_tick>
 800260e:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 8002612:	4554      	cmp	r4, sl
 8002614:	d1f6      	bne.n	8002604 <audioTickString+0x38>
	}
	pluckPos = knobScaled[9];
 8002616:	4a66      	ldr	r2, [pc, #408]	; (80027b0 <audioTickString+0x1e4>)
 8002618:	6a69      	ldr	r1, [r5, #36]	; 0x24

	for (int i = 0; i < numStringsThisBoard; i++)
 800261a:	f899 3000 	ldrb.w	r3, [r9]
	float temp = 0.0f;
 800261e:	eddf 9a65 	vldr	s19, [pc, #404]	; 80027b4 <audioTickString+0x1e8>
	pluckPos = knobScaled[9];
 8002622:	6011      	str	r1, [r2, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 8088 	beq.w	800273a <audioTickString+0x16e>
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <audioTickString+0x1ec>)
		float finalFreq = mtof(note[i]) * invMapping[i] ;
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
		float decay = 0.1f;
		if (lsDecay[i])
		{
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 800262c:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
		if (note[i] < 0.0f)
 8002630:	eef0 aa69 	vmov.f32	s21, s19
 8002634:	f8df b1b4 	ldr.w	fp, [pc, #436]	; 80027ec <audioTickString+0x220>
 8002638:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < numStringsThisBoard; i++)
 800263a:	f04f 0800 	mov.w	r8, #0
 800263e:	4b5f      	ldr	r3, [pc, #380]	; (80027bc <audioTickString+0x1f0>)
 8002640:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 80027f0 <audioTickString+0x224>
 8002644:	4c5e      	ldr	r4, [pc, #376]	; (80027c0 <audioTickString+0x1f4>)
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8002646:	eddf ca5f 	vldr	s25, [pc, #380]	; 80027c4 <audioTickString+0x1f8>
 800264a:	ed9f ca5f 	vldr	s24, [pc, #380]	; 80027c8 <audioTickString+0x1fc>
		float decay = 0.1f;
 800264e:	ed9f 9a5f 	vldr	s18, [pc, #380]	; 80027cc <audioTickString+0x200>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 8002652:	ed9f da5f 	vldr	s26, [pc, #380]	; 80027d0 <audioTickString+0x204>
 8002656:	607b      	str	r3, [r7, #4]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8002658:	ecfb 7a01 	vldmia	fp!, {s15}
 800265c:	ecba 0a01 	vldmia	sl!, {s0}
 8002660:	ee37 0a80 	vadd.f32	s0, s15, s0
		if (note[i] < 0.0f)
 8002664:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	f100 8097 	bmi.w	800279e <audioTickString+0x1d2>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8002670:	ed86 0a00 	vstr	s0, [r6]
		float finalFreq = mtof(note[i]) * invMapping[i] ;
 8002674:	f014 ff0c 	bl	8017490 <mtof>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	eeb0 8a40 	vmov.f32	s16, s0
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 800267e:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8002682:	eeb0 0a4c 	vmov.f32	s0, s24
		float finalFreq = mtof(note[i]) * invMapping[i] ;
 8002686:	ecf3 7a01 	vldmia	r3!, {s15}
		float decay = 0.1f;
 800268a:	eeb0 aa49 	vmov.f32	s20, s18
		float finalFreq = mtof(note[i]) * invMapping[i] ;
 800268e:	603b      	str	r3, [r7, #0]
 8002690:	ee28 8a27 	vmul.f32	s16, s16, s15
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 8002694:	eea7 0a2c 	vfma.f32	s0, s14, s25
 8002698:	f014 ff24 	bl	80174e4 <faster_mtof>
		if (lsDecay[i])
 800269c:	687a      	ldr	r2, [r7, #4]
		float dampFreq = faster_mtof((knobScaled[11] * 140.0f)+60.0f);
 800269e:	eef0 8a40 	vmov.f32	s17, s0
		if (lsDecay[i])
 80026a2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80026a6:	607a      	str	r2, [r7, #4]
 80026a8:	b12b      	cbz	r3, 80026b6 <audioTickString+0xea>
			decay = (knobScaled[10] * 800.0f) + 0.5f;
 80026aa:	eeb0 aa6b 	vmov.f32	s20, s23
 80026ae:	edd5 7a0a 	vldr	s15, [r5, #40]	; 0x28
 80026b2:	eea7 aa8d 	vfma.f32	s20, s15, s26
		}
		tSimpleLivingString3_setPickupPoint(&livStr[i], knobScaled[8]);
 80026b6:	4620      	mov	r0, r4
 80026b8:	ed95 0a08 	vldr	s0, [r5, #32]
 80026bc:	f01a f9d6 	bl	801ca6c <tSimpleLivingString3_setPickupPoint>
		tSimpleLivingString3_setDecay(&livStr[i], decay);
 80026c0:	4620      	mov	r0, r4
 80026c2:	eeb0 0a4a 	vmov.f32	s0, s20
	for (int i = 0; i < numStringsThisBoard; i++)
 80026c6:	f108 0801 	add.w	r8, r8, #1
		tSimpleLivingString3_setDecay(&livStr[i], decay);
 80026ca:	f01a f829 	bl	801c720 <tSimpleLivingString3_setDecay>
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
 80026ce:	4620      	mov	r0, r4
 80026d0:	eeb0 0a68 	vmov.f32	s0, s17
	for (int i = 0; i < numStringsThisBoard; i++)
 80026d4:	3604      	adds	r6, #4
		tSimpleLivingString3_setDampFreq(&livStr[i], dampFreq);
 80026d6:	f01a f81f 	bl	801c718 <tSimpleLivingString3_setDampFreq>


		tSimpleLivingString3_setTargetLev(&livStr[i], knobScaled[0]);
 80026da:	4620      	mov	r0, r4
 80026dc:	ed95 0a00 	vldr	s0, [r5]
 80026e0:	f01a f844 	bl	801c76c <tSimpleLivingString3_setTargetLev>
		tSimpleLivingString3_setLevSmoothFactor(&livStr[i], knobScaled[1] * 0.1f);
 80026e4:	ed95 0a01 	vldr	s0, [r5, #4]
 80026e8:	4620      	mov	r0, r4
 80026ea:	ee20 0a09 	vmul.f32	s0, s0, s18
 80026ee:	f01a f841 	bl	801c774 <tSimpleLivingString3_setLevSmoothFactor>
		tSimpleLivingString3_setLevStrength(&livStr[i], knobScaled[2] * 0.1f);
 80026f2:	ed95 0a02 	vldr	s0, [r5, #8]
 80026f6:	4620      	mov	r0, r4
 80026f8:	ee20 0a09 	vmul.f32	s0, s0, s18
 80026fc:	f01a f83e 	bl	801c77c <tSimpleLivingString3_setLevStrength>
		tSimpleLivingString3_setLevMode(&livStr[i], knobScaled[3] > 0.5f);
 8002700:	edd5 7a03 	vldr	s15, [r5, #12]
 8002704:	4620      	mov	r0, r4
 8002706:	eef4 7aeb 	vcmpe.f32	s15, s23
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	bfcc      	ite	gt
 8002710:	2101      	movgt	r1, #1
 8002712:	2100      	movle	r1, #0
 8002714:	f01a f836 	bl	801c784 <tSimpleLivingString3_setLevMode>
		tSimpleLivingString3_setFreq(&livStr[i], finalFreq);
 8002718:	4620      	mov	r0, r4
 800271a:	eeb0 0a48 	vmov.f32	s0, s16
 800271e:	f019 ffab 	bl	801c678 <tSimpleLivingString3_setFreq>
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 8002722:	4620      	mov	r0, r4
 8002724:	eeb0 0a6a 	vmov.f32	s0, s21
	for (int i = 0; i < numStringsThisBoard; i++)
 8002728:	3404      	adds	r4, #4
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 800272a:	f01a f8dd 	bl	801c8e8 <tSimpleLivingString3_tick>
	for (int i = 0; i < numStringsThisBoard; i++)
 800272e:	f899 3000 	ldrb.w	r3, [r9]
		temp += tSimpleLivingString3_tick(&livStr[i], 0.0f);
 8002732:	ee79 9a80 	vadd.f32	s19, s19, s0
	for (int i = 0; i < numStringsThisBoard; i++)
 8002736:	4543      	cmp	r3, r8
 8002738:	dc8e      	bgt.n	8002658 <audioTickString+0x8c>
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 800273a:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80027d4 <audioTickString+0x208>
 800273e:	eddf 7a26 	vldr	s15, [pc, #152]	; 80027d8 <audioTickString+0x20c>
 8002742:	eef0 0a40 	vmov.f32	s1, s0
 8002746:	ed9f 1a25 	vldr	s2, [pc, #148]	; 80027dc <audioTickString+0x210>
 800274a:	eeeb 0a27 	vfma.f32	s1, s22, s15
 800274e:	f014 fd7f 	bl	8017250 <LEAF_clip>
	int volIdxInt = (int) volIdx;
 8002752:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002756:	4a22      	ldr	r2, [pc, #136]	; (80027e0 <audioTickString+0x214>)
	float omAlpha = 1.0f - alpha;
 8002758:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return temp;
}
 800275c:	370c      	adds	r7, #12
	int volIdxInt = (int) volIdx;
 800275e:	ee17 3a10 	vmov	r3, s14
	float alpha = volIdx-volIdxInt;
 8002762:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	float omAlpha = 1.0f - alpha;
 8002766:	ee77 7ac0 	vsub.f32	s15, s15, s0
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 800276a:	1c59      	adds	r1, r3, #1
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 800276c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
 8002770:	ee30 0a47 	vsub.f32	s0, s0, s14
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002774:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	float omAlpha = 1.0f - alpha;
 8002778:	ee77 7a87 	vadd.f32	s15, s15, s14
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8002784:	edd2 6a00 	vldr	s13, [r2]
 8002788:	ee20 0a26 	vmul.f32	s0, s0, s13
 800278c:	eea7 0a27 	vfma.f32	s0, s14, s15
}
 8002790:	ee20 0a29 	vmul.f32	s0, s0, s19
 8002794:	46bd      	mov	sp, r7
 8002796:	ecbd 8b0c 	vpop	{d8-d13}
 800279a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			note[i] = 0.0f;
 800279e:	eeb0 0a6a 	vmov.f32	s0, s21
 80027a2:	edc6 aa00 	vstr	s21, [r6]
 80027a6:	e765      	b.n	8002674 <audioTickString+0xa8>
 80027a8:	20005128 	.word	0x20005128
 80027ac:	20013010 	.word	0x20013010
 80027b0:	2000018c 	.word	0x2000018c
 80027b4:	00000000 	.word	0x00000000
 80027b8:	2000511c 	.word	0x2000511c
 80027bc:	2000530c 	.word	0x2000530c
 80027c0:	200052f4 	.word	0x200052f4
 80027c4:	430c0000 	.word	0x430c0000
 80027c8:	42700000 	.word	0x42700000
 80027cc:	3dcccccd 	.word	0x3dcccccd
 80027d0:	44480000 	.word	0x44480000
 80027d4:	423c0000 	.word	0x423c0000
 80027d8:	42a00000 	.word	0x42a00000
 80027dc:	42fe0000 	.word	0x42fe0000
 80027e0:	20000514 	.word	0x20000514
 80027e4:	20000052 	.word	0x20000052
 80027e8:	2000519c 	.word	0x2000519c
 80027ec:	20012f38 	.word	0x20012f38
 80027f0:	20012f70 	.word	0x20012f70

080027f4 <audioTickString2>:



float  audioTickString2(void)
{
 80027f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float temp = 0.0f;
	float note[numStringsThisBoard];
 80027f8:	4ba8      	ldr	r3, [pc, #672]	; (8002a9c <audioTickString2+0x2a8>)
 80027fa:	4da9      	ldr	r5, [pc, #676]	; (8002aa0 <audioTickString2+0x2ac>)

	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 80027fc:	48a9      	ldr	r0, [pc, #676]	; (8002aa4 <audioTickString2+0x2b0>)
 80027fe:	f8df 82f8 	ldr.w	r8, [pc, #760]	; 8002af8 <audioTickString2+0x304>
 8002802:	462c      	mov	r4, r5
 8002804:	f105 0930 	add.w	r9, r5, #48	; 0x30
{
 8002808:	ed2d 8b08 	vpush	{d8-d11}
 800280c:	b087      	sub	sp, #28
	float note[numStringsThisBoard];
 800280e:	781b      	ldrb	r3, [r3, #0]
{
 8002810:	af00      	add	r7, sp, #0
	float note[numStringsThisBoard];
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3307      	adds	r3, #7
 8002816:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 800281a:	ebad 0d03 	sub.w	sp, sp, r3
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 800281e:	f012 ff53 	bl	80156c8 <tExpSmooth_tick>
 8002822:	eeb0 9a40 	vmov.f32	s18, s0
	float note[numStringsThisBoard];
 8002826:	466e      	mov	r6, sp

	for (int i = 0; i < 12; i++)
	{
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8002828:	4640      	mov	r0, r8
	for (int i = 0; i < 12; i++)
 800282a:	f108 0804 	add.w	r8, r8, #4
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 800282e:	f012 ff4b 	bl	80156c8 <tExpSmooth_tick>
 8002832:	eca4 0a01 	vstmia	r4!, {s0}
	for (int i = 0; i < 12; i++)
 8002836:	454c      	cmp	r4, r9
 8002838:	d1f6      	bne.n	8002828 <audioTickString2+0x34>
	}

	for (int i = 0; i < numStringsThisBoard; i++)
 800283a:	4b98      	ldr	r3, [pc, #608]	; (8002a9c <audioTickString2+0x2a8>)
	float temp = 0.0f;
 800283c:	eddf 8a9a 	vldr	s17, [pc, #616]	; 8002aa8 <audioTickString2+0x2b4>
	for (int i = 0; i < numStringsThisBoard; i++)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80e8 	beq.w	8002a18 <audioTickString2+0x224>
 8002848:	4b98      	ldr	r3, [pc, #608]	; (8002aac <audioTickString2+0x2b8>)
	{
		note[i] = stringMIDIPitches[i] + stringOctave[i];
		//sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;

		if (note[i] < 0.0f)
 800284a:	eeb0 aa68 	vmov.f32	s20, s17
 800284e:	617e      	str	r6, [r7, #20]
	for (int i = 0; i < numStringsThisBoard; i++)
 8002850:	2600      	movs	r6, #0
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	4b96      	ldr	r3, [pc, #600]	; (8002ab0 <audioTickString2+0x2bc>)
 8002856:	4c97      	ldr	r4, [pc, #604]	; (8002ab4 <audioTickString2+0x2c0>)
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b97      	ldr	r3, [pc, #604]	; (8002ab8 <audioTickString2+0x2c4>)

		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope

		tLivingString2_setPickupPos(&strings[i],0.9999f);

		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
 800285c:	eddf 9a97 	vldr	s19, [pc, #604]	; 8002abc <audioTickString2+0x2c8>
 8002860:	607b      	str	r3, [r7, #4]
 8002862:	f8df 8298 	ldr.w	r8, [pc, #664]	; 8002afc <audioTickString2+0x308>
 8002866:	4b96      	ldr	r3, [pc, #600]	; (8002ac0 <audioTickString2+0x2cc>)
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 8002868:	f8df b294 	ldr.w	fp, [pc, #660]	; 8002b00 <audioTickString2+0x30c>
 800286c:	f8df a294 	ldr.w	sl, [pc, #660]	; 8002b04 <audioTickString2+0x310>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 8002870:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8002b08 <audioTickString2+0x314>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 8002874:	eddf aa93 	vldr	s21, [pc, #588]	; 8002ac4 <audioTickString2+0x2d0>
 8002878:	613b      	str	r3, [r7, #16]
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 800287a:	68bb      	ldr	r3, [r7, #8]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 800287c:	4658      	mov	r0, fp

			//tLivingString2_setTargetLev(&strings[i], 0.0f);
			//tLivingString2_setLevMode(&strings[i], 0);
		}

		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
 800287e:	eddf ba92 	vldr	s23, [pc, #584]	; 8002ac8 <audioTickString2+0x2d4>
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 8002882:	ecf3 7a01 	vldmia	r3!, {s15}
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	ecb3 7a01 	vldmia	r3!, {s14}
 800288e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002892:	60fb      	str	r3, [r7, #12]
			note[i] = 0.0f;
 8002894:	697b      	ldr	r3, [r7, #20]
		if (note[i] < 0.0f)
 8002896:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800289a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		note[i] = stringMIDIPitches[i] + stringOctave[i];
 800289e:	bf54      	ite	pl
 80028a0:	edc3 7a00 	vstrpl	s15, [r3]
			note[i] = 0.0f;
 80028a4:	ed83 aa00 	vstrmi	s20, [r3]
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 80028a8:	f015 f874 	bl	8017994 <tNoise_tick>
 80028ac:	4650      	mov	r0, sl
 80028ae:	f013 f9d5 	bl	8015c5c <tVZFilter_tickEfficient>
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 80028b2:	4658      	mov	r0, fp
		float filtNoise = tVZFilter_tickEfficient(&noiseFilt, tNoise_tick(&myNoise));
 80028b4:	eeb0 8a40 	vmov.f32	s16, s0
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 80028b8:	f015 f86c 	bl	8017994 <tNoise_tick>
 80028bc:	4648      	mov	r0, r9
 80028be:	f013 f9cd 	bl	8015c5c <tVZFilter_tickEfficient>
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 80028c2:	4640      	mov	r0, r8
		filtNoise += tVZFilter_tickEfficient(&noiseFilt2, tNoise_tick(&myNoise));
 80028c4:	ee38 8a00 	vadd.f32	s16, s16, s0
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 80028c8:	f012 fc86 	bl	80151d8 <tADSRT_tick>
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 80028cc:	4620      	mov	r0, r4
		float env = tADSRT_tick(&fenvelopes[i]); //noise envelope
 80028ce:	eeb0 ba40 	vmov.f32	s22, s0
		tLivingString2_setPickupPos(&strings[i],0.9999f);
 80028d2:	eeb0 0a6a 	vmov.f32	s0, s21
 80028d6:	f01a fa5b 	bl	801cd90 <tLivingString2_setPickupPos>
		tVZFilter_setFreq(&noiseFilt, faster_mtof(knobScaled[5] * 128.0f));
 80028da:	ed95 0a05 	vldr	s0, [r5, #20]
 80028de:	ee20 0a29 	vmul.f32	s0, s0, s19
 80028e2:	f014 fdff 	bl	80174e4 <faster_mtof>
 80028e6:	4650      	mov	r0, sl
 80028e8:	f013 fbbe 	bl	8016068 <tVZFilter_setFreq>
		tVZFilter_setFreq(&noiseFilt2,faster_mtof(knobScaled[6] * 128.0f));
 80028ec:	ed95 0a06 	vldr	s0, [r5, #24]
 80028f0:	ee20 0a29 	vmul.f32	s0, s0, s19
 80028f4:	f014 fdf6 	bl	80174e4 <faster_mtof>
 80028f8:	4648      	mov	r0, r9
 80028fa:	f013 fbb5 	bl	8016068 <tVZFilter_setFreq>
		tLivingString2_setLevSmoothFactor(&strings[i], knobScaled[7] * 0.1f);
 80028fe:	ed95 0a07 	vldr	s0, [r5, #28]
 8002902:	4620      	mov	r0, r4
 8002904:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8002908:	f01a fad0 	bl	801ceac <tLivingString2_setLevSmoothFactor>

		tLivingString2_setLevStrength(&strings[i], knobScaled[8] * 0.1f);
 800290c:	ed95 0a08 	vldr	s0, [r5, #32]
 8002910:	4620      	mov	r0, r4
 8002912:	ee20 0a2b 	vmul.f32	s0, s0, s23
 8002916:	f01a fadd 	bl	801ced4 <tLivingString2_setLevStrength>

		tLivingString2_setBrightness(&strings[i], knobScaled[9]);
 800291a:	ed95 0a09 	vldr	s0, [r5, #36]	; 0x24
 800291e:	4620      	mov	r0, r4
 8002920:	f01a fa56 	bl	801cdd0 <tLivingString2_setBrightness>
		tLivingString2_setPickPos(&strings[i], knobScaled[2]);
 8002924:	ed95 0a02 	vldr	s0, [r5, #8]
 8002928:	4620      	mov	r0, r4
 800292a:	f01a fa0d 	bl	801cd48 <tLivingString2_setPickPos>

		tLivingString2_setPrepPos(&strings[i], (knobScaled[11] * 0.8f) + 0.1f);
 800292e:	eeb0 0a6b 	vmov.f32	s0, s23
 8002932:	ed95 7a0b 	vldr	s14, [r5, #44]	; 0x2c
 8002936:	4620      	mov	r0, r4
 8002938:	eddf 7a64 	vldr	s15, [pc, #400]	; 8002acc <audioTickString2+0x2d8>
 800293c:	eea7 0a27 	vfma.f32	s0, s14, s15
 8002940:	f01a fa14 	bl	801cd6c <tLivingString2_setPrepPos>


		float tempMIDI = note[i];
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	ed9f 1a62 	vldr	s2, [pc, #392]	; 8002ad0 <audioTickString2+0x2dc>
 800294a:	ecf3 0a01 	vldmia	r3!, {s1}
 800294e:	ed9f 0a61 	vldr	s0, [pc, #388]	; 8002ad4 <audioTickString2+0x2e0>
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	f014 fc7c 	bl	8017250 <LEAF_clip>
 8002958:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8002ad8 <audioTickString2+0x2e4>
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
		float finalFreq = freqToSmooth * invMapping[i] ;

		tLivingString2_setFreq(&strings[i], finalFreq);
 800295c:	4620      	mov	r0, r4
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 800295e:	eddf 7a5f 	vldr	s15, [pc, #380]	; 8002adc <audioTickString2+0x2e8>
		float finalFreq = freqToSmooth * invMapping[i] ;
 8002962:	687b      	ldr	r3, [r7, #4]
		float tempIndexF =((LEAF_clip(-200.0f, tempMIDI, 200.0f) * 100.0f) + 16384.0f);
 8002964:	eee0 7a07 	vfma.f32	s15, s0, s14
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8002968:	495d      	ldr	r1, [pc, #372]	; (8002ae0 <audioTickString2+0x2ec>)
		float finalFreq = freqToSmooth * invMapping[i] ;
 800296a:	ecb3 0a01 	vldmia	r3!, {s0}
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800296e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
		float finalFreq = freqToSmooth * invMapping[i] ;
 8002972:	607b      	str	r3, [r7, #4]
		int tempIndexI = (int)tempIndexF;
 8002974:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 8002978:	ee37 7a67 	vsub.f32	s14, s14, s15
		int tempIndexI = (int)tempIndexF;
 800297c:	ee16 3a90 	vmov	r3, s13
		tempIndexF = tempIndexF -tempIndexI;
 8002980:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8002984:	1c5a      	adds	r2, r3, #1
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 8002986:	f3c3 030e 	ubfx	r3, r3, #0, #15
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800298a:	ee37 7a26 	vadd.f32	s14, s14, s13
		float freqToSmooth1 = mtofTable[tempIndexI & 32767];
 800298e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 8002992:	f3c2 020e 	ubfx	r2, r2, #0, #15
		tempIndexF = tempIndexF -tempIndexI;
 8002996:	ee77 7ae6 	vsub.f32	s15, s15, s13
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 800299a:	edd3 6a00 	vldr	s13, [r3]
		float freqToSmooth2 = mtofTable[(tempIndexI + 1) & 32767];
 800299e:	eb01 0382 	add.w	r3, r1, r2, lsl #2
		float freqToSmooth = (freqToSmooth1 * (1.0f - tempIndexF)) + (freqToSmooth2 * tempIndexF);
 80029a2:	ed93 6a00 	vldr	s12, [r3]
 80029a6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80029aa:	eee7 7a26 	vfma.f32	s15, s14, s13
		tLivingString2_setFreq(&strings[i], finalFreq);
 80029ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80029b2:	f01a f9ab 	bl	801cd0c <tLivingString2_setFreq>


		if (knobScaled[4] > 0.5f)
 80029b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80029ba:	ed95 7a04 	vldr	s14, [r5, #16]
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
		}
		else
		{
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
 80029be:	4620      	mov	r0, r4
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
 80029c0:	ed95 0a0a 	vldr	s0, [r5, #40]	; 0x28
		if (knobScaled[4] > 0.5f)
 80029c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10] * env);
 80029cc:	bfc8      	it	gt
 80029ce:	ee2b 0a00 	vmulgt.f32	s0, s22, s0
			tLivingString2_setPrepIndex(&strings[i], knobScaled[10]);
 80029d2:	f01a f9ef 	bl	801cdb4 <tLivingString2_setPrepIndex>
			tempSamp += (tSawtooth_tick(&Ssaws[i][j]) * 0.5f);//filtNoise * theEnv) * env);
		}
		*/
		//tempSamp = tEfficientSVF_tick(&filts2[i], tempSamp * env);
		//tLivingString2_udpateDelays(&strings[i]);
		float tempSamp = (tLivingString2_tick(&strings[i],(filtNoise * env)));// + (prevSamp[i] * (0.001f * knobScaled[5]))));//filtNoise * theEnv) * env);
 80029d6:	ee28 0a0b 	vmul.f32	s0, s16, s22
 80029da:	4620      	mov	r0, r4
 80029dc:	f01a fa9c 	bl	801cf18 <tLivingString2_tick>
		prevSamp[i] = 0.0f;
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	eca3 aa01 	vstmia	r3!, {s20}
 80029e6:	613b      	str	r3, [r7, #16]
		for (int j = 0; j < NUM_STRINGS_PER_BOARD; j++)
		{
			if (j != i) //put sympathetic resonance in all strings but yourself
 80029e8:	2e00      	cmp	r6, #0
 80029ea:	d14f      	bne.n	8002a8c <audioTickString2+0x298>
			{
				prevSamp[j]+=tempSamp * volumeSmoothed;
 80029ec:	4b34      	ldr	r3, [pc, #208]	; (8002ac0 <audioTickString2+0x2cc>)
 80029ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80029f2:	eee9 7a00 	vfma.f32	s15, s18, s0
 80029f6:	edc3 7a01 	vstr	s15, [r3, #4]
	for (int i = 0; i < numStringsThisBoard; i++)
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <audioTickString2+0x2a8>)
 80029fc:	3601      	adds	r6, #1
			}
		}


		temp += tempSamp;
 80029fe:	ee78 8a80 	vadd.f32	s17, s17, s0
	for (int i = 0; i < numStringsThisBoard; i++)
 8002a02:	3404      	adds	r4, #4
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	f108 0804 	add.w	r8, r8, #4
 8002a0a:	42b3      	cmp	r3, r6
 8002a0c:	f73f af35 	bgt.w	800287a <audioTickString2+0x86>
 8002a10:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002ae4 <audioTickString2+0x2f0>
 8002a14:	ee68 8aa7 	vmul.f32	s17, s17, s15
	}

	float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8002a18:	ed9f 0a33 	vldr	s0, [pc, #204]	; 8002ae8 <audioTickString2+0x2f4>
 8002a1c:	eddf 7a33 	vldr	s15, [pc, #204]	; 8002aec <audioTickString2+0x2f8>
 8002a20:	eef0 0a40 	vmov.f32	s1, s0
 8002a24:	ed9f 1a32 	vldr	s2, [pc, #200]	; 8002af0 <audioTickString2+0x2fc>
 8002a28:	eee9 0a27 	vfma.f32	s1, s18, s15
 8002a2c:	f014 fc10 	bl	8017250 <LEAF_clip>
 8002a30:	eef0 7a40 	vmov.f32	s15, s0
	int volIdxInt = (int) volIdx;
	float alpha = volIdx-volIdxInt;
	int volIdxIntPlus = (volIdxInt + 1) & 127;
	float omAlpha = 1.0f - alpha;
 8002a34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002a38:	4a2e      	ldr	r2, [pc, #184]	; (8002af4 <audioTickString2+0x300>)
	outVol += volumeAmps128[volIdxIntPlus] * alpha;

	temp *= outVol;

	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
 8002a3a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
	int volIdxInt = (int) volIdx;
 8002a3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8002a42:	ee17 3a10 	vmov	r3, s14
	float omAlpha = 1.0f - alpha;
 8002a46:	ee31 7a67 	vsub.f32	s14, s2, s15
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002a4a:	1c59      	adds	r1, r3, #1
	float alpha = volIdx-volIdxInt;
 8002a4c:	ee06 3a90 	vmov	s13, r3
	float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8002a50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	float alpha = volIdx-volIdxInt;
 8002a54:	eef8 6ae6 	vcvt.f32.s32	s13, s13
	int volIdxIntPlus = (volIdxInt + 1) & 127;
 8002a58:	f001 017f 	and.w	r1, r1, #127	; 0x7f
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002a5c:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	float alpha = volIdx-volIdxInt;
 8002a60:	ee77 0ae6 	vsub.f32	s1, s15, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002a64:	edd2 7a00 	vldr	s15, [r2]
	float omAlpha = 1.0f - alpha;
 8002a68:	ee37 7a26 	vadd.f32	s14, s14, s13
	outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8002a6c:	edd3 6a00 	vldr	s13, [r3]
 8002a70:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8002a74:	eee6 0a87 	vfma.f32	s1, s13, s14
	return LEAF_clip(-1.0f, temp * 0.9f, 1.0f);
 8002a78:	ee60 0aa8 	vmul.f32	s1, s1, s17
 8002a7c:	f014 fbe8 	bl	8017250 <LEAF_clip>
}
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	ecbd 8b08 	vpop	{d8-d11}
 8002a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				prevSamp[j]+=tempSamp * volumeSmoothed;
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ac0 <audioTickString2+0x2cc>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	eee9 7a00 	vfma.f32	s15, s18, s0
 8002a96:	edc3 7a00 	vstr	s15, [r3]
			if (j != i) //put sympathetic resonance in all strings but yourself
 8002a9a:	e7ae      	b.n	80029fa <audioTickString2+0x206>
 8002a9c:	20000052 	.word	0x20000052
 8002aa0:	20005128 	.word	0x20005128
 8002aa4:	20013010 	.word	0x20013010
 8002aa8:	00000000 	.word	0x00000000
 8002aac:	20012f38 	.word	0x20012f38
 8002ab0:	20012f70 	.word	0x20012f70
 8002ab4:	20012f88 	.word	0x20012f88
 8002ab8:	2000511c 	.word	0x2000511c
 8002abc:	43000000 	.word	0x43000000
 8002ac0:	200055c4 	.word	0x200055c4
 8002ac4:	3f7ff972 	.word	0x3f7ff972
 8002ac8:	3dcccccd 	.word	0x3dcccccd
 8002acc:	3f4ccccd 	.word	0x3f4ccccd
 8002ad0:	43480000 	.word	0x43480000
 8002ad4:	c3480000 	.word	0xc3480000
 8002ad8:	42c80000 	.word	0x42c80000
 8002adc:	46800000 	.word	0x46800000
 8002ae0:	24008020 	.word	0x24008020
 8002ae4:	3f666666 	.word	0x3f666666
 8002ae8:	423c0000 	.word	0x423c0000
 8002aec:	42a00000 	.word	0x42a00000
 8002af0:	42fe0000 	.word	0x42fe0000
 8002af4:	20000514 	.word	0x20000514
 8002af8:	2000519c 	.word	0x2000519c
 8002afc:	20005014 	.word	0x20005014
 8002b00:	20005454 	.word	0x20005454
 8002b04:	20005470 	.word	0x20005470
 8002b08:	20005474 	.word	0x20005474

08002b0c <lfoSawSquareTick>:



void lfoSawSquareTick(float* sample, int v, int string)
{
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 8002b0c:	4b05      	ldr	r3, [pc, #20]	; (8002b24 <lfoSawSquareTick+0x18>)
 8002b0e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b12:	b510      	push	{r4, lr}
 8002b14:	4604      	mov	r4, r0
	*sample = tSawSquareLFO_tick(&lfoSawSquare[v][string]);
 8002b16:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b1a:	f019 faa3 	bl	801c064 <tSawSquareLFO_tick>
 8002b1e:	ed84 0a00 	vstr	s0, [r4]
}
 8002b22:	bd10      	pop	{r4, pc}
 8002b24:	20005264 	.word	0x20005264

08002b28 <lfoSineTriTick>:

void lfoSineTriTick(float* sample, int v, int string)
{
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8002b28:	4b05      	ldr	r3, [pc, #20]	; (8002b40 <lfoSineTriTick+0x18>)
 8002b2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b2e:	b510      	push	{r4, lr}
 8002b30:	4604      	mov	r4, r0
	*sample = tSineTriLFO_tick(&lfoSineTri[v][string]);
 8002b32:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b36:	f019 fbd7 	bl	801c2e8 <tSineTriLFO_tick>
 8002b3a:	ed84 0a00 	vstr	s0, [r4]
}
 8002b3e:	bd10      	pop	{r4, pc}
 8002b40:	200052b4 	.word	0x200052b4

08002b44 <lfoSineTick>:

void lfoSineTick(float* sample, int v, int string)
{
    *sample = tCycle_tick(&lfoSine[v][string]);
 8002b44:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <lfoSineTick+0x18>)
 8002b46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	4604      	mov	r4, r0
    *sample = tCycle_tick(&lfoSine[v][string]);
 8002b4e:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b52:	f014 fecb 	bl	80178ec <tCycle_tick>
 8002b56:	ed84 0a00 	vstr	s0, [r4]
}
 8002b5a:	bd10      	pop	{r4, pc}
 8002b5c:	20005294 	.word	0x20005294

08002b60 <lfoTriTick>:

void lfoTriTick(float* sample, int v, int string)
{
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8002b60:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <lfoTriTick+0x18>)
 8002b62:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b66:	b510      	push	{r4, lr}
 8002b68:	4604      	mov	r4, r0
    *sample = tTriLFO_tick(&lfoTri[v][string]);
 8002b6a:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b6e:	f019 fb3f 	bl	801c1f0 <tTriLFO_tick>
 8002b72:	ed84 0a00 	vstr	s0, [r4]
}
 8002b76:	bd10      	pop	{r4, pc}
 8002b78:	200052d4 	.word	0x200052d4

08002b7c <lfoSawTick>:
void lfoSawTick(float* sample, int v, int string)
{
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8002b7c:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <lfoSawTick+0x24>)
 8002b7e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002b82:	b510      	push	{r4, lr}
 8002b84:	4604      	mov	r4, r0
    *sample = (tIntPhasor_tick(&lfoSaw[v][string]) * 2.0f) - 1.0f;
 8002b86:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002b8a:	f019 f8ed 	bl	801bd68 <tIntPhasor_tick>
 8002b8e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002b92:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002b96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002b9a:	edc4 7a00 	vstr	s15, [r4]
}
 8002b9e:	bd10      	pop	{r4, pc}
 8002ba0:	20005244 	.word	0x20005244

08002ba4 <lfoPulseTick>:

void lfoPulseTick(float* sample, int v, int string)
{
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <lfoPulseTick+0x18>)
 8002ba6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
{
 8002baa:	b510      	push	{r4, lr}
 8002bac:	4604      	mov	r4, r0
    *sample = tSquareLFO_tick(&lfoPulse[v][string]);
 8002bae:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 8002bb2:	f019 f9a7 	bl	801bf04 <tSquareLFO_tick>
 8002bb6:	ed84 0a00 	vstr	s0, [r4]
}
 8002bba:	bd10      	pop	{r4, pc}
 8002bbc:	20005224 	.word	0x20005224

08002bc0 <lfoSawSquareSetRate>:

void lfoSawSquareSetRate(float r, int v, int string)
{
	tSawSquareLFO_setFreq(&lfoSawSquare[v][string],r);
 8002bc0:	4b03      	ldr	r3, [pc, #12]	; (8002bd0 <lfoSawSquareSetRate+0x10>)
 8002bc2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002bc6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bca:	f019 ba8d 	b.w	801c0e8 <tSawSquareLFO_setFreq>
 8002bce:	bf00      	nop
 8002bd0:	20005264 	.word	0x20005264

08002bd4 <lfoSineTriSetRate>:
}

void lfoSineTriSetRate(float r, int v, int string)
{
	tSineTriLFO_setFreq(&lfoSineTri[v][string],r);
 8002bd4:	4b03      	ldr	r3, [pc, #12]	; (8002be4 <lfoSineTriSetRate+0x10>)
 8002bd6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002bda:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bde:	f019 bbcf 	b.w	801c380 <tSineTriLFO_setFreq>
 8002be2:	bf00      	nop
 8002be4:	200052b4 	.word	0x200052b4

08002be8 <lfoSineSetRate>:
}
void lfoSineSetRate(float r, int v, int string)
{
	tCycle_setFreq(&lfoSine[v][string], r);
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <lfoSineSetRate+0x10>)
 8002bea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002bee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002bf2:	f014 bea1 	b.w	8017938 <tCycle_setFreq>
 8002bf6:	bf00      	nop
 8002bf8:	20005294 	.word	0x20005294

08002bfc <lfoTriSetRate>:
}
void lfoTriSetRate(float r, int v, int string)
{
	tTriLFO_setFreq(&lfoTri[v][string], r);
 8002bfc:	4b03      	ldr	r3, [pc, #12]	; (8002c0c <lfoTriSetRate+0x10>)
 8002bfe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c06:	f019 bb0d 	b.w	801c224 <tTriLFO_setFreq>
 8002c0a:	bf00      	nop
 8002c0c:	200052d4 	.word	0x200052d4

08002c10 <lfoSawSetRate>:
}
void lfoSawSetRate(float r, int v, int string)
{
	tIntPhasor_setFreq(&lfoSaw[v][string], r);
 8002c10:	4b03      	ldr	r3, [pc, #12]	; (8002c20 <lfoSawSetRate+0x10>)
 8002c12:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c1a:	f019 b8b5 	b.w	801bd88 <tIntPhasor_setFreq>
 8002c1e:	bf00      	nop
 8002c20:	20005244 	.word	0x20005244

08002c24 <lfoPulseSetRate>:
}
void lfoPulseSetRate(float r, int v, int string)
{
	 tSquareLFO_setFreq(&lfoPulse[v][string], r);
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <lfoPulseSetRate+0x10>)
 8002c26:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c2a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c2e:	f019 b98d 	b.w	801bf4c <tSquareLFO_setFreq>
 8002c32:	bf00      	nop
 8002c34:	20005224 	.word	0x20005224

08002c38 <lfoSawSquareSetPhase>:
}


void lfoSawSquareSetPhase(float p, int v, int string)
{
	tSawSquareLFO_setPhase(&lfoSawSquare[v][string],p);
 8002c38:	4b03      	ldr	r3, [pc, #12]	; (8002c48 <lfoSawSquareSetPhase+0x10>)
 8002c3a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c3e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c42:	f019 ba75 	b.w	801c130 <tSawSquareLFO_setPhase>
 8002c46:	bf00      	nop
 8002c48:	20005264 	.word	0x20005264

08002c4c <lfoSineTriSetPhase>:
}
void lfoSineTriSetPhase(float p, int v, int string)
{
	tSineTriLFO_setPhase(&lfoSineTri[v][string], p);
 8002c4c:	4b03      	ldr	r3, [pc, #12]	; (8002c5c <lfoSineTriSetPhase+0x10>)
 8002c4e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c52:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c56:	f019 bbab 	b.w	801c3b0 <tSineTriLFO_setPhase>
 8002c5a:	bf00      	nop
 8002c5c:	200052b4 	.word	0x200052b4

08002c60 <lfoSineSetPhase>:
}
void lfoSineSetPhase(float p, int v, int string)
{
	tCycle_setPhase(&lfoSine[v][string],p);
 8002c60:	4b03      	ldr	r3, [pc, #12]	; (8002c70 <lfoSineSetPhase+0x10>)
 8002c62:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c66:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c6a:	f014 be71 	b.w	8017950 <tCycle_setPhase>
 8002c6e:	bf00      	nop
 8002c70:	20005294 	.word	0x20005294

08002c74 <lfoTriSetPhase>:
}
void lfoTriSetPhase(float p, int v, int string)
{
	tTriLFO_setPhase(&lfoTri[v][string],p);
 8002c74:	4b03      	ldr	r3, [pc, #12]	; (8002c84 <lfoTriSetPhase+0x10>)
 8002c76:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c7a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c7e:	f019 badd 	b.w	801c23c <tTriLFO_setPhase>
 8002c82:	bf00      	nop
 8002c84:	200052d4 	.word	0x200052d4

08002c88 <lfoSawSetPhase>:
}
void lfoSawSetPhase(float p, int v, int string)
{
	tIntPhasor_setPhase(&lfoSaw[v][string], p);
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <lfoSawSetPhase+0x10>)
 8002c8a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002c8e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002c92:	f019 b885 	b.w	801bda0 <tIntPhasor_setPhase>
 8002c96:	bf00      	nop
 8002c98:	20005244 	.word	0x20005244

08002c9c <lfoPulseSetPhase>:
}
void lfoPulseSetPhase(float p, int v, int string)
{
	tSquareLFO_setPhase(&lfoPulse[v][string], p);
 8002c9c:	4b03      	ldr	r3, [pc, #12]	; (8002cac <lfoPulseSetPhase+0x10>)
 8002c9e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002ca2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002ca6:	f019 b989 	b.w	801bfbc <tSquareLFO_setPhase>
 8002caa:	bf00      	nop
 8002cac:	20005224 	.word	0x20005224

08002cb0 <lfoSawSquareSetShape>:
}


void lfoSawSquareSetShape(float s, int v, int string)
{
	tSawSquareLFO_setShape(&lfoSawSquare[v][string],s);
 8002cb0:	4b03      	ldr	r3, [pc, #12]	; (8002cc0 <lfoSawSquareSetShape+0x10>)
 8002cb2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002cb6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002cba:	f019 ba6b 	b.w	801c194 <tSawSquareLFO_setShape>
 8002cbe:	bf00      	nop
 8002cc0:	20005264 	.word	0x20005264

08002cc4 <lfoSineTriSetShape>:
}
void lfoSineTriSetShape(float s, int v, int string)
{
	tSineTriLFO_setShape(&lfoSineTri[v][string],s);
 8002cc4:	4b03      	ldr	r3, [pc, #12]	; (8002cd4 <lfoSineTriSetShape+0x10>)
 8002cc6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002cca:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002cce:	f019 bb87 	b.w	801c3e0 <tSineTriLFO_setShape>
 8002cd2:	bf00      	nop
 8002cd4:	200052b4 	.word	0x200052b4

08002cd8 <lfoSineSetShape>:
}
void lfoSineSetShape(float s, int v, int string)
{
	//none
}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <lfoTriSetShape>:
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop

08002ce0 <lfoSawSetShape>:
 8002ce0:	4770      	bx	lr
 8002ce2:	bf00      	nop

08002ce4 <lfoPulseSetShape>:
{
	//none
}
void lfoPulseSetShape(float s, int v, int string)
{
	tSquareLFO_setPulseWidth(&lfoPulse[v][string], s);
 8002ce4:	4b03      	ldr	r3, [pc, #12]	; (8002cf4 <lfoPulseSetShape+0x10>)
 8002ce6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002cea:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002cee:	f019 b945 	b.w	801bf7c <tSquareLFO_setPulseWidth>
 8002cf2:	bf00      	nop
 8002cf4:	20005224 	.word	0x20005224

08002cf8 <clipperGainSet>:
float wfState[NUM_EFFECT][NUM_STRINGS_PER_BOARD];
float invCurFB[NUM_EFFECT][NUM_STRINGS_PER_BOARD];

void __ATTR_ITCMRAM  clipperGainSet(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8002cf8:	eef3 7a08 	vmov.f32	s15, #56	; 0x41c00000  24.0
{
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	4605      	mov	r5, r0
 8002d00:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 24.0f);
 8002d02:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d06:	f014 fc5b 	bl	80175c0 <fasterdbtoa>
 8002d0a:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <clipperGainSet+0x24>)
 8002d0c:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002d10:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002d14:	ed84 0a00 	vstr	s0, [r4]
}
 8002d18:	bd38      	pop	{r3, r4, r5, pc}
 8002d1a:	bf00      	nop
 8002d1c:	200054e0 	.word	0x200054e0

08002d20 <wavefolderParam1>:
void __ATTR_ITCMRAM  wavefolderParam1(float value, int v, int string)
{
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8002d20:	eef2 7a08 	vmov.f32	s15, #40	; 0x41400000  12.0
{
 8002d24:	b538      	push	{r3, r4, r5, lr}
 8002d26:	4605      	mov	r5, r0
 8002d28:	460c      	mov	r4, r1
	param1[v][string] = fasterdbtoa(value * 12.0f);
 8002d2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002d2e:	f014 fc47 	bl	80175c0 <fasterdbtoa>
 8002d32:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <wavefolderParam1+0x24>)
 8002d34:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002d38:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8002d3c:	ed84 0a00 	vstr	s0, [r4]
}
 8002d40:	bd38      	pop	{r3, r4, r5, pc}
 8002d42:	bf00      	nop
 8002d44:	200054e0 	.word	0x200054e0

08002d48 <wavefolderParam3>:
void __ATTR_ITCMRAM  wavefolderParam3(float value, int v, int string)
{
	//value = (value * 0.99f) + 0.00f; //avoid zero
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d48:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002d4c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <wavefolderParam3+0x28>)
	param3[v][string] = value;
 8002d52:	4808      	ldr	r0, [pc, #32]	; (8002d74 <wavefolderParam3+0x2c>)
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d54:	ee70 6a27 	vadd.f32	s13, s0, s15
 8002d58:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	param3[v][string] = value;
 8002d5c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
	param3[v][string] = value;
 8002d64:	ed81 0a00 	vstr	s0, [r1]
	invCurFB[v][string] = (1.0f / (1.0f + value));
 8002d68:	ed83 7a00 	vstr	s14, [r3]
}
 8002d6c:	4770      	bx	lr
 8002d6e:	bf00      	nop
 8002d70:	200050fc 	.word	0x200050fc
 8002d74:	20005520 	.word	0x20005520

08002d78 <tiltParam1>:

void __ATTR_ITCMRAM  tiltParam1(float value, int v, int string)
{
 8002d78:	b510      	push	{r4, lr}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002d7a:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8002d7e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8002d82:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002d86:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
 8002d8a:	0084      	lsls	r4, r0, #2
{
 8002d8c:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&shelf1[v][string], fasterdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8002d90:	eee0 7a68 	vfms.f32	s15, s0, s17
 8002d94:	eeb0 0a67 	vmov.f32	s0, s15
 8002d98:	f014 fc12 	bl	80175c0 <fasterdbtoa>
 8002d9c:	4808      	ldr	r0, [pc, #32]	; (8002dc0 <tiltParam1+0x48>)
 8002d9e:	4420      	add	r0, r4
 8002da0:	f013 fad8 	bl	8016354 <tVZFilter_setGain>
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002da4:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8002da8:	eea8 0a28 	vfma.f32	s0, s16, s17
 8002dac:	f014 fc08 	bl	80175c0 <fasterdbtoa>
 8002db0:	4804      	ldr	r0, [pc, #16]	; (8002dc4 <tiltParam1+0x4c>)
}
 8002db2:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002db6:	4420      	add	r0, r4
}
 8002db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&shelf2[v][string], fasterdbtoa((value * 30.0f) - 15.0f));
 8002dbc:	f013 baca 	b.w	8016354 <tVZFilter_setGain>
 8002dc0:	20005a98 	.word	0x20005a98
 8002dc4:	20005ab8 	.word	0x20005ab8

08002dc8 <tiltParam2>:

void __ATTR_ITCMRAM  tiltParam2(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002dc8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8002dcc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002e00 <tiltParam2+0x38>
 8002dd0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8002e04 <tiltParam2+0x3c>
 8002dd4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8002e08 <tiltParam2+0x40>
 8002dd8:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002ddc:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002e0c <tiltParam2+0x44>
{
 8002de0:	b538      	push	{r3, r4, r5, lr}
 8002de2:	4605      	mov	r5, r0
 8002de4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002de6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8002dea:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8002dee:	f014 fa2f 	bl	8017250 <LEAF_clip>
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8002df2:	4807      	ldr	r0, [pc, #28]	; (8002e10 <tiltParam2+0x48>)
 8002df4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002df8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&bell1[v][string], value);
 8002dfc:	f013 b94c 	b.w	8016098 <tVZFilter_setFreqFast>
 8002e00:	429a0000 	.word	0x429a0000
 8002e04:	420fb824 	.word	0x420fb824
 8002e08:	457ff000 	.word	0x457ff000
 8002e0c:	00000000 	.word	0x00000000
 8002e10:	20000b0c 	.word	0x20000b0c

08002e14 <tiltParam3>:
void __ATTR_ITCMRAM  tiltParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&bell1[v][string], (value +1.0f)*6.0f);//TODO: make this match plugin
 8002e14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <tiltParam3+0x20>)
 8002e1a:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8002e1e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e22:	ee30 0a07 	vadd.f32	s0, s0, s14
 8002e26:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8002e2a:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002e2e:	f013 baad 	b.w	801638c <tVZFilter_setResonance>
 8002e32:	bf00      	nop
 8002e34:	20000b0c 	.word	0x20000b0c

08002e38 <tiltParam4>:
}
void __ATTR_ITCMRAM  tiltParam4(float value, int v, int string)
{
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002e38:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8002e3c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002e64 <tiltParam4+0x2c>
{
 8002e40:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002e42:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8002e46:	4605      	mov	r5, r0
 8002e48:	460c      	mov	r4, r1
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002e4a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8002e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8002e52:	f014 fbad 	bl	80175b0 <fastdbtoa>
 8002e56:	4804      	ldr	r0, [pc, #16]	; (8002e68 <tiltParam4+0x30>)
 8002e58:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8002e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&bell1[v][string], fastdbtoa((value * 34.0f) - 17.0f));
 8002e60:	f013 ba78 	b.w	8016354 <tVZFilter_setGain>
 8002e64:	42080000 	.word	0x42080000
 8002e68:	20000b0c 	.word	0x20000b0c

08002e6c <compressorParam1>:

void __ATTR_ITCMRAM  compressorParam1(float value, int v, int string)
{
	comp[v][string]->T = value*-24.0f;
 8002e6c:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <compressorParam1+0x18>)
 8002e72:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002e76:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002e7a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002e7e:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8002e82:	4770      	bx	lr
 8002e84:	20000b30 	.word	0x20000b30

08002e88 <compressorParam2>:
void __ATTR_ITCMRAM  compressorParam2(float value, int v, int string)
{
	comp[v][string]->R = ((value*10.0f)+1.0f);
 8002e88:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <compressorParam2+0x30>)
 8002e8e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002e92:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002e96:	eeb0 7a67 	vmov.f32	s14, s15
 8002e9a:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
 8002e9e:	eea0 7a26 	vfma.f32	s14, s0, s13
 8002ea2:	ed82 7a04 	vstr	s14, [r2, #16]
	comp[v][string]->invR  = 1.0f / comp[v][string]->R;
 8002ea6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002eaa:	edd3 6a04 	vldr	s13, [r3, #16]
 8002eae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eb2:	ed83 7a07 	vstr	s14, [r3, #28]
}
 8002eb6:	4770      	bx	lr
 8002eb8:	20000b30 	.word	0x20000b30

08002ebc <compressorParam3>:

void __ATTR_ITCMRAM  compressorParam3(float value, int v, int string)
{
	comp[v][string]->M = value * 18.0f;
 8002ebc:	eef3 7a02 	vmov.f32	s15, #50	; 0x41900000  18.0
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <compressorParam3+0x18>)
 8002ec2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002ec6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8002eca:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8002ece:	ed83 0a06 	vstr	s0, [r3, #24]
}
 8002ed2:	4770      	bx	lr
 8002ed4:	20000b30 	.word	0x20000b30

08002ed8 <compressorParam4>:

void __ATTR_ITCMRAM  compressorParam4(float value, int v, int string)
{
	value = (value +  0.001f);
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <compressorParam4+0x30>)
 8002eda:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value +  0.001f);
 8002ede:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f0c <compressorParam4+0x34>
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ee2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8002ee6:	b510      	push	{r4, lr}
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ee8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value +  0.001f);
 8002eec:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauAttack = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002ef0:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8002ef4:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002ef8:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002efc:	f014 f914 	bl	8017128 <fasterexpf>
 8002f00:	ed84 0a01 	vstr	s0, [r4, #4]
}
 8002f04:	bd10      	pop	{r4, pc}
 8002f06:	bf00      	nop
 8002f08:	20000b30 	.word	0x20000b30
 8002f0c:	3a83126f 	.word	0x3a83126f

08002f10 <compressorParam5>:

void __ATTR_ITCMRAM  compressorParam5(float value, int v, int string)
{
	value = (value + 0.001f);
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002f10:	4b0b      	ldr	r3, [pc, #44]	; (8002f40 <compressorParam5+0x30>)
 8002f12:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value + 0.001f);
 8002f16:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002f44 <compressorParam5+0x34>
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002f1a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
{
 8002f1e:	b510      	push	{r4, lr}
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002f20:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
	value = (value + 0.001f);
 8002f24:	ee30 0a07 	vadd.f32	s0, s0, s14
	comp[v][string]->tauRelease = fasterexpf(-1.0f/(value * comp[v][string]->sampleRate));
 8002f28:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8002f2c:	ee20 0a07 	vmul.f32	s0, s0, s14
 8002f30:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8002f34:	f014 f8f8 	bl	8017128 <fasterexpf>
 8002f38:	ed84 0a02 	vstr	s0, [r4, #8]
}
 8002f3c:	bd10      	pop	{r4, pc}
 8002f3e:	bf00      	nop
 8002f40:	20000b30 	.word	0x20000b30
 8002f44:	3a83126f 	.word	0x3a83126f

08002f48 <offsetParam2>:

void __ATTR_ITCMRAM  offsetParam2(float value, int v, int string)
{
	param2[v][string] = (value * 2.0f) - 1.0f;
 8002f48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002f4c:	4b05      	ldr	r3, [pc, #20]	; (8002f64 <offsetParam2+0x1c>)
 8002f4e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8002f52:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002f56:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002f5a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
}
 8002f62:	4770      	bx	lr
 8002f64:	20005500 	.word	0x20005500

08002f68 <param2Linear>:
void __ATTR_ITCMRAM param2Linear(float value, int v, int string)
{
	param2[v][string] = value;
 8002f68:	4b03      	ldr	r3, [pc, #12]	; (8002f78 <param2Linear+0x10>)
 8002f6a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002f6e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002f72:	ed83 0a00 	vstr	s0, [r3]
}
 8002f76:	4770      	bx	lr
 8002f78:	20005500 	.word	0x20005500

08002f7c <param3Linear>:
void __ATTR_ITCMRAM param3Linear(float value, int v, int string)
{
	param3[v][string] = value;
 8002f7c:	4b03      	ldr	r3, [pc, #12]	; (8002f8c <param3Linear+0x10>)
 8002f7e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8002f82:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8002f86:	ed83 0a00 	vstr	s0, [r3]
}
 8002f8a:	4770      	bx	lr
 8002f8c:	20005520 	.word	0x20005520

08002f90 <param3Soft>:
void __ATTR_ITCMRAM param3Soft(float value, int v, int string)
{
	param3[v][string] = (value * .99f) + 0.01f;
 8002f90:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002fd4 <param3Soft+0x44>
 8002f94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002f98:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8002fd8 <param3Soft+0x48>
 8002f9c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8002fa0:	ed9f 6a0e 	vldr	s12, [pc, #56]	; 8002fdc <param3Soft+0x4c>
 8002fa4:	eee0 7a26 	vfma.f32	s15, s0, s13
 8002fa8:	4a0d      	ldr	r2, [pc, #52]	; (8002fe0 <param3Soft+0x50>)
 8002faa:	eef0 6a47 	vmov.f32	s13, s14
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002fae:	4b0d      	ldr	r3, [pc, #52]	; (8002fe4 <param3Soft+0x54>)
	param3[v][string] = (value * .99f) + 0.01f;
 8002fb0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002fb4:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002fb8:	ee67 5ae7 	vnmul.f32	s11, s15, s15
	param3[v][string] = (value * .99f) + 0.01f;
 8002fbc:	edc2 7a00 	vstr	s15, [r2]
	shapeDividerS[v][string] = 1.0f / (param3[v][string] - ((param3[v][string]*param3[v][string]*param3[v][string]) * 0.3333333f));
 8002fc0:	eee5 6a86 	vfma.f32	s13, s11, s12
 8002fc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fc8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fcc:	edc1 6a00 	vstr	s13, [r1]
}
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	3f7d70a4 	.word	0x3f7d70a4
 8002fd8:	3c23d70a 	.word	0x3c23d70a
 8002fdc:	3eaaaaaa 	.word	0x3eaaaaaa
 8002fe0:	20005520 	.word	0x20005520
 8002fe4:	20005a6c 	.word	0x20005a6c

08002fe8 <param3Hard>:

void __ATTR_ITCMRAM param3Hard(float value, int v, int string)
{
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8002fe8:	eddf 6a17 	vldr	s13, [pc, #92]	; 8003048 <param3Hard+0x60>
 8002fec:	eddf 7a17 	vldr	s15, [pc, #92]	; 800304c <param3Hard+0x64>
 8002ff0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003050 <param3Hard+0x68>
 8002ff4:	eee0 7a26 	vfma.f32	s15, s0, s13
{
 8002ff8:	b538      	push	{r3, r4, r5, lr}
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <param3Hard+0x6c>)
 8002ffc:	0045      	lsls	r5, r0, #1
 8002ffe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
{
 8003002:	460c      	mov	r4, r1
	param3[v][string] = ((value * .99f) + 0.01f) * HALF_PI;
 8003004:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003008:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800300c:	ed80 0a00 	vstr	s0, [r0]
	float tempDiv = arm_sin_f32(param3[v][string]);
 8003010:	f01a f9ce 	bl	801d3b0 <arm_sin_f32>
	if (tempDiv == 0.0f)
 8003014:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800301c:	d00a      	beq.n	8003034 <param3Hard+0x4c>
	{
		tempDiv = 0.001f;
	}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 800301e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003022:	4b0d      	ldr	r3, [pc, #52]	; (8003058 <param3Hard+0x70>)
 8003024:	442c      	add	r4, r5
 8003026:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800302a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800302e:	edc4 7a00 	vstr	s15, [r4]
}
 8003032:	bd38      	pop	{r3, r4, r5, pc}
	shapeDividerH[v][string] = 1.0f/tempDiv;
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <param3Hard+0x70>)
 8003036:	442c      	add	r4, r5
 8003038:	eddf 7a08 	vldr	s15, [pc, #32]	; 800305c <param3Hard+0x74>
 800303c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003040:	edc4 7a00 	vstr	s15, [r4]
}
 8003044:	bd38      	pop	{r3, r4, r5, pc}
 8003046:	bf00      	nop
 8003048:	3f7d70a4 	.word	0x3f7d70a4
 800304c:	3c23d70a 	.word	0x3c23d70a
 8003050:	3fc90fdb 	.word	0x3fc90fdb
 8003054:	20005520 	.word	0x20005520
 8003058:	20005a4c 	.word	0x20005a4c
 800305c:	4479ffff 	.word	0x4479ffff

08003060 <param4Linear>:
void __ATTR_ITCMRAM param4Linear(float value, int v, int string)
{
	param4[v][string] = value;
 8003060:	4b03      	ldr	r3, [pc, #12]	; (8003070 <param4Linear+0x10>)
 8003062:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003066:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800306a:	ed83 0a00 	vstr	s0, [r3]
}
 800306e:	4770      	bx	lr
 8003070:	20005540 	.word	0x20005540

08003074 <param5Linear>:

void __ATTR_ITCMRAM param5Linear(float value, int v, int string)
{
	param5[v][string] = value;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <param5Linear+0x10>)
 8003076:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800307a:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800307e:	ed83 0a00 	vstr	s0, [r3]
}
 8003082:	4770      	bx	lr
 8003084:	20005560 	.word	0x20005560

08003088 <param3BC>:
{
	tCrusher_setQuality (&bc[v][string],value);
}
void __ATTR_ITCMRAM param3BC(float value, int v, int string)
{
	value = (value * inv_oversample) + 0.01f;
 8003088:	4a07      	ldr	r2, [pc, #28]	; (80030a8 <param3BC+0x20>)
	tCrusher_setSamplingRatio (&bc[v][string], value);
 800308a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
	value = (value * inv_oversample) + 0.01f;
 800308e:	eddf 7a07 	vldr	s15, [pc, #28]	; 80030ac <param3BC+0x24>
 8003092:	ed92 7a00 	vldr	s14, [r2]
	tCrusher_setSamplingRatio (&bc[v][string], value);
 8003096:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <param3BC+0x28>)
 8003098:	eee7 7a00 	vfma.f32	s15, s14, s0
 800309c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80030a0:	eeb0 0a67 	vmov.f32	s0, s15
 80030a4:	f011 bedc 	b.w	8014e60 <tCrusher_setSamplingRatio>
 80030a8:	20000048 	.word	0x20000048
 80030ac:	3c23d70a 	.word	0x3c23d70a
 80030b0:	20000aec 	.word	0x20000aec

080030b4 <fxMixSet>:



void __ATTR_ITCMRAM fxMixSet(float value, int v, int string)
{
	fxMix[v][string] = value;
 80030b4:	4b03      	ldr	r3, [pc, #12]	; (80030c4 <fxMixSet+0x10>)
 80030b6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80030ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80030be:	ed83 0a00 	vstr	s0, [r3]
}
 80030c2:	4770      	bx	lr
 80030c4:	2000507c 	.word	0x2000507c

080030c8 <fxPostGainSet>:

void __ATTR_ITCMRAM fxPostGainSet(float value, int v, int string)
{
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 80030c8:	eeb3 7a08 	vmov.f32	s14, #56	; 0x41c00000  24.0
 80030cc:	eefa 7a08 	vmov.f32	s15, #168	; 0xc1400000 -12.0
{
 80030d0:	b538      	push	{r3, r4, r5, lr}
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 80030d2:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80030d6:	4605      	mov	r5, r0
 80030d8:	460c      	mov	r4, r1
	fxPostGain[v][string] = fasterdbtoa((value * 24.0f) - 12.0f);
 80030da:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80030de:	eeb0 0a67 	vmov.f32	s0, s15
 80030e2:	f014 fa6d 	bl	80175c0 <fasterdbtoa>
 80030e6:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <fxPostGainSet+0x2c>)
 80030e8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80030ec:	ed84 0a00 	vstr	s0, [r4]
}
 80030f0:	bd38      	pop	{r3, r4, r5, pc}
 80030f2:	bf00      	nop
 80030f4:	2000509c 	.word	0x2000509c

080030f8 <wavefolderTick>:


//got the idea from https://ccrma.stanford.edu/~jatin/ComplexNonlinearities/Wavefolder.html  -JS
//much more efficient than the lockhart, and can be further optimized with lookups
float __ATTR_ITCMRAM wavefolderTick(float sample, int v, int string)
{
 80030f8:	b538      	push	{r3, r4, r5, lr}
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 80030fa:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
    ffSample *= 1.499999f;
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);

    //softclip approx for tanh saturation in original code
    float fbSample = wfState[v][string];
 80030fe:	4d36      	ldr	r5, [pc, #216]	; (80031d8 <wavefolderTick+0xe0>)
 8003100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 8003104:	4b35      	ldr	r3, [pc, #212]	; (80031dc <wavefolderTick+0xe4>)
    float fbSample = wfState[v][string];
 8003106:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 800310a:	eeff 4a00 	vmov.f32	s9, #240	; 0xbf800000 -1.0
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 800310e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003112:	4a33      	ldr	r2, [pc, #204]	; (80031e0 <wavefolderTick+0xe8>)
 8003114:	ed9f 4a33 	vldr	s8, [pc, #204]	; 80031e4 <wavefolderTick+0xec>
 8003118:	0084      	lsls	r4, r0, #2
 800311a:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    {
    	fbSample = 1.0f;
    }
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
    fbSample *= 1.499999f;
    float fb = curFB * fbSample;
 800311e:	eddf 3a32 	vldr	s7, [pc, #200]	; 80031e8 <wavefolderTick+0xf0>
{
 8003122:	ed2d 8b02 	vpush	{d8}
 8003126:	ed95 8a00 	vldr	s16, [r5]
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 800312a:	ed93 6a00 	vldr	s12, [r3]
 800312e:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8003132:	fe88 8a24 	vmaxnm.f32	s16, s16, s9
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8003136:	ee68 7a08 	vmul.f32	s15, s16, s16
    float curFB = param3[v][string];
 800313a:	4b2c      	ldr	r3, [pc, #176]	; (80031ec <wavefolderTick+0xf4>)
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 800313c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8003140:	ed92 6a00 	vldr	s12, [r2]
    float curFB = param3[v][string];
 8003144:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    float curFF = param4[v][string];
 8003148:	4a29      	ldr	r2, [pc, #164]	; (80031f0 <wavefolderTick+0xf8>)
 800314a:	ee67 5a84 	vmul.f32	s11, s15, s8
    sample = sample * param1[v][string] + ((param2[v][string] * param1[v][string]));
 800314e:	ee20 6a06 	vmul.f32	s12, s0, s12
    float fb = curFB * fbSample;
 8003152:	edd3 7a00 	vldr	s15, [r3]
    float curFF = param4[v][string];
 8003156:	eb02 0280 	add.w	r2, r2, r0, lsl #2

    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800315a:	4b26      	ldr	r3, [pc, #152]	; (80031f4 <wavefolderTick+0xfc>)
 800315c:	ee76 5ae5 	vsub.f32	s11, s13, s11
 8003160:	ed9f 0a25 	vldr	s0, [pc, #148]	; 80031f8 <wavefolderTick+0x100>
 8003164:	fe86 7a66 	vminnm.f32	s14, s12, s13
    float fb = curFB * fbSample;
 8003168:	ee67 7aa3 	vmul.f32	s15, s15, s7
 800316c:	fe87 7a24 	vmaxnm.f32	s14, s14, s9
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 8003170:	ee67 4a07 	vmul.f32	s9, s14, s14
    fbSample = fbSample - ((fbSample * fbSample * fbSample)* 0.3333333f);
 8003174:	ee28 8a25 	vmul.f32	s16, s16, s11
    float curFF = param4[v][string];
 8003178:	ed92 5a00 	vldr	s10, [r2]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800317c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003180:	ee26 0a00 	vmul.f32	s0, s12, s0
    float ff = (curFF * ffSample) + ((1.0f - curFF) * sample);
 8003184:	ee36 3ac5 	vsub.f32	s6, s13, s10
 8003188:	ee64 5a84 	vmul.f32	s11, s9, s8
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 800318c:	edd3 8a00 	vldr	s17, [r3]
    float fb = curFB * fbSample;
 8003190:	ee67 7a88 	vmul.f32	s15, s15, s16
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 8003194:	ee25 5a23 	vmul.f32	s10, s10, s7
 8003198:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800319c:	eee3 7a06 	vfma.f32	s15, s6, s12
    ffSample = ffSample - ((ffSample * ffSample * ffSample)* 0.3333333f);
 80031a0:	ee27 7a26 	vmul.f32	s14, s14, s13
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80031a4:	eee7 7a05 	vfma.f32	s15, s14, s10
 80031a8:	eeb0 8a67 	vmov.f32	s16, s15
 80031ac:	f01a f900 	bl	801d3b0 <arm_sin_f32>
    sample = wfState[v][string] * invCurFB[v][string];
 80031b0:	4b12      	ldr	r3, [pc, #72]	; (80031fc <wavefolderTick+0x104>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80031b2:	4813      	ldr	r0, [pc, #76]	; (8003200 <wavefolderTick+0x108>)
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80031b4:	eef0 7a48 	vmov.f32	s15, s16
    sample = wfState[v][string] * invCurFB[v][string];
 80031b8:	4423      	add	r3, r4
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80031ba:	4420      	add	r0, r4
    sample = wfState[v][string] * invCurFB[v][string];
 80031bc:	ed93 7a00 	vldr	s14, [r3]
    wfState[v][string] = (ff + fb) - param5[v][string] * arm_sin_f32(TWO_PI * sample); //maybe switch for our own sine lookup (avoid the if statements in the CMSIS code)
 80031c0:	eee8 7ac0 	vfms.f32	s15, s17, s0
 80031c4:	edc5 7a00 	vstr	s15, [r5]
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80031c8:	ee27 0a87 	vmul.f32	s0, s15, s14
    return sample;
}
 80031cc:	ecbd 8b02 	vpop	{d8}
 80031d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80031d4:	f012 bd20 	b.w	8015c18 <tHighpass_tick>
 80031d8:	20013014 	.word	0x20013014
 80031dc:	20005500 	.word	0x20005500
 80031e0:	200054e0 	.word	0x200054e0
 80031e4:	3eaaaaaa 	.word	0x3eaaaaaa
 80031e8:	3fbffff8 	.word	0x3fbffff8
 80031ec:	20005520 	.word	0x20005520
 80031f0:	20005540 	.word	0x20005540
 80031f4:	20005560 	.word	0x20005560
 80031f8:	40c90fdb 	.word	0x40c90fdb
 80031fc:	200050fc 	.word	0x200050fc
 8003200:	20000eb0 	.word	0x20000eb0

08003204 <chorusParam1>:

void __ATTR_ITCMRAM chorusParam1(float value, int v, int string)
{
	param1[v][string] = value * 5780.0f + 10.0f;
 8003204:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003208:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8003220 <chorusParam1+0x1c>
 800320c:	4b05      	ldr	r3, [pc, #20]	; (8003224 <chorusParam1+0x20>)
 800320e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003212:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003216:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800321a:	edc3 7a00 	vstr	s15, [r3]
}
 800321e:	4770      	bx	lr
 8003220:	45b4a000 	.word	0x45b4a000
 8003224:	200054e0 	.word	0x200054e0

08003228 <chorusParam2>:
void __ATTR_ITCMRAM chorusParam2(float value, int v, int string)
{
	param2[v][string] = value * 0.1f;
 8003228:	eddf 7a05 	vldr	s15, [pc, #20]	; 8003240 <chorusParam2+0x18>
 800322c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003230:	4b04      	ldr	r3, [pc, #16]	; (8003244 <chorusParam2+0x1c>)
 8003232:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003236:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800323a:	ed83 0a00 	vstr	s0, [r3]
}
 800323e:	4770      	bx	lr
 8003240:	3dcccccd 	.word	0x3dcccccd
 8003244:	20005500 	.word	0x20005500

08003248 <chorusParam3>:

void __ATTR_ITCMRAM chorusParam3(float value, int v, int string)
{
    tCycle_setFreq(&mod1[v][string], (value * 0.4f) + 0.01f);
 8003248:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003268 <chorusParam3+0x20>
 800324c:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003250:	eddf 7a06 	vldr	s15, [pc, #24]	; 800326c <chorusParam3+0x24>
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <chorusParam3+0x28>)
 8003256:	eee0 7a07 	vfma.f32	s15, s0, s14
 800325a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800325e:	eeb0 0a67 	vmov.f32	s0, s15
 8003262:	f014 bb69 	b.w	8017938 <tCycle_setFreq>
 8003266:	bf00      	nop
 8003268:	3ecccccd 	.word	0x3ecccccd
 800326c:	3c23d70a 	.word	0x3c23d70a
 8003270:	20005414 	.word	0x20005414

08003274 <chorusParam4>:
}

void __ATTR_ITCMRAM chorusParam4(float value, int v, int string)
{
    tCycle_setFreq(&mod2[v][string], (value * 0.4444444f) + 0.011f);
 8003274:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8003294 <chorusParam4+0x20>
 8003278:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800327c:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003298 <chorusParam4+0x24>
 8003280:	4b06      	ldr	r3, [pc, #24]	; (800329c <chorusParam4+0x28>)
 8003282:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003286:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800328a:	eeb0 0a67 	vmov.f32	s0, s15
 800328e:	f014 bb53 	b.w	8017938 <tCycle_setFreq>
 8003292:	bf00      	nop
 8003294:	3ee38e37 	.word	0x3ee38e37
 8003298:	3c343958 	.word	0x3c343958
 800329c:	20005434 	.word	0x20005434

080032a0 <chorusTick>:
    //float temp = tLinearDelay_tick(&delay1[v][string], sample) - sample;
    //temp += tLinearDelay_tick(&delay2[v][string], sample) - sample;
    //temp = tHighpass_tick(&dcBlock1[v], temp);
	float temp = 0.0f;
    return -temp;
}
 80032a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80032a8 <chorusTick+0x8>
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	80000000 	.word	0x80000000

080032ac <shaperTick>:

float __ATTR_ITCMRAM shaperTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 80032ac:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80032b0:	4a0e      	ldr	r2, [pc, #56]	; (80032ec <shaperTick+0x40>)
    sample = sample * param1[v][string];
 80032b2:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <shaperTick+0x44>)
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 80032b4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    sample = sample * param1[v][string];
 80032b8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 80032bc:	b510      	push	{r4, lr}
    float temp = LEAF_shaper(sample + (param2[v][string] * param1[v][string]),param3[v][string]);
 80032be:	edd2 7a00 	vldr	s15, [r2]
 80032c2:	008c      	lsls	r4, r1, #2
 80032c4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	4b09      	ldr	r3, [pc, #36]	; (80032f4 <shaperTick+0x48>)
 80032ce:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80032d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 80032d6:	edd1 0a00 	vldr	s1, [r1]
 80032da:	f013 ff55 	bl	8017188 <LEAF_shaper>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80032de:	4806      	ldr	r0, [pc, #24]	; (80032f8 <shaperTick+0x4c>)
 80032e0:	4420      	add	r0, r4
    return temp;
}
 80032e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80032e6:	f012 bc97 	b.w	8015c18 <tHighpass_tick>
 80032ea:	bf00      	nop
 80032ec:	20005500 	.word	0x20005500
 80032f0:	200054e0 	.word	0x200054e0
 80032f4:	20005520 	.word	0x20005520
 80032f8:	20000eb0 	.word	0x20000eb0

080032fc <blankTick>:

float __ATTR_ITCMRAM blankTick(float sample, int v, int string)
{
    return sample;
}
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop

08003300 <tiltFilterTick>:

float __ATTR_ITCMRAM tiltFilterTick(float sample, int v, int string)
{
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 8003300:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8003304:	4b08      	ldr	r3, [pc, #32]	; (8003328 <tiltFilterTick+0x28>)
{
 8003306:	b510      	push	{r4, lr}
    sample = tVZFilter_tickEfficient(&shelf1[v][string], sample);
 8003308:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800330c:	008c      	lsls	r4, r1, #2
 800330e:	f012 fca5 	bl	8015c5c <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&shelf2[v][string], sample);
 8003312:	4806      	ldr	r0, [pc, #24]	; (800332c <tiltFilterTick+0x2c>)
 8003314:	4420      	add	r0, r4
 8003316:	f012 fca1 	bl	8015c5c <tVZFilter_tickEfficient>
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 800331a:	4805      	ldr	r0, [pc, #20]	; (8003330 <tiltFilterTick+0x30>)
 800331c:	4420      	add	r0, r4
    return sample;
}
 800331e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    sample = tVZFilter_tickEfficient(&bell1[v][string], sample);
 8003322:	f012 bc9b 	b.w	8015c5c <tVZFilter_tickEfficient>
 8003326:	bf00      	nop
 8003328:	20005a98 	.word	0x20005a98
 800332c:	20005ab8 	.word	0x20005ab8
 8003330:	20000b0c 	.word	0x20000b0c

08003334 <tanhTick>:

float __ATTR_ITCMRAM tanhTick(float sample, int v, int string)
{
    float gain = param1[v][string];
 8003334:	eb01 0140 	add.w	r1, r1, r0, lsl #1
	sample = sample * gain;
    gain = gain * 0.5f;
    //need to do something with shape param
    float temp = tanhf(sample + (param2[v][string]*gain));
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <tanhTick+0x48>)
 800333a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    float gain = param1[v][string];
 800333e:	4810      	ldr	r0, [pc, #64]	; (8003380 <tanhTick+0x4c>)
    float temp = tanhf(sample + (param2[v][string]*gain));
 8003340:	eb03 0381 	add.w	r3, r3, r1, lsl #2
{
 8003344:	b510      	push	{r4, lr}
 8003346:	edd3 6a00 	vldr	s13, [r3]
    float gain = param1[v][string];
 800334a:	008c      	lsls	r4, r1, #2
 800334c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003350:	eea6 0a87 	vfma.f32	s0, s13, s14
 8003354:	edd1 7a00 	vldr	s15, [r1]
    float temp = tanhf(sample + (param2[v][string]*gain));
 8003358:	ee27 0a80 	vmul.f32	s0, s15, s0
 800335c:	f01a fec0 	bl	801e0e0 <tanhf>
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 8003360:	4808      	ldr	r0, [pc, #32]	; (8003384 <tanhTick+0x50>)
 8003362:	4420      	add	r0, r4
 8003364:	f012 fc58 	bl	8015c18 <tHighpass_tick>
    temp *= param4[v][string];
 8003368:	4b07      	ldr	r3, [pc, #28]	; (8003388 <tanhTick+0x54>)
 800336a:	4423      	add	r3, r4
 800336c:	edd3 7a00 	vldr	s15, [r3]
    temp = tanhf(temp);
    //temp = tHighpass_tick(&dcBlock2, temp);
    return temp;
}
 8003370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = tanhf(temp);
 8003374:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003378:	f01a beb2 	b.w	801e0e0 <tanhf>
 800337c:	20005500 	.word	0x20005500
 8003380:	200054e0 	.word	0x200054e0
 8003384:	20000eb0 	.word	0x20000eb0
 8003388:	20005540 	.word	0x20005540

0800338c <softClipTick>:


float __ATTR_ITCMRAM softClipTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 800338c:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    sample = sample + param2[v][string];
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <softClipTick+0x6c>)
    float shape = param3[v][string];
 8003392:	4b1a      	ldr	r3, [pc, #104]	; (80033fc <softClipTick+0x70>)
    sample = sample + param2[v][string];
 8003394:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8003398:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 800339c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003400 <softClipTick+0x74>
    float shape = param3[v][string];
 80033a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80033a4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
    {
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
        sample = sample * shapeDividerS[v][string];
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80033a8:	4816      	ldr	r0, [pc, #88]	; (8003404 <softClipTick+0x78>)
{
 80033aa:	b410      	push	{r4}
    sample = sample * param1[v][string];
 80033ac:	4c16      	ldr	r4, [pc, #88]	; (8003408 <softClipTick+0x7c>)
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80033ae:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample + param2[v][string];
 80033b2:	edd2 7a00 	vldr	s15, [r2]
    sample = sample * param1[v][string];
 80033b6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    float shape = param3[v][string];
 80033ba:	edd3 6a00 	vldr	s13, [r3]
        sample = sample * shapeDividerS[v][string];
 80033be:	4b13      	ldr	r3, [pc, #76]	; (800340c <softClipTick+0x80>)
    sample = sample + param2[v][string];
 80033c0:	ed94 5a00 	vldr	s10, [r4]
 80033c4:	ee26 7a87 	vmul.f32	s14, s13, s14
        sample = sample * shapeDividerS[v][string];
 80033c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return sample;
}
 80033cc:	f85d 4b04 	ldr.w	r4, [sp], #4
    sample = sample + param2[v][string];
 80033d0:	eee5 7a00 	vfma.f32	s15, s10, s0
        sample = sample * shapeDividerS[v][string];
 80033d4:	ed93 0a00 	vldr	s0, [r3]
 80033d8:	fec7 7ae5 	vminnm.f32	s15, s15, s11
 80033dc:	fec7 7a86 	vmaxnm.f32	s15, s15, s12
        sample = (shape * sample) - ((shape * (sample * sample * sample))* 0.3333333f);
 80033e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033e8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80033ec:	ee67 7a87 	vmul.f32	s15, s15, s14
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 80033f0:	ee27 0a80 	vmul.f32	s0, s15, s0
 80033f4:	f012 bc10 	b.w	8015c18 <tHighpass_tick>
 80033f8:	20005500 	.word	0x20005500
 80033fc:	20005520 	.word	0x20005520
 8003400:	3eaaaaaa 	.word	0x3eaaaaaa
 8003404:	20000eb0 	.word	0x20000eb0
 8003408:	200054e0 	.word	0x200054e0
 800340c:	20005a6c 	.word	0x20005a6c

08003410 <hardClipTick>:


float __ATTR_ITCMRAM hardClipTick(float sample, int v, int string)
{

    sample = sample * param1[v][string];
 8003410:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003414:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <hardClipTick+0x70>)
    sample = sample + param2[v][string];
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <hardClipTick+0x74>)
 8003418:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
    sample = sample * param1[v][string];
 800341c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    } else if (sample >= 1.0f)
    {
        sample = 1.0f;
    }
    {
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8003420:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
    sample = sample + param2[v][string];
 8003424:	eb03 0380 	add.w	r3, r3, r0, lsl #2
{
 8003428:	b570      	push	{r4, r5, r6, lr}
    sample = sample + param2[v][string];
 800342a:	edd2 5a00 	vldr	s11, [r2]
    sample = sample * param1[v][string];
 800342e:	0084      	lsls	r4, r0, #2
    sample = sample + param2[v][string];
 8003430:	edd3 7a00 	vldr	s15, [r3]
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 8003434:	4e14      	ldr	r6, [pc, #80]	; (8003488 <hardClipTick+0x78>)
    sample = sample + param2[v][string];
 8003436:	eee5 7a80 	vfma.f32	s15, s11, s0
        sample = arm_sin_f32(  (arm_sin_f32(sample*param3[v][string]) * shapeDividerH[v][string]) * param3[v][string]);
 800343a:	4d14      	ldr	r5, [pc, #80]	; (800348c <hardClipTick+0x7c>)
 800343c:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8003440:	4425      	add	r5, r4
 8003442:	ed96 7a00 	vldr	s14, [r6]
 8003446:	fec7 7ac6 	vminnm.f32	s15, s15, s12
 800344a:	fec7 7aa6 	vmaxnm.f32	s15, s15, s13
 800344e:	ee27 0a87 	vmul.f32	s0, s15, s14
 8003452:	f019 ffad 	bl	801d3b0 <arm_sin_f32>
 8003456:	ed96 7a00 	vldr	s14, [r6]
 800345a:	edd5 7a00 	vldr	s15, [r5]
 800345e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003462:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003466:	f019 ffa3 	bl	801d3b0 <arm_sin_f32>
        sample = sample * shapeDividerH[v][string];
 800346a:	edd5 7a00 	vldr	s15, [r5]
    }

    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800346e:	4808      	ldr	r0, [pc, #32]	; (8003490 <hardClipTick+0x80>)
 8003470:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003474:	4420      	add	r0, r4
    return sample;
}
 8003476:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sample = tHighpass_tick(&dcBlock1[v][string], sample);
 800347a:	f012 bbcd 	b.w	8015c18 <tHighpass_tick>
 800347e:	bf00      	nop
 8003480:	200054e0 	.word	0x200054e0
 8003484:	20005500 	.word	0x20005500
 8003488:	20005520 	.word	0x20005520
 800348c:	20005a4c 	.word	0x20005a4c
 8003490:	20000eb0 	.word	0x20000eb0

08003494 <satTick>:


float __ATTR_ITCMRAM satTick(float sample, int v, int string)
{;
    sample = sample * param1[v][string];
 8003494:	eb01 0140 	add.w	r1, r1, r0, lsl #1
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 8003498:	4b17      	ldr	r3, [pc, #92]	; (80034f8 <satTick+0x64>)
    sample = sample * param1[v][string];
 800349a:	4a18      	ldr	r2, [pc, #96]	; (80034fc <satTick+0x68>)
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 800349c:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 80034a0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80034a4:	4816      	ldr	r0, [pc, #88]	; (8003500 <satTick+0x6c>)
    sample = sample * param1[v][string];
 80034a6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80034aa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
{;
 80034ae:	b510      	push	{r4, lr}
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 80034b0:	ed93 7a00 	vldr	s14, [r3]
    sample = sample * param1[v][string];
 80034b4:	008c      	lsls	r4, r1, #2
 80034b6:	edd2 7a00 	vldr	s15, [r2]
    float temp = (sample + (param2[v][string] * param1[v][string])) / (1.0f + fabs(sample + param2[v][string]));
 80034ba:	eeb0 6a47 	vmov.f32	s12, s14
 80034be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c2:	eea7 6a80 	vfma.f32	s12, s15, s0
 80034c6:	eea7 7a80 	vfma.f32	s14, s15, s0
 80034ca:	eeb0 6ac6 	vabs.f32	s12, s12
 80034ce:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80034d2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 80034d6:	ee36 6b05 	vadd.f64	d6, d6, d5
 80034da:	ee87 0b06 	vdiv.f64	d0, d7, d6
    temp = tHighpass_tick(&dcBlock1[v][string], temp);
 80034de:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80034e2:	f012 fb99 	bl	8015c18 <tHighpass_tick>
    temp = tHighpass_tick(&dcBlock2[v][string], temp);
 80034e6:	4807      	ldr	r0, [pc, #28]	; (8003504 <satTick+0x70>)
 80034e8:	4420      	add	r0, r4
 80034ea:	f012 fb95 	bl	8015c18 <tHighpass_tick>
    temp = LEAF_tanh(temp);
    return temp;
}
 80034ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    temp = LEAF_tanh(temp);
 80034f2:	f013 bec1 	b.w	8017278 <LEAF_tanh>
 80034f6:	bf00      	nop
 80034f8:	20005500 	.word	0x20005500
 80034fc:	200054e0 	.word	0x200054e0
 8003500:	20000eb0 	.word	0x20000eb0
 8003504:	20000ed0 	.word	0x20000ed0

08003508 <bcTick>:



float __ATTR_ITCMRAM bcTick(float sample, int v, int string)
{
    sample = sample * param1[v][string];
 8003508:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800350c:	4b05      	ldr	r3, [pc, #20]	; (8003524 <bcTick+0x1c>)
    return tCrusher_tick(&bc[v][string], sample);
 800350e:	4806      	ldr	r0, [pc, #24]	; (8003528 <bcTick+0x20>)
    sample = sample * param1[v][string];
 8003510:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    return tCrusher_tick(&bc[v][string], sample);
 8003514:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    sample = sample * param1[v][string];
 8003518:	edd3 7a00 	vldr	s15, [r3]
    return tCrusher_tick(&bc[v][string], sample);
 800351c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8003520:	f011 bc5e 	b.w	8014de0 <tCrusher_tick>
 8003524:	200054e0 	.word	0x200054e0
 8003528:	20000aec 	.word	0x20000aec

0800352c <compressorTick>:


float __ATTR_ITCMRAM compressorTick(float sample, int v, int string)
{
    //return tCompressor_tickWithTableHardKnee(&comp[v][string], sample);
	return tCompressor_tick(&comp[v][string], sample);
 800352c:	4b03      	ldr	r3, [pc, #12]	; (800353c <compressorTick+0x10>)
 800352e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003532:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003536:	f011 bca9 	b.w	8014e8c <tCompressor_tick>
 800353a:	bf00      	nop
 800353c:	20000b30 	.word	0x20000b30

08003540 <FXlowpassTick>:
}

float __ATTR_ITCMRAM  FXlowpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXlowpass[v][string], sample);
 8003540:	4b03      	ldr	r3, [pc, #12]	; (8003550 <FXlowpassTick+0x10>)
 8003542:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003546:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800354a:	f012 ba8f 	b.w	8015a6c <tSVF_tick>
 800354e:	bf00      	nop
 8003550:	2000093c 	.word	0x2000093c

08003554 <FXhighpassTick>:
}

float __ATTR_ITCMRAM  FXhighpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXhighpass[v][string], sample);
 8003554:	4b03      	ldr	r3, [pc, #12]	; (8003564 <FXhighpassTick+0x10>)
 8003556:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800355a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800355e:	f012 ba85 	b.w	8015a6c <tSVF_tick>
 8003562:	bf00      	nop
 8003564:	2000091c 	.word	0x2000091c

08003568 <FXbandpassTick>:
}

float __ATTR_ITCMRAM  FXbandpassTick(float sample, int v, int string)
{
	return tSVF_tick(&FXbandpass[v][string], sample);
 8003568:	4b03      	ldr	r3, [pc, #12]	; (8003578 <FXbandpassTick+0x10>)
 800356a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800356e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003572:	f012 ba7b 	b.w	8015a6c <tSVF_tick>
 8003576:	bf00      	nop
 8003578:	200008dc 	.word	0x200008dc

0800357c <FXdiodeLowpassTick>:
}

float __ATTR_ITCMRAM  FXdiodeLowpassTick(float sample, int v, int string)
{
	return tDiodeFilter_tick(&FXdiodeFilters[v][string], sample);
 800357c:	4b03      	ldr	r3, [pc, #12]	; (800358c <FXdiodeLowpassTick+0x10>)
 800357e:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003582:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003586:	f013 b8bb 	b.w	8016700 <tDiodeFilter_tick>
 800358a:	bf00      	nop
 800358c:	200008fc 	.word	0x200008fc

08003590 <FXVZpeakTick>:
}

float __ATTR_ITCMRAM  FXVZpeakTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterPeak[v][string], sample);
 8003590:	4b03      	ldr	r3, [pc, #12]	; (80035a0 <FXVZpeakTick+0x10>)
 8003592:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003596:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800359a:	f012 bb5f 	b.w	8015c5c <tVZFilter_tickEfficient>
 800359e:	bf00      	nop
 80035a0:	200008bc 	.word	0x200008bc

080035a4 <FXVZlowshelfTick>:
}

float __ATTR_ITCMRAM  FXVZlowshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterLS[v][string], sample);
 80035a4:	4b03      	ldr	r3, [pc, #12]	; (80035b4 <FXVZlowshelfTick+0x10>)
 80035a6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80035aa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80035ae:	f012 bb55 	b.w	8015c5c <tVZFilter_tickEfficient>
 80035b2:	bf00      	nop
 80035b4:	2000089c 	.word	0x2000089c

080035b8 <FXVZhighshelfTick>:
}
float __ATTR_ITCMRAM  FXVZhighshelfTick(float sample, int v, int string)
{
	return tVZFilter_tickEfficient(&FXVZfilterHS[v][string], sample);
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <FXVZhighshelfTick+0x10>)
 80035ba:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80035be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80035c2:	f012 bb4b 	b.w	8015c5c <tVZFilter_tickEfficient>
 80035c6:	bf00      	nop
 80035c8:	2000087c 	.word	0x2000087c

080035cc <FXVZbandrejectTick>:
}
float __ATTR_ITCMRAM  FXVZbandrejectTick(float sample, int v, int string)
{
	return  tVZFilter_tickEfficient(&FXVZfilterBR[v][string], sample);
 80035cc:	4b03      	ldr	r3, [pc, #12]	; (80035dc <FXVZbandrejectTick+0x10>)
 80035ce:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80035d2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80035d6:	f012 bb41 	b.w	8015c5c <tVZFilter_tickEfficient>
 80035da:	bf00      	nop
 80035dc:	2000085c 	.word	0x2000085c

080035e0 <FXLadderLowpassTick>:
}

float __ATTR_ITCMRAM  FXLadderLowpassTick(float sample, int v, int string)
{
	return tLadderFilter_tick(&FXLadderfilter[v][string], sample);
 80035e0:	4b03      	ldr	r3, [pc, #12]	; (80035f0 <FXLadderLowpassTick+0x10>)
 80035e2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80035e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80035ea:	f013 bc05 	b.w	8016df8 <tLadderFilter_tick>
 80035ee:	bf00      	nop
 80035f0:	2000083c 	.word	0x2000083c

080035f4 <FXLowpassParam1>:
//cutoffparams

void FXLowpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80035f4:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80035f8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800362c <FXLowpassParam1+0x38>
 80035fc:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003630 <FXLowpassParam1+0x3c>
 8003600:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003634 <FXLowpassParam1+0x40>
 8003604:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003608:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003638 <FXLowpassParam1+0x44>
{
 800360c:	b538      	push	{r3, r4, r5, lr}
 800360e:	4605      	mov	r5, r0
 8003610:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003612:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8003616:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800361a:	f013 fe19 	bl	8017250 <LEAF_clip>
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 800361e:	4807      	ldr	r0, [pc, #28]	; (800363c <FXLowpassParam1+0x48>)
 8003620:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003624:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXlowpass[v][string], value);
 8003628:	f012 ba56 	b.w	8015ad8 <tSVF_setFreqFast>
 800362c:	429a0000 	.word	0x429a0000
 8003630:	420fb824 	.word	0x420fb824
 8003634:	457ff000 	.word	0x457ff000
 8003638:	00000000 	.word	0x00000000
 800363c:	2000093c 	.word	0x2000093c

08003640 <FXHighpassParam1>:
void FXHighpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003640:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003644:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003678 <FXHighpassParam1+0x38>
 8003648:	eddf 0a0c 	vldr	s1, [pc, #48]	; 800367c <FXHighpassParam1+0x3c>
 800364c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003680 <FXHighpassParam1+0x40>
 8003650:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003654:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003684 <FXHighpassParam1+0x44>
{
 8003658:	b538      	push	{r3, r4, r5, lr}
 800365a:	4605      	mov	r5, r0
 800365c:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800365e:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8003662:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003666:	f013 fdf3 	bl	8017250 <LEAF_clip>
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 800366a:	4807      	ldr	r0, [pc, #28]	; (8003688 <FXHighpassParam1+0x48>)
 800366c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003670:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tSVF_setFreqFast(&FXhighpass[v][string], value);
 8003674:	f012 ba30 	b.w	8015ad8 <tSVF_setFreqFast>
 8003678:	429a0000 	.word	0x429a0000
 800367c:	420fb824 	.word	0x420fb824
 8003680:	457ff000 	.word	0x457ff000
 8003684:	00000000 	.word	0x00000000
 8003688:	2000091c 	.word	0x2000091c

0800368c <FXBandpassParam1>:

void FXBandpassParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800368c:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003690:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80036c4 <FXBandpassParam1+0x38>
 8003694:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80036c8 <FXBandpassParam1+0x3c>
 8003698:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80036cc <FXBandpassParam1+0x40>
 800369c:	eee0 7a07 	vfma.f32	s15, s0, s14
 80036a0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80036d0 <FXBandpassParam1+0x44>
{
 80036a4:	b538      	push	{r3, r4, r5, lr}
 80036a6:	4605      	mov	r5, r0
 80036a8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036aa:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 80036ae:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036b2:	f013 fdcd 	bl	8017250 <LEAF_clip>
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 80036b6:	4807      	ldr	r0, [pc, #28]	; (80036d4 <FXBandpassParam1+0x48>)
 80036b8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80036bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tSVF_setFreqFast(&FXbandpass[v][string], value);
 80036c0:	f012 ba0a 	b.w	8015ad8 <tSVF_setFreqFast>
 80036c4:	429a0000 	.word	0x429a0000
 80036c8:	420fb824 	.word	0x420fb824
 80036cc:	457ff000 	.word	0x457ff000
 80036d0:	00000000 	.word	0x00000000
 80036d4:	200008dc 	.word	0x200008dc

080036d8 <FXDiodeParam1>:

void FXDiodeParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036d8:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80036dc:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003710 <FXDiodeParam1+0x38>
 80036e0:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003714 <FXDiodeParam1+0x3c>
 80036e4:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003718 <FXDiodeParam1+0x40>
 80036e8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80036ec:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800371c <FXDiodeParam1+0x44>
{
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4605      	mov	r5, r0
 80036f4:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036f6:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 80036fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80036fe:	f013 fda7 	bl	8017250 <LEAF_clip>
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 8003702:	4807      	ldr	r0, [pc, #28]	; (8003720 <FXDiodeParam1+0x48>)
 8003704:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tDiodeFilter_setFreqFast(&FXdiodeFilters[v][string], value);
 800370c:	f013 bafc 	b.w	8016d08 <tDiodeFilter_setFreqFast>
 8003710:	429a0000 	.word	0x429a0000
 8003714:	420fb824 	.word	0x420fb824
 8003718:	457ff000 	.word	0x457ff000
 800371c:	00000000 	.word	0x00000000
 8003720:	200008fc 	.word	0x200008fc

08003724 <FXPeakParam1>:
void FXPeakParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003724:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003728:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800375c <FXPeakParam1+0x38>
 800372c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003760 <FXPeakParam1+0x3c>
 8003730:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003764 <FXPeakParam1+0x40>
 8003734:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003738:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003768 <FXPeakParam1+0x44>
{
 800373c:	b538      	push	{r3, r4, r5, lr}
 800373e:	4605      	mov	r5, r0
 8003740:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003742:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8003746:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800374a:	f013 fd81 	bl	8017250 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 800374e:	4807      	ldr	r0, [pc, #28]	; (800376c <FXPeakParam1+0x48>)
 8003750:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003754:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterPeak[v][string], value);
 8003758:	f012 bc9e 	b.w	8016098 <tVZFilter_setFreqFast>
 800375c:	429a0000 	.word	0x429a0000
 8003760:	420fb824 	.word	0x420fb824
 8003764:	457ff000 	.word	0x457ff000
 8003768:	00000000 	.word	0x00000000
 800376c:	200008bc 	.word	0x200008bc

08003770 <FXLowShelfParam1>:
void FXLowShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003770:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003774:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037a8 <FXLowShelfParam1+0x38>
 8003778:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80037ac <FXLowShelfParam1+0x3c>
 800377c:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80037b0 <FXLowShelfParam1+0x40>
 8003780:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003784:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80037b4 <FXLowShelfParam1+0x44>
{
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4605      	mov	r5, r0
 800378c:	460c      	mov	r4, r1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800378e:	ee67 0aa0 	vmul.f32	s1, s15, s1
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 8003792:	eb04 0445 	add.w	r4, r4, r5, lsl #1
    value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003796:	f013 fd5b 	bl	8017250 <LEAF_clip>
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 800379a:	4807      	ldr	r0, [pc, #28]	; (80037b8 <FXLowShelfParam1+0x48>)
 800379c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80037a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_setFreqFast(&FXVZfilterLS[v][string], value);
 80037a4:	f012 bc78 	b.w	8016098 <tVZFilter_setFreqFast>
 80037a8:	429a0000 	.word	0x429a0000
 80037ac:	420fb824 	.word	0x420fb824
 80037b0:	457ff000 	.word	0x457ff000
 80037b4:	00000000 	.word	0x00000000
 80037b8:	2000089c 	.word	0x2000089c

080037bc <FXHighShelfParam1>:
void FXHighShelfParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80037bc:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80037c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80037f4 <FXHighShelfParam1+0x38>
 80037c4:	eddf 0a0c 	vldr	s1, [pc, #48]	; 80037f8 <FXHighShelfParam1+0x3c>
 80037c8:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 80037fc <FXHighShelfParam1+0x40>
 80037cc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80037d0:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003800 <FXHighShelfParam1+0x44>
{
 80037d4:	b538      	push	{r3, r4, r5, lr}
 80037d6:	4605      	mov	r5, r0
 80037d8:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80037da:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80037de:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 80037e2:	f013 fd35 	bl	8017250 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80037e6:	4807      	ldr	r0, [pc, #28]	; (8003804 <FXHighShelfParam1+0x48>)
 80037e8:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80037ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterHS[v][string], value);
 80037f0:	f012 bc52 	b.w	8016098 <tVZFilter_setFreqFast>
 80037f4:	429a0000 	.word	0x429a0000
 80037f8:	420fb824 	.word	0x420fb824
 80037fc:	457ff000 	.word	0x457ff000
 8003800:	00000000 	.word	0x00000000
 8003804:	2000087c 	.word	0x2000087c

08003808 <FXNotchParam1>:
void FXNotchParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003808:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800380c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003840 <FXNotchParam1+0x38>
 8003810:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003844 <FXNotchParam1+0x3c>
 8003814:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003848 <FXNotchParam1+0x40>
 8003818:	eee0 7a07 	vfma.f32	s15, s0, s14
 800381c:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 800384c <FXNotchParam1+0x44>
{
 8003820:	b538      	push	{r3, r4, r5, lr}
 8003822:	4605      	mov	r5, r0
 8003824:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003826:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 800382a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800382e:	f013 fd0f 	bl	8017250 <LEAF_clip>
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 8003832:	4807      	ldr	r0, [pc, #28]	; (8003850 <FXNotchParam1+0x48>)
 8003834:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003838:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setFreqFast(&FXVZfilterBR[v][string], value);
 800383c:	f012 bc2c 	b.w	8016098 <tVZFilter_setFreqFast>
 8003840:	429a0000 	.word	0x429a0000
 8003844:	420fb824 	.word	0x420fb824
 8003848:	457ff000 	.word	0x457ff000
 800384c:	00000000 	.word	0x00000000
 8003850:	2000085c 	.word	0x2000085c

08003854 <FXLadderParam1>:
void FXLadderParam1(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003854:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003858:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800388c <FXLadderParam1+0x38>
 800385c:	eddf 0a0c 	vldr	s1, [pc, #48]	; 8003890 <FXLadderParam1+0x3c>
 8003860:	ed9f 1a0c 	vldr	s2, [pc, #48]	; 8003894 <FXLadderParam1+0x40>
 8003864:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003868:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8003898 <FXLadderParam1+0x44>
{
 800386c:	b538      	push	{r3, r4, r5, lr}
 800386e:	4605      	mov	r5, r0
 8003870:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003872:	ee67 0aa0 	vmul.f32	s1, s15, s1
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8003876:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 800387a:	f013 fce9 	bl	8017250 <LEAF_clip>
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 800387e:	4807      	ldr	r0, [pc, #28]	; (800389c <FXLadderParam1+0x48>)
 8003880:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003884:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tLadderFilter_setFreqFast(&FXLadderfilter[v][string], value);
 8003888:	f013 bbdc 	b.w	8017044 <tLadderFilter_setFreqFast>
 800388c:	429a0000 	.word	0x429a0000
 8003890:	420fb824 	.word	0x420fb824
 8003894:	457ff000 	.word	0x457ff000
 8003898:	00000000 	.word	0x00000000
 800389c:	2000083c 	.word	0x2000083c

080038a0 <FXPeakParam2>:

//gain params

void FXPeakParam2(float value, int v, int string)
{
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038a0:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80038a4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80038cc <FXPeakParam2+0x2c>
{
 80038a8:	b538      	push	{r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038aa:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80038ae:	4605      	mov	r5, r0
 80038b0:	460c      	mov	r4, r1
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038b2:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80038b6:	eeb0 0a67 	vmov.f32	s0, s15
 80038ba:	f013 fe81 	bl	80175c0 <fasterdbtoa>
 80038be:	4804      	ldr	r0, [pc, #16]	; (80038d0 <FXPeakParam2+0x30>)
 80038c0:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80038c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 tVZFilter_setGain(&FXVZfilterPeak[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038c8:	f012 bd44 	b.w	8016354 <tVZFilter_setGain>
 80038cc:	42480000 	.word	0x42480000
 80038d0:	200008bc 	.word	0x200008bc

080038d4 <FXLowShelfParam2>:

void FXLowShelfParam2(float value, int v, int string)
{
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038d4:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 80038d8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003900 <FXLowShelfParam2+0x2c>
{
 80038dc:	b538      	push	{r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038de:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 80038e2:	4605      	mov	r5, r0
 80038e4:	460c      	mov	r4, r1
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038e6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 80038ea:	eeb0 0a67 	vmov.f32	s0, s15
 80038ee:	f013 fe67 	bl	80175c0 <fasterdbtoa>
 80038f2:	4804      	ldr	r0, [pc, #16]	; (8003904 <FXLowShelfParam2+0x30>)
 80038f4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 80038f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
tVZFilter_setGain(&FXVZfilterLS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 80038fc:	f012 bd2a 	b.w	8016354 <tVZFilter_setGain>
 8003900:	42480000 	.word	0x42480000
 8003904:	2000089c 	.word	0x2000089c

08003908 <FXHighShelfParam2>:

void FXHighShelfParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003908:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 800390c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003934 <FXHighShelfParam2+0x2c>
{
 8003910:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003912:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8003916:	4605      	mov	r5, r0
 8003918:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800391a:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 800391e:	eeb0 0a67 	vmov.f32	s0, s15
 8003922:	f013 fe4d 	bl	80175c0 <fasterdbtoa>
 8003926:	4804      	ldr	r0, [pc, #16]	; (8003938 <FXHighShelfParam2+0x30>)
 8003928:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 800392c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterHS[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003930:	f012 bd10 	b.w	8016354 <tVZFilter_setGain>
 8003934:	42480000 	.word	0x42480000
 8003938:	2000087c 	.word	0x2000087c

0800393c <FXNotchParam2>:

void FXNotchParam2(float value, int v, int string)
{
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800393c:	eefb 7a09 	vmov.f32	s15, #185	; 0xc1c80000 -25.0
 8003940:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8003968 <FXNotchParam2+0x2c>
{
 8003944:	b538      	push	{r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003946:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 800394a:	4605      	mov	r5, r0
 800394c:	460c      	mov	r4, r1
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 800394e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
 8003952:	eeb0 0a67 	vmov.f32	s0, s15
 8003956:	f013 fe33 	bl	80175c0 <fasterdbtoa>
 800395a:	4804      	ldr	r0, [pc, #16]	; (800396c <FXNotchParam2+0x30>)
 800395c:	eb00 0084 	add.w	r0, r0, r4, lsl #2

}
 8003960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	tVZFilter_setGain(&FXVZfilterBR[v][string], fasterdbtoa((value * 50.f) - 25.f));
 8003964:	f012 bcf6 	b.w	8016354 <tVZFilter_setGain>
 8003968:	42480000 	.word	0x42480000
 800396c:	2000085c 	.word	0x2000085c

08003970 <FXLowpassParam3>:
//resonance params
void FXLowpassParam3(float value, int v, int string)
{
	tSVF_setQ(&FXlowpass[v][string], value);
 8003970:	4b03      	ldr	r3, [pc, #12]	; (8003980 <FXLowpassParam3+0x10>)
 8003972:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003976:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800397a:	f012 b8e3 	b.w	8015b44 <tSVF_setQ>
 800397e:	bf00      	nop
 8003980:	2000093c 	.word	0x2000093c

08003984 <FXHighpassParam3>:
}

void FXHighpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXhighpass[v][string], value);
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <FXHighpassParam3+0x10>)
 8003986:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800398a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800398e:	f012 b8d9 	b.w	8015b44 <tSVF_setQ>
 8003992:	bf00      	nop
 8003994:	2000091c 	.word	0x2000091c

08003998 <FXBandpassParam3>:
}

void FXBandpassParam3(float value, int v, int string)
{
    tSVF_setQ(&FXbandpass[v][string], value);
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <FXBandpassParam3+0x10>)
 800399a:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 800399e:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039a2:	f012 b8cf 	b.w	8015b44 <tSVF_setQ>
 80039a6:	bf00      	nop
 80039a8:	200008dc 	.word	0x200008dc

080039ac <FXDiodeParam3>:
}

void FXDiodeParam3(float value, int v, int string)
{
	tDiodeFilter_setQ(&FXdiodeFilters[v][string], value);
 80039ac:	4b03      	ldr	r3, [pc, #12]	; (80039bc <FXDiodeParam3+0x10>)
 80039ae:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039b2:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039b6:	f013 b9c7 	b.w	8016d48 <tDiodeFilter_setQ>
 80039ba:	bf00      	nop
 80039bc:	200008fc 	.word	0x200008fc

080039c0 <FXPeakParam3>:
}


void FXPeakParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterPeak[v][string], value);
 80039c0:	4b03      	ldr	r3, [pc, #12]	; (80039d0 <FXPeakParam3+0x10>)
 80039c2:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039c6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039ca:	f012 bcdf 	b.w	801638c <tVZFilter_setResonance>
 80039ce:	bf00      	nop
 80039d0:	200008bc 	.word	0x200008bc

080039d4 <FXLowShelfParam3>:
}


void FXLowShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterLS[v][string], value);
 80039d4:	4b03      	ldr	r3, [pc, #12]	; (80039e4 <FXLowShelfParam3+0x10>)
 80039d6:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039da:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039de:	f012 bcd5 	b.w	801638c <tVZFilter_setResonance>
 80039e2:	bf00      	nop
 80039e4:	2000089c 	.word	0x2000089c

080039e8 <FXHighShelfParam3>:
}


void FXHighShelfParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterHS[v][string], value);
 80039e8:	4b03      	ldr	r3, [pc, #12]	; (80039f8 <FXHighShelfParam3+0x10>)
 80039ea:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 80039ee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80039f2:	f012 bccb 	b.w	801638c <tVZFilter_setResonance>
 80039f6:	bf00      	nop
 80039f8:	2000087c 	.word	0x2000087c

080039fc <FXNotchParam3>:
}


void FXNotchParam3(float value, int v, int string)
{
	tVZFilter_setResonance(&FXVZfilterBR[v][string], value);
 80039fc:	4b03      	ldr	r3, [pc, #12]	; (8003a0c <FXNotchParam3+0x10>)
 80039fe:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003a02:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003a06:	f012 bcc1 	b.w	801638c <tVZFilter_setResonance>
 8003a0a:	bf00      	nop
 8003a0c:	2000085c 	.word	0x2000085c

08003a10 <FXLadderParam3>:
}


void FXLadderParam3(float value, int v, int string)
{
	tLadderFilter_setQ(&FXLadderfilter[v][string], value);
 8003a10:	4b03      	ldr	r3, [pc, #12]	; (8003a20 <FXLadderParam3+0x10>)
 8003a12:	eb01 0040 	add.w	r0, r1, r0, lsl #1
 8003a16:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8003a1a:	f013 bb37 	b.w	801708c <tLadderFilter_setQ>
 8003a1e:	bf00      	nop
 8003a20:	2000083c 	.word	0x2000083c

08003a24 <noiseSetTilt>:


/////NOISE///

void __ATTR_ITCMRAM noiseSetTilt(float value, int v, int string)
{
 8003a24:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8003a26:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
 8003a2a:	008c      	lsls	r4, r1, #2
{
 8003a2c:	ed2d 8b02 	vpush	{d8}
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8003a30:	eef3 8a0e 	vmov.f32	s17, #62	; 0x41f00000  30.0
{
 8003a34:	eeb0 8a40 	vmov.f32	s16, s0
	tVZFilter_setGain(&noiseShelf1[string], fastdbtoa(-1.0f * ((value * 30.0f) - 15.0f)));
 8003a38:	eee0 7a68 	vfms.f32	s15, s0, s17
 8003a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8003a40:	f013 fdb6 	bl	80175b0 <fastdbtoa>
 8003a44:	4808      	ldr	r0, [pc, #32]	; (8003a68 <noiseSetTilt+0x44>)
 8003a46:	4420      	add	r0, r4
 8003a48:	f012 fc84 	bl	8016354 <tVZFilter_setGain>
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003a4c:	eeba 0a0e 	vmov.f32	s0, #174	; 0xc1700000 -15.0
 8003a50:	eea8 0a28 	vfma.f32	s0, s16, s17
 8003a54:	f013 fdac 	bl	80175b0 <fastdbtoa>
 8003a58:	4804      	ldr	r0, [pc, #16]	; (8003a6c <noiseSetTilt+0x48>)
}
 8003a5a:	ecbd 8b02 	vpop	{d8}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003a5e:	4420      	add	r0, r4
}
 8003a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseShelf2[string], fastdbtoa((value * 30.0f) - 15.0f));
 8003a64:	f012 bc76 	b.w	8016354 <tVZFilter_setGain>
 8003a68:	20005488 	.word	0x20005488
 8003a6c:	20005490 	.word	0x20005490

08003a70 <noiseSetGain>:


void __ATTR_ITCMRAM noiseSetGain(float value, int v, int string)
{
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a70:	eefb 7a01 	vmov.f32	s15, #177	; 0xc1880000 -17.0
 8003a74:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003a98 <noiseSetGain+0x28>
{
 8003a78:	b510      	push	{r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a7a:	eee0 7a07 	vfma.f32	s15, s0, s14
{
 8003a7e:	460c      	mov	r4, r1
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a80:	eeb0 0a67 	vmov.f32	s0, s15
 8003a84:	f013 fd94 	bl	80175b0 <fastdbtoa>
 8003a88:	4804      	ldr	r0, [pc, #16]	; (8003a9c <noiseSetGain+0x2c>)
 8003a8a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003a8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setGain(&noiseBell1[string], fastdbtoa((value* 34.0f) - 17.0f));
 8003a92:	f012 bc5f 	b.w	8016354 <tVZFilter_setGain>
 8003a96:	bf00      	nop
 8003a98:	42080000 	.word	0x42080000
 8003a9c:	20005468 	.word	0x20005468

08003aa0 <noiseSetFreq>:

void __ATTR_ITCMRAM noiseSetFreq(float value, int v, int string)
{
	value = (value * 77.0f) + 42.0f;
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003aa0:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8003aa4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003ad4 <noiseSetFreq+0x34>
 8003aa8:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8003ad8 <noiseSetFreq+0x38>
 8003aac:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8003adc <noiseSetFreq+0x3c>
 8003ab0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003ab4:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8003ae0 <noiseSetFreq+0x40>
{
 8003ab8:	b510      	push	{r4, lr}
 8003aba:	460c      	mov	r4, r1
	value = LEAF_clip(0.0f, (value-16.0f) * 35.929824561403509f, 4095.0f);
 8003abc:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8003ac0:	f013 fbc6 	bl	8017250 <LEAF_clip>
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8003ac4:	4807      	ldr	r0, [pc, #28]	; (8003ae4 <noiseSetFreq+0x44>)
 8003ac6:	eb00 0084 	add.w	r0, r0, r4, lsl #2
}
 8003aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tVZFilter_setFreqFast(&noiseBell1[string], value);
 8003ace:	f012 bae3 	b.w	8016098 <tVZFilter_setFreqFast>
 8003ad2:	bf00      	nop
 8003ad4:	429a0000 	.word	0x429a0000
 8003ad8:	420fb824 	.word	0x420fb824
 8003adc:	457ff000 	.word	0x457ff000
 8003ae0:	00000000 	.word	0x00000000
 8003ae4:	20005468 	.word	0x20005468

08003ae8 <noise_tick>:
uint32_t timeNoise = 0;
uint32_t timeRandom = 0;


void __ATTR_ITCMRAM noise_tick(int string)
{
 8003ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tempCount9 = DWT->CYCCNT;
	float enabled = params[Noise].realVal[string];
	float amp = params[NoiseAmp].realVal[string];
	float filterSend = params[NoiseFilterSend].realVal[string];
	amp = amp < 0.f ? 0.f : amp;
	float sample = random_values[randomValPointer++];
 8003aea:	4d27      	ldr	r5, [pc, #156]	; (8003b88 <noise_tick+0xa0>)
{
 8003aec:	4604      	mov	r4, r0
	float sample = random_values[randomValPointer++];
 8003aee:	4927      	ldr	r1, [pc, #156]	; (8003b8c <noise_tick+0xa4>)
	float enabled = params[Noise].realVal[string];
 8003af0:	4b27      	ldr	r3, [pc, #156]	; (8003b90 <noise_tick+0xa8>)
	uint32_t tempCount9 = DWT->CYCCNT;
 8003af2:	4f28      	ldr	r7, [pc, #160]	; (8003b94 <noise_tick+0xac>)
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003af4:	4828      	ldr	r0, [pc, #160]	; (8003b98 <noise_tick+0xb0>)
{
 8003af6:	ed2d 8b04 	vpush	{d8-d9}
	float sample = random_values[randomValPointer++];
 8003afa:	782a      	ldrb	r2, [r5, #0]
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003afc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
	uint32_t tempCount9 = DWT->CYCCNT;
 8003b00:	687e      	ldr	r6, [r7, #4]
	float sample = random_values[randomValPointer++];
 8003b02:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8003b06:	3201      	adds	r2, #1
 8003b08:	702a      	strb	r2, [r5, #0]
	float enabled = params[Noise].realVal[string];
 8003b0a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003b0e:	ed91 0a00 	vldr	s0, [r1]
 8003b12:	00a5      	lsls	r5, r4, #2
	float enabled = params[Noise].realVal[string];
 8003b14:	ed92 9a80 	vldr	s18, [r2, #512]	; 0x200
	float filterSend = params[NoiseFilterSend].realVal[string];
 8003b18:	ed92 8aa3 	vldr	s16, [r2, #652]	; 0x28c
	float amp = params[NoiseAmp].realVal[string];
 8003b1c:	edd2 8a9c 	vldr	s17, [r2, #624]	; 0x270
	sample = tVZFilter_tickEfficient(&noiseShelf1[string], sample);
 8003b20:	f012 f89c 	bl	8015c5c <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseShelf2[string], sample);
 8003b24:	481d      	ldr	r0, [pc, #116]	; (8003b9c <noise_tick+0xb4>)
 8003b26:	4428      	add	r0, r5
 8003b28:	f012 f898 	bl	8015c5c <tVZFilter_tickEfficient>
	sample = tVZFilter_tickEfficient(&noiseBell1[string], sample);
 8003b2c:	481c      	ldr	r0, [pc, #112]	; (8003ba0 <noise_tick+0xb8>)
 8003b2e:	4428      	add	r0, r5
 8003b30:	f012 f894 	bl	8015c5c <tVZFilter_tickEfficient>
	sample = sample * amp;
	float normSample = (sample + 1.f) * 0.5f;
 8003b34:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	amp = amp < 0.f ? 0.f : amp;
 8003b38:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8003ba4 <noise_tick+0xbc>
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b3c:	ee29 7a08 	vmul.f32	s14, s18, s16
	float normSample = (sample + 1.f) * 0.5f;
 8003b40:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003b44:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <noise_tick+0xc0>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b46:	ee37 8ac8 	vsub.f32	s16, s15, s16
	amp = amp < 0.f ? 0.f : amp;
 8003b4a:	fec8 8a86 	vmaxnm.f32	s17, s17, s12
	sample = sample * amp;
 8003b4e:	ee28 0a80 	vmul.f32	s0, s17, s0
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b52:	4816      	ldr	r0, [pc, #88]	; (8003bac <noise_tick+0xc4>)
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003b54:	eb03 0384 	add.w	r3, r3, r4, lsl #2

	uint32_t tempCount10 = DWT->CYCCNT;
	timeRandom = tempCount10-tempCount9;
 8003b58:	4a15      	ldr	r2, [pc, #84]	; (8003bb0 <noise_tick+0xc8>)
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b5a:	ee28 8a09 	vmul.f32	s16, s16, s18
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b5e:	4405      	add	r5, r0
	float normSample = (sample + 1.f) * 0.5f;
 8003b60:	ee70 7a27 	vadd.f32	s15, s0, s15
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b64:	ee27 7a00 	vmul.f32	s14, s14, s0
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b68:	ee28 0a00 	vmul.f32	s0, s16, s0
	float normSample = (sample + 1.f) * 0.5f;
 8003b6c:	ee67 7aa6 	vmul.f32	s15, s15, s13
	noiseOuts[0][string] = sample * filterSend *  enabled;
 8003b70:	ed85 7a00 	vstr	s14, [r5]
	noiseOuts[1][string] = sample * (1.f-filterSend) * enabled ;
 8003b74:	ed85 0a02 	vstr	s0, [r5, #8]
	sourceValues[NOISE_SOURCE_OFFSET][string] = normSample;
 8003b78:	edc3 7a06 	vstr	s15, [r3, #24]
	uint32_t tempCount10 = DWT->CYCCNT;
 8003b7c:	687b      	ldr	r3, [r7, #4]
	timeRandom = tempCount10-tempCount9;
 8003b7e:	1b9b      	subs	r3, r3, r6
 8003b80:	6013      	str	r3, [r2, #0]
}
 8003b82:	ecbd 8b04 	vpop	{d8-d9}
 8003b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b88:	20005a18 	.word	0x20005a18
 8003b8c:	20016d58 	.word	0x20016d58
 8003b90:	20015c48 	.word	0x20015c48
 8003b94:	e0001000 	.word	0xe0001000
 8003b98:	20005488 	.word	0x20005488
 8003b9c:	20005490 	.word	0x20005490
 8003ba0:	20005468 	.word	0x20005468
 8003ba4:	00000000 	.word	0x00000000
 8003ba8:	20012df8 	.word	0x20012df8
 8003bac:	20005478 	.word	0x20005478
 8003bb0:	20012fac 	.word	0x20012fac

08003bb4 <audioTickL>:
{
 8003bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	interrupted = 0;
 8003bb8:	2100      	movs	r1, #0
 8003bba:	48c5      	ldr	r0, [pc, #788]	; (8003ed0 <audioTickL+0x31c>)
	uint32_t tempCount5 = DWT->CYCCNT;
 8003bbc:	4ac5      	ldr	r2, [pc, #788]	; (8003ed4 <audioTickL+0x320>)
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8003bbe:	4bc6      	ldr	r3, [pc, #792]	; (8003ed8 <audioTickL+0x324>)
 8003bc0:	4dc6      	ldr	r5, [pc, #792]	; (8003edc <audioTickL+0x328>)
 8003bc2:	4ec7      	ldr	r6, [pc, #796]	; (8003ee0 <audioTickL+0x32c>)
 8003bc4:	f105 0830 	add.w	r8, r5, #48	; 0x30
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8003bc8:	4cc6      	ldr	r4, [pc, #792]	; (8003ee4 <audioTickL+0x330>)
{
 8003bca:	ed2d 8b0a 	vpush	{d8-d12}
 8003bce:	b08d      	sub	sp, #52	; 0x34
	interrupted = 0;
 8003bd0:	7001      	strb	r1, [r0, #0]
{
 8003bd2:	af00      	add	r7, sp, #0
	uint32_t tempCount5 = DWT->CYCCNT;
 8003bd4:	6852      	ldr	r2, [r2, #4]
	uint8_t fxPre = (params[FXPREPOST_PARAMS_OFFSET].realVal[0] > 0.5f); // ok to use [0] because it's not changeable by mapping so not per voice
 8003bd6:	edd3 9a38 	vldr	s19, [r3, #224]	; 0xe0
	uint32_t tempCount5 = DWT->CYCCNT;
 8003bda:	60ba      	str	r2, [r7, #8]
	tickMappings();
 8003bdc:	f7fe fc36 	bl	800244c <tickMappings>
	float volumeSmoothed = tExpSmooth_tick(&volumeSmoother);
 8003be0:	48c1      	ldr	r0, [pc, #772]	; (8003ee8 <audioTickL+0x334>)
 8003be2:	f011 fd71 	bl	80156c8 <tExpSmooth_tick>
 8003be6:	eeb0 8a40 	vmov.f32	s16, s0
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8003bea:	4630      	mov	r0, r6
 8003bec:	f011 fd6c 	bl	80156c8 <tExpSmooth_tick>
		for (int v = 0; v < numStringsThisBoard; v++)
 8003bf0:	4bbe      	ldr	r3, [pc, #760]	; (8003eec <audioTickL+0x338>)
		knobScaled[i] = tExpSmooth_tick(&knobSmoothers[i]);
 8003bf2:	eca5 0a01 	vstmia	r5!, {s0}
		for (int v = 0; v < numStringsThisBoard; v++)
 8003bf6:	781b      	ldrb	r3, [r3, #0]
 8003bf8:	b12b      	cbz	r3, 8003c06 <audioTickL+0x52>
 8003bfa:	2b01      	cmp	r3, #1
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 8003bfc:	ed84 0a08 	vstr	s0, [r4, #32]
		for (int v = 0; v < numStringsThisBoard; v++)
 8003c00:	d001      	beq.n	8003c06 <audioTickL+0x52>
			sourceValues[MACRO_SOURCE_OFFSET + i][v] = knobScaled[i];
 8003c02:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
	for (int i = 0; i < 12; i++)
 8003c06:	4545      	cmp	r5, r8
 8003c08:	f106 0604 	add.w	r6, r6, #4
 8003c0c:	f104 0408 	add.w	r4, r4, #8
 8003c10:	d1eb      	bne.n	8003bea <audioTickL+0x36>
	float note[numStringsThisBoard];
 8003c12:	009a      	lsls	r2, r3, #2
 8003c14:	3207      	adds	r2, #7
 8003c16:	f402 62ff 	and.w	r2, r2, #2040	; 0x7f8
 8003c1a:	ebad 0d02 	sub.w	sp, sp, r2
 8003c1e:	466a      	mov	r2, sp
	for (int v = 0; v < numStringsThisBoard; v++)
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	f000 823b 	beq.w	800409c <audioTickL+0x4e8>
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003c26:	ed9f aab2 	vldr	s20, [pc, #712]	; 8003ef0 <audioTickL+0x33c>
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	eddf 7ab1 	vldr	s15, [pc, #708]	; 8003ef4 <audioTickL+0x340>
 8003c30:	eeb0 ba4a 	vmov.f32	s22, s20
 8003c34:	617a      	str	r2, [r7, #20]
 8003c36:	4ab0      	ldr	r2, [pc, #704]	; (8003ef8 <audioTickL+0x344>)
	for (int v = 0; v < numStringsThisBoard; v++)
 8003c38:	469a      	mov	sl, r3
	float masterSample = 0.0f;
 8003c3a:	eddf 8ab0 	vldr	s17, [pc, #704]	; 8003efc <audioTickL+0x348>
 8003c3e:	61ba      	str	r2, [r7, #24]
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003c40:	eea8 ba27 	vfma.f32	s22, s16, s15
 8003c44:	4aae      	ldr	r2, [pc, #696]	; (8003f00 <audioTickL+0x34c>)
		if (note[v] < 0.0f)
 8003c46:	eeb0 9a68 	vmov.f32	s18, s17
 8003c4a:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8003f58 <audioTickL+0x3a4>
 8003c4e:	623a      	str	r2, [r7, #32]
 8003c50:	4aac      	ldr	r2, [pc, #688]	; (8003f04 <audioTickL+0x350>)
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003c52:	eddf aaad 	vldr	s21, [pc, #692]	; 8003f08 <audioTickL+0x354>
 8003c56:	613a      	str	r2, [r7, #16]
 8003c58:	4aac      	ldr	r2, [pc, #688]	; (8003f0c <audioTickL+0x358>)
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5c:	61fa      	str	r2, [r7, #28]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c62:	ecb3 8a01 	vldmia	r3!, {s16}
 8003c66:	61bb      	str	r3, [r7, #24]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c68:	4ba9      	ldr	r3, [pc, #676]	; (8003f10 <audioTickL+0x35c>)
 8003c6a:	edd3 7a00 	vldr	s15, [r3]
 8003c6e:	4ba9      	ldr	r3, [pc, #676]	; (8003f14 <audioTickL+0x360>)
 8003c70:	ed93 7a00 	vldr	s14, [r3]
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c74:	4ba8      	ldr	r3, [pc, #672]	; (8003f18 <audioTickL+0x364>)
 8003c76:	4413      	add	r3, r2
 8003c78:	edd3 6a00 	vldr	s13, [r3]
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	ee38 8a26 	vadd.f32	s16, s16, s13
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c82:	ee78 7a67 	vsub.f32	s15, s16, s15
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c86:	eca3 8a01 	vstmia	r3!, {s16}
		if (note[v] < 0.0f)
 8003c8a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
		note[v] = stringMIDIPitches[v] + stringOctave[v];
 8003c8e:	617b      	str	r3, [r7, #20]
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c90:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (note[v] < 0.0f)
 8003c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		sourceValues[MIDI_KEY_SOURCE_OFFSET][v] = (note[v] - midiKeySubtractor) * midiKeyDivisor;
 8003c98:	edcb 7a1a 	vstr	s15, [fp, #104]	; 0x68
		if (note[v] < 0.0f)
 8003c9c:	d503      	bpl.n	8003ca6 <audioTickL+0xf2>
			note[v] = 0.0f;
 8003c9e:	eeb0 8a49 	vmov.f32	s16, s18
 8003ca2:	ed03 9a01 	vstr	s18, [r3, #-4]
	interruptChecker = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	4a9c      	ldr	r2, [pc, #624]	; (8003f1c <audioTickL+0x368>)
 8003caa:	f1ab 0520 	sub.w	r5, fp, #32
 8003cae:	7013      	strb	r3, [r2, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8003cb0:	4b88      	ldr	r3, [pc, #544]	; (8003ed4 <audioTickL+0x320>)
 8003cb2:	462e      	mov	r6, r5
 8003cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb6:	685c      	ldr	r4, [r3, #4]
	for (int v = 0; v < NUM_ENV; v++)
 8003cb8:	4b99      	ldr	r3, [pc, #612]	; (8003f20 <audioTickL+0x36c>)
 8003cba:	eb03 0802 	add.w	r8, r3, r2
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8003cbe:	4640      	mov	r0, r8
	for (int v = 0; v < NUM_ENV; v++)
 8003cc0:	3608      	adds	r6, #8
		float value = tADSRT_tickNoInterp(&envs[v][string]); //used to be noInterp but wanted to check if this sounds better and isn't too slow
 8003cc2:	f011 fbdf 	bl	8015484 <tADSRT_tickNoInterp>
		sourceValues[ENV_SOURCE_OFFSET + v][string] = value;
 8003cc6:	ed86 0a26 	vstr	s0, [r6, #152]	; 0x98
	for (int v = 0; v < NUM_ENV; v++)
 8003cca:	455e      	cmp	r6, fp
 8003ccc:	f108 0808 	add.w	r8, r8, #8
 8003cd0:	d1f5      	bne.n	8003cbe <audioTickL+0x10a>
	timeEnv = DWT->CYCCNT - tempCount1;
 8003cd2:	4a80      	ldr	r2, [pc, #512]	; (8003ed4 <audioTickL+0x320>)
 8003cd4:	4e93      	ldr	r6, [pc, #588]	; (8003f24 <audioTickL+0x370>)
 8003cd6:	6853      	ldr	r3, [r2, #4]
 8003cd8:	1b1c      	subs	r4, r3, r4
 8003cda:	4b93      	ldr	r3, [pc, #588]	; (8003f28 <audioTickL+0x374>)
 8003cdc:	601c      	str	r4, [r3, #0]
	interruptChecker = 0;
 8003cde:	2400      	movs	r4, #0
 8003ce0:	4b8e      	ldr	r3, [pc, #568]	; (8003f1c <audioTickL+0x368>)
 8003ce2:	701c      	strb	r4, [r3, #0]
	uint32_t tempCount1 = DWT->CYCCNT;
 8003ce4:	f8d2 8004 	ldr.w	r8, [r2, #4]
		if (lfoOn[i])
 8003ce8:	f816 3b01 	ldrb.w	r3, [r6], #1
			lfoShapeTick[i](&sample,i, string);
 8003cec:	4621      	mov	r1, r4
 8003cee:	4652      	mov	r2, sl
 8003cf0:	f107 0028 	add.w	r0, r7, #40	; 0x28
		float sample = 0.0f;
 8003cf4:	ed87 9a0a 	vstr	s18, [r7, #40]	; 0x28
		if (lfoOn[i])
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8165 	beq.w	8003fc8 <audioTickL+0x414>
			lfoShapeTick[i](&sample,i, string);
 8003cfe:	4b8b      	ldr	r3, [pc, #556]	; (8003f2c <audioTickL+0x378>)
	for (int i = 0; i < NUM_LFOS; i++)
 8003d00:	3508      	adds	r5, #8
			lfoShapeTick[i](&sample,i, string);
 8003d02:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
	for (int i = 0; i < NUM_LFOS; i++)
 8003d06:	3401      	adds	r4, #1
			lfoShapeTick[i](&sample,i, string);
 8003d08:	4798      	blx	r3
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8003d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
	for (int i = 0; i < NUM_LFOS; i++)
 8003d0c:	2c04      	cmp	r4, #4
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8003d0e:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
	for (int i = 0; i < NUM_LFOS; i++)
 8003d12:	d1e9      	bne.n	8003ce8 <audioTickL+0x134>
	timeLFO = DWT->CYCCNT - tempCount1;
 8003d14:	4b6f      	ldr	r3, [pc, #444]	; (8003ed4 <audioTickL+0x320>)
		oscillator_tick(note[v], v);
 8003d16:	eeb0 0a48 	vmov.f32	s0, s16
	timeLFO = DWT->CYCCNT - tempCount1;
 8003d1a:	4a85      	ldr	r2, [pc, #532]	; (8003f30 <audioTickL+0x37c>)
		oscillator_tick(note[v], v);
 8003d1c:	4650      	mov	r0, sl
	timeLFO = DWT->CYCCNT - tempCount1;
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	eba3 0308 	sub.w	r3, r3, r8
 8003d24:	6013      	str	r3, [r2, #0]
		oscillator_tick(note[v], v);
 8003d26:	f7fd fd0b 	bl	8001740 <oscillator_tick>
		noise_tick(v);
 8003d2a:	4650      	mov	r0, sl
 8003d2c:	f7ff fedc 	bl	8003ae8 <noise_tick>
		for (int i = 0; i < oscToTick; i++)
 8003d30:	4b80      	ldr	r3, [pc, #512]	; (8003f34 <audioTickL+0x380>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	f000 81ac 	beq.w	8004092 <audioTickL+0x4de>
			filterSamps[0] += oscOuts[0][i][v];
 8003d3a:	69fa      	ldr	r2, [r7, #28]
		for (int i = 0; i < oscToTick; i++)
 8003d3c:	2b01      	cmp	r3, #1
			filterSamps[0] += oscOuts[0][i][v];
 8003d3e:	ed92 6a00 	vldr	s12, [r2]
			filterSamps[1] += oscOuts[1][i][v];
 8003d42:	edd2 7a06 	vldr	s15, [r2, #24]
		for (int i = 0; i < oscToTick; i++)
 8003d46:	d011      	beq.n	8003d6c <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
 8003d48:	edd2 6a02 	vldr	s13, [r2, #8]
		for (int i = 0; i < oscToTick; i++)
 8003d4c:	2b02      	cmp	r3, #2
			filterSamps[1] += oscOuts[1][i][v];
 8003d4e:	ed92 7a08 	vldr	s14, [r2, #32]
			filterSamps[0] += oscOuts[0][i][v];
 8003d52:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8003d56:	ee77 7a87 	vadd.f32	s15, s15, s14
		for (int i = 0; i < oscToTick; i++)
 8003d5a:	d007      	beq.n	8003d6c <audioTickL+0x1b8>
			filterSamps[0] += oscOuts[0][i][v];
 8003d5c:	edd2 6a04 	vldr	s13, [r2, #16]
			filterSamps[1] += oscOuts[1][i][v];
 8003d60:	ed92 7a0a 	vldr	s14, [r2, #40]	; 0x28
			filterSamps[0] += oscOuts[0][i][v];
 8003d64:	ee36 6a26 	vadd.f32	s12, s12, s13
			filterSamps[1] += oscOuts[1][i][v];
 8003d68:	ee77 7a87 	vadd.f32	s15, s15, s14
		filterSamps[0] += noiseOuts[0][v];
 8003d6c:	693b      	ldr	r3, [r7, #16]
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003d6e:	eeb0 0a48 	vmov.f32	s0, s16
 8003d72:	4651      	mov	r1, sl
 8003d74:	f107 0028 	add.w	r0, r7, #40	; 0x28
		filterSamps[0] += noiseOuts[0][v];
 8003d78:	ecf3 6a01 	vldmia	r3!, {s13}
		filterSamps[1] += noiseOuts[1][v];
 8003d7c:	ed93 7a01 	vldr	s14, [r3, #4]
		filterSamps[0] += noiseOuts[0][v];
 8003d80:	ee76 6a86 	vadd.f32	s13, s13, s12
 8003d84:	613b      	str	r3, [r7, #16]
		filterSamps[1] += noiseOuts[1][v];
 8003d86:	ee77 7a27 	vadd.f32	s15, s14, s15
		filterSamps[0] += noiseOuts[0][v];
 8003d8a:	edc7 6a0a 	vstr	s13, [r7, #40]	; 0x28
		filterSamps[1] += noiseOuts[1][v];
 8003d8e:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003d92:	f7fd ff21 	bl	8001bd8 <filter_tick>
		if (fxPre)
 8003d96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		sample = filter_tick(&filterSamps[0], note[v], v);
 8003d9a:	eeb0 8a40 	vmov.f32	s16, s0
		if (fxPre)
 8003d9e:	eef4 9ae7 	vcmpe.f32	s19, s15
 8003da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003da6:	dd04      	ble.n	8003db2 <audioTickL+0x1fe>
			sample *= amplitude[v];
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	edd3 7a00 	vldr	s15, [r3]
 8003dae:	ee20 8a27 	vmul.f32	s16, s0, s15
		if (overSampled)
 8003db2:	4b61      	ldr	r3, [pc, #388]	; (8003f38 <audioTickL+0x384>)
 8003db4:	781c      	ldrb	r4, [r3, #0]
		uint32_t tempCount1 = DWT->CYCCNT;
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <audioTickL+0x320>)
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	60fb      	str	r3, [r7, #12]
		if (overSampled)
 8003dbc:	2c00      	cmp	r4, #0
 8003dbe:	f040 810b 	bne.w	8003fd8 <audioTickL+0x424>
			for (int i = 0; i < numEffectToTick; i++)
 8003dc2:	4b5e      	ldr	r3, [pc, #376]	; (8003f3c <audioTickL+0x388>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b32b      	cbz	r3, 8003e14 <audioTickL+0x260>
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003dc8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8003dcc:	f8df 918c 	ldr.w	r9, [pc, #396]	; 8003f5c <audioTickL+0x3a8>
			for (int i = 0; i < numEffectToTick; i++)
 8003dd0:	f8d7 8024 	ldr.w	r8, [r7, #36]	; 0x24
 8003dd4:	4e5a      	ldr	r6, [pc, #360]	; (8003f40 <audioTickL+0x38c>)
 8003dd6:	4d5b      	ldr	r5, [pc, #364]	; (8003f44 <audioTickL+0x390>)
				sample = effectTick[i](sample, i, v); //run the effect
 8003dd8:	eeb0 0a48 	vmov.f32	s0, s16
 8003ddc:	4620      	mov	r0, r4
 8003dde:	f859 3b04 	ldr.w	r3, [r9], #4
 8003de2:	4651      	mov	r1, sl
 8003de4:	4798      	blx	r3
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003de6:	eb06 0308 	add.w	r3, r6, r8
			for (int i = 0; i < numEffectToTick; i++)
 8003dea:	3401      	adds	r4, #1
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003dec:	ed93 7a00 	vldr	s14, [r3]
				sample *= fxPostGain[i][v];
 8003df0:	eb05 0308 	add.w	r3, r5, r8
			for (int i = 0; i < numEffectToTick; i++)
 8003df4:	f108 0808 	add.w	r8, r8, #8
				sample =((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * sample);
 8003df8:	ee67 7a00 	vmul.f32	s15, s14, s0
 8003dfc:	ee3b 7ac7 	vsub.f32	s14, s23, s14
 8003e00:	eee7 7a08 	vfma.f32	s15, s14, s16
				sample *= fxPostGain[i][v];
 8003e04:	ed93 8a00 	vldr	s16, [r3]
			for (int i = 0; i < numEffectToTick; i++)
 8003e08:	4b4c      	ldr	r3, [pc, #304]	; (8003f3c <audioTickL+0x388>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	42a3      	cmp	r3, r4
				sample *= fxPostGain[i][v];
 8003e0e:	ee27 8a88 	vmul.f32	s16, s15, s16
			for (int i = 0; i < numEffectToTick; i++)
 8003e12:	dce1      	bgt.n	8003dd8 <audioTickL+0x224>
		if (!fxPre)
 8003e14:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		uint32_t tempCount2 = DWT->CYCCNT;
 8003e18:	4b2e      	ldr	r3, [pc, #184]	; (8003ed4 <audioTickL+0x320>)
		oversampleCount = tempCount2-tempCount1;
 8003e1a:	68fa      	ldr	r2, [r7, #12]
		uint32_t tempCount2 = DWT->CYCCNT;
 8003e1c:	685b      	ldr	r3, [r3, #4]
		if (!fxPre)
 8003e1e:	eef4 9ae7 	vcmpe.f32	s19, s15
		oversampleCount = tempCount2-tempCount1;
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	4a48      	ldr	r2, [pc, #288]	; (8003f48 <audioTickL+0x394>)
		if (!fxPre)
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		oversampleCount = tempCount2-tempCount1;
 8003e2a:	6013      	str	r3, [r2, #0]
		if (!fxPre)
 8003e2c:	d804      	bhi.n	8003e38 <audioTickL+0x284>
			sample *= amplitude[v];
 8003e2e:	6a3b      	ldr	r3, [r7, #32]
 8003e30:	edd3 7a00 	vldr	s15, [r3]
 8003e34:	ee28 8a27 	vmul.f32	s16, s16, s15
	for (int v = 0; v < numStringsThisBoard; v++)
 8003e38:	6a3b      	ldr	r3, [r7, #32]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
 8003e3a:	eeb0 0a48 	vmov.f32	s0, s16
 8003e3e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
	for (int v = 0; v < numStringsThisBoard; v++)
 8003e40:	f10a 0a01 	add.w	sl, sl, #1
 8003e44:	3304      	adds	r3, #4
 8003e46:	f10b 0b04 	add.w	fp, fp, #4
 8003e4a:	623b      	str	r3, [r7, #32]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	3304      	adds	r3, #4
 8003e50:	61fb      	str	r3, [r7, #28]
		sample = tSVF_tick(&finalLowpass[v], sample) * 0.25f;
 8003e52:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <audioTickL+0x398>)
 8003e54:	1918      	adds	r0, r3, r4
 8003e56:	f011 fe09 	bl	8015a6c <tSVF_tick>
		masterSample += sample;
 8003e5a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003e5e:	eeb0 1a6a 	vmov.f32	s2, s21
 8003e62:	eef0 0a4b 	vmov.f32	s1, s22
		masterSample += sample;
 8003e66:	eee0 8a27 	vfma.f32	s17, s0, s15
		float volIdx = LEAF_clip(47.0f, ((volumeSmoothed * 80.0f) + 47.0f), 127.0f);
 8003e6a:	eeb0 0a4a 	vmov.f32	s0, s20
 8003e6e:	f013 f9ef 	bl	8017250 <LEAF_clip>
 8003e72:	eef0 7a40 	vmov.f32	s15, s0
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8003e76:	4936      	ldr	r1, [pc, #216]	; (8003f50 <audioTickL+0x39c>)
		float omAlpha = 1.0f - alpha;
 8003e78:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003e7c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
		int volIdxInt = (int) volIdx;
 8003e80:	eefd 6ae7 	vcvt.s32.f32	s13, s15
		float omAlpha = 1.0f - alpha;
 8003e84:	ee31 7a67 	vsub.f32	s14, s2, s15
		int volIdxInt = (int) volIdx;
 8003e88:	ee16 2a90 	vmov	r2, s13
		float alpha = volIdx-volIdxInt;
 8003e8c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
 8003e90:	1c53      	adds	r3, r2, #1
		float outVol = volumeAmps128[volIdxInt] * omAlpha;
 8003e92:	eb01 0282 	add.w	r2, r1, r2, lsl #2
		float alpha = volIdx-volIdxInt;
 8003e96:	ee77 7ae6 	vsub.f32	s15, s15, s13
		int volIdxIntPlus = (volIdxInt + 1) & 127;
 8003e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
		float omAlpha = 1.0f - alpha;
 8003e9e:	ee37 7a26 	vadd.f32	s14, s14, s13
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003ea2:	edd2 6a00 	vldr	s13, [r2]
 8003ea6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8003eaa:	edd3 0a00 	vldr	s1, [r3]
		masterSample *= finalMaster[v] ;
 8003eae:	4b29      	ldr	r3, [pc, #164]	; (8003f54 <audioTickL+0x3a0>)
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003eb0:	ee67 7aa0 	vmul.f32	s15, s15, s1
		masterSample *= finalMaster[v] ;
 8003eb4:	4423      	add	r3, r4
		outVol += volumeAmps128[volIdxIntPlus] * alpha;
 8003eb6:	eee6 7a87 	vfma.f32	s15, s13, s14
		masterSample *= finalMaster[v] ;
 8003eba:	edd3 0a00 	vldr	s1, [r3]
	for (int v = 0; v < numStringsThisBoard; v++)
 8003ebe:	1d23      	adds	r3, r4, #4
 8003ec0:	ee68 0aa0 	vmul.f32	s1, s17, s1
 8003ec4:	627b      	str	r3, [r7, #36]	; 0x24
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003ec6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8003eca:	f013 f9c1 	bl	8017250 <LEAF_clip>
 8003ece:	e047      	b.n	8003f60 <audioTickL+0x3ac>
 8003ed0:	200050f8 	.word	0x200050f8
 8003ed4:	e0001000 	.word	0xe0001000
 8003ed8:	20016c48 	.word	0x20016c48
 8003edc:	20005128 	.word	0x20005128
 8003ee0:	2000519c 	.word	0x2000519c
 8003ee4:	20012df8 	.word	0x20012df8
 8003ee8:	20013010 	.word	0x20013010
 8003eec:	20000052 	.word	0x20000052
 8003ef0:	423c0000 	.word	0x423c0000
 8003ef4:	42a00000 	.word	0x42a00000
 8003ef8:	20012f38 	.word	0x20012f38
 8003efc:	00000000 	.word	0x00000000
 8003f00:	20000acc 	.word	0x20000acc
 8003f04:	20005478 	.word	0x20005478
 8003f08:	42fe0000 	.word	0x42fe0000
 8003f0c:	200054a4 	.word	0x200054a4
 8003f10:	20015c3c 	.word	0x20015c3c
 8003f14:	20015c38 	.word	0x20015c38
 8003f18:	20012f70 	.word	0x20012f70
 8003f1c:	20015281 	.word	0x20015281
 8003f20:	20004ff4 	.word	0x20004ff4
 8003f24:	20005220 	.word	0x20005220
 8003f28:	20012f94 	.word	0x20012f94
 8003f2c:	20005284 	.word	0x20005284
 8003f30:	20012fa0 	.word	0x20012fa0
 8003f34:	20000068 	.word	0x20000068
 8003f38:	20000069 	.word	0x20000069
 8003f3c:	20000050 	.word	0x20000050
 8003f40:	2000507c 	.word	0x2000507c
 8003f44:	2000509c 	.word	0x2000509c
 8003f48:	200054d4 	.word	0x200054d4
 8003f4c:	20005044 	.word	0x20005044
 8003f50:	20000514 	.word	0x20000514
 8003f54:	2000504c 	.word	0x2000504c
 8003f58:	20012e18 	.word	0x20012e18
 8003f5c:	20004fe4 	.word	0x20004fe4
	for (int v = 0; v < numStringsThisBoard; v++)
 8003f60:	4b51      	ldr	r3, [pc, #324]	; (80040a8 <audioTickL+0x4f4>)
		masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003f62:	eef0 8a40 	vmov.f32	s17, s0
	for (int v = 0; v < numStringsThisBoard; v++)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	4553      	cmp	r3, sl
 8003f6a:	f73f ae78 	bgt.w	8003c5e <audioTickL+0xaa>
	masterSample = LEAF_clip(-1.0f, masterSample, 1.0f);
 8003f6e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f72:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003f76:	eef0 0a68 	vmov.f32	s1, s17
 8003f7a:	f013 f969 	bl	8017250 <LEAF_clip>
	uint32_t tempCount6 = DWT->CYCCNT;
 8003f7e:	4b4b      	ldr	r3, [pc, #300]	; (80040ac <audioTickL+0x4f8>)
	timeTick = tempCount6-tempCount5;
 8003f80:	68b8      	ldr	r0, [r7, #8]
	if ((timeTick > 10000) && (!interrupted))
 8003f82:	f242 7210 	movw	r2, #10000	; 0x2710
	uint32_t tempCount6 = DWT->CYCCNT;
 8003f86:	685b      	ldr	r3, [r3, #4]
	timeTick = tempCount6-tempCount5;
 8003f88:	4949      	ldr	r1, [pc, #292]	; (80040b0 <audioTickL+0x4fc>)
 8003f8a:	1a1b      	subs	r3, r3, r0
	if ((timeTick > 10000) && (!interrupted))
 8003f8c:	4293      	cmp	r3, r2
	timeTick = tempCount6-tempCount5;
 8003f8e:	600b      	str	r3, [r1, #0]
	if ((timeTick > 10000) && (!interrupted))
 8003f90:	d90b      	bls.n	8003faa <audioTickL+0x3f6>
 8003f92:	4b48      	ldr	r3, [pc, #288]	; (80040b4 <audioTickL+0x500>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	b943      	cbnz	r3, 8003faa <audioTickL+0x3f6>
		if (overSampled)
 8003f98:	4a47      	ldr	r2, [pc, #284]	; (80040b8 <audioTickL+0x504>)
 8003f9a:	7811      	ldrb	r1, [r2, #0]
 8003f9c:	b921      	cbnz	r1, 8003fa8 <audioTickL+0x3f4>
		else if (oscToTick > 1)
 8003f9e:	4a47      	ldr	r2, [pc, #284]	; (80040bc <audioTickL+0x508>)
 8003fa0:	7813      	ldrb	r3, [r2, #0]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d901      	bls.n	8003faa <audioTickL+0x3f6>
			oscToTick--;
 8003fa6:	3b01      	subs	r3, #1
 8003fa8:	7013      	strb	r3, [r2, #0]
	return masterSample * audioMasterLevel * 0.98f;
 8003faa:	4b45      	ldr	r3, [pc, #276]	; (80040c0 <audioTickL+0x50c>)
}
 8003fac:	3734      	adds	r7, #52	; 0x34
	return masterSample * audioMasterLevel * 0.98f;
 8003fae:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80040c4 <audioTickL+0x510>
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8003fba:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	ecbd 8b0a 	vpop	{d8-d12}
 8003fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (int i = 0; i < NUM_LFOS; i++)
 8003fc8:	3401      	adds	r4, #1
		sourceValues[LFO_SOURCE_OFFSET + i][string] = sample;
 8003fca:	ed85 9a30 	vstr	s18, [r5, #192]	; 0xc0
	for (int i = 0; i < NUM_LFOS; i++)
 8003fce:	3508      	adds	r5, #8
 8003fd0:	2c04      	cmp	r4, #4
 8003fd2:	f47f ae89 	bne.w	8003ce8 <audioTickL+0x134>
 8003fd6:	e69d      	b.n	8003d14 <audioTickL+0x160>
			tOversampler_upsample(&os[v], sample, oversamplerArray);
 8003fd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fda:	eeb0 0a48 	vmov.f32	s0, s16
 8003fde:	4b3a      	ldr	r3, [pc, #232]	; (80040c8 <audioTickL+0x514>)
 8003fe0:	493a      	ldr	r1, [pc, #232]	; (80040cc <audioTickL+0x518>)
 8003fe2:	4413      	add	r3, r2
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	ee0c 3a10 	vmov	s24, r3
 8003fea:	f010 fe21 	bl	8014c30 <tOversampler_upsample>
			for (int i = 0; i < numEffectToTick; i++)
 8003fee:	4b38      	ldr	r3, [pc, #224]	; (80040d0 <audioTickL+0x51c>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d055      	beq.n	80040a2 <audioTickL+0x4ee>
 8003ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8003ff8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8003ffc:	4e35      	ldr	r6, [pc, #212]	; (80040d4 <audioTickL+0x520>)
			for (int i = 0; i < numEffectToTick; i++)
 8003ffe:	f04f 0800 	mov.w	r8, #0
 8004002:	4d35      	ldr	r5, [pc, #212]	; (80040d8 <audioTickL+0x524>)
 8004004:	eb06 0903 	add.w	r9, r6, r3
 8004008:	4e34      	ldr	r6, [pc, #208]	; (80040dc <audioTickL+0x528>)
 800400a:	441d      	add	r5, r3
 800400c:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <audioTickL+0x518>)
 800400e:	607b      	str	r3, [r7, #4]
 8004010:	4c2e      	ldr	r4, [pc, #184]	; (80040cc <audioTickL+0x518>)
					float dry = oversamplerArray[j]; //store the dry value to mix later
 8004012:	ed94 8a00 	vldr	s16, [r4]
					oversamplerArray[j] = effectTick[i](oversamplerArray[j], i, v); //run the effect
 8004016:	4651      	mov	r1, sl
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	4640      	mov	r0, r8
 800401c:	eeb0 0a48 	vmov.f32	s0, s16
 8004020:	4798      	blx	r3
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8004022:	ed99 7a00 	vldr	s14, [r9]
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8004026:	edd5 6a00 	vldr	s13, [r5]
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 800402a:	ee60 7a07 	vmul.f32	s15, s0, s14
				for (int j = 0; j < OVERSAMPLE; j++)
 800402e:	4b2c      	ldr	r3, [pc, #176]	; (80040e0 <audioTickL+0x52c>)
					oversamplerArray[j] = ((1.0f - fxMix[i][v]) * dry) + (fxMix[i][v] * oversamplerArray[j]); //mix in dry/wet at the "mix" amount
 8004030:	ee3b 7ac7 	vsub.f32	s14, s23, s14
 8004034:	eee7 7a08 	vfma.f32	s15, s14, s16
					oversamplerArray[j] *= fxPostGain[i][v]; //apply postgain
 8004038:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800403c:	ece4 7a01 	vstmia	r4!, {s15}
				for (int j = 0; j < OVERSAMPLE; j++)
 8004040:	42a3      	cmp	r3, r4
 8004042:	d1e6      	bne.n	8004012 <audioTickL+0x45e>
			for (int i = 0; i < numEffectToTick; i++)
 8004044:	4b22      	ldr	r3, [pc, #136]	; (80040d0 <audioTickL+0x51c>)
 8004046:	f108 0801 	add.w	r8, r8, #1
 800404a:	3604      	adds	r6, #4
 800404c:	f109 0908 	add.w	r9, r9, #8
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	3508      	adds	r5, #8
 8004054:	4543      	cmp	r3, r8
 8004056:	dcdb      	bgt.n	8004010 <audioTickL+0x45c>
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8004058:	687c      	ldr	r4, [r7, #4]
 800405a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800405e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8004062:	edd4 0a00 	vldr	s1, [r4]
 8004066:	f013 f8f3 	bl	8017250 <LEAF_clip>
 800406a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800406e:	edd4 0a01 	vldr	s1, [r4, #4]
 8004072:	ed84 0a00 	vstr	s0, [r4]
 8004076:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800407a:	f013 f8e9 	bl	8017250 <LEAF_clip>
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 800407e:	ee1c 0a10 	vmov	r0, s24
 8004082:	4912      	ldr	r1, [pc, #72]	; (80040cc <audioTickL+0x518>)
				oversamplerArray[i] = LEAF_clip(-1.0f, oversamplerArray[i], 1.0f);
 8004084:	ed84 0a01 	vstr	s0, [r4, #4]
			sample = tOversampler_downsample(&os[v], oversamplerArray);
 8004088:	f010 fe3a 	bl	8014d00 <tOversampler_downsample>
 800408c:	eeb0 8a40 	vmov.f32	s16, s0
 8004090:	e6c0      	b.n	8003e14 <audioTickL+0x260>
		for (int i = 0; i < oscToTick; i++)
 8004092:	eddf 7a14 	vldr	s15, [pc, #80]	; 80040e4 <audioTickL+0x530>
 8004096:	eeb0 6a67 	vmov.f32	s12, s15
 800409a:	e667      	b.n	8003d6c <audioTickL+0x1b8>
	float masterSample = 0.0f;
 800409c:	eddf 8a11 	vldr	s17, [pc, #68]	; 80040e4 <audioTickL+0x530>
 80040a0:	e765      	b.n	8003f6e <audioTickL+0x3ba>
 80040a2:	4b0a      	ldr	r3, [pc, #40]	; (80040cc <audioTickL+0x518>)
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	e7d7      	b.n	8004058 <audioTickL+0x4a4>
 80040a8:	20000052 	.word	0x20000052
 80040ac:	e0001000 	.word	0xe0001000
 80040b0:	20012fb0 	.word	0x20012fb0
 80040b4:	200050f8 	.word	0x200050f8
 80040b8:	20000069 	.word	0x20000069
 80040bc:	20000068 	.word	0x20000068
 80040c0:	2000071c 	.word	0x2000071c
 80040c4:	3f7ae148 	.word	0x3f7ae148
 80040c8:	2000549c 	.word	0x2000549c
 80040cc:	200054d8 	.word	0x200054d8
 80040d0:	20000050 	.word	0x20000050
 80040d4:	2000507c 	.word	0x2000507c
 80040d8:	2000509c 	.word	0x2000509c
 80040dc:	20004fe4 	.word	0x20004fe4
 80040e0:	200054e0 	.word	0x200054e0
 80040e4:	00000000 	.word	0x00000000

080040e8 <audioFrame>:
{
 80040e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tempCountFrame = DWT->CYCCNT;
 80040ec:	49be      	ldr	r1, [pc, #760]	; (80043e8 <audioFrame+0x300>)
	if (newBar)
 80040ee:	f8df a370 	ldr.w	sl, [pc, #880]	; 8004460 <audioFrame+0x378>
{
 80040f2:	ed2d 8b10 	vpush	{d8-d15}
 80040f6:	b08d      	sub	sp, #52	; 0x34
	if (newBar)
 80040f8:	f8da 2000 	ldr.w	r2, [sl]
{
 80040fc:	9007      	str	r0, [sp, #28]
	uint32_t tempCountFrame = DWT->CYCCNT;
 80040fe:	684b      	ldr	r3, [r1, #4]
 8004100:	9306      	str	r3, [sp, #24]
	if (newBar)
 8004102:	2a00      	cmp	r2, #0
 8004104:	f000 8096 	beq.w	8004234 <audioFrame+0x14c>
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 8004108:	4ab8      	ldr	r2, [pc, #736]	; (80043ec <audioFrame+0x304>)
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 800410a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800410e:	49b8      	ldr	r1, [pc, #736]	; (80043f0 <audioFrame+0x308>)
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 8004110:	ed92 7a03 	vldr	s14, [r2, #12]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 8004114:	ed92 6a02 	vldr	s12, [r2, #8]
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8004118:	edd2 6a01 	vldr	s13, [r2, #4]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800411c:	edd2 7a04 	vldr	s15, [r2, #16]
 8004120:	ee77 2a46 	vsub.f32	s5, s14, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8004124:	edd2 5a00 	vldr	s11, [r2]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004128:	ee36 3a66 	vsub.f32	s6, s12, s13
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 800412c:	680a      	ldr	r2, [r1, #0]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800412e:	ee37 5ac7 	vsub.f32	s10, s15, s14
 8004132:	ee36 4ae5 	vsub.f32	s8, s13, s11
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8004136:	4282      	cmp	r2, r0
 8004138:	d00c      	beq.n	8004154 <audioFrame+0x6c>
 800413a:	ee07 2a90 	vmov	s15, r2
 800413e:	4aad      	ldr	r2, [pc, #692]	; (80043f4 <audioFrame+0x30c>)
 8004140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004144:	edd2 4a00 	vldr	s9, [r2]
 8004148:	eef4 4ae7 	vcmpe.f32	s9, s15
 800414c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004150:	f140 8194 	bpl.w	800447c <audioFrame+0x394>
				stringMappedPositions[j] = 1.0f;
 8004154:	f8df b30c 	ldr.w	fp, [pc, #780]	; 8004464 <audioFrame+0x37c>
 8004158:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800415c:	f8cb 2000 	str.w	r2, [fp]
			if ((stringPositions[j] == 65535) || (stringPositions[j] > fretMeasurements[0][j]))
 8004160:	684a      	ldr	r2, [r1, #4]
 8004162:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004166:	428a      	cmp	r2, r1
 8004168:	d00c      	beq.n	8004184 <audioFrame+0x9c>
 800416a:	ee07 2a90 	vmov	s15, r2
 800416e:	4aa1      	ldr	r2, [pc, #644]	; (80043f4 <audioFrame+0x30c>)
 8004170:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004174:	edd2 4a01 	vldr	s9, [r2, #4]
 8004178:	eef4 7ae4 	vcmpe.f32	s15, s9
 800417c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004180:	f340 811e 	ble.w	80043c0 <audioFrame+0x2d8>
				stringMappedPositions[j] = 1.0f;
 8004184:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004188:	f8cb 2004 	str.w	r2, [fp, #4]
		for (int i = 0; i < numStringsThisBoard; i++)
 800418c:	4b9a      	ldr	r3, [pc, #616]	; (80043f8 <audioFrame+0x310>)
 800418e:	781a      	ldrb	r2, [r3, #0]
 8004190:	9305      	str	r3, [sp, #20]
 8004192:	2a00      	cmp	r2, #0
 8004194:	d04b      	beq.n	800422e <audioFrame+0x146>
 8004196:	2400      	movs	r4, #0
 8004198:	4f98      	ldr	r7, [pc, #608]	; (80043fc <audioFrame+0x314>)
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 800419a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 800419e:	eddf 8a98 	vldr	s17, [pc, #608]	; 8004400 <audioFrame+0x318>
 80041a2:	4623      	mov	r3, r4
 80041a4:	4e97      	ldr	r6, [pc, #604]	; (8004404 <audioFrame+0x31c>)
 80041a6:	463c      	mov	r4, r7
 80041a8:	4d97      	ldr	r5, [pc, #604]	; (8004408 <audioFrame+0x320>)
 80041aa:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 8004468 <audioFrame+0x380>
 80041ae:	461f      	mov	r7, r3
 80041b0:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 800446c <audioFrame+0x384>
			if (dualSlider)
 80041b4:	f8d9 3000 	ldr.w	r3, [r9]
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80041b8:	ed9b 0a00 	vldr	s0, [fp]
			if (dualSlider)
 80041bc:	b1c3      	cbz	r3, 80041f0 <audioFrame+0x108>
				if ((stringMappedPositions[0] == 1.0f) && (stringMappedPositions[1] < 1.0f))
 80041be:	eeb4 0a48 	vcmp.f32	s0, s16
 80041c2:	eddb 0a01 	vldr	s1, [fp, #4]
 80041c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041ca:	f040 80e8 	bne.w	800439e <audioFrame+0x2b6>
 80041ce:	eef4 0ac8 	vcmpe.f32	s1, s16
 80041d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d6:	f100 816e 	bmi.w	80044b6 <audioFrame+0x3ce>
				myMappedPos = LEAF_interpolation_linear(stringMappedPositions[0], stringMappedPositions[1], ((float)(i+firstString)) * .1f);// * 0.090909090909091f);
 80041da:	4b8c      	ldr	r3, [pc, #560]	; (800440c <audioFrame+0x324>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	443b      	add	r3, r7
 80041e0:	ee07 3a90 	vmov	s15, r3
 80041e4:	eeb8 1ae7 	vcvt.f32.s32	s2, s15
 80041e8:	ee21 1a28 	vmul.f32	s2, s2, s17
 80041ec:	f013 f93c 	bl	8017468 <LEAF_interpolation_linear>
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 80041f0:	4620      	mov	r0, r4
		for (int i = 0; i < numStringsThisBoard; i++)
 80041f2:	3701      	adds	r7, #1
			myMappedPos = tSlide_tick(&freqSlider[i], myMappedPos);
 80041f4:	f011 fa9e 	bl	8015734 <tSlide_tick>
			invMapping[i] = (1.0f / myMappedPos);
 80041f8:	ee88 7a00 	vdiv.f32	s14, s16, s0
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 80041fc:	edd8 6a00 	vldr	s13, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004200:	3404      	adds	r4, #4
 8004202:	9b05      	ldr	r3, [sp, #20]
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 8004204:	4982      	ldr	r1, [pc, #520]	; (8004410 <audioFrame+0x328>)
		for (int i = 0; i < numStringsThisBoard; i++)
 8004206:	781a      	ldrb	r2, [r3, #0]
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8004208:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		for (int i = 0; i < numStringsThisBoard; i++)
 800420c:	42ba      	cmp	r2, r7
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 800420e:	ee37 6a48 	vsub.f32	s12, s14, s16
			invMapping[i] = (1.0f / myMappedPos);
 8004212:	eca6 7a01 	vstmia	r6!, {s14}
			int barTableIndex = (int)(((invMapping[i] - 1.0f) * midiTableMappingScalar) + 0.5f);
 8004216:	eee6 7a26 	vfma.f32	s15, s12, s13
 800421a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800421e:	ee17 3a90 	vmov	r3, s15
			barInMIDI[i] = mappingToMIDITable[barTableIndex];
 8004222:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f845 3b04 	str.w	r3, [r5], #4
		for (int i = 0; i < numStringsThisBoard; i++)
 800422c:	dcc2      	bgt.n	80041b4 <audioFrame+0xcc>
		newBar = 0;
 800422e:	2200      	movs	r2, #0
 8004230:	f8ca 2000 	str.w	r2, [sl]
	if (newPluck)
 8004234:	4e77      	ldr	r6, [pc, #476]	; (8004414 <audioFrame+0x32c>)
 8004236:	6833      	ldr	r3, [r6, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d044      	beq.n	80042c6 <audioFrame+0x1de>
		for (int i = 0; i < numStringsThisBoard; i++)
 800423c:	4b6e      	ldr	r3, [pc, #440]	; (80043f8 <audioFrame+0x310>)
 800423e:	781a      	ldrb	r2, [r3, #0]
 8004240:	9305      	str	r3, [sp, #20]
 8004242:	2a00      	cmp	r2, #0
 8004244:	d03f      	beq.n	80042c6 <audioFrame+0x1de>
 8004246:	4b74      	ldr	r3, [pc, #464]	; (8004418 <audioFrame+0x330>)
 8004248:	f04f 0b00 	mov.w	fp, #0
 800424c:	f8df 9220 	ldr.w	r9, [pc, #544]	; 8004470 <audioFrame+0x388>
 8004250:	9302      	str	r3, [sp, #8]
 8004252:	4b72      	ldr	r3, [pc, #456]	; (800441c <audioFrame+0x334>)
					tLivingString2_setDecay(&strings[i], 0.2f);
 8004254:	ed9f ba72 	vldr	s22, [pc, #456]	; 8004420 <audioFrame+0x338>
 8004258:	9301      	str	r3, [sp, #4]
				float amplitz = stringInputs[i] * 0.000025f;
 800425a:	ed9f ca72 	vldr	s24, [pc, #456]	; 8004424 <audioFrame+0x33c>
 800425e:	4b72      	ldr	r3, [pc, #456]	; (8004428 <audioFrame+0x340>)
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004260:	eddf aa72 	vldr	s21, [pc, #456]	; 800442c <audioFrame+0x344>
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8004264:	eddf ba72 	vldr	s23, [pc, #456]	; 8004430 <audioFrame+0x348>
 8004268:	f8df a208 	ldr.w	sl, [pc, #520]	; 8004474 <audioFrame+0x38c>
 800426c:	f8df 8208 	ldr.w	r8, [pc, #520]	; 8004478 <audioFrame+0x390>
 8004270:	4f70      	ldr	r7, [pc, #448]	; (8004434 <audioFrame+0x34c>)
					tLivingString2_setTargetLev(&strings[i], 0.0f);
 8004272:	eddf 9a71 	vldr	s19, [pc, #452]	; 8004438 <audioFrame+0x350>
 8004276:	9304      	str	r3, [sp, #16]
 8004278:	f8cd 900c 	str.w	r9, [sp, #12]
			if ((previousStringInputs[i] == 0) && (stringInputs[i] > 0))
 800427c:	f85a 9b04 	ldr.w	r9, [sl], #4
 8004280:	f8d8 4000 	ldr.w	r4, [r8]
 8004284:	f1b9 0f00 	cmp.w	r9, #0
 8004288:	d15c      	bne.n	8004344 <audioFrame+0x25c>
 800428a:	2c00      	cmp	r4, #0
 800428c:	f040 817f 	bne.w	800458e <audioFrame+0x4a6>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	f10b 0b01 	add.w	fp, fp, #1
 8004296:	f108 0804 	add.w	r8, r8, #4
 800429a:	3704      	adds	r7, #4
 800429c:	3304      	adds	r3, #4
 800429e:	455a      	cmp	r2, fp
			previousStringInputs[i] = stringInputs[i];
 80042a0:	f84a 4c04 	str.w	r4, [sl, #-4]
		for (int i = 0; i < numStringsThisBoard; i++)
 80042a4:	9303      	str	r3, [sp, #12]
 80042a6:	9b02      	ldr	r3, [sp, #8]
 80042a8:	f103 0304 	add.w	r3, r3, #4
 80042ac:	9302      	str	r3, [sp, #8]
 80042ae:	9b01      	ldr	r3, [sp, #4]
 80042b0:	f103 0304 	add.w	r3, r3, #4
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	9b04      	ldr	r3, [sp, #16]
 80042b8:	f103 0348 	add.w	r3, r3, #72	; 0x48
 80042bc:	9304      	str	r3, [sp, #16]
			newPluck = 0;
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	6033      	str	r3, [r6, #0]
		for (int i = 0; i < numStringsThisBoard; i++)
 80042c4:	dcda      	bgt.n	800427c <audioFrame+0x194>
	if ((codecReady)&&(presetReady))
 80042c6:	4b5d      	ldr	r3, [pc, #372]	; (800443c <audioFrame+0x354>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	b323      	cbz	r3, 8004316 <audioFrame+0x22e>
 80042cc:	4b5c      	ldr	r3, [pc, #368]	; (8004440 <audioFrame+0x358>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	b30b      	cbz	r3, 8004316 <audioFrame+0x22e>
		if (currentActivePreset == 63)
 80042d2:	4b5c      	ldr	r3, [pc, #368]	; (8004444 <audioFrame+0x35c>)
 80042d4:	781b      	ldrb	r3, [r3, #0]
 80042d6:	2b3f      	cmp	r3, #63	; 0x3f
 80042d8:	f000 80f2 	beq.w	80044c0 <audioFrame+0x3d8>
		else if (currentActivePreset == 62)
 80042dc:	2b3e      	cmp	r3, #62	; 0x3e
 80042de:	f000 81d3 	beq.w	8004688 <audioFrame+0x5a0>
		else if (currentActivePreset == 61)
 80042e2:	2b3d      	cmp	r3, #61	; 0x3d
 80042e4:	f000 821b 	beq.w	800471e <audioFrame+0x636>
 80042e8:	4c57      	ldr	r4, [pc, #348]	; (8004448 <audioFrame+0x360>)
 80042ea:	9b07      	ldr	r3, [sp, #28]
 80042ec:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 80042f0:	ed9f 8a56 	vldr	s16, [pc, #344]	; 800444c <audioFrame+0x364>
 80042f4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80042f8:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80042fc:	f7ff fc5a 	bl	8003bb4 <audioTickL>
 8004300:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8004304:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 8004306:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 800430a:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickL() * TWO_TO_23);
 800430c:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 8004310:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 8004314:	d1f2      	bne.n	80042fc <audioFrame+0x214>
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8004316:	484e      	ldr	r0, [pc, #312]	; (8004450 <audioFrame+0x368>)
	timeFrame = DWT->CYCCNT - tempCountFrame;
 8004318:	4b33      	ldr	r3, [pc, #204]	; (80043e8 <audioFrame+0x300>)
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800431a:	ed90 7a00 	vldr	s14, [r0]
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	9806      	ldr	r0, [sp, #24]
 8004322:	494c      	ldr	r1, [pc, #304]	; (8004454 <audioFrame+0x36c>)
 8004324:	1a1b      	subs	r3, r3, r0
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 8004326:	4a4c      	ldr	r2, [pc, #304]	; (8004458 <audioFrame+0x370>)
 8004328:	ee07 3a90 	vmov	s15, r3
	timeFrame = DWT->CYCCNT - tempCountFrame;
 800432c:	600b      	str	r3, [r1, #0]
	frameLoadPercentage = (float)timeFrame * frameLoadMultiplier;
 800432e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004332:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004336:	edc2 7a00 	vstr	s15, [r2]
}
 800433a:	b00d      	add	sp, #52	; 0x34
 800433c:	ecbd 8b10 	vpop	{d8-d15}
 8004340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			else if ((previousStringInputs[i] > 0) && (stringInputs[i] == 0))
 8004344:	dda4      	ble.n	8004290 <audioFrame+0x1a8>
 8004346:	2c00      	cmp	r4, #0
 8004348:	d1a2      	bne.n	8004290 <audioFrame+0x1a8>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800434a:	4622      	mov	r2, r4
 800434c:	2110      	movs	r1, #16
 800434e:	4843      	ldr	r0, [pc, #268]	; (800445c <audioFrame+0x374>)
 8004350:	f006 fc16 	bl	800ab80 <HAL_GPIO_WritePin>
					tADSRT_off(&envs[v][i]);
 8004354:	4638      	mov	r0, r7
 8004356:	f010 ff37 	bl	80151c8 <tADSRT_off>
 800435a:	f107 0008 	add.w	r0, r7, #8
 800435e:	f010 ff33 	bl	80151c8 <tADSRT_off>
 8004362:	f107 0010 	add.w	r0, r7, #16
 8004366:	f010 ff2f 	bl	80151c8 <tADSRT_off>
 800436a:	f107 0018 	add.w	r0, r7, #24
 800436e:	f010 ff2b 	bl	80151c8 <tADSRT_off>
				if (currentActivePreset == 63)
 8004372:	4b34      	ldr	r3, [pc, #208]	; (8004444 <audioFrame+0x35c>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b3f      	cmp	r3, #63	; 0x3f
 8004378:	f000 81fe 	beq.w	8004778 <audioFrame+0x690>
				else if (currentActivePreset == 62)
 800437c:	2b3e      	cmp	r3, #62	; 0x3e
 800437e:	f000 81b5 	beq.w	80046ec <audioFrame+0x604>
				else if (currentActivePreset == 61)
 8004382:	2b3d      	cmp	r3, #61	; 0x3d
 8004384:	f040 817b 	bne.w	800467e <audioFrame+0x596>
 8004388:	9b04      	ldr	r3, [sp, #16]
 800438a:	461d      	mov	r5, r3
 800438c:	f103 042c 	add.w	r4, r3, #44	; 0x2c
						tADSRT_off(&additiveEnv[i][j]);
 8004390:	4628      	mov	r0, r5
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004392:	3504      	adds	r5, #4
						tADSRT_off(&additiveEnv[i][j]);
 8004394:	f010 ff18 	bl	80151c8 <tADSRT_off>
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004398:	42ac      	cmp	r4, r5
 800439a:	d1f9      	bne.n	8004390 <audioFrame+0x2a8>
 800439c:	e16f      	b.n	800467e <audioFrame+0x596>
				else if ((stringMappedPositions[1] == 1.0f) && (stringMappedPositions[0] < 1.0f))
 800439e:	eef4 0a48 	vcmp.f32	s1, s16
 80043a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a6:	f47f af18 	bne.w	80041da <audioFrame+0xf2>
 80043aa:	eeb4 0a48 	vcmp.f32	s0, s16
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	f57f af12 	bpl.w	80041da <audioFrame+0xf2>
					stringMappedPositions[1] = stringMappedPositions[0];
 80043b6:	eef0 0a40 	vmov.f32	s1, s0
 80043ba:	ed8b 0a01 	vstr	s0, [fp, #4]
 80043be:	e70c      	b.n	80041da <audioFrame+0xf2>
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 80043c0:	edd2 3a03 	vldr	s7, [r2, #12]
 80043c4:	eef4 7ae3 	vcmpe.f32	s15, s7
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	f2c0 80a9 	blt.w	8004522 <audioFrame+0x43a>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80043d0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80043d4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80043d8:	ee87 7aa4 	vdiv.f32	s14, s15, s9
 80043dc:	eee4 5a07 	vfma.f32	s11, s8, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 80043e0:	edcb 5a01 	vstr	s11, [fp, #4]
 80043e4:	e6d2      	b.n	800418c <audioFrame+0xa4>
 80043e6:	bf00      	nop
 80043e8:	e0001000 	.word	0xe0001000
 80043ec:	20000034 	.word	0x20000034
 80043f0:	20012f78 	.word	0x20012f78
 80043f4:	2000000c 	.word	0x2000000c
 80043f8:	20000052 	.word	0x20000052
 80043fc:	20005074 	.word	0x20005074
 8004400:	3dcccccd 	.word	0x3dcccccd
 8004404:	2000511c 	.word	0x2000511c
 8004408:	20000ae4 	.word	0x20000ae4
 800440c:	20005054 	.word	0x20005054
 8004410:	24000000 	.word	0x24000000
 8004414:	20005464 	.word	0x20005464
 8004418:	20012e88 	.word	0x20012e88
 800441c:	20016af8 	.word	0x20016af8
 8004420:	3e4ccccd 	.word	0x3e4ccccd
 8004424:	37d1b717 	.word	0x37d1b717
 8004428:	20000a3c 	.word	0x20000a3c
 800442c:	3ffeb852 	.word	0x3ffeb852
 8004430:	44fa0000 	.word	0x44fa0000
 8004434:	20004ff4 	.word	0x20004ff4
 8004438:	00000000 	.word	0x00000000
 800443c:	20000b2c 	.word	0x20000b2c
 8004440:	200055c0 	.word	0x200055c0
 8004444:	200130c8 	.word	0x200130c8
 8004448:	30000000 	.word	0x30000000
 800444c:	4b000000 	.word	0x4b000000
 8004450:	20000008 	.word	0x20000008
 8004454:	20012f9c 	.word	0x20012f9c
 8004458:	20005058 	.word	0x20005058
 800445c:	58020400 	.word	0x58020400
 8004460:	2000545c 	.word	0x2000545c
 8004464:	20012f40 	.word	0x20012f40
 8004468:	20004fdc 	.word	0x20004fdc
 800446c:	2000004c 	.word	0x2000004c
 8004470:	20012f88 	.word	0x20012f88
 8004474:	200055d0 	.word	0x200055d0
 8004478:	20012f08 	.word	0x20012f08
			else if ((stringPositions[j] >= fretMeasurements[1][j]) && (stringPositions[j] <= fretMeasurements[0][j]))
 800447c:	edd2 3a02 	vldr	s7, [r2, #8]
 8004480:	eef4 3ae7 	vcmpe.f32	s7, s15
 8004484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004488:	d972      	bls.n	8004570 <audioFrame+0x488>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 800448a:	ed92 2a04 	vldr	s4, [r2, #16]
 800448e:	eeb4 2ae7 	vcmpe.f32	s4, s15
 8004492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004496:	d82b      	bhi.n	80044f0 <audioFrame+0x408>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004498:	ee77 7ae3 	vsub.f32	s15, s15, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 800449c:	f8df b394 	ldr.w	fp, [pc, #916]	; 8004834 <audioFrame+0x74c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80044a0:	ee72 4a63 	vsub.f32	s9, s4, s7
 80044a4:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 80044a8:	eef0 7a66 	vmov.f32	s15, s13
 80044ac:	eee3 7a23 	vfma.f32	s15, s6, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 80044b0:	edcb 7a00 	vstr	s15, [fp]
 80044b4:	e654      	b.n	8004160 <audioFrame+0x78>
					stringMappedPositions[0] = stringMappedPositions[1];
 80044b6:	eeb0 0a60 	vmov.f32	s0, s1
 80044ba:	edcb 0a00 	vstr	s1, [fp]
 80044be:	e68c      	b.n	80041da <audioFrame+0xf2>
 80044c0:	4cc5      	ldr	r4, [pc, #788]	; (80047d8 <audioFrame+0x6f0>)
 80044c2:	9b07      	ldr	r3, [sp, #28]
 80044c4:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 80044c8:	ed9f 8ac4 	vldr	s16, [pc, #784]	; 80047dc <audioFrame+0x6f4>
 80044cc:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80044d0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80044d4:	f7fe f87a 	bl	80025cc <audioTickString>
 80044d8:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80044dc:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 80044de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80044e2:	42ac      	cmp	r4, r5
				current_sample = (int32_t)(audioTickString() * TWO_TO_23);
 80044e4:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 80044e8:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80044ec:	d1f2      	bne.n	80044d4 <audioFrame+0x3ec>
 80044ee:	e712      	b.n	8004316 <audioFrame+0x22e>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
 80044f0:	edd2 4a06 	vldr	s9, [r2, #24]
 80044f4:	eef4 4ae7 	vcmpe.f32	s9, s15
 80044f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fc:	f240 80e7 	bls.w	80046ce <audioFrame+0x5e6>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004500:	edd2 3a08 	vldr	s7, [r2, #32]
 8004504:	ee77 7ae4 	vsub.f32	s15, s15, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 8004508:	f8df b328 	ldr.w	fp, [pc, #808]	; 8004834 <audioFrame+0x74c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800450c:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8004510:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 8004514:	eef0 7a47 	vmov.f32	s15, s14
 8004518:	eee5 7a23 	vfma.f32	s15, s10, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 800451c:	edcb 7a00 	vstr	s15, [fp]
 8004520:	e61e      	b.n	8004160 <audioFrame+0x78>
			else if ((stringPositions[j] >= fretMeasurements[2][j]) && (stringPositions[j] < fretMeasurements[1][j]))
 8004522:	edd2 5a05 	vldr	s11, [r2, #20]
 8004526:	eef4 7ae5 	vcmpe.f32	s15, s11
 800452a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452e:	db0a      	blt.n	8004546 <audioFrame+0x45e>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004530:	ee77 7ae3 	vsub.f32	s15, s15, s7
 8004534:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8004538:	ee87 7aa5 	vdiv.f32	s14, s15, s11
 800453c:	eee3 6a07 	vfma.f32	s13, s6, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[1][j], fretMeasurements[2][j], fretScaling[1], fretScaling[2]);
 8004540:	edcb 6a01 	vstr	s13, [fp, #4]
 8004544:	e622      	b.n	800418c <audioFrame+0xa4>
			else if ((stringPositions[j] >= fretMeasurements[3][j]) && (stringPositions[j] <= fretMeasurements[2][j]))
 8004546:	edd2 6a07 	vldr	s13, [r2, #28]
 800454a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800454e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004552:	f280 80b1 	bge.w	80046b8 <audioFrame+0x5d0>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004556:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
 800455a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800455e:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004562:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8004566:	eea5 7a06 	vfma.f32	s14, s10, s12
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[3][j], fretMeasurements[4][j], fretScaling[3], fretScaling[4]);
 800456a:	ed8b 7a01 	vstr	s14, [fp, #4]
 800456e:	e60d      	b.n	800418c <audioFrame+0xa4>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004570:	ee77 7ae4 	vsub.f32	s15, s15, s9
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8004574:	f8df b2bc 	ldr.w	fp, [pc, #700]	; 8004834 <audioFrame+0x74c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004578:	ee73 4ae4 	vsub.f32	s9, s7, s9
 800457c:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 8004580:	eef0 7a65 	vmov.f32	s15, s11
 8004584:	eee4 7a23 	vfma.f32	s15, s8, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[0][j], fretMeasurements[1][j], fretScaling[0], fretScaling[1]);
 8004588:	edcb 7a00 	vstr	s15, [fp]
 800458c:	e5e8      	b.n	8004160 <audioFrame+0x78>
				float amplitz = stringInputs[i] * 0.000025f;
 800458e:	ee07 4a90 	vmov	s15, r4
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 8004592:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004596:	eeb0 0a69 	vmov.f32	s0, s19
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 800459a:	463d      	mov	r5, r7
				float amplitz = stringInputs[i] * 0.000025f;
 800459c:	eef8 0a67 	vcvt.f32.u32	s1, s15
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80045a0:	ee60 0a8c 	vmul.f32	s1, s1, s24
 80045a4:	f012 fe54 	bl	8017250 <LEAF_clip>
				stringOctave[i] = octave;
 80045a8:	4b8d      	ldr	r3, [pc, #564]	; (80047e0 <audioFrame+0x6f8>)
 80045aa:	4a8e      	ldr	r2, [pc, #568]	; (80047e4 <audioFrame+0x6fc>)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80045ac:	2110      	movs	r1, #16
				stringOctave[i] = octave;
 80045ae:	eb03 038b 	add.w	r3, r3, fp, lsl #2
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80045b2:	488d      	ldr	r0, [pc, #564]	; (80047e8 <audioFrame+0x700>)
				stringOctave[i] = octave;
 80045b4:	6812      	ldr	r2, [r2, #0]
				amplitz = LEAF_clip(0.0, amplitz, 1.0f);
 80045b6:	eeb0 aa40 	vmov.f32	s20, s0
				stringOctave[i] = octave;
 80045ba:	601a      	str	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80045bc:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80045c0:	2201      	movs	r2, #1
 80045c2:	9309      	str	r3, [sp, #36]	; 0x24
 80045c4:	9b01      	ldr	r3, [sp, #4]
 80045c6:	f5a3 7413 	sub.w	r4, r3, #588	; 0x24c
 80045ca:	3354      	adds	r3, #84	; 0x54
 80045cc:	9308      	str	r3, [sp, #32]
 80045ce:	f006 fad7 	bl	800ab80 <HAL_GPIO_WritePin>
					if (useVelocity == 0) envVel = 1.f;
 80045d2:	edd4 7a00 	vldr	s15, [r4]
				    tADSRT_on(&envs[v][i], envVel);
 80045d6:	4628      	mov	r0, r5
 80045d8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
				for (int v = 0; v < NUM_ENV; v++)
 80045dc:	34a8      	adds	r4, #168	; 0xa8
					if (useVelocity == 0) envVel = 1.f;
 80045de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				    tADSRT_on(&envs[v][i], envVel);
 80045e6:	bf0c      	ite	eq
 80045e8:	4628      	moveq	r0, r5
 80045ea:	eeb0 0a4a 	vmovne.f32	s0, s20
 80045ee:	f010 fdd9 	bl	80151a4 <tADSRT_on>
				    voiceSounding = 1;
 80045f2:	4b7e      	ldr	r3, [pc, #504]	; (80047ec <audioFrame+0x704>)
 80045f4:	f04f 0201 	mov.w	r2, #1
				for (int v = 0; v < NUM_ENV; v++)
 80045f8:	3508      	adds	r5, #8
				    voiceSounding = 1;
 80045fa:	701a      	strb	r2, [r3, #0]
				for (int v = 0; v < NUM_ENV; v++)
 80045fc:	9b08      	ldr	r3, [sp, #32]
 80045fe:	429c      	cmp	r4, r3
 8004600:	d1e7      	bne.n	80045d2 <audioFrame+0x4ea>
 8004602:	ebcb 738b 	rsb	r3, fp, fp, lsl #30
					if (noteOnSync > 0.5f)
 8004606:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
				for (int v = 0; v < NUM_LFOS; v++)
 800460a:	9708      	str	r7, [sp, #32]
 800460c:	2400      	movs	r4, #0
 800460e:	009b      	lsls	r3, r3, #2
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8004610:	9d01      	ldr	r5, [sp, #4]
 8004612:	330c      	adds	r3, #12
				for (int v = 0; v < NUM_LFOS; v++)
 8004614:	461f      	mov	r7, r3
					if (noteOnSync > 0.5f)
 8004616:	edd5 7a0e 	vldr	s15, [r5, #56]	; 0x38
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 800461a:	4620      	mov	r0, r4
 800461c:	4659      	mov	r1, fp
				for (int v = 0; v < NUM_LFOS; v++)
 800461e:	3401      	adds	r4, #1
					if (noteOnSync > 0.5f)
 8004620:	eef4 7ac8 	vcmpe.f32	s15, s16
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	dd03      	ble.n	8004632 <audioFrame+0x54a>
						lfoParams[LFOPhase].setParam(lfoParams[LFOPhase].realVal[i], v, i);
 800462a:	ed95 0a00 	vldr	s0, [r5]
 800462e:	59ea      	ldr	r2, [r5, r7]
 8004630:	4790      	blx	r2
				for (int v = 0; v < NUM_LFOS; v++)
 8004632:	2c04      	cmp	r4, #4
 8004634:	f105 058c 	add.w	r5, r5, #140	; 0x8c
 8004638:	d1ed      	bne.n	8004616 <audioFrame+0x52e>
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 800463a:	496d      	ldr	r1, [pc, #436]	; (80047f0 <audioFrame+0x708>)
 800463c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004640:	4a6c      	ldr	r2, [pc, #432]	; (80047f4 <audioFrame+0x70c>)
 8004642:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004646:	780b      	ldrb	r3, [r1, #0]
				if (currentActivePreset == 63)
 8004648:	4c6b      	ldr	r4, [pc, #428]	; (80047f8 <audioFrame+0x710>)
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 800464a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800464e:	3301      	adds	r3, #1
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
 8004650:	9802      	ldr	r0, [sp, #8]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8004652:	edd2 7a00 	vldr	s15, [r2]
 8004656:	700b      	strb	r3, [r1, #0]
 8004658:	ee77 7aa6 	vadd.f32	s15, s15, s13
				if (currentActivePreset == 63)
 800465c:	7823      	ldrb	r3, [r4, #0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 800465e:	9f08      	ldr	r7, [sp, #32]
				if (currentActivePreset == 63)
 8004660:	2b3f      	cmp	r3, #63	; 0x3f
				sourceValues[VELOCITY_SOURCE_OFFSET][i] = amplitz;
 8004662:	ed80 aa00 	vstr	s20, [r0]
				sourceValues[RANDOM_SOURCE_OFFSET][i] = (random_values[randomValPointer++] * 0.5f) + 0.5f; // scale between zero and one
 8004666:	ee67 7a87 	vmul.f32	s15, s15, s14
 800466a:	edc0 7a02 	vstr	s15, [r0, #8]
				if (currentActivePreset == 63)
 800466e:	f000 808b 	beq.w	8004788 <audioFrame+0x6a0>
				if (currentActivePreset == 62)
 8004672:	2b3e      	cmp	r3, #62	; 0x3e
 8004674:	f000 82ce 	beq.w	8004c14 <audioFrame+0xb2c>
				else if (currentActivePreset == 61)
 8004678:	2b3d      	cmp	r3, #61	; 0x3d
 800467a:	f000 8095 	beq.w	80047a8 <audioFrame+0x6c0>
		for (int i = 0; i < numStringsThisBoard; i++)
 800467e:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
 8004680:	f8d8 4000 	ldr.w	r4, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004684:	781a      	ldrb	r2, [r3, #0]
 8004686:	e603      	b.n	8004290 <audioFrame+0x1a8>
 8004688:	4c53      	ldr	r4, [pc, #332]	; (80047d8 <audioFrame+0x6f0>)
 800468a:	9b07      	ldr	r3, [sp, #28]
 800468c:	f104 0540 	add.w	r5, r4, #64	; 0x40
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 8004690:	ed9f 8a52 	vldr	s16, [pc, #328]	; 80047dc <audioFrame+0x6f4>
 8004694:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8004698:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 800469c:	f7fe f8aa 	bl	80027f4 <audioTickString2>
 80046a0:	ee20 0a08 	vmul.f32	s0, s0, s16
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80046a4:	3408      	adds	r4, #8
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 80046a6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80046aa:	42a5      	cmp	r5, r4
				current_sample = (int32_t)(audioTickString2() * TWO_TO_23);
 80046ac:	ee17 3a90 	vmov	r3, s15
				audioOutBuffer[buffer_offset + i + 1] = current_sample;
 80046b0:	e944 3302 	strd	r3, r3, [r4, #-8]
			for (int i = 0; i < HALF_BUFFER_SIZE; i+=2)
 80046b4:	d1f2      	bne.n	800469c <audioFrame+0x5b4>
 80046b6:	e62e      	b.n	8004316 <audioFrame+0x22e>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80046b8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80046bc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80046c0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80046c4:	eea2 6a87 	vfma.f32	s12, s5, s14
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80046c8:	ed8b 6a01 	vstr	s12, [fp, #4]
 80046cc:	e55e      	b.n	800418c <audioFrame+0xa4>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80046ce:	ee77 7ac2 	vsub.f32	s15, s15, s4
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80046d2:	f8df b160 	ldr.w	fp, [pc, #352]	; 8004834 <audioFrame+0x74c>
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 80046d6:	ee74 4ac2 	vsub.f32	s9, s9, s4
 80046da:	eec7 3aa4 	vdiv.f32	s7, s15, s9
 80046de:	eef0 7a46 	vmov.f32	s15, s12
 80046e2:	eee2 7aa3 	vfma.f32	s15, s5, s7
				stringMappedPositions[j] = map((float)stringPositions[j], fretMeasurements[2][j], fretMeasurements[3][j], fretScaling[2], fretScaling[3]);
 80046e6:	edcb 7a00 	vstr	s15, [fp]
 80046ea:	e539      	b.n	8004160 <audioFrame+0x78>
					tLivingString2_setTargetLev(&strings[i], 0.0f);
 80046ec:	9d03      	ldr	r5, [sp, #12]
 80046ee:	eeb0 0a69 	vmov.f32	s0, s19
 80046f2:	4628      	mov	r0, r5
 80046f4:	f018 fbc6 	bl	801ce84 <tLivingString2_setTargetLev>
					tLivingString2_setLevMode(&strings[i], 0);
 80046f8:	4621      	mov	r1, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	f018 fbfe 	bl	801cefc <tLivingString2_setLevMode>
					tLivingString2_setDecay(&strings[i], 0.2f);
 8004700:	eeb0 0a4b 	vmov.f32	s0, s22
 8004704:	4628      	mov	r0, r5
 8004706:	f018 fba7 	bl	801ce58 <tLivingString2_setDecay>
					tADSRT_off(&fenvelopes[i]);
 800470a:	483c      	ldr	r0, [pc, #240]	; (80047fc <audioFrame+0x714>)
 800470c:	eb00 008b 	add.w	r0, r0, fp, lsl #2
 8004710:	f010 fd5a 	bl	80151c8 <tADSRT_off>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004714:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
 8004716:	f8d8 4000 	ldr.w	r4, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	e5b8      	b.n	8004290 <audioFrame+0x1a8>
 800471e:	4e38      	ldr	r6, [pc, #224]	; (8004800 <audioFrame+0x718>)
 8004720:	4d38      	ldr	r5, [pc, #224]	; (8004804 <audioFrame+0x71c>)
						tCycle_setFreq(&additive[i][j], tempFreq);
 8004722:	ed9f 8a39 	vldr	s16, [pc, #228]	; 8004808 <audioFrame+0x720>
		else if (currentActivePreset == 61)
 8004726:	f1a6 042c 	sub.w	r4, r6, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 800472a:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
 800472c:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 800472e:	f010 fea9 	bl	8015484 <tADSRT_tickNoInterp>
						tCycle_setFreq(&additive[i][j], tempFreq);
 8004732:	4628      	mov	r0, r5
 8004734:	eeb0 0a48 	vmov.f32	s0, s16
 8004738:	f013 f8fe 	bl	8017938 <tCycle_setFreq>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
 800473c:	4628      	mov	r0, r5
 800473e:	f013 f8d5 	bl	80178ec <tCycle_tick>
				for (int j = 0; j < NUM_OVERTONES; j++)
 8004742:	42a6      	cmp	r6, r4
 8004744:	f105 0504 	add.w	r5, r5, #4
 8004748:	d1ef      	bne.n	800472a <audioFrame+0x642>
 800474a:	4c30      	ldr	r4, [pc, #192]	; (800480c <audioFrame+0x724>)
 800474c:	4d30      	ldr	r5, [pc, #192]	; (8004810 <audioFrame+0x728>)
						tCycle_setFreq(&additive[i][j], tempFreq);
 800474e:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 8004808 <audioFrame+0x720>
 8004752:	f104 062c 	add.w	r6, r4, #44	; 0x2c
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 8004756:	4620      	mov	r0, r4
				for (int j = 0; j < NUM_OVERTONES; j++)
 8004758:	3404      	adds	r4, #4
					float thisEnv = tADSRT_tickNoInterp(&additiveEnv[i][j]);
 800475a:	f010 fe93 	bl	8015484 <tADSRT_tickNoInterp>
						tCycle_setFreq(&additive[i][j], tempFreq);
 800475e:	4628      	mov	r0, r5
 8004760:	eeb0 0a48 	vmov.f32	s0, s16
 8004764:	f013 f8e8 	bl	8017938 <tCycle_setFreq>
						tempSamp += tCycle_tick(&additive[i][j]) * thisEnv;// * freqWeight;
 8004768:	4628      	mov	r0, r5
 800476a:	f013 f8bf 	bl	80178ec <tCycle_tick>
				for (int j = 0; j < NUM_OVERTONES; j++)
 800476e:	42a6      	cmp	r6, r4
 8004770:	f105 0504 	add.w	r5, r5, #4
 8004774:	d1ef      	bne.n	8004756 <audioFrame+0x66e>
 8004776:	e5ce      	b.n	8004316 <audioFrame+0x22e>
					lsDecay[i] = 0;
 8004778:	4b26      	ldr	r3, [pc, #152]	; (8004814 <audioFrame+0x72c>)
 800477a:	f80b 4003 	strb.w	r4, [fp, r3]
		for (int i = 0; i < numStringsThisBoard; i++)
 800477e:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
 8004780:	f8d8 4000 	ldr.w	r4, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004784:	781a      	ldrb	r2, [r3, #0]
 8004786:	e583      	b.n	8004290 <audioFrame+0x1a8>
					tSimpleLivingString3_pluck(&livStr[i], amplitz, pluckPos);
 8004788:	4b23      	ldr	r3, [pc, #140]	; (8004818 <audioFrame+0x730>)
 800478a:	eeb0 0a4a 	vmov.f32	s0, s20
 800478e:	4823      	ldr	r0, [pc, #140]	; (800481c <audioFrame+0x734>)
 8004790:	edd3 0a00 	vldr	s1, [r3]
 8004794:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004796:	4418      	add	r0, r3
 8004798:	f017 fffe 	bl	801c798 <tSimpleLivingString3_pluck>
					lsDecay[i] = 1;
 800479c:	4a1d      	ldr	r2, [pc, #116]	; (8004814 <audioFrame+0x72c>)
 800479e:	2101      	movs	r1, #1
				if (currentActivePreset == 62)
 80047a0:	7823      	ldrb	r3, [r4, #0]
					lsDecay[i] = 1;
 80047a2:	f802 100b 	strb.w	r1, [r2, fp]
 80047a6:	e764      	b.n	8004672 <audioFrame+0x58a>
 80047a8:	4b1d      	ldr	r3, [pc, #116]	; (8004820 <audioFrame+0x738>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 80047aa:	eef1 ca00 	vmov.f32	s25, #16	; 0x40800000  4.0
 80047ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 80047b0:	eeb1 da08 	vmov.f32	s26, #24	; 0x40c00000  6.0
				else if (currentActivePreset == 61)
 80047b4:	9904      	ldr	r1, [sp, #16]
 80047b6:	441a      	add	r2, r3
 80047b8:	481a      	ldr	r0, [pc, #104]	; (8004824 <audioFrame+0x73c>)
 80047ba:	f8cd b020 	str.w	fp, [sp, #32]
 80047be:	4613      	mov	r3, r2
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <audioFrame+0x740>)
 80047c2:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
 80047c6:	4682      	mov	sl, r0
 80047c8:	4c18      	ldr	r4, [pc, #96]	; (800482c <audioFrame+0x744>)
 80047ca:	469b      	mov	fp, r3
 80047cc:	4d18      	ldr	r5, [pc, #96]	; (8004830 <audioFrame+0x748>)
 80047ce:	e9cd 7809 	strd	r7, r8, [sp, #36]	; 0x24
 80047d2:	4617      	mov	r7, r2
 80047d4:	4688      	mov	r8, r1
 80047d6:	e10f      	b.n	80049f8 <audioFrame+0x910>
 80047d8:	30000000 	.word	0x30000000
 80047dc:	4b000000 	.word	0x4b000000
 80047e0:	20012f70 	.word	0x20012f70
 80047e4:	20005498 	.word	0x20005498
 80047e8:	58020400 	.word	0x58020400
 80047ec:	20013004 	.word	0x20013004
 80047f0:	20005a18 	.word	0x20005a18
 80047f4:	20016d58 	.word	0x20016d58
 80047f8:	200130c8 	.word	0x200130c8
 80047fc:	20005014 	.word	0x20005014
 8004800:	20000a68 	.word	0x20000a68
 8004804:	200009ac 	.word	0x200009ac
 8004808:	00000000 	.word	0x00000000
 800480c:	20000a84 	.word	0x20000a84
 8004810:	200009f4 	.word	0x200009f4
 8004814:	2000530c 	.word	0x2000530c
 8004818:	2000018c 	.word	0x2000018c
 800481c:	200052f4 	.word	0x200052f4
 8004820:	20012ed8 	.word	0x20012ed8
 8004824:	20005128 	.word	0x20005128
 8004828:	20000c70 	.word	0x20000c70
 800482c:	20000d90 	.word	0x20000d90
 8004830:	20000340 	.word	0x20000340
 8004834:	20012f40 	.word	0x20012f40
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004838:	ed95 7a06 	vldr	s14, [r5, #24]
 800483c:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004840:	edd5 7a08 	vldr	s15, [r5, #32]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004844:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004848:	ee78 6ac7 	vsub.f32	s13, s17, s14
 800484c:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004850:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
							stringFade = (float)thisString * 0.2f;
 8004854:	ee29 9a0b 	vmul.f32	s18, s18, s22
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004858:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800485c:	ee7f da49 	vsub.f32	s27, s30, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004860:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8004864:	f012 fcf4 	bl	8017250 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004868:	ed95 7a03 	vldr	s14, [r5, #12]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 800486c:	edd5 7a05 	vldr	s15, [r5, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[2][0], stringFundamentals[2][2], 0.0f, 2.0f), 1.99f);
 8004870:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004874:	ee78 6ac7 	vsub.f32	s13, s17, s14
 8004878:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 800487c:	eeb0 1a6a 	vmov.f32	s2, s21
 8004880:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004884:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004888:	ee70 0aa0 	vadd.f32	s1, s1, s1
 800488c:	f012 fce0 	bl	8017250 <LEAF_clip>
							int height2Int = floor(height2);
 8004890:	eeb7 7aee 	vcvt.f64.f32	d7, s29
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004894:	48db      	ldr	r0, [pc, #876]	; (8004c04 <audioFrame+0xb1c>)
							int height1Int = floor(height1);
 8004896:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
							if (height2 < 1.0f)
 800489a:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
 800489e:	febb 7b47 	vrintm.f64	d7, d7
 80048a2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							int height1Int = floor(height1);
 80048a6:	febb 6b46 	vrintm.f64	d6, d6
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 80048aa:	eeb0 ea40 	vmov.f32	s28, s0
							if (height2 < 1.0f)
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
 80048b2:	ee17 2a90 	vmov	r2, s15
							float height2Float = height2 - height2Int;
 80048b6:	eef8 5ae7 	vcvt.f32.s32	s11, s15
							int height1Int = floor(height1);
 80048ba:	eefd 7bc6 	vcvt.s32.f64	s15, d6
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048be:	f102 0101 	add.w	r1, r2, #1
 80048c2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
 80048c6:	ee3e 8ae5 	vsub.f32	s16, s29, s11
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
							int height1Int = floor(height1);
 80048ce:	ee17 3a90 	vmov	r3, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048d2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
							float height1Float = height1 - height1Int;
 80048d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048da:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80048de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80048e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80048e6:	ed92 5a48 	vldr	s10, [r2, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80048ea:	f103 0201 	add.w	r2, r3, #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048ee:	ed91 7a48 	vldr	s14, [r1, #288]	; 0x120
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80048f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048f6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 80048fa:	ee28 8a07 	vmul.f32	s16, s16, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 80048fe:	eb09 0383 	add.w	r3, r9, r3, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004902:	ee3f 7a6e 	vsub.f32	s14, s30, s29
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004906:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 800490a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800490e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004912:	ee37 7a25 	vadd.f32	s14, s14, s11
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004916:	edd3 6a24 	vldr	s13, [r3, #144]	; 0x90
 800491a:	ed92 6a24 	vldr	s12, [r2, #144]	; 0x90
							float x2 =  (stringPartialGains[2][height2Int][j] * (1.0f - height2Float)) + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 800491e:	eea5 8a07 	vfma.f32	s16, s10, s14
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004922:	ee3f 7a40 	vsub.f32	s14, s30, s0
 8004926:	ee37 7a27 	vadd.f32	s14, s14, s15
							float height1Float = height1 - height1Int;
 800492a:	ee70 7a67 	vsub.f32	s15, s0, s15
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800492e:	ee2d 8a88 	vmul.f32	s16, s27, s16
							float x1 =  (stringPartialGains[1][height1Int][j] * (1.0f - height1Float)) + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004932:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004936:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 800493a:	eea9 8a27 	vfma.f32	s16, s18, s15
							if (height2 < 1.0f)
 800493e:	f100 8123 	bmi.w	8004b88 <audioFrame+0xaa0>
								d2 = 1.0f / ((dAp[2][1][j] * LEAF_clip(stringFundamentals[2][1], fakedFreq, stringFundamentals[2][2])) + dBs[2][1][j]);
 8004942:	eef0 0a68 	vmov.f32	s1, s17
 8004946:	ed95 1a08 	vldr	s2, [r5, #32]
 800494a:	ed95 0a07 	vldr	s0, [r5, #28]
 800494e:	edd7 ea3c 	vldr	s29, [r7, #240]	; 0xf0
 8004952:	f012 fc7d 	bl	8017250 <LEAF_clip>
 8004956:	edd4 7a3c 	vldr	s15, [r4, #240]	; 0xf0
 800495a:	eeee 7a80 	vfma.f32	s15, s29, s0
 800495e:	eecf fa27 	vdiv.f32	s31, s30, s15
							if (height1 < 1.0f)
 8004962:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8004966:	eeb4 eaee 	vcmpe.f32	s28, s29
 800496a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496e:	f100 80fa 	bmi.w	8004b66 <audioFrame+0xa7e>
								d1 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 8004972:	eef0 0a68 	vmov.f32	s1, s17
 8004976:	ed95 1a05 	vldr	s2, [r5, #20]
 800497a:	ed95 0a04 	vldr	s0, [r5, #16]
 800497e:	edd7 8a24 	vldr	s17, [r7, #144]	; 0x90
 8004982:	f012 fc65 	bl	8017250 <LEAF_clip>
 8004986:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 800498a:	eee8 7a80 	vfma.f32	s15, s17, s0
 800498e:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 8004992:	4a9d      	ldr	r2, [pc, #628]	; (8004c08 <audioFrame+0xb20>)
 8004994:	4640      	mov	r0, r8
 8004996:	499d      	ldr	r1, [pc, #628]	; (8004c0c <audioFrame+0xb24>)
					for (int j = 0; j < NUM_OVERTONES; j++)
 8004998:	f109 0901 	add.w	r9, r9, #1
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 800499c:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
 800499e:	3704      	adds	r7, #4
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 80049a0:	ed9a 0a01 	vldr	s0, [sl, #4]
					for (int j = 0; j < NUM_OVERTONES; j++)
 80049a4:	3404      	adds	r4, #4
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 80049a6:	ee6d daaf 	vmul.f32	s27, s27, s31
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 80049aa:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80049ae:	ee20 0a2b 	vmul.f32	s0, s0, s23
 80049b2:	edd3 7a00 	vldr	s15, [r3]
							thisDecay = (d1 * stringFade) + (d2 * (1.0f - stringFade));
 80049b6:	eee7 da09 	vfma.f32	s27, s14, s18
						tADSRT_setDecay(&additiveEnv[i][j], thisDecay * (randomFactors[currentRandom] * 1.0f));// * randomFactors[currentRandom]);
 80049ba:	ee20 0a27 	vmul.f32	s0, s0, s15
 80049be:	ee20 0a2d 	vmul.f32	s0, s0, s27
 80049c2:	f010 fb9f 	bl	8015104 <tADSRT_setDecay>
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
 80049c6:	4a90      	ldr	r2, [pc, #576]	; (8004c08 <audioFrame+0xb20>)
 80049c8:	4990      	ldr	r1, [pc, #576]	; (8004c0c <audioFrame+0xb24>)
 80049ca:	4640      	mov	r0, r8
 80049cc:	7813      	ldrb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
 80049ce:	f108 0804 	add.w	r8, r8, #4
						tADSRT_on(&additiveEnv[i][j], amplitz * (thisGain * (randomFactors[currentRandom])));
 80049d2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80049d6:	ed93 0a00 	vldr	s0, [r3]
 80049da:	ee2a 0a00 	vmul.f32	s0, s20, s0
 80049de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80049e2:	f010 fbdf 	bl	80151a4 <tADSRT_on>
						currentRandom++;
 80049e6:	4a88      	ldr	r2, [pc, #544]	; (8004c08 <audioFrame+0xb20>)
					for (int j = 0; j < NUM_OVERTONES; j++)
 80049e8:	f1b9 0f0b 	cmp.w	r9, #11
						currentRandom++;
 80049ec:	7813      	ldrb	r3, [r2, #0]
 80049ee:	f103 0301 	add.w	r3, r3, #1
 80049f2:	7013      	strb	r3, [r2, #0]
					for (int j = 0; j < NUM_OVERTONES; j++)
 80049f4:	f000 80fb 	beq.w	8004bee <audioFrame+0xb06>
						int thisString = i + firstString;
 80049f8:	4b85      	ldr	r3, [pc, #532]	; (8004c10 <audioFrame+0xb28>)
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 80049fa:	edda 8a02 	vldr	s17, [sl, #8]
						int thisString = i + firstString;
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	9a08      	ldr	r2, [sp, #32]
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 8004a02:	ee68 8aac 	vmul.f32	s17, s17, s25
 8004a06:	eddb 7a00 	vldr	s15, [fp]
						int thisString = i + firstString;
 8004a0a:	4413      	add	r3, r2
						float fakedFreq = stringFrequencies[i] * (knobScaled[2] * 4.0f);
 8004a0c:	ee68 8aa7 	vmul.f32	s17, s17, s15
						if (thisString < 6)
 8004a10:	2b05      	cmp	r3, #5
							stringFade = (float)thisString * 0.2f;
 8004a12:	ee07 3a90 	vmov	s15, r3
 8004a16:	eeb8 9ae7 	vcvt.f32.s32	s18, s15
						if (thisString < 6)
 8004a1a:	f77f af0d 	ble.w	8004838 <audioFrame+0x750>
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004a1e:	ed95 7a03 	vldr	s14, [r5, #12]
 8004a22:	eeb0 1a6a 	vmov.f32	s2, s21
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004a26:	edd5 7a05 	vldr	s15, [r5, #20]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004a2a:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004a2e:	ee78 6ac7 	vsub.f32	s13, s17, s14
 8004a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 8004a36:	ee39 9a4d 	vsub.f32	s18, s18, s26
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8004a3a:	eeb7 fa00 	vmov.f32	s30, #112	; 0x3f800000  1.0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004a3e:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							stringFade = (float)(thisString - 6.0f) * 0.2f;
 8004a42:	ee29 9a0b 	vmul.f32	s18, s18, s22
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8004a46:	ee7f da49 	vsub.f32	s27, s30, s18
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004a4a:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8004a4e:	f012 fbff 	bl	8017250 <LEAF_clip>
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8004a52:	ed95 7a00 	vldr	s14, [r5]
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004a56:	edd5 7a02 	vldr	s15, [r5, #8]
							float height2 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[1][0], stringFundamentals[1][2], 0.0f, 2.0f), 1.99f);
 8004a5a:	eef0 ea40 	vmov.f32	s29, s0
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004a5e:	ee78 6ac7 	vsub.f32	s13, s17, s14
 8004a62:	ee77 7ac7 	vsub.f32	s15, s15, s14
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8004a66:	eeb0 1a6a 	vmov.f32	s2, s21
 8004a6a:	eeb0 0a69 	vmov.f32	s0, s19
    return ostart + (ostop - ostart) * ((value - istart) / (istop - istart));
 8004a6e:	eec6 0aa7 	vdiv.f32	s1, s13, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8004a72:	ee70 0aa0 	vadd.f32	s1, s1, s1
 8004a76:	f012 fbeb 	bl	8017250 <LEAF_clip>
							int height2Int = floor(height2);
 8004a7a:	eeb7 6aee 	vcvt.f64.f32	d6, s29
							int height1Int = floor(height1);
 8004a7e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004a82:	4860      	ldr	r0, [pc, #384]	; (8004c04 <audioFrame+0xb1c>)
							if (height2 < 1.0f)
 8004a84:	eef4 eacf 	vcmpe.f32	s29, s30
							int height2Int = floor(height2);
 8004a88:	febb 6b46 	vrintm.f64	d6, d6
 8004a8c:	eefd 6bc6 	vcvt.s32.f64	s13, d6
							int height1Int = floor(height1);
 8004a90:	febb 7b47 	vrintm.f64	d7, d7
 8004a94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
							if (height2 < 1.0f)
 8004a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
							int height2Int = floor(height2);
 8004a9c:	ee16 2a90 	vmov	r2, s13
							float height2Float = height2 - height2Int;
 8004aa0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
							int height1Int = floor(height1);
 8004aa4:	ee17 3a90 	vmov	r3, s15
							float height1 = LEAF_clip(0.0f, map(fakedFreq, stringFundamentals[0][0], stringFundamentals[0][2], 0.0f, 2.0f), 1.99f);
 8004aa8:	eeb0 ea40 	vmov.f32	s28, s0
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004aac:	f102 0101 	add.w	r1, r2, #1
 8004ab0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height2Float = height2 - height2Int;
 8004ab4:	ee7e 6ae6 	vsub.f32	s13, s29, s13
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004ab8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004abc:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8004ac0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8004ac4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004ac8:	ed92 8a24 	vldr	s16, [r2, #144]	; 0x90
 8004acc:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8004ad0:	edd2 7a48 	vldr	s15, [r2, #288]	; 0x120
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004ad4:	f103 0201 	add.w	r2, r3, #1
							float x2 =  stringPartialGains[1][height2Int][j] + (stringPartialGains[2][height2Int + 1][j] * height2Float);
 8004ad8:	eea7 8aa6 	vfma.f32	s16, s15, s13
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004adc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
							float height1Float = height1 - height1Int;
 8004ae0:	ee07 3a90 	vmov	s15, r3
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004ae4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004ae8:	eb09 0282 	add.w	r2, r9, r2, lsl #2
							float height1Float = height1 - height1Int;
 8004aec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004af0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8004af4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004af8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
							float height1Float = height1 - height1Int;
 8004afc:	ee30 7a47 	vsub.f32	s14, s0, s14
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004b00:	edd2 6a24 	vldr	s13, [r2, #144]	; 0x90
 8004b04:	edd3 7a00 	vldr	s15, [r3]
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8004b08:	ee2d 8a88 	vmul.f32	s16, s27, s16
							float x1 =  stringPartialGains[0][height1Int][j] + (stringPartialGains[1][height1Int + 1][j] * height1Float);
 8004b0c:	eee6 7a87 	vfma.f32	s15, s13, s14
							thisGain = (x1 * stringFade) + (x2 * (1.0f - stringFade));
 8004b10:	eea9 8a27 	vfma.f32	s16, s18, s15
							if (height2 < 1.0f)
 8004b14:	d45a      	bmi.n	8004bcc <audioFrame+0xae4>
								d2 = 1.0f / ((dAp[1][1][j] * LEAF_clip(stringFundamentals[1][1], fakedFreq, stringFundamentals[1][2])) + dBs[1][1][j]);
 8004b16:	eef0 0a68 	vmov.f32	s1, s17
 8004b1a:	ed95 1a05 	vldr	s2, [r5, #20]
 8004b1e:	ed95 0a04 	vldr	s0, [r5, #16]
 8004b22:	edd7 ea24 	vldr	s29, [r7, #144]	; 0x90
 8004b26:	f012 fb93 	bl	8017250 <LEAF_clip>
 8004b2a:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
 8004b2e:	eeee 7a80 	vfma.f32	s15, s29, s0
 8004b32:	eecf fa27 	vdiv.f32	s31, s30, s15
							if (height1 < 1.0f)
 8004b36:	eef7 ea00 	vmov.f32	s29, #112	; 0x3f800000  1.0
 8004b3a:	eeb4 eaee 	vcmpe.f32	s28, s29
 8004b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b42:	d432      	bmi.n	8004baa <audioFrame+0xac2>
								d1 = 1.0f / ((dAp[0][1][j] * LEAF_clip(stringFundamentals[0][1], fakedFreq, stringFundamentals[0][2])) + dBs[0][1][j]);
 8004b44:	eef0 0a68 	vmov.f32	s1, s17
 8004b48:	ed95 1a02 	vldr	s2, [r5, #8]
 8004b4c:	ed95 0a01 	vldr	s0, [r5, #4]
 8004b50:	edd7 8a0c 	vldr	s17, [r7, #48]	; 0x30
 8004b54:	f012 fb7c 	bl	8017250 <LEAF_clip>
 8004b58:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8004b5c:	eee8 7a80 	vfma.f32	s15, s17, s0
 8004b60:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
 8004b64:	e715      	b.n	8004992 <audioFrame+0x8aa>
								d1 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 8004b66:	eef0 0a68 	vmov.f32	s1, s17
 8004b6a:	ed95 1a04 	vldr	s2, [r5, #16]
 8004b6e:	ed95 0a03 	vldr	s0, [r5, #12]
 8004b72:	edd7 8a18 	vldr	s17, [r7, #96]	; 0x60
 8004b76:	f012 fb6b 	bl	8017250 <LEAF_clip>
 8004b7a:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8004b7e:	eee8 7a80 	vfma.f32	s15, s17, s0
 8004b82:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
 8004b86:	e704      	b.n	8004992 <audioFrame+0x8aa>
								d2 = 1.0f / ((dAp[2][0][j] * LEAF_clip(stringFundamentals[2][0], fakedFreq, stringFundamentals[2][1])) + dBs[2][0][j]);
 8004b88:	eef0 0a68 	vmov.f32	s1, s17
 8004b8c:	ed95 1a07 	vldr	s2, [r5, #28]
 8004b90:	ed95 0a06 	vldr	s0, [r5, #24]
 8004b94:	edd7 ea30 	vldr	s29, [r7, #192]	; 0xc0
 8004b98:	f012 fb5a 	bl	8017250 <LEAF_clip>
 8004b9c:	edd4 7a30 	vldr	s15, [r4, #192]	; 0xc0
 8004ba0:	eeee 7a80 	vfma.f32	s15, s29, s0
 8004ba4:	eecf fa27 	vdiv.f32	s31, s30, s15
 8004ba8:	e6db      	b.n	8004962 <audioFrame+0x87a>
								d1 = 1.0f / ((dAp[0][0][j] * LEAF_clip(stringFundamentals[0][0], fakedFreq, stringFundamentals[0][1])) + dBs[0][0][j]);
 8004baa:	eef0 0a68 	vmov.f32	s1, s17
 8004bae:	ed95 1a01 	vldr	s2, [r5, #4]
 8004bb2:	ed95 0a00 	vldr	s0, [r5]
 8004bb6:	edd7 8a00 	vldr	s17, [r7]
 8004bba:	f012 fb49 	bl	8017250 <LEAF_clip>
 8004bbe:	edd4 7a00 	vldr	s15, [r4]
 8004bc2:	eee8 7a80 	vfma.f32	s15, s17, s0
 8004bc6:	ee8e 7aa7 	vdiv.f32	s14, s29, s15
 8004bca:	e6e2      	b.n	8004992 <audioFrame+0x8aa>
								d2 = 1.0f / ((dAp[1][0][j] * LEAF_clip(stringFundamentals[1][0], fakedFreq, stringFundamentals[1][1])) + dBs[1][0][j]);
 8004bcc:	eef0 0a68 	vmov.f32	s1, s17
 8004bd0:	ed95 1a04 	vldr	s2, [r5, #16]
 8004bd4:	ed95 0a03 	vldr	s0, [r5, #12]
 8004bd8:	edd7 ea18 	vldr	s29, [r7, #96]	; 0x60
 8004bdc:	f012 fb38 	bl	8017250 <LEAF_clip>
 8004be0:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8004be4:	eeee 7a80 	vfma.f32	s15, s29, s0
 8004be8:	eecf fa27 	vdiv.f32	s31, s30, s15
 8004bec:	e7a3      	b.n	8004b36 <audioFrame+0xa4e>
			previousStringInputs[i] = stringInputs[i];
 8004bee:	e9dd 8a0a 	ldrd	r8, sl, [sp, #40]	; 0x28
		for (int i = 0; i < numStringsThisBoard; i++)
 8004bf2:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
 8004bf4:	f8d8 4000 	ldr.w	r4, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004bf8:	781a      	ldrb	r2, [r3, #0]
			previousStringInputs[i] = stringInputs[i];
 8004bfa:	e9dd b708 	ldrd	fp, r7, [sp, #32]
 8004bfe:	f7ff bb47 	b.w	8004290 <audioFrame+0x1a8>
 8004c02:	bf00      	nop
 8004c04:	20000364 	.word	0x20000364
 8004c08:	200130c9 	.word	0x200130c9
 8004c0c:	20005618 	.word	0x20005618
 8004c10:	20005054 	.word	0x20005054
					tADSRT_on(&fenvelopes[i], amplitz);
 8004c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c16:	eeb0 0a4a 	vmov.f32	s0, s20
 8004c1a:	4847      	ldr	r0, [pc, #284]	; (8004d38 <audioFrame+0xc50>)
					float pluckAmp = amplitz * 2.0f; //was 4
 8004c1c:	ee3a aa0a 	vadd.f32	s20, s20, s20
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
 8004c20:	4c46      	ldr	r4, [pc, #280]	; (8004d3c <audioFrame+0xc54>)
					tADSRT_on(&fenvelopes[i], amplitz);
 8004c22:	4418      	add	r0, r3
 8004c24:	f010 fabe 	bl	80151a4 <tADSRT_on>
					tLivingString2_setLevMode(&strings[i], (knobScaled[0] > 0.5f));
 8004c28:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004c2c:	ed94 7a00 	vldr	s14, [r4]
 8004c30:	9d03      	ldr	r5, [sp, #12]
 8004c32:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c36:	9408      	str	r4, [sp, #32]
 8004c38:	4628      	mov	r0, r5
 8004c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3e:	bfcc      	ite	gt
 8004c40:	2101      	movgt	r1, #1
 8004c42:	2100      	movle	r1, #0
 8004c44:	f018 f95a 	bl	801cefc <tLivingString2_setLevMode>
					tLivingString2_setTargetLev(&strings[i], knobScaled[1]);
 8004c48:	ed94 0a01 	vldr	s0, [r4, #4]
 8004c4c:	4628      	mov	r0, r5
 8004c4e:	f018 f919 	bl	801ce84 <tLivingString2_setTargetLev>
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8004c52:	682b      	ldr	r3, [r5, #0]
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004c54:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
					int beforeLength = (delayLength * knobScaled[2]);
 8004c58:	ed94 7a02 	vldr	s14, [r4, #8]
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8004c5c:	edd3 6a02 	vldr	s13, [r3, #8]
 8004c60:	eefd 6ae6 	vcvt.s32.f32	s13, s13
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004c64:	ee77 7ac7 	vsub.f32	s15, s15, s14
					int delayLength = (int)strings[i]->waveLengthInSamples;
 8004c68:	ee16 1a90 	vmov	r1, s13
					int beforeLength = (delayLength * knobScaled[2]);
 8004c6c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8004c70:	ee26 7a87 	vmul.f32	s14, s13, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004c74:	ee67 7aa6 	vmul.f32	s15, s15, s13
					int beforeLength = (delayLength * knobScaled[2]);
 8004c78:	eebd 7ac7 	vcvt.s32.f32	s14, s14
					int afterLength = (delayLength * (1.0f - knobScaled[2]));
 8004c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
					int beforeLength = (delayLength * knobScaled[2]);
 8004c80:	ee17 4a10 	vmov	r4, s14
					if (beforeLength > 0)
 8004c84:	2c00      	cmp	r4, #0
 8004c86:	dd54      	ble.n	8004d32 <audioFrame+0xc4a>
						beforePickIncrement = pluckAmp / beforeLength;
 8004c88:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004c8c:	ee8a 6a07 	vdiv.f32	s12, s20, s14
					if (afterLength > 0)
 8004c90:	ee17 2a90 	vmov	r2, s15
 8004c94:	2a00      	cmp	r2, #0
 8004c96:	dd03      	ble.n	8004ca0 <audioFrame+0xbb8>
						afterPickIncrement = pluckAmp / afterLength;
 8004c98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c9c:	ee8a aa27 	vdiv.f32	s20, s20, s15
					for (int j = 0; j < delayLength; j++)
 8004ca0:	2900      	cmp	r1, #0
 8004ca2:	dd36      	ble.n	8004d12 <audioFrame+0xc2a>
					float value = 0.0f;
 8004ca4:	eddf 7a26 	vldr	s15, [pc, #152]	; 8004d40 <audioFrame+0xc58>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004ca8:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
					float value = 0.0f;
 8004cac:	9a03      	ldr	r2, [sp, #12]
 8004cae:	e01d      	b.n	8004cec <audioFrame+0xc04>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004cb0:	6add      	ldr	r5, [r3, #44]	; 0x2c
							value += beforePickIncrement;
 8004cb2:	ee77 7a86 	vadd.f32	s15, s15, s12
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004cb6:	69ab      	ldr	r3, [r5, #24]
 8004cb8:	68a8      	ldr	r0, [r5, #8]
 8004cba:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8004cbe:	444b      	add	r3, r9
 8004cc0:	4018      	ands	r0, r3
 8004cc2:	686b      	ldr	r3, [r5, #4]
 8004cc4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004cc8:	ed80 7a00 	vstr	s14, [r0]
							strings[i]->delLB->buff[(j+strings[i]->delLB->outPoint) & strings[i]->delLB->bufferMask] = value * 0.5f;
 8004ccc:	6813      	ldr	r3, [r2, #0]
 8004cce:	6b9d      	ldr	r5, [r3, #56]	; 0x38
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004cd0:	69ab      	ldr	r3, [r5, #24]
 8004cd2:	68a8      	ldr	r0, [r5, #8]
 8004cd4:	444b      	add	r3, r9
					for (int j = 0; j < delayLength; j++)
 8004cd6:	f109 0901 	add.w	r9, r9, #1
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004cda:	4018      	ands	r0, r3
 8004cdc:	686b      	ldr	r3, [r5, #4]
					for (int j = 0; j < delayLength; j++)
 8004cde:	4549      	cmp	r1, r9
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004ce0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ce4:	ed80 7a00 	vstr	s14, [r0]
					for (int j = 0; j < delayLength; j++)
 8004ce8:	d013      	beq.n	8004d12 <audioFrame+0xc2a>
							strings[i]->delLF->buff[(j+strings[i]->delLF->outPoint) & strings[i]->delLF->bufferMask] = value * 0.5f;
 8004cea:	6813      	ldr	r3, [r2, #0]
						if (j < beforeLength)
 8004cec:	45a1      	cmp	r9, r4
 8004cee:	dbdf      	blt.n	8004cb0 <audioFrame+0xbc8>
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004cf0:	6b1d      	ldr	r5, [r3, #48]	; 0x30
							value -= afterPickIncrement;
 8004cf2:	ee77 7aca 	vsub.f32	s15, s15, s20
							strings[i]->delUF->buff[(j+strings[i]->delUF->outPoint) & strings[i]->delUF->bufferMask] = value * 0.5f;
 8004cf6:	69ab      	ldr	r3, [r5, #24]
 8004cf8:	68a8      	ldr	r0, [r5, #8]
 8004cfa:	ee27 7aa6 	vmul.f32	s14, s15, s13
 8004cfe:	444b      	add	r3, r9
 8004d00:	4018      	ands	r0, r3
 8004d02:	686b      	ldr	r3, [r5, #4]
 8004d04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004d08:	ed80 7a00 	vstr	s14, [r0]
							strings[i]->delUB->buff[(j+strings[i]->delUB->outPoint) & strings[i]->delUB->bufferMask] = value * 0.5f;
 8004d0c:	6813      	ldr	r3, [r2, #0]
 8004d0e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8004d10:	e7de      	b.n	8004cd0 <audioFrame+0xbe8>
					tLivingString2_setDecay(&strings[i], knobScaled[3] * 500.0f);
 8004d12:	9b08      	ldr	r3, [sp, #32]
 8004d14:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8004d44 <audioFrame+0xc5c>
 8004d18:	ed93 0a03 	vldr	s0, [r3, #12]
 8004d1c:	9803      	ldr	r0, [sp, #12]
 8004d1e:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004d22:	f018 f899 	bl	801ce58 <tLivingString2_setDecay>
		for (int i = 0; i < numStringsThisBoard; i++)
 8004d26:	9b05      	ldr	r3, [sp, #20]
			previousStringInputs[i] = stringInputs[i];
 8004d28:	f8d8 4000 	ldr.w	r4, [r8]
		for (int i = 0; i < numStringsThisBoard; i++)
 8004d2c:	781a      	ldrb	r2, [r3, #0]
 8004d2e:	f7ff baaf 	b.w	8004290 <audioFrame+0x1a8>
						beforePickIncrement = pluckAmp;
 8004d32:	eeb0 6a4a 	vmov.f32	s12, s20
 8004d36:	e7ab      	b.n	8004c90 <audioFrame+0xba8>
 8004d38:	20005014 	.word	0x20005014
 8004d3c:	20005128 	.word	0x20005128
 8004d40:	00000000 	.word	0x00000000
 8004d44:	43fa0000 	.word	0x43fa0000

08004d48 <HAL_SPI_RxCpltCallback>:




void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004d48:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;
	if (hspi == &hspi5)
 8004d4a:	4b86      	ldr	r3, [pc, #536]	; (8004f64 <HAL_SPI_RxCpltCallback+0x21c>)
	interrupted = 1;
 8004d4c:	2101      	movs	r1, #1
 8004d4e:	4a86      	ldr	r2, [pc, #536]	; (8004f68 <HAL_SPI_RxCpltCallback+0x220>)
{
 8004d50:	4604      	mov	r4, r0
	if (hspi == &hspi5)
 8004d52:	4298      	cmp	r0, r3
	interrupted = 1;
 8004d54:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8004d56:	d019      	beq.n	8004d8c <HAL_SPI_RxCpltCallback+0x44>
			}
		}
		newPluck = 1;
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
	}
	if (hspi == &hspi2)
 8004d58:	4b84      	ldr	r3, [pc, #528]	; (8004f6c <HAL_SPI_RxCpltCallback+0x224>)
 8004d5a:	429c      	cmp	r4, r3
 8004d5c:	d00d      	beq.n	8004d7a <HAL_SPI_RxCpltCallback+0x32>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 8004d5e:	4b84      	ldr	r3, [pc, #528]	; (8004f70 <HAL_SPI_RxCpltCallback+0x228>)
 8004d60:	429c      	cmp	r4, r3
 8004d62:	d000      	beq.n	8004d66 <HAL_SPI_RxCpltCallback+0x1e>
			levers[1][i] = SPI_LEVERS[i];
		}
		*/
		newLevers = 1;
	}
}
 8004d64:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8004d66:	4b83      	ldr	r3, [pc, #524]	; (8004f74 <HAL_SPI_RxCpltCallback+0x22c>)
 8004d68:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 8004d6c:	2afe      	cmp	r2, #254	; 0xfe
 8004d6e:	f000 80ef 	beq.w	8004f50 <HAL_SPI_RxCpltCallback+0x208>
		newLevers = 1;
 8004d72:	4b81      	ldr	r3, [pc, #516]	; (8004f78 <HAL_SPI_RxCpltCallback+0x230>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8004d7a:	4b80      	ldr	r3, [pc, #512]	; (8004f7c <HAL_SPI_RxCpltCallback+0x234>)
 8004d7c:	7b9a      	ldrb	r2, [r3, #14]
 8004d7e:	2afe      	cmp	r2, #254	; 0xfe
 8004d80:	f000 80d6 	beq.w	8004f30 <HAL_SPI_RxCpltCallback+0x1e8>
		newBar = 1;
 8004d84:	4b7e      	ldr	r3, [pc, #504]	; (8004f80 <HAL_SPI_RxCpltCallback+0x238>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	601a      	str	r2, [r3, #0]
 8004d8a:	e7e8      	b.n	8004d5e <HAL_SPI_RxCpltCallback+0x16>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 8004d8c:	4b7d      	ldr	r3, [pc, #500]	; (8004f84 <HAL_SPI_RxCpltCallback+0x23c>)
 8004d8e:	7e9a      	ldrb	r2, [r3, #26]
 8004d90:	2afe      	cmp	r2, #254	; 0xfe
 8004d92:	d008      	beq.n	8004da6 <HAL_SPI_RxCpltCallback+0x5e>
		newPluck = 1;
 8004d94:	4b7c      	ldr	r3, [pc, #496]	; (8004f88 <HAL_SPI_RxCpltCallback+0x240>)
 8004d96:	2001      	movs	r0, #1
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8004d98:	2234      	movs	r2, #52	; 0x34
 8004d9a:	497a      	ldr	r1, [pc, #488]	; (8004f84 <HAL_SPI_RxCpltCallback+0x23c>)
		newPluck = 1;
 8004d9c:	6018      	str	r0, [r3, #0]
		HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, 52);
 8004d9e:	4871      	ldr	r0, [pc, #452]	; (8004f64 <HAL_SPI_RxCpltCallback+0x21c>)
 8004da0:	f00a fc3c 	bl	800f61c <HAL_SPI_Receive_DMA>
 8004da4:	e7d8      	b.n	8004d58 <HAL_SPI_RxCpltCallback+0x10>
		if ((SPI_PLUCK_RX[26] == 254) && (SPI_PLUCK_RX[51] == 253))
 8004da6:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
 8004daa:	2afd      	cmp	r2, #253	; 0xfd
 8004dac:	d1f2      	bne.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
			for (int i = 0; i < numStringsThisBoard; i++)
 8004dae:	4a77      	ldr	r2, [pc, #476]	; (8004f8c <HAL_SPI_RxCpltCallback+0x244>)
 8004db0:	7811      	ldrb	r1, [r2, #0]
 8004db2:	2900      	cmp	r1, #0
 8004db4:	d0ee      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004db6:	4a76      	ldr	r2, [pc, #472]	; (8004f90 <HAL_SPI_RxCpltCallback+0x248>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8004db8:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004dba:	6810      	ldr	r0, [r2, #0]
 8004dbc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004dc0:	f890 c01b 	ldrb.w	ip, [r0, #27]
 8004dc4:	6810      	ldr	r0, [r2, #0]
 8004dc6:	f100 000e 	add.w	r0, r0, #14
 8004dca:	f813 5010 	ldrb.w	r5, [r3, r0, lsl #1]
 8004dce:	4871      	ldr	r0, [pc, #452]	; (8004f94 <HAL_SPI_RxCpltCallback+0x24c>)
 8004dd0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004dd4:	6005      	str	r5, [r0, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004dd6:	d0dd      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004dd8:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004dda:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004ddc:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004de0:	f895 e01d 	ldrb.w	lr, [r5, #29]
 8004de4:	6815      	ldr	r5, [r2, #0]
 8004de6:	f105 0c0f 	add.w	ip, r5, #15
 8004dea:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004dee:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004df2:	6045      	str	r5, [r0, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004df4:	d0ce      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004df6:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004df8:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004dfa:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004dfe:	f895 e01f 	ldrb.w	lr, [r5, #31]
 8004e02:	6815      	ldr	r5, [r2, #0]
 8004e04:	f105 0c10 	add.w	ip, r5, #16
 8004e08:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004e0c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004e10:	6085      	str	r5, [r0, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e12:	d0bf      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e14:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e16:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e18:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e1c:	f895 e021 	ldrb.w	lr, [r5, #33]	; 0x21
 8004e20:	6815      	ldr	r5, [r2, #0]
 8004e22:	f105 0c11 	add.w	ip, r5, #17
 8004e26:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004e2a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004e2e:	60c5      	str	r5, [r0, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e30:	d0b0      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e32:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e34:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e36:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e3a:	f895 e023 	ldrb.w	lr, [r5, #35]	; 0x23
 8004e3e:	6815      	ldr	r5, [r2, #0]
 8004e40:	f105 0c12 	add.w	ip, r5, #18
 8004e44:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004e48:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004e4c:	6105      	str	r5, [r0, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e4e:	d0a1      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e50:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e52:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e54:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e58:	f895 e025 	ldrb.w	lr, [r5, #37]	; 0x25
 8004e5c:	6815      	ldr	r5, [r2, #0]
 8004e5e:	f105 0c13 	add.w	ip, r5, #19
 8004e62:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8004e66:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8004e6a:	6145      	str	r5, [r0, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e6c:	d092      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e6e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e70:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e72:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e76:	f895 c027 	ldrb.w	ip, [r5, #39]	; 0x27
 8004e7a:	6815      	ldr	r5, [r2, #0]
 8004e7c:	f105 0514 	add.w	r5, r5, #20
 8004e80:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004e84:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004e88:	6185      	str	r5, [r0, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e8a:	d083      	beq.n	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e8c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004e8e:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004e90:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004e94:	f895 c029 	ldrb.w	ip, [r5, #41]	; 0x29
 8004e98:	6815      	ldr	r5, [r2, #0]
 8004e9a:	f105 0515 	add.w	r5, r5, #21
 8004e9e:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004ea2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004ea6:	61c5      	str	r5, [r0, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ea8:	f43f af74 	beq.w	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004eac:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004eae:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004eb0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004eb4:	f895 c02b 	ldrb.w	ip, [r5, #43]	; 0x2b
 8004eb8:	6815      	ldr	r5, [r2, #0]
 8004eba:	f105 0516 	add.w	r5, r5, #22
 8004ebe:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004ec2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004ec6:	6205      	str	r5, [r0, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ec8:	f43f af64 	beq.w	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004ecc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ece:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004ed0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004ed4:	f895 c02d 	ldrb.w	ip, [r5, #45]	; 0x2d
 8004ed8:	6815      	ldr	r5, [r2, #0]
 8004eda:	f105 0517 	add.w	r5, r5, #23
 8004ede:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004ee2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004ee6:	6245      	str	r5, [r0, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ee8:	f43f af54 	beq.w	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004eec:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004eee:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004ef0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004ef4:	f895 c02f 	ldrb.w	ip, [r5, #47]	; 0x2f
 8004ef8:	6815      	ldr	r5, [r2, #0]
 8004efa:	f105 0518 	add.w	r5, r5, #24
 8004efe:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8004f02:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8004f06:	6285      	str	r5, [r0, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f08:	f43f af44 	beq.w	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004f0c:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f0e:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004f10:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8004f14:	f895 c031 	ldrb.w	ip, [r5, #49]	; 0x31
 8004f18:	6815      	ldr	r5, [r2, #0]
 8004f1a:	f105 0519 	add.w	r5, r5, #25
 8004f1e:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8004f22:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004f26:	62c3      	str	r3, [r0, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8004f28:	f43f af34 	beq.w	8004d94 <HAL_SPI_RxCpltCallback+0x4c>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 27] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 28];
 8004f2c:	6813      	ldr	r3, [r2, #0]
 8004f2e:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[14] == 254) && (SPI_RX[15] == 253))
 8004f30:	7bda      	ldrb	r2, [r3, #15]
 8004f32:	2afd      	cmp	r2, #253	; 0xfd
 8004f34:	f47f af26 	bne.w	8004d84 <HAL_SPI_RxCpltCallback+0x3c>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2) + 8] << 8) + ((uint16_t)SPI_RX[(j * 2) + 9] & 0xff);
 8004f38:	7a98      	ldrb	r0, [r3, #10]
 8004f3a:	7a1d      	ldrb	r5, [r3, #8]
 8004f3c:	7a5a      	ldrb	r2, [r3, #9]
 8004f3e:	7ad9      	ldrb	r1, [r3, #11]
 8004f40:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8004f44:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8004f48:	4813      	ldr	r0, [pc, #76]	; (8004f98 <HAL_SPI_RxCpltCallback+0x250>)
 8004f4a:	e9c0 2100 	strd	r2, r1, [r0]
			for (int j = 0; j < 2; j++)
 8004f4e:	e719      	b.n	8004d84 <HAL_SPI_RxCpltCallback+0x3c>
		if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 8004f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f54:	2bfd      	cmp	r3, #253	; 0xfd
 8004f56:	f47f af0c 	bne.w	8004d72 <HAL_SPI_RxCpltCallback+0x2a>
			handleSPI(LEVER_BUFFER_SIZE);
 8004f5a:	2020      	movs	r0, #32
 8004f5c:	f001 fa42 	bl	80063e4 <handleSPI>
			newLevers = 1;
 8004f60:	e707      	b.n	8004d72 <HAL_SPI_RxCpltCallback+0x2a>
 8004f62:	bf00      	nop
 8004f64:	20019700 	.word	0x20019700
 8004f68:	200050f8 	.word	0x200050f8
 8004f6c:	20019678 	.word	0x20019678
 8004f70:	200195f0 	.word	0x200195f0
 8004f74:	30000100 	.word	0x30000100
 8004f78:	20005460 	.word	0x20005460
 8004f7c:	30000180 	.word	0x30000180
 8004f80:	2000545c 	.word	0x2000545c
 8004f84:	300001a0 	.word	0x300001a0
 8004f88:	20005464 	.word	0x20005464
 8004f8c:	20000052 	.word	0x20000052
 8004f90:	20005054 	.word	0x20005054
 8004f94:	20012f08 	.word	0x20012f08
 8004f98:	20012f78 	.word	0x20012f78

08004f9c <HAL_SPI_RxHalfCpltCallback>:

void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004f9c:	b538      	push	{r3, r4, r5, lr}
	interrupted = 1;

	if (hspi == &hspi5)
 8004f9e:	4b80      	ldr	r3, [pc, #512]	; (80051a0 <HAL_SPI_RxHalfCpltCallback+0x204>)
	interrupted = 1;
 8004fa0:	2101      	movs	r1, #1
 8004fa2:	4a80      	ldr	r2, [pc, #512]	; (80051a4 <HAL_SPI_RxHalfCpltCallback+0x208>)
	if (hspi == &hspi5)
 8004fa4:	4298      	cmp	r0, r3
	interrupted = 1;
 8004fa6:	7011      	strb	r1, [r2, #0]
	if (hspi == &hspi5)
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_SPI_RxHalfCpltCallback+0x4a>
			}
		}
		newPluck = 1;

	}
	if (hspi == &hspi2)
 8004faa:	4b7f      	ldr	r3, [pc, #508]	; (80051a8 <HAL_SPI_RxHalfCpltCallback+0x20c>)
 8004fac:	4298      	cmp	r0, r3
 8004fae:	d011      	beq.n	8004fd4 <HAL_SPI_RxHalfCpltCallback+0x38>
			}
		}
		newBar = 1;

	}
	if (hspi == &hspi1)
 8004fb0:	4b7e      	ldr	r3, [pc, #504]	; (80051ac <HAL_SPI_RxHalfCpltCallback+0x210>)
 8004fb2:	4298      	cmp	r0, r3
 8004fb4:	d000      	beq.n	8004fb8 <HAL_SPI_RxHalfCpltCallback+0x1c>
		{
			handleSPI(0);
			newLevers = 1;
		}
	}
}
 8004fb6:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8004fb8:	4b7d      	ldr	r3, [pc, #500]	; (80051b0 <HAL_SPI_RxHalfCpltCallback+0x214>)
 8004fba:	7f9a      	ldrb	r2, [r3, #30]
 8004fbc:	2afe      	cmp	r2, #254	; 0xfe
 8004fbe:	d1fa      	bne.n	8004fb6 <HAL_SPI_RxHalfCpltCallback+0x1a>
 8004fc0:	7fdb      	ldrb	r3, [r3, #31]
 8004fc2:	2bfd      	cmp	r3, #253	; 0xfd
 8004fc4:	d1f7      	bne.n	8004fb6 <HAL_SPI_RxHalfCpltCallback+0x1a>
			handleSPI(0);
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	f001 fa0c 	bl	80063e4 <handleSPI>
			newLevers = 1;
 8004fcc:	4b79      	ldr	r3, [pc, #484]	; (80051b4 <HAL_SPI_RxHalfCpltCallback+0x218>)
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
}
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 8004fd4:	4b78      	ldr	r3, [pc, #480]	; (80051b8 <HAL_SPI_RxHalfCpltCallback+0x21c>)
 8004fd6:	799a      	ldrb	r2, [r3, #6]
 8004fd8:	2afe      	cmp	r2, #254	; 0xfe
 8004fda:	f000 80d0 	beq.w	800517e <HAL_SPI_RxHalfCpltCallback+0x1e2>
		newBar = 1;
 8004fde:	4b77      	ldr	r3, [pc, #476]	; (80051bc <HAL_SPI_RxHalfCpltCallback+0x220>)
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e7e4      	b.n	8004fb0 <HAL_SPI_RxHalfCpltCallback+0x14>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 8004fe6:	4b76      	ldr	r3, [pc, #472]	; (80051c0 <HAL_SPI_RxHalfCpltCallback+0x224>)
 8004fe8:	781a      	ldrb	r2, [r3, #0]
 8004fea:	2afe      	cmp	r2, #254	; 0xfe
 8004fec:	d003      	beq.n	8004ff6 <HAL_SPI_RxHalfCpltCallback+0x5a>
		newPluck = 1;
 8004fee:	4b75      	ldr	r3, [pc, #468]	; (80051c4 <HAL_SPI_RxHalfCpltCallback+0x228>)
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	601a      	str	r2, [r3, #0]
 8004ff4:	e7d9      	b.n	8004faa <HAL_SPI_RxHalfCpltCallback+0xe>
		if ((SPI_PLUCK_RX[0] == 254) && (SPI_PLUCK_RX[25] == 253))
 8004ff6:	7e5a      	ldrb	r2, [r3, #25]
 8004ff8:	2afd      	cmp	r2, #253	; 0xfd
 8004ffa:	d1f8      	bne.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
			for (int i = 0; i < numStringsThisBoard; i++)
 8004ffc:	4a72      	ldr	r2, [pc, #456]	; (80051c8 <HAL_SPI_RxHalfCpltCallback+0x22c>)
 8004ffe:	7811      	ldrb	r1, [r2, #0]
 8005000:	2900      	cmp	r1, #0
 8005002:	d0f4      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005004:	4a71      	ldr	r2, [pc, #452]	; (80051cc <HAL_SPI_RxHalfCpltCallback+0x230>)
			for (int i = 0; i < numStringsThisBoard; i++)
 8005006:	2901      	cmp	r1, #1
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005008:	6814      	ldr	r4, [r2, #0]
 800500a:	eb03 0444 	add.w	r4, r3, r4, lsl #1
 800500e:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005012:	6814      	ldr	r4, [r2, #0]
 8005014:	f104 0401 	add.w	r4, r4, #1
 8005018:	f813 5014 	ldrb.w	r5, [r3, r4, lsl #1]
 800501c:	4c6c      	ldr	r4, [pc, #432]	; (80051d0 <HAL_SPI_RxHalfCpltCallback+0x234>)
 800501e:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8005022:	6025      	str	r5, [r4, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005024:	d0e3      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005026:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005028:	2902      	cmp	r1, #2
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800502a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800502e:	f895 e003 	ldrb.w	lr, [r5, #3]
 8005032:	6815      	ldr	r5, [r2, #0]
 8005034:	f105 0c02 	add.w	ip, r5, #2
 8005038:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800503c:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 8005040:	6065      	str	r5, [r4, #4]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005042:	d0d4      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005044:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005046:	2903      	cmp	r1, #3
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005048:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800504c:	f895 e005 	ldrb.w	lr, [r5, #5]
 8005050:	6815      	ldr	r5, [r2, #0]
 8005052:	f105 0c03 	add.w	ip, r5, #3
 8005056:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 800505a:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800505e:	60a5      	str	r5, [r4, #8]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005060:	d0c5      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005062:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005064:	2904      	cmp	r1, #4
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005066:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 800506a:	f895 e007 	ldrb.w	lr, [r5, #7]
 800506e:	6815      	ldr	r5, [r2, #0]
 8005070:	f105 0c04 	add.w	ip, r5, #4
 8005074:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8005078:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800507c:	60e5      	str	r5, [r4, #12]
			for (int i = 0; i < numStringsThisBoard; i++)
 800507e:	d0b6      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005080:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005082:	2905      	cmp	r1, #5
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 8005084:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005088:	f895 e009 	ldrb.w	lr, [r5, #9]
 800508c:	6815      	ldr	r5, [r2, #0]
 800508e:	f105 0c05 	add.w	ip, r5, #5
 8005092:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 8005096:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 800509a:	6125      	str	r5, [r4, #16]
			for (int i = 0; i < numStringsThisBoard; i++)
 800509c:	d0a7      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800509e:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050a0:	2906      	cmp	r1, #6
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050a2:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80050a6:	f895 e00b 	ldrb.w	lr, [r5, #11]
 80050aa:	6815      	ldr	r5, [r2, #0]
 80050ac:	f105 0c06 	add.w	ip, r5, #6
 80050b0:	f813 501c 	ldrb.w	r5, [r3, ip, lsl #1]
 80050b4:	eb05 250e 	add.w	r5, r5, lr, lsl #8
 80050b8:	6165      	str	r5, [r4, #20]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050ba:	d098      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050bc:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050be:	2907      	cmp	r1, #7
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050c0:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80050c4:	f895 c00d 	ldrb.w	ip, [r5, #13]
 80050c8:	6815      	ldr	r5, [r2, #0]
 80050ca:	f105 0507 	add.w	r5, r5, #7
 80050ce:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80050d2:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80050d6:	61a5      	str	r5, [r4, #24]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050d8:	d089      	beq.n	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050da:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050dc:	2908      	cmp	r1, #8
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050de:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 80050e2:	f895 c00f 	ldrb.w	ip, [r5, #15]
 80050e6:	6815      	ldr	r5, [r2, #0]
 80050e8:	f105 0508 	add.w	r5, r5, #8
 80050ec:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 80050f0:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 80050f4:	61e5      	str	r5, [r4, #28]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050f6:	f43f af7a 	beq.w	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050fa:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 80050fc:	2909      	cmp	r1, #9
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 80050fe:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005102:	f895 c011 	ldrb.w	ip, [r5, #17]
 8005106:	6815      	ldr	r5, [r2, #0]
 8005108:	f105 0509 	add.w	r5, r5, #9
 800510c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8005110:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8005114:	6225      	str	r5, [r4, #32]
			for (int i = 0; i < numStringsThisBoard; i++)
 8005116:	f43f af6a 	beq.w	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800511a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800511c:	290a      	cmp	r1, #10
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800511e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005122:	f895 c013 	ldrb.w	ip, [r5, #19]
 8005126:	6815      	ldr	r5, [r2, #0]
 8005128:	f105 050a 	add.w	r5, r5, #10
 800512c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8005130:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8005134:	6265      	str	r5, [r4, #36]	; 0x24
			for (int i = 0; i < numStringsThisBoard; i++)
 8005136:	f43f af5a 	beq.w	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800513a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800513c:	290b      	cmp	r1, #11
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800513e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005142:	f895 c015 	ldrb.w	ip, [r5, #21]
 8005146:	6815      	ldr	r5, [r2, #0]
 8005148:	f105 050b 	add.w	r5, r5, #11
 800514c:	f813 5015 	ldrb.w	r5, [r3, r5, lsl #1]
 8005150:	eb05 250c 	add.w	r5, r5, ip, lsl #8
 8005154:	62a5      	str	r5, [r4, #40]	; 0x28
			for (int i = 0; i < numStringsThisBoard; i++)
 8005156:	f43f af4a 	beq.w	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800515a:	6815      	ldr	r5, [r2, #0]
			for (int i = 0; i < numStringsThisBoard; i++)
 800515c:	290c      	cmp	r1, #12
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800515e:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005162:	f895 c017 	ldrb.w	ip, [r5, #23]
 8005166:	6815      	ldr	r5, [r2, #0]
 8005168:	f105 050c 	add.w	r5, r5, #12
 800516c:	f813 3015 	ldrb.w	r3, [r3, r5, lsl #1]
 8005170:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8005174:	62e3      	str	r3, [r4, #44]	; 0x2c
			for (int i = 0; i < numStringsThisBoard; i++)
 8005176:	f43f af3a 	beq.w	8004fee <HAL_SPI_RxHalfCpltCallback+0x52>
				stringInputs[i] = (SPI_PLUCK_RX[((i+firstString)*2)+ 1] << 8) + SPI_PLUCK_RX[((i+firstString)*2)+ 2];
 800517a:	6813      	ldr	r3, [r2, #0]
 800517c:	6813      	ldr	r3, [r2, #0]
		if ((SPI_RX[6] == 254) && (SPI_RX[7] == 253))
 800517e:	79da      	ldrb	r2, [r3, #7]
 8005180:	2afd      	cmp	r2, #253	; 0xfd
 8005182:	f47f af2c 	bne.w	8004fde <HAL_SPI_RxHalfCpltCallback+0x42>
				stringPositions[j] =  ((uint16_t)SPI_RX[(j * 2)] << 8) + ((uint16_t)SPI_RX[(j * 2) + 1] & 0xff);
 8005186:	789c      	ldrb	r4, [r3, #2]
 8005188:	781d      	ldrb	r5, [r3, #0]
 800518a:	785a      	ldrb	r2, [r3, #1]
 800518c:	78d9      	ldrb	r1, [r3, #3]
 800518e:	eb02 2205 	add.w	r2, r2, r5, lsl #8
 8005192:	eb01 2104 	add.w	r1, r1, r4, lsl #8
 8005196:	4c0f      	ldr	r4, [pc, #60]	; (80051d4 <HAL_SPI_RxHalfCpltCallback+0x238>)
 8005198:	e9c4 2100 	strd	r2, r1, [r4]
			for (int j = 0; j < 2; j++)
 800519c:	e71f      	b.n	8004fde <HAL_SPI_RxHalfCpltCallback+0x42>
 800519e:	bf00      	nop
 80051a0:	20019700 	.word	0x20019700
 80051a4:	200050f8 	.word	0x200050f8
 80051a8:	20019678 	.word	0x20019678
 80051ac:	200195f0 	.word	0x200195f0
 80051b0:	30000100 	.word	0x30000100
 80051b4:	20005460 	.word	0x20005460
 80051b8:	30000180 	.word	0x30000180
 80051bc:	2000545c 	.word	0x2000545c
 80051c0:	300001a0 	.word	0x300001a0
 80051c4:	20005464 	.word	0x20005464
 80051c8:	20000052 	.word	0x20000052
 80051cc:	20005054 	.word	0x20005054
 80051d0:	20012f08 	.word	0x20012f08
 80051d4:	20012f78 	.word	0x20012f78

080051d8 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051d8:	b508      	push	{r3, lr}
	interrupted = 1;

	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80051da:	4b0a      	ldr	r3, [pc, #40]	; (8005204 <HAL_SPI_TxRxCpltCallback+0x2c>)
	interrupted = 1;
 80051dc:	2001      	movs	r0, #1
 80051de:	490a      	ldr	r1, [pc, #40]	; (8005208 <HAL_SPI_TxRxCpltCallback+0x30>)
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80051e0:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
	interrupted = 1;
 80051e4:	7008      	strb	r0, [r1, #0]
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80051e6:	2afe      	cmp	r2, #254	; 0xfe
 80051e8:	d003      	beq.n	80051f2 <HAL_SPI_TxRxCpltCallback+0x1a>
	{
		handleSPI(LEVER_BUFFER_SIZE);
		newLevers = 1;
	}
	newLevers = 1;
 80051ea:	4b08      	ldr	r3, [pc, #32]	; (800520c <HAL_SPI_TxRxCpltCallback+0x34>)
 80051ec:	2201      	movs	r2, #1
 80051ee:	601a      	str	r2, [r3, #0]
}
 80051f0:	bd08      	pop	{r3, pc}
	if ((SPI_LEVERS[62] == 254) && (SPI_LEVERS[63] == 253))
 80051f2:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051f6:	2bfd      	cmp	r3, #253	; 0xfd
 80051f8:	d1f7      	bne.n	80051ea <HAL_SPI_TxRxCpltCallback+0x12>
		handleSPI(LEVER_BUFFER_SIZE);
 80051fa:	2020      	movs	r0, #32
 80051fc:	f001 f8f2 	bl	80063e4 <handleSPI>
		newLevers = 1;
 8005200:	e7f3      	b.n	80051ea <HAL_SPI_TxRxCpltCallback+0x12>
 8005202:	bf00      	nop
 8005204:	30000100 	.word	0x30000100
 8005208:	200050f8 	.word	0x200050f8
 800520c:	20005460 	.word	0x20005460

08005210 <HAL_SPI_TxRxHalfCpltCallback>:
void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
	interrupted = 1;
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8005210:	4b08      	ldr	r3, [pc, #32]	; (8005234 <HAL_SPI_TxRxHalfCpltCallback+0x24>)
	interrupted = 1;
 8005212:	4909      	ldr	r1, [pc, #36]	; (8005238 <HAL_SPI_TxRxHalfCpltCallback+0x28>)
{
 8005214:	b510      	push	{r4, lr}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8005216:	7f9a      	ldrb	r2, [r3, #30]
	interrupted = 1;
 8005218:	2401      	movs	r4, #1
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800521a:	2afe      	cmp	r2, #254	; 0xfe
	interrupted = 1;
 800521c:	700c      	strb	r4, [r1, #0]
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 800521e:	d000      	beq.n	8005222 <HAL_SPI_TxRxHalfCpltCallback+0x12>
	{
		handleSPI(0);
		newLevers = 1;
	}
}
 8005220:	bd10      	pop	{r4, pc}
	if ((SPI_LEVERS[30] == 254) && (SPI_LEVERS[31] == 253))
 8005222:	7fdb      	ldrb	r3, [r3, #31]
 8005224:	2bfd      	cmp	r3, #253	; 0xfd
 8005226:	d1fb      	bne.n	8005220 <HAL_SPI_TxRxHalfCpltCallback+0x10>
		handleSPI(0);
 8005228:	2000      	movs	r0, #0
 800522a:	f001 f8db 	bl	80063e4 <handleSPI>
		newLevers = 1;
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <HAL_SPI_TxRxHalfCpltCallback+0x2c>)
 8005230:	601c      	str	r4, [r3, #0]
}
 8005232:	bd10      	pop	{r4, pc}
 8005234:	30000100 	.word	0x30000100
 8005238:	200050f8 	.word	0x200050f8
 800523c:	20005460 	.word	0x20005460

08005240 <HAL_SAI_TxCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8005240:	4b03      	ldr	r3, [pc, #12]	; (8005250 <HAL_SAI_TxCpltCallback+0x10>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	b103      	cbz	r3, 8005248 <HAL_SAI_TxCpltCallback+0x8>
	audioFrame(HALF_BUFFER_SIZE);
}
 8005246:	4770      	bx	lr
	audioFrame(HALF_BUFFER_SIZE);
 8005248:	2010      	movs	r0, #16
 800524a:	f7fe bf4d 	b.w	80040e8 <audioFrame>
 800524e:	bf00      	nop
 8005250:	20013104 	.word	0x20013104

08005254 <HAL_SAI_TxHalfCpltCallback>:

void __ATTR_ITCMRAM HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
	if (!diskBusy)
 8005254:	4b02      	ldr	r3, [pc, #8]	; (8005260 <HAL_SAI_TxHalfCpltCallback+0xc>)
 8005256:	7818      	ldrb	r0, [r3, #0]
 8005258:	b100      	cbz	r0, 800525c <HAL_SAI_TxHalfCpltCallback+0x8>
	audioFrame(0);
}
 800525a:	4770      	bx	lr
	audioFrame(0);
 800525c:	f7fe bf44 	b.w	80040e8 <audioFrame>
 8005260:	20013104 	.word	0x20013104

08005264 <HAL_SAI_ErrorCallback>:

void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
}
 8005264:	4770      	bx	lr
 8005266:	bf00      	nop

08005268 <AudioCodec_init>:

volatile int blankCount = 0;
uint16_t addressCounter = 0;


void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 8005268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	//pull codec reset pin high to start codec working
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800526c:	2201      	movs	r2, #1
void AudioCodec_init(I2C_HandleTypeDef* hi2c) {
 800526e:	b082      	sub	sp, #8
 8005270:	4605      	mov	r5, r0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8005272:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005276:	483b      	ldr	r0, [pc, #236]	; (8005364 <AudioCodec_init+0xfc>)
 8005278:	f005 fc82 	bl	800ab80 <HAL_GPIO_WritePin>

	HAL_Delay(2);
 800527c:	2002      	movs	r0, #2
	//enable control port and put part in power-down mode while loading registers
	myI2cData[0] = 0x07;
 800527e:	4c3a      	ldr	r4, [pc, #232]	; (8005368 <AudioCodec_init+0x100>)
	HAL_Delay(2);
 8005280:	f003 fea6 	bl	8008fd0 <HAL_Delay>
	myI2cData[1] = 0x03;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005284:	4f39      	ldr	r7, [pc, #228]	; (800536c <AudioCodec_init+0x104>)
	myI2cData[0] = 0x07;
 8005286:	f240 3307 	movw	r3, #775	; 0x307
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800528a:	4e39      	ldr	r6, [pc, #228]	; (8005370 <AudioCodec_init+0x108>)
 800528c:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 800528e:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005290:	2120      	movs	r1, #32
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	4628      	mov	r0, r5
 8005296:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8005378 <AudioCodec_init+0x110>
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	8833      	ldrh	r3, [r6, #0]
 800529e:	f005 fd99 	bl	800add4 <HAL_I2C_Master_Transmit>

	//HAL_Delay(2);

	myI2cData[0] = 0x01;
	myI2cData[1] = 0x41;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052a6:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052aa:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x01;
 80052ac:	f244 1301 	movw	r3, #16641	; 0x4101
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052b0:	2120      	movs	r1, #32
 80052b2:	4628      	mov	r0, r5
	myI2cData[0] = 0x01;
 80052b4:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052b6:	8833      	ldrh	r3, [r6, #0]
 80052b8:	f005 fd8c 	bl	800add4 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x02;
	myI2cData[1] = 0x00;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052c0:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052c4:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x02;
 80052c6:	2302      	movs	r3, #2
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052c8:	2120      	movs	r1, #32
 80052ca:	4628      	mov	r0, r5
	myI2cData[0] = 0x02;
 80052cc:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052ce:	8833      	ldrh	r3, [r6, #0]
 80052d0:	f005 fd80 	bl	800add4 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x03;
	myI2cData[1] = 0x79;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052d8:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052dc:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x03;
 80052de:	f647 1303 	movw	r3, #30979	; 0x7903
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052e2:	2120      	movs	r1, #32
 80052e4:	4628      	mov	r0, r5
	myI2cData[0] = 0x03;
 80052e6:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052e8:	8833      	ldrh	r3, [r6, #0]
 80052ea:	f005 fd73 	bl	800add4 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x04;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052f2:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052f6:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x04;
 80052f8:	f44f 7382 	mov.w	r3, #260	; 0x104
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 80052fc:	2120      	movs	r1, #32
 80052fe:	4628      	mov	r0, r5
	myI2cData[0] = 0x04;
 8005300:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005302:	8833      	ldrh	r3, [r6, #0]
 8005304:	f005 fd66 	bl	800add4 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x05;
	myI2cData[1] = 0x01;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800530c:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005310:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x05;
 8005312:	f240 1305 	movw	r3, #261	; 0x105
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005316:	2120      	movs	r1, #32
 8005318:	4628      	mov	r0, r5
	myI2cData[0] = 0x05;
 800531a:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800531c:	8833      	ldrh	r3, [r6, #0]
 800531e:	f005 fd59 	bl	800add4 <HAL_I2C_Master_Transmit>

	//HAL_Delay(1); // might not be necessary

	myI2cData[0] = 0x06;
	myI2cData[1] = 0x10;
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	4622      	mov	r2, r4
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005326:	f888 0000 	strb.w	r0, [r8]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800532a:	9300      	str	r3, [sp, #0]
	myI2cData[0] = 0x06;
 800532c:	f241 0306 	movw	r3, #4102	; 0x1006
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005330:	2120      	movs	r1, #32
 8005332:	4628      	mov	r0, r5
	myI2cData[0] = 0x06;
 8005334:	8023      	strh	r3, [r4, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005336:	8833      	ldrh	r3, [r6, #0]
 8005338:	f005 fd4c 	bl	800add4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(1); // might not be necessary

	//turn off power down bit to start things cookin'
	myI2cData[0] = 0x07;
	myI2cData[1] = 0x02;
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 800533c:	683a      	ldr	r2, [r7, #0]
	myI2cData[0] = 0x07;
 800533e:	f240 2107 	movw	r1, #519	; 0x207
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005342:	8833      	ldrh	r3, [r6, #0]
	testVal = HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005344:	f888 0000 	strb.w	r0, [r8]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005348:	4628      	mov	r0, r5
 800534a:	9200      	str	r2, [sp, #0]
 800534c:	4622      	mov	r2, r4
	myI2cData[0] = 0x07;
 800534e:	8021      	strh	r1, [r4, #0]
	HAL_I2C_Master_Transmit(hi2c, CODEC_I2C_ADDRESS, myI2cData, i2cDataSize, I2Ctimeout);
 8005350:	2120      	movs	r1, #32
 8005352:	f005 fd3f 	bl	800add4 <HAL_I2C_Master_Transmit>


	//HAL_Delay(1); // might not be necessary
	codecReady = 1;
 8005356:	4b07      	ldr	r3, [pc, #28]	; (8005374 <AudioCodec_init+0x10c>)
 8005358:	2201      	movs	r2, #1
 800535a:	601a      	str	r2, [r3, #0]

}
 800535c:	b002      	add	sp, #8
 800535e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005362:	bf00      	nop
 8005364:	58020800 	.word	0x58020800
 8005368:	20013034 	.word	0x20013034
 800536c:	20000714 	.word	0x20000714
 8005370:	20000718 	.word	0x20000718
 8005374:	20000b2c 	.word	0x20000b2c
 8005378:	20013036 	.word	0x20013036

0800537c <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800537c:	4b20      	ldr	r3, [pc, #128]	; (8005400 <MX_DMA_Init+0x84>)

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 800537e:	210b      	movs	r1, #11
 8005380:	2200      	movs	r2, #0
 8005382:	4608      	mov	r0, r1
{
 8005384:	b510      	push	{r4, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005386:	f8d3 40d8 	ldr.w	r4, [r3, #216]	; 0xd8
{
 800538a:	b082      	sub	sp, #8
  __HAL_RCC_DMA1_CLK_ENABLE();
 800538c:	f044 0401 	orr.w	r4, r4, #1
 8005390:	f8c3 40d8 	str.w	r4, [r3, #216]	; 0xd8
 8005394:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005398:	f003 0301 	and.w	r3, r3, #1
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 11, 0);
 80053a0:	f003 fe4a 	bl	8009038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80053a4:	200b      	movs	r0, #11
 80053a6:	f003 fe85 	bl	80090b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 10, 0);
 80053aa:	2200      	movs	r2, #0
 80053ac:	210a      	movs	r1, #10
 80053ae:	200c      	movs	r0, #12
 80053b0:	f003 fe42 	bl	8009038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80053b4:	200c      	movs	r0, #12
 80053b6:	f003 fe7d 	bl	80090b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 9, 0);
 80053ba:	2200      	movs	r2, #0
 80053bc:	2109      	movs	r1, #9
 80053be:	200d      	movs	r0, #13
 80053c0:	f003 fe3a 	bl	8009038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80053c4:	200d      	movs	r0, #13
 80053c6:	f003 fe75 	bl	80090b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 8, 0);
 80053ca:	2200      	movs	r2, #0
 80053cc:	2108      	movs	r1, #8
 80053ce:	200e      	movs	r0, #14
 80053d0:	f003 fe32 	bl	8009038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80053d4:	200e      	movs	r0, #14
 80053d6:	f003 fe6d 	bl	80090b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 7, 0);
 80053da:	2200      	movs	r2, #0
 80053dc:	2107      	movs	r1, #7
 80053de:	200f      	movs	r0, #15
 80053e0:	f003 fe2a 	bl	8009038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80053e4:	200f      	movs	r0, #15
 80053e6:	f003 fe65 	bl	80090b4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80053ea:	2200      	movs	r2, #0
 80053ec:	2010      	movs	r0, #16
 80053ee:	4611      	mov	r1, r2
 80053f0:	f003 fe22 	bl	8009038 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80053f4:	2010      	movs	r0, #16

}
 80053f6:	b002      	add	sp, #8
 80053f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80053fc:	f003 be5a 	b.w	80090b4 <HAL_NVIC_EnableIRQ>
 8005400:	58024400 	.word	0x58024400
 8005404:	00000000 	.word	0x00000000

08005408 <MX_FMC_Init>:

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005408:	481f      	ldr	r0, [pc, #124]	; (8005488 <MX_FMC_Init+0x80>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 800540a:	2201      	movs	r2, #1
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800540c:	2300      	movs	r3, #0
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800540e:	2108      	movs	r1, #8
{
 8005410:	b510      	push	{r4, lr}
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8005412:	4c1e      	ldr	r4, [pc, #120]	; (800548c <MX_FMC_Init+0x84>)
{
 8005414:	b088      	sub	sp, #32
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005416:	6082      	str	r2, [r0, #8]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005418:	2210      	movs	r2, #16
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_13;
 800541a:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_3;
 800541c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8005420:	6102      	str	r2, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8005422:	f44f 7280 	mov.w	r2, #256	; 0x100
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8005426:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8005428:	6283      	str	r3, [r0, #40]	; 0x28
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800542a:	e9c0 4300 	strd	r4, r3, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800542e:	2440      	movs	r4, #64	; 0x40
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8005430:	2306      	movs	r3, #6
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8005432:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8005436:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  SdramTiming.ExitSelfRefreshDelay = 6;
  SdramTiming.SelfRefreshTime = 4;
  SdramTiming.RowCycleDelay = 6;
  SdramTiming.WriteRecoveryTime = 2;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;
 800543a:	2402      	movs	r4, #2
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800543c:	e9c0 1208 	strd	r1, r2, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
 8005440:	2204      	movs	r2, #4

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8005442:	4669      	mov	r1, sp
  SdramTiming.RCDDelay = 2;
 8005444:	9406      	str	r4, [sp, #24]
  SdramTiming.LoadToActiveDelay = 2;
 8005446:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8005480 <MX_FMC_Init+0x78>
 800544a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800544e:	2202      	movs	r2, #2
 8005450:	2302      	movs	r3, #2
 8005452:	ed8d 7b00 	vstr	d7, [sp]
 8005456:	e9cd 2304 	strd	r2, r3, [sp, #16]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800545a:	f009 ff4d 	bl	800f2f8 <HAL_SDRAM_Init>
 800545e:	b928      	cbnz	r0, 800546c <MX_FMC_Init+0x64>
  {
    Error_Handler( );
  }

  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8005460:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005464:	f003 fdcc 	bl	8009000 <HAL_SetFMCMemorySwappingConfig>

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8005468:	b008      	add	sp, #32
 800546a:	bd10      	pop	{r4, pc}
    Error_Handler( );
 800546c:	f003 f89e 	bl	80085ac <Error_Handler>
  HAL_SetFMCMemorySwappingConfig(FMC_SWAPBMAP_SDRAM_SRAM);
 8005470:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8005474:	f003 fdc4 	bl	8009000 <HAL_SetFMCMemorySwappingConfig>
}
 8005478:	b008      	add	sp, #32
 800547a:	bd10      	pop	{r4, pc}
 800547c:	f3af 8000 	nop.w
 8005480:	00000002 	.word	0x00000002
 8005484:	00000006 	.word	0x00000006
 8005488:	2001303c 	.word	0x2001303c
 800548c:	52004140 	.word	0x52004140

08005490 <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if (FMC_Initialized) {
 8005490:	4836      	ldr	r0, [pc, #216]	; (800556c <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005492:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8005494:	b5d0      	push	{r4, r6, r7, lr}
 8005496:	b0b8      	sub	sp, #224	; 0xe0
  if (FMC_Initialized) {
 8005498:	6801      	ldr	r1, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800549a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800549e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80054a2:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
 80054a4:	b109      	cbz	r1, 80054aa <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80054a6:	b038      	add	sp, #224	; 0xe0
 80054a8:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
 80054aa:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054ac:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
 80054ae:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80054b0:	a80a      	add	r0, sp, #40	; 0x28
 80054b2:	f018 f80f 	bl	801d4d4 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80054b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054ba:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054bc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80054be:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80054c2:	f007 f907 	bl	800c6d4 <HAL_RCCEx_PeriphCLKConfig>
 80054c6:	2800      	cmp	r0, #0
 80054c8:	d14c      	bne.n	8005564 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
 80054ca:	4b29      	ldr	r3, [pc, #164]	; (8005570 <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80054cc:	f64f 003f 	movw	r0, #63551	; 0xf83f
 80054d0:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054d2:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
 80054d4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80054d8:	2600      	movs	r6, #0
 80054da:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 80054dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 80054e4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80054e8:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
 80054ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80054ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80054f2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054f4:	a902      	add	r1, sp, #8
 80054f6:	481f      	ldr	r0, [pc, #124]	; (8005574 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80054f8:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80054fa:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054fe:	f005 f9ef 	bl	800a8e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 8005502:	2219      	movs	r2, #25
 8005504:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005506:	a902      	add	r1, sp, #8
 8005508:	481b      	ldr	r0, [pc, #108]	; (8005578 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800550a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4;
 800550c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005510:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005514:	f005 f9e4 	bl	800a8e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8005518:	f248 1237 	movw	r2, #33079	; 0x8137
 800551c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800551e:	a902      	add	r1, sp, #8
 8005520:	4816      	ldr	r0, [pc, #88]	; (800557c <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005522:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8005524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005528:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800552c:	f005 f9d8 	bl	800a8e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8005530:	f64f 7283 	movw	r2, #65411	; 0xff83
 8005534:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005536:	a902      	add	r1, sp, #8
 8005538:	4811      	ldr	r0, [pc, #68]	; (8005580 <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800553a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800553c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005540:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005544:	f005 f9cc 	bl	800a8e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005548:	f24c 7203 	movw	r2, #50947	; 0xc703
 800554c:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800554e:	a902      	add	r1, sp, #8
 8005550:	480c      	ldr	r0, [pc, #48]	; (8005584 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005552:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8005554:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005558:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800555c:	f005 f9c0 	bl	800a8e0 <HAL_GPIO_Init>
}
 8005560:	b038      	add	sp, #224	; 0xe0
 8005562:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8005564:	f003 f822 	bl	80085ac <Error_Handler>
 8005568:	e7af      	b.n	80054ca <HAL_SDRAM_MspInit+0x3a>
 800556a:	bf00      	nop
 800556c:	20013038 	.word	0x20013038
 8005570:	58024400 	.word	0x58024400
 8005574:	58021400 	.word	0x58021400
 8005578:	58020800 	.word	0x58020800
 800557c:	58021800 	.word	0x58021800
 8005580:	58021000 	.word	0x58021000
 8005584:	58020c00 	.word	0x58020c00

08005588 <MX_GPIO_Init>:
     PA13 (JTMS/SWDIO)   ------> DEBUG_JTMS-SWDIO
     PA14 (JTCK/SWCLK)   ------> DEBUG_JTCK-SWCLK
     PB3 (JTDO/TRACESWO)   ------> DEBUG_JTDO-SWO
*/
void MX_GPIO_Init(void)
{
 8005588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800558c:	4b7e      	ldr	r3, [pc, #504]	; (8005788 <MX_GPIO_Init+0x200>)
{
 800558e:	b08e      	sub	sp, #56	; 0x38
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005590:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005592:	4f7e      	ldr	r7, [pc, #504]	; (800578c <MX_GPIO_Init+0x204>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8005594:	4e7e      	ldr	r6, [pc, #504]	; (8005790 <MX_GPIO_Init+0x208>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005596:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559a:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 800559c:	4638      	mov	r0, r7

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800559e:	4d7d      	ldr	r5, [pc, #500]	; (8005794 <MX_GPIO_Init+0x20c>)

  /*Configure GPIO pins : PC13 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80055a0:	f04f 0a01 	mov.w	sl, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PC14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80055a4:	f04f 0800 	mov.w	r8, #0
 80055a8:	f04f 0900 	mov.w	r9, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80055ac:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80055b0:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80055b4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80055b8:	f042 0210 	orr.w	r2, r2, #16
 80055bc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80055c0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80055c4:	f002 0210 	and.w	r2, r2, #16
 80055c8:	9200      	str	r2, [sp, #0]
 80055ca:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80055cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80055d0:	f042 0204 	orr.w	r2, r2, #4
 80055d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80055d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80055dc:	f002 0204 	and.w	r2, r2, #4
 80055e0:	9201      	str	r2, [sp, #4]
 80055e2:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80055e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80055e8:	f042 0220 	orr.w	r2, r2, #32
 80055ec:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80055f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80055f4:	f002 0220 	and.w	r2, r2, #32
 80055f8:	9202      	str	r2, [sp, #8]
 80055fa:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80055fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005600:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005604:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005608:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800560c:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005610:	9203      	str	r2, [sp, #12]
 8005612:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005614:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005618:	f042 0201 	orr.w	r2, r2, #1
 800561c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005620:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005624:	f002 0201 	and.w	r2, r2, #1
 8005628:	9204      	str	r2, [sp, #16]
 800562a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800562c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005630:	f042 0202 	orr.w	r2, r2, #2
 8005634:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005638:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800563c:	f002 0202 	and.w	r2, r2, #2
 8005640:	9205      	str	r2, [sp, #20]
 8005642:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005644:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005648:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800564c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8005650:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005654:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005658:	9206      	str	r2, [sp, #24]
 800565a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800565c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8005660:	f042 0208 	orr.w	r2, r2, #8
 8005664:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005668:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800566a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	9307      	str	r3, [sp, #28]
 8005674:	9b07      	ldr	r3, [sp, #28]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8005676:	f005 fa83 	bl	800ab80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800567a:	4622      	mov	r2, r4
 800567c:	4630      	mov	r0, r6
 800567e:	2102      	movs	r1, #2
 8005680:	f005 fa7e 	bl	800ab80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8005684:	4622      	mov	r2, r4
 8005686:	4628      	mov	r0, r5
 8005688:	2110      	movs	r1, #16
 800568a:	f005 fa79 	bl	800ab80 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800568e:	f242 0220 	movw	r2, #8224	; 0x2020
 8005692:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005694:	a908      	add	r1, sp, #32
 8005696:	4638      	mov	r0, r7
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005698:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_5;
 800569c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056a0:	f005 f91e 	bl	800a8e0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80056a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80056a8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056aa:	a908      	add	r1, sp, #32
 80056ac:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80056ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056b2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056b6:	f005 f913 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC1 PC2 PC6
                           PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80056ba:	f248 02c6 	movw	r2, #32966	; 0x80c6
 80056be:	2303      	movs	r3, #3
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056c0:	4638      	mov	r0, r7
 80056c2:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056c4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6
 80056c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80056ca:	f005 f909 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80056d2:	2303      	movs	r3, #3
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056d4:	a908      	add	r1, sp, #32
 80056d6:	4830      	ldr	r0, [pc, #192]	; (8005798 <MX_GPIO_Init+0x210>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80056da:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056de:	f005 f8ff 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056e2:	2201      	movs	r2, #1
 80056e4:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056e6:	a908      	add	r1, sp, #32
 80056e8:	4630      	mov	r0, r6
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80056ea:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80056ee:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056f2:	f005 f8f5 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80056f6:	2202      	movs	r2, #2
 80056f8:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056fa:	a908      	add	r1, sp, #32
 80056fc:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80056fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005702:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005706:	f005 f8eb 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 PA8 PA9
                           PA10 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 800570a:	f649 720c 	movw	r2, #40716	; 0x9f0c
 800570e:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005710:	4630      	mov	r0, r6
 8005712:	a908      	add	r1, sp, #32
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005714:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_8|GPIO_PIN_9
 8005716:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800571a:	f005 f8e1 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB2 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800571e:	f240 32e5 	movw	r2, #997	; 0x3e5
 8005722:	2303      	movs	r3, #3
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005724:	a908      	add	r1, sp, #32
 8005726:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005728:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6
 800572a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800572e:	f005 f8d7 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005732:	2202      	movs	r2, #2
 8005734:	2300      	movs	r3, #0
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005736:	a908      	add	r1, sp, #32
 8005738:	4628      	mov	r0, r5
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800573a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800573e:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005742:	f005 f8cd 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8005746:	f643 02f8 	movw	r2, #14584	; 0x38f8
 800574a:	2303      	movs	r3, #3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800574c:	a908      	add	r1, sp, #32
 800574e:	4813      	ldr	r0, [pc, #76]	; (800579c <MX_GPIO_Init+0x214>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005750:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_3
 8005752:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005756:	f005 f8c3 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG3 PG6 PG7 PG9
                           PG10 PG11 PG12 PG13
                           PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 800575a:	f647 62c8 	movw	r2, #32456	; 0x7ec8
 800575e:	2303      	movs	r3, #3
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005760:	a908      	add	r1, sp, #32
 8005762:	480f      	ldr	r0, [pc, #60]	; (80057a0 <MX_GPIO_Init+0x218>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005764:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9
 8005766:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800576a:	f005 f8b9 	bl	800a8e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800576e:	2210      	movs	r2, #16
 8005770:	2301      	movs	r3, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005772:	a908      	add	r1, sp, #32
 8005774:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005776:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 800577a:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800577e:	f005 f8af 	bl	800a8e0 <HAL_GPIO_Init>

}
 8005782:	b00e      	add	sp, #56	; 0x38
 8005784:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005788:	58024400 	.word	0x58024400
 800578c:	58020800 	.word	0x58020800
 8005790:	58020000 	.word	0x58020000
 8005794:	58020400 	.word	0x58020400
 8005798:	58021400 	.word	0x58021400
 800579c:	58020c00 	.word	0x58020c00
 80057a0:	58021800 	.word	0x58021800

080057a4 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80057a4:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80057a6:	4817      	ldr	r0, [pc, #92]	; (8005804 <MX_I2C2_Init+0x60>)
  hi2c2.Init.Timing = 0x00B03FDB;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057a8:	2300      	movs	r3, #0
 80057aa:	4917      	ldr	r1, [pc, #92]	; (8005808 <MX_I2C2_Init+0x64>)
 80057ac:	2401      	movs	r4, #1
 80057ae:	4a17      	ldr	r2, [pc, #92]	; (800580c <MX_I2C2_Init+0x68>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80057b0:	6203      	str	r3, [r0, #32]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80057b2:	e880 001e 	stmia.w	r0, {r1, r2, r3, r4}
  hi2c2.Init.OwnAddress2 = 0;
 80057b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80057ba:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80057be:	f005 faab 	bl	800ad18 <HAL_I2C_Init>
 80057c2:	b950      	cbnz	r0, 80057da <MX_I2C2_Init+0x36>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80057c4:	2100      	movs	r1, #0
 80057c6:	480f      	ldr	r0, [pc, #60]	; (8005804 <MX_I2C2_Init+0x60>)
 80057c8:	f006 f834 	bl	800b834 <HAL_I2CEx_ConfigAnalogFilter>
 80057cc:	b968      	cbnz	r0, 80057ea <MX_I2C2_Init+0x46>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80057ce:	2100      	movs	r1, #0
 80057d0:	480c      	ldr	r0, [pc, #48]	; (8005804 <MX_I2C2_Init+0x60>)
 80057d2:	f006 f863 	bl	800b89c <HAL_I2CEx_ConfigDigitalFilter>
 80057d6:	b980      	cbnz	r0, 80057fa <MX_I2C2_Init+0x56>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80057d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80057da:	f002 fee7 	bl	80085ac <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80057de:	2100      	movs	r1, #0
 80057e0:	4808      	ldr	r0, [pc, #32]	; (8005804 <MX_I2C2_Init+0x60>)
 80057e2:	f006 f827 	bl	800b834 <HAL_I2CEx_ConfigAnalogFilter>
 80057e6:	2800      	cmp	r0, #0
 80057e8:	d0f1      	beq.n	80057ce <MX_I2C2_Init+0x2a>
    Error_Handler();
 80057ea:	f002 fedf 	bl	80085ac <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80057ee:	2100      	movs	r1, #0
 80057f0:	4804      	ldr	r0, [pc, #16]	; (8005804 <MX_I2C2_Init+0x60>)
 80057f2:	f006 f853 	bl	800b89c <HAL_I2CEx_ConfigDigitalFilter>
 80057f6:	2800      	cmp	r0, #0
 80057f8:	d0ee      	beq.n	80057d8 <MX_I2C2_Init+0x34>
}
 80057fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 80057fe:	f002 bed5 	b.w	80085ac <Error_Handler>
 8005802:	bf00      	nop
 8005804:	20013070 	.word	0x20013070
 8005808:	40005800 	.word	0x40005800
 800580c:	00b03fdb 	.word	0x00b03fdb

08005810 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005810:	b510      	push	{r4, lr}
 8005812:	b0b8      	sub	sp, #224	; 0xe0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005814:	2100      	movs	r1, #0
{
 8005816:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005818:	22c0      	movs	r2, #192	; 0xc0
 800581a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800581c:	9106      	str	r1, [sp, #24]
 800581e:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005822:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005826:	f017 fe55 	bl	801d4d4 <memset>
  if(i2cHandle->Instance==I2C2)
 800582a:	4b27      	ldr	r3, [pc, #156]	; (80058c8 <HAL_I2C_MspInit+0xb8>)
 800582c:	6822      	ldr	r2, [r4, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d001      	beq.n	8005836 <HAL_I2C_MspInit+0x26>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005832:	b038      	add	sp, #224	; 0xe0
 8005834:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8005836:	2208      	movs	r2, #8
 8005838:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800583a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800583c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005840:	f006 ff48 	bl	800c6d4 <HAL_RCCEx_PeriphCLKConfig>
 8005844:	2800      	cmp	r0, #0
 8005846:	d138      	bne.n	80058ba <HAL_I2C_MspInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005848:	4c20      	ldr	r4, [pc, #128]	; (80058cc <HAL_I2C_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800584a:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800584c:	a902      	add	r1, sp, #8
 800584e:	4820      	ldr	r0, [pc, #128]	; (80058d0 <HAL_I2C_MspInit+0xc0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005850:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
 8005854:	f043 0302 	orr.w	r3, r3, #2
 8005858:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
 800585c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005860:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005862:	2201      	movs	r2, #1
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005864:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005868:	ed9f 7b15 	vldr	d7, [pc, #84]	; 80058c0 <HAL_I2C_MspInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800586c:	9300      	str	r3, [sp, #0]
 800586e:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005870:	2303      	movs	r3, #3
 8005872:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005876:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800587a:	f005 f831 	bl	800a8e0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800587e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 8005882:	2200      	movs	r2, #0
 8005884:	2101      	movs	r1, #1
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005886:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800588a:	2021      	movs	r0, #33	; 0x21
    __HAL_RCC_I2C2_CLK_ENABLE();
 800588c:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
 8005890:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
 8005894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 1, 0);
 800589c:	f003 fbcc 	bl	8009038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80058a0:	2021      	movs	r0, #33	; 0x21
 80058a2:	f003 fc07 	bl	80090b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 1, 0);
 80058a6:	2200      	movs	r2, #0
 80058a8:	2101      	movs	r1, #1
 80058aa:	2022      	movs	r0, #34	; 0x22
 80058ac:	f003 fbc4 	bl	8009038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80058b0:	2022      	movs	r0, #34	; 0x22
 80058b2:	f003 fbff 	bl	80090b4 <HAL_NVIC_EnableIRQ>
}
 80058b6:	b038      	add	sp, #224	; 0xe0
 80058b8:	bd10      	pop	{r4, pc}
      Error_Handler();
 80058ba:	f002 fe77 	bl	80085ac <Error_Handler>
 80058be:	e7c3      	b.n	8005848 <HAL_I2C_MspInit+0x38>
 80058c0:	00000c00 	.word	0x00000c00
 80058c4:	00000012 	.word	0x00000012
 80058c8:	40005800 	.word	0x40005800
 80058cc:	58024400 	.word	0x58024400
 80058d0:	58020400 	.word	0x58020400

080058d4 <scaleOscPitch>:
}

float __ATTR_ITCMRAM scaleOscPitch(float input)
{
	//input = LEAF_clip(0.0f, input, 1.0f);
	return (input * 48.0f) - 24.0f;
 80058d4:	eefb 7a08 	vmov.f32	s15, #184	; 0xc1c00000 -24.0
 80058d8:	ed9f 7a03 	vldr	s14, [pc, #12]	; 80058e8 <scaleOscPitch+0x14>
}
 80058dc:	eee0 7a07 	vfma.f32	s15, s0, s14
 80058e0:	eeb0 0a67 	vmov.f32	s0, s15
 80058e4:	4770      	bx	lr
 80058e6:	bf00      	nop
 80058e8:	42400000 	.word	0x42400000

080058ec <scaleOscFine>:

float __ATTR_ITCMRAM scaleOscFine(float input)
{
	//input = LEAF_clip(0.0f, input, 1.f);
	return (input * 200.0f) - 100.0f;
 80058ec:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005900 <scaleOscFine+0x14>
 80058f0:	eddf 7a04 	vldr	s15, [pc, #16]	; 8005904 <scaleOscFine+0x18>
}
 80058f4:	eee0 7a07 	vfma.f32	s15, s0, s14
 80058f8:	eeb0 0a67 	vmov.f32	s0, s15
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	43480000 	.word	0x43480000
 8005904:	c2c80000 	.word	0xc2c80000

08005908 <scaleOscFreq>:

float __ATTR_ITCMRAM scaleOscFreq(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 4000.0f) - 2000.0f;
 8005908:	ed9f 7a04 	vldr	s14, [pc, #16]	; 800591c <scaleOscFreq+0x14>
 800590c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8005920 <scaleOscFreq+0x18>
}
 8005910:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005914:	eeb0 0a67 	vmov.f32	s0, s15
 8005918:	4770      	bx	lr
 800591a:	bf00      	nop
 800591c:	457a0000 	.word	0x457a0000
 8005920:	c4fa0000 	.word	0xc4fa0000

08005924 <scaleFilterCutoff>:
}

float __ATTR_ITCMRAM scaleFilterCutoff(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return (input * 127.0f);
 8005924:	eddf 7a02 	vldr	s15, [pc, #8]	; 8005930 <scaleFilterCutoff+0xc>
}
 8005928:	ee20 0a27 	vmul.f32	s0, s0, s15
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	42fe0000 	.word	0x42fe0000

08005934 <scaleFinalLowpass>:
}

float __ATTR_ITCMRAM scaleFinalLowpass(float input)
{
	//input = LEAF_clip(0.f, input, 1.f);
	return ((input * 70.0f) + 58.0f);
 8005934:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8005948 <scaleFinalLowpass+0x14>
 8005938:	eddf 7a04 	vldr	s15, [pc, #16]	; 800594c <scaleFinalLowpass+0x18>
}
 800593c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005940:	eeb0 0a67 	vmov.f32	s0, s15
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	428c0000 	.word	0x428c0000
 800594c:	42680000 	.word	0x42680000

08005950 <blankFunction>:


void blankFunction(float a, int b, int c)
{
	;
}
 8005950:	4770      	bx	lr
 8005952:	bf00      	nop

08005954 <checkForSDCardPreset>:
{
 8005954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint8_t status = SD_PRESENT;
 8005958:	2301      	movs	r3, #1
{
 800595a:	b08a      	sub	sp, #40	; 0x28
 800595c:	4606      	mov	r6, r0
  __IO uint8_t status = SD_PRESENT;
 800595e:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 8005962:	f00b fd41 	bl	80113e8 <BSP_PlatformIsDetected>
 8005966:	b110      	cbz	r0, 800596e <checkForSDCardPreset+0x1a>
    status = SD_NOT_PRESENT;
 8005968:	2300      	movs	r3, #0
 800596a:	f88d 300b 	strb.w	r3, [sp, #11]
  return status;
 800596e:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 8005972:	b95b      	cbnz	r3, 800598c <checkForSDCardPreset+0x38>
 8005974:	4c39      	ldr	r4, [pc, #228]	; (8005a5c <checkForSDCardPreset+0x108>)
 8005976:	4d3a      	ldr	r5, [pc, #232]	; (8005a60 <checkForSDCardPreset+0x10c>)
		loadFailed = 1;
 8005978:	2301      	movs	r3, #1
 800597a:	2000      	movs	r0, #0
 800597c:	702b      	strb	r3, [r5, #0]
	presetWaitingToLoad = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	4a38      	ldr	r2, [pc, #224]	; (8005a64 <checkForSDCardPreset+0x110>)
 8005982:	6013      	str	r3, [r2, #0]
	diskBusy = 0;
 8005984:	7023      	strb	r3, [r4, #0]
}
 8005986:	b00a      	add	sp, #40	; 0x28
 8005988:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		loadFailed = 0;
 800598c:	2700      	movs	r7, #0
		diskBusy = 1;
 800598e:	f04f 0801 	mov.w	r8, #1
 8005992:	4c32      	ldr	r4, [pc, #200]	; (8005a5c <checkForSDCardPreset+0x108>)
		loadFailed = 0;
 8005994:	4d32      	ldr	r5, [pc, #200]	; (8005a60 <checkForSDCardPreset+0x10c>)
		disk_initialize(0);
 8005996:	4638      	mov	r0, r7
		diskBusy = 1;
 8005998:	f884 8000 	strb.w	r8, [r4]
		loadFailed = 0;
 800599c:	702f      	strb	r7, [r5, #0]
		disk_initialize(0);
 800599e:	f00b fdbd 	bl	801151c <disk_initialize>
	    disk_status(0);
 80059a2:	4638      	mov	r0, r7
 80059a4:	f00b fdb0 	bl	8011508 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 80059a8:	4642      	mov	r2, r8
 80059aa:	492f      	ldr	r1, [pc, #188]	; (8005a68 <checkForSDCardPreset+0x114>)
 80059ac:	482f      	ldr	r0, [pc, #188]	; (8005a6c <checkForSDCardPreset+0x118>)
 80059ae:	f00e f849 	bl	8013a44 <f_mount>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d1e0      	bne.n	8005978 <checkForSDCardPreset+0x24>
			itoa(numberToLoad, charBuf, 10);
 80059b6:	a904      	add	r1, sp, #16
 80059b8:	220a      	movs	r2, #10
 80059ba:	4630      	mov	r0, r6
 80059bc:	f017 fd7a 	bl	801d4b4 <itoa>
			int len = ((strlen(charBuf)));
 80059c0:	a804      	add	r0, sp, #16
 80059c2:	f7fa fc89 	bl	80002d8 <strlen>
			if (len == 1)
 80059c6:	4540      	cmp	r0, r8
			int len = ((strlen(charBuf)));
 80059c8:	4601      	mov	r1, r0
			if (len == 1)
 80059ca:	d02d      	beq.n	8005a28 <checkForSDCardPreset+0xd4>
				strcat(charBuf, ".ebp");
 80059cc:	ab04      	add	r3, sp, #16
 80059ce:	4e28      	ldr	r6, [pc, #160]	; (8005a70 <checkForSDCardPreset+0x11c>)
 80059d0:	f10d 0c10 	add.w	ip, sp, #16
				strcpy(finalString, charBuf);
 80059d4:	1d42      	adds	r2, r0, #5
				strcat(charBuf, ".ebp");
 80059d6:	181f      	adds	r7, r3, r0
 80059d8:	6830      	ldr	r0, [r6, #0]
				strcpy(finalString, charBuf);
 80059da:	ab07      	add	r3, sp, #28
				strcat(charBuf, ".ebp");
 80059dc:	f84c 0001 	str.w	r0, [ip, r1]
 80059e0:	7931      	ldrb	r1, [r6, #4]
				strcpy(finalString, charBuf);
 80059e2:	4618      	mov	r0, r3
				strcat(charBuf, ".ebp");
 80059e4:	7139      	strb	r1, [r7, #4]
				strcpy(finalString, charBuf);
 80059e6:	4661      	mov	r1, ip
 80059e8:	f017 fd66 	bl	801d4b8 <memcpy>
 80059ec:	4603      	mov	r3, r0
			res = f_findfirst(&dir, &fno, SDPath, finalString);
 80059ee:	4a1e      	ldr	r2, [pc, #120]	; (8005a68 <checkForSDCardPreset+0x114>)
 80059f0:	4920      	ldr	r1, [pc, #128]	; (8005a74 <checkForSDCardPreset+0x120>)
 80059f2:	4821      	ldr	r0, [pc, #132]	; (8005a78 <checkForSDCardPreset+0x124>)
 80059f4:	f00e fd96 	bl	8014524 <f_findfirst>
			if(res == FR_OK)
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d1bd      	bne.n	8005978 <checkForSDCardPreset+0x24>
				if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 80059fc:	4e1f      	ldr	r6, [pc, #124]	; (8005a7c <checkForSDCardPreset+0x128>)
 80059fe:	2211      	movs	r2, #17
 8005a00:	491f      	ldr	r1, [pc, #124]	; (8005a80 <checkForSDCardPreset+0x12c>)
 8005a02:	4630      	mov	r0, r6
 8005a04:	f00e f870 	bl	8013ae8 <f_open>
 8005a08:	2800      	cmp	r0, #0
 8005a0a:	d1b5      	bne.n	8005978 <checkForSDCardPreset+0x24>
					f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8005a0c:	ab03      	add	r3, sp, #12
 8005a0e:	68f2      	ldr	r2, [r6, #12]
 8005a10:	491c      	ldr	r1, [pc, #112]	; (8005a84 <checkForSDCardPreset+0x130>)
 8005a12:	4630      	mov	r0, r6
 8005a14:	f00e f9e6 	bl	8013de4 <f_read>
					presetWaitingToParse = bytesRead;
 8005a18:	9a03      	ldr	r2, [sp, #12]
 8005a1a:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <checkForSDCardPreset+0x134>)
					f_close(&SDFile);
 8005a1c:	4630      	mov	r0, r6
					presetWaitingToParse = bytesRead;
 8005a1e:	601a      	str	r2, [r3, #0]
					f_close(&SDFile);
 8005a20:	f00e fc74 	bl	801430c <f_close>
					found = 1;
 8005a24:	2001      	movs	r0, #1
 8005a26:	e7aa      	b.n	800597e <checkForSDCardPreset+0x2a>
				finalString[1] = charBuf[0];
 8005a28:	f89d 2010 	ldrb.w	r2, [sp, #16]
				strcat(finalString, ".ebp");
 8005a2c:	ab07      	add	r3, sp, #28
				finalString[2] = charBuf[1];
 8005a2e:	f89d 1011 	ldrb.w	r1, [sp, #17]
				finalString[1] = charBuf[0];
 8005a32:	f88d 201d 	strb.w	r2, [sp, #29]
				finalString[0] = '0';
 8005a36:	2230      	movs	r2, #48	; 0x30
				strcat(finalString, ".ebp");
 8005a38:	4618      	mov	r0, r3
				finalString[2] = charBuf[1];
 8005a3a:	f88d 101e 	strb.w	r1, [sp, #30]
				strcat(finalString, ".ebp");
 8005a3e:	9301      	str	r3, [sp, #4]
				finalString[0] = '0';
 8005a40:	f88d 201c 	strb.w	r2, [sp, #28]
				strcat(finalString, ".ebp");
 8005a44:	f7fa fc48 	bl	80002d8 <strlen>
 8005a48:	4909      	ldr	r1, [pc, #36]	; (8005a70 <checkForSDCardPreset+0x11c>)
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	9b01      	ldr	r3, [sp, #4]
 8005a4e:	181e      	adds	r6, r3, r0
 8005a50:	6808      	ldr	r0, [r1, #0]
 8005a52:	5098      	str	r0, [r3, r2]
 8005a54:	790a      	ldrb	r2, [r1, #4]
 8005a56:	7132      	strb	r2, [r6, #4]
 8005a58:	e7c9      	b.n	80059ee <checkForSDCardPreset+0x9a>
 8005a5a:	bf00      	nop
 8005a5c:	20013104 	.word	0x20013104
 8005a60:	200152b4 	.word	0x200152b4
 8005a64:	20016d4c 	.word	0x20016d4c
 8005a68:	20019bf0 	.word	0x20019bf0
 8005a6c:	2001978c 	.word	0x2001978c
 8005a70:	0801fa6c 	.word	0x0801fa6c
 8005a74:	20015168 	.word	0x20015168
 8005a78:	200130cc 	.word	0x200130cc
 8005a7c:	200199c0 	.word	0x200199c0
 8005a80:	2001517e 	.word	0x2001517e
 8005a84:	300001e0 	.word	0x300001e0
 8005a88:	20016d50 	.word	0x20016d50

08005a8c <scaleDefault>:
{
 8005a8c:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8005a90:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8005a9c <scaleDefault+0x10>
 8005a94:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005a98:	f011 bbda 	b.w	8017250 <LEAF_clip>
 8005a9c:	00000000 	.word	0x00000000

08005aa0 <scaleTranspose>:
{
 8005aa0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.f);
 8005aa4:	ed9f 0a07 	vldr	s0, [pc, #28]	; 8005ac4 <scaleTranspose+0x24>
 8005aa8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8005aac:	b508      	push	{r3, lr}
	input = LEAF_clip(0.0f, input, 1.f);
 8005aae:	f011 fbcf 	bl	8017250 <LEAF_clip>
	return (input * 96.0f) - 48.0f;
 8005ab2:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8005ac8 <scaleTranspose+0x28>
 8005ab6:	eddf 7a05 	vldr	s15, [pc, #20]	; 8005acc <scaleTranspose+0x2c>
}
 8005aba:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005abe:	eeb0 0a67 	vmov.f32	s0, s15
 8005ac2:	bd08      	pop	{r3, pc}
 8005ac4:	00000000 	.word	0x00000000
 8005ac8:	42c00000 	.word	0x42c00000
 8005acc:	c2400000 	.word	0xc2400000

08005ad0 <scalePitchBend>:
{
 8005ad0:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.f, input, 1.f);
 8005ad4:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005aec <scalePitchBend+0x1c>
 8005ad8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
{
 8005adc:	b508      	push	{r3, lr}
	input = LEAF_clip(0.f, input, 1.f);
 8005ade:	f011 fbb7 	bl	8017250 <LEAF_clip>
	return (input * 48.0f);
 8005ae2:	eddf 7a03 	vldr	s15, [pc, #12]	; 8005af0 <scalePitchBend+0x20>
}
 8005ae6:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005aea:	bd08      	pop	{r3, pc}
 8005aec:	00000000 	.word	0x00000000
 8005af0:	42400000 	.word	0x42400000

08005af4 <scaleFilterResonance>:
{
 8005af4:	b510      	push	{r4, lr}
 8005af6:	ed2d 8b04 	vpush	{d8-d9}
	input = LEAF_clip(0.1f, input, 1.0f);
 8005afa:	ed9f 9a21 	vldr	s18, [pc, #132]	; 8005b80 <scaleFilterResonance+0x8c>
{
 8005afe:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.1f, input, 1.0f);
 8005b02:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005b06:	eeb0 0a49 	vmov.f32	s0, s18
 8005b0a:	f011 fba1 	bl	8017250 <LEAF_clip>
 8005b0e:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8005b12:	ed9f 1a1c 	vldr	s2, [pc, #112]	; 8005b84 <scaleFilterResonance+0x90>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005b16:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8005b88 <scaleFilterResonance+0x94>
	input *= 2047.0f;
 8005b1a:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8005b1e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005b22:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8005b26:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005b2a:	1c63      	adds	r3, r4, #1
 8005b2c:	ee00 3a90 	vmov	s1, r3
 8005b30:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005b34:	f011 fb8c 	bl	8017250 <LEAF_clip>
 8005b38:	eebd 7ac0 	vcvt.s32.f32	s14, s0
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8005b3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b40:	4b12      	ldr	r3, [pc, #72]	; (8005b8c <scaleFilterResonance+0x98>)
	float inputFloat = (float)inputInt - input;
 8005b42:	ee78 0ac8 	vsub.f32	s1, s17, s16
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005b46:	ee17 2a10 	vmov	r2, s14
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8005b4a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b4e:	ee38 8a27 	vadd.f32	s16, s16, s15
 8005b52:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005b56:	edd4 7a00 	vldr	s15, [r4]
 8005b5a:	eeb0 0a49 	vmov.f32	s0, s18
 8005b5e:	ed93 7a00 	vldr	s14, [r3]
 8005b62:	ee38 8a68 	vsub.f32	s16, s16, s17
 8005b66:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8005b6a:	ee60 0a87 	vmul.f32	s1, s1, s14
 8005b6e:	eee7 0a88 	vfma.f32	s1, s15, s16
}
 8005b72:	ecbd 8b04 	vpop	{d8-d9}
 8005b76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return LEAF_clip(0.1f, (resTable[inputInt] * (1.0f - inputFloat)) + (resTable[nextPos] * inputFloat), 10.0f);
 8005b7a:	f011 bb69 	b.w	8017250 <LEAF_clip>
 8005b7e:	bf00      	nop
 8005b80:	3dcccccd 	.word	0x3dcccccd
 8005b84:	44ffe000 	.word	0x44ffe000
 8005b88:	00000000 	.word	0x00000000
 8005b8c:	20017158 	.word	0x20017158

08005b90 <scaleEnvTimes>:
{
 8005b90:	b510      	push	{r4, lr}
 8005b92:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8005b96:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8005c0c <scaleEnvTimes+0x7c>
{
 8005b9a:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 8005b9e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005ba2:	eeb0 0a68 	vmov.f32	s0, s17
 8005ba6:	f011 fb53 	bl	8017250 <LEAF_clip>
 8005baa:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8005bae:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005c10 <scaleEnvTimes+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005bb2:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8005bb6:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8005bba:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005bbe:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8005bc2:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005bc6:	1c63      	adds	r3, r4, #1
 8005bc8:	ee00 3a90 	vmov	s1, r3
 8005bcc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005bd0:	f011 fb3e 	bl	8017250 <LEAF_clip>
 8005bd4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8005bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <scaleEnvTimes+0x84>)
	float inputFloat = (float)inputInt - input;
 8005bde:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (envTimeTable[inputInt] * (1.0f - inputFloat)) + (envTimeTable[nextPos] * inputFloat);
 8005be2:	ee10 2a10 	vmov	r2, s0
 8005be6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005bea:	ee38 8a07 	vadd.f32	s16, s16, s14
 8005bee:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005bf2:	ed94 7a00 	vldr	s14, [r4]
 8005bf6:	ed93 0a00 	vldr	s0, [r3]
 8005bfa:	ee38 8a68 	vsub.f32	s16, s16, s17
 8005bfe:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8005c02:	eea7 0a08 	vfma.f32	s0, s14, s16
 8005c06:	ecbd 8b02 	vpop	{d8}
 8005c0a:	bd10      	pop	{r4, pc}
 8005c0c:	00000000 	.word	0x00000000
 8005c10:	44ffe000 	.word	0x44ffe000
 8005c14:	20013158 	.word	0x20013158

08005c18 <scaleLFORates>:
{
 8005c18:	b510      	push	{r4, lr}
 8005c1a:	ed2d 8b02 	vpush	{d8}
	input = LEAF_clip(0.0f, input, 1.0f);
 8005c1e:	eddf 8a1d 	vldr	s17, [pc, #116]	; 8005c94 <scaleLFORates+0x7c>
{
 8005c22:	eef0 0a40 	vmov.f32	s1, s0
	input = LEAF_clip(0.0f, input, 1.0f);
 8005c26:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8005c2a:	eeb0 0a68 	vmov.f32	s0, s17
 8005c2e:	f011 fb0f 	bl	8017250 <LEAF_clip>
 8005c32:	eeb0 8a40 	vmov.f32	s16, s0
	input *= 2047.0f;
 8005c36:	ed9f 1a18 	vldr	s2, [pc, #96]	; 8005c98 <scaleLFORates+0x80>
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005c3a:	eeb0 0a68 	vmov.f32	s0, s17
	input *= 2047.0f;
 8005c3e:	ee28 8a01 	vmul.f32	s16, s16, s2
	int inputInt = (int)input;
 8005c42:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005c46:	ee17 4a90 	vmov	r4, s15
	float inputFloat = (float)inputInt - input;
 8005c4a:	eef8 8ae7 	vcvt.f32.s32	s17, s15
	int nextPos = LEAF_clip(0, inputInt + 1, 2047);
 8005c4e:	1c63      	adds	r3, r4, #1
 8005c50:	ee00 3a90 	vmov	s1, r3
 8005c54:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005c58:	f011 fafa 	bl	8017250 <LEAF_clip>
 8005c5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8005c60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c64:	4b0d      	ldr	r3, [pc, #52]	; (8005c9c <scaleLFORates+0x84>)
	float inputFloat = (float)inputInt - input;
 8005c66:	ee78 7ac8 	vsub.f32	s15, s17, s16
	return (lfoRateTable[inputInt] * (1.0f - inputFloat)) + (lfoRateTable[nextPos] * inputFloat);
 8005c6a:	ee10 2a10 	vmov	r2, s0
 8005c6e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005c72:	ee38 8a07 	vadd.f32	s16, s16, s14
 8005c76:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005c7a:	ed94 7a00 	vldr	s14, [r4]
 8005c7e:	ed93 0a00 	vldr	s0, [r3]
 8005c82:	ee38 8a68 	vsub.f32	s16, s16, s17
 8005c86:	ee27 0a80 	vmul.f32	s0, s15, s0
}
 8005c8a:	eea7 0a08 	vfma.f32	s0, s14, s16
 8005c8e:	ecbd 8b02 	vpop	{d8}
 8005c92:	bd10      	pop	{r4, pc}
 8005c94:	00000000 	.word	0x00000000
 8005c98:	44ffe000 	.word	0x44ffe000
 8005c9c:	2407b3c0 	.word	0x2407b3c0

08005ca0 <SystemClock_Config>:
{
 8005ca0:	b500      	push	{lr}
 8005ca2:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005ca4:	224c      	movs	r2, #76	; 0x4c
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	a80c      	add	r0, sp, #48	; 0x30
 8005caa:	f017 fc13 	bl	801d4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cae:	2220      	movs	r2, #32
 8005cb0:	2100      	movs	r1, #0
 8005cb2:	a804      	add	r0, sp, #16
 8005cb4:	f017 fc0e 	bl	801d4d4 <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8005cb8:	2002      	movs	r0, #2
 8005cba:	f005 fe21 	bl	800b900 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005cbe:	4b40      	ldr	r3, [pc, #256]	; (8005dc0 <SystemClock_Config+0x120>)
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4a40      	ldr	r2, [pc, #256]	; (8005dc4 <SystemClock_Config+0x124>)
 8005cc4:	9101      	str	r1, [sp, #4]
 8005cc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cc8:	f021 0101 	bic.w	r1, r1, #1
 8005ccc:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f003 0301 	and.w	r3, r3, #1
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	6993      	ldr	r3, [r2, #24]
 8005cd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005cdc:	6193      	str	r3, [r2, #24]
 8005cde:	6993      	ldr	r3, [r2, #24]
 8005ce0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005ce4:	9301      	str	r3, [sp, #4]
 8005ce6:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005ce8:	6993      	ldr	r3, [r2, #24]
 8005cea:	0499      	lsls	r1, r3, #18
 8005cec:	d5fc      	bpl.n	8005ce8 <SystemClock_Config+0x48>
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cee:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <SystemClock_Config+0x128>)
 8005cf0:	f8d3 10f4 	ldr.w	r1, [r3, #244]	; 0xf4
 8005cf4:	f041 0102 	orr.w	r1, r1, #2
 8005cf8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005cfc:	2100      	movs	r1, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005d02:	f003 0302 	and.w	r3, r3, #2
 8005d06:	9302      	str	r3, [sp, #8]
 8005d08:	9b02      	ldr	r3, [sp, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005d0a:	9103      	str	r1, [sp, #12]
 8005d0c:	6991      	ldr	r1, [r2, #24]
 8005d0e:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <SystemClock_Config+0x120>)
 8005d10:	f441 4140 	orr.w	r1, r1, #49152	; 0xc000
 8005d14:	6191      	str	r1, [r2, #24]
 8005d16:	6992      	ldr	r2, [r2, #24]
 8005d18:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8005d1c:	9203      	str	r2, [sp, #12]
 8005d1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005d20:	4a28      	ldr	r2, [pc, #160]	; (8005dc4 <SystemClock_Config+0x124>)
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8005d22:	f041 0101 	orr.w	r1, r1, #1
 8005d26:	62d9      	str	r1, [r3, #44]	; 0x2c
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	9303      	str	r3, [sp, #12]
 8005d30:	9b03      	ldr	r3, [sp, #12]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8005d32:	6993      	ldr	r3, [r2, #24]
 8005d34:	049b      	lsls	r3, r3, #18
 8005d36:	d5fc      	bpl.n	8005d32 <SystemClock_Config+0x92>
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005d38:	4a23      	ldr	r2, [pc, #140]	; (8005dc8 <SystemClock_Config+0x128>)
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005d3a:	2101      	movs	r1, #1
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d3c:	a80c      	add	r0, sp, #48	; 0x30
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8005d3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8005d40:	f023 0303 	bic.w	r3, r3, #3
 8005d44:	f043 0302 	orr.w	r3, r3, #2
 8005d48:	6293      	str	r3, [r2, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d4a:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005d4c:	9112      	str	r1, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005d4e:	2105      	movs	r1, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8005d50:	2200      	movs	r2, #0
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005d52:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 5;
 8005d54:	9117      	str	r1, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005d56:	21c0      	movs	r1, #192	; 0xc0
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8005d58:	921e      	str	r2, [sp, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLN = 192;
 8005d5a:	9118      	str	r1, [sp, #96]	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005d5c:	ed9f 7b12 	vldr	d7, [pc, #72]	; 8005da8 <SystemClock_Config+0x108>
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d60:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005d64:	e9cd 3319 	strd	r3, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005d68:	2308      	movs	r3, #8
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8005d6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8005d6e:	e9cd 321c 	strd	r3, r2, [sp, #112]	; 0x70
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d72:	f005 fe6d 	bl	800ba50 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d76:	2200      	movs	r2, #0
 8005d78:	2308      	movs	r3, #8
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005d7a:	2104      	movs	r1, #4
 8005d7c:	a804      	add	r0, sp, #16
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8005db0 <SystemClock_Config+0x110>
 8005d82:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d8a:	2340      	movs	r3, #64	; 0x40
 8005d8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d90:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8005db8 <SystemClock_Config+0x118>
 8005d94:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005d98:	ed8d 7b08 	vstr	d7, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8005d9c:	f006 f9ea 	bl	800c174 <HAL_RCC_ClockConfig>
}
 8005da0:	b021      	add	sp, #132	; 0x84
 8005da2:	f85d fb04 	ldr.w	pc, [sp], #4
 8005da6:	bf00      	nop
 8005da8:	00000021 	.word	0x00000021
 8005dac:	00010000 	.word	0x00010000
 8005db0:	0000003f 	.word	0x0000003f
 8005db4:	00000003 	.word	0x00000003
 8005db8:	00000040 	.word	0x00000040
 8005dbc:	00000040 	.word	0x00000040
 8005dc0:	58000400 	.word	0x58000400
 8005dc4:	58024800 	.word	0x58024800
 8005dc8:	58024400 	.word	0x58024400
 8005dcc:	00000000 	.word	0x00000000

08005dd0 <PeriphCommonClock_Config>:
{
 8005dd0:	b500      	push	{lr}
 8005dd2:	b0b1      	sub	sp, #196	; 0xc4
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005dd4:	22a4      	movs	r2, #164	; 0xa4
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	a807      	add	r0, sp, #28
 8005dda:	f017 fb7b 	bl	801d4d4 <memset>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005dde:	2019      	movs	r0, #25
 8005de0:	f44f 71ac 	mov.w	r1, #344	; 0x158
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005de4:	2302      	movs	r3, #2
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005de6:	2201      	movs	r2, #1
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8005de8:	9306      	str	r3, [sp, #24]
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005dea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005dee:	9216      	str	r2, [sp, #88]	; 0x58
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8005df0:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8005df2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8005e18 <PeriphCommonClock_Config+0x48>
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005df6:	e9cd 0102 	strd	r0, r1, [sp, #8]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8005dfa:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005dfe:	4668      	mov	r0, sp
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_SAI1
 8005e00:	ed8d 7b00 	vstr	d7, [sp]
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005e04:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8005e20 <PeriphCommonClock_Config+0x50>
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8005e08:	9114      	str	r1, [sp, #80]	; 0x50
  PeriphClkInitStruct.PLL2.PLL2M = 25;
 8005e0a:	ed8d 7b04 	vstr	d7, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e0e:	f006 fc61 	bl	800c6d4 <HAL_RCCEx_PeriphCLKConfig>
}
 8005e12:	b031      	add	sp, #196	; 0xc4
 8005e14:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e18:	00011100 	.word	0x00011100
 8005e1c:	00000000 	.word	0x00000000
 8005e20:	00000007 	.word	0x00000007
 8005e24:	00000002 	.word	0x00000002

08005e28 <randomNumber>:
float randomNumber(void) {
 8005e28:	b500      	push	{lr}
 8005e2a:	b083      	sub	sp, #12
	HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 8005e2c:	4807      	ldr	r0, [pc, #28]	; (8005e4c <randomNumber+0x24>)
 8005e2e:	a901      	add	r1, sp, #4
 8005e30:	f007 fe78 	bl	800db24 <HAL_RNG_GenerateRandomNumber>
	float num = (float)rand * INV_TWO_TO_32;
 8005e34:	eddd 7a01 	vldr	s15, [sp, #4]
 8005e38:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8005e50 <randomNumber+0x28>
 8005e3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8005e40:	ee27 0a80 	vmul.f32	s0, s15, s0
 8005e44:	b003      	add	sp, #12
 8005e46:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e4a:	bf00      	nop
 8005e4c:	2001915c 	.word	0x2001915c
 8005e50:	2f80000d 	.word	0x2f80000d

08005e54 <BSP_SD_IsDetected>:
{
 8005e54:	b500      	push	{lr}
  __IO uint8_t status = SD_PRESENT;
 8005e56:	2301      	movs	r3, #1
{
 8005e58:	b083      	sub	sp, #12
  __IO uint8_t status = SD_PRESENT;
 8005e5a:	f88d 3007 	strb.w	r3, [sp, #7]
  if (BSP_PlatformIsDetected() != 0x0)
 8005e5e:	f00b fac3 	bl	80113e8 <BSP_PlatformIsDetected>
 8005e62:	b110      	cbz	r0, 8005e6a <BSP_SD_IsDetected+0x16>
    status = SD_NOT_PRESENT;
 8005e64:	2300      	movs	r3, #0
 8005e66:	f88d 3007 	strb.w	r3, [sp, #7]
  return status;
 8005e6a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 8005e6e:	b003      	add	sp, #12
 8005e70:	f85d fb04 	ldr.w	pc, [sp], #4

08005e74 <getPresetNamesFromSDCard>:
{
 8005e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __IO uint8_t status = SD_PRESENT;
 8005e78:	2301      	movs	r3, #1
{
 8005e7a:	b089      	sub	sp, #36	; 0x24
  __IO uint8_t status = SD_PRESENT;
 8005e7c:	f88d 3003 	strb.w	r3, [sp, #3]
  if (BSP_PlatformIsDetected() != 0x0)
 8005e80:	f00b fab2 	bl	80113e8 <BSP_PlatformIsDetected>
 8005e84:	b110      	cbz	r0, 8005e8c <getPresetNamesFromSDCard+0x18>
    status = SD_NOT_PRESENT;
 8005e86:	2300      	movs	r3, #0
 8005e88:	f88d 3003 	strb.w	r3, [sp, #3]
  return status;
 8005e8c:	f89d 3003 	ldrb.w	r3, [sp, #3]
	if(BSP_SD_IsDetected())
 8005e90:	b93b      	cbnz	r3, 8005ea2 <getPresetNamesFromSDCard+0x2e>
 8005e92:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8005ef0 <getPresetNamesFromSDCard+0x7c>
	diskBusy = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	f88a 3000 	strb.w	r3, [sl]
}
 8005e9c:	b009      	add	sp, #36	; 0x24
 8005e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		loadFailed = 0;
 8005ea2:	2400      	movs	r4, #0
 8005ea4:	4b0d      	ldr	r3, [pc, #52]	; (8005edc <getPresetNamesFromSDCard+0x68>)
		diskBusy = 1;
 8005ea6:	2501      	movs	r5, #1
 8005ea8:	f8df a044 	ldr.w	sl, [pc, #68]	; 8005ef0 <getPresetNamesFromSDCard+0x7c>
		disk_initialize(0);
 8005eac:	4620      	mov	r0, r4
		loadFailed = 0;
 8005eae:	701c      	strb	r4, [r3, #0]
		diskBusy = 1;
 8005eb0:	f88a 5000 	strb.w	r5, [sl]
		disk_initialize(0);
 8005eb4:	f00b fb32 	bl	801151c <disk_initialize>
	    disk_status(0);
 8005eb8:	4620      	mov	r0, r4
 8005eba:	f00b fb25 	bl	8011508 <disk_status>
		if(f_mount(&SDFatFS,  SDPath, 1) == FR_OK)
 8005ebe:	462a      	mov	r2, r5
 8005ec0:	4907      	ldr	r1, [pc, #28]	; (8005ee0 <getPresetNamesFromSDCard+0x6c>)
 8005ec2:	4808      	ldr	r0, [pc, #32]	; (8005ee4 <getPresetNamesFromSDCard+0x70>)
 8005ec4:	f00d fdbe 	bl	8013a44 <f_mount>
 8005ec8:	2800      	cmp	r0, #0
 8005eca:	d1e4      	bne.n	8005e96 <getPresetNamesFromSDCard+0x22>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8005ecc:	4605      	mov	r5, r0
 8005ece:	4e06      	ldr	r6, [pc, #24]	; (8005ee8 <getPresetNamesFromSDCard+0x74>)
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005ed0:	f8df 900c 	ldr.w	r9, [pc, #12]	; 8005ee0 <getPresetNamesFromSDCard+0x6c>
 8005ed4:	f8df 801c 	ldr.w	r8, [pc, #28]	; 8005ef4 <getPresetNamesFromSDCard+0x80>
 8005ed8:	4f04      	ldr	r7, [pc, #16]	; (8005eec <getPresetNamesFromSDCard+0x78>)
 8005eda:	e023      	b.n	8005f24 <getPresetNamesFromSDCard+0xb0>
 8005edc:	200152b4 	.word	0x200152b4
 8005ee0:	20019bf0 	.word	0x20019bf0
 8005ee4:	2001978c 	.word	0x2001978c
 8005ee8:	0801fa6c 	.word	0x0801fa6c
 8005eec:	200130cc 	.word	0x200130cc
 8005ef0:	20013104 	.word	0x20013104
 8005ef4:	20015168 	.word	0x20015168
					strcat(charBuf, ".ebp");
 8005ef8:	ab02      	add	r3, sp, #8
 8005efa:	6830      	ldr	r0, [r6, #0]
 8005efc:	ac02      	add	r4, sp, #8
 8005efe:	1899      	adds	r1, r3, r2
 8005f00:	7933      	ldrb	r3, [r6, #4]
 8005f02:	50a0      	str	r0, [r4, r2]
					strcpy(finalString, charBuf);
 8005f04:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 8005f06:	710b      	strb	r3, [r1, #4]
					strcpy(finalString, charBuf);
 8005f08:	a805      	add	r0, sp, #20
 8005f0a:	4621      	mov	r1, r4
 8005f0c:	f017 fad4 	bl	801d4b8 <memcpy>
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005f10:	ab05      	add	r3, sp, #20
 8005f12:	464a      	mov	r2, r9
 8005f14:	4641      	mov	r1, r8
 8005f16:	4638      	mov	r0, r7
 8005f18:	f00e fb04 	bl	8014524 <f_findfirst>
				if(res == FR_OK)
 8005f1c:	b358      	cbz	r0, 8005f76 <getPresetNamesFromSDCard+0x102>
			for(int i = 0; i < MAX_NUM_PRESETS; i++)
 8005f1e:	3501      	adds	r5, #1
 8005f20:	2d40      	cmp	r5, #64	; 0x40
 8005f22:	d0b8      	beq.n	8005e96 <getPresetNamesFromSDCard+0x22>
				itoa(i, charBuf, 10);
 8005f24:	220a      	movs	r2, #10
 8005f26:	a902      	add	r1, sp, #8
 8005f28:	4628      	mov	r0, r5
 8005f2a:	f017 fac3 	bl	801d4b4 <itoa>
				int len = ((strlen(charBuf)));
 8005f2e:	a802      	add	r0, sp, #8
 8005f30:	f7fa f9d2 	bl	80002d8 <strlen>
				if (len == 1)
 8005f34:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 8005f36:	4602      	mov	r2, r0
				if (len == 1)
 8005f38:	d1de      	bne.n	8005ef8 <getPresetNamesFromSDCard+0x84>
					finalString[2] = charBuf[1];
 8005f3a:	f89d 1009 	ldrb.w	r1, [sp, #9]
					finalString[0] = '0';
 8005f3e:	2330      	movs	r3, #48	; 0x30
					finalString[1] = charBuf[0];
 8005f40:	f89d 2008 	ldrb.w	r2, [sp, #8]
					strcat(finalString, ".ebp");
 8005f44:	a805      	add	r0, sp, #20
					finalString[2] = charBuf[1];
 8005f46:	f88d 1016 	strb.w	r1, [sp, #22]
					finalString[1] = charBuf[0];
 8005f4a:	f88d 2015 	strb.w	r2, [sp, #21]
					finalString[0] = '0';
 8005f4e:	f88d 3014 	strb.w	r3, [sp, #20]
					strcat(finalString, ".ebp");
 8005f52:	f7fa f9c1 	bl	80002d8 <strlen>
 8005f56:	aa05      	add	r2, sp, #20
 8005f58:	4603      	mov	r3, r0
 8005f5a:	a905      	add	r1, sp, #20
 8005f5c:	4402      	add	r2, r0
 8005f5e:	6830      	ldr	r0, [r6, #0]
 8005f60:	50c8      	str	r0, [r1, r3]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005f62:	4641      	mov	r1, r8
					strcat(finalString, ".ebp");
 8005f64:	7933      	ldrb	r3, [r6, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005f66:	4638      	mov	r0, r7
					strcat(finalString, ".ebp");
 8005f68:	7113      	strb	r3, [r2, #4]
				res = f_findfirst(&dir, &fno, SDPath, finalString);
 8005f6a:	ab05      	add	r3, sp, #20
 8005f6c:	464a      	mov	r2, r9
 8005f6e:	f00e fad9 	bl	8014524 <f_findfirst>
				if(res == FR_OK)
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d1d3      	bne.n	8005f1e <getPresetNamesFromSDCard+0xaa>
					if(f_open(&SDFile, fno.fname, FA_OPEN_ALWAYS | FA_READ) == FR_OK)
 8005f76:	f8df b3d4 	ldr.w	fp, [pc, #980]	; 800634c <getPresetNamesFromSDCard+0x4d8>
 8005f7a:	2211      	movs	r2, #17
 8005f7c:	49ef      	ldr	r1, [pc, #956]	; (800633c <getPresetNamesFromSDCard+0x4c8>)
 8005f7e:	4658      	mov	r0, fp
 8005f80:	f00d fdb2 	bl	8013ae8 <f_open>
 8005f84:	2800      	cmp	r0, #0
 8005f86:	d1ca      	bne.n	8005f1e <getPresetNamesFromSDCard+0xaa>
						f_read(&SDFile, &buffer, f_size(&SDFile), &bytesRead);
 8005f88:	4ced      	ldr	r4, [pc, #948]	; (8006340 <getPresetNamesFromSDCard+0x4cc>)
 8005f8a:	ab01      	add	r3, sp, #4
 8005f8c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8005f90:	4658      	mov	r0, fp
 8005f92:	4621      	mov	r1, r4
 8005f94:	f00d ff26 	bl	8013de4 <f_read>
						f_close(&SDFile);
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f00e f9b7 	bl	801430c <f_close>
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005f9e:	7823      	ldrb	r3, [r4, #0]
 8005fa0:	ebc5 01c5 	rsb	r1, r5, r5, lsl #3
 8005fa4:	4ae7      	ldr	r2, [pc, #924]	; (8006344 <getPresetNamesFromSDCard+0x4d0>)
 8005fa6:	f894 c001 	ldrb.w	ip, [r4, #1]
 8005faa:	f802 3011 	strb.w	r3, [r2, r1, lsl #1]
 8005fae:	eb02 0241 	add.w	r2, r2, r1, lsl #1
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8005fb2:	48e5      	ldr	r0, [pc, #916]	; (8006348 <getPresetNamesFromSDCard+0x4d4>)
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005fb4:	f882 c001 	strb.w	ip, [r2, #1]
 8005fb8:	f894 c002 	ldrb.w	ip, [r4, #2]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 8005fbc:	eb00 1301 	add.w	r3, r0, r1, lsl #4
 8005fc0:	0109      	lsls	r1, r1, #4
							presetNamesArray[i][j] = buffer[bufferIndex];
 8005fc2:	f882 c002 	strb.w	ip, [r2, #2]
 8005fc6:	f894 c003 	ldrb.w	ip, [r4, #3]
 8005fca:	f882 c003 	strb.w	ip, [r2, #3]
 8005fce:	f894 c004 	ldrb.w	ip, [r4, #4]
 8005fd2:	f882 c004 	strb.w	ip, [r2, #4]
 8005fd6:	f894 c005 	ldrb.w	ip, [r4, #5]
 8005fda:	f882 c005 	strb.w	ip, [r2, #5]
 8005fde:	f894 c006 	ldrb.w	ip, [r4, #6]
 8005fe2:	f882 c006 	strb.w	ip, [r2, #6]
 8005fe6:	f894 c007 	ldrb.w	ip, [r4, #7]
 8005fea:	f882 c007 	strb.w	ip, [r2, #7]
 8005fee:	f894 c008 	ldrb.w	ip, [r4, #8]
 8005ff2:	f882 c008 	strb.w	ip, [r2, #8]
 8005ff6:	f894 c009 	ldrb.w	ip, [r4, #9]
 8005ffa:	f882 c009 	strb.w	ip, [r2, #9]
 8005ffe:	f894 c00a 	ldrb.w	ip, [r4, #10]
 8006002:	f882 c00a 	strb.w	ip, [r2, #10]
 8006006:	f894 c00b 	ldrb.w	ip, [r4, #11]
 800600a:	f882 c00b 	strb.w	ip, [r2, #11]
 800600e:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8006012:	f882 c00c 	strb.w	ip, [r2, #12]
 8006016:	f894 c00d 	ldrb.w	ip, [r4, #13]
 800601a:	f882 c00d 	strb.w	ip, [r2, #13]
								macroNamesArray[i][j][k] = buffer[bufferIndex];
 800601e:	7ba2      	ldrb	r2, [r4, #14]
 8006020:	5442      	strb	r2, [r0, r1]
 8006022:	7be2      	ldrb	r2, [r4, #15]
 8006024:	705a      	strb	r2, [r3, #1]
 8006026:	7c22      	ldrb	r2, [r4, #16]
 8006028:	709a      	strb	r2, [r3, #2]
 800602a:	7c62      	ldrb	r2, [r4, #17]
 800602c:	70da      	strb	r2, [r3, #3]
 800602e:	7ca2      	ldrb	r2, [r4, #18]
 8006030:	711a      	strb	r2, [r3, #4]
 8006032:	7ce2      	ldrb	r2, [r4, #19]
 8006034:	715a      	strb	r2, [r3, #5]
 8006036:	7d22      	ldrb	r2, [r4, #20]
 8006038:	719a      	strb	r2, [r3, #6]
 800603a:	7d62      	ldrb	r2, [r4, #21]
 800603c:	71da      	strb	r2, [r3, #7]
 800603e:	7da2      	ldrb	r2, [r4, #22]
 8006040:	721a      	strb	r2, [r3, #8]
 8006042:	7de2      	ldrb	r2, [r4, #23]
 8006044:	725a      	strb	r2, [r3, #9]
 8006046:	7e22      	ldrb	r2, [r4, #24]
 8006048:	729a      	strb	r2, [r3, #10]
 800604a:	7e62      	ldrb	r2, [r4, #25]
 800604c:	72da      	strb	r2, [r3, #11]
 800604e:	7ea2      	ldrb	r2, [r4, #26]
 8006050:	731a      	strb	r2, [r3, #12]
 8006052:	7ee2      	ldrb	r2, [r4, #27]
 8006054:	735a      	strb	r2, [r3, #13]
 8006056:	7f22      	ldrb	r2, [r4, #28]
 8006058:	739a      	strb	r2, [r3, #14]
 800605a:	7f62      	ldrb	r2, [r4, #29]
 800605c:	73da      	strb	r2, [r3, #15]
 800605e:	7fa2      	ldrb	r2, [r4, #30]
 8006060:	741a      	strb	r2, [r3, #16]
 8006062:	7fe2      	ldrb	r2, [r4, #31]
 8006064:	745a      	strb	r2, [r3, #17]
 8006066:	f894 2020 	ldrb.w	r2, [r4, #32]
 800606a:	749a      	strb	r2, [r3, #18]
 800606c:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
 8006070:	74da      	strb	r2, [r3, #19]
 8006072:	f894 2022 	ldrb.w	r2, [r4, #34]	; 0x22
 8006076:	751a      	strb	r2, [r3, #20]
 8006078:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 800607c:	755a      	strb	r2, [r3, #21]
 800607e:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006082:	759a      	strb	r2, [r3, #22]
 8006084:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8006088:	75da      	strb	r2, [r3, #23]
 800608a:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 800608e:	761a      	strb	r2, [r3, #24]
 8006090:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8006094:	765a      	strb	r2, [r3, #25]
 8006096:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800609a:	769a      	strb	r2, [r3, #26]
 800609c:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80060a0:	76da      	strb	r2, [r3, #27]
 80060a2:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 80060a6:	771a      	strb	r2, [r3, #28]
 80060a8:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 80060ac:	775a      	strb	r2, [r3, #29]
 80060ae:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80060b2:	779a      	strb	r2, [r3, #30]
 80060b4:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80060b8:	77da      	strb	r2, [r3, #31]
 80060ba:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80060be:	f883 2020 	strb.w	r2, [r3, #32]
 80060c2:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
 80060c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
 80060ca:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80060ce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80060d2:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 80060d6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
 80060da:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
 80060de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80060e2:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
 80060e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
 80060ea:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80060ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 80060f2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80060f6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
 80060fa:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
 80060fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8006102:	f894 2037 	ldrb.w	r2, [r4, #55]	; 0x37
 8006106:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 800610a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 800610e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8006112:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8006116:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
 800611a:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 800611e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8006122:	f894 203b 	ldrb.w	r2, [r4, #59]	; 0x3b
 8006126:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 800612a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
 800612e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 8006132:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8006136:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800613a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 800613e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006142:	f894 203f 	ldrb.w	r2, [r4, #63]	; 0x3f
 8006146:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
 800614a:	f894 2040 	ldrb.w	r2, [r4, #64]	; 0x40
 800614e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 8006152:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 8006156:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
 800615a:	f894 2042 	ldrb.w	r2, [r4, #66]	; 0x42
 800615e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8006162:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800616a:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
 800616e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 8006172:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
 8006176:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
 800617a:	f894 2046 	ldrb.w	r2, [r4, #70]	; 0x46
 800617e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8006182:	f894 2047 	ldrb.w	r2, [r4, #71]	; 0x47
 8006186:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800618a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
 800618e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8006192:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
 8006196:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800619a:	f894 204a 	ldrb.w	r2, [r4, #74]	; 0x4a
 800619e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061a2:	f894 204b 	ldrb.w	r2, [r4, #75]	; 0x4b
 80061a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80061aa:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061b2:	f894 204d 	ldrb.w	r2, [r4, #77]	; 0x4d
 80061b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061ba:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c2:	f894 204f 	ldrb.w	r2, [r4, #79]	; 0x4f
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061ca:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061d2:	f894 2051 	ldrb.w	r2, [r4, #81]	; 0x51
 80061d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061da:	f894 2052 	ldrb.w	r2, [r4, #82]	; 0x52
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061e2:	f894 2053 	ldrb.w	r2, [r4, #83]	; 0x53
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061ea:	f894 2054 	ldrb.w	r2, [r4, #84]	; 0x54
 80061ee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061f2:	f894 2055 	ldrb.w	r2, [r4, #85]	; 0x55
 80061f6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
 80061fa:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 80061fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8006202:	f894 2057 	ldrb.w	r2, [r4, #87]	; 0x57
 8006206:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 800620a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 800620e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8006212:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8006216:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 800621a:	f894 205a 	ldrb.w	r2, [r4, #90]	; 0x5a
 800621e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
 8006222:	f894 205b 	ldrb.w	r2, [r4, #91]	; 0x5b
 8006226:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800622a:	f894 205c 	ldrb.w	r2, [r4, #92]	; 0x5c
 800622e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 8006232:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8006236:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
 800623a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 800623e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8006242:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
 8006246:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 800624a:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
 800624e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 8006252:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
 8006256:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 800625a:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 800625e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8006262:	f894 2063 	ldrb.w	r2, [r4, #99]	; 0x63
 8006266:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 800626a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
 800626e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8006272:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
 8006276:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 800627a:	f894 2066 	ldrb.w	r2, [r4, #102]	; 0x66
 800627e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006282:	f894 2067 	ldrb.w	r2, [r4, #103]	; 0x67
 8006286:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 800628a:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 800628e:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8006292:	f894 2069 	ldrb.w	r2, [r4, #105]	; 0x69
 8006296:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 800629a:	f894 206a 	ldrb.w	r2, [r4, #106]	; 0x6a
 800629e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 80062a2:	f894 206b 	ldrb.w	r2, [r4, #107]	; 0x6b
 80062a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 80062aa:	f894 206c 	ldrb.w	r2, [r4, #108]	; 0x6c
 80062ae:	f883 205e 	strb.w	r2, [r3, #94]	; 0x5e
 80062b2:	f894 206d 	ldrb.w	r2, [r4, #109]	; 0x6d
 80062b6:	f883 205f 	strb.w	r2, [r3, #95]	; 0x5f
 80062ba:	f894 206e 	ldrb.w	r2, [r4, #110]	; 0x6e
 80062be:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
 80062c2:	f894 206f 	ldrb.w	r2, [r4, #111]	; 0x6f
 80062c6:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
 80062ca:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80062ce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
 80062d2:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 80062d6:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
 80062da:	f894 2072 	ldrb.w	r2, [r4, #114]	; 0x72
 80062de:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 80062e2:	f894 2073 	ldrb.w	r2, [r4, #115]	; 0x73
 80062e6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 80062ea:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
 80062ee:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80062f2:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
 80062f6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80062fa:	f894 2076 	ldrb.w	r2, [r4, #118]	; 0x76
 80062fe:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8006302:	f894 2077 	ldrb.w	r2, [r4, #119]	; 0x77
 8006306:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 800630a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
 800630e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 8006312:	f894 2079 	ldrb.w	r2, [r4, #121]	; 0x79
 8006316:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 800631a:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 800631e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 8006322:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 8006326:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 800632a:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 800632e:	f883 206e 	strb.w	r2, [r3, #110]	; 0x6e
 8006332:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 8006336:	f883 206f 	strb.w	r2, [r3, #111]	; 0x6f
						for (int j = 0; j < 8; j++)
 800633a:	e5f0      	b.n	8005f1e <getPresetNamesFromSDCard+0xaa>
 800633c:	2001517e 	.word	0x2001517e
 8006340:	300001e0 	.word	0x300001e0
 8006344:	2407b040 	.word	0x2407b040
 8006348:	2407d3c0 	.word	0x2407d3c0
 800634c:	200199c0 	.word	0x200199c0

08006350 <SDRAM_init>:
{
 8006350:	b5d0      	push	{r4, r6, r7, lr}
	        __IO uint32_t tmpmrd = 0;
 8006352:	2300      	movs	r3, #0
{
 8006354:	b086      	sub	sp, #24
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006356:	4c22      	ldr	r4, [pc, #136]	; (80063e0 <SDRAM_init+0x90>)
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006358:	2201      	movs	r2, #1
	        __IO uint32_t tmpmrd = 0;
 800635a:	9301      	str	r3, [sp, #4]
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800635c:	2310      	movs	r3, #16
 800635e:	2601      	movs	r6, #1
 8006360:	2700      	movs	r7, #0
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006362:	a902      	add	r1, sp, #8
 8006364:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8006366:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800636a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 800636e:	e9cd 6704 	strd	r6, r7, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006372:	f008 ffeb 	bl	800f34c <HAL_SDRAM_SendCommand>
	        HAL_Delay(100);
 8006376:	2064      	movs	r0, #100	; 0x64
 8006378:	f002 fe2a 	bl	8008fd0 <HAL_Delay>
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 800637c:	a902      	add	r1, sp, #8
 800637e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006382:	4620      	mov	r0, r4
	        Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8006384:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006388:	2602      	movs	r6, #2
 800638a:	2710      	movs	r7, #16
 800638c:	e9cd 6702 	strd	r6, r7, [sp, #8]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006390:	f008 ffdc 	bl	800f34c <HAL_SDRAM_SendCommand>
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8006394:	2003      	movs	r0, #3
 8006396:	2110      	movs	r1, #16
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 8006398:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800639c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80063a0:	2004      	movs	r0, #4
 80063a2:	2100      	movs	r1, #0
 80063a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80063a8:	a902      	add	r1, sp, #8
 80063aa:	4620      	mov	r0, r4
 80063ac:	f008 ffce 	bl	800f34c <HAL_SDRAM_SendCommand>
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 80063b0:	f240 2032 	movw	r0, #562	; 0x232
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80063b4:	2204      	movs	r2, #4
 80063b6:	2310      	movs	r3, #16
	        tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_4
 80063b8:	9001      	str	r0, [sp, #4]
	        Command.AutoRefreshNumber      = 1;
 80063ba:	2001      	movs	r0, #1
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80063bc:	a902      	add	r1, sp, #8
	        Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80063be:	e9cd 2302 	strd	r2, r3, [sp, #8]
	        Command.ModeRegisterDefinition = tmpmrd;
 80063c2:	9b01      	ldr	r3, [sp, #4]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80063c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
	        Command.ModeRegisterDefinition = tmpmrd;
 80063c8:	e9cd 0304 	strd	r0, r3, [sp, #16]
	        HAL_SDRAM_SendCommand(&hsdram1, &Command, 0x1000);
 80063cc:	4620      	mov	r0, r4
 80063ce:	f008 ffbd 	bl	800f34c <HAL_SDRAM_SendCommand>
	        HAL_SDRAM_ProgramRefreshRate(&hsdram1, 0x81A - 20);
 80063d2:	f640 0106 	movw	r1, #2054	; 0x806
 80063d6:	4620      	mov	r0, r4
 80063d8:	f008 ffd8 	bl	800f38c <HAL_SDRAM_ProgramRefreshRate>
}
 80063dc:	b006      	add	sp, #24
 80063de:	bdd0      	pop	{r4, r6, r7, pc}
 80063e0:	2001303c 	.word	0x2001303c

080063e4 <handleSPI>:
{
 80063e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	interruptChecker = 1;
 80063e8:	4bc7      	ldr	r3, [pc, #796]	; (8006708 <handleSPI+0x324>)
 80063ea:	2201      	movs	r2, #1
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80063ec:	4dc7      	ldr	r5, [pc, #796]	; (800670c <handleSPI+0x328>)
{
 80063ee:	4604      	mov	r4, r0
 80063f0:	ed2d 8b02 	vpush	{d8}
	interruptChecker = 1;
 80063f4:	701a      	strb	r2, [r3, #0]
	if (SPI_LEVERS[offset] == ReceivingPitches)
 80063f6:	5c2b      	ldrb	r3, [r5, r0]
 80063f8:	4293      	cmp	r3, r2
 80063fa:	f000 80c0 	beq.w	800657e <handleSPI+0x19a>
	else if (SPI_LEVERS[offset] == ReceivingPreset)
 80063fe:	2b02      	cmp	r3, #2
 8006400:	f000 8097 	beq.w	8006532 <handleSPI+0x14e>
	else if (SPI_LEVERS[offset] == ReceivingKnobs)
 8006404:	2b03      	cmp	r3, #3
 8006406:	f000 81bc 	beq.w	8006782 <handleSPI+0x39e>
	else if (SPI_LEVERS[offset] == ReceivingEnd)
 800640a:	2bfd      	cmp	r3, #253	; 0xfd
 800640c:	f000 81a2 	beq.w	8006754 <handleSPI+0x370>
		if (boardNumber == 0)
 8006410:	4bbf      	ldr	r3, [pc, #764]	; (8006710 <handleSPI+0x32c>)
 8006412:	781f      	ldrb	r7, [r3, #0]
 8006414:	2f00      	cmp	r7, #0
 8006416:	f040 8088 	bne.w	800652a <handleSPI+0x146>
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 800641a:	4ebe      	ldr	r6, [pc, #760]	; (8006714 <handleSPI+0x330>)
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 800641c:	1928      	adds	r0, r5, r4
 800641e:	23fd      	movs	r3, #253	; 0xfd
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006420:	4dbd      	ldr	r5, [pc, #756]	; (8006718 <handleSPI+0x334>)
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8006422:	7834      	ldrb	r4, [r6, #0]
			SPI_LEVERS_TX[offset] = 253; //special byte that says this is a preset name;
 8006424:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006428:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 800642c:	f8df c31c 	ldr.w	ip, [pc, #796]	; 800674c <handleSPI+0x368>
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006430:	f8df e31c 	ldr.w	lr, [pc, #796]	; 8006750 <handleSPI+0x36c>
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006434:	eb05 0243 	add.w	r2, r5, r3, lsl #1
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 8006438:	f89c 1000 	ldrb.w	r1, [ip]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 800643c:	ea4f 1803 	mov.w	r8, r3, lsl #4
			SPI_LEVERS_TX[offset+1] = whichPresetToSendName;
 8006440:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 8006444:	005b      	lsls	r3, r3, #1
 8006446:	5ceb      	ldrb	r3, [r5, r3]
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006448:	ebc1 05c1 	rsb	r5, r1, r1, lsl #3
			SPI_LEVERS_TX[offset+2] = presetNamesArray[whichPresetToSendName][0];
 800644c:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006450:	eb08 0545 	add.w	r5, r8, r5, lsl #1
			SPI_LEVERS_TX[offset+3] = presetNamesArray[whichPresetToSendName][1];
 8006454:	7853      	ldrb	r3, [r2, #1]
 8006456:	f880 3043 	strb.w	r3, [r0, #67]	; 0x43
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 800645a:	7893      	ldrb	r3, [r2, #2]
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 800645c:	f892 8003 	ldrb.w	r8, [r2, #3]
			SPI_LEVERS_TX[offset+4] = presetNamesArray[whichPresetToSendName][2];
 8006460:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 8006464:	eb0e 0305 	add.w	r3, lr, r5
			SPI_LEVERS_TX[offset+5] = presetNamesArray[whichPresetToSendName][3];
 8006468:	f880 8045 	strb.w	r8, [r0, #69]	; 0x45
			SPI_LEVERS_TX[offset+6] = presetNamesArray[whichPresetToSendName][4];
 800646c:	f892 8004 	ldrb.w	r8, [r2, #4]
 8006470:	f880 8046 	strb.w	r8, [r0, #70]	; 0x46
			SPI_LEVERS_TX[offset+7] = presetNamesArray[whichPresetToSendName][5];
 8006474:	f892 8005 	ldrb.w	r8, [r2, #5]
 8006478:	f880 8047 	strb.w	r8, [r0, #71]	; 0x47
			SPI_LEVERS_TX[offset+8] = presetNamesArray[whichPresetToSendName][6];
 800647c:	f892 8006 	ldrb.w	r8, [r2, #6]
 8006480:	f880 8048 	strb.w	r8, [r0, #72]	; 0x48
			SPI_LEVERS_TX[offset+9] = presetNamesArray[whichPresetToSendName][7];
 8006484:	f892 8007 	ldrb.w	r8, [r2, #7]
 8006488:	f880 8049 	strb.w	r8, [r0, #73]	; 0x49
			SPI_LEVERS_TX[offset+10] = presetNamesArray[whichPresetToSendName][8];
 800648c:	f892 8008 	ldrb.w	r8, [r2, #8]
 8006490:	f880 804a 	strb.w	r8, [r0, #74]	; 0x4a
			SPI_LEVERS_TX[offset+11] = presetNamesArray[whichPresetToSendName][9];
 8006494:	f892 8009 	ldrb.w	r8, [r2, #9]
 8006498:	f880 804b 	strb.w	r8, [r0, #75]	; 0x4b
			SPI_LEVERS_TX[offset+12] = presetNamesArray[whichPresetToSendName][10];
 800649c:	f892 800a 	ldrb.w	r8, [r2, #10]
 80064a0:	f880 804c 	strb.w	r8, [r0, #76]	; 0x4c
			SPI_LEVERS_TX[offset+13] = presetNamesArray[whichPresetToSendName][11];
 80064a4:	f892 800b 	ldrb.w	r8, [r2, #11]
 80064a8:	f880 804d 	strb.w	r8, [r0, #77]	; 0x4d
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 80064ac:	f892 800c 	ldrb.w	r8, [r2, #12]
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 80064b0:	7b52      	ldrb	r2, [r2, #13]
			SPI_LEVERS_TX[offset+14] = presetNamesArray[whichPresetToSendName][12];
 80064b2:	f880 804e 	strb.w	r8, [r0, #78]	; 0x4e
			SPI_LEVERS_TX[offset+15] = presetNamesArray[whichPresetToSendName][13];
 80064b6:	f880 204f 	strb.w	r2, [r0, #79]	; 0x4f
			SPI_LEVERS_TX[offset+16] = whichMacroToSendName;
 80064ba:	f880 1050 	strb.w	r1, [r0, #80]	; 0x50
			whichMacroToSendName = (whichMacroToSendName + 1);
 80064be:	3101      	adds	r1, #1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 80064c0:	f81e 2005 	ldrb.w	r2, [lr, r5]
			whichMacroToSendName = (whichMacroToSendName + 1);
 80064c4:	b2c9      	uxtb	r1, r1
			SPI_LEVERS_TX[offset+17] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][0];
 80064c6:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 80064ca:	785a      	ldrb	r2, [r3, #1]
			if (whichMacroToSendName >= 8)
 80064cc:	2907      	cmp	r1, #7
			SPI_LEVERS_TX[offset+18] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][1];
 80064ce:	f880 2052 	strb.w	r2, [r0, #82]	; 0x52
			SPI_LEVERS_TX[offset+19] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][2];
 80064d2:	789a      	ldrb	r2, [r3, #2]
 80064d4:	f880 2053 	strb.w	r2, [r0, #83]	; 0x53
			SPI_LEVERS_TX[offset+20] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][3];
 80064d8:	78da      	ldrb	r2, [r3, #3]
 80064da:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			SPI_LEVERS_TX[offset+21] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][4];
 80064de:	791a      	ldrb	r2, [r3, #4]
 80064e0:	f880 2055 	strb.w	r2, [r0, #85]	; 0x55
			SPI_LEVERS_TX[offset+22] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][5];
 80064e4:	795a      	ldrb	r2, [r3, #5]
 80064e6:	f880 2056 	strb.w	r2, [r0, #86]	; 0x56
			SPI_LEVERS_TX[offset+23] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][6];
 80064ea:	799a      	ldrb	r2, [r3, #6]
 80064ec:	f880 2057 	strb.w	r2, [r0, #87]	; 0x57
			SPI_LEVERS_TX[offset+24] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][7];
 80064f0:	79da      	ldrb	r2, [r3, #7]
 80064f2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
			SPI_LEVERS_TX[offset+25] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][8];
 80064f6:	7a1a      	ldrb	r2, [r3, #8]
 80064f8:	f880 2059 	strb.w	r2, [r0, #89]	; 0x59
			SPI_LEVERS_TX[offset+26] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][9];
 80064fc:	7a5a      	ldrb	r2, [r3, #9]
 80064fe:	f880 205a 	strb.w	r2, [r0, #90]	; 0x5a
			SPI_LEVERS_TX[offset+27] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][10];
 8006502:	7a9a      	ldrb	r2, [r3, #10]
 8006504:	f880 205b 	strb.w	r2, [r0, #91]	; 0x5b
			SPI_LEVERS_TX[offset+28] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][11];
 8006508:	7ada      	ldrb	r2, [r3, #11]
 800650a:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 800650e:	7b1a      	ldrb	r2, [r3, #12]
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 8006510:	7b5b      	ldrb	r3, [r3, #13]
			SPI_LEVERS_TX[offset+29] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][12];
 8006512:	f880 205d 	strb.w	r2, [r0, #93]	; 0x5d
			SPI_LEVERS_TX[offset+30] = macroNamesArray[whichPresetToSendName][whichMacroToSendName][13];
 8006516:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
			SPI_LEVERS_TX[offset+31] = 254;
 800651a:	f04f 03fe 	mov.w	r3, #254	; 0xfe
 800651e:	f880 305f 	strb.w	r3, [r0, #95]	; 0x5f
			if (whichMacroToSendName >= 8)
 8006522:	f200 80e7 	bhi.w	80066f4 <handleSPI+0x310>
			whichMacroToSendName = (whichMacroToSendName + 1);
 8006526:	f88c 1000 	strb.w	r1, [ip]
}
 800652a:	ecbd 8b02 	vpop	{d8}
 800652e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		 if (writingState != ReceivingPreset)
 8006532:	497a      	ldr	r1, [pc, #488]	; (800671c <handleSPI+0x338>)
 8006534:	7808      	ldrb	r0, [r1, #0]
 8006536:	2802      	cmp	r0, #2
 8006538:	f000 8121 	beq.w	800677e <handleSPI+0x39a>
			 writingState = ReceivingPreset; // set the flag to let the mcu know that a preset write is in progress
 800653c:	700b      	strb	r3, [r1, #0]
			 diskBusy = 1;
 800653e:	4978      	ldr	r1, [pc, #480]	; (8006720 <handleSPI+0x33c>)
			 audioMasterLevel = 0.0f;
 8006540:	4b78      	ldr	r3, [pc, #480]	; (8006724 <handleSPI+0x340>)
			 diskBusy = 1;
 8006542:	700a      	strb	r2, [r1, #0]
			 audioMasterLevel = 0.0f;
 8006544:	2200      	movs	r2, #0
			 bufferPos = 0;
 8006546:	4878      	ldr	r0, [pc, #480]	; (8006728 <handleSPI+0x344>)
			 audioMasterLevel = 0.0f;
 8006548:	601a      	str	r2, [r3, #0]
			 bufferPos = 0;
 800654a:	2300      	movs	r3, #0
 800654c:	8003      	strh	r3, [r0, #0]
		 uint8_t currentByte = offset+2; // first number says what it is 2nd number says which number it is
 800654e:	1ca6      	adds	r6, r4, #2
		 presetNumberToSave = SPI_LEVERS[offset + 1];
 8006550:	192a      	adds	r2, r5, r4
 8006552:	4976      	ldr	r1, [pc, #472]	; (800672c <handleSPI+0x348>)
 8006554:	b2f3      	uxtb	r3, r6
 8006556:	7852      	ldrb	r2, [r2, #1]
 8006558:	4e75      	ldr	r6, [pc, #468]	; (8006730 <handleSPI+0x34c>)
 800655a:	700a      	strb	r2, [r1, #0]
		 for (int i = 0; i < 28; i++)
 800655c:	1e59      	subs	r1, r3, #1
 800655e:	441e      	add	r6, r3
 8006560:	4f74      	ldr	r7, [pc, #464]	; (8006734 <handleSPI+0x350>)
 8006562:	4429      	add	r1, r5
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 8006564:	8803      	ldrh	r3, [r0, #0]
 8006566:	f811 cf01 	ldrb.w	ip, [r1, #1]!
 800656a:	b29b      	uxth	r3, r3
		 for (int i = 0; i < 28; i++)
 800656c:	42b1      	cmp	r1, r6
			 buffer[bufferPos++] = SPI_LEVERS[currentByte + i];
 800656e:	f103 0201 	add.w	r2, r3, #1
 8006572:	f807 c003 	strb.w	ip, [r7, r3]
 8006576:	b293      	uxth	r3, r2
 8006578:	8003      	strh	r3, [r0, #0]
		 for (int i = 0; i < 28; i++)
 800657a:	d1f3      	bne.n	8006564 <handleSPI+0x180>
 800657c:	e748      	b.n	8006410 <handleSPI+0x2c>
		 for (int i = 0; i < numStringsThisBoard; i++)
 800657e:	4b6e      	ldr	r3, [pc, #440]	; (8006738 <handleSPI+0x354>)
 8006580:	7818      	ldrb	r0, [r3, #0]
 8006582:	2800      	cmp	r0, #0
 8006584:	f000 80b2 	beq.w	80066ec <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006588:	496c      	ldr	r1, [pc, #432]	; (800673c <handleSPI+0x358>)
		 uint8_t currentByte = offset+1;
 800658a:	18a3      	adds	r3, r4, r2
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 800658c:	ed9f 6a6c 	vldr	s12, [pc, #432]	; 8006740 <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006590:	680a      	ldr	r2, [r1, #0]
 8006592:	b2db      	uxtb	r3, r3
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8006594:	eddf 6a6b 	vldr	s13, [pc, #428]	; 8006744 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006598:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 800659c:	5cd2      	ldrb	r2, [r2, r3]
 800659e:	0212      	lsls	r2, r2, #8
 80065a0:	ee07 2a90 	vmov	s15, r2
 80065a4:	680a      	ldr	r2, [r1, #0]
 80065a6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80065aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065ae:	441a      	add	r2, r3
 80065b0:	7852      	ldrb	r2, [r2, #1]
 80065b2:	ee07 2a90 	vmov	s15, r2
 80065b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065ba:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80065be:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80065c2:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80065c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ca:	d507      	bpl.n	80065dc <handleSPI+0x1f8>
 80065cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	dd02      	ble.n	80065dc <handleSPI+0x1f8>
				stringMIDIPitches[i] = myPitch;
 80065d6:	4a5c      	ldr	r2, [pc, #368]	; (8006748 <handleSPI+0x364>)
 80065d8:	ed82 7a00 	vstr	s14, [r2]
		 for (int i = 0; i < numStringsThisBoard; i++)
 80065dc:	2801      	cmp	r0, #1
 80065de:	f000 8085 	beq.w	80066ec <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80065e2:	680a      	ldr	r2, [r1, #0]
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80065e4:	ed9f 6a56 	vldr	s12, [pc, #344]	; 8006740 <handleSPI+0x35c>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80065e8:	3201      	adds	r2, #1
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80065ea:	eddf 6a56 	vldr	s13, [pc, #344]	; 8006744 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 80065ee:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80065f2:	5cd2      	ldrb	r2, [r2, r3]
 80065f4:	0212      	lsls	r2, r2, #8
 80065f6:	ee07 2a90 	vmov	s15, r2
 80065fa:	680a      	ldr	r2, [r1, #0]
 80065fc:	3201      	adds	r2, #1
 80065fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006602:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006606:	441a      	add	r2, r3
 8006608:	7852      	ldrb	r2, [r2, #1]
 800660a:	ee07 2a90 	vmov	s15, r2
 800660e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006612:	ee77 7a87 	vadd.f32	s15, s15, s14
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8006616:	eef4 7a46 	vcmp.f32	s15, s12
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800661a:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 800661e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006622:	d507      	bpl.n	8006634 <handleSPI+0x250>
 8006624:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006628:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662c:	dd02      	ble.n	8006634 <handleSPI+0x250>
				stringMIDIPitches[i] = myPitch;
 800662e:	4a46      	ldr	r2, [pc, #280]	; (8006748 <handleSPI+0x364>)
 8006630:	ed82 7a01 	vstr	s14, [r2, #4]
		 for (int i = 0; i < numStringsThisBoard; i++)
 8006634:	2802      	cmp	r0, #2
 8006636:	d059      	beq.n	80066ec <handleSPI+0x308>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 8006638:	680a      	ldr	r2, [r1, #0]
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800663a:	eddf 6a42 	vldr	s13, [pc, #264]	; 8006744 <handleSPI+0x360>
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 800663e:	3202      	adds	r2, #2
 8006640:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006644:	5cd2      	ldrb	r2, [r2, r3]
 8006646:	0212      	lsls	r2, r2, #8
 8006648:	ee07 2a90 	vmov	s15, r2
 800664c:	680a      	ldr	r2, [r1, #0]
 800664e:	3202      	adds	r2, #2
 8006650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006654:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8006658:	441a      	add	r2, r3
 800665a:	7852      	ldrb	r2, [r2, #1]
 800665c:	ee07 2a90 	vmov	s15, r2
 8006660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006664:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 8006668:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 800666c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006674:	dd09      	ble.n	800668a <handleSPI+0x2a6>
 8006676:	eddf 6a32 	vldr	s13, [pc, #200]	; 8006740 <handleSPI+0x35c>
 800667a:	eef4 7a66 	vcmp.f32	s15, s13
 800667e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006682:	d502      	bpl.n	800668a <handleSPI+0x2a6>
				stringMIDIPitches[i] = myPitch;
 8006684:	4a30      	ldr	r2, [pc, #192]	; (8006748 <handleSPI+0x364>)
 8006686:	ed82 7a02 	vstr	s14, [r2, #8]
		 for (int i = 0; i < numStringsThisBoard; i++)
 800668a:	2803      	cmp	r0, #3
 800668c:	d02e      	beq.n	80066ec <handleSPI+0x308>
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 800668e:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8006744 <handleSPI+0x360>
		 for (int i = 0; i < numStringsThisBoard; i++)
 8006692:	2603      	movs	r6, #3
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 8006694:	ed9f 6a2a 	vldr	s12, [pc, #168]	; 8006740 <handleSPI+0x35c>
 8006698:	4f2b      	ldr	r7, [pc, #172]	; (8006748 <handleSPI+0x364>)
			float myPitch = (float)(SPI_LEVERS[((i+firstString) * 2) + currentByte] << 8) + SPI_LEVERS[((i+firstString) * 2) + 1 + currentByte];
 800669a:	680a      	ldr	r2, [r1, #0]
 800669c:	4432      	add	r2, r6
 800669e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80066a2:	5cd2      	ldrb	r2, [r2, r3]
 80066a4:	0212      	lsls	r2, r2, #8
 80066a6:	ee07 2a90 	vmov	s15, r2
 80066aa:	680a      	ldr	r2, [r1, #0]
 80066ac:	4432      	add	r2, r6
 80066ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066b2:	3601      	adds	r6, #1
 80066b4:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 80066b8:	441a      	add	r2, r3
 80066ba:	7852      	ldrb	r2, [r2, #1]
 80066bc:	ee07 2a90 	vmov	s15, r2
 80066c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066c4:	ee77 7a27 	vadd.f32	s15, s14, s15
			myPitch = myPitch * 0.001953154802777f; //(128 / 65535) scale the 16 bit integer into midinotes.
 80066c8:	ee27 7aa6 	vmul.f32	s14, s15, s13
			if ((myPitch > 0.0f) && (myPitch < 140.0f))
 80066cc:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80066d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d4:	dd06      	ble.n	80066e4 <handleSPI+0x300>
 80066d6:	eef4 7a46 	vcmp.f32	s15, s12
 80066da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
				stringMIDIPitches[i] = myPitch;
 80066de:	bf48      	it	mi
 80066e0:	ed87 7a03 	vstrmi	s14, [r7, #12]
		 for (int i = 0; i < numStringsThisBoard; i++)
 80066e4:	42b0      	cmp	r0, r6
 80066e6:	f107 0704 	add.w	r7, r7, #4
 80066ea:	dcd6      	bgt.n	800669a <handleSPI+0x2b6>
		 updateStateFromSPIMessage(offset);
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7fa ffbb 	bl	8001668 <updateStateFromSPIMessage>
 80066f2:	e68d      	b.n	8006410 <handleSPI+0x2c>
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 80066f4:	3401      	adds	r4, #1
				whichMacroToSendName = 0;
 80066f6:	f88c 7000 	strb.w	r7, [ip]
				whichPresetToSendName = (whichPresetToSendName + 1) % MAX_NUM_PRESETS;
 80066fa:	f004 043f 	and.w	r4, r4, #63	; 0x3f
 80066fe:	7034      	strb	r4, [r6, #0]
}
 8006700:	ecbd 8b02 	vpop	{d8}
 8006704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006708:	20015281 	.word	0x20015281
 800670c:	30000100 	.word	0x30000100
 8006710:	200130c4 	.word	0x200130c4
 8006714:	20019159 	.word	0x20019159
 8006718:	2407b040 	.word	0x2407b040
 800671c:	2001915a 	.word	0x2001915a
 8006720:	20013104 	.word	0x20013104
 8006724:	2000071c 	.word	0x2000071c
 8006728:	200130c6 	.word	0x200130c6
 800672c:	20016d4a 	.word	0x20016d4a
 8006730:	3000011b 	.word	0x3000011b
 8006734:	300001e0 	.word	0x300001e0
 8006738:	20000052 	.word	0x20000052
 800673c:	20005054 	.word	0x20005054
 8006740:	478bff74 	.word	0x478bff74
 8006744:	3b000080 	.word	0x3b000080
 8006748:	20012f38 	.word	0x20012f38
 800674c:	20019158 	.word	0x20019158
 8006750:	2407d3c0 	.word	0x2407d3c0
		if(writingState == ReceivingPreset)
 8006754:	4b24      	ldr	r3, [pc, #144]	; (80067e8 <handleSPI+0x404>)
 8006756:	781a      	ldrb	r2, [r3, #0]
 8006758:	2a02      	cmp	r2, #2
 800675a:	f47f ae59 	bne.w	8006410 <handleSPI+0x2c>
			 presetWaitingToParse = bufferPos;
 800675e:	4923      	ldr	r1, [pc, #140]	; (80067ec <handleSPI+0x408>)
			 writingState = 0;
 8006760:	2200      	movs	r2, #0
			 presetNumberToLoad = presetNumberToSave;
 8006762:	4823      	ldr	r0, [pc, #140]	; (80067f0 <handleSPI+0x40c>)
			 writingState = 0;
 8006764:	701a      	strb	r2, [r3, #0]
			 presetNumberToLoad = presetNumberToSave;
 8006766:	7800      	ldrb	r0, [r0, #0]
			 presetWaitingToParse = bufferPos;
 8006768:	880a      	ldrh	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 800676a:	880b      	ldrh	r3, [r1, #0]
			 presetNumberToLoad = presetNumberToSave;
 800676c:	4921      	ldr	r1, [pc, #132]	; (80067f4 <handleSPI+0x410>)
			 presetWaitingToParse = bufferPos;
 800676e:	b292      	uxth	r2, r2
			 presetWaitingToWrite = bufferPos;
 8006770:	b29b      	uxth	r3, r3
			 presetNumberToLoad = presetNumberToSave;
 8006772:	7008      	strb	r0, [r1, #0]
			 presetWaitingToParse = bufferPos;
 8006774:	4920      	ldr	r1, [pc, #128]	; (80067f8 <handleSPI+0x414>)
 8006776:	600a      	str	r2, [r1, #0]
			 presetWaitingToWrite = bufferPos;
 8006778:	4a20      	ldr	r2, [pc, #128]	; (80067fc <handleSPI+0x418>)
 800677a:	6013      	str	r3, [r2, #0]
 800677c:	e648      	b.n	8006410 <handleSPI+0x2c>
 800677e:	481b      	ldr	r0, [pc, #108]	; (80067ec <handleSPI+0x408>)
 8006780:	e6e5      	b.n	800654e <handleSPI+0x16a>
		 uint8_t currentByte = offset+1;
 8006782:	1c47      	adds	r7, r0, #1
 8006784:	4e1e      	ldr	r6, [pc, #120]	; (8006800 <handleSPI+0x41c>)
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 8006786:	ed9f 8a1f 	vldr	s16, [pc, #124]	; 8006804 <handleSPI+0x420>
 800678a:	fa55 f787 	uxtab	r7, r5, r7
 800678e:	f106 0830 	add.w	r8, r6, #48	; 0x30
 8006792:	f817 3b01 	ldrb.w	r3, [r7], #1
 8006796:	4630      	mov	r0, r6
			for (int i = 0; i < 12; i++)
 8006798:	3604      	adds	r6, #4
				tExpSmooth_setDest(&knobSmoothers[i], (SPI_LEVERS[i + currentByte] * 0.003921568627451f)); //scaled 0.0 to 1.0
 800679a:	ee00 3a10 	vmov	s0, r3
 800679e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80067a2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80067a6:	f00e ff8b 	bl	80156c0 <tExpSmooth_setDest>
			for (int i = 0; i < 12; i++)
 80067aa:	4546      	cmp	r6, r8
 80067ac:	d1f1      	bne.n	8006792 <handleSPI+0x3ae>
			currentByte += 12;
 80067ae:	f104 070d 	add.w	r7, r4, #13
 80067b2:	4e15      	ldr	r6, [pc, #84]	; (8006808 <handleSPI+0x424>)
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 80067b4:	ed9f 8a13 	vldr	s16, [pc, #76]	; 8006804 <handleSPI+0x420>
 80067b8:	b2ff      	uxtb	r7, r7
 80067ba:	f106 0828 	add.w	r8, r6, #40	; 0x28
 80067be:	3f01      	subs	r7, #1
 80067c0:	442f      	add	r7, r5
 80067c2:	f817 3f01 	ldrb.w	r3, [r7, #1]!
 80067c6:	4630      	mov	r0, r6
			for (int i = 0; i < 10; i++)
 80067c8:	3604      	adds	r6, #4
				tExpSmooth_setDest(&pedalSmoothers[i], (SPI_LEVERS[i + currentByte ] * 0.003921568627451f)); //scaled 0.0 to 1.0
 80067ca:	ee00 3a10 	vmov	s0, r3
 80067ce:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80067d2:	ee20 0a08 	vmul.f32	s0, s0, s16
 80067d6:	f00e ff73 	bl	80156c0 <tExpSmooth_setDest>
			for (int i = 0; i < 10; i++)
 80067da:	4546      	cmp	r6, r8
 80067dc:	d1f1      	bne.n	80067c2 <handleSPI+0x3de>
		 updateStateFromSPIMessage(offset);
 80067de:	4620      	mov	r0, r4
 80067e0:	f7fa ff42 	bl	8001668 <updateStateFromSPIMessage>
 80067e4:	e614      	b.n	8006410 <handleSPI+0x2c>
 80067e6:	bf00      	nop
 80067e8:	2001915a 	.word	0x2001915a
 80067ec:	200130c6 	.word	0x200130c6
 80067f0:	20016d4a 	.word	0x20016d4a
 80067f4:	20000724 	.word	0x20000724
 80067f8:	20016d50 	.word	0x20016d50
 80067fc:	20016d54 	.word	0x20016d54
 8006800:	2000519c 	.word	0x2000519c
 8006804:	3b808081 	.word	0x3b808081
 8006808:	20005580 	.word	0x20005580

0800680c <parsePreset>:


void __ATTR_ITCMRAM parsePreset(int size, int presetNumber)
{
 800680c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006810:	b087      	sub	sp, #28
 8006812:	460e      	mov	r6, r1
 8006814:	9000      	str	r0, [sp, #0]
 8006816:	9105      	str	r1, [sp, #20]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006818:	b672      	cpsid	i
	//turn off the volume while changing parameters
	 __disable_irq();
	 presetReady = 0;
 800681a:	2500      	movs	r5, #0
 800681c:	4beb      	ldr	r3, [pc, #940]	; (8006bcc <parsePreset+0x3c0>)

	uint16_t bufferIndex = 0;
	//read first 14 items in buffer as the 14 character string that is the name of the preset
	for (int i = 0; i < 14; i++)
	{
		presetName[i] = buffer[bufferIndex];
 800681e:	4cec      	ldr	r4, [pc, #944]	; (8006bd0 <parsePreset+0x3c4>)
		 audioOutBuffer[i] = 0;
 8006820:	2280      	movs	r2, #128	; 0x80
 8006822:	4629      	mov	r1, r5
 8006824:	48eb      	ldr	r0, [pc, #940]	; (8006bd4 <parsePreset+0x3c8>)
	audioMasterLevel = 0.0f;
 8006826:	f04f 0b00 	mov.w	fp, #0
	 presetReady = 0;
 800682a:	601d      	str	r5, [r3, #0]
		 audioOutBuffer[i] = 0;
 800682c:	f016 fe52 	bl	801d4d4 <memset>
	audioMasterLevel = 0.0f;
 8006830:	49e9      	ldr	r1, [pc, #932]	; (8006bd8 <parsePreset+0x3cc>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006832:	ebc6 00c6 	rsb	r0, r6, r6, lsl #3
		presetName[i] = buffer[bufferIndex];
 8006836:	78e6      	ldrb	r6, [r4, #3]
 8006838:	4be8      	ldr	r3, [pc, #928]	; (8006bdc <parsePreset+0x3d0>)
	audioMasterLevel = 0.0f;
 800683a:	f8c1 b000 	str.w	fp, [r1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800683e:	ea4f 0b40 	mov.w	fp, r0, lsl #1
		presetName[i] = buffer[bufferIndex];
 8006842:	f894 c004 	ldrb.w	ip, [r4, #4]
 8006846:	f894 a000 	ldrb.w	sl, [r4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800684a:	49e5      	ldr	r1, [pc, #916]	; (8006be0 <parsePreset+0x3d4>)
 800684c:	4ae4      	ldr	r2, [pc, #912]	; (8006be0 <parsePreset+0x3d4>)
		presetName[i] = buffer[bufferIndex];
 800684e:	9601      	str	r6, [sp, #4]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006850:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8006854:	f801 a00b 	strb.w	sl, [r1, fp]
		presetName[i] = buffer[bufferIndex];
 8006858:	78a7      	ldrb	r7, [r4, #2]
 800685a:	f894 8001 	ldrb.w	r8, [r4, #1]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800685e:	9901      	ldr	r1, [sp, #4]
		presetName[i] = buffer[bufferIndex];
 8006860:	f8cd c008 	str.w	ip, [sp, #8]
 8006864:	f883 c004 	strb.w	ip, [r3, #4]
 8006868:	f894 c005 	ldrb.w	ip, [r4, #5]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 800686c:	f882 8001 	strb.w	r8, [r2, #1]
		presetName[i] = buffer[bufferIndex];
 8006870:	f894 9007 	ldrb.w	r9, [r4, #7]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006874:	7097      	strb	r7, [r2, #2]
		presetName[i] = buffer[bufferIndex];
 8006876:	f894 e009 	ldrb.w	lr, [r4, #9]
 800687a:	70de      	strb	r6, [r3, #3]
 800687c:	f883 c005 	strb.w	ip, [r3, #5]
 8006880:	7a26      	ldrb	r6, [r4, #8]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006882:	70d1      	strb	r1, [r2, #3]
		presetName[i] = buffer[bufferIndex];
 8006884:	f8cd c00c 	str.w	ip, [sp, #12]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 8006888:	9902      	ldr	r1, [sp, #8]
		presetName[i] = buffer[bufferIndex];
 800688a:	f894 c006 	ldrb.w	ip, [r4, #6]
 800688e:	709f      	strb	r7, [r3, #2]
 8006890:	f883 c006 	strb.w	ip, [r3, #6]
 8006894:	721e      	strb	r6, [r3, #8]
 8006896:	f883 a000 	strb.w	sl, [r3]
 800689a:	f883 8001 	strb.w	r8, [r3, #1]
 800689e:	f8cd c010 	str.w	ip, [sp, #16]
 80068a2:	f883 9007 	strb.w	r9, [r3, #7]
 80068a6:	f894 c00a 	ldrb.w	ip, [r4, #10]
 80068aa:	f883 e009 	strb.w	lr, [r3, #9]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80068ae:	7111      	strb	r1, [r2, #4]
 80068b0:	9903      	ldr	r1, [sp, #12]
		presetName[i] = buffer[bufferIndex];
 80068b2:	7ae7      	ldrb	r7, [r4, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80068b4:	7151      	strb	r1, [r2, #5]
 80068b6:	9904      	ldr	r1, [sp, #16]
		presetName[i] = buffer[bufferIndex];
 80068b8:	72df      	strb	r7, [r3, #11]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80068ba:	7191      	strb	r1, [r2, #6]
 80068bc:	f882 9007 	strb.w	r9, [r2, #7]
 80068c0:	7216      	strb	r6, [r2, #8]
 80068c2:	f882 e009 	strb.w	lr, [r2, #9]
 80068c6:	f882 c00a 	strb.w	ip, [r2, #10]
 80068ca:	72d7      	strb	r7, [r2, #11]
		presetName[i] = buffer[bufferIndex];
 80068cc:	7b27      	ldrb	r7, [r4, #12]
	for (int j = 0; j < 8; j++)
	{
		for (int k = 0; k < 14; k++)
		{

			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80068ce:	49c5      	ldr	r1, [pc, #788]	; (8006be4 <parsePreset+0x3d8>)
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80068d0:	7317      	strb	r7, [r2, #12]
		presetName[i] = buffer[bufferIndex];
 80068d2:	731f      	strb	r7, [r3, #12]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80068d4:	eb01 1600 	add.w	r6, r1, r0, lsl #4
		presetName[i] = buffer[bufferIndex];
 80068d8:	7b67      	ldrb	r7, [r4, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80068da:	0100      	lsls	r0, r0, #4
		presetName[i] = buffer[bufferIndex];
 80068dc:	f883 c00a 	strb.w	ip, [r3, #10]
 80068e0:	735f      	strb	r7, [r3, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80068e2:	7ba3      	ldrb	r3, [r4, #14]
		presetNamesArray[presetNumber][i] = buffer[bufferIndex];
 80068e4:	7357      	strb	r7, [r2, #13]
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 80068e6:	540b      	strb	r3, [r1, r0]
 80068e8:	7be3      	ldrb	r3, [r4, #15]
 80068ea:	7073      	strb	r3, [r6, #1]
 80068ec:	7c23      	ldrb	r3, [r4, #16]
 80068ee:	70b3      	strb	r3, [r6, #2]
 80068f0:	7c63      	ldrb	r3, [r4, #17]
 80068f2:	70f3      	strb	r3, [r6, #3]
 80068f4:	7ca3      	ldrb	r3, [r4, #18]
 80068f6:	7133      	strb	r3, [r6, #4]
 80068f8:	7ce3      	ldrb	r3, [r4, #19]
 80068fa:	7173      	strb	r3, [r6, #5]
 80068fc:	7d23      	ldrb	r3, [r4, #20]
 80068fe:	71b3      	strb	r3, [r6, #6]
 8006900:	7d63      	ldrb	r3, [r4, #21]
 8006902:	71f3      	strb	r3, [r6, #7]
 8006904:	7da3      	ldrb	r3, [r4, #22]
 8006906:	7233      	strb	r3, [r6, #8]
 8006908:	7de3      	ldrb	r3, [r4, #23]
 800690a:	7273      	strb	r3, [r6, #9]
 800690c:	7e23      	ldrb	r3, [r4, #24]
 800690e:	72b3      	strb	r3, [r6, #10]
 8006910:	7e63      	ldrb	r3, [r4, #25]
 8006912:	72f3      	strb	r3, [r6, #11]
 8006914:	7ea3      	ldrb	r3, [r4, #26]
 8006916:	7333      	strb	r3, [r6, #12]
 8006918:	7ee3      	ldrb	r3, [r4, #27]
 800691a:	7373      	strb	r3, [r6, #13]
 800691c:	7f23      	ldrb	r3, [r4, #28]
 800691e:	73b3      	strb	r3, [r6, #14]
 8006920:	7f63      	ldrb	r3, [r4, #29]
 8006922:	73f3      	strb	r3, [r6, #15]
 8006924:	7fa3      	ldrb	r3, [r4, #30]
 8006926:	7433      	strb	r3, [r6, #16]
 8006928:	7fe3      	ldrb	r3, [r4, #31]
 800692a:	7473      	strb	r3, [r6, #17]
 800692c:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006930:	74b3      	strb	r3, [r6, #18]
 8006932:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8006936:	74f3      	strb	r3, [r6, #19]
 8006938:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800693c:	7533      	strb	r3, [r6, #20]
 800693e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8006942:	7573      	strb	r3, [r6, #21]
 8006944:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8006948:	75b3      	strb	r3, [r6, #22]
 800694a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 800694e:	75f3      	strb	r3, [r6, #23]
 8006950:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 8006954:	7633      	strb	r3, [r6, #24]
 8006956:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 800695a:	7673      	strb	r3, [r6, #25]
 800695c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8006960:	76b3      	strb	r3, [r6, #26]
 8006962:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 8006966:	76f3      	strb	r3, [r6, #27]
 8006968:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 800696c:	7733      	strb	r3, [r6, #28]
 800696e:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 8006972:	7773      	strb	r3, [r6, #29]
 8006974:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006978:	77b3      	strb	r3, [r6, #30]
 800697a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 800697e:	77f3      	strb	r3, [r6, #31]
 8006980:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8006984:	f886 3020 	strb.w	r3, [r6, #32]
 8006988:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 800698c:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
 8006990:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8006994:	f886 3022 	strb.w	r3, [r6, #34]	; 0x22
 8006998:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 800699c:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
 80069a0:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 80069a4:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
 80069a8:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
 80069ac:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
 80069b0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80069b4:	f886 3026 	strb.w	r3, [r6, #38]	; 0x26
 80069b8:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80069bc:	f886 3027 	strb.w	r3, [r6, #39]	; 0x27
 80069c0:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80069c4:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
 80069c8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80069cc:	f886 3029 	strb.w	r3, [r6, #41]	; 0x29
 80069d0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80069d4:	f886 302a 	strb.w	r3, [r6, #42]	; 0x2a
 80069d8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80069dc:	f886 302b 	strb.w	r3, [r6, #43]	; 0x2b
 80069e0:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80069e4:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
 80069e8:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b
 80069ec:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
 80069f0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80069f4:	f886 302e 	strb.w	r3, [r6, #46]	; 0x2e
 80069f8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80069fc:	f886 302f 	strb.w	r3, [r6, #47]	; 0x2f
 8006a00:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8006a04:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
 8006a08:	f894 303f 	ldrb.w	r3, [r4, #63]	; 0x3f
 8006a0c:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
 8006a10:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8006a14:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
 8006a18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8006a1c:	f886 3033 	strb.w	r3, [r6, #51]	; 0x33
 8006a20:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 8006a24:	f886 3034 	strb.w	r3, [r6, #52]	; 0x34
 8006a28:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006a2c:	f886 3035 	strb.w	r3, [r6, #53]	; 0x35
 8006a30:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006a34:	f886 3036 	strb.w	r3, [r6, #54]	; 0x36
 8006a38:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006a3c:	f886 3037 	strb.w	r3, [r6, #55]	; 0x37
 8006a40:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8006a44:	f886 3038 	strb.w	r3, [r6, #56]	; 0x38
 8006a48:	f894 3047 	ldrb.w	r3, [r4, #71]	; 0x47
 8006a4c:	f886 3039 	strb.w	r3, [r6, #57]	; 0x39
 8006a50:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006a54:	f886 303a 	strb.w	r3, [r6, #58]	; 0x3a
 8006a58:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
 8006a5c:	f886 303b 	strb.w	r3, [r6, #59]	; 0x3b
 8006a60:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8006a64:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
 8006a68:	f894 304b 	ldrb.w	r3, [r4, #75]	; 0x4b
 8006a6c:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
 8006a70:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8006a74:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
 8006a78:	f894 304d 	ldrb.w	r3, [r4, #77]	; 0x4d
 8006a7c:	f886 303f 	strb.w	r3, [r6, #63]	; 0x3f
 8006a80:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
 8006a84:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
 8006a88:	f894 304f 	ldrb.w	r3, [r4, #79]	; 0x4f
 8006a8c:	f886 3041 	strb.w	r3, [r6, #65]	; 0x41
 8006a90:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006a94:	f886 3042 	strb.w	r3, [r6, #66]	; 0x42
 8006a98:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8006a9c:	f886 3043 	strb.w	r3, [r6, #67]	; 0x43
 8006aa0:	f894 3052 	ldrb.w	r3, [r4, #82]	; 0x52
 8006aa4:	f886 3044 	strb.w	r3, [r6, #68]	; 0x44
 8006aa8:	f894 3053 	ldrb.w	r3, [r4, #83]	; 0x53
 8006aac:	f886 3045 	strb.w	r3, [r6, #69]	; 0x45
 8006ab0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 8006ab4:	f886 3046 	strb.w	r3, [r6, #70]	; 0x46
 8006ab8:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 8006abc:	f886 3047 	strb.w	r3, [r6, #71]	; 0x47
 8006ac0:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 8006ac4:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
 8006ac8:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 8006acc:	f886 3049 	strb.w	r3, [r6, #73]	; 0x49
 8006ad0:	f894 3058 	ldrb.w	r3, [r4, #88]	; 0x58
 8006ad4:	f886 304a 	strb.w	r3, [r6, #74]	; 0x4a
 8006ad8:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 8006adc:	f886 304b 	strb.w	r3, [r6, #75]	; 0x4b
 8006ae0:	f894 305a 	ldrb.w	r3, [r4, #90]	; 0x5a
 8006ae4:	f886 304c 	strb.w	r3, [r6, #76]	; 0x4c
 8006ae8:	f894 305b 	ldrb.w	r3, [r4, #91]	; 0x5b
 8006aec:	f886 304d 	strb.w	r3, [r6, #77]	; 0x4d
 8006af0:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8006af4:	f886 304e 	strb.w	r3, [r6, #78]	; 0x4e
 8006af8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8006afc:	f886 304f 	strb.w	r3, [r6, #79]	; 0x4f
 8006b00:	f894 305e 	ldrb.w	r3, [r4, #94]	; 0x5e
 8006b04:	f886 3050 	strb.w	r3, [r6, #80]	; 0x50
 8006b08:	f894 305f 	ldrb.w	r3, [r4, #95]	; 0x5f
 8006b0c:	f886 3051 	strb.w	r3, [r6, #81]	; 0x51
 8006b10:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8006b14:	f886 3052 	strb.w	r3, [r6, #82]	; 0x52
 8006b18:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 8006b1c:	f886 3053 	strb.w	r3, [r6, #83]	; 0x53
 8006b20:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
 8006b24:	f886 3054 	strb.w	r3, [r6, #84]	; 0x54
 8006b28:	f894 3063 	ldrb.w	r3, [r4, #99]	; 0x63
 8006b2c:	f886 3055 	strb.w	r3, [r6, #85]	; 0x55
 8006b30:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 8006b34:	f886 3056 	strb.w	r3, [r6, #86]	; 0x56
 8006b38:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 8006b3c:	f886 3057 	strb.w	r3, [r6, #87]	; 0x57
 8006b40:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 8006b44:	f886 3058 	strb.w	r3, [r6, #88]	; 0x58
 8006b48:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8006b4c:	f886 3059 	strb.w	r3, [r6, #89]	; 0x59
 8006b50:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 8006b54:	f886 305a 	strb.w	r3, [r6, #90]	; 0x5a
 8006b58:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 8006b5c:	f886 305b 	strb.w	r3, [r6, #91]	; 0x5b
 8006b60:	f894 306a 	ldrb.w	r3, [r4, #106]	; 0x6a
 8006b64:	f886 305c 	strb.w	r3, [r6, #92]	; 0x5c
 8006b68:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
 8006b6c:	f886 305d 	strb.w	r3, [r6, #93]	; 0x5d
 8006b70:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 8006b74:	f886 305e 	strb.w	r3, [r6, #94]	; 0x5e
 8006b78:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
 8006b7c:	f886 305f 	strb.w	r3, [r6, #95]	; 0x5f
 8006b80:	f894 306e 	ldrb.w	r3, [r4, #110]	; 0x6e
 8006b84:	f886 3060 	strb.w	r3, [r6, #96]	; 0x60
 8006b88:	f894 306f 	ldrb.w	r3, [r4, #111]	; 0x6f
 8006b8c:	f886 3061 	strb.w	r3, [r6, #97]	; 0x61
 8006b90:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8006b94:	f886 3062 	strb.w	r3, [r6, #98]	; 0x62
 8006b98:	f894 3071 	ldrb.w	r3, [r4, #113]	; 0x71
 8006b9c:	f886 3063 	strb.w	r3, [r6, #99]	; 0x63
 8006ba0:	f894 3072 	ldrb.w	r3, [r4, #114]	; 0x72
 8006ba4:	f886 3064 	strb.w	r3, [r6, #100]	; 0x64
 8006ba8:	f894 3073 	ldrb.w	r3, [r4, #115]	; 0x73
 8006bac:	f886 3065 	strb.w	r3, [r6, #101]	; 0x65
 8006bb0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
 8006bb4:	f886 3066 	strb.w	r3, [r6, #102]	; 0x66
 8006bb8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
		}
	}


	//read first element in buffer (after the 14 character name) as a count of how many parameters
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8006bbc:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8006bc0:	f886 3067 	strb.w	r3, [r6, #103]	; 0x67
 8006bc4:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
 8006bc8:	e00e      	b.n	8006be8 <parsePreset+0x3dc>
 8006bca:	bf00      	nop
 8006bcc:	200055c0 	.word	0x200055c0
 8006bd0:	300001e0 	.word	0x300001e0
 8006bd4:	30000000 	.word	0x30000000
 8006bd8:	2000071c 	.word	0x2000071c
 8006bdc:	20016d3c 	.word	0x20016d3c
 8006be0:	2407b040 	.word	0x2407b040
 8006be4:	2407d3c0 	.word	0x2407d3c0
 8006be8:	f886 3068 	strb.w	r3, [r6, #104]	; 0x68
 8006bec:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
 8006bf0:	f886 3069 	strb.w	r3, [r6, #105]	; 0x69
 8006bf4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
 8006bf8:	f886 306a 	strb.w	r3, [r6, #106]	; 0x6a
 8006bfc:	f894 3079 	ldrb.w	r3, [r4, #121]	; 0x79
 8006c00:	f886 306b 	strb.w	r3, [r6, #107]	; 0x6b
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8006c04:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
 8006c08:	eb03 2302 	add.w	r3, r3, r2, lsl #8
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8006c0c:	f894 207a 	ldrb.w	r2, [r4, #122]	; 0x7a
 8006c10:	f886 206c 	strb.w	r2, [r6, #108]	; 0x6c
	uint16_t paramCount = (buffer[bufferIndex] << 8) + buffer[bufferIndex+1];
 8006c14:	b29b      	uxth	r3, r3
			macroNamesArray[presetNumber][j][k] = buffer[bufferIndex];
 8006c16:	f894 207b 	ldrb.w	r2, [r4, #123]	; 0x7b
 8006c1a:	f886 206d 	strb.w	r2, [r6, #109]	; 0x6d
 8006c1e:	f894 207c 	ldrb.w	r2, [r4, #124]	; 0x7c
 8006c22:	f886 206e 	strb.w	r2, [r6, #110]	; 0x6e
 8006c26:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 8006c2a:	f886 206f 	strb.w	r2, [r6, #111]	; 0x6f
	if (paramCount > size)
 8006c2e:	9a00      	ldr	r2, [sp, #0]
 8006c30:	4293      	cmp	r3, r2
 8006c32:	dc0d      	bgt.n	8006c50 <parsePreset+0x444>
		return;
	}

	//check the validity of the transfer by verifying that the param array and mapping arrays both end with the required 0xefef values
	//should make this a real checksum
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 8006c34:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	if (paramEndCheck != 0xefef)
 8006c38:	f64e 70ef 	movw	r0, #61423	; 0xefef
	uint16_t paramEndCheck = (buffer[paramCount*2+bufferIndex+2] << 8) + buffer[paramCount*2+bufferIndex+3];
 8006c3c:	005f      	lsls	r7, r3, #1
 8006c3e:	f891 6080 	ldrb.w	r6, [r1, #128]	; 0x80
 8006c42:	f891 2081 	ldrb.w	r2, [r1, #129]	; 0x81
 8006c46:	eb02 2206 	add.w	r2, r2, r6, lsl #8
	if (paramEndCheck != 0xefef)
 8006c4a:	b292      	uxth	r2, r2
 8006c4c:	4282      	cmp	r2, r0
 8006c4e:	d009      	beq.n	8006c64 <parsePreset+0x458>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
	{
		//error in transmission - give up and don't parse!
		audioMasterLevel = 1.0f;
		presetWaitingToParse = 0;
 8006c50:	4ac4      	ldr	r2, [pc, #784]	; (8006f64 <parsePreset+0x758>)
		audioMasterLevel = 1.0f;
 8006c52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
		presetWaitingToParse = 0;
 8006c56:	6015      	str	r5, [r2, #0]
		audioMasterLevel = 1.0f;
 8006c58:	4ac3      	ldr	r2, [pc, #780]	; (8006f68 <parsePreset+0x75c>)
 8006c5a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006c5c:	b662      	cpsie	i
	overSampled = 1;
	numEffectToTick = totalEffects;
	filterToTick = totalFilters;
	__enable_irq();
	presetReady = 1;
}
 8006c5e:	b007      	add	sp, #28
 8006c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 8006c64:	f891 0082 	ldrb.w	r0, [r1, #130]	; 0x82
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006c68:	b2ba      	uxth	r2, r7
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 8006c6a:	f891 b083 	ldrb.w	fp, [r1, #131]	; 0x83
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006c6e:	f102 0184 	add.w	r1, r2, #132	; 0x84
	uint16_t mappingCount = (buffer[paramCount*2+bufferIndex+4] << 8) + buffer[paramCount*2+bufferIndex+5];
 8006c72:	eb0b 2b00 	add.w	fp, fp, r0, lsl #8
 8006c76:	fa1f fb8b 	uxth.w	fp, fp
	uint16_t mappingEndLocation = (paramCount * 2) + (mappingCount * 5) + bufferIndex+6;
 8006c7a:	eb0b 008b 	add.w	r0, fp, fp, lsl #2
 8006c7e:	b280      	uxth	r0, r0
 8006c80:	4401      	add	r1, r0
 8006c82:	9002      	str	r0, [sp, #8]
	if (mappingEndLocation > size)
 8006c84:	9800      	ldr	r0, [sp, #0]
 8006c86:	b289      	uxth	r1, r1
 8006c88:	4281      	cmp	r1, r0
 8006c8a:	dce1      	bgt.n	8006c50 <parsePreset+0x444>
	uint16_t mappingEndCheck = (buffer[mappingEndLocation] << 8) + buffer[mappingEndLocation+1];
 8006c8c:	1866      	adds	r6, r4, r1
 8006c8e:	5c60      	ldrb	r0, [r4, r1]
 8006c90:	7871      	ldrb	r1, [r6, #1]
 8006c92:	eb01 2100 	add.w	r1, r1, r0, lsl #8
	if (mappingEndCheck != 0xfefe) //this check value is 0xfefe
 8006c96:	f64f 60fe 	movw	r0, #65278	; 0xfefe
 8006c9a:	b289      	uxth	r1, r1
 8006c9c:	4281      	cmp	r1, r0
 8006c9e:	d1d7      	bne.n	8006c50 <parsePreset+0x444>
	for (int i = 0; i < paramCount; i++)
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f001 81a5 	beq.w	8007ff0 <parsePreset+0x17e4>
 8006ca6:	48b1      	ldr	r0, [pc, #708]	; (8006f6c <parsePreset+0x760>)
 8006ca8:	3280      	adds	r2, #128	; 0x80
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006caa:	ed9f 7ab1 	vldr	s14, [pc, #708]	; 8006f70 <parsePreset+0x764>
	bufferIndex = bufferIndex + 2;
 8006cae:	2180      	movs	r1, #128	; 0x80
 8006cb0:	b297      	uxth	r7, r2
	for (int i = 0; i < paramCount; i++)
 8006cb2:	4606      	mov	r6, r0
 8006cb4:	4605      	mov	r5, r0
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006cb6:	1c4a      	adds	r2, r1, #1
 8006cb8:	f814 c001 	ldrb.w	ip, [r4, r1]
		bufferIndex += 2;
 8006cbc:	3102      	adds	r1, #2
	for (int i = 0; i < paramCount; i++)
 8006cbe:	351c      	adds	r5, #28
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006cc0:	b292      	uxth	r2, r2
		bufferIndex += 2;
 8006cc2:	b289      	uxth	r1, r1
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006cc4:	5ca2      	ldrb	r2, [r4, r2]
	for (int i = 0; i < paramCount; i++)
 8006cc6:	42b9      	cmp	r1, r7
			params[i].zeroToOneVal[v] = INV_TWO_TO_16 * ((buffer[bufferIndex] << 8) + buffer[bufferIndex+1]);
 8006cc8:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8006ccc:	ee07 2a90 	vmov	s15, r2
 8006cd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cd4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006cd8:	ed45 7a07 	vstr	s15, [r5, #-28]	; 0xffffffe4
 8006cdc:	ed45 7a06 	vstr	s15, [r5, #-24]	; 0xffffffe8
	for (int i = 0; i < paramCount; i++)
 8006ce0:	d1e9      	bne.n	8006cb6 <parsePreset+0x4aa>
 8006ce2:	ebc3 05c3 	rsb	r5, r3, r3, lsl #3
 8006ce6:	4aa1      	ldr	r2, [pc, #644]	; (8006f6c <parsePreset+0x760>)
 8006ce8:	49a2      	ldr	r1, [pc, #648]	; (8006f74 <parsePreset+0x768>)
 8006cea:	eb00 0585 	add.w	r5, r0, r5, lsl #2
		params[i].setParam = &blankFunction;
 8006cee:	6151      	str	r1, [r2, #20]
	for (int i = 0; i < paramCount; i++)
 8006cf0:	321c      	adds	r2, #28
 8006cf2:	42aa      	cmp	r2, r5
 8006cf4:	d1fb      	bne.n	8006cee <parsePreset+0x4e2>
 8006cf6:	4aa0      	ldr	r2, [pc, #640]	; (8006f78 <parsePreset+0x76c>)
		params[i].scaleFunc = &scaleDefault;
 8006cf8:	6102      	str	r2, [r0, #16]
	for (int i = 0; i < paramCount; i++)
 8006cfa:	301c      	adds	r0, #28
 8006cfc:	42a8      	cmp	r0, r5
 8006cfe:	d1fb      	bne.n	8006cf8 <parsePreset+0x4ec>
	bufferIndex += 2;
 8006d00:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8006d04:	f108 0884 	add.w	r8, r8, #132	; 0x84
 8006d08:	fa1f f888 	uxth.w	r8, r8
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8006d0c:	2b9a      	cmp	r3, #154	; 0x9a
 8006d0e:	f301 816c 	bgt.w	8007fea <parsePreset+0x17de>
 8006d12:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006d16:	4d99      	ldr	r5, [pc, #612]	; (8006f7c <parsePreset+0x770>)
 8006d18:	4996      	ldr	r1, [pc, #600]	; (8006f74 <parsePreset+0x768>)
			params[i].zeroToOneVal[v] = 0.0f;
 8006d1a:	2000      	movs	r0, #0
 8006d1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006d20:	4a95      	ldr	r2, [pc, #596]	; (8006f78 <parsePreset+0x76c>)
 8006d22:	6018      	str	r0, [r3, #0]
 8006d24:	6058      	str	r0, [r3, #4]
		params[i].setParam = &blankFunction;
 8006d26:	e9c3 2104 	strd	r2, r1, [r3, #16]
	for (int i = paramCount; i < NUM_PARAMS; i++)
 8006d2a:	331c      	adds	r3, #28
 8006d2c:	42ab      	cmp	r3, r5
 8006d2e:	d1f8      	bne.n	8006d22 <parsePreset+0x516>
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8006d30:	4b93      	ldr	r3, [pc, #588]	; (8006f80 <parsePreset+0x774>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006d32:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
	params[Transpose].scaleFunc = &scaleTranspose;
 8006d36:	4993      	ldr	r1, [pc, #588]	; (8006f84 <parsePreset+0x778>)
	params[Envelope1Attack].scaleFunc = &scaleEnvTimes;
 8006d38:	f8c6 3be0 	str.w	r3, [r6, #3040]	; 0xbe0
	params[Envelope1Decay].scaleFunc = &scaleEnvTimes;
 8006d3c:	f8c6 3bfc 	str.w	r3, [r6, #3068]	; 0xbfc
	params[Envelope1Release].scaleFunc = &scaleEnvTimes;
 8006d40:	f8c6 3c34 	str.w	r3, [r6, #3124]	; 0xc34
	params[Envelope2Attack].scaleFunc = &scaleEnvTimes;
 8006d44:	f8c6 3c88 	str.w	r3, [r6, #3208]	; 0xc88
	params[Envelope2Decay].scaleFunc = &scaleEnvTimes;
 8006d48:	f8c6 3ca4 	str.w	r3, [r6, #3236]	; 0xca4
	params[Envelope2Release].scaleFunc = &scaleEnvTimes;
 8006d4c:	f8c6 3cdc 	str.w	r3, [r6, #3292]	; 0xcdc
	params[Envelope3Attack].scaleFunc = &scaleEnvTimes;
 8006d50:	f8c6 3d30 	str.w	r3, [r6, #3376]	; 0xd30
	params[Envelope3Decay].scaleFunc = &scaleEnvTimes;
 8006d54:	f8c6 3d4c 	str.w	r3, [r6, #3404]	; 0xd4c
	params[Envelope3Release].scaleFunc = &scaleEnvTimes;
 8006d58:	f8c6 3d84 	str.w	r3, [r6, #3460]	; 0xd84
	params[Envelope4Attack].scaleFunc = &scaleEnvTimes;
 8006d5c:	f8c6 3dd8 	str.w	r3, [r6, #3544]	; 0xdd8
	params[Envelope4Decay].scaleFunc = &scaleEnvTimes;
 8006d60:	f8c6 3df4 	str.w	r3, [r6, #3572]	; 0xdf4
	params[Envelope4Release].scaleFunc = &scaleEnvTimes;
 8006d64:	f8c6 3e2c 	str.w	r3, [r6, #3628]	; 0xe2c
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8006d68:	4b87      	ldr	r3, [pc, #540]	; (8006f88 <parsePreset+0x77c>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8006d6a:	4a88      	ldr	r2, [pc, #544]	; (8006f8c <parsePreset+0x780>)
	params[Osc1Pitch].scaleFunc = &scaleOscPitch;
 8006d6c:	f8c6 32cc 	str.w	r3, [r6, #716]	; 0x2cc
	params[Osc1Harmonics].scaleFunc = &scaleOscPitch;
 8006d70:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
	params[Osc2Pitch].scaleFunc = &scaleOscPitch;
 8006d74:	f8c6 3438 	str.w	r3, [r6, #1080]	; 0x438
	params[Osc2Harmonics].scaleFunc = &scaleOscPitch;
 8006d78:	f8c6 34c4 	str.w	r3, [r6, #1220]	; 0x4c4
	params[Osc3Pitch].scaleFunc = &scaleOscPitch;
 8006d7c:	f8c6 35a4 	str.w	r3, [r6, #1444]	; 0x5a4
	params[Osc3Harmonics].scaleFunc = &scaleOscPitch;
 8006d80:	f8c6 3630 	str.w	r3, [r6, #1584]	; 0x630
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8006d84:	4b82      	ldr	r3, [pc, #520]	; (8006f90 <parsePreset+0x784>)
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8006d86:	f8df a23c 	ldr.w	sl, [pc, #572]	; 8006fc4 <parsePreset+0x7b8>
	params[Osc1Fine].scaleFunc = &scaleOscFine;
 8006d8a:	f8c6 32e8 	str.w	r3, [r6, #744]	; 0x2e8
	params[Osc2Fine].scaleFunc = &scaleOscFine;
 8006d8e:	f8c6 3454 	str.w	r3, [r6, #1108]	; 0x454
	params[Osc3Fine].scaleFunc = &scaleOscFine;
 8006d92:	f8c6 35c0 	str.w	r3, [r6, #1472]	; 0x5c0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8006d96:	4b7f      	ldr	r3, [pc, #508]	; (8006f94 <parsePreset+0x788>)
	params[Transpose].scaleFunc = &scaleTranspose;
 8006d98:	f8c6 11d0 	str.w	r1, [r6, #464]	; 0x1d0
	params[Osc1Freq].scaleFunc = &scaleOscFreq;
 8006d9c:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
	params[Osc2Freq].scaleFunc = &scaleOscFreq;
 8006da0:	f8c6 3470 	str.w	r3, [r6, #1136]	; 0x470
	params[Osc3Freq].scaleFunc = &scaleOscFreq;
 8006da4:	f8c6 35dc 	str.w	r3, [r6, #1500]	; 0x5dc
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8006da8:	4b7b      	ldr	r3, [pc, #492]	; (8006f98 <parsePreset+0x78c>)
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8006daa:	497c      	ldr	r1, [pc, #496]	; (8006f9c <parsePreset+0x790>)
	params[Filter1Cutoff].scaleFunc = &scaleFilterCutoff;
 8006dac:	f8c6 3aac 	str.w	r3, [r6, #2732]	; 0xaac
	params[Filter2Cutoff].scaleFunc = &scaleFilterCutoff;
 8006db0:	f8c6 3b54 	str.w	r3, [r6, #2900]	; 0xb54
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8006db4:	4b7a      	ldr	r3, [pc, #488]	; (8006fa0 <parsePreset+0x794>)
	params[LFO1Rate].scaleFunc = &scaleLFORates;
 8006db6:	f8c6 2e80 	str.w	r2, [r6, #3712]	; 0xe80
	params[LFO2Rate].scaleFunc = &scaleLFORates;
 8006dba:	f8c6 2f0c 	str.w	r2, [r6, #3852]	; 0xf0c
	params[Filter1Resonance].scaleFunc = &scaleFilterResonance;
 8006dbe:	f8c6 3ae4 	str.w	r3, [r6, #2788]	; 0xae4
	params[Filter2Resonance].scaleFunc = &scaleFilterResonance;
 8006dc2:	f8c6 3b8c 	str.w	r3, [r6, #2956]	; 0xb8c
	params[PitchBendRange].scaleFunc = &scalePitchBend;
 8006dc6:	f8c6 11ec 	str.w	r1, [r6, #492]	; 0x1ec
	params[LFO3Rate].scaleFunc = &scaleLFORates;
 8006dca:	f8c6 2f98 	str.w	r2, [r6, #3992]	; 0xf98
	params[LFO4Rate].scaleFunc = &scaleLFORates;
 8006dce:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006dd2:	f6aa 1214 	subw	r2, sl, #2324	; 0x914
 8006dd6:	edd2 7a00 	vldr	s15, [r2]
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8006dda:	4a72      	ldr	r2, [pc, #456]	; (8006fa4 <parsePreset+0x798>)
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
	params[OutputTone].scaleFunc  = &scaleFinalLowpass;
 8006de0:	f8ca 20cc 	str.w	r2, [sl, #204]	; 0xcc
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006de4:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006de8:	fef8 7a67 	vrinta.f32	s15, s15
 8006dec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006df0:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006df4:	f89d 2000 	ldrb.w	r2, [sp]
 8006df8:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006dfa:	4a6b      	ldr	r2, [pc, #428]	; (8006fa8 <parsePreset+0x79c>)
 8006dfc:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006e00:	bf88      	it	hi
 8006e02:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e06:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e0a:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006e0e:	fef8 7a67 	vrinta.f32	s15, s15
 8006e12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e16:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006e1a:	f89d 2000 	ldrb.w	r2, [sp]
 8006e1e:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e20:	4a62      	ldr	r2, [pc, #392]	; (8006fac <parsePreset+0x7a0>)
 8006e22:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006e26:	bf88      	it	hi
 8006e28:	f8c6 3748 	strhi.w	r3, [r6, #1864]	; 0x748
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e30:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006e34:	fef8 7a67 	vrinta.f32	s15, s15
 8006e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e3c:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006e40:	f89d 2000 	ldrb.w	r2, [sp]
 8006e44:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e46:	4a5a      	ldr	r2, [pc, #360]	; (8006fb0 <parsePreset+0x7a4>)
 8006e48:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006e4c:	bf88      	it	hi
 8006e4e:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e56:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006e5a:	fef8 7a67 	vrinta.f32	s15, s15
 8006e5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e62:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006e66:	f89d 2000 	ldrb.w	r2, [sp]
 8006e6a:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e6c:	4a51      	ldr	r2, [pc, #324]	; (8006fb4 <parsePreset+0x7a8>)
 8006e6e:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006e72:	bf88      	it	hi
 8006e74:	f8c6 3828 	strhi.w	r3, [r6, #2088]	; 0x828
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006e7c:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006e80:	fef8 7a67 	vrinta.f32	s15, s15
 8006e84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e88:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006e8c:	f89d 2000 	ldrb.w	r2, [sp]
 8006e90:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e92:	4a49      	ldr	r2, [pc, #292]	; (8006fb8 <parsePreset+0x7ac>)
 8006e94:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006e98:	bf88      	it	hi
 8006e9a:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006e9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ea2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006ea6:	fef8 7a67 	vrinta.f32	s15, s15
 8006eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006eae:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006eb2:	f89d 2000 	ldrb.w	r2, [sp]
 8006eb6:	2a0b      	cmp	r2, #11
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006eb8:	4a40      	ldr	r2, [pc, #256]	; (8006fbc <parsePreset+0x7b0>)
 8006eba:	edd2 7a00 	vldr	s15, [r2]
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006ebe:	bf88      	it	hi
 8006ec0:	f8c6 3908 	strhi.w	r3, [r6, #2312]	; 0x908
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006ec4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ec8:	fef8 7a67 	vrinta.f32	s15, s15
 8006ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed0:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006ed4:	f89d 2000 	ldrb.w	r2, [sp]
 8006ed8:	2a0b      	cmp	r2, #11
 8006eda:	d901      	bls.n	8006ee0 <parsePreset+0x6d4>
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006edc:	f8c6 39e8 	str.w	r3, [r6, #2536]	; 0x9e8
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006ee0:	4a37      	ldr	r2, [pc, #220]	; (8006fc0 <parsePreset+0x7b4>)
 8006ee2:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8006ee6:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006f6c <parsePreset+0x760>
 8006eea:	edd2 7a00 	vldr	s15, [r2]
	for (int i = 0; i < paramCount; i++)
 8006eee:	464f      	mov	r7, r9
				FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[v] * (NUM_EFFECT_TYPES-1));
 8006ef0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006ef4:	fef8 7a67 	vrinta.f32	s15, s15
 8006ef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006efc:	edcd 7a00 	vstr	s15, [sp]
				if (effectType > FXLowpass)
 8006f00:	f89d 2000 	ldrb.w	r2, [sp]
 8006f04:	2a0b      	cmp	r2, #11
					FXAlias[2].scaleFunc = &scaleFilterResonance;
 8006f06:	bf88      	it	hi
 8006f08:	f8c6 39e8 	strhi.w	r3, [r6, #2536]	; 0x9e8
	for (int i = 0; i < paramCount; i++)
 8006f0c:	464e      	mov	r6, r9
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006f0e:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006f10:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006f12:	ed17 0a07 	vldr	s0, [r7, #-28]	; 0xffffffe4
 8006f16:	4798      	blx	r3
 8006f18:	ed07 0a05 	vstr	s0, [r7, #-20]	; 0xffffffec
		for (int i = 0; i < NUM_PARAMS; i++)
 8006f1c:	42af      	cmp	r7, r5
 8006f1e:	d1f6      	bne.n	8006f0e <parsePreset+0x702>
 8006f20:	4f12      	ldr	r7, [pc, #72]	; (8006f6c <parsePreset+0x760>)
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006f22:	693b      	ldr	r3, [r7, #16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006f24:	371c      	adds	r7, #28
			params[i].realVal[v] = params[i].scaleFunc(params[i].zeroToOneVal[v]);
 8006f26:	ed17 0a06 	vldr	s0, [r7, #-24]	; 0xffffffe8
 8006f2a:	4798      	blx	r3
 8006f2c:	ed07 0a04 	vstr	s0, [r7, #-16]
		for (int i = 0; i < NUM_PARAMS; i++)
 8006f30:	42af      	cmp	r7, r5
 8006f32:	d1f6      	bne.n	8006f22 <parsePreset+0x716>
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006f34:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8006f38:	edd6 7af7 	vldr	s15, [r6, #988]	; 0x3dc
 8006f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006f40:	fef8 7a67 	vrinta.f32	s15, s15
 8006f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006f48:	ee17 3a90 	vmov	r3, s15
		switch (oscshape)
 8006f4c:	2b06      	cmp	r3, #6
 8006f4e:	d83e      	bhi.n	8006fce <parsePreset+0x7c2>
 8006f50:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006f54:	081d003a 	.word	0x081d003a
 8006f58:	08130818 	.word	0x08130818
 8006f5c:	0809080e 	.word	0x0809080e
 8006f60:	0804      	.short	0x0804
 8006f62:	bf00      	nop
 8006f64:	20016d50 	.word	0x20016d50
 8006f68:	2000071c 	.word	0x2000071c
 8006f6c:	20015c48 	.word	0x20015c48
 8006f70:	377ffff6 	.word	0x377ffff6
 8006f74:	08005951 	.word	0x08005951
 8006f78:	08005a8d 	.word	0x08005a8d
 8006f7c:	20016d3c 	.word	0x20016d3c
 8006f80:	08005b91 	.word	0x08005b91
 8006f84:	08005aa1 	.word	0x08005aa1
 8006f88:	080058d5 	.word	0x080058d5
 8006f8c:	08005c19 	.word	0x08005c19
 8006f90:	080058ed 	.word	0x080058ed
 8006f94:	08005909 	.word	0x08005909
 8006f98:	08005925 	.word	0x08005925
 8006f9c:	08005ad1 	.word	0x08005ad1
 8006fa0:	08005af5 	.word	0x08005af5
 8006fa4:	08005935 	.word	0x08005935
 8006fa8:	20016338 	.word	0x20016338
 8006fac:	20016414 	.word	0x20016414
 8006fb0:	20016418 	.word	0x20016418
 8006fb4:	200164f4 	.word	0x200164f4
 8006fb8:	200164f8 	.word	0x200164f8
 8006fbc:	200165d4 	.word	0x200165d4
 8006fc0:	200165d8 	.word	0x200165d8
 8006fc4:	20016c48 	.word	0x20016c48
				  shapeTick[i] = &sawSquareTick;
 8006fc8:	4b8e      	ldr	r3, [pc, #568]	; (8007204 <parsePreset+0x9f8>)
 8006fca:	4a8f      	ldr	r2, [pc, #572]	; (8007208 <parsePreset+0x9fc>)
 8006fcc:	601a      	str	r2, [r3, #0]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006fce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006fd2:	4b8e      	ldr	r3, [pc, #568]	; (800720c <parsePreset+0xa00>)
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006fd4:	edd6 6aaa 	vldr	s13, [r6, #680]	; 0x2a8
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006fd8:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006fdc:	eef4 6ae7 	vcmpe.f32	s13, s15
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006fe0:	edd3 7a00 	vldr	s15, [r3]
 8006fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8006fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006fec:	fef8 7a67 	vrinta.f32	s15, s15
 8006ff0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	uint8_t enabledCount = 0;
 8006ff4:	bfcc      	ite	gt
 8006ff6:	2301      	movgt	r3, #1
 8006ff8:	2300      	movle	r3, #0
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8006ffa:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 8006ffe:	2a06      	cmp	r2, #6
 8007000:	d80b      	bhi.n	800701a <parsePreset+0x80e>
 8007002:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007006:	0007      	.short	0x0007
 8007008:	07a107a6 	.word	0x07a107a6
 800700c:	0797079c 	.word	0x0797079c
 8007010:	078d0792 	.word	0x078d0792
				  shapeTick[i] = &sawSquareTick;
 8007014:	4a7b      	ldr	r2, [pc, #492]	; (8007204 <parsePreset+0x9f8>)
 8007016:	497c      	ldr	r1, [pc, #496]	; (8007208 <parsePreset+0x9fc>)
 8007018:	6051      	str	r1, [r2, #4]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 800701a:	4a7d      	ldr	r2, [pc, #500]	; (8007210 <parsePreset+0xa04>)
 800701c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007020:	ed92 7a00 	vldr	s14, [r2]
 8007024:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007028:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800702c:	dd01      	ble.n	8007032 <parsePreset+0x826>
			enabledCount++;
 800702e:	3301      	adds	r3, #1
 8007030:	b2db      	uxtb	r3, r3
		int oscshape = roundf(params[Osc1ShapeSet + (OscParamsNum * i)].realVal[0] * (NUM_OSC_SHAPES-1));
 8007032:	4a78      	ldr	r2, [pc, #480]	; (8007214 <parsePreset+0xa08>)
 8007034:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8007038:	edd2 7a00 	vldr	s15, [r2]
 800703c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007040:	fef8 7a67 	vrinta.f32	s15, s15
 8007044:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007048:	ee17 2a90 	vmov	r2, s15
		switch (oscshape)
 800704c:	2a06      	cmp	r2, #6
 800704e:	d80b      	bhi.n	8007068 <parsePreset+0x85c>
 8007050:	e8df f012 	tbh	[pc, r2, lsl #1]
 8007054:	07610007 	.word	0x07610007
 8007058:	0757075c 	.word	0x0757075c
 800705c:	074d0752 	.word	0x074d0752
 8007060:	0748      	.short	0x0748
				  shapeTick[i] = &sawSquareTick;
 8007062:	4a68      	ldr	r2, [pc, #416]	; (8007204 <parsePreset+0x9f8>)
 8007064:	4968      	ldr	r1, [pc, #416]	; (8007208 <parsePreset+0x9fc>)
 8007066:	6091      	str	r1, [r2, #8]
		if (params[Osc1 + (OscParamsNum * i)].realVal[0]  > 0.5f)
 8007068:	4a6b      	ldr	r2, [pc, #428]	; (8007218 <parsePreset+0xa0c>)
 800706a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800706e:	ed92 7a00 	vldr	s14, [r2]
 8007072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707a:	dd01      	ble.n	8007080 <parsePreset+0x874>
			enabledCount++;
 800707c:	3301      	adds	r3, #1
 800707e:	b2db      	uxtb	r3, r3
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8007080:	4a66      	ldr	r2, [pc, #408]	; (800721c <parsePreset+0xa10>)
 8007082:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8007086:	edd2 7a00 	vldr	s15, [r2]
	oscAmpMult = oscAmpMultArray[enabledCount];
 800708a:	4a65      	ldr	r2, [pc, #404]	; (8007220 <parsePreset+0xa14>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 800708c:	ee67 7a87 	vmul.f32	s15, s15, s14
	oscAmpMult = oscAmpMultArray[enabledCount];
 8007090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007094:	4a63      	ldr	r2, [pc, #396]	; (8007224 <parsePreset+0xa18>)
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 8007096:	fef8 7a67 	vrinta.f32	s15, s15
 800709a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 800709e:	6819      	ldr	r1, [r3, #0]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80070a0:	ee17 3a90 	vmov	r3, s15
	oscAmpMult = oscAmpMultArray[enabledCount];
 80070a4:	6011      	str	r1, [r2, #0]
		switch (filterType)
 80070a6:	4960      	ldr	r1, [pc, #384]	; (8007228 <parsePreset+0xa1c>)
 80070a8:	2b08      	cmp	r3, #8
 80070aa:	d811      	bhi.n	80070d0 <parsePreset+0x8c4>
 80070ac:	e8df f013 	tbh	[pc, r3, lsl #1]
 80070b0:	07110009 	.word	0x07110009
 80070b4:	06ff0708 	.word	0x06ff0708
 80070b8:	06ed06f6 	.word	0x06ed06f6
 80070bc:	06db06e4 	.word	0x06db06e4
 80070c0:	06d2      	.short	0x06d2
				  filterTick[i] = &lowpassTick;
 80070c2:	4b5a      	ldr	r3, [pc, #360]	; (800722c <parsePreset+0xa20>)
 80070c4:	4a5a      	ldr	r2, [pc, #360]	; (8007230 <parsePreset+0xa24>)
 80070c6:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &lowpassSetQ;
 80070c8:	4b5a      	ldr	r3, [pc, #360]	; (8007234 <parsePreset+0xa28>)
 80070ca:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &lowpassSetGain;
 80070cc:	4b5a      	ldr	r3, [pc, #360]	; (8007238 <parsePreset+0xa2c>)
 80070ce:	604b      	str	r3, [r1, #4]
		int filterType = roundf(params[Filter1Type + (i * FilterParamsNum)].realVal[0] * (NUM_FILTER_TYPES-1));
 80070d0:	4b5a      	ldr	r3, [pc, #360]	; (800723c <parsePreset+0xa30>)
 80070d2:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80070d6:	edd3 7a00 	vldr	s15, [r3]
 80070da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80070de:	fef8 7a67 	vrinta.f32	s15, s15
 80070e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80070e6:	ee17 3a90 	vmov	r3, s15
		switch (filterType)
 80070ea:	2b08      	cmp	r3, #8
 80070ec:	d811      	bhi.n	8007112 <parsePreset+0x906>
 80070ee:	e8df f013 	tbh	[pc, r3, lsl #1]
 80070f2:	0009      	.short	0x0009
 80070f4:	069f06a8 	.word	0x069f06a8
 80070f8:	068d0696 	.word	0x068d0696
 80070fc:	067b0684 	.word	0x067b0684
 8007100:	06690672 	.word	0x06690672
				  filterTick[i] = &lowpassTick;
 8007104:	4b49      	ldr	r3, [pc, #292]	; (800722c <parsePreset+0xa20>)
 8007106:	4a4a      	ldr	r2, [pc, #296]	; (8007230 <parsePreset+0xa24>)
 8007108:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &lowpassSetQ;
 800710a:	4b4a      	ldr	r3, [pc, #296]	; (8007234 <parsePreset+0xa28>)
 800710c:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &lowpassSetGain;
 800710e:	4b4a      	ldr	r3, [pc, #296]	; (8007238 <parsePreset+0xa2c>)
 8007110:	60cb      	str	r3, [r1, #12]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8007112:	4b4b      	ldr	r3, [pc, #300]	; (8007240 <parsePreset+0xa34>)
 8007114:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8007118:	edd3 7a00 	vldr	s15, [r3]
 800711c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007120:	fef8 7a67 	vrinta.f32	s15, s15
 8007124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007128:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 800712c:	2b05      	cmp	r3, #5
 800712e:	f200 87dc 	bhi.w	80080ea <parsePreset+0x18de>
 8007132:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007136:	063b      	.short	0x063b
 8007138:	05c9062f 	.word	0x05c9062f
 800713c:	05b105bd 	.word	0x05b105bd
 8007140:	0006      	.short	0x0006
				lfoShapeTick[i] = &lfoPulseTick;
 8007142:	4b40      	ldr	r3, [pc, #256]	; (8007244 <parsePreset+0xa38>)
 8007144:	4840      	ldr	r0, [pc, #256]	; (8007248 <parsePreset+0xa3c>)
				lfoSetters[i].setRate = &lfoPulseSetRate;
 8007146:	4a41      	ldr	r2, [pc, #260]	; (800724c <parsePreset+0xa40>)
				lfoShapeTick[i] = &lfoPulseTick;
 8007148:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 800714a:	4b41      	ldr	r3, [pc, #260]	; (8007250 <parsePreset+0xa44>)
 800714c:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 800714e:	4b41      	ldr	r3, [pc, #260]	; (8007254 <parsePreset+0xa48>)
 8007150:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8007152:	4b41      	ldr	r3, [pc, #260]	; (8007258 <parsePreset+0xa4c>)
 8007154:	6093      	str	r3, [r2, #8]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8007156:	4b41      	ldr	r3, [pc, #260]	; (800725c <parsePreset+0xa50>)
 8007158:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800715c:	edd3 7a00 	vldr	s15, [r3]
 8007160:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007164:	fef8 7a67 	vrinta.f32	s15, s15
 8007168:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800716c:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 8007170:	2b05      	cmp	r3, #5
 8007172:	d810      	bhi.n	8007196 <parsePreset+0x98a>
 8007174:	e8df f013 	tbh	[pc, r3, lsl #1]
 8007178:	057a0585 	.word	0x057a0585
 800717c:	0564056f 	.word	0x0564056f
 8007180:	0006054e 	.word	0x0006054e
				lfoShapeTick[i] = &lfoPulseTick;
 8007184:	4b2f      	ldr	r3, [pc, #188]	; (8007244 <parsePreset+0xa38>)
 8007186:	4830      	ldr	r0, [pc, #192]	; (8007248 <parsePreset+0xa3c>)
 8007188:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 800718a:	4b31      	ldr	r3, [pc, #196]	; (8007250 <parsePreset+0xa44>)
 800718c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 800718e:	4b31      	ldr	r3, [pc, #196]	; (8007254 <parsePreset+0xa48>)
 8007190:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8007192:	4b31      	ldr	r3, [pc, #196]	; (8007258 <parsePreset+0xa4c>)
 8007194:	6153      	str	r3, [r2, #20]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 8007196:	4b32      	ldr	r3, [pc, #200]	; (8007260 <parsePreset+0xa54>)
 8007198:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 800719c:	edd3 7a00 	vldr	s15, [r3]
 80071a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071a4:	fef8 7a67 	vrinta.f32	s15, s15
 80071a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071ac:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 80071b0:	2b05      	cmp	r3, #5
 80071b2:	d810      	bhi.n	80071d6 <parsePreset+0x9ca>
 80071b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80071b8:	05230539 	.word	0x05230539
 80071bc:	050d0518 	.word	0x050d0518
 80071c0:	000604ec 	.word	0x000604ec
				lfoShapeTick[i] = &lfoPulseTick;
 80071c4:	4b1f      	ldr	r3, [pc, #124]	; (8007244 <parsePreset+0xa38>)
 80071c6:	4820      	ldr	r0, [pc, #128]	; (8007248 <parsePreset+0xa3c>)
 80071c8:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 80071ca:	4b21      	ldr	r3, [pc, #132]	; (8007250 <parsePreset+0xa44>)
 80071cc:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoPulseSetShape;
 80071ce:	4b21      	ldr	r3, [pc, #132]	; (8007254 <parsePreset+0xa48>)
 80071d0:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 80071d2:	4b21      	ldr	r3, [pc, #132]	; (8007258 <parsePreset+0xa4c>)
 80071d4:	6213      	str	r3, [r2, #32]
		int LFOType = roundf(params[LFO1ShapeSet + (i * LFOParamsNum)].realVal[0] * (NUM_LFO_SHAPES-1));
 80071d6:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 80071da:	edda 7a1c 	vldr	s15, [sl, #112]	; 0x70
 80071de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80071e2:	fef8 7a67 	vrinta.f32	s15, s15
 80071e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80071ea:	ee17 3a90 	vmov	r3, s15
		switch(LFOType)
 80071ee:	2b05      	cmp	r3, #5
 80071f0:	d841      	bhi.n	8007276 <parsePreset+0xa6a>
 80071f2:	e8df f013 	tbh	[pc, r3, lsl #1]
 80071f6:	04e3      	.short	0x04e3
 80071f8:	04c204d8 	.word	0x04c204d8
 80071fc:	04ac04b7 	.word	0x04ac04b7
 8007200:	0037      	.short	0x0037
 8007202:	bf00      	nop
 8007204:	20005a8c 	.word	0x20005a8c
 8007208:	08001951 	.word	0x08001951
 800720c:	20016190 	.word	0x20016190
 8007210:	2001605c 	.word	0x2001605c
 8007214:	200162fc 	.word	0x200162fc
 8007218:	200161c8 	.word	0x200161c8
 800721c:	200166d0 	.word	0x200166d0
 8007220:	20000058 	.word	0x20000058
 8007224:	20000054 	.word	0x20000054
 8007228:	20015158 	.word	0x20015158
 800722c:	2000503c 	.word	0x2000503c
 8007230:	08001dd5 	.word	0x08001dd5
 8007234:	080020ad 	.word	0x080020ad
 8007238:	08002161 	.word	0x08002161
 800723c:	20016778 	.word	0x20016778
 8007240:	20016b14 	.word	0x20016b14
 8007244:	20005284 	.word	0x20005284
 8007248:	08002ba5 	.word	0x08002ba5
 800724c:	20015284 	.word	0x20015284
 8007250:	08002c25 	.word	0x08002c25
 8007254:	08002ce5 	.word	0x08002ce5
 8007258:	08002c9d 	.word	0x08002c9d
 800725c:	20016ba0 	.word	0x20016ba0
 8007260:	20016c2c 	.word	0x20016c2c
				lfoShapeTick[i] = &lfoPulseTick;
 8007264:	4b8e      	ldr	r3, [pc, #568]	; (80074a0 <parsePreset+0xc94>)
 8007266:	488f      	ldr	r0, [pc, #572]	; (80074a4 <parsePreset+0xc98>)
 8007268:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoPulseSetRate;
 800726a:	4b8f      	ldr	r3, [pc, #572]	; (80074a8 <parsePreset+0xc9c>)
 800726c:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoPulseSetShape;
 800726e:	4b8f      	ldr	r3, [pc, #572]	; (80074ac <parsePreset+0xca0>)
 8007270:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoPulseSetPhase;
 8007272:	4b8f      	ldr	r3, [pc, #572]	; (80074b0 <parsePreset+0xca4>)
 8007274:	62d3      	str	r3, [r2, #44]	; 0x2c
	uint8_t totalEffects = 4; //currently doesn't pay attention to skipped effects out of order
 8007276:	2304      	movs	r3, #4
 8007278:	4f8e      	ldr	r7, [pc, #568]	; (80074b4 <parsePreset+0xca8>)
 800727a:	4d8f      	ldr	r5, [pc, #572]	; (80074b8 <parsePreset+0xcac>)
 800727c:	9301      	str	r3, [sp, #4]
 800727e:	463b      	mov	r3, r7
 8007280:	f8df e290 	ldr.w	lr, [pc, #656]	; 8007514 <parsePreset+0xd08>
				  effectSetters[i].setParam2 = &blankFunction;;
 8007284:	488d      	ldr	r0, [pc, #564]	; (80074bc <parsePreset+0xcb0>)
				  effectTick[i] = FXVZhighshelfTick;
 8007286:	9203      	str	r2, [sp, #12]
		FXType effectType = roundf(params[Effect1FXType + (EffectParamsNum * i)].realVal[0] * (NUM_EFFECT_TYPES-1));
 8007288:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 800728c:	edde 7a00 	vldr	s15, [lr]
 8007290:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007294:	fef8 7a67 	vrinta.f32	s15, s15
 8007298:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800729c:	edcd 7a00 	vstr	s15, [sp]
		switch (effectType)
 80072a0:	f89d c000 	ldrb.w	ip, [sp]
 80072a4:	f1bc 0f13 	cmp.w	ip, #19
 80072a8:	d81e      	bhi.n	80072e8 <parsePreset+0xadc>
 80072aa:	e8df f01c 	tbh	[pc, ip, lsl #1]
 80072ae:	043f      	.short	0x043f
 80072b0:	04110428 	.word	0x04110428
 80072b4:	0409040d 	.word	0x0409040d
 80072b8:	031203f3 	.word	0x031203f3
 80072bc:	02ed02fc 	.word	0x02ed02fc
 80072c0:	02bb02d4 	.word	0x02bb02d4
 80072c4:	029b02ab 	.word	0x029b02ab
 80072c8:	03d8028b 	.word	0x03d8028b
 80072cc:	033c03c5 	.word	0x033c03c5
 80072d0:	03e8032b 	.word	0x03e8032b
 80072d4:	0014      	.short	0x0014
				  effectTick[i] = &FXLadderLowpassTick;
 80072d6:	4a7a      	ldr	r2, [pc, #488]	; (80074c0 <parsePreset+0xcb4>)
 80072d8:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXLadderParam1;;
 80072da:	4a7a      	ldr	r2, [pc, #488]	; (80074c4 <parsePreset+0xcb8>)
				  effectSetters[i].setParam5 = &blankFunction;;
 80072dc:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam2 = &blankFunction;;
 80072de:	e9c3 2000 	strd	r2, r0, [r3]
				  effectSetters[i].setParam3 = &FXLadderParam3;;
 80072e2:	4a79      	ldr	r2, [pc, #484]	; (80074c8 <parsePreset+0xcbc>)
				  effectSetters[i].setParam4 = &blankFunction;;
 80072e4:	e9c3 2002 	strd	r2, r0, [r3, #8]
	for (int i = 0; i < NUM_EFFECT; i++)
 80072e8:	3504      	adds	r5, #4
 80072ea:	4a78      	ldr	r2, [pc, #480]	; (80074cc <parsePreset+0xcc0>)
 80072ec:	f10e 0ee0 	add.w	lr, lr, #224	; 0xe0
 80072f0:	3314      	adds	r3, #20
 80072f2:	4295      	cmp	r5, r2
 80072f4:	d1c8      	bne.n	8007288 <parsePreset+0xa7c>
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 80072f6:	4876      	ldr	r0, [pc, #472]	; (80074d0 <parsePreset+0xcc4>)
	params[Effect1Mix].setParam = &fxMixSet;
 80072f8:	4b76      	ldr	r3, [pc, #472]	; (80074d4 <parsePreset+0xcc8>)
	params[Osc1Pitch].setParam = &setFreqMultPitch;
 80072fa:	f8c6 02d0 	str.w	r0, [r6, #720]	; 0x2d0
	params[Osc2Pitch].setParam = &setFreqMultPitch;
 80072fe:	f8c6 043c 	str.w	r0, [r6, #1084]	; 0x43c
	params[Osc3Pitch].setParam = &setFreqMultPitch;
 8007302:	f8c6 05a8 	str.w	r0, [r6, #1448]	; 0x5a8
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 8007306:	4874      	ldr	r0, [pc, #464]	; (80074d8 <parsePreset+0xccc>)
	params[Effect1PostGain].setParam = &fxPostGainSet;
 8007308:	4d74      	ldr	r5, [pc, #464]	; (80074dc <parsePreset+0xcd0>)
	params[Osc1Harmonics].setParam = &setFreqMultHarm;
 800730a:	f8c6 035c 	str.w	r0, [r6, #860]	; 0x35c
	params[Osc2Harmonics].setParam = &setFreqMultHarm;
 800730e:	f8c6 04c8 	str.w	r0, [r6, #1224]	; 0x4c8
	params[Osc3Harmonics].setParam = &setFreqMultHarm;
 8007312:	f8c6 0634 	str.w	r0, [r6, #1588]	; 0x634
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 8007316:	6838      	ldr	r0, [r7, #0]
	params[Effect1Mix].setParam = &fxMixSet;
 8007318:	9a03      	ldr	r2, [sp, #12]
	params[Effect1Param1].setParam = effectSetters[0].setParam1;
 800731a:	f8c6 0714 	str.w	r0, [r6, #1812]	; 0x714
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 800731e:	6878      	ldr	r0, [r7, #4]
	params[Effect1Mix].setParam = &fxMixSet;
 8007320:	f8c6 37a0 	str.w	r3, [r6, #1952]	; 0x7a0
	params[Effect1Param2].setParam = effectSetters[0].setParam2;
 8007324:	f8c6 0730 	str.w	r0, [r6, #1840]	; 0x730
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 8007328:	68b8      	ldr	r0, [r7, #8]
	params[Effect1PostGain].setParam = &fxPostGainSet;
 800732a:	f8c6 57bc 	str.w	r5, [r6, #1980]	; 0x7bc
	params[Effect1Param3].setParam = effectSetters[0].setParam3;
 800732e:	f8c6 074c 	str.w	r0, [r6, #1868]	; 0x74c
	params[Effect1Param4].setParam = effectSetters[0].setParam4;
 8007332:	68f8      	ldr	r0, [r7, #12]
 8007334:	f8c6 0768 	str.w	r0, [r6, #1896]	; 0x768
	params[Effect1Param5].setParam = effectSetters[0].setParam5;
 8007338:	6938      	ldr	r0, [r7, #16]
 800733a:	f8c6 0784 	str.w	r0, [r6, #1924]	; 0x784
	params[Effect2Param1].setParam = effectSetters[1].setParam1;
 800733e:	6978      	ldr	r0, [r7, #20]
 8007340:	f8c6 07f4 	str.w	r0, [r6, #2036]	; 0x7f4
	params[Effect2Param2].setParam = effectSetters[1].setParam2;
 8007344:	69b8      	ldr	r0, [r7, #24]
 8007346:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
	params[Effect2Param3].setParam = effectSetters[1].setParam3;
 800734a:	69f8      	ldr	r0, [r7, #28]
 800734c:	f8c6 082c 	str.w	r0, [r6, #2092]	; 0x82c
	params[NoiseTilt].setParam = &noiseSetTilt;
 8007350:	4863      	ldr	r0, [pc, #396]	; (80074e0 <parsePreset+0xcd4>)
 8007352:	f8c6 0228 	str.w	r0, [r6, #552]	; 0x228
	params[NoisePeakFreq].setParam = &noiseSetFreq;
 8007356:	4863      	ldr	r0, [pc, #396]	; (80074e4 <parsePreset+0xcd8>)
 8007358:	f8c6 0260 	str.w	r0, [r6, #608]	; 0x260
	params[NoisePeakGain].setParam  = &noiseSetGain;
 800735c:	4862      	ldr	r0, [pc, #392]	; (80074e8 <parsePreset+0xcdc>)
 800735e:	f8c6 0244 	str.w	r0, [r6, #580]	; 0x244
	params[Master].setParam = &setMaster;
 8007362:	4862      	ldr	r0, [pc, #392]	; (80074ec <parsePreset+0xce0>)
 8007364:	64f0      	str	r0, [r6, #76]	; 0x4c
	params[Transpose].setParam = &setTranspose;
 8007366:	4862      	ldr	r0, [pc, #392]	; (80074f0 <parsePreset+0xce4>)
 8007368:	f8c6 01d4 	str.w	r0, [r6, #468]	; 0x1d4
	params[PitchBendRange].setParam = &setPitchBendRange;
 800736c:	4861      	ldr	r0, [pc, #388]	; (80074f4 <parsePreset+0xce8>)
 800736e:	f8c6 01f0 	str.w	r0, [r6, #496]	; 0x1f0
	params[OutputTone].setParam = &setFinalLowpass;
 8007372:	4861      	ldr	r0, [pc, #388]	; (80074f8 <parsePreset+0xcec>)
 8007374:	f8ca 00d0 	str.w	r0, [sl, #208]	; 0xd0
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8007378:	6a38      	ldr	r0, [r7, #32]
	params[Effect2Mix].setParam = &fxMixSet;
 800737a:	f8c6 3880 	str.w	r3, [r6, #2176]	; 0x880
	params[Effect3Mix].setParam = &fxMixSet;
 800737e:	f8c6 3960 	str.w	r3, [r6, #2400]	; 0x960
	params[Effect4Mix].setParam = &fxMixSet;
 8007382:	f8c6 3a40 	str.w	r3, [r6, #2624]	; 0xa40
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	params[Effect2Param4].setParam = effectSetters[1].setParam4;
 8007388:	f8c6 0848 	str.w	r0, [r6, #2120]	; 0x848
	params[Effect2Param5].setParam = effectSetters[1].setParam5;
 800738c:	f8c6 3864 	str.w	r3, [r6, #2148]	; 0x864
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
	params[Effect2PostGain].setParam = &fxPostGainSet;
 8007392:	f8c6 589c 	str.w	r5, [r6, #2204]	; 0x89c
	params[Effect3Param1].setParam = effectSetters[2].setParam1;
 8007396:	f8c6 38d4 	str.w	r3, [r6, #2260]	; 0x8d4
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	params[Effect3PostGain].setParam = &fxPostGainSet;
 800739c:	f8c6 597c 	str.w	r5, [r6, #2428]	; 0x97c
	params[Effect3Param2].setParam = effectSetters[2].setParam2;
 80073a0:	f8c6 38f0 	str.w	r3, [r6, #2288]	; 0x8f0
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
	params[Effect4PostGain].setParam = &fxPostGainSet;
 80073a6:	f8c6 5a5c 	str.w	r5, [r6, #2652]	; 0xa5c
	params[OutputAmp].setParam = &setAmp;
 80073aa:	2501      	movs	r5, #1
	params[Effect3Param3].setParam = effectSetters[2].setParam3;
 80073ac:	f8c6 390c 	str.w	r3, [r6, #2316]	; 0x90c
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 80073b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80073b2:	4852      	ldr	r0, [pc, #328]	; (80074fc <parsePreset+0xcf0>)
	params[Effect3Param4].setParam = effectSetters[2].setParam4;
 80073b4:	f8c6 3928 	str.w	r3, [r6, #2344]	; 0x928
	params[Effect3Param5].setParam = effectSetters[2].setParam5;
 80073b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ba:	f8c6 3944 	str.w	r3, [r6, #2372]	; 0x944
	params[Effect4Param1].setParam = effectSetters[3].setParam1;
 80073be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073c0:	f8c6 39b4 	str.w	r3, [r6, #2484]	; 0x9b4
	params[Effect4Param2].setParam = effectSetters[3].setParam2;
 80073c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80073c6:	f8c6 39d0 	str.w	r3, [r6, #2512]	; 0x9d0
	params[Effect4Param3].setParam = effectSetters[3].setParam3;
 80073ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80073cc:	f8c6 39ec 	str.w	r3, [r6, #2540]	; 0x9ec
	params[Effect4Param4].setParam = effectSetters[3].setParam4;
 80073d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80073d2:	f8c6 3a08 	str.w	r3, [r6, #2568]	; 0xa08
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80073d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
		params[i].objectNumber = 0;
 80073d8:	2700      	movs	r7, #0
	params[Effect4Param5].setParam = effectSetters[3].setParam5;
 80073da:	f8c6 3a24 	str.w	r3, [r6, #2596]	; 0xa24
	params[Filter1Resonance].setParam = filterSetters[0].setQ;
 80073de:	680b      	ldr	r3, [r1, #0]
 80073e0:	f8c6 3ae8 	str.w	r3, [r6, #2792]	; 0xae8
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80073e4:	684b      	ldr	r3, [r1, #4]
	params[Envelope1Attack].setParam = &setEnvelopeAttack;
 80073e6:	f8c6 0be4 	str.w	r0, [r6, #3044]	; 0xbe4
	params[Filter1Gain].setParam = filterSetters[0].setGain;
 80073ea:	f8c6 3acc 	str.w	r3, [r6, #2764]	; 0xacc
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 80073ee:	688b      	ldr	r3, [r1, #8]
	params[Envelope2Attack].setParam = &setEnvelopeAttack;
 80073f0:	f8c6 0c8c 	str.w	r0, [r6, #3212]	; 0xc8c
	params[Filter2Resonance].setParam = filterSetters[1].setQ;
 80073f4:	f8c6 3b90 	str.w	r3, [r6, #2960]	; 0xb90
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 80073f8:	68cb      	ldr	r3, [r1, #12]
	params[Envelope3Attack].setParam = &setEnvelopeAttack;
 80073fa:	f8c6 0d34 	str.w	r0, [r6, #3380]	; 0xd34
	params[Filter2Gain].setParam = filterSetters[1].setGain;
 80073fe:	f8c6 3b74 	str.w	r3, [r6, #2932]	; 0xb74
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8007402:	4b3f      	ldr	r3, [pc, #252]	; (8007500 <parsePreset+0xcf4>)
	params[Envelope4Attack].setParam = &setEnvelopeAttack;
 8007404:	f8c6 0ddc 	str.w	r0, [r6, #3548]	; 0xddc
	params[Envelope1Decay].setParam = &setEnvelopeDecay;
 8007408:	f8c6 3c00 	str.w	r3, [r6, #3072]	; 0xc00
	params[Envelope2Decay].setParam = &setEnvelopeDecay;
 800740c:	f8c6 3ca8 	str.w	r3, [r6, #3240]	; 0xca8
	params[Envelope3Decay].setParam = &setEnvelopeDecay;
 8007410:	f8c6 3d50 	str.w	r3, [r6, #3408]	; 0xd50
	params[Envelope4Decay].setParam = &setEnvelopeDecay;
 8007414:	f8c6 3df8 	str.w	r3, [r6, #3576]	; 0xdf8
	params[Envelope1Sustain].setParam = &setEnvelopeSustain;
 8007418:	4b3a      	ldr	r3, [pc, #232]	; (8007504 <parsePreset+0xcf8>)
 800741a:	f8c6 3c1c 	str.w	r3, [r6, #3100]	; 0xc1c
	params[Envelope2Sustain].setParam = &setEnvelopeSustain;
 800741e:	f8c6 3cc4 	str.w	r3, [r6, #3268]	; 0xcc4
	params[Envelope3Sustain].setParam = &setEnvelopeSustain;
 8007422:	f8c6 3d6c 	str.w	r3, [r6, #3436]	; 0xd6c
	params[Envelope4Sustain].setParam = &setEnvelopeSustain;
 8007426:	f8c6 3e14 	str.w	r3, [r6, #3604]	; 0xe14
	params[Envelope1Release].setParam = &setEnvelopeRelease;
 800742a:	4b37      	ldr	r3, [pc, #220]	; (8007508 <parsePreset+0xcfc>)
 800742c:	f8c6 3c38 	str.w	r3, [r6, #3128]	; 0xc38
	params[Envelope2Release].setParam = &setEnvelopeRelease;
 8007430:	f8c6 3ce0 	str.w	r3, [r6, #3296]	; 0xce0
	params[Envelope3Release].setParam = &setEnvelopeRelease;
 8007434:	f8c6 3d88 	str.w	r3, [r6, #3464]	; 0xd88
	params[Envelope4Release].setParam = &setEnvelopeRelease;
 8007438:	f8c6 3e30 	str.w	r3, [r6, #3632]	; 0xe30
	params[Envelope1Leak].setParam = &setEnvelopeLeak;
 800743c:	4b33      	ldr	r3, [pc, #204]	; (800750c <parsePreset+0xd00>)
 800743e:	f8c6 3c54 	str.w	r3, [r6, #3156]	; 0xc54
	params[Envelope2Leak].setParam = &setEnvelopeLeak;
 8007442:	f8c6 3cfc 	str.w	r3, [r6, #3324]	; 0xcfc
	params[Envelope3Leak].setParam = &setEnvelopeLeak;
 8007446:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
	params[Envelope4Leak].setParam = &setEnvelopeLeak;
 800744a:	f8c6 3e4c 	str.w	r3, [r6, #3660]	; 0xe4c
	params[LFO1Rate].setParam = lfoSetters[0].setRate;
 800744e:	6813      	ldr	r3, [r2, #0]
 8007450:	f8c6 3e84 	str.w	r3, [r6, #3716]	; 0xe84
	params[LFO2Rate].setParam = lfoSetters[1].setRate;
 8007454:	68d3      	ldr	r3, [r2, #12]
 8007456:	f8c6 3f10 	str.w	r3, [r6, #3856]	; 0xf10
	params[LFO3Rate].setParam = lfoSetters[2].setRate;
 800745a:	6993      	ldr	r3, [r2, #24]
 800745c:	f8c6 3f9c 	str.w	r3, [r6, #3996]	; 0xf9c
	params[LFO4Rate].setParam = lfoSetters[3].setRate;
 8007460:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8007462:	f8ca 3028 	str.w	r3, [sl, #40]	; 0x28
	params[LFO1Shape].setParam = lfoSetters[0].setShape;
 8007466:	6853      	ldr	r3, [r2, #4]
 8007468:	f8c6 3ea0 	str.w	r3, [r6, #3744]	; 0xea0
	params[LFO2Shape].setParam = lfoSetters[1].setShape;
 800746c:	6913      	ldr	r3, [r2, #16]
 800746e:	f8c6 3f2c 	str.w	r3, [r6, #3884]	; 0xf2c
	params[LFO3Shape].setParam = lfoSetters[2].setShape;
 8007472:	69d3      	ldr	r3, [r2, #28]
 8007474:	f8c6 3fb8 	str.w	r3, [r6, #4024]	; 0xfb8
	params[LFO4Shape].setParam = lfoSetters[3].setShape;
 8007478:	6a93      	ldr	r3, [r2, #40]	; 0x28
 800747a:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
	params[LFO1Phase].setParam = lfoSetters[0].setPhase;
 800747e:	6893      	ldr	r3, [r2, #8]
 8007480:	f8c6 3ebc 	str.w	r3, [r6, #3772]	; 0xebc
	params[LFO2Phase].setParam = lfoSetters[1].setPhase;
 8007484:	6953      	ldr	r3, [r2, #20]
 8007486:	f8c6 3f48 	str.w	r3, [r6, #3912]	; 0xf48
	params[LFO3Phase].setParam = lfoSetters[2].setPhase;
 800748a:	6a13      	ldr	r3, [r2, #32]
 800748c:	f8c6 3fd4 	str.w	r3, [r6, #4052]	; 0xfd4
	params[LFO4Phase].setParam = lfoSetters[3].setPhase;
 8007490:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007492:	f8ca 3060 	str.w	r3, [sl, #96]	; 0x60
	params[OutputAmp].setParam = &setAmp;
 8007496:	4b1e      	ldr	r3, [pc, #120]	; (8007510 <parsePreset+0xd04>)
 8007498:	f8ca 30b4 	str.w	r3, [sl, #180]	; 0xb4
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 800749c:	46aa      	mov	sl, r5
 800749e:	e042      	b.n	8007526 <parsePreset+0xd1a>
 80074a0:	20005284 	.word	0x20005284
 80074a4:	08002ba5 	.word	0x08002ba5
 80074a8:	08002c25 	.word	0x08002c25
 80074ac:	08002ce5 	.word	0x08002ce5
 80074b0:	08002c9d 	.word	0x08002c9d
 80074b4:	20013108 	.word	0x20013108
 80074b8:	20004fe4 	.word	0x20004fe4
 80074bc:	08005951 	.word	0x08005951
 80074c0:	080035e1 	.word	0x080035e1
 80074c4:	08003855 	.word	0x08003855
 80074c8:	08003a11 	.word	0x08003a11
 80074cc:	20004ff4 	.word	0x20004ff4
 80074d0:	08001ff1 	.word	0x08001ff1
 80074d4:	080030b5 	.word	0x080030b5
 80074d8:	08002049 	.word	0x08002049
 80074dc:	080030c9 	.word	0x080030c9
 80074e0:	08003a25 	.word	0x08003a25
 80074e4:	08003aa1 	.word	0x08003aa1
 80074e8:	08003a71 	.word	0x08003a71
 80074ec:	080023d5 	.word	0x080023d5
 80074f0:	080023e5 	.word	0x080023e5
 80074f4:	080023f1 	.word	0x080023f1
 80074f8:	08002409 	.word	0x08002409
 80074fc:	0800231d 	.word	0x0800231d
 8007500:	0800233d 	.word	0x0800233d
 8007504:	0800235d 	.word	0x0800235d
 8007508:	08002371 	.word	0x08002371
 800750c:	08002391 	.word	0x08002391
 8007510:	080023c5 	.word	0x080023c5
 8007514:	20016334 	.word	0x20016334
 8007518:	42fe0000 	.word	0x42fe0000
 800751c:	3c010204 	.word	0x3c010204
 8007520:	f109 091c 	add.w	r9, r9, #28
 8007524:	3501      	adds	r5, #1
		if ((i >= Osc1) && (i < Osc2))
 8007526:	f1a5 0319 	sub.w	r3, r5, #25
		params[i].objectNumber = 0;
 800752a:	f889 7018 	strb.w	r7, [r9, #24]
		if ((i >= Osc1) && (i < Osc2))
 800752e:	2b0c      	cmp	r3, #12
 8007530:	d94b      	bls.n	80075ca <parsePreset+0xdbe>
		else if ((i >= Osc2) && (i < Osc3))
 8007532:	f1a5 0326 	sub.w	r3, r5, #38	; 0x26
 8007536:	2b0c      	cmp	r3, #12
 8007538:	f240 85d4 	bls.w	80080e4 <parsePreset+0x18d8>
		else if ((i >= Osc3) && (i < Effect1FXType))
 800753c:	f1a5 0333 	sub.w	r3, r5, #51	; 0x33
 8007540:	2b0c      	cmp	r3, #12
 8007542:	f240 85cb 	bls.w	80080dc <parsePreset+0x18d0>
		else if ((i >= Filter1) && (i < Filter2))
 8007546:	f1a5 0360 	sub.w	r3, r5, #96	; 0x60
 800754a:	2b05      	cmp	r3, #5
 800754c:	d93d      	bls.n	80075ca <parsePreset+0xdbe>
		else if ((i >= Filter2) && (i < Envelope1Attack))
 800754e:	f1a5 0366 	sub.w	r3, r5, #102	; 0x66
 8007552:	2b06      	cmp	r3, #6
 8007554:	f240 85c6 	bls.w	80080e4 <parsePreset+0x18d8>
		else if ((i >= Envelope1Attack) && (i < Envelope2Attack))
 8007558:	f1a5 036d 	sub.w	r3, r5, #109	; 0x6d
 800755c:	2b05      	cmp	r3, #5
 800755e:	d934      	bls.n	80075ca <parsePreset+0xdbe>
		else if ((i >= Envelope2Attack) && (i < Envelope3Attack))
 8007560:	f1a5 0373 	sub.w	r3, r5, #115	; 0x73
 8007564:	2b05      	cmp	r3, #5
 8007566:	f240 85bd 	bls.w	80080e4 <parsePreset+0x18d8>
		else if ((i >= Envelope3Attack) && (i < Envelope4Attack))
 800756a:	f1a5 0379 	sub.w	r3, r5, #121	; 0x79
 800756e:	2b05      	cmp	r3, #5
 8007570:	f240 85b4 	bls.w	80080dc <parsePreset+0x18d0>
		else if ((i >= Envelope4Attack) && (i < LFO1Rate))
 8007574:	f1a5 037f 	sub.w	r3, r5, #127	; 0x7f
 8007578:	2b05      	cmp	r3, #5
 800757a:	f240 8599 	bls.w	80080b0 <parsePreset+0x18a4>
		else if ((i >= LFO1Rate) && (i < LFO2Rate))
 800757e:	f1a5 0385 	sub.w	r3, r5, #133	; 0x85
 8007582:	2b04      	cmp	r3, #4
 8007584:	d921      	bls.n	80075ca <parsePreset+0xdbe>
		else if ((i >= LFO2Rate) && (i < LFO3Rate))
 8007586:	f1a5 038a 	sub.w	r3, r5, #138	; 0x8a
 800758a:	2b04      	cmp	r3, #4
 800758c:	f240 85aa 	bls.w	80080e4 <parsePreset+0x18d8>
		else if ((i >= LFO3Rate) && (i < LFO4Rate))
 8007590:	f1a5 038f 	sub.w	r3, r5, #143	; 0x8f
 8007594:	2b04      	cmp	r3, #4
 8007596:	f240 85a1 	bls.w	80080dc <parsePreset+0x18d0>
		else if ((i >= LFO4Rate) && (i < OutputAmp))
 800759a:	f1a5 0394 	sub.w	r3, r5, #148	; 0x94
 800759e:	2b04      	cmp	r3, #4
 80075a0:	f240 8586 	bls.w	80080b0 <parsePreset+0x18a4>
		else if ((i >= Effect1FXType) && (i < Effect2FXType))
 80075a4:	f1a5 0340 	sub.w	r3, r5, #64	; 0x40
 80075a8:	2b07      	cmp	r3, #7
 80075aa:	d90e      	bls.n	80075ca <parsePreset+0xdbe>
		else if ((i >= Effect2FXType) && (i < Effect3FXType))
 80075ac:	f1a5 0348 	sub.w	r3, r5, #72	; 0x48
 80075b0:	2b07      	cmp	r3, #7
 80075b2:	f240 8597 	bls.w	80080e4 <parsePreset+0x18d8>
		else if ((i >= Effect3FXType) && (i < Effect4FXType))
 80075b6:	f1a5 0350 	sub.w	r3, r5, #80	; 0x50
 80075ba:	2b07      	cmp	r3, #7
 80075bc:	f240 858e 	bls.w	80080dc <parsePreset+0x18d0>
		else if ((i >= Effect4FXType) && (i < Filter1))
 80075c0:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
 80075c4:	2b07      	cmp	r3, #7
 80075c6:	f240 8573 	bls.w	80080b0 <parsePreset+0x18a4>
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80075ca:	2100      	movs	r1, #0
 80075cc:	ed99 0a02 	vldr	s0, [r9, #8]
 80075d0:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80075d4:	4608      	mov	r0, r1
 80075d6:	4798      	blx	r3
 80075d8:	ed99 0a03 	vldr	s0, [r9, #12]
 80075dc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80075e0:	2101      	movs	r1, #1
 80075e2:	f899 0018 	ldrb.w	r0, [r9, #24]
 80075e6:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 80075e8:	2d9b      	cmp	r5, #155	; 0x9b
 80075ea:	d199      	bne.n	8007520 <parsePreset+0xd14>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80075ec:	edd6 7a09 	vldr	s15, [r6, #36]	; 0x24
	numMappings = 0;
 80075f0:	2200      	movs	r2, #0
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80075f2:	ed96 7a02 	vldr	s14, [r6, #8]
		mappings[i].destNumber = 255;
 80075f6:	21ff      	movs	r1, #255	; 0xff
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 80075f8:	ed5f 6a39 	vldr	s13, [pc, #-228]	; 8007518 <parsePreset+0xd0c>
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 80075fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007600:	ed1f 6a3a 	vldr	s12, [pc, #-232]	; 800751c <parsePreset+0xd10>
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 8007604:	ee67 7aa6 	vmul.f32	s15, s15, s13
	midiKeyDivisor = 1.0f / ((params[MIDIKeyMax].realVal[0]*127.0f) - (params[MIDIKeyMin].realVal[0]*127.0f));
 8007608:	4bd0      	ldr	r3, [pc, #832]	; (800794c <parsePreset+0x1140>)
 800760a:	f8df e37c 	ldr.w	lr, [pc, #892]	; 8007988 <parsePreset+0x117c>
 800760e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8007612:	f50e 6018 	add.w	r0, lr, #2432	; 0x980
 8007616:	edc3 6a00 	vstr	s13, [r3]
	midiKeySubtractor = (params[MIDIKeyMin].realVal[0] * 127.0f);
 800761a:	4bcd      	ldr	r3, [pc, #820]	; (8007950 <parsePreset+0x1144>)
 800761c:	edc3 7a00 	vstr	s15, [r3]
	numMappings = 0;
 8007620:	4bcc      	ldr	r3, [pc, #816]	; (8007954 <parsePreset+0x1148>)
 8007622:	701a      	strb	r2, [r3, #0]
		lfoOn[i] = 0;
 8007624:	4bcc      	ldr	r3, [pc, #816]	; (8007958 <parsePreset+0x114c>)
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	4673      	mov	r3, lr
		mappings[i].destNumber = 255;
 800762a:	7019      	strb	r1, [r3, #0]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 800762c:	334c      	adds	r3, #76	; 0x4c
		mappings[i].numHooks = 0;
 800762e:	f803 2c04 	strb.w	r2, [r3, #-4]
	for (int i = 0; i < MAX_NUM_MAPPINGS; i++)
 8007632:	4283      	cmp	r3, r0
 8007634:	d1f9      	bne.n	800762a <parsePreset+0xe1e>
	for (int i = 0; i < mappingCount; i++)
 8007636:	f1bb 0f00 	cmp.w	fp, #0
 800763a:	f000 8094 	beq.w	8007766 <parsePreset+0xf5a>
 800763e:	9b02      	ldr	r3, [sp, #8]
				foundOne = 1;
 8007640:	f04f 0b01 	mov.w	fp, #1
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8007644:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 800795c <parsePreset+0x1150>
			mappings[whichMapping].destNumber = destNumber;
 8007648:	f04f 094c 	mov.w	r9, #76	; 0x4c
 800764c:	4443      	add	r3, r8
 800764e:	f8df a33c 	ldr.w	sl, [pc, #828]	; 800798c <parsePreset+0x1180>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007652:	9602      	str	r6, [sp, #8]
 8007654:	b29b      	uxth	r3, r3
 8007656:	9300      	str	r3, [sp, #0]
	for (int i = 0; i < mappingCount; i++)
 8007658:	2300      	movs	r3, #0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800765a:	469c      	mov	ip, r3
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 800765c:	2300      	movs	r3, #0
		uint8_t destNumber = buffer[bufferIndex+1];
 800765e:	eb04 0208 	add.w	r2, r4, r8
		uint8_t foundOne = 0;
 8007662:	461d      	mov	r5, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8007664:	7850      	ldrb	r0, [r2, #1]
		uint8_t whichHook = 0;
 8007666:	461f      	mov	r7, r3
		uint8_t destNumber = buffer[bufferIndex+1];
 8007668:	4672      	mov	r2, lr
		uint8_t whichMapping = 0;
 800766a:	461e      	mov	r6, r3
			if (mappings[j].destNumber == destNumber)
 800766c:	7811      	ldrb	r1, [r2, #0]
 800766e:	4281      	cmp	r1, r0
 8007670:	d103      	bne.n	800767a <parsePreset+0xe6e>
				whichHook = mappings[j].numHooks;
 8007672:	f892 7048 	ldrb.w	r7, [r2, #72]	; 0x48
 8007676:	b2de      	uxtb	r6, r3
				foundOne = 1;
 8007678:	2501      	movs	r5, #1
		for (int j = 0; j < MAX_NUM_MAPPINGS; j++)
 800767a:	3301      	adds	r3, #1
 800767c:	324c      	adds	r2, #76	; 0x4c
 800767e:	2b20      	cmp	r3, #32
 8007680:	d1f4      	bne.n	800766c <parsePreset+0xe60>
		if (foundOne == 0)
 8007682:	2d00      	cmp	r5, #0
 8007684:	f000 8488 	beq.w	8007f98 <parsePreset+0x178c>
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8007688:	463d      	mov	r5, r7
		int source = buffer[bufferIndex];
 800768a:	f814 2008 	ldrb.w	r2, [r4, r8]
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 800768e:	fb09 f306 	mul.w	r3, r9, r6
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8007692:	1c68      	adds	r0, r5, #1
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 8007694:	eb0e 0103 	add.w	r1, lr, r3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 8007698:	eb0a 07c2 	add.w	r7, sl, r2, lsl #3
 800769c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 80076a0:	2a03      	cmp	r2, #3
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 80076a2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80076a6:	f107 0704 	add.w	r7, r7, #4
		mappings[whichMapping].sourceSmoothed[whichHook] = 1;
 80076aa:	4429      	add	r1, r5
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 80076ac:	4473      	add	r3, lr
 80076ae:	60df      	str	r7, [r3, #12]
			mappings[whichMapping].sourceSmoothed[whichHook] = 0;
 80076b0:	bfcc      	ite	gt
 80076b2:	465b      	movgt	r3, fp
 80076b4:	2300      	movle	r3, #0
 80076b6:	f881 3020 	strb.w	r3, [r1, #32]
			mappings[whichMapping].sourceValPtr[whichHook][v] = &sourceValues[source][v];
 80076ba:	eb0a 03c2 	add.w	r3, sl, r2, lsl #3
 80076be:	00e9      	lsls	r1, r5, #3
 80076c0:	f84e 3000 	str.w	r3, [lr, r0]
		if ((source >= LFO_SOURCE_OFFSET) && (source < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80076c4:	f1a2 0318 	sub.w	r3, r2, #24
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d803      	bhi.n	80076d4 <parsePreset+0xec8>
			lfoOn[source - LFO_SOURCE_OFFSET] = 1;
 80076cc:	4ba2      	ldr	r3, [pc, #648]	; (8007958 <parsePreset+0x114c>)
 80076ce:	441a      	add	r2, r3
 80076d0:	f802 bc18 	strb.w	fp, [r2, #-24]
		int scalar = buffer[bufferIndex+2];
 80076d4:	eb04 0308 	add.w	r3, r4, r8
 80076d8:	789b      	ldrb	r3, [r3, #2]
			if (scalar == 0xff)
 80076da:	2bff      	cmp	r3, #255	; 0xff
 80076dc:	f000 846f 	beq.w	8007fbe <parsePreset+0x17b2>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80076e0:	fb09 f006 	mul.w	r0, r9, r6
 80076e4:	1d2a      	adds	r2, r5, #4
 80076e6:	eb0a 07c3 	add.w	r7, sl, r3, lsl #3
 80076ea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
 80076ee:	4472      	add	r2, lr
 80076f0:	6057      	str	r7, [r2, #4]
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80076f2:	f1a3 0218 	sub.w	r2, r3, #24
 80076f6:	2a03      	cmp	r2, #3
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 80076f8:	eb01 0200 	add.w	r2, r1, r0
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 80076fc:	f200 846c 	bhi.w	8007fd8 <parsePreset+0x17cc>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007700:	2004      	movs	r0, #4
 8007702:	2108      	movs	r1, #8
 8007704:	4472      	add	r2, lr
 8007706:	fb11 0103 	smlabb	r1, r1, r3, r0
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 800770a:	4893      	ldr	r0, [pc, #588]	; (8007958 <parsePreset+0x114c>)
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 800770c:	4451      	add	r1, sl
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 800770e:	4403      	add	r3, r0
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007710:	6291      	str	r1, [r2, #40]	; 0x28
					lfoOn[scalar - LFO_SOURCE_OFFSET] = 1;
 8007712:	f803 bc18 	strb.w	fp, [r3, #-24]
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8007716:	eb04 0308 	add.w	r3, r4, r8
		bufferIndex += 5;
 800771a:	f108 0805 	add.w	r8, r8, #5
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 800771e:	78da      	ldrb	r2, [r3, #3]
		bufferIndex += 5;
 8007720:	fa1f f888 	uxth.w	r8, r8
		int16_t amountInt = (buffer[bufferIndex+3] << 8) + buffer[bufferIndex+4];
 8007724:	791b      	ldrb	r3, [r3, #4]
 8007726:	eb03 2302 	add.w	r3, r3, r2, lsl #8
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 800772a:	b21b      	sxth	r3, r3
 800772c:	ee07 3a90 	vmov	s15, r3
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8007730:	eb06 03c6 	add.w	r3, r6, r6, lsl #3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8007734:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8007738:	eb06 0343 	add.w	r3, r6, r3, lsl #1
		mappings[whichMapping].numHooks++;
 800773c:	fb09 e606 	mla	r6, r9, r6, lr
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8007740:	441d      	add	r5, r3
		float amountFloat = (float)amountInt * INV_TWO_TO_15;
 8007742:	ee67 7a87 	vmul.f32	s15, s15, s14
		mappings[whichMapping].amount[whichHook] = amountFloat;
 8007746:	eb0e 0385 	add.w	r3, lr, r5, lsl #2
 800774a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		mappings[whichMapping].numHooks++;
 800774e:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
 8007752:	3301      	adds	r3, #1
 8007754:	f886 3048 	strb.w	r3, [r6, #72]	; 0x48
	for (int i = 0; i < mappingCount; i++)
 8007758:	9b00      	ldr	r3, [sp, #0]
 800775a:	4598      	cmp	r8, r3
 800775c:	f47f af7e 	bne.w	800765c <parsePreset+0xe50>
 8007760:	4b7c      	ldr	r3, [pc, #496]	; (8007954 <parsePreset+0x1148>)
 8007762:	f883 c000 	strb.w	ip, [r3]
	if (params[Filter1].zeroToOneVal[0])
 8007766:	4b7e      	ldr	r3, [pc, #504]	; (8007960 <parsePreset+0x1154>)
	audioMasterLevel = 1.0f;
 8007768:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800776c:	497d      	ldr	r1, [pc, #500]	; (8007964 <parsePreset+0x1158>)
	presetWaitingToParse = 0;
 800776e:	2000      	movs	r0, #0
	if (params[Filter1].zeroToOneVal[0])
 8007770:	ed93 7a00 	vldr	s14, [r3]
 8007774:	33a8      	adds	r3, #168	; 0xa8
	audioMasterLevel = 1.0f;
 8007776:	600a      	str	r2, [r1, #0]
	presetWaitingToParse = 0;
 8007778:	497b      	ldr	r1, [pc, #492]	; (8007968 <parsePreset+0x115c>)
	if (params[Filter1].zeroToOneVal[0])
 800777a:	eeb5 7a40 	vcmp.f32	s14, #0.0
	if (params[Filter2].zeroToOneVal[0])
 800777e:	edd3 7a00 	vldr	s15, [r3]
	presetWaitingToParse = 0;
 8007782:	6008      	str	r0, [r1, #0]
	currentActivePreset = presetNumber;
 8007784:	9805      	ldr	r0, [sp, #20]
	if (params[Filter1].zeroToOneVal[0])
 8007786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	currentActivePreset = presetNumber;
 800778a:	4978      	ldr	r1, [pc, #480]	; (800796c <parsePreset+0x1160>)
	if (params[Filter2].zeroToOneVal[0])
 800778c:	eef5 7a40 	vcmp.f32	s15, #0.0
	oscToTick = NUM_OSC;
 8007790:	4a77      	ldr	r2, [pc, #476]	; (8007970 <parsePreset+0x1164>)
	currentActivePreset = presetNumber;
 8007792:	7008      	strb	r0, [r1, #0]
	oscToTick = NUM_OSC;
 8007794:	f04f 0103 	mov.w	r1, #3
	uint8_t totalFilters = 0;
 8007798:	bf14      	ite	ne
 800779a:	2301      	movne	r3, #1
 800779c:	2300      	moveq	r3, #0
	oscToTick = NUM_OSC;
 800779e:	7011      	strb	r1, [r2, #0]
	overSampled = 1;
 80077a0:	2201      	movs	r2, #1
 80077a2:	4974      	ldr	r1, [pc, #464]	; (8007974 <parsePreset+0x1168>)
	if (params[Filter2].zeroToOneVal[0])
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	numEffectToTick = totalEffects;
 80077a8:	9801      	ldr	r0, [sp, #4]
	overSampled = 1;
 80077aa:	700a      	strb	r2, [r1, #0]
	numEffectToTick = totalEffects;
 80077ac:	4972      	ldr	r1, [pc, #456]	; (8007978 <parsePreset+0x116c>)
		totalFilters++;
 80077ae:	bf18      	it	ne
 80077b0:	3301      	addne	r3, #1
	numEffectToTick = totalEffects;
 80077b2:	7008      	strb	r0, [r1, #0]
	filterToTick = totalFilters;
 80077b4:	4971      	ldr	r1, [pc, #452]	; (800797c <parsePreset+0x1170>)
 80077b6:	700b      	strb	r3, [r1, #0]
 80077b8:	b662      	cpsie	i
	presetReady = 1;
 80077ba:	4b71      	ldr	r3, [pc, #452]	; (8007980 <parsePreset+0x1174>)
 80077bc:	601a      	str	r2, [r3, #0]
}
 80077be:	b007      	add	sp, #28
 80077c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				  effectTick[i] = &FXbandpassTick;
 80077c4:	f8df c1c8 	ldr.w	ip, [pc, #456]	; 8007990 <parsePreset+0x1184>
				  effectSetters[i].setParam2 = &blankFunction;
 80077c8:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXbandpassTick;
 80077ca:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXBandpassParam1;
 80077ce:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8007994 <parsePreset+0x1188>
 80077d2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 80077d6:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8007998 <parsePreset+0x118c>
				  effectSetters[i].setParam5 = &blankFunction;
 80077da:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXBandpassParam3;
 80077de:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 80077e2:	e581      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &FXhighpassTick;
 80077e4:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 800799c <parsePreset+0x1190>
				  effectSetters[i].setParam2 = &blankFunction;
 80077e8:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXhighpassTick;
 80077ea:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXHighpassParam1;
 80077ee:	f8df c1b0 	ldr.w	ip, [pc, #432]	; 80079a0 <parsePreset+0x1194>
 80077f2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80077f6:	f8df c1ac 	ldr.w	ip, [pc, #428]	; 80079a4 <parsePreset+0x1198>
				  effectSetters[i].setParam5 = &blankFunction;
 80077fa:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighpassParam3;
 80077fe:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8007802:	e571      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &FXlowpassTick;
 8007804:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 80079a8 <parsePreset+0x119c>
				  effectSetters[i].setParam2 = &blankFunction;
 8007808:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXlowpassTick;
 800780a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowpassParam1;
 800780e:	f8df c19c 	ldr.w	ip, [pc, #412]	; 80079ac <parsePreset+0x11a0>
 8007812:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 8007816:	f8df c198 	ldr.w	ip, [pc, #408]	; 80079b0 <parsePreset+0x11a4>
				  effectSetters[i].setParam5 = &blankFunction;;
 800781a:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowpassParam3;
 800781e:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8007822:	e561      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &wavefolderTick;
 8007824:	f8df c18c 	ldr.w	ip, [pc, #396]	; 80079b4 <parsePreset+0x11a8>
 8007828:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &wavefolderParam1;
 800782c:	f8df c188 	ldr.w	ip, [pc, #392]	; 80079b8 <parsePreset+0x11ac>
 8007830:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8007834:	f8df c184 	ldr.w	ip, [pc, #388]	; 80079bc <parsePreset+0x11b0>
 8007838:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &wavefolderParam3;
 800783c:	f8df c180 	ldr.w	ip, [pc, #384]	; 80079c0 <parsePreset+0x11b4>
 8007840:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8007844:	f8df c17c 	ldr.w	ip, [pc, #380]	; 80079c4 <parsePreset+0x11b8>
 8007848:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 800784c:	f8df c178 	ldr.w	ip, [pc, #376]	; 80079c8 <parsePreset+0x11bc>
 8007850:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8007854:	e548      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &tiltFilterTick;
 8007856:	f8df c174 	ldr.w	ip, [pc, #372]	; 80079cc <parsePreset+0x11c0>
 800785a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &tiltParam1;
 800785e:	f8df c170 	ldr.w	ip, [pc, #368]	; 80079d0 <parsePreset+0x11c4>
 8007862:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &tiltParam2;
 8007866:	f8df c16c 	ldr.w	ip, [pc, #364]	; 80079d4 <parsePreset+0x11c8>
 800786a:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &tiltParam3;
 800786e:	f8df c168 	ldr.w	ip, [pc, #360]	; 80079d8 <parsePreset+0x11cc>
 8007872:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &tiltParam4;
 8007876:	f8df c164 	ldr.w	ip, [pc, #356]	; 80079dc <parsePreset+0x11d0>
 800787a:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &param5Linear;
 800787e:	f8df c148 	ldr.w	ip, [pc, #328]	; 80079c8 <parsePreset+0x11bc>
 8007882:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8007886:	e52f      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &bcTick;
 8007888:	f8df c154 	ldr.w	ip, [pc, #340]	; 80079e0 <parsePreset+0x11d4>
 800788c:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8007890:	f8df c150 	ldr.w	ip, [pc, #336]	; 80079e4 <parsePreset+0x11d8>
 8007894:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &param2Linear;
 8007898:	f8df c14c 	ldr.w	ip, [pc, #332]	; 80079e8 <parsePreset+0x11dc>
 800789c:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3BC;
 80078a0:	f8df c148 	ldr.w	ip, [pc, #328]	; 80079ec <parsePreset+0x11e0>
 80078a4:	e7cc      	b.n	8007840 <parsePreset+0x1034>
				  effectTick[i] = &chorusTick;
 80078a6:	f8df c148 	ldr.w	ip, [pc, #328]	; 80079f0 <parsePreset+0x11e4>
				  effectSetters[i].setParam5 = &blankFunction;
 80078aa:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &chorusTick;
 80078ac:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &chorusParam1;
 80078b0:	f8df c140 	ldr.w	ip, [pc, #320]	; 80079f4 <parsePreset+0x11e8>
 80078b4:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &chorusParam2;
 80078b8:	f8df c13c 	ldr.w	ip, [pc, #316]	; 80079f8 <parsePreset+0x11ec>
 80078bc:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &chorusParam3;
 80078c0:	f8df c138 	ldr.w	ip, [pc, #312]	; 80079fc <parsePreset+0x11f0>
 80078c4:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &chorusParam4;
 80078c8:	f8df c134 	ldr.w	ip, [pc, #308]	; 8007a00 <parsePreset+0x11f4>
 80078cc:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 80078d0:	e50a      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &compressorTick;
 80078d2:	f8df c130 	ldr.w	ip, [pc, #304]	; 8007a04 <parsePreset+0x11f8>
 80078d6:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &compressorParam1;
 80078da:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8007a08 <parsePreset+0x11fc>
 80078de:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &compressorParam2;
 80078e2:	f8df c128 	ldr.w	ip, [pc, #296]	; 8007a0c <parsePreset+0x1200>
 80078e6:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &compressorParam3;
 80078ea:	f8df c124 	ldr.w	ip, [pc, #292]	; 8007a10 <parsePreset+0x1204>
 80078ee:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &compressorParam4;
 80078f2:	f8df c120 	ldr.w	ip, [pc, #288]	; 8007a14 <parsePreset+0x1208>
 80078f6:	f8c3 c00c 	str.w	ip, [r3, #12]
				  effectSetters[i].setParam5 = &compressorParam5;
 80078fa:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8007a18 <parsePreset+0x120c>
 80078fe:	f8c3 c010 	str.w	ip, [r3, #16]
				  break;
 8007902:	e4f1      	b.n	80072e8 <parsePreset+0xadc>
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 8007904:	f8df c114 	ldr.w	ip, [pc, #276]	; 8007a1c <parsePreset+0x1210>
				  effectTick[i] = FXVZhighshelfTick;
 8007908:	4a1e      	ldr	r2, [pc, #120]	; (8007984 <parsePreset+0x1178>)
				  effectSetters[i].setParam1 = &FXHighShelfParam1;;
 800790a:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 800790e:	f8df c110 	ldr.w	ip, [pc, #272]	; 8007a20 <parsePreset+0x1214>
				  effectTick[i] = FXVZhighshelfTick;
 8007912:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam2 = &FXHighShelfParam2;;
 8007914:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8007918:	f8df c108 	ldr.w	ip, [pc, #264]	; 8007a24 <parsePreset+0x1218>
				  effectSetters[i].setParam5 = &blankFunction;;
 800791c:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXHighShelfParam3;;
 8007920:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8007924:	e4e0      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &FXVZlowshelfTick;
 8007926:	f8df c100 	ldr.w	ip, [pc, #256]	; 8007a28 <parsePreset+0x121c>
 800792a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXLowShelfParam1;
 800792e:	f8df c0fc 	ldr.w	ip, [pc, #252]	; 8007a2c <parsePreset+0x1220>
 8007932:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXLowShelfParam2;
 8007936:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8007a30 <parsePreset+0x1224>
 800793a:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 800793e:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8007a34 <parsePreset+0x1228>
				  effectSetters[i].setParam5 = &blankFunction;
 8007942:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXLowShelfParam3;
 8007946:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 800794a:	e4cd      	b.n	80072e8 <parsePreset+0xadc>
 800794c:	20015c38 	.word	0x20015c38
 8007950:	20015c3c 	.word	0x20015c3c
 8007954:	20015c44 	.word	0x20015c44
 8007958:	20005220 	.word	0x20005220
 800795c:	37fffffc 	.word	0x37fffffc
 8007960:	200166ac 	.word	0x200166ac
 8007964:	2000071c 	.word	0x2000071c
 8007968:	20016d50 	.word	0x20016d50
 800796c:	200130c8 	.word	0x200130c8
 8007970:	20000068 	.word	0x20000068
 8007974:	20000069 	.word	0x20000069
 8007978:	20000050 	.word	0x20000050
 800797c:	20000004 	.word	0x20000004
 8007980:	200055c0 	.word	0x200055c0
 8007984:	080035b9 	.word	0x080035b9
 8007988:	200152b8 	.word	0x200152b8
 800798c:	20012df8 	.word	0x20012df8
 8007990:	08003569 	.word	0x08003569
 8007994:	0800368d 	.word	0x0800368d
 8007998:	08003999 	.word	0x08003999
 800799c:	08003555 	.word	0x08003555
 80079a0:	08003641 	.word	0x08003641
 80079a4:	08003985 	.word	0x08003985
 80079a8:	08003541 	.word	0x08003541
 80079ac:	080035f5 	.word	0x080035f5
 80079b0:	08003971 	.word	0x08003971
 80079b4:	080030f9 	.word	0x080030f9
 80079b8:	08002d21 	.word	0x08002d21
 80079bc:	08002f49 	.word	0x08002f49
 80079c0:	08002d49 	.word	0x08002d49
 80079c4:	08003061 	.word	0x08003061
 80079c8:	08003075 	.word	0x08003075
 80079cc:	08003301 	.word	0x08003301
 80079d0:	08002d79 	.word	0x08002d79
 80079d4:	08002dc9 	.word	0x08002dc9
 80079d8:	08002e15 	.word	0x08002e15
 80079dc:	08002e39 	.word	0x08002e39
 80079e0:	08003509 	.word	0x08003509
 80079e4:	08002cf9 	.word	0x08002cf9
 80079e8:	08002f69 	.word	0x08002f69
 80079ec:	08003089 	.word	0x08003089
 80079f0:	080032a1 	.word	0x080032a1
 80079f4:	08003205 	.word	0x08003205
 80079f8:	08003229 	.word	0x08003229
 80079fc:	08003249 	.word	0x08003249
 8007a00:	08003275 	.word	0x08003275
 8007a04:	0800352d 	.word	0x0800352d
 8007a08:	08002e6d 	.word	0x08002e6d
 8007a0c:	08002e89 	.word	0x08002e89
 8007a10:	08002ebd 	.word	0x08002ebd
 8007a14:	08002ed9 	.word	0x08002ed9
 8007a18:	08002f11 	.word	0x08002f11
 8007a1c:	080037bd 	.word	0x080037bd
 8007a20:	08003909 	.word	0x08003909
 8007a24:	080039e9 	.word	0x080039e9
 8007a28:	080035a5 	.word	0x080035a5
 8007a2c:	08003771 	.word	0x08003771
 8007a30:	080038d5 	.word	0x080038d5
 8007a34:	080039d5 	.word	0x080039d5
				  effectTick[i] = &FXVZpeakTick;
 8007a38:	f8df c30c 	ldr.w	ip, [pc, #780]	; 8007d48 <parsePreset+0x153c>
 8007a3c:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXPeakParam1;
 8007a40:	f8df c308 	ldr.w	ip, [pc, #776]	; 8007d4c <parsePreset+0x1540>
 8007a44:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &FXPeakParam2;
 8007a48:	f8df c304 	ldr.w	ip, [pc, #772]	; 8007d50 <parsePreset+0x1544>
 8007a4c:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8007a50:	f8df c300 	ldr.w	ip, [pc, #768]	; 8007d54 <parsePreset+0x1548>
				  effectSetters[i].setParam5 = &blankFunction;
 8007a54:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXPeakParam3;
 8007a58:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8007a5c:	e444      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &FXdiodeLowpassTick;
 8007a5e:	f8df c2f8 	ldr.w	ip, [pc, #760]	; 8007d58 <parsePreset+0x154c>
				  effectSetters[i].setParam2 = &blankFunction;
 8007a62:	6058      	str	r0, [r3, #4]
				  effectTick[i] = &FXdiodeLowpassTick;
 8007a64:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &FXDiodeParam1;
 8007a68:	f8df c2f0 	ldr.w	ip, [pc, #752]	; 8007d5c <parsePreset+0x1550>
 8007a6c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8007a70:	f8df c2ec 	ldr.w	ip, [pc, #748]	; 8007d60 <parsePreset+0x1554>
				  effectSetters[i].setParam5 = &blankFunction;
 8007a74:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  effectSetters[i].setParam3 = &FXDiodeParam3;
 8007a78:	f8c3 c008 	str.w	ip, [r3, #8]
				  break;
 8007a7c:	e434      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = FXVZbandrejectTick;
 8007a7e:	4a98      	ldr	r2, [pc, #608]	; (8007ce0 <parsePreset+0x14d4>)
 8007a80:	602a      	str	r2, [r5, #0]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8007a82:	4a98      	ldr	r2, [pc, #608]	; (8007ce4 <parsePreset+0x14d8>)
				  effectSetters[i].setParam5 = &blankFunction;;
 8007a84:	6118      	str	r0, [r3, #16]
				  effectSetters[i].setParam1 = &FXNotchParam1;;
 8007a86:	601a      	str	r2, [r3, #0]
				  effectSetters[i].setParam2 = &FXNotchParam2;;
 8007a88:	4a97      	ldr	r2, [pc, #604]	; (8007ce8 <parsePreset+0x14dc>)
 8007a8a:	605a      	str	r2, [r3, #4]
				  effectSetters[i].setParam3 = &FXNotchParam3;;
 8007a8c:	4a97      	ldr	r2, [pc, #604]	; (8007cec <parsePreset+0x14e0>)
				  effectSetters[i].setParam4 = &blankFunction;;
 8007a8e:	e9c3 2002 	strd	r2, r0, [r3, #8]
				  break;
 8007a92:	e429      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &shaperTick;
 8007a94:	f8df c2cc 	ldr.w	ip, [pc, #716]	; 8007d64 <parsePreset+0x1558>
				  effectSetters[i].setParam5 = &blankFunction;
 8007a98:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &tanhTick;
 8007a9a:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8007a9e:	f8df c2c8 	ldr.w	ip, [pc, #712]	; 8007d68 <parsePreset+0x155c>
 8007aa2:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8007aa6:	f8df c2c4 	ldr.w	ip, [pc, #708]	; 8007d6c <parsePreset+0x1560>
 8007aaa:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Linear;
 8007aae:	f8df c2c0 	ldr.w	ip, [pc, #704]	; 8007d70 <parsePreset+0x1564>
 8007ab2:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8007ab6:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 8007d74 <parsePreset+0x1568>
 8007aba:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8007abe:	e413      	b.n	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &tanhTick;
 8007ac0:	f8df c2b4 	ldr.w	ip, [pc, #692]	; 8007d78 <parsePreset+0x156c>
				  effectSetters[i].setParam5 = &blankFunction;
 8007ac4:	6118      	str	r0, [r3, #16]
 8007ac6:	e7e8      	b.n	8007a9a <parsePreset+0x128e>
				  effectTick[i] = &satTick;
 8007ac8:	f8df c2b0 	ldr.w	ip, [pc, #688]	; 8007d7c <parsePreset+0x1570>
				  effectSetters[i].setParam5 = &blankFunction;
 8007acc:	6118      	str	r0, [r3, #16]
 8007ace:	e7e4      	b.n	8007a9a <parsePreset+0x128e>
				  effectTick[i] = &hardClipTick;
 8007ad0:	f8df c2ac 	ldr.w	ip, [pc, #684]	; 8007d80 <parsePreset+0x1574>
				  effectSetters[i].setParam5 = &blankFunction;
 8007ad4:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &hardClipTick;
 8007ad6:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8007ada:	f8df c28c 	ldr.w	ip, [pc, #652]	; 8007d68 <parsePreset+0x155c>
 8007ade:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8007ae2:	f8df c288 	ldr.w	ip, [pc, #648]	; 8007d6c <parsePreset+0x1560>
 8007ae6:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Hard;
 8007aea:	f8df c298 	ldr.w	ip, [pc, #664]	; 8007d84 <parsePreset+0x1578>
 8007aee:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8007af2:	f8df c280 	ldr.w	ip, [pc, #640]	; 8007d74 <parsePreset+0x1568>
 8007af6:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8007afa:	f7ff bbf5 	b.w	80072e8 <parsePreset+0xadc>
				  effectTick[i] = &softClipTick;
 8007afe:	f8df c288 	ldr.w	ip, [pc, #648]	; 8007d88 <parsePreset+0x157c>
				  effectSetters[i].setParam5 = &blankFunction;
 8007b02:	6118      	str	r0, [r3, #16]
				  effectTick[i] = &softClipTick;
 8007b04:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam1 = &clipperGainSet;
 8007b08:	f8df c25c 	ldr.w	ip, [pc, #604]	; 8007d68 <parsePreset+0x155c>
 8007b0c:	f8c3 c000 	str.w	ip, [r3]
				  effectSetters[i].setParam2 = &offsetParam2;
 8007b10:	f8df c258 	ldr.w	ip, [pc, #600]	; 8007d6c <parsePreset+0x1560>
 8007b14:	f8c3 c004 	str.w	ip, [r3, #4]
				  effectSetters[i].setParam3 = &param3Soft;
 8007b18:	f8df c270 	ldr.w	ip, [pc, #624]	; 8007d8c <parsePreset+0x1580>
 8007b1c:	f8c3 c008 	str.w	ip, [r3, #8]
				  effectSetters[i].setParam4 = &param4Linear;
 8007b20:	f8df c250 	ldr.w	ip, [pc, #592]	; 8007d74 <parsePreset+0x1568>
 8007b24:	f8c3 c00c 	str.w	ip, [r3, #12]
				  break;
 8007b28:	f7ff bbde 	b.w	80072e8 <parsePreset+0xadc>
				  totalEffects--;
 8007b2c:	9a01      	ldr	r2, [sp, #4]
				  effectSetters[i].setParam3 = &blankFunction;
 8007b2e:	6098      	str	r0, [r3, #8]
				  totalEffects--;
 8007b30:	f102 3cff 	add.w	ip, r2, #4294967295	; 0xffffffff
 8007b34:	fa5f f28c 	uxtb.w	r2, ip
				  effectTick[i] = &blankTick;
 8007b38:	f8df c254 	ldr.w	ip, [pc, #596]	; 8007d90 <parsePreset+0x1584>
				  effectSetters[i].setParam2 = &blankFunction;
 8007b3c:	e9c3 0000 	strd	r0, r0, [r3]
				  totalEffects--;
 8007b40:	9201      	str	r2, [sp, #4]
				  effectTick[i] = &blankTick;
 8007b42:	f8c5 c000 	str.w	ip, [r5]
				  effectSetters[i].setParam5 = &blankFunction;
 8007b46:	e9c3 0003 	strd	r0, r0, [r3, #12]
				  break;
 8007b4a:	f7ff bbcd 	b.w	80072e8 <parsePreset+0xadc>
				lfoShapeTick[i] = &lfoSawTick;
 8007b4e:	4b68      	ldr	r3, [pc, #416]	; (8007cf0 <parsePreset+0x14e4>)
 8007b50:	4868      	ldr	r0, [pc, #416]	; (8007cf4 <parsePreset+0x14e8>)
 8007b52:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007b54:	4b68      	ldr	r3, [pc, #416]	; (8007cf8 <parsePreset+0x14ec>)
 8007b56:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSetShape;
 8007b58:	4b68      	ldr	r3, [pc, #416]	; (8007cfc <parsePreset+0x14f0>)
 8007b5a:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8007b5c:	4b68      	ldr	r3, [pc, #416]	; (8007d00 <parsePreset+0x14f4>)
 8007b5e:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8007b60:	f7ff bb89 	b.w	8007276 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
 8007b64:	4b62      	ldr	r3, [pc, #392]	; (8007cf0 <parsePreset+0x14e4>)
 8007b66:	4867      	ldr	r0, [pc, #412]	; (8007d04 <parsePreset+0x14f8>)
 8007b68:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007b6a:	4b67      	ldr	r3, [pc, #412]	; (8007d08 <parsePreset+0x14fc>)
 8007b6c:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007b6e:	4b67      	ldr	r3, [pc, #412]	; (8007d0c <parsePreset+0x1500>)
 8007b70:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007b72:	4b67      	ldr	r3, [pc, #412]	; (8007d10 <parsePreset+0x1504>)
 8007b74:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8007b76:	f7ff bb7e 	b.w	8007276 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTick;
 8007b7a:	4b5d      	ldr	r3, [pc, #372]	; (8007cf0 <parsePreset+0x14e4>)
 8007b7c:	4865      	ldr	r0, [pc, #404]	; (8007d14 <parsePreset+0x1508>)
 8007b7e:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007b80:	4b65      	ldr	r3, [pc, #404]	; (8007d18 <parsePreset+0x150c>)
 8007b82:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007b84:	4b65      	ldr	r3, [pc, #404]	; (8007d1c <parsePreset+0x1510>)
 8007b86:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8007b88:	4b65      	ldr	r3, [pc, #404]	; (8007d20 <parsePreset+0x1514>)
 8007b8a:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8007b8c:	f7ff bb73 	b.w	8007276 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSawTick;
 8007b90:	4b57      	ldr	r3, [pc, #348]	; (8007cf0 <parsePreset+0x14e4>)
 8007b92:	4858      	ldr	r0, [pc, #352]	; (8007cf4 <parsePreset+0x14e8>)
 8007b94:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007b96:	4b58      	ldr	r3, [pc, #352]	; (8007cf8 <parsePreset+0x14ec>)
 8007b98:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8007b9a:	4b58      	ldr	r3, [pc, #352]	; (8007cfc <parsePreset+0x14f0>)
 8007b9c:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8007b9e:	4b58      	ldr	r3, [pc, #352]	; (8007d00 <parsePreset+0x14f4>)
 8007ba0:	6213      	str	r3, [r2, #32]
				break;
 8007ba2:	f7ff bb18 	b.w	80071d6 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007ba6:	4b52      	ldr	r3, [pc, #328]	; (8007cf0 <parsePreset+0x14e4>)
 8007ba8:	485e      	ldr	r0, [pc, #376]	; (8007d24 <parsePreset+0x1518>)
 8007baa:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007bac:	4b5e      	ldr	r3, [pc, #376]	; (8007d28 <parsePreset+0x151c>)
 8007bae:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007bb0:	4b5e      	ldr	r3, [pc, #376]	; (8007d2c <parsePreset+0x1520>)
 8007bb2:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007bb4:	4b5e      	ldr	r3, [pc, #376]	; (8007d30 <parsePreset+0x1524>)
 8007bb6:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8007bb8:	f7ff bb5d 	b.w	8007276 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007bbc:	4b4c      	ldr	r3, [pc, #304]	; (8007cf0 <parsePreset+0x14e4>)
 8007bbe:	485d      	ldr	r0, [pc, #372]	; (8007d34 <parsePreset+0x1528>)
 8007bc0:	60d8      	str	r0, [r3, #12]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007bc2:	4b5d      	ldr	r3, [pc, #372]	; (8007d38 <parsePreset+0x152c>)
 8007bc4:	6253      	str	r3, [r2, #36]	; 0x24
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007bc6:	4b5d      	ldr	r3, [pc, #372]	; (8007d3c <parsePreset+0x1530>)
 8007bc8:	6293      	str	r3, [r2, #40]	; 0x28
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007bca:	4b5d      	ldr	r3, [pc, #372]	; (8007d40 <parsePreset+0x1534>)
 8007bcc:	62d3      	str	r3, [r2, #44]	; 0x2c
				break;
 8007bce:	f7ff bb52 	b.w	8007276 <parsePreset+0xa6a>
				lfoShapeTick[i] = &lfoTriTick;
 8007bd2:	4b47      	ldr	r3, [pc, #284]	; (8007cf0 <parsePreset+0x14e4>)
 8007bd4:	484b      	ldr	r0, [pc, #300]	; (8007d04 <parsePreset+0x14f8>)
 8007bd6:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007bd8:	4b4b      	ldr	r3, [pc, #300]	; (8007d08 <parsePreset+0x14fc>)
 8007bda:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007bdc:	4b4b      	ldr	r3, [pc, #300]	; (8007d0c <parsePreset+0x1500>)
 8007bde:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007be0:	4b4b      	ldr	r3, [pc, #300]	; (8007d10 <parsePreset+0x1504>)
 8007be2:	6213      	str	r3, [r2, #32]
				break;
 8007be4:	f7ff baf7 	b.w	80071d6 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSineTick;
 8007be8:	4b41      	ldr	r3, [pc, #260]	; (8007cf0 <parsePreset+0x14e4>)
 8007bea:	484a      	ldr	r0, [pc, #296]	; (8007d14 <parsePreset+0x1508>)
 8007bec:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007bee:	4b4a      	ldr	r3, [pc, #296]	; (8007d18 <parsePreset+0x150c>)
 8007bf0:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007bf2:	4b4a      	ldr	r3, [pc, #296]	; (8007d1c <parsePreset+0x1510>)
 8007bf4:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8007bf6:	4b4a      	ldr	r3, [pc, #296]	; (8007d20 <parsePreset+0x1514>)
 8007bf8:	6213      	str	r3, [r2, #32]
				break;
 8007bfa:	f7ff baec 	b.w	80071d6 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007bfe:	4b3c      	ldr	r3, [pc, #240]	; (8007cf0 <parsePreset+0x14e4>)
 8007c00:	4848      	ldr	r0, [pc, #288]	; (8007d24 <parsePreset+0x1518>)
 8007c02:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007c04:	4b48      	ldr	r3, [pc, #288]	; (8007d28 <parsePreset+0x151c>)
 8007c06:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007c08:	4b48      	ldr	r3, [pc, #288]	; (8007d2c <parsePreset+0x1520>)
 8007c0a:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007c0c:	4b48      	ldr	r3, [pc, #288]	; (8007d30 <parsePreset+0x1524>)
 8007c0e:	6213      	str	r3, [r2, #32]
				break;
 8007c10:	f7ff bae1 	b.w	80071d6 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoSawTick;
 8007c14:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <parsePreset+0x14e4>)
 8007c16:	4837      	ldr	r0, [pc, #220]	; (8007cf4 <parsePreset+0x14e8>)
 8007c18:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007c1a:	4b37      	ldr	r3, [pc, #220]	; (8007cf8 <parsePreset+0x14ec>)
 8007c1c:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8007c1e:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <parsePreset+0x14f0>)
 8007c20:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8007c22:	4b37      	ldr	r3, [pc, #220]	; (8007d00 <parsePreset+0x14f4>)
 8007c24:	6153      	str	r3, [r2, #20]
				break;
 8007c26:	f7ff bab6 	b.w	8007196 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007c2a:	4b31      	ldr	r3, [pc, #196]	; (8007cf0 <parsePreset+0x14e4>)
 8007c2c:	4841      	ldr	r0, [pc, #260]	; (8007d34 <parsePreset+0x1528>)
 8007c2e:	6098      	str	r0, [r3, #8]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007c30:	4b41      	ldr	r3, [pc, #260]	; (8007d38 <parsePreset+0x152c>)
 8007c32:	6193      	str	r3, [r2, #24]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007c34:	4b41      	ldr	r3, [pc, #260]	; (8007d3c <parsePreset+0x1530>)
 8007c36:	61d3      	str	r3, [r2, #28]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007c38:	4b41      	ldr	r3, [pc, #260]	; (8007d40 <parsePreset+0x1534>)
 8007c3a:	6213      	str	r3, [r2, #32]
				break;
 8007c3c:	f7ff bacb 	b.w	80071d6 <parsePreset+0x9ca>
				lfoShapeTick[i] = &lfoTriTick;
 8007c40:	4b2b      	ldr	r3, [pc, #172]	; (8007cf0 <parsePreset+0x14e4>)
 8007c42:	4830      	ldr	r0, [pc, #192]	; (8007d04 <parsePreset+0x14f8>)
 8007c44:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007c46:	4b30      	ldr	r3, [pc, #192]	; (8007d08 <parsePreset+0x14fc>)
 8007c48:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007c4a:	4b30      	ldr	r3, [pc, #192]	; (8007d0c <parsePreset+0x1500>)
 8007c4c:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007c4e:	4b30      	ldr	r3, [pc, #192]	; (8007d10 <parsePreset+0x1504>)
 8007c50:	6153      	str	r3, [r2, #20]
				break;
 8007c52:	f7ff baa0 	b.w	8007196 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTick;
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <parsePreset+0x14e4>)
 8007c58:	482e      	ldr	r0, [pc, #184]	; (8007d14 <parsePreset+0x1508>)
 8007c5a:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007c5c:	4b2e      	ldr	r3, [pc, #184]	; (8007d18 <parsePreset+0x150c>)
 8007c5e:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007c60:	4b2e      	ldr	r3, [pc, #184]	; (8007d1c <parsePreset+0x1510>)
 8007c62:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8007c64:	4b2e      	ldr	r3, [pc, #184]	; (8007d20 <parsePreset+0x1514>)
 8007c66:	6153      	str	r3, [r2, #20]
				break;
 8007c68:	f7ff ba95 	b.w	8007196 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007c6c:	4b20      	ldr	r3, [pc, #128]	; (8007cf0 <parsePreset+0x14e4>)
 8007c6e:	482d      	ldr	r0, [pc, #180]	; (8007d24 <parsePreset+0x1518>)
 8007c70:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007c72:	4b2d      	ldr	r3, [pc, #180]	; (8007d28 <parsePreset+0x151c>)
 8007c74:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007c76:	4b2d      	ldr	r3, [pc, #180]	; (8007d2c <parsePreset+0x1520>)
 8007c78:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007c7a:	4b2d      	ldr	r3, [pc, #180]	; (8007d30 <parsePreset+0x1524>)
 8007c7c:	6153      	str	r3, [r2, #20]
				break;
 8007c7e:	f7ff ba8a 	b.w	8007196 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007c82:	4b1b      	ldr	r3, [pc, #108]	; (8007cf0 <parsePreset+0x14e4>)
 8007c84:	482b      	ldr	r0, [pc, #172]	; (8007d34 <parsePreset+0x1528>)
 8007c86:	6058      	str	r0, [r3, #4]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007c88:	4b2b      	ldr	r3, [pc, #172]	; (8007d38 <parsePreset+0x152c>)
 8007c8a:	60d3      	str	r3, [r2, #12]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007c8c:	4b2b      	ldr	r3, [pc, #172]	; (8007d3c <parsePreset+0x1530>)
 8007c8e:	6113      	str	r3, [r2, #16]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007c90:	4b2b      	ldr	r3, [pc, #172]	; (8007d40 <parsePreset+0x1534>)
 8007c92:	6153      	str	r3, [r2, #20]
				break;
 8007c94:	f7ff ba7f 	b.w	8007196 <parsePreset+0x98a>
				lfoShapeTick[i] = &lfoSawTick;
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <parsePreset+0x14e4>)
 8007c9a:	4816      	ldr	r0, [pc, #88]	; (8007cf4 <parsePreset+0x14e8>)
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007c9c:	4a29      	ldr	r2, [pc, #164]	; (8007d44 <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoSawTick;
 8007c9e:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSetRate;
 8007ca0:	4b15      	ldr	r3, [pc, #84]	; (8007cf8 <parsePreset+0x14ec>)
 8007ca2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSetShape;
 8007ca4:	4b15      	ldr	r3, [pc, #84]	; (8007cfc <parsePreset+0x14f0>)
 8007ca6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSetPhase;
 8007ca8:	4b15      	ldr	r3, [pc, #84]	; (8007d00 <parsePreset+0x14f4>)
 8007caa:	6093      	str	r3, [r2, #8]
				break;
 8007cac:	f7ff ba53 	b.w	8007156 <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoTriTick;
 8007cb0:	4b0f      	ldr	r3, [pc, #60]	; (8007cf0 <parsePreset+0x14e4>)
 8007cb2:	4814      	ldr	r0, [pc, #80]	; (8007d04 <parsePreset+0x14f8>)
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007cb4:	4a23      	ldr	r2, [pc, #140]	; (8007d44 <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoTriTick;
 8007cb6:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoTriSetRate;
 8007cb8:	4b13      	ldr	r3, [pc, #76]	; (8007d08 <parsePreset+0x14fc>)
 8007cba:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoTriSetShape;
 8007cbc:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <parsePreset+0x1500>)
 8007cbe:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoTriSetPhase;
 8007cc0:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <parsePreset+0x1504>)
 8007cc2:	6093      	str	r3, [r2, #8]
				break;
 8007cc4:	f7ff ba47 	b.w	8007156 <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTick;
 8007cc8:	4b09      	ldr	r3, [pc, #36]	; (8007cf0 <parsePreset+0x14e4>)
 8007cca:	4812      	ldr	r0, [pc, #72]	; (8007d14 <parsePreset+0x1508>)
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007ccc:	4a1d      	ldr	r2, [pc, #116]	; (8007d44 <parsePreset+0x1538>)
				lfoShapeTick[i] = &lfoSineTick;
 8007cce:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineSetRate;
 8007cd0:	4b11      	ldr	r3, [pc, #68]	; (8007d18 <parsePreset+0x150c>)
 8007cd2:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineSetShape;
 8007cd4:	4b11      	ldr	r3, [pc, #68]	; (8007d1c <parsePreset+0x1510>)
 8007cd6:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineSetPhase;
 8007cd8:	4b11      	ldr	r3, [pc, #68]	; (8007d20 <parsePreset+0x1514>)
 8007cda:	6093      	str	r3, [r2, #8]
				break;
 8007cdc:	f7ff ba3b 	b.w	8007156 <parsePreset+0x94a>
 8007ce0:	080035cd 	.word	0x080035cd
 8007ce4:	08003809 	.word	0x08003809
 8007ce8:	0800393d 	.word	0x0800393d
 8007cec:	080039fd 	.word	0x080039fd
 8007cf0:	20005284 	.word	0x20005284
 8007cf4:	08002b7d 	.word	0x08002b7d
 8007cf8:	08002c11 	.word	0x08002c11
 8007cfc:	08002ce1 	.word	0x08002ce1
 8007d00:	08002c89 	.word	0x08002c89
 8007d04:	08002b61 	.word	0x08002b61
 8007d08:	08002bfd 	.word	0x08002bfd
 8007d0c:	08002cdd 	.word	0x08002cdd
 8007d10:	08002c75 	.word	0x08002c75
 8007d14:	08002b45 	.word	0x08002b45
 8007d18:	08002be9 	.word	0x08002be9
 8007d1c:	08002cd9 	.word	0x08002cd9
 8007d20:	08002c61 	.word	0x08002c61
 8007d24:	08002b0d 	.word	0x08002b0d
 8007d28:	08002bc1 	.word	0x08002bc1
 8007d2c:	08002cb1 	.word	0x08002cb1
 8007d30:	08002c39 	.word	0x08002c39
 8007d34:	08002b29 	.word	0x08002b29
 8007d38:	08002bd5 	.word	0x08002bd5
 8007d3c:	08002cc5 	.word	0x08002cc5
 8007d40:	08002c4d 	.word	0x08002c4d
 8007d44:	20015284 	.word	0x20015284
 8007d48:	08003591 	.word	0x08003591
 8007d4c:	08003725 	.word	0x08003725
 8007d50:	080038a1 	.word	0x080038a1
 8007d54:	080039c1 	.word	0x080039c1
 8007d58:	0800357d 	.word	0x0800357d
 8007d5c:	080036d9 	.word	0x080036d9
 8007d60:	080039ad 	.word	0x080039ad
 8007d64:	080032ad 	.word	0x080032ad
 8007d68:	08002cf9 	.word	0x08002cf9
 8007d6c:	08002f49 	.word	0x08002f49
 8007d70:	08002f7d 	.word	0x08002f7d
 8007d74:	08003061 	.word	0x08003061
 8007d78:	08003335 	.word	0x08003335
 8007d7c:	08003495 	.word	0x08003495
 8007d80:	08003411 	.word	0x08003411
 8007d84:	08002fe9 	.word	0x08002fe9
 8007d88:	0800338d 	.word	0x0800338d
 8007d8c:	08002f91 	.word	0x08002f91
 8007d90:	080032fd 	.word	0x080032fd
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007d94:	4b99      	ldr	r3, [pc, #612]	; (8007ffc <parsePreset+0x17f0>)
 8007d96:	489a      	ldr	r0, [pc, #616]	; (8008000 <parsePreset+0x17f4>)
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007d98:	4a9a      	ldr	r2, [pc, #616]	; (8008004 <parsePreset+0x17f8>)
				lfoShapeTick[i] = &lfoSawSquareTick;
 8007d9a:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSawSquareSetRate;
 8007d9c:	4b9a      	ldr	r3, [pc, #616]	; (8008008 <parsePreset+0x17fc>)
 8007d9e:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSawSquareSetShape;
 8007da0:	4b9a      	ldr	r3, [pc, #616]	; (800800c <parsePreset+0x1800>)
 8007da2:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSawSquareSetPhase;
 8007da4:	4b9a      	ldr	r3, [pc, #616]	; (8008010 <parsePreset+0x1804>)
 8007da6:	6093      	str	r3, [r2, #8]
				break;
 8007da8:	f7ff b9d5 	b.w	8007156 <parsePreset+0x94a>
				lfoShapeTick[i] = &lfoSineTriTick;
 8007dac:	4b93      	ldr	r3, [pc, #588]	; (8007ffc <parsePreset+0x17f0>)
 8007dae:	4899      	ldr	r0, [pc, #612]	; (8008014 <parsePreset+0x1808>)
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007db0:	4a94      	ldr	r2, [pc, #592]	; (8008004 <parsePreset+0x17f8>)
				lfoShapeTick[i] = &lfoSineTriTick;
 8007db2:	6018      	str	r0, [r3, #0]
				lfoSetters[i].setRate = &lfoSineTriSetRate;
 8007db4:	4b98      	ldr	r3, [pc, #608]	; (8008018 <parsePreset+0x180c>)
 8007db6:	6013      	str	r3, [r2, #0]
				lfoSetters[i].setShape = &lfoSineTriSetShape;
 8007db8:	4b98      	ldr	r3, [pc, #608]	; (800801c <parsePreset+0x1810>)
 8007dba:	6053      	str	r3, [r2, #4]
				lfoSetters[i].setPhase = &lfoSineTriSetPhase;
 8007dbc:	4b98      	ldr	r3, [pc, #608]	; (8008020 <parsePreset+0x1814>)
 8007dbe:	6093      	str	r3, [r2, #8]
				break;
 8007dc0:	f7ff b9c9 	b.w	8007156 <parsePreset+0x94a>
				  filterTick[i] = &LadderLowpassTick;
 8007dc4:	4b97      	ldr	r3, [pc, #604]	; (8008024 <parsePreset+0x1818>)
 8007dc6:	4a98      	ldr	r2, [pc, #608]	; (8008028 <parsePreset+0x181c>)
 8007dc8:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8007dca:	4b98      	ldr	r3, [pc, #608]	; (800802c <parsePreset+0x1820>)
 8007dcc:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8007dce:	4b98      	ldr	r3, [pc, #608]	; (8008030 <parsePreset+0x1824>)
 8007dd0:	60cb      	str	r3, [r1, #12]
				  break;
 8007dd2:	f7ff b99e 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &VZbandrejectTick;
 8007dd6:	4b93      	ldr	r3, [pc, #588]	; (8008024 <parsePreset+0x1818>)
 8007dd8:	4a96      	ldr	r2, [pc, #600]	; (8008034 <parsePreset+0x1828>)
 8007dda:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8007ddc:	4b96      	ldr	r3, [pc, #600]	; (8008038 <parsePreset+0x182c>)
 8007dde:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8007de0:	4b96      	ldr	r3, [pc, #600]	; (800803c <parsePreset+0x1830>)
 8007de2:	60cb      	str	r3, [r1, #12]
				  break;
 8007de4:	f7ff b995 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &VZhighshelfTick;
 8007de8:	4b8e      	ldr	r3, [pc, #568]	; (8008024 <parsePreset+0x1818>)
 8007dea:	4a95      	ldr	r2, [pc, #596]	; (8008040 <parsePreset+0x1834>)
 8007dec:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8007dee:	4b95      	ldr	r3, [pc, #596]	; (8008044 <parsePreset+0x1838>)
 8007df0:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8007df2:	4b95      	ldr	r3, [pc, #596]	; (8008048 <parsePreset+0x183c>)
 8007df4:	60cb      	str	r3, [r1, #12]
				  break;
 8007df6:	f7ff b98c 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &VZlowshelfTick;
 8007dfa:	4b8a      	ldr	r3, [pc, #552]	; (8008024 <parsePreset+0x1818>)
 8007dfc:	4a93      	ldr	r2, [pc, #588]	; (800804c <parsePreset+0x1840>)
 8007dfe:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8007e00:	4b93      	ldr	r3, [pc, #588]	; (8008050 <parsePreset+0x1844>)
 8007e02:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8007e04:	4b93      	ldr	r3, [pc, #588]	; (8008054 <parsePreset+0x1848>)
 8007e06:	60cb      	str	r3, [r1, #12]
				  break;
 8007e08:	f7ff b983 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &VZpeakTick;
 8007e0c:	4b85      	ldr	r3, [pc, #532]	; (8008024 <parsePreset+0x1818>)
 8007e0e:	4a92      	ldr	r2, [pc, #584]	; (8008058 <parsePreset+0x184c>)
 8007e10:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8007e12:	4b92      	ldr	r3, [pc, #584]	; (800805c <parsePreset+0x1850>)
 8007e14:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8007e16:	4b92      	ldr	r3, [pc, #584]	; (8008060 <parsePreset+0x1854>)
 8007e18:	60cb      	str	r3, [r1, #12]
				  break;
 8007e1a:	f7ff b97a 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &diodeLowpassTick;
 8007e1e:	4b81      	ldr	r3, [pc, #516]	; (8008024 <parsePreset+0x1818>)
 8007e20:	4a90      	ldr	r2, [pc, #576]	; (8008064 <parsePreset+0x1858>)
 8007e22:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8007e24:	4b90      	ldr	r3, [pc, #576]	; (8008068 <parsePreset+0x185c>)
 8007e26:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8007e28:	4b90      	ldr	r3, [pc, #576]	; (800806c <parsePreset+0x1860>)
 8007e2a:	60cb      	str	r3, [r1, #12]
				  break;
 8007e2c:	f7ff b971 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &bandpassTick;
 8007e30:	4b7c      	ldr	r3, [pc, #496]	; (8008024 <parsePreset+0x1818>)
 8007e32:	4a8f      	ldr	r2, [pc, #572]	; (8008070 <parsePreset+0x1864>)
 8007e34:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &bandpassSetQ;
 8007e36:	4b8f      	ldr	r3, [pc, #572]	; (8008074 <parsePreset+0x1868>)
 8007e38:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &bandpassSetGain;
 8007e3a:	4b8f      	ldr	r3, [pc, #572]	; (8008078 <parsePreset+0x186c>)
 8007e3c:	60cb      	str	r3, [r1, #12]
				  break;
 8007e3e:	f7ff b968 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &highpassTick;
 8007e42:	4b78      	ldr	r3, [pc, #480]	; (8008024 <parsePreset+0x1818>)
 8007e44:	4a8d      	ldr	r2, [pc, #564]	; (800807c <parsePreset+0x1870>)
 8007e46:	605a      	str	r2, [r3, #4]
				  filterSetters[i].setQ = &highpassSetQ;
 8007e48:	4b8d      	ldr	r3, [pc, #564]	; (8008080 <parsePreset+0x1874>)
 8007e4a:	608b      	str	r3, [r1, #8]
				  filterSetters[i].setGain = &highpassSetGain;
 8007e4c:	4b8d      	ldr	r3, [pc, #564]	; (8008084 <parsePreset+0x1878>)
 8007e4e:	60cb      	str	r3, [r1, #12]
				  break;
 8007e50:	f7ff b95f 	b.w	8007112 <parsePreset+0x906>
				  filterTick[i] = &LadderLowpassTick;
 8007e54:	4b73      	ldr	r3, [pc, #460]	; (8008024 <parsePreset+0x1818>)
 8007e56:	4a74      	ldr	r2, [pc, #464]	; (8008028 <parsePreset+0x181c>)
 8007e58:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &LadderLowpassSetQ;
 8007e5a:	4b74      	ldr	r3, [pc, #464]	; (800802c <parsePreset+0x1820>)
 8007e5c:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &LadderLowpassSetGain;
 8007e5e:	4b74      	ldr	r3, [pc, #464]	; (8008030 <parsePreset+0x1824>)
 8007e60:	604b      	str	r3, [r1, #4]
				  break;
 8007e62:	f7ff b935 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &VZbandrejectTick;
 8007e66:	4b6f      	ldr	r3, [pc, #444]	; (8008024 <parsePreset+0x1818>)
 8007e68:	4a72      	ldr	r2, [pc, #456]	; (8008034 <parsePreset+0x1828>)
 8007e6a:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZbandrejectSetQ;
 8007e6c:	4b72      	ldr	r3, [pc, #456]	; (8008038 <parsePreset+0x182c>)
 8007e6e:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZbandrejectSetGain;
 8007e70:	4b72      	ldr	r3, [pc, #456]	; (800803c <parsePreset+0x1830>)
 8007e72:	604b      	str	r3, [r1, #4]
				  break;
 8007e74:	f7ff b92c 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &VZhighshelfTick;
 8007e78:	4b6a      	ldr	r3, [pc, #424]	; (8008024 <parsePreset+0x1818>)
 8007e7a:	4a71      	ldr	r2, [pc, #452]	; (8008040 <parsePreset+0x1834>)
 8007e7c:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZhighshelfSetQ;
 8007e7e:	4b71      	ldr	r3, [pc, #452]	; (8008044 <parsePreset+0x1838>)
 8007e80:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZhighshelfSetGain;
 8007e82:	4b71      	ldr	r3, [pc, #452]	; (8008048 <parsePreset+0x183c>)
 8007e84:	604b      	str	r3, [r1, #4]
				  break;
 8007e86:	f7ff b923 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &VZlowshelfTick;
 8007e8a:	4b66      	ldr	r3, [pc, #408]	; (8008024 <parsePreset+0x1818>)
 8007e8c:	4a6f      	ldr	r2, [pc, #444]	; (800804c <parsePreset+0x1840>)
 8007e8e:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZlowshelfSetQ;
 8007e90:	4b6f      	ldr	r3, [pc, #444]	; (8008050 <parsePreset+0x1844>)
 8007e92:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZlowshelfSetGain;
 8007e94:	4b6f      	ldr	r3, [pc, #444]	; (8008054 <parsePreset+0x1848>)
 8007e96:	604b      	str	r3, [r1, #4]
				  break;
 8007e98:	f7ff b91a 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &VZpeakTick;
 8007e9c:	4b61      	ldr	r3, [pc, #388]	; (8008024 <parsePreset+0x1818>)
 8007e9e:	4a6e      	ldr	r2, [pc, #440]	; (8008058 <parsePreset+0x184c>)
 8007ea0:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &VZpeakSetQ;
 8007ea2:	4b6e      	ldr	r3, [pc, #440]	; (800805c <parsePreset+0x1850>)
 8007ea4:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &VZpeakSetGain;
 8007ea6:	4b6e      	ldr	r3, [pc, #440]	; (8008060 <parsePreset+0x1854>)
 8007ea8:	604b      	str	r3, [r1, #4]
				  break;
 8007eaa:	f7ff b911 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &diodeLowpassTick;
 8007eae:	4b5d      	ldr	r3, [pc, #372]	; (8008024 <parsePreset+0x1818>)
 8007eb0:	4a6c      	ldr	r2, [pc, #432]	; (8008064 <parsePreset+0x1858>)
 8007eb2:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &diodeLowpassSetQ;
 8007eb4:	4b6c      	ldr	r3, [pc, #432]	; (8008068 <parsePreset+0x185c>)
 8007eb6:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &diodeLowpassSetGain;
 8007eb8:	4b6c      	ldr	r3, [pc, #432]	; (800806c <parsePreset+0x1860>)
 8007eba:	604b      	str	r3, [r1, #4]
				  break;
 8007ebc:	f7ff b908 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &bandpassTick;
 8007ec0:	4b58      	ldr	r3, [pc, #352]	; (8008024 <parsePreset+0x1818>)
 8007ec2:	4a6b      	ldr	r2, [pc, #428]	; (8008070 <parsePreset+0x1864>)
 8007ec4:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &bandpassSetQ;
 8007ec6:	4b6b      	ldr	r3, [pc, #428]	; (8008074 <parsePreset+0x1868>)
 8007ec8:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &bandpassSetGain;
 8007eca:	4b6b      	ldr	r3, [pc, #428]	; (8008078 <parsePreset+0x186c>)
 8007ecc:	604b      	str	r3, [r1, #4]
				  break;
 8007ece:	f7ff b8ff 	b.w	80070d0 <parsePreset+0x8c4>
				  filterTick[i] = &highpassTick;
 8007ed2:	4b54      	ldr	r3, [pc, #336]	; (8008024 <parsePreset+0x1818>)
 8007ed4:	4a69      	ldr	r2, [pc, #420]	; (800807c <parsePreset+0x1870>)
 8007ed6:	601a      	str	r2, [r3, #0]
				  filterSetters[i].setQ = &highpassSetQ;
 8007ed8:	4b69      	ldr	r3, [pc, #420]	; (8008080 <parsePreset+0x1874>)
 8007eda:	600b      	str	r3, [r1, #0]
				  filterSetters[i].setGain = &highpassSetGain;
 8007edc:	4b69      	ldr	r3, [pc, #420]	; (8008084 <parsePreset+0x1878>)
 8007ede:	604b      	str	r3, [r1, #4]
				  break;
 8007ee0:	f7ff b8f6 	b.w	80070d0 <parsePreset+0x8c4>
				  shapeTick[i] = &userTick;
 8007ee4:	4a68      	ldr	r2, [pc, #416]	; (8008088 <parsePreset+0x187c>)
 8007ee6:	4969      	ldr	r1, [pc, #420]	; (800808c <parsePreset+0x1880>)
 8007ee8:	6091      	str	r1, [r2, #8]
				  break;
 8007eea:	f7ff b8bd 	b.w	8007068 <parsePreset+0x85c>
				  shapeTick[i] = &triTick;
 8007eee:	4a66      	ldr	r2, [pc, #408]	; (8008088 <parsePreset+0x187c>)
 8007ef0:	4967      	ldr	r1, [pc, #412]	; (8008090 <parsePreset+0x1884>)
 8007ef2:	6091      	str	r1, [r2, #8]
				  break;
 8007ef4:	f7ff b8b8 	b.w	8007068 <parsePreset+0x85c>
				  shapeTick[i] = &sineTick;
 8007ef8:	4a63      	ldr	r2, [pc, #396]	; (8008088 <parsePreset+0x187c>)
 8007efa:	4966      	ldr	r1, [pc, #408]	; (8008094 <parsePreset+0x1888>)
 8007efc:	6091      	str	r1, [r2, #8]
				  break;
 8007efe:	f7ff b8b3 	b.w	8007068 <parsePreset+0x85c>
				  shapeTick[i] = &pulseTick;
 8007f02:	4a61      	ldr	r2, [pc, #388]	; (8008088 <parsePreset+0x187c>)
 8007f04:	4964      	ldr	r1, [pc, #400]	; (8008098 <parsePreset+0x188c>)
 8007f06:	6091      	str	r1, [r2, #8]
				  break;
 8007f08:	f7ff b8ae 	b.w	8007068 <parsePreset+0x85c>
				  shapeTick[i] = &sawTick;
 8007f0c:	4a5e      	ldr	r2, [pc, #376]	; (8008088 <parsePreset+0x187c>)
 8007f0e:	4963      	ldr	r1, [pc, #396]	; (800809c <parsePreset+0x1890>)
 8007f10:	6091      	str	r1, [r2, #8]
				  break;
 8007f12:	f7ff b8a9 	b.w	8007068 <parsePreset+0x85c>
				  shapeTick[i] = &sineTriTick;
 8007f16:	4a5c      	ldr	r2, [pc, #368]	; (8008088 <parsePreset+0x187c>)
 8007f18:	4961      	ldr	r1, [pc, #388]	; (80080a0 <parsePreset+0x1894>)
 8007f1a:	6091      	str	r1, [r2, #8]
				  break;
 8007f1c:	f7ff b8a4 	b.w	8007068 <parsePreset+0x85c>
				  shapeTick[i] = &userTick;
 8007f20:	4a59      	ldr	r2, [pc, #356]	; (8008088 <parsePreset+0x187c>)
 8007f22:	495a      	ldr	r1, [pc, #360]	; (800808c <parsePreset+0x1880>)
 8007f24:	6051      	str	r1, [r2, #4]
				  break;
 8007f26:	f7ff b878 	b.w	800701a <parsePreset+0x80e>
				  shapeTick[i] = &triTick;
 8007f2a:	4a57      	ldr	r2, [pc, #348]	; (8008088 <parsePreset+0x187c>)
 8007f2c:	4958      	ldr	r1, [pc, #352]	; (8008090 <parsePreset+0x1884>)
 8007f2e:	6051      	str	r1, [r2, #4]
				  break;
 8007f30:	f7ff b873 	b.w	800701a <parsePreset+0x80e>
				  shapeTick[i] = &sineTick;
 8007f34:	4a54      	ldr	r2, [pc, #336]	; (8008088 <parsePreset+0x187c>)
 8007f36:	4957      	ldr	r1, [pc, #348]	; (8008094 <parsePreset+0x1888>)
 8007f38:	6051      	str	r1, [r2, #4]
				  break;
 8007f3a:	f7ff b86e 	b.w	800701a <parsePreset+0x80e>
				  shapeTick[i] = &pulseTick;
 8007f3e:	4a52      	ldr	r2, [pc, #328]	; (8008088 <parsePreset+0x187c>)
 8007f40:	4955      	ldr	r1, [pc, #340]	; (8008098 <parsePreset+0x188c>)
 8007f42:	6051      	str	r1, [r2, #4]
				  break;
 8007f44:	f7ff b869 	b.w	800701a <parsePreset+0x80e>
				  shapeTick[i] = &sawTick;
 8007f48:	4a4f      	ldr	r2, [pc, #316]	; (8008088 <parsePreset+0x187c>)
 8007f4a:	4954      	ldr	r1, [pc, #336]	; (800809c <parsePreset+0x1890>)
 8007f4c:	6051      	str	r1, [r2, #4]
				  break;
 8007f4e:	f7ff b864 	b.w	800701a <parsePreset+0x80e>
				  shapeTick[i] = &sineTriTick;
 8007f52:	4a4d      	ldr	r2, [pc, #308]	; (8008088 <parsePreset+0x187c>)
 8007f54:	4952      	ldr	r1, [pc, #328]	; (80080a0 <parsePreset+0x1894>)
 8007f56:	6051      	str	r1, [r2, #4]
				  break;
 8007f58:	f7ff b85f 	b.w	800701a <parsePreset+0x80e>
				  shapeTick[i] = &userTick;
 8007f5c:	4b4a      	ldr	r3, [pc, #296]	; (8008088 <parsePreset+0x187c>)
 8007f5e:	4a4b      	ldr	r2, [pc, #300]	; (800808c <parsePreset+0x1880>)
 8007f60:	601a      	str	r2, [r3, #0]
				  break;
 8007f62:	f7ff b834 	b.w	8006fce <parsePreset+0x7c2>
				  shapeTick[i] = &triTick;
 8007f66:	4b48      	ldr	r3, [pc, #288]	; (8008088 <parsePreset+0x187c>)
 8007f68:	4a49      	ldr	r2, [pc, #292]	; (8008090 <parsePreset+0x1884>)
 8007f6a:	601a      	str	r2, [r3, #0]
				  break;
 8007f6c:	f7ff b82f 	b.w	8006fce <parsePreset+0x7c2>
				  shapeTick[i] = &sineTick;
 8007f70:	4b45      	ldr	r3, [pc, #276]	; (8008088 <parsePreset+0x187c>)
 8007f72:	4a48      	ldr	r2, [pc, #288]	; (8008094 <parsePreset+0x1888>)
 8007f74:	601a      	str	r2, [r3, #0]
				  break;
 8007f76:	f7ff b82a 	b.w	8006fce <parsePreset+0x7c2>
				  shapeTick[i] = &pulseTick;
 8007f7a:	4b43      	ldr	r3, [pc, #268]	; (8008088 <parsePreset+0x187c>)
 8007f7c:	4a46      	ldr	r2, [pc, #280]	; (8008098 <parsePreset+0x188c>)
 8007f7e:	601a      	str	r2, [r3, #0]
				  break;
 8007f80:	f7ff b825 	b.w	8006fce <parsePreset+0x7c2>
				  shapeTick[i] = &sawTick;
 8007f84:	4b40      	ldr	r3, [pc, #256]	; (8008088 <parsePreset+0x187c>)
 8007f86:	4a45      	ldr	r2, [pc, #276]	; (800809c <parsePreset+0x1890>)
 8007f88:	601a      	str	r2, [r3, #0]
				  break;
 8007f8a:	f7ff b820 	b.w	8006fce <parsePreset+0x7c2>
				  shapeTick[i] = &sineTriTick;
 8007f8e:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <parsePreset+0x187c>)
 8007f90:	4a43      	ldr	r2, [pc, #268]	; (80080a0 <parsePreset+0x1894>)
 8007f92:	601a      	str	r2, [r3, #0]
				  break;
 8007f94:	f7ff b81b 	b.w	8006fce <parsePreset+0x7c2>
			mappings[whichMapping].destNumber = destNumber;
 8007f98:	fb09 f30c 	mul.w	r3, r9, ip
 8007f9c:	4666      	mov	r6, ip
 8007f9e:	eb0e 0203 	add.w	r2, lr, r3
 8007fa2:	f80e 0003 	strb.w	r0, [lr, r3]
			mappings[whichMapping].dest = &params[destNumber];
 8007fa6:	9b02      	ldr	r3, [sp, #8]
 8007fa8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8007fac:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			numMappings++;
 8007fb0:	f10c 0301 	add.w	r3, ip, #1
			mappings[whichMapping].dest = &params[destNumber];
 8007fb4:	6050      	str	r0, [r2, #4]
			numMappings++;
 8007fb6:	fa5f fc83 	uxtb.w	ip, r3
 8007fba:	f7ff bb66 	b.w	800768a <parsePreset+0xe7e>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &defaultScaling;
 8007fbe:	fb09 f306 	mul.w	r3, r9, r6
 8007fc2:	18ca      	adds	r2, r1, r3
 8007fc4:	4937      	ldr	r1, [pc, #220]	; (80080a4 <parsePreset+0x1898>)
 8007fc6:	4472      	add	r2, lr
 8007fc8:	6291      	str	r1, [r2, #40]	; 0x28
 8007fca:	1d2a      	adds	r2, r5, #4
 8007fcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd0:	4473      	add	r3, lr
 8007fd2:	6059      	str	r1, [r3, #4]
 8007fd4:	f7ff bb9f 	b.w	8007716 <parsePreset+0xf0a>
				mappings[whichMapping].scalarSourceValPtr[whichHook][v] = &sourceValues[buffer[bufferIndex+2]][v];
 8007fd8:	2108      	movs	r1, #8
 8007fda:	2004      	movs	r0, #4
 8007fdc:	4472      	add	r2, lr
 8007fde:	fb11 0303 	smlabb	r3, r1, r3, r0
 8007fe2:	4453      	add	r3, sl
 8007fe4:	6293      	str	r3, [r2, #40]	; 0x28
				if ((scalar >= LFO_SOURCE_OFFSET) && (scalar < (LFO_SOURCE_OFFSET + NUM_LFOS)))
 8007fe6:	f7ff bb96 	b.w	8007716 <parsePreset+0xf0a>
 8007fea:	4d2f      	ldr	r5, [pc, #188]	; (80080a8 <parsePreset+0x189c>)
 8007fec:	f7fe bea0 	b.w	8006d30 <parsePreset+0x524>
	for (int i = 0; i < paramCount; i++)
 8007ff0:	f04f 0884 	mov.w	r8, #132	; 0x84
 8007ff4:	4e2d      	ldr	r6, [pc, #180]	; (80080ac <parsePreset+0x18a0>)
 8007ff6:	f7fe be89 	b.w	8006d0c <parsePreset+0x500>
 8007ffa:	bf00      	nop
 8007ffc:	20005284 	.word	0x20005284
 8008000:	08002b0d 	.word	0x08002b0d
 8008004:	20015284 	.word	0x20015284
 8008008:	08002bc1 	.word	0x08002bc1
 800800c:	08002cb1 	.word	0x08002cb1
 8008010:	08002c39 	.word	0x08002c39
 8008014:	08002b29 	.word	0x08002b29
 8008018:	08002bd5 	.word	0x08002bd5
 800801c:	08002cc5 	.word	0x08002cc5
 8008020:	08002c4d 	.word	0x08002c4d
 8008024:	2000503c 	.word	0x2000503c
 8008028:	08001fad 	.word	0x08001fad
 800802c:	0800214d 	.word	0x0800214d
 8008030:	080022ed 	.word	0x080022ed
 8008034:	08001f69 	.word	0x08001f69
 8008038:	08002139 	.word	0x08002139
 800803c:	080022bd 	.word	0x080022bd
 8008040:	08001f3d 	.word	0x08001f3d
 8008044:	08002125 	.word	0x08002125
 8008048:	08002289 	.word	0x08002289
 800804c:	08001f11 	.word	0x08001f11
 8008050:	08002111 	.word	0x08002111
 8008054:	08002255 	.word	0x08002255
 8008058:	08001ee5 	.word	0x08001ee5
 800805c:	080020fd 	.word	0x080020fd
 8008060:	08002221 	.word	0x08002221
 8008064:	08001ea1 	.word	0x08001ea1
 8008068:	080020e9 	.word	0x080020e9
 800806c:	080021f1 	.word	0x080021f1
 8008070:	08001e5d 	.word	0x08001e5d
 8008074:	080020d5 	.word	0x080020d5
 8008078:	080021c1 	.word	0x080021c1
 800807c:	08001e19 	.word	0x08001e19
 8008080:	080020c1 	.word	0x080020c1
 8008084:	08002191 	.word	0x08002191
 8008088:	20005a8c 	.word	0x20005a8c
 800808c:	08001bd5 	.word	0x08001bd5
 8008090:	08001b59 	.word	0x08001b59
 8008094:	08001b29 	.word	0x08001b29
 8008098:	08001aad 	.word	0x08001aad
 800809c:	08001a49 	.word	0x08001a49
 80080a0:	080019cd 	.word	0x080019cd
 80080a4:	20000720 	.word	0x20000720
 80080a8:	20016d3c 	.word	0x20016d3c
 80080ac:	20015c48 	.word	0x20015c48
			params[i].objectNumber = 3;
 80080b0:	f04f 0303 	mov.w	r3, #3
 80080b4:	f889 3018 	strb.w	r3, [r9, #24]
			params[i].setParam(params[i].realVal[v], params[i].objectNumber, v);
 80080b8:	ed99 0a02 	vldr	s0, [r9, #8]
 80080bc:	2100      	movs	r1, #0
 80080be:	f899 0018 	ldrb.w	r0, [r9, #24]
 80080c2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80080c6:	4798      	blx	r3
 80080c8:	ed99 0a03 	vldr	s0, [r9, #12]
 80080cc:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80080d0:	2101      	movs	r1, #1
 80080d2:	f899 0018 	ldrb.w	r0, [r9, #24]
 80080d6:	4798      	blx	r3
	for (int i = 0; i < NUM_PARAMS; i++)
 80080d8:	f7ff ba22 	b.w	8007520 <parsePreset+0xd14>
			params[i].objectNumber = 2;
 80080dc:	2302      	movs	r3, #2
 80080de:	f889 3018 	strb.w	r3, [r9, #24]
 80080e2:	e7e9      	b.n	80080b8 <parsePreset+0x18ac>
			params[i].objectNumber = 1;
 80080e4:	f889 a018 	strb.w	sl, [r9, #24]
 80080e8:	e7e6      	b.n	80080b8 <parsePreset+0x18ac>
 80080ea:	4a01      	ldr	r2, [pc, #4]	; (80080f0 <parsePreset+0x18e4>)
 80080ec:	f7ff b833 	b.w	8007156 <parsePreset+0x94a>
 80080f0:	20015284 	.word	0x20015284

080080f4 <main>:
{
 80080f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80080f8:	2400      	movs	r4, #0
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80080fa:	2501      	movs	r5, #1
{
 80080fc:	ed2d 8b02 	vpush	{d8}
 8008100:	b08d      	sub	sp, #52	; 0x34
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8008102:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8008106:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  HAL_MPU_Disable();
 800810a:	f000 fff7 	bl	80090fc <HAL_MPU_Disable>
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
  MPU_InitStruct.BaseAddress = 0x0;
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800810e:	f248 721f 	movw	r2, #34591	; 0x871f
 8008112:	f240 1301 	movw	r3, #257	; 0x101
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008116:	a807      	add	r0, sp, #28
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008118:	f8ad 501c 	strh.w	r5, [sp, #28]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800811c:	930a      	str	r3, [sp, #40]	; 0x28
 800811e:	e9cd 4208 	strd	r4, r2, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008122:	f001 f809 	bl	8009138 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x30000000;
 8008126:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 800812a:	4bb9      	ldr	r3, [pc, #740]	; (8008410 <main+0x31c>)
  MPU_InitStruct.SubRegionDisable = 0x0;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800812c:	a807      	add	r0, sp, #28
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 800812e:	f88d 501d 	strb.w	r5, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8008132:	e9cd 2308 	strd	r2, r3, [sp, #32]
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008136:	f000 ffff 	bl	8009138 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.BaseAddress = 0xc0000000;
 800813a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800813e:	2202      	movs	r2, #2
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008140:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0xc0000000;
 8008142:	9308      	str	r3, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 8008144:	230f      	movs	r3, #15
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8008146:	f88d 201d 	strb.w	r2, [sp, #29]
  MPU_InitStruct.Size = MPU_REGION_SIZE_64KB;
 800814a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800814e:	f88d 4026 	strb.w	r4, [sp, #38]	; 0x26
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8008152:	f88d 4029 	strb.w	r4, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008156:	f000 ffef 	bl	8009138 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0x60000000;
 800815a:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 800815e:	2318      	movs	r3, #24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8008160:	2103      	movs	r1, #3
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008162:	a807      	add	r0, sp, #28
  MPU_InitStruct.BaseAddress = 0x60000000;
 8008164:	9208      	str	r2, [sp, #32]
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8008166:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 800816a:	f88d 101d 	strb.w	r1, [sp, #29]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800816e:	f88d 5029 	strb.w	r5, [sp, #41]	; 0x29
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8008172:	f000 ffe1 	bl	8009138 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008176:	2004      	movs	r0, #4
 8008178:	f000 ffce 	bl	8009118 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800817c:	4ba5      	ldr	r3, [pc, #660]	; (8008414 <main+0x320>)
 800817e:	695a      	ldr	r2, [r3, #20]
 8008180:	f412 3200 	ands.w	r2, r2, #131072	; 0x20000
 8008184:	d111      	bne.n	80081aa <main+0xb6>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008186:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800818a:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800818e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8008192:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8008196:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800819a:	695a      	ldr	r2, [r3, #20]
 800819c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80081a0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80081a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80081a6:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80081aa:	489a      	ldr	r0, [pc, #616]	; (8008414 <main+0x320>)
 80081ac:	6943      	ldr	r3, [r0, #20]
 80081ae:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
 80081b2:	d124      	bne.n	80081fe <main+0x10a>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80081b4:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80081b8:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 80081bc:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80081c0:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80081c4:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80081c8:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 80081cc:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80081ce:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80081d2:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80081d4:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80081d8:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80081da:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	d1f8      	bne.n	80081d4 <main+0xe0>
    } while(sets-- != 0U);
 80081e2:	3c20      	subs	r4, #32
 80081e4:	f114 0f20 	cmn.w	r4, #32
 80081e8:	d1f1      	bne.n	80081ce <main+0xda>
 80081ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80081ee:	6943      	ldr	r3, [r0, #20]
 80081f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081f4:	6143      	str	r3, [r0, #20]
 80081f6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80081fa:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80081fe:	f000 fea5 	bl	8008f4c <HAL_Init>
  __ASM volatile ("cpsie i" : : : "memory");
 8008202:	b662      	cpsie	i
  SystemClock_Config();
 8008204:	f7fd fd4c 	bl	8005ca0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8008208:	f7fd fde2 	bl	8005dd0 <PeriphCommonClock_Config>
  HAL_Delay(500);
 800820c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008210:	f000 fede 	bl	8008fd0 <HAL_Delay>
  MX_GPIO_Init();
 8008214:	f7fd f9b8 	bl	8005588 <MX_GPIO_Init>
  MX_DMA_Init();
 8008218:	f7fd f8b0 	bl	800537c <MX_DMA_Init>
  MX_FMC_Init();
 800821c:	f7fd f8f4 	bl	8005408 <MX_FMC_Init>
  MX_SDMMC1_SD_Init();
 8008220:	f000 fb00 	bl	8008824 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8008224:	f009 f878 	bl	8011318 <MX_FATFS_Init>
  MX_SAI1_Init();
 8008228:	f000 fa02 	bl	8008630 <MX_SAI1_Init>
  MX_RNG_Init();
 800822c:	f000 f9c0 	bl	80085b0 <MX_RNG_Init>
  MX_SPI2_Init();
 8008230:	f000 fb9a 	bl	8008968 <MX_SPI2_Init>
  MX_I2C2_Init();
 8008234:	f7fd fab6 	bl	80057a4 <MX_I2C2_Init>
  MX_SPI1_Init();
 8008238:	f000 fb6a 	bl	8008910 <MX_SPI1_Init>
  MX_SPI5_Init();
 800823c:	f000 fbc0 	bl	80089c0 <MX_SPI5_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8008240:	2200      	movs	r2, #0
 8008242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8008246:	4874      	ldr	r0, [pc, #464]	; (8008418 <main+0x324>)
 8008248:	f002 fc9a 	bl	800ab80 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 800824c:	2200      	movs	r2, #0
 800824e:	2102      	movs	r1, #2
 8008250:	4872      	ldr	r0, [pc, #456]	; (800841c <main+0x328>)
 8008252:	f002 fc95 	bl	800ab80 <HAL_GPIO_WritePin>
  return __builtin_arm_get_fpscr();
 8008256:	eef1 3a10 	vmrs	r3, fpscr
  tempFPURegisterVal |= (1<<24); // set the FTZ (flush-to-zero) bit in the FPU control register  // this makes checking for denormals not necessary as they are automatically set to zero by the hardware
 800825a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  __builtin_arm_set_fpscr(fpscr);
 800825e:	eee1 3a10 	vmsr	fpscr, r3
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008262:	496c      	ldr	r1, [pc, #432]	; (8008414 <main+0x320>)
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8008264:	4a6e      	ldr	r2, [pc, #440]	; (8008420 <main+0x32c>)
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8008266:	f8d1 30fc 	ldr.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 800826a:	f8d2 0fb4 	ldr.w	r0, [r2, #4020]	; 0xfb4
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 800826e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008272:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc
  if ((*(uint32_t*)0xE0001FB4) & 1)
 8008276:	07c3      	lsls	r3, r0, #31
 8008278:	d502      	bpl.n	8008280 <main+0x18c>
    *(uint32_t*)0xE0001FB0 = 0xC5ACCE55;
 800827a:	4b6a      	ldr	r3, [pc, #424]	; (8008424 <main+0x330>)
 800827c:	f8c2 3fb0 	str.w	r3, [r2, #4016]	; 0xfb0
	  buffer[i] = 0;
 8008280:	4b69      	ldr	r3, [pc, #420]	; (8008428 <main+0x334>)
  DWT->CYCCNT = 0;
 8008282:	2100      	movs	r1, #0
 8008284:	4a66      	ldr	r2, [pc, #408]	; (8008420 <main+0x32c>)
  DWT->CTRL = 0x40000001;
 8008286:	4869      	ldr	r0, [pc, #420]	; (800842c <main+0x338>)
  DWT->CYCCNT = 0;
 8008288:	6051      	str	r1, [r2, #4]
  DWT->CTRL = 0x40000001;
 800828a:	6010      	str	r0, [r2, #0]
	  buffer[i] = 0;
 800828c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008290:	4618      	mov	r0, r3
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 8008292:	f8df a200 	ldr.w	sl, [pc, #512]	; 8008494 <main+0x3a0>
	  buffer[i] = 0;
 8008296:	f015 f91d 	bl	801d4d4 <memset>
  buffer[15] = NUM_PARAMS;
 800829a:	229b      	movs	r2, #155	; 0x9b
	  buffer[i] = 0;
 800829c:	4603      	mov	r3, r0
  buffer[NUM_PARAMS*2+19] = 1;
 800829e:	2101      	movs	r1, #1
  buffer[NUM_PARAMS*2+16] = 0xef;
 80082a0:	f64e 70ef 	movw	r0, #61423	; 0xefef
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80082a4:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
  buffer[15] = NUM_PARAMS;
 80082a8:	73da      	strb	r2, [r3, #15]
  buffer[NUM_PARAMS*2+25] = 0xfe;
 80082aa:	f64f 62fe 	movw	r2, #65278	; 0xfefe
  buffer[NUM_PARAMS*2+16] = 0xef;
 80082ae:	f8a3 0146 	strh.w	r0, [r3, #326]	; 0x146
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80082b2:	eef2 0a04 	vmov.f32	s1, #36	; 0x41200000  10.0
  buffer[NUM_PARAMS*2+19] = 1;
 80082b6:	f883 1149 	strb.w	r1, [r3, #329]	; 0x149
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80082ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
  buffer[NUM_PARAMS*2+25] = 0xfe;
 80082be:	f8a3 214f 	strh.w	r2, [r3, #335]	; 0x14f
  LEAF_generate_table_skew_non_sym(resTable, 0.01f, 10.0f, 0.5f, SCALE_TABLE_SIZE);
 80082c2:	ed9f 0a5b 	vldr	s0, [pc, #364]	; 8008430 <main+0x33c>
 80082c6:	485b      	ldr	r0, [pc, #364]	; (8008434 <main+0x340>)
 80082c8:	f00f f822 	bl	8017310 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(envTimeTable, 0.0f, 20000.0f, 4000.0f, SCALE_TABLE_SIZE);
 80082cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082d0:	ed9f 1a59 	vldr	s2, [pc, #356]	; 8008438 <main+0x344>
 80082d4:	eddf 0a59 	vldr	s1, [pc, #356]	; 800843c <main+0x348>
 80082d8:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8008440 <main+0x34c>
 80082dc:	4859      	ldr	r0, [pc, #356]	; (8008444 <main+0x350>)
 80082de:	f00f f817 	bl	8017310 <LEAF_generate_table_skew_non_sym>
  LEAF_generate_table_skew_non_sym(lfoRateTable, 0.0f, 30.0f, 2.0f, SCALE_TABLE_SIZE);
 80082e2:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80082e6:	eef3 0a0e 	vmov.f32	s1, #62	; 0x41f00000  30.0
 80082ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80082ee:	ed9f 0a54 	vldr	s0, [pc, #336]	; 8008440 <main+0x34c>
 80082f2:	4855      	ldr	r0, [pc, #340]	; (8008448 <main+0x354>)
 80082f4:	f00f f80c 	bl	8017310 <LEAF_generate_table_skew_non_sym>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80082f8:	4c54      	ldr	r4, [pc, #336]	; (800844c <main+0x358>)
  getPresetNamesFromSDCard();
 80082fa:	f7fd fdbb 	bl	8005e74 <getPresetNamesFromSDCard>
  foundOne  = checkForSDCardPreset(presetNumberToLoad);
 80082fe:	f89a 0000 	ldrb.w	r0, [sl]
 8008302:	f7fd fb27 	bl	8005954 <checkForSDCardPreset>
 8008306:	b2c3      	uxtb	r3, r0
 8008308:	7023      	strb	r3, [r4, #0]
	  if (foundOne)
 800830a:	7823      	ldrb	r3, [r4, #0]
 800830c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 8132 	beq.w	800857a <main+0x486>
  SDRAM_init();
 8008316:	f7fe f81b 	bl	8006350 <SDRAM_init>
  audioInit(&hi2c2, &hsai_BlockA1, &hsai_BlockB1);
 800831a:	494d      	ldr	r1, [pc, #308]	; (8008450 <main+0x35c>)
 800831c:	4a4d      	ldr	r2, [pc, #308]	; (8008454 <main+0x360>)
 800831e:	484e      	ldr	r0, [pc, #312]	; (8008458 <main+0x364>)
 8008320:	f7f8 f99e 	bl	8000660 <audioInit>
	AudioCodec_init(&hi2c2);
 8008324:	484c      	ldr	r0, [pc, #304]	; (8008458 <main+0x364>)
 8008326:	f7fc ff9f 	bl	8005268 <AudioCodec_init>
  	if (foundOne == 0)
 800832a:	7823      	ldrb	r3, [r4, #0]
 800832c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 8008330:	2b00      	cmp	r3, #0
 8008332:	f040 811b 	bne.w	800856c <main+0x478>
	  parsePreset((NUM_PARAMS*2)+27+(8*14), 0); //default preset binary
 8008336:	f240 10c1 	movw	r0, #449	; 0x1c1
 800833a:	4d48      	ldr	r5, [pc, #288]	; (800845c <main+0x368>)
 800833c:	f7fe fa66 	bl	800680c <parsePreset>
    HAL_SPI_Receive_DMA(&hspi2, SPI_RX, BAR_BUFFER_SIZE_TIMES_TWO);
 8008340:	2210      	movs	r2, #16
 8008342:	4947      	ldr	r1, [pc, #284]	; (8008460 <main+0x36c>)
 8008344:	4847      	ldr	r0, [pc, #284]	; (8008464 <main+0x370>)
 8008346:	f007 f969 	bl	800f61c <HAL_SPI_Receive_DMA>
    HAL_SPI_Receive_DMA(&hspi5, SPI_PLUCK_RX, PLUCK_BUFFER_SIZE_TIMES_TWO);
 800834a:	2234      	movs	r2, #52	; 0x34
 800834c:	4946      	ldr	r1, [pc, #280]	; (8008468 <main+0x374>)
 800834e:	4847      	ldr	r0, [pc, #284]	; (800846c <main+0x378>)
 8008350:	f007 f964 	bl	800f61c <HAL_SPI_Receive_DMA>
    if (boardNumber != 0)
 8008354:	4b46      	ldr	r3, [pc, #280]	; (8008470 <main+0x37c>)
 8008356:	781b      	ldrb	r3, [r3, #0]
 8008358:	2b00      	cmp	r3, #0
 800835a:	f000 8100 	beq.w	800855e <main+0x46a>
    	HAL_SPI_Receive_DMA(&hspi1, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 800835e:	4945      	ldr	r1, [pc, #276]	; (8008474 <main+0x380>)
 8008360:	2240      	movs	r2, #64	; 0x40
 8008362:	4845      	ldr	r0, [pc, #276]	; (8008478 <main+0x384>)
 8008364:	f007 f95a 	bl	800f61c <HAL_SPI_Receive_DMA>
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008368:	2300      	movs	r3, #0
  	  	  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800836a:	2240      	movs	r2, #64	; 0x40
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800836c:	a907      	add	r1, sp, #28
 800836e:	482b      	ldr	r0, [pc, #172]	; (800841c <main+0x328>)
    	  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008370:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8008374:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
  	  	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008378:	2301      	movs	r3, #1
 800837a:	9309      	str	r3, [sp, #36]	; 0x24
  	  	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800837c:	f002 fab0 	bl	800a8e0 <HAL_GPIO_Init>
 8008380:	4f3e      	ldr	r7, [pc, #248]	; (800847c <main+0x388>)
 8008382:	f8df 9114 	ldr.w	r9, [pc, #276]	; 8008498 <main+0x3a4>
	  if (rand > TWO_TO_31)
 8008386:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8008480 <main+0x38c>
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 800838a:	ed9f 8a3e 	vldr	s16, [pc, #248]	; 8008484 <main+0x390>
 800838e:	f8df 810c 	ldr.w	r8, [pc, #268]	; 800849c <main+0x3a8>
 8008392:	4c3d      	ldr	r4, [pc, #244]	; (8008488 <main+0x394>)
 8008394:	4e3d      	ldr	r6, [pc, #244]	; (800848c <main+0x398>)
 8008396:	e02b      	b.n	80083f0 <main+0x2fc>
	  if (presetWaitingToParse > 0)
 8008398:	6829      	ldr	r1, [r5, #0]
 800839a:	bb99      	cbnz	r1, 8008404 <main+0x310>
	  else if (presetWaitingToWrite > 0)
 800839c:	f8d9 b000 	ldr.w	fp, [r9]
 80083a0:	f1bb 0f00 	cmp.w	fp, #0
 80083a4:	d17c      	bne.n	80084a0 <main+0x3ac>
	  HAL_RNG_GenerateRandomNumber(&hrng, &rand);
 80083a6:	a907      	add	r1, sp, #28
 80083a8:	4839      	ldr	r0, [pc, #228]	; (8008490 <main+0x39c>)
 80083aa:	f005 fbbb 	bl	800db24 <HAL_RNG_GenerateRandomNumber>
	  if (rand > TWO_TO_31)
 80083ae:	eddd 7a07 	vldr	s15, [sp, #28]
 80083b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083b6:	eef4 7ae8 	vcmpe.f32	s15, s17
 80083ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083be:	dd0c      	ble.n	80083da <main+0x2e6>
		  myTestInt++;
 80083c0:	f8d8 3000 	ldr.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80083c4:	2180      	movs	r1, #128	; 0x80
 80083c6:	4814      	ldr	r0, [pc, #80]	; (8008418 <main+0x324>)
		  myTestInt++;
 80083c8:	3301      	adds	r3, #1
 80083ca:	f8c8 3000 	str.w	r3, [r8]
		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_7);
 80083ce:	f002 fbdb 	bl	800ab88 <HAL_GPIO_TogglePin>
	  float floatrand = (float)rand * INV_TWO_TO_32 ;
 80083d2:	eddd 7a07 	vldr	s15, [sp, #28]
 80083d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
	  random_values[currentRandom++] = (floatrand * 2.0f) - 1.0f;
 80083da:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80083de:	7823      	ldrb	r3, [r4, #0]
 80083e0:	1c5a      	adds	r2, r3, #1
 80083e2:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80083e6:	eea7 7a88 	vfma.f32	s14, s15, s16
 80083ea:	7022      	strb	r2, [r4, #0]
 80083ec:	ed83 7a00 	vstr	s14, [r3]
	  if (presetWaitingToLoad > 0)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d0d0      	beq.n	8008398 <main+0x2a4>
		  checkForSDCardPreset(presetNumberToLoad);
 80083f6:	f89a 0000 	ldrb.w	r0, [sl]
 80083fa:	f7fd faab 	bl	8005954 <checkForSDCardPreset>
	  if (presetWaitingToParse > 0)
 80083fe:	6829      	ldr	r1, [r5, #0]
 8008400:	2900      	cmp	r1, #0
 8008402:	d0cb      	beq.n	800839c <main+0x2a8>
		  parsePreset(presetWaitingToParse, presetNumberToLoad);
 8008404:	4608      	mov	r0, r1
 8008406:	f89a 1000 	ldrb.w	r1, [sl]
 800840a:	f7fe f9ff 	bl	800680c <parsePreset>
 800840e:	e7ca      	b.n	80083a6 <main+0x2b2>
 8008410:	03010011 	.word	0x03010011
 8008414:	e000ed00 	.word	0xe000ed00
 8008418:	58020800 	.word	0x58020800
 800841c:	58020000 	.word	0x58020000
 8008420:	e0001000 	.word	0xe0001000
 8008424:	c5acce55 	.word	0xc5acce55
 8008428:	300001e0 	.word	0x300001e0
 800842c:	40000001 	.word	0x40000001
 8008430:	3c23d70a 	.word	0x3c23d70a
 8008434:	20017158 	.word	0x20017158
 8008438:	457a0000 	.word	0x457a0000
 800843c:	469c4000 	.word	0x469c4000
 8008440:	00000000 	.word	0x00000000
 8008444:	20013158 	.word	0x20013158
 8008448:	2407b3c0 	.word	0x2407b3c0
 800844c:	20015280 	.word	0x20015280
 8008450:	20019264 	.word	0x20019264
 8008454:	200192fc 	.word	0x200192fc
 8008458:	20013070 	.word	0x20013070
 800845c:	20016d50 	.word	0x20016d50
 8008460:	30000180 	.word	0x30000180
 8008464:	20019678 	.word	0x20019678
 8008468:	300001a0 	.word	0x300001a0
 800846c:	20019700 	.word	0x20019700
 8008470:	200130c4 	.word	0x200130c4
 8008474:	30000100 	.word	0x30000100
 8008478:	200195f0 	.word	0x200195f0
 800847c:	20016d4c 	.word	0x20016d4c
 8008480:	4f000000 	.word	0x4f000000
 8008484:	3000000d 	.word	0x3000000d
 8008488:	200130c9 	.word	0x200130c9
 800848c:	20016d58 	.word	0x20016d58
 8008490:	2001915c 	.word	0x2001915c
 8008494:	20000724 	.word	0x20000724
 8008498:	20016d54 	.word	0x20016d54
 800849c:	20015c40 	.word	0x20015c40
  __ASM volatile ("cpsid i" : : : "memory");
 80084a0:	b672      	cpsid	i
		 audioOutBuffer[i] = 0;
 80084a2:	2280      	movs	r2, #128	; 0x80
 80084a4:	4837      	ldr	r0, [pc, #220]	; (8008584 <main+0x490>)
 80084a6:	9101      	str	r1, [sp, #4]
 80084a8:	f015 f814 	bl	801d4d4 <memset>
  __IO uint8_t status = SD_PRESENT;
 80084ac:	2301      	movs	r3, #1
 80084ae:	f88d 300b 	strb.w	r3, [sp, #11]
  if (BSP_PlatformIsDetected() != 0x0)
 80084b2:	f008 ff99 	bl	80113e8 <BSP_PlatformIsDetected>
 80084b6:	b110      	cbz	r0, 80084be <main+0x3ca>
    status = SD_NOT_PRESENT;
 80084b8:	9901      	ldr	r1, [sp, #4]
 80084ba:	f88d 100b 	strb.w	r1, [sp, #11]
  return status;
 80084be:	f89d 300b 	ldrb.w	r3, [sp, #11]
	if(BSP_SD_IsDetected())
 80084c2:	b323      	cbz	r3, 800850e <main+0x41a>
				diskBusy = 1;
 80084c4:	2301      	movs	r3, #1
 80084c6:	4a30      	ldr	r2, [pc, #192]	; (8008588 <main+0x494>)
 80084c8:	7013      	strb	r3, [r2, #0]
			    if (presetNumberToSave > 99)
 80084ca:	4b30      	ldr	r3, [pc, #192]	; (800858c <main+0x498>)
 80084cc:	7818      	ldrb	r0, [r3, #0]
 80084ce:	2863      	cmp	r0, #99	; 0x63
 80084d0:	d901      	bls.n	80084d6 <main+0x3e2>
			        presetNumberToSave = 99;
 80084d2:	2063      	movs	r0, #99	; 0x63
 80084d4:	7018      	strb	r0, [r3, #0]
				itoa(presetNumberToSave, charBuf, 10);
 80084d6:	220a      	movs	r2, #10
 80084d8:	a904      	add	r1, sp, #16
 80084da:	f014 ffeb 	bl	801d4b4 <itoa>
				int len = ((strlen(charBuf)));
 80084de:	a804      	add	r0, sp, #16
 80084e0:	f7f7 fefa 	bl	80002d8 <strlen>
				if (len == 1)
 80084e4:	2801      	cmp	r0, #1
				int len = ((strlen(charBuf)));
 80084e6:	4602      	mov	r2, r0
				if (len == 1)
 80084e8:	d018      	beq.n	800851c <main+0x428>
					strcat(charBuf, ".ebp");
 80084ea:	4929      	ldr	r1, [pc, #164]	; (8008590 <main+0x49c>)
 80084ec:	ab04      	add	r3, sp, #16
 80084ee:	6808      	ldr	r0, [r1, #0]
 80084f0:	7909      	ldrb	r1, [r1, #4]
 80084f2:	5098      	str	r0, [r3, r2]
 80084f4:	4413      	add	r3, r2
					strcpy(finalString, charBuf);
 80084f6:	a807      	add	r0, sp, #28
 80084f8:	3205      	adds	r2, #5
					strcat(charBuf, ".ebp");
 80084fa:	7119      	strb	r1, [r3, #4]
					strcpy(finalString, charBuf);
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	f014 ffdb 	bl	801d4b8 <memcpy>
				if(f_open(&SDFile, finalString, FA_CREATE_ALWAYS | FA_WRITE) == FR_OK)
 8008502:	220a      	movs	r2, #10
 8008504:	a907      	add	r1, sp, #28
 8008506:	4823      	ldr	r0, [pc, #140]	; (8008594 <main+0x4a0>)
 8008508:	f00b faee 	bl	8013ae8 <f_open>
 800850c:	b1e8      	cbz	r0, 800854a <main+0x456>
	presetWaitingToWrite = 0;
 800850e:	2300      	movs	r3, #0
	diskBusy = 0;
 8008510:	4a1d      	ldr	r2, [pc, #116]	; (8008588 <main+0x494>)
	presetWaitingToWrite = 0;
 8008512:	f8c9 3000 	str.w	r3, [r9]
	diskBusy = 0;
 8008516:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8008518:	b662      	cpsie	i
}
 800851a:	e744      	b.n	80083a6 <main+0x2b2>
					finalString[2] = charBuf[1];
 800851c:	f89d 3011 	ldrb.w	r3, [sp, #17]
					strcat(finalString, ".ebp");
 8008520:	a807      	add	r0, sp, #28
					finalString[2] = charBuf[1];
 8008522:	f88d 301e 	strb.w	r3, [sp, #30]
					finalString[1] = charBuf[0];
 8008526:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800852a:	f88d 301d 	strb.w	r3, [sp, #29]
					finalString[0] = '0';
 800852e:	2330      	movs	r3, #48	; 0x30
 8008530:	f88d 301c 	strb.w	r3, [sp, #28]
					strcat(finalString, ".ebp");
 8008534:	f7f7 fed0 	bl	80002d8 <strlen>
 8008538:	4a15      	ldr	r2, [pc, #84]	; (8008590 <main+0x49c>)
 800853a:	4603      	mov	r3, r0
 800853c:	a907      	add	r1, sp, #28
 800853e:	6810      	ldr	r0, [r2, #0]
 8008540:	7912      	ldrb	r2, [r2, #4]
 8008542:	50c8      	str	r0, [r1, r3]
 8008544:	440b      	add	r3, r1
 8008546:	711a      	strb	r2, [r3, #4]
 8008548:	e7db      	b.n	8008502 <main+0x40e>
					f_write(&SDFile, &buffer, fileSize, &bytesRead);
 800854a:	465a      	mov	r2, fp
 800854c:	ab03      	add	r3, sp, #12
 800854e:	4912      	ldr	r1, [pc, #72]	; (8008598 <main+0x4a4>)
 8008550:	4810      	ldr	r0, [pc, #64]	; (8008594 <main+0x4a0>)
 8008552:	f00b fd81 	bl	8014058 <f_write>
					f_close(&SDFile);
 8008556:	480f      	ldr	r0, [pc, #60]	; (8008594 <main+0x4a0>)
 8008558:	f00b fed8 	bl	801430c <f_close>
 800855c:	e7d7      	b.n	800850e <main+0x41a>
    	HAL_SPI_TransmitReceive_DMA(&hspi1, SPI_LEVERS_TX, SPI_LEVERS, LEVER_BUFFER_SIZE_TIMES_TWO);
 800855e:	4a0f      	ldr	r2, [pc, #60]	; (800859c <main+0x4a8>)
 8008560:	2340      	movs	r3, #64	; 0x40
 8008562:	480f      	ldr	r0, [pc, #60]	; (80085a0 <main+0x4ac>)
 8008564:	18d1      	adds	r1, r2, r3
 8008566:	f007 f939 	bl	800f7dc <HAL_SPI_TransmitReceive_DMA>
 800856a:	e709      	b.n	8008380 <main+0x28c>
	  parsePreset(presetWaitingToParse, presetNumberToLoad);
 800856c:	4d0d      	ldr	r5, [pc, #52]	; (80085a4 <main+0x4b0>)
 800856e:	f89a 1000 	ldrb.w	r1, [sl]
 8008572:	6828      	ldr	r0, [r5, #0]
 8008574:	f7fe f94a 	bl	800680c <parsePreset>
 8008578:	e6e2      	b.n	8008340 <main+0x24c>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 800857a:	2110      	movs	r1, #16
 800857c:	480a      	ldr	r0, [pc, #40]	; (80085a8 <main+0x4b4>)
 800857e:	f002 faff 	bl	800ab80 <HAL_GPIO_WritePin>
 8008582:	e6c8      	b.n	8008316 <main+0x222>
 8008584:	30000000 	.word	0x30000000
 8008588:	20013104 	.word	0x20013104
 800858c:	20016d4a 	.word	0x20016d4a
 8008590:	0801fa6c 	.word	0x0801fa6c
 8008594:	200199c0 	.word	0x200199c0
 8008598:	300001e0 	.word	0x300001e0
 800859c:	30000100 	.word	0x30000100
 80085a0:	200195f0 	.word	0x200195f0
 80085a4:	20016d50 	.word	0x20016d50
 80085a8:	58020400 	.word	0x58020400

080085ac <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop

080085b0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80085b0:	b508      	push	{r3, lr}
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80085b2:	4806      	ldr	r0, [pc, #24]	; (80085cc <MX_RNG_Init+0x1c>)
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80085b4:	2300      	movs	r3, #0
 80085b6:	4a06      	ldr	r2, [pc, #24]	; (80085d0 <MX_RNG_Init+0x20>)
 80085b8:	e9c0 2300 	strd	r2, r3, [r0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80085bc:	f005 fa70 	bl	800daa0 <HAL_RNG_Init>
 80085c0:	b900      	cbnz	r0, 80085c4 <MX_RNG_Init+0x14>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80085c2:	bd08      	pop	{r3, pc}
 80085c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80085c8:	f7ff bff0 	b.w	80085ac <Error_Handler>
 80085cc:	2001915c 	.word	0x2001915c
 80085d0:	48021800 	.word	0x48021800

080085d4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80085d4:	b510      	push	{r4, lr}
 80085d6:	b0b2      	sub	sp, #200	; 0xc8
 80085d8:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80085da:	22c0      	movs	r2, #192	; 0xc0
 80085dc:	2100      	movs	r1, #0
 80085de:	a802      	add	r0, sp, #8
 80085e0:	f014 ff78 	bl	801d4d4 <memset>
  if(rngHandle->Instance==RNG)
 80085e4:	4b10      	ldr	r3, [pc, #64]	; (8008628 <HAL_RNG_MspInit+0x54>)
 80085e6:	6822      	ldr	r2, [r4, #0]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d001      	beq.n	80085f0 <HAL_RNG_MspInit+0x1c>
    __HAL_RCC_RNG_CLK_ENABLE();
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80085ec:	b032      	add	sp, #200	; 0xc8
 80085ee:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80085f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80085f4:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085f6:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 80085f8:	e9cd 2302 	strd	r2, r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80085fc:	f004 f86a 	bl	800c6d4 <HAL_RCCEx_PeriphCLKConfig>
 8008600:	b970      	cbnz	r0, 8008620 <HAL_RNG_MspInit+0x4c>
    __HAL_RCC_RNG_CLK_ENABLE();
 8008602:	4b0a      	ldr	r3, [pc, #40]	; (800862c <HAL_RNG_MspInit+0x58>)
 8008604:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8008608:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800860c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8008610:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	9b01      	ldr	r3, [sp, #4]
}
 800861c:	b032      	add	sp, #200	; 0xc8
 800861e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8008620:	f7ff ffc4 	bl	80085ac <Error_Handler>
 8008624:	e7ed      	b.n	8008602 <HAL_RNG_MspInit+0x2e>
 8008626:	bf00      	nop
 8008628:	48021800 	.word	0x48021800
 800862c:	58024400 	.word	0x58024400

08008630 <MX_SAI1_Init>:
DMA_HandleTypeDef hdma_sai1_a;
DMA_HandleTypeDef hdma_sai1_b;

/* SAI1 init function */
void MX_SAI1_Init(void)
{
 8008630:	b510      	push	{r4, lr}

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */

  hsai_BlockA1.Instance = SAI1_Block_A;
 8008632:	4818      	ldr	r0, [pc, #96]	; (8008694 <MX_SAI1_Init+0x64>)
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8008634:	2100      	movs	r1, #0
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008636:	4c18      	ldr	r4, [pc, #96]	; (8008698 <MX_SAI1_Init+0x68>)
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8008638:	2201      	movs	r2, #1
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800863a:	2302      	movs	r3, #2
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800863c:	6081      	str	r1, [r0, #8]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800863e:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008640:	461a      	mov	r2, r3
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008642:	60c1      	str	r1, [r0, #12]
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008644:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockA1.Instance = SAI1_Block_A;
 8008646:	e9c0 4100 	strd	r4, r1, [r0]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 800864a:	f64b 3480 	movw	r4, #48000	; 0xbb80
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 800864e:	e9c0 1105 	strd	r1, r1, [r0, #20]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8008652:	6204      	str	r4, [r0, #32]
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8008654:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockA1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008658:	f005 fc74 	bl	800df44 <HAL_SAI_InitProtocol>
 800865c:	b998      	cbnz	r0, 8008686 <MX_SAI1_Init+0x56>
  {
    Error_Handler();
  }

  hsai_BlockB1.Instance = SAI1_Block_B;
 800865e:	480f      	ldr	r0, [pc, #60]	; (800869c <MX_SAI1_Init+0x6c>)
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008660:	2201      	movs	r2, #1
  hsai_BlockB1.Instance = SAI1_Block_B;
 8008662:	4c0f      	ldr	r4, [pc, #60]	; (80086a0 <MX_SAI1_Init+0x70>)
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008664:	2302      	movs	r3, #2
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008666:	2100      	movs	r1, #0
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 8008668:	6082      	str	r2, [r0, #8]
  hsai_BlockB1.Instance = SAI1_Block_B;
 800866a:	6004      	str	r4, [r0, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 800866c:	2403      	movs	r4, #3
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 800866e:	61c2      	str	r2, [r0, #28]
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8008670:	461a      	mov	r2, r3
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8008672:	6141      	str	r1, [r0, #20]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8008674:	60c1      	str	r1, [r0, #12]
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 8008676:	6044      	str	r4, [r0, #4]
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8008678:	6341      	str	r1, [r0, #52]	; 0x34
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800867a:	e9c0 110b 	strd	r1, r1, [r0, #44]	; 0x2c
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 800867e:	f005 fc61 	bl	800df44 <HAL_SAI_InitProtocol>
 8008682:	b918      	cbnz	r0, 800868c <MX_SAI1_Init+0x5c>

  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8008684:	bd10      	pop	{r4, pc}
    Error_Handler();
 8008686:	f7ff ff91 	bl	80085ac <Error_Handler>
 800868a:	e7e8      	b.n	800865e <MX_SAI1_Init+0x2e>
}
 800868c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8008690:	f7ff bf8c 	b.w	80085ac <Error_Handler>
 8008694:	20019264 	.word	0x20019264
 8008698:	40015804 	.word	0x40015804
 800869c:	200192fc 	.word	0x200192fc
 80086a0:	40015824 	.word	0x40015824
 80086a4:	00000000 	.word	0x00000000

080086a8 <HAL_SAI_MspInit>:
static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* saiHandle)
{
 80086a8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(saiHandle->Instance==SAI1_Block_A)
 80086aa:	4a55      	ldr	r2, [pc, #340]	; (8008800 <HAL_SAI_MspInit+0x158>)
{
 80086ac:	b089      	sub	sp, #36	; 0x24
    if(saiHandle->Instance==SAI1_Block_A)
 80086ae:	6803      	ldr	r3, [r0, #0]
{
 80086b0:	4604      	mov	r4, r0
    if(saiHandle->Instance==SAI1_Block_A)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <HAL_SAI_MspInit+0x18>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
    }
    if(saiHandle->Instance==SAI1_Block_B)
 80086b6:	4a53      	ldr	r2, [pc, #332]	; (8008804 <HAL_SAI_MspInit+0x15c>)
 80086b8:	4293      	cmp	r3, r2
 80086ba:	d03f      	beq.n	800873c <HAL_SAI_MspInit+0x94>
    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
    }
}
 80086bc:	b009      	add	sp, #36	; 0x24
 80086be:	bd30      	pop	{r4, r5, pc}
    if (SAI1_client == 0)
 80086c0:	4b51      	ldr	r3, [pc, #324]	; (8008808 <HAL_SAI_MspInit+0x160>)
 80086c2:	681a      	ldr	r2, [r3, #0]
 80086c4:	2a00      	cmp	r2, #0
 80086c6:	f000 8081 	beq.w	80087cc <HAL_SAI_MspInit+0x124>
    SAI1_client ++;
 80086ca:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80086cc:	2074      	movs	r0, #116	; 0x74
 80086ce:	2102      	movs	r1, #2
    hdma_sai1_a.Instance = DMA1_Stream1;
 80086d0:	4d4e      	ldr	r5, [pc, #312]	; (800880c <HAL_SAI_MspInit+0x164>)
    SAI1_client ++;
 80086d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80086d4:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80086d6:	ed9f 7b48 	vldr	d7, [pc, #288]	; 80087f8 <HAL_SAI_MspInit+0x150>
 80086da:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80086de:	a902      	add	r1, sp, #8
 80086e0:	484b      	ldr	r0, [pc, #300]	; (8008810 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 80086e2:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80086e4:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80086e8:	f002 f8fa 	bl	800a8e0 <HAL_GPIO_Init>
    hdma_sai1_a.Instance = DMA1_Stream1;
 80086ec:	4949      	ldr	r1, [pc, #292]	; (8008814 <HAL_SAI_MspInit+0x16c>)
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80086ee:	2257      	movs	r2, #87	; 0x57
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80086f0:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 80086f2:	4628      	mov	r0, r5
    hdma_sai1_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80086f4:	60eb      	str	r3, [r5, #12]
    hdma_sai1_a.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80086f6:	62ab      	str	r3, [r5, #40]	; 0x28
    hdma_sai1_a.Init.Request = DMA_REQUEST_SAI1_A;
 80086f8:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 80086fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008700:	2140      	movs	r1, #64	; 0x40
    hdma_sai1_a.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008702:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
    hdma_sai1_a.Init.MemInc = DMA_MINC_ENABLE;
 8008706:	612a      	str	r2, [r5, #16]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008708:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800870c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
    hdma_sai1_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008710:	60a9      	str	r1, [r5, #8]
    hdma_sai1_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008712:	e9c5 2305 	strd	r2, r3, [r5, #20]
    hdma_sai1_a.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008716:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800871a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800871e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    hdma_sai1_a.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008722:	2304      	movs	r3, #4
 8008724:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_a) != HAL_OK)
 8008726:	f000 fe1d 	bl	8009364 <HAL_DMA_Init>
 800872a:	2800      	cmp	r0, #0
 800872c:	d15c      	bne.n	80087e8 <HAL_SAI_MspInit+0x140>
    if(saiHandle->Instance==SAI1_Block_B)
 800872e:	4a35      	ldr	r2, [pc, #212]	; (8008804 <HAL_SAI_MspInit+0x15c>)
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_a);
 8008730:	63ac      	str	r4, [r5, #56]	; 0x38
    if(saiHandle->Instance==SAI1_Block_B)
 8008732:	6823      	ldr	r3, [r4, #0]
 8008734:	4293      	cmp	r3, r2
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_a);
 8008736:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
    if(saiHandle->Instance==SAI1_Block_B)
 800873a:	d1bf      	bne.n	80086bc <HAL_SAI_MspInit+0x14>
      if (SAI1_client == 0)
 800873c:	4b32      	ldr	r3, [pc, #200]	; (8008808 <HAL_SAI_MspInit+0x160>)
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	b3b2      	cbz	r2, 80087b0 <HAL_SAI_MspInit+0x108>
    SAI1_client ++;
 8008742:	3201      	adds	r2, #1
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8008744:	2008      	movs	r0, #8
 8008746:	2102      	movs	r1, #2
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008748:	4d33      	ldr	r5, [pc, #204]	; (8008818 <HAL_SAI_MspInit+0x170>)
    SAI1_client ++;
 800874a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800874c:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800874e:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80087f8 <HAL_SAI_MspInit+0x150>
 8008752:	e9cd 0102 	strd	r0, r1, [sp, #8]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008756:	a902      	add	r1, sp, #8
 8008758:	482d      	ldr	r0, [pc, #180]	; (8008810 <HAL_SAI_MspInit+0x168>)
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800875a:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800875c:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008760:	f002 f8be 	bl	800a8e0 <HAL_GPIO_Init>
    hdma_sai1_b.Instance = DMA1_Stream2;
 8008764:	492d      	ldr	r1, [pc, #180]	; (800881c <HAL_SAI_MspInit+0x174>)
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 8008766:	2258      	movs	r2, #88	; 0x58
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008768:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800876a:	4628      	mov	r0, r5
    hdma_sai1_b.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800876c:	632b      	str	r3, [r5, #48]	; 0x30
    hdma_sai1_b.Init.Request = DMA_REQUEST_SAI1_B;
 800876e:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8008772:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008776:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800877a:	e9c5 1204 	strd	r1, r2, [r5, #16]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800877e:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008782:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8008786:	e9c5 3302 	strd	r3, r3, [r5, #8]
    hdma_sai1_b.Init.MemBurst = DMA_MBURST_SINGLE;
 800878a:	e9c5 330a 	strd	r3, r3, [r5, #40]	; 0x28
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800878e:	e9c5 1206 	strd	r1, r2, [r5, #24]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008792:	2304      	movs	r3, #4
 8008794:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8008798:	e9c5 2308 	strd	r2, r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 800879c:	f000 fde2 	bl	8009364 <HAL_DMA_Init>
 80087a0:	bb28      	cbnz	r0, 80087ee <HAL_SAI_MspInit+0x146>
    __HAL_LINKDMA(saiHandle,hdmarx,hdma_sai1_b);
 80087a2:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
 80087a6:	63ac      	str	r4, [r5, #56]	; 0x38
    __HAL_LINKDMA(saiHandle,hdmatx,hdma_sai1_b);
 80087a8:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
}
 80087ac:	b009      	add	sp, #36	; 0x24
 80087ae:	bd30      	pop	{r4, r5, pc}
       __HAL_RCC_SAI1_CLK_ENABLE();
 80087b0:	491b      	ldr	r1, [pc, #108]	; (8008820 <HAL_SAI_MspInit+0x178>)
 80087b2:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80087b6:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80087ba:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80087be:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80087c2:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80087c6:	9101      	str	r1, [sp, #4]
 80087c8:	9901      	ldr	r1, [sp, #4]
 80087ca:	e7ba      	b.n	8008742 <HAL_SAI_MspInit+0x9a>
       __HAL_RCC_SAI1_CLK_ENABLE();
 80087cc:	4914      	ldr	r1, [pc, #80]	; (8008820 <HAL_SAI_MspInit+0x178>)
 80087ce:	f8d1 00f0 	ldr.w	r0, [r1, #240]	; 0xf0
 80087d2:	f440 0080 	orr.w	r0, r0, #4194304	; 0x400000
 80087d6:	f8c1 00f0 	str.w	r0, [r1, #240]	; 0xf0
 80087da:	f8d1 10f0 	ldr.w	r1, [r1, #240]	; 0xf0
 80087de:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80087e2:	9100      	str	r1, [sp, #0]
 80087e4:	9900      	ldr	r1, [sp, #0]
 80087e6:	e770      	b.n	80086ca <HAL_SAI_MspInit+0x22>
      Error_Handler();
 80087e8:	f7ff fee0 	bl	80085ac <Error_Handler>
 80087ec:	e79f      	b.n	800872e <HAL_SAI_MspInit+0x86>
      Error_Handler();
 80087ee:	f7ff fedd 	bl	80085ac <Error_Handler>
 80087f2:	e7d6      	b.n	80087a2 <HAL_SAI_MspInit+0xfa>
 80087f4:	f3af 8000 	nop.w
 80087f8:	00000000 	.word	0x00000000
 80087fc:	00000003 	.word	0x00000003
 8008800:	40015804 	.word	0x40015804
 8008804:	40015824 	.word	0x40015824
 8008808:	20019170 	.word	0x20019170
 800880c:	20019174 	.word	0x20019174
 8008810:	58021000 	.word	0x58021000
 8008814:	40020028 	.word	0x40020028
 8008818:	200191ec 	.word	0x200191ec
 800881c:	40020040 	.word	0x40020040
 8008820:	58024400 	.word	0x58024400

08008824 <MX_SDMMC1_SD_Init>:
SD_HandleTypeDef hsd1;

/* SDMMC1 init function */

void MX_SDMMC1_SD_Init(void)
{
 8008824:	b410      	push	{r4}
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8008826:	4b07      	ldr	r3, [pc, #28]	; (8008844 <MX_SDMMC1_SD_Init+0x20>)
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8008828:	2200      	movs	r2, #0
  hsd1.Instance = SDMMC1;
 800882a:	4c07      	ldr	r4, [pc, #28]	; (8008848 <MX_SDMMC1_SD_Init+0x24>)
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800882c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd1.Init.ClockDiv = 25;
 8008830:	2119      	movs	r1, #25
  hsd1.Instance = SDMMC1;
 8008832:	e9c3 4200 	strd	r4, r2, [r3]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8008836:	e9c3 2002 	strd	r2, r0, [r3, #8]
  hsd1.Init.ClockDiv = 25;
 800883a:	e9c3 2104 	strd	r2, r1, [r3, #16]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800883e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008842:	4770      	bx	lr
 8008844:	20019394 	.word	0x20019394
 8008848:	52007000 	.word	0x52007000

0800884c <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 800884c:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(sdHandle->Instance==SDMMC1)
 800884e:	4b2b      	ldr	r3, [pc, #172]	; (80088fc <HAL_SD_MspInit+0xb0>)
{
 8008850:	b08b      	sub	sp, #44	; 0x2c
  if(sdHandle->Instance==SDMMC1)
 8008852:	6802      	ldr	r2, [r0, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	2400      	movs	r4, #0
  if(sdHandle->Instance==SDMMC1)
 8008856:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008858:	9408      	str	r4, [sp, #32]
 800885a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800885e:	e9cd 4406 	strd	r4, r4, [sp, #24]
  if(sdHandle->Instance==SDMMC1)
 8008862:	d001      	beq.n	8008868 <HAL_SD_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }
}
 8008864:	b00b      	add	sp, #44	; 0x2c
 8008866:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008868:	4b25      	ldr	r3, [pc, #148]	; (8008900 <HAL_SD_MspInit+0xb4>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 800886a:	250c      	movs	r5, #12
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800886c:	2601      	movs	r6, #1
 800886e:	2702      	movs	r7, #2
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008870:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008874:	4823      	ldr	r0, [pc, #140]	; (8008904 <HAL_SD_MspInit+0xb8>)
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8008876:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800887a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
 800887e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8008882:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 8008886:	9201      	str	r2, [sp, #4]
 8008888:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800888a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800888e:	f042 0204 	orr.w	r2, r2, #4
 8008892:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8008896:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800889a:	f002 0204 	and.w	r2, r2, #4
 800889e:	9202      	str	r2, [sp, #8]
 80088a0:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80088a6:	f042 0208 	orr.w	r2, r2, #8
 80088aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80088ae:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80088b6:	9508      	str	r5, [sp, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088b8:	f003 0308 	and.w	r3, r3, #8
 80088bc:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80088be:	2302      	movs	r3, #2
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80088c0:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80088c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088c8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088cc:	f002 f808 	bl	800a8e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80088d0:	2302      	movs	r3, #2
 80088d2:	2204      	movs	r2, #4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088d4:	a904      	add	r1, sp, #16
 80088d6:	480c      	ldr	r0, [pc, #48]	; (8008908 <HAL_SD_MspInit+0xbc>)
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 80088d8:	9508      	str	r5, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80088da:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80088de:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80088e2:	f001 fffd 	bl	800a8e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 80088e6:	4622      	mov	r2, r4
 80088e8:	4621      	mov	r1, r4
 80088ea:	2031      	movs	r0, #49	; 0x31
 80088ec:	f000 fba4 	bl	8009038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80088f0:	2031      	movs	r0, #49	; 0x31
 80088f2:	f000 fbdf 	bl	80090b4 <HAL_NVIC_EnableIRQ>
}
 80088f6:	b00b      	add	sp, #44	; 0x2c
 80088f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80088fa:	bf00      	nop
 80088fc:	52007000 	.word	0x52007000
 8008900:	58024400 	.word	0x58024400
 8008904:	58020800 	.word	0x58020800
 8008908:	58020c00 	.word	0x58020c00
 800890c:	00000000 	.word	0x00000000

08008910 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8008910:	4813      	ldr	r0, [pc, #76]	; (8008960 <MX_SPI1_Init+0x50>)
 8008912:	4a14      	ldr	r2, [pc, #80]	; (8008964 <MX_SPI1_Init+0x54>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008914:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008958 <MX_SPI1_Init+0x48>
{
 8008918:	b508      	push	{r3, lr}
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800891a:	2300      	movs	r3, #0
  hspi1.Instance = SPI1;
 800891c:	6002      	str	r2, [r0, #0]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800891e:	2207      	movs	r2, #7
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8008920:	6183      	str	r3, [r0, #24]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8008922:	60c2      	str	r2, [r0, #12]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008924:	ed80 7b08 	vstr	d7, [r0, #32]
 8008928:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800892c:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008930:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 0x0;
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8008934:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008938:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800893c:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008940:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008944:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008948:	f006 fd9c 	bl	800f484 <HAL_SPI_Init>
 800894c:	b900      	cbnz	r0, 8008950 <MX_SPI1_Init+0x40>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800894e:	bd08      	pop	{r3, pc}
 8008950:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008954:	f7ff be2a 	b.w	80085ac <Error_Handler>
	...
 8008960:	200195f0 	.word	0x200195f0
 8008964:	40013000 	.word	0x40013000

08008968 <MX_SPI2_Init>:
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8008968:	4813      	ldr	r0, [pc, #76]	; (80089b8 <MX_SPI2_Init+0x50>)
 800896a:	4a14      	ldr	r2, [pc, #80]	; (80089bc <MX_SPI2_Init+0x54>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800896c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80089b0 <MX_SPI2_Init+0x48>
{
 8008970:	b508      	push	{r3, lr}
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 8008972:	2300      	movs	r3, #0
  hspi2.Instance = SPI2;
 8008974:	6002      	str	r2, [r0, #0]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008976:	2207      	movs	r2, #7
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8008978:	6183      	str	r3, [r0, #24]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800897a:	60c2      	str	r2, [r0, #12]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800897c:	ed80 7b08 	vstr	d7, [r0, #32]
 8008980:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008984:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008988:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi2.Init.CRCPolynomial = 0x0;
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800898c:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8008990:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8008994:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8008998:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800899c:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80089a0:	f006 fd70 	bl	800f484 <HAL_SPI_Init>
 80089a4:	b900      	cbnz	r0, 80089a8 <MX_SPI2_Init+0x40>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80089a6:	bd08      	pop	{r3, pc}
 80089a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80089ac:	f7ff bdfe 	b.w	80085ac <Error_Handler>
	...
 80089b8:	20019678 	.word	0x20019678
 80089bc:	40003800 	.word	0x40003800

080089c0 <MX_SPI5_Init>:
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80089c0:	4813      	ldr	r0, [pc, #76]	; (8008a10 <MX_SPI5_Init+0x50>)
 80089c2:	4a14      	ldr	r2, [pc, #80]	; (8008a14 <MX_SPI5_Init+0x54>)
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80089c4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8008a08 <MX_SPI5_Init+0x48>
{
 80089c8:	b508      	push	{r3, lr}
  hspi5.Init.Mode = SPI_MODE_SLAVE;
 80089ca:	2300      	movs	r3, #0
  hspi5.Instance = SPI5;
 80089cc:	6002      	str	r2, [r0, #0]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80089ce:	2207      	movs	r2, #7
  hspi5.Init.NSS = SPI_NSS_HARD_INPUT;
 80089d0:	6183      	str	r3, [r0, #24]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80089d2:	60c2      	str	r2, [r0, #12]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80089d4:	ed80 7b08 	vstr	d7, [r0, #32]
 80089d8:	ed80 7b0a 	vstr	d7, [r0, #40]	; 0x28
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80089dc:	e9c0 3301 	strd	r3, r3, [r0, #4]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80089e0:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi5.Init.CRCPolynomial = 0x0;
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  hspi5.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80089e4:	e9c0 330d 	strd	r3, r3, [r0, #52]	; 0x34
  hspi5.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
  hspi5.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80089e8:	e9c0 330f 	strd	r3, r3, [r0, #60]	; 0x3c
  hspi5.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
  hspi5.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80089ec:	e9c0 3311 	strd	r3, r3, [r0, #68]	; 0x44
  hspi5.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
  hspi5.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80089f0:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
  hspi5.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
  hspi5.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80089f4:	e9c0 3315 	strd	r3, r3, [r0, #84]	; 0x54
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80089f8:	f006 fd44 	bl	800f484 <HAL_SPI_Init>
 80089fc:	b900      	cbnz	r0, 8008a00 <MX_SPI5_Init+0x40>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80089fe:	bd08      	pop	{r3, pc}
 8008a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008a04:	f7ff bdd2 	b.w	80085ac <Error_Handler>
	...
 8008a10:	20019700 	.word	0x20019700
 8008a14:	40015000 	.word	0x40015000

08008a18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8008a18:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a1a:	2400      	movs	r4, #0
{
 8008a1c:	b0bc      	sub	sp, #240	; 0xf0
 8008a1e:	4605      	mov	r5, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a20:	22c0      	movs	r2, #192	; 0xc0
 8008a22:	4621      	mov	r1, r4
 8008a24:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a26:	940a      	str	r4, [sp, #40]	; 0x28
 8008a28:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8008a2c:	e9cd 4408 	strd	r4, r4, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a30:	f014 fd50 	bl	801d4d4 <memset>
  if(spiHandle->Instance==SPI1)
 8008a34:	682b      	ldr	r3, [r5, #0]
 8008a36:	4aa5      	ldr	r2, [pc, #660]	; (8008ccc <HAL_SPI_MspInit+0x2b4>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d008      	beq.n	8008a4e <HAL_SPI_MspInit+0x36>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI2)
 8008a3c:	4aa4      	ldr	r2, [pc, #656]	; (8008cd0 <HAL_SPI_MspInit+0x2b8>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d076      	beq.n	8008b30 <HAL_SPI_MspInit+0x118>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
  else if(spiHandle->Instance==SPI5)
 8008a42:	4aa4      	ldr	r2, [pc, #656]	; (8008cd4 <HAL_SPI_MspInit+0x2bc>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	f000 80d0 	beq.w	8008bea <HAL_SPI_MspInit+0x1d2>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8008a4a:	b03c      	add	sp, #240	; 0xf0
 8008a4c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a4e:	4ba2      	ldr	r3, [pc, #648]	; (8008cd8 <HAL_SPI_MspInit+0x2c0>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a50:	a906      	add	r1, sp, #24
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8008a52:	4ea2      	ldr	r6, [pc, #648]	; (8008cdc <HAL_SPI_MspInit+0x2c4>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008a54:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008a58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008a5c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8008a60:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008a64:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008a68:	9200      	str	r2, [sp, #0]
 8008a6a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008a70:	f042 0201 	orr.w	r2, r2, #1
 8008a74:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a78:	22f0      	movs	r2, #240	; 0xf0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a7e:	f003 0301 	and.w	r3, r3, #1
 8008a82:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a84:	2302      	movs	r3, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a86:	9801      	ldr	r0, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a88:	4895      	ldr	r0, [pc, #596]	; (8008ce0 <HAL_SPI_MspInit+0x2c8>)
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8008a8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008a8e:	2203      	movs	r2, #3
 8008a90:	2305      	movs	r3, #5
 8008a92:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a96:	f001 ff23 	bl	800a8e0 <HAL_GPIO_Init>
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8008a9a:	2325      	movs	r3, #37	; 0x25
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8008a9c:	4a91      	ldr	r2, [pc, #580]	; (8008ce4 <HAL_SPI_MspInit+0x2cc>)
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008a9e:	4630      	mov	r0, r6
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8008aa0:	6073      	str	r3, [r6, #4]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8008aa2:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8008aa6:	6032      	str	r2, [r6, #0]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008aa8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008aac:	60b4      	str	r4, [r6, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008aae:	60f4      	str	r4, [r6, #12]
    hdma_spi1_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008ab0:	62f4      	str	r4, [r6, #44]	; 0x2c
    hdma_spi1_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008ab2:	6334      	str	r4, [r6, #48]	; 0x30
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8008ab4:	e9c6 4306 	strd	r4, r3, [r6, #24]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008ab8:	2304      	movs	r3, #4
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008aba:	e9c6 2404 	strd	r2, r4, [r6, #16]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008abe:	6273      	str	r3, [r6, #36]	; 0x24
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008ac0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008ac4:	2301      	movs	r3, #1
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008ac6:	6232      	str	r2, [r6, #32]
    hdma_spi1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008ac8:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8008aca:	f000 fc4b 	bl	8009364 <HAL_DMA_Init>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f040 80f0 	bne.w	8008cb4 <HAL_SPI_MspInit+0x29c>
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8008ad4:	4c84      	ldr	r4, [pc, #528]	; (8008ce8 <HAL_SPI_MspInit+0x2d0>)
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8008ad6:	2226      	movs	r2, #38	; 0x26
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8008ad8:	4984      	ldr	r1, [pc, #528]	; (8008cec <HAL_SPI_MspInit+0x2d4>)
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008ada:	2300      	movs	r3, #0
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 8008adc:	6062      	str	r2, [r4, #4]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ade:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi1_tx.Instance = DMA1_Stream5;
 8008ae2:	6021      	str	r1, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008ae4:	2140      	movs	r1, #64	; 0x40
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8008ae6:	6122      	str	r2, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008ae8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008aec:	60e3      	str	r3, [r4, #12]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008aee:	4620      	mov	r0, r4
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008af0:	6163      	str	r3, [r4, #20]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008af2:	60a1      	str	r1, [r4, #8]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8008af4:	f44f 7180 	mov.w	r1, #256	; 0x100
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008af8:	61a3      	str	r3, [r4, #24]
    hdma_spi1_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8008afa:	62e3      	str	r3, [r4, #44]	; 0x2c
    hdma_spi1_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008afc:	6323      	str	r3, [r4, #48]	; 0x30
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008afe:	2301      	movs	r3, #1
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008b00:	6222      	str	r2, [r4, #32]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008b02:	2204      	movs	r2, #4
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8008b04:	67ee      	str	r6, [r5, #124]	; 0x7c
 8008b06:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8008b08:	61e1      	str	r1, [r4, #28]
    hdma_spi1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008b0a:	e9c4 2309 	strd	r2, r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8008b0e:	f000 fc29 	bl	8009364 <HAL_DMA_Init>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	f040 80cb 	bne.w	8008cae <HAL_SPI_MspInit+0x296>
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8008b18:	2200      	movs	r2, #0
 8008b1a:	2102      	movs	r1, #2
 8008b1c:	2023      	movs	r0, #35	; 0x23
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8008b1e:	67ac      	str	r4, [r5, #120]	; 0x78
 8008b20:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI1_IRQn, 2, 0);
 8008b22:	f000 fa89 	bl	8009038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8008b26:	2023      	movs	r0, #35	; 0x23
 8008b28:	f000 fac4 	bl	80090b4 <HAL_NVIC_EnableIRQ>
}
 8008b2c:	b03c      	add	sp, #240	; 0xf0
 8008b2e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008b30:	4b69      	ldr	r3, [pc, #420]	; (8008cd8 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b32:	2605      	movs	r6, #5
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b34:	486e      	ldr	r0, [pc, #440]	; (8008cf0 <HAL_SPI_MspInit+0x2d8>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008b36:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8008b3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b3e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8008b42:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8008b46:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008b4a:	9202      	str	r2, [sp, #8]
 8008b4c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b4e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008b52:	f042 0202 	orr.w	r2, r2, #2
 8008b56:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8008b5a:	f44f 4230 	mov.w	r2, #45056	; 0xb000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8008b68:	2302      	movs	r3, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b6a:	9903      	ldr	r1, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b6c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8008b6e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008b72:	2303      	movs	r3, #3
 8008b74:	e9cd 3609 	strd	r3, r6, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b78:	f001 feb2 	bl	800a8e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008b7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b80:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b82:	485b      	ldr	r0, [pc, #364]	; (8008cf0 <HAL_SPI_MspInit+0x2d8>)
 8008b84:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8008b86:	960a      	str	r6, [sp, #40]	; 0x28
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8008b88:	4e5a      	ldr	r6, [pc, #360]	; (8008cf4 <HAL_SPI_MspInit+0x2dc>)
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8008b8a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	2302      	movs	r3, #2
 8008b92:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008b96:	f001 fea3 	bl	800a8e0 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream0;
 8008b9a:	4a57      	ldr	r2, [pc, #348]	; (8008cf8 <HAL_SPI_MspInit+0x2e0>)
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8008b9c:	2327      	movs	r3, #39	; 0x27
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8008b9e:	4630      	mov	r0, r6
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8008ba0:	e9c6 2300 	strd	r2, r3, [r6]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008ba4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8008ba8:	f44f 7380 	mov.w	r3, #256	; 0x100
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008bac:	6132      	str	r2, [r6, #16]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008bae:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8008bb2:	61f3      	str	r3, [r6, #28]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8008bb4:	2304      	movs	r3, #4
 8008bb6:	e9c6 2308 	strd	r2, r3, [r6, #32]
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008bba:	2301      	movs	r3, #1
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008bbc:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008bc0:	e9c6 4405 	strd	r4, r4, [r6, #20]
    hdma_spi2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8008bc4:	e9c6 440b 	strd	r4, r4, [r6, #44]	; 0x2c
    hdma_spi2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8008bc8:	62b3      	str	r3, [r6, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8008bca:	f000 fbcb 	bl	8009364 <HAL_DMA_Init>
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d173      	bne.n	8008cba <HAL_SPI_MspInit+0x2a2>
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2103      	movs	r1, #3
 8008bd6:	2024      	movs	r0, #36	; 0x24
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8008bd8:	67ee      	str	r6, [r5, #124]	; 0x7c
 8008bda:	63b5      	str	r5, [r6, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 3, 0);
 8008bdc:	f000 fa2c 	bl	8009038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8008be0:	2024      	movs	r0, #36	; 0x24
 8008be2:	f000 fa67 	bl	80090b4 <HAL_NVIC_EnableIRQ>
}
 8008be6:	b03c      	add	sp, #240	; 0xf0
 8008be8:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8008bea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008bee:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008bf0:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI5;
 8008bf2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008bf6:	f003 fd6d 	bl	800c6d4 <HAL_RCCEx_PeriphCLKConfig>
 8008bfa:	2800      	cmp	r0, #0
 8008bfc:	d163      	bne.n	8008cc6 <HAL_SPI_MspInit+0x2ae>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008bfe:	4b36      	ldr	r3, [pc, #216]	; (8008cd8 <HAL_SPI_MspInit+0x2c0>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008c00:	2405      	movs	r4, #5
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c02:	483e      	ldr	r0, [pc, #248]	; (8008cfc <HAL_SPI_MspInit+0x2e4>)
    __HAL_RCC_SPI5_CLK_ENABLE();
 8008c04:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008c08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8008c0c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8008c10:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8008c14:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008c18:	9204      	str	r2, [sp, #16]
 8008c1a:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8008c20:	f042 0220 	orr.w	r2, r2, #32
 8008c24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008c28:	f44f 7230 	mov.w	r2, #704	; 0x2c0
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008c30:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c32:	f003 0320 	and.w	r3, r3, #32
 8008c36:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008c38:	2302      	movs	r3, #2
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8008c3a:	9905      	ldr	r1, [sp, #20]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c3c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8008c3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c42:	2200      	movs	r2, #0
 8008c44:	2302      	movs	r3, #2
 8008c46:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c4a:	f001 fe49 	bl	800a8e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008c4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c52:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c54:	a906      	add	r1, sp, #24
 8008c56:	4829      	ldr	r0, [pc, #164]	; (8008cfc <HAL_SPI_MspInit+0x2e4>)
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8008c58:	940a      	str	r4, [sp, #40]	; 0x28
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008c5a:	4c29      	ldr	r4, [pc, #164]	; (8008d00 <HAL_SPI_MspInit+0x2e8>)
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8008c5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008c60:	2200      	movs	r2, #0
 8008c62:	2300      	movs	r3, #0
 8008c64:	e9cd 2308 	strd	r2, r3, [sp, #32]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8008c68:	f001 fe3a 	bl	800a8e0 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA1_Stream3;
 8008c6c:	4925      	ldr	r1, [pc, #148]	; (8008d04 <HAL_SPI_MspInit+0x2ec>)
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8008c6e:	2255      	movs	r2, #85	; 0x55
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008c70:	2300      	movs	r3, #0
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8008c72:	4620      	mov	r0, r4
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008c74:	6263      	str	r3, [r4, #36]	; 0x24
    hdma_spi5_rx.Init.Request = DMA_REQUEST_SPI5_RX;
 8008c76:	e9c4 1200 	strd	r1, r2, [r4]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008c7e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008c82:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008c86:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008c8a:	6121      	str	r1, [r4, #16]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8008c8c:	e9c4 3207 	strd	r3, r2, [r4, #28]
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 8008c90:	f000 fb68 	bl	8009364 <HAL_DMA_Init>
 8008c94:	b9a0      	cbnz	r0, 8008cc0 <HAL_SPI_MspInit+0x2a8>
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8008c96:	2200      	movs	r2, #0
 8008c98:	2104      	movs	r1, #4
 8008c9a:	2055      	movs	r0, #85	; 0x55
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 8008c9c:	67ec      	str	r4, [r5, #124]	; 0x7c
 8008c9e:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI5_IRQn, 4, 0);
 8008ca0:	f000 f9ca 	bl	8009038 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 8008ca4:	2055      	movs	r0, #85	; 0x55
 8008ca6:	f000 fa05 	bl	80090b4 <HAL_NVIC_EnableIRQ>
}
 8008caa:	b03c      	add	sp, #240	; 0xf0
 8008cac:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8008cae:	f7ff fc7d 	bl	80085ac <Error_Handler>
 8008cb2:	e731      	b.n	8008b18 <HAL_SPI_MspInit+0x100>
      Error_Handler();
 8008cb4:	f7ff fc7a 	bl	80085ac <Error_Handler>
 8008cb8:	e70c      	b.n	8008ad4 <HAL_SPI_MspInit+0xbc>
      Error_Handler();
 8008cba:	f7ff fc77 	bl	80085ac <Error_Handler>
 8008cbe:	e788      	b.n	8008bd2 <HAL_SPI_MspInit+0x1ba>
      Error_Handler();
 8008cc0:	f7ff fc74 	bl	80085ac <Error_Handler>
 8008cc4:	e7e7      	b.n	8008c96 <HAL_SPI_MspInit+0x27e>
      Error_Handler();
 8008cc6:	f7ff fc71 	bl	80085ac <Error_Handler>
 8008cca:	e798      	b.n	8008bfe <HAL_SPI_MspInit+0x1e6>
 8008ccc:	40013000 	.word	0x40013000
 8008cd0:	40003800 	.word	0x40003800
 8008cd4:	40015000 	.word	0x40015000
 8008cd8:	58024400 	.word	0x58024400
 8008cdc:	20019410 	.word	0x20019410
 8008ce0:	58020000 	.word	0x58020000
 8008ce4:	40020070 	.word	0x40020070
 8008ce8:	20019488 	.word	0x20019488
 8008cec:	40020088 	.word	0x40020088
 8008cf0:	58020400 	.word	0x58020400
 8008cf4:	20019500 	.word	0x20019500
 8008cf8:	40020010 	.word	0x40020010
 8008cfc:	58021400 	.word	0x58021400
 8008d00:	20019578 	.word	0x20019578
 8008d04:	40020058 	.word	0x40020058

08008d08 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d08:	4b07      	ldr	r3, [pc, #28]	; (8008d28 <HAL_MspInit+0x20>)
{
 8008d0a:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008d0c:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8008d10:	f042 0202 	orr.w	r2, r2, #2
 8008d14:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8008d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	9301      	str	r3, [sp, #4]
 8008d22:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008d24:	b002      	add	sp, #8
 8008d26:	4770      	bx	lr
 8008d28:	58024400 	.word	0x58024400

08008d2c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d2c:	e7fe      	b.n	8008d2c <NMI_Handler>
 8008d2e:	bf00      	nop

08008d30 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d30:	e7fe      	b.n	8008d30 <HardFault_Handler>
 8008d32:	bf00      	nop

08008d34 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d34:	e7fe      	b.n	8008d34 <MemManage_Handler>
 8008d36:	bf00      	nop

08008d38 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d38:	e7fe      	b.n	8008d38 <BusFault_Handler>
 8008d3a:	bf00      	nop

08008d3c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d3c:	e7fe      	b.n	8008d3c <UsageFault_Handler>
 8008d3e:	bf00      	nop

08008d40 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d40:	4770      	bx	lr
 8008d42:	bf00      	nop

08008d44 <DebugMon_Handler>:
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop

08008d48 <PendSV_Handler>:
 8008d48:	4770      	bx	lr
 8008d4a:	bf00      	nop

08008d4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d4c:	f000 b92e 	b.w	8008fac <HAL_IncTick>

08008d50 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008d50:	4801      	ldr	r0, [pc, #4]	; (8008d58 <DMA1_Stream0_IRQHandler+0x8>)
 8008d52:	f001 b95b 	b.w	800a00c <HAL_DMA_IRQHandler>
 8008d56:	bf00      	nop
 8008d58:	20019500 	.word	0x20019500

08008d5c <DMA1_Stream1_IRQHandler>:
void DMA1_Stream1_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_a);
 8008d5c:	4801      	ldr	r0, [pc, #4]	; (8008d64 <DMA1_Stream1_IRQHandler+0x8>)
 8008d5e:	f001 b955 	b.w	800a00c <HAL_DMA_IRQHandler>
 8008d62:	bf00      	nop
 8008d64:	20019174 	.word	0x20019174

08008d68 <DMA1_Stream2_IRQHandler>:
void DMA1_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8008d68:	4801      	ldr	r0, [pc, #4]	; (8008d70 <DMA1_Stream2_IRQHandler+0x8>)
 8008d6a:	f001 b94f 	b.w	800a00c <HAL_DMA_IRQHandler>
 8008d6e:	bf00      	nop
 8008d70:	200191ec 	.word	0x200191ec

08008d74 <DMA1_Stream3_IRQHandler>:
void DMA1_Stream3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 8008d74:	4801      	ldr	r0, [pc, #4]	; (8008d7c <DMA1_Stream3_IRQHandler+0x8>)
 8008d76:	f001 b949 	b.w	800a00c <HAL_DMA_IRQHandler>
 8008d7a:	bf00      	nop
 8008d7c:	20019578 	.word	0x20019578

08008d80 <DMA1_Stream4_IRQHandler>:
void DMA1_Stream4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8008d80:	4801      	ldr	r0, [pc, #4]	; (8008d88 <DMA1_Stream4_IRQHandler+0x8>)
 8008d82:	f001 b943 	b.w	800a00c <HAL_DMA_IRQHandler>
 8008d86:	bf00      	nop
 8008d88:	20019410 	.word	0x20019410

08008d8c <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <DMA1_Stream5_IRQHandler+0x8>)
 8008d8e:	f001 b93d 	b.w	800a00c <HAL_DMA_IRQHandler>
 8008d92:	bf00      	nop
 8008d94:	20019488 	.word	0x20019488

08008d98 <I2C2_EV_IRQHandler>:
void I2C2_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <I2C2_EV_IRQHandler+0x8>)
 8008d9a:	f002 b9e7 	b.w	800b16c <HAL_I2C_EV_IRQHandler>
 8008d9e:	bf00      	nop
 8008da0:	20013070 	.word	0x20013070

08008da4 <I2C2_ER_IRQHandler>:
void I2C2_ER_IRQHandler(void)
{
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <I2C2_ER_IRQHandler+0x8>)
 8008da6:	f002 bd03 	b.w	800b7b0 <HAL_I2C_ER_IRQHandler>
 8008daa:	bf00      	nop
 8008dac:	20013070 	.word	0x20013070

08008db0 <SPI1_IRQHandler>:
void SPI1_IRQHandler(void)
{
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <SPI1_IRQHandler+0x8>)
 8008db2:	f006 beed 	b.w	800fb90 <HAL_SPI_IRQHandler>
 8008db6:	bf00      	nop
 8008db8:	200195f0 	.word	0x200195f0

08008dbc <SPI2_IRQHandler>:
void SPI2_IRQHandler(void)
{
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <SPI2_IRQHandler+0x8>)
 8008dbe:	f006 bee7 	b.w	800fb90 <HAL_SPI_IRQHandler>
 8008dc2:	bf00      	nop
 8008dc4:	20019678 	.word	0x20019678

08008dc8 <SDMMC1_IRQHandler>:
void SDMMC1_IRQHandler(void)
{
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <SDMMC1_IRQHandler+0x8>)
 8008dca:	f006 b94d 	b.w	800f068 <HAL_SD_IRQHandler>
 8008dce:	bf00      	nop
 8008dd0:	20019394 	.word	0x20019394

08008dd4 <SPI5_IRQHandler>:
void SPI5_IRQHandler(void)
{
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 8008dd4:	4801      	ldr	r0, [pc, #4]	; (8008ddc <SPI5_IRQHandler+0x8>)
 8008dd6:	f006 bedb 	b.w	800fb90 <HAL_SPI_IRQHandler>
 8008dda:	bf00      	nop
 8008ddc:	20019700 	.word	0x20019700

08008de0 <SystemInit>:
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008de0:	4927      	ldr	r1, [pc, #156]	; (8008e80 <SystemInit+0xa0>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008de2:	4a28      	ldr	r2, [pc, #160]	; (8008e84 <SystemInit+0xa4>)
{
 8008de4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008de6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8008dea:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008df2:	6813      	ldr	r3, [r2, #0]
 8008df4:	f003 030f 	and.w	r3, r3, #15
 8008df8:	2b06      	cmp	r3, #6
 8008dfa:	d805      	bhi.n	8008e08 <SystemInit+0x28>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008dfc:	6813      	ldr	r3, [r2, #0]
 8008dfe:	f023 030f 	bic.w	r3, r3, #15
 8008e02:	f043 0307 	orr.w	r3, r3, #7
 8008e06:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008e08:	4b1f      	ldr	r3, [pc, #124]	; (8008e88 <SystemInit+0xa8>)

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008e0a:	2400      	movs	r4, #0

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008e0c:	4a1f      	ldr	r2, [pc, #124]	; (8008e8c <SystemInit+0xac>)
  RCC->CR |= RCC_CR_HSION;
 8008e0e:	6819      	ldr	r1, [r3, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008e10:	481c      	ldr	r0, [pc, #112]	; (8008e84 <SystemInit+0xa4>)
  RCC->CR |= RCC_CR_HSION;
 8008e12:	f041 0101 	orr.w	r1, r1, #1
 8008e16:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
 8008e18:	611c      	str	r4, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
 8008e1a:	6819      	ldr	r1, [r3, #0]
 8008e1c:	400a      	ands	r2, r1
 8008e1e:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008e20:	6803      	ldr	r3, [r0, #0]
 8008e22:	071b      	lsls	r3, r3, #28
 8008e24:	d505      	bpl.n	8008e32 <SystemInit+0x52>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008e26:	6803      	ldr	r3, [r0, #0]
 8008e28:	f023 030f 	bic.w	r3, r3, #15
 8008e2c:	f043 0307 	orr.w	r3, r3, #7
 8008e30:	6003      	str	r3, [r0, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008e32:	4b15      	ldr	r3, [pc, #84]	; (8008e88 <SystemInit+0xa8>)
 8008e34:	2200      	movs	r2, #0
  RCC->PLLCKSELR = 0x02020200;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008e36:	4916      	ldr	r1, [pc, #88]	; (8008e90 <SystemInit+0xb0>)
  RCC->PLLCKSELR = 0x02020200;
 8008e38:	4c16      	ldr	r4, [pc, #88]	; (8008e94 <SystemInit+0xb4>)
  RCC->PLLCFGR = 0x01FF0000;
 8008e3a:	4817      	ldr	r0, [pc, #92]	; (8008e98 <SystemInit+0xb8>)
  RCC->D1CFGR = 0x00000000;
 8008e3c:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8008e3e:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8008e40:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8008e42:	629c      	str	r4, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x01FF0000;
 8008e44:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x01010280;
 8008e46:	6319      	str	r1, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008e4a:	6399      	str	r1, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008e4c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008e4e:	6419      	str	r1, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008e50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e52:	6818      	ldr	r0, [r3, #0]
  /* Disable all interrupts */
  RCC->CIER = 0x00000000;

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008e54:	4c11      	ldr	r4, [pc, #68]	; (8008e9c <SystemInit+0xbc>)
  RCC->CR &= 0xFFFBFFFFU;
 8008e56:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008e5a:	4911      	ldr	r1, [pc, #68]	; (8008ea0 <SystemInit+0xc0>)
  RCC->CR &= 0xFFFBFFFFU;
 8008e5c:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
 8008e5e:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008e60:	6823      	ldr	r3, [r4, #0]
 8008e62:	4019      	ands	r1, r3
 8008e64:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8008e68:	d203      	bcs.n	8008e72 <SystemInit+0x92>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008e6a:	4b0e      	ldr	r3, [pc, #56]	; (8008ea4 <SystemInit+0xc4>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008e72:	4b0d      	ldr	r3, [pc, #52]	; (8008ea8 <SystemInit+0xc8>)
 8008e74:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008e78:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008e7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7e:	4770      	bx	lr
 8008e80:	e000ed00 	.word	0xe000ed00
 8008e84:	52002000 	.word	0x52002000
 8008e88:	58024400 	.word	0x58024400
 8008e8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008e90:	01010280 	.word	0x01010280
 8008e94:	02020200 	.word	0x02020200
 8008e98:	01ff0000 	.word	0x01ff0000
 8008e9c:	5c001000 	.word	0x5c001000
 8008ea0:	ffff0000 	.word	0xffff0000
 8008ea4:	51008000 	.word	0x51008000
 8008ea8:	52004000 	.word	0x52004000

08008eac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
   ldr   sp, =_estack      /* set stack pointer */
 8008eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ee4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8008eb0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008eb2:	e003      	b.n	8008ebc <LoopCopyDataInit>

08008eb4 <CopyDataInit>:


CopyDataInit:
  ldr  r3, =_sidata
 8008eb4:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008eb6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008eb8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008eba:	3104      	adds	r1, #4

08008ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8008ebc:	480b      	ldr	r0, [pc, #44]	; (8008eec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008ebe:	4b0c      	ldr	r3, [pc, #48]	; (8008ef0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008ec0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008ec2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008ec4:	d3f6      	bcc.n	8008eb4 <CopyDataInit>
  ldr  r2, =_sbss
 8008ec6:	4a0b      	ldr	r2, [pc, #44]	; (8008ef4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008ec8:	e002      	b.n	8008ed0 <LoopFillZerobss>

08008eca <FillZerobss>:



/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8008eca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008ecc:	f842 3b04 	str.w	r3, [r2], #4

08008ed0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr  r3, = _ebss
 8008ed0:	4b09      	ldr	r3, [pc, #36]	; (8008ef8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008ed2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008ed4:	d3f9      	bcc.n	8008eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8008ed6:	f7ff ff83 	bl	8008de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008eda:	f014 faaf 	bl	801d43c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ede:	f7ff f909 	bl	80080f4 <main>
  bx  lr
 8008ee2:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8008ee4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8008ee8:	08038948 	.word	0x08038948
  ldr  r0, =_sdata
 8008eec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008ef0:	20000820 	.word	0x20000820
  ldr  r2, =_sbss
 8008ef4:	20000820 	.word	0x20000820
  ldr  r3, = _ebss
 8008ef8:	20019e2c 	.word	0x20019e2c

08008efc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008efc:	e7fe      	b.n	8008efc <ADC3_IRQHandler>
	...

08008f00 <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008f00:	4b0f      	ldr	r3, [pc, #60]	; (8008f40 <HAL_InitTick+0x40>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b90b      	cbnz	r3, 8008f0a <HAL_InitTick+0xa>
  {
    return HAL_ERROR;
 8008f06:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8008f08:	4770      	bx	lr
{
 8008f0a:	b510      	push	{r4, lr}
 8008f0c:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008f0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008f12:	4a0c      	ldr	r2, [pc, #48]	; (8008f44 <HAL_InitTick+0x44>)
 8008f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8008f18:	6810      	ldr	r0, [r2, #0]
 8008f1a:	fbb0 f0f3 	udiv	r0, r0, r3
 8008f1e:	f000 f8d7 	bl	80090d0 <HAL_SYSTICK_Config>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f22:	2c0f      	cmp	r4, #15
 8008f24:	d800      	bhi.n	8008f28 <HAL_InitTick+0x28>
 8008f26:	b108      	cbz	r0, 8008f2c <HAL_InitTick+0x2c>
    return HAL_ERROR;
 8008f28:	2001      	movs	r0, #1
}
 8008f2a:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	4621      	mov	r1, r4
 8008f30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f34:	f000 f880 	bl	8009038 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008f38:	4b03      	ldr	r3, [pc, #12]	; (8008f48 <HAL_InitTick+0x48>)
 8008f3a:	2000      	movs	r0, #0
 8008f3c:	601c      	str	r4, [r3, #0]
}
 8008f3e:	bd10      	pop	{r4, pc}
 8008f40:	20000730 	.word	0x20000730
 8008f44:	20000728 	.word	0x20000728
 8008f48:	20000734 	.word	0x20000734

08008f4c <HAL_Init>:
{
 8008f4c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f4e:	2003      	movs	r0, #3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f50:	4c12      	ldr	r4, [pc, #72]	; (8008f9c <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008f52:	f000 f85f 	bl	8009014 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f56:	f003 f86d 	bl	800c034 <HAL_RCC_GetSysClockFreq>
 8008f5a:	4b11      	ldr	r3, [pc, #68]	; (8008fa0 <HAL_Init+0x54>)
 8008f5c:	4911      	ldr	r1, [pc, #68]	; (8008fa4 <HAL_Init+0x58>)
 8008f5e:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f60:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f62:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f66:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f6a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f6c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f6e:	f002 021f 	and.w	r2, r2, #31
  SystemCoreClock = common_system_clock;
 8008f72:	490d      	ldr	r1, [pc, #52]	; (8008fa8 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f74:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f78:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f7a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
 8008f7e:	6008      	str	r0, [r1, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f80:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f82:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f84:	f7ff ffbc 	bl	8008f00 <HAL_InitTick>
 8008f88:	b110      	cbz	r0, 8008f90 <HAL_Init+0x44>
    return HAL_ERROR;
 8008f8a:	2401      	movs	r4, #1
}
 8008f8c:	4620      	mov	r0, r4
 8008f8e:	bd10      	pop	{r4, pc}
 8008f90:	4604      	mov	r4, r0
  HAL_MspInit();
 8008f92:	f7ff feb9 	bl	8008d08 <HAL_MspInit>
}
 8008f96:	4620      	mov	r0, r4
 8008f98:	bd10      	pop	{r4, pc}
 8008f9a:	bf00      	nop
 8008f9c:	2000072c 	.word	0x2000072c
 8008fa0:	58024400 	.word	0x58024400
 8008fa4:	0801fa74 	.word	0x0801fa74
 8008fa8:	20000728 	.word	0x20000728

08008fac <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8008fac:	4a03      	ldr	r2, [pc, #12]	; (8008fbc <HAL_IncTick+0x10>)
 8008fae:	4b04      	ldr	r3, [pc, #16]	; (8008fc0 <HAL_IncTick+0x14>)
 8008fb0:	6811      	ldr	r1, [r2, #0]
 8008fb2:	781b      	ldrb	r3, [r3, #0]
 8008fb4:	440b      	add	r3, r1
 8008fb6:	6013      	str	r3, [r2, #0]
}
 8008fb8:	4770      	bx	lr
 8008fba:	bf00      	nop
 8008fbc:	20019788 	.word	0x20019788
 8008fc0:	20000730 	.word	0x20000730

08008fc4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8008fc4:	4b01      	ldr	r3, [pc, #4]	; (8008fcc <HAL_GetTick+0x8>)
 8008fc6:	6818      	ldr	r0, [r3, #0]
}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20019788 	.word	0x20019788

08008fd0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8008fd4:	f7ff fff6 	bl	8008fc4 <HAL_GetTick>
 8008fd8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fda:	1c63      	adds	r3, r4, #1
 8008fdc:	d002      	beq.n	8008fe4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fde:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <HAL_Delay+0x20>)
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008fe4:	f7ff ffee 	bl	8008fc4 <HAL_GetTick>
 8008fe8:	1b43      	subs	r3, r0, r5
 8008fea:	42a3      	cmp	r3, r4
 8008fec:	d3fa      	bcc.n	8008fe4 <HAL_Delay+0x14>
  {
  }
}
 8008fee:	bd38      	pop	{r3, r4, r5, pc}
 8008ff0:	20000730 	.word	0x20000730

08008ff4 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8008ff4:	4b01      	ldr	r3, [pc, #4]	; (8008ffc <HAL_GetREVID+0x8>)
 8008ff6:	6818      	ldr	r0, [r3, #0]
}
 8008ff8:	0c00      	lsrs	r0, r0, #16
 8008ffa:	4770      	bx	lr
 8008ffc:	5c001000 	.word	0x5c001000

08009000 <HAL_SetFMCMemorySwappingConfig>:
  */
void HAL_SetFMCMemorySwappingConfig(uint32_t BankMapConfig)
{
  /* Check the parameter */
  assert_param(IS_FMC_SWAPBMAP_MODE(BankMapConfig));
  MODIFY_REG(FMC_Bank1_R->BTCR[0], FMC_BCR1_BMAP, BankMapConfig);
 8009000:	4a03      	ldr	r2, [pc, #12]	; (8009010 <HAL_SetFMCMemorySwappingConfig+0x10>)
 8009002:	6813      	ldr	r3, [r2, #0]
 8009004:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8009008:	4318      	orrs	r0, r3
 800900a:	6010      	str	r0, [r2, #0]
}
 800900c:	4770      	bx	lr
 800900e:	bf00      	nop
 8009010:	52004000 	.word	0x52004000

08009014 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009014:	4906      	ldr	r1, [pc, #24]	; (8009030 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009016:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800901a:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
 800901c:	4b05      	ldr	r3, [pc, #20]	; (8009034 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800901e:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009020:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009024:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009028:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
 800902a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800902c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800902e:	4770      	bx	lr
 8009030:	e000ed00 	.word	0xe000ed00
 8009034:	05fa0000 	.word	0x05fa0000

08009038 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009038:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <HAL_NVIC_SetPriority+0x70>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800903a:	b500      	push	{lr}
 800903c:	68db      	ldr	r3, [r3, #12]
 800903e:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009042:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009046:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800904a:	f1be 0f04 	cmp.w	lr, #4
 800904e:	bf28      	it	cs
 8009050:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009054:	f1bc 0f06 	cmp.w	ip, #6
 8009058:	d91a      	bls.n	8009090 <HAL_NVIC_SetPriority+0x58>
 800905a:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800905c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8009060:	fa0c fc03 	lsl.w	ip, ip, r3
 8009064:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009068:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  if ((int32_t)(IRQn) >= 0)
 800906c:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800906e:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009072:	ea21 010c 	bic.w	r1, r1, ip
 8009076:	fa01 f103 	lsl.w	r1, r1, r3
 800907a:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800907e:	db0a      	blt.n	8009096 <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009080:	0109      	lsls	r1, r1, #4
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <HAL_NVIC_SetPriority+0x74>)
 8009084:	b2c9      	uxtb	r1, r1
 8009086:	4403      	add	r3, r0
 8009088:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800908c:	f85d fb04 	ldr.w	pc, [sp], #4
 8009090:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009092:	4613      	mov	r3, r2
 8009094:	e7e8      	b.n	8009068 <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009096:	f000 000f 	and.w	r0, r0, #15
 800909a:	0109      	lsls	r1, r1, #4
 800909c:	4b04      	ldr	r3, [pc, #16]	; (80090b0 <HAL_NVIC_SetPriority+0x78>)
 800909e:	b2c9      	uxtb	r1, r1
 80090a0:	4403      	add	r3, r0
 80090a2:	7619      	strb	r1, [r3, #24]
 80090a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80090a8:	e000ed00 	.word	0xe000ed00
 80090ac:	e000e100 	.word	0xe000e100
 80090b0:	e000ecfc 	.word	0xe000ecfc

080090b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80090b4:	2800      	cmp	r0, #0
 80090b6:	db07      	blt.n	80090c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090b8:	2301      	movs	r3, #1
 80090ba:	f000 011f 	and.w	r1, r0, #31
 80090be:	4a03      	ldr	r2, [pc, #12]	; (80090cc <HAL_NVIC_EnableIRQ+0x18>)
 80090c0:	0940      	lsrs	r0, r0, #5
 80090c2:	408b      	lsls	r3, r1
 80090c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	e000e100 	.word	0xe000e100

080090d0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80090d0:	1e43      	subs	r3, r0, #1
 80090d2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090d6:	d20c      	bcs.n	80090f2 <HAL_SYSTICK_Config+0x22>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090d8:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090dc:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090de:	4906      	ldr	r1, [pc, #24]	; (80090f8 <HAL_SYSTICK_Config+0x28>)
 80090e0:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80090e4:	6153      	str	r3, [r2, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090e6:	2307      	movs	r3, #7
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80090e8:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80090ec:	6190      	str	r0, [r2, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80090ee:	6113      	str	r3, [r2, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80090f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80090f2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	e000ed00 	.word	0xe000ed00

080090fc <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80090fc:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009100:	4b04      	ldr	r3, [pc, #16]	; (8009114 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8009102:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8009104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009106:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800910a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
 800910c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	e000ed00 	.word	0xe000ed00

08009118 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8009118:	4b06      	ldr	r3, [pc, #24]	; (8009134 <HAL_MPU_Enable+0x1c>)
 800911a:	f040 0001 	orr.w	r0, r0, #1
 800911e:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8009122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009124:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009128:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800912a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800912e:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8009132:	4770      	bx	lr
 8009134:	e000ed00 	.word	0xe000ed00

08009138 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8009138:	7843      	ldrb	r3, [r0, #1]
 800913a:	4a16      	ldr	r2, [pc, #88]	; (8009194 <HAL_MPU_ConfigRegion+0x5c>)
 800913c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
 8009140:	7803      	ldrb	r3, [r0, #0]
 8009142:	b313      	cbz	r3, 800918a <HAL_MPU_ConfigRegion+0x52>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8009144:	6843      	ldr	r3, [r0, #4]
 8009146:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800914a:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800914c:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8009150:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009152:	7801      	ldrb	r1, [r0, #0]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009154:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009158:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800915c:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800915e:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009160:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009164:	f890 c00e 	ldrb.w	ip, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009168:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800916c:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800916e:	ea43 434c 	orr.w	r3, r3, ip, lsl #17
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009172:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8009176:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800917a:	7a01      	ldrb	r1, [r0, #8]
 800917c:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 8009180:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009184:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
 8009188:	4770      	bx	lr
  }
  else
  {
    MPU->RBAR = 0x00;
 800918a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
 800918e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  }
}
 8009192:	4770      	bx	lr
 8009194:	e000ed00 	.word	0xe000ed00

08009198 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009198:	4b34      	ldr	r3, [pc, #208]	; (800926c <DMA_CalcBaseAndBitshift+0xd4>)
 800919a:	4935      	ldr	r1, [pc, #212]	; (8009270 <DMA_CalcBaseAndBitshift+0xd8>)
{
 800919c:	b430      	push	{r4, r5}
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800919e:	4d35      	ldr	r5, [pc, #212]	; (8009274 <DMA_CalcBaseAndBitshift+0xdc>)
 80091a0:	6802      	ldr	r2, [r0, #0]
 80091a2:	4c35      	ldr	r4, [pc, #212]	; (8009278 <DMA_CalcBaseAndBitshift+0xe0>)
 80091a4:	42aa      	cmp	r2, r5
 80091a6:	bf18      	it	ne
 80091a8:	429a      	cmpne	r2, r3
 80091aa:	bf0c      	ite	eq
 80091ac:	2301      	moveq	r3, #1
 80091ae:	2300      	movne	r3, #0
 80091b0:	428a      	cmp	r2, r1
 80091b2:	bf08      	it	eq
 80091b4:	f043 0301 	orreq.w	r3, r3, #1
 80091b8:	3130      	adds	r1, #48	; 0x30
 80091ba:	42a2      	cmp	r2, r4
 80091bc:	bf08      	it	eq
 80091be:	f043 0301 	orreq.w	r3, r3, #1
 80091c2:	3430      	adds	r4, #48	; 0x30
 80091c4:	428a      	cmp	r2, r1
 80091c6:	bf08      	it	eq
 80091c8:	f043 0301 	orreq.w	r3, r3, #1
 80091cc:	3130      	adds	r1, #48	; 0x30
 80091ce:	42a2      	cmp	r2, r4
 80091d0:	bf08      	it	eq
 80091d2:	f043 0301 	orreq.w	r3, r3, #1
 80091d6:	3430      	adds	r4, #48	; 0x30
 80091d8:	428a      	cmp	r2, r1
 80091da:	bf08      	it	eq
 80091dc:	f043 0301 	orreq.w	r3, r3, #1
 80091e0:	f501 715c 	add.w	r1, r1, #880	; 0x370
 80091e4:	42a2      	cmp	r2, r4
 80091e6:	bf08      	it	eq
 80091e8:	f043 0301 	orreq.w	r3, r3, #1
 80091ec:	f504 745c 	add.w	r4, r4, #880	; 0x370
 80091f0:	428a      	cmp	r2, r1
 80091f2:	bf08      	it	eq
 80091f4:	f043 0301 	orreq.w	r3, r3, #1
 80091f8:	3130      	adds	r1, #48	; 0x30
 80091fa:	42a2      	cmp	r2, r4
 80091fc:	bf08      	it	eq
 80091fe:	f043 0301 	orreq.w	r3, r3, #1
 8009202:	3430      	adds	r4, #48	; 0x30
 8009204:	428a      	cmp	r2, r1
 8009206:	bf08      	it	eq
 8009208:	f043 0301 	orreq.w	r3, r3, #1
 800920c:	3130      	adds	r1, #48	; 0x30
 800920e:	42a2      	cmp	r2, r4
 8009210:	bf08      	it	eq
 8009212:	f043 0301 	orreq.w	r3, r3, #1
 8009216:	3430      	adds	r4, #48	; 0x30
 8009218:	428a      	cmp	r2, r1
 800921a:	bf08      	it	eq
 800921c:	f043 0301 	orreq.w	r3, r3, #1
 8009220:	3130      	adds	r1, #48	; 0x30
 8009222:	42a2      	cmp	r2, r4
 8009224:	bf08      	it	eq
 8009226:	f043 0301 	orreq.w	r3, r3, #1
 800922a:	428a      	cmp	r2, r1
 800922c:	bf08      	it	eq
 800922e:	f043 0301 	orreq.w	r3, r3, #1
 8009232:	b913      	cbnz	r3, 800923a <DMA_CalcBaseAndBitshift+0xa2>
 8009234:	4b11      	ldr	r3, [pc, #68]	; (800927c <DMA_CalcBaseAndBitshift+0xe4>)
 8009236:	429a      	cmp	r2, r3
 8009238:	d113      	bne.n	8009262 <DMA_CalcBaseAndBitshift+0xca>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800923a:	b2d3      	uxtb	r3, r2
 800923c:	4910      	ldr	r1, [pc, #64]	; (8009280 <DMA_CalcBaseAndBitshift+0xe8>)

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800923e:	4c11      	ldr	r4, [pc, #68]	; (8009284 <DMA_CalcBaseAndBitshift+0xec>)
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009240:	3b10      	subs	r3, #16
 8009242:	fba1 5103 	umull	r5, r1, r1, r3

    if (stream_number > 3U)
 8009246:	2b5f      	cmp	r3, #95	; 0x5f
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009248:	4b0f      	ldr	r3, [pc, #60]	; (8009288 <DMA_CalcBaseAndBitshift+0xf0>)
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800924a:	f3c1 1102 	ubfx	r1, r1, #4, #3
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800924e:	ea03 0302 	and.w	r3, r3, r2
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009252:	5c61      	ldrb	r1, [r4, r1]
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009254:	bf88      	it	hi
 8009256:	3304      	addhi	r3, #4
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009258:	65c1      	str	r1, [r0, #92]	; 0x5c
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800925a:	6583      	str	r3, [r0, #88]	; 0x58
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
  }

  return hdma->StreamBaseAddress;
}
 800925c:	4618      	mov	r0, r3
 800925e:	bc30      	pop	{r4, r5}
 8009260:	4770      	bx	lr
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009262:	f022 03ff 	bic.w	r3, r2, #255	; 0xff
 8009266:	6583      	str	r3, [r0, #88]	; 0x58
 8009268:	e7f8      	b.n	800925c <DMA_CalcBaseAndBitshift+0xc4>
 800926a:	bf00      	nop
 800926c:	40020010 	.word	0x40020010
 8009270:	40020040 	.word	0x40020040
 8009274:	40020028 	.word	0x40020028
 8009278:	40020058 	.word	0x40020058
 800927c:	400204b8 	.word	0x400204b8
 8009280:	aaaaaaab 	.word	0xaaaaaaab
 8009284:	0801fa84 	.word	0x0801fa84
 8009288:	fffffc00 	.word	0xfffffc00

0800928c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800928c:	6803      	ldr	r3, [r0, #0]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800928e:	4a29      	ldr	r2, [pc, #164]	; (8009334 <DMA_CalcDMAMUXChannelBaseAndMask+0xa8>)
 8009290:	4929      	ldr	r1, [pc, #164]	; (8009338 <DMA_CalcDMAMUXChannelBaseAndMask+0xac>)
{
 8009292:	b430      	push	{r4, r5}
  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009294:	4d29      	ldr	r5, [pc, #164]	; (800933c <DMA_CalcDMAMUXChannelBaseAndMask+0xb0>)
 8009296:	4c2a      	ldr	r4, [pc, #168]	; (8009340 <DMA_CalcDMAMUXChannelBaseAndMask+0xb4>)
 8009298:	42ab      	cmp	r3, r5
 800929a:	bf18      	it	ne
 800929c:	4293      	cmpne	r3, r2
 800929e:	bf0c      	ite	eq
 80092a0:	2201      	moveq	r2, #1
 80092a2:	2200      	movne	r2, #0
 80092a4:	428b      	cmp	r3, r1
 80092a6:	bf08      	it	eq
 80092a8:	f042 0201 	orreq.w	r2, r2, #1
 80092ac:	3128      	adds	r1, #40	; 0x28
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	bf08      	it	eq
 80092b2:	f042 0201 	orreq.w	r2, r2, #1
 80092b6:	3428      	adds	r4, #40	; 0x28
 80092b8:	428b      	cmp	r3, r1
 80092ba:	bf08      	it	eq
 80092bc:	f042 0201 	orreq.w	r2, r2, #1
 80092c0:	3128      	adds	r1, #40	; 0x28
 80092c2:	42a3      	cmp	r3, r4
 80092c4:	bf08      	it	eq
 80092c6:	f042 0201 	orreq.w	r2, r2, #1
 80092ca:	428b      	cmp	r3, r1
 80092cc:	bf08      	it	eq
 80092ce:	f042 0201 	orreq.w	r2, r2, #1
 80092d2:	b912      	cbnz	r2, 80092da <DMA_CalcDMAMUXChannelBaseAndMask+0x4e>
 80092d4:	4a1b      	ldr	r2, [pc, #108]	; (8009344 <DMA_CalcDMAMUXChannelBaseAndMask+0xb8>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d113      	bne.n	8009302 <DMA_CalcDMAMUXChannelBaseAndMask+0x76>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092da:	b2db      	uxtb	r3, r3
 80092dc:	4c1a      	ldr	r4, [pc, #104]	; (8009348 <DMA_CalcDMAMUXChannelBaseAndMask+0xbc>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092de:	4a1b      	ldr	r2, [pc, #108]	; (800934c <DMA_CalcDMAMUXChannelBaseAndMask+0xc0>)
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092e0:	2101      	movs	r1, #1
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092e2:	3b08      	subs	r3, #8
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80092e4:	4d1a      	ldr	r5, [pc, #104]	; (8009350 <DMA_CalcDMAMUXChannelBaseAndMask+0xc4>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80092e6:	fba4 4303 	umull	r4, r3, r4, r3
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80092ea:	6645      	str	r5, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092ec:	eb02 1213 	add.w	r2, r2, r3, lsr #4
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092f0:	f3c3 1304 	ubfx	r3, r3, #4, #5
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092f4:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092f6:	fa01 f303 	lsl.w	r3, r1, r3
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80092fa:	6602      	str	r2, [r0, #96]	; 0x60
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80092fc:	6683      	str	r3, [r0, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80092fe:	bc30      	pop	{r4, r5}
 8009300:	4770      	bx	lr
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009302:	b2da      	uxtb	r2, r3
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009304:	4913      	ldr	r1, [pc, #76]	; (8009354 <DMA_CalcDMAMUXChannelBaseAndMask+0xc8>)
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009306:	4c14      	ldr	r4, [pc, #80]	; (8009358 <DMA_CalcDMAMUXChannelBaseAndMask+0xcc>)
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009308:	4419      	add	r1, r3
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800930a:	3a10      	subs	r2, #16
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800930c:	29a8      	cmp	r1, #168	; 0xa8
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800930e:	fba4 2302 	umull	r2, r3, r4, r2
 8009312:	ea4f 1313 	mov.w	r3, r3, lsr #4
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009316:	d800      	bhi.n	800931a <DMA_CalcDMAMUXChannelBaseAndMask+0x8e>
      stream_number += 8U;
 8009318:	3308      	adds	r3, #8
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800931a:	4a10      	ldr	r2, [pc, #64]	; (800935c <DMA_CalcDMAMUXChannelBaseAndMask+0xd0>)
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800931c:	f003 051f 	and.w	r5, r3, #31
 8009320:	2101      	movs	r1, #1
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009322:	4c0f      	ldr	r4, [pc, #60]	; (8009360 <DMA_CalcDMAMUXChannelBaseAndMask+0xd4>)
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009324:	441a      	add	r2, r3
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009326:	40a9      	lsls	r1, r5
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009328:	6644      	str	r4, [r0, #100]	; 0x64
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800932a:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800932c:	6681      	str	r1, [r0, #104]	; 0x68
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800932e:	6602      	str	r2, [r0, #96]	; 0x60
}
 8009330:	e7e5      	b.n	80092fe <DMA_CalcDMAMUXChannelBaseAndMask+0x72>
 8009332:	bf00      	nop
 8009334:	58025408 	.word	0x58025408
 8009338:	58025430 	.word	0x58025430
 800933c:	5802541c 	.word	0x5802541c
 8009340:	58025444 	.word	0x58025444
 8009344:	58025494 	.word	0x58025494
 8009348:	cccccccd 	.word	0xcccccccd
 800934c:	16009600 	.word	0x16009600
 8009350:	58025880 	.word	0x58025880
 8009354:	bffdfbf0 	.word	0xbffdfbf0
 8009358:	aaaaaaab 	.word	0xaaaaaaab
 800935c:	10008200 	.word	0x10008200
 8009360:	40020880 	.word	0x40020880

08009364 <HAL_DMA_Init>:
{
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009368:	f7ff fe2c 	bl	8008fc4 <HAL_GetTick>
  if(hdma == NULL)
 800936c:	2c00      	cmp	r4, #0
 800936e:	f000 816b 	beq.w	8009648 <HAL_DMA_Init+0x2e4>
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009372:	6822      	ldr	r2, [r4, #0]
 8009374:	4605      	mov	r5, r0
 8009376:	4ba3      	ldr	r3, [pc, #652]	; (8009604 <HAL_DMA_Init+0x2a0>)
 8009378:	429a      	cmp	r2, r3
 800937a:	d048      	beq.n	800940e <HAL_DMA_Init+0xaa>
 800937c:	3318      	adds	r3, #24
 800937e:	429a      	cmp	r2, r3
 8009380:	d045      	beq.n	800940e <HAL_DMA_Init+0xaa>
 8009382:	3330      	adds	r3, #48	; 0x30
 8009384:	49a0      	ldr	r1, [pc, #640]	; (8009608 <HAL_DMA_Init+0x2a4>)
 8009386:	428a      	cmp	r2, r1
 8009388:	bf18      	it	ne
 800938a:	429a      	cmpne	r2, r3
 800938c:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009390:	bf0c      	ite	eq
 8009392:	2301      	moveq	r3, #1
 8009394:	2300      	movne	r3, #0
 8009396:	428a      	cmp	r2, r1
 8009398:	bf08      	it	eq
 800939a:	f043 0301 	orreq.w	r3, r3, #1
 800939e:	3118      	adds	r1, #24
 80093a0:	428a      	cmp	r2, r1
 80093a2:	bf08      	it	eq
 80093a4:	f043 0301 	orreq.w	r3, r3, #1
 80093a8:	3118      	adds	r1, #24
 80093aa:	428a      	cmp	r2, r1
 80093ac:	bf08      	it	eq
 80093ae:	f043 0301 	orreq.w	r3, r3, #1
 80093b2:	3118      	adds	r1, #24
 80093b4:	428a      	cmp	r2, r1
 80093b6:	bf08      	it	eq
 80093b8:	f043 0301 	orreq.w	r3, r3, #1
 80093bc:	f501 7156 	add.w	r1, r1, #856	; 0x358
 80093c0:	428a      	cmp	r2, r1
 80093c2:	bf08      	it	eq
 80093c4:	f043 0301 	orreq.w	r3, r3, #1
 80093c8:	3118      	adds	r1, #24
 80093ca:	428a      	cmp	r2, r1
 80093cc:	bf08      	it	eq
 80093ce:	f043 0301 	orreq.w	r3, r3, #1
 80093d2:	3118      	adds	r1, #24
 80093d4:	428a      	cmp	r2, r1
 80093d6:	bf08      	it	eq
 80093d8:	f043 0301 	orreq.w	r3, r3, #1
 80093dc:	3118      	adds	r1, #24
 80093de:	428a      	cmp	r2, r1
 80093e0:	bf08      	it	eq
 80093e2:	f043 0301 	orreq.w	r3, r3, #1
 80093e6:	3118      	adds	r1, #24
 80093e8:	428a      	cmp	r2, r1
 80093ea:	bf08      	it	eq
 80093ec:	f043 0301 	orreq.w	r3, r3, #1
 80093f0:	3118      	adds	r1, #24
 80093f2:	428a      	cmp	r2, r1
 80093f4:	bf08      	it	eq
 80093f6:	f043 0301 	orreq.w	r3, r3, #1
 80093fa:	3118      	adds	r1, #24
 80093fc:	428a      	cmp	r2, r1
 80093fe:	bf08      	it	eq
 8009400:	f043 0301 	orreq.w	r3, r3, #1
 8009404:	b91b      	cbnz	r3, 800940e <HAL_DMA_Init+0xaa>
 8009406:	4b81      	ldr	r3, [pc, #516]	; (800960c <HAL_DMA_Init+0x2a8>)
 8009408:	429a      	cmp	r2, r3
 800940a:	f040 8184 	bne.w	8009716 <HAL_DMA_Init+0x3b2>
    __HAL_UNLOCK(hdma);
 800940e:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8009410:	2102      	movs	r1, #2
    __HAL_UNLOCK(hdma);
 8009412:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->State = HAL_DMA_STATE_BUSY;
 8009416:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	f023 0301 	bic.w	r3, r3, #1
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	e005      	b.n	8009430 <HAL_DMA_Init+0xcc>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009424:	f7ff fdce 	bl	8008fc4 <HAL_GetTick>
 8009428:	1b43      	subs	r3, r0, r5
 800942a:	2b05      	cmp	r3, #5
 800942c:	f200 80fe 	bhi.w	800962c <HAL_DMA_Init+0x2c8>
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009430:	6823      	ldr	r3, [r4, #0]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	07d0      	lsls	r0, r2, #31
 8009436:	d4f5      	bmi.n	8009424 <HAL_DMA_Init+0xc0>
    registerValue |=  hdma->Init.Direction           |
 8009438:	e9d4 2002 	ldrd	r2, r0, [r4, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800943c:	6921      	ldr	r1, [r4, #16]
    registerValue |=  hdma->Init.Direction           |
 800943e:	4302      	orrs	r2, r0
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8009440:	681d      	ldr	r5, [r3, #0]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009442:	6a60      	ldr	r0, [r4, #36]	; 0x24
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009444:	430a      	orrs	r2, r1
 8009446:	6961      	ldr	r1, [r4, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009448:	2804      	cmp	r0, #4
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800944a:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800944e:	69a1      	ldr	r1, [r4, #24]
 8009450:	ea42 0201 	orr.w	r2, r2, r1
 8009454:	69e1      	ldr	r1, [r4, #28]
 8009456:	ea42 0201 	orr.w	r2, r2, r1
            hdma->Init.Mode                | hdma->Init.Priority;
 800945a:	6a21      	ldr	r1, [r4, #32]
 800945c:	ea42 0201 	orr.w	r2, r2, r1
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009460:	496b      	ldr	r1, [pc, #428]	; (8009610 <HAL_DMA_Init+0x2ac>)
 8009462:	ea01 0105 	and.w	r1, r1, r5
    registerValue |=  hdma->Init.Direction           |
 8009466:	ea42 0201 	orr.w	r2, r2, r1
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800946a:	d103      	bne.n	8009474 <HAL_DMA_Init+0x110>
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800946c:	e9d4 100b 	ldrd	r1, r0, [r4, #44]	; 0x2c
 8009470:	4301      	orrs	r1, r0
 8009472:	430a      	orrs	r2, r1
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8009474:	4867      	ldr	r0, [pc, #412]	; (8009614 <HAL_DMA_Init+0x2b0>)
 8009476:	4968      	ldr	r1, [pc, #416]	; (8009618 <HAL_DMA_Init+0x2b4>)
 8009478:	6800      	ldr	r0, [r0, #0]
 800947a:	4001      	ands	r1, r0
 800947c:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 8009480:	d30a      	bcc.n	8009498 <HAL_DMA_Init+0x134>
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8009482:	6861      	ldr	r1, [r4, #4]
 8009484:	f1a1 0029 	sub.w	r0, r1, #41	; 0x29
 8009488:	281f      	cmp	r0, #31
 800948a:	f240 80d6 	bls.w	800963a <HAL_DMA_Init+0x2d6>
 800948e:	394f      	subs	r1, #79	; 0x4f
 8009490:	2903      	cmp	r1, #3
 8009492:	d801      	bhi.n	8009498 <HAL_DMA_Init+0x134>
        registerValue |= DMA_SxCR_TRBUFF;
 8009494:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8009498:	601a      	str	r2, [r3, #0]
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800949a:	6821      	ldr	r1, [r4, #0]
    registerValue |= hdma->Init.FIFOMode;
 800949c:	6a62      	ldr	r2, [r4, #36]	; 0x24
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800949e:	694b      	ldr	r3, [r1, #20]
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094a0:	2a04      	cmp	r2, #4
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80094a2:	f023 0307 	bic.w	r3, r3, #7
    registerValue |= hdma->Init.FIFOMode;
 80094a6:	ea43 0302 	orr.w	r3, r3, r2
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80094aa:	d10e      	bne.n	80094ca <HAL_DMA_Init+0x166>
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094ac:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
      registerValue |= hdma->Init.FIFOThreshold;
 80094b0:	4313      	orrs	r3, r2
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80094b2:	b150      	cbz	r0, 80094ca <HAL_DMA_Init+0x166>
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80094b4:	69a5      	ldr	r5, [r4, #24]
 80094b6:	2d00      	cmp	r5, #0
 80094b8:	f040 8108 	bne.w	80096cc <HAL_DMA_Init+0x368>
    switch (hdma->Init.FIFOThreshold)
 80094bc:	2a01      	cmp	r2, #1
 80094be:	f000 8125 	beq.w	800970c <HAL_DMA_Init+0x3a8>
 80094c2:	f032 0202 	bics.w	r2, r2, #2
 80094c6:	f000 8109 	beq.w	80096dc <HAL_DMA_Init+0x378>
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80094ca:	614b      	str	r3, [r1, #20]
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80094cc:	4620      	mov	r0, r4
 80094ce:	f7ff fe63 	bl	8009198 <DMA_CalcBaseAndBitshift>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80094d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80094d4:	233f      	movs	r3, #63	; 0x3f
 80094d6:	f002 021f 	and.w	r2, r2, #31
 80094da:	4093      	lsls	r3, r2
 80094dc:	6083      	str	r3, [r0, #8]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80094de:	6822      	ldr	r2, [r4, #0]
 80094e0:	4b48      	ldr	r3, [pc, #288]	; (8009604 <HAL_DMA_Init+0x2a0>)
 80094e2:	484e      	ldr	r0, [pc, #312]	; (800961c <HAL_DMA_Init+0x2b8>)
 80094e4:	4948      	ldr	r1, [pc, #288]	; (8009608 <HAL_DMA_Init+0x2a4>)
 80094e6:	4282      	cmp	r2, r0
 80094e8:	bf18      	it	ne
 80094ea:	429a      	cmpne	r2, r3
 80094ec:	f100 0030 	add.w	r0, r0, #48	; 0x30
 80094f0:	bf0c      	ite	eq
 80094f2:	2301      	moveq	r3, #1
 80094f4:	2300      	movne	r3, #0
 80094f6:	428a      	cmp	r2, r1
 80094f8:	bf08      	it	eq
 80094fa:	f043 0301 	orreq.w	r3, r3, #1
 80094fe:	3130      	adds	r1, #48	; 0x30
 8009500:	4282      	cmp	r2, r0
 8009502:	bf08      	it	eq
 8009504:	f043 0301 	orreq.w	r3, r3, #1
 8009508:	3030      	adds	r0, #48	; 0x30
 800950a:	428a      	cmp	r2, r1
 800950c:	bf08      	it	eq
 800950e:	f043 0301 	orreq.w	r3, r3, #1
 8009512:	3130      	adds	r1, #48	; 0x30
 8009514:	4282      	cmp	r2, r0
 8009516:	bf08      	it	eq
 8009518:	f043 0301 	orreq.w	r3, r3, #1
 800951c:	3030      	adds	r0, #48	; 0x30
 800951e:	428a      	cmp	r2, r1
 8009520:	bf08      	it	eq
 8009522:	f043 0301 	orreq.w	r3, r3, #1
 8009526:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800952a:	4282      	cmp	r2, r0
 800952c:	bf08      	it	eq
 800952e:	f043 0301 	orreq.w	r3, r3, #1
 8009532:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009536:	428a      	cmp	r2, r1
 8009538:	bf08      	it	eq
 800953a:	f043 0301 	orreq.w	r3, r3, #1
 800953e:	3130      	adds	r1, #48	; 0x30
 8009540:	4282      	cmp	r2, r0
 8009542:	bf08      	it	eq
 8009544:	f043 0301 	orreq.w	r3, r3, #1
 8009548:	3030      	adds	r0, #48	; 0x30
 800954a:	428a      	cmp	r2, r1
 800954c:	bf08      	it	eq
 800954e:	f043 0301 	orreq.w	r3, r3, #1
 8009552:	3130      	adds	r1, #48	; 0x30
 8009554:	4282      	cmp	r2, r0
 8009556:	bf08      	it	eq
 8009558:	f043 0301 	orreq.w	r3, r3, #1
 800955c:	3030      	adds	r0, #48	; 0x30
 800955e:	428a      	cmp	r2, r1
 8009560:	bf08      	it	eq
 8009562:	f043 0301 	orreq.w	r3, r3, #1
 8009566:	3130      	adds	r1, #48	; 0x30
 8009568:	4282      	cmp	r2, r0
 800956a:	bf08      	it	eq
 800956c:	f043 0301 	orreq.w	r3, r3, #1
 8009570:	3030      	adds	r0, #48	; 0x30
 8009572:	428a      	cmp	r2, r1
 8009574:	bf08      	it	eq
 8009576:	f043 0301 	orreq.w	r3, r3, #1
 800957a:	4929      	ldr	r1, [pc, #164]	; (8009620 <HAL_DMA_Init+0x2bc>)
 800957c:	4282      	cmp	r2, r0
 800957e:	bf08      	it	eq
 8009580:	f043 0301 	orreq.w	r3, r3, #1
 8009584:	4827      	ldr	r0, [pc, #156]	; (8009624 <HAL_DMA_Init+0x2c0>)
 8009586:	428a      	cmp	r2, r1
 8009588:	bf08      	it	eq
 800958a:	f043 0301 	orreq.w	r3, r3, #1
 800958e:	3128      	adds	r1, #40	; 0x28
 8009590:	4282      	cmp	r2, r0
 8009592:	bf08      	it	eq
 8009594:	f043 0301 	orreq.w	r3, r3, #1
 8009598:	3028      	adds	r0, #40	; 0x28
 800959a:	428a      	cmp	r2, r1
 800959c:	bf08      	it	eq
 800959e:	f043 0301 	orreq.w	r3, r3, #1
 80095a2:	3128      	adds	r1, #40	; 0x28
 80095a4:	4282      	cmp	r2, r0
 80095a6:	bf08      	it	eq
 80095a8:	f043 0301 	orreq.w	r3, r3, #1
 80095ac:	3028      	adds	r0, #40	; 0x28
 80095ae:	428a      	cmp	r2, r1
 80095b0:	bf08      	it	eq
 80095b2:	f043 0301 	orreq.w	r3, r3, #1
 80095b6:	3128      	adds	r1, #40	; 0x28
 80095b8:	4282      	cmp	r2, r0
 80095ba:	bf08      	it	eq
 80095bc:	f043 0301 	orreq.w	r3, r3, #1
 80095c0:	428a      	cmp	r2, r1
 80095c2:	bf08      	it	eq
 80095c4:	f043 0301 	orreq.w	r3, r3, #1
 80095c8:	b913      	cbnz	r3, 80095d0 <HAL_DMA_Init+0x26c>
 80095ca:	4b17      	ldr	r3, [pc, #92]	; (8009628 <HAL_DMA_Init+0x2c4>)
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d113      	bne.n	80095f8 <HAL_DMA_Init+0x294>
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80095d0:	4620      	mov	r0, r4
 80095d2:	f7ff fe5b 	bl	800928c <DMA_CalcDMAMUXChannelBaseAndMask>
    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80095d6:	68a3      	ldr	r3, [r4, #8]
 80095d8:	2b80      	cmp	r3, #128	; 0x80
 80095da:	d037      	beq.n	800964c <HAL_DMA_Init+0x2e8>
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80095dc:	7922      	ldrb	r2, [r4, #4]
 80095de:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80095e0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80095e2:	e9d4 3219 	ldrd	r3, r2, [r4, #100]	; 0x64
 80095e6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80095e8:	6861      	ldr	r1, [r4, #4]
 80095ea:	1e4b      	subs	r3, r1, #1
 80095ec:	2b07      	cmp	r3, #7
 80095ee:	d931      	bls.n	8009654 <HAL_DMA_Init+0x2f0>
      hdma->DMAmuxRequestGen = 0U;
 80095f0:	2300      	movs	r3, #0
      hdma->DMAmuxRequestGenStatus = 0U;
 80095f2:	e9c4 331b 	strd	r3, r3, [r4, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80095f6:	6763      	str	r3, [r4, #116]	; 0x74
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095f8:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80095fa:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80095fc:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80095fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009602:	bd38      	pop	{r3, r4, r5, pc}
 8009604:	40020010 	.word	0x40020010
 8009608:	40020040 	.word	0x40020040
 800960c:	400204b8 	.word	0x400204b8
 8009610:	fe10803f 	.word	0xfe10803f
 8009614:	5c001000 	.word	0x5c001000
 8009618:	ffff0000 	.word	0xffff0000
 800961c:	40020028 	.word	0x40020028
 8009620:	58025408 	.word	0x58025408
 8009624:	5802541c 	.word	0x5802541c
 8009628:	58025494 	.word	0x58025494
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800962c:	2220      	movs	r2, #32
        hdma->State = HAL_DMA_STATE_ERROR;
 800962e:	2303      	movs	r3, #3
        return HAL_ERROR;
 8009630:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009632:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8009634:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8009638:	bd38      	pop	{r3, r4, r5, pc}
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800963a:	496a      	ldr	r1, [pc, #424]	; (80097e4 <HAL_DMA_Init+0x480>)
 800963c:	fa21 f000 	lsr.w	r0, r1, r0
 8009640:	07c1      	lsls	r1, r0, #31
 8009642:	f57f af29 	bpl.w	8009498 <HAL_DMA_Init+0x134>
 8009646:	e725      	b.n	8009494 <HAL_DMA_Init+0x130>
    return HAL_ERROR;
 8009648:	2001      	movs	r0, #1
}
 800964a:	bd38      	pop	{r3, r4, r5, pc}
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800964c:	2300      	movs	r3, #0
 800964e:	461a      	mov	r2, r3
 8009650:	6063      	str	r3, [r4, #4]
 8009652:	e7c4      	b.n	80095de <HAL_DMA_Init+0x27a>
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009654:	6820      	ldr	r0, [r4, #0]
 8009656:	4a64      	ldr	r2, [pc, #400]	; (80097e8 <HAL_DMA_Init+0x484>)
 8009658:	4d64      	ldr	r5, [pc, #400]	; (80097ec <HAL_DMA_Init+0x488>)
 800965a:	42a8      	cmp	r0, r5
 800965c:	bf18      	it	ne
 800965e:	4290      	cmpne	r0, r2
 8009660:	f105 0514 	add.w	r5, r5, #20
 8009664:	bf0c      	ite	eq
 8009666:	2201      	moveq	r2, #1
 8009668:	2200      	movne	r2, #0
 800966a:	42a8      	cmp	r0, r5
 800966c:	bf08      	it	eq
 800966e:	f042 0201 	orreq.w	r2, r2, #1
 8009672:	3514      	adds	r5, #20
 8009674:	42a8      	cmp	r0, r5
 8009676:	bf08      	it	eq
 8009678:	f042 0201 	orreq.w	r2, r2, #1
 800967c:	3514      	adds	r5, #20
 800967e:	42a8      	cmp	r0, r5
 8009680:	bf08      	it	eq
 8009682:	f042 0201 	orreq.w	r2, r2, #1
 8009686:	3514      	adds	r5, #20
 8009688:	42a8      	cmp	r0, r5
 800968a:	bf08      	it	eq
 800968c:	f042 0201 	orreq.w	r2, r2, #1
 8009690:	3514      	adds	r5, #20
 8009692:	42a8      	cmp	r0, r5
 8009694:	bf08      	it	eq
 8009696:	f042 0201 	orreq.w	r2, r2, #1
 800969a:	b93a      	cbnz	r2, 80096ac <HAL_DMA_Init+0x348>
 800969c:	4a54      	ldr	r2, [pc, #336]	; (80097f0 <HAL_DMA_Init+0x48c>)
 800969e:	4290      	cmp	r0, r2
 80096a0:	d004      	beq.n	80096ac <HAL_DMA_Init+0x348>
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80096a2:	4a54      	ldr	r2, [pc, #336]	; (80097f4 <HAL_DMA_Init+0x490>)

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80096a4:	4854      	ldr	r0, [pc, #336]	; (80097f8 <HAL_DMA_Init+0x494>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80096a6:	440a      	add	r2, r1
 80096a8:	0092      	lsls	r2, r2, #2
      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80096aa:	e003      	b.n	80096b4 <HAL_DMA_Init+0x350>
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80096ac:	4a53      	ldr	r2, [pc, #332]	; (80097fc <HAL_DMA_Init+0x498>)
      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80096ae:	4854      	ldr	r0, [pc, #336]	; (8009800 <HAL_DMA_Init+0x49c>)
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80096b0:	440a      	add	r2, r1
 80096b2:	0092      	lsls	r2, r2, #2
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80096b4:	2101      	movs	r1, #1
 80096b6:	fa01 f303 	lsl.w	r3, r1, r3
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80096ba:	2100      	movs	r1, #0
 80096bc:	e9c4 201b 	strd	r2, r0, [r4, #108]	; 0x6c
    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80096c0:	6763      	str	r3, [r4, #116]	; 0x74
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80096c2:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80096c4:	e9d4 321c 	ldrd	r3, r2, [r4, #112]	; 0x70
 80096c8:	605a      	str	r2, [r3, #4]
 80096ca:	e795      	b.n	80095f8 <HAL_DMA_Init+0x294>
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80096cc:	f5b5 5f00 	cmp.w	r5, #8192	; 0x2000
 80096d0:	d00e      	beq.n	80096f0 <HAL_DMA_Init+0x38c>
    switch (hdma->Init.FIFOThreshold)
 80096d2:	2a02      	cmp	r2, #2
 80096d4:	d905      	bls.n	80096e2 <HAL_DMA_Init+0x37e>
 80096d6:	2a03      	cmp	r2, #3
 80096d8:	f47f aef7 	bne.w	80094ca <HAL_DMA_Init+0x166>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80096dc:	01c2      	lsls	r2, r0, #7
 80096de:	f57f aef4 	bpl.w	80094ca <HAL_DMA_Init+0x166>
          hdma->State = HAL_DMA_STATE_READY;
 80096e2:	2301      	movs	r3, #1
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80096e4:	2240      	movs	r2, #64	; 0x40
          return HAL_ERROR;
 80096e6:	4618      	mov	r0, r3
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80096e8:	6562      	str	r2, [r4, #84]	; 0x54
          hdma->State = HAL_DMA_STATE_READY;
 80096ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
    switch (hdma->Init.FIFOThreshold)
 80096f0:	2a03      	cmp	r2, #3
 80096f2:	f63f aeea 	bhi.w	80094ca <HAL_DMA_Init+0x166>
 80096f6:	a501      	add	r5, pc, #4	; (adr r5, 80096fc <HAL_DMA_Init+0x398>)
 80096f8:	f855 f022 	ldr.w	pc, [r5, r2, lsl #2]
 80096fc:	080096e3 	.word	0x080096e3
 8009700:	080096dd 	.word	0x080096dd
 8009704:	080096e3 	.word	0x080096e3
 8009708:	0800970d 	.word	0x0800970d
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800970c:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8009710:	f47f aedb 	bne.w	80094ca <HAL_DMA_Init+0x166>
 8009714:	e7e5      	b.n	80096e2 <HAL_DMA_Init+0x37e>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009716:	4b34      	ldr	r3, [pc, #208]	; (80097e8 <HAL_DMA_Init+0x484>)
 8009718:	4834      	ldr	r0, [pc, #208]	; (80097ec <HAL_DMA_Init+0x488>)
 800971a:	493a      	ldr	r1, [pc, #232]	; (8009804 <HAL_DMA_Init+0x4a0>)
 800971c:	4282      	cmp	r2, r0
 800971e:	bf18      	it	ne
 8009720:	429a      	cmpne	r2, r3
 8009722:	f100 0028 	add.w	r0, r0, #40	; 0x28
 8009726:	bf0c      	ite	eq
 8009728:	2301      	moveq	r3, #1
 800972a:	2300      	movne	r3, #0
 800972c:	428a      	cmp	r2, r1
 800972e:	bf08      	it	eq
 8009730:	f043 0301 	orreq.w	r3, r3, #1
 8009734:	3128      	adds	r1, #40	; 0x28
 8009736:	4282      	cmp	r2, r0
 8009738:	bf08      	it	eq
 800973a:	f043 0301 	orreq.w	r3, r3, #1
 800973e:	3028      	adds	r0, #40	; 0x28
 8009740:	428a      	cmp	r2, r1
 8009742:	bf08      	it	eq
 8009744:	f043 0301 	orreq.w	r3, r3, #1
 8009748:	3128      	adds	r1, #40	; 0x28
 800974a:	4282      	cmp	r2, r0
 800974c:	bf08      	it	eq
 800974e:	f043 0301 	orreq.w	r3, r3, #1
 8009752:	428a      	cmp	r2, r1
 8009754:	bf08      	it	eq
 8009756:	f043 0301 	orreq.w	r3, r3, #1
 800975a:	b913      	cbnz	r3, 8009762 <HAL_DMA_Init+0x3fe>
 800975c:	4b24      	ldr	r3, [pc, #144]	; (80097f0 <HAL_DMA_Init+0x48c>)
 800975e:	429a      	cmp	r2, r3
 8009760:	d139      	bne.n	80097d6 <HAL_DMA_Init+0x472>
    __HAL_UNLOCK(hdma);
 8009762:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8009764:	2002      	movs	r0, #2
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009766:	4928      	ldr	r1, [pc, #160]	; (8009808 <HAL_DMA_Init+0x4a4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009768:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 800976c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009770:	6813      	ldr	r3, [r2, #0]
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009772:	4019      	ands	r1, r3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009774:	68a3      	ldr	r3, [r4, #8]
 8009776:	2b40      	cmp	r3, #64	; 0x40
 8009778:	d02b      	beq.n	80097d2 <HAL_DMA_Init+0x46e>
 800977a:	2b80      	cmp	r3, #128	; 0x80
 800977c:	bf0c      	ite	eq
 800977e:	f44f 4080 	moveq.w	r0, #16384	; 0x4000
 8009782:	2000      	movne	r0, #0
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009784:	e9d4 5303 	ldrd	r5, r3, [r4, #12]
 8009788:	08db      	lsrs	r3, r3, #3
 800978a:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800978e:	6965      	ldr	r5, [r4, #20]
 8009790:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009794:	69a5      	ldr	r5, [r4, #24]
 8009796:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800979a:	69e5      	ldr	r5, [r4, #28]
 800979c:	ea43 03d5 	orr.w	r3, r3, r5, lsr #3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80097a0:	6a25      	ldr	r5, [r4, #32]
 80097a2:	ea43 1315 	orr.w	r3, r3, r5, lsr #4
 80097a6:	430b      	orrs	r3, r1
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80097a8:	4918      	ldr	r1, [pc, #96]	; (800980c <HAL_DMA_Init+0x4a8>)
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80097aa:	4303      	orrs	r3, r0
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80097ac:	4620      	mov	r0, r4
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80097ae:	6013      	str	r3, [r2, #0]
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80097b0:	6822      	ldr	r2, [r4, #0]
 80097b2:	4b17      	ldr	r3, [pc, #92]	; (8009810 <HAL_DMA_Init+0x4ac>)
 80097b4:	4411      	add	r1, r2
 80097b6:	fba3 2301 	umull	r2, r3, r3, r1
 80097ba:	091b      	lsrs	r3, r3, #4
 80097bc:	009b      	lsls	r3, r3, #2
 80097be:	65e3      	str	r3, [r4, #92]	; 0x5c
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80097c0:	f7ff fcea 	bl	8009198 <DMA_CalcBaseAndBitshift>
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80097c4:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80097c6:	2301      	movs	r3, #1
 80097c8:	f002 021f 	and.w	r2, r2, #31
 80097cc:	4093      	lsls	r3, r2
 80097ce:	6043      	str	r3, [r0, #4]
 80097d0:	e685      	b.n	80094de <HAL_DMA_Init+0x17a>
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80097d2:	2010      	movs	r0, #16
 80097d4:	e7d6      	b.n	8009784 <HAL_DMA_Init+0x420>
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80097d6:	2240      	movs	r2, #64	; 0x40
    hdma->State     = HAL_DMA_STATE_ERROR;
 80097d8:	2303      	movs	r3, #3
    return HAL_ERROR;
 80097da:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80097dc:	6562      	str	r2, [r4, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80097de:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80097e2:	bd38      	pop	{r3, r4, r5, pc}
 80097e4:	c3c0003f 	.word	0xc3c0003f
 80097e8:	58025408 	.word	0x58025408
 80097ec:	5802541c 	.word	0x5802541c
 80097f0:	58025494 	.word	0x58025494
 80097f4:	1000823f 	.word	0x1000823f
 80097f8:	40020940 	.word	0x40020940
 80097fc:	1600963f 	.word	0x1600963f
 8009800:	58025940 	.word	0x58025940
 8009804:	58025430 	.word	0x58025430
 8009808:	fffe000f 	.word	0xfffe000f
 800980c:	a7fdabf8 	.word	0xa7fdabf8
 8009810:	cccccccd 	.word	0xcccccccd

08009814 <HAL_DMA_Start_IT>:
  if(hdma == NULL)
 8009814:	2800      	cmp	r0, #0
 8009816:	f000 8270 	beq.w	8009cfa <HAL_DMA_Start_IT+0x4e6>
 800981a:	4684      	mov	ip, r0
  __HAL_LOCK(hdma);
 800981c:	f890 0034 	ldrb.w	r0, [r0, #52]	; 0x34
 8009820:	2801      	cmp	r0, #1
 8009822:	f000 826c 	beq.w	8009cfe <HAL_DMA_Start_IT+0x4ea>
 8009826:	2001      	movs	r0, #1
{
 8009828:	b470      	push	{r4, r5, r6}
  if(HAL_DMA_STATE_READY == hdma->State)
 800982a:	f89c 4035 	ldrb.w	r4, [ip, #53]	; 0x35
  __HAL_LOCK(hdma);
 800982e:	f88c 0034 	strb.w	r0, [ip, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8009832:	4284      	cmp	r4, r0
 8009834:	d008      	beq.n	8009848 <HAL_DMA_Start_IT+0x34>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009836:	f44f 6200 	mov.w	r2, #2048	; 0x800
    __HAL_UNLOCK(hdma);
 800983a:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800983c:	f8cc 2054 	str.w	r2, [ip, #84]	; 0x54
    __HAL_UNLOCK(hdma);
 8009840:	f88c 3034 	strb.w	r3, [ip, #52]	; 0x34
}
 8009844:	bc70      	pop	{r4, r5, r6}
 8009846:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8009848:	2002      	movs	r0, #2
    __HAL_DMA_DISABLE(hdma);
 800984a:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800984e:	4ea2      	ldr	r6, [pc, #648]	; (8009ad8 <HAL_DMA_Start_IT+0x2c4>)
    hdma->State = HAL_DMA_STATE_BUSY;
 8009850:	f88c 0035 	strb.w	r0, [ip, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009854:	2000      	movs	r0, #0
 8009856:	f8cc 0054 	str.w	r0, [ip, #84]	; 0x54
    __HAL_DMA_DISABLE(hdma);
 800985a:	6820      	ldr	r0, [r4, #0]
 800985c:	f020 0001 	bic.w	r0, r0, #1
 8009860:	6020      	str	r0, [r4, #0]
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009862:	489e      	ldr	r0, [pc, #632]	; (8009adc <HAL_DMA_Start_IT+0x2c8>)
 8009864:	f8dc 4000 	ldr.w	r4, [ip]
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009868:	f8dc 5058 	ldr.w	r5, [ip, #88]	; 0x58
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800986c:	42b4      	cmp	r4, r6
 800986e:	bf18      	it	ne
 8009870:	4284      	cmpne	r4, r0
 8009872:	f106 0618 	add.w	r6, r6, #24
 8009876:	bf0c      	ite	eq
 8009878:	2001      	moveq	r0, #1
 800987a:	2000      	movne	r0, #0
 800987c:	42b4      	cmp	r4, r6
 800987e:	bf08      	it	eq
 8009880:	f040 0001 	orreq.w	r0, r0, #1
 8009884:	3618      	adds	r6, #24
 8009886:	42b4      	cmp	r4, r6
 8009888:	bf08      	it	eq
 800988a:	f040 0001 	orreq.w	r0, r0, #1
 800988e:	3618      	adds	r6, #24
 8009890:	42b4      	cmp	r4, r6
 8009892:	bf08      	it	eq
 8009894:	f040 0001 	orreq.w	r0, r0, #1
 8009898:	3618      	adds	r6, #24
 800989a:	42b4      	cmp	r4, r6
 800989c:	bf08      	it	eq
 800989e:	f040 0001 	orreq.w	r0, r0, #1
 80098a2:	3618      	adds	r6, #24
 80098a4:	42b4      	cmp	r4, r6
 80098a6:	bf08      	it	eq
 80098a8:	f040 0001 	orreq.w	r0, r0, #1
 80098ac:	3618      	adds	r6, #24
 80098ae:	42b4      	cmp	r4, r6
 80098b0:	bf08      	it	eq
 80098b2:	f040 0001 	orreq.w	r0, r0, #1
 80098b6:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80098ba:	42b4      	cmp	r4, r6
 80098bc:	bf08      	it	eq
 80098be:	f040 0001 	orreq.w	r0, r0, #1
 80098c2:	3618      	adds	r6, #24
 80098c4:	42b4      	cmp	r4, r6
 80098c6:	bf08      	it	eq
 80098c8:	f040 0001 	orreq.w	r0, r0, #1
 80098cc:	3618      	adds	r6, #24
 80098ce:	42b4      	cmp	r4, r6
 80098d0:	bf08      	it	eq
 80098d2:	f040 0001 	orreq.w	r0, r0, #1
 80098d6:	3618      	adds	r6, #24
 80098d8:	42b4      	cmp	r4, r6
 80098da:	bf08      	it	eq
 80098dc:	f040 0001 	orreq.w	r0, r0, #1
 80098e0:	3618      	adds	r6, #24
 80098e2:	42b4      	cmp	r4, r6
 80098e4:	bf08      	it	eq
 80098e6:	f040 0001 	orreq.w	r0, r0, #1
 80098ea:	3618      	adds	r6, #24
 80098ec:	42b4      	cmp	r4, r6
 80098ee:	bf08      	it	eq
 80098f0:	f040 0001 	orreq.w	r0, r0, #1
 80098f4:	3618      	adds	r6, #24
 80098f6:	42b4      	cmp	r4, r6
 80098f8:	bf08      	it	eq
 80098fa:	f040 0001 	orreq.w	r0, r0, #1
 80098fe:	3618      	adds	r6, #24
 8009900:	42b4      	cmp	r4, r6
 8009902:	bf08      	it	eq
 8009904:	f040 0001 	orreq.w	r0, r0, #1
 8009908:	4e75      	ldr	r6, [pc, #468]	; (8009ae0 <HAL_DMA_Start_IT+0x2cc>)
 800990a:	42b4      	cmp	r4, r6
 800990c:	bf08      	it	eq
 800990e:	f040 0001 	orreq.w	r0, r0, #1
 8009912:	3614      	adds	r6, #20
 8009914:	42b4      	cmp	r4, r6
 8009916:	bf08      	it	eq
 8009918:	f040 0001 	orreq.w	r0, r0, #1
 800991c:	3614      	adds	r6, #20
 800991e:	42b4      	cmp	r4, r6
 8009920:	bf08      	it	eq
 8009922:	f040 0001 	orreq.w	r0, r0, #1
 8009926:	3614      	adds	r6, #20
 8009928:	42b4      	cmp	r4, r6
 800992a:	bf08      	it	eq
 800992c:	f040 0001 	orreq.w	r0, r0, #1
 8009930:	3614      	adds	r6, #20
 8009932:	42b4      	cmp	r4, r6
 8009934:	bf08      	it	eq
 8009936:	f040 0001 	orreq.w	r0, r0, #1
 800993a:	3614      	adds	r6, #20
 800993c:	42b4      	cmp	r4, r6
 800993e:	bf08      	it	eq
 8009940:	f040 0001 	orreq.w	r0, r0, #1
 8009944:	3614      	adds	r6, #20
 8009946:	42b4      	cmp	r4, r6
 8009948:	bf08      	it	eq
 800994a:	f040 0001 	orreq.w	r0, r0, #1
 800994e:	b910      	cbnz	r0, 8009956 <HAL_DMA_Start_IT+0x142>
 8009950:	4864      	ldr	r0, [pc, #400]	; (8009ae4 <HAL_DMA_Start_IT+0x2d0>)
 8009952:	4284      	cmp	r4, r0
 8009954:	d10a      	bne.n	800996c <HAL_DMA_Start_IT+0x158>
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009956:	e9dc 0419 	ldrd	r0, r4, [ip, #100]	; 0x64
 800995a:	6044      	str	r4, [r0, #4]
    if(hdma->DMAmuxRequestGen != 0U)
 800995c:	f8dc 006c 	ldr.w	r0, [ip, #108]	; 0x6c
 8009960:	b110      	cbz	r0, 8009968 <HAL_DMA_Start_IT+0x154>
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009962:	e9dc 041c 	ldrd	r0, r4, [ip, #112]	; 0x70
 8009966:	6044      	str	r4, [r0, #4]
 8009968:	f8dc 4000 	ldr.w	r4, [ip]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800996c:	485b      	ldr	r0, [pc, #364]	; (8009adc <HAL_DMA_Start_IT+0x2c8>)
 800996e:	4e5a      	ldr	r6, [pc, #360]	; (8009ad8 <HAL_DMA_Start_IT+0x2c4>)
 8009970:	42b4      	cmp	r4, r6
 8009972:	bf18      	it	ne
 8009974:	4284      	cmpne	r4, r0
 8009976:	f106 0618 	add.w	r6, r6, #24
 800997a:	bf0c      	ite	eq
 800997c:	2001      	moveq	r0, #1
 800997e:	2000      	movne	r0, #0
 8009980:	42b4      	cmp	r4, r6
 8009982:	bf08      	it	eq
 8009984:	f040 0001 	orreq.w	r0, r0, #1
 8009988:	3618      	adds	r6, #24
 800998a:	42b4      	cmp	r4, r6
 800998c:	bf08      	it	eq
 800998e:	f040 0001 	orreq.w	r0, r0, #1
 8009992:	3618      	adds	r6, #24
 8009994:	42b4      	cmp	r4, r6
 8009996:	bf08      	it	eq
 8009998:	f040 0001 	orreq.w	r0, r0, #1
 800999c:	3618      	adds	r6, #24
 800999e:	42b4      	cmp	r4, r6
 80099a0:	bf08      	it	eq
 80099a2:	f040 0001 	orreq.w	r0, r0, #1
 80099a6:	3618      	adds	r6, #24
 80099a8:	42b4      	cmp	r4, r6
 80099aa:	bf08      	it	eq
 80099ac:	f040 0001 	orreq.w	r0, r0, #1
 80099b0:	3618      	adds	r6, #24
 80099b2:	42b4      	cmp	r4, r6
 80099b4:	bf08      	it	eq
 80099b6:	f040 0001 	orreq.w	r0, r0, #1
 80099ba:	f506 7656 	add.w	r6, r6, #856	; 0x358
 80099be:	42b4      	cmp	r4, r6
 80099c0:	bf08      	it	eq
 80099c2:	f040 0001 	orreq.w	r0, r0, #1
 80099c6:	3618      	adds	r6, #24
 80099c8:	42b4      	cmp	r4, r6
 80099ca:	bf08      	it	eq
 80099cc:	f040 0001 	orreq.w	r0, r0, #1
 80099d0:	3618      	adds	r6, #24
 80099d2:	42b4      	cmp	r4, r6
 80099d4:	bf08      	it	eq
 80099d6:	f040 0001 	orreq.w	r0, r0, #1
 80099da:	3618      	adds	r6, #24
 80099dc:	42b4      	cmp	r4, r6
 80099de:	bf08      	it	eq
 80099e0:	f040 0001 	orreq.w	r0, r0, #1
 80099e4:	3618      	adds	r6, #24
 80099e6:	42b4      	cmp	r4, r6
 80099e8:	bf08      	it	eq
 80099ea:	f040 0001 	orreq.w	r0, r0, #1
 80099ee:	3618      	adds	r6, #24
 80099f0:	42b4      	cmp	r4, r6
 80099f2:	bf08      	it	eq
 80099f4:	f040 0001 	orreq.w	r0, r0, #1
 80099f8:	3618      	adds	r6, #24
 80099fa:	42b4      	cmp	r4, r6
 80099fc:	bf08      	it	eq
 80099fe:	f040 0001 	orreq.w	r0, r0, #1
 8009a02:	b918      	cbnz	r0, 8009a0c <HAL_DMA_Start_IT+0x1f8>
 8009a04:	4838      	ldr	r0, [pc, #224]	; (8009ae8 <HAL_DMA_Start_IT+0x2d4>)
 8009a06:	4284      	cmp	r4, r0
 8009a08:	f040 817b 	bne.w	8009d02 <HAL_DMA_Start_IT+0x4ee>
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009a0c:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009a10:	f000 041f 	and.w	r4, r0, #31
 8009a14:	203f      	movs	r0, #63	; 0x3f
 8009a16:	40a0      	lsls	r0, r4
 8009a18:	60a8      	str	r0, [r5, #8]
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a1a:	f8dc 4000 	ldr.w	r4, [ip]
 8009a1e:	6820      	ldr	r0, [r4, #0]
 8009a20:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8009a24:	6020      	str	r0, [r4, #0]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009a26:	f8dc 0000 	ldr.w	r0, [ip]
 8009a2a:	6043      	str	r3, [r0, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a2c:	f8dc 3008 	ldr.w	r3, [ip, #8]
 8009a30:	2b40      	cmp	r3, #64	; 0x40
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009a32:	f8dc 3000 	ldr.w	r3, [ip]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a36:	f000 815b 	beq.w	8009cf0 <HAL_DMA_Start_IT+0x4dc>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009a3a:	6099      	str	r1, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009a3c:	f8dc 3000 	ldr.w	r3, [ip]
 8009a40:	60da      	str	r2, [r3, #12]
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a42:	f8dc 4000 	ldr.w	r4, [ip]
 8009a46:	4b25      	ldr	r3, [pc, #148]	; (8009adc <HAL_DMA_Start_IT+0x2c8>)
 8009a48:	4923      	ldr	r1, [pc, #140]	; (8009ad8 <HAL_DMA_Start_IT+0x2c4>)
 8009a4a:	4a28      	ldr	r2, [pc, #160]	; (8009aec <HAL_DMA_Start_IT+0x2d8>)
 8009a4c:	428c      	cmp	r4, r1
 8009a4e:	bf18      	it	ne
 8009a50:	429c      	cmpne	r4, r3
 8009a52:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009a56:	bf0c      	ite	eq
 8009a58:	2301      	moveq	r3, #1
 8009a5a:	2300      	movne	r3, #0
 8009a5c:	4294      	cmp	r4, r2
 8009a5e:	bf08      	it	eq
 8009a60:	f043 0301 	orreq.w	r3, r3, #1
 8009a64:	3230      	adds	r2, #48	; 0x30
 8009a66:	428c      	cmp	r4, r1
 8009a68:	bf08      	it	eq
 8009a6a:	f043 0301 	orreq.w	r3, r3, #1
 8009a6e:	3130      	adds	r1, #48	; 0x30
 8009a70:	4294      	cmp	r4, r2
 8009a72:	bf08      	it	eq
 8009a74:	f043 0301 	orreq.w	r3, r3, #1
 8009a78:	3230      	adds	r2, #48	; 0x30
 8009a7a:	428c      	cmp	r4, r1
 8009a7c:	bf08      	it	eq
 8009a7e:	f043 0301 	orreq.w	r3, r3, #1
 8009a82:	3130      	adds	r1, #48	; 0x30
 8009a84:	4294      	cmp	r4, r2
 8009a86:	bf08      	it	eq
 8009a88:	f043 0301 	orreq.w	r3, r3, #1
 8009a8c:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8009a90:	428c      	cmp	r4, r1
 8009a92:	bf08      	it	eq
 8009a94:	f043 0301 	orreq.w	r3, r3, #1
 8009a98:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009a9c:	4294      	cmp	r4, r2
 8009a9e:	bf08      	it	eq
 8009aa0:	f043 0301 	orreq.w	r3, r3, #1
 8009aa4:	3230      	adds	r2, #48	; 0x30
 8009aa6:	428c      	cmp	r4, r1
 8009aa8:	bf08      	it	eq
 8009aaa:	f043 0301 	orreq.w	r3, r3, #1
 8009aae:	3130      	adds	r1, #48	; 0x30
 8009ab0:	4294      	cmp	r4, r2
 8009ab2:	bf08      	it	eq
 8009ab4:	f043 0301 	orreq.w	r3, r3, #1
 8009ab8:	3230      	adds	r2, #48	; 0x30
 8009aba:	428c      	cmp	r4, r1
 8009abc:	bf08      	it	eq
 8009abe:	f043 0301 	orreq.w	r3, r3, #1
 8009ac2:	3130      	adds	r1, #48	; 0x30
 8009ac4:	4294      	cmp	r4, r2
 8009ac6:	bf08      	it	eq
 8009ac8:	f043 0301 	orreq.w	r3, r3, #1
 8009acc:	3230      	adds	r2, #48	; 0x30
 8009ace:	428c      	cmp	r4, r1
 8009ad0:	bf08      	it	eq
 8009ad2:	f043 0301 	orreq.w	r3, r3, #1
 8009ad6:	e00b      	b.n	8009af0 <HAL_DMA_Start_IT+0x2dc>
 8009ad8:	40020028 	.word	0x40020028
 8009adc:	40020010 	.word	0x40020010
 8009ae0:	58025408 	.word	0x58025408
 8009ae4:	58025494 	.word	0x58025494
 8009ae8:	400204b8 	.word	0x400204b8
 8009aec:	40020040 	.word	0x40020040
 8009af0:	4294      	cmp	r4, r2
 8009af2:	bf08      	it	eq
 8009af4:	f043 0301 	orreq.w	r3, r3, #1
 8009af8:	b91b      	cbnz	r3, 8009b02 <HAL_DMA_Start_IT+0x2ee>
 8009afa:	4b9b      	ldr	r3, [pc, #620]	; (8009d68 <HAL_DMA_Start_IT+0x554>)
 8009afc:	429c      	cmp	r4, r3
 8009afe:	f040 8143 	bne.w	8009d88 <HAL_DMA_Start_IT+0x574>
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8009b02:	6823      	ldr	r3, [r4, #0]
 8009b04:	f023 031e 	bic.w	r3, r3, #30
 8009b08:	f043 0316 	orr.w	r3, r3, #22
 8009b0c:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009b0e:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009b12:	b12b      	cbz	r3, 8009b20 <HAL_DMA_Start_IT+0x30c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8009b14:	f8dc 2000 	ldr.w	r2, [ip]
 8009b18:	6813      	ldr	r3, [r2, #0]
 8009b1a:	f043 0308 	orr.w	r3, r3, #8
 8009b1e:	6013      	str	r3, [r2, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b20:	f8dc 4000 	ldr.w	r4, [ip]
 8009b24:	4b91      	ldr	r3, [pc, #580]	; (8009d6c <HAL_DMA_Start_IT+0x558>)
 8009b26:	4992      	ldr	r1, [pc, #584]	; (8009d70 <HAL_DMA_Start_IT+0x55c>)
 8009b28:	4a92      	ldr	r2, [pc, #584]	; (8009d74 <HAL_DMA_Start_IT+0x560>)
 8009b2a:	428c      	cmp	r4, r1
 8009b2c:	bf18      	it	ne
 8009b2e:	429c      	cmpne	r4, r3
 8009b30:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8009b34:	bf0c      	ite	eq
 8009b36:	2301      	moveq	r3, #1
 8009b38:	2300      	movne	r3, #0
 8009b3a:	4294      	cmp	r4, r2
 8009b3c:	bf08      	it	eq
 8009b3e:	f043 0301 	orreq.w	r3, r3, #1
 8009b42:	3230      	adds	r2, #48	; 0x30
 8009b44:	428c      	cmp	r4, r1
 8009b46:	bf08      	it	eq
 8009b48:	f043 0301 	orreq.w	r3, r3, #1
 8009b4c:	3130      	adds	r1, #48	; 0x30
 8009b4e:	4294      	cmp	r4, r2
 8009b50:	bf08      	it	eq
 8009b52:	f043 0301 	orreq.w	r3, r3, #1
 8009b56:	3230      	adds	r2, #48	; 0x30
 8009b58:	428c      	cmp	r4, r1
 8009b5a:	bf08      	it	eq
 8009b5c:	f043 0301 	orreq.w	r3, r3, #1
 8009b60:	3130      	adds	r1, #48	; 0x30
 8009b62:	4294      	cmp	r4, r2
 8009b64:	bf08      	it	eq
 8009b66:	f043 0301 	orreq.w	r3, r3, #1
 8009b6a:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8009b6e:	428c      	cmp	r4, r1
 8009b70:	bf08      	it	eq
 8009b72:	f043 0301 	orreq.w	r3, r3, #1
 8009b76:	f501 715c 	add.w	r1, r1, #880	; 0x370
 8009b7a:	4294      	cmp	r4, r2
 8009b7c:	bf08      	it	eq
 8009b7e:	f043 0301 	orreq.w	r3, r3, #1
 8009b82:	3230      	adds	r2, #48	; 0x30
 8009b84:	428c      	cmp	r4, r1
 8009b86:	bf08      	it	eq
 8009b88:	f043 0301 	orreq.w	r3, r3, #1
 8009b8c:	3130      	adds	r1, #48	; 0x30
 8009b8e:	4294      	cmp	r4, r2
 8009b90:	bf08      	it	eq
 8009b92:	f043 0301 	orreq.w	r3, r3, #1
 8009b96:	3230      	adds	r2, #48	; 0x30
 8009b98:	428c      	cmp	r4, r1
 8009b9a:	bf08      	it	eq
 8009b9c:	f043 0301 	orreq.w	r3, r3, #1
 8009ba0:	3130      	adds	r1, #48	; 0x30
 8009ba2:	4294      	cmp	r4, r2
 8009ba4:	bf08      	it	eq
 8009ba6:	f043 0301 	orreq.w	r3, r3, #1
 8009baa:	3230      	adds	r2, #48	; 0x30
 8009bac:	428c      	cmp	r4, r1
 8009bae:	bf08      	it	eq
 8009bb0:	f043 0301 	orreq.w	r3, r3, #1
 8009bb4:	3130      	adds	r1, #48	; 0x30
 8009bb6:	4294      	cmp	r4, r2
 8009bb8:	bf08      	it	eq
 8009bba:	f043 0301 	orreq.w	r3, r3, #1
 8009bbe:	4a6e      	ldr	r2, [pc, #440]	; (8009d78 <HAL_DMA_Start_IT+0x564>)
 8009bc0:	428c      	cmp	r4, r1
 8009bc2:	bf08      	it	eq
 8009bc4:	f043 0301 	orreq.w	r3, r3, #1
 8009bc8:	496c      	ldr	r1, [pc, #432]	; (8009d7c <HAL_DMA_Start_IT+0x568>)
 8009bca:	4294      	cmp	r4, r2
 8009bcc:	bf08      	it	eq
 8009bce:	f043 0301 	orreq.w	r3, r3, #1
 8009bd2:	3228      	adds	r2, #40	; 0x28
 8009bd4:	428c      	cmp	r4, r1
 8009bd6:	bf08      	it	eq
 8009bd8:	f043 0301 	orreq.w	r3, r3, #1
 8009bdc:	3128      	adds	r1, #40	; 0x28
 8009bde:	4294      	cmp	r4, r2
 8009be0:	bf08      	it	eq
 8009be2:	f043 0301 	orreq.w	r3, r3, #1
 8009be6:	3228      	adds	r2, #40	; 0x28
 8009be8:	428c      	cmp	r4, r1
 8009bea:	bf08      	it	eq
 8009bec:	f043 0301 	orreq.w	r3, r3, #1
 8009bf0:	3128      	adds	r1, #40	; 0x28
 8009bf2:	4294      	cmp	r4, r2
 8009bf4:	bf08      	it	eq
 8009bf6:	f043 0301 	orreq.w	r3, r3, #1
 8009bfa:	3228      	adds	r2, #40	; 0x28
 8009bfc:	428c      	cmp	r4, r1
 8009bfe:	bf08      	it	eq
 8009c00:	f043 0301 	orreq.w	r3, r3, #1
 8009c04:	4294      	cmp	r4, r2
 8009c06:	bf08      	it	eq
 8009c08:	f043 0301 	orreq.w	r3, r3, #1
 8009c0c:	b913      	cbnz	r3, 8009c14 <HAL_DMA_Start_IT+0x400>
 8009c0e:	4b5c      	ldr	r3, [pc, #368]	; (8009d80 <HAL_DMA_Start_IT+0x56c>)
 8009c10:	429c      	cmp	r4, r3
 8009c12:	d111      	bne.n	8009c38 <HAL_DMA_Start_IT+0x424>
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009c14:	f8dc 3060 	ldr.w	r3, [ip, #96]	; 0x60
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	03d2      	lsls	r2, r2, #15
 8009c1c:	d503      	bpl.n	8009c26 <HAL_DMA_Start_IT+0x412>
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c24:	601a      	str	r2, [r3, #0]
      if(hdma->DMAmuxRequestGen != 0U)
 8009c26:	f8dc 306c 	ldr.w	r3, [ip, #108]	; 0x6c
 8009c2a:	b11b      	cbz	r3, 8009c34 <HAL_DMA_Start_IT+0x420>
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009c2c:	681a      	ldr	r2, [r3, #0]
 8009c2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c32:	601a      	str	r2, [r3, #0]
 8009c34:	f8dc 4000 	ldr.w	r4, [ip]
    __HAL_DMA_ENABLE(hdma);
 8009c38:	4b4c      	ldr	r3, [pc, #304]	; (8009d6c <HAL_DMA_Start_IT+0x558>)
 8009c3a:	494d      	ldr	r1, [pc, #308]	; (8009d70 <HAL_DMA_Start_IT+0x55c>)
 8009c3c:	4a4d      	ldr	r2, [pc, #308]	; (8009d74 <HAL_DMA_Start_IT+0x560>)
 8009c3e:	428c      	cmp	r4, r1
 8009c40:	bf18      	it	ne
 8009c42:	429c      	cmpne	r4, r3
 8009c44:	484f      	ldr	r0, [pc, #316]	; (8009d84 <HAL_DMA_Start_IT+0x570>)
 8009c46:	f101 0160 	add.w	r1, r1, #96	; 0x60
 8009c4a:	bf0c      	ite	eq
 8009c4c:	2301      	moveq	r3, #1
 8009c4e:	2300      	movne	r3, #0
 8009c50:	4294      	cmp	r4, r2
 8009c52:	bf08      	it	eq
 8009c54:	f043 0301 	orreq.w	r3, r3, #1
 8009c58:	3230      	adds	r2, #48	; 0x30
 8009c5a:	4284      	cmp	r4, r0
 8009c5c:	bf08      	it	eq
 8009c5e:	f043 0301 	orreq.w	r3, r3, #1
 8009c62:	3060      	adds	r0, #96	; 0x60
 8009c64:	4294      	cmp	r4, r2
 8009c66:	bf08      	it	eq
 8009c68:	f043 0301 	orreq.w	r3, r3, #1
 8009c6c:	3230      	adds	r2, #48	; 0x30
 8009c6e:	428c      	cmp	r4, r1
 8009c70:	bf08      	it	eq
 8009c72:	f043 0301 	orreq.w	r3, r3, #1
 8009c76:	f501 7168 	add.w	r1, r1, #928	; 0x3a0
 8009c7a:	4294      	cmp	r4, r2
 8009c7c:	bf08      	it	eq
 8009c7e:	f043 0301 	orreq.w	r3, r3, #1
 8009c82:	f502 725c 	add.w	r2, r2, #880	; 0x370
 8009c86:	4284      	cmp	r4, r0
 8009c88:	bf08      	it	eq
 8009c8a:	f043 0301 	orreq.w	r3, r3, #1
 8009c8e:	f500 7068 	add.w	r0, r0, #928	; 0x3a0
 8009c92:	4294      	cmp	r4, r2
 8009c94:	bf08      	it	eq
 8009c96:	f043 0301 	orreq.w	r3, r3, #1
 8009c9a:	3230      	adds	r2, #48	; 0x30
 8009c9c:	428c      	cmp	r4, r1
 8009c9e:	bf08      	it	eq
 8009ca0:	f043 0301 	orreq.w	r3, r3, #1
 8009ca4:	3160      	adds	r1, #96	; 0x60
 8009ca6:	4294      	cmp	r4, r2
 8009ca8:	bf08      	it	eq
 8009caa:	f043 0301 	orreq.w	r3, r3, #1
 8009cae:	3230      	adds	r2, #48	; 0x30
 8009cb0:	4284      	cmp	r4, r0
 8009cb2:	bf08      	it	eq
 8009cb4:	f043 0301 	orreq.w	r3, r3, #1
 8009cb8:	4294      	cmp	r4, r2
 8009cba:	bf08      	it	eq
 8009cbc:	f043 0301 	orreq.w	r3, r3, #1
 8009cc0:	3230      	adds	r2, #48	; 0x30
 8009cc2:	428c      	cmp	r4, r1
 8009cc4:	bf08      	it	eq
 8009cc6:	f043 0301 	orreq.w	r3, r3, #1
 8009cca:	4294      	cmp	r4, r2
 8009ccc:	bf08      	it	eq
 8009cce:	f043 0301 	orreq.w	r3, r3, #1
 8009cd2:	b933      	cbnz	r3, 8009ce2 <HAL_DMA_Start_IT+0x4ce>
 8009cd4:	3060      	adds	r0, #96	; 0x60
 8009cd6:	1a20      	subs	r0, r4, r0
 8009cd8:	fab0 f080 	clz	r0, r0
 8009cdc:	0940      	lsrs	r0, r0, #5
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d03d      	beq.n	8009d5e <HAL_DMA_Start_IT+0x54a>
 8009ce2:	6823      	ldr	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ce4:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	6023      	str	r3, [r4, #0]
}
 8009cec:	bc70      	pop	{r4, r5, r6}
 8009cee:	4770      	bx	lr
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009cf0:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009cf2:	f8dc 3000 	ldr.w	r3, [ip]
 8009cf6:	60d9      	str	r1, [r3, #12]
 8009cf8:	e6a3      	b.n	8009a42 <HAL_DMA_Start_IT+0x22e>
    return HAL_ERROR;
 8009cfa:	2001      	movs	r0, #1
 8009cfc:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8009cfe:	2002      	movs	r0, #2
}
 8009d00:	4770      	bx	lr
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009d02:	481d      	ldr	r0, [pc, #116]	; (8009d78 <HAL_DMA_Start_IT+0x564>)
 8009d04:	4e1d      	ldr	r6, [pc, #116]	; (8009d7c <HAL_DMA_Start_IT+0x568>)
 8009d06:	42b4      	cmp	r4, r6
 8009d08:	bf18      	it	ne
 8009d0a:	4284      	cmpne	r4, r0
 8009d0c:	f106 0614 	add.w	r6, r6, #20
 8009d10:	bf0c      	ite	eq
 8009d12:	2001      	moveq	r0, #1
 8009d14:	2000      	movne	r0, #0
 8009d16:	42b4      	cmp	r4, r6
 8009d18:	bf08      	it	eq
 8009d1a:	f040 0001 	orreq.w	r0, r0, #1
 8009d1e:	3614      	adds	r6, #20
 8009d20:	42b4      	cmp	r4, r6
 8009d22:	bf08      	it	eq
 8009d24:	f040 0001 	orreq.w	r0, r0, #1
 8009d28:	3614      	adds	r6, #20
 8009d2a:	42b4      	cmp	r4, r6
 8009d2c:	bf08      	it	eq
 8009d2e:	f040 0001 	orreq.w	r0, r0, #1
 8009d32:	3614      	adds	r6, #20
 8009d34:	42b4      	cmp	r4, r6
 8009d36:	bf08      	it	eq
 8009d38:	f040 0001 	orreq.w	r0, r0, #1
 8009d3c:	3614      	adds	r6, #20
 8009d3e:	42b4      	cmp	r4, r6
 8009d40:	bf08      	it	eq
 8009d42:	f040 0001 	orreq.w	r0, r0, #1
 8009d46:	b910      	cbnz	r0, 8009d4e <HAL_DMA_Start_IT+0x53a>
 8009d48:	480d      	ldr	r0, [pc, #52]	; (8009d80 <HAL_DMA_Start_IT+0x56c>)
 8009d4a:	4284      	cmp	r4, r0
 8009d4c:	d11c      	bne.n	8009d88 <HAL_DMA_Start_IT+0x574>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009d4e:	f8dc 005c 	ldr.w	r0, [ip, #92]	; 0x5c
 8009d52:	f000 041f 	and.w	r4, r0, #31
 8009d56:	2001      	movs	r0, #1
 8009d58:	40a0      	lsls	r0, r4
 8009d5a:	6068      	str	r0, [r5, #4]
 8009d5c:	e663      	b.n	8009a26 <HAL_DMA_Start_IT+0x212>
    __HAL_DMA_ENABLE(hdma);
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	f043 0301 	orr.w	r3, r3, #1
 8009d64:	6023      	str	r3, [r4, #0]
 8009d66:	e56d      	b.n	8009844 <HAL_DMA_Start_IT+0x30>
 8009d68:	400204b8 	.word	0x400204b8
 8009d6c:	40020010 	.word	0x40020010
 8009d70:	40020028 	.word	0x40020028
 8009d74:	40020040 	.word	0x40020040
 8009d78:	58025408 	.word	0x58025408
 8009d7c:	5802541c 	.word	0x5802541c
 8009d80:	58025494 	.word	0x58025494
 8009d84:	40020058 	.word	0x40020058
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009d88:	6823      	ldr	r3, [r4, #0]
 8009d8a:	f023 030e 	bic.w	r3, r3, #14
 8009d8e:	f043 030a 	orr.w	r3, r3, #10
 8009d92:	6023      	str	r3, [r4, #0]
      if(hdma->XferHalfCpltCallback != NULL)
 8009d94:	f8dc 3040 	ldr.w	r3, [ip, #64]	; 0x40
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	f43f aec1 	beq.w	8009b20 <HAL_DMA_Start_IT+0x30c>
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009d9e:	f8dc 2000 	ldr.w	r2, [ip]
 8009da2:	6813      	ldr	r3, [r2, #0]
 8009da4:	f043 0304 	orr.w	r3, r3, #4
 8009da8:	6013      	str	r3, [r2, #0]
 8009daa:	e6b9      	b.n	8009b20 <HAL_DMA_Start_IT+0x30c>

08009dac <HAL_DMA_Abort_IT>:
  if(hdma == NULL)
 8009dac:	2800      	cmp	r0, #0
 8009dae:	d065      	beq.n	8009e7c <HAL_DMA_Abort_IT+0xd0>
{
 8009db0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009db4:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
 8009db8:	4603      	mov	r3, r0
 8009dba:	2a02      	cmp	r2, #2
 8009dbc:	d159      	bne.n	8009e72 <HAL_DMA_Abort_IT+0xc6>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009dbe:	6801      	ldr	r1, [r0, #0]
 8009dc0:	4883      	ldr	r0, [pc, #524]	; (8009fd0 <HAL_DMA_Abort_IT+0x224>)
 8009dc2:	4281      	cmp	r1, r0
 8009dc4:	d04b      	beq.n	8009e5e <HAL_DMA_Abort_IT+0xb2>
 8009dc6:	4c83      	ldr	r4, [pc, #524]	; (8009fd4 <HAL_DMA_Abort_IT+0x228>)
 8009dc8:	42a1      	cmp	r1, r4
 8009dca:	d048      	beq.n	8009e5e <HAL_DMA_Abort_IT+0xb2>
 8009dcc:	f8df a228 	ldr.w	sl, [pc, #552]	; 8009ff8 <HAL_DMA_Abort_IT+0x24c>
 8009dd0:	f8df b214 	ldr.w	fp, [pc, #532]	; 8009fe8 <HAL_DMA_Abort_IT+0x23c>
 8009dd4:	f8df 9224 	ldr.w	r9, [pc, #548]	; 8009ffc <HAL_DMA_Abort_IT+0x250>
 8009dd8:	4559      	cmp	r1, fp
 8009dda:	bf18      	it	ne
 8009ddc:	4551      	cmpne	r1, sl
 8009dde:	f8df 8220 	ldr.w	r8, [pc, #544]	; 800a000 <HAL_DMA_Abort_IT+0x254>
 8009de2:	f8df e220 	ldr.w	lr, [pc, #544]	; 800a004 <HAL_DMA_Abort_IT+0x258>
 8009de6:	bf0c      	ite	eq
 8009de8:	2201      	moveq	r2, #1
 8009dea:	2200      	movne	r2, #0
 8009dec:	f8df c218 	ldr.w	ip, [pc, #536]	; 800a008 <HAL_DMA_Abort_IT+0x25c>
 8009df0:	4549      	cmp	r1, r9
 8009df2:	bf08      	it	eq
 8009df4:	f042 0201 	orreq.w	r2, r2, #1
 8009df8:	4d77      	ldr	r5, [pc, #476]	; (8009fd8 <HAL_DMA_Abort_IT+0x22c>)
 8009dfa:	4f78      	ldr	r7, [pc, #480]	; (8009fdc <HAL_DMA_Abort_IT+0x230>)
 8009dfc:	4541      	cmp	r1, r8
 8009dfe:	bf08      	it	eq
 8009e00:	f042 0201 	orreq.w	r2, r2, #1
 8009e04:	4e76      	ldr	r6, [pc, #472]	; (8009fe0 <HAL_DMA_Abort_IT+0x234>)
 8009e06:	4571      	cmp	r1, lr
 8009e08:	bf08      	it	eq
 8009e0a:	f042 0201 	orreq.w	r2, r2, #1
 8009e0e:	4561      	cmp	r1, ip
 8009e10:	bf08      	it	eq
 8009e12:	f042 0201 	orreq.w	r2, r2, #1
 8009e16:	42a9      	cmp	r1, r5
 8009e18:	bf08      	it	eq
 8009e1a:	f042 0201 	orreq.w	r2, r2, #1
 8009e1e:	3518      	adds	r5, #24
 8009e20:	42a9      	cmp	r1, r5
 8009e22:	bf08      	it	eq
 8009e24:	f042 0201 	orreq.w	r2, r2, #1
 8009e28:	3518      	adds	r5, #24
 8009e2a:	42a9      	cmp	r1, r5
 8009e2c:	bf08      	it	eq
 8009e2e:	f042 0201 	orreq.w	r2, r2, #1
 8009e32:	3518      	adds	r5, #24
 8009e34:	42a9      	cmp	r1, r5
 8009e36:	bf08      	it	eq
 8009e38:	f042 0201 	orreq.w	r2, r2, #1
 8009e3c:	3548      	adds	r5, #72	; 0x48
 8009e3e:	42b9      	cmp	r1, r7
 8009e40:	bf08      	it	eq
 8009e42:	f042 0201 	orreq.w	r2, r2, #1
 8009e46:	42b1      	cmp	r1, r6
 8009e48:	bf08      	it	eq
 8009e4a:	f042 0201 	orreq.w	r2, r2, #1
 8009e4e:	42a9      	cmp	r1, r5
 8009e50:	bf08      	it	eq
 8009e52:	f042 0201 	orreq.w	r2, r2, #1
 8009e56:	b912      	cbnz	r2, 8009e5e <HAL_DMA_Abort_IT+0xb2>
 8009e58:	4a62      	ldr	r2, [pc, #392]	; (8009fe4 <HAL_DMA_Abort_IT+0x238>)
 8009e5a:	4291      	cmp	r1, r2
 8009e5c:	d110      	bne.n	8009e80 <HAL_DMA_Abort_IT+0xd4>
      hdma->State = HAL_DMA_STATE_ABORT;
 8009e5e:	2204      	movs	r2, #4
  return HAL_OK;
 8009e60:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
 8009e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8009e66:	680b      	ldr	r3, [r1, #0]
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	600b      	str	r3, [r1, #0]
}
 8009e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e72:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
 8009e74:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e76:	655a      	str	r2, [r3, #84]	; 0x54
}
 8009e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_ERROR;
 8009e7c:	2001      	movs	r0, #1
}
 8009e7e:	4770      	bx	lr
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009e80:	680a      	ldr	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e82:	4c54      	ldr	r4, [pc, #336]	; (8009fd4 <HAL_DMA_Abort_IT+0x228>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009e84:	f022 020e 	bic.w	r2, r2, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e88:	4857      	ldr	r0, [pc, #348]	; (8009fe8 <HAL_DMA_Abort_IT+0x23c>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8009e8a:	600a      	str	r2, [r1, #0]
      __HAL_DMA_DISABLE(hdma);
 8009e8c:	6819      	ldr	r1, [r3, #0]
 8009e8e:	680a      	ldr	r2, [r1, #0]
 8009e90:	f022 0201 	bic.w	r2, r2, #1
 8009e94:	600a      	str	r2, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009e96:	4a4e      	ldr	r2, [pc, #312]	; (8009fd0 <HAL_DMA_Abort_IT+0x224>)
 8009e98:	6819      	ldr	r1, [r3, #0]
 8009e9a:	42a1      	cmp	r1, r4
 8009e9c:	bf18      	it	ne
 8009e9e:	4291      	cmpne	r1, r2
 8009ea0:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8009ea4:	bf0c      	ite	eq
 8009ea6:	2201      	moveq	r2, #1
 8009ea8:	2200      	movne	r2, #0
 8009eaa:	4281      	cmp	r1, r0
 8009eac:	bf08      	it	eq
 8009eae:	f042 0201 	orreq.w	r2, r2, #1
 8009eb2:	3030      	adds	r0, #48	; 0x30
 8009eb4:	42a1      	cmp	r1, r4
 8009eb6:	bf08      	it	eq
 8009eb8:	f042 0201 	orreq.w	r2, r2, #1
 8009ebc:	3430      	adds	r4, #48	; 0x30
 8009ebe:	4281      	cmp	r1, r0
 8009ec0:	bf08      	it	eq
 8009ec2:	f042 0201 	orreq.w	r2, r2, #1
 8009ec6:	3030      	adds	r0, #48	; 0x30
 8009ec8:	42a1      	cmp	r1, r4
 8009eca:	bf08      	it	eq
 8009ecc:	f042 0201 	orreq.w	r2, r2, #1
 8009ed0:	3430      	adds	r4, #48	; 0x30
 8009ed2:	4281      	cmp	r1, r0
 8009ed4:	bf08      	it	eq
 8009ed6:	f042 0201 	orreq.w	r2, r2, #1
 8009eda:	f500 705c 	add.w	r0, r0, #880	; 0x370
 8009ede:	42a1      	cmp	r1, r4
 8009ee0:	bf08      	it	eq
 8009ee2:	f042 0201 	orreq.w	r2, r2, #1
 8009ee6:	f504 745c 	add.w	r4, r4, #880	; 0x370
 8009eea:	4281      	cmp	r1, r0
 8009eec:	bf08      	it	eq
 8009eee:	f042 0201 	orreq.w	r2, r2, #1
 8009ef2:	3030      	adds	r0, #48	; 0x30
 8009ef4:	42a1      	cmp	r1, r4
 8009ef6:	bf08      	it	eq
 8009ef8:	f042 0201 	orreq.w	r2, r2, #1
 8009efc:	3430      	adds	r4, #48	; 0x30
 8009efe:	4281      	cmp	r1, r0
 8009f00:	bf08      	it	eq
 8009f02:	f042 0201 	orreq.w	r2, r2, #1
 8009f06:	3030      	adds	r0, #48	; 0x30
 8009f08:	42a1      	cmp	r1, r4
 8009f0a:	bf08      	it	eq
 8009f0c:	f042 0201 	orreq.w	r2, r2, #1
 8009f10:	3430      	adds	r4, #48	; 0x30
 8009f12:	4281      	cmp	r1, r0
 8009f14:	bf08      	it	eq
 8009f16:	f042 0201 	orreq.w	r2, r2, #1
 8009f1a:	3030      	adds	r0, #48	; 0x30
 8009f1c:	42a1      	cmp	r1, r4
 8009f1e:	bf08      	it	eq
 8009f20:	f042 0201 	orreq.w	r2, r2, #1
 8009f24:	3430      	adds	r4, #48	; 0x30
 8009f26:	4281      	cmp	r1, r0
 8009f28:	bf08      	it	eq
 8009f2a:	f042 0201 	orreq.w	r2, r2, #1
 8009f2e:	482f      	ldr	r0, [pc, #188]	; (8009fec <HAL_DMA_Abort_IT+0x240>)
 8009f30:	42a1      	cmp	r1, r4
 8009f32:	bf08      	it	eq
 8009f34:	f042 0201 	orreq.w	r2, r2, #1
 8009f38:	4c2d      	ldr	r4, [pc, #180]	; (8009ff0 <HAL_DMA_Abort_IT+0x244>)
 8009f3a:	4281      	cmp	r1, r0
 8009f3c:	bf08      	it	eq
 8009f3e:	f042 0201 	orreq.w	r2, r2, #1
 8009f42:	3028      	adds	r0, #40	; 0x28
 8009f44:	42a1      	cmp	r1, r4
 8009f46:	bf08      	it	eq
 8009f48:	f042 0201 	orreq.w	r2, r2, #1
 8009f4c:	3428      	adds	r4, #40	; 0x28
 8009f4e:	4281      	cmp	r1, r0
 8009f50:	bf08      	it	eq
 8009f52:	f042 0201 	orreq.w	r2, r2, #1
 8009f56:	3028      	adds	r0, #40	; 0x28
 8009f58:	42a1      	cmp	r1, r4
 8009f5a:	bf08      	it	eq
 8009f5c:	f042 0201 	orreq.w	r2, r2, #1
 8009f60:	3428      	adds	r4, #40	; 0x28
 8009f62:	4281      	cmp	r1, r0
 8009f64:	bf08      	it	eq
 8009f66:	f042 0201 	orreq.w	r2, r2, #1
 8009f6a:	3028      	adds	r0, #40	; 0x28
 8009f6c:	42a1      	cmp	r1, r4
 8009f6e:	bf08      	it	eq
 8009f70:	f042 0201 	orreq.w	r2, r2, #1
 8009f74:	4281      	cmp	r1, r0
 8009f76:	bf08      	it	eq
 8009f78:	f042 0201 	orreq.w	r2, r2, #1
 8009f7c:	b912      	cbnz	r2, 8009f84 <HAL_DMA_Abort_IT+0x1d8>
 8009f7e:	4a1d      	ldr	r2, [pc, #116]	; (8009ff4 <HAL_DMA_Abort_IT+0x248>)
 8009f80:	4291      	cmp	r1, r2
 8009f82:	d117      	bne.n	8009fb4 <HAL_DMA_Abort_IT+0x208>
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f84:	6e18      	ldr	r0, [r3, #96]	; 0x60
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f86:	2201      	movs	r2, #1
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009f88:	6801      	ldr	r1, [r0, #0]
 8009f8a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009f8e:	6001      	str	r1, [r0, #0]
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009f90:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009f94:	f001 011f 	and.w	r1, r1, #31
 8009f98:	408a      	lsls	r2, r1
 8009f9a:	6042      	str	r2, [r0, #4]
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009f9c:	e9d3 2119 	ldrd	r2, r1, [r3, #100]	; 0x64
 8009fa0:	6051      	str	r1, [r2, #4]
        if(hdma->DMAmuxRequestGen != 0U)
 8009fa2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8009fa4:	b132      	cbz	r2, 8009fb4 <HAL_DMA_Abort_IT+0x208>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009fa6:	6811      	ldr	r1, [r2, #0]
 8009fa8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8009fac:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009fae:	e9d3 211c 	ldrd	r2, r1, [r3, #112]	; 0x70
 8009fb2:	6051      	str	r1, [r2, #4]
      hdma->State = HAL_DMA_STATE_READY;
 8009fb4:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
 8009fb6:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
 8009fb8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
 8009fba:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 8009fbe:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
 8009fc2:	b11a      	cbz	r2, 8009fcc <HAL_DMA_Abort_IT+0x220>
        hdma->XferAbortCallback(hdma);
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	4790      	blx	r2
  return HAL_OK;
 8009fc8:	4620      	mov	r0, r4
 8009fca:	e755      	b.n	8009e78 <HAL_DMA_Abort_IT+0xcc>
 8009fcc:	4610      	mov	r0, r2
 8009fce:	e753      	b.n	8009e78 <HAL_DMA_Abort_IT+0xcc>
 8009fd0:	40020010 	.word	0x40020010
 8009fd4:	40020028 	.word	0x40020028
 8009fd8:	40020410 	.word	0x40020410
 8009fdc:	40020470 	.word	0x40020470
 8009fe0:	40020488 	.word	0x40020488
 8009fe4:	400204b8 	.word	0x400204b8
 8009fe8:	40020040 	.word	0x40020040
 8009fec:	58025408 	.word	0x58025408
 8009ff0:	5802541c 	.word	0x5802541c
 8009ff4:	58025494 	.word	0x58025494
 8009ff8:	40020058 	.word	0x40020058
 8009ffc:	40020070 	.word	0x40020070
 800a000:	40020088 	.word	0x40020088
 800a004:	400200a0 	.word	0x400200a0
 800a008:	400200b8 	.word	0x400200b8

0800a00c <HAL_DMA_IRQHandler>:
{
 800a00c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __IO uint32_t count = 0U;
 800a010:	2200      	movs	r2, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 800a012:	4b9e      	ldr	r3, [pc, #632]	; (800a28c <HAL_DMA_IRQHandler+0x280>)
{
 800a014:	b082      	sub	sp, #8
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a016:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800a018:	681e      	ldr	r6, [r3, #0]
{
 800a01a:	4680      	mov	r8, r0
  __IO uint32_t count = 0U;
 800a01c:	9201      	str	r2, [sp, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a01e:	6803      	ldr	r3, [r0, #0]
 800a020:	4a9b      	ldr	r2, [pc, #620]	; (800a290 <HAL_DMA_IRQHandler+0x284>)
  tmpisr_dma  = regs_dma->ISR;
 800a022:	682c      	ldr	r4, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a024:	4293      	cmp	r3, r2
  tmpisr_bdma = regs_bdma->ISR;
 800a026:	6829      	ldr	r1, [r5, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a028:	d048      	beq.n	800a0bc <HAL_DMA_IRQHandler+0xb0>
 800a02a:	3218      	adds	r2, #24
 800a02c:	4293      	cmp	r3, r2
 800a02e:	d045      	beq.n	800a0bc <HAL_DMA_IRQHandler+0xb0>
 800a030:	3218      	adds	r2, #24
 800a032:	4f98      	ldr	r7, [pc, #608]	; (800a294 <HAL_DMA_IRQHandler+0x288>)
 800a034:	42bb      	cmp	r3, r7
 800a036:	bf18      	it	ne
 800a038:	4293      	cmpne	r3, r2
 800a03a:	f107 0718 	add.w	r7, r7, #24
 800a03e:	bf0c      	ite	eq
 800a040:	2201      	moveq	r2, #1
 800a042:	2200      	movne	r2, #0
 800a044:	42bb      	cmp	r3, r7
 800a046:	bf08      	it	eq
 800a048:	f042 0201 	orreq.w	r2, r2, #1
 800a04c:	3718      	adds	r7, #24
 800a04e:	42bb      	cmp	r3, r7
 800a050:	bf08      	it	eq
 800a052:	f042 0201 	orreq.w	r2, r2, #1
 800a056:	3718      	adds	r7, #24
 800a058:	42bb      	cmp	r3, r7
 800a05a:	bf08      	it	eq
 800a05c:	f042 0201 	orreq.w	r2, r2, #1
 800a060:	3718      	adds	r7, #24
 800a062:	42bb      	cmp	r3, r7
 800a064:	bf08      	it	eq
 800a066:	f042 0201 	orreq.w	r2, r2, #1
 800a06a:	f507 7756 	add.w	r7, r7, #856	; 0x358
 800a06e:	42bb      	cmp	r3, r7
 800a070:	bf08      	it	eq
 800a072:	f042 0201 	orreq.w	r2, r2, #1
 800a076:	3718      	adds	r7, #24
 800a078:	42bb      	cmp	r3, r7
 800a07a:	bf08      	it	eq
 800a07c:	f042 0201 	orreq.w	r2, r2, #1
 800a080:	3718      	adds	r7, #24
 800a082:	42bb      	cmp	r3, r7
 800a084:	bf08      	it	eq
 800a086:	f042 0201 	orreq.w	r2, r2, #1
 800a08a:	3718      	adds	r7, #24
 800a08c:	42bb      	cmp	r3, r7
 800a08e:	bf08      	it	eq
 800a090:	f042 0201 	orreq.w	r2, r2, #1
 800a094:	3718      	adds	r7, #24
 800a096:	42bb      	cmp	r3, r7
 800a098:	bf08      	it	eq
 800a09a:	f042 0201 	orreq.w	r2, r2, #1
 800a09e:	3718      	adds	r7, #24
 800a0a0:	42bb      	cmp	r3, r7
 800a0a2:	bf08      	it	eq
 800a0a4:	f042 0201 	orreq.w	r2, r2, #1
 800a0a8:	3718      	adds	r7, #24
 800a0aa:	42bb      	cmp	r3, r7
 800a0ac:	bf08      	it	eq
 800a0ae:	f042 0201 	orreq.w	r2, r2, #1
 800a0b2:	b91a      	cbnz	r2, 800a0bc <HAL_DMA_IRQHandler+0xb0>
 800a0b4:	4a78      	ldr	r2, [pc, #480]	; (800a298 <HAL_DMA_IRQHandler+0x28c>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	f040 82b3 	bne.w	800a622 <HAL_DMA_IRQHandler+0x616>
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0bc:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
 800a0c0:	2208      	movs	r2, #8
 800a0c2:	f000 011f 	and.w	r1, r0, #31
 800a0c6:	408a      	lsls	r2, r1
 800a0c8:	4222      	tst	r2, r4
 800a0ca:	f040 81a5 	bne.w	800a418 <HAL_DMA_IRQHandler+0x40c>
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0ce:	fa24 f201 	lsr.w	r2, r4, r1
 800a0d2:	07d2      	lsls	r2, r2, #31
 800a0d4:	d511      	bpl.n	800a0fa <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a0d6:	695a      	ldr	r2, [r3, #20]
 800a0d8:	0612      	lsls	r2, r2, #24
 800a0da:	f140 8269 	bpl.w	800a5b0 <HAL_DMA_IRQHandler+0x5a4>
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a0de:	2301      	movs	r3, #1
 800a0e0:	fa03 f101 	lsl.w	r1, r3, r1
 800a0e4:	60a9      	str	r1, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a0e6:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0ea:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a0ee:	f043 0302 	orr.w	r3, r3, #2
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0f2:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a0f6:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a0fa:	f04f 0c04 	mov.w	ip, #4
 800a0fe:	fa0c fc01 	lsl.w	ip, ip, r1
 800a102:	ea1c 0f04 	tst.w	ip, r4
 800a106:	d062      	beq.n	800a1ce <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a108:	f8d8 2000 	ldr.w	r2, [r8]
 800a10c:	4f60      	ldr	r7, [pc, #384]	; (800a290 <HAL_DMA_IRQHandler+0x284>)
 800a10e:	4b63      	ldr	r3, [pc, #396]	; (800a29c <HAL_DMA_IRQHandler+0x290>)
 800a110:	429a      	cmp	r2, r3
 800a112:	bf18      	it	ne
 800a114:	42ba      	cmpne	r2, r7
 800a116:	f103 0318 	add.w	r3, r3, #24
 800a11a:	bf0c      	ite	eq
 800a11c:	2701      	moveq	r7, #1
 800a11e:	2700      	movne	r7, #0
 800a120:	429a      	cmp	r2, r3
 800a122:	bf08      	it	eq
 800a124:	f047 0701 	orreq.w	r7, r7, #1
 800a128:	3318      	adds	r3, #24
 800a12a:	429a      	cmp	r2, r3
 800a12c:	bf08      	it	eq
 800a12e:	f047 0701 	orreq.w	r7, r7, #1
 800a132:	3318      	adds	r3, #24
 800a134:	429a      	cmp	r2, r3
 800a136:	bf08      	it	eq
 800a138:	f047 0701 	orreq.w	r7, r7, #1
 800a13c:	3318      	adds	r3, #24
 800a13e:	429a      	cmp	r2, r3
 800a140:	bf08      	it	eq
 800a142:	f047 0701 	orreq.w	r7, r7, #1
 800a146:	3318      	adds	r3, #24
 800a148:	429a      	cmp	r2, r3
 800a14a:	bf08      	it	eq
 800a14c:	f047 0701 	orreq.w	r7, r7, #1
 800a150:	3318      	adds	r3, #24
 800a152:	429a      	cmp	r2, r3
 800a154:	bf08      	it	eq
 800a156:	f047 0701 	orreq.w	r7, r7, #1
 800a15a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a15e:	429a      	cmp	r2, r3
 800a160:	bf08      	it	eq
 800a162:	f047 0701 	orreq.w	r7, r7, #1
 800a166:	3318      	adds	r3, #24
 800a168:	429a      	cmp	r2, r3
 800a16a:	bf08      	it	eq
 800a16c:	f047 0701 	orreq.w	r7, r7, #1
 800a170:	3318      	adds	r3, #24
 800a172:	429a      	cmp	r2, r3
 800a174:	bf08      	it	eq
 800a176:	f047 0701 	orreq.w	r7, r7, #1
 800a17a:	3318      	adds	r3, #24
 800a17c:	429a      	cmp	r2, r3
 800a17e:	bf08      	it	eq
 800a180:	f047 0701 	orreq.w	r7, r7, #1
 800a184:	3318      	adds	r3, #24
 800a186:	429a      	cmp	r2, r3
 800a188:	bf08      	it	eq
 800a18a:	f047 0701 	orreq.w	r7, r7, #1
 800a18e:	3318      	adds	r3, #24
 800a190:	429a      	cmp	r2, r3
 800a192:	bf08      	it	eq
 800a194:	f047 0701 	orreq.w	r7, r7, #1
 800a198:	3318      	adds	r3, #24
 800a19a:	429a      	cmp	r2, r3
 800a19c:	bf08      	it	eq
 800a19e:	f047 0701 	orreq.w	r7, r7, #1
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	b91f      	cbnz	r7, 800a1ae <HAL_DMA_IRQHandler+0x1a2>
 800a1a6:	4f3c      	ldr	r7, [pc, #240]	; (800a298 <HAL_DMA_IRQHandler+0x28c>)
 800a1a8:	42ba      	cmp	r2, r7
 800a1aa:	f040 8277 	bne.w	800a69c <HAL_DMA_IRQHandler+0x690>
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	0797      	lsls	r7, r2, #30
 800a1b2:	f140 8209 	bpl.w	800a5c8 <HAL_DMA_IRQHandler+0x5bc>
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a1b6:	f8c5 c008 	str.w	ip, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a1ba:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1be:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a1c2:	f043 0304 	orr.w	r3, r3, #4
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1c6:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a1ca:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a1ce:	f04f 0c10 	mov.w	ip, #16
 800a1d2:	fa0c fc01 	lsl.w	ip, ip, r1
 800a1d6:	ea1c 0f04 	tst.w	ip, r4
 800a1da:	d079      	beq.n	800a2d0 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a1dc:	f8d8 2000 	ldr.w	r2, [r8]
 800a1e0:	4f2b      	ldr	r7, [pc, #172]	; (800a290 <HAL_DMA_IRQHandler+0x284>)
 800a1e2:	4b2e      	ldr	r3, [pc, #184]	; (800a29c <HAL_DMA_IRQHandler+0x290>)
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	bf18      	it	ne
 800a1e8:	42ba      	cmpne	r2, r7
 800a1ea:	f103 0318 	add.w	r3, r3, #24
 800a1ee:	bf0c      	ite	eq
 800a1f0:	2701      	moveq	r7, #1
 800a1f2:	2700      	movne	r7, #0
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	bf08      	it	eq
 800a1f8:	f047 0701 	orreq.w	r7, r7, #1
 800a1fc:	3318      	adds	r3, #24
 800a1fe:	429a      	cmp	r2, r3
 800a200:	bf08      	it	eq
 800a202:	f047 0701 	orreq.w	r7, r7, #1
 800a206:	3318      	adds	r3, #24
 800a208:	429a      	cmp	r2, r3
 800a20a:	bf08      	it	eq
 800a20c:	f047 0701 	orreq.w	r7, r7, #1
 800a210:	3318      	adds	r3, #24
 800a212:	429a      	cmp	r2, r3
 800a214:	bf08      	it	eq
 800a216:	f047 0701 	orreq.w	r7, r7, #1
 800a21a:	3318      	adds	r3, #24
 800a21c:	429a      	cmp	r2, r3
 800a21e:	bf08      	it	eq
 800a220:	f047 0701 	orreq.w	r7, r7, #1
 800a224:	3318      	adds	r3, #24
 800a226:	429a      	cmp	r2, r3
 800a228:	bf08      	it	eq
 800a22a:	f047 0701 	orreq.w	r7, r7, #1
 800a22e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a232:	429a      	cmp	r2, r3
 800a234:	bf08      	it	eq
 800a236:	f047 0701 	orreq.w	r7, r7, #1
 800a23a:	3318      	adds	r3, #24
 800a23c:	429a      	cmp	r2, r3
 800a23e:	bf08      	it	eq
 800a240:	f047 0701 	orreq.w	r7, r7, #1
 800a244:	3318      	adds	r3, #24
 800a246:	429a      	cmp	r2, r3
 800a248:	bf08      	it	eq
 800a24a:	f047 0701 	orreq.w	r7, r7, #1
 800a24e:	3318      	adds	r3, #24
 800a250:	429a      	cmp	r2, r3
 800a252:	bf08      	it	eq
 800a254:	f047 0701 	orreq.w	r7, r7, #1
 800a258:	3318      	adds	r3, #24
 800a25a:	429a      	cmp	r2, r3
 800a25c:	bf08      	it	eq
 800a25e:	f047 0701 	orreq.w	r7, r7, #1
 800a262:	3318      	adds	r3, #24
 800a264:	429a      	cmp	r2, r3
 800a266:	bf08      	it	eq
 800a268:	f047 0701 	orreq.w	r7, r7, #1
 800a26c:	3318      	adds	r3, #24
 800a26e:	429a      	cmp	r2, r3
 800a270:	bf08      	it	eq
 800a272:	f047 0701 	orreq.w	r7, r7, #1
 800a276:	4613      	mov	r3, r2
 800a278:	b91f      	cbnz	r7, 800a282 <HAL_DMA_IRQHandler+0x276>
 800a27a:	4f07      	ldr	r7, [pc, #28]	; (800a298 <HAL_DMA_IRQHandler+0x28c>)
 800a27c:	42ba      	cmp	r2, r7
 800a27e:	f040 814b 	bne.w	800a518 <HAL_DMA_IRQHandler+0x50c>
 800a282:	681a      	ldr	r2, [r3, #0]
 800a284:	0710      	lsls	r0, r2, #28
 800a286:	f140 818c 	bpl.w	800a5a2 <HAL_DMA_IRQHandler+0x596>
 800a28a:	e009      	b.n	800a2a0 <HAL_DMA_IRQHandler+0x294>
 800a28c:	20000728 	.word	0x20000728
 800a290:	40020010 	.word	0x40020010
 800a294:	40020058 	.word	0x40020058
 800a298:	400204b8 	.word	0x400204b8
 800a29c:	40020028 	.word	0x40020028
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a2a0:	f8c5 c008 	str.w	ip, [r5, #8]
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a2a4:	f8d8 3000 	ldr.w	r3, [r8]
 800a2a8:	681a      	ldr	r2, [r3, #0]
 800a2aa:	0352      	lsls	r2, r2, #13
 800a2ac:	f100 8195 	bmi.w	800a5da <HAL_DMA_IRQHandler+0x5ce>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a2b0:	681a      	ldr	r2, [r3, #0]
 800a2b2:	05d7      	lsls	r7, r2, #23
 800a2b4:	d403      	bmi.n	800a2be <HAL_DMA_IRQHandler+0x2b2>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a2b6:	681a      	ldr	r2, [r3, #0]
 800a2b8:	f022 0208 	bic.w	r2, r2, #8
 800a2bc:	601a      	str	r2, [r3, #0]
          if(hdma->XferHalfCpltCallback != NULL)
 800a2be:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800a2c2:	b10b      	cbz	r3, 800a2c8 <HAL_DMA_IRQHandler+0x2bc>
            hdma->XferHalfCpltCallback(hdma);
 800a2c4:	4640      	mov	r0, r8
 800a2c6:	4798      	blx	r3
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a2c8:	f8d8 105c 	ldr.w	r1, [r8, #92]	; 0x5c
 800a2cc:	f001 011f 	and.w	r1, r1, #31
 800a2d0:	2320      	movs	r3, #32
 800a2d2:	fa03 f101 	lsl.w	r1, r3, r1
 800a2d6:	4221      	tst	r1, r4
 800a2d8:	d069      	beq.n	800a3ae <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a2da:	f8d8 3000 	ldr.w	r3, [r8]
 800a2de:	4a97      	ldr	r2, [pc, #604]	; (800a53c <HAL_DMA_IRQHandler+0x530>)
 800a2e0:	4c97      	ldr	r4, [pc, #604]	; (800a540 <HAL_DMA_IRQHandler+0x534>)
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	bf18      	it	ne
 800a2e6:	4293      	cmpne	r3, r2
 800a2e8:	f104 0418 	add.w	r4, r4, #24
 800a2ec:	bf0c      	ite	eq
 800a2ee:	2201      	moveq	r2, #1
 800a2f0:	2200      	movne	r2, #0
 800a2f2:	42a3      	cmp	r3, r4
 800a2f4:	bf08      	it	eq
 800a2f6:	f042 0201 	orreq.w	r2, r2, #1
 800a2fa:	3418      	adds	r4, #24
 800a2fc:	42a3      	cmp	r3, r4
 800a2fe:	bf08      	it	eq
 800a300:	f042 0201 	orreq.w	r2, r2, #1
 800a304:	3418      	adds	r4, #24
 800a306:	42a3      	cmp	r3, r4
 800a308:	bf08      	it	eq
 800a30a:	f042 0201 	orreq.w	r2, r2, #1
 800a30e:	3418      	adds	r4, #24
 800a310:	42a3      	cmp	r3, r4
 800a312:	bf08      	it	eq
 800a314:	f042 0201 	orreq.w	r2, r2, #1
 800a318:	3418      	adds	r4, #24
 800a31a:	42a3      	cmp	r3, r4
 800a31c:	bf08      	it	eq
 800a31e:	f042 0201 	orreq.w	r2, r2, #1
 800a322:	3418      	adds	r4, #24
 800a324:	42a3      	cmp	r3, r4
 800a326:	bf08      	it	eq
 800a328:	f042 0201 	orreq.w	r2, r2, #1
 800a32c:	f504 7456 	add.w	r4, r4, #856	; 0x358
 800a330:	42a3      	cmp	r3, r4
 800a332:	bf08      	it	eq
 800a334:	f042 0201 	orreq.w	r2, r2, #1
 800a338:	3418      	adds	r4, #24
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	bf08      	it	eq
 800a33e:	f042 0201 	orreq.w	r2, r2, #1
 800a342:	3418      	adds	r4, #24
 800a344:	42a3      	cmp	r3, r4
 800a346:	bf08      	it	eq
 800a348:	f042 0201 	orreq.w	r2, r2, #1
 800a34c:	3418      	adds	r4, #24
 800a34e:	42a3      	cmp	r3, r4
 800a350:	bf08      	it	eq
 800a352:	f042 0201 	orreq.w	r2, r2, #1
 800a356:	3418      	adds	r4, #24
 800a358:	42a3      	cmp	r3, r4
 800a35a:	bf08      	it	eq
 800a35c:	f042 0201 	orreq.w	r2, r2, #1
 800a360:	3418      	adds	r4, #24
 800a362:	42a3      	cmp	r3, r4
 800a364:	bf08      	it	eq
 800a366:	f042 0201 	orreq.w	r2, r2, #1
 800a36a:	3418      	adds	r4, #24
 800a36c:	42a3      	cmp	r3, r4
 800a36e:	bf08      	it	eq
 800a370:	f042 0201 	orreq.w	r2, r2, #1
 800a374:	b91a      	cbnz	r2, 800a37e <HAL_DMA_IRQHandler+0x372>
 800a376:	4a73      	ldr	r2, [pc, #460]	; (800a544 <HAL_DMA_IRQHandler+0x538>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	f040 80da 	bne.w	800a532 <HAL_DMA_IRQHandler+0x526>
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	06dc      	lsls	r4, r3, #27
 800a382:	d514      	bpl.n	800a3ae <HAL_DMA_IRQHandler+0x3a2>
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a384:	60a9      	str	r1, [r5, #8]
        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a386:	f898 3035 	ldrb.w	r3, [r8, #53]	; 0x35
 800a38a:	2b04      	cmp	r3, #4
 800a38c:	f000 80de 	beq.w	800a54c <HAL_DMA_IRQHandler+0x540>
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a390:	f8d8 3000 	ldr.w	r3, [r8]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	0352      	lsls	r2, r2, #13
 800a398:	f140 8129 	bpl.w	800a5ee <HAL_DMA_IRQHandler+0x5e2>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	031b      	lsls	r3, r3, #12
 800a3a0:	f140 8134 	bpl.w	800a60c <HAL_DMA_IRQHandler+0x600>
          if(hdma->XferCpltCallback != NULL)
 800a3a4:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a3a8:	b10b      	cbz	r3, 800a3ae <HAL_DMA_IRQHandler+0x3a2>
            hdma->XferCpltCallback(hdma);
 800a3aa:	4640      	mov	r0, r8
 800a3ac:	4798      	blx	r3
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800a3ae:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	f000 80f2 	beq.w	800a59c <HAL_DMA_IRQHandler+0x590>
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800a3b8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800a3bc:	07df      	lsls	r7, r3, #31
 800a3be:	d521      	bpl.n	800a404 <HAL_DMA_IRQHandler+0x3f8>
        __HAL_DMA_DISABLE(hdma);
 800a3c0:	f8d8 2000 	ldr.w	r2, [r8]
        hdma->State = HAL_DMA_STATE_ABORT;
 800a3c4:	2104      	movs	r1, #4
 800a3c6:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
        __HAL_DMA_DISABLE(hdma);
 800a3ca:	6813      	ldr	r3, [r2, #0]
 800a3cc:	f023 0301 	bic.w	r3, r3, #1
 800a3d0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3d2:	4b5d      	ldr	r3, [pc, #372]	; (800a548 <HAL_DMA_IRQHandler+0x53c>)
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a3d4:	f8d8 2000 	ldr.w	r2, [r8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a3d8:	fba3 3606 	umull	r3, r6, r3, r6
 800a3dc:	0ab6      	lsrs	r6, r6, #10
 800a3de:	e002      	b.n	800a3e6 <HAL_DMA_IRQHandler+0x3da>
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800a3e0:	6813      	ldr	r3, [r2, #0]
 800a3e2:	07dd      	lsls	r5, r3, #31
 800a3e4:	d504      	bpl.n	800a3f0 <HAL_DMA_IRQHandler+0x3e4>
          if (++count > timeout)
 800a3e6:	9b01      	ldr	r3, [sp, #4]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	42b3      	cmp	r3, r6
 800a3ec:	9301      	str	r3, [sp, #4]
 800a3ee:	d9f7      	bls.n	800a3e0 <HAL_DMA_IRQHandler+0x3d4>
        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800a3f0:	6813      	ldr	r3, [r2, #0]
 800a3f2:	07dc      	lsls	r4, r3, #31
          hdma->State = HAL_DMA_STATE_ERROR;
 800a3f4:	bf4c      	ite	mi
 800a3f6:	2303      	movmi	r3, #3
          hdma->State = HAL_DMA_STATE_READY;
 800a3f8:	2301      	movpl	r3, #1
 800a3fa:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 800a3fe:	2300      	movs	r3, #0
 800a400:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
      if(hdma->XferErrorCallback != NULL)
 800a404:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 80c7 	beq.w	800a59c <HAL_DMA_IRQHandler+0x590>
        hdma->XferErrorCallback(hdma);
 800a40e:	4640      	mov	r0, r8
}
 800a410:	b002      	add	sp, #8
 800a412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        hdma->XferErrorCallback(hdma);
 800a416:	4718      	bx	r3
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a418:	681a      	ldr	r2, [r3, #0]
 800a41a:	0752      	lsls	r2, r2, #29
 800a41c:	d514      	bpl.n	800a448 <HAL_DMA_IRQHandler+0x43c>
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a41e:	681a      	ldr	r2, [r3, #0]
 800a420:	f022 0204 	bic.w	r2, r2, #4
 800a424:	601a      	str	r2, [r3, #0]
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a426:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800a42a:	f003 021f 	and.w	r2, r3, #31
 800a42e:	2308      	movs	r3, #8
 800a430:	4093      	lsls	r3, r2
 800a432:	60ab      	str	r3, [r5, #8]
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a434:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a438:	f8d8 005c 	ldr.w	r0, [r8, #92]	; 0x5c
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a43c:	f043 0301 	orr.w	r3, r3, #1
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a440:	f000 011f 	and.w	r1, r0, #31
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a444:	f8c8 3054 	str.w	r3, [r8, #84]	; 0x54
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a448:	fa24 f301 	lsr.w	r3, r4, r1
 800a44c:	07df      	lsls	r7, r3, #31
 800a44e:	f57f ae54 	bpl.w	800a0fa <HAL_DMA_IRQHandler+0xee>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a452:	f8d8 2000 	ldr.w	r2, [r8]
 800a456:	4f39      	ldr	r7, [pc, #228]	; (800a53c <HAL_DMA_IRQHandler+0x530>)
 800a458:	4b39      	ldr	r3, [pc, #228]	; (800a540 <HAL_DMA_IRQHandler+0x534>)
 800a45a:	429a      	cmp	r2, r3
 800a45c:	bf18      	it	ne
 800a45e:	42ba      	cmpne	r2, r7
 800a460:	f103 0318 	add.w	r3, r3, #24
 800a464:	bf0c      	ite	eq
 800a466:	2701      	moveq	r7, #1
 800a468:	2700      	movne	r7, #0
 800a46a:	429a      	cmp	r2, r3
 800a46c:	bf08      	it	eq
 800a46e:	f047 0701 	orreq.w	r7, r7, #1
 800a472:	3318      	adds	r3, #24
 800a474:	429a      	cmp	r2, r3
 800a476:	bf08      	it	eq
 800a478:	f047 0701 	orreq.w	r7, r7, #1
 800a47c:	3318      	adds	r3, #24
 800a47e:	429a      	cmp	r2, r3
 800a480:	bf08      	it	eq
 800a482:	f047 0701 	orreq.w	r7, r7, #1
 800a486:	3318      	adds	r3, #24
 800a488:	429a      	cmp	r2, r3
 800a48a:	bf08      	it	eq
 800a48c:	f047 0701 	orreq.w	r7, r7, #1
 800a490:	3318      	adds	r3, #24
 800a492:	429a      	cmp	r2, r3
 800a494:	bf08      	it	eq
 800a496:	f047 0701 	orreq.w	r7, r7, #1
 800a49a:	3318      	adds	r3, #24
 800a49c:	429a      	cmp	r2, r3
 800a49e:	bf08      	it	eq
 800a4a0:	f047 0701 	orreq.w	r7, r7, #1
 800a4a4:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800a4a8:	429a      	cmp	r2, r3
 800a4aa:	bf08      	it	eq
 800a4ac:	f047 0701 	orreq.w	r7, r7, #1
 800a4b0:	3318      	adds	r3, #24
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	bf08      	it	eq
 800a4b6:	f047 0701 	orreq.w	r7, r7, #1
 800a4ba:	3318      	adds	r3, #24
 800a4bc:	429a      	cmp	r2, r3
 800a4be:	bf08      	it	eq
 800a4c0:	f047 0701 	orreq.w	r7, r7, #1
 800a4c4:	3318      	adds	r3, #24
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	bf08      	it	eq
 800a4ca:	f047 0701 	orreq.w	r7, r7, #1
 800a4ce:	3318      	adds	r3, #24
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	bf08      	it	eq
 800a4d4:	f047 0701 	orreq.w	r7, r7, #1
 800a4d8:	3318      	adds	r3, #24
 800a4da:	429a      	cmp	r2, r3
 800a4dc:	bf08      	it	eq
 800a4de:	f047 0701 	orreq.w	r7, r7, #1
 800a4e2:	3318      	adds	r3, #24
 800a4e4:	429a      	cmp	r2, r3
 800a4e6:	bf08      	it	eq
 800a4e8:	f047 0701 	orreq.w	r7, r7, #1
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	2f00      	cmp	r7, #0
 800a4f0:	f47f adf1 	bne.w	800a0d6 <HAL_DMA_IRQHandler+0xca>
 800a4f4:	4f13      	ldr	r7, [pc, #76]	; (800a544 <HAL_DMA_IRQHandler+0x538>)
 800a4f6:	42ba      	cmp	r2, r7
 800a4f8:	f43f aded 	beq.w	800a0d6 <HAL_DMA_IRQHandler+0xca>
 800a4fc:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a4fe:	2304      	movs	r3, #4
 800a500:	408b      	lsls	r3, r1
 800a502:	4223      	tst	r3, r4
 800a504:	f040 80ca 	bne.w	800a69c <HAL_DMA_IRQHandler+0x690>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a508:	f04f 0c10 	mov.w	ip, #16
 800a50c:	fa0c fc01 	lsl.w	ip, ip, r1
 800a510:	ea14 0f0c 	tst.w	r4, ip
 800a514:	f43f aedc 	beq.w	800a2d0 <HAL_DMA_IRQHandler+0x2c4>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a518:	6813      	ldr	r3, [r2, #0]
 800a51a:	0759      	lsls	r1, r3, #29
 800a51c:	f53f aec0 	bmi.w	800a2a0 <HAL_DMA_IRQHandler+0x294>
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a520:	f000 0e1f 	and.w	lr, r0, #31
 800a524:	2120      	movs	r1, #32
 800a526:	fa01 f10e 	lsl.w	r1, r1, lr
 800a52a:	420c      	tst	r4, r1
 800a52c:	f43f af3f 	beq.w	800a3ae <HAL_DMA_IRQHandler+0x3a2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a530:	4613      	mov	r3, r2
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	0798      	lsls	r0, r3, #30
 800a536:	f57f af3a 	bpl.w	800a3ae <HAL_DMA_IRQHandler+0x3a2>
 800a53a:	e723      	b.n	800a384 <HAL_DMA_IRQHandler+0x378>
 800a53c:	40020010 	.word	0x40020010
 800a540:	40020028 	.word	0x40020028
 800a544:	400204b8 	.word	0x400204b8
 800a548:	1b4e81b5 	.word	0x1b4e81b5
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a54c:	f8d8 2000 	ldr.w	r2, [r8]
 800a550:	6813      	ldr	r3, [r2, #0]
 800a552:	f023 0316 	bic.w	r3, r3, #22
 800a556:	6013      	str	r3, [r2, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a558:	f8d8 2000 	ldr.w	r2, [r8]
 800a55c:	6953      	ldr	r3, [r2, #20]
 800a55e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a562:	6153      	str	r3, [r2, #20]
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a564:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d055      	beq.n	800a618 <HAL_DMA_IRQHandler+0x60c>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a56c:	f8d8 2000 	ldr.w	r2, [r8]
 800a570:	6813      	ldr	r3, [r2, #0]
 800a572:	f023 0308 	bic.w	r3, r3, #8
 800a576:	6013      	str	r3, [r2, #0]
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a578:	f8d8 205c 	ldr.w	r2, [r8, #92]	; 0x5c
 800a57c:	233f      	movs	r3, #63	; 0x3f
          hdma->State = HAL_DMA_STATE_READY;
 800a57e:	2101      	movs	r1, #1
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a580:	f002 021f 	and.w	r2, r2, #31
 800a584:	4093      	lsls	r3, r2
          __HAL_UNLOCK(hdma);
 800a586:	2200      	movs	r2, #0
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a588:	60ab      	str	r3, [r5, #8]
          if(hdma->XferAbortCallback != NULL)
 800a58a:	f8d8 3050 	ldr.w	r3, [r8, #80]	; 0x50
          hdma->State = HAL_DMA_STATE_READY;
 800a58e:	f888 1035 	strb.w	r1, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a592:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
          if(hdma->XferAbortCallback != NULL)
 800a596:	2b00      	cmp	r3, #0
 800a598:	f47f af39 	bne.w	800a40e <HAL_DMA_IRQHandler+0x402>
}
 800a59c:	b002      	add	sp, #8
 800a59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	fa02 f101 	lsl.w	r1, r2, r1
 800a5a8:	420c      	tst	r4, r1
 800a5aa:	f47f aee8 	bne.w	800a37e <HAL_DMA_IRQHandler+0x372>
 800a5ae:	e6fe      	b.n	800a3ae <HAL_DMA_IRQHandler+0x3a2>
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5b0:	f04f 0c04 	mov.w	ip, #4
 800a5b4:	fa0c fc01 	lsl.w	ip, ip, r1
 800a5b8:	ea14 0f0c 	tst.w	r4, ip
 800a5bc:	f43f ae07 	beq.w	800a1ce <HAL_DMA_IRQHandler+0x1c2>
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	0797      	lsls	r7, r2, #30
 800a5c4:	f53f adf7 	bmi.w	800a1b6 <HAL_DMA_IRQHandler+0x1aa>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5c8:	f04f 0c10 	mov.w	ip, #16
 800a5cc:	fa0c fc01 	lsl.w	ip, ip, r1
 800a5d0:	ea14 0f0c 	tst.w	r4, ip
 800a5d4:	f47f ae55 	bne.w	800a282 <HAL_DMA_IRQHandler+0x276>
 800a5d8:	e67a      	b.n	800a2d0 <HAL_DMA_IRQHandler+0x2c4>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	031b      	lsls	r3, r3, #12
 800a5de:	f57f ae6e 	bpl.w	800a2be <HAL_DMA_IRQHandler+0x2b2>
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a5e2:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f47f ae6c 	bne.w	800a2c4 <HAL_DMA_IRQHandler+0x2b8>
 800a5ec:	e66c      	b.n	800a2c8 <HAL_DMA_IRQHandler+0x2bc>
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a5ee:	681a      	ldr	r2, [r3, #0]
 800a5f0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 800a5f4:	f47f aed6 	bne.w	800a3a4 <HAL_DMA_IRQHandler+0x398>
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800a5f8:	6819      	ldr	r1, [r3, #0]
 800a5fa:	f021 0110 	bic.w	r1, r1, #16
 800a5fe:	6019      	str	r1, [r3, #0]
            hdma->State = HAL_DMA_STATE_READY;
 800a600:	2301      	movs	r3, #1
            __HAL_UNLOCK(hdma);
 800a602:	f888 2034 	strb.w	r2, [r8, #52]	; 0x34
            hdma->State = HAL_DMA_STATE_READY;
 800a606:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
            __HAL_UNLOCK(hdma);
 800a60a:	e6cb      	b.n	800a3a4 <HAL_DMA_IRQHandler+0x398>
            if(hdma->XferM1CpltCallback != NULL)
 800a60c:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800a610:	2b00      	cmp	r3, #0
 800a612:	f47f aeca 	bne.w	800a3aa <HAL_DMA_IRQHandler+0x39e>
 800a616:	e6ca      	b.n	800a3ae <HAL_DMA_IRQHandler+0x3a2>
          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a618:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1a5      	bne.n	800a56c <HAL_DMA_IRQHandler+0x560>
 800a620:	e7aa      	b.n	800a578 <HAL_DMA_IRQHandler+0x56c>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800a622:	4aa0      	ldr	r2, [pc, #640]	; (800a8a4 <HAL_DMA_IRQHandler+0x898>)
 800a624:	4ca0      	ldr	r4, [pc, #640]	; (800a8a8 <HAL_DMA_IRQHandler+0x89c>)
 800a626:	42a3      	cmp	r3, r4
 800a628:	bf18      	it	ne
 800a62a:	4293      	cmpne	r3, r2
 800a62c:	f104 0414 	add.w	r4, r4, #20
 800a630:	bf0c      	ite	eq
 800a632:	2201      	moveq	r2, #1
 800a634:	2200      	movne	r2, #0
 800a636:	42a3      	cmp	r3, r4
 800a638:	bf08      	it	eq
 800a63a:	f042 0201 	orreq.w	r2, r2, #1
 800a63e:	3414      	adds	r4, #20
 800a640:	42a3      	cmp	r3, r4
 800a642:	bf08      	it	eq
 800a644:	f042 0201 	orreq.w	r2, r2, #1
 800a648:	3414      	adds	r4, #20
 800a64a:	42a3      	cmp	r3, r4
 800a64c:	bf08      	it	eq
 800a64e:	f042 0201 	orreq.w	r2, r2, #1
 800a652:	3414      	adds	r4, #20
 800a654:	42a3      	cmp	r3, r4
 800a656:	bf08      	it	eq
 800a658:	f042 0201 	orreq.w	r2, r2, #1
 800a65c:	3414      	adds	r4, #20
 800a65e:	42a3      	cmp	r3, r4
 800a660:	bf08      	it	eq
 800a662:	f042 0201 	orreq.w	r2, r2, #1
 800a666:	b912      	cbnz	r2, 800a66e <HAL_DMA_IRQHandler+0x662>
 800a668:	4a90      	ldr	r2, [pc, #576]	; (800a8ac <HAL_DMA_IRQHandler+0x8a0>)
 800a66a:	4293      	cmp	r3, r2
 800a66c:	d196      	bne.n	800a59c <HAL_DMA_IRQHandler+0x590>
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a66e:	f8d8 405c 	ldr.w	r4, [r8, #92]	; 0x5c
 800a672:	2604      	movs	r6, #4
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800a674:	681a      	ldr	r2, [r3, #0]
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800a676:	f004 041f 	and.w	r4, r4, #31
 800a67a:	40a6      	lsls	r6, r4
 800a67c:	420e      	tst	r6, r1
 800a67e:	d019      	beq.n	800a6b4 <HAL_DMA_IRQHandler+0x6a8>
 800a680:	0750      	lsls	r0, r2, #29
 800a682:	d517      	bpl.n	800a6b4 <HAL_DMA_IRQHandler+0x6a8>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a684:	0411      	lsls	r1, r2, #16
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800a686:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a688:	d549      	bpl.n	800a71e <HAL_DMA_IRQHandler+0x712>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a68a:	03d2      	lsls	r2, r2, #15
 800a68c:	f100 809f 	bmi.w	800a7ce <HAL_DMA_IRQHandler+0x7c2>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800a690:	f8d8 3048 	ldr.w	r3, [r8, #72]	; 0x48
 800a694:	2b00      	cmp	r3, #0
 800a696:	f47f aeba 	bne.w	800a40e <HAL_DMA_IRQHandler+0x402>
 800a69a:	e77f      	b.n	800a59c <HAL_DMA_IRQHandler+0x590>
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a69c:	f000 011f 	and.w	r1, r0, #31
 800a6a0:	f04f 0c10 	mov.w	ip, #16
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a6a4:	6813      	ldr	r3, [r2, #0]
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a6a6:	fa0c fc01 	lsl.w	ip, ip, r1
 800a6aa:	ea14 0f0c 	tst.w	r4, ip
 800a6ae:	f47f af33 	bne.w	800a518 <HAL_DMA_IRQHandler+0x50c>
 800a6b2:	e60d      	b.n	800a2d0 <HAL_DMA_IRQHandler+0x2c4>
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800a6b4:	2602      	movs	r6, #2
 800a6b6:	40a6      	lsls	r6, r4
 800a6b8:	420e      	tst	r6, r1
 800a6ba:	d00e      	beq.n	800a6da <HAL_DMA_IRQHandler+0x6ce>
 800a6bc:	0797      	lsls	r7, r2, #30
 800a6be:	d50c      	bpl.n	800a6da <HAL_DMA_IRQHandler+0x6ce>
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800a6c0:	606e      	str	r6, [r5, #4]
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800a6c2:	0415      	lsls	r5, r2, #16
 800a6c4:	f140 8089 	bpl.w	800a7da <HAL_DMA_IRQHandler+0x7ce>
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800a6c8:	03d4      	lsls	r4, r2, #15
 800a6ca:	f100 80e4 	bmi.w	800a896 <HAL_DMA_IRQHandler+0x88a>
          if(hdma->XferM1CpltCallback != NULL)
 800a6ce:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	f47f ae9b 	bne.w	800a40e <HAL_DMA_IRQHandler+0x402>
 800a6d8:	e760      	b.n	800a59c <HAL_DMA_IRQHandler+0x590>
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800a6da:	2608      	movs	r6, #8
 800a6dc:	fa06 f404 	lsl.w	r4, r6, r4
 800a6e0:	420c      	tst	r4, r1
 800a6e2:	f43f af5b 	beq.w	800a59c <HAL_DMA_IRQHandler+0x590>
 800a6e6:	0711      	lsls	r1, r2, #28
 800a6e8:	f57f af58 	bpl.w	800a59c <HAL_DMA_IRQHandler+0x590>
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6ec:	6819      	ldr	r1, [r3, #0]
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a6ee:	2201      	movs	r2, #1
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a6f0:	f021 010e 	bic.w	r1, r1, #14
 800a6f4:	6019      	str	r1, [r3, #0]
      __HAL_UNLOCK(hdma);
 800a6f6:	2100      	movs	r1, #0
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a6f8:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800a6fc:	f003 031f 	and.w	r3, r3, #31
 800a700:	fa02 f303 	lsl.w	r3, r2, r3
 800a704:	606b      	str	r3, [r5, #4]
      if (hdma->XferErrorCallback != NULL)
 800a706:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a70a:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
      __HAL_UNLOCK(hdma);
 800a70e:	f888 1034 	strb.w	r1, [r8, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800a712:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      if (hdma->XferErrorCallback != NULL)
 800a716:	2b00      	cmp	r3, #0
 800a718:	f47f ae79 	bne.w	800a40e <HAL_DMA_IRQHandler+0x402>
 800a71c:	e73e      	b.n	800a59c <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a71e:	0693      	lsls	r3, r2, #26
 800a720:	d455      	bmi.n	800a7ce <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a722:	f8d8 2000 	ldr.w	r2, [r8]
 800a726:	4b62      	ldr	r3, [pc, #392]	; (800a8b0 <HAL_DMA_IRQHandler+0x8a4>)
 800a728:	4c62      	ldr	r4, [pc, #392]	; (800a8b4 <HAL_DMA_IRQHandler+0x8a8>)
 800a72a:	4963      	ldr	r1, [pc, #396]	; (800a8b8 <HAL_DMA_IRQHandler+0x8ac>)
 800a72c:	42a2      	cmp	r2, r4
 800a72e:	bf18      	it	ne
 800a730:	429a      	cmpne	r2, r3
 800a732:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800a736:	bf0c      	ite	eq
 800a738:	2301      	moveq	r3, #1
 800a73a:	2300      	movne	r3, #0
 800a73c:	428a      	cmp	r2, r1
 800a73e:	bf08      	it	eq
 800a740:	f043 0301 	orreq.w	r3, r3, #1
 800a744:	3130      	adds	r1, #48	; 0x30
 800a746:	42a2      	cmp	r2, r4
 800a748:	bf08      	it	eq
 800a74a:	f043 0301 	orreq.w	r3, r3, #1
 800a74e:	3430      	adds	r4, #48	; 0x30
 800a750:	428a      	cmp	r2, r1
 800a752:	bf08      	it	eq
 800a754:	f043 0301 	orreq.w	r3, r3, #1
 800a758:	3130      	adds	r1, #48	; 0x30
 800a75a:	42a2      	cmp	r2, r4
 800a75c:	bf08      	it	eq
 800a75e:	f043 0301 	orreq.w	r3, r3, #1
 800a762:	3430      	adds	r4, #48	; 0x30
 800a764:	428a      	cmp	r2, r1
 800a766:	bf08      	it	eq
 800a768:	f043 0301 	orreq.w	r3, r3, #1
 800a76c:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a770:	42a2      	cmp	r2, r4
 800a772:	bf08      	it	eq
 800a774:	f043 0301 	orreq.w	r3, r3, #1
 800a778:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800a77c:	428a      	cmp	r2, r1
 800a77e:	bf08      	it	eq
 800a780:	f043 0301 	orreq.w	r3, r3, #1
 800a784:	3130      	adds	r1, #48	; 0x30
 800a786:	42a2      	cmp	r2, r4
 800a788:	bf08      	it	eq
 800a78a:	f043 0301 	orreq.w	r3, r3, #1
 800a78e:	3430      	adds	r4, #48	; 0x30
 800a790:	428a      	cmp	r2, r1
 800a792:	bf08      	it	eq
 800a794:	f043 0301 	orreq.w	r3, r3, #1
 800a798:	3130      	adds	r1, #48	; 0x30
 800a79a:	42a2      	cmp	r2, r4
 800a79c:	bf08      	it	eq
 800a79e:	f043 0301 	orreq.w	r3, r3, #1
 800a7a2:	3430      	adds	r4, #48	; 0x30
 800a7a4:	428a      	cmp	r2, r1
 800a7a6:	bf08      	it	eq
 800a7a8:	f043 0301 	orreq.w	r3, r3, #1
 800a7ac:	3130      	adds	r1, #48	; 0x30
 800a7ae:	42a2      	cmp	r2, r4
 800a7b0:	bf08      	it	eq
 800a7b2:	f043 0301 	orreq.w	r3, r3, #1
 800a7b6:	428a      	cmp	r2, r1
 800a7b8:	bf08      	it	eq
 800a7ba:	f043 0301 	orreq.w	r3, r3, #1
 800a7be:	b913      	cbnz	r3, 800a7c6 <HAL_DMA_IRQHandler+0x7ba>
 800a7c0:	4b3e      	ldr	r3, [pc, #248]	; (800a8bc <HAL_DMA_IRQHandler+0x8b0>)
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d17c      	bne.n	800a8c0 <HAL_DMA_IRQHandler+0x8b4>
 800a7c6:	6813      	ldr	r3, [r2, #0]
 800a7c8:	f023 0308 	bic.w	r3, r3, #8
 800a7cc:	6013      	str	r3, [r2, #0]
       if(hdma->XferHalfCpltCallback != NULL)
 800a7ce:	f8d8 3040 	ldr.w	r3, [r8, #64]	; 0x40
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f47f ae1b 	bne.w	800a40e <HAL_DMA_IRQHandler+0x402>
 800a7d8:	e6e0      	b.n	800a59c <HAL_DMA_IRQHandler+0x590>
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800a7da:	0690      	lsls	r0, r2, #26
 800a7dc:	d45b      	bmi.n	800a896 <HAL_DMA_IRQHandler+0x88a>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a7de:	f8d8 2000 	ldr.w	r2, [r8]
 800a7e2:	4b33      	ldr	r3, [pc, #204]	; (800a8b0 <HAL_DMA_IRQHandler+0x8a4>)
 800a7e4:	4c33      	ldr	r4, [pc, #204]	; (800a8b4 <HAL_DMA_IRQHandler+0x8a8>)
 800a7e6:	4934      	ldr	r1, [pc, #208]	; (800a8b8 <HAL_DMA_IRQHandler+0x8ac>)
 800a7e8:	42a2      	cmp	r2, r4
 800a7ea:	bf18      	it	ne
 800a7ec:	429a      	cmpne	r2, r3
 800a7ee:	f104 0430 	add.w	r4, r4, #48	; 0x30
 800a7f2:	bf0c      	ite	eq
 800a7f4:	2301      	moveq	r3, #1
 800a7f6:	2300      	movne	r3, #0
 800a7f8:	428a      	cmp	r2, r1
 800a7fa:	bf08      	it	eq
 800a7fc:	f043 0301 	orreq.w	r3, r3, #1
 800a800:	3130      	adds	r1, #48	; 0x30
 800a802:	42a2      	cmp	r2, r4
 800a804:	bf08      	it	eq
 800a806:	f043 0301 	orreq.w	r3, r3, #1
 800a80a:	3430      	adds	r4, #48	; 0x30
 800a80c:	428a      	cmp	r2, r1
 800a80e:	bf08      	it	eq
 800a810:	f043 0301 	orreq.w	r3, r3, #1
 800a814:	3130      	adds	r1, #48	; 0x30
 800a816:	42a2      	cmp	r2, r4
 800a818:	bf08      	it	eq
 800a81a:	f043 0301 	orreq.w	r3, r3, #1
 800a81e:	3430      	adds	r4, #48	; 0x30
 800a820:	428a      	cmp	r2, r1
 800a822:	bf08      	it	eq
 800a824:	f043 0301 	orreq.w	r3, r3, #1
 800a828:	f501 715c 	add.w	r1, r1, #880	; 0x370
 800a82c:	42a2      	cmp	r2, r4
 800a82e:	bf08      	it	eq
 800a830:	f043 0301 	orreq.w	r3, r3, #1
 800a834:	f504 745c 	add.w	r4, r4, #880	; 0x370
 800a838:	428a      	cmp	r2, r1
 800a83a:	bf08      	it	eq
 800a83c:	f043 0301 	orreq.w	r3, r3, #1
 800a840:	3130      	adds	r1, #48	; 0x30
 800a842:	42a2      	cmp	r2, r4
 800a844:	bf08      	it	eq
 800a846:	f043 0301 	orreq.w	r3, r3, #1
 800a84a:	3430      	adds	r4, #48	; 0x30
 800a84c:	428a      	cmp	r2, r1
 800a84e:	bf08      	it	eq
 800a850:	f043 0301 	orreq.w	r3, r3, #1
 800a854:	3130      	adds	r1, #48	; 0x30
 800a856:	42a2      	cmp	r2, r4
 800a858:	bf08      	it	eq
 800a85a:	f043 0301 	orreq.w	r3, r3, #1
 800a85e:	3430      	adds	r4, #48	; 0x30
 800a860:	428a      	cmp	r2, r1
 800a862:	bf08      	it	eq
 800a864:	f043 0301 	orreq.w	r3, r3, #1
 800a868:	3130      	adds	r1, #48	; 0x30
 800a86a:	42a2      	cmp	r2, r4
 800a86c:	bf08      	it	eq
 800a86e:	f043 0301 	orreq.w	r3, r3, #1
 800a872:	428a      	cmp	r2, r1
 800a874:	bf08      	it	eq
 800a876:	f043 0301 	orreq.w	r3, r3, #1
 800a87a:	b913      	cbnz	r3, 800a882 <HAL_DMA_IRQHandler+0x876>
 800a87c:	4b0f      	ldr	r3, [pc, #60]	; (800a8bc <HAL_DMA_IRQHandler+0x8b0>)
 800a87e:	429a      	cmp	r2, r3
 800a880:	d123      	bne.n	800a8ca <HAL_DMA_IRQHandler+0x8be>
 800a882:	6813      	ldr	r3, [r2, #0]
 800a884:	f023 0314 	bic.w	r3, r3, #20
 800a888:	6013      	str	r3, [r2, #0]
          hdma->State = HAL_DMA_STATE_READY;
 800a88a:	2201      	movs	r2, #1
          __HAL_UNLOCK(hdma);
 800a88c:	2300      	movs	r3, #0
          hdma->State = HAL_DMA_STATE_READY;
 800a88e:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 800a892:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferCpltCallback != NULL)
 800a896:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	f47f adb7 	bne.w	800a40e <HAL_DMA_IRQHandler+0x402>
 800a8a0:	e67c      	b.n	800a59c <HAL_DMA_IRQHandler+0x590>
 800a8a2:	bf00      	nop
 800a8a4:	58025408 	.word	0x58025408
 800a8a8:	5802541c 	.word	0x5802541c
 800a8ac:	58025494 	.word	0x58025494
 800a8b0:	40020010 	.word	0x40020010
 800a8b4:	40020028 	.word	0x40020028
 800a8b8:	40020040 	.word	0x40020040
 800a8bc:	400204b8 	.word	0x400204b8
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a8c0:	6813      	ldr	r3, [r2, #0]
 800a8c2:	f023 0304 	bic.w	r3, r3, #4
 800a8c6:	6013      	str	r3, [r2, #0]
 800a8c8:	e781      	b.n	800a7ce <HAL_DMA_IRQHandler+0x7c2>
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a8ca:	6813      	ldr	r3, [r2, #0]
 800a8cc:	f023 030a 	bic.w	r3, r3, #10
 800a8d0:	6013      	str	r3, [r2, #0]
 800a8d2:	e7da      	b.n	800a88a <HAL_DMA_IRQHandler+0x87e>

0800a8d4 <HAL_DMA_GetState>:
  return hdma->State;
 800a8d4:	f890 0035 	ldrb.w	r0, [r0, #53]	; 0x35
}
 800a8d8:	4770      	bx	lr
 800a8da:	bf00      	nop

0800a8dc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800a8dc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 800a8de:	4770      	bx	lr

0800a8e0 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a8e0:	680b      	ldr	r3, [r1, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	f000 811a 	beq.w	800ab1c <HAL_GPIO_Init+0x23c>
 800a8e8:	f04f 0c00 	mov.w	ip, #0
{
 800a8ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 800a8f0:	4662      	mov	r2, ip
{
 800a8f2:	b083      	sub	sp, #12
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a8f4:	4d94      	ldr	r5, [pc, #592]	; (800ab48 <HAL_GPIO_Init+0x268>)

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a8f6:	4f95      	ldr	r7, [pc, #596]	; (800ab4c <HAL_GPIO_Init+0x26c>)
 800a8f8:	f8df 8268 	ldr.w	r8, [pc, #616]	; 800ab64 <HAL_GPIO_Init+0x284>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a8fc:	f04f 0901 	mov.w	r9, #1
 800a900:	fa09 f902 	lsl.w	r9, r9, r2
    if (iocurrent != 0x00U)
 800a904:	ea19 0e03 	ands.w	lr, r9, r3
 800a908:	f000 80c2 	beq.w	800aa90 <HAL_GPIO_Init+0x1b0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a90c:	684b      	ldr	r3, [r1, #4]
 800a90e:	f003 0303 	and.w	r3, r3, #3
 800a912:	1e5c      	subs	r4, r3, #1
 800a914:	2c01      	cmp	r4, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a916:	f04f 0403 	mov.w	r4, #3
 800a91a:	fa04 f40c 	lsl.w	r4, r4, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a91e:	f240 80c1 	bls.w	800aaa4 <HAL_GPIO_Init+0x1c4>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a922:	43e4      	mvns	r4, r4
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a924:	2b03      	cmp	r3, #3
 800a926:	d026      	beq.n	800a976 <HAL_GPIO_Init+0x96>
      temp = GPIOx->PUPDR;
 800a928:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a92a:	ea03 0904 	and.w	r9, r3, r4
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a92e:	688b      	ldr	r3, [r1, #8]
 800a930:	fa03 f30c 	lsl.w	r3, r3, ip
 800a934:	ea43 0309 	orr.w	r3, r3, r9
      GPIOx->PUPDR = temp;
 800a938:	60c3      	str	r3, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a93a:	684b      	ldr	r3, [r1, #4]
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	2b02      	cmp	r3, #2
 800a942:	d118      	bne.n	800a976 <HAL_GPIO_Init+0x96>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a944:	f002 0307 	and.w	r3, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 800a948:	ea4f 09d2 	mov.w	r9, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a94c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800a950:	230f      	movs	r3, #15
 800a952:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 800a956:	fa03 f30b 	lsl.w	r3, r3, fp
        temp = GPIOx->AFR[position >> 3U];
 800a95a:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a95e:	ea2a 0a03 	bic.w	sl, sl, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a962:	690b      	ldr	r3, [r1, #16]
 800a964:	fa03 f30b 	lsl.w	r3, r3, fp
 800a968:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->AFR[position >> 3U] = temp;
 800a96c:	f8c9 3020 	str.w	r3, [r9, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a970:	684b      	ldr	r3, [r1, #4]
 800a972:	f003 0303 	and.w	r3, r3, #3
      temp = GPIOx->MODER;
 800a976:	f8d0 9000 	ldr.w	r9, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a97a:	fa03 f30c 	lsl.w	r3, r3, ip
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a97e:	ea09 0404 	and.w	r4, r9, r4
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a982:	4323      	orrs	r3, r4
      GPIOx->MODER = temp;
 800a984:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a986:	684b      	ldr	r3, [r1, #4]
 800a988:	f413 3f40 	tst.w	r3, #196608	; 0x30000
 800a98c:	d07f      	beq.n	800aa8e <HAL_GPIO_Init+0x1ae>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a98e:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a992:	f022 0403 	bic.w	r4, r2, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a996:	f002 0903 	and.w	r9, r2, #3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a99a:	42b8      	cmp	r0, r7
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a99c:	f043 0302 	orr.w	r3, r3, #2
 800a9a0:	f104 44b0 	add.w	r4, r4, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9a4:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9a8:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 800a9ac:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800a9b0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800a9b4:	f003 0302 	and.w	r3, r3, #2
 800a9b8:	9301      	str	r3, [sp, #4]
 800a9ba:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9bc:	f04f 030f 	mov.w	r3, #15
        temp = SYSCFG->EXTICR[position >> 2U];
 800a9c0:	f8d4 a008 	ldr.w	sl, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a9c4:	fa03 f309 	lsl.w	r3, r3, r9
 800a9c8:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a9cc:	d02b      	beq.n	800aa26 <HAL_GPIO_Init+0x146>
 800a9ce:	4540      	cmp	r0, r8
 800a9d0:	f000 8088 	beq.w	800aae4 <HAL_GPIO_Init+0x204>
 800a9d4:	4e5e      	ldr	r6, [pc, #376]	; (800ab50 <HAL_GPIO_Init+0x270>)
 800a9d6:	42b0      	cmp	r0, r6
 800a9d8:	f000 808b 	beq.w	800aaf2 <HAL_GPIO_Init+0x212>
 800a9dc:	4e5d      	ldr	r6, [pc, #372]	; (800ab54 <HAL_GPIO_Init+0x274>)
 800a9de:	42b0      	cmp	r0, r6
 800a9e0:	d079      	beq.n	800aad6 <HAL_GPIO_Init+0x1f6>
 800a9e2:	4e5d      	ldr	r6, [pc, #372]	; (800ab58 <HAL_GPIO_Init+0x278>)
 800a9e4:	42b0      	cmp	r0, r6
 800a9e6:	f000 8092 	beq.w	800ab0e <HAL_GPIO_Init+0x22e>
 800a9ea:	4e5c      	ldr	r6, [pc, #368]	; (800ab5c <HAL_GPIO_Init+0x27c>)
 800a9ec:	42b0      	cmp	r0, r6
 800a9ee:	f000 8096 	beq.w	800ab1e <HAL_GPIO_Init+0x23e>
 800a9f2:	4e5b      	ldr	r6, [pc, #364]	; (800ab60 <HAL_GPIO_Init+0x280>)
 800a9f4:	42b0      	cmp	r0, r6
 800a9f6:	f000 8083 	beq.w	800ab00 <HAL_GPIO_Init+0x220>
 800a9fa:	f8df a16c 	ldr.w	sl, [pc, #364]	; 800ab68 <HAL_GPIO_Init+0x288>
 800a9fe:	4550      	cmp	r0, sl
 800aa00:	f000 8094 	beq.w	800ab2c <HAL_GPIO_Init+0x24c>
 800aa04:	f8df a164 	ldr.w	sl, [pc, #356]	; 800ab6c <HAL_GPIO_Init+0x28c>
 800aa08:	4550      	cmp	r0, sl
 800aa0a:	f000 8096 	beq.w	800ab3a <HAL_GPIO_Init+0x25a>
 800aa0e:	f8df a160 	ldr.w	sl, [pc, #352]	; 800ab70 <HAL_GPIO_Init+0x290>
 800aa12:	4550      	cmp	r0, sl
 800aa14:	bf0c      	ite	eq
 800aa16:	f04f 0a09 	moveq.w	sl, #9
 800aa1a:	f04f 0a0a 	movne.w	sl, #10
 800aa1e:	fa0a f909 	lsl.w	r9, sl, r9
 800aa22:	ea43 0309 	orr.w	r3, r3, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa26:	60a3      	str	r3, [r4, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa2c:	684e      	ldr	r6, [r1, #4]
        temp &= ~(iocurrent);
 800aa2e:	ea6f 040e 	mvn.w	r4, lr
        temp = EXTI->RTSR1;
 800aa32:	681b      	ldr	r3, [r3, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 800aa34:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa38:	02f6      	lsls	r6, r6, #11
        temp &= ~(iocurrent);
 800aa3a:	bf54      	ite	pl
 800aa3c:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800aa3e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->RTSR1 = temp;
 800aa42:	f8c9 3000 	str.w	r3, [r9]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa46:	684e      	ldr	r6, [r1, #4]
        temp = EXTI->FTSR1;
 800aa48:	f8d9 3004 	ldr.w	r3, [r9, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 800aa4c:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa50:	02b6      	lsls	r6, r6, #10
        temp &= ~(iocurrent);
 800aa52:	bf54      	ite	pl
 800aa54:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800aa56:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI->FTSR1 = temp;
 800aa5a:	f8c9 3004 	str.w	r3, [r9, #4]

        temp = EXTI_CurrentCPU->EMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa5e:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->EMR1;
 800aa60:	f8d9 3084 	ldr.w	r3, [r9, #132]	; 0x84
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aa64:	f04f 49b0 	mov.w	r9, #1476395008	; 0x58000000
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aa68:	03b6      	lsls	r6, r6, #14
        temp &= ~(iocurrent);
 800aa6a:	bf54      	ite	pl
 800aa6c:	4023      	andpl	r3, r4
          temp |= iocurrent;
 800aa6e:	ea4e 0303 	orrmi.w	r3, lr, r3
        EXTI_CurrentCPU->EMR1 = temp;
 800aa72:	f8c9 3084 	str.w	r3, [r9, #132]	; 0x84

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aa76:	684e      	ldr	r6, [r1, #4]
        temp = EXTI_CurrentCPU->IMR1;
 800aa78:	f8d9 3080 	ldr.w	r3, [r9, #128]	; 0x80
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aa7c:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 800aa7e:	bf54      	ite	pl
 800aa80:	4023      	andpl	r3, r4
        {
          temp |= iocurrent;
 800aa82:	ea4e 0303 	orrmi.w	r3, lr, r3
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aa86:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800aa8a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aa8e:	680b      	ldr	r3, [r1, #0]
      }
    }

    position++;
 800aa90:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aa92:	f10c 0c02 	add.w	ip, ip, #2
 800aa96:	fa33 f402 	lsrs.w	r4, r3, r2
 800aa9a:	f47f af2f 	bne.w	800a8fc <HAL_GPIO_Init+0x1c>
  }
}
 800aa9e:	b003      	add	sp, #12
 800aaa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800aaa4:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aaa6:	ea23 0a04 	bic.w	sl, r3, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aaaa:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800aaac:	43e4      	mvns	r4, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 800aaae:	fa03 f30c 	lsl.w	r3, r3, ip
 800aab2:	ea43 030a 	orr.w	r3, r3, sl
        GPIOx->OSPEEDR = temp;
 800aab6:	6083      	str	r3, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aab8:	684b      	ldr	r3, [r1, #4]
        temp = GPIOx->OTYPER;
 800aaba:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aabe:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800aac2:	ea2a 0909 	bic.w	r9, sl, r9
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aac6:	4093      	lsls	r3, r2
 800aac8:	ea43 0309 	orr.w	r3, r3, r9
        GPIOx->OTYPER = temp;
 800aacc:	6043      	str	r3, [r0, #4]
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aace:	684b      	ldr	r3, [r1, #4]
 800aad0:	f003 0303 	and.w	r3, r3, #3
 800aad4:	e726      	b.n	800a924 <HAL_GPIO_Init+0x44>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aad6:	f04f 0a03 	mov.w	sl, #3
 800aada:	fa0a f909 	lsl.w	r9, sl, r9
 800aade:	ea43 0309 	orr.w	r3, r3, r9
 800aae2:	e7a0      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800aae4:	f04f 0a01 	mov.w	sl, #1
 800aae8:	fa0a f909 	lsl.w	r9, sl, r9
 800aaec:	ea43 0309 	orr.w	r3, r3, r9
 800aaf0:	e799      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800aaf2:	f04f 0a02 	mov.w	sl, #2
 800aaf6:	fa0a f909 	lsl.w	r9, sl, r9
 800aafa:	ea43 0309 	orr.w	r3, r3, r9
 800aafe:	e792      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800ab00:	f04f 0a06 	mov.w	sl, #6
 800ab04:	fa0a f909 	lsl.w	r9, sl, r9
 800ab08:	ea43 0309 	orr.w	r3, r3, r9
 800ab0c:	e78b      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800ab0e:	f04f 0a04 	mov.w	sl, #4
 800ab12:	fa0a f909 	lsl.w	r9, sl, r9
 800ab16:	ea43 0309 	orr.w	r3, r3, r9
 800ab1a:	e784      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800ab1c:	4770      	bx	lr
 800ab1e:	f04f 0a05 	mov.w	sl, #5
 800ab22:	fa0a f909 	lsl.w	r9, sl, r9
 800ab26:	ea43 0309 	orr.w	r3, r3, r9
 800ab2a:	e77c      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800ab2c:	f04f 0a07 	mov.w	sl, #7
 800ab30:	fa0a f909 	lsl.w	r9, sl, r9
 800ab34:	ea43 0309 	orr.w	r3, r3, r9
 800ab38:	e775      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800ab3a:	f04f 0a08 	mov.w	sl, #8
 800ab3e:	fa0a f909 	lsl.w	r9, sl, r9
 800ab42:	ea43 0309 	orr.w	r3, r3, r9
 800ab46:	e76e      	b.n	800aa26 <HAL_GPIO_Init+0x146>
 800ab48:	58024400 	.word	0x58024400
 800ab4c:	58020000 	.word	0x58020000
 800ab50:	58020800 	.word	0x58020800
 800ab54:	58020c00 	.word	0x58020c00
 800ab58:	58021000 	.word	0x58021000
 800ab5c:	58021400 	.word	0x58021400
 800ab60:	58021800 	.word	0x58021800
 800ab64:	58020400 	.word	0x58020400
 800ab68:	58021c00 	.word	0x58021c00
 800ab6c:	58022000 	.word	0x58022000
 800ab70:	58022400 	.word	0x58022400

0800ab74 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800ab74:	6903      	ldr	r3, [r0, #16]
 800ab76:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 800ab78:	bf14      	ite	ne
 800ab7a:	2001      	movne	r0, #1
 800ab7c:	2000      	moveq	r0, #0
 800ab7e:	4770      	bx	lr

0800ab80 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab80:	b902      	cbnz	r2, 800ab84 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ab82:	0409      	lsls	r1, r1, #16
 800ab84:	6181      	str	r1, [r0, #24]
  }
}
 800ab86:	4770      	bx	lr

0800ab88 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800ab88:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800ab8a:	ea01 0203 	and.w	r2, r1, r3
 800ab8e:	ea21 0103 	bic.w	r1, r1, r3
 800ab92:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab96:	6181      	str	r1, [r0, #24]
}
 800ab98:	4770      	bx	lr
 800ab9a:	bf00      	nop

0800ab9c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800ab9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aba0:	6803      	ldr	r3, [r0, #0]
{
 800aba2:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800aba4:	699a      	ldr	r2, [r3, #24]
 800aba6:	0694      	lsls	r4, r2, #26
 800aba8:	d46d      	bmi.n	800ac86 <I2C_WaitOnSTOPFlagUntilTimeout+0xea>
 800abaa:	4605      	mov	r5, r0
 800abac:	460f      	mov	r7, r1
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abae:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800abb2:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800abb4:	f014 0410 	ands.w	r4, r4, #16
 800abb8:	d068      	beq.n	800ac8c <I2C_WaitOnSTOPFlagUntilTimeout+0xf0>
  uint32_t error_code = 0;
 800abba:	2600      	movs	r6, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800abbc:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 800abc0:	4644      	mov	r4, r8

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800abc2:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800abc4:	46b2      	mov	sl, r6
 800abc6:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800abc8:	699a      	ldr	r2, [r3, #24]
 800abca:	d161      	bne.n	800ac90 <I2C_WaitOnSTOPFlagUntilTimeout+0xf4>
 800abcc:	0690      	lsls	r0, r2, #26
 800abce:	f100 8085 	bmi.w	800acdc <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800abd2:	f1ba 0f00 	cmp.w	sl, #0
 800abd6:	d105      	bne.n	800abe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
 800abd8:	699c      	ldr	r4, [r3, #24]
 800abda:	06a1      	lsls	r1, r4, #26
 800abdc:	d5fc      	bpl.n	800abd8 <I2C_WaitOnSTOPFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800abde:	2220      	movs	r2, #32
 800abe0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800abe2:	682b      	ldr	r3, [r5, #0]
    error_code |= HAL_I2C_ERROR_AF;
 800abe4:	f046 0404 	orr.w	r4, r6, #4
    status = HAL_ERROR;
 800abe8:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 800abea:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800abec:	05d0      	lsls	r0, r2, #23
 800abee:	d535      	bpl.n	800ac5c <I2C_WaitOnSTOPFlagUntilTimeout+0xc0>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abf0:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800abf4:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800abf6:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800abfa:	61d9      	str	r1, [r3, #28]
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800abfc:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800abfe:	d505      	bpl.n	800ac0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac00:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800ac04:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ac08:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac0a:	682b      	ldr	r3, [r5, #0]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ac0c:	0597      	lsls	r7, r2, #22
 800ac0e:	d505      	bpl.n	800ac1c <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac10:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800ac14:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ac18:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	699a      	ldr	r2, [r3, #24]
 800ac1e:	0790      	lsls	r0, r2, #30
 800ac20:	d502      	bpl.n	800ac28 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    hi2c->Instance->TXDR = 0x00U;
 800ac22:	2200      	movs	r2, #0
 800ac24:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac26:	682b      	ldr	r3, [r5, #0]
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	07d1      	lsls	r1, r2, #31
 800ac2c:	d404      	bmi.n	800ac38 <I2C_WaitOnSTOPFlagUntilTimeout+0x9c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ac2e:	699a      	ldr	r2, [r3, #24]
 800ac30:	f042 0201 	orr.w	r2, r2, #1
 800ac34:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac36:	682b      	ldr	r3, [r5, #0]
 800ac38:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac3a:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
 800ac3c:	4835      	ldr	r0, [pc, #212]	; (800ad14 <I2C_WaitOnSTOPFlagUntilTimeout+0x178>)
    hi2c->State = HAL_I2C_STATE_READY;
 800ac3e:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
 800ac40:	4002      	ands	r2, r0
      return HAL_ERROR;
 800ac42:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800ac44:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800ac46:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac48:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800ac4c:	431c      	orrs	r4, r3
 800ac4e:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ac50:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac54:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
 800ac58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ac5c:	0550      	lsls	r0, r2, #21
 800ac5e:	d4cf      	bmi.n	800ac00 <I2C_WaitOnSTOPFlagUntilTimeout+0x64>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ac60:	0596      	lsls	r6, r2, #22
 800ac62:	d4d5      	bmi.n	800ac10 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
  if (status != HAL_OK)
 800ac64:	2900      	cmp	r1, #0
 800ac66:	d1d9      	bne.n	800ac1c <I2C_WaitOnSTOPFlagUntilTimeout+0x80>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac68:	f7fe f9ac 	bl	8008fc4 <HAL_GetTick>
 800ac6c:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ac70:	682b      	ldr	r3, [r5, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac72:	42b8      	cmp	r0, r7
 800ac74:	d800      	bhi.n	800ac78 <I2C_WaitOnSTOPFlagUntilTimeout+0xdc>
 800ac76:	b91f      	cbnz	r7, 800ac80 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800ac78:	699a      	ldr	r2, [r3, #24]
 800ac7a:	f012 0220 	ands.w	r2, r2, #32
 800ac7e:	d032      	beq.n	800ace6 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ac80:	699a      	ldr	r2, [r3, #24]
 800ac82:	0692      	lsls	r2, r2, #26
 800ac84:	d595      	bpl.n	800abb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 800ac86:	2000      	movs	r0, #0
}
 800ac88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 800ac8c:	4621      	mov	r1, r4
 800ac8e:	e7ac      	b.n	800abea <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800ac90:	0692      	lsls	r2, r2, #26
 800ac92:	d423      	bmi.n	800acdc <I2C_WaitOnSTOPFlagUntilTimeout+0x140>
 800ac94:	f1ba 0f00 	cmp.w	sl, #0
 800ac98:	d1a4      	bne.n	800abe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800ac9a:	f7fe f993 	bl	8008fc4 <HAL_GetTick>
 800ac9e:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800aca0:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800aca2:	4287      	cmp	r7, r0
 800aca4:	d301      	bcc.n	800acaa <I2C_WaitOnSTOPFlagUntilTimeout+0x10e>
 800aca6:	2f00      	cmp	r7, #0
 800aca8:	d18d      	bne.n	800abc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800acaa:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800acac:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800acb0:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800acb2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800acb4:	0409      	lsls	r1, r1, #16
 800acb6:	d503      	bpl.n	800acc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              (tmp1 != I2C_CR2_STOP) && \
 800acb8:	0441      	lsls	r1, r0, #17
 800acba:	d401      	bmi.n	800acc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800acbc:	2a20      	cmp	r2, #32
 800acbe:	d11f      	bne.n	800ad00 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800acc0:	699a      	ldr	r2, [r3, #24]
 800acc2:	0690      	lsls	r0, r2, #26
 800acc4:	f53f af7f 	bmi.w	800abc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800acc8:	f7fe f97c 	bl	8008fc4 <HAL_GetTick>
 800accc:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800acce:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800acd0:	2819      	cmp	r0, #25
 800acd2:	d9f5      	bls.n	800acc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800acd4:	2620      	movs	r6, #32
              status = HAL_ERROR;
 800acd6:	f04f 0a01 	mov.w	sl, #1
 800acda:	e774      	b.n	800abc6 <I2C_WaitOnSTOPFlagUntilTimeout+0x2a>
    if (status == HAL_OK)
 800acdc:	f1ba 0f00 	cmp.w	sl, #0
 800ace0:	f43f af7d 	beq.w	800abde <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
 800ace4:	e77e      	b.n	800abe4 <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ace6:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ace8:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
 800acea:	2001      	movs	r0, #1
 800acec:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800acf0:	430b      	orrs	r3, r1
 800acf2:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800acf4:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800acf8:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
}
 800acfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800ad00:	685a      	ldr	r2, [r3, #4]
 800ad02:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad06:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800ad08:	f7fe f95c 	bl	8008fc4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800ad0c:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
 800ad0e:	4604      	mov	r4, r0
 800ad10:	e7d6      	b.n	800acc0 <I2C_WaitOnSTOPFlagUntilTimeout+0x124>
 800ad12:	bf00      	nop
 800ad14:	fe00e800 	.word	0xfe00e800

0800ad18 <HAL_I2C_Init>:
  if (hi2c == NULL)
 800ad18:	2800      	cmp	r0, #0
 800ad1a:	d056      	beq.n	800adca <HAL_I2C_Init+0xb2>
{
 800ad1c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ad1e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800ad22:	4604      	mov	r4, r0
 800ad24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d049      	beq.n	800adc0 <HAL_I2C_Init+0xa8>
  __HAL_I2C_DISABLE(hi2c);
 800ad2c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800ad2e:	2324      	movs	r3, #36	; 0x24
 800ad30:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 800ad34:	6813      	ldr	r3, [r2, #0]
 800ad36:	f023 0301 	bic.w	r3, r3, #1
 800ad3a:	6013      	str	r3, [r2, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ad3c:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ad40:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800ad44:	6113      	str	r3, [r2, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ad46:	6822      	ldr	r2, [r4, #0]
 800ad48:	6893      	ldr	r3, [r2, #8]
 800ad4a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad4e:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad50:	68e3      	ldr	r3, [r4, #12]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ad52:	6822      	ldr	r2, [r4, #0]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad54:	2b01      	cmp	r3, #1
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	bf0c      	ite	eq
 800ad5a:	f443 4300 	orreq.w	r3, r3, #32768	; 0x8000
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ad5e:	f443 4304 	orrne.w	r3, r3, #33792	; 0x8400
 800ad62:	6093      	str	r3, [r2, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ad64:	68e3      	ldr	r3, [r4, #12]
 800ad66:	2b02      	cmp	r3, #2
 800ad68:	d103      	bne.n	800ad72 <HAL_I2C_Init+0x5a>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ad70:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ad72:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800ad74:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800ad78:	4b15      	ldr	r3, [pc, #84]	; (800add0 <HAL_I2C_Init+0xb8>)
 800ad7a:	6851      	ldr	r1, [r2, #4]
 800ad7c:	430b      	orrs	r3, r1
 800ad7e:	6053      	str	r3, [r2, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800ad80:	6822      	ldr	r2, [r4, #0]
 800ad82:	68d3      	ldr	r3, [r2, #12]
 800ad84:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ad88:	60d3      	str	r3, [r2, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
 800ad8a:	69a0      	ldr	r0, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ad8c:	6821      	ldr	r1, [r4, #0]
 800ad8e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800ad92:	4313      	orrs	r3, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad94:	2200      	movs	r2, #0
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ad96:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800ad9a:	60cb      	str	r3, [r1, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ad9c:	6821      	ldr	r1, [r4, #0]
 800ad9e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800ada2:	4303      	orrs	r3, r0
  return HAL_OK;
 800ada4:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800ada6:	600b      	str	r3, [r1, #0]
  __HAL_I2C_ENABLE(hi2c);
 800ada8:	6821      	ldr	r1, [r4, #0]
 800adaa:	680b      	ldr	r3, [r1, #0]
 800adac:	f043 0301 	orr.w	r3, r3, #1
 800adb0:	600b      	str	r3, [r1, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800adb2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800adb4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800adb8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800adba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
 800adbe:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 800adc0:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 800adc4:	f7fa fd24 	bl	8005810 <HAL_I2C_MspInit>
 800adc8:	e7b0      	b.n	800ad2c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 800adca:	2001      	movs	r0, #1
}
 800adcc:	4770      	bx	lr
 800adce:	bf00      	nop
 800add0:	02008000 	.word	0x02008000

0800add4 <HAL_I2C_Master_Transmit>:
{
 800add4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800add8:	461c      	mov	r4, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800adda:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800adde:	9d0a      	ldr	r5, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 800ade0:	2b20      	cmp	r3, #32
 800ade2:	d12c      	bne.n	800ae3e <HAL_I2C_Master_Transmit+0x6a>
    __HAL_LOCK(hi2c);
 800ade4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800ade8:	4683      	mov	fp, r0
 800adea:	2b01      	cmp	r3, #1
 800adec:	d027      	beq.n	800ae3e <HAL_I2C_Master_Transmit+0x6a>
 800adee:	2301      	movs	r3, #1
 800adf0:	468a      	mov	sl, r1
 800adf2:	4616      	mov	r6, r2
 800adf4:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 800adf8:	f7fe f8e4 	bl	8008fc4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800adfc:	f8db 3000 	ldr.w	r3, [fp]
    tickstart = HAL_GetTick();
 800ae00:	4680      	mov	r8, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ae02:	699a      	ldr	r2, [r3, #24]
 800ae04:	0417      	lsls	r7, r2, #16
 800ae06:	d51d      	bpl.n	800ae44 <HAL_I2C_Master_Transmit+0x70>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae08:	f7fe f8dc 	bl	8008fc4 <HAL_GetTick>
 800ae0c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae10:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae14:	2819      	cmp	r0, #25
 800ae16:	d9f4      	bls.n	800ae02 <HAL_I2C_Master_Transmit+0x2e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ae18:	699a      	ldr	r2, [r3, #24]
 800ae1a:	0410      	lsls	r0, r2, #16
 800ae1c:	d5f1      	bpl.n	800ae02 <HAL_I2C_Master_Transmit+0x2e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae1e:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae22:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae24:	2200      	movs	r2, #0
      return HAL_ERROR;
 800ae26:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae28:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
 800ae2a:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800ae2e:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800ae32:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae36:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
}
 800ae3a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 800ae3e:	2002      	movs	r0, #2
}
 800ae40:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae44:	2121      	movs	r1, #33	; 0x21
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae46:	2200      	movs	r2, #0
    hi2c->pBuffPtr  = pData;
 800ae48:	f8cb 6024 	str.w	r6, [fp, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ae4c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ae50:	2110      	movs	r1, #16
    hi2c->XferISR   = NULL;
 800ae52:	f8cb 2034 	str.w	r2, [fp, #52]	; 0x34
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ae56:	f88b 1042 	strb.w	r1, [fp, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ae5a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->XferCount = Size;
 800ae5e:	f8ab 402a 	strh.w	r4, [fp, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae62:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
 800ae66:	b292      	uxth	r2, r2
 800ae68:	2aff      	cmp	r2, #255	; 0xff
 800ae6a:	d87e      	bhi.n	800af6a <HAL_I2C_Master_Transmit+0x196>
      hi2c->XferSize = hi2c->XferCount;
 800ae6c:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae70:	48ad      	ldr	r0, [pc, #692]	; (800b128 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = hi2c->XferCount;
 800ae72:	b292      	uxth	r2, r2
 800ae74:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ae78:	b2d2      	uxtb	r2, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae7a:	6859      	ldr	r1, [r3, #4]
 800ae7c:	4008      	ands	r0, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ae7e:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800ae82:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800ae86:	4301      	orrs	r1, r0
 800ae88:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800ae8c:	49a7      	ldr	r1, [pc, #668]	; (800b12c <HAL_I2C_Master_Transmit+0x358>)
 800ae8e:	4311      	orrs	r1, r2
 800ae90:	6059      	str	r1, [r3, #4]
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800ae92:	f04f 0920 	mov.w	r9, #32
    while (hi2c->XferCount > 0U)
 800ae96:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	f000 8107 	beq.w	800b0b0 <HAL_I2C_Master_Transmit+0x2dc>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800aea2:	f8db 3000 	ldr.w	r3, [fp]
 800aea6:	699c      	ldr	r4, [r3, #24]
 800aea8:	f014 0402 	ands.w	r4, r4, #2
 800aeac:	f040 80c5 	bne.w	800b03a <HAL_I2C_Master_Transmit+0x266>
  uint32_t itflag   = hi2c->Instance->ISR;
 800aeb0:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800aeb2:	f012 0210 	ands.w	r2, r2, #16
 800aeb6:	f000 808d 	beq.w	800afd4 <HAL_I2C_Master_Transmit+0x200>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aeba:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
 800aebc:	4646      	mov	r6, r8
  HAL_StatusTypeDef status = HAL_OK;
 800aebe:	4627      	mov	r7, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aec0:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800aec2:	f8db 3000 	ldr.w	r3, [fp]
 800aec6:	1c69      	adds	r1, r5, #1
 800aec8:	699a      	ldr	r2, [r3, #24]
 800aeca:	f040 8085 	bne.w	800afd8 <HAL_I2C_Master_Transmit+0x204>
 800aece:	0690      	lsls	r0, r2, #26
 800aed0:	f100 8106 	bmi.w	800b0e0 <HAL_I2C_Master_Transmit+0x30c>
 800aed4:	b937      	cbnz	r7, 800aee4 <HAL_I2C_Master_Transmit+0x110>
 800aed6:	699a      	ldr	r2, [r3, #24]
 800aed8:	0691      	lsls	r1, r2, #26
 800aeda:	d5fc      	bpl.n	800aed6 <HAL_I2C_Master_Transmit+0x102>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aedc:	f8c3 901c 	str.w	r9, [r3, #28]
  itflag = hi2c->Instance->ISR;
 800aee0:	f8db 3000 	ldr.w	r3, [fp]
    error_code |= HAL_I2C_ERROR_AF;
 800aee4:	f044 0204 	orr.w	r2, r4, #4
    status = HAL_ERROR;
 800aee8:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 800aeea:	6999      	ldr	r1, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800aeec:	05ce      	lsls	r6, r1, #23
 800aeee:	d54b      	bpl.n	800af88 <HAL_I2C_Master_Transmit+0x1b4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aef0:	f44f 7080 	mov.w	r0, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800aef4:	054d      	lsls	r5, r1, #21
    error_code |= HAL_I2C_ERROR_BERR;
 800aef6:	f042 0201 	orr.w	r2, r2, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800aefa:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800aefc:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800af00:	d506      	bpl.n	800af10 <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af02:	f44f 6080 	mov.w	r0, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 800af06:	f042 0208 	orr.w	r2, r2, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800af0a:	61d8      	str	r0, [r3, #28]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af0c:	f8db 3000 	ldr.w	r3, [fp]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800af10:	0589      	lsls	r1, r1, #22
 800af12:	d506      	bpl.n	800af22 <HAL_I2C_Master_Transmit+0x14e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af14:	f44f 7100 	mov.w	r1, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 800af18:	f042 0202 	orr.w	r2, r2, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800af1c:	61d9      	str	r1, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af1e:	f8db 3000 	ldr.w	r3, [fp]
 800af22:	6999      	ldr	r1, [r3, #24]
 800af24:	078e      	lsls	r6, r1, #30
 800af26:	d503      	bpl.n	800af30 <HAL_I2C_Master_Transmit+0x15c>
    hi2c->Instance->TXDR = 0x00U;
 800af28:	2100      	movs	r1, #0
 800af2a:	6299      	str	r1, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af2c:	f8db 3000 	ldr.w	r3, [fp]
 800af30:	6999      	ldr	r1, [r3, #24]
 800af32:	07cd      	lsls	r5, r1, #31
 800af34:	d405      	bmi.n	800af42 <HAL_I2C_Master_Transmit+0x16e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af36:	6999      	ldr	r1, [r3, #24]
 800af38:	f041 0101 	orr.w	r1, r1, #1
 800af3c:	6199      	str	r1, [r3, #24]
    I2C_RESET_CR2(hi2c);
 800af3e:	f8db 3000 	ldr.w	r3, [fp]
 800af42:	6859      	ldr	r1, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af44:	2400      	movs	r4, #0
    I2C_RESET_CR2(hi2c);
 800af46:	487a      	ldr	r0, [pc, #488]	; (800b130 <HAL_I2C_Master_Transmit+0x35c>)
    hi2c->State = HAL_I2C_STATE_READY;
 800af48:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
 800af4a:	4001      	ands	r1, r0
        return HAL_ERROR;
 800af4c:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 800af4e:	6059      	str	r1, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800af50:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 800af54:	f88b 4040 	strb.w	r4, [fp, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
 800af58:	431a      	orrs	r2, r3
 800af5a:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800af5e:	f88b 5041 	strb.w	r5, [fp, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800af62:	f88b 4042 	strb.w	r4, [fp, #66]	; 0x42
}
 800af66:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af6a:	22ff      	movs	r2, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800af6c:	496e      	ldr	r1, [pc, #440]	; (800b128 <HAL_I2C_Master_Transmit+0x354>)
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800af6e:	f8ab 2028 	strh.w	r2, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800af72:	685a      	ldr	r2, [r3, #4]
 800af74:	400a      	ands	r2, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800af76:	f3ca 0109 	ubfx	r1, sl, #0, #10
 800af7a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 800af7e:	4311      	orrs	r1, r2
 800af80:	4a6c      	ldr	r2, [pc, #432]	; (800b134 <HAL_I2C_Master_Transmit+0x360>)
 800af82:	430a      	orrs	r2, r1
 800af84:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800af86:	e784      	b.n	800ae92 <HAL_I2C_Master_Transmit+0xbe>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800af88:	054c      	lsls	r4, r1, #21
 800af8a:	d4ba      	bmi.n	800af02 <HAL_I2C_Master_Transmit+0x12e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800af8c:	058f      	lsls	r7, r1, #22
 800af8e:	d4c1      	bmi.n	800af14 <HAL_I2C_Master_Transmit+0x140>
  if (status != HAL_OK)
 800af90:	2800      	cmp	r0, #0
 800af92:	d1c6      	bne.n	800af22 <HAL_I2C_Master_Transmit+0x14e>
    if (Timeout != HAL_MAX_DELAY)
 800af94:	1c6a      	adds	r2, r5, #1
 800af96:	d086      	beq.n	800aea6 <HAL_I2C_Master_Transmit+0xd2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af98:	f7fe f814 	bl	8008fc4 <HAL_GetTick>
 800af9c:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800afa0:	f8db 3000 	ldr.w	r3, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afa4:	4285      	cmp	r5, r0
 800afa6:	d302      	bcc.n	800afae <HAL_I2C_Master_Transmit+0x1da>
 800afa8:	2d00      	cmp	r5, #0
 800afaa:	f47f af7c 	bne.w	800aea6 <HAL_I2C_Master_Transmit+0xd2>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800afae:	699a      	ldr	r2, [r3, #24]
 800afb0:	f012 0202 	ands.w	r2, r2, #2
 800afb4:	f47f af77 	bne.w	800aea6 <HAL_I2C_Master_Transmit+0xd2>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afb8:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afbc:	2120      	movs	r1, #32
        return HAL_ERROR;
 800afbe:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800afc0:	f88b 2040 	strb.w	r2, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afc4:	430b      	orrs	r3, r1
 800afc6:	f8cb 3044 	str.w	r3, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afca:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afce:	f88b 2042 	strb.w	r2, [fp, #66]	; 0x42
          return HAL_ERROR;
 800afd2:	e735      	b.n	800ae40 <HAL_I2C_Master_Transmit+0x6c>
  HAL_StatusTypeDef status = HAL_OK;
 800afd4:	4610      	mov	r0, r2
 800afd6:	e788      	b.n	800aeea <HAL_I2C_Master_Transmit+0x116>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800afd8:	0692      	lsls	r2, r2, #26
 800afda:	f100 8081 	bmi.w	800b0e0 <HAL_I2C_Master_Transmit+0x30c>
 800afde:	2f00      	cmp	r7, #0
 800afe0:	d180      	bne.n	800aee4 <HAL_I2C_Master_Transmit+0x110>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800afe2:	f7fd ffef 	bl	8008fc4 <HAL_GetTick>
 800afe6:	1b80      	subs	r0, r0, r6
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800afe8:	f8db 3000 	ldr.w	r3, [fp]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800afec:	4285      	cmp	r5, r0
 800afee:	d302      	bcc.n	800aff6 <HAL_I2C_Master_Transmit+0x222>
 800aff0:	2d00      	cmp	r5, #0
 800aff2:	f47f af68 	bne.w	800aec6 <HAL_I2C_Master_Transmit+0xf2>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800aff6:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 800aff8:	f89b 2042 	ldrb.w	r2, [fp, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800affc:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
 800affe:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b000:	0409      	lsls	r1, r1, #16
 800b002:	d50c      	bpl.n	800b01e <HAL_I2C_Master_Transmit+0x24a>
              (tmp1 != I2C_CR2_STOP) && \
 800b004:	0441      	lsls	r1, r0, #17
 800b006:	d40a      	bmi.n	800b01e <HAL_I2C_Master_Transmit+0x24a>
 800b008:	2a20      	cmp	r2, #32
 800b00a:	d008      	beq.n	800b01e <HAL_I2C_Master_Transmit+0x24a>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b00c:	685a      	ldr	r2, [r3, #4]
 800b00e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b012:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800b014:	f7fd ffd6 	bl	8008fc4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b018:	f8db 3000 	ldr.w	r3, [fp]
            tickstart = HAL_GetTick();
 800b01c:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b01e:	699a      	ldr	r2, [r3, #24]
 800b020:	0690      	lsls	r0, r2, #26
 800b022:	f53f af50 	bmi.w	800aec6 <HAL_I2C_Master_Transmit+0xf2>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b026:	f7fd ffcd 	bl	8008fc4 <HAL_GetTick>
 800b02a:	1b80      	subs	r0, r0, r6
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b02c:	f8db 3000 	ldr.w	r3, [fp]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b030:	2819      	cmp	r0, #25
 800b032:	d9f4      	bls.n	800b01e <HAL_I2C_Master_Transmit+0x24a>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b034:	2420      	movs	r4, #32
              status = HAL_ERROR;
 800b036:	2701      	movs	r7, #1
 800b038:	e745      	b.n	800aec6 <HAL_I2C_Master_Transmit+0xf2>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b03a:	f8db 2024 	ldr.w	r2, [fp, #36]	; 0x24
 800b03e:	7812      	ldrb	r2, [r2, #0]
 800b040:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b042:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->XferSize--;
 800b046:	f8bb 3028 	ldrh.w	r3, [fp, #40]	; 0x28
      hi2c->XferCount--;
 800b04a:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 800b04c:	f8db 1024 	ldr.w	r1, [fp, #36]	; 0x24
      hi2c->XferSize--;
 800b050:	3b01      	subs	r3, #1
      hi2c->XferCount--;
 800b052:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 800b054:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b056:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
 800b058:	f8ab 202a 	strh.w	r2, [fp, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b05c:	f8bb 202a 	ldrh.w	r2, [fp, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b060:	f8cb 1024 	str.w	r1, [fp, #36]	; 0x24
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b064:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 800b066:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b06a:	2a00      	cmp	r2, #0
 800b06c:	f43f af13 	beq.w	800ae96 <HAL_I2C_Master_Transmit+0xc2>
 800b070:	2b00      	cmp	r3, #0
 800b072:	f47f af10 	bne.w	800ae96 <HAL_I2C_Master_Transmit+0xc2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b076:	f8db 2000 	ldr.w	r2, [fp]
 800b07a:	1c6c      	adds	r4, r5, #1
 800b07c:	d134      	bne.n	800b0e8 <HAL_I2C_Master_Transmit+0x314>
 800b07e:	6993      	ldr	r3, [r2, #24]
 800b080:	0618      	lsls	r0, r3, #24
 800b082:	d5fc      	bpl.n	800b07e <HAL_I2C_Master_Transmit+0x2aa>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b084:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800b088:	b29b      	uxth	r3, r3
 800b08a:	2bff      	cmp	r3, #255	; 0xff
 800b08c:	d958      	bls.n	800b140 <HAL_I2C_Master_Transmit+0x36c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b08e:	23ff      	movs	r3, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
 800b090:	4929      	ldr	r1, [pc, #164]	; (800b138 <HAL_I2C_Master_Transmit+0x364>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b092:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b096:	6853      	ldr	r3, [r2, #4]
 800b098:	400b      	ands	r3, r1
 800b09a:	4928      	ldr	r1, [pc, #160]	; (800b13c <HAL_I2C_Master_Transmit+0x368>)
 800b09c:	ea4a 0303 	orr.w	r3, sl, r3
 800b0a0:	4319      	orrs	r1, r3
 800b0a2:	6051      	str	r1, [r2, #4]
    while (hi2c->XferCount > 0U)
 800b0a4:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
 800b0a8:	b29b      	uxth	r3, r3
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f47f aef9 	bne.w	800aea2 <HAL_I2C_Master_Transmit+0xce>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0b0:	4642      	mov	r2, r8
 800b0b2:	4629      	mov	r1, r5
 800b0b4:	4658      	mov	r0, fp
 800b0b6:	f7ff fd71 	bl	800ab9c <I2C_WaitOnSTOPFlagUntilTimeout>
 800b0ba:	2800      	cmp	r0, #0
 800b0bc:	d151      	bne.n	800b162 <HAL_I2C_Master_Transmit+0x38e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0be:	f8db 3000 	ldr.w	r3, [fp]
 800b0c2:	2220      	movs	r2, #32
    I2C_RESET_CR2(hi2c);
 800b0c4:	4c1a      	ldr	r4, [pc, #104]	; (800b130 <HAL_I2C_Master_Transmit+0x35c>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0c6:	61da      	str	r2, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800b0c8:	f8db 1000 	ldr.w	r1, [fp]
 800b0cc:	684b      	ldr	r3, [r1, #4]
 800b0ce:	4023      	ands	r3, r4
 800b0d0:	604b      	str	r3, [r1, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800b0d2:	f88b 2041 	strb.w	r2, [fp, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b0d6:	f88b 0040 	strb.w	r0, [fp, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b0da:	f88b 0042 	strb.w	r0, [fp, #66]	; 0x42
    return HAL_OK;
 800b0de:	e6af      	b.n	800ae40 <HAL_I2C_Master_Transmit+0x6c>
    if (status == HAL_OK)
 800b0e0:	2f00      	cmp	r7, #0
 800b0e2:	f43f aefb 	beq.w	800aedc <HAL_I2C_Master_Transmit+0x108>
 800b0e6:	e6fd      	b.n	800aee4 <HAL_I2C_Master_Transmit+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b0e8:	6993      	ldr	r3, [r2, #24]
 800b0ea:	0619      	lsls	r1, r3, #24
 800b0ec:	d4ca      	bmi.n	800b084 <HAL_I2C_Master_Transmit+0x2b0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ee:	f7fd ff69 	bl	8008fc4 <HAL_GetTick>
 800b0f2:	eba0 0008 	sub.w	r0, r0, r8
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b0f6:	f8db 2000 	ldr.w	r2, [fp]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0fa:	4285      	cmp	r5, r0
 800b0fc:	d301      	bcc.n	800b102 <HAL_I2C_Master_Transmit+0x32e>
 800b0fe:	2d00      	cmp	r5, #0
 800b100:	d1bb      	bne.n	800b07a <HAL_I2C_Master_Transmit+0x2a6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b102:	6993      	ldr	r3, [r2, #24]
 800b104:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 800b108:	d1b7      	bne.n	800b07a <HAL_I2C_Master_Transmit+0x2a6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b10a:	f8db 2044 	ldr.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b10e:	2120      	movs	r1, #32
          return HAL_ERROR;
 800b110:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 800b112:	f88b 3040 	strb.w	r3, [fp, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b116:	430a      	orrs	r2, r1
 800b118:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b11c:	f88b 1041 	strb.w	r1, [fp, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b120:	f88b 3042 	strb.w	r3, [fp, #66]	; 0x42
          return HAL_ERROR;
 800b124:	e68c      	b.n	800ae40 <HAL_I2C_Master_Transmit+0x6c>
 800b126:	bf00      	nop
 800b128:	fc009800 	.word	0xfc009800
 800b12c:	02002000 	.word	0x02002000
 800b130:	fe00e800 	.word	0xfe00e800
 800b134:	01ff2000 	.word	0x01ff2000
 800b138:	fc009c00 	.word	0xfc009c00
 800b13c:	01ff0000 	.word	0x01ff0000
          hi2c->XferSize = hi2c->XferCount;
 800b140:	f8bb 302a 	ldrh.w	r3, [fp, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 800b144:	4808      	ldr	r0, [pc, #32]	; (800b168 <HAL_I2C_Master_Transmit+0x394>)
          hi2c->XferSize = hi2c->XferCount;
 800b146:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b148:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
 800b14a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 800b14e:	6853      	ldr	r3, [r2, #4]
 800b150:	4003      	ands	r3, r0
 800b152:	ea4a 0303 	orr.w	r3, sl, r3
 800b156:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800b15a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800b15e:	6053      	str	r3, [r2, #4]
}
 800b160:	e699      	b.n	800ae96 <HAL_I2C_Master_Transmit+0xc2>
      return HAL_ERROR;
 800b162:	2001      	movs	r0, #1
 800b164:	e66c      	b.n	800ae40 <HAL_I2C_Master_Transmit+0x6c>
 800b166:	bf00      	nop
 800b168:	fc009c00 	.word	0xfc009c00

0800b16c <HAL_I2C_EV_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b16c:	6802      	ldr	r2, [r0, #0]
  if (hi2c->XferISR != NULL)
 800b16e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b170:	6991      	ldr	r1, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b172:	6812      	ldr	r2, [r2, #0]
  if (hi2c->XferISR != NULL)
 800b174:	b103      	cbz	r3, 800b178 <HAL_I2C_EV_IRQHandler+0xc>
    hi2c->XferISR(hi2c, itflags, itsources);
 800b176:	4718      	bx	r3
}
 800b178:	4770      	bx	lr
 800b17a:	bf00      	nop

0800b17c <HAL_I2C_SlaveTxCpltCallback>:
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop

0800b180 <HAL_I2C_SlaveRxCpltCallback>:
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop

0800b184 <I2C_ITSlaveSeqCplt>:
{
 800b184:	b508      	push	{r3, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b186:	6803      	ldr	r3, [r0, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b188:	2100      	movs	r1, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b18a:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b18c:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b190:	0451      	lsls	r1, r2, #17
 800b192:	d50c      	bpl.n	800b1ae <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b194:	681a      	ldr	r2, [r3, #0]
 800b196:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b19a:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b19c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b1a0:	2b29      	cmp	r3, #41	; 0x29
 800b1a2:	d00e      	beq.n	800b1c2 <I2C_ITSlaveSeqCplt+0x3e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b1a4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b1a8:	2b2a      	cmp	r3, #42	; 0x2a
 800b1aa:	d024      	beq.n	800b1f6 <I2C_ITSlaveSeqCplt+0x72>
}
 800b1ac:	bd08      	pop	{r3, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b1ae:	0412      	lsls	r2, r2, #16
 800b1b0:	d5f4      	bpl.n	800b19c <I2C_ITSlaveSeqCplt+0x18>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b1b8:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b1ba:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b1be:	2b29      	cmp	r3, #41	; 0x29
 800b1c0:	d1f0      	bne.n	800b1a4 <I2C_ITSlaveSeqCplt+0x20>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1c2:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1c4:	2321      	movs	r3, #33	; 0x21
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1c6:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 800b1c8:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1cc:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b1d0:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1d2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1d6:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b1d8:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800b1dc:	2a28      	cmp	r2, #40	; 0x28
 800b1de:	bf0c      	ite	eq
 800b1e0:	f06f 0242 	mvneq.w	r2, #66	; 0x42
 800b1e4:	f06f 02f2 	mvnne.w	r2, #242	; 0xf2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800b1ec:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b1f0:	f7ff ffc4 	bl	800b17c <HAL_I2C_SlaveTxCpltCallback>
}
 800b1f4:	bd08      	pop	{r3, pc}
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b1f6:	2228      	movs	r2, #40	; 0x28
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b1f8:	2322      	movs	r3, #34	; 0x22
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b1fa:	6801      	ldr	r1, [r0, #0]
    __HAL_UNLOCK(hi2c);
 800b1fc:	f04f 0c00 	mov.w	ip, #0
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b200:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b204:	6303      	str	r3, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b206:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b20a:	680b      	ldr	r3, [r1, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b20c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 800b210:	2a28      	cmp	r2, #40	; 0x28
 800b212:	bf0c      	ite	eq
 800b214:	f06f 0244 	mvneq.w	r2, #68	; 0x44
 800b218:	f06f 02f4 	mvnne.w	r2, #244	; 0xf4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b21c:	4013      	ands	r3, r2
 800b21e:	600b      	str	r3, [r1, #0]
    __HAL_UNLOCK(hi2c);
 800b220:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b224:	f7ff ffac 	bl	800b180 <HAL_I2C_SlaveRxCpltCallback>
}
 800b228:	bd08      	pop	{r3, pc}
 800b22a:	bf00      	nop

0800b22c <HAL_I2C_AddrCallback>:
}
 800b22c:	4770      	bx	lr
 800b22e:	bf00      	nop

0800b230 <I2C_ITAddrCplt.part.0>:
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b230:	b570      	push	{r4, r5, r6, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 800b232:	6804      	ldr	r4, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 800b234:	4684      	mov	ip, r0
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b236:	68c3      	ldr	r3, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 800b238:	69a1      	ldr	r1, [r4, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b23a:	69a2      	ldr	r2, [r4, #24]
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b23c:	2b02      	cmp	r3, #2
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b23e:	68a5      	ldr	r5, [r4, #8]
    transferdirection = I2C_GET_DIR(hi2c);
 800b240:	f3c1 4100 	ubfx	r1, r1, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b244:	ea4f 4212 	mov.w	r2, r2, lsr #16
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b248:	68e6      	ldr	r6, [r4, #12]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b24a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b24e:	d10f      	bne.n	800b270 <I2C_ITAddrCplt.part.0+0x40>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b250:	ea82 13d5 	eor.w	r3, r2, r5, lsr #7
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b254:	f3c5 0209 	ubfx	r2, r5, #0, #10
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b258:	f013 0306 	ands.w	r3, r3, #6
 800b25c:	d106      	bne.n	800b26c <I2C_ITAddrCplt.part.0+0x3c>
        hi2c->AddrEventCount++;
 800b25e:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800b260:	3501      	adds	r5, #1
 800b262:	6485      	str	r5, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800b264:	6c85      	ldr	r5, [r0, #72]	; 0x48
 800b266:	2d02      	cmp	r5, #2
 800b268:	d00c      	beq.n	800b284 <I2C_ITAddrCplt.part.0+0x54>
}
 800b26a:	bd70      	pop	{r4, r5, r6, pc}
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b26c:	f006 02fe 	and.w	r2, r6, #254	; 0xfe
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b270:	6823      	ldr	r3, [r4, #0]
 800b272:	f023 03b8 	bic.w	r3, r3, #184	; 0xb8
 800b276:	6023      	str	r3, [r4, #0]
      __HAL_UNLOCK(hi2c);
 800b278:	2300      	movs	r3, #0
 800b27a:	f88c 3040 	strb.w	r3, [ip, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b27e:	f7ff ffd5 	bl	800b22c <HAL_I2C_AddrCallback>
}
 800b282:	bd70      	pop	{r4, r5, r6, pc}
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b284:	2508      	movs	r5, #8
          hi2c->AddrEventCount = 0U;
 800b286:	6483      	str	r3, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b288:	61e5      	str	r5, [r4, #28]
          __HAL_UNLOCK(hi2c);
 800b28a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b28e:	f7ff ffcd 	bl	800b22c <HAL_I2C_AddrCallback>
}
 800b292:	bd70      	pop	{r4, r5, r6, pc}

0800b294 <HAL_I2C_ListenCpltCallback>:
 800b294:	4770      	bx	lr
 800b296:	bf00      	nop

0800b298 <HAL_I2C_ErrorCallback>:
 800b298:	4770      	bx	lr
 800b29a:	bf00      	nop

0800b29c <HAL_I2C_AbortCpltCallback>:
 800b29c:	4770      	bx	lr
 800b29e:	bf00      	nop

0800b2a0 <I2C_DMAAbort>:
{
 800b2a0:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b2a2:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 800b2a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800b2a6:	b10b      	cbz	r3, 800b2ac <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b2a8:	2200      	movs	r2, #0
 800b2aa:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->hdmarx != NULL)
 800b2ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800b2ae:	b10b      	cbz	r3, 800b2b4 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	651a      	str	r2, [r3, #80]	; 0x50
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b2b4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800b2b8:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2ba:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b2be:	d005      	beq.n	800b2cc <I2C_DMAAbort+0x2c>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2c0:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b2c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b2c6:	f7ff ffe7 	bl	800b298 <HAL_I2C_ErrorCallback>
}
 800b2ca:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800b2cc:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800b2ce:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b2d2:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b2d6:	6303      	str	r3, [r0, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800b2d8:	f7ff ffe0 	bl	800b29c <HAL_I2C_AbortCpltCallback>
}
 800b2dc:	bd08      	pop	{r3, pc}
 800b2de:	bf00      	nop

0800b2e0 <I2C_ITError>:
{
 800b2e0:	b570      	push	{r4, r5, r6, lr}
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b2e2:	4a5d      	ldr	r2, [pc, #372]	; (800b458 <I2C_ITError+0x178>)
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b2e4:	2500      	movs	r5, #0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b2e6:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 800b2ea:	4604      	mov	r4, r0
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b2ec:	f880 5042 	strb.w	r5, [r0, #66]	; 0x42
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b2f0:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b2f2:	62c2      	str	r2, [r0, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800b2f4:	8545      	strh	r5, [r0, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 800b2f6:	6c42      	ldr	r2, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b2f8:	2b02      	cmp	r3, #2
  hi2c->ErrorCode |= ErrorCode;
 800b2fa:	ea41 0102 	orr.w	r1, r1, r2
 800b2fe:	6441      	str	r1, [r0, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b300:	d874      	bhi.n	800b3ec <I2C_ITError+0x10c>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b302:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b306:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b30a:	f002 0228 	and.w	r2, r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b30e:	6800      	ldr	r0, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b310:	f001 0128 	and.w	r1, r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b314:	2a28      	cmp	r2, #40	; 0x28
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b316:	6803      	ldr	r3, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b318:	bf14      	ite	ne
 800b31a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
 800b31e:	f06f 0246 	mvneq.w	r2, #70	; 0x46
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b322:	2928      	cmp	r1, #40	; 0x28
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b324:	f04f 0128 	mov.w	r1, #40	; 0x28
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b328:	bf18      	it	ne
 800b32a:	f06f 02f6 	mvnne.w	r2, #246	; 0xf6
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b32e:	4013      	ands	r3, r2
 800b330:	6003      	str	r3, [r0, #0]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b332:	4b4a      	ldr	r3, [pc, #296]	; (800b45c <I2C_ITError+0x17c>)
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b334:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b338:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b33a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 800b33c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b33e:	b118      	cbz	r0, 800b348 <I2C_ITError+0x68>
 800b340:	2b11      	cmp	r3, #17
 800b342:	d01e      	beq.n	800b382 <I2C_ITError+0xa2>
 800b344:	2b21      	cmp	r3, #33	; 0x21
 800b346:	d01c      	beq.n	800b382 <I2C_ITError+0xa2>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b348:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b34a:	b118      	cbz	r0, 800b354 <I2C_ITError+0x74>
 800b34c:	2b12      	cmp	r3, #18
 800b34e:	d030      	beq.n	800b3b2 <I2C_ITError+0xd2>
 800b350:	2b22      	cmp	r3, #34	; 0x22
 800b352:	d02e      	beq.n	800b3b2 <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b354:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b358:	2b60      	cmp	r3, #96	; 0x60
    hi2c->PreviousState = I2C_STATE_NONE;
 800b35a:	f04f 0300 	mov.w	r3, #0
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b35e:	d006      	beq.n	800b36e <I2C_ITError+0x8e>
    HAL_I2C_ErrorCallback(hi2c);
 800b360:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 800b362:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800b364:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800b368:	f7ff ff96 	bl	800b298 <HAL_I2C_ErrorCallback>
}
 800b36c:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 800b36e:	2220      	movs	r2, #32
    HAL_I2C_AbortCpltCallback(hi2c);
 800b370:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800b372:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 800b376:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b37a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 800b37c:	f7ff ff8e 	bl	800b29c <HAL_I2C_AbortCpltCallback>
}
 800b380:	bd70      	pop	{r4, r5, r6, pc}
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b382:	6823      	ldr	r3, [r4, #0]
 800b384:	681a      	ldr	r2, [r3, #0]
 800b386:	0451      	lsls	r1, r2, #17
 800b388:	d460      	bmi.n	800b44c <I2C_ITError+0x16c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b38a:	f7ff faa3 	bl	800a8d4 <HAL_DMA_GetState>
 800b38e:	2801      	cmp	r0, #1
 800b390:	d0e0      	beq.n	800b354 <I2C_ITError+0x74>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b392:	6ba2      	ldr	r2, [r4, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 800b394:	2300      	movs	r3, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b396:	4932      	ldr	r1, [pc, #200]	; (800b460 <I2C_ITError+0x180>)
 800b398:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800b39a:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b39e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b3a0:	f7fe fd04 	bl	8009dac <HAL_DMA_Abort_IT>
 800b3a4:	2800      	cmp	r0, #0
 800b3a6:	d0e1      	beq.n	800b36c <I2C_ITError+0x8c>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b3a8:	6ba0      	ldr	r0, [r4, #56]	; 0x38
}
 800b3aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b3ae:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3b0:	4718      	bx	r3
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	681a      	ldr	r2, [r3, #0]
 800b3b6:	0412      	lsls	r2, r2, #16
 800b3b8:	d504      	bpl.n	800b3c4 <I2C_ITError+0xe4>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b3ba:	681a      	ldr	r2, [r3, #0]
 800b3bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800b3c0:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b3c2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b3c4:	f7ff fa86 	bl	800a8d4 <HAL_DMA_GetState>
 800b3c8:	2801      	cmp	r0, #1
 800b3ca:	d0c3      	beq.n	800b354 <I2C_ITError+0x74>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b3cc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
      __HAL_UNLOCK(hi2c);
 800b3ce:	2300      	movs	r3, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b3d0:	4923      	ldr	r1, [pc, #140]	; (800b460 <I2C_ITError+0x180>)
 800b3d2:	6511      	str	r1, [r2, #80]	; 0x50
      __HAL_UNLOCK(hi2c);
 800b3d4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b3d8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800b3da:	f7fe fce7 	bl	8009dac <HAL_DMA_Abort_IT>
 800b3de:	2800      	cmp	r0, #0
 800b3e0:	d0c4      	beq.n	800b36c <I2C_ITError+0x8c>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b3e2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
}
 800b3e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b3e8:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800b3ea:	4718      	bx	r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3ec:	6802      	ldr	r2, [r0, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3ee:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3f2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b3f6:	6813      	ldr	r3, [r2, #0]
 800b3f8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b3fc:	6013      	str	r3, [r2, #0]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b3fe:	6803      	ldr	r3, [r0, #0]
 800b400:	699a      	ldr	r2, [r3, #24]
 800b402:	0792      	lsls	r2, r2, #30
 800b404:	d501      	bpl.n	800b40a <I2C_ITError+0x12a>
    hi2c->Instance->TXDR = 0x00U;
 800b406:	629d      	str	r5, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b408:	6803      	ldr	r3, [r0, #0]
 800b40a:	699a      	ldr	r2, [r3, #24]
 800b40c:	07d6      	lsls	r6, r2, #31
 800b40e:	d403      	bmi.n	800b418 <I2C_ITError+0x138>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b410:	699a      	ldr	r2, [r3, #24]
 800b412:	f042 0201 	orr.w	r2, r2, #1
 800b416:	619a      	str	r2, [r3, #24]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b418:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b41c:	2b60      	cmp	r3, #96	; 0x60
 800b41e:	d012      	beq.n	800b446 <I2C_ITError+0x166>
      hi2c->State         = HAL_I2C_STATE_READY;
 800b420:	2220      	movs	r2, #32
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b422:	6823      	ldr	r3, [r4, #0]
      hi2c->State         = HAL_I2C_STATE_READY;
 800b424:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b428:	699a      	ldr	r2, [r3, #24]
 800b42a:	0695      	lsls	r5, r2, #26
 800b42c:	d50b      	bpl.n	800b446 <I2C_ITError+0x166>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b42e:	699a      	ldr	r2, [r3, #24]
 800b430:	06d0      	lsls	r0, r2, #27
 800b432:	d506      	bpl.n	800b442 <I2C_ITError+0x162>
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b434:	2210      	movs	r2, #16
 800b436:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b438:	6c62      	ldr	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b43a:	6823      	ldr	r3, [r4, #0]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b43c:	f042 0204 	orr.w	r2, r2, #4
 800b440:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b442:	2220      	movs	r2, #32
 800b444:	61da      	str	r2, [r3, #28]
    hi2c->XferISR       = NULL;
 800b446:	2300      	movs	r3, #0
 800b448:	6363      	str	r3, [r4, #52]	; 0x34
 800b44a:	e776      	b.n	800b33a <I2C_ITError+0x5a>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b452:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b454:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800b456:	e798      	b.n	800b38a <I2C_ITError+0xaa>
 800b458:	ffff0000 	.word	0xffff0000
 800b45c:	0800b60d 	.word	0x0800b60d
 800b460:	0800b2a1 	.word	0x0800b2a1

0800b464 <I2C_ITSlaveCplt>:
{
 800b464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b466:	6802      	ldr	r2, [r0, #0]
{
 800b468:	460d      	mov	r5, r1
 800b46a:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b46c:	6811      	ldr	r1, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b46e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b472:	2020      	movs	r0, #32
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b474:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b478:	61d0      	str	r0, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b47a:	2b21      	cmp	r3, #33	; 0x21
 800b47c:	d16f      	bne.n	800b55e <I2C_ITSlaveCplt+0xfa>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b47e:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b480:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b484:	6802      	ldr	r2, [r0, #0]
 800b486:	f022 02fa 	bic.w	r2, r2, #250	; 0xfa
 800b48a:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b48c:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b48e:	6822      	ldr	r2, [r4, #0]
  I2C_RESET_CR2(hi2c);
 800b490:	485c      	ldr	r0, [pc, #368]	; (800b604 <I2C_ITSlaveCplt+0x1a0>)
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b492:	6853      	ldr	r3, [r2, #4]
 800b494:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b498:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 800b49a:	6822      	ldr	r2, [r4, #0]
 800b49c:	6853      	ldr	r3, [r2, #4]
 800b49e:	4003      	ands	r3, r0
 800b4a0:	6053      	str	r3, [r2, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b4a2:	6823      	ldr	r3, [r4, #0]
 800b4a4:	699a      	ldr	r2, [r3, #24]
 800b4a6:	0797      	lsls	r7, r2, #30
 800b4a8:	d502      	bpl.n	800b4b0 <I2C_ITSlaveCplt+0x4c>
    hi2c->Instance->TXDR = 0x00U;
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b4ae:	6823      	ldr	r3, [r4, #0]
 800b4b0:	699a      	ldr	r2, [r3, #24]
 800b4b2:	07d6      	lsls	r6, r2, #31
 800b4b4:	d403      	bmi.n	800b4be <I2C_ITSlaveCplt+0x5a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b4b6:	699a      	ldr	r2, [r3, #24]
 800b4b8:	f042 0201 	orr.w	r2, r2, #1
 800b4bc:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b4be:	0448      	lsls	r0, r1, #17
 800b4c0:	d558      	bpl.n	800b574 <I2C_ITSlaveCplt+0x110>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b4c2:	6822      	ldr	r2, [r4, #0]
 800b4c4:	6813      	ldr	r3, [r2, #0]
 800b4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b4ca:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 800b4cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b4ce:	b11b      	cbz	r3, 800b4d8 <I2C_ITSlaveCplt+0x74>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800b4d0:	681a      	ldr	r2, [r3, #0]
 800b4d2:	6853      	ldr	r3, [r2, #4]
 800b4d4:	b29b      	uxth	r3, r3
 800b4d6:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b4d8:	076a      	lsls	r2, r5, #29
 800b4da:	d50a      	bpl.n	800b4f2 <I2C_ITSlaveCplt+0x8e>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b4dc:	6822      	ldr	r2, [r4, #0]
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b4de:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b4e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b4e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b4e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b4ea:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b4ec:	3301      	adds	r3, #1
 800b4ee:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b4f0:	bb72      	cbnz	r2, 800b550 <I2C_ITSlaveCplt+0xec>
  if (hi2c->XferCount != 0U)
 800b4f2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b4f4:	b29b      	uxth	r3, r3
 800b4f6:	b11b      	cbz	r3, 800b500 <I2C_ITSlaveCplt+0x9c>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b4f8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b4fa:	f043 0304 	orr.w	r3, r3, #4
 800b4fe:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b500:	2700      	movs	r7, #0
 800b502:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b506:	6c66      	ldr	r6, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 800b508:	6367      	str	r7, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b50a:	2e00      	cmp	r6, #0
 800b50c:	d13d      	bne.n	800b58a <I2C_ITSlaveCplt+0x126>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b50e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800b510:	4d3d      	ldr	r5, [pc, #244]	; (800b608 <I2C_ITSlaveCplt+0x1a4>)
 800b512:	42ab      	cmp	r3, r5
 800b514:	d10e      	bne.n	800b534 <I2C_ITSlaveCplt+0xd0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b516:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b51a:	4620      	mov	r0, r4
    __HAL_UNLOCK(hi2c);
 800b51c:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b520:	2b22      	cmp	r3, #34	; 0x22
    hi2c->State = HAL_I2C_STATE_READY;
 800b522:	f04f 0320 	mov.w	r3, #32
 800b526:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800b52a:	6326      	str	r6, [r4, #48]	; 0x30
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b52c:	d066      	beq.n	800b5fc <I2C_ITSlaveCplt+0x198>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b52e:	f7ff fe25 	bl	800b17c <HAL_I2C_SlaveTxCpltCallback>
}
 800b532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveSeqCplt(hi2c);
 800b534:	4620      	mov	r0, r4
 800b536:	f7ff fe25 	bl	800b184 <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 800b53a:	2320      	movs	r3, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b53c:	62e5      	str	r5, [r4, #44]	; 0x2c
    HAL_I2C_ListenCpltCallback(hi2c);
 800b53e:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800b540:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b544:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800b548:	6326      	str	r6, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800b54a:	f7ff fea3 	bl	800b294 <HAL_I2C_ListenCpltCallback>
}
 800b54e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hi2c->XferCount--;
 800b550:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b552:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b554:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b556:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b558:	b29b      	uxth	r3, r3
 800b55a:	8563      	strh	r3, [r4, #42]	; 0x2a
 800b55c:	e7c9      	b.n	800b4f2 <I2C_ITSlaveCplt+0x8e>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b55e:	2b22      	cmp	r3, #34	; 0x22
 800b560:	d195      	bne.n	800b48e <I2C_ITSlaveCplt+0x2a>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b562:	6820      	ldr	r0, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b564:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b568:	6802      	ldr	r2, [r0, #0]
 800b56a:	f022 02fc 	bic.w	r2, r2, #252	; 0xfc
 800b56e:	6002      	str	r2, [r0, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b570:	6323      	str	r3, [r4, #48]	; 0x30
 800b572:	e78c      	b.n	800b48e <I2C_ITSlaveCplt+0x2a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b574:	0409      	lsls	r1, r1, #16
 800b576:	d5af      	bpl.n	800b4d8 <I2C_ITSlaveCplt+0x74>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b578:	6822      	ldr	r2, [r4, #0]
 800b57a:	6813      	ldr	r3, [r2, #0]
 800b57c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b580:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 800b582:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b584:	2b00      	cmp	r3, #0
 800b586:	d1a3      	bne.n	800b4d0 <I2C_ITSlaveCplt+0x6c>
 800b588:	e7a6      	b.n	800b4d8 <I2C_ITSlaveCplt+0x74>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b58a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b58c:	4620      	mov	r0, r4
 800b58e:	f7ff fea7 	bl	800b2e0 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b592:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b596:	2b28      	cmp	r3, #40	; 0x28
 800b598:	d1cb      	bne.n	800b532 <I2C_ITSlaveCplt+0xce>
  hi2c->State = HAL_I2C_STATE_READY;
 800b59a:	2320      	movs	r3, #32
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b59c:	4a1a      	ldr	r2, [pc, #104]	; (800b608 <I2C_ITSlaveCplt+0x1a4>)
  hi2c->XferISR = NULL;
 800b59e:	6367      	str	r7, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b5a0:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b5a2:	6327      	str	r7, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b5a4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b5a8:	076b      	lsls	r3, r5, #29
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5aa:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b5ae:	d512      	bpl.n	800b5d6 <I2C_ITSlaveCplt+0x172>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b5b0:	6822      	ldr	r2, [r4, #0]
 800b5b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b5b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b5b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b5ba:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b5bc:	3301      	adds	r3, #1
 800b5be:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b5c0:	b14a      	cbz	r2, 800b5d6 <I2C_ITSlaveCplt+0x172>
      hi2c->XferCount--;
 800b5c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b5c4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b5c6:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b5c8:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b5ca:	b29b      	uxth	r3, r3
 800b5cc:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b5ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b5d0:	f043 0304 	orr.w	r3, r3, #4
 800b5d4:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b5d6:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5d8:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b5da:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800b5de:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b5e0:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b5e4:	6813      	ldr	r3, [r2, #0]
 800b5e6:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b5ea:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b5ec:	6823      	ldr	r3, [r4, #0]
 800b5ee:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800b5f0:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800b5f2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800b5f6:	f7ff fe4d 	bl	800b294 <HAL_I2C_ListenCpltCallback>
}
 800b5fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b5fc:	f7ff fdc0 	bl	800b180 <HAL_I2C_SlaveRxCpltCallback>
}
 800b600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b602:	bf00      	nop
 800b604:	fe00e800 	.word	0xfe00e800
 800b608:	ffff0000 	.word	0xffff0000

0800b60c <I2C_Slave_ISR_IT>:
{
 800b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hi2c);
 800b60e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
  uint32_t tmpoptions = hi2c->XferOptions;
 800b612:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 800b614:	2b01      	cmp	r3, #1
 800b616:	d07f      	beq.n	800b718 <I2C_Slave_ISR_IT+0x10c>
 800b618:	4617      	mov	r7, r2
 800b61a:	2301      	movs	r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b61c:	068a      	lsls	r2, r1, #26
 800b61e:	4604      	mov	r4, r0
 800b620:	460d      	mov	r5, r1
  __HAL_LOCK(hi2c);
 800b622:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b626:	d501      	bpl.n	800b62c <I2C_Slave_ISR_IT+0x20>
 800b628:	06bb      	lsls	r3, r7, #26
 800b62a:	d461      	bmi.n	800b6f0 <I2C_Slave_ISR_IT+0xe4>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b62c:	06ea      	lsls	r2, r5, #27
 800b62e:	d51b      	bpl.n	800b668 <I2C_Slave_ISR_IT+0x5c>
 800b630:	06fb      	lsls	r3, r7, #27
 800b632:	d519      	bpl.n	800b668 <I2C_Slave_ISR_IT+0x5c>
    if (hi2c->XferCount == 0U)
 800b634:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b636:	b29b      	uxth	r3, r3
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d15e      	bne.n	800b6fa <I2C_Slave_ISR_IT+0xee>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b63c:	f894 2041 	ldrb.w	r2, [r4, #65]	; 0x41
 800b640:	2a28      	cmp	r2, #40	; 0x28
 800b642:	d102      	bne.n	800b64a <I2C_Slave_ISR_IT+0x3e>
 800b644:	f1b6 7f00 	cmp.w	r6, #33554432	; 0x2000000
 800b648:	d07f      	beq.n	800b74a <I2C_Slave_ISR_IT+0x13e>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b64a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b64e:	2210      	movs	r2, #16
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b650:	2b29      	cmp	r3, #41	; 0x29
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b652:	6823      	ldr	r3, [r4, #0]
 800b654:	61da      	str	r2, [r3, #28]
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b656:	d102      	bne.n	800b65e <I2C_Slave_ISR_IT+0x52>
 800b658:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800b65c:	d162      	bne.n	800b724 <I2C_Slave_ISR_IT+0x118>
  __HAL_UNLOCK(hi2c);
 800b65e:	2300      	movs	r3, #0
  return HAL_OK;
 800b660:	4618      	mov	r0, r3
  __HAL_UNLOCK(hi2c);
 800b662:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
}
 800b666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b668:	076a      	lsls	r2, r5, #29
 800b66a:	d40d      	bmi.n	800b688 <I2C_Slave_ISR_IT+0x7c>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b66c:	0728      	lsls	r0, r5, #28
 800b66e:	d529      	bpl.n	800b6c4 <I2C_Slave_ISR_IT+0xb8>
 800b670:	0739      	lsls	r1, r7, #28
 800b672:	d527      	bpl.n	800b6c4 <I2C_Slave_ISR_IT+0xb8>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b674:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800b678:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b67c:	2b28      	cmp	r3, #40	; 0x28
 800b67e:	d060      	beq.n	800b742 <I2C_Slave_ISR_IT+0x136>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b680:	6823      	ldr	r3, [r4, #0]
 800b682:	2208      	movs	r2, #8
 800b684:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b686:	e7ea      	b.n	800b65e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800b688:	077b      	lsls	r3, r7, #29
 800b68a:	d5ef      	bpl.n	800b66c <I2C_Slave_ISR_IT+0x60>
    if (hi2c->XferCount > 0U)
 800b68c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b68e:	b29b      	uxth	r3, r3
 800b690:	b16b      	cbz	r3, 800b6ae <I2C_Slave_ISR_IT+0xa2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b692:	6822      	ldr	r2, [r4, #0]
 800b694:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b698:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 800b69a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b69c:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b69e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b6a0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b6a2:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b6a4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b6a6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800b6a8:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b6aa:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b6ac:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 800b6ae:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d1d3      	bne.n	800b65e <I2C_Slave_ISR_IT+0x52>
 800b6b6:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 800b6ba:	d0d0      	beq.n	800b65e <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800b6bc:	4620      	mov	r0, r4
 800b6be:	f7ff fd61 	bl	800b184 <I2C_ITSlaveSeqCplt>
 800b6c2:	e7cc      	b.n	800b65e <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b6c4:	07aa      	lsls	r2, r5, #30
 800b6c6:	d5ca      	bpl.n	800b65e <I2C_Slave_ISR_IT+0x52>
 800b6c8:	07bb      	lsls	r3, r7, #30
 800b6ca:	d5c8      	bpl.n	800b65e <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 800b6cc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	b323      	cbz	r3, 800b71c <I2C_Slave_ISR_IT+0x110>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b6d2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800b6d4:	6823      	ldr	r3, [r4, #0]
 800b6d6:	7812      	ldrb	r2, [r2, #0]
 800b6d8:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b6da:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 800b6dc:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b6de:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b6e0:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 800b6e2:	3101      	adds	r1, #1
      hi2c->XferSize--;
 800b6e4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b6e6:	b29b      	uxth	r3, r3
      hi2c->pBuffPtr++;
 800b6e8:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 800b6ea:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b6ec:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b6ee:	e7b6      	b.n	800b65e <I2C_Slave_ISR_IT+0x52>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800b6f0:	f7ff feb8 	bl	800b464 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800b6f4:	06ea      	lsls	r2, r5, #27
 800b6f6:	d5b7      	bpl.n	800b668 <I2C_Slave_ISR_IT+0x5c>
 800b6f8:	e79a      	b.n	800b630 <I2C_Slave_ISR_IT+0x24>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	2210      	movs	r2, #16
 800b6fe:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b700:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b702:	f043 0304 	orr.w	r3, r3, #4
 800b706:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b708:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b70c:	d1a7      	bne.n	800b65e <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800b70e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800b710:	4620      	mov	r0, r4
 800b712:	f7ff fde5 	bl	800b2e0 <I2C_ITError>
 800b716:	e7a2      	b.n	800b65e <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 800b718:	2002      	movs	r0, #2
}
 800b71a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800b71c:	f036 7380 	bics.w	r3, r6, #16777216	; 0x1000000
 800b720:	d19d      	bne.n	800b65e <I2C_Slave_ISR_IT+0x52>
 800b722:	e7cb      	b.n	800b6bc <I2C_Slave_ISR_IT+0xb0>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b724:	6823      	ldr	r3, [r4, #0]
 800b726:	699a      	ldr	r2, [r3, #24]
 800b728:	0790      	lsls	r0, r2, #30
 800b72a:	d502      	bpl.n	800b732 <I2C_Slave_ISR_IT+0x126>
    hi2c->Instance->TXDR = 0x00U;
 800b72c:	2200      	movs	r2, #0
 800b72e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b730:	6823      	ldr	r3, [r4, #0]
 800b732:	699a      	ldr	r2, [r3, #24]
 800b734:	07d1      	lsls	r1, r2, #31
 800b736:	d4c1      	bmi.n	800b6bc <I2C_Slave_ISR_IT+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b738:	699a      	ldr	r2, [r3, #24]
 800b73a:	f042 0201 	orr.w	r2, r2, #1
 800b73e:	619a      	str	r2, [r3, #24]
 800b740:	e7bc      	b.n	800b6bc <I2C_Slave_ISR_IT+0xb0>
 800b742:	4620      	mov	r0, r4
 800b744:	f7ff fd74 	bl	800b230 <I2C_ITAddrCplt.part.0>
 800b748:	e789      	b.n	800b65e <I2C_Slave_ISR_IT+0x52>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b74a:	4918      	ldr	r1, [pc, #96]	; (800b7ac <I2C_Slave_ISR_IT+0x1a0>)
  hi2c->State = HAL_I2C_STATE_READY;
 800b74c:	2220      	movs	r2, #32
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b74e:	076d      	lsls	r5, r5, #29
  hi2c->XferISR = NULL;
 800b750:	6363      	str	r3, [r4, #52]	; 0x34
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b752:	62e1      	str	r1, [r4, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b754:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b756:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b75a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b75e:	d512      	bpl.n	800b786 <I2C_Slave_ISR_IT+0x17a>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b760:	6822      	ldr	r2, [r4, #0]
 800b762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b764:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b766:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800b768:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b76a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    hi2c->pBuffPtr++;
 800b76c:	3301      	adds	r3, #1
 800b76e:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800b770:	b14a      	cbz	r2, 800b786 <I2C_Slave_ISR_IT+0x17a>
      hi2c->XferCount--;
 800b772:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800b774:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800b776:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800b778:	8522      	strh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800b77a:	b29b      	uxth	r3, r3
 800b77c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b77e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800b780:	f043 0304 	orr.w	r3, r3, #4
 800b784:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b786:	6822      	ldr	r2, [r4, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b788:	2010      	movs	r0, #16
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b78a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
 800b78e:	2100      	movs	r1, #0
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b790:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b794:	6813      	ldr	r3, [r2, #0]
 800b796:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 800b79a:	6013      	str	r3, [r2, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b79c:	6823      	ldr	r3, [r4, #0]
 800b79e:	61d8      	str	r0, [r3, #28]
  HAL_I2C_ListenCpltCallback(hi2c);
 800b7a0:	4620      	mov	r0, r4
  __HAL_UNLOCK(hi2c);
 800b7a2:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 800b7a6:	f7ff fd75 	bl	800b294 <HAL_I2C_ListenCpltCallback>
}
 800b7aa:	e758      	b.n	800b65e <I2C_Slave_ISR_IT+0x52>
 800b7ac:	ffff0000 	.word	0xffff0000

0800b7b0 <HAL_I2C_ER_IRQHandler>:
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b7b0:	6803      	ldr	r3, [r0, #0]
{
 800b7b2:	b410      	push	{r4}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800b7b4:	699a      	ldr	r2, [r3, #24]
 800b7b6:	461c      	mov	r4, r3
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800b7b8:	6819      	ldr	r1, [r3, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800b7ba:	f412 7f80 	tst.w	r2, #256	; 0x100
 800b7be:	d032      	beq.n	800b826 <HAL_I2C_ER_IRQHandler+0x76>
 800b7c0:	f011 0f80 	tst.w	r1, #128	; 0x80
 800b7c4:	d021      	beq.n	800b80a <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b7c6:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b7c8:	f44f 7480 	mov.w	r4, #256	; 0x100
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800b7cc:	f041 0101 	orr.w	r1, r1, #1
 800b7d0:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b7d2:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b7d4:	0553      	lsls	r3, r2, #21
 800b7d6:	d507      	bpl.n	800b7e8 <HAL_I2C_ER_IRQHandler+0x38>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b7d8:	6803      	ldr	r3, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b7da:	6c41      	ldr	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b7dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800b7e0:	f041 0108 	orr.w	r1, r1, #8
 800b7e4:	6441      	str	r1, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b7e6:	61dc      	str	r4, [r3, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b7e8:	0592      	lsls	r2, r2, #22
 800b7ea:	d507      	bpl.n	800b7fc <HAL_I2C_ER_IRQHandler+0x4c>
 800b7ec:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b7ee:	6c43      	ldr	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b7f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800b7f4:	f043 0302 	orr.w	r3, r3, #2
 800b7f8:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b7fa:	61e2      	str	r2, [r4, #28]
  tmperror = hi2c->ErrorCode;
 800b7fc:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b7fe:	f011 0f0b 	tst.w	r1, #11
 800b802:	d10c      	bne.n	800b81e <HAL_I2C_ER_IRQHandler+0x6e>
}
 800b804:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b808:	4770      	bx	lr
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b80a:	0553      	lsls	r3, r2, #21
 800b80c:	d4f6      	bmi.n	800b7fc <HAL_I2C_ER_IRQHandler+0x4c>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800b80e:	0593      	lsls	r3, r2, #22
 800b810:	d5f4      	bpl.n	800b7fc <HAL_I2C_ER_IRQHandler+0x4c>
 800b812:	060a      	lsls	r2, r1, #24
 800b814:	d4eb      	bmi.n	800b7ee <HAL_I2C_ER_IRQHandler+0x3e>
  tmperror = hi2c->ErrorCode;
 800b816:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800b818:	f011 0f0b 	tst.w	r1, #11
 800b81c:	d0f2      	beq.n	800b804 <HAL_I2C_ER_IRQHandler+0x54>
}
 800b81e:	f85d 4b04 	ldr.w	r4, [sp], #4
    I2C_ITError(hi2c, tmperror);
 800b822:	f7ff bd5d 	b.w	800b2e0 <I2C_ITError>
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800b826:	f412 6f80 	tst.w	r2, #1024	; 0x400
 800b82a:	d0f0      	beq.n	800b80e <HAL_I2C_ER_IRQHandler+0x5e>
 800b82c:	0609      	lsls	r1, r1, #24
 800b82e:	d5e5      	bpl.n	800b7fc <HAL_I2C_ER_IRQHandler+0x4c>
 800b830:	e7d3      	b.n	800b7da <HAL_I2C_ER_IRQHandler+0x2a>
 800b832:	bf00      	nop

0800b834 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b834:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800b838:	2a20      	cmp	r2, #32
 800b83a:	d129      	bne.n	800b890 <HAL_I2CEx_ConfigAnalogFilter+0x5c>
 800b83c:	4603      	mov	r3, r0
{
 800b83e:	b500      	push	{lr}
 800b840:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b844:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b848:	2a01      	cmp	r2, #1
 800b84a:	d023      	beq.n	800b894 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 800b84c:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b84e:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b850:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 800b854:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b858:	2224      	movs	r2, #36	; 0x24
 800b85a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b85e:	6802      	ldr	r2, [r0, #0]
 800b860:	f022 0201 	bic.w	r2, r2, #1
 800b864:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b866:	6818      	ldr	r0, [r3, #0]
 800b868:	6802      	ldr	r2, [r0, #0]
 800b86a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b86e:	6002      	str	r2, [r0, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 800b870:	6818      	ldr	r0, [r3, #0]
 800b872:	6802      	ldr	r2, [r0, #0]
 800b874:	4311      	orrs	r1, r2
 800b876:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800b878:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800b87a:	6819      	ldr	r1, [r3, #0]
 800b87c:	680a      	ldr	r2, [r1, #0]
 800b87e:	f042 0201 	orr.w	r2, r2, #1
 800b882:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b884:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b888:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b88c:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800b890:	2002      	movs	r0, #2
}
 800b892:	4770      	bx	lr
    return HAL_BUSY;
 800b894:	2002      	movs	r0, #2
}
 800b896:	f85d fb04 	ldr.w	pc, [sp], #4
 800b89a:	bf00      	nop

0800b89c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b89c:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 800b8a0:	2a20      	cmp	r2, #32
 800b8a2:	d127      	bne.n	800b8f4 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 800b8a4:	4603      	mov	r3, r0
{
 800b8a6:	b500      	push	{lr}
 800b8a8:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8ac:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 800b8b0:	2a01      	cmp	r2, #1
 800b8b2:	d021      	beq.n	800b8f8 <HAL_I2CEx_ConfigDigitalFilter+0x5c>
 800b8b4:	2201      	movs	r2, #1

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b8b6:	6800      	ldr	r0, [r0, #0]
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b8b8:	f04f 0c00 	mov.w	ip, #0
    __HAL_LOCK(hi2c);
 800b8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_BUSY;
 800b8c0:	2224      	movs	r2, #36	; 0x24
 800b8c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 800b8c6:	6802      	ldr	r2, [r0, #0]
 800b8c8:	f022 0201 	bic.w	r2, r2, #1
 800b8cc:	6002      	str	r2, [r0, #0]
    tmpreg = hi2c->Instance->CR1;
 800b8ce:	6818      	ldr	r0, [r3, #0]
 800b8d0:	6802      	ldr	r2, [r0, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 800b8d2:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
 800b8d6:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
    hi2c->Instance->CR1 = tmpreg;
 800b8da:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 800b8dc:	4660      	mov	r0, ip
    __HAL_I2C_ENABLE(hi2c);
 800b8de:	6819      	ldr	r1, [r3, #0]
 800b8e0:	680a      	ldr	r2, [r1, #0]
 800b8e2:	f042 0201 	orr.w	r2, r2, #1
 800b8e6:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800b8e8:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800b8ec:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800b8f0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 800b8f4:	2002      	movs	r0, #2
}
 800b8f6:	4770      	bx	lr
    return HAL_BUSY;
 800b8f8:	2002      	movs	r0, #2
}
 800b8fa:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8fe:	bf00      	nop

0800b900 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b900:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b902:	4c10      	ldr	r4, [pc, #64]	; (800b944 <HAL_PWREx_ConfigSupply+0x44>)
 800b904:	68e3      	ldr	r3, [r4, #12]
 800b906:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b90a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800b90c:	d105      	bne.n	800b91a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800b90e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800b912:	1a18      	subs	r0, r3, r0
 800b914:	bf18      	it	ne
 800b916:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800b918:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800b91a:	f023 0307 	bic.w	r3, r3, #7
 800b91e:	4318      	orrs	r0, r3
 800b920:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
 800b922:	f7fd fb4f 	bl	8008fc4 <HAL_GetTick>
 800b926:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b928:	e005      	b.n	800b936 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800b92a:	f7fd fb4b 	bl	8008fc4 <HAL_GetTick>
 800b92e:	1b40      	subs	r0, r0, r5
 800b930:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800b934:	d804      	bhi.n	800b940 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800b936:	6863      	ldr	r3, [r4, #4]
 800b938:	049b      	lsls	r3, r3, #18
 800b93a:	d5f6      	bpl.n	800b92a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
 800b93c:	2000      	movs	r0, #0
}
 800b93e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 800b940:	2001      	movs	r0, #1
}
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	58024800 	.word	0x58024800

0800b948 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b948:	4b3b      	ldr	r3, [pc, #236]	; (800ba38 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
uint32_t HAL_RCC_GetSysClockFreq(void)
 800b94a:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b94c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b94e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b950:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
 800b952:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b956:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b958:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800b95c:	d038      	beq.n	800b9d0 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b95e:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b962:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b966:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b96a:	fb05 f101 	mul.w	r1, r5, r1
 800b96e:	2a01      	cmp	r2, #1
 800b970:	ee07 1a90 	vmov	s15, r1
 800b974:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
 800b978:	d002      	beq.n	800b980 <HAL_RCC_GetSysClockFreq.part.0+0x38>
 800b97a:	2a02      	cmp	r2, #2
 800b97c:	d04e      	beq.n	800ba1c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
 800b97e:	b34a      	cbz	r2, 800b9d4 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b980:	ee07 0a90 	vmov	s15, r0
 800b984:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800ba3c <HAL_RCC_GetSysClockFreq.part.0+0xf4>
 800b988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b98c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b98e:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800b992:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ba40 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800b996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b99a:	ee06 3a90 	vmov	s13, r3
 800b99e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800b9a2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b9a6:	ee76 6a85 	vadd.f32	s13, s13, s10
 800b9aa:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b9ae:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b9b2:	4b21      	ldr	r3, [pc, #132]	; (800ba38 <HAL_RCC_GetSysClockFreq.part.0+0xf0>)
 800b9b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b9b6:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b9ba:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b9c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9cc:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800b9d0:	bc30      	pop	{r4, r5}
 800b9d2:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9d4:	681a      	ldr	r2, [r3, #0]
 800b9d6:	0692      	lsls	r2, r2, #26
 800b9d8:	d527      	bpl.n	800ba2a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9da:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9dc:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9e0:	4a18      	ldr	r2, [pc, #96]	; (800ba44 <HAL_RCC_GetSysClockFreq.part.0+0xfc>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9e2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b9e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9e8:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9f0:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800ba40 <HAL_RCC_GetSysClockFreq.part.0+0xf8>
 800b9f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b9f8:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b9fa:	ee06 3a90 	vmov	s13, r3
 800b9fe:	ee05 2a90 	vmov	s11, r2
 800ba02:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800ba06:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800ba0a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800ba0e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800ba12:	eee7 6a05 	vfma.f32	s13, s14, s10
 800ba16:	ee66 6a26 	vmul.f32	s13, s12, s13
 800ba1a:	e7ca      	b.n	800b9b2 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba1c:	ee07 0a90 	vmov	s15, r0
 800ba20:	eddf 6a09 	vldr	s13, [pc, #36]	; 800ba48 <HAL_RCC_GetSysClockFreq.part.0+0x100>
 800ba24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba28:	e7b0      	b.n	800b98c <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ba2a:	ee07 0a90 	vmov	s15, r0
 800ba2e:	eddf 6a07 	vldr	s13, [pc, #28]	; 800ba4c <HAL_RCC_GetSysClockFreq.part.0+0x104>
 800ba32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba36:	e7a9      	b.n	800b98c <HAL_RCC_GetSysClockFreq.part.0+0x44>
 800ba38:	58024400 	.word	0x58024400
 800ba3c:	4a742400 	.word	0x4a742400
 800ba40:	39000000 	.word	0x39000000
 800ba44:	03d09000 	.word	0x03d09000
 800ba48:	4bbebc20 	.word	0x4bbebc20
 800ba4c:	4c742400 	.word	0x4c742400

0800ba50 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 800ba50:	2800      	cmp	r0, #0
 800ba52:	f000 81ef 	beq.w	800be34 <HAL_RCC_OscConfig+0x3e4>
{
 800ba56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ba58:	6803      	ldr	r3, [r0, #0]
 800ba5a:	4604      	mov	r4, r0
 800ba5c:	07d9      	lsls	r1, r3, #31
 800ba5e:	d52e      	bpl.n	800babe <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba60:	49a4      	ldr	r1, [pc, #656]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800ba62:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ba64:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ba66:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800ba6a:	2a10      	cmp	r2, #16
 800ba6c:	f000 8107 	beq.w	800bc7e <HAL_RCC_OscConfig+0x22e>
 800ba70:	2a18      	cmp	r2, #24
 800ba72:	f000 80ff 	beq.w	800bc74 <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba76:	6863      	ldr	r3, [r4, #4]
 800ba78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba7c:	f000 812a 	beq.w	800bcd4 <HAL_RCC_OscConfig+0x284>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f040 8188 	bne.w	800bd96 <HAL_RCC_OscConfig+0x346>
 800ba86:	4b9b      	ldr	r3, [pc, #620]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800ba88:	681a      	ldr	r2, [r3, #0]
 800ba8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800ba8e:	601a      	str	r2, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ba96:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba98:	6863      	ldr	r3, [r4, #4]
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	f000 815c 	beq.w	800bd58 <HAL_RCC_OscConfig+0x308>
        tickstart = HAL_GetTick();
 800baa0:	f7fd fa90 	bl	8008fc4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800baa4:	4e93      	ldr	r6, [pc, #588]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
 800baa6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800baa8:	e005      	b.n	800bab6 <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800baaa:	f7fd fa8b 	bl	8008fc4 <HAL_GetTick>
 800baae:	1b40      	subs	r0, r0, r5
 800bab0:	2864      	cmp	r0, #100	; 0x64
 800bab2:	f200 814f 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bab6:	6833      	ldr	r3, [r6, #0]
 800bab8:	039b      	lsls	r3, r3, #14
 800baba:	d5f6      	bpl.n	800baaa <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800babc:	6823      	ldr	r3, [r4, #0]
 800babe:	079d      	lsls	r5, r3, #30
 800bac0:	f100 808a 	bmi.w	800bbd8 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bac4:	06d9      	lsls	r1, r3, #27
 800bac6:	d533      	bpl.n	800bb30 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bac8:	4a8a      	ldr	r2, [pc, #552]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800baca:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bacc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bace:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bad2:	2b08      	cmp	r3, #8
 800bad4:	f000 80e3 	beq.w	800bc9e <HAL_RCC_OscConfig+0x24e>
 800bad8:	2b18      	cmp	r3, #24
 800bada:	f000 80db 	beq.w	800bc94 <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bade:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
 800bae0:	4d84      	ldr	r5, [pc, #528]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	f000 8176 	beq.w	800bdd4 <HAL_RCC_OscConfig+0x384>
        __HAL_RCC_CSI_ENABLE();
 800bae8:	682b      	ldr	r3, [r5, #0]
 800baea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800baee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800baf0:	f7fd fa68 	bl	8008fc4 <HAL_GetTick>
 800baf4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800baf6:	e005      	b.n	800bb04 <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800baf8:	f7fd fa64 	bl	8008fc4 <HAL_GetTick>
 800bafc:	1b80      	subs	r0, r0, r6
 800bafe:	2802      	cmp	r0, #2
 800bb00:	f200 8128 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	05db      	lsls	r3, r3, #23
 800bb08:	d5f6      	bpl.n	800baf8 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bb0a:	f7fd fa73 	bl	8008ff4 <HAL_GetREVID>
 800bb0e:	f241 0303 	movw	r3, #4099	; 0x1003
 800bb12:	4298      	cmp	r0, r3
 800bb14:	f200 8266 	bhi.w	800bfe4 <HAL_RCC_OscConfig+0x594>
 800bb18:	6a22      	ldr	r2, [r4, #32]
 800bb1a:	686b      	ldr	r3, [r5, #4]
 800bb1c:	2a20      	cmp	r2, #32
 800bb1e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bb22:	bf0c      	ite	eq
 800bb24:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 800bb28:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800bb2c:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb2e:	6823      	ldr	r3, [r4, #0]
 800bb30:	071d      	lsls	r5, r3, #28
 800bb32:	d516      	bpl.n	800bb62 <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bb34:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 800bb36:	4d6f      	ldr	r5, [pc, #444]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 811b 	beq.w	800bd74 <HAL_RCC_OscConfig+0x324>
      __HAL_RCC_LSI_ENABLE();
 800bb3e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bb40:	f043 0301 	orr.w	r3, r3, #1
 800bb44:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800bb46:	f7fd fa3d 	bl	8008fc4 <HAL_GetTick>
 800bb4a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bb4c:	e005      	b.n	800bb5a <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bb4e:	f7fd fa39 	bl	8008fc4 <HAL_GetTick>
 800bb52:	1b80      	subs	r0, r0, r6
 800bb54:	2802      	cmp	r0, #2
 800bb56:	f200 80fd 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bb5a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bb5c:	0798      	lsls	r0, r3, #30
 800bb5e:	d5f6      	bpl.n	800bb4e <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	069a      	lsls	r2, r3, #26
 800bb64:	d516      	bpl.n	800bb94 <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bb66:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
 800bb68:	4d62      	ldr	r5, [pc, #392]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	f000 8121 	beq.w	800bdb2 <HAL_RCC_OscConfig+0x362>
      __HAL_RCC_HSI48_ENABLE();
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb76:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800bb78:	f7fd fa24 	bl	8008fc4 <HAL_GetTick>
 800bb7c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb7e:	e005      	b.n	800bb8c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bb80:	f7fd fa20 	bl	8008fc4 <HAL_GetTick>
 800bb84:	1b80      	subs	r0, r0, r6
 800bb86:	2802      	cmp	r0, #2
 800bb88:	f200 80e4 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bb8c:	682b      	ldr	r3, [r5, #0]
 800bb8e:	049f      	lsls	r7, r3, #18
 800bb90:	d5f6      	bpl.n	800bb80 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	0759      	lsls	r1, r3, #29
 800bb96:	f100 80a3 	bmi.w	800bce0 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bb9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bb9c:	b1d0      	cbz	r0, 800bbd4 <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800bb9e:	4d55      	ldr	r5, [pc, #340]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bba0:	692b      	ldr	r3, [r5, #16]
 800bba2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bba6:	2b18      	cmp	r3, #24
 800bba8:	f000 81b6 	beq.w	800bf18 <HAL_RCC_OscConfig+0x4c8>
        __HAL_RCC_PLL_DISABLE();
 800bbac:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbae:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800bbb0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800bbb4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bbb6:	f000 8149 	beq.w	800be4c <HAL_RCC_OscConfig+0x3fc>
        tickstart = HAL_GetTick();
 800bbba:	f7fd fa03 	bl	8008fc4 <HAL_GetTick>
 800bbbe:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbc0:	e005      	b.n	800bbce <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bbc2:	f7fd f9ff 	bl	8008fc4 <HAL_GetTick>
 800bbc6:	1b00      	subs	r0, r0, r4
 800bbc8:	2802      	cmp	r0, #2
 800bbca:	f200 80c3 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800bbce:	682b      	ldr	r3, [r5, #0]
 800bbd0:	019b      	lsls	r3, r3, #6
 800bbd2:	d4f6      	bmi.n	800bbc2 <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
 800bbd4:	2000      	movs	r0, #0
}
 800bbd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bbd8:	4a46      	ldr	r2, [pc, #280]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bbda:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bbdc:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bbde:	f013 0338 	ands.w	r3, r3, #56	; 0x38
 800bbe2:	d12d      	bne.n	800bc40 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bbe4:	4b43      	ldr	r3, [pc, #268]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bbe6:	68e2      	ldr	r2, [r4, #12]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	0759      	lsls	r1, r3, #29
 800bbec:	d501      	bpl.n	800bbf2 <HAL_RCC_OscConfig+0x1a2>
 800bbee:	2a00      	cmp	r2, #0
 800bbf0:	d04e      	beq.n	800bc90 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bbf2:	4d40      	ldr	r5, [pc, #256]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bbf4:	682b      	ldr	r3, [r5, #0]
 800bbf6:	f023 0319 	bic.w	r3, r3, #25
 800bbfa:	4313      	orrs	r3, r2
 800bbfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bbfe:	f7fd f9e1 	bl	8008fc4 <HAL_GetTick>
 800bc02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc04:	e005      	b.n	800bc12 <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc06:	f7fd f9dd 	bl	8008fc4 <HAL_GetTick>
 800bc0a:	1b80      	subs	r0, r0, r6
 800bc0c:	2802      	cmp	r0, #2
 800bc0e:	f200 80a1 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	075b      	lsls	r3, r3, #29
 800bc16:	d5f6      	bpl.n	800bc06 <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc18:	f7fd f9ec 	bl	8008ff4 <HAL_GetREVID>
 800bc1c:	f241 0303 	movw	r3, #4099	; 0x1003
 800bc20:	4298      	cmp	r0, r3
 800bc22:	f200 80fe 	bhi.w	800be22 <HAL_RCC_OscConfig+0x3d2>
 800bc26:	6922      	ldr	r2, [r4, #16]
 800bc28:	686b      	ldr	r3, [r5, #4]
 800bc2a:	2a40      	cmp	r2, #64	; 0x40
 800bc2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bc30:	bf0c      	ite	eq
 800bc32:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
 800bc36:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800bc3a:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	e741      	b.n	800bac4 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bc40:	2b18      	cmp	r3, #24
 800bc42:	f000 80ea 	beq.w	800be1a <HAL_RCC_OscConfig+0x3ca>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc46:	4d2b      	ldr	r5, [pc, #172]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bc48:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc4a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bc4c:	2a00      	cmp	r2, #0
 800bc4e:	f000 80d3 	beq.w	800bdf8 <HAL_RCC_OscConfig+0x3a8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc52:	f023 0319 	bic.w	r3, r3, #25
 800bc56:	4313      	orrs	r3, r2
 800bc58:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bc5a:	f7fd f9b3 	bl	8008fc4 <HAL_GetTick>
 800bc5e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc60:	e004      	b.n	800bc6c <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bc62:	f7fd f9af 	bl	8008fc4 <HAL_GetTick>
 800bc66:	1b80      	subs	r0, r0, r6
 800bc68:	2802      	cmp	r0, #2
 800bc6a:	d873      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc6c:	682b      	ldr	r3, [r5, #0]
 800bc6e:	075f      	lsls	r7, r3, #29
 800bc70:	d5f7      	bpl.n	800bc62 <HAL_RCC_OscConfig+0x212>
 800bc72:	e7d1      	b.n	800bc18 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bc74:	f001 0103 	and.w	r1, r1, #3
 800bc78:	2902      	cmp	r1, #2
 800bc7a:	f47f aefc 	bne.w	800ba76 <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc7e:	4a1d      	ldr	r2, [pc, #116]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bc80:	6812      	ldr	r2, [r2, #0]
 800bc82:	0392      	lsls	r2, r2, #14
 800bc84:	f57f af1b 	bpl.w	800babe <HAL_RCC_OscConfig+0x6e>
 800bc88:	6862      	ldr	r2, [r4, #4]
 800bc8a:	2a00      	cmp	r2, #0
 800bc8c:	f47f af17 	bne.w	800babe <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
 800bc90:	2001      	movs	r0, #1
}
 800bc92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bc94:	f002 0203 	and.w	r2, r2, #3
 800bc98:	2a01      	cmp	r2, #1
 800bc9a:	f47f af20 	bne.w	800bade <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bc9e:	4b15      	ldr	r3, [pc, #84]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	05da      	lsls	r2, r3, #23
 800bca4:	d502      	bpl.n	800bcac <HAL_RCC_OscConfig+0x25c>
 800bca6:	69e3      	ldr	r3, [r4, #28]
 800bca8:	2b80      	cmp	r3, #128	; 0x80
 800bcaa:	d1f1      	bne.n	800bc90 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bcac:	f7fd f9a2 	bl	8008ff4 <HAL_GetREVID>
 800bcb0:	f241 0303 	movw	r3, #4099	; 0x1003
 800bcb4:	4298      	cmp	r0, r3
 800bcb6:	f200 80bf 	bhi.w	800be38 <HAL_RCC_OscConfig+0x3e8>
 800bcba:	6a22      	ldr	r2, [r4, #32]
 800bcbc:	2a20      	cmp	r2, #32
 800bcbe:	f000 81ad 	beq.w	800c01c <HAL_RCC_OscConfig+0x5cc>
 800bcc2:	490c      	ldr	r1, [pc, #48]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bcc4:	684b      	ldr	r3, [r1, #4]
 800bcc6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800bcca:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
 800bcce:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	e72d      	b.n	800bb30 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcd4:	4a07      	ldr	r2, [pc, #28]	; (800bcf4 <HAL_RCC_OscConfig+0x2a4>)
 800bcd6:	6813      	ldr	r3, [r2, #0]
 800bcd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcdc:	6013      	str	r3, [r2, #0]
 800bcde:	e6db      	b.n	800ba98 <HAL_RCC_OscConfig+0x48>
    PWR->CR1 |= PWR_CR1_DBP;
 800bce0:	4d05      	ldr	r5, [pc, #20]	; (800bcf8 <HAL_RCC_OscConfig+0x2a8>)
 800bce2:	682b      	ldr	r3, [r5, #0]
 800bce4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bce8:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 800bcea:	f7fd f96b 	bl	8008fc4 <HAL_GetTick>
 800bcee:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bcf0:	e009      	b.n	800bd06 <HAL_RCC_OscConfig+0x2b6>
 800bcf2:	bf00      	nop
 800bcf4:	58024400 	.word	0x58024400
 800bcf8:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bcfc:	f7fd f962 	bl	8008fc4 <HAL_GetTick>
 800bd00:	1b80      	subs	r0, r0, r6
 800bd02:	2864      	cmp	r0, #100	; 0x64
 800bd04:	d826      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800bd06:	682b      	ldr	r3, [r5, #0]
 800bd08:	05da      	lsls	r2, r3, #23
 800bd0a:	d5f7      	bpl.n	800bcfc <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd0c:	68a3      	ldr	r3, [r4, #8]
 800bd0e:	2b01      	cmp	r3, #1
 800bd10:	f000 8171 	beq.w	800bff6 <HAL_RCC_OscConfig+0x5a6>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	f040 8174 	bne.w	800c002 <HAL_RCC_OscConfig+0x5b2>
 800bd1a:	4baa      	ldr	r3, [pc, #680]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
 800bd1c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd1e:	f022 0201 	bic.w	r2, r2, #1
 800bd22:	671a      	str	r2, [r3, #112]	; 0x70
 800bd24:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800bd26:	f022 0204 	bic.w	r2, r2, #4
 800bd2a:	671a      	str	r2, [r3, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800bd2c:	68a3      	ldr	r3, [r4, #8]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	f000 8140 	beq.w	800bfb4 <HAL_RCC_OscConfig+0x564>
      tickstart = HAL_GetTick();
 800bd34:	f7fd f946 	bl	8008fc4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd38:	4ea2      	ldr	r6, [pc, #648]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd3a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bd3e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd40:	e004      	b.n	800bd4c <HAL_RCC_OscConfig+0x2fc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd42:	f7fd f93f 	bl	8008fc4 <HAL_GetTick>
 800bd46:	1b40      	subs	r0, r0, r5
 800bd48:	42b8      	cmp	r0, r7
 800bd4a:	d803      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bd4c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800bd4e:	079b      	lsls	r3, r3, #30
 800bd50:	d5f7      	bpl.n	800bd42 <HAL_RCC_OscConfig+0x2f2>
 800bd52:	e722      	b.n	800bb9a <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
 800bd54:	2003      	movs	r0, #3
}
 800bd56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tickstart = HAL_GetTick();
 800bd58:	f7fd f934 	bl	8008fc4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd5c:	4e99      	ldr	r6, [pc, #612]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
        tickstart = HAL_GetTick();
 800bd5e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd60:	e004      	b.n	800bd6c <HAL_RCC_OscConfig+0x31c>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd62:	f7fd f92f 	bl	8008fc4 <HAL_GetTick>
 800bd66:	1b40      	subs	r0, r0, r5
 800bd68:	2864      	cmp	r0, #100	; 0x64
 800bd6a:	d8f3      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd6c:	6833      	ldr	r3, [r6, #0]
 800bd6e:	039f      	lsls	r7, r3, #14
 800bd70:	d4f7      	bmi.n	800bd62 <HAL_RCC_OscConfig+0x312>
 800bd72:	e6a3      	b.n	800babc <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
 800bd74:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bd76:	f023 0301 	bic.w	r3, r3, #1
 800bd7a:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 800bd7c:	f7fd f922 	bl	8008fc4 <HAL_GetTick>
 800bd80:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bd82:	e004      	b.n	800bd8e <HAL_RCC_OscConfig+0x33e>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bd84:	f7fd f91e 	bl	8008fc4 <HAL_GetTick>
 800bd88:	1b80      	subs	r0, r0, r6
 800bd8a:	2802      	cmp	r0, #2
 800bd8c:	d8e2      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bd8e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800bd90:	0799      	lsls	r1, r3, #30
 800bd92:	d4f7      	bmi.n	800bd84 <HAL_RCC_OscConfig+0x334>
 800bd94:	e6e4      	b.n	800bb60 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bd96:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bd9a:	4b8a      	ldr	r3, [pc, #552]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	f47f ae74 	bne.w	800ba8a <HAL_RCC_OscConfig+0x3a>
 800bda2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800bda6:	601a      	str	r2, [r3, #0]
 800bda8:	681a      	ldr	r2, [r3, #0]
 800bdaa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800bdae:	601a      	str	r2, [r3, #0]
 800bdb0:	e672      	b.n	800ba98 <HAL_RCC_OscConfig+0x48>
      __HAL_RCC_HSI48_DISABLE();
 800bdb2:	682b      	ldr	r3, [r5, #0]
 800bdb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdb8:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800bdba:	f7fd f903 	bl	8008fc4 <HAL_GetTick>
 800bdbe:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bdc0:	e004      	b.n	800bdcc <HAL_RCC_OscConfig+0x37c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdc2:	f7fd f8ff 	bl	8008fc4 <HAL_GetTick>
 800bdc6:	1b80      	subs	r0, r0, r6
 800bdc8:	2802      	cmp	r0, #2
 800bdca:	d8c3      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bdcc:	682b      	ldr	r3, [r5, #0]
 800bdce:	0498      	lsls	r0, r3, #18
 800bdd0:	d4f7      	bmi.n	800bdc2 <HAL_RCC_OscConfig+0x372>
 800bdd2:	e6de      	b.n	800bb92 <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
 800bdd4:	682b      	ldr	r3, [r5, #0]
 800bdd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bddc:	f7fd f8f2 	bl	8008fc4 <HAL_GetTick>
 800bde0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bde2:	e004      	b.n	800bdee <HAL_RCC_OscConfig+0x39e>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bde4:	f7fd f8ee 	bl	8008fc4 <HAL_GetTick>
 800bde8:	1b80      	subs	r0, r0, r6
 800bdea:	2802      	cmp	r0, #2
 800bdec:	d8b2      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bdee:	682b      	ldr	r3, [r5, #0]
 800bdf0:	05df      	lsls	r7, r3, #23
 800bdf2:	d4f7      	bmi.n	800bde4 <HAL_RCC_OscConfig+0x394>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bdf4:	6823      	ldr	r3, [r4, #0]
 800bdf6:	e69b      	b.n	800bb30 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
 800bdf8:	f023 0301 	bic.w	r3, r3, #1
 800bdfc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800bdfe:	f7fd f8e1 	bl	8008fc4 <HAL_GetTick>
 800be02:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800be04:	e004      	b.n	800be10 <HAL_RCC_OscConfig+0x3c0>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be06:	f7fd f8dd 	bl	8008fc4 <HAL_GetTick>
 800be0a:	1b80      	subs	r0, r0, r6
 800be0c:	2802      	cmp	r0, #2
 800be0e:	d8a1      	bhi.n	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800be10:	682b      	ldr	r3, [r5, #0]
 800be12:	0758      	lsls	r0, r3, #29
 800be14:	d4f7      	bmi.n	800be06 <HAL_RCC_OscConfig+0x3b6>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800be16:	6823      	ldr	r3, [r4, #0]
 800be18:	e654      	b.n	800bac4 <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800be1a:	0790      	lsls	r0, r2, #30
 800be1c:	f47f af13 	bne.w	800bc46 <HAL_RCC_OscConfig+0x1f6>
 800be20:	e6e0      	b.n	800bbe4 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be22:	686b      	ldr	r3, [r5, #4]
 800be24:	6922      	ldr	r2, [r4, #16]
 800be26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800be2a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800be2e:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800be30:	6823      	ldr	r3, [r4, #0]
 800be32:	e647      	b.n	800bac4 <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
 800be34:	2001      	movs	r0, #1
}
 800be36:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be38:	4a62      	ldr	r2, [pc, #392]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
 800be3a:	6a21      	ldr	r1, [r4, #32]
 800be3c:	68d3      	ldr	r3, [r2, #12]
 800be3e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800be42:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800be46:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800be48:	6823      	ldr	r3, [r4, #0]
 800be4a:	e671      	b.n	800bb30 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
 800be4c:	f7fd f8ba 	bl	8008fc4 <HAL_GetTick>
 800be50:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be52:	e005      	b.n	800be60 <HAL_RCC_OscConfig+0x410>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800be54:	f7fd f8b6 	bl	8008fc4 <HAL_GetTick>
 800be58:	1b80      	subs	r0, r0, r6
 800be5a:	2802      	cmp	r0, #2
 800be5c:	f63f af7a 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800be60:	682b      	ldr	r3, [r5, #0]
 800be62:	0199      	lsls	r1, r3, #6
 800be64:	d4f6      	bmi.n	800be54 <HAL_RCC_OscConfig+0x404>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be66:	6aa9      	ldr	r1, [r5, #40]	; 0x28
 800be68:	4b57      	ldr	r3, [pc, #348]	; (800bfc8 <HAL_RCC_OscConfig+0x578>)
 800be6a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800be6c:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800be6e:	4957      	ldr	r1, [pc, #348]	; (800bfcc <HAL_RCC_OscConfig+0x57c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800be70:	4e54      	ldr	r6, [pc, #336]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800be72:	4313      	orrs	r3, r2
 800be74:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800be76:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800be7a:	62ab      	str	r3, [r5, #40]	; 0x28
 800be7c:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
 800be80:	3b01      	subs	r3, #1
 800be82:	3a01      	subs	r2, #1
 800be84:	025b      	lsls	r3, r3, #9
 800be86:	0412      	lsls	r2, r2, #16
 800be88:	b29b      	uxth	r3, r3
 800be8a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800be8e:	4313      	orrs	r3, r2
 800be90:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800be92:	3a01      	subs	r2, #1
 800be94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be98:	4313      	orrs	r3, r2
 800be9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800be9c:	3a01      	subs	r2, #1
 800be9e:	0612      	lsls	r2, r2, #24
 800bea0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800bea4:	4313      	orrs	r3, r2
 800bea6:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800bea8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800beaa:	f023 0301 	bic.w	r3, r3, #1
 800beae:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800beb0:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800beb2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800beb4:	4011      	ands	r1, r2
 800beb6:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
 800beba:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800bebc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bebe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800bec0:	f023 030c 	bic.w	r3, r3, #12
 800bec4:	4313      	orrs	r3, r2
 800bec6:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800bec8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800beca:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800becc:	f023 0302 	bic.w	r3, r3, #2
 800bed0:	4313      	orrs	r3, r2
 800bed2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800bed4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800beda:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bedc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bede:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bee2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800bee4:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800bee6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800beea:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800beec:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800beee:	f043 0301 	orr.w	r3, r3, #1
 800bef2:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
 800bef4:	682b      	ldr	r3, [r5, #0]
 800bef6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800befa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800befc:	f7fd f862 	bl	8008fc4 <HAL_GetTick>
 800bf00:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf02:	e005      	b.n	800bf10 <HAL_RCC_OscConfig+0x4c0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf04:	f7fd f85e 	bl	8008fc4 <HAL_GetTick>
 800bf08:	1b00      	subs	r0, r0, r4
 800bf0a:	2802      	cmp	r0, #2
 800bf0c:	f63f af22 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800bf10:	6833      	ldr	r3, [r6, #0]
 800bf12:	019a      	lsls	r2, r3, #6
 800bf14:	d5f6      	bpl.n	800bf04 <HAL_RCC_OscConfig+0x4b4>
 800bf16:	e65d      	b.n	800bbd4 <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf18:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800bf1a:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800bf1c:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf1e:	f43f ae5a 	beq.w	800bbd6 <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf22:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800bf26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800bf28:	428b      	cmp	r3, r1
 800bf2a:	f47f aeb1 	bne.w	800bc90 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf2e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bf32:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800bf34:	429a      	cmp	r2, r3
 800bf36:	f47f aeab 	bne.w	800bc90 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bf3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800bf3c:	f3c6 0208 	ubfx	r2, r6, #0, #9
 800bf40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800bf42:	429a      	cmp	r2, r3
 800bf44:	f47f aea4 	bne.w	800bc90 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bf48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf4a:	f3c6 2246 	ubfx	r2, r6, #9, #7
 800bf4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800bf50:	429a      	cmp	r2, r3
 800bf52:	f47f ae9d 	bne.w	800bc90 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bf56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bf58:	f3c6 4206 	ubfx	r2, r6, #16, #7
 800bf5c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800bf5e:	429a      	cmp	r2, r3
 800bf60:	f47f ae96 	bne.w	800bc90 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800bf64:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bf66:	f3c6 6606 	ubfx	r6, r6, #24, #7
 800bf6a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800bf6c:	429e      	cmp	r6, r3
 800bf6e:	f47f ae8f 	bne.w	800bc90 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bf72:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bf74:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800bf76:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	f43f ae2a 	beq.w	800bbd4 <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
 800bf80:	4a10      	ldr	r2, [pc, #64]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
 800bf82:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bf84:	f023 0301 	bic.w	r3, r3, #1
 800bf88:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
 800bf8a:	f7fd f81b 	bl	8008fc4 <HAL_GetTick>
 800bf8e:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800bf90:	f7fd f818 	bl	8008fc4 <HAL_GetTick>
 800bf94:	42a8      	cmp	r0, r5
 800bf96:	d0fb      	beq.n	800bf90 <HAL_RCC_OscConfig+0x540>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bf98:	4a0a      	ldr	r2, [pc, #40]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
  return HAL_OK;
 800bf9a:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800bf9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800bf9e:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <HAL_RCC_OscConfig+0x57c>)
 800bfa0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 800bfa2:	4023      	ands	r3, r4
 800bfa4:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800bfa8:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800bfaa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800bfac:	f043 0301 	orr.w	r3, r3, #1
 800bfb0:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800bfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tickstart = HAL_GetTick();
 800bfb4:	f7fd f806 	bl	8008fc4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfb8:	4e02      	ldr	r6, [pc, #8]	; (800bfc4 <HAL_RCC_OscConfig+0x574>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfba:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800bfbe:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfc0:	e00c      	b.n	800bfdc <HAL_RCC_OscConfig+0x58c>
 800bfc2:	bf00      	nop
 800bfc4:	58024400 	.word	0x58024400
 800bfc8:	fffffc0c 	.word	0xfffffc0c
 800bfcc:	ffff0007 	.word	0xffff0007
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfd0:	f7fc fff8 	bl	8008fc4 <HAL_GetTick>
 800bfd4:	1b40      	subs	r0, r0, r5
 800bfd6:	42b8      	cmp	r0, r7
 800bfd8:	f63f aebc 	bhi.w	800bd54 <HAL_RCC_OscConfig+0x304>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800bfdc:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800bfde:	0798      	lsls	r0, r3, #30
 800bfe0:	d4f6      	bmi.n	800bfd0 <HAL_RCC_OscConfig+0x580>
 800bfe2:	e5da      	b.n	800bb9a <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfe4:	68eb      	ldr	r3, [r5, #12]
 800bfe6:	6a22      	ldr	r2, [r4, #32]
 800bfe8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
 800bfec:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800bff0:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bff2:	6823      	ldr	r3, [r4, #0]
 800bff4:	e59c      	b.n	800bb30 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bff6:	4a0e      	ldr	r2, [pc, #56]	; (800c030 <HAL_RCC_OscConfig+0x5e0>)
 800bff8:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800bffa:	f043 0301 	orr.w	r3, r3, #1
 800bffe:	6713      	str	r3, [r2, #112]	; 0x70
 800c000:	e694      	b.n	800bd2c <HAL_RCC_OscConfig+0x2dc>
 800c002:	2b05      	cmp	r3, #5
 800c004:	4b0a      	ldr	r3, [pc, #40]	; (800c030 <HAL_RCC_OscConfig+0x5e0>)
 800c006:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c008:	f47f ae89 	bne.w	800bd1e <HAL_RCC_OscConfig+0x2ce>
 800c00c:	f042 0204 	orr.w	r2, r2, #4
 800c010:	671a      	str	r2, [r3, #112]	; 0x70
 800c012:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c014:	f042 0201 	orr.w	r2, r2, #1
 800c018:	671a      	str	r2, [r3, #112]	; 0x70
 800c01a:	e687      	b.n	800bd2c <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c01c:	4a04      	ldr	r2, [pc, #16]	; (800c030 <HAL_RCC_OscConfig+0x5e0>)
 800c01e:	6853      	ldr	r3, [r2, #4]
 800c020:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c028:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	e580      	b.n	800bb30 <HAL_RCC_OscConfig+0xe0>
 800c02e:	bf00      	nop
 800c030:	58024400 	.word	0x58024400

0800c034 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c034:	4a47      	ldr	r2, [pc, #284]	; (800c154 <HAL_RCC_GetSysClockFreq+0x120>)
 800c036:	6913      	ldr	r3, [r2, #16]
 800c038:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c03c:	2b10      	cmp	r3, #16
 800c03e:	d004      	beq.n	800c04a <HAL_RCC_GetSysClockFreq+0x16>
 800c040:	2b18      	cmp	r3, #24
 800c042:	d00d      	beq.n	800c060 <HAL_RCC_GetSysClockFreq+0x2c>
 800c044:	b11b      	cbz	r3, 800c04e <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
 800c046:	4844      	ldr	r0, [pc, #272]	; (800c158 <HAL_RCC_GetSysClockFreq+0x124>)
 800c048:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c04a:	4844      	ldr	r0, [pc, #272]	; (800c15c <HAL_RCC_GetSysClockFreq+0x128>)
 800c04c:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c04e:	6813      	ldr	r3, [r2, #0]
 800c050:	0699      	lsls	r1, r3, #26
 800c052:	d54a      	bpl.n	800c0ea <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c054:	6813      	ldr	r3, [r2, #0]
 800c056:	4842      	ldr	r0, [pc, #264]	; (800c160 <HAL_RCC_GetSysClockFreq+0x12c>)
 800c058:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c05c:	40d8      	lsrs	r0, r3
 800c05e:	4770      	bx	lr
{
 800c060:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c062:	6a93      	ldr	r3, [r2, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c064:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c066:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
 800c068:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c06c:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c06e:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
 800c072:	d038      	beq.n	800c0e6 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c074:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c078:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c07c:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c080:	fb05 f101 	mul.w	r1, r5, r1
 800c084:	2b01      	cmp	r3, #1
 800c086:	ee07 1a90 	vmov	s15, r1
 800c08a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
 800c08e:	d002      	beq.n	800c096 <HAL_RCC_GetSysClockFreq+0x62>
 800c090:	2b02      	cmp	r3, #2
 800c092:	d02c      	beq.n	800c0ee <HAL_RCC_GetSysClockFreq+0xba>
 800c094:	b393      	cbz	r3, 800c0fc <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c096:	ee07 0a90 	vmov	s15, r0
 800c09a:	eddf 6a32 	vldr	s13, [pc, #200]	; 800c164 <HAL_RCC_GetSysClockFreq+0x130>
 800c09e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0a2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800c0a4:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800c0a8:	eddf 5a2f 	vldr	s11, [pc, #188]	; 800c168 <HAL_RCC_GetSysClockFreq+0x134>
 800c0ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0b0:	ee06 3a90 	vmov	s13, r3
 800c0b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800c0b8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c0bc:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c0c0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800c0c4:	ee66 6a26 	vmul.f32	s13, s12, s13
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800c0c8:	4b22      	ldr	r3, [pc, #136]	; (800c154 <HAL_RCC_GetSysClockFreq+0x120>)
 800c0ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0cc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c0d0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800c0d2:	ee07 3a90 	vmov	s15, r3
 800c0d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c0da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0e2:	ee17 0a90 	vmov	r0, s15
}
 800c0e6:	bc30      	pop	{r4, r5}
 800c0e8:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c0ea:	481d      	ldr	r0, [pc, #116]	; (800c160 <HAL_RCC_GetSysClockFreq+0x12c>)
}
 800c0ec:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c0ee:	ee07 0a90 	vmov	s15, r0
 800c0f2:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800c16c <HAL_RCC_GetSysClockFreq+0x138>
 800c0f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0fa:	e7d2      	b.n	800c0a2 <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c0fc:	6813      	ldr	r3, [r2, #0]
 800c0fe:	069b      	lsls	r3, r3, #26
 800c100:	d520      	bpl.n	800c144 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c102:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c104:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c108:	4915      	ldr	r1, [pc, #84]	; (800c160 <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c10a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c10e:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c110:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c114:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c118:	ed9f 5a13 	vldr	s10, [pc, #76]	; 800c168 <HAL_RCC_GetSysClockFreq+0x134>
 800c11c:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c120:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c122:	ee06 3a90 	vmov	s13, r3
 800c126:	ee05 1a90 	vmov	s11, r1
 800c12a:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c12e:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800c132:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c136:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800c13a:	eee7 6a05 	vfma.f32	s13, s14, s10
 800c13e:	ee66 6a26 	vmul.f32	s13, s12, s13
 800c142:	e7c1      	b.n	800c0c8 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c144:	ee07 0a90 	vmov	s15, r0
 800c148:	eddf 6a09 	vldr	s13, [pc, #36]	; 800c170 <HAL_RCC_GetSysClockFreq+0x13c>
 800c14c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c150:	e7a7      	b.n	800c0a2 <HAL_RCC_GetSysClockFreq+0x6e>
 800c152:	bf00      	nop
 800c154:	58024400 	.word	0x58024400
 800c158:	003d0900 	.word	0x003d0900
 800c15c:	017d7840 	.word	0x017d7840
 800c160:	03d09000 	.word	0x03d09000
 800c164:	4a742400 	.word	0x4a742400
 800c168:	39000000 	.word	0x39000000
 800c16c:	4bbebc20 	.word	0x4bbebc20
 800c170:	4c742400 	.word	0x4c742400

0800c174 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800c174:	2800      	cmp	r0, #0
 800c176:	f000 811a 	beq.w	800c3ae <HAL_RCC_ClockConfig+0x23a>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c17a:	4a92      	ldr	r2, [pc, #584]	; (800c3c4 <HAL_RCC_ClockConfig+0x250>)
{
 800c17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c180:	6813      	ldr	r3, [r2, #0]
 800c182:	4604      	mov	r4, r0
 800c184:	460d      	mov	r5, r1
 800c186:	f003 030f 	and.w	r3, r3, #15
 800c18a:	428b      	cmp	r3, r1
 800c18c:	d20c      	bcs.n	800c1a8 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c18e:	6813      	ldr	r3, [r2, #0]
 800c190:	f023 030f 	bic.w	r3, r3, #15
 800c194:	430b      	orrs	r3, r1
 800c196:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c198:	6813      	ldr	r3, [r2, #0]
 800c19a:	f003 030f 	and.w	r3, r3, #15
 800c19e:	428b      	cmp	r3, r1
 800c1a0:	d002      	beq.n	800c1a8 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800c1a2:	2001      	movs	r0, #1
}
 800c1a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c1a8:	6823      	ldr	r3, [r4, #0]
 800c1aa:	075f      	lsls	r7, r3, #29
 800c1ac:	d50c      	bpl.n	800c1c8 <HAL_RCC_ClockConfig+0x54>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c1ae:	4986      	ldr	r1, [pc, #536]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c1b0:	6920      	ldr	r0, [r4, #16]
 800c1b2:	698a      	ldr	r2, [r1, #24]
 800c1b4:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c1b8:	4290      	cmp	r0, r2
 800c1ba:	d905      	bls.n	800c1c8 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c1bc:	698b      	ldr	r3, [r1, #24]
 800c1be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1c2:	4303      	orrs	r3, r0
 800c1c4:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c1c6:	6823      	ldr	r3, [r4, #0]
 800c1c8:	071e      	lsls	r6, r3, #28
 800c1ca:	d50c      	bpl.n	800c1e6 <HAL_RCC_ClockConfig+0x72>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c1cc:	497e      	ldr	r1, [pc, #504]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c1ce:	6960      	ldr	r0, [r4, #20]
 800c1d0:	69ca      	ldr	r2, [r1, #28]
 800c1d2:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c1d6:	4290      	cmp	r0, r2
 800c1d8:	d905      	bls.n	800c1e6 <HAL_RCC_ClockConfig+0x72>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c1da:	69cb      	ldr	r3, [r1, #28]
 800c1dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c1e0:	4303      	orrs	r3, r0
 800c1e2:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	06d8      	lsls	r0, r3, #27
 800c1e8:	d50c      	bpl.n	800c204 <HAL_RCC_ClockConfig+0x90>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c1ea:	4977      	ldr	r1, [pc, #476]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c1ec:	69a0      	ldr	r0, [r4, #24]
 800c1ee:	69ca      	ldr	r2, [r1, #28]
 800c1f0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800c1f4:	4290      	cmp	r0, r2
 800c1f6:	d905      	bls.n	800c204 <HAL_RCC_ClockConfig+0x90>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c1f8:	69cb      	ldr	r3, [r1, #28]
 800c1fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c1fe:	4303      	orrs	r3, r0
 800c200:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c202:	6823      	ldr	r3, [r4, #0]
 800c204:	0699      	lsls	r1, r3, #26
 800c206:	d50c      	bpl.n	800c222 <HAL_RCC_ClockConfig+0xae>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c208:	496f      	ldr	r1, [pc, #444]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c20a:	69e0      	ldr	r0, [r4, #28]
 800c20c:	6a0a      	ldr	r2, [r1, #32]
 800c20e:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c212:	4290      	cmp	r0, r2
 800c214:	d905      	bls.n	800c222 <HAL_RCC_ClockConfig+0xae>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c216:	6a0b      	ldr	r3, [r1, #32]
 800c218:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c21c:	4303      	orrs	r3, r0
 800c21e:	620b      	str	r3, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c220:	6823      	ldr	r3, [r4, #0]
 800c222:	079a      	lsls	r2, r3, #30
 800c224:	f140 8083 	bpl.w	800c32e <HAL_RCC_ClockConfig+0x1ba>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c228:	4867      	ldr	r0, [pc, #412]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c22a:	68e1      	ldr	r1, [r4, #12]
 800c22c:	6982      	ldr	r2, [r0, #24]
 800c22e:	f002 020f 	and.w	r2, r2, #15
 800c232:	4291      	cmp	r1, r2
 800c234:	f240 80a9 	bls.w	800c38a <HAL_RCC_ClockConfig+0x216>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c238:	6983      	ldr	r3, [r0, #24]
 800c23a:	f023 030f 	bic.w	r3, r3, #15
 800c23e:	4319      	orrs	r1, r3
 800c240:	6181      	str	r1, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c242:	6823      	ldr	r3, [r4, #0]
 800c244:	07df      	lsls	r7, r3, #31
 800c246:	d474      	bmi.n	800c332 <HAL_RCC_ClockConfig+0x1be>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c248:	079f      	lsls	r7, r3, #30
 800c24a:	d507      	bpl.n	800c25c <HAL_RCC_ClockConfig+0xe8>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c24c:	4a5e      	ldr	r2, [pc, #376]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c24e:	68e1      	ldr	r1, [r4, #12]
 800c250:	6993      	ldr	r3, [r2, #24]
 800c252:	f003 030f 	and.w	r3, r3, #15
 800c256:	428b      	cmp	r3, r1
 800c258:	f200 80a0 	bhi.w	800c39c <HAL_RCC_ClockConfig+0x228>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c25c:	4a59      	ldr	r2, [pc, #356]	; (800c3c4 <HAL_RCC_ClockConfig+0x250>)
 800c25e:	6813      	ldr	r3, [r2, #0]
 800c260:	f003 030f 	and.w	r3, r3, #15
 800c264:	42ab      	cmp	r3, r5
 800c266:	d909      	bls.n	800c27c <HAL_RCC_ClockConfig+0x108>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c268:	6813      	ldr	r3, [r2, #0]
 800c26a:	f023 030f 	bic.w	r3, r3, #15
 800c26e:	432b      	orrs	r3, r5
 800c270:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c272:	6813      	ldr	r3, [r2, #0]
 800c274:	f003 030f 	and.w	r3, r3, #15
 800c278:	42ab      	cmp	r3, r5
 800c27a:	d192      	bne.n	800c1a2 <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c27c:	6823      	ldr	r3, [r4, #0]
 800c27e:	075e      	lsls	r6, r3, #29
 800c280:	d50c      	bpl.n	800c29c <HAL_RCC_ClockConfig+0x128>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c282:	4951      	ldr	r1, [pc, #324]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c284:	6920      	ldr	r0, [r4, #16]
 800c286:	698a      	ldr	r2, [r1, #24]
 800c288:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c28c:	4290      	cmp	r0, r2
 800c28e:	d205      	bcs.n	800c29c <HAL_RCC_ClockConfig+0x128>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c290:	698b      	ldr	r3, [r1, #24]
 800c292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c296:	4303      	orrs	r3, r0
 800c298:	618b      	str	r3, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c29a:	6823      	ldr	r3, [r4, #0]
 800c29c:	071d      	lsls	r5, r3, #28
 800c29e:	d50c      	bpl.n	800c2ba <HAL_RCC_ClockConfig+0x146>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c2a0:	4949      	ldr	r1, [pc, #292]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c2a2:	6960      	ldr	r0, [r4, #20]
 800c2a4:	69ca      	ldr	r2, [r1, #28]
 800c2a6:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800c2aa:	4290      	cmp	r0, r2
 800c2ac:	d205      	bcs.n	800c2ba <HAL_RCC_ClockConfig+0x146>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c2ae:	69cb      	ldr	r3, [r1, #28]
 800c2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2b4:	4303      	orrs	r3, r0
 800c2b6:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c2b8:	6823      	ldr	r3, [r4, #0]
 800c2ba:	06d8      	lsls	r0, r3, #27
 800c2bc:	d50c      	bpl.n	800c2d8 <HAL_RCC_ClockConfig+0x164>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c2be:	4942      	ldr	r1, [pc, #264]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c2c0:	69a0      	ldr	r0, [r4, #24]
 800c2c2:	69ca      	ldr	r2, [r1, #28]
 800c2c4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800c2c8:	4290      	cmp	r0, r2
 800c2ca:	d205      	bcs.n	800c2d8 <HAL_RCC_ClockConfig+0x164>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c2cc:	69cb      	ldr	r3, [r1, #28]
 800c2ce:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800c2d2:	4303      	orrs	r3, r0
 800c2d4:	61cb      	str	r3, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c2d6:	6823      	ldr	r3, [r4, #0]
 800c2d8:	0699      	lsls	r1, r3, #26
 800c2da:	d50b      	bpl.n	800c2f4 <HAL_RCC_ClockConfig+0x180>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c2dc:	4a3a      	ldr	r2, [pc, #232]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c2de:	69e1      	ldr	r1, [r4, #28]
 800c2e0:	6a13      	ldr	r3, [r2, #32]
 800c2e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c2e6:	4299      	cmp	r1, r3
 800c2e8:	d204      	bcs.n	800c2f4 <HAL_RCC_ClockConfig+0x180>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c2ea:	6a13      	ldr	r3, [r2, #32]
 800c2ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2f0:	430b      	orrs	r3, r1
 800c2f2:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c2f4:	f7ff fe9e 	bl	800c034 <HAL_RCC_GetSysClockFreq>
 800c2f8:	4a33      	ldr	r2, [pc, #204]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c2fa:	4603      	mov	r3, r0
 800c2fc:	4833      	ldr	r0, [pc, #204]	; (800c3cc <HAL_RCC_ClockConfig+0x258>)
 800c2fe:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c300:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c302:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
 800c306:	4d32      	ldr	r5, [pc, #200]	; (800c3d0 <HAL_RCC_ClockConfig+0x25c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c308:	f002 020f 	and.w	r2, r2, #15
 800c30c:	4c31      	ldr	r4, [pc, #196]	; (800c3d4 <HAL_RCC_ClockConfig+0x260>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c30e:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c310:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c312:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
 800c316:	4830      	ldr	r0, [pc, #192]	; (800c3d8 <HAL_RCC_ClockConfig+0x264>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c318:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c31c:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
 800c31e:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
 800c320:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c322:	40d3      	lsrs	r3, r2
 800c324:	6023      	str	r3, [r4, #0]
}
 800c326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800c32a:	f7fc bde9 	b.w	8008f00 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c32e:	07db      	lsls	r3, r3, #31
 800c330:	d594      	bpl.n	800c25c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c332:	4a25      	ldr	r2, [pc, #148]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c334:	68a1      	ldr	r1, [r4, #8]
 800c336:	6993      	ldr	r3, [r2, #24]
 800c338:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800c33c:	430b      	orrs	r3, r1
 800c33e:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c340:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c342:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c344:	2902      	cmp	r1, #2
 800c346:	d034      	beq.n	800c3b2 <HAL_RCC_ClockConfig+0x23e>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c348:	2903      	cmp	r1, #3
 800c34a:	d02d      	beq.n	800c3a8 <HAL_RCC_ClockConfig+0x234>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c34c:	2901      	cmp	r1, #1
 800c34e:	d035      	beq.n	800c3bc <HAL_RCC_ClockConfig+0x248>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c350:	075b      	lsls	r3, r3, #29
 800c352:	f57f af26 	bpl.w	800c1a2 <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c356:	4e1c      	ldr	r6, [pc, #112]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c358:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c35c:	6933      	ldr	r3, [r6, #16]
 800c35e:	f023 0307 	bic.w	r3, r3, #7
 800c362:	430b      	orrs	r3, r1
 800c364:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
 800c366:	f7fc fe2d 	bl	8008fc4 <HAL_GetTick>
 800c36a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c36c:	e004      	b.n	800c378 <HAL_RCC_ClockConfig+0x204>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c36e:	f7fc fe29 	bl	8008fc4 <HAL_GetTick>
 800c372:	1bc0      	subs	r0, r0, r7
 800c374:	4540      	cmp	r0, r8
 800c376:	d81f      	bhi.n	800c3b8 <HAL_RCC_ClockConfig+0x244>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c378:	6933      	ldr	r3, [r6, #16]
 800c37a:	6862      	ldr	r2, [r4, #4]
 800c37c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c380:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800c384:	d1f3      	bne.n	800c36e <HAL_RCC_ClockConfig+0x1fa>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c386:	6823      	ldr	r3, [r4, #0]
 800c388:	e75e      	b.n	800c248 <HAL_RCC_ClockConfig+0xd4>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c38a:	07da      	lsls	r2, r3, #31
 800c38c:	d4d1      	bmi.n	800c332 <HAL_RCC_ClockConfig+0x1be>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c38e:	4a0e      	ldr	r2, [pc, #56]	; (800c3c8 <HAL_RCC_ClockConfig+0x254>)
 800c390:	6993      	ldr	r3, [r2, #24]
 800c392:	f003 030f 	and.w	r3, r3, #15
 800c396:	428b      	cmp	r3, r1
 800c398:	f67f af60 	bls.w	800c25c <HAL_RCC_ClockConfig+0xe8>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c39c:	6993      	ldr	r3, [r2, #24]
 800c39e:	f023 030f 	bic.w	r3, r3, #15
 800c3a2:	4319      	orrs	r1, r3
 800c3a4:	6191      	str	r1, [r2, #24]
 800c3a6:	e759      	b.n	800c25c <HAL_RCC_ClockConfig+0xe8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3a8:	0198      	lsls	r0, r3, #6
 800c3aa:	d4d4      	bmi.n	800c356 <HAL_RCC_ClockConfig+0x1e2>
 800c3ac:	e6f9      	b.n	800c1a2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800c3ae:	2001      	movs	r0, #1
}
 800c3b0:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c3b2:	039e      	lsls	r6, r3, #14
 800c3b4:	d4cf      	bmi.n	800c356 <HAL_RCC_ClockConfig+0x1e2>
 800c3b6:	e6f4      	b.n	800c1a2 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800c3b8:	2003      	movs	r0, #3
 800c3ba:	e6f3      	b.n	800c1a4 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c3bc:	05da      	lsls	r2, r3, #23
 800c3be:	d4ca      	bmi.n	800c356 <HAL_RCC_ClockConfig+0x1e2>
 800c3c0:	e6ef      	b.n	800c1a2 <HAL_RCC_ClockConfig+0x2e>
 800c3c2:	bf00      	nop
 800c3c4:	52002000 	.word	0x52002000
 800c3c8:	58024400 	.word	0x58024400
 800c3cc:	0801fa74 	.word	0x0801fa74
 800c3d0:	20000728 	.word	0x20000728
 800c3d4:	2000072c 	.word	0x2000072c
 800c3d8:	20000734 	.word	0x20000734

0800c3dc <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3dc:	4a18      	ldr	r2, [pc, #96]	; (800c440 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c3de:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c3e0:	6913      	ldr	r3, [r2, #16]
 800c3e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c3e6:	2b10      	cmp	r3, #16
 800c3e8:	d01a      	beq.n	800c420 <HAL_RCC_GetHCLKFreq+0x44>
 800c3ea:	2b18      	cmp	r3, #24
 800c3ec:	d023      	beq.n	800c436 <HAL_RCC_GetHCLKFreq+0x5a>
 800c3ee:	b1cb      	cbz	r3, 800c424 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
 800c3f0:	4814      	ldr	r0, [pc, #80]	; (800c444 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c3f2:	4b13      	ldr	r3, [pc, #76]	; (800c440 <HAL_RCC_GetHCLKFreq+0x64>)
 800c3f4:	4914      	ldr	r1, [pc, #80]	; (800c448 <HAL_RCC_GetHCLKFreq+0x6c>)
 800c3f6:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c3f8:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c3fa:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c3fe:	4c13      	ldr	r4, [pc, #76]	; (800c44c <HAL_RCC_GetHCLKFreq+0x70>)
 800c400:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c404:	4d12      	ldr	r5, [pc, #72]	; (800c450 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c406:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c408:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c40a:	f002 021f 	and.w	r2, r2, #31
 800c40e:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c412:	f003 001f 	and.w	r0, r3, #31
 800c416:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
 800c41a:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c41c:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800c41e:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c420:	480c      	ldr	r0, [pc, #48]	; (800c454 <HAL_RCC_GetHCLKFreq+0x78>)
 800c422:	e7e6      	b.n	800c3f2 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c424:	6813      	ldr	r3, [r2, #0]
 800c426:	069b      	lsls	r3, r3, #26
 800c428:	d508      	bpl.n	800c43c <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c42a:	6812      	ldr	r2, [r2, #0]
 800c42c:	480a      	ldr	r0, [pc, #40]	; (800c458 <HAL_RCC_GetHCLKFreq+0x7c>)
 800c42e:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 800c432:	40d0      	lsrs	r0, r2
 800c434:	e7dd      	b.n	800c3f2 <HAL_RCC_GetHCLKFreq+0x16>
 800c436:	f7ff fa87 	bl	800b948 <HAL_RCC_GetSysClockFreq.part.0>
 800c43a:	e7da      	b.n	800c3f2 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c43c:	4806      	ldr	r0, [pc, #24]	; (800c458 <HAL_RCC_GetHCLKFreq+0x7c>)
 800c43e:	e7d8      	b.n	800c3f2 <HAL_RCC_GetHCLKFreq+0x16>
 800c440:	58024400 	.word	0x58024400
 800c444:	003d0900 	.word	0x003d0900
 800c448:	0801fa74 	.word	0x0801fa74
 800c44c:	2000072c 	.word	0x2000072c
 800c450:	20000728 	.word	0x20000728
 800c454:	017d7840 	.word	0x017d7840
 800c458:	03d09000 	.word	0x03d09000

0800c45c <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c45c:	4a1c      	ldr	r2, [pc, #112]	; (800c4d0 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c45e:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c460:	6913      	ldr	r3, [r2, #16]
 800c462:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c466:	2b10      	cmp	r3, #16
 800c468:	d021      	beq.n	800c4ae <HAL_RCC_GetPCLK1Freq+0x52>
 800c46a:	2b18      	cmp	r3, #24
 800c46c:	d02b      	beq.n	800c4c6 <HAL_RCC_GetPCLK1Freq+0x6a>
 800c46e:	b303      	cbz	r3, 800c4b2 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
 800c470:	4818      	ldr	r0, [pc, #96]	; (800c4d4 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c472:	4a17      	ldr	r2, [pc, #92]	; (800c4d0 <HAL_RCC_GetPCLK1Freq+0x74>)
 800c474:	4918      	ldr	r1, [pc, #96]	; (800c4d8 <HAL_RCC_GetPCLK1Freq+0x7c>)
 800c476:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
 800c478:	4d18      	ldr	r5, [pc, #96]	; (800c4dc <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c47a:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c47e:	4c18      	ldr	r4, [pc, #96]	; (800c4e0 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c480:	5ccb      	ldrb	r3, [r1, r3]
 800c482:	f003 031f 	and.w	r3, r3, #31
 800c486:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c48a:	6990      	ldr	r0, [r2, #24]
 800c48c:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
 800c490:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c492:	5c08      	ldrb	r0, [r1, r0]
 800c494:	f000 001f 	and.w	r0, r0, #31
 800c498:	40c3      	lsrs	r3, r0
 800c49a:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c49c:	69d2      	ldr	r2, [r2, #28]
 800c49e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 800c4a2:	5c88      	ldrb	r0, [r1, r2]
 800c4a4:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800c4a8:	fa23 f000 	lsr.w	r0, r3, r0
 800c4ac:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c4ae:	480d      	ldr	r0, [pc, #52]	; (800c4e4 <HAL_RCC_GetPCLK1Freq+0x88>)
 800c4b0:	e7df      	b.n	800c472 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4b2:	6813      	ldr	r3, [r2, #0]
 800c4b4:	069b      	lsls	r3, r3, #26
 800c4b6:	d509      	bpl.n	800c4cc <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4b8:	6810      	ldr	r0, [r2, #0]
 800c4ba:	4b0b      	ldr	r3, [pc, #44]	; (800c4e8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800c4bc:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 800c4c0:	fa23 f000 	lsr.w	r0, r3, r0
 800c4c4:	e7d5      	b.n	800c472 <HAL_RCC_GetPCLK1Freq+0x16>
 800c4c6:	f7ff fa3f 	bl	800b948 <HAL_RCC_GetSysClockFreq.part.0>
 800c4ca:	e7d2      	b.n	800c472 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c4cc:	4806      	ldr	r0, [pc, #24]	; (800c4e8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 800c4ce:	e7d0      	b.n	800c472 <HAL_RCC_GetPCLK1Freq+0x16>
 800c4d0:	58024400 	.word	0x58024400
 800c4d4:	003d0900 	.word	0x003d0900
 800c4d8:	0801fa74 	.word	0x0801fa74
 800c4dc:	20000728 	.word	0x20000728
 800c4e0:	2000072c 	.word	0x2000072c
 800c4e4:	017d7840 	.word	0x017d7840
 800c4e8:	03d09000 	.word	0x03d09000

0800c4ec <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c4ee:	4c3a      	ldr	r4, [pc, #232]	; (800c5d8 <RCCEx_PLL2_Config+0xec>)
 800c4f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c4f2:	f003 0303 	and.w	r3, r3, #3
 800c4f6:	2b03      	cmp	r3, #3
 800c4f8:	d067      	beq.n	800c5ca <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c4fa:	6823      	ldr	r3, [r4, #0]
 800c4fc:	4606      	mov	r6, r0
 800c4fe:	460f      	mov	r7, r1
 800c500:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c504:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c506:	f7fc fd5d 	bl	8008fc4 <HAL_GetTick>
 800c50a:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c50c:	e004      	b.n	800c518 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c50e:	f7fc fd59 	bl	8008fc4 <HAL_GetTick>
 800c512:	1b43      	subs	r3, r0, r5
 800c514:	2b02      	cmp	r3, #2
 800c516:	d856      	bhi.n	800c5c6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c518:	6823      	ldr	r3, [r4, #0]
 800c51a:	011a      	lsls	r2, r3, #4
 800c51c:	d4f7      	bmi.n	800c50e <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c51e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c520:	6832      	ldr	r2, [r6, #0]
 800c522:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c526:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800c52a:	62a3      	str	r3, [r4, #40]	; 0x28
 800c52c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800c530:	3b01      	subs	r3, #1
 800c532:	3a01      	subs	r2, #1
 800c534:	025b      	lsls	r3, r3, #9
 800c536:	0412      	lsls	r2, r2, #16
 800c538:	b29b      	uxth	r3, r3
 800c53a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c53e:	4313      	orrs	r3, r2
 800c540:	6872      	ldr	r2, [r6, #4]
 800c542:	3a01      	subs	r2, #1
 800c544:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c548:	4313      	orrs	r3, r2
 800c54a:	6932      	ldr	r2, [r6, #16]
 800c54c:	3a01      	subs	r2, #1
 800c54e:	0612      	lsls	r2, r2, #24
 800c550:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c554:	4313      	orrs	r3, r2
 800c556:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c558:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c55a:	6972      	ldr	r2, [r6, #20]
 800c55c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c560:	4313      	orrs	r3, r2
 800c562:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c564:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c566:	69b3      	ldr	r3, [r6, #24]
 800c568:	f022 0220 	bic.w	r2, r2, #32
 800c56c:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c56e:	4b1b      	ldr	r3, [pc, #108]	; (800c5dc <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c570:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c572:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c574:	f022 0210 	bic.w	r2, r2, #16
 800c578:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c57a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c57c:	69f2      	ldr	r2, [r6, #28]
 800c57e:	400b      	ands	r3, r1
 800c580:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c584:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c588:	f043 0310 	orr.w	r3, r3, #16
 800c58c:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c58e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c590:	b1ef      	cbz	r7, 800c5ce <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c592:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c594:	bf0c      	ite	eq
 800c596:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c59a:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
 800c59e:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c5a0:	4c0d      	ldr	r4, [pc, #52]	; (800c5d8 <RCCEx_PLL2_Config+0xec>)
 800c5a2:	6823      	ldr	r3, [r4, #0]
 800c5a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c5a8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5aa:	f7fc fd0b 	bl	8008fc4 <HAL_GetTick>
 800c5ae:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5b0:	e004      	b.n	800c5bc <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c5b2:	f7fc fd07 	bl	8008fc4 <HAL_GetTick>
 800c5b6:	1b40      	subs	r0, r0, r5
 800c5b8:	2802      	cmp	r0, #2
 800c5ba:	d804      	bhi.n	800c5c6 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c5bc:	6823      	ldr	r3, [r4, #0]
 800c5be:	011b      	lsls	r3, r3, #4
 800c5c0:	d5f7      	bpl.n	800c5b2 <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
 800c5c2:	2000      	movs	r0, #0
}
 800c5c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800c5c6:	2003      	movs	r0, #3
}
 800c5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c5ca:	2001      	movs	r0, #1
}
 800c5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c5ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c5d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c5d4:	e7e4      	b.n	800c5a0 <RCCEx_PLL2_Config+0xb4>
 800c5d6:	bf00      	nop
 800c5d8:	58024400 	.word	0x58024400
 800c5dc:	ffff0007 	.word	0xffff0007

0800c5e0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c5e2:	4c3a      	ldr	r4, [pc, #232]	; (800c6cc <RCCEx_PLL3_Config+0xec>)
 800c5e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c5e6:	f003 0303 	and.w	r3, r3, #3
 800c5ea:	2b03      	cmp	r3, #3
 800c5ec:	d067      	beq.n	800c6be <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	4606      	mov	r6, r0
 800c5f2:	460f      	mov	r7, r1
 800c5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c5f8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c5fa:	f7fc fce3 	bl	8008fc4 <HAL_GetTick>
 800c5fe:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c600:	e004      	b.n	800c60c <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c602:	f7fc fcdf 	bl	8008fc4 <HAL_GetTick>
 800c606:	1b43      	subs	r3, r0, r5
 800c608:	2b02      	cmp	r3, #2
 800c60a:	d856      	bhi.n	800c6ba <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	009a      	lsls	r2, r3, #2
 800c610:	d4f7      	bmi.n	800c602 <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c612:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c614:	6832      	ldr	r2, [r6, #0]
 800c616:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
 800c61a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800c61e:	62a3      	str	r3, [r4, #40]	; 0x28
 800c620:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
 800c624:	3b01      	subs	r3, #1
 800c626:	3a01      	subs	r2, #1
 800c628:	025b      	lsls	r3, r3, #9
 800c62a:	0412      	lsls	r2, r2, #16
 800c62c:	b29b      	uxth	r3, r3
 800c62e:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800c632:	4313      	orrs	r3, r2
 800c634:	6872      	ldr	r2, [r6, #4]
 800c636:	3a01      	subs	r2, #1
 800c638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c63c:	4313      	orrs	r3, r2
 800c63e:	6932      	ldr	r2, [r6, #16]
 800c640:	3a01      	subs	r2, #1
 800c642:	0612      	lsls	r2, r2, #24
 800c644:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800c648:	4313      	orrs	r3, r2
 800c64a:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c64c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c64e:	6972      	ldr	r2, [r6, #20]
 800c650:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c654:	4313      	orrs	r3, r2
 800c656:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c658:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c65a:	69b3      	ldr	r3, [r6, #24]
 800c65c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800c660:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c662:	4b1b      	ldr	r3, [pc, #108]	; (800c6d0 <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c664:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c666:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800c668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c66c:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c66e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800c670:	69f2      	ldr	r2, [r6, #28]
 800c672:	400b      	ands	r3, r1
 800c674:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800c678:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c67a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800c67c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c680:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c682:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800c684:	b1ef      	cbz	r7, 800c6c2 <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c686:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c688:	bf0c      	ite	eq
 800c68a:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c68e:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
 800c692:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c694:	4c0d      	ldr	r4, [pc, #52]	; (800c6cc <RCCEx_PLL3_Config+0xec>)
 800c696:	6823      	ldr	r3, [r4, #0]
 800c698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c69c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c69e:	f7fc fc91 	bl	8008fc4 <HAL_GetTick>
 800c6a2:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6a4:	e004      	b.n	800c6b0 <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c6a6:	f7fc fc8d 	bl	8008fc4 <HAL_GetTick>
 800c6aa:	1b40      	subs	r0, r0, r5
 800c6ac:	2802      	cmp	r0, #2
 800c6ae:	d804      	bhi.n	800c6ba <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	009b      	lsls	r3, r3, #2
 800c6b4:	d5f7      	bpl.n	800c6a6 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
 800c6b6:	2000      	movs	r0, #0
}
 800c6b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 800c6ba:	2003      	movs	r0, #3
}
 800c6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800c6be:	2001      	movs	r0, #1
}
 800c6c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c6c2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c6c6:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c6c8:	e7e4      	b.n	800c694 <RCCEx_PLL3_Config+0xb4>
 800c6ca:	bf00      	nop
 800c6cc:	58024400 	.word	0x58024400
 800c6d0:	ffff0007 	.word	0xffff0007

0800c6d4 <HAL_RCCEx_PeriphCLKConfig>:
{
 800c6d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c6d8:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 800c6dc:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800c6de:	011d      	lsls	r5, r3, #4
 800c6e0:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
 800c6e4:	d521      	bpl.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x56>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c6e6:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800c6e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c6ec:	f000 8572 	beq.w	800d1d4 <HAL_RCCEx_PeriphCLKConfig+0xb00>
 800c6f0:	d80e      	bhi.n	800c710 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 800c6f2:	2900      	cmp	r1, #0
 800c6f4:	f000 85cd 	beq.w	800d292 <HAL_RCCEx_PeriphCLKConfig+0xbbe>
 800c6f8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800c6fc:	f040 85c6 	bne.w	800d28c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c700:	2102      	movs	r1, #2
 800c702:	3008      	adds	r0, #8
 800c704:	f7ff fef2 	bl	800c4ec <RCCEx_PLL2_Config>
 800c708:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800c70a:	b966      	cbnz	r6, 800c726 <HAL_RCCEx_PeriphCLKConfig+0x52>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c70c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 800c70e:	e003      	b.n	800c718 <HAL_RCCEx_PeriphCLKConfig+0x44>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800c710:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800c714:	f040 85ba 	bne.w	800d28c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800c718:	4aa3      	ldr	r2, [pc, #652]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c71a:	2600      	movs	r6, #0
 800c71c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c71e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c722:	4319      	orrs	r1, r3
 800c724:	6511      	str	r1, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c726:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c72a:	05d8      	lsls	r0, r3, #23
 800c72c:	d50a      	bpl.n	800c744 <HAL_RCCEx_PeriphCLKConfig+0x70>
    switch (PeriphClkInit->Sai1ClockSelection)
 800c72e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c730:	2904      	cmp	r1, #4
 800c732:	d806      	bhi.n	800c742 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 800c734:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c738:	055f0558 	.word	0x055f0558
 800c73c:	030e0576 	.word	0x030e0576
 800c740:	030e      	.short	0x030e
 800c742:	2601      	movs	r6, #1
 800c744:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800c746:	0599      	lsls	r1, r3, #22
 800c748:	d517      	bpl.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai23ClockSelection)
 800c74a:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c74c:	2980      	cmp	r1, #128	; 0x80
 800c74e:	f000 8570 	beq.w	800d232 <HAL_RCCEx_PeriphCLKConfig+0xb5e>
 800c752:	f200 80e1 	bhi.w	800c918 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800c756:	2900      	cmp	r1, #0
 800c758:	f000 8442 	beq.w	800cfe0 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800c75c:	2940      	cmp	r1, #64	; 0x40
 800c75e:	f040 80e2 	bne.w	800c926 <HAL_RCCEx_PeriphCLKConfig+0x252>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c762:	2100      	movs	r1, #0
 800c764:	f104 0008 	add.w	r0, r4, #8
 800c768:	f7ff fec0 	bl	800c4ec <RCCEx_PLL2_Config>
 800c76c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c76e:	2d00      	cmp	r5, #0
 800c770:	f000 83f4 	beq.w	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x888>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800c774:	462e      	mov	r6, r5
 800c776:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c77a:	055f      	lsls	r7, r3, #21
 800c77c:	d51a      	bpl.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c77e:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800c782:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 800c786:	f000 851d 	beq.w	800d1c4 <HAL_RCCEx_PeriphCLKConfig+0xaf0>
 800c78a:	f200 80cf 	bhi.w	800c92c <HAL_RCCEx_PeriphCLKConfig+0x258>
 800c78e:	2900      	cmp	r1, #0
 800c790:	f000 842d 	beq.w	800cfee <HAL_RCCEx_PeriphCLKConfig+0x91a>
 800c794:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800c798:	f040 80d0 	bne.w	800c93c <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c79c:	2100      	movs	r1, #0
 800c79e:	f104 0008 	add.w	r0, r4, #8
 800c7a2:	f7ff fea3 	bl	800c4ec <RCCEx_PLL2_Config>
 800c7a6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c7a8:	2d00      	cmp	r5, #0
 800c7aa:	f000 83f6 	beq.w	800cf9a <HAL_RCCEx_PeriphCLKConfig+0x8c6>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c7ae:	462e      	mov	r6, r5
 800c7b0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c7b4:	0518      	lsls	r0, r3, #20
 800c7b6:	d51a      	bpl.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c7b8:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800c7bc:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 800c7c0:	f000 8528 	beq.w	800d214 <HAL_RCCEx_PeriphCLKConfig+0xb40>
 800c7c4:	f200 80bd 	bhi.w	800c942 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800c7c8:	2900      	cmp	r1, #0
 800c7ca:	f000 8403 	beq.w	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x900>
 800c7ce:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 800c7d2:	f040 80be 	bne.w	800c952 <HAL_RCCEx_PeriphCLKConfig+0x27e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c7d6:	2100      	movs	r1, #0
 800c7d8:	f104 0008 	add.w	r0, r4, #8
 800c7dc:	f7ff fe86 	bl	800c4ec <RCCEx_PLL2_Config>
 800c7e0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c7e2:	2d00      	cmp	r5, #0
 800c7e4:	f000 83af 	beq.w	800cf46 <HAL_RCCEx_PeriphCLKConfig+0x872>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c7e8:	462e      	mov	r6, r5
 800c7ea:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c7ee:	0199      	lsls	r1, r3, #6
 800c7f0:	d51a      	bpl.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->QspiClockSelection)
 800c7f2:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c7f4:	2920      	cmp	r1, #32
 800c7f6:	f000 84b0 	beq.w	800d15a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c7fa:	f200 80ad 	bhi.w	800c958 <HAL_RCCEx_PeriphCLKConfig+0x284>
 800c7fe:	b139      	cbz	r1, 800c810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c800:	2910      	cmp	r1, #16
 800c802:	f040 80ac 	bne.w	800c95e <HAL_RCCEx_PeriphCLKConfig+0x28a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c806:	4a68      	ldr	r2, [pc, #416]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c808:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800c80a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c80e:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800c810:	2d00      	cmp	r5, #0
 800c812:	f040 8414 	bne.w	800d03e <HAL_RCCEx_PeriphCLKConfig+0x96a>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c816:	4a64      	ldr	r2, [pc, #400]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c818:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800c81a:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800c81c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c820:	430b      	orrs	r3, r1
 800c822:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c824:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c828:	04df      	lsls	r7, r3, #19
 800c82a:	d519      	bpl.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi123ClockSelection)
 800c82c:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800c82e:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800c832:	f000 84e7 	beq.w	800d204 <HAL_RCCEx_PeriphCLKConfig+0xb30>
 800c836:	f200 8095 	bhi.w	800c964 <HAL_RCCEx_PeriphCLKConfig+0x290>
 800c83a:	2900      	cmp	r1, #0
 800c83c:	f000 83c4 	beq.w	800cfc8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
 800c840:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800c844:	f040 8096 	bne.w	800c974 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c848:	2100      	movs	r1, #0
 800c84a:	f104 0008 	add.w	r0, r4, #8
 800c84e:	f7ff fe4d 	bl	800c4ec <RCCEx_PLL2_Config>
 800c852:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c854:	2d00      	cmp	r5, #0
 800c856:	f000 838b 	beq.w	800cf70 <HAL_RCCEx_PeriphCLKConfig+0x89c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c85a:	462e      	mov	r6, r5
 800c85c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c860:	0498      	lsls	r0, r3, #18
 800c862:	d51d      	bpl.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c864:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c866:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800c86a:	f000 8462 	beq.w	800d132 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 800c86e:	f200 8084 	bhi.w	800c97a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c872:	b149      	cbz	r1, 800c888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c874:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800c878:	f040 8088 	bne.w	800c98c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c87c:	2101      	movs	r1, #1
 800c87e:	f104 0008 	add.w	r0, r4, #8
 800c882:	f7ff fe33 	bl	800c4ec <RCCEx_PLL2_Config>
 800c886:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c888:	2d00      	cmp	r5, #0
 800c88a:	f040 83e7 	bne.w	800d05c <HAL_RCCEx_PeriphCLKConfig+0x988>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c88e:	4a46      	ldr	r2, [pc, #280]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c890:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800c892:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800c894:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 800c898:	430b      	orrs	r3, r1
 800c89a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c89c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c8a0:	0459      	lsls	r1, r3, #17
 800c8a2:	d51d      	bpl.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c8a4:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800c8a8:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c8ac:	f000 844b 	beq.w	800d146 <HAL_RCCEx_PeriphCLKConfig+0xa72>
 800c8b0:	d86f      	bhi.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0x2be>
 800c8b2:	b141      	cbz	r1, 800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800c8b4:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c8b8:	d173      	bne.n	800c9a2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c8ba:	2101      	movs	r1, #1
 800c8bc:	f104 0008 	add.w	r0, r4, #8
 800c8c0:	f7ff fe14 	bl	800c4ec <RCCEx_PLL2_Config>
 800c8c4:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c8c6:	2d00      	cmp	r5, #0
 800c8c8:	f040 83d0 	bne.w	800d06c <HAL_RCCEx_PeriphCLKConfig+0x998>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c8cc:	4a36      	ldr	r2, [pc, #216]	; (800c9a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c8ce:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
 800c8d2:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800c8d4:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800c8d8:	430b      	orrs	r3, r1
 800c8da:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c8dc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c8e0:	041f      	lsls	r7, r3, #16
 800c8e2:	d50d      	bpl.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    switch (PeriphClkInit->FdcanClockSelection)
 800c8e4:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800c8e6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800c8ea:	f000 8419 	beq.w	800d120 <HAL_RCCEx_PeriphCLKConfig+0xa4c>
 800c8ee:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800c8f2:	f000 8237 	beq.w	800cd64 <HAL_RCCEx_PeriphCLKConfig+0x690>
 800c8f6:	2900      	cmp	r1, #0
 800c8f8:	f000 823a 	beq.w	800cd70 <HAL_RCCEx_PeriphCLKConfig+0x69c>
 800c8fc:	2601      	movs	r6, #1
 800c8fe:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c900:	01d8      	lsls	r0, r3, #7
 800c902:	d55f      	bpl.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->FmcClockSelection)
 800c904:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c906:	2903      	cmp	r1, #3
 800c908:	f200 84ee 	bhi.w	800d2e8 <HAL_RCCEx_PeriphCLKConfig+0xc14>
 800c90c:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c910:	04390054 	.word	0x04390054
 800c914:	0054004e 	.word	0x0054004e
    switch (PeriphClkInit->Sai23ClockSelection)
 800c918:	29c0      	cmp	r1, #192	; 0xc0
 800c91a:	f43f af28 	beq.w	800c76e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800c91e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800c922:	f43f af24 	beq.w	800c76e <HAL_RCCEx_PeriphCLKConfig+0x9a>
 800c926:	2601      	movs	r6, #1
 800c928:	4635      	mov	r5, r6
 800c92a:	e726      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xa6>
    switch (PeriphClkInit->Sai4AClockSelection)
 800c92c:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
 800c930:	f43f af3a 	beq.w	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c934:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800c938:	f43f af36 	beq.w	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c93c:	2601      	movs	r6, #1
 800c93e:	4635      	mov	r5, r6
 800c940:	e738      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
    switch (PeriphClkInit->Sai4BClockSelection)
 800c942:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800c946:	f43f af4c 	beq.w	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800c94a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800c94e:	f43f af48 	beq.w	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800c952:	2601      	movs	r6, #1
 800c954:	4635      	mov	r5, r6
 800c956:	e74a      	b.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
    switch (PeriphClkInit->QspiClockSelection)
 800c958:	2930      	cmp	r1, #48	; 0x30
 800c95a:	f43f af59 	beq.w	800c810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c95e:	2601      	movs	r6, #1
 800c960:	4635      	mov	r5, r6
 800c962:	e761      	b.n	800c828 <HAL_RCCEx_PeriphCLKConfig+0x154>
    switch (PeriphClkInit->Spi123ClockSelection)
 800c964:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
 800c968:	f43f af74 	beq.w	800c854 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c96c:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800c970:	f43f af70 	beq.w	800c854 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800c974:	2601      	movs	r6, #1
 800c976:	4635      	mov	r5, r6
 800c978:	e772      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    switch (PeriphClkInit->Spi45ClockSelection)
 800c97a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
 800c97e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 800c982:	d081      	beq.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c984:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
 800c988:	f43f af7e 	beq.w	800c888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 800c98c:	2601      	movs	r6, #1
 800c98e:	4635      	mov	r5, r6
 800c990:	e786      	b.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    switch (PeriphClkInit->Spi6ClockSelection)
 800c992:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800c996:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800c99a:	d094      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800c99c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800c9a0:	d091      	beq.n	800c8c6 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
 800c9a2:	2601      	movs	r6, #1
 800c9a4:	4635      	mov	r5, r6
 800c9a6:	e79b      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 800c9a8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c9ac:	2102      	movs	r1, #2
 800c9ae:	f104 0008 	add.w	r0, r4, #8
 800c9b2:	f7ff fd9b 	bl	800c4ec <RCCEx_PLL2_Config>
 800c9b6:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800c9b8:	2d00      	cmp	r5, #0
 800c9ba:	f000 8345 	beq.w	800d048 <HAL_RCCEx_PeriphCLKConfig+0x974>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c9be:	462e      	mov	r6, r5
 800c9c0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800c9c4:	0259      	lsls	r1, r3, #9
 800c9c6:	f100 826c 	bmi.w	800cea2 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c9ca:	07d8      	lsls	r0, r3, #31
 800c9cc:	d52f      	bpl.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    switch (PeriphClkInit->Usart16ClockSelection)
 800c9ce:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800c9d0:	2928      	cmp	r1, #40	; 0x28
 800c9d2:	d82a      	bhi.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0x356>
 800c9d4:	e8df f011 	tbh	[pc, r1, lsl #1]
 800c9d8:	0029020a 	.word	0x0029020a
 800c9dc:	00290029 	.word	0x00290029
 800c9e0:	00290029 	.word	0x00290029
 800c9e4:	00290029 	.word	0x00290029
 800c9e8:	0029044a 	.word	0x0029044a
 800c9ec:	00290029 	.word	0x00290029
 800c9f0:	00290029 	.word	0x00290029
 800c9f4:	00290029 	.word	0x00290029
 800c9f8:	00290204 	.word	0x00290204
 800c9fc:	00290029 	.word	0x00290029
 800ca00:	00290029 	.word	0x00290029
 800ca04:	00290029 	.word	0x00290029
 800ca08:	0029020a 	.word	0x0029020a
 800ca0c:	00290029 	.word	0x00290029
 800ca10:	00290029 	.word	0x00290029
 800ca14:	00290029 	.word	0x00290029
 800ca18:	0029020a 	.word	0x0029020a
 800ca1c:	00290029 	.word	0x00290029
 800ca20:	00290029 	.word	0x00290029
 800ca24:	00290029 	.word	0x00290029
 800ca28:	020a      	.short	0x020a
 800ca2a:	2601      	movs	r6, #1
 800ca2c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ca2e:	0799      	lsls	r1, r3, #30
 800ca30:	d517      	bpl.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ca32:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800ca34:	2905      	cmp	r1, #5
 800ca36:	f200 845f 	bhi.w	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 800ca3a:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ca3e:	000c      	.short	0x000c
 800ca40:	0006040c 	.word	0x0006040c
 800ca44:	000c000c 	.word	0x000c000c
 800ca48:	000c      	.short	0x000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca4a:	2101      	movs	r1, #1
 800ca4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ca50:	f7ff fdc6 	bl	800c5e0 <RCCEx_PLL3_Config>
 800ca54:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca56:	2d00      	cmp	r5, #0
 800ca58:	f000 82d8 	beq.w	800d00c <HAL_RCCEx_PeriphCLKConfig+0x938>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ca5c:	462e      	mov	r6, r5
 800ca5e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ca62:	075f      	lsls	r7, r3, #29
 800ca64:	d518      	bpl.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ca66:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800ca6a:	2905      	cmp	r1, #5
 800ca6c:	f200 8440 	bhi.w	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0xc1c>
 800ca70:	e8df f011 	tbh	[pc, r1, lsl #1]
 800ca74:	03e7000c 	.word	0x03e7000c
 800ca78:	000c0006 	.word	0x000c0006
 800ca7c:	000c000c 	.word	0x000c000c
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ca80:	2101      	movs	r1, #1
 800ca82:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ca86:	f7ff fdab 	bl	800c5e0 <RCCEx_PLL3_Config>
 800ca8a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800ca8c:	2d00      	cmp	r5, #0
 800ca8e:	f000 82c7 	beq.w	800d020 <HAL_RCCEx_PeriphCLKConfig+0x94c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ca92:	462e      	mov	r6, r5
 800ca94:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ca98:	0698      	lsls	r0, r3, #26
 800ca9a:	d51f      	bpl.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ca9c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800caa0:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 800caa4:	f000 8363 	beq.w	800d16e <HAL_RCCEx_PeriphCLKConfig+0xa9a>
 800caa8:	f200 811c 	bhi.w	800cce4 <HAL_RCCEx_PeriphCLKConfig+0x610>
 800caac:	b149      	cbz	r1, 800cac2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800caae:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
 800cab2:	f040 8121 	bne.w	800ccf8 <HAL_RCCEx_PeriphCLKConfig+0x624>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cab6:	2100      	movs	r1, #0
 800cab8:	f104 0008 	add.w	r0, r4, #8
 800cabc:	f7ff fd16 	bl	800c4ec <RCCEx_PLL2_Config>
 800cac0:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cac2:	2d00      	cmp	r5, #0
 800cac4:	f040 82b7 	bne.w	800d036 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800cac8:	4ab0      	ldr	r2, [pc, #704]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800caca:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 800cace:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cad0:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 800cad4:	430b      	orrs	r3, r1
 800cad6:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800cad8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cadc:	0659      	lsls	r1, r3, #25
 800cade:	d51f      	bpl.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800cae0:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800cae4:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 800cae8:	f000 8306 	beq.w	800d0f8 <HAL_RCCEx_PeriphCLKConfig+0xa24>
 800caec:	f200 8107 	bhi.w	800ccfe <HAL_RCCEx_PeriphCLKConfig+0x62a>
 800caf0:	b149      	cbz	r1, 800cb06 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800caf2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800caf6:	f040 810c 	bne.w	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x63e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cafa:	2100      	movs	r1, #0
 800cafc:	f104 0008 	add.w	r0, r4, #8
 800cb00:	f7ff fcf4 	bl	800c4ec <RCCEx_PLL2_Config>
 800cb04:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	f040 82b4 	bne.w	800d074 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800cb0c:	4a9f      	ldr	r2, [pc, #636]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cb0e:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
 800cb12:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cb14:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800cb18:	430b      	orrs	r3, r1
 800cb1a:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800cb1c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cb20:	061f      	lsls	r7, r3, #24
 800cb22:	d51f      	bpl.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cb24:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800cb28:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800cb2c:	f000 82ee 	beq.w	800d10c <HAL_RCCEx_PeriphCLKConfig+0xa38>
 800cb30:	f200 80f2 	bhi.w	800cd18 <HAL_RCCEx_PeriphCLKConfig+0x644>
 800cb34:	b149      	cbz	r1, 800cb4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800cb36:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800cb3a:	f040 80f7 	bne.w	800cd2c <HAL_RCCEx_PeriphCLKConfig+0x658>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cb3e:	2100      	movs	r1, #0
 800cb40:	f104 0008 	add.w	r0, r4, #8
 800cb44:	f7ff fcd2 	bl	800c4ec <RCCEx_PLL2_Config>
 800cb48:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cb4a:	2d00      	cmp	r5, #0
 800cb4c:	f040 828a 	bne.w	800d064 <HAL_RCCEx_PeriphCLKConfig+0x990>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800cb50:	4a8e      	ldr	r2, [pc, #568]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cb52:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 800cb56:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cb58:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800cb5c:	430b      	orrs	r3, r1
 800cb5e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800cb60:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cb64:	0718      	lsls	r0, r3, #28
 800cb66:	d50d      	bpl.n	800cb84 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800cb68:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 800cb6c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800cb70:	f000 8310 	beq.w	800d194 <HAL_RCCEx_PeriphCLKConfig+0xac0>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800cb74:	4985      	ldr	r1, [pc, #532]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cb76:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 800cb78:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800cb7c:	4313      	orrs	r3, r2
 800cb7e:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800cb80:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cb84:	06d9      	lsls	r1, r3, #27
 800cb86:	d50d      	bpl.n	800cba4 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800cb88:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
 800cb8c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cb90:	f000 830c 	beq.w	800d1ac <HAL_RCCEx_PeriphCLKConfig+0xad8>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800cb94:	497d      	ldr	r1, [pc, #500]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cb96:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 800cb98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cb9c:	4313      	orrs	r3, r2
 800cb9e:	658b      	str	r3, [r1, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800cba0:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cba4:	031f      	lsls	r7, r3, #12
 800cba6:	d50e      	bpl.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    switch (PeriphClkInit->AdcClockSelection)
 800cba8:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800cbac:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800cbb0:	f000 8102 	beq.w	800cdb8 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
 800cbb4:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
 800cbb8:	f000 8104 	beq.w	800cdc4 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
 800cbbc:	2900      	cmp	r1, #0
 800cbbe:	f000 8290 	beq.w	800d0e2 <HAL_RCCEx_PeriphCLKConfig+0xa0e>
 800cbc2:	2601      	movs	r6, #1
 800cbc4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cbc6:	0358      	lsls	r0, r3, #13
 800cbc8:	d50f      	bpl.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x516>
    switch (PeriphClkInit->UsbClockSelection)
 800cbca:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800cbce:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800cbd2:	f000 80dd 	beq.w	800cd90 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
 800cbd6:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
 800cbda:	f000 80df 	beq.w	800cd9c <HAL_RCCEx_PeriphCLKConfig+0x6c8>
 800cbde:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800cbe2:	f000 8275 	beq.w	800d0d0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
 800cbe6:	2601      	movs	r6, #1
 800cbe8:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cbea:	03d9      	lsls	r1, r3, #15
 800cbec:	d509      	bpl.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    switch (PeriphClkInit->SdmmcClockSelection)
 800cbee:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800cbf0:	2900      	cmp	r1, #0
 800cbf2:	f000 8258 	beq.w	800d0a6 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800cbf6:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 800cbfa:	f000 81d9 	beq.w	800cfb0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 800cbfe:	2601      	movs	r6, #1
 800cc00:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cc02:	009f      	lsls	r7, r3, #2
 800cc04:	f100 80ff 	bmi.w	800ce06 <HAL_RCCEx_PeriphCLKConfig+0x732>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cc08:	0398      	lsls	r0, r3, #14
 800cc0a:	d50e      	bpl.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->RngClockSelection)
 800cc0c:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800cc10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cc14:	f000 823e 	beq.w	800d094 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
 800cc18:	f240 808b 	bls.w	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x65e>
 800cc1c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800cc20:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800cc24:	f000 8088 	beq.w	800cd38 <HAL_RCCEx_PeriphCLKConfig+0x664>
 800cc28:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cc2a:	02d9      	lsls	r1, r3, #11
 800cc2c:	d508      	bpl.n	800cc40 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cc2e:	4a57      	ldr	r2, [pc, #348]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cc30:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800cc32:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cc38:	430b      	orrs	r3, r1
 800cc3a:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cc3c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc40:	00df      	lsls	r7, r3, #3
 800cc42:	d509      	bpl.n	800cc58 <HAL_RCCEx_PeriphCLKConfig+0x584>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cc44:	4a51      	ldr	r2, [pc, #324]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cc46:	f8d4 10b8 	ldr.w	r1, [r4, #184]	; 0xb8
 800cc4a:	6913      	ldr	r3, [r2, #16]
 800cc4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800cc50:	430b      	orrs	r3, r1
 800cc52:	6113      	str	r3, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cc54:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc58:	029d      	lsls	r5, r3, #10
 800cc5a:	d508      	bpl.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x59a>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cc5c:	4a4b      	ldr	r2, [pc, #300]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cc5e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800cc60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cc62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cc66:	430b      	orrs	r3, r1
 800cc68:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc6e:	0058      	lsls	r0, r3, #1
 800cc70:	d50b      	bpl.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc72:	4b46      	ldr	r3, [pc, #280]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cc74:	691a      	ldr	r2, [r3, #16]
 800cc76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800cc7a:	611a      	str	r2, [r3, #16]
 800cc7c:	691a      	ldr	r2, [r3, #16]
 800cc7e:	f8d4 10bc 	ldr.w	r1, [r4, #188]	; 0xbc
 800cc82:	430a      	orrs	r2, r1
 800cc84:	611a      	str	r2, [r3, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc86:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	da08      	bge.n	800cca0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cc8e:	4a3f      	ldr	r2, [pc, #252]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cc90:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800cc92:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800cc94:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800cc98:	430b      	orrs	r3, r1
 800cc9a:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc9c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cca0:	0219      	lsls	r1, r3, #8
 800cca2:	d508      	bpl.n	800ccb6 <HAL_RCCEx_PeriphCLKConfig+0x5e2>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cca4:	4a39      	ldr	r2, [pc, #228]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cca6:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
 800ccaa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800ccac:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800ccb0:	430b      	orrs	r3, r1
 800ccb2:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ccb4:	6862      	ldr	r2, [r4, #4]
 800ccb6:	07d3      	lsls	r3, r2, #31
 800ccb8:	f100 80b1 	bmi.w	800ce1e <HAL_RCCEx_PeriphCLKConfig+0x74a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ccbc:	0797      	lsls	r7, r2, #30
 800ccbe:	f100 80bb 	bmi.w	800ce38 <HAL_RCCEx_PeriphCLKConfig+0x764>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ccc2:	0755      	lsls	r5, r2, #29
 800ccc4:	f100 80c5 	bmi.w	800ce52 <HAL_RCCEx_PeriphCLKConfig+0x77e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ccc8:	0710      	lsls	r0, r2, #28
 800ccca:	f100 80cf 	bmi.w	800ce6c <HAL_RCCEx_PeriphCLKConfig+0x798>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ccce:	06d1      	lsls	r1, r2, #27
 800ccd0:	f100 80d9 	bmi.w	800ce86 <HAL_RCCEx_PeriphCLKConfig+0x7b2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ccd4:	0692      	lsls	r2, r2, #26
 800ccd6:	f100 812a 	bmi.w	800cf2e <HAL_RCCEx_PeriphCLKConfig+0x85a>
    return HAL_OK;
 800ccda:	1e30      	subs	r0, r6, #0
 800ccdc:	bf18      	it	ne
 800ccde:	2001      	movne	r0, #1
}
 800cce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
 800cce4:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
 800cce8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800ccec:	f43f aee9 	beq.w	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800ccf0:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
 800ccf4:	f43f aee5 	beq.w	800cac2 <HAL_RCCEx_PeriphCLKConfig+0x3ee>
 800ccf8:	2601      	movs	r6, #1
 800ccfa:	4635      	mov	r5, r6
 800ccfc:	e6ee      	b.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x408>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800ccfe:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
 800cd02:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 800cd06:	f43f aefe 	beq.w	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800cd0a:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
 800cd0e:	f43f aefa 	beq.w	800cb06 <HAL_RCCEx_PeriphCLKConfig+0x432>
 800cd12:	2601      	movs	r6, #1
 800cd14:	4635      	mov	r5, r6
 800cd16:	e703      	b.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x44c>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800cd18:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
 800cd1c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800cd20:	f43f af13 	beq.w	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800cd24:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
 800cd28:	f43f af0f 	beq.w	800cb4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 800cd2c:	2601      	movs	r6, #1
 800cd2e:	4635      	mov	r5, r6
 800cd30:	e718      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x490>
    switch (PeriphClkInit->RngClockSelection)
 800cd32:	2900      	cmp	r1, #0
 800cd34:	f47f af78 	bne.w	800cc28 <HAL_RCCEx_PeriphCLKConfig+0x554>
    if (ret == HAL_OK)
 800cd38:	2d00      	cmp	r5, #0
 800cd3a:	f040 81c5 	bne.w	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cd3e:	4a13      	ldr	r2, [pc, #76]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cd40:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 800cd44:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cd46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cd4a:	430b      	orrs	r3, r1
 800cd4c:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cd4e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd52:	e76a      	b.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x556>
    switch (PeriphClkInit->Sai1ClockSelection)
 800cd54:	4635      	mov	r5, r6
    if (ret == HAL_OK)
 800cd56:	2d00      	cmp	r5, #0
 800cd58:	f000 8114 	beq.w	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cd5c:	462e      	mov	r6, r5
 800cd5e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd62:	e4f0      	b.n	800c746 <HAL_RCCEx_PeriphCLKConfig+0x72>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800cd64:	2101      	movs	r1, #1
 800cd66:	f104 0008 	add.w	r0, r4, #8
 800cd6a:	f7ff fbbf 	bl	800c4ec <RCCEx_PLL2_Config>
 800cd6e:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	f040 8147 	bne.w	800d004 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cd76:	4a05      	ldr	r2, [pc, #20]	; (800cd8c <HAL_RCCEx_PeriphCLKConfig+0x6b8>)
 800cd78:	6f21      	ldr	r1, [r4, #112]	; 0x70
 800cd7a:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cd7c:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 800cd80:	430b      	orrs	r3, r1
 800cd82:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cd84:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cd88:	e5ba      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 800cd8a:	bf00      	nop
 800cd8c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cd90:	2101      	movs	r1, #1
 800cd92:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cd96:	f7ff fc23 	bl	800c5e0 <RCCEx_PLL3_Config>
 800cd9a:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cd9c:	2d00      	cmp	r5, #0
 800cd9e:	f040 8171 	bne.w	800d084 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800cda2:	4aba      	ldr	r2, [pc, #744]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cda4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
 800cda8:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cdaa:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800cdae:	430b      	orrs	r3, r1
 800cdb0:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cdb2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cdb6:	e718      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x516>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cdb8:	2102      	movs	r1, #2
 800cdba:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cdbe:	f7ff fc0f 	bl	800c5e0 <RCCEx_PLL3_Config>
 800cdc2:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cdc4:	2d00      	cmp	r5, #0
 800cdc6:	f040 8159 	bne.w	800d07c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800cdca:	4ab0      	ldr	r2, [pc, #704]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cdcc:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
 800cdd0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cdd2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800cdd6:	430b      	orrs	r3, r1
 800cdd8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800cdda:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cdde:	e6f2      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800cde0:	2101      	movs	r1, #1
 800cde2:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800cde6:	f7ff fbfb 	bl	800c5e0 <RCCEx_PLL3_Config>
 800cdea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cdec:	2d00      	cmp	r5, #0
 800cdee:	f040 8105 	bne.w	800cffc <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800cdf2:	4aa6      	ldr	r2, [pc, #664]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cdf4:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800cdf6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800cdf8:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ce00:	e9d4 3200 	ldrd	r3, r2, [r4]
 800ce04:	e613      	b.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce06:	2102      	movs	r1, #2
 800ce08:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce0c:	f7ff fbe8 	bl	800c5e0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ce10:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ce14:	2800      	cmp	r0, #0
 800ce16:	f43f aef7 	beq.w	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x534>
      status = HAL_ERROR;
 800ce1a:	2601      	movs	r6, #1
 800ce1c:	e6f4      	b.n	800cc08 <HAL_RCCEx_PeriphCLKConfig+0x534>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce1e:	2100      	movs	r1, #0
 800ce20:	f104 0008 	add.w	r0, r4, #8
 800ce24:	f7ff fb62 	bl	800c4ec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ce28:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ce2a:	2800      	cmp	r0, #0
 800ce2c:	f43f af46 	beq.w	800ccbc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ce30:	0797      	lsls	r7, r2, #30
 800ce32:	4606      	mov	r6, r0
 800ce34:	f57f af45 	bpl.w	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ce38:	2101      	movs	r1, #1
 800ce3a:	f104 0008 	add.w	r0, r4, #8
 800ce3e:	f7ff fb55 	bl	800c4ec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ce42:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ce44:	2800      	cmp	r0, #0
 800ce46:	f43f af3c 	beq.w	800ccc2 <HAL_RCCEx_PeriphCLKConfig+0x5ee>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ce4a:	0755      	lsls	r5, r2, #29
 800ce4c:	4606      	mov	r6, r0
 800ce4e:	f57f af3b 	bpl.w	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ce52:	2102      	movs	r1, #2
 800ce54:	f104 0008 	add.w	r0, r4, #8
 800ce58:	f7ff fb48 	bl	800c4ec <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ce5c:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	f43f af32 	beq.w	800ccc8 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ce64:	4606      	mov	r6, r0
 800ce66:	0710      	lsls	r0, r2, #28
 800ce68:	f57f af31 	bpl.w	800ccce <HAL_RCCEx_PeriphCLKConfig+0x5fa>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ce6c:	2100      	movs	r1, #0
 800ce6e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ce72:	f7ff fbb5 	bl	800c5e0 <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ce76:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
 800ce78:	2800      	cmp	r0, #0
 800ce7a:	f43f af28 	beq.w	800ccce <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ce7e:	06d1      	lsls	r1, r2, #27
 800ce80:	4606      	mov	r6, r0
 800ce82:	f57f af27 	bpl.w	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ce86:	f104 0528 	add.w	r5, r4, #40	; 0x28
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	4628      	mov	r0, r5
 800ce8e:	f7ff fba7 	bl	800c5e0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800ce92:	2800      	cmp	r0, #0
 800ce94:	f000 812e 	beq.w	800d0f4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800ce98:	6863      	ldr	r3, [r4, #4]
 800ce9a:	069b      	lsls	r3, r3, #26
 800ce9c:	d550      	bpl.n	800cf40 <HAL_RCCEx_PeriphCLKConfig+0x86c>
 800ce9e:	4606      	mov	r6, r0
 800cea0:	e047      	b.n	800cf32 <HAL_RCCEx_PeriphCLKConfig+0x85e>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800cea2:	4f7b      	ldr	r7, [pc, #492]	; (800d090 <HAL_RCCEx_PeriphCLKConfig+0x9bc>)
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ceaa:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800ceac:	f7fc f88a 	bl	8008fc4 <HAL_GetTick>
 800ceb0:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ceb2:	e006      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x7ee>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ceb4:	f7fc f886 	bl	8008fc4 <HAL_GetTick>
 800ceb8:	eba0 0008 	sub.w	r0, r0, r8
 800cebc:	2864      	cmp	r0, #100	; 0x64
 800cebe:	f200 81df 	bhi.w	800d280 <HAL_RCCEx_PeriphCLKConfig+0xbac>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	05da      	lsls	r2, r3, #23
 800cec6:	d5f5      	bpl.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x7e0>
    if (ret == HAL_OK)
 800cec8:	2d00      	cmp	r5, #0
 800ceca:	f040 8208 	bne.w	800d2de <HAL_RCCEx_PeriphCLKConfig+0xc0a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800cece:	4b6f      	ldr	r3, [pc, #444]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800ced0:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800ced4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ced6:	4051      	eors	r1, r2
 800ced8:	f411 7f40 	tst.w	r1, #768	; 0x300
 800cedc:	d00d      	beq.n	800cefa <HAL_RCCEx_PeriphCLKConfig+0x826>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cede:	6f1a      	ldr	r2, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800cee0:	6f19      	ldr	r1, [r3, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800cee2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800cee6:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 800ceea:	6719      	str	r1, [r3, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ceec:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ceee:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 800cef2:	6719      	str	r1, [r3, #112]	; 0x70
        RCC->BDCR = tmpreg;
 800cef4:	671a      	str	r2, [r3, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800cef6:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800cefa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 800cefe:	f000 81d0 	beq.w	800d2a2 <HAL_RCCEx_PeriphCLKConfig+0xbce>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800cf02:	f402 7340 	and.w	r3, r2, #768	; 0x300
 800cf06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cf0a:	f000 81de 	beq.w	800d2ca <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 800cf0e:	4a5f      	ldr	r2, [pc, #380]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf10:	6913      	ldr	r3, [r2, #16]
 800cf12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cf16:	6113      	str	r3, [r2, #16]
 800cf18:	4a5c      	ldr	r2, [pc, #368]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf1a:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
 800cf1e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800cf20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cf24:	430b      	orrs	r3, r1
 800cf26:	6713      	str	r3, [r2, #112]	; 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800cf28:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf2c:	e54d      	b.n	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf2e:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cf32:	2102      	movs	r1, #2
 800cf34:	4628      	mov	r0, r5
 800cf36:	f7ff fb53 	bl	800c5e0 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800cf3a:	2800      	cmp	r0, #0
 800cf3c:	f43f aecd 	beq.w	800ccda <HAL_RCCEx_PeriphCLKConfig+0x606>
  return HAL_ERROR;
 800cf40:	2001      	movs	r0, #1
}
 800cf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cf46:	4a51      	ldr	r2, [pc, #324]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf48:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
 800cf4c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cf4e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800cf52:	430b      	orrs	r3, r1
 800cf54:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cf56:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf5a:	e448      	b.n	800c7ee <HAL_RCCEx_PeriphCLKConfig+0x11a>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cf5c:	4a4b      	ldr	r2, [pc, #300]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf5e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cf60:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cf62:	f423 73e0 	bic.w	r3, r3, #448	; 0x1c0
 800cf66:	430b      	orrs	r3, r1
 800cf68:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cf6a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf6e:	e404      	b.n	800c77a <HAL_RCCEx_PeriphCLKConfig+0xa6>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800cf70:	4a46      	ldr	r2, [pc, #280]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf72:	6e21      	ldr	r1, [r4, #96]	; 0x60
 800cf74:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cf76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800cf7a:	430b      	orrs	r3, r1
 800cf7c:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800cf7e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf82:	e46d      	b.n	800c860 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cf84:	4a41      	ldr	r2, [pc, #260]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf86:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cf88:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800cf8a:	f023 0307 	bic.w	r3, r3, #7
 800cf8e:	430b      	orrs	r3, r1
 800cf90:	6513      	str	r3, [r2, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cf92:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cf96:	f7ff bbd6 	b.w	800c746 <HAL_RCCEx_PeriphCLKConfig+0x72>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cf9a:	4a3c      	ldr	r2, [pc, #240]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cf9c:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
 800cfa0:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800cfa2:	f423 0360 	bic.w	r3, r3, #14680064	; 0xe00000
 800cfa6:	430b      	orrs	r3, r1
 800cfa8:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cfaa:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cfae:	e401      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cfb0:	2102      	movs	r1, #2
 800cfb2:	f104 0008 	add.w	r0, r4, #8
 800cfb6:	f7ff fa99 	bl	800c4ec <RCCEx_PLL2_Config>
 800cfba:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	d079      	beq.n	800d0b4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cfc0:	462e      	mov	r6, r5
 800cfc2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800cfc6:	e61c      	b.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfc8:	4a30      	ldr	r2, [pc, #192]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cfca:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cfcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfd0:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cfd2:	e43f      	b.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x180>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfd4:	4a2d      	ldr	r2, [pc, #180]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cfd6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cfd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfdc:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cfde:	e400      	b.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfe0:	4a2a      	ldr	r2, [pc, #168]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cfe2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cfe4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfe8:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cfea:	f7ff bbc0 	b.w	800c76e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfee:	4a27      	ldr	r2, [pc, #156]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800cff0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800cff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cff6:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800cff8:	f7ff bbd6 	b.w	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800cffc:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d000:	462e      	mov	r6, r5
 800d002:	e514      	b.n	800ca2e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d004:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d008:	462e      	mov	r6, r5
 800d00a:	e479      	b.n	800c900 <HAL_RCCEx_PeriphCLKConfig+0x22c>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d00c:	4a1f      	ldr	r2, [pc, #124]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d00e:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800d010:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800d012:	f023 0307 	bic.w	r3, r3, #7
 800d016:	430b      	orrs	r3, r1
 800d018:	6553      	str	r3, [r2, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d01a:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d01e:	e520      	b.n	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d020:	4a1a      	ldr	r2, [pc, #104]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d022:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800d026:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d028:	f023 0307 	bic.w	r3, r3, #7
 800d02c:	430b      	orrs	r3, r1
 800d02e:	6593      	str	r3, [r2, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d030:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d034:	e530      	b.n	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d036:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d03a:	462e      	mov	r6, r5
 800d03c:	e54e      	b.n	800cadc <HAL_RCCEx_PeriphCLKConfig+0x408>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d03e:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d042:	462e      	mov	r6, r5
 800d044:	f7ff bbf0 	b.w	800c828 <HAL_RCCEx_PeriphCLKConfig+0x154>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d048:	4a10      	ldr	r2, [pc, #64]	; (800d08c <HAL_RCCEx_PeriphCLKConfig+0x9b8>)
 800d04a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d04c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d04e:	f023 0303 	bic.w	r3, r3, #3
 800d052:	430b      	orrs	r3, r1
 800d054:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d056:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d05a:	e4b3      	b.n	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d05c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d060:	462e      	mov	r6, r5
 800d062:	e41d      	b.n	800c8a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d064:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d068:	462e      	mov	r6, r5
 800d06a:	e57b      	b.n	800cb64 <HAL_RCCEx_PeriphCLKConfig+0x490>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d06c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d070:	462e      	mov	r6, r5
 800d072:	e435      	b.n	800c8e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d074:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d078:	462e      	mov	r6, r5
 800d07a:	e551      	b.n	800cb20 <HAL_RCCEx_PeriphCLKConfig+0x44c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d07c:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d080:	462e      	mov	r6, r5
 800d082:	e5a0      	b.n	800cbc6 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d084:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d088:	462e      	mov	r6, r5
 800d08a:	e5ae      	b.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x516>
 800d08c:	58024400 	.word	0x58024400
 800d090:	58024800 	.word	0x58024800
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d094:	4a9a      	ldr	r2, [pc, #616]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d096:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d09c:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d09e:	2d00      	cmp	r5, #0
 800d0a0:	f43f ae4d 	beq.w	800cd3e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d0a4:	e010      	b.n	800d0c8 <HAL_RCCEx_PeriphCLKConfig+0x9f4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0a6:	4a96      	ldr	r2, [pc, #600]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d0a8:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d0aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0ae:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d0b0:	2d00      	cmp	r5, #0
 800d0b2:	d185      	bne.n	800cfc0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d0b4:	4a92      	ldr	r2, [pc, #584]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d0b6:	6d21      	ldr	r1, [r4, #80]	; 0x50
 800d0b8:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 800d0ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0be:	430b      	orrs	r3, r1
 800d0c0:	64d3      	str	r3, [r2, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d0c2:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d0c6:	e59c      	b.n	800cc02 <HAL_RCCEx_PeriphCLKConfig+0x52e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d0c8:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d0cc:	462e      	mov	r6, r5
 800d0ce:	e5ac      	b.n	800cc2a <HAL_RCCEx_PeriphCLKConfig+0x556>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0d0:	4a8b      	ldr	r2, [pc, #556]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d0d2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d0d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d0d8:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d0da:	2d00      	cmp	r5, #0
 800d0dc:	f43f ae61 	beq.w	800cda2 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
 800d0e0:	e7d0      	b.n	800d084 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0e2:	f104 0008 	add.w	r0, r4, #8
 800d0e6:	f7ff fa01 	bl	800c4ec <RCCEx_PLL2_Config>
 800d0ea:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d0ec:	2d00      	cmp	r5, #0
 800d0ee:	f43f ae6c 	beq.w	800cdca <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800d0f2:	e7c3      	b.n	800d07c <HAL_RCCEx_PeriphCLKConfig+0x9a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800d0f4:	6862      	ldr	r2, [r4, #4]
 800d0f6:	e5ed      	b.n	800ccd4 <HAL_RCCEx_PeriphCLKConfig+0x600>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d0f8:	2102      	movs	r1, #2
 800d0fa:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d0fe:	f7ff fa6f 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d102:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d104:	2d00      	cmp	r5, #0
 800d106:	f43f ad01 	beq.w	800cb0c <HAL_RCCEx_PeriphCLKConfig+0x438>
 800d10a:	e7b3      	b.n	800d074 <HAL_RCCEx_PeriphCLKConfig+0x9a0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d10c:	2102      	movs	r1, #2
 800d10e:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d112:	f7ff fa65 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d116:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d118:	2d00      	cmp	r5, #0
 800d11a:	f43f ad19 	beq.w	800cb50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800d11e:	e7a1      	b.n	800d064 <HAL_RCCEx_PeriphCLKConfig+0x990>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d120:	4a77      	ldr	r2, [pc, #476]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d122:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d128:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d12a:	2d00      	cmp	r5, #0
 800d12c:	f43f ae23 	beq.w	800cd76 <HAL_RCCEx_PeriphCLKConfig+0x6a2>
 800d130:	e768      	b.n	800d004 <HAL_RCCEx_PeriphCLKConfig+0x930>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d132:	2101      	movs	r1, #1
 800d134:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d138:	f7ff fa52 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d13c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d13e:	2d00      	cmp	r5, #0
 800d140:	f43f aba5 	beq.w	800c88e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
 800d144:	e78a      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x988>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d146:	2101      	movs	r1, #1
 800d148:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d14c:	f7ff fa48 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d150:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d152:	2d00      	cmp	r5, #0
 800d154:	f43f abba 	beq.w	800c8cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800d158:	e788      	b.n	800d06c <HAL_RCCEx_PeriphCLKConfig+0x998>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d15a:	2102      	movs	r1, #2
 800d15c:	f104 0008 	add.w	r0, r4, #8
 800d160:	f7ff f9c4 	bl	800c4ec <RCCEx_PLL2_Config>
 800d164:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d166:	2d00      	cmp	r5, #0
 800d168:	f43f ab55 	beq.w	800c816 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800d16c:	e767      	b.n	800d03e <HAL_RCCEx_PeriphCLKConfig+0x96a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d16e:	2102      	movs	r1, #2
 800d170:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d174:	f7ff fa34 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d178:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d17a:	2d00      	cmp	r5, #0
 800d17c:	f43f aca4 	beq.w	800cac8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 800d180:	e759      	b.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x962>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d182:	4a5f      	ldr	r2, [pc, #380]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d184:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d18a:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (ret == HAL_OK)
 800d18c:	2d00      	cmp	r5, #0
 800d18e:	f43f af5b 	beq.w	800d048 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800d192:	e414      	b.n	800c9be <HAL_RCCEx_PeriphCLKConfig+0x2ea>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d194:	2102      	movs	r1, #2
 800d196:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d19a:	f7ff fa21 	bl	800c5e0 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d19e:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d1a2:	2800      	cmp	r0, #0
 800d1a4:	f43f ace6 	beq.w	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
        status = HAL_ERROR;
 800d1a8:	2601      	movs	r6, #1
 800d1aa:	e4e3      	b.n	800cb74 <HAL_RCCEx_PeriphCLKConfig+0x4a0>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d1ac:	2102      	movs	r1, #2
 800d1ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d1b2:	f7ff fa15 	bl	800c5e0 <RCCEx_PLL3_Config>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d1b6:	f8d4 2098 	ldr.w	r2, [r4, #152]	; 0x98
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800d1ba:	2800      	cmp	r0, #0
 800d1bc:	f43f acea 	beq.w	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        status = HAL_ERROR;
 800d1c0:	2601      	movs	r6, #1
 800d1c2:	e4e7      	b.n	800cb94 <HAL_RCCEx_PeriphCLKConfig+0x4c0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d1c4:	2100      	movs	r1, #0
 800d1c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d1ca:	f7ff fa09 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d1ce:	4605      	mov	r5, r0
        break;
 800d1d0:	f7ff baea 	b.w	800c7a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d1d4:	2102      	movs	r1, #2
 800d1d6:	3028      	adds	r0, #40	; 0x28
 800d1d8:	f7ff fa02 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d1dc:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800d1de:	2e00      	cmp	r6, #0
 800d1e0:	f43f aa94 	beq.w	800c70c <HAL_RCCEx_PeriphCLKConfig+0x38>
 800d1e4:	f7ff ba9f 	b.w	800c726 <HAL_RCCEx_PeriphCLKConfig+0x52>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1e8:	4a45      	ldr	r2, [pc, #276]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
        break;
 800d1ea:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1ec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d1ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1f2:	62d3      	str	r3, [r2, #44]	; 0x2c
        break;
 800d1f4:	e5af      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1f6:	2100      	movs	r1, #0
 800d1f8:	f104 0008 	add.w	r0, r4, #8
 800d1fc:	f7ff f976 	bl	800c4ec <RCCEx_PLL2_Config>
 800d200:	4605      	mov	r5, r0
        break;
 800d202:	e5a8      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d204:	2100      	movs	r1, #0
 800d206:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d20a:	f7ff f9e9 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d20e:	4605      	mov	r5, r0
        break;
 800d210:	f7ff bb20 	b.w	800c854 <HAL_RCCEx_PeriphCLKConfig+0x180>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d214:	2100      	movs	r1, #0
 800d216:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d21a:	f7ff f9e1 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d21e:	4605      	mov	r5, r0
        break;
 800d220:	f7ff badf 	b.w	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d224:	2100      	movs	r1, #0
 800d226:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d22a:	f7ff f9d9 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d22e:	4605      	mov	r5, r0
        break;
 800d230:	e591      	b.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x682>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d232:	2100      	movs	r1, #0
 800d234:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800d238:	f7ff f9d2 	bl	800c5e0 <RCCEx_PLL3_Config>
 800d23c:	4605      	mov	r5, r0
        break;
 800d23e:	f7ff ba96 	b.w	800c76e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d242:	2101      	movs	r1, #1
 800d244:	f104 0008 	add.w	r0, r4, #8
 800d248:	f7ff f950 	bl	800c4ec <RCCEx_PLL2_Config>
 800d24c:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d24e:	2d00      	cmp	r5, #0
 800d250:	f43f aee6 	beq.w	800d020 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800d254:	e41d      	b.n	800ca92 <HAL_RCCEx_PeriphCLKConfig+0x3be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d256:	2101      	movs	r1, #1
 800d258:	f104 0008 	add.w	r0, r4, #8
 800d25c:	f7ff f946 	bl	800c4ec <RCCEx_PLL2_Config>
 800d260:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d262:	2d00      	cmp	r5, #0
 800d264:	f43f aed2 	beq.w	800d00c <HAL_RCCEx_PeriphCLKConfig+0x938>
 800d268:	f7ff bbf8 	b.w	800ca5c <HAL_RCCEx_PeriphCLKConfig+0x388>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d26c:	2101      	movs	r1, #1
 800d26e:	f104 0008 	add.w	r0, r4, #8
 800d272:	f7ff f93b 	bl	800c4ec <RCCEx_PLL2_Config>
 800d276:	4605      	mov	r5, r0
    if (ret == HAL_OK)
 800d278:	2d00      	cmp	r5, #0
 800d27a:	f43f adba 	beq.w	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x71e>
 800d27e:	e6bd      	b.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x928>
            ret = HAL_TIMEOUT;
 800d280:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d282:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
 800d286:	4635      	mov	r5, r6
 800d288:	f7ff bb9f 	b.w	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800d28c:	2601      	movs	r6, #1
 800d28e:	f7ff ba4c 	b.w	800c72a <HAL_RCCEx_PeriphCLKConfig+0x56>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d292:	4a1b      	ldr	r2, [pc, #108]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d294:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800d296:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d29a:	62d3      	str	r3, [r2, #44]	; 0x2c
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d29c:	6e81      	ldr	r1, [r0, #104]	; 0x68
 800d29e:	f7ff ba3b 	b.w	800c718 <HAL_RCCEx_PeriphCLKConfig+0x44>
        tickstart = HAL_GetTick();
 800d2a2:	f7fb fe8f 	bl	8008fc4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d2a6:	f8df 8058 	ldr.w	r8, [pc, #88]	; 800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>
        tickstart = HAL_GetTick();
 800d2aa:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2ac:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d2b0:	e004      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0xbe8>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d2b2:	f7fb fe87 	bl	8008fc4 <HAL_GetTick>
 800d2b6:	1bc0      	subs	r0, r0, r7
 800d2b8:	4548      	cmp	r0, r9
 800d2ba:	d8e1      	bhi.n	800d280 <HAL_RCCEx_PeriphCLKConfig+0xbac>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d2bc:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800d2c0:	079b      	lsls	r3, r3, #30
 800d2c2:	d5f6      	bpl.n	800d2b2 <HAL_RCCEx_PeriphCLKConfig+0xbde>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d2c4:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
 800d2c8:	e61b      	b.n	800cf02 <HAL_RCCEx_PeriphCLKConfig+0x82e>
 800d2ca:	490d      	ldr	r1, [pc, #52]	; (800d300 <HAL_RCCEx_PeriphCLKConfig+0xc2c>)
 800d2cc:	4b0d      	ldr	r3, [pc, #52]	; (800d304 <HAL_RCCEx_PeriphCLKConfig+0xc30>)
 800d2ce:	ea03 1312 	and.w	r3, r3, r2, lsr #4
 800d2d2:	690a      	ldr	r2, [r1, #16]
 800d2d4:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	610b      	str	r3, [r1, #16]
 800d2dc:	e61c      	b.n	800cf18 <HAL_RCCEx_PeriphCLKConfig+0x844>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d2de:	e9d4 3200 	ldrd	r3, r2, [r4]
 800d2e2:	462e      	mov	r6, r5
 800d2e4:	f7ff bb71 	b.w	800c9ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    switch (PeriphClkInit->FmcClockSelection)
 800d2e8:	2601      	movs	r6, #1
 800d2ea:	4635      	mov	r5, r6
 800d2ec:	f7ff bb6a 	b.w	800c9c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d2f0:	2601      	movs	r6, #1
 800d2f2:	4635      	mov	r5, r6
 800d2f4:	f7ff bbd0 	b.w	800ca98 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d2f8:	2601      	movs	r6, #1
 800d2fa:	4635      	mov	r5, r6
 800d2fc:	f7ff bbb1 	b.w	800ca62 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800d300:	58024400 	.word	0x58024400
 800d304:	00ffffcf 	.word	0x00ffffcf

0800d308 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d308:	4b4f      	ldr	r3, [pc, #316]	; (800d448 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800d30a:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d30c:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d30e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d310:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
 800d312:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800d316:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d31a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
 800d31c:	d05c      	beq.n	800d3d8 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d31e:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d322:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d326:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d32a:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800d32e:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800d330:	ee07 4a90 	vmov	s15, r4
 800d334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800d338:	d003      	beq.n	800d342 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
 800d33a:	2902      	cmp	r1, #2
 800d33c:	d075      	beq.n	800d42a <HAL_RCCEx_GetPLL2ClockFreq+0x122>
 800d33e:	2900      	cmp	r1, #0
 800d340:	d04f      	beq.n	800d3e2 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d342:	ee07 2a90 	vmov	s15, r2
 800d346:	eddf 6a41 	vldr	s13, [pc, #260]	; 800d44c <HAL_RCCEx_GetPLL2ClockFreq+0x144>
 800d34a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d34e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d350:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800d354:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d450 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800d358:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d35c:	ee06 3a90 	vmov	s13, r3
 800d360:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d364:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d368:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d36c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800d370:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d374:	4a34      	ldr	r2, [pc, #208]	; (800d448 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800d376:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d37a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d37c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d380:	ee07 3a10 	vmov	s14, r3
 800d384:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800d388:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d38a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d38e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d396:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d39a:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d39c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d3a0:	ee07 3a10 	vmov	s14, r3
 800d3a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d3a8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d3ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3b4:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d3b8:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800d3ba:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d3be:	ee07 3a90 	vmov	s15, r3
 800d3c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3c6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d3ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d3ce:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d3d2:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800d3d6:	4770      	bx	lr
 800d3d8:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d3da:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d3de:	6082      	str	r2, [r0, #8]
}
 800d3e0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3e2:	6819      	ldr	r1, [r3, #0]
 800d3e4:	0689      	lsls	r1, r1, #26
 800d3e6:	d527      	bpl.n	800d438 <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3e8:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3ea:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3ee:	4919      	ldr	r1, [pc, #100]	; (800d454 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d3f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d3f6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d3fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d3fe:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d450 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800d402:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d406:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d408:	ee06 3a90 	vmov	s13, r3
 800d40c:	ee05 1a90 	vmov	s11, r1
 800d410:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d414:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d418:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d41c:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800d420:	eee7 6a05 	vfma.f32	s13, s14, s10
 800d424:	ee66 6a26 	vmul.f32	s13, s12, s13
 800d428:	e7a4      	b.n	800d374 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d42a:	ee07 2a90 	vmov	s15, r2
 800d42e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d458 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800d432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d436:	e78a      	b.n	800d34e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d438:	ee07 2a90 	vmov	s15, r2
 800d43c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800d45c <HAL_RCCEx_GetPLL2ClockFreq+0x154>
 800d440:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d444:	e783      	b.n	800d34e <HAL_RCCEx_GetPLL2ClockFreq+0x46>
 800d446:	bf00      	nop
 800d448:	58024400 	.word	0x58024400
 800d44c:	4a742400 	.word	0x4a742400
 800d450:	39000000 	.word	0x39000000
 800d454:	03d09000 	.word	0x03d09000
 800d458:	4bbebc20 	.word	0x4bbebc20
 800d45c:	4c742400 	.word	0x4c742400

0800d460 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d460:	4b4f      	ldr	r3, [pc, #316]	; (800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800d462:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d464:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d466:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d468:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
 800d46a:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d46e:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d472:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
 800d474:	d05c      	beq.n	800d530 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d476:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d47a:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d47e:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d482:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800d486:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d488:	ee07 4a90 	vmov	s15, r4
 800d48c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800d490:	d003      	beq.n	800d49a <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
 800d492:	2902      	cmp	r1, #2
 800d494:	d075      	beq.n	800d582 <HAL_RCCEx_GetPLL3ClockFreq+0x122>
 800d496:	2900      	cmp	r1, #0
 800d498:	d04f      	beq.n	800d53a <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d49a:	ee07 2a90 	vmov	s15, r2
 800d49e:	eddf 6a41 	vldr	s13, [pc, #260]	; 800d5a4 <HAL_RCCEx_GetPLL3ClockFreq+0x144>
 800d4a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a8:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800d4ac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800d4b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4b4:	ee06 3a90 	vmov	s13, r3
 800d4b8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d4bc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d4c0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d4c4:	eee7 6a25 	vfma.f32	s13, s14, s11
 800d4c8:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d4cc:	4a34      	ldr	r2, [pc, #208]	; (800d5a0 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800d4ce:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d4d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d4d4:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d4d8:	ee07 3a10 	vmov	s14, r3
 800d4dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800d4e0:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d4e2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d4e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d4ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d4ee:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d4f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d4f4:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d4f8:	ee07 3a10 	vmov	s14, r3
 800d4fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d500:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d504:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d50c:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d510:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800d512:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d516:	ee07 3a90 	vmov	s15, r3
 800d51a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d51e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d526:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d52a:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800d52e:	4770      	bx	lr
 800d530:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d532:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d536:	6082      	str	r2, [r0, #8]
}
 800d538:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d53a:	6819      	ldr	r1, [r3, #0]
 800d53c:	0689      	lsls	r1, r1, #26
 800d53e:	d527      	bpl.n	800d590 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d540:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d542:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d546:	4919      	ldr	r1, [pc, #100]	; (800d5ac <HAL_RCCEx_GetPLL3ClockFreq+0x14c>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d548:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d54c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d54e:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d552:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d556:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d5a8 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800d55a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d55e:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d560:	ee06 3a90 	vmov	s13, r3
 800d564:	ee05 1a90 	vmov	s11, r1
 800d568:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d56c:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d570:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d574:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800d578:	eee7 6a05 	vfma.f32	s13, s14, s10
 800d57c:	ee66 6a26 	vmul.f32	s13, s12, s13
 800d580:	e7a4      	b.n	800d4cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d582:	ee07 2a90 	vmov	s15, r2
 800d586:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d5b0 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800d58a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d58e:	e78a      	b.n	800d4a6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d590:	ee07 2a90 	vmov	s15, r2
 800d594:	eddf 6a07 	vldr	s13, [pc, #28]	; 800d5b4 <HAL_RCCEx_GetPLL3ClockFreq+0x154>
 800d598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d59c:	e783      	b.n	800d4a6 <HAL_RCCEx_GetPLL3ClockFreq+0x46>
 800d59e:	bf00      	nop
 800d5a0:	58024400 	.word	0x58024400
 800d5a4:	4a742400 	.word	0x4a742400
 800d5a8:	39000000 	.word	0x39000000
 800d5ac:	03d09000 	.word	0x03d09000
 800d5b0:	4bbebc20 	.word	0x4bbebc20
 800d5b4:	4c742400 	.word	0x4c742400

0800d5b8 <HAL_RCCEx_GetPLL1ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5b8:	4b4f      	ldr	r3, [pc, #316]	; (800d6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
{
 800d5ba:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5bc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d5be:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d5c0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll1m != 0U)
 800d5c2:	f415 7f7c 	tst.w	r5, #1008	; 0x3f0
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d5c6:	f3c5 1205 	ubfx	r2, r5, #4, #6
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5ca:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  if (pll1m != 0U)
 800d5cc:	d05c      	beq.n	800d688 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5ce:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d5d2:	f006 0601 	and.w	r6, r6, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d5d6:	f001 0103 	and.w	r1, r1, #3
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5da:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
 800d5de:	2901      	cmp	r1, #1
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d5e0:	ee07 4a90 	vmov	s15, r4
 800d5e4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
 800d5e8:	d07e      	beq.n	800d6e8 <HAL_RCCEx_GetPLL1ClockFreq+0x130>
 800d5ea:	2902      	cmp	r1, #2
 800d5ec:	d075      	beq.n	800d6da <HAL_RCCEx_GetPLL1ClockFreq+0x122>
 800d5ee:	2900      	cmp	r1, #0
 800d5f0:	d04f      	beq.n	800d692 <HAL_RCCEx_GetPLL1ClockFreq+0xda>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5f2:	ee07 2a90 	vmov	s15, r2
 800d5f6:	eddf 6a41 	vldr	s13, [pc, #260]	; 800d6fc <HAL_RCCEx_GetPLL1ClockFreq+0x144>
 800d5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d5fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d600:	ee86 6aa7 	vdiv.f32	s12, s13, s15
 800d604:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800d608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d60c:	ee06 3a90 	vmov	s13, r3
 800d610:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d614:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d618:	ee76 6a85 	vadd.f32	s13, s13, s10
 800d61c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800d620:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d624:	4a34      	ldr	r2, [pc, #208]	; (800d6f8 <HAL_RCCEx_GetPLL1ClockFreq+0x140>)
 800d626:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d62a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d62c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800d630:	ee07 3a10 	vmov	s14, r3
 800d634:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
 800d638:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d63a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d63e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d642:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d646:	edc0 7a00 	vstr	s15, [r0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d64a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d64c:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800d650:	ee07 3a10 	vmov	s14, r3
 800d654:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d658:	ee37 7a06 	vadd.f32	s14, s14, s12
 800d65c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d664:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d668:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800d66a:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800d66e:	ee07 3a90 	vmov	s15, r3
 800d672:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d676:	ee77 7a86 	vadd.f32	s15, s15, s12
 800d67a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d67e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800d682:	ed80 7a02 	vstr	s14, [r0, #8]
}
 800d686:	4770      	bx	lr
 800d688:	bc70      	pop	{r4, r5, r6}
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d68a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d68e:	6082      	str	r2, [r0, #8]
}
 800d690:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d692:	6819      	ldr	r1, [r3, #0]
 800d694:	0689      	lsls	r1, r1, #26
 800d696:	d5ac      	bpl.n	800d5f2 <HAL_RCCEx_GetPLL1ClockFreq+0x3a>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d698:	681c      	ldr	r4, [r3, #0]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d69a:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d69e:	4919      	ldr	r1, [pc, #100]	; (800d704 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>)
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6a0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800d6a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6a6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6ae:	ed9f 5a14 	vldr	s10, [pc, #80]	; 800d700 <HAL_RCCEx_GetPLL1ClockFreq+0x148>
 800d6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d6b6:	40d1      	lsrs	r1, r2
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6b8:	ee06 3a90 	vmov	s13, r3
 800d6bc:	ee05 1a90 	vmov	s11, r1
 800d6c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800d6c4:	eef8 5ae5 	vcvt.f32.s32	s11, s11
 800d6c8:	ee76 6a86 	vadd.f32	s13, s13, s12
 800d6cc:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800d6d0:	eee7 6a05 	vfma.f32	s13, s14, s10
 800d6d4:	ee66 6a26 	vmul.f32	s13, s12, s13
 800d6d8:	e7a4      	b.n	800d624 <HAL_RCCEx_GetPLL1ClockFreq+0x6c>
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6da:	ee07 2a90 	vmov	s15, r2
 800d6de:	eddf 6a0a 	vldr	s13, [pc, #40]	; 800d708 <HAL_RCCEx_GetPLL1ClockFreq+0x150>
 800d6e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6e6:	e78a      	b.n	800d5fe <HAL_RCCEx_GetPLL1ClockFreq+0x46>
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d6e8:	ee07 2a90 	vmov	s15, r2
 800d6ec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800d70c <HAL_RCCEx_GetPLL1ClockFreq+0x154>
 800d6f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d6f4:	e783      	b.n	800d5fe <HAL_RCCEx_GetPLL1ClockFreq+0x46>
 800d6f6:	bf00      	nop
 800d6f8:	58024400 	.word	0x58024400
 800d6fc:	4c742400 	.word	0x4c742400
 800d700:	39000000 	.word	0x39000000
 800d704:	03d09000 	.word	0x03d09000
 800d708:	4bbebc20 	.word	0x4bbebc20
 800d70c:	4a742400 	.word	0x4a742400

0800d710 <HAL_RCCEx_GetPeriphCLKFreq>:
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d710:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
 800d714:	430b      	orrs	r3, r1
{
 800d716:	b500      	push	{lr}
 800d718:	b085      	sub	sp, #20
  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800d71a:	f000 8084 	beq.w	800d826 <HAL_RCCEx_GetPeriphCLKFreq+0x116>
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800d71e:	f5a0 7300 	sub.w	r3, r0, #512	; 0x200
 800d722:	430b      	orrs	r3, r1
 800d724:	d039      	beq.n	800d79a <HAL_RCCEx_GetPeriphCLKFreq+0x8a>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800d726:	f5a0 6380 	sub.w	r3, r0, #1024	; 0x400
 800d72a:	430b      	orrs	r3, r1
 800d72c:	f000 80e6 	beq.w	800d8fc <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800d730:	f5a0 6300 	sub.w	r3, r0, #2048	; 0x800
 800d734:	430b      	orrs	r3, r1
 800d736:	f000 8089 	beq.w	800d84c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800d73a:	f5a0 5380 	sub.w	r3, r0, #4096	; 0x1000
 800d73e:	430b      	orrs	r3, r1
 800d740:	d061      	beq.n	800d806 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800d742:	f5a0 5300 	sub.w	r3, r0, #8192	; 0x2000
 800d746:	430b      	orrs	r3, r1
 800d748:	f000 8112 	beq.w	800d970 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800d74c:	f5a0 2300 	sub.w	r3, r0, #524288	; 0x80000
 800d750:	430b      	orrs	r3, r1
 800d752:	f000 80a3 	beq.w	800d89c <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800d756:	f5a0 3380 	sub.w	r3, r0, #65536	; 0x10000
 800d75a:	430b      	orrs	r3, r1
 800d75c:	f000 80fa 	beq.w	800d954 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800d760:	f5a0 4380 	sub.w	r3, r0, #16384	; 0x4000
 800d764:	430b      	orrs	r3, r1
 800d766:	f000 8143 	beq.w	800d9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800d76a:	f5a0 4000 	sub.w	r0, r0, #32768	; 0x8000
 800d76e:	ea50 0301 	orrs.w	r3, r0, r1
 800d772:	d137      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800d774:	4a99      	ldr	r2, [pc, #612]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d776:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d778:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
    switch (srcclk)
 800d77c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d780:	f000 8083 	beq.w	800d88a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d784:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d788:	f000 8156 	beq.w	800da38 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800d78c:	bb53      	cbnz	r3, 800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d78e:	6810      	ldr	r0, [r2, #0]
 800d790:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800d794:	d044      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = HSE_VALUE;
 800d796:	4892      	ldr	r0, [pc, #584]	; (800d9e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 800d798:	e042      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800d79a:	4a90      	ldr	r2, [pc, #576]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d79c:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d79e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
    switch (saiclocksource)
 800d7a2:	2b80      	cmp	r3, #128	; 0x80
 800d7a4:	f000 80a5 	beq.w	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d7a8:	d920      	bls.n	800d7ec <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800d7aa:	2bc0      	cmp	r3, #192	; 0xc0
 800d7ac:	d037      	beq.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d7ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7b2:	d117      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7b4:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d7b6:	6811      	ldr	r1, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d7b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d7bc:	0749      	lsls	r1, r1, #29
 800d7be:	d502      	bpl.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	f000 80c1 	beq.w	800d948 <HAL_RCCEx_GetPeriphCLKFreq+0x238>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800d7c6:	4a85      	ldr	r2, [pc, #532]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d7c8:	6812      	ldr	r2, [r2, #0]
 800d7ca:	05d0      	lsls	r0, r2, #23
 800d7cc:	d503      	bpl.n	800d7d6 <HAL_RCCEx_GetPeriphCLKFreq+0xc6>
 800d7ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7d2:	f000 8101 	beq.w	800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800d7d6:	4a81      	ldr	r2, [pc, #516]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d7d8:	6812      	ldr	r2, [r2, #0]
 800d7da:	0391      	lsls	r1, r2, #14
 800d7dc:	d502      	bpl.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800d7de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d7e2:	d0d8      	beq.n	800d796 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800d7e4:	2000      	movs	r0, #0
}
 800d7e6:	b005      	add	sp, #20
 800d7e8:	f85d fb04 	ldr.w	pc, [sp], #4
    switch (saiclocksource)
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d04c      	beq.n	800d88a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d7f0:	2b40      	cmp	r3, #64	; 0x40
 800d7f2:	d1f7      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d7f4:	6810      	ldr	r0, [r2, #0]
 800d7f6:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d7fa:	d011      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7fc:	a801      	add	r0, sp, #4
 800d7fe:	f7ff fd83 	bl	800d308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800d802:	9801      	ldr	r0, [sp, #4]
 800d804:	e00c      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800d806:	4a75      	ldr	r2, [pc, #468]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d808:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d80a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
    switch (srcclk)
 800d80e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d812:	d06e      	beq.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d814:	d937      	bls.n	800d886 <HAL_RCCEx_GetPeriphCLKFreq+0x176>
 800d816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d81a:	f040 8087 	bne.w	800d92c <HAL_RCCEx_GetPeriphCLKFreq+0x21c>
        frequency = EXTERNAL_CLOCK_VALUE;
 800d81e:	4871      	ldr	r0, [pc, #452]	; (800d9e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
}
 800d820:	b005      	add	sp, #20
 800d822:	f85d fb04 	ldr.w	pc, [sp], #4
    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800d826:	4b6d      	ldr	r3, [pc, #436]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d82a:	f003 0307 	and.w	r3, r3, #7
    switch (saiclocksource)
 800d82e:	2b04      	cmp	r3, #4
 800d830:	d8d8      	bhi.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800d832:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <HAL_RCCEx_GetPeriphCLKFreq+0x128>)
 800d834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d838:	0800d8db 	.word	0x0800d8db
 800d83c:	0800d8b7 	.word	0x0800d8b7
 800d840:	0800d8c7 	.word	0x0800d8c7
 800d844:	0800d81f 	.word	0x0800d81f
 800d848:	0800d8c3 	.word	0x0800d8c3
    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800d84c:	4a63      	ldr	r2, [pc, #396]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d84e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d850:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
    switch (saiclocksource)
 800d854:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d858:	d04b      	beq.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d85a:	d944      	bls.n	800d8e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1d6>
 800d85c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d860:	d0dd      	beq.n	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d862:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d866:	d1bd      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d868:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d86a:	6812      	ldr	r2, [r2, #0]
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d86c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800d870:	0752      	lsls	r2, r2, #29
 800d872:	d5a8      	bpl.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 800d874:	2b00      	cmp	r3, #0
 800d876:	d1a6      	bne.n	800d7c6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d878:	4b58      	ldr	r3, [pc, #352]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d87a:	485b      	ldr	r0, [pc, #364]	; (800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d882:	40d8      	lsrs	r0, r3
 800d884:	e7cc      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800d886:	2b00      	cmp	r3, #0
 800d888:	d154      	bne.n	800d934 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d88a:	6810      	ldr	r0, [r2, #0]
 800d88c:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800d890:	d0c6      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800d892:	a801      	add	r0, sp, #4
 800d894:	f7ff fe90 	bl	800d5b8 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800d898:	9802      	ldr	r0, [sp, #8]
 800d89a:	e7c1      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800d89c:	4a4f      	ldr	r2, [pc, #316]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d89e:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d8a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
    switch (srcclk)
 800d8a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d8a8:	f000 80d0 	beq.w	800da4c <HAL_RCCEx_GetPeriphCLKFreq+0x33c>
 800d8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d8b0:	d0da      	beq.n	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d196      	bne.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d8b6:	4b49      	ldr	r3, [pc, #292]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d8b8:	6818      	ldr	r0, [r3, #0]
 800d8ba:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d8be:	d0af      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d8c0:	e79c      	b.n	800d7fc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800d8c2:	4a46      	ldr	r2, [pc, #280]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d8c4:	e776      	b.n	800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8c6:	4b45      	ldr	r3, [pc, #276]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d8c8:	6818      	ldr	r0, [r3, #0]
 800d8ca:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d8ce:	d0a7      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d8d0:	a801      	add	r0, sp, #4
 800d8d2:	f7ff fdc5 	bl	800d460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800d8d6:	9801      	ldr	r0, [sp, #4]
 800d8d8:	e7a2      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800d8da:	4b40      	ldr	r3, [pc, #256]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d8dc:	6818      	ldr	r0, [r3, #0]
 800d8de:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 800d8e2:	d09d      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d8e4:	e7d5      	b.n	800d892 <HAL_RCCEx_GetPeriphCLKFreq+0x182>
    switch (saiclocksource)
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d0cf      	beq.n	800d88a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d8ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d8ee:	d081      	beq.n	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800d8f0:	e778      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d8f2:	6810      	ldr	r0, [r2, #0]
 800d8f4:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d8f8:	d092      	beq.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d8fa:	e7e9      	b.n	800d8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1c0>
    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800d8fc:	4a37      	ldr	r2, [pc, #220]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d8fe:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800d900:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
    switch (saiclocksource)
 800d904:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d908:	d0f3      	beq.n	800d8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e2>
 800d90a:	d806      	bhi.n	800d91a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d0bc      	beq.n	800d88a <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 800d910:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d914:	f43f af6e 	beq.w	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800d918:	e764      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800d91a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d91e:	f43f af7e 	beq.w	800d81e <HAL_RCCEx_GetPeriphCLKFreq+0x10e>
 800d922:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d926:	f43f af45 	beq.w	800d7b4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
 800d92a:	e75b      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
    switch (srcclk)
 800d92c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d930:	d09a      	beq.n	800d868 <HAL_RCCEx_GetPeriphCLKFreq+0x158>
 800d932:	e757      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
 800d934:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d938:	f43f af5c 	beq.w	800d7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800d93c:	e752      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800d93e:	6810      	ldr	r0, [r2, #0]
 800d940:	f010 0004 	ands.w	r0, r0, #4
 800d944:	f43f af6c 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d948:	6813      	ldr	r3, [r2, #0]
 800d94a:	4827      	ldr	r0, [pc, #156]	; (800d9e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 800d94c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d950:	40d8      	lsrs	r0, r3
 800d952:	e765      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800d954:	4b21      	ldr	r3, [pc, #132]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d956:	6cda      	ldr	r2, [r3, #76]	; 0x4c
    switch (srcclk)
 800d958:	03d2      	lsls	r2, r2, #15
 800d95a:	d5bf      	bpl.n	800d8dc <HAL_RCCEx_GetPeriphCLKFreq+0x1cc>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800d95c:	6818      	ldr	r0, [r3, #0]
 800d95e:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800d962:	f43f af5d 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d966:	a801      	add	r0, sp, #4
 800d968:	f7ff fcce 	bl	800d308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800d96c:	9803      	ldr	r0, [sp, #12]
 800d96e:	e757      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800d970:	4a1a      	ldr	r2, [pc, #104]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d972:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800d974:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
    switch (srcclk)
 800d978:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d97c:	d0df      	beq.n	800d93e <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800d97e:	d810      	bhi.n	800d9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x292>
 800d980:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d984:	d058      	beq.n	800da38 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800d986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d98a:	d118      	bne.n	800d9be <HAL_RCCEx_GetPeriphCLKFreq+0x2ae>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800d98c:	4b13      	ldr	r3, [pc, #76]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d98e:	6818      	ldr	r0, [r3, #0]
 800d990:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800d994:	f43f af44 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d998:	a801      	add	r0, sp, #4
 800d99a:	f7ff fd61 	bl	800d460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800d99e:	9802      	ldr	r0, [sp, #8]
 800d9a0:	e73e      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800d9a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d9a6:	d012      	beq.n	800d9ce <HAL_RCCEx_GetPeriphCLKFreq+0x2be>
 800d9a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d9ac:	f47f af1a 	bne.w	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800d9b0:	4b0a      	ldr	r3, [pc, #40]	; (800d9dc <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 800d9b2:	6818      	ldr	r0, [r3, #0]
 800d9b4:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 800d9b8:	f43f af32 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d9bc:	e6eb      	b.n	800d796 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
    switch (srcclk)
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	f47f af10 	bne.w	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
}
 800d9c4:	b005      	add	sp, #20
 800d9c6:	f85d eb04 	ldr.w	lr, [sp], #4
        frequency = HAL_RCC_GetPCLK1Freq();
 800d9ca:	f7fe bd47 	b.w	800c45c <HAL_RCC_GetPCLK1Freq>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800d9ce:	6810      	ldr	r0, [r2, #0]
 800d9d0:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800d9d4:	f43f af24 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = CSI_VALUE;
 800d9d8:	4804      	ldr	r0, [pc, #16]	; (800d9ec <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 800d9da:	e721      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800d9dc:	58024400 	.word	0x58024400
 800d9e0:	017d7840 	.word	0x017d7840
 800d9e4:	00bb8000 	.word	0x00bb8000
 800d9e8:	03d09000 	.word	0x03d09000
 800d9ec:	003d0900 	.word	0x003d0900
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800d9f0:	4b28      	ldr	r3, [pc, #160]	; (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800d9f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d9f4:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
    switch (srcclk)
 800d9f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d9fc:	d037      	beq.n	800da6e <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
 800d9fe:	d814      	bhi.n	800da2a <HAL_RCCEx_GetPeriphCLKFreq+0x31a>
 800da00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800da04:	d03f      	beq.n	800da86 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800da06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800da0a:	d0bf      	beq.n	800d98c <HAL_RCCEx_GetPeriphCLKFreq+0x27c>
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	f47f aee9 	bne.w	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800da12:	f7fe fce3 	bl	800c3dc <HAL_RCC_GetHCLKFreq>
 800da16:	4b1f      	ldr	r3, [pc, #124]	; (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800da18:	4a1f      	ldr	r2, [pc, #124]	; (800da98 <HAL_RCCEx_GetPeriphCLKFreq+0x388>)
 800da1a:	6a1b      	ldr	r3, [r3, #32]
 800da1c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800da20:	5cd3      	ldrb	r3, [r2, r3]
 800da22:	f003 031f 	and.w	r3, r3, #31
 800da26:	40d8      	lsrs	r0, r3
        break;
 800da28:	e6fa      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
    switch (srcclk)
 800da2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da2e:	d017      	beq.n	800da60 <HAL_RCCEx_GetPeriphCLKFreq+0x350>
 800da30:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800da34:	d0bc      	beq.n	800d9b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>
 800da36:	e6d5      	b.n	800d7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xd4>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da38:	6810      	ldr	r0, [r2, #0]
 800da3a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800da3e:	f43f aeef 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da42:	a801      	add	r0, sp, #4
 800da44:	f7ff fc60 	bl	800d308 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800da48:	9802      	ldr	r0, [sp, #8]
 800da4a:	e6e9      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800da4c:	6810      	ldr	r0, [r2, #0]
 800da4e:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
 800da52:	f43f aee5 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800da56:	a801      	add	r0, sp, #4
 800da58:	f7ff fd02 	bl	800d460 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800da5c:	9803      	ldr	r0, [sp, #12]
 800da5e:	e6df      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800da60:	4b0c      	ldr	r3, [pc, #48]	; (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800da62:	6818      	ldr	r0, [r3, #0]
 800da64:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 800da68:	f43f aeda 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800da6c:	e7b4      	b.n	800d9d8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c8>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800da6e:	4b09      	ldr	r3, [pc, #36]	; (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800da70:	6818      	ldr	r0, [r3, #0]
 800da72:	f010 0004 	ands.w	r0, r0, #4
 800da76:	f43f aed3 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	4807      	ldr	r0, [pc, #28]	; (800da9c <HAL_RCCEx_GetPeriphCLKFreq+0x38c>)
 800da7e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800da82:	40d8      	lsrs	r0, r3
 800da84:	e6cc      	b.n	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800da86:	4b03      	ldr	r3, [pc, #12]	; (800da94 <HAL_RCCEx_GetPeriphCLKFreq+0x384>)
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	f010 6000 	ands.w	r0, r0, #134217728	; 0x8000000
 800da8e:	f43f aec7 	beq.w	800d820 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 800da92:	e7d6      	b.n	800da42 <HAL_RCCEx_GetPeriphCLKFreq+0x332>
 800da94:	58024400 	.word	0x58024400
 800da98:	0801fa74 	.word	0x0801fa74
 800da9c:	03d09000 	.word	0x03d09000

0800daa0 <HAL_RNG_Init>:
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800daa0:	2800      	cmp	r0, #0
 800daa2:	d03c      	beq.n	800db1e <HAL_RNG_Init+0x7e>
{
 800daa4:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800daa6:	7a43      	ldrb	r3, [r0, #9]
 800daa8:	4604      	mov	r4, r0
 800daaa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d031      	beq.n	800db16 <HAL_RNG_Init+0x76>
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800dab2:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800dab4:	2302      	movs	r3, #2
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800dab6:	6861      	ldr	r1, [r4, #4]
  hrng->State = HAL_RNG_STATE_BUSY;
 800dab8:	7263      	strb	r3, [r4, #9]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800daba:	6813      	ldr	r3, [r2, #0]
 800dabc:	f023 0320 	bic.w	r3, r3, #32
 800dac0:	430b      	orrs	r3, r1
 800dac2:	6013      	str	r3, [r2, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800dac4:	6822      	ldr	r2, [r4, #0]
 800dac6:	6813      	ldr	r3, [r2, #0]
 800dac8:	f043 0304 	orr.w	r3, r3, #4
 800dacc:	6013      	str	r3, [r2, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800dace:	6823      	ldr	r3, [r4, #0]
 800dad0:	685b      	ldr	r3, [r3, #4]
 800dad2:	0658      	lsls	r0, r3, #25
 800dad4:	d503      	bpl.n	800dade <HAL_RNG_Init+0x3e>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800dad6:	2304      	movs	r3, #4
    return HAL_ERROR;
 800dad8:	2001      	movs	r0, #1
    hrng->State = HAL_RNG_STATE_ERROR;
 800dada:	7263      	strb	r3, [r4, #9]
  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;

  /* Return function status */
  return HAL_OK;
}
 800dadc:	bd38      	pop	{r3, r4, r5, pc}
  tickstart = HAL_GetTick();
 800dade:	f7fb fa71 	bl	8008fc4 <HAL_GetTick>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800dae2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800dae4:	4605      	mov	r5, r0
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	0759      	lsls	r1, r3, #29
 800daea:	d50e      	bpl.n	800db0a <HAL_RNG_Init+0x6a>
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800daec:	f7fb fa6a 	bl	8008fc4 <HAL_GetTick>
 800daf0:	1b43      	subs	r3, r0, r5
 800daf2:	2b02      	cmp	r3, #2
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800daf4:	6823      	ldr	r3, [r4, #0]
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800daf6:	d9f6      	bls.n	800dae6 <HAL_RNG_Init+0x46>
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800daf8:	685a      	ldr	r2, [r3, #4]
 800dafa:	0752      	lsls	r2, r2, #29
 800dafc:	d5f3      	bpl.n	800dae6 <HAL_RNG_Init+0x46>
        hrng->State = HAL_RNG_STATE_ERROR;
 800dafe:	2204      	movs	r2, #4
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db00:	2302      	movs	r3, #2
        return HAL_ERROR;
 800db02:	2001      	movs	r0, #1
        hrng->State = HAL_RNG_STATE_ERROR;
 800db04:	7262      	strb	r2, [r4, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db06:	60e3      	str	r3, [r4, #12]
}
 800db08:	bd38      	pop	{r3, r4, r5, pc}
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800db0a:	2300      	movs	r3, #0
  hrng->State = HAL_RNG_STATE_READY;
 800db0c:	2201      	movs	r2, #1
  return HAL_OK;
 800db0e:	4618      	mov	r0, r3
  hrng->State = HAL_RNG_STATE_READY;
 800db10:	7262      	strb	r2, [r4, #9]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800db12:	60e3      	str	r3, [r4, #12]
}
 800db14:	bd38      	pop	{r3, r4, r5, pc}
    hrng->Lock = HAL_UNLOCKED;
 800db16:	7202      	strb	r2, [r0, #8]
    HAL_RNG_MspInit(hrng);
 800db18:	f7fa fd5c 	bl	80085d4 <HAL_RNG_MspInit>
 800db1c:	e7c9      	b.n	800dab2 <HAL_RNG_Init+0x12>
    return HAL_ERROR;
 800db1e:	2001      	movs	r0, #1
}
 800db20:	4770      	bx	lr
 800db22:	bf00      	nop

0800db24 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800db24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800db26:	7a03      	ldrb	r3, [r0, #8]
 800db28:	2b01      	cmp	r3, #1
 800db2a:	d027      	beq.n	800db7c <HAL_RNG_GenerateRandomNumber+0x58>

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800db2c:	7a43      	ldrb	r3, [r0, #9]
  __HAL_LOCK(hrng);
 800db2e:	2201      	movs	r2, #1
 800db30:	4604      	mov	r4, r0
  if (hrng->State == HAL_RNG_STATE_READY)
 800db32:	4293      	cmp	r3, r2
 800db34:	b2de      	uxtb	r6, r3
  __HAL_LOCK(hrng);
 800db36:	7202      	strb	r2, [r0, #8]
  if (hrng->State == HAL_RNG_STATE_READY)
 800db38:	d006      	beq.n	800db48 <HAL_RNG_GenerateRandomNumber+0x24>
#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800db3a:	2304      	movs	r3, #4
    status = HAL_ERROR;
 800db3c:	4616      	mov	r6, r2
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800db3e:	60c3      	str	r3, [r0, #12]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800db40:	2300      	movs	r3, #0
 800db42:	7223      	strb	r3, [r4, #8]

  return status;
}
 800db44:	4630      	mov	r0, r6
 800db46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->State = HAL_RNG_STATE_BUSY;
 800db48:	2302      	movs	r3, #2
 800db4a:	460d      	mov	r5, r1
 800db4c:	7243      	strb	r3, [r0, #9]
    tickstart = HAL_GetTick();
 800db4e:	f7fb fa39 	bl	8008fc4 <HAL_GetTick>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800db52:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800db54:	4607      	mov	r7, r0
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800db56:	685a      	ldr	r2, [r3, #4]
 800db58:	07d2      	lsls	r2, r2, #31
 800db5a:	d412      	bmi.n	800db82 <HAL_RNG_GenerateRandomNumber+0x5e>
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800db5c:	f7fb fa32 	bl	8008fc4 <HAL_GetTick>
 800db60:	1bc0      	subs	r0, r0, r7
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800db62:	6823      	ldr	r3, [r4, #0]
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800db64:	2802      	cmp	r0, #2
 800db66:	d9f6      	bls.n	800db56 <HAL_RNG_GenerateRandomNumber+0x32>
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800db68:	685a      	ldr	r2, [r3, #4]
 800db6a:	f012 0201 	ands.w	r2, r2, #1
 800db6e:	d1f2      	bne.n	800db56 <HAL_RNG_GenerateRandomNumber+0x32>
          hrng->State = HAL_RNG_STATE_READY;
 800db70:	2101      	movs	r1, #1
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db72:	2302      	movs	r3, #2
          __HAL_UNLOCK(hrng);
 800db74:	7222      	strb	r2, [r4, #8]
          hrng->State = HAL_RNG_STATE_READY;
 800db76:	7261      	strb	r1, [r4, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800db78:	60e3      	str	r3, [r4, #12]
          return HAL_ERROR;
 800db7a:	e7e3      	b.n	800db44 <HAL_RNG_GenerateRandomNumber+0x20>
  __HAL_LOCK(hrng);
 800db7c:	2602      	movs	r6, #2
}
 800db7e:	4630      	mov	r0, r6
 800db80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->RandomNumber = hrng->Instance->DR;
 800db82:	689b      	ldr	r3, [r3, #8]
    hrng->State = HAL_RNG_STATE_READY;
 800db84:	2201      	movs	r2, #1
  HAL_StatusTypeDef status = HAL_OK;
 800db86:	2600      	movs	r6, #0
    hrng->RandomNumber = hrng->Instance->DR;
 800db88:	6123      	str	r3, [r4, #16]
    *random32bit = hrng->RandomNumber;
 800db8a:	602b      	str	r3, [r5, #0]
    hrng->State = HAL_RNG_STATE_READY;
 800db8c:	7262      	strb	r2, [r4, #9]
 800db8e:	e7d7      	b.n	800db40 <HAL_RNG_GenerateRandomNumber+0x1c>

0800db90 <HAL_SAI_Init.part.0>:
  *         in the SAI_InitTypeDef structure and initialize the associated handle.
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800db90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800db92:	4ba6      	ldr	r3, [pc, #664]	; (800de2c <HAL_SAI_Init.part.0+0x29c>)
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
 800db94:	4604      	mov	r4, r0
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800db96:	6802      	ldr	r2, [r0, #0]
 800db98:	429a      	cmp	r2, r3
 800db9a:	d01c      	beq.n	800dbd6 <HAL_SAI_Init.part.0+0x46>
 800db9c:	3320      	adds	r3, #32
 800db9e:	429a      	cmp	r2, r3
 800dba0:	d019      	beq.n	800dbd6 <HAL_SAI_Init.part.0+0x46>
  {
    SaiBaseAddress = SAI1;
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800dba2:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800dba6:	429a      	cmp	r2, r3
 800dba8:	d04d      	beq.n	800dc46 <HAL_SAI_Init.part.0+0xb6>
 800dbaa:	3320      	adds	r3, #32
 800dbac:	429a      	cmp	r2, r3
 800dbae:	d04a      	beq.n	800dc46 <HAL_SAI_Init.part.0+0xb6>
  {
    SaiBaseAddress = SAI2;
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800dbb0:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	f000 8134 	beq.w	800de22 <HAL_SAI_Init.part.0+0x292>
 800dbba:	3320      	adds	r3, #32
 800dbbc:	429a      	cmp	r2, r3
 800dbbe:	f000 8130 	beq.w	800de22 <HAL_SAI_Init.part.0+0x292>
  {
    SaiBaseAddress = SAI3;
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800dbc2:	4b9b      	ldr	r3, [pc, #620]	; (800de30 <HAL_SAI_Init.part.0+0x2a0>)
 800dbc4:	429a      	cmp	r2, r3
 800dbc6:	f000 812e 	beq.w	800de26 <HAL_SAI_Init.part.0+0x296>
 800dbca:	3320      	adds	r3, #32
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	f000 812a 	beq.w	800de26 <HAL_SAI_Init.part.0+0x296>
    SaiBaseAddress = SAI4;
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800dbd2:	2001      	movs	r0, #1

  /* Release Lock */
  __HAL_UNLOCK(hsai);

  return HAL_OK;
}
 800dbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SaiBaseAddress = SAI1;
 800dbd6:	4e97      	ldr	r6, [pc, #604]	; (800de34 <HAL_SAI_Init.part.0+0x2a4>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800dbd8:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800dbdc:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d037      	beq.n	800dc54 <HAL_SAI_Init.part.0+0xc4>
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800dbe4:	4b94      	ldr	r3, [pc, #592]	; (800de38 <HAL_SAI_Init.part.0+0x2a8>)
 800dbe6:	4995      	ldr	r1, [pc, #596]	; (800de3c <HAL_SAI_Init.part.0+0x2ac>)
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	fba1 1303 	umull	r1, r3, r1, r3
  HAL_StatusTypeDef status = HAL_OK;

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800dbee:	6811      	ldr	r1, [r2, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800dbf0:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800dbf2:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800dbf6:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800dbf8:	6011      	str	r1, [r2, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d031      	beq.n	800dc62 <HAL_SAI_Init.part.0+0xd2>
      status = HAL_TIMEOUT;
      break;
    }
    count--;
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800dbfe:	6822      	ldr	r2, [r4, #0]
    count--;
 800dc00:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800dc02:	6815      	ldr	r5, [r2, #0]
 800dc04:	f415 3580 	ands.w	r5, r5, #65536	; 0x10000
 800dc08:	d1f7      	bne.n	800dbfa <HAL_SAI_Init.part.0+0x6a>
  switch (hsai->Init.SynchroExt)
 800dc0a:	68e3      	ldr	r3, [r4, #12]
  hsai->State = HAL_SAI_STATE_BUSY;
 800dc0c:	2202      	movs	r2, #2
  switch (hsai->Init.SynchroExt)
 800dc0e:	2b01      	cmp	r3, #1
  hsai->State = HAL_SAI_STATE_BUSY;
 800dc10:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  switch (hsai->Init.SynchroExt)
 800dc14:	f000 8156 	beq.w	800dec4 <HAL_SAI_Init.part.0+0x334>
 800dc18:	4293      	cmp	r3, r2
 800dc1a:	bf19      	ittee	ne
 800dc1c:	4610      	movne	r0, r2
 800dc1e:	2103      	movne	r1, #3
 800dc20:	2123      	moveq	r1, #35	; 0x23
 800dc22:	2022      	moveq	r0, #34	; 0x22
 800dc24:	bf15      	itete	ne
 800dc26:	2701      	movne	r7, #1
 800dc28:	2721      	moveq	r7, #33	; 0x21
 800dc2a:	2200      	movne	r2, #0
 800dc2c:	2220      	moveq	r2, #32
  switch (hsai->Init.Synchro)
 800dc2e:	68a3      	ldr	r3, [r4, #8]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	2b04      	cmp	r3, #4
 800dc34:	f200 8181 	bhi.w	800df3a <HAL_SAI_Init.part.0+0x3aa>
 800dc38:	e8df f013 	tbh	[pc, r3, lsl #1]
 800dc3c:	001c00e8 	.word	0x001c00e8
 800dc40:	001b00ef 	.word	0x001b00ef
 800dc44:	00eb      	.short	0x00eb
  if (hsai->State == HAL_SAI_STATE_RESET)
 800dc46:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
    SaiBaseAddress = SAI2;
 800dc4a:	4e7d      	ldr	r6, [pc, #500]	; (800de40 <HAL_SAI_Init.part.0+0x2b0>)
  if (hsai->State == HAL_SAI_STATE_RESET)
 800dc4c:	f003 01ff 	and.w	r1, r3, #255	; 0xff
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1c7      	bne.n	800dbe4 <HAL_SAI_Init.part.0+0x54>
    HAL_SAI_MspInit(hsai);
 800dc54:	4620      	mov	r0, r4
    hsai->Lock = HAL_UNLOCKED;
 800dc56:	f884 1090 	strb.w	r1, [r4, #144]	; 0x90
    HAL_SAI_MspInit(hsai);
 800dc5a:	f7fa fd25 	bl	80086a8 <HAL_SAI_MspInit>
  __HAL_SAI_DISABLE(hsai);
 800dc5e:	6822      	ldr	r2, [r4, #0]
 800dc60:	e7c0      	b.n	800dbe4 <HAL_SAI_Init.part.0+0x54>
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dc62:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    return HAL_ERROR;
 800dc66:	2001      	movs	r0, #1
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800dc68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dc6c:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800dc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800dc72:	4602      	mov	r2, r0
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800dc74:	f44f 6700 	mov.w	r7, #2048	; 0x800
  SaiBaseAddress->GCR = tmpregisterGCR;
 800dc78:	6032      	str	r2, [r6, #0]
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800dc7a:	6a23      	ldr	r3, [r4, #32]
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d04a      	beq.n	800dd16 <HAL_SAI_Init.part.0+0x186>
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800dc80:	6823      	ldr	r3, [r4, #0]
 800dc82:	4a6a      	ldr	r2, [pc, #424]	; (800de2c <HAL_SAI_Init.part.0+0x29c>)
 800dc84:	4293      	cmp	r3, r2
 800dc86:	f000 8131 	beq.w	800deec <HAL_SAI_Init.part.0+0x35c>
 800dc8a:	486e      	ldr	r0, [pc, #440]	; (800de44 <HAL_SAI_Init.part.0+0x2b4>)
 800dc8c:	1a18      	subs	r0, r3, r0
 800dc8e:	fab0 f080 	clz	r0, r0
 800dc92:	0940      	lsrs	r0, r0, #5
 800dc94:	2800      	cmp	r0, #0
 800dc96:	f040 8129 	bne.w	800deec <HAL_SAI_Init.part.0+0x35c>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800dc9a:	4a6b      	ldr	r2, [pc, #428]	; (800de48 <HAL_SAI_Init.part.0+0x2b8>)
 800dc9c:	4293      	cmp	r3, r2
 800dc9e:	f000 8133 	beq.w	800df08 <HAL_SAI_Init.part.0+0x378>
 800dca2:	3220      	adds	r2, #32
 800dca4:	4293      	cmp	r3, r2
 800dca6:	f000 812f 	beq.w	800df08 <HAL_SAI_Init.part.0+0x378>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800dcaa:	4a68      	ldr	r2, [pc, #416]	; (800de4c <HAL_SAI_Init.part.0+0x2bc>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	f000 8124 	beq.w	800defa <HAL_SAI_Init.part.0+0x36a>
 800dcb2:	3220      	adds	r2, #32
 800dcb4:	4293      	cmp	r3, r2
 800dcb6:	f000 8120 	beq.w	800defa <HAL_SAI_Init.part.0+0x36a>
    if (hsai->Instance == SAI4_Block_A)
 800dcba:	4a5d      	ldr	r2, [pc, #372]	; (800de30 <HAL_SAI_Init.part.0+0x2a0>)
 800dcbc:	4293      	cmp	r3, r2
 800dcbe:	f000 8133 	beq.w	800df28 <HAL_SAI_Init.part.0+0x398>
    if (hsai->Instance == SAI4_Block_B)
 800dcc2:	4a63      	ldr	r2, [pc, #396]	; (800de50 <HAL_SAI_Init.part.0+0x2c0>)
 800dcc4:	4293      	cmp	r3, r2
 800dcc6:	f000 8129 	beq.w	800df1c <HAL_SAI_Init.part.0+0x38c>
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800dcca:	69a3      	ldr	r3, [r4, #24]
 800dccc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800dcd0:	f000 80fd 	beq.w	800dece <HAL_SAI_Init.part.0+0x33e>
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dcd4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dcd6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dcda:	6c61      	ldr	r1, [r4, #68]	; 0x44
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dcdc:	f1b2 6f80 	cmp.w	r2, #67108864	; 0x4000000
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dce0:	ea4f 0340 	mov.w	r3, r0, lsl #1
 800dce4:	6a20      	ldr	r0, [r4, #32]
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800dce6:	bf0c      	ite	eq
 800dce8:	2202      	moveq	r2, #2
 800dcea:	2201      	movne	r2, #1
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800dcec:	fb00 f202 	mul.w	r2, r0, r2
 800dcf0:	0212      	lsls	r2, r2, #8
 800dcf2:	fbb3 f3f2 	udiv	r3, r3, r2
    hsai->Init.Mckdiv = tmpval / 10U;
 800dcf6:	4a57      	ldr	r2, [pc, #348]	; (800de54 <HAL_SAI_Init.part.0+0x2c4>)
 800dcf8:	fba2 0203 	umull	r0, r2, r2, r3
 800dcfc:	08d2      	lsrs	r2, r2, #3
    if ((tmpval % 10U) > 8U)
 800dcfe:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 800dd02:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 800dd06:	2b09      	cmp	r3, #9
      hsai->Init.Mckdiv += 1U;
 800dd08:	bf08      	it	eq
 800dd0a:	3201      	addeq	r2, #1
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dd0c:	2904      	cmp	r1, #4
      hsai->Init.Mckdiv += 1U;
 800dd0e:	6262      	str	r2, [r4, #36]	; 0x24
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dd10:	d101      	bne.n	800dd16 <HAL_SAI_Init.part.0+0x186>
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800dd12:	0852      	lsrs	r2, r2, #1
 800dd14:	6262      	str	r2, [r4, #36]	; 0x24
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dd16:	6863      	ldr	r3, [r4, #4]
 800dd18:	f033 0302 	bics.w	r3, r3, #2
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dd1c:	6d23      	ldr	r3, [r4, #80]	; 0x50
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dd1e:	f040 80cc 	bne.w	800deba <HAL_SAI_Init.part.0+0x32a>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800dd22:	2b01      	cmp	r3, #1
 800dd24:	bf14      	ite	ne
 800dd26:	f44f 7500 	movne.w	r5, #512	; 0x200
 800dd2a:	2500      	moveq	r5, #0
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800dd2c:	f7fb f962 	bl	8008ff4 <HAL_GetREVID>
 800dd30:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dd34:	6822      	ldr	r2, [r4, #0]
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800dd36:	f0c0 80ac 	bcc.w	800de92 <HAL_SAI_Init.part.0+0x302>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800dd3a:	6811      	ldr	r1, [r2, #0]
 800dd3c:	4b46      	ldr	r3, [pc, #280]	; (800de58 <HAL_SAI_Init.part.0+0x2c8>)
 800dd3e:	400b      	ands	r3, r1
 800dd40:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd42:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800dd44:	e9d4 1300 	ldrd	r1, r3, [r4]
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dd4c:	431a      	orrs	r2, r3
 800dd4e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dd50:	431a      	orrs	r2, r3
 800dd52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800dd54:	431a      	orrs	r2, r3
 800dd56:	6963      	ldr	r3, [r4, #20]
 800dd58:	431a      	orrs	r2, r3
 800dd5a:	69a3      	ldr	r3, [r4, #24]
 800dd5c:	431a      	orrs	r2, r3
 800dd5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800dd60:	431a      	orrs	r2, r3
 800dd62:	6923      	ldr	r3, [r4, #16]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd64:	431a      	orrs	r2, r3
 800dd66:	680b      	ldr	r3, [r1, #0]
 800dd68:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800dd6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd6c:	ea42 5203 	orr.w	r2, r2, r3, lsl #20
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dd70:	4b3a      	ldr	r3, [pc, #232]	; (800de5c <HAL_SAI_Init.part.0+0x2cc>)
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800dd72:	433a      	orrs	r2, r7
 800dd74:	432a      	orrs	r2, r5
 800dd76:	600a      	str	r2, [r1, #0]
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800dd78:	6822      	ldr	r2, [r4, #0]
 800dd7a:	6851      	ldr	r1, [r2, #4]
 800dd7c:	400b      	ands	r3, r1
 800dd7e:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800dd80:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800dd82:	69e3      	ldr	r3, [r4, #28]
 800dd84:	6822      	ldr	r2, [r4, #0]
 800dd86:	430b      	orrs	r3, r1
 800dd88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dd8a:	430b      	orrs	r3, r1
 800dd8c:	6851      	ldr	r1, [r2, #4]
 800dd8e:	430b      	orrs	r3, r1
 800dd90:	6053      	str	r3, [r2, #4]
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800dd92:	6822      	ldr	r2, [r4, #0]
 800dd94:	4b32      	ldr	r3, [pc, #200]	; (800de60 <HAL_SAI_Init.part.0+0x2d0>)
 800dd96:	6891      	ldr	r1, [r2, #8]
 800dd98:	400b      	ands	r3, r1
 800dd9a:	6093      	str	r3, [r2, #8]
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800dd9c:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800dd9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dda0:	6821      	ldr	r1, [r4, #0]
 800dda2:	4313      	orrs	r3, r2
 800dda4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800dda6:	6888      	ldr	r0, [r1, #8]
 800dda8:	4313      	orrs	r3, r2
 800ddaa:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800ddac:	4303      	orrs	r3, r0
 800ddae:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ddb0:	f24f 0020 	movw	r0, #61472	; 0xf020
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ddb4:	4313      	orrs	r3, r2
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800ddb6:	6da2      	ldr	r2, [r4, #88]	; 0x58
 800ddb8:	3a01      	subs	r2, #1
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800ddba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800ddbe:	608b      	str	r3, [r1, #8]
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800ddc0:	6822      	ldr	r2, [r4, #0]
 800ddc2:	68d3      	ldr	r3, [r2, #12]
 800ddc4:	4003      	ands	r3, r0
 800ddc6:	60d3      	str	r3, [r2, #12]
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ddc8:	6821      	ldr	r1, [r4, #0]
 800ddca:	e9d4 301a 	ldrd	r3, r0, [r4, #104]	; 0x68
 800ddce:	68ca      	ldr	r2, [r1, #12]
 800ddd0:	4303      	orrs	r3, r0
 800ddd2:	4313      	orrs	r3, r2
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ddd4:	6f62      	ldr	r2, [r4, #116]	; 0x74
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ddd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800ddda:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800dddc:	3a01      	subs	r2, #1
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800ddde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800dde2:	4a12      	ldr	r2, [pc, #72]	; (800de2c <HAL_SAI_Init.part.0+0x29c>)
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800dde4:	60cb      	str	r3, [r1, #12]
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d03f      	beq.n	800de6c <HAL_SAI_Init.part.0+0x2dc>
 800ddec:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800ddf0:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800ddf4:	4293      	cmp	r3, r2
 800ddf6:	d039      	beq.n	800de6c <HAL_SAI_Init.part.0+0x2dc>
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ddf8:	2300      	movs	r3, #0
  hsai->State = HAL_SAI_STATE_READY;
 800ddfa:	2201      	movs	r2, #1
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ddfc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
  return HAL_OK;
 800de00:	4618      	mov	r0, r3
  hsai->State = HAL_SAI_STATE_READY;
 800de02:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
  __HAL_UNLOCK(hsai);
 800de06:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800de0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch (hsai->Init.Synchro)
 800de0c:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800de10:	e732      	b.n	800dc78 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800de12:	460a      	mov	r2, r1
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800de14:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800de18:	e72e      	b.n	800dc78 <HAL_SAI_Init.part.0+0xe8>
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800de1a:	463a      	mov	r2, r7
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800de1c:	f44f 6700 	mov.w	r7, #2048	; 0x800
      break;
 800de20:	e72a      	b.n	800dc78 <HAL_SAI_Init.part.0+0xe8>
    SaiBaseAddress = SAI3;
 800de22:	4e10      	ldr	r6, [pc, #64]	; (800de64 <HAL_SAI_Init.part.0+0x2d4>)
 800de24:	e6d8      	b.n	800dbd8 <HAL_SAI_Init.part.0+0x48>
    SaiBaseAddress = SAI4;
 800de26:	4e10      	ldr	r6, [pc, #64]	; (800de68 <HAL_SAI_Init.part.0+0x2d8>)
 800de28:	e6d6      	b.n	800dbd8 <HAL_SAI_Init.part.0+0x48>
 800de2a:	bf00      	nop
 800de2c:	40015804 	.word	0x40015804
 800de30:	58005404 	.word	0x58005404
 800de34:	40015800 	.word	0x40015800
 800de38:	20000728 	.word	0x20000728
 800de3c:	95cbec1b 	.word	0x95cbec1b
 800de40:	40015c00 	.word	0x40015c00
 800de44:	40015824 	.word	0x40015824
 800de48:	40015c04 	.word	0x40015c04
 800de4c:	40016004 	.word	0x40016004
 800de50:	58005424 	.word	0x58005424
 800de54:	cccccccd 	.word	0xcccccccd
 800de58:	f005c010 	.word	0xf005c010
 800de5c:	ffff1ff0 	.word	0xffff1ff0
 800de60:	fff88000 	.word	0xfff88000
 800de64:	40016000 	.word	0x40016000
 800de68:	58005400 	.word	0x58005400
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800de6c:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800de6e:	f023 0301 	bic.w	r3, r3, #1
 800de72:	6473      	str	r3, [r6, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800de74:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d1bd      	bne.n	800ddf8 <HAL_SAI_Init.part.0+0x268>
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800de7c:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800de80:	3a01      	subs	r2, #1
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800de82:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800de86:	6473      	str	r3, [r6, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800de88:	6c73      	ldr	r3, [r6, #68]	; 0x44
 800de8a:	f043 0301 	orr.w	r3, r3, #1
 800de8e:	6473      	str	r3, [r6, #68]	; 0x44
 800de90:	e7b2      	b.n	800ddf8 <HAL_SAI_Init.part.0+0x268>
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800de92:	6811      	ldr	r1, [r2, #0]
 800de94:	4b2a      	ldr	r3, [pc, #168]	; (800df40 <HAL_SAI_Init.part.0+0x3b0>)
 800de96:	400b      	ands	r3, r1
 800de98:	6013      	str	r3, [r2, #0]
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800de9a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800de9c:	e9d4 1300 	ldrd	r1, r3, [r4]
 800dea0:	431a      	orrs	r2, r3
 800dea2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800dea4:	431a      	orrs	r2, r3
 800dea6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800dea8:	431a      	orrs	r2, r3
 800deaa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800deac:	431a      	orrs	r2, r3
 800deae:	6963      	ldr	r3, [r4, #20]
 800deb0:	431a      	orrs	r2, r3
 800deb2:	69a3      	ldr	r3, [r4, #24]
 800deb4:	431a      	orrs	r2, r3
 800deb6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800deb8:	e754      	b.n	800dd64 <HAL_SAI_Init.part.0+0x1d4>
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800deba:	2b01      	cmp	r3, #1
 800debc:	bf08      	it	eq
 800debe:	f44f 7500 	moveq.w	r5, #512	; 0x200
 800dec2:	e733      	b.n	800dd2c <HAL_SAI_Init.part.0+0x19c>
  switch (hsai->Init.SynchroExt)
 800dec4:	2113      	movs	r1, #19
 800dec6:	2012      	movs	r0, #18
 800dec8:	2711      	movs	r7, #17
 800deca:	2210      	movs	r2, #16
 800decc:	e6af      	b.n	800dc2e <HAL_SAI_Init.part.0+0x9e>
      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800dece:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ded0:	2904      	cmp	r1, #4
 800ded2:	d030      	beq.n	800df36 <HAL_SAI_Init.part.0+0x3a6>
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800ded4:	2908      	cmp	r1, #8
 800ded6:	d01e      	beq.n	800df16 <HAL_SAI_Init.part.0+0x386>
        tmpframelength = hsai->FrameInit.FrameLength;
 800ded8:	6d62      	ldr	r2, [r4, #84]	; 0x54
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800deda:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800dede:	0043      	lsls	r3, r0, #1
 800dee0:	6a20      	ldr	r0, [r4, #32]
 800dee2:	fb00 f202 	mul.w	r2, r0, r2
 800dee6:	fbb3 f3f2 	udiv	r3, r3, r2
 800deea:	e704      	b.n	800dcf6 <HAL_SAI_Init.part.0+0x166>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800deec:	f44f 7080 	mov.w	r0, #256	; 0x100
 800def0:	2100      	movs	r1, #0
 800def2:	f7ff fc0d 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800def6:	6823      	ldr	r3, [r4, #0]
 800def8:	e6cf      	b.n	800dc9a <HAL_SAI_Init.part.0+0x10a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800defa:	f44f 7000 	mov.w	r0, #512	; 0x200
 800defe:	2100      	movs	r1, #0
 800df00:	f7ff fc06 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_A)
 800df04:	6823      	ldr	r3, [r4, #0]
 800df06:	e6d8      	b.n	800dcba <HAL_SAI_Init.part.0+0x12a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800df08:	f44f 7000 	mov.w	r0, #512	; 0x200
 800df0c:	2100      	movs	r1, #0
 800df0e:	f7ff fbff 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800df12:	6823      	ldr	r3, [r4, #0]
 800df14:	e6c9      	b.n	800dcaa <HAL_SAI_Init.part.0+0x11a>
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800df16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df1a:	e7de      	b.n	800deda <HAL_SAI_Init.part.0+0x34a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800df1c:	2100      	movs	r1, #0
 800df1e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800df22:	f7ff fbf5 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
 800df26:	e6d0      	b.n	800dcca <HAL_SAI_Init.part.0+0x13a>
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800df28:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800df2c:	2100      	movs	r1, #0
 800df2e:	f7ff fbef 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
    if (hsai->Instance == SAI4_Block_B)
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	e6c5      	b.n	800dcc2 <HAL_SAI_Init.part.0+0x132>
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800df36:	2240      	movs	r2, #64	; 0x40
 800df38:	e7cf      	b.n	800deda <HAL_SAI_Init.part.0+0x34a>
      syncen_bits = 0;
 800df3a:	2700      	movs	r7, #0
 800df3c:	e69c      	b.n	800dc78 <HAL_SAI_Init.part.0+0xe8>
 800df3e:	bf00      	nop
 800df40:	f805c010 	.word	0xf805c010

0800df44 <HAL_SAI_InitProtocol>:
  switch (protocol)
 800df44:	2902      	cmp	r1, #2
{
 800df46:	b538      	push	{r3, r4, r5, lr}
 800df48:	4604      	mov	r4, r0
  switch (protocol)
 800df4a:	d935      	bls.n	800dfb8 <HAL_SAI_InitProtocol+0x74>
 800df4c:	1ec8      	subs	r0, r1, #3
 800df4e:	2801      	cmp	r0, #1
 800df50:	d830      	bhi.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800df52:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800df54:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800df56:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800df58:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 800df5a:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.FirstBitOffset  = 0;
 800df5c:	66a0      	str	r0, [r4, #104]	; 0x68
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800df5e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800df62:	6760      	str	r0, [r4, #116]	; 0x74
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800df64:	6860      	ldr	r0, [r4, #4]
 800df66:	f030 0002 	bics.w	r0, r0, #2
 800df6a:	bf0c      	ite	eq
 800df6c:	2501      	moveq	r5, #1
 800df6e:	2500      	movne	r5, #0
      hsai->FrameInit.ActiveFrameLength = 13;
 800df70:	2904      	cmp	r1, #4
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800df72:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800df76:	6525      	str	r5, [r4, #80]	; 0x50
      hsai->FrameInit.ActiveFrameLength = 13;
 800df78:	bf0c      	ite	eq
 800df7a:	2001      	moveq	r0, #1
 800df7c:	200d      	movne	r0, #13
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 800df7e:	6621      	str	r1, [r4, #96]	; 0x60
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 800df80:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800df84:	65a0      	str	r0, [r4, #88]	; 0x58
 800df86:	6661      	str	r1, [r4, #100]	; 0x64
  switch (datasize)
 800df88:	2a03      	cmp	r2, #3
 800df8a:	d813      	bhi.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
 800df8c:	e8df f002 	tbb	[pc, r2]
 800df90:	5c554f3e 	.word	0x5c554f3e
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800df94:	6823      	ldr	r3, [r4, #0]
 800df96:	4a47      	ldr	r2, [pc, #284]	; (800e0b4 <HAL_SAI_InitProtocol+0x170>)
 800df98:	4293      	cmp	r3, r2
 800df9a:	d005      	beq.n	800dfa8 <HAL_SAI_InitProtocol+0x64>
 800df9c:	f102 52c0 	add.w	r2, r2, #402653184	; 0x18000000
 800dfa0:	f5a2 3282 	sub.w	r2, r2, #66560	; 0x10400
 800dfa4:	4293      	cmp	r3, r2
 800dfa6:	d105      	bne.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
 800dfa8:	6863      	ldr	r3, [r4, #4]
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d102      	bne.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800dfae:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d037      	beq.n	800e024 <HAL_SAI_InitProtocol+0xe0>
}
 800dfb4:	2001      	movs	r0, #1
 800dfb6:	bd38      	pop	{r3, r4, r5, pc}
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dfb8:	2000      	movs	r0, #0
  hsai->SlotInit.SlotNumber      = nbslot;
 800dfba:	6723      	str	r3, [r4, #112]	; 0x70
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800dfbc:	6460      	str	r0, [r4, #68]	; 0x44
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800dfbe:	64e0      	str	r0, [r4, #76]	; 0x4c
  hsai->SlotInit.FirstBitOffset  = 0;
 800dfc0:	66a0      	str	r0, [r4, #104]	; 0x68
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800dfc2:	6860      	ldr	r0, [r4, #4]
 800dfc4:	f030 0002 	bics.w	r0, r0, #2
 800dfc8:	bf14      	ite	ne
 800dfca:	2001      	movne	r0, #1
 800dfcc:	2000      	moveq	r0, #0
 800dfce:	6520      	str	r0, [r4, #80]	; 0x50
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800dfd0:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800dfd4:	65e0      	str	r0, [r4, #92]	; 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800dfd6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800dfda:	6760      	str	r0, [r4, #116]	; 0x74
  if ((nbslot & 0x1U) != 0U)
 800dfdc:	f013 0001 	ands.w	r0, r3, #1
 800dfe0:	d1e8      	bne.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
  if (protocol == SAI_I2S_STANDARD)
 800dfe2:	b949      	cbnz	r1, 800dff8 <HAL_SAI_InitProtocol+0xb4>
 800dfe4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800dfe8:	e9c4 1018 	strd	r1, r0, [r4, #96]	; 0x60
  switch (datasize)
 800dfec:	2a03      	cmp	r2, #3
 800dfee:	d8e1      	bhi.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
 800dff0:	e8df f002 	tbb	[pc, r2]
 800dff4:	2c364655 	.word	0x2c364655
      hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 800dff8:	6660      	str	r0, [r4, #100]	; 0x64
 800dffa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800dffe:	6620      	str	r0, [r4, #96]	; 0x60
  switch (datasize)
 800e000:	2a03      	cmp	r2, #3
 800e002:	d8d7      	bhi.n	800dfb4 <HAL_SAI_InitProtocol+0x70>
 800e004:	e8df f002 	tbb	[pc, r2]
 800e008:	222c3c4b 	.word	0x222c3c4b
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e00c:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e00e:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e010:	2240      	movs	r2, #64	; 0x40
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e012:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800e014:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e016:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800e018:	f7fa ffec 	bl	8008ff4 <HAL_GetREVID>
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800e01c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 800e020:	2b01      	cmp	r3, #1
 800e022:	d0b7      	beq.n	800df94 <HAL_SAI_InitProtocol+0x50>
 800e024:	4620      	mov	r0, r4
}
 800e026:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e02a:	f7ff bdb1 	b.w	800db90 <HAL_SAI_Init.part.0>
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e02e:	2280      	movs	r2, #128	; 0x80
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e030:	015b      	lsls	r3, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e032:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e034:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e036:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800e038:	e7ee      	b.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e03a:	21c0      	movs	r1, #192	; 0xc0
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e03c:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e03e:	2280      	movs	r2, #128	; 0x80
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e040:	64a1      	str	r1, [r4, #72]	; 0x48
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800e042:	6563      	str	r3, [r4, #84]	; 0x54
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e044:	66e2      	str	r2, [r4, #108]	; 0x6c
  if (status == HAL_OK)
 800e046:	e7e7      	b.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e048:	21e0      	movs	r1, #224	; 0xe0
 800e04a:	e7f7      	b.n	800e03c <HAL_SAI_InitProtocol+0xf8>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e04c:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e04e:	20e0      	movs	r0, #224	; 0xe0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e050:	2180      	movs	r1, #128	; 0x80
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e052:	019a      	lsls	r2, r3, #6
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800e054:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e056:	015b      	lsls	r3, r3, #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e058:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e05a:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e05e:	e7db      	b.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e060:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e062:	22c0      	movs	r2, #192	; 0xc0
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e064:	2580      	movs	r5, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e066:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e068:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800e06c:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e06e:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e072:	66e5      	str	r5, [r4, #108]	; 0x6c
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e074:	6560      	str	r0, [r4, #84]	; 0x54
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e076:	65a3      	str	r3, [r4, #88]	; 0x58
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e078:	d1ce      	bne.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 8;
 800e07a:	2308      	movs	r3, #8
 800e07c:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800e07e:	e7cb      	b.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e080:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e082:	2280      	movs	r2, #128	; 0x80
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e084:	2902      	cmp	r1, #2
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800e086:	ea4f 1083 	mov.w	r0, r3, lsl #6
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e08a:	64a2      	str	r2, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e08c:	ea4f 1343 	mov.w	r3, r3, lsl #5
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800e090:	66e2      	str	r2, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800e092:	e9c4 0315 	strd	r0, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e096:	d1bf      	bne.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->SlotInit.FirstBitOffset = 16;
 800e098:	2310      	movs	r3, #16
 800e09a:	66a3      	str	r3, [r4, #104]	; 0x68
  if (status == HAL_OK)
 800e09c:	e7bc      	b.n	800e018 <HAL_SAI_InitProtocol+0xd4>
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e09e:	085b      	lsrs	r3, r3, #1
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e0a0:	2080      	movs	r0, #128	; 0x80
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e0a2:	2140      	movs	r1, #64	; 0x40
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800e0a4:	015a      	lsls	r2, r3, #5
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800e0a6:	64a0      	str	r0, [r4, #72]	; 0x48
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e0a8:	011b      	lsls	r3, r3, #4
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800e0aa:	66e1      	str	r1, [r4, #108]	; 0x6c
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 800e0ac:	e9c4 2315 	strd	r2, r3, [r4, #84]	; 0x54
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800e0b0:	e7b2      	b.n	800e018 <HAL_SAI_InitProtocol+0xd4>
 800e0b2:	bf00      	nop
 800e0b4:	40015804 	.word	0x40015804

0800e0b8 <HAL_SAI_Transmit_DMA>:
{
 800e0b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0bc:	460f      	mov	r7, r1
 800e0be:	4604      	mov	r4, r0
 800e0c0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800e0c2:	f7fa ff7f 	bl	8008fc4 <HAL_GetTick>
  if ((pData == NULL) || (Size == 0U))
 800e0c6:	2f00      	cmp	r7, #0
 800e0c8:	d06b      	beq.n	800e1a2 <HAL_SAI_Transmit_DMA+0xea>
 800e0ca:	fab5 f885 	clz	r8, r5
 800e0ce:	ea4f 1858 	mov.w	r8, r8, lsr #5
 800e0d2:	2d00      	cmp	r5, #0
 800e0d4:	d065      	beq.n	800e1a2 <HAL_SAI_Transmit_DMA+0xea>
  if (hsai->State == HAL_SAI_STATE_READY)
 800e0d6:	f894 3091 	ldrb.w	r3, [r4, #145]	; 0x91
 800e0da:	2b01      	cmp	r3, #1
 800e0dc:	fa5f f983 	uxtb.w	r9, r3
 800e0e0:	d15a      	bne.n	800e198 <HAL_SAI_Transmit_DMA+0xe0>
    __HAL_LOCK(hsai);
 800e0e2:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
 800e0e6:	2b01      	cmp	r3, #1
 800e0e8:	d056      	beq.n	800e198 <HAL_SAI_Transmit_DMA+0xe0>
    hsai->XferSize = Size;
 800e0ea:	4643      	mov	r3, r8
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800e0ec:	f8c4 8094 	str.w	r8, [r4, #148]	; 0x94
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e0f0:	4a3c      	ldr	r2, [pc, #240]	; (800e1e4 <HAL_SAI_Transmit_DMA+0x12c>)
 800e0f2:	4606      	mov	r6, r0
    hsai->XferSize = Size;
 800e0f4:	f365 030f 	bfi	r3, r5, #0, #16
    hsai->pBuffPtr = pData;
 800e0f8:	67a7      	str	r7, [r4, #120]	; 0x78
    __HAL_LOCK(hsai);
 800e0fa:	f884 9090 	strb.w	r9, [r4, #144]	; 0x90
    hsai->XferSize = Size;
 800e0fe:	f365 431f 	bfi	r3, r5, #16, #16
 800e102:	67e3      	str	r3, [r4, #124]	; 0x7c
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800e104:	2312      	movs	r3, #18
 800e106:	f884 3091 	strb.w	r3, [r4, #145]	; 0x91
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800e10a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e10e:	641a      	str	r2, [r3, #64]	; 0x40
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800e110:	4a35      	ldr	r2, [pc, #212]	; (800e1e8 <HAL_SAI_Transmit_DMA+0x130>)
 800e112:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e116:	63da      	str	r2, [r3, #60]	; 0x3c
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800e118:	4a34      	ldr	r2, [pc, #208]	; (800e1ec <HAL_SAI_Transmit_DMA+0x134>)
 800e11a:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e11e:	64da      	str	r2, [r3, #76]	; 0x4c
    hsai->hdmatx->XferAbortCallback = NULL;
 800e120:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800e124:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800e128:	6822      	ldr	r2, [r4, #0]
 800e12a:	f8b4 307c 	ldrh.w	r3, [r4, #124]	; 0x7c
 800e12e:	321c      	adds	r2, #28
 800e130:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800e132:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800e136:	f7fb fb6d 	bl	8009814 <HAL_DMA_Start_IT>
 800e13a:	2800      	cmp	r0, #0
 800e13c:	d13f      	bne.n	800e1be <HAL_SAI_Transmit_DMA+0x106>
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e13e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800e140:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e142:	6863      	ldr	r3, [r4, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e144:	d032      	beq.n	800e1ac <HAL_SAI_Transmit_DMA+0xf4>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e146:	2205      	movs	r2, #5
 800e148:	2161      	movs	r1, #97	; 0x61
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e14a:	3b02      	subs	r3, #2
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	bf98      	it	ls
 800e150:	460a      	movls	r2, r1
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e152:	6821      	ldr	r1, [r4, #0]
 800e154:	690b      	ldr	r3, [r1, #16]
 800e156:	4313      	orrs	r3, r2
 800e158:	610b      	str	r3, [r1, #16]
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 800e15a:	6822      	ldr	r2, [r4, #0]
 800e15c:	6813      	ldr	r3, [r2, #0]
 800e15e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e162:	6013      	str	r3, [r2, #0]
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e164:	e005      	b.n	800e172 <HAL_SAI_Transmit_DMA+0xba>
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 800e166:	f7fa ff2d 	bl	8008fc4 <HAL_GetTick>
 800e16a:	1b83      	subs	r3, r0, r6
 800e16c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800e170:	d82a      	bhi.n	800e1c8 <HAL_SAI_Transmit_DMA+0x110>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 800e172:	6822      	ldr	r2, [r4, #0]
 800e174:	6955      	ldr	r5, [r2, #20]
 800e176:	f415 25e0 	ands.w	r5, r5, #458752	; 0x70000
 800e17a:	d0f4      	beq.n	800e166 <HAL_SAI_Transmit_DMA+0xae>
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 800e17c:	6813      	ldr	r3, [r2, #0]
 800e17e:	03db      	lsls	r3, r3, #15
 800e180:	d403      	bmi.n	800e18a <HAL_SAI_Transmit_DMA+0xd2>
      __HAL_SAI_ENABLE(hsai);
 800e182:	6813      	ldr	r3, [r2, #0]
 800e184:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e188:	6013      	str	r3, [r2, #0]
    __HAL_UNLOCK(hsai);
 800e18a:	2300      	movs	r3, #0
    return HAL_OK;
 800e18c:	4699      	mov	r9, r3
    __HAL_UNLOCK(hsai);
 800e18e:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
}
 800e192:	4648      	mov	r0, r9
 800e194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 800e198:	f04f 0902 	mov.w	r9, #2
}
 800e19c:	4648      	mov	r0, r9
 800e19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return  HAL_ERROR;
 800e1a2:	f04f 0901 	mov.w	r9, #1
}
 800e1a6:	4648      	mov	r0, r9
 800e1a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e1ac:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e1b0:	2a01      	cmp	r2, #1
 800e1b2:	bf0b      	itete	eq
 800e1b4:	2215      	moveq	r2, #21
 800e1b6:	2205      	movne	r2, #5
 800e1b8:	2171      	moveq	r1, #113	; 0x71
 800e1ba:	2161      	movne	r1, #97	; 0x61
 800e1bc:	e7c5      	b.n	800e14a <HAL_SAI_Transmit_DMA+0x92>
}
 800e1be:	4648      	mov	r0, r9
      __HAL_UNLOCK(hsai);
 800e1c0:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
}
 800e1c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e1c8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
        return HAL_TIMEOUT;
 800e1cc:	f04f 0903 	mov.w	r9, #3
        __HAL_UNLOCK(hsai);
 800e1d0:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e1d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
}
 800e1d8:	4648      	mov	r0, r9
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e1da:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
 800e1de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1e2:	bf00      	nop
 800e1e4:	0800e255 	.word	0x0800e255
 800e1e8:	0800e1f1 	.word	0x0800e1f1
 800e1ec:	0800e261 	.word	0x0800e261

0800e1f0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 800e1f0:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e1f2:	69c3      	ldr	r3, [r0, #28]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e1f4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800e1f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e1fa:	d01b      	beq.n	800e234 <SAI_DMATxCplt+0x44>
  {
    hsai->XferCount = 0;

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e1fc:	6802      	ldr	r2, [r0, #0]
    hsai->XferCount = 0;
 800e1fe:	2300      	movs	r3, #0
 800e200:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800e204:	6813      	ldr	r3, [r2, #0]
 800e206:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800e20a:	6013      	str	r3, [r2, #0]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e20c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800e20e:	2b08      	cmp	r3, #8
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e210:	6843      	ldr	r3, [r0, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e212:	d012      	beq.n	800e23a <SAI_DMATxCplt+0x4a>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e214:	f06f 0c61 	mvn.w	ip, #97	; 0x61
 800e218:	f06f 0205 	mvn.w	r2, #5

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e21c:	6801      	ldr	r1, [r0, #0]
  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800e21e:	3b02      	subs	r3, #2
 800e220:	2b01      	cmp	r3, #1
 800e222:	bf98      	it	ls
 800e224:	4662      	movls	r2, ip
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e226:	690b      	ldr	r3, [r1, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800e228:	f04f 0c01 	mov.w	ip, #1
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800e22c:	4013      	ands	r3, r2
 800e22e:	610b      	str	r3, [r1, #16]
    hsai->State = HAL_SAI_STATE_READY;
 800e230:	f880 c091 	strb.w	ip, [r0, #145]	; 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800e234:	f7f7 f804 	bl	8005240 <HAL_SAI_TxCpltCallback>
#endif
}
 800e238:	bd08      	pop	{r3, pc}
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 800e23a:	f023 0202 	bic.w	r2, r3, #2
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800e23e:	2a01      	cmp	r2, #1
 800e240:	bf0b      	itete	eq
 800e242:	f06f 0c71 	mvneq.w	ip, #113	; 0x71
 800e246:	f06f 0c61 	mvnne.w	ip, #97	; 0x61
 800e24a:	f06f 0215 	mvneq.w	r2, #21
 800e24e:	f06f 0205 	mvnne.w	r2, #5
 800e252:	e7e3      	b.n	800e21c <SAI_DMATxCplt+0x2c>

0800e254 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e254:	b508      	push	{r3, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800e256:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800e258:	f7f6 fffc 	bl	8005254 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 800e25c:	bd08      	pop	{r3, pc}
 800e25e:	bf00      	nop

0800e260 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800e260:	b510      	push	{r4, lr}
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e262:	6b84      	ldr	r4, [r0, #56]	; 0x38

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800e264:	f7fc fb3a 	bl	800a8dc <HAL_DMA_GetError>
 800e268:	2802      	cmp	r0, #2
 800e26a:	d025      	beq.n	800e2b8 <SAI_DMAError+0x58>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e26c:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e270:	6821      	ldr	r1, [r4, #0]
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e272:	f042 0280 	orr.w	r2, r2, #128	; 0x80
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e276:	4b14      	ldr	r3, [pc, #80]	; (800e2c8 <SAI_DMAError+0x68>)
 800e278:	4814      	ldr	r0, [pc, #80]	; (800e2cc <SAI_DMAError+0x6c>)
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800e27a:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800e27e:	680a      	ldr	r2, [r1, #0]
 800e280:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800e284:	600a      	str	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e286:	681b      	ldr	r3, [r3, #0]
  __HAL_SAI_DISABLE(hsai);
 800e288:	6821      	ldr	r1, [r4, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e28a:	fba0 2303 	umull	r2, r3, r0, r3
  __HAL_SAI_DISABLE(hsai);
 800e28e:	680a      	ldr	r2, [r1, #0]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e290:	0b1b      	lsrs	r3, r3, #12
  __HAL_SAI_DISABLE(hsai);
 800e292:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800e296:	009b      	lsls	r3, r3, #2
  __HAL_SAI_DISABLE(hsai);
 800e298:	600a      	str	r2, [r1, #0]
    if (count == 0U)
 800e29a:	b173      	cbz	r3, 800e2ba <SAI_DMAError+0x5a>
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e29c:	6822      	ldr	r2, [r4, #0]
    count--;
 800e29e:	3b01      	subs	r3, #1
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800e2a0:	6812      	ldr	r2, [r2, #0]
 800e2a2:	03d2      	lsls	r2, r2, #15
 800e2a4:	d4f9      	bmi.n	800e29a <SAI_DMAError+0x3a>
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800e2a6:	2201      	movs	r2, #1

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800e2a8:	2300      	movs	r3, #0

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 800e2aa:	4620      	mov	r0, r4
    hsai->State = HAL_SAI_STATE_READY;
 800e2ac:	f884 2091 	strb.w	r2, [r4, #145]	; 0x91
    hsai->XferCount = 0U;
 800e2b0:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
    HAL_SAI_ErrorCallback(hsai);
 800e2b4:	f7f6 ffd6 	bl	8005264 <HAL_SAI_ErrorCallback>
#endif
  }
}
 800e2b8:	bd10      	pop	{r4, pc}
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800e2ba:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800e2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      break;
 800e2c6:	e7ee      	b.n	800e2a6 <SAI_DMAError+0x46>
 800e2c8:	20000728 	.word	0x20000728
 800e2cc:	95cbec1b 	.word	0x95cbec1b

0800e2d0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e2d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2d4:	4605      	mov	r5, r0
 800e2d6:	b086      	sub	sp, #24
 800e2d8:	460f      	mov	r7, r1
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e2da:	f7fa fe73 	bl	8008fc4 <HAL_GetTick>
  uint32_t index = 0U;
  uint32_t tempscr[2U] = {0UL, 0UL};
  uint32_t *scr = pSCR;

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e2de:	2108      	movs	r1, #8
  uint32_t tickstart = HAL_GetTick();
 800e2e0:	4606      	mov	r6, r0
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e2e2:	6828      	ldr	r0, [r5, #0]
 800e2e4:	f001 fe6c 	bl	800ffc0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2e8:	4604      	mov	r4, r0
 800e2ea:	b118      	cbz	r0, 800e2f4 <SD_FindSCR+0x24>
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));

  }

  return HAL_SD_ERROR_NONE;
}
 800e2ec:	4620      	mov	r0, r4
 800e2ee:	b006      	add	sp, #24
 800e2f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e2f4:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800e2f6:	6828      	ldr	r0, [r5, #0]
 800e2f8:	0409      	lsls	r1, r1, #16
 800e2fa:	f002 fbbb 	bl	8010a74 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e2fe:	4604      	mov	r4, r0
 800e300:	2800      	cmp	r0, #0
 800e302:	d1f3      	bne.n	800e2ec <SD_FindSCR+0x1c>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e308:	2308      	movs	r3, #8
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e30a:	4669      	mov	r1, sp
 800e30c:	6828      	ldr	r0, [r5, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e30e:	e9cd 2300 	strd	r2, r3, [sp]
 800e312:	2230      	movs	r2, #48	; 0x30
 800e314:	2302      	movs	r3, #2
 800e316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e31a:	2200      	movs	r2, #0
 800e31c:	2301      	movs	r3, #1
 800e31e:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e322:	f001 fe37 	bl	800ff94 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e326:	6828      	ldr	r0, [r5, #0]
 800e328:	f002 fd2a 	bl	8010d80 <SDMMC_CmdSendSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e32c:	4604      	mov	r4, r0
 800e32e:	2800      	cmp	r0, #0
 800e330:	d1dc      	bne.n	800e2ec <SD_FindSCR+0x1c>
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e332:	4682      	mov	sl, r0
 800e334:	4681      	mov	r9, r0
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e336:	f240 582a 	movw	r8, #1322	; 0x52a
 800e33a:	e004      	b.n	800e346 <SD_FindSCR+0x76>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e33c:	f7fa fe42 	bl	8008fc4 <HAL_GetTick>
 800e340:	1b83      	subs	r3, r0, r6
 800e342:	3301      	adds	r3, #1
 800e344:	d024      	beq.n	800e390 <SD_FindSCR+0xc0>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e346:	6828      	ldr	r0, [r5, #0]
 800e348:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e34a:	ea13 0f08 	tst.w	r3, r8
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e34e:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 800e350:	d10c      	bne.n	800e36c <SD_FindSCR+0x9c>
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e352:	0319      	lsls	r1, r3, #12
 800e354:	d4f2      	bmi.n	800e33c <SD_FindSCR+0x6c>
 800e356:	2c00      	cmp	r4, #0
 800e358:	d1f0      	bne.n	800e33c <SD_FindSCR+0x6c>
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e35a:	f001 fe01 	bl	800ff60 <SDMMC_ReadFIFO>
 800e35e:	4681      	mov	r9, r0
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e360:	6828      	ldr	r0, [r5, #0]
      index++;
 800e362:	2401      	movs	r4, #1
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e364:	f001 fdfc 	bl	800ff60 <SDMMC_ReadFIFO>
 800e368:	4682      	mov	sl, r0
      index++;
 800e36a:	e7e7      	b.n	800e33c <SD_FindSCR+0x6c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e36c:	071a      	lsls	r2, r3, #28
 800e36e:	d416      	bmi.n	800e39e <SD_FindSCR+0xce>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e370:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e372:	079b      	lsls	r3, r3, #30
 800e374:	d40f      	bmi.n	800e396 <SD_FindSCR+0xc6>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e376:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800e378:	f014 0420 	ands.w	r4, r4, #32
 800e37c:	d113      	bne.n	800e3a6 <SD_FindSCR+0xd6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e37e:	fa9a f28a 	rev.w	r2, sl
 800e382:	fa99 f389 	rev.w	r3, r9
 800e386:	490a      	ldr	r1, [pc, #40]	; (800e3b0 <SD_FindSCR+0xe0>)
 800e388:	6381      	str	r1, [r0, #56]	; 0x38
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 800e38a:	e9c7 2300 	strd	r2, r3, [r7]
  return HAL_SD_ERROR_NONE;
 800e38e:	e7ad      	b.n	800e2ec <SD_FindSCR+0x1c>
      return HAL_SD_ERROR_TIMEOUT;
 800e390:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800e394:	e7aa      	b.n	800e2ec <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e396:	2302      	movs	r3, #2
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e398:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e39a:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e39c:	e7a6      	b.n	800e2ec <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e39e:	2308      	movs	r3, #8
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3a0:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e3a2:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e3a4:	e7a2      	b.n	800e2ec <SD_FindSCR+0x1c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e3a6:	2320      	movs	r3, #32
    return HAL_SD_ERROR_RX_OVERRUN;
 800e3a8:	461c      	mov	r4, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e3aa:	6383      	str	r3, [r0, #56]	; 0x38
    return HAL_SD_ERROR_RX_OVERRUN;
 800e3ac:	e79e      	b.n	800e2ec <SD_FindSCR+0x1c>
 800e3ae:	bf00      	nop
 800e3b0:	18000f3a 	.word	0x18000f3a

0800e3b4 <HAL_SD_GetCardStatus.part.0>:
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
 800e3b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e3b8:	4604      	mov	r4, r0
 800e3ba:	b096      	sub	sp, #88	; 0x58
 800e3bc:	460d      	mov	r5, r1
  uint32_t tickstart = HAL_GetTick();
 800e3be:	f7fa fe01 	bl	8008fc4 <HAL_GetTick>
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3c2:	2100      	movs	r1, #0
  uint32_t tickstart = HAL_GetTick();
 800e3c4:	4607      	mov	r7, r0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e3c6:	6820      	ldr	r0, [r4, #0]
 800e3c8:	f001 fde0 	bl	800ff8c <SDMMC_GetResponse>
 800e3cc:	0182      	lsls	r2, r0, #6
 800e3ce:	d45c      	bmi.n	800e48a <HAL_SD_GetCardStatus.part.0+0xd6>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e3d0:	2140      	movs	r1, #64	; 0x40
 800e3d2:	6820      	ldr	r0, [r4, #0]
 800e3d4:	f001 fdf4 	bl	800ffc0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3d8:	4603      	mov	r3, r0
 800e3da:	b1e8      	cbz	r0, 800e418 <HAL_SD_GetCardStatus.part.0+0x64>
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3dc:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e3de:	6362      	str	r2, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3e0:	6820      	ldr	r0, [r4, #0]
 800e3e2:	4956      	ldr	r1, [pc, #344]	; (800e53c <HAL_SD_GetCardStatus.part.0+0x188>)
    hsd->State = HAL_SD_STATE_READY;
 800e3e4:	2201      	movs	r2, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e3e6:	6381      	str	r1, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800e3e8:	4616      	mov	r6, r2
    hsd->ErrorCode |= errorstate;
 800e3ea:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800e3ec:	4303      	orrs	r3, r0
 800e3ee:	6363      	str	r3, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e3f0:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e3f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e3f8:	6820      	ldr	r0, [r4, #0]
 800e3fa:	f001 fde1 	bl	800ffc0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e3fe:	b138      	cbz	r0, 800e410 <HAL_SD_GetCardStatus.part.0+0x5c>
    hsd->State = HAL_SD_STATE_READY;
 800e400:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e402:	6822      	ldr	r2, [r4, #0]
 800e404:	494d      	ldr	r1, [pc, #308]	; (800e53c <HAL_SD_GetCardStatus.part.0+0x188>)
    status = HAL_ERROR;
 800e406:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e408:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e40a:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800e40c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800e410:	4630      	mov	r0, r6
 800e412:	b016      	add	sp, #88	; 0x58
 800e414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e418:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800e41a:	6820      	ldr	r0, [r4, #0]
 800e41c:	0409      	lsls	r1, r1, #16
 800e41e:	f002 fb29 	bl	8010a74 <SDMMC_CmdAppCommand>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e422:	4603      	mov	r3, r0
 800e424:	2800      	cmp	r0, #0
 800e426:	d1d9      	bne.n	800e3dc <HAL_SD_GetCardStatus.part.0+0x28>
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e428:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e42c:	2340      	movs	r3, #64	; 0x40
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e42e:	4669      	mov	r1, sp
 800e430:	6820      	ldr	r0, [r4, #0]
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e432:	e9cd 2300 	strd	r2, r3, [sp]
 800e436:	2260      	movs	r2, #96	; 0x60
 800e438:	2302      	movs	r3, #2
 800e43a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e43e:	2301      	movs	r3, #1
 800e440:	2200      	movs	r2, #0
 800e442:	e9cd 2304 	strd	r2, r3, [sp, #16]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e446:	f001 fda5 	bl	800ff94 <SDMMC_ConfigData>
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e44a:	6820      	ldr	r0, [r4, #0]
 800e44c:	f002 febc 	bl	80111c8 <SDMMC_CmdStatusRegister>
  if (errorstate != HAL_SD_ERROR_NONE)
 800e450:	4603      	mov	r3, r0
 800e452:	2800      	cmp	r0, #0
 800e454:	d1c2      	bne.n	800e3dc <HAL_SD_GetCardStatus.part.0+0x28>
  uint32_t *pData = pSDstatus;
 800e456:	ae06      	add	r6, sp, #24
 800e458:	e004      	b.n	800e464 <HAL_SD_GetCardStatus.part.0+0xb0>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e45a:	f7fa fdb3 	bl	8008fc4 <HAL_GetTick>
 800e45e:	1bc0      	subs	r0, r0, r7
 800e460:	3001      	adds	r0, #1
 800e462:	d016      	beq.n	800e492 <HAL_SD_GetCardStatus.part.0+0xde>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e464:	6820      	ldr	r0, [r4, #0]
 800e466:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e468:	f413 7f95 	tst.w	r3, #298	; 0x12a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e46c:	6b43      	ldr	r3, [r0, #52]	; 0x34
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e46e:	d113      	bne.n	800e498 <HAL_SD_GetCardStatus.part.0+0xe4>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e470:	041b      	lsls	r3, r3, #16
 800e472:	d5f2      	bpl.n	800e45a <HAL_SD_GetCardStatus.part.0+0xa6>
 800e474:	f106 0820 	add.w	r8, r6, #32
 800e478:	e000      	b.n	800e47c <HAL_SD_GetCardStatus.part.0+0xc8>
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e47a:	6820      	ldr	r0, [r4, #0]
 800e47c:	f001 fd70 	bl	800ff60 <SDMMC_ReadFIFO>
 800e480:	f846 0b04 	str.w	r0, [r6], #4
      for (count = 0U; count < 8U; count++)
 800e484:	4546      	cmp	r6, r8
 800e486:	d1f8      	bne.n	800e47a <HAL_SD_GetCardStatus.part.0+0xc6>
 800e488:	e7e7      	b.n	800e45a <HAL_SD_GetCardStatus.part.0+0xa6>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e48a:	6820      	ldr	r0, [r4, #0]
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e48c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e490:	e7a7      	b.n	800e3e2 <HAL_SD_GetCardStatus.part.0+0x2e>
      return HAL_SD_ERROR_TIMEOUT;
 800e492:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e496:	e7a3      	b.n	800e3e0 <HAL_SD_GetCardStatus.part.0+0x2c>
  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e498:	0719      	lsls	r1, r3, #28
 800e49a:	d448      	bmi.n	800e52e <HAL_SD_GetCardStatus.part.0+0x17a>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e49c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e49e:	079a      	lsls	r2, r3, #30
 800e4a0:	d447      	bmi.n	800e532 <HAL_SD_GetCardStatus.part.0+0x17e>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e4a2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4a4:	069b      	lsls	r3, r3, #26
 800e4a6:	d50a      	bpl.n	800e4be <HAL_SD_GetCardStatus.part.0+0x10a>
 800e4a8:	e045      	b.n	800e536 <HAL_SD_GetCardStatus.part.0+0x182>
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e4aa:	f001 fd59 	bl	800ff60 <SDMMC_ReadFIFO>
 800e4ae:	f846 0b04 	str.w	r0, [r6], #4
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e4b2:	f7fa fd87 	bl	8008fc4 <HAL_GetTick>
 800e4b6:	1bc0      	subs	r0, r0, r7
 800e4b8:	3001      	adds	r0, #1
 800e4ba:	d0ea      	beq.n	800e492 <HAL_SD_GetCardStatus.part.0+0xde>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e4bc:	6820      	ldr	r0, [r4, #0]
 800e4be:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e4c0:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
 800e4c4:	d1f1      	bne.n	800e4aa <HAL_SD_GetCardStatus.part.0+0xf6>
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4c6:	4a1e      	ldr	r2, [pc, #120]	; (800e540 <HAL_SD_GetCardStatus.part.0+0x18c>)
  HAL_StatusTypeDef status = HAL_OK;
 800e4c8:	461e      	mov	r6, r3
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e4ca:	9b06      	ldr	r3, [sp, #24]
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e4cc:	6382      	str	r2, [r0, #56]	; 0x38
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e4ce:	f3c3 1281 	ubfx	r2, r3, #6, #2
 800e4d2:	702a      	strb	r2, [r5, #0]
    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e4d4:	f3c3 1240 	ubfx	r2, r3, #5, #1
 800e4d8:	706a      	strb	r2, [r5, #1]
    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e4da:	0a1a      	lsrs	r2, r3, #8
 800e4dc:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800e4e0:	ea42 6213 	orr.w	r2, r2, r3, lsr #24
 800e4e4:	e9dd 1307 	ldrd	r1, r3, [sp, #28]
 800e4e8:	b292      	uxth	r2, r2
 800e4ea:	ba09      	rev	r1, r1
 800e4ec:	806a      	strh	r2, [r5, #2]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e4ee:	b2da      	uxtb	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e4f0:	6069      	str	r1, [r5, #4]
    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e4f2:	722a      	strb	r2, [r5, #8]
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e4f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e4f8:	f89d 102b 	ldrb.w	r1, [sp, #43]	; 0x2b
    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e4fc:	726a      	strb	r2, [r5, #9]
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e4fe:	f3c3 5203 	ubfx	r2, r3, #20, #4
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e502:	0c1b      	lsrs	r3, r3, #16
    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e504:	72aa      	strb	r2, [r5, #10]
    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e506:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e508:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e50c:	b2d0      	uxtb	r0, r2
 800e50e:	4303      	orrs	r3, r0
 800e510:	81ab      	strh	r3, [r5, #12]
    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e512:	f3c2 2385 	ubfx	r3, r2, #10, #6
 800e516:	73ab      	strb	r3, [r5, #14]
    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e518:	f3c2 2301 	ubfx	r3, r2, #8, #2
 800e51c:	73eb      	strb	r3, [r5, #15]
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e51e:	f3c2 1303 	ubfx	r3, r2, #4, #4
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e522:	f002 020f 	and.w	r2, r2, #15
    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e526:	742b      	strb	r3, [r5, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e528:	746a      	strb	r2, [r5, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e52a:	74a9      	strb	r1, [r5, #18]
 800e52c:	e762      	b.n	800e3f4 <HAL_SD_GetCardStatus.part.0+0x40>
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e52e:	2308      	movs	r3, #8
 800e530:	e757      	b.n	800e3e2 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e532:	2302      	movs	r3, #2
 800e534:	e755      	b.n	800e3e2 <HAL_SD_GetCardStatus.part.0+0x2e>
    return HAL_SD_ERROR_RX_OVERRUN;
 800e536:	2320      	movs	r3, #32
 800e538:	e753      	b.n	800e3e2 <HAL_SD_GetCardStatus.part.0+0x2e>
 800e53a:	bf00      	nop
 800e53c:	1fe00fff 	.word	0x1fe00fff
 800e540:	18000f3a 	.word	0x18000f3a

0800e544 <HAL_SD_ReadBlocks>:
{
 800e544:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e548:	460d      	mov	r5, r1
 800e54a:	b087      	sub	sp, #28
 800e54c:	4604      	mov	r4, r0
 800e54e:	4692      	mov	sl, r2
 800e550:	461f      	mov	r7, r3
  uint32_t tickstart = HAL_GetTick();
 800e552:	f7fa fd37 	bl	8008fc4 <HAL_GetTick>
  if (NULL == pData)
 800e556:	2d00      	cmp	r5, #0
 800e558:	f000 8093 	beq.w	800e682 <HAL_SD_ReadBlocks+0x13e>
  if (hsd->State == HAL_SD_STATE_READY)
 800e55c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e560:	2b01      	cmp	r3, #1
 800e562:	fa5f f983 	uxtb.w	r9, r3
 800e566:	d17b      	bne.n	800e660 <HAL_SD_ReadBlocks+0x11c>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e568:	eb0a 0307 	add.w	r3, sl, r7
 800e56c:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e56e:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e570:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e572:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e574:	f200 808f 	bhi.w	800e696 <HAL_SD_ReadBlocks+0x152>
    hsd->State = HAL_SD_STATE_BUSY;
 800e578:	2303      	movs	r3, #3
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e57a:	f04f 0b02 	mov.w	fp, #2
 800e57e:	4606      	mov	r6, r0
    hsd->State = HAL_SD_STATE_BUSY;
 800e580:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e588:	4669      	mov	r1, sp
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e58a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e58c:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e58e:	2b01      	cmp	r3, #1
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e590:	f04f 0300 	mov.w	r3, #0
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e594:	e9cd 3304 	strd	r3, r3, [sp, #16]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e598:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800e59c:	bf18      	it	ne
 800e59e:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e5a2:	9300      	str	r3, [sp, #0]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e5a4:	027b      	lsls	r3, r7, #9
 800e5a6:	9301      	str	r3, [sp, #4]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e5a8:	2390      	movs	r3, #144	; 0x90
 800e5aa:	e9cd 3b02 	strd	r3, fp, [sp, #8]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e5ae:	f001 fcf1 	bl	800ff94 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e5b2:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800e5b4:	2f01      	cmp	r7, #1
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e5b6:	68d3      	ldr	r3, [r2, #12]
 800e5b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5bc:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800e5be:	d959      	bls.n	800e674 <HAL_SD_ReadBlocks+0x130>
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e5c0:	4651      	mov	r1, sl
 800e5c2:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800e5c4:	f8c4 b02c 	str.w	fp, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800e5c8:	f001 fe46 	bl	8010258 <SDMMC_CmdReadMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e5cc:	2800      	cmp	r0, #0
 800e5ce:	d16a      	bne.n	800e6a6 <HAL_SD_ReadBlocks+0x162>
    dataremaining = config.DataLength;
 800e5d0:	f8dd b004 	ldr.w	fp, [sp, #4]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e5d4:	e005      	b.n	800e5e2 <HAL_SD_ReadBlocks+0x9e>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e5d6:	f7fa fcf5 	bl	8008fc4 <HAL_GetTick>
 800e5da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e5dc:	1b80      	subs	r0, r0, r6
 800e5de:	4298      	cmp	r0, r3
 800e5e0:	d22c      	bcs.n	800e63c <HAL_SD_ReadBlocks+0xf8>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e5e2:	6820      	ldr	r0, [r4, #0]
 800e5e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5e6:	f413 7f95 	tst.w	r3, #298	; 0x12a
 800e5ea:	d168      	bne.n	800e6be <HAL_SD_ReadBlocks+0x17a>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800e5ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e5ee:	041a      	lsls	r2, r3, #16
 800e5f0:	d5f1      	bpl.n	800e5d6 <HAL_SD_ReadBlocks+0x92>
 800e5f2:	f1bb 0f1f 	cmp.w	fp, #31
 800e5f6:	d9ee      	bls.n	800e5d6 <HAL_SD_ReadBlocks+0x92>
 800e5f8:	f105 0804 	add.w	r8, r5, #4
 800e5fc:	f105 0a24 	add.w	sl, r5, #36	; 0x24
 800e600:	e000      	b.n	800e604 <HAL_SD_ReadBlocks+0xc0>
          data = SDMMC_ReadFIFO(hsd->Instance);
 800e602:	6820      	ldr	r0, [r4, #0]
        for (count = 0U; count < 8U; count++)
 800e604:	f108 0804 	add.w	r8, r8, #4
          data = SDMMC_ReadFIFO(hsd->Instance);
 800e608:	f001 fcaa 	bl	800ff60 <SDMMC_ReadFIFO>
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e60c:	ea4f 2c10 	mov.w	ip, r0, lsr #8
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e610:	0c01      	lsrs	r1, r0, #16
        for (count = 0U; count < 8U; count++)
 800e612:	45d0      	cmp	r8, sl
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e614:	ea4f 6210 	mov.w	r2, r0, lsr #24
          *tempbuff = (uint8_t)(data & 0xFFU);
 800e618:	f808 0c08 	strb.w	r0, [r8, #-8]
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800e61c:	f808 cc07 	strb.w	ip, [r8, #-7]
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800e620:	f808 1c06 	strb.w	r1, [r8, #-6]
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800e624:	f808 2c05 	strb.w	r2, [r8, #-5]
        for (count = 0U; count < 8U; count++)
 800e628:	d1eb      	bne.n	800e602 <HAL_SD_ReadBlocks+0xbe>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e62a:	f7fa fccb 	bl	8008fc4 <HAL_GetTick>
 800e62e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e630:	1b80      	subs	r0, r0, r6
          tempbuff++;
 800e632:	3520      	adds	r5, #32
        dataremaining -= 32U;
 800e634:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e638:	4298      	cmp	r0, r3
 800e63a:	d3d2      	bcc.n	800e5e2 <HAL_SD_ReadBlocks+0x9e>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e63c:	6823      	ldr	r3, [r4, #0]
        return HAL_TIMEOUT;
 800e63e:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e642:	4842      	ldr	r0, [pc, #264]	; (800e74c <HAL_SD_ReadBlocks+0x208>)
        hsd->State = HAL_SD_STATE_READY;
 800e644:	2101      	movs	r1, #1
        hsd->Context = SD_CONTEXT_NONE;
 800e646:	2200      	movs	r2, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e648:	6398      	str	r0, [r3, #56]	; 0x38
}
 800e64a:	4648      	mov	r0, r9
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800e64c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e64e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800e652:	6363      	str	r3, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e654:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e658:	62e2      	str	r2, [r4, #44]	; 0x2c
}
 800e65a:	b007      	add	sp, #28
 800e65c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e660:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e662:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e666:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e66a:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e66c:	4648      	mov	r0, r9
 800e66e:	b007      	add	sp, #28
 800e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e674:	2301      	movs	r3, #1
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e676:	4651      	mov	r1, sl
 800e678:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800e67a:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800e67c:	f001 fd46 	bl	801010c <SDMMC_CmdReadSingleBlock>
 800e680:	e7a4      	b.n	800e5cc <HAL_SD_ReadBlocks+0x88>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e682:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e684:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e688:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800e68c:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e68e:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e690:	b007      	add	sp, #28
 800e692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e696:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800e698:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e69a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e69e:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e6a0:	b007      	add	sp, #28
 800e6a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6a6:	6823      	ldr	r3, [r4, #0]
 800e6a8:	4a28      	ldr	r2, [pc, #160]	; (800e74c <HAL_SD_ReadBlocks+0x208>)
 800e6aa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e6ac:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800e6ae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e6b0:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800e6b2:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800e6b4:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800e6b6:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e6ba:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800e6bc:	e7d6      	b.n	800e66c <HAL_SD_ReadBlocks+0x128>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e6be:	68c3      	ldr	r3, [r0, #12]
 800e6c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e6c4:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e6c6:	6820      	ldr	r0, [r4, #0]
 800e6c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6ca:	05db      	lsls	r3, r3, #23
 800e6cc:	d509      	bpl.n	800e6e2 <HAL_SD_ReadBlocks+0x19e>
 800e6ce:	2f01      	cmp	r7, #1
 800e6d0:	d907      	bls.n	800e6e2 <HAL_SD_ReadBlocks+0x19e>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e6d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e6d4:	2b03      	cmp	r3, #3
 800e6d6:	d004      	beq.n	800e6e2 <HAL_SD_ReadBlocks+0x19e>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e6d8:	f001 ffb0 	bl	801063c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	d1e2      	bne.n	800e6a6 <HAL_SD_ReadBlocks+0x162>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e6e0:	6820      	ldr	r0, [r4, #0]
 800e6e2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6e4:	f013 0308 	ands.w	r3, r3, #8
 800e6e8:	d112      	bne.n	800e710 <HAL_SD_ReadBlocks+0x1cc>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e6ea:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e6ec:	f012 0202 	ands.w	r2, r2, #2
 800e6f0:	d11a      	bne.n	800e728 <HAL_SD_ReadBlocks+0x1e4>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e6f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e6f4:	f013 0320 	ands.w	r3, r3, #32
 800e6f8:	d021      	beq.n	800e73e <HAL_SD_ReadBlocks+0x1fa>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6fa:	4b14      	ldr	r3, [pc, #80]	; (800e74c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800e6fc:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e6fe:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800e700:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e702:	f043 0320 	orr.w	r3, r3, #32
 800e706:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e708:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e70c:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e70e:	e7ad      	b.n	800e66c <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e710:	4b0e      	ldr	r3, [pc, #56]	; (800e74c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800e712:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e714:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e716:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e718:	f043 0308 	orr.w	r3, r3, #8
 800e71c:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e71e:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800e720:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e724:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e726:	e7a1      	b.n	800e66c <HAL_SD_ReadBlocks+0x128>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e728:	4a08      	ldr	r2, [pc, #32]	; (800e74c <HAL_SD_ReadBlocks+0x208>)
      hsd->State = HAL_SD_STATE_READY;
 800e72a:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e72c:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e72e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e730:	f042 0202 	orr.w	r2, r2, #2
 800e734:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e736:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e73a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e73c:	e796      	b.n	800e66c <HAL_SD_ReadBlocks+0x128>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e73e:	4904      	ldr	r1, [pc, #16]	; (800e750 <HAL_SD_ReadBlocks+0x20c>)
    hsd->State = HAL_SD_STATE_READY;
 800e740:	2201      	movs	r2, #1
    return HAL_OK;
 800e742:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e744:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e746:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800e74a:	e78f      	b.n	800e66c <HAL_SD_ReadBlocks+0x128>
 800e74c:	1fe00fff 	.word	0x1fe00fff
 800e750:	18000f3a 	.word	0x18000f3a

0800e754 <HAL_SD_WriteBlocks>:
{
 800e754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e758:	460d      	mov	r5, r1
 800e75a:	b089      	sub	sp, #36	; 0x24
 800e75c:	4604      	mov	r4, r0
 800e75e:	4692      	mov	sl, r2
 800e760:	461f      	mov	r7, r3
 800e762:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 800e766:	f7fa fc2d 	bl	8008fc4 <HAL_GetTick>
  if (NULL == pData)
 800e76a:	2d00      	cmp	r5, #0
 800e76c:	d07c      	beq.n	800e868 <HAL_SD_WriteBlocks+0x114>
  if (hsd->State == HAL_SD_STATE_READY)
 800e76e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800e772:	2b01      	cmp	r3, #1
 800e774:	fa5f f983 	uxtb.w	r9, r3
 800e778:	d166      	bne.n	800e848 <HAL_SD_WriteBlocks+0xf4>
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e77a:	eb0a 0307 	add.w	r3, sl, r7
 800e77e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e780:	2100      	movs	r1, #0
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e782:	4293      	cmp	r3, r2
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800e784:	6361      	str	r1, [r4, #52]	; 0x34
    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800e786:	d879      	bhi.n	800e87c <HAL_SD_WriteBlocks+0x128>
    hsd->State = HAL_SD_STATE_BUSY;
 800e788:	2303      	movs	r3, #3
 800e78a:	4606      	mov	r6, r0
 800e78c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    hsd->Instance->DCTRL = 0U;
 800e790:	6823      	ldr	r3, [r4, #0]
 800e792:	62d9      	str	r1, [r3, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e794:	a902      	add	r1, sp, #8
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e796:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e798:	6820      	ldr	r0, [r4, #0]
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800e79a:	2b01      	cmp	r3, #1
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800e79c:	f04f 0300 	mov.w	r3, #0
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e7a0:	e9cd 3305 	strd	r3, r3, [sp, #20]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800e7a4:	9307      	str	r3, [sp, #28]
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e7a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
      add *= 512U;
 800e7aa:	bf18      	it	ne
 800e7ac:	ea4f 2a4a 	movne.w	sl, sl, lsl #9
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e7b0:	9302      	str	r3, [sp, #8]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800e7b2:	027b      	lsls	r3, r7, #9
 800e7b4:	9303      	str	r3, [sp, #12]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800e7b6:	2390      	movs	r3, #144	; 0x90
 800e7b8:	9304      	str	r3, [sp, #16]
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e7ba:	f001 fbeb 	bl	800ff94 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e7be:	6822      	ldr	r2, [r4, #0]
    if (NumberOfBlocks > 1U)
 800e7c0:	2f01      	cmp	r7, #1
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e7c2:	4651      	mov	r1, sl
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 800e7c4:	68d3      	ldr	r3, [r2, #12]
 800e7c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e7ca:	60d3      	str	r3, [r2, #12]
    if (NumberOfBlocks > 1U)
 800e7cc:	d946      	bls.n	800e85c <HAL_SD_WriteBlocks+0x108>
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e7ce:	2320      	movs	r3, #32
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e7d0:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800e7d2:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800e7d4:	f001 fe8c 	bl	80104f0 <SDMMC_CmdWriteMultiBlock>
    if (errorstate != HAL_SD_ERROR_NONE)
 800e7d8:	2800      	cmp	r0, #0
 800e7da:	d157      	bne.n	800e88c <HAL_SD_WriteBlocks+0x138>
    dataremaining = config.DataLength;
 800e7dc:	f8dd b00c 	ldr.w	fp, [sp, #12]
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e7e0:	e004      	b.n	800e7ec <HAL_SD_WriteBlocks+0x98>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e7e2:	f7fa fbef 	bl	8008fc4 <HAL_GetTick>
 800e7e6:	1b80      	subs	r0, r0, r6
 800e7e8:	4540      	cmp	r0, r8
 800e7ea:	d21d      	bcs.n	800e828 <HAL_SD_WriteBlocks+0xd4>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 800e7ec:	6820      	ldr	r0, [r4, #0]
 800e7ee:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e7f0:	f413 7f8d 	tst.w	r3, #282	; 0x11a
 800e7f4:	d156      	bne.n	800e8a4 <HAL_SD_WriteBlocks+0x150>
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800e7f6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e7f8:	045a      	lsls	r2, r3, #17
 800e7fa:	d5f2      	bpl.n	800e7e2 <HAL_SD_WriteBlocks+0x8e>
 800e7fc:	f1bb 0f1f 	cmp.w	fp, #31
 800e800:	d9ef      	bls.n	800e7e2 <HAL_SD_WriteBlocks+0x8e>
 800e802:	f105 0a20 	add.w	sl, r5, #32
 800e806:	e000      	b.n	800e80a <HAL_SD_WriteBlocks+0xb6>
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e808:	6820      	ldr	r0, [r4, #0]
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e80a:	f855 3b04 	ldr.w	r3, [r5], #4
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e80e:	a901      	add	r1, sp, #4
          data |= ((uint32_t)(*tempbuff) << 24U);
 800e810:	9301      	str	r3, [sp, #4]
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e812:	f001 fba9 	bl	800ff68 <SDMMC_WriteFIFO>
        for (count = 0U; count < 8U; count++)
 800e816:	4555      	cmp	r5, sl
 800e818:	d1f6      	bne.n	800e808 <HAL_SD_WriteBlocks+0xb4>
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e81a:	f7fa fbd3 	bl	8008fc4 <HAL_GetTick>
 800e81e:	1b80      	subs	r0, r0, r6
        dataremaining -= 32U;
 800e820:	f1ab 0b20 	sub.w	fp, fp, #32
      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 800e824:	4540      	cmp	r0, r8
 800e826:	d3e1      	bcc.n	800e7ec <HAL_SD_WriteBlocks+0x98>
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e828:	6821      	ldr	r1, [r4, #0]
        return HAL_TIMEOUT;
 800e82a:	f04f 0903 	mov.w	r9, #3
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e82e:	4841      	ldr	r0, [pc, #260]	; (800e934 <HAL_SD_WriteBlocks+0x1e0>)
        hsd->State = HAL_SD_STATE_READY;
 800e830:	2201      	movs	r2, #1
        hsd->Context = SD_CONTEXT_NONE;
 800e832:	2300      	movs	r3, #0
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e834:	6388      	str	r0, [r1, #56]	; 0x38
}
 800e836:	4648      	mov	r0, r9
        hsd->ErrorCode |= errorstate;
 800e838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e83a:	6361      	str	r1, [r4, #52]	; 0x34
        hsd->State = HAL_SD_STATE_READY;
 800e83c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
        hsd->Context = SD_CONTEXT_NONE;
 800e840:	62e3      	str	r3, [r4, #44]	; 0x2c
}
 800e842:	b009      	add	sp, #36	; 0x24
 800e844:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e848:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e84a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800e84e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e852:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e854:	4648      	mov	r0, r9
 800e856:	b009      	add	sp, #36	; 0x24
 800e858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e85c:	2310      	movs	r3, #16
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e85e:	6820      	ldr	r0, [r4, #0]
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800e860:	62e3      	str	r3, [r4, #44]	; 0x2c
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800e862:	f001 fd9f 	bl	80103a4 <SDMMC_CmdWriteSingleBlock>
 800e866:	e7b7      	b.n	800e7d8 <HAL_SD_WriteBlocks+0x84>
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e868:	6b63      	ldr	r3, [r4, #52]	; 0x34
    return HAL_ERROR;
 800e86a:	f04f 0901 	mov.w	r9, #1
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e86e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
}
 800e872:	4648      	mov	r0, r9
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e874:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e876:	b009      	add	sp, #36	; 0x24
 800e878:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e87c:	6b63      	ldr	r3, [r4, #52]	; 0x34
}
 800e87e:	4648      	mov	r0, r9
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800e880:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e884:	6363      	str	r3, [r4, #52]	; 0x34
}
 800e886:	b009      	add	sp, #36	; 0x24
 800e888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e88c:	6823      	ldr	r3, [r4, #0]
 800e88e:	4a29      	ldr	r2, [pc, #164]	; (800e934 <HAL_SD_WriteBlocks+0x1e0>)
 800e890:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800e892:	2201      	movs	r2, #1
          hsd->ErrorCode |= errorstate;
 800e894:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e896:	4318      	orrs	r0, r3
          hsd->Context = SD_CONTEXT_NONE;
 800e898:	2300      	movs	r3, #0
          hsd->ErrorCode |= errorstate;
 800e89a:	6360      	str	r0, [r4, #52]	; 0x34
          hsd->State = HAL_SD_STATE_READY;
 800e89c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
          hsd->Context = SD_CONTEXT_NONE;
 800e8a0:	62e3      	str	r3, [r4, #44]	; 0x2c
          return HAL_ERROR;
 800e8a2:	e7d7      	b.n	800e854 <HAL_SD_WriteBlocks+0x100>
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800e8a4:	68c3      	ldr	r3, [r0, #12]
 800e8a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8aa:	60c3      	str	r3, [r0, #12]
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800e8ac:	6820      	ldr	r0, [r4, #0]
 800e8ae:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8b0:	05db      	lsls	r3, r3, #23
 800e8b2:	d509      	bpl.n	800e8c8 <HAL_SD_WriteBlocks+0x174>
 800e8b4:	2f01      	cmp	r7, #1
 800e8b6:	d907      	bls.n	800e8c8 <HAL_SD_WriteBlocks+0x174>
      if (hsd->SdCard.CardType != CARD_SECURED)
 800e8b8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e8ba:	2b03      	cmp	r3, #3
 800e8bc:	d004      	beq.n	800e8c8 <HAL_SD_WriteBlocks+0x174>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800e8be:	f001 febd 	bl	801063c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800e8c2:	2800      	cmp	r0, #0
 800e8c4:	d1e2      	bne.n	800e88c <HAL_SD_WriteBlocks+0x138>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e8c6:	6820      	ldr	r0, [r4, #0]
 800e8c8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8ca:	f013 0308 	ands.w	r3, r3, #8
 800e8ce:	d112      	bne.n	800e8f6 <HAL_SD_WriteBlocks+0x1a2>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e8d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
 800e8d2:	f012 0202 	ands.w	r2, r2, #2
 800e8d6:	d11a      	bne.n	800e90e <HAL_SD_WriteBlocks+0x1ba>
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800e8d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800e8da:	f013 0310 	ands.w	r3, r3, #16
 800e8de:	d021      	beq.n	800e924 <HAL_SD_WriteBlocks+0x1d0>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8e0:	4b14      	ldr	r3, [pc, #80]	; (800e934 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800e8e2:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8e4:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800e8e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8e8:	f043 0310 	orr.w	r3, r3, #16
 800e8ec:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e8ee:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e8f2:	62e2      	str	r2, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e8f4:	e7ae      	b.n	800e854 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	; (800e934 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800e8f8:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e8fa:	6383      	str	r3, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800e8fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e8fe:	f043 0308 	orr.w	r3, r3, #8
 800e902:	6363      	str	r3, [r4, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e904:	2300      	movs	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800e906:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e90a:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e90c:	e7a2      	b.n	800e854 <HAL_SD_WriteBlocks+0x100>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e90e:	4a09      	ldr	r2, [pc, #36]	; (800e934 <HAL_SD_WriteBlocks+0x1e0>)
      hsd->State = HAL_SD_STATE_READY;
 800e910:	2101      	movs	r1, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e912:	6382      	str	r2, [r0, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800e914:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800e916:	f042 0202 	orr.w	r2, r2, #2
 800e91a:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800e91c:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800e920:	62e3      	str	r3, [r4, #44]	; 0x2c
      return HAL_ERROR;
 800e922:	e797      	b.n	800e854 <HAL_SD_WriteBlocks+0x100>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e924:	4904      	ldr	r1, [pc, #16]	; (800e938 <HAL_SD_WriteBlocks+0x1e4>)
    hsd->State = HAL_SD_STATE_READY;
 800e926:	2201      	movs	r2, #1
    return HAL_OK;
 800e928:	4699      	mov	r9, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e92a:	6381      	str	r1, [r0, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e92c:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
    return HAL_OK;
 800e930:	e790      	b.n	800e854 <HAL_SD_WriteBlocks+0x100>
 800e932:	bf00      	nop
 800e934:	1fe00fff 	.word	0x1fe00fff
 800e938:	18000f3a 	.word	0x18000f3a

0800e93c <HAL_SD_ErrorCallback>:
 800e93c:	4770      	bx	lr
 800e93e:	bf00      	nop

0800e940 <HAL_SD_GetCardCSD>:
{
 800e940:	b410      	push	{r4}
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e942:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e944:	f04f 0c00 	mov.w	ip, #0
{
 800e948:	4603      	mov	r3, r0
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e94a:	0f92      	lsrs	r2, r2, #30
 800e94c:	700a      	strb	r2, [r1, #0]
  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e94e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800e950:	f3c2 6283 	ubfx	r2, r2, #26, #4
 800e954:	704a      	strb	r2, [r1, #1]
  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e956:	f890 205f 	ldrb.w	r2, [r0, #95]	; 0x5f
 800e95a:	f002 0203 	and.w	r2, r2, #3
 800e95e:	708a      	strb	r2, [r1, #2]
  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e960:	f890 205e 	ldrb.w	r2, [r0, #94]	; 0x5e
 800e964:	70ca      	strb	r2, [r1, #3]
  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e966:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
 800e96a:	710a      	strb	r2, [r1, #4]
  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e96c:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
 800e970:	714a      	strb	r2, [r1, #5]
  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e972:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e974:	0d12      	lsrs	r2, r2, #20
 800e976:	80ca      	strh	r2, [r1, #6]
  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e978:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
 800e97c:	f002 020f 	and.w	r2, r2, #15
 800e980:	720a      	strb	r2, [r1, #8]
  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e982:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e984:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800e988:	724a      	strb	r2, [r1, #9]
  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e98a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e98c:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800e990:	728a      	strb	r2, [r1, #10]
  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e992:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e994:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800e998:	72ca      	strb	r2, [r1, #11]
  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e99a:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800e99c:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800e9a0:	730a      	strb	r2, [r1, #12]
  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e9a2:	f881 c00d 	strb.w	ip, [r1, #13]
  if (hsd->SdCard.CardType == CARD_SDSC)
 800e9a6:	6b82      	ldr	r2, [r0, #56]	; 0x38
 800e9a8:	2a00      	cmp	r2, #0
 800e9aa:	f040 808a 	bne.w	800eac2 <HAL_SD_GetCardCSD+0x182>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e9ae:	f640 72fc 	movw	r2, #4092	; 0xffc
 800e9b2:	e9d0 4018 	ldrd	r4, r0, [r0, #96]	; 0x60
 800e9b6:	ea02 0284 	and.w	r2, r2, r4, lsl #2
 800e9ba:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
 800e9be:	610a      	str	r2, [r1, #16]
    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e9c0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e9c2:	f3c2 62c2 	ubfx	r2, r2, #27, #3
 800e9c6:	750a      	strb	r2, [r1, #20]
    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e9c8:	f893 2067 	ldrb.w	r2, [r3, #103]	; 0x67
 800e9cc:	f002 0207 	and.w	r2, r2, #7
 800e9d0:	754a      	strb	r2, [r1, #21]
    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e9d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e9d4:	f3c2 5242 	ubfx	r2, r2, #21, #3
 800e9d8:	758a      	strb	r2, [r1, #22]
    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e9da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e9dc:	f3c2 4282 	ubfx	r2, r2, #18, #3
 800e9e0:	75ca      	strb	r2, [r1, #23]
    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e9e2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800e9e4:	f3c2 32c2 	ubfx	r2, r2, #15, #3
 800e9e8:	760a      	strb	r2, [r1, #24]
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e9ea:	690a      	ldr	r2, [r1, #16]
 800e9ec:	3201      	adds	r2, #1
 800e9ee:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e9f0:	7e08      	ldrb	r0, [r1, #24]
 800e9f2:	f000 0007 	and.w	r0, r0, #7
 800e9f6:	3002      	adds	r0, #2
 800e9f8:	4082      	lsls	r2, r0
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e9fa:	2001      	movs	r0, #1
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e9fc:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e9fe:	f891 c008 	ldrb.w	ip, [r1, #8]
 800ea02:	f00c 0c0f 	and.w	ip, ip, #15
 800ea06:	fa00 f00c 	lsl.w	r0, r0, ip
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea0a:	ea4f 2c50 	mov.w	ip, r0, lsr #9
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800ea0e:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = 512U;
 800ea10:	f44f 7000 	mov.w	r0, #512	; 0x200
    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800ea14:	fb02 f20c 	mul.w	r2, r2, ip
    hsd->SdCard.LogBlockSize = 512U;
 800ea18:	e9c3 2014 	strd	r2, r0, [r3, #80]	; 0x50
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ea1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
  pCSD->Reserved3 = 0;
 800ea1e:	2000      	movs	r0, #0
  pCSD->Reserved4 = 1;
 800ea20:	f04f 0c01 	mov.w	ip, #1
  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ea24:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800ea28:	764a      	strb	r2, [r1, #25]
  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ea2a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ea2c:	f3c2 12c6 	ubfx	r2, r2, #7, #7
 800ea30:	768a      	strb	r2, [r1, #26]
  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ea32:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800ea34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ea38:	76ca      	strb	r2, [r1, #27]
  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ea3a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea3c:	0fd2      	lsrs	r2, r2, #31
 800ea3e:	770a      	strb	r2, [r1, #28]
  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ea40:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea42:	f3c2 7241 	ubfx	r2, r2, #29, #2
 800ea46:	774a      	strb	r2, [r1, #29]
  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ea48:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea4a:	f3c2 6282 	ubfx	r2, r2, #26, #3
 800ea4e:	778a      	strb	r2, [r1, #30]
  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ea50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea52:	f3c2 5283 	ubfx	r2, r2, #22, #4
 800ea56:	77ca      	strb	r2, [r1, #31]
  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ea58:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea5a:	f3c2 5240 	ubfx	r2, r2, #21, #1
 800ea5e:	f881 2020 	strb.w	r2, [r1, #32]
  pCSD->Reserved3 = 0;
 800ea62:	f881 0021 	strb.w	r0, [r1, #33]	; 0x21
  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ea66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea6a:	ea02 020c 	and.w	r2, r2, ip
 800ea6e:	f881 2022 	strb.w	r2, [r1, #34]	; 0x22
  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ea72:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea74:	f3c2 32c0 	ubfx	r2, r2, #15, #1
 800ea78:	f881 2023 	strb.w	r2, [r1, #35]	; 0x23
  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ea7c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea7e:	f3c2 3280 	ubfx	r2, r2, #14, #1
 800ea82:	f881 2024 	strb.w	r2, [r1, #36]	; 0x24
  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ea86:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea88:	f3c2 3240 	ubfx	r2, r2, #13, #1
 800ea8c:	f881 2025 	strb.w	r2, [r1, #37]	; 0x25
  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ea90:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea92:	f3c2 3200 	ubfx	r2, r2, #12, #1
 800ea96:	f881 2026 	strb.w	r2, [r1, #38]	; 0x26
  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ea9a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ea9c:	f3c2 2281 	ubfx	r2, r2, #10, #2
 800eaa0:	f881 2027 	strb.w	r2, [r1, #39]	; 0x27
  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800eaa4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800eaa6:	f3c2 2201 	ubfx	r2, r2, #8, #2
 800eaaa:	f881 2028 	strb.w	r2, [r1, #40]	; 0x28
  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800eaae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800eab0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800eab4:	f881 3029 	strb.w	r3, [r1, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800eab8:	f881 c02a 	strb.w	ip, [r1, #42]	; 0x2a
}
 800eabc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eac0:	4770      	bx	lr
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800eac2:	2a01      	cmp	r2, #1
 800eac4:	d112      	bne.n	800eaec <HAL_SD_GetCardCSD+0x1ac>
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800eac6:	6e02      	ldr	r2, [r0, #96]	; 0x60
 800eac8:	f8b0 c066 	ldrh.w	ip, [r0, #102]	; 0x66
    hsd->SdCard.BlockSize = 512U;
 800eacc:	f44f 7000 	mov.w	r0, #512	; 0x200
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800ead0:	0412      	lsls	r2, r2, #16
 800ead2:	f402 127c 	and.w	r2, r2, #4128768	; 0x3f0000
 800ead6:	ea42 020c 	orr.w	r2, r2, ip
 800eada:	610a      	str	r2, [r1, #16]
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eadc:	690a      	ldr	r2, [r1, #16]
    hsd->SdCard.BlockSize = 512U;
 800eade:	64d8      	str	r0, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eae0:	3201      	adds	r2, #1
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eae2:	6558      	str	r0, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800eae4:	0292      	lsls	r2, r2, #10
 800eae6:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800eae8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800eaea:	e797      	b.n	800ea1c <HAL_SD_GetCardCSD+0xdc>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eaec:	6802      	ldr	r2, [r0, #0]
    hsd->State = HAL_SD_STATE_READY;
 800eaee:	2101      	movs	r1, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800eaf0:	4805      	ldr	r0, [pc, #20]	; (800eb08 <HAL_SD_GetCardCSD+0x1c8>)
 800eaf2:	6390      	str	r0, [r2, #56]	; 0x38
    return HAL_ERROR;
 800eaf4:	4608      	mov	r0, r1
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800eaf6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eaf8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800eafc:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800eafe:	f883 1030 	strb.w	r1, [r3, #48]	; 0x30
}
 800eb02:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	1fe00fff 	.word	0x1fe00fff

0800eb0c <HAL_SD_InitCard>:
{
 800eb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800eb0e:	2200      	movs	r2, #0
{
 800eb10:	b095      	sub	sp, #84	; 0x54
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800eb12:	2300      	movs	r3, #0
{
 800eb14:	4604      	mov	r4, r0
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800eb16:	2100      	movs	r1, #0
 800eb18:	f44f 3080 	mov.w	r0, #65536	; 0x10000
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800eb1c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb20:	e9cd 2306 	strd	r2, r3, [sp, #24]
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800eb24:	f7fe fdf4 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
  if (sdmmc_clk == 0U)
 800eb28:	b940      	cbnz	r0, 800eb3c <HAL_SD_InitCard+0x30>
    hsd->State = HAL_SD_STATE_READY;
 800eb2a:	2601      	movs	r6, #1
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800eb2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hsd->State = HAL_SD_STATE_READY;
 800eb30:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 800eb34:	6363      	str	r3, [r4, #52]	; 0x34
}
 800eb36:	4630      	mov	r0, r6
 800eb38:	b015      	add	sp, #84	; 0x54
 800eb3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800eb3c:	0a06      	lsrs	r6, r0, #8
 800eb3e:	4b8f      	ldr	r3, [pc, #572]	; (800ed7c <HAL_SD_InitCard+0x270>)
  (void)SDMMC_Init(hsd->Instance, Init);
 800eb40:	aa07      	add	r2, sp, #28
 800eb42:	4605      	mov	r5, r0
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800eb44:	fba3 3606 	umull	r3, r6, r3, r6
  (void)SDMMC_Init(hsd->Instance, Init);
 800eb48:	ab04      	add	r3, sp, #16
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 800eb4a:	0936      	lsrs	r6, r6, #4
  (void)SDMMC_Init(hsd->Instance, Init);
 800eb4c:	9608      	str	r6, [sp, #32]
 800eb4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800eb52:	e88d 0003 	stmia.w	sp, {r0, r1}
 800eb56:	cb0e      	ldmia	r3, {r1, r2, r3}
 800eb58:	6820      	ldr	r0, [r4, #0]
 800eb5a:	f001 f9e5 	bl	800ff28 <SDMMC_Init>
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800eb5e:	6820      	ldr	r0, [r4, #0]
 800eb60:	f001 fa08 	bl	800ff74 <SDMMC_PowerState_ON>
  if (Init.ClockDiv != 0U)
 800eb64:	4b86      	ldr	r3, [pc, #536]	; (800ed80 <HAL_SD_InitCard+0x274>)
 800eb66:	429d      	cmp	r5, r3
 800eb68:	d902      	bls.n	800eb70 <HAL_SD_InitCard+0x64>
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 800eb6a:	0076      	lsls	r6, r6, #1
 800eb6c:	fbb5 f5f6 	udiv	r5, r5, r6
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 800eb70:	4884      	ldr	r0, [pc, #528]	; (800ed84 <HAL_SD_InitCard+0x278>)
 800eb72:	fbb0 f0f5 	udiv	r0, r0, r5
 800eb76:	3001      	adds	r0, #1
 800eb78:	f7fa fa2a 	bl	8008fd0 <HAL_Delay>
  __IO uint32_t count = 0U;
 800eb7c:	2300      	movs	r3, #0
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eb7e:	6820      	ldr	r0, [r4, #0]
  __IO uint32_t count = 0U;
 800eb80:	9303      	str	r3, [sp, #12]
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800eb82:	f001 ff0b 	bl	801099c <SDMMC_CmdGoIdleState>
  if (errorstate != HAL_SD_ERROR_NONE)
 800eb86:	4605      	mov	r5, r0
 800eb88:	b140      	cbz	r0, 800eb9c <HAL_SD_InitCard+0x90>
    hsd->State = HAL_SD_STATE_READY;
 800eb8a:	2601      	movs	r6, #1
 800eb8c:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
}
 800eb90:	4630      	mov	r0, r6
    hsd->ErrorCode |= errorstate;
 800eb92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eb94:	431d      	orrs	r5, r3
 800eb96:	6365      	str	r5, [r4, #52]	; 0x34
}
 800eb98:	b015      	add	sp, #84	; 0x54
 800eb9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800eb9c:	6820      	ldr	r0, [r4, #0]
 800eb9e:	f001 ff29 	bl	80109f4 <SDMMC_CmdOperCond>
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 800eba2:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 800eba6:	d06c      	beq.n	800ec82 <HAL_SD_InitCard+0x176>
    hsd->SdCard.CardVersion = CARD_V2_X;
 800eba8:	2301      	movs	r3, #1
 800ebaa:	63e3      	str	r3, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ebac:	2100      	movs	r1, #0
 800ebae:	6820      	ldr	r0, [r4, #0]
 800ebb0:	f001 ff60 	bl	8010a74 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebb4:	bb08      	cbnz	r0, 800ebfa <HAL_SD_InitCard+0xee>
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ebb6:	9b03      	ldr	r3, [sp, #12]
 800ebb8:	f64f 76fe 	movw	r6, #65534	; 0xfffe
 800ebbc:	42b3      	cmp	r3, r6
 800ebbe:	f200 80d6 	bhi.w	800ed6e <HAL_SD_InitCard+0x262>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ebc2:	4f71      	ldr	r7, [pc, #452]	; (800ed88 <HAL_SD_InitCard+0x27c>)
 800ebc4:	e00b      	b.n	800ebde <HAL_SD_InitCard+0xd2>
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ebc6:	6820      	ldr	r0, [r4, #0]
 800ebc8:	f001 f9e0 	bl	800ff8c <SDMMC_GetResponse>
    count++;
 800ebcc:	9b03      	ldr	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ebce:	2800      	cmp	r0, #0
    count++;
 800ebd0:	f103 0301 	add.w	r3, r3, #1
 800ebd4:	9303      	str	r3, [sp, #12]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ebd6:	9b03      	ldr	r3, [sp, #12]
 800ebd8:	db12      	blt.n	800ec00 <HAL_SD_InitCard+0xf4>
 800ebda:	42b3      	cmp	r3, r6
 800ebdc:	d810      	bhi.n	800ec00 <HAL_SD_InitCard+0xf4>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ebde:	2100      	movs	r1, #0
 800ebe0:	6820      	ldr	r0, [r4, #0]
 800ebe2:	f001 ff47 	bl	8010a74 <SDMMC_CmdAppCommand>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ebe6:	4639      	mov	r1, r7
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebe8:	4605      	mov	r5, r0
 800ebea:	2800      	cmp	r0, #0
 800ebec:	d1cd      	bne.n	800eb8a <HAL_SD_InitCard+0x7e>
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 800ebee:	6820      	ldr	r0, [r4, #0]
 800ebf0:	f001 ffe6 	bl	8010bc0 <SDMMC_CmdAppOperCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ebf4:	4601      	mov	r1, r0
 800ebf6:	2800      	cmp	r0, #0
 800ebf8:	d0e5      	beq.n	800ebc6 <HAL_SD_InitCard+0xba>
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ebfa:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800ebfe:	e7c4      	b.n	800eb8a <HAL_SD_InitCard+0x7e>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ec00:	9a03      	ldr	r2, [sp, #12]
 800ec02:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800ec06:	429a      	cmp	r2, r3
 800ec08:	f200 80ab 	bhi.w	800ed62 <HAL_SD_InitCard+0x256>
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ec0c:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
 800ec10:	d043      	beq.n	800ec9a <HAL_SD_InitCard+0x18e>
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ec12:	2301      	movs	r3, #1
 800ec14:	63a3      	str	r3, [r4, #56]	; 0x38
  uint16_t sd_rca = 0U;
 800ec16:	2300      	movs	r3, #0
 800ec18:	f8ad 300a 	strh.w	r3, [sp, #10]
  uint32_t tickstart = HAL_GetTick();
 800ec1c:	f7fa f9d2 	bl	8008fc4 <HAL_GetTick>
 800ec20:	4605      	mov	r5, r0
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 800ec22:	6820      	ldr	r0, [r4, #0]
 800ec24:	f001 f9ae 	bl	800ff84 <SDMMC_GetPowerState>
 800ec28:	2800      	cmp	r0, #0
 800ec2a:	d038      	beq.n	800ec9e <HAL_SD_InitCard+0x192>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ec2c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ec2e:	2b03      	cmp	r3, #3
 800ec30:	d140      	bne.n	800ecb4 <HAL_SD_InitCard+0x1a8>
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ec32:	2104      	movs	r1, #4
 800ec34:	6820      	ldr	r0, [r4, #0]
 800ec36:	f001 f9a9 	bl	800ff8c <SDMMC_GetResponse>
 800ec3a:	4603      	mov	r3, r0
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ec3c:	a909      	add	r1, sp, #36	; 0x24
 800ec3e:	4620      	mov	r0, r4
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800ec40:	0d1b      	lsrs	r3, r3, #20
 800ec42:	6423      	str	r3, [r4, #64]	; 0x40
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800ec44:	f7ff fe7c 	bl	800e940 <HAL_SD_GetCardCSD>
 800ec48:	4606      	mov	r6, r0
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	f040 808c 	bne.w	800ed68 <HAL_SD_InitCard+0x25c>
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800ec50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ec52:	6820      	ldr	r0, [r4, #0]
 800ec54:	0409      	lsls	r1, r1, #16
 800ec56:	f001 fdfb 	bl	8010850 <SDMMC_CmdSelDesel>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec5a:	bb10      	cbnz	r0, 800eca2 <HAL_SD_InitCard+0x196>
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ec5c:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ec60:	6820      	ldr	r0, [r4, #0]
 800ec62:	f001 f9ad 	bl	800ffc0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f43f af65 	beq.w	800eb36 <HAL_SD_InitCard+0x2a>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec6c:	6822      	ldr	r2, [r4, #0]
    hsd->State = HAL_SD_STATE_READY;
 800ec6e:	2301      	movs	r3, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec70:	4946      	ldr	r1, [pc, #280]	; (800ed8c <HAL_SD_InitCard+0x280>)
    return HAL_ERROR;
 800ec72:	461e      	mov	r6, r3
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ec74:	6391      	str	r1, [r2, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ec76:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800ec78:	4310      	orrs	r0, r2
 800ec7a:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 800ec7c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    return HAL_ERROR;
 800ec80:	e759      	b.n	800eb36 <HAL_SD_InitCard+0x2a>
    hsd->SdCard.CardVersion = CARD_V1_X;
 800ec82:	63e5      	str	r5, [r4, #60]	; 0x3c
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800ec84:	6820      	ldr	r0, [r4, #0]
 800ec86:	f001 fe89 	bl	801099c <SDMMC_CmdGoIdleState>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ec8a:	4605      	mov	r5, r0
 800ec8c:	2800      	cmp	r0, #0
 800ec8e:	f47f af7c 	bne.w	800eb8a <HAL_SD_InitCard+0x7e>
  if (hsd->SdCard.CardVersion == CARD_V2_X)
 800ec92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800ec94:	2b01      	cmp	r3, #1
 800ec96:	d18e      	bne.n	800ebb6 <HAL_SD_InitCard+0xaa>
 800ec98:	e788      	b.n	800ebac <HAL_SD_InitCard+0xa0>
  hsd->SdCard.CardType = CARD_SDSC;
 800ec9a:	63a0      	str	r0, [r4, #56]	; 0x38
 800ec9c:	e7bb      	b.n	800ec16 <HAL_SD_InitCard+0x10a>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ec9e:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
    hsd->State = HAL_SD_STATE_READY;
 800eca2:	2601      	movs	r6, #1
 800eca4:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 800eca8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ecaa:	4318      	orrs	r0, r3
 800ecac:	6360      	str	r0, [r4, #52]	; 0x34
}
 800ecae:	4630      	mov	r0, r6
 800ecb0:	b015      	add	sp, #84	; 0x54
 800ecb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800ecb4:	6820      	ldr	r0, [r4, #0]
 800ecb6:	f002 f90b 	bl	8010ed0 <SDMMC_CmdSendCID>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d1f1      	bne.n	800eca2 <HAL_SD_InitCard+0x196>
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ecbe:	4601      	mov	r1, r0
 800ecc0:	6820      	ldr	r0, [r4, #0]
 800ecc2:	f001 f963 	bl	800ff8c <SDMMC_GetResponse>
 800ecc6:	4603      	mov	r3, r0
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ecc8:	2104      	movs	r1, #4
 800ecca:	6820      	ldr	r0, [r4, #0]
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800eccc:	66e3      	str	r3, [r4, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ecce:	f001 f95d 	bl	800ff8c <SDMMC_GetResponse>
 800ecd2:	4603      	mov	r3, r0
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ecd4:	2108      	movs	r1, #8
 800ecd6:	6820      	ldr	r0, [r4, #0]
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ecd8:	6723      	str	r3, [r4, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ecda:	f001 f957 	bl	800ff8c <SDMMC_GetResponse>
 800ecde:	4603      	mov	r3, r0
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ece0:	210c      	movs	r1, #12
 800ece2:	6820      	ldr	r0, [r4, #0]
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ece4:	6763      	str	r3, [r4, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ece6:	f001 f951 	bl	800ff8c <SDMMC_GetResponse>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ecea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ecec:	67a0      	str	r0, [r4, #120]	; 0x78
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ecee:	2b03      	cmp	r3, #3
 800ecf0:	d09f      	beq.n	800ec32 <HAL_SD_InitCard+0x126>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ecf2:	f241 3687 	movw	r6, #4999	; 0x1387
 800ecf6:	e009      	b.n	800ed0c <HAL_SD_InitCard+0x200>
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ecf8:	6820      	ldr	r0, [r4, #0]
 800ecfa:	f002 f967 	bl	8010fcc <SDMMC_CmdSetRelAdd>
      if (errorstate != HAL_SD_ERROR_NONE)
 800ecfe:	2800      	cmp	r0, #0
 800ed00:	d1cf      	bne.n	800eca2 <HAL_SD_InitCard+0x196>
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 800ed02:	f7fa f95f 	bl	8008fc4 <HAL_GetTick>
 800ed06:	1b43      	subs	r3, r0, r5
 800ed08:	42b3      	cmp	r3, r6
 800ed0a:	d827      	bhi.n	800ed5c <HAL_SD_InitCard+0x250>
    while (sd_rca == 0U)
 800ed0c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800ed10:	f10d 010a 	add.w	r1, sp, #10
    while (sd_rca == 0U)
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d0ef      	beq.n	800ecf8 <HAL_SD_InitCard+0x1ec>
  if (hsd->SdCard.CardType != CARD_SECURED)
 800ed18:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800ed1a:	2a03      	cmp	r2, #3
 800ed1c:	d089      	beq.n	800ec32 <HAL_SD_InitCard+0x126>
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed1e:	0419      	lsls	r1, r3, #16
 800ed20:	6820      	ldr	r0, [r4, #0]
    hsd->SdCard.RelCardAdd = sd_rca;
 800ed22:	6463      	str	r3, [r4, #68]	; 0x44
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed24:	f002 f912 	bl	8010f4c <SDMMC_CmdSendCSD>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	d1ba      	bne.n	800eca2 <HAL_SD_InitCard+0x196>
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ed2c:	4601      	mov	r1, r0
 800ed2e:	6820      	ldr	r0, [r4, #0]
 800ed30:	f001 f92c 	bl	800ff8c <SDMMC_GetResponse>
 800ed34:	4603      	mov	r3, r0
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ed36:	2104      	movs	r1, #4
 800ed38:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ed3a:	65e3      	str	r3, [r4, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ed3c:	f001 f926 	bl	800ff8c <SDMMC_GetResponse>
 800ed40:	4603      	mov	r3, r0
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ed42:	2108      	movs	r1, #8
 800ed44:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800ed46:	6623      	str	r3, [r4, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ed48:	f001 f920 	bl	800ff8c <SDMMC_GetResponse>
 800ed4c:	4603      	mov	r3, r0
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ed4e:	210c      	movs	r1, #12
 800ed50:	6820      	ldr	r0, [r4, #0]
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800ed52:	6663      	str	r3, [r4, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800ed54:	f001 f91a 	bl	800ff8c <SDMMC_GetResponse>
 800ed58:	66a0      	str	r0, [r4, #104]	; 0x68
 800ed5a:	e76a      	b.n	800ec32 <HAL_SD_InitCard+0x126>
        return HAL_SD_ERROR_TIMEOUT;
 800ed5c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
  if (errorstate != HAL_SD_ERROR_NONE)
 800ed60:	e79f      	b.n	800eca2 <HAL_SD_InitCard+0x196>
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ed62:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
 800ed66:	e710      	b.n	800eb8a <HAL_SD_InitCard+0x7e>
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ed68:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800ed6c:	e799      	b.n	800eca2 <HAL_SD_InitCard+0x196>
  if (count >= SDMMC_MAX_VOLT_TRIAL)
 800ed6e:	9b03      	ldr	r3, [sp, #12]
 800ed70:	42b3      	cmp	r3, r6
 800ed72:	d8f6      	bhi.n	800ed62 <HAL_SD_InitCard+0x256>
  hsd->SdCard.CardType = CARD_SDSC;
 800ed74:	2300      	movs	r3, #0
 800ed76:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 800ed78:	e74d      	b.n	800ec16 <HAL_SD_InitCard+0x10a>
 800ed7a:	bf00      	nop
 800ed7c:	014f8b59 	.word	0x014f8b59
 800ed80:	000c34ff 	.word	0x000c34ff
 800ed84:	00012110 	.word	0x00012110
 800ed88:	c1100000 	.word	0xc1100000
 800ed8c:	1fe00fff 	.word	0x1fe00fff

0800ed90 <HAL_SD_GetCardInfo>:
{
 800ed90:	4603      	mov	r3, r0
}
 800ed92:	2000      	movs	r0, #0
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ed94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed96:	600a      	str	r2, [r1, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ed98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed9a:	604a      	str	r2, [r1, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ed9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ed9e:	608a      	str	r2, [r1, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800eda0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eda2:	60ca      	str	r2, [r1, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800eda4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eda6:	610a      	str	r2, [r1, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800eda8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edaa:	614a      	str	r2, [r1, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800edac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800edae:	618a      	str	r2, [r1, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800edb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edb2:	61cb      	str	r3, [r1, #28]
}
 800edb4:	4770      	bx	lr
 800edb6:	bf00      	nop

0800edb8 <HAL_SD_ConfigWideBusOperation>:
{
 800edb8:	b530      	push	{r4, r5, lr}
  hsd->State = HAL_SD_STATE_BUSY;
 800edba:	2203      	movs	r2, #3
  if (hsd->SdCard.CardType != CARD_SECURED)
 800edbc:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
 800edbe:	b089      	sub	sp, #36	; 0x24
 800edc0:	4604      	mov	r4, r0
  if (hsd->SdCard.CardType != CARD_SECURED)
 800edc2:	4293      	cmp	r3, r2
{
 800edc4:	460d      	mov	r5, r1
  hsd->State = HAL_SD_STATE_BUSY;
 800edc6:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
  if (hsd->SdCard.CardType != CARD_SECURED)
 800edca:	d033      	beq.n	800ee34 <HAL_SD_ConfigWideBusOperation+0x7c>
    if (WideMode == SDMMC_BUS_WIDE_8B)
 800edcc:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800edd0:	d030      	beq.n	800ee34 <HAL_SD_ConfigWideBusOperation+0x7c>
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 800edd2:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800edd6:	f000 8084 	beq.w	800eee2 <HAL_SD_ConfigWideBusOperation+0x12a>
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 800edda:	2900      	cmp	r1, #0
 800eddc:	d062      	beq.n	800eea4 <HAL_SD_ConfigWideBusOperation+0xec>
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800edde:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800ede0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ede4:	6343      	str	r3, [r0, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ede6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ede8:	bb5b      	cbnz	r3, 800ee42 <HAL_SD_ConfigWideBusOperation+0x8a>
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800edea:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800edee:	2100      	movs	r1, #0
 800edf0:	f7fe fc8e 	bl	800d710 <HAL_RCCEx_GetPeriphCLKFreq>
    if (sdmmc_clk != 0U)
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d03b      	beq.n	800ee70 <HAL_SD_ConfigWideBusOperation+0xb8>
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800edf8:	6922      	ldr	r2, [r4, #16]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800edfa:	4b55      	ldr	r3, [pc, #340]	; (800ef50 <HAL_SD_ConfigWideBusOperation+0x198>)
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800edfc:	6861      	ldr	r1, [r4, #4]
      Init.BusWide             = WideMode;
 800edfe:	9504      	str	r5, [sp, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ee00:	9205      	str	r2, [sp, #20]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ee02:	fba3 5300 	umull	r5, r3, r3, r0
 800ee06:	6962      	ldr	r2, [r4, #20]
      Init.ClockEdge           = hsd->Init.ClockEdge;
 800ee08:	9102      	str	r1, [sp, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ee0a:	ebb2 6f13 	cmp.w	r2, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ee0e:	68a1      	ldr	r1, [r4, #8]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ee10:	ea4f 6513 	mov.w	r5, r3, lsr #24
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ee14:	9103      	str	r1, [sp, #12]
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 800ee16:	d238      	bcs.n	800ee8a <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800ee18:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ee1a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800ee1e:	d034      	beq.n	800ee8a <HAL_SD_ConfigWideBusOperation+0xd2>
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800ee20:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ee24:	d07f      	beq.n	800ef26 <HAL_SD_ConfigWideBusOperation+0x16e>
        if (hsd->Init.ClockDiv == 0U)
 800ee26:	bb4a      	cbnz	r2, 800ee7c <HAL_SD_ConfigWideBusOperation+0xc4>
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 800ee28:	4b4a      	ldr	r3, [pc, #296]	; (800ef54 <HAL_SD_ConfigWideBusOperation+0x19c>)
 800ee2a:	4298      	cmp	r0, r3
 800ee2c:	f240 8085 	bls.w	800ef3a <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee30:	9506      	str	r5, [sp, #24]
 800ee32:	e02b      	b.n	800ee8c <HAL_SD_ConfigWideBusOperation+0xd4>
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ee34:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ee3a:	6363      	str	r3, [r4, #52]	; 0x34
  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ee3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d0d3      	beq.n	800edea <HAL_SD_ConfigWideBusOperation+0x32>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee42:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800ee44:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee46:	4a44      	ldr	r2, [pc, #272]	; (800ef58 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800ee48:	639a      	str	r2, [r3, #56]	; 0x38
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ee4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ee4e:	6820      	ldr	r0, [r4, #0]
 800ee50:	f001 f8b6 	bl	800ffc0 <SDMMC_CmdBlockLength>
  if (errorstate != HAL_SD_ERROR_NONE)
 800ee54:	b130      	cbz	r0, 800ee64 <HAL_SD_ConfigWideBusOperation+0xac>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee56:	6823      	ldr	r3, [r4, #0]
    status = HAL_ERROR;
 800ee58:	2501      	movs	r5, #1
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ee5a:	4a3f      	ldr	r2, [pc, #252]	; (800ef58 <HAL_SD_ConfigWideBusOperation+0x1a0>)
 800ee5c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ee5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ee60:	4318      	orrs	r0, r3
 800ee62:	6360      	str	r0, [r4, #52]	; 0x34
  hsd->State = HAL_SD_STATE_READY;
 800ee64:	2301      	movs	r3, #1
}
 800ee66:	4628      	mov	r0, r5
  hsd->State = HAL_SD_STATE_READY;
 800ee68:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
}
 800ee6c:	b009      	add	sp, #36	; 0x24
 800ee6e:	bd30      	pop	{r4, r5, pc}
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ee70:	6b63      	ldr	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800ee72:	2501      	movs	r5, #1
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 800ee74:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ee78:	6363      	str	r3, [r4, #52]	; 0x34
      status = HAL_ERROR;
 800ee7a:	e7e6      	b.n	800ee4a <HAL_SD_ConfigWideBusOperation+0x92>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 800ee7c:	0053      	lsls	r3, r2, #1
 800ee7e:	fbb0 f0f3 	udiv	r0, r0, r3
 800ee82:	4b34      	ldr	r3, [pc, #208]	; (800ef54 <HAL_SD_ConfigWideBusOperation+0x19c>)
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 800ee84:	4298      	cmp	r0, r3
 800ee86:	bf88      	it	hi
 800ee88:	462a      	movhi	r2, r5
 800ee8a:	9206      	str	r2, [sp, #24]
      (void)SDMMC_Init(hsd->Instance, Init);
 800ee8c:	aa05      	add	r2, sp, #20
 800ee8e:	ab02      	add	r3, sp, #8
  HAL_StatusTypeDef status = HAL_OK;
 800ee90:	2500      	movs	r5, #0
      (void)SDMMC_Init(hsd->Instance, Init);
 800ee92:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ee96:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ee9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ee9c:	6820      	ldr	r0, [r4, #0]
 800ee9e:	f001 f843 	bl	800ff28 <SDMMC_Init>
 800eea2:	e7d2      	b.n	800ee4a <HAL_SD_ConfigWideBusOperation+0x92>
  uint32_t scr[2U] = {0UL, 0UL};
 800eea4:	2200      	movs	r2, #0
 800eea6:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eea8:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800eeaa:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eeae:	f001 f86d 	bl	800ff8c <SDMMC_GetResponse>
 800eeb2:	0182      	lsls	r2, r0, #6
 800eeb4:	d434      	bmi.n	800ef20 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800eeb6:	a902      	add	r1, sp, #8
 800eeb8:	4620      	mov	r0, r4
 800eeba:	f7ff fa09 	bl	800e2d0 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800eebe:	b960      	cbnz	r0, 800eeda <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800eec0:	9b03      	ldr	r3, [sp, #12]
 800eec2:	03db      	lsls	r3, r3, #15
 800eec4:	d536      	bpl.n	800ef34 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800eec6:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800eec8:	6820      	ldr	r0, [r4, #0]
 800eeca:	0409      	lsls	r1, r1, #16
 800eecc:	f001 fdd2 	bl	8010a74 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800eed0:	b918      	cbnz	r0, 800eeda <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800eed2:	4601      	mov	r1, r0
 800eed4:	6820      	ldr	r0, [r4, #0]
 800eed6:	f001 fead 	bl	8010c34 <SDMMC_CmdBusWidth>
      hsd->ErrorCode |= errorstate;
 800eeda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800eedc:	4318      	orrs	r0, r3
 800eede:	6360      	str	r0, [r4, #52]	; 0x34
 800eee0:	e7ac      	b.n	800ee3c <HAL_SD_ConfigWideBusOperation+0x84>
  uint32_t scr[2U] = {0UL, 0UL};
 800eee2:	2200      	movs	r2, #0
 800eee4:	2300      	movs	r3, #0
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eee6:	2100      	movs	r1, #0
 800eee8:	6800      	ldr	r0, [r0, #0]
  uint32_t scr[2U] = {0UL, 0UL};
 800eeea:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800eeee:	f001 f84d 	bl	800ff8c <SDMMC_GetResponse>
 800eef2:	0180      	lsls	r0, r0, #6
 800eef4:	d414      	bmi.n	800ef20 <HAL_SD_ConfigWideBusOperation+0x168>
  errorstate = SD_FindSCR(hsd, scr);
 800eef6:	a902      	add	r1, sp, #8
 800eef8:	4620      	mov	r0, r4
 800eefa:	f7ff f9e9 	bl	800e2d0 <SD_FindSCR>
  if (errorstate != HAL_SD_ERROR_NONE)
 800eefe:	2800      	cmp	r0, #0
 800ef00:	d1eb      	bne.n	800eeda <HAL_SD_ConfigWideBusOperation+0x122>
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	0359      	lsls	r1, r3, #13
 800ef06:	d515      	bpl.n	800ef34 <HAL_SD_ConfigWideBusOperation+0x17c>
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ef08:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ef0a:	6820      	ldr	r0, [r4, #0]
 800ef0c:	0409      	lsls	r1, r1, #16
 800ef0e:	f001 fdb1 	bl	8010a74 <SDMMC_CmdAppCommand>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef12:	2800      	cmp	r0, #0
 800ef14:	d1e1      	bne.n	800eeda <HAL_SD_ConfigWideBusOperation+0x122>
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800ef16:	2102      	movs	r1, #2
 800ef18:	6820      	ldr	r0, [r4, #0]
 800ef1a:	f001 fe8b 	bl	8010c34 <SDMMC_CmdBusWidth>
    if (errorstate != HAL_SD_ERROR_NONE)
 800ef1e:	e7dc      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x122>
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ef20:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ef24:	e7d9      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x122>
        if (hsd->Init.ClockDiv == 0U)
 800ef26:	b95a      	cbnz	r2, 800ef40 <HAL_SD_ConfigWideBusOperation+0x188>
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 800ef28:	4a0c      	ldr	r2, [pc, #48]	; (800ef5c <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800ef2a:	4290      	cmp	r0, r2
 800ef2c:	d905      	bls.n	800ef3a <HAL_SD_ConfigWideBusOperation+0x182>
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 800ef2e:	0e5b      	lsrs	r3, r3, #25
 800ef30:	9306      	str	r3, [sp, #24]
 800ef32:	e7ab      	b.n	800ee8c <HAL_SD_ConfigWideBusOperation+0xd4>
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ef34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800ef38:	e7cf      	b.n	800eeda <HAL_SD_ConfigWideBusOperation+0x122>
            Init.ClockDiv = hsd->Init.ClockDiv;
 800ef3a:	2300      	movs	r3, #0
 800ef3c:	9306      	str	r3, [sp, #24]
 800ef3e:	e7a5      	b.n	800ee8c <HAL_SD_ConfigWideBusOperation+0xd4>
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 800ef40:	0051      	lsls	r1, r2, #1
 800ef42:	fbb0 f0f1 	udiv	r0, r0, r1
 800ef46:	4905      	ldr	r1, [pc, #20]	; (800ef5c <HAL_SD_ConfigWideBusOperation+0x1a4>)
 800ef48:	4288      	cmp	r0, r1
 800ef4a:	d99e      	bls.n	800ee8a <HAL_SD_ConfigWideBusOperation+0xd2>
 800ef4c:	e7ef      	b.n	800ef2e <HAL_SD_ConfigWideBusOperation+0x176>
 800ef4e:	bf00      	nop
 800ef50:	55e63b89 	.word	0x55e63b89
 800ef54:	017d7840 	.word	0x017d7840
 800ef58:	1fe00fff 	.word	0x1fe00fff
 800ef5c:	02faf080 	.word	0x02faf080

0800ef60 <HAL_SD_Init>:
{
 800ef60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef62:	b087      	sub	sp, #28
  if (hsd == NULL)
 800ef64:	2800      	cmp	r0, #0
 800ef66:	d044      	beq.n	800eff2 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_RESET)
 800ef68:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800ef6c:	4604      	mov	r4, r0
 800ef6e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d041      	beq.n	800effa <HAL_SD_Init+0x9a>
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ef76:	2304      	movs	r3, #4
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ef78:	4620      	mov	r0, r4
  hsd->State = HAL_SD_STATE_PROGRAMMING;
 800ef7a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ef7e:	f7ff fdc5 	bl	800eb0c <HAL_SD_InitCard>
 800ef82:	2800      	cmp	r0, #0
 800ef84:	d135      	bne.n	800eff2 <HAL_SD_Init+0x92>
  if (hsd->State == HAL_SD_STATE_BUSY)
 800ef86:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 800ef8a:	2b03      	cmp	r3, #3
 800ef8c:	d031      	beq.n	800eff2 <HAL_SD_Init+0x92>
 800ef8e:	a901      	add	r1, sp, #4
 800ef90:	4620      	mov	r0, r4
 800ef92:	f7ff fa0f 	bl	800e3b4 <HAL_SD_GetCardStatus.part.0>
  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ef96:	bb60      	cbnz	r0, 800eff2 <HAL_SD_Init+0x92>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ef98:	6ba1      	ldr	r1, [r4, #56]	; 0x38
  speedgrade = CardStatus.UhsSpeedGrade;
 800ef9a:	f89d 2014 	ldrb.w	r2, [sp, #20]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ef9e:	2901      	cmp	r1, #1
  unitsize = CardStatus.UhsAllocationUnitSize;
 800efa0:	f89d 3015 	ldrb.w	r3, [sp, #21]
  speedgrade = CardStatus.UhsSpeedGrade;
 800efa4:	b2d2      	uxtb	r2, r2
  unitsize = CardStatus.UhsAllocationUnitSize;
 800efa6:	b2db      	uxtb	r3, r3
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800efa8:	d02b      	beq.n	800f002 <HAL_SD_Init+0xa2>
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800efaa:	65a0      	str	r0, [r4, #88]	; 0x58
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800efac:	68e1      	ldr	r1, [r4, #12]
 800efae:	4620      	mov	r0, r4
 800efb0:	f7ff ff02 	bl	800edb8 <HAL_SD_ConfigWideBusOperation>
 800efb4:	4606      	mov	r6, r0
 800efb6:	b9e0      	cbnz	r0, 800eff2 <HAL_SD_Init+0x92>
  tickstart = HAL_GetTick();
 800efb8:	f7fa f804 	bl	8008fc4 <HAL_GetTick>
 800efbc:	4607      	mov	r7, r0
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800efbe:	e00c      	b.n	800efda <HAL_SD_Init+0x7a>
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800efc0:	6820      	ldr	r0, [r4, #0]
 800efc2:	4629      	mov	r1, r5
 800efc4:	f000 ffe2 	bl	800ff8c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800efc8:	f3c0 2043 	ubfx	r0, r0, #9, #4
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800efcc:	2804      	cmp	r0, #4
 800efce:	d020      	beq.n	800f012 <HAL_SD_Init+0xb2>
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800efd0:	f7f9 fff8 	bl	8008fc4 <HAL_GetTick>
 800efd4:	1bc3      	subs	r3, r0, r7
 800efd6:	3301      	adds	r3, #1
 800efd8:	d021      	beq.n	800f01e <HAL_SD_Init+0xbe>
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800efda:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800efdc:	6820      	ldr	r0, [r4, #0]
 800efde:	0409      	lsls	r1, r1, #16
 800efe0:	f002 f84c 	bl	801107c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800efe4:	4605      	mov	r5, r0
 800efe6:	2800      	cmp	r0, #0
 800efe8:	d0ea      	beq.n	800efc0 <HAL_SD_Init+0x60>
    hsd->ErrorCode |= errorstate;
 800efea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efec:	4303      	orrs	r3, r0
 800efee:	6363      	str	r3, [r4, #52]	; 0x34
  return (HAL_SD_CardStateTypeDef)cardstate;
 800eff0:	e7ee      	b.n	800efd0 <HAL_SD_Init+0x70>
    return HAL_ERROR;
 800eff2:	2601      	movs	r6, #1
}
 800eff4:	4630      	mov	r0, r6
 800eff6:	b007      	add	sp, #28
 800eff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hsd->Lock = HAL_UNLOCKED;
 800effa:	7602      	strb	r2, [r0, #24]
    HAL_SD_MspInit(hsd);
 800effc:	f7f9 fc26 	bl	800884c <HAL_SD_MspInit>
 800f000:	e7b9      	b.n	800ef76 <HAL_SD_Init+0x16>
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800f002:	4313      	orrs	r3, r2
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800f004:	bf14      	ite	ne
 800f006:	f44f 7300 	movne.w	r3, #512	; 0x200
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800f00a:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800f00e:	65a3      	str	r3, [r4, #88]	; 0x58
 800f010:	e7cc      	b.n	800efac <HAL_SD_Init+0x4c>
  hsd->State = HAL_SD_STATE_READY;
 800f012:	2301      	movs	r3, #1
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800f014:	6365      	str	r5, [r4, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800f016:	62e5      	str	r5, [r4, #44]	; 0x2c
  hsd->State = HAL_SD_STATE_READY;
 800f018:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  return HAL_OK;
 800f01c:	e7ea      	b.n	800eff4 <HAL_SD_Init+0x94>
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f01e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
      hsd->State = HAL_SD_STATE_READY;
 800f022:	2301      	movs	r3, #1
      return HAL_TIMEOUT;
 800f024:	2603      	movs	r6, #3
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800f026:	6362      	str	r2, [r4, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 800f028:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
      return HAL_TIMEOUT;
 800f02c:	e7e2      	b.n	800eff4 <HAL_SD_Init+0x94>
 800f02e:	bf00      	nop

0800f030 <HAL_SD_GetCardState>:
{
 800f030:	b510      	push	{r4, lr}
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f032:	6c41      	ldr	r1, [r0, #68]	; 0x44
{
 800f034:	4604      	mov	r4, r0
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800f036:	6800      	ldr	r0, [r0, #0]
 800f038:	0409      	lsls	r1, r1, #16
 800f03a:	f002 f81f 	bl	801107c <SDMMC_CmdSendStatus>
  if (errorstate != HAL_SD_ERROR_NONE)
 800f03e:	4601      	mov	r1, r0
 800f040:	b120      	cbz	r0, 800f04c <HAL_SD_GetCardState+0x1c>
    hsd->ErrorCode |= errorstate;
 800f042:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f044:	2000      	movs	r0, #0
 800f046:	4319      	orrs	r1, r3
 800f048:	6361      	str	r1, [r4, #52]	; 0x34
}
 800f04a:	bd10      	pop	{r4, pc}
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800f04c:	6820      	ldr	r0, [r4, #0]
 800f04e:	f000 ff9d 	bl	800ff8c <SDMMC_GetResponse>
  cardstate = ((resp1 >> 9U) & 0x0FU);
 800f052:	f3c0 2043 	ubfx	r0, r0, #9, #4
}
 800f056:	bd10      	pop	{r4, pc}

0800f058 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f058:	4770      	bx	lr
 800f05a:	bf00      	nop

0800f05c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
 800f05c:	4770      	bx	lr
 800f05e:	bf00      	nop

0800f060 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
 800f060:	4770      	bx	lr
 800f062:	bf00      	nop

0800f064 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop

0800f068 <HAL_SD_IRQHandler>:
{
 800f068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f06a:	4604      	mov	r4, r0
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f06c:	6800      	ldr	r0, [r0, #0]
{
 800f06e:	b083      	sub	sp, #12
  uint32_t context = hsd->Context;
 800f070:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f072:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f074:	041b      	lsls	r3, r3, #16
 800f076:	d502      	bpl.n	800f07e <HAL_SD_IRQHandler+0x16>
 800f078:	072f      	lsls	r7, r5, #28
 800f07a:	f100 80b7 	bmi.w	800f1ec <HAL_SD_IRQHandler+0x184>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800f07e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f080:	05de      	lsls	r6, r3, #23
 800f082:	d529      	bpl.n	800f0d8 <HAL_SD_IRQHandler+0x70>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f084:	f44f 7280 	mov.w	r2, #256	; 0x100
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800f088:	4b99      	ldr	r3, [pc, #612]	; (800f2f0 <HAL_SD_IRQHandler+0x288>)
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800f08a:	6382      	str	r2, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800f08c:	6822      	ldr	r2, [r4, #0]
 800f08e:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800f090:	400b      	ands	r3, r1
 800f092:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800f094:	6822      	ldr	r2, [r4, #0]
 800f096:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f098:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800f09c:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f09e:	6822      	ldr	r2, [r4, #0]
 800f0a0:	68d3      	ldr	r3, [r2, #12]
 800f0a2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f0a6:	60d3      	str	r3, [r2, #12]
    if ((context & SD_CONTEXT_IT) != 0U)
 800f0a8:	f015 0308 	ands.w	r3, r5, #8
 800f0ac:	d076      	beq.n	800f19c <HAL_SD_IRQHandler+0x134>
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f0ae:	f015 0f22 	tst.w	r5, #34	; 0x22
 800f0b2:	f040 80e9 	bne.w	800f288 <HAL_SD_IRQHandler+0x220>
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f0b6:	6823      	ldr	r3, [r4, #0]
      hsd->State = HAL_SD_STATE_READY;
 800f0b8:	2201      	movs	r2, #1
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f0ba:	498e      	ldr	r1, [pc, #568]	; (800f2f4 <HAL_SD_IRQHandler+0x28c>)
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f0bc:	07a8      	lsls	r0, r5, #30
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f0be:	6399      	str	r1, [r3, #56]	; 0x38
      hsd->Context = SD_CONTEXT_NONE;
 800f0c0:	f04f 0300 	mov.w	r3, #0
      hsd->State = HAL_SD_STATE_READY;
 800f0c4:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f0c8:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f0ca:	f000 80b0 	beq.w	800f22e <HAL_SD_IRQHandler+0x1c6>
        HAL_SD_RxCpltCallback(hsd);
 800f0ce:	4620      	mov	r0, r4
 800f0d0:	f002 f96e 	bl	80113b0 <HAL_SD_RxCpltCallback>
}
 800f0d4:	b003      	add	sp, #12
 800f0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800f0d8:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f0da:	045b      	lsls	r3, r3, #17
 800f0dc:	d502      	bpl.n	800f0e4 <HAL_SD_IRQHandler+0x7c>
 800f0de:	072f      	lsls	r7, r5, #28
 800f0e0:	f100 80aa 	bmi.w	800f238 <HAL_SD_IRQHandler+0x1d0>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800f0e4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f0e6:	f013 0f3a 	tst.w	r3, #58	; 0x3a
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800f0ea:	6b43      	ldr	r3, [r0, #52]	; 0x34
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 800f0ec:	d06e      	beq.n	800f1cc <HAL_SD_IRQHandler+0x164>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800f0ee:	079e      	lsls	r6, r3, #30
 800f0f0:	d503      	bpl.n	800f0fa <HAL_SD_IRQHandler+0x92>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800f0f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f0f4:	f043 0302 	orr.w	r3, r3, #2
 800f0f8:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800f0fa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f0fc:	0719      	lsls	r1, r3, #28
 800f0fe:	d503      	bpl.n	800f108 <HAL_SD_IRQHandler+0xa0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800f100:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f102:	f043 0308 	orr.w	r3, r3, #8
 800f106:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800f108:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f10a:	069a      	lsls	r2, r3, #26
 800f10c:	d503      	bpl.n	800f116 <HAL_SD_IRQHandler+0xae>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800f10e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f110:	f043 0320 	orr.w	r3, r3, #32
 800f114:	6363      	str	r3, [r4, #52]	; 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800f116:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800f118:	06db      	lsls	r3, r3, #27
 800f11a:	d503      	bpl.n	800f124 <HAL_SD_IRQHandler+0xbc>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800f11c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f11e:	f043 0310 	orr.w	r3, r3, #16
 800f122:	6363      	str	r3, [r4, #52]	; 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800f124:	4b73      	ldr	r3, [pc, #460]	; (800f2f4 <HAL_SD_IRQHandler+0x28c>)
 800f126:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 800f128:	6822      	ldr	r2, [r4, #0]
 800f12a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
 800f12c:	f423 739d 	bic.w	r3, r3, #314	; 0x13a
 800f130:	63d3      	str	r3, [r2, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 800f132:	6822      	ldr	r2, [r4, #0]
 800f134:	68d3      	ldr	r3, [r2, #12]
 800f136:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f13a:	60d3      	str	r3, [r2, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800f13c:	6822      	ldr	r2, [r4, #0]
 800f13e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800f140:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f144:	62d3      	str	r3, [r2, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800f146:	6822      	ldr	r2, [r4, #0]
 800f148:	68d3      	ldr	r3, [r2, #12]
 800f14a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f14e:	60d3      	str	r3, [r2, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f150:	6820      	ldr	r0, [r4, #0]
 800f152:	f001 fa73 	bl	801063c <SDMMC_CmdStopTransfer>
 800f156:	6b63      	ldr	r3, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800f158:	6822      	ldr	r2, [r4, #0]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800f15a:	f44f 6100 	mov.w	r1, #2048	; 0x800
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800f15e:	4318      	orrs	r0, r3
 800f160:	6360      	str	r0, [r4, #52]	; 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800f162:	68d3      	ldr	r3, [r2, #12]
 800f164:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f168:	60d3      	str	r3, [r2, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800f16a:	6823      	ldr	r3, [r4, #0]
 800f16c:	6399      	str	r1, [r3, #56]	; 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 800f16e:	f015 0308 	ands.w	r3, r5, #8
 800f172:	f040 8097 	bne.w	800f2a4 <HAL_SD_IRQHandler+0x23c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800f176:	062f      	lsls	r7, r5, #24
 800f178:	d5ac      	bpl.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800f17a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800f17c:	2a00      	cmp	r2, #0
 800f17e:	d0a9      	beq.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800f180:	6821      	ldr	r1, [r4, #0]
        hsd->State = HAL_SD_STATE_READY;
 800f182:	2501      	movs	r5, #1
        HAL_SD_ErrorCallback(hsd);
 800f184:	4620      	mov	r0, r4
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800f186:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 800f188:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800f18c:	63ca      	str	r2, [r1, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800f18e:	6822      	ldr	r2, [r4, #0]
 800f190:	6513      	str	r3, [r2, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800f192:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
        HAL_SD_ErrorCallback(hsd);
 800f196:	f7ff fbd1 	bl	800e93c <HAL_SD_ErrorCallback>
 800f19a:	e79b      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 800f19c:	0629      	lsls	r1, r5, #24
 800f19e:	d599      	bpl.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
      hsd->Instance->DLEN = 0;
 800f1a0:	6822      	ldr	r2, [r4, #0]
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f1a2:	f015 0f22 	tst.w	r5, #34	; 0x22
      hsd->Instance->DLEN = 0;
 800f1a6:	6293      	str	r3, [r2, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800f1a8:	6822      	ldr	r2, [r4, #0]
 800f1aa:	62d3      	str	r3, [r2, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800f1ac:	6822      	ldr	r2, [r4, #0]
 800f1ae:	6513      	str	r3, [r2, #80]	; 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f1b0:	f040 8086 	bne.w	800f2c0 <HAL_SD_IRQHandler+0x258>
      hsd->State = HAL_SD_STATE_READY;
 800f1b4:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800f1b6:	2300      	movs	r3, #0
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f1b8:	f015 0f30 	tst.w	r5, #48	; 0x30
      hsd->State = HAL_SD_STATE_READY;
 800f1bc:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f1c0:	62e3      	str	r3, [r4, #44]	; 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800f1c2:	f040 808b 	bne.w	800f2dc <HAL_SD_IRQHandler+0x274>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800f1c6:	07aa      	lsls	r2, r5, #30
 800f1c8:	d084      	beq.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
 800f1ca:	e780      	b.n	800f0ce <HAL_SD_IRQHandler+0x66>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800f1cc:	00de      	lsls	r6, r3, #3
 800f1ce:	d581      	bpl.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800f1d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f1d4:	6383      	str	r3, [r0, #56]	; 0x38
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800f1d6:	4620      	mov	r0, r4
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800f1d8:	6823      	ldr	r3, [r4, #0]
 800f1da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f1dc:	0759      	lsls	r1, r3, #29
 800f1de:	d46a      	bmi.n	800f2b6 <HAL_SD_IRQHandler+0x24e>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f1e0:	06aa      	lsls	r2, r5, #26
 800f1e2:	f140 8082 	bpl.w	800f2ea <HAL_SD_IRQHandler+0x282>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800f1e6:	f7ff ff3d 	bl	800f064 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
 800f1ea:	e773      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
  if (hsd->RxXferSize >= 32U)
 800f1ec:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800f1ee:	2b1f      	cmp	r3, #31
 800f1f0:	f67f af70 	bls.w	800f0d4 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pRxBuffPtr;
 800f1f4:	6a67      	ldr	r7, [r4, #36]	; 0x24
 800f1f6:	1d3d      	adds	r5, r7, #4
 800f1f8:	f107 0624 	add.w	r6, r7, #36	; 0x24
 800f1fc:	e000      	b.n	800f200 <HAL_SD_IRQHandler+0x198>
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f1fe:	6820      	ldr	r0, [r4, #0]
    for (count = 0U; count < 8U; count++)
 800f200:	3504      	adds	r5, #4
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f202:	f000 fead 	bl	800ff60 <SDMMC_ReadFIFO>
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f206:	0a02      	lsrs	r2, r0, #8
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f208:	0c03      	lsrs	r3, r0, #16
      *tmp = (uint8_t)(data & 0xFFU);
 800f20a:	f805 0c08 	strb.w	r0, [r5, #-8]
    for (count = 0U; count < 8U; count++)
 800f20e:	42b5      	cmp	r5, r6
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f210:	ea4f 6010 	mov.w	r0, r0, lsr #24
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f214:	f805 2c07 	strb.w	r2, [r5, #-7]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f218:	f805 3c06 	strb.w	r3, [r5, #-6]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f21c:	f805 0c05 	strb.w	r0, [r5, #-5]
    for (count = 0U; count < 8U; count++)
 800f220:	d1ed      	bne.n	800f1fe <HAL_SD_IRQHandler+0x196>
    hsd->RxXferSize -= 32U;
 800f222:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      tmp++;
 800f224:	3720      	adds	r7, #32
    hsd->RxXferSize -= 32U;
 800f226:	3b20      	subs	r3, #32
 800f228:	e9c4 7309 	strd	r7, r3, [r4, #36]	; 0x24
 800f22c:	e752      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
        HAL_SD_TxCpltCallback(hsd);
 800f22e:	4620      	mov	r0, r4
 800f230:	f002 f8b8 	bl	80113a4 <HAL_SD_TxCpltCallback>
}
 800f234:	b003      	add	sp, #12
 800f236:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (hsd->TxXferSize >= 32U)
 800f238:	6a23      	ldr	r3, [r4, #32]
 800f23a:	2b1f      	cmp	r3, #31
 800f23c:	f67f af4a 	bls.w	800f0d4 <HAL_SD_IRQHandler+0x6c>
  tmp = hsd->pTxBuffPtr;
 800f240:	69e6      	ldr	r6, [r4, #28]
 800f242:	1d37      	adds	r7, r6, #4
 800f244:	f106 0524 	add.w	r5, r6, #36	; 0x24
 800f248:	e000      	b.n	800f24c <HAL_SD_IRQHandler+0x1e4>
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f24a:	6820      	ldr	r0, [r4, #0]
      data = (uint32_t)(*tmp);
 800f24c:	f817 3c04 	ldrb.w	r3, [r7, #-4]
    for (count = 0U; count < 8U; count++)
 800f250:	3704      	adds	r7, #4
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f252:	a901      	add	r1, sp, #4
      data = (uint32_t)(*tmp);
 800f254:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 8U);
 800f256:	f817 2c07 	ldrb.w	r2, [r7, #-7]
 800f25a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800f25e:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 16U);
 800f260:	f817 2c06 	ldrb.w	r2, [r7, #-6]
 800f264:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f268:	9301      	str	r3, [sp, #4]
      data |= ((uint32_t)(*tmp) << 24U);
 800f26a:	f817 2c05 	ldrb.w	r2, [r7, #-5]
 800f26e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800f272:	9301      	str	r3, [sp, #4]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f274:	f000 fe78 	bl	800ff68 <SDMMC_WriteFIFO>
    for (count = 0U; count < 8U; count++)
 800f278:	42bd      	cmp	r5, r7
 800f27a:	d1e6      	bne.n	800f24a <HAL_SD_IRQHandler+0x1e2>
    hsd->TxXferSize -= 32U;
 800f27c:	6a23      	ldr	r3, [r4, #32]
      tmp++;
 800f27e:	3620      	adds	r6, #32
    hsd->TxXferSize -= 32U;
 800f280:	3b20      	subs	r3, #32
 800f282:	e9c4 6307 	strd	r6, r3, [r4, #28]
}
 800f286:	e725      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f288:	6820      	ldr	r0, [r4, #0]
 800f28a:	f001 f9d7 	bl	801063c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800f28e:	4603      	mov	r3, r0
 800f290:	2800      	cmp	r0, #0
 800f292:	f43f af10 	beq.w	800f0b6 <HAL_SD_IRQHandler+0x4e>
          hsd->ErrorCode |= errorstate;
 800f296:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800f298:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800f29a:	4313      	orrs	r3, r2
 800f29c:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800f29e:	f7ff fb4d 	bl	800e93c <HAL_SD_ErrorCallback>
 800f2a2:	e708      	b.n	800f0b6 <HAL_SD_IRQHandler+0x4e>
      hsd->State = HAL_SD_STATE_READY;
 800f2a4:	2201      	movs	r2, #1
      hsd->Context = SD_CONTEXT_NONE;
 800f2a6:	2300      	movs	r3, #0
      HAL_SD_ErrorCallback(hsd);
 800f2a8:	4620      	mov	r0, r4
      hsd->State = HAL_SD_STATE_READY;
 800f2aa:	f884 2030 	strb.w	r2, [r4, #48]	; 0x30
      hsd->Context = SD_CONTEXT_NONE;
 800f2ae:	62e3      	str	r3, [r4, #44]	; 0x2c
      HAL_SD_ErrorCallback(hsd);
 800f2b0:	f7ff fb44 	bl	800e93c <HAL_SD_ErrorCallback>
 800f2b4:	e70e      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800f2b6:	06ab      	lsls	r3, r5, #26
 800f2b8:	d514      	bpl.n	800f2e4 <HAL_SD_IRQHandler+0x27c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800f2ba:	f7ff fed1 	bl	800f060 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
 800f2be:	e709      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800f2c0:	6820      	ldr	r0, [r4, #0]
 800f2c2:	f001 f9bb 	bl	801063c <SDMMC_CmdStopTransfer>
        if (errorstate != HAL_SD_ERROR_NONE)
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	2800      	cmp	r0, #0
 800f2ca:	f43f af73 	beq.w	800f1b4 <HAL_SD_IRQHandler+0x14c>
          hsd->ErrorCode |= errorstate;
 800f2ce:	6b62      	ldr	r2, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800f2d0:	4620      	mov	r0, r4
          hsd->ErrorCode |= errorstate;
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	6363      	str	r3, [r4, #52]	; 0x34
          HAL_SD_ErrorCallback(hsd);
 800f2d6:	f7ff fb31 	bl	800e93c <HAL_SD_ErrorCallback>
 800f2da:	e76b      	b.n	800f1b4 <HAL_SD_IRQHandler+0x14c>
        HAL_SD_TxCpltCallback(hsd);
 800f2dc:	4620      	mov	r0, r4
 800f2de:	f002 f861 	bl	80113a4 <HAL_SD_TxCpltCallback>
 800f2e2:	e770      	b.n	800f1c6 <HAL_SD_IRQHandler+0x15e>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800f2e4:	f7ff feb8 	bl	800f058 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800f2e8:	e6f4      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800f2ea:	f7ff feb7 	bl	800f05c <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
 800f2ee:	e6f1      	b.n	800f0d4 <HAL_SD_IRQHandler+0x6c>
 800f2f0:	ffff3ec5 	.word	0xffff3ec5
 800f2f4:	18000f3a 	.word	0x18000f3a

0800f2f8 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800f2f8:	b318      	cbz	r0, 800f342 <HAL_SDRAM_Init+0x4a>
{
 800f2fa:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800f2fc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800f300:	4604      	mov	r4, r0
 800f302:	460d      	mov	r5, r1
 800f304:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800f308:	b1b3      	cbz	r3, 800f338 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f30a:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f30c:	2302      	movs	r3, #2
 800f30e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800f312:	f851 0b04 	ldr.w	r0, [r1], #4
 800f316:	f000 fd55 	bl	800fdc4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800f31a:	6862      	ldr	r2, [r4, #4]
 800f31c:	4629      	mov	r1, r5
 800f31e:	6820      	ldr	r0, [r4, #0]
 800f320:	f000 fd8e 	bl	800fe40 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800f324:	4a08      	ldr	r2, [pc, #32]	; (800f348 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f326:	2101      	movs	r1, #1

  return HAL_OK;
 800f328:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800f32a:	6813      	ldr	r3, [r2, #0]
 800f32c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800f330:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800f332:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
 800f336:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
 800f338:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
 800f33c:	f7f6 f8a8 	bl	8005490 <HAL_SDRAM_MspInit>
 800f340:	e7e3      	b.n	800f30a <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
 800f342:	2001      	movs	r0, #1
}
 800f344:	4770      	bx	lr
 800f346:	bf00      	nop
 800f348:	52004000 	.word	0x52004000

0800f34c <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800f34c:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f34e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800f352:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800f354:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800f356:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800f358:	d004      	beq.n	800f364 <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800f35a:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
 800f35e:	2e01      	cmp	r6, #1
 800f360:	d001      	beq.n	800f366 <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
 800f362:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800f364:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f366:	2302      	movs	r3, #2
 800f368:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f36a:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f36c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800f370:	f000 fdb4 	bl	800fedc <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800f374:	682b      	ldr	r3, [r5, #0]
 800f376:	2b02      	cmp	r3, #2
 800f378:	d003      	beq.n	800f382 <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
 800f37a:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
 800f37c:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
 800f380:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f382:	2305      	movs	r3, #5
  return HAL_OK;
 800f384:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800f386:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800f38a:	bd70      	pop	{r4, r5, r6, pc}

0800f38c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800f38c:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f38e:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
 800f392:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800f394:	2b02      	cmp	r3, #2
 800f396:	b2d8      	uxtb	r0, r3
 800f398:	d005      	beq.n	800f3a6 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800f39a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 800f39e:	2b01      	cmp	r3, #1
 800f3a0:	b2dd      	uxtb	r5, r3
 800f3a2:	d001      	beq.n	800f3a8 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
 800f3a4:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
 800f3a6:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f3a8:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f3aa:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800f3ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800f3b0:	f000 fdac 	bl	800ff0c <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
 800f3b4:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800f3b6:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
 800f3ba:	bd38      	pop	{r3, r4, r5, pc}

0800f3bc <SPI_CloseTransfer>:
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
  uint32_t itflag = hspi->Instance->SR;
 800f3bc:	6802      	ldr	r2, [r0, #0]
{
 800f3be:	b410      	push	{r4}
  uint32_t itflag = hspi->Instance->SR;
 800f3c0:	6953      	ldr	r3, [r2, #20]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f3c2:	6991      	ldr	r1, [r2, #24]
 800f3c4:	f041 0108 	orr.w	r1, r1, #8
 800f3c8:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f3ca:	6801      	ldr	r1, [r0, #0]
 800f3cc:	698a      	ldr	r2, [r1, #24]
 800f3ce:	f042 0210 	orr.w	r2, r2, #16
 800f3d2:	618a      	str	r2, [r1, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f3d4:	6801      	ldr	r1, [r0, #0]
 800f3d6:	680a      	ldr	r2, [r1, #0]
 800f3d8:	f022 0201 	bic.w	r2, r2, #1
 800f3dc:	600a      	str	r2, [r1, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800f3de:	6801      	ldr	r1, [r0, #0]
 800f3e0:	4a27      	ldr	r2, [pc, #156]	; (800f480 <SPI_CloseTransfer+0xc4>)
 800f3e2:	690c      	ldr	r4, [r1, #16]
 800f3e4:	4022      	ands	r2, r4
 800f3e6:	610a      	str	r2, [r1, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f3e8:	6801      	ldr	r1, [r0, #0]
 800f3ea:	688a      	ldr	r2, [r1, #8]
 800f3ec:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f3f0:	608a      	str	r2, [r1, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f3f2:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800f3f6:	2a04      	cmp	r2, #4
 800f3f8:	d001      	beq.n	800f3fe <SPI_CloseTransfer+0x42>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f3fa:	069c      	lsls	r4, r3, #26
 800f3fc:	d433      	bmi.n	800f466 <SPI_CloseTransfer+0xaa>
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f3fe:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 800f402:	2a03      	cmp	r2, #3
 800f404:	d001      	beq.n	800f40a <SPI_CloseTransfer+0x4e>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f406:	0659      	lsls	r1, r3, #25
 800f408:	d421      	bmi.n	800f44e <SPI_CloseTransfer+0x92>
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f40a:	059a      	lsls	r2, r3, #22
 800f40c:	d50a      	bpl.n	800f424 <SPI_CloseTransfer+0x68>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f40e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f412:	6801      	ldr	r1, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f414:	f042 0201 	orr.w	r2, r2, #1
 800f418:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f41c:	698a      	ldr	r2, [r1, #24]
 800f41e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f422:	618a      	str	r2, [r1, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f424:	05db      	lsls	r3, r3, #23
 800f426:	d50a      	bpl.n	800f43e <SPI_CloseTransfer+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f428:	f8d0 3084 	ldr.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f42c:	6802      	ldr	r2, [r0, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f42e:	f043 0308 	orr.w	r3, r3, #8
 800f432:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f436:	6993      	ldr	r3, [r2, #24]
 800f438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f43c:	6193      	str	r3, [r2, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f43e:	2300      	movs	r3, #0
  hspi->RxXferCount = (uint16_t)0UL;
}
 800f440:	f85d 4b04 	ldr.w	r4, [sp], #4
  hspi->TxXferCount = (uint16_t)0UL;
 800f444:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f448:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
}
 800f44c:	4770      	bx	lr
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f44e:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f452:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f454:	f042 0204 	orr.w	r2, r2, #4
 800f458:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f45c:	698a      	ldr	r2, [r1, #24]
 800f45e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f462:	618a      	str	r2, [r1, #24]
 800f464:	e7d1      	b.n	800f40a <SPI_CloseTransfer+0x4e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f466:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f46a:	6801      	ldr	r1, [r0, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f46c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800f470:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f474:	698a      	ldr	r2, [r1, #24]
 800f476:	f042 0220 	orr.w	r2, r2, #32
 800f47a:	618a      	str	r2, [r1, #24]
 800f47c:	e7bf      	b.n	800f3fe <SPI_CloseTransfer+0x42>
 800f47e:	bf00      	nop
 800f480:	fffffc90 	.word	0xfffffc90

0800f484 <HAL_SPI_Init>:
  if (hspi == NULL)
 800f484:	2800      	cmp	r0, #0
 800f486:	f000 80be 	beq.w	800f606 <HAL_SPI_Init+0x182>
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f48a:	4a62      	ldr	r2, [pc, #392]	; (800f614 <HAL_SPI_Init+0x190>)
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f48c:	2100      	movs	r1, #0
{
 800f48e:	b538      	push	{r3, r4, r5, lr}
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f490:	6803      	ldr	r3, [r0, #0]
 800f492:	4604      	mov	r4, r0
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f494:	6281      	str	r1, [r0, #40]	; 0x28
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f496:	4293      	cmp	r3, r2
 800f498:	d015      	beq.n	800f4c6 <HAL_SPI_Init+0x42>
 800f49a:	f5a2 4278 	sub.w	r2, r2, #63488	; 0xf800
 800f49e:	4293      	cmp	r3, r2
 800f4a0:	d011      	beq.n	800f4c6 <HAL_SPI_Init+0x42>
 800f4a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800f4a6:	4293      	cmp	r3, r2
 800f4a8:	68c2      	ldr	r2, [r0, #12]
 800f4aa:	f000 80a5 	beq.w	800f5f8 <HAL_SPI_Init+0x174>
 800f4ae:	2a0f      	cmp	r2, #15
 800f4b0:	d807      	bhi.n	800f4c2 <HAL_SPI_Init+0x3e>
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f4b2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800f4b4:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f4b6:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800f4b8:	08d2      	lsrs	r2, r2, #3

  return data_size * fifo_threashold;
 800f4ba:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f4be:	2a08      	cmp	r2, #8
 800f4c0:	d914      	bls.n	800f4ec <HAL_SPI_Init+0x68>
    return HAL_ERROR;
 800f4c2:	2001      	movs	r0, #1
}
 800f4c4:	bd38      	pop	{r3, r4, r5, pc}
  data_size = (data_size + 7UL) / 8UL;
 800f4c6:	68e1      	ldr	r1, [r4, #12]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f4c8:	6be2      	ldr	r2, [r4, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800f4ca:	3108      	adds	r1, #8
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f4cc:	4d51      	ldr	r5, [pc, #324]	; (800f614 <HAL_SPI_Init+0x190>)
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f4ce:	0950      	lsrs	r0, r2, #5
  data_size = (data_size + 7UL) / 8UL;
 800f4d0:	08ca      	lsrs	r2, r1, #3
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f4d2:	4951      	ldr	r1, [pc, #324]	; (800f618 <HAL_SPI_Init+0x194>)
 800f4d4:	428b      	cmp	r3, r1
 800f4d6:	bf18      	it	ne
 800f4d8:	42ab      	cmpne	r3, r5
  return data_size * fifo_threashold;
 800f4da:	fb00 2202 	mla	r2, r0, r2, r2
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f4de:	d003      	beq.n	800f4e8 <HAL_SPI_Init+0x64>
 800f4e0:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800f4e4:	428b      	cmp	r3, r1
 800f4e6:	d101      	bne.n	800f4ec <HAL_SPI_Init+0x68>
 800f4e8:	2a10      	cmp	r2, #16
 800f4ea:	d8ea      	bhi.n	800f4c2 <HAL_SPI_Init+0x3e>
  if (hspi->State == HAL_SPI_STATE_RESET)
 800f4ec:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800f4f0:	f002 01ff 	and.w	r1, r2, #255	; 0xff
 800f4f4:	2a00      	cmp	r2, #0
 800f4f6:	d078      	beq.n	800f5ea <HAL_SPI_Init+0x166>
  hspi->State = HAL_SPI_STATE_BUSY;
 800f4f8:	2202      	movs	r2, #2
 800f4fa:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
  __HAL_SPI_DISABLE(hspi);
 800f4fe:	681a      	ldr	r2, [r3, #0]
 800f500:	f022 0201 	bic.w	r2, r2, #1
 800f504:	601a      	str	r2, [r3, #0]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f506:	6822      	ldr	r2, [r4, #0]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f508:	69a0      	ldr	r0, [r4, #24]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f50a:	6891      	ldr	r1, [r2, #8]
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f50c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800f510:	6863      	ldr	r3, [r4, #4]
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800f512:	f401 11f8 	and.w	r1, r1, #2031616	; 0x1f0000
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f516:	d058      	beq.n	800f5ca <HAL_SPI_Init+0x146>
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800f518:	0258      	lsls	r0, r3, #9
 800f51a:	d502      	bpl.n	800f522 <HAL_SPI_Init+0x9e>
 800f51c:	68e3      	ldr	r3, [r4, #12]
 800f51e:	2b06      	cmp	r3, #6
 800f520:	d84c      	bhi.n	800f5bc <HAL_SPI_Init+0x138>
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f522:	6813      	ldr	r3, [r2, #0]
 800f524:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f528:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f52a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800f52c:	69e3      	ldr	r3, [r4, #28]
 800f52e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800f530:	432b      	orrs	r3, r5
 800f532:	6822      	ldr	r2, [r4, #0]
 800f534:	4303      	orrs	r3, r0
 800f536:	68e0      	ldr	r0, [r4, #12]
 800f538:	4303      	orrs	r3, r0
 800f53a:	430b      	orrs	r3, r1
 800f53c:	6093      	str	r3, [r2, #8]
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800f53e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f540:	69a0      	ldr	r0, [r4, #24]
 800f542:	6822      	ldr	r2, [r4, #0]
 800f544:	e9d4 310d 	ldrd	r3, r1, [r4, #52]	; 0x34
 800f548:	432b      	orrs	r3, r5
 800f54a:	430b      	orrs	r3, r1
 800f54c:	6921      	ldr	r1, [r4, #16]
 800f54e:	4303      	orrs	r3, r0
 800f550:	6960      	ldr	r0, [r4, #20]
 800f552:	430b      	orrs	r3, r1
 800f554:	6a21      	ldr	r1, [r4, #32]
 800f556:	4303      	orrs	r3, r0
 800f558:	6860      	ldr	r0, [r4, #4]
 800f55a:	430b      	orrs	r3, r1
 800f55c:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800f55e:	4303      	orrs	r3, r0
 800f560:	68a0      	ldr	r0, [r4, #8]
 800f562:	430b      	orrs	r3, r1
 800f564:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800f566:	4303      	orrs	r3, r0
 800f568:	430b      	orrs	r3, r1
 800f56a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800f56c:	430b      	orrs	r3, r1
 800f56e:	60d3      	str	r3, [r2, #12]
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f570:	6863      	ldr	r3, [r4, #4]
 800f572:	b96b      	cbnz	r3, 800f590 <HAL_SPI_Init+0x10c>
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f574:	6822      	ldr	r2, [r4, #0]
 800f576:	6893      	ldr	r3, [r2, #8]
 800f578:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 800f57c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800f580:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f582:	6822      	ldr	r2, [r4, #0]
 800f584:	6893      	ldr	r3, [r2, #8]
 800f586:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800f58a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f58e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f590:	6822      	ldr	r2, [r4, #0]
 800f592:	6d13      	ldr	r3, [r2, #80]	; 0x50
 800f594:	f023 0301 	bic.w	r3, r3, #1
 800f598:	6513      	str	r3, [r2, #80]	; 0x50
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f59a:	6863      	ldr	r3, [r4, #4]
 800f59c:	025b      	lsls	r3, r3, #9
 800f59e:	d506      	bpl.n	800f5ae <HAL_SPI_Init+0x12a>
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f5a0:	6822      	ldr	r2, [r4, #0]
 800f5a2:	6d61      	ldr	r1, [r4, #84]	; 0x54
 800f5a4:	68d3      	ldr	r3, [r2, #12]
 800f5a6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f5aa:	430b      	orrs	r3, r1
 800f5ac:	60d3      	str	r3, [r2, #12]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f5ae:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800f5b0:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f5b2:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f5b6:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
}
 800f5ba:	bd38      	pop	{r3, r4, r5, pc}
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800f5bc:	6813      	ldr	r3, [r2, #0]
 800f5be:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800f5c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f5c4:	4303      	orrs	r3, r0
 800f5c6:	6013      	str	r3, [r2, #0]
 800f5c8:	e7af      	b.n	800f52a <HAL_SPI_Init+0xa6>
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f5ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f5ce:	d01c      	beq.n	800f60a <HAL_SPI_Init+0x186>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d1a1      	bne.n	800f518 <HAL_SPI_Init+0x94>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800f5d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f5d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f5da:	d1a2      	bne.n	800f522 <HAL_SPI_Init+0x9e>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f5dc:	6813      	ldr	r3, [r2, #0]
 800f5de:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f5e2:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800f5e4:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f5e8:	e796      	b.n	800f518 <HAL_SPI_Init+0x94>
    HAL_SPI_MspInit(hspi);
 800f5ea:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800f5ec:	f884 1080 	strb.w	r1, [r4, #128]	; 0x80
    HAL_SPI_MspInit(hspi);
 800f5f0:	f7f9 fa12 	bl	8008a18 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 800f5f4:	6823      	ldr	r3, [r4, #0]
 800f5f6:	e77f      	b.n	800f4f8 <HAL_SPI_Init+0x74>
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f5f8:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  data_size = (data_size + 7UL) / 8UL;
 800f5fa:	3208      	adds	r2, #8
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800f5fc:	0949      	lsrs	r1, r1, #5
  data_size = (data_size + 7UL) / 8UL;
 800f5fe:	08d2      	lsrs	r2, r2, #3
  return data_size * fifo_threashold;
 800f600:	fb01 2202 	mla	r2, r1, r2, r2
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f604:	e770      	b.n	800f4e8 <HAL_SPI_Init+0x64>
    return HAL_ERROR;
 800f606:	2001      	movs	r0, #1
}
 800f608:	4770      	bx	lr
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800f60a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d0e5      	beq.n	800f5dc <HAL_SPI_Init+0x158>
 800f610:	e784      	b.n	800f51c <HAL_SPI_Init+0x98>
 800f612:	bf00      	nop
 800f614:	40013000 	.word	0x40013000
 800f618:	40003800 	.word	0x40003800

0800f61c <HAL_SPI_Receive_DMA>:
{
 800f61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 800f61e:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800f622:	2b01      	cmp	r3, #1
 800f624:	f000 80a9 	beq.w	800f77a <HAL_SPI_Receive_DMA+0x15e>
  if (hspi->State != HAL_SPI_STATE_READY)
 800f628:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800f62c:	4615      	mov	r5, r2
  __HAL_LOCK(hspi);
 800f62e:	2201      	movs	r2, #1
 800f630:	4604      	mov	r4, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800f632:	b2de      	uxtb	r6, r3
 800f634:	4293      	cmp	r3, r2
  __HAL_LOCK(hspi);
 800f636:	f880 2080 	strb.w	r2, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800f63a:	f040 8093 	bne.w	800f764 <HAL_SPI_Receive_DMA+0x148>
  if ((pData == NULL) || (Size == 0UL))
 800f63e:	2900      	cmp	r1, #0
 800f640:	f000 808b 	beq.w	800f75a <HAL_SPI_Receive_DMA+0x13e>
 800f644:	fab5 f385 	clz	r3, r5
 800f648:	095b      	lsrs	r3, r3, #5
 800f64a:	2d00      	cmp	r5, #0
 800f64c:	f000 8085 	beq.w	800f75a <HAL_SPI_Receive_DMA+0x13e>
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f650:	6882      	ldr	r2, [r0, #8]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f652:	6641      	str	r1, [r0, #100]	; 0x64
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f654:	2104      	movs	r1, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f656:	f5b2 2fc0 	cmp.w	r2, #393216	; 0x60000
  hspi->RxXferSize  = Size;
 800f65a:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f65e:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
    SPI_1LINE_RX(hspi);
 800f662:	6802      	ldr	r2, [r0, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f664:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f668:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  hspi->RxXferCount = Size;
 800f66c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800f670:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->TxISR       = NULL;
 800f674:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f678:	d07a      	beq.n	800f770 <HAL_SPI_Receive_DMA+0x154>
    SPI_2LINES_RX(hspi);
 800f67a:	68d3      	ldr	r3, [r2, #12]
 800f67c:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800f680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f684:	60d3      	str	r3, [r2, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f686:	68e3      	ldr	r3, [r4, #12]
 800f688:	2b0f      	cmp	r3, #15
 800f68a:	d861      	bhi.n	800f750 <HAL_SPI_Receive_DMA+0x134>
 800f68c:	2b07      	cmp	r3, #7
 800f68e:	f200 8092 	bhi.w	800f7b6 <HAL_SPI_Receive_DMA+0x19a>
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800f692:	6822      	ldr	r2, [r4, #0]
 800f694:	6893      	ldr	r3, [r2, #8]
 800f696:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f69a:	6093      	str	r3, [r2, #8]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800f69c:	68e3      	ldr	r3, [r4, #12]
 800f69e:	2b07      	cmp	r3, #7
 800f6a0:	d86e      	bhi.n	800f780 <HAL_SPI_Receive_DMA+0x164>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f6a2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f6a4:	699a      	ldr	r2, [r3, #24]
 800f6a6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f6aa:	d107      	bne.n	800f6bc <HAL_SPI_Receive_DMA+0xa0>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f6ac:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f6b0:	b292      	uxth	r2, r2
 800f6b2:	3201      	adds	r2, #1
 800f6b4:	0852      	lsrs	r2, r2, #1
 800f6b6:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f6ba:	699a      	ldr	r2, [r3, #24]
 800f6bc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f6c0:	d106      	bne.n	800f6d0 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800f6c2:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f6c6:	b292      	uxth	r2, r2
 800f6c8:	3203      	adds	r2, #3
 800f6ca:	0892      	lsrs	r2, r2, #2
 800f6cc:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f6d0:	4a3e      	ldr	r2, [pc, #248]	; (800f7cc <HAL_SPI_Receive_DMA+0x1b0>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800f6d2:	2700      	movs	r7, #0
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800f6d4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800f6d6:	4a3e      	ldr	r2, [pc, #248]	; (800f7d0 <HAL_SPI_Receive_DMA+0x1b4>)
 800f6d8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f6da:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f6dc:	4a3d      	ldr	r2, [pc, #244]	; (800f7d4 <HAL_SPI_Receive_DMA+0x1b8>)
 800f6de:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f6e0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800f6e2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f6e4:	651f      	str	r7, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800f6e6:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800f6ea:	6821      	ldr	r1, [r4, #0]
 800f6ec:	b29b      	uxth	r3, r3
 800f6ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f6f0:	3130      	adds	r1, #48	; 0x30
 800f6f2:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f6f4:	f7fa f88e 	bl	8009814 <HAL_DMA_Start_IT>
 800f6f8:	2800      	cmp	r0, #0
 800f6fa:	d150      	bne.n	800f79e <HAL_SPI_Receive_DMA+0x182>
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f6fc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f6fe:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f700:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f702:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800f704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f708:	4b33      	ldr	r3, [pc, #204]	; (800f7d8 <HAL_SPI_Receive_DMA+0x1bc>)
 800f70a:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f70e:	bf18      	it	ne
 800f710:	432b      	orrne	r3, r5
 800f712:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800f714:	6822      	ldr	r2, [r4, #0]
 800f716:	6893      	ldr	r3, [r2, #8]
 800f718:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f71c:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f71e:	6822      	ldr	r2, [r4, #0]
 800f720:	6913      	ldr	r3, [r2, #16]
 800f722:	f443 7350 	orr.w	r3, r3, #832	; 0x340
 800f726:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800f728:	6822      	ldr	r2, [r4, #0]
 800f72a:	6813      	ldr	r3, [r2, #0]
 800f72c:	f043 0301 	orr.w	r3, r3, #1
 800f730:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f732:	6863      	ldr	r3, [r4, #4]
 800f734:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f738:	d104      	bne.n	800f744 <HAL_SPI_Receive_DMA+0x128>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f73a:	6822      	ldr	r2, [r4, #0]
 800f73c:	6813      	ldr	r3, [r2, #0]
 800f73e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f742:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800f744:	2300      	movs	r3, #0
  return errorcode;
 800f746:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800f748:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800f74c:	4630      	mov	r0, r6
 800f74e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f750:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f752:	699b      	ldr	r3, [r3, #24]
 800f754:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f758:	d09b      	beq.n	800f692 <HAL_SPI_Receive_DMA+0x76>
    __HAL_UNLOCK(hspi);
 800f75a:	2300      	movs	r3, #0
 800f75c:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800f760:	4630      	mov	r0, r6
 800f762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_UNLOCK(hspi);
 800f764:	2300      	movs	r3, #0
    return errorcode;
 800f766:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800f768:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800f76c:	4630      	mov	r0, r6
 800f76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    SPI_1LINE_RX(hspi);
 800f770:	6813      	ldr	r3, [r2, #0]
 800f772:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f776:	6013      	str	r3, [r2, #0]
 800f778:	e785      	b.n	800f686 <HAL_SPI_Receive_DMA+0x6a>
  __HAL_LOCK(hspi);
 800f77a:	2602      	movs	r6, #2
}
 800f77c:	4630      	mov	r0, r6
 800f77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800f780:	2b0f      	cmp	r3, #15
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f782:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 800f784:	d8a4      	bhi.n	800f6d0 <HAL_SPI_Receive_DMA+0xb4>
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f786:	699a      	ldr	r2, [r3, #24]
 800f788:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f78c:	d1a0      	bne.n	800f6d0 <HAL_SPI_Receive_DMA+0xb4>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f78e:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f792:	b292      	uxth	r2, r2
 800f794:	3201      	adds	r2, #1
 800f796:	0852      	lsrs	r2, r2, #1
 800f798:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800f79c:	e798      	b.n	800f6d0 <HAL_SPI_Receive_DMA+0xb4>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f79e:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f7a2:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800f7a4:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f7a8:	f043 0310 	orr.w	r3, r3, #16
 800f7ac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f7b0:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800f7b4:	e7d4      	b.n	800f760 <HAL_SPI_Receive_DMA+0x144>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f7b6:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f7b8:	699b      	ldr	r3, [r3, #24]
 800f7ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7be:	f43f af68 	beq.w	800f692 <HAL_SPI_Receive_DMA+0x76>
 800f7c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f7c6:	d1c8      	bne.n	800f75a <HAL_SPI_Receive_DMA+0x13e>
 800f7c8:	e763      	b.n	800f692 <HAL_SPI_Receive_DMA+0x76>
 800f7ca:	bf00      	nop
 800f7cc:	0800fa6d 	.word	0x0800fa6d
 800f7d0:	0800fa1d 	.word	0x0800fa1d
 800f7d4:	0800fa89 	.word	0x0800fa89
 800f7d8:	ffff0000 	.word	0xffff0000

0800f7dc <HAL_SPI_TransmitReceive_DMA>:
{
 800f7dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7e0:	461d      	mov	r5, r3
  __HAL_LOCK(hspi);
 800f7e2:	f890 3080 	ldrb.w	r3, [r0, #128]	; 0x80
 800f7e6:	2b01      	cmp	r3, #1
 800f7e8:	f000 809a 	beq.w	800f920 <HAL_SPI_TransmitReceive_DMA+0x144>
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	4604      	mov	r4, r0
 800f7f0:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
  if (hspi->State != HAL_SPI_STATE_READY)
 800f7f4:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800f7f8:	2b01      	cmp	r3, #1
 800f7fa:	b2de      	uxtb	r6, r3
 800f7fc:	d158      	bne.n	800f8b0 <HAL_SPI_TransmitReceive_DMA+0xd4>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f7fe:	2d00      	cmp	r5, #0
 800f800:	bf18      	it	ne
 800f802:	2a00      	cmpne	r2, #0
 800f804:	d04e      	beq.n	800f8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
 800f806:	fab1 f381 	clz	r3, r1
 800f80a:	095b      	lsrs	r3, r3, #5
 800f80c:	2900      	cmp	r1, #0
 800f80e:	d049      	beq.n	800f8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800f810:	65c1      	str	r1, [r0, #92]	; 0x5c
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f812:	2105      	movs	r1, #5
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f814:	6642      	str	r2, [r0, #100]	; 0x64
  SPI_2LINES(hspi);
 800f816:	6802      	ldr	r2, [r0, #0]
  hspi->State       = HAL_SPI_STATE_BUSY_TX_RX;
 800f818:	f880 1081 	strb.w	r1, [r0, #129]	; 0x81
  hspi->TxXferSize  = Size;
 800f81c:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f820:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  hspi->RxXferSize  = Size;
 800f824:	f8a0 5068 	strh.w	r5, [r0, #104]	; 0x68
  hspi->TxXferCount = Size;
 800f828:	f8a0 5062 	strh.w	r5, [r0, #98]	; 0x62
  hspi->RxXferCount = Size;
 800f82c:	f8a0 506a 	strh.w	r5, [r0, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f830:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
  SPI_2LINES(hspi);
 800f834:	68d3      	ldr	r3, [r2, #12]
 800f836:	f423 23c0 	bic.w	r3, r3, #393216	; 0x60000
 800f83a:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f83c:	6802      	ldr	r2, [r0, #0]
 800f83e:	6893      	ldr	r3, [r2, #8]
 800f840:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800f844:	6093      	str	r3, [r2, #8]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f846:	68c3      	ldr	r3, [r0, #12]
 800f848:	2b0f      	cmp	r3, #15
 800f84a:	d938      	bls.n	800f8be <HAL_SPI_TransmitReceive_DMA+0xe2>
 800f84c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800f84e:	699a      	ldr	r2, [r3, #24]
 800f850:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f854:	d126      	bne.n	800f8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f856:	4a6c      	ldr	r2, [pc, #432]	; (800fa08 <HAL_SPI_TransmitReceive_DMA+0x22c>)
  hspi->hdmarx->XferAbortCallback = NULL;
 800f858:	f04f 0800 	mov.w	r8, #0
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f85c:	f8df 91b4 	ldr.w	r9, [pc, #436]	; 800fa14 <HAL_SPI_TransmitReceive_DMA+0x238>
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800f860:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800f862:	4a6a      	ldr	r2, [pc, #424]	; (800fa0c <HAL_SPI_TransmitReceive_DMA+0x230>)
 800f864:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f866:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800f868:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f86a:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
  hspi->hdmarx->XferAbortCallback = NULL;
 800f86e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f870:	f8c3 8050 	str.w	r8, [r3, #80]	; 0x50
                                 hspi->RxXferCount))
 800f874:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 800f878:	6821      	ldr	r1, [r4, #0]
 800f87a:	b29b      	uxth	r3, r3
 800f87c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f87e:	3130      	adds	r1, #48	; 0x30
 800f880:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800f882:	f7f9 ffc7 	bl	8009814 <HAL_DMA_Start_IT>
 800f886:	4607      	mov	r7, r0
 800f888:	2800      	cmp	r0, #0
 800f88a:	d04d      	beq.n	800f928 <HAL_SPI_TransmitReceive_DMA+0x14c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f88c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f890:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800f892:	f884 8080 	strb.w	r8, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f896:	f043 0310 	orr.w	r3, r3, #16
 800f89a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f89e:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800f8a2:	e002      	b.n	800f8aa <HAL_SPI_TransmitReceive_DMA+0xce>
    __HAL_UNLOCK(hspi);
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
}
 800f8aa:	4630      	mov	r0, r6
 800f8ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    __HAL_UNLOCK(hspi);
 800f8b0:	2300      	movs	r3, #0
    return errorcode;
 800f8b2:	2602      	movs	r6, #2
    __HAL_UNLOCK(hspi);
 800f8b4:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 800f8b8:	4630      	mov	r0, r6
 800f8ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 800f8be:	2b07      	cmp	r3, #7
 800f8c0:	d87f      	bhi.n	800f9c2 <HAL_SPI_TransmitReceive_DMA+0x1e6>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f8c2:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800f8c4:	6993      	ldr	r3, [r2, #24]
 800f8c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f8ca:	d107      	bne.n	800f8dc <HAL_SPI_TransmitReceive_DMA+0x100>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800f8cc:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
 800f8d0:	b29b      	uxth	r3, r3
 800f8d2:	3301      	adds	r3, #1
 800f8d4:	085b      	lsrs	r3, r3, #1
 800f8d6:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f8da:	6993      	ldr	r3, [r2, #24]
 800f8dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800f8e0:	d106      	bne.n	800f8f0 <HAL_SPI_TransmitReceive_DMA+0x114>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 3UL) >> 2UL;
 800f8e2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	3303      	adds	r3, #3
 800f8ea:	089b      	lsrs	r3, r3, #2
 800f8ec:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800f8f0:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800f8f2:	699a      	ldr	r2, [r3, #24]
 800f8f4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f8f8:	d107      	bne.n	800f90a <HAL_SPI_TransmitReceive_DMA+0x12e>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f8fa:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f8fe:	b292      	uxth	r2, r2
 800f900:	3201      	adds	r2, #1
 800f902:	0852      	lsrs	r2, r2, #1
 800f904:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f908:	699a      	ldr	r2, [r3, #24]
 800f90a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f90e:	d1a2      	bne.n	800f856 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 800f910:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f914:	b292      	uxth	r2, r2
 800f916:	3203      	adds	r2, #3
 800f918:	0892      	lsrs	r2, r2, #2
 800f91a:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800f91e:	e79a      	b.n	800f856 <HAL_SPI_TransmitReceive_DMA+0x7a>
  __HAL_LOCK(hspi);
 800f920:	2602      	movs	r6, #2
}
 800f922:	4630      	mov	r0, r6
 800f924:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 800f928:	6822      	ldr	r2, [r4, #0]
 800f92a:	6893      	ldr	r3, [r2, #8]
 800f92c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f930:	6093      	str	r3, [r2, #8]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800f932:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f934:	6418      	str	r0, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800f936:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f938:	63d8      	str	r0, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800f93a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f93c:	6518      	str	r0, [r3, #80]	; 0x50
  hspi->hdmatx->XferErrorCallback    = SPI_DMAError;
 800f93e:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800f940:	f8c3 904c 	str.w	r9, [r3, #76]	; 0x4c
                                 hspi->TxXferCount))
 800f944:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->TXDR,
 800f948:	6822      	ldr	r2, [r4, #0]
 800f94a:	b29b      	uxth	r3, r3
 800f94c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800f94e:	3220      	adds	r2, #32
 800f950:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800f952:	f7f9 ff5f 	bl	8009814 <HAL_DMA_Start_IT>
 800f956:	bb40      	cbnz	r0, 800f9aa <HAL_SPI_TransmitReceive_DMA+0x1ce>
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f958:	6fa3      	ldr	r3, [r4, #120]	; 0x78
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f95a:	6822      	ldr	r2, [r4, #0]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f95c:	69db      	ldr	r3, [r3, #28]
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f95e:	6851      	ldr	r1, [r2, #4]
  if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800f960:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 800f964:	4b2a      	ldr	r3, [pc, #168]	; (800fa10 <HAL_SPI_TransmitReceive_DMA+0x234>)
 800f966:	ea03 0301 	and.w	r3, r3, r1
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f96a:	bf18      	it	ne
 800f96c:	432b      	orrne	r3, r5
 800f96e:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN);
 800f970:	6822      	ldr	r2, [r4, #0]
 800f972:	6893      	ldr	r3, [r2, #8]
 800f974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f978:	6093      	str	r3, [r2, #8]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_UDR | SPI_IT_FRE | SPI_IT_MODF));
 800f97a:	6822      	ldr	r2, [r4, #0]
 800f97c:	6913      	ldr	r3, [r2, #16]
 800f97e:	f443 7358 	orr.w	r3, r3, #864	; 0x360
 800f982:	6113      	str	r3, [r2, #16]
  __HAL_SPI_ENABLE(hspi);
 800f984:	6822      	ldr	r2, [r4, #0]
 800f986:	6813      	ldr	r3, [r2, #0]
 800f988:	f043 0301 	orr.w	r3, r3, #1
 800f98c:	6013      	str	r3, [r2, #0]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f98e:	6863      	ldr	r3, [r4, #4]
 800f990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f994:	d104      	bne.n	800f9a0 <HAL_SPI_TransmitReceive_DMA+0x1c4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f996:	6822      	ldr	r2, [r4, #0]
 800f998:	6813      	ldr	r3, [r2, #0]
 800f99a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f99e:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 800f9a0:	2300      	movs	r3, #0
  return errorcode;
 800f9a2:	461e      	mov	r6, r3
  __HAL_UNLOCK(hspi);
 800f9a4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
  return errorcode;
 800f9a8:	e77f      	b.n	800f8aa <HAL_SPI_TransmitReceive_DMA+0xce>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f9aa:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f9ae:	2201      	movs	r2, #1
    __HAL_UNLOCK(hspi);
 800f9b0:	f884 7080 	strb.w	r7, [r4, #128]	; 0x80
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800f9b4:	f043 0310 	orr.w	r3, r3, #16
 800f9b8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800f9bc:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    return errorcode;
 800f9c0:	e773      	b.n	800f8aa <HAL_SPI_TransmitReceive_DMA+0xce>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 800f9c2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800f9c4:	699a      	ldr	r2, [r3, #24]
 800f9c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800f9ca:	d003      	beq.n	800f9d4 <HAL_SPI_TransmitReceive_DMA+0x1f8>
 800f9cc:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f9d0:	f47f af68 	bne.w	800f8a4 <HAL_SPI_TransmitReceive_DMA+0xc8>
    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f9d4:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800f9d6:	6989      	ldr	r1, [r1, #24]
 800f9d8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
 800f9dc:	d107      	bne.n	800f9ee <HAL_SPI_TransmitReceive_DMA+0x212>
      hspi->TxXferCount = (hspi->TxXferCount + (uint16_t) 1UL) >> 1UL;
 800f9de:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
 800f9e2:	b292      	uxth	r2, r2
 800f9e4:	3201      	adds	r2, #1
 800f9e6:	0852      	lsrs	r2, r2, #1
 800f9e8:	f8a4 2062 	strh.w	r2, [r4, #98]	; 0x62
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 800f9ec:	699a      	ldr	r2, [r3, #24]
 800f9ee:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800f9f2:	f47f af30 	bne.w	800f856 <HAL_SPI_TransmitReceive_DMA+0x7a>
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 800f9f6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
 800f9fa:	b292      	uxth	r2, r2
 800f9fc:	3201      	adds	r2, #1
 800f9fe:	0852      	lsrs	r2, r2, #1
 800fa00:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
 800fa04:	e727      	b.n	800f856 <HAL_SPI_TransmitReceive_DMA+0x7a>
 800fa06:	bf00      	nop
 800fa08:	0800fa79 	.word	0x0800fa79
 800fa0c:	0800fa45 	.word	0x0800fa45
 800fa10:	ffff0000 	.word	0xffff0000
 800fa14:	0800fa89 	.word	0x0800fa89

0800fa18 <HAL_SPI_TxCpltCallback>:
 800fa18:	4770      	bx	lr
 800fa1a:	bf00      	nop

0800fa1c <SPI_DMAReceiveCplt>:
{
 800fa1c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa1e:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800fa20:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800fa24:	2b07      	cmp	r3, #7
 800fa26:	d009      	beq.n	800fa3c <SPI_DMAReceiveCplt+0x20>
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 800fa28:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800fa2a:	69db      	ldr	r3, [r3, #28]
 800fa2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa30:	d005      	beq.n	800fa3e <SPI_DMAReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800fa32:	6802      	ldr	r2, [r0, #0]
 800fa34:	6913      	ldr	r3, [r2, #16]
 800fa36:	f043 0308 	orr.w	r3, r3, #8
 800fa3a:	6113      	str	r3, [r2, #16]
}
 800fa3c:	bd08      	pop	{r3, pc}
      HAL_SPI_RxCpltCallback(hspi);
 800fa3e:	f7f5 f983 	bl	8004d48 <HAL_SPI_RxCpltCallback>
}
 800fa42:	bd08      	pop	{r3, pc}

0800fa44 <SPI_DMATransmitReceiveCplt>:
{
 800fa44:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa46:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_ABORT)
 800fa48:	f890 3081 	ldrb.w	r3, [r0, #129]	; 0x81
 800fa4c:	2b07      	cmp	r3, #7
 800fa4e:	d009      	beq.n	800fa64 <SPI_DMATransmitReceiveCplt+0x20>
    if (hspi->hdmatx->Init.Mode == DMA_CIRCULAR)
 800fa50:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800fa52:	69db      	ldr	r3, [r3, #28]
 800fa54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fa58:	d005      	beq.n	800fa66 <SPI_DMATransmitReceiveCplt+0x22>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 800fa5a:	6802      	ldr	r2, [r0, #0]
 800fa5c:	6913      	ldr	r3, [r2, #16]
 800fa5e:	f043 0308 	orr.w	r3, r3, #8
 800fa62:	6113      	str	r3, [r2, #16]
}
 800fa64:	bd08      	pop	{r3, pc}
      HAL_SPI_TxRxCpltCallback(hspi);
 800fa66:	f7f5 fbb7 	bl	80051d8 <HAL_SPI_TxRxCpltCallback>
}
 800fa6a:	bd08      	pop	{r3, pc}

0800fa6c <SPI_DMAHalfReceiveCplt>:
{
 800fa6c:	b508      	push	{r3, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800fa6e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800fa70:	f7f5 fa94 	bl	8004f9c <HAL_SPI_RxHalfCpltCallback>
}
 800fa74:	bd08      	pop	{r3, pc}
 800fa76:	bf00      	nop

0800fa78 <SPI_DMAHalfTransmitReceiveCplt>:
{
 800fa78:	b508      	push	{r3, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800fa7a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800fa7c:	f7f5 fbc8 	bl	8005210 <HAL_SPI_TxRxHalfCpltCallback>
}
 800fa80:	bd08      	pop	{r3, pc}
 800fa82:	bf00      	nop

0800fa84 <HAL_SPI_ErrorCallback>:
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop

0800fa88 <SPI_DMAError>:
{
 800fa88:	b510      	push	{r4, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fa8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800fa8c:	f7fa ff26 	bl	800a8dc <HAL_DMA_GetError>
 800fa90:	2802      	cmp	r0, #2
 800fa92:	d100      	bne.n	800fa96 <SPI_DMAError+0xe>
}
 800fa94:	bd10      	pop	{r4, pc}
  uint32_t itflag = hspi->Instance->SR;
 800fa96:	6822      	ldr	r2, [r4, #0]
 800fa98:	6953      	ldr	r3, [r2, #20]
  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fa9a:	6991      	ldr	r1, [r2, #24]
 800fa9c:	f041 0108 	orr.w	r1, r1, #8
 800faa0:	6191      	str	r1, [r2, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800faa2:	6821      	ldr	r1, [r4, #0]
 800faa4:	698a      	ldr	r2, [r1, #24]
 800faa6:	f042 0210 	orr.w	r2, r2, #16
 800faaa:	618a      	str	r2, [r1, #24]
  __HAL_SPI_DISABLE(hspi);
 800faac:	6821      	ldr	r1, [r4, #0]
 800faae:	680a      	ldr	r2, [r1, #0]
 800fab0:	f022 0201 	bic.w	r2, r2, #1
 800fab4:	600a      	str	r2, [r1, #0]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800fab6:	6821      	ldr	r1, [r4, #0]
 800fab8:	4a2c      	ldr	r2, [pc, #176]	; (800fb6c <SPI_DMAError+0xe4>)
 800faba:	6908      	ldr	r0, [r1, #16]
 800fabc:	4002      	ands	r2, r0
 800fabe:	610a      	str	r2, [r1, #16]
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fac0:	6821      	ldr	r1, [r4, #0]
 800fac2:	688a      	ldr	r2, [r1, #8]
 800fac4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800fac8:	608a      	str	r2, [r1, #8]
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800faca:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800face:	2a04      	cmp	r2, #4
 800fad0:	d001      	beq.n	800fad6 <SPI_DMAError+0x4e>
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800fad2:	0698      	lsls	r0, r3, #26
 800fad4:	d43d      	bmi.n	800fb52 <SPI_DMAError+0xca>
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800fad6:	f894 2081 	ldrb.w	r2, [r4, #129]	; 0x81
 800fada:	2a03      	cmp	r2, #3
 800fadc:	d001      	beq.n	800fae2 <SPI_DMAError+0x5a>
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800fade:	0659      	lsls	r1, r3, #25
 800fae0:	d42b      	bmi.n	800fb3a <SPI_DMAError+0xb2>
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800fae2:	059a      	lsls	r2, r3, #22
 800fae4:	d50a      	bpl.n	800fafc <SPI_DMAError+0x74>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fae6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800faea:	6821      	ldr	r1, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800faec:	f042 0201 	orr.w	r2, r2, #1
 800faf0:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800faf4:	698a      	ldr	r2, [r1, #24]
 800faf6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fafa:	618a      	str	r2, [r1, #24]
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800fafc:	05db      	lsls	r3, r3, #23
 800fafe:	d50a      	bpl.n	800fb16 <SPI_DMAError+0x8e>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fb00:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fb04:	6822      	ldr	r2, [r4, #0]
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fb06:	f043 0308 	orr.w	r3, r3, #8
 800fb0a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fb0e:	6993      	ldr	r3, [r2, #24]
 800fb10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fb14:	6193      	str	r3, [r2, #24]
  hspi->TxXferCount = (uint16_t)0UL;
 800fb16:	2300      	movs	r3, #0
    hspi->State = HAL_SPI_STATE_READY;
 800fb18:	2201      	movs	r2, #1
    HAL_SPI_ErrorCallback(hspi);
 800fb1a:	4620      	mov	r0, r4
  hspi->TxXferCount = (uint16_t)0UL;
 800fb1c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800fb20:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800fb24:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fb28:	f043 0310 	orr.w	r3, r3, #16
 800fb2c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 800fb30:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    HAL_SPI_ErrorCallback(hspi);
 800fb34:	f7ff ffa6 	bl	800fa84 <HAL_SPI_ErrorCallback>
}
 800fb38:	bd10      	pop	{r4, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fb3a:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb3e:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fb40:	f042 0204 	orr.w	r2, r2, #4
 800fb44:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fb48:	698a      	ldr	r2, [r1, #24]
 800fb4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fb4e:	618a      	str	r2, [r1, #24]
 800fb50:	e7c7      	b.n	800fae2 <SPI_DMAError+0x5a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fb52:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fb56:	6821      	ldr	r1, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fb58:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800fb5c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fb60:	698a      	ldr	r2, [r1, #24]
 800fb62:	f042 0220 	orr.w	r2, r2, #32
 800fb66:	618a      	str	r2, [r1, #24]
 800fb68:	e7b5      	b.n	800fad6 <SPI_DMAError+0x4e>
 800fb6a:	bf00      	nop
 800fb6c:	fffffc90 	.word	0xfffffc90

0800fb70 <SPI_DMAAbortOnError>:
{
 800fb70:	b508      	push	{r3, lr}
  hspi->State = HAL_SPI_STATE_READY;
 800fb72:	2201      	movs	r2, #1
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fb74:	6b80      	ldr	r0, [r0, #56]	; 0x38
  hspi->RxXferCount = (uint16_t) 0UL;
 800fb76:	2300      	movs	r3, #0
 800fb78:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800fb7c:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
  hspi->State = HAL_SPI_STATE_READY;
 800fb80:	f880 2081 	strb.w	r2, [r0, #129]	; 0x81
  HAL_SPI_ErrorCallback(hspi);
 800fb84:	f7ff ff7e 	bl	800fa84 <HAL_SPI_ErrorCallback>
}
 800fb88:	bd08      	pop	{r3, pc}
 800fb8a:	bf00      	nop

0800fb8c <HAL_SPI_SuspendCallback>:
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop

0800fb90 <HAL_SPI_IRQHandler>:
{
 800fb90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itsource = hspi->Instance->IER;
 800fb94:	6802      	ldr	r2, [r0, #0]
{
 800fb96:	4604      	mov	r4, r0
  uint32_t itsource = hspi->Instance->IER;
 800fb98:	6911      	ldr	r1, [r2, #16]
  uint32_t itflag   = hspi->Instance->SR;
 800fb9a:	6953      	ldr	r3, [r2, #20]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800fb9c:	6897      	ldr	r7, [r2, #8]
  uint32_t trigger  = itsource & itflag;
 800fb9e:	ea01 0503 	and.w	r5, r1, r3
  HAL_SPI_StateTypeDef State = hspi->State;
 800fba2:	f890 6081 	ldrb.w	r6, [r0, #129]	; 0x81
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800fba6:	051b      	lsls	r3, r3, #20
  HAL_SPI_StateTypeDef State = hspi->State;
 800fba8:	b2f6      	uxtb	r6, r6
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800fbaa:	d502      	bpl.n	800fbb2 <HAL_SPI_IRQHandler+0x22>
 800fbac:	0709      	lsls	r1, r1, #28
 800fbae:	f100 80e2 	bmi.w	800fd76 <HAL_SPI_IRQHandler+0x1e6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800fbb2:	f005 0364 	and.w	r3, r5, #100	; 0x64
 800fbb6:	2b04      	cmp	r3, #4
 800fbb8:	d045      	beq.n	800fc46 <HAL_SPI_IRQHandler+0xb6>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800fbba:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800fbbe:	2b01      	cmp	r3, #1
 800fbc0:	d04b      	beq.n	800fc5a <HAL_SPI_IRQHandler+0xca>
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800fbc2:	f005 0326 	and.w	r3, r5, #38	; 0x26
 800fbc6:	2b02      	cmp	r3, #2
 800fbc8:	f000 80ec 	beq.w	800fda4 <HAL_SPI_IRQHandler+0x214>
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800fbcc:	072b      	lsls	r3, r5, #28
 800fbce:	d564      	bpl.n	800fc9a <HAL_SPI_IRQHandler+0x10a>
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800fbd0:	6993      	ldr	r3, [r2, #24]
 800fbd2:	f043 0308 	orr.w	r3, r3, #8
 800fbd6:	6193      	str	r3, [r2, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800fbd8:	6821      	ldr	r1, [r4, #0]
 800fbda:	698b      	ldr	r3, [r1, #24]
 800fbdc:	f043 0310 	orr.w	r3, r3, #16
 800fbe0:	618b      	str	r3, [r1, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800fbe2:	6821      	ldr	r1, [r4, #0]
 800fbe4:	698b      	ldr	r3, [r1, #24]
 800fbe6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fbea:	618b      	str	r3, [r1, #24]
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800fbec:	6821      	ldr	r1, [r4, #0]
 800fbee:	690b      	ldr	r3, [r1, #16]
 800fbf0:	f023 0308 	bic.w	r3, r3, #8
 800fbf4:	610b      	str	r3, [r1, #16]
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800fbf6:	6823      	ldr	r3, [r4, #0]
 800fbf8:	689b      	ldr	r3, [r3, #8]
 800fbfa:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 800fbfe:	d136      	bne.n	800fc6e <HAL_SPI_IRQHandler+0xde>
      while (hspi->RxXferCount != 0UL)
 800fc00:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d031      	beq.n	800fc6e <HAL_SPI_IRQHandler+0xde>
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fc0a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fc0c:	e00f      	b.n	800fc2e <HAL_SPI_IRQHandler+0x9e>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc12:	600b      	str	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fc14:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fc16:	3104      	adds	r1, #4
 800fc18:	6661      	str	r1, [r4, #100]	; 0x64
        hspi->RxXferCount--;
 800fc1a:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800fc1e:	3b01      	subs	r3, #1
 800fc20:	b29b      	uxth	r3, r3
 800fc22:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800fc26:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800fc2a:	b29b      	uxth	r3, r3
 800fc2c:	b1fb      	cbz	r3, 800fc6e <HAL_SPI_IRQHandler+0xde>
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fc2e:	68e3      	ldr	r3, [r4, #12]
 800fc30:	2b0f      	cmp	r3, #15
 800fc32:	d8ec      	bhi.n	800fc0e <HAL_SPI_IRQHandler+0x7e>
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fc34:	2b07      	cmp	r3, #7
 800fc36:	f240 80ad 	bls.w	800fd94 <HAL_SPI_IRQHandler+0x204>
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fc3a:	8e13      	ldrh	r3, [r2, #48]	; 0x30
 800fc3c:	800b      	strh	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fc3e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fc40:	3102      	adds	r1, #2
 800fc42:	6661      	str	r1, [r4, #100]	; 0x64
 800fc44:	e7e9      	b.n	800fc1a <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800fc46:	4620      	mov	r0, r4
 800fc48:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800fc4a:	4798      	blx	r3
    hspi->RxISR(hspi);
 800fc4c:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fc4e:	4620      	mov	r0, r4
 800fc50:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800fc52:	f005 0345 	and.w	r3, r5, #69	; 0x45
 800fc56:	2b01      	cmp	r3, #1
 800fc58:	d102      	bne.n	800fc60 <HAL_SPI_IRQHandler+0xd0>
    hspi->RxISR(hspi);
 800fc5a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	4798      	blx	r3
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800fc60:	f005 0526 	and.w	r5, r5, #38	; 0x26
 800fc64:	2d02      	cmp	r5, #2
 800fc66:	f000 809d 	beq.w	800fda4 <HAL_SPI_IRQHandler+0x214>
}
 800fc6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SPI_CloseTransfer(hspi);
 800fc6e:	4620      	mov	r0, r4
 800fc70:	f7ff fba4 	bl	800f3bc <SPI_CloseTransfer>
    hspi->State = HAL_SPI_STATE_READY;
 800fc74:	2301      	movs	r3, #1
 800fc76:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fc7a:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	f040 8085 	bne.w	800fd8e <HAL_SPI_IRQHandler+0x1fe>
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800fc84:	2e05      	cmp	r6, #5
 800fc86:	f000 8092 	beq.w	800fdae <HAL_SPI_IRQHandler+0x21e>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800fc8a:	2e04      	cmp	r6, #4
 800fc8c:	f000 8092 	beq.w	800fdb4 <HAL_SPI_IRQHandler+0x224>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800fc90:	2e03      	cmp	r6, #3
 800fc92:	d1ea      	bne.n	800fc6a <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_TxCpltCallback(hspi);
 800fc94:	f7ff fec0 	bl	800fa18 <HAL_SPI_TxCpltCallback>
 800fc98:	e7e7      	b.n	800fc6a <HAL_SPI_IRQHandler+0xda>
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800fc9a:	f415 7f58 	tst.w	r5, #864	; 0x360
 800fc9e:	d0e4      	beq.n	800fc6a <HAL_SPI_IRQHandler+0xda>
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800fca0:	0668      	lsls	r0, r5, #25
 800fca2:	d509      	bpl.n	800fcb8 <HAL_SPI_IRQHandler+0x128>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800fca4:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fca8:	f043 0304 	orr.w	r3, r3, #4
 800fcac:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800fcb0:	6993      	ldr	r3, [r2, #24]
 800fcb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fcb6:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800fcb8:	05a9      	lsls	r1, r5, #22
 800fcba:	d50a      	bpl.n	800fcd2 <HAL_SPI_IRQHandler+0x142>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fcbc:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fcc0:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800fcc2:	f043 0301 	orr.w	r3, r3, #1
 800fcc6:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800fcca:	6993      	ldr	r3, [r2, #24]
 800fccc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fcd0:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800fcd2:	05ea      	lsls	r2, r5, #23
 800fcd4:	d50a      	bpl.n	800fcec <HAL_SPI_IRQHandler+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fcd6:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fcda:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800fcdc:	f043 0308 	orr.w	r3, r3, #8
 800fce0:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800fce4:	6993      	ldr	r3, [r2, #24]
 800fce6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800fcea:	6193      	str	r3, [r2, #24]
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800fcec:	06ab      	lsls	r3, r5, #26
 800fcee:	d50a      	bpl.n	800fd06 <HAL_SPI_IRQHandler+0x176>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fcf0:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fcf4:	6822      	ldr	r2, [r4, #0]
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800fcf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcfa:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800fcfe:	6993      	ldr	r3, [r2, #24]
 800fd00:	f043 0320 	orr.w	r3, r3, #32
 800fd04:	6193      	str	r3, [r2, #24]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fd06:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d0ad      	beq.n	800fc6a <HAL_SPI_IRQHandler+0xda>
      __HAL_SPI_DISABLE(hspi);
 800fd0e:	6822      	ldr	r2, [r4, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800fd10:	f407 4740 	and.w	r7, r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800fd14:	6813      	ldr	r3, [r2, #0]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800fd16:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
      __HAL_SPI_DISABLE(hspi);
 800fd1a:	f023 0301 	bic.w	r3, r3, #1
 800fd1e:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800fd20:	6822      	ldr	r2, [r4, #0]
 800fd22:	4b26      	ldr	r3, [pc, #152]	; (800fdbc <HAL_SPI_IRQHandler+0x22c>)
 800fd24:	6911      	ldr	r1, [r2, #16]
 800fd26:	ea03 0301 	and.w	r3, r3, r1
 800fd2a:	6113      	str	r3, [r2, #16]
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800fd2c:	d12b      	bne.n	800fd86 <HAL_SPI_IRQHandler+0x1f6>
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800fd2e:	6822      	ldr	r2, [r4, #0]
 800fd30:	6893      	ldr	r3, [r2, #8]
 800fd32:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800fd36:	6093      	str	r3, [r2, #8]
        if (hspi->hdmarx != NULL)
 800fd38:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800fd3a:	b15b      	cbz	r3, 800fd54 <HAL_SPI_IRQHandler+0x1c4>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800fd3c:	4a20      	ldr	r2, [pc, #128]	; (800fdc0 <HAL_SPI_IRQHandler+0x230>)
 800fd3e:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800fd40:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800fd42:	f7fa f833 	bl	8009dac <HAL_DMA_Abort_IT>
 800fd46:	b128      	cbz	r0, 800fd54 <HAL_SPI_IRQHandler+0x1c4>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fd48:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fd4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd50:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
        if (hspi->hdmatx != NULL)
 800fd54:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d087      	beq.n	800fc6a <HAL_SPI_IRQHandler+0xda>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800fd5a:	4a19      	ldr	r2, [pc, #100]	; (800fdc0 <HAL_SPI_IRQHandler+0x230>)
 800fd5c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800fd5e:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 800fd60:	f7fa f824 	bl	8009dac <HAL_DMA_Abort_IT>
 800fd64:	2800      	cmp	r0, #0
 800fd66:	d080      	beq.n	800fc6a <HAL_SPI_IRQHandler+0xda>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800fd68:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800fd6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fd70:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 800fd74:	e779      	b.n	800fc6a <HAL_SPI_IRQHandler+0xda>
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800fd76:	6993      	ldr	r3, [r2, #24]
 800fd78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800fd7c:	6193      	str	r3, [r2, #24]
    HAL_SPI_SuspendCallback(hspi);
 800fd7e:	f7ff ff05 	bl	800fb8c <HAL_SPI_SuspendCallback>
}
 800fd82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        hspi->State = HAL_SPI_STATE_READY;
 800fd86:	2301      	movs	r3, #1
        HAL_SPI_ErrorCallback(hspi);
 800fd88:	4620      	mov	r0, r4
        hspi->State = HAL_SPI_STATE_READY;
 800fd8a:	f884 3081 	strb.w	r3, [r4, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800fd8e:	f7ff fe79 	bl	800fa84 <HAL_SPI_ErrorCallback>
 800fd92:	e76a      	b.n	800fc6a <HAL_SPI_IRQHandler+0xda>
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fd94:	6823      	ldr	r3, [r4, #0]
 800fd96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd9a:	700b      	strb	r3, [r1, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fd9c:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800fd9e:	3101      	adds	r1, #1
 800fda0:	6661      	str	r1, [r4, #100]	; 0x64
 800fda2:	e73a      	b.n	800fc1a <HAL_SPI_IRQHandler+0x8a>
    hspi->TxISR(hspi);
 800fda4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800fda6:	4620      	mov	r0, r4
}
 800fda8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hspi->TxISR(hspi);
 800fdac:	4718      	bx	r3
      HAL_SPI_TxRxCpltCallback(hspi);
 800fdae:	f7f5 fa13 	bl	80051d8 <HAL_SPI_TxRxCpltCallback>
 800fdb2:	e75a      	b.n	800fc6a <HAL_SPI_IRQHandler+0xda>
      HAL_SPI_RxCpltCallback(hspi);
 800fdb4:	f7f4 ffc8 	bl	8004d48 <HAL_SPI_RxCpltCallback>
 800fdb8:	e757      	b.n	800fc6a <HAL_SPI_IRQHandler+0xda>
 800fdba:	bf00      	nop
 800fdbc:	fffffc94 	.word	0xfffffc94
 800fdc0:	0800fb71 	.word	0x0800fb71

0800fdc4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fdc4:	680b      	ldr	r3, [r1, #0]
{
 800fdc6:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800fdc8:	b9d3      	cbnz	r3, 800fe00 <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fdca:	6804      	ldr	r4, [r0, #0]
 800fdcc:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 800fdd0:	684a      	ldr	r2, [r1, #4]
 800fdd2:	4023      	ands	r3, r4
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
 800fdda:	4323      	orrs	r3, r4
 800fddc:	4313      	orrs	r3, r2
 800fdde:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
 800fde2:	4323      	orrs	r3, r4
 800fde4:	4313      	orrs	r3, r2
 800fde6:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800fdea:	4323      	orrs	r3, r4
 800fdec:	4313      	orrs	r3, r2
 800fdee:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
 800fdf2:	4323      	orrs	r3, r4
 800fdf4:	4313      	orrs	r3, r2
 800fdf6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800fdf8:	2000      	movs	r0, #0
 800fdfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fdfe:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fe00:	6802      	ldr	r2, [r0, #0]
 800fe02:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
 800fe06:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
 800fe0a:	4322      	orrs	r2, r4
 800fe0c:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 800fe0e:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fe10:	4b0a      	ldr	r3, [pc, #40]	; (800fe3c <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800fe12:	4322      	orrs	r2, r4
 800fe14:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800fe16:	6842      	ldr	r2, [r0, #4]
 800fe18:	4013      	ands	r3, r2
 800fe1a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800fe1e:	4323      	orrs	r3, r4
 800fe20:	4313      	orrs	r3, r2
 800fe22:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
 800fe26:	4323      	orrs	r3, r4
 800fe28:	4313      	orrs	r3, r2
 800fe2a:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
 800fe2e:	4323      	orrs	r3, r4
 800fe30:	4313      	orrs	r3, r2
 800fe32:	6043      	str	r3, [r0, #4]
}
 800fe34:	2000      	movs	r0, #0
 800fe36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe3a:	4770      	bx	lr
 800fe3c:	ffff8000 	.word	0xffff8000

0800fe40 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800fe40:	b530      	push	{r4, r5, lr}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800fe42:	bb02      	cbnz	r2, 800fe86 <FMC_SDRAM_Timing_Init+0x46>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe44:	6883      	ldr	r3, [r0, #8]
 800fe46:	e9d1 2400 	ldrd	r2, r4, [r1]
 800fe4a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fe4e:	3c01      	subs	r4, #1
 800fe50:	3a01      	subs	r2, #1
 800fe52:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800fe56:	4313      	orrs	r3, r2
 800fe58:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
 800fe5c:	3a01      	subs	r2, #1
 800fe5e:	3c01      	subs	r4, #1
 800fe60:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800fe64:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
 800fe68:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
 800fe6c:	6989      	ldr	r1, [r1, #24]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	3c01      	subs	r4, #1
 800fe72:	3901      	subs	r1, #1
 800fe74:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
 800fe78:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800fe7c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fe80:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800fe82:	2000      	movs	r0, #0
 800fe84:	bd30      	pop	{r4, r5, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800fe86:	6885      	ldr	r5, [r0, #8]
 800fe88:	68ca      	ldr	r2, [r1, #12]
 800fe8a:	4b13      	ldr	r3, [pc, #76]	; (800fed8 <FMC_SDRAM_Timing_Init+0x98>)
 800fe8c:	1e54      	subs	r4, r2, #1
 800fe8e:	694a      	ldr	r2, [r1, #20]
 800fe90:	402b      	ands	r3, r5
 800fe92:	3a01      	subs	r2, #1
 800fe94:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
 800fe98:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800fe9c:	6083      	str	r3, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800fe9e:	68c3      	ldr	r3, [r0, #12]
 800fea0:	e9d1 4200 	ldrd	r4, r2, [r1]
 800fea4:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800fea8:	3a01      	subs	r2, #1
 800feaa:	3c01      	subs	r4, #1
 800feac:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800feb0:	ea43 0204 	orr.w	r2, r3, r4
 800feb4:	688c      	ldr	r4, [r1, #8]
 800feb6:	690b      	ldr	r3, [r1, #16]
 800feb8:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
 800febc:	6989      	ldr	r1, [r1, #24]
 800febe:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 800fec2:	ea42 230e 	orr.w	r3, r2, lr, lsl #8
 800fec6:	3901      	subs	r1, #1
 800fec8:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
 800fecc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800fed0:	60c3      	str	r3, [r0, #12]
}
 800fed2:	2000      	movs	r0, #0
 800fed4:	bd30      	pop	{r4, r5, pc}
 800fed6:	bf00      	nop
 800fed8:	ff0f0fff 	.word	0xff0f0fff

0800fedc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800fedc:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fede:	e9d1 3400 	ldrd	r3, r4, [r1]
{
 800fee2:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fee4:	6900      	ldr	r0, [r0, #16]
 800fee6:	4323      	orrs	r3, r4
 800fee8:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
 800feec:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800fef0:	4c05      	ldr	r4, [pc, #20]	; (800ff08 <FMC_SDRAM_SendCommand+0x2c>)
 800fef2:	3901      	subs	r1, #1
 800fef4:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800fef6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800fef8:	4323      	orrs	r3, r4
 800fefa:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
 800fefe:	6113      	str	r3, [r2, #16]
}
 800ff00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff04:	4770      	bx	lr
 800ff06:	bf00      	nop
 800ff08:	ffc00000 	.word	0xffc00000

0800ff0c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ff0c:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ff0e:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
 800ff10:	2000      	movs	r0, #0
{
 800ff12:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800ff14:	6954      	ldr	r4, [r2, #20]
 800ff16:	4023      	ands	r3, r4
 800ff18:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800ff1c:	6151      	str	r1, [r2, #20]
}
 800ff1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	ffffc001 	.word	0xffffc001

0800ff28 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ff28:	b084      	sub	sp, #16
 800ff2a:	b410      	push	{r4}
 800ff2c:	f10d 0c08 	add.w	ip, sp, #8
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 800ff30:	4614      	mov	r4, r2
{
 800ff32:	e88c 000e 	stmia.w	ip, {r1, r2, r3}
  tmpreg |= (Init.ClockEdge           | \
 800ff36:	460b      	mov	r3, r1
             Init.ClockPowerSave      | \
 800ff38:	9904      	ldr	r1, [sp, #16]
{
 800ff3a:	4602      	mov	r2, r0
             Init.BusWide             | \
 800ff3c:	9805      	ldr	r0, [sp, #20]
  tmpreg |= (Init.ClockEdge           | \
 800ff3e:	4323      	orrs	r3, r4
             Init.HardwareFlowControl | \
             Init.ClockDiv
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff40:	6854      	ldr	r4, [r2, #4]
             Init.ClockPowerSave      | \
 800ff42:	430b      	orrs	r3, r1
             Init.HardwareFlowControl | \
 800ff44:	9906      	ldr	r1, [sp, #24]
             Init.BusWide             | \
 800ff46:	4303      	orrs	r3, r0

  return HAL_OK;
}
 800ff48:	2000      	movs	r0, #0
             Init.HardwareFlowControl | \
 800ff4a:	430b      	orrs	r3, r1
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800ff4c:	4903      	ldr	r1, [pc, #12]	; (800ff5c <SDMMC_Init+0x34>)
 800ff4e:	4021      	ands	r1, r4
 800ff50:	430b      	orrs	r3, r1
 800ff52:	6053      	str	r3, [r2, #4]
}
 800ff54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ff58:	b004      	add	sp, #16
 800ff5a:	4770      	bx	lr
 800ff5c:	ffc02c00 	.word	0xffc02c00

0800ff60 <SDMMC_ReadFIFO>:
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800ff60:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
}
 800ff64:	4770      	bx	lr
 800ff66:	bf00      	nop

0800ff68 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800ff68:	4603      	mov	r3, r0
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800ff6a:	680a      	ldr	r2, [r1, #0]

  return HAL_OK;
}
 800ff6c:	2000      	movs	r0, #0
  SDMMCx->FIFO = *pWriteData;
 800ff6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800ff72:	4770      	bx	lr

0800ff74 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800ff74:	4603      	mov	r3, r0
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;

  return HAL_OK;
}
 800ff76:	2000      	movs	r0, #0
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800ff78:	681a      	ldr	r2, [r3, #0]
 800ff7a:	f042 0203 	orr.w	r2, r2, #3
 800ff7e:	601a      	str	r2, [r3, #0]
}
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop

0800ff84 <SDMMC_GetPowerState>:
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ff84:	6800      	ldr	r0, [r0, #0]
}
 800ff86:	f000 0003 	and.w	r0, r0, #3
 800ff8a:	4770      	bx	lr

0800ff8c <SDMMC_GetResponse>:

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800ff8c:	3014      	adds	r0, #20

  return (*(__IO uint32_t *) tmp);
 800ff8e:	5840      	ldr	r0, [r0, r1]
}
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop

0800ff94 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 800ff94:	b430      	push	{r4, r5}
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ff96:	680b      	ldr	r3, [r1, #0]
{
 800ff98:	4602      	mov	r2, r0
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ff9a:	6243      	str	r3, [r0, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ff9c:	684b      	ldr	r3, [r1, #4]
 800ff9e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
                       Data->TransferDir   | \
 800ffa0:	690d      	ldr	r5, [r1, #16]
                       Data->TransferMode  | \
                       Data->DPSM);

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ffa2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 800ffa4:	e9d1 3402 	ldrd	r3, r4, [r1, #8]
 800ffa8:	4323      	orrs	r3, r4
                       Data->TransferMode  | \
 800ffaa:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ffac:	f020 01ff 	bic.w	r1, r0, #255	; 0xff

  return HAL_OK;

}
 800ffb0:	2000      	movs	r0, #0
                       Data->TransferDir   | \
 800ffb2:	432b      	orrs	r3, r5
                       Data->TransferMode  | \
 800ffb4:	4323      	orrs	r3, r4
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ffb6:	430b      	orrs	r3, r1
 800ffb8:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 800ffba:	bc30      	pop	{r4, r5}
 800ffbc:	4770      	bx	lr
 800ffbe:	bf00      	nop

0800ffc0 <SDMMC_CmdBlockLength>:
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffc0:	4a4c      	ldr	r2, [pc, #304]	; (80100f4 <SDMMC_CmdBlockLength+0x134>)
 800ffc2:	4b4d      	ldr	r3, [pc, #308]	; (80100f8 <SDMMC_CmdBlockLength+0x138>)
{
 800ffc4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffc6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 800ffc8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffca:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffce:	68c1      	ldr	r1, [r0, #12]
 800ffd0:	4c4a      	ldr	r4, [pc, #296]	; (80100fc <SDMMC_CmdBlockLength+0x13c>)
 800ffd2:	f241 1310 	movw	r3, #4368	; 0x1110
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffd6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffd8:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffda:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffde:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 800ffe0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800ffe4:	60c3      	str	r3, [r0, #12]

  do
  {
    if (count-- == 0U)
 800ffe6:	b14a      	cbz	r2, 800fffc <SDMMC_CmdBlockLength+0x3c>
 800ffe8:	1e53      	subs	r3, r2, #1
    {
      return SDMMC_ERROR_TIMEOUT;
    }
    sta_reg = SDMMCx->STA;
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 800ffea:	4945      	ldr	r1, [pc, #276]	; (8010100 <SDMMC_CmdBlockLength+0x140>)
    sta_reg = SDMMCx->STA;
 800ffec:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 800ffee:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 800fff0:	420a      	tst	r2, r1
 800fff2:	d001      	beq.n	800fff8 <SDMMC_CmdBlockLength+0x38>
 800fff4:	0492      	lsls	r2, r2, #18
 800fff6:	d507      	bpl.n	8010008 <SDMMC_CmdBlockLength+0x48>
    if (count-- == 0U)
 800fff8:	1c5c      	adds	r4, r3, #1
 800fffa:	d1f7      	bne.n	800ffec <SDMMC_CmdBlockLength+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 800fffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010000:	4618      	mov	r0, r3
 8010002:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010006:	4770      	bx	lr

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010008:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801000a:	075c      	lsls	r4, r3, #29
 801000c:	d43d      	bmi.n	801008a <SDMMC_CmdBlockLength+0xca>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801000e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010010:	f013 0301 	ands.w	r3, r3, #1
 8010014:	d134      	bne.n	8010080 <SDMMC_CmdBlockLength+0xc0>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010016:	4b3b      	ldr	r3, [pc, #236]	; (8010104 <SDMMC_CmdBlockLength+0x144>)
 8010018:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801001a:	6903      	ldr	r3, [r0, #16]

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801001c:	b2db      	uxtb	r3, r3
 801001e:	2b10      	cmp	r3, #16
 8010020:	d131      	bne.n	8010086 <SDMMC_CmdBlockLength+0xc6>
  return (*(__IO uint32_t *) tmp);
 8010022:	6942      	ldr	r2, [r0, #20]
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010024:	4b38      	ldr	r3, [pc, #224]	; (8010108 <SDMMC_CmdBlockLength+0x148>)
 8010026:	4013      	ands	r3, r2
 8010028:	2b00      	cmp	r3, #0
 801002a:	d0e9      	beq.n	8010000 <SDMMC_CmdBlockLength+0x40>
  {
    return SDMMC_ERROR_NONE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801002c:	2a00      	cmp	r2, #0
 801002e:	db30      	blt.n	8010092 <SDMMC_CmdBlockLength+0xd2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010030:	0051      	lsls	r1, r2, #1
 8010032:	d431      	bmi.n	8010098 <SDMMC_CmdBlockLength+0xd8>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010034:	0094      	lsls	r4, r2, #2
 8010036:	d431      	bmi.n	801009c <SDMMC_CmdBlockLength+0xdc>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010038:	00d0      	lsls	r0, r2, #3
 801003a:	d431      	bmi.n	80100a0 <SDMMC_CmdBlockLength+0xe0>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801003c:	0111      	lsls	r1, r2, #4
 801003e:	d432      	bmi.n	80100a6 <SDMMC_CmdBlockLength+0xe6>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010040:	0154      	lsls	r4, r2, #5
 8010042:	d433      	bmi.n	80100ac <SDMMC_CmdBlockLength+0xec>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010044:	01d0      	lsls	r0, r2, #7
 8010046:	d434      	bmi.n	80100b2 <SDMMC_CmdBlockLength+0xf2>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010048:	0211      	lsls	r1, r2, #8
 801004a:	d435      	bmi.n	80100b8 <SDMMC_CmdBlockLength+0xf8>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801004c:	0254      	lsls	r4, r2, #9
 801004e:	d436      	bmi.n	80100be <SDMMC_CmdBlockLength+0xfe>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010050:	0290      	lsls	r0, r2, #10
 8010052:	d440      	bmi.n	80100d6 <SDMMC_CmdBlockLength+0x116>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010054:	02d1      	lsls	r1, r2, #11
 8010056:	d43b      	bmi.n	80100d0 <SDMMC_CmdBlockLength+0x110>
  {
    return SDMMC_ERROR_CC_ERR;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010058:	0354      	lsls	r4, r2, #13
 801005a:	d436      	bmi.n	80100ca <SDMMC_CmdBlockLength+0x10a>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801005c:	0390      	lsls	r0, r2, #14
 801005e:	d431      	bmi.n	80100c4 <SDMMC_CmdBlockLength+0x104>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010060:	03d1      	lsls	r1, r2, #15
 8010062:	d444      	bmi.n	80100ee <SDMMC_CmdBlockLength+0x12e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010064:	0414      	lsls	r4, r2, #16
 8010066:	d43f      	bmi.n	80100e8 <SDMMC_CmdBlockLength+0x128>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010068:	0450      	lsls	r0, r2, #17
 801006a:	d43a      	bmi.n	80100e2 <SDMMC_CmdBlockLength+0x122>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801006c:	0491      	lsls	r1, r2, #18
 801006e:	d435      	bmi.n	80100dc <SDMMC_CmdBlockLength+0x11c>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010070:	f012 0f08 	tst.w	r2, #8
 8010074:	bf14      	ite	ne
 8010076:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801007a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801007e:	e7bf      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010080:	2201      	movs	r2, #1
 8010082:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010084:	e7bc      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010086:	2301      	movs	r3, #1
 8010088:	e7ba      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801008a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801008c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801008e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010090:	e7b6      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010092:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010096:	e7b3      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010098:	2340      	movs	r3, #64	; 0x40
 801009a:	e7b1      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801009c:	2380      	movs	r3, #128	; 0x80
 801009e:	e7af      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80100a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80100a4:	e7ac      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80100a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80100aa:	e7a9      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80100ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100b0:	e7a6      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80100b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80100b6:	e7a3      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80100b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80100bc:	e7a0      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80100be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80100c2:	e79d      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80100c4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80100c8:	e79a      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80100ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80100ce:	e797      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CC_ERR;
 80100d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80100d4:	e794      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80100d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80100da:	e791      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80100dc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80100e0:	e78e      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80100e2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80100e6:	e78b      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80100e8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80100ec:	e788      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80100ee:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80100f2:	e785      	b.n	8010000 <SDMMC_CmdBlockLength+0x40>
 80100f4:	20000728 	.word	0x20000728
 80100f8:	10624dd3 	.word	0x10624dd3
 80100fc:	fffee0c0 	.word	0xfffee0c0
 8010100:	00200045 	.word	0x00200045
 8010104:	002000c5 	.word	0x002000c5
 8010108:	fdffe008 	.word	0xfdffe008

0801010c <SDMMC_CmdReadSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801010c:	4a4c      	ldr	r2, [pc, #304]	; (8010240 <SDMMC_CmdReadSingleBlock+0x134>)
 801010e:	4b4d      	ldr	r3, [pc, #308]	; (8010244 <SDMMC_CmdReadSingleBlock+0x138>)
{
 8010110:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010112:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010114:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010116:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801011a:	68c1      	ldr	r1, [r0, #12]
 801011c:	4c4a      	ldr	r4, [pc, #296]	; (8010248 <SDMMC_CmdReadSingleBlock+0x13c>)
 801011e:	f241 1311 	movw	r3, #4369	; 0x1111
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010122:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010124:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010126:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801012a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801012c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010130:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010132:	b14a      	cbz	r2, 8010148 <SDMMC_CmdReadSingleBlock+0x3c>
 8010134:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010136:	4945      	ldr	r1, [pc, #276]	; (801024c <SDMMC_CmdReadSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8010138:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801013a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801013c:	420a      	tst	r2, r1
 801013e:	d001      	beq.n	8010144 <SDMMC_CmdReadSingleBlock+0x38>
 8010140:	0492      	lsls	r2, r2, #18
 8010142:	d507      	bpl.n	8010154 <SDMMC_CmdReadSingleBlock+0x48>
    if (count-- == 0U)
 8010144:	1c5c      	adds	r4, r3, #1
 8010146:	d1f7      	bne.n	8010138 <SDMMC_CmdReadSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801014c:	4618      	mov	r0, r3
 801014e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010152:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010154:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010156:	075c      	lsls	r4, r3, #29
 8010158:	d43d      	bmi.n	80101d6 <SDMMC_CmdReadSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801015a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801015c:	f013 0301 	ands.w	r3, r3, #1
 8010160:	d134      	bne.n	80101cc <SDMMC_CmdReadSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010162:	4b3b      	ldr	r3, [pc, #236]	; (8010250 <SDMMC_CmdReadSingleBlock+0x144>)
 8010164:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010166:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010168:	b2db      	uxtb	r3, r3
 801016a:	2b11      	cmp	r3, #17
 801016c:	d131      	bne.n	80101d2 <SDMMC_CmdReadSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 801016e:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010170:	4b38      	ldr	r3, [pc, #224]	; (8010254 <SDMMC_CmdReadSingleBlock+0x148>)
 8010172:	4013      	ands	r3, r2
 8010174:	2b00      	cmp	r3, #0
 8010176:	d0e9      	beq.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010178:	2a00      	cmp	r2, #0
 801017a:	db30      	blt.n	80101de <SDMMC_CmdReadSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801017c:	0051      	lsls	r1, r2, #1
 801017e:	d431      	bmi.n	80101e4 <SDMMC_CmdReadSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010180:	0094      	lsls	r4, r2, #2
 8010182:	d431      	bmi.n	80101e8 <SDMMC_CmdReadSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010184:	00d0      	lsls	r0, r2, #3
 8010186:	d431      	bmi.n	80101ec <SDMMC_CmdReadSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010188:	0111      	lsls	r1, r2, #4
 801018a:	d432      	bmi.n	80101f2 <SDMMC_CmdReadSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801018c:	0154      	lsls	r4, r2, #5
 801018e:	d433      	bmi.n	80101f8 <SDMMC_CmdReadSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010190:	01d0      	lsls	r0, r2, #7
 8010192:	d434      	bmi.n	80101fe <SDMMC_CmdReadSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010194:	0211      	lsls	r1, r2, #8
 8010196:	d435      	bmi.n	8010204 <SDMMC_CmdReadSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010198:	0254      	lsls	r4, r2, #9
 801019a:	d436      	bmi.n	801020a <SDMMC_CmdReadSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801019c:	0290      	lsls	r0, r2, #10
 801019e:	d440      	bmi.n	8010222 <SDMMC_CmdReadSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80101a0:	02d1      	lsls	r1, r2, #11
 80101a2:	d43b      	bmi.n	801021c <SDMMC_CmdReadSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80101a4:	0354      	lsls	r4, r2, #13
 80101a6:	d436      	bmi.n	8010216 <SDMMC_CmdReadSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80101a8:	0390      	lsls	r0, r2, #14
 80101aa:	d431      	bmi.n	8010210 <SDMMC_CmdReadSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80101ac:	03d1      	lsls	r1, r2, #15
 80101ae:	d444      	bmi.n	801023a <SDMMC_CmdReadSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80101b0:	0414      	lsls	r4, r2, #16
 80101b2:	d43f      	bmi.n	8010234 <SDMMC_CmdReadSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80101b4:	0450      	lsls	r0, r2, #17
 80101b6:	d43a      	bmi.n	801022e <SDMMC_CmdReadSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80101b8:	0491      	lsls	r1, r2, #18
 80101ba:	d435      	bmi.n	8010228 <SDMMC_CmdReadSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80101bc:	f012 0f08 	tst.w	r2, #8
 80101c0:	bf14      	ite	ne
 80101c2:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80101c6:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80101ca:	e7bf      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80101cc:	2201      	movs	r2, #1
 80101ce:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101d0:	e7bc      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80101d2:	2301      	movs	r3, #1
 80101d4:	e7ba      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101d6:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101d8:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80101da:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80101dc:	e7b6      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80101de:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80101e2:	e7b3      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80101e4:	2340      	movs	r3, #64	; 0x40
 80101e6:	e7b1      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80101e8:	2380      	movs	r3, #128	; 0x80
 80101ea:	e7af      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80101ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80101f0:	e7ac      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80101f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80101f6:	e7a9      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80101f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80101fc:	e7a6      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80101fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010202:	e7a3      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010204:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010208:	e7a0      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801020a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801020e:	e79d      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010210:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010214:	e79a      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010216:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801021a:	e797      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 801021c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010220:	e794      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010222:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010226:	e791      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010228:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801022c:	e78e      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801022e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010232:	e78b      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010234:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010238:	e788      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801023a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801023e:	e785      	b.n	801014c <SDMMC_CmdReadSingleBlock+0x40>
 8010240:	20000728 	.word	0x20000728
 8010244:	10624dd3 	.word	0x10624dd3
 8010248:	fffee0c0 	.word	0xfffee0c0
 801024c:	00200045 	.word	0x00200045
 8010250:	002000c5 	.word	0x002000c5
 8010254:	fdffe008 	.word	0xfdffe008

08010258 <SDMMC_CmdReadMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010258:	4a4c      	ldr	r2, [pc, #304]	; (801038c <SDMMC_CmdReadMultiBlock+0x134>)
 801025a:	4b4d      	ldr	r3, [pc, #308]	; (8010390 <SDMMC_CmdReadMultiBlock+0x138>)
{
 801025c:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801025e:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010260:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010262:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010266:	68c1      	ldr	r1, [r0, #12]
 8010268:	4c4a      	ldr	r4, [pc, #296]	; (8010394 <SDMMC_CmdReadMultiBlock+0x13c>)
 801026a:	f241 1312 	movw	r3, #4370	; 0x1112
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801026e:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010270:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010272:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010276:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010278:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801027c:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 801027e:	b14a      	cbz	r2, 8010294 <SDMMC_CmdReadMultiBlock+0x3c>
 8010280:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010282:	4945      	ldr	r1, [pc, #276]	; (8010398 <SDMMC_CmdReadMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 8010284:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010286:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010288:	420a      	tst	r2, r1
 801028a:	d001      	beq.n	8010290 <SDMMC_CmdReadMultiBlock+0x38>
 801028c:	0492      	lsls	r2, r2, #18
 801028e:	d507      	bpl.n	80102a0 <SDMMC_CmdReadMultiBlock+0x48>
    if (count-- == 0U)
 8010290:	1c5c      	adds	r4, r3, #1
 8010292:	d1f7      	bne.n	8010284 <SDMMC_CmdReadMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010294:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010298:	4618      	mov	r0, r3
 801029a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801029e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80102a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80102a2:	075c      	lsls	r4, r3, #29
 80102a4:	d43d      	bmi.n	8010322 <SDMMC_CmdReadMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80102a6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80102a8:	f013 0301 	ands.w	r3, r3, #1
 80102ac:	d134      	bne.n	8010318 <SDMMC_CmdReadMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80102ae:	4b3b      	ldr	r3, [pc, #236]	; (801039c <SDMMC_CmdReadMultiBlock+0x144>)
 80102b0:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80102b2:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80102b4:	b2db      	uxtb	r3, r3
 80102b6:	2b12      	cmp	r3, #18
 80102b8:	d131      	bne.n	801031e <SDMMC_CmdReadMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 80102ba:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80102bc:	4b38      	ldr	r3, [pc, #224]	; (80103a0 <SDMMC_CmdReadMultiBlock+0x148>)
 80102be:	4013      	ands	r3, r2
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d0e9      	beq.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80102c4:	2a00      	cmp	r2, #0
 80102c6:	db30      	blt.n	801032a <SDMMC_CmdReadMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80102c8:	0051      	lsls	r1, r2, #1
 80102ca:	d431      	bmi.n	8010330 <SDMMC_CmdReadMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80102cc:	0094      	lsls	r4, r2, #2
 80102ce:	d431      	bmi.n	8010334 <SDMMC_CmdReadMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80102d0:	00d0      	lsls	r0, r2, #3
 80102d2:	d431      	bmi.n	8010338 <SDMMC_CmdReadMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80102d4:	0111      	lsls	r1, r2, #4
 80102d6:	d432      	bmi.n	801033e <SDMMC_CmdReadMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80102d8:	0154      	lsls	r4, r2, #5
 80102da:	d433      	bmi.n	8010344 <SDMMC_CmdReadMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80102dc:	01d0      	lsls	r0, r2, #7
 80102de:	d434      	bmi.n	801034a <SDMMC_CmdReadMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80102e0:	0211      	lsls	r1, r2, #8
 80102e2:	d435      	bmi.n	8010350 <SDMMC_CmdReadMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80102e4:	0254      	lsls	r4, r2, #9
 80102e6:	d436      	bmi.n	8010356 <SDMMC_CmdReadMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80102e8:	0290      	lsls	r0, r2, #10
 80102ea:	d440      	bmi.n	801036e <SDMMC_CmdReadMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80102ec:	02d1      	lsls	r1, r2, #11
 80102ee:	d43b      	bmi.n	8010368 <SDMMC_CmdReadMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80102f0:	0354      	lsls	r4, r2, #13
 80102f2:	d436      	bmi.n	8010362 <SDMMC_CmdReadMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80102f4:	0390      	lsls	r0, r2, #14
 80102f6:	d431      	bmi.n	801035c <SDMMC_CmdReadMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80102f8:	03d1      	lsls	r1, r2, #15
 80102fa:	d444      	bmi.n	8010386 <SDMMC_CmdReadMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80102fc:	0414      	lsls	r4, r2, #16
 80102fe:	d43f      	bmi.n	8010380 <SDMMC_CmdReadMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010300:	0450      	lsls	r0, r2, #17
 8010302:	d43a      	bmi.n	801037a <SDMMC_CmdReadMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010304:	0491      	lsls	r1, r2, #18
 8010306:	d435      	bmi.n	8010374 <SDMMC_CmdReadMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010308:	f012 0f08 	tst.w	r2, #8
 801030c:	bf14      	ite	ne
 801030e:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010312:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010316:	e7bf      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010318:	2201      	movs	r2, #1
 801031a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801031c:	e7bc      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801031e:	2301      	movs	r3, #1
 8010320:	e7ba      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010322:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010324:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010326:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010328:	e7b6      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801032a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801032e:	e7b3      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010330:	2340      	movs	r3, #64	; 0x40
 8010332:	e7b1      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010334:	2380      	movs	r3, #128	; 0x80
 8010336:	e7af      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010338:	f44f 7380 	mov.w	r3, #256	; 0x100
 801033c:	e7ac      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801033e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010342:	e7a9      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010348:	e7a6      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801034a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801034e:	e7a3      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010354:	e7a0      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801035a:	e79d      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801035c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010360:	e79a      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010362:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010366:	e797      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010368:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801036c:	e794      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801036e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010372:	e791      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010374:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010378:	e78e      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801037a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801037e:	e78b      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010380:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010384:	e788      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010386:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 801038a:	e785      	b.n	8010298 <SDMMC_CmdReadMultiBlock+0x40>
 801038c:	20000728 	.word	0x20000728
 8010390:	10624dd3 	.word	0x10624dd3
 8010394:	fffee0c0 	.word	0xfffee0c0
 8010398:	00200045 	.word	0x00200045
 801039c:	002000c5 	.word	0x002000c5
 80103a0:	fdffe008 	.word	0xfdffe008

080103a4 <SDMMC_CmdWriteSingleBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80103a4:	4a4c      	ldr	r2, [pc, #304]	; (80104d8 <SDMMC_CmdWriteSingleBlock+0x134>)
 80103a6:	4b4d      	ldr	r3, [pc, #308]	; (80104dc <SDMMC_CmdWriteSingleBlock+0x138>)
{
 80103a8:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80103aa:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80103ac:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80103ae:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103b2:	68c1      	ldr	r1, [r0, #12]
 80103b4:	4c4a      	ldr	r4, [pc, #296]	; (80104e0 <SDMMC_CmdWriteSingleBlock+0x13c>)
 80103b6:	f241 1318 	movw	r3, #4376	; 0x1118
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80103ba:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103bc:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80103be:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103c2:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80103c4:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80103c8:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80103ca:	b14a      	cbz	r2, 80103e0 <SDMMC_CmdWriteSingleBlock+0x3c>
 80103cc:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80103ce:	4945      	ldr	r1, [pc, #276]	; (80104e4 <SDMMC_CmdWriteSingleBlock+0x140>)
    sta_reg = SDMMCx->STA;
 80103d0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80103d2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80103d4:	420a      	tst	r2, r1
 80103d6:	d001      	beq.n	80103dc <SDMMC_CmdWriteSingleBlock+0x38>
 80103d8:	0492      	lsls	r2, r2, #18
 80103da:	d507      	bpl.n	80103ec <SDMMC_CmdWriteSingleBlock+0x48>
    if (count-- == 0U)
 80103dc:	1c5c      	adds	r4, r3, #1
 80103de:	d1f7      	bne.n	80103d0 <SDMMC_CmdWriteSingleBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80103e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80103e4:	4618      	mov	r0, r3
 80103e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80103ea:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80103ec:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80103ee:	075c      	lsls	r4, r3, #29
 80103f0:	d43d      	bmi.n	801046e <SDMMC_CmdWriteSingleBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80103f2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80103f4:	f013 0301 	ands.w	r3, r3, #1
 80103f8:	d134      	bne.n	8010464 <SDMMC_CmdWriteSingleBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80103fa:	4b3b      	ldr	r3, [pc, #236]	; (80104e8 <SDMMC_CmdWriteSingleBlock+0x144>)
 80103fc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80103fe:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010400:	b2db      	uxtb	r3, r3
 8010402:	2b18      	cmp	r3, #24
 8010404:	d131      	bne.n	801046a <SDMMC_CmdWriteSingleBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8010406:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010408:	4b38      	ldr	r3, [pc, #224]	; (80104ec <SDMMC_CmdWriteSingleBlock+0x148>)
 801040a:	4013      	ands	r3, r2
 801040c:	2b00      	cmp	r3, #0
 801040e:	d0e9      	beq.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010410:	2a00      	cmp	r2, #0
 8010412:	db30      	blt.n	8010476 <SDMMC_CmdWriteSingleBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010414:	0051      	lsls	r1, r2, #1
 8010416:	d431      	bmi.n	801047c <SDMMC_CmdWriteSingleBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010418:	0094      	lsls	r4, r2, #2
 801041a:	d431      	bmi.n	8010480 <SDMMC_CmdWriteSingleBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 801041c:	00d0      	lsls	r0, r2, #3
 801041e:	d431      	bmi.n	8010484 <SDMMC_CmdWriteSingleBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010420:	0111      	lsls	r1, r2, #4
 8010422:	d432      	bmi.n	801048a <SDMMC_CmdWriteSingleBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010424:	0154      	lsls	r4, r2, #5
 8010426:	d433      	bmi.n	8010490 <SDMMC_CmdWriteSingleBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010428:	01d0      	lsls	r0, r2, #7
 801042a:	d434      	bmi.n	8010496 <SDMMC_CmdWriteSingleBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 801042c:	0211      	lsls	r1, r2, #8
 801042e:	d435      	bmi.n	801049c <SDMMC_CmdWriteSingleBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010430:	0254      	lsls	r4, r2, #9
 8010432:	d436      	bmi.n	80104a2 <SDMMC_CmdWriteSingleBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010434:	0290      	lsls	r0, r2, #10
 8010436:	d440      	bmi.n	80104ba <SDMMC_CmdWriteSingleBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010438:	02d1      	lsls	r1, r2, #11
 801043a:	d43b      	bmi.n	80104b4 <SDMMC_CmdWriteSingleBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 801043c:	0354      	lsls	r4, r2, #13
 801043e:	d436      	bmi.n	80104ae <SDMMC_CmdWriteSingleBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010440:	0390      	lsls	r0, r2, #14
 8010442:	d431      	bmi.n	80104a8 <SDMMC_CmdWriteSingleBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010444:	03d1      	lsls	r1, r2, #15
 8010446:	d444      	bmi.n	80104d2 <SDMMC_CmdWriteSingleBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010448:	0414      	lsls	r4, r2, #16
 801044a:	d43f      	bmi.n	80104cc <SDMMC_CmdWriteSingleBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 801044c:	0450      	lsls	r0, r2, #17
 801044e:	d43a      	bmi.n	80104c6 <SDMMC_CmdWriteSingleBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010450:	0491      	lsls	r1, r2, #18
 8010452:	d435      	bmi.n	80104c0 <SDMMC_CmdWriteSingleBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010454:	f012 0f08 	tst.w	r2, #8
 8010458:	bf14      	ite	ne
 801045a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801045e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010462:	e7bf      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010464:	2201      	movs	r2, #1
 8010466:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010468:	e7bc      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801046a:	2301      	movs	r3, #1
 801046c:	e7ba      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801046e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010470:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010472:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010474:	e7b6      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010476:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801047a:	e7b3      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801047c:	2340      	movs	r3, #64	; 0x40
 801047e:	e7b1      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010480:	2380      	movs	r3, #128	; 0x80
 8010482:	e7af      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010484:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010488:	e7ac      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801048a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801048e:	e7a9      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010490:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010494:	e7a6      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801049a:	e7a3      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 801049c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80104a0:	e7a0      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80104a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80104a6:	e79d      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80104a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80104ac:	e79a      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80104ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80104b2:	e797      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 80104b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104b8:	e794      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80104ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80104be:	e791      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 80104c0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80104c4:	e78e      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80104c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80104ca:	e78b      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80104cc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80104d0:	e788      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80104d2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80104d6:	e785      	b.n	80103e4 <SDMMC_CmdWriteSingleBlock+0x40>
 80104d8:	20000728 	.word	0x20000728
 80104dc:	10624dd3 	.word	0x10624dd3
 80104e0:	fffee0c0 	.word	0xfffee0c0
 80104e4:	00200045 	.word	0x00200045
 80104e8:	002000c5 	.word	0x002000c5
 80104ec:	fdffe008 	.word	0xfdffe008

080104f0 <SDMMC_CmdWriteMultiBlock>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104f0:	4a4c      	ldr	r2, [pc, #304]	; (8010624 <SDMMC_CmdWriteMultiBlock+0x134>)
 80104f2:	4b4d      	ldr	r3, [pc, #308]	; (8010628 <SDMMC_CmdWriteMultiBlock+0x138>)
{
 80104f4:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104f6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80104f8:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80104fa:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80104fe:	68c1      	ldr	r1, [r0, #12]
 8010500:	4c4a      	ldr	r4, [pc, #296]	; (801062c <SDMMC_CmdWriteMultiBlock+0x13c>)
 8010502:	f241 1319 	movw	r3, #4377	; 0x1119
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010506:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010508:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801050a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801050e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010510:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010514:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010516:	b14a      	cbz	r2, 801052c <SDMMC_CmdWriteMultiBlock+0x3c>
 8010518:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801051a:	4945      	ldr	r1, [pc, #276]	; (8010630 <SDMMC_CmdWriteMultiBlock+0x140>)
    sta_reg = SDMMCx->STA;
 801051c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801051e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010520:	420a      	tst	r2, r1
 8010522:	d001      	beq.n	8010528 <SDMMC_CmdWriteMultiBlock+0x38>
 8010524:	0492      	lsls	r2, r2, #18
 8010526:	d507      	bpl.n	8010538 <SDMMC_CmdWriteMultiBlock+0x48>
    if (count-- == 0U)
 8010528:	1c5c      	adds	r4, r3, #1
 801052a:	d1f7      	bne.n	801051c <SDMMC_CmdWriteMultiBlock+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801052c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010530:	4618      	mov	r0, r3
 8010532:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010536:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010538:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801053a:	075c      	lsls	r4, r3, #29
 801053c:	d43d      	bmi.n	80105ba <SDMMC_CmdWriteMultiBlock+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801053e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010540:	f013 0301 	ands.w	r3, r3, #1
 8010544:	d134      	bne.n	80105b0 <SDMMC_CmdWriteMultiBlock+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010546:	4b3b      	ldr	r3, [pc, #236]	; (8010634 <SDMMC_CmdWriteMultiBlock+0x144>)
 8010548:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 801054a:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801054c:	b2db      	uxtb	r3, r3
 801054e:	2b19      	cmp	r3, #25
 8010550:	d131      	bne.n	80105b6 <SDMMC_CmdWriteMultiBlock+0xc6>
  return (*(__IO uint32_t *) tmp);
 8010552:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010554:	4b38      	ldr	r3, [pc, #224]	; (8010638 <SDMMC_CmdWriteMultiBlock+0x148>)
 8010556:	4013      	ands	r3, r2
 8010558:	2b00      	cmp	r3, #0
 801055a:	d0e9      	beq.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801055c:	2a00      	cmp	r2, #0
 801055e:	db30      	blt.n	80105c2 <SDMMC_CmdWriteMultiBlock+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010560:	0051      	lsls	r1, r2, #1
 8010562:	d431      	bmi.n	80105c8 <SDMMC_CmdWriteMultiBlock+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010564:	0094      	lsls	r4, r2, #2
 8010566:	d431      	bmi.n	80105cc <SDMMC_CmdWriteMultiBlock+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010568:	00d0      	lsls	r0, r2, #3
 801056a:	d431      	bmi.n	80105d0 <SDMMC_CmdWriteMultiBlock+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 801056c:	0111      	lsls	r1, r2, #4
 801056e:	d432      	bmi.n	80105d6 <SDMMC_CmdWriteMultiBlock+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010570:	0154      	lsls	r4, r2, #5
 8010572:	d433      	bmi.n	80105dc <SDMMC_CmdWriteMultiBlock+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010574:	01d0      	lsls	r0, r2, #7
 8010576:	d434      	bmi.n	80105e2 <SDMMC_CmdWriteMultiBlock+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010578:	0211      	lsls	r1, r2, #8
 801057a:	d435      	bmi.n	80105e8 <SDMMC_CmdWriteMultiBlock+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 801057c:	0254      	lsls	r4, r2, #9
 801057e:	d436      	bmi.n	80105ee <SDMMC_CmdWriteMultiBlock+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010580:	0290      	lsls	r0, r2, #10
 8010582:	d440      	bmi.n	8010606 <SDMMC_CmdWriteMultiBlock+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010584:	02d1      	lsls	r1, r2, #11
 8010586:	d43b      	bmi.n	8010600 <SDMMC_CmdWriteMultiBlock+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010588:	0354      	lsls	r4, r2, #13
 801058a:	d436      	bmi.n	80105fa <SDMMC_CmdWriteMultiBlock+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 801058c:	0390      	lsls	r0, r2, #14
 801058e:	d431      	bmi.n	80105f4 <SDMMC_CmdWriteMultiBlock+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010590:	03d1      	lsls	r1, r2, #15
 8010592:	d444      	bmi.n	801061e <SDMMC_CmdWriteMultiBlock+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010594:	0414      	lsls	r4, r2, #16
 8010596:	d43f      	bmi.n	8010618 <SDMMC_CmdWriteMultiBlock+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010598:	0450      	lsls	r0, r2, #17
 801059a:	d43a      	bmi.n	8010612 <SDMMC_CmdWriteMultiBlock+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 801059c:	0491      	lsls	r1, r2, #18
 801059e:	d435      	bmi.n	801060c <SDMMC_CmdWriteMultiBlock+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80105a0:	f012 0f08 	tst.w	r2, #8
 80105a4:	bf14      	ite	ne
 80105a6:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 80105aa:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 80105ae:	e7bf      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80105b0:	2201      	movs	r2, #1
 80105b2:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105b4:	e7bc      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80105b6:	2301      	movs	r3, #1
 80105b8:	e7ba      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105ba:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105bc:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80105be:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80105c0:	e7b6      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80105c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80105c6:	e7b3      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80105c8:	2340      	movs	r3, #64	; 0x40
 80105ca:	e7b1      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80105cc:	2380      	movs	r3, #128	; 0x80
 80105ce:	e7af      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80105d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80105d4:	e7ac      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80105d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80105da:	e7a9      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80105dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105e0:	e7a6      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80105e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80105e6:	e7a3      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80105e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80105ec:	e7a0      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80105ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80105f2:	e79d      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80105f4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80105f8:	e79a      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80105fa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80105fe:	e797      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010600:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010604:	e794      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010606:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801060a:	e791      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801060c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010610:	e78e      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010612:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010616:	e78b      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010618:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801061c:	e788      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801061e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010622:	e785      	b.n	8010530 <SDMMC_CmdWriteMultiBlock+0x40>
 8010624:	20000728 	.word	0x20000728
 8010628:	10624dd3 	.word	0x10624dd3
 801062c:	fffee0c0 	.word	0xfffee0c0
 8010630:	00200045 	.word	0x00200045
 8010634:	002000c5 	.word	0x002000c5
 8010638:	fdffe008 	.word	0xfdffe008

0801063c <SDMMC_CmdStopTransfer>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801063c:	4b7d      	ldr	r3, [pc, #500]	; (8010834 <SDMMC_CmdStopTransfer+0x1f8>)
 801063e:	497e      	ldr	r1, [pc, #504]	; (8010838 <SDMMC_CmdStopTransfer+0x1fc>)
{
 8010640:	b430      	push	{r4, r5}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010642:	681a      	ldr	r2, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 8010644:	2400      	movs	r4, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010646:	4b7d      	ldr	r3, [pc, #500]	; (801083c <SDMMC_CmdStopTransfer+0x200>)
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010648:	fba1 1202 	umull	r1, r2, r1, r2
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801064c:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801064e:	4d7c      	ldr	r5, [pc, #496]	; (8010840 <SDMMC_CmdStopTransfer+0x204>)
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010650:	f041 0180 	orr.w	r1, r1, #128	; 0x80
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010654:	0a52      	lsrs	r2, r2, #9
  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8010656:	60c1      	str	r1, [r0, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8010658:	68c1      	ldr	r1, [r0, #12]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801065a:	fb05 f202 	mul.w	r2, r5, r2
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 801065e:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8010662:	60c1      	str	r1, [r0, #12]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010664:	f241 110c 	movw	r1, #4364	; 0x110c
  SDMMCx->ARG = Command->Argument;
 8010668:	6084      	str	r4, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801066a:	68c4      	ldr	r4, [r0, #12]
 801066c:	4023      	ands	r3, r4
 801066e:	4319      	orrs	r1, r3
 8010670:	60c1      	str	r1, [r0, #12]
    if (count-- == 0U)
 8010672:	b14a      	cbz	r2, 8010688 <SDMMC_CmdStopTransfer+0x4c>
 8010674:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010676:	4973      	ldr	r1, [pc, #460]	; (8010844 <SDMMC_CmdStopTransfer+0x208>)
    sta_reg = SDMMCx->STA;
 8010678:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801067a:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 801067c:	420a      	tst	r2, r1
 801067e:	d001      	beq.n	8010684 <SDMMC_CmdStopTransfer+0x48>
 8010680:	0492      	lsls	r2, r2, #18
 8010682:	d50a      	bpl.n	801069a <SDMMC_CmdStopTransfer+0x5e>
    if (count-- == 0U)
 8010684:	1c5c      	adds	r4, r3, #1
 8010686:	d1f7      	bne.n	8010678 <SDMMC_CmdStopTransfer+0x3c>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010688:	68c2      	ldr	r2, [r0, #12]
 801068a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801068e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010692:	60c2      	str	r2, [r0, #12]
}
 8010694:	4618      	mov	r0, r3
 8010696:	bc30      	pop	{r4, r5}
 8010698:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801069a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801069c:	075b      	lsls	r3, r3, #29
 801069e:	d454      	bmi.n	801074a <SDMMC_CmdStopTransfer+0x10e>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80106a0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80106a2:	f013 0301 	ands.w	r3, r3, #1
 80106a6:	d13c      	bne.n	8010722 <SDMMC_CmdStopTransfer+0xe6>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80106a8:	4a67      	ldr	r2, [pc, #412]	; (8010848 <SDMMC_CmdStopTransfer+0x20c>)
 80106aa:	6382      	str	r2, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80106ac:	6902      	ldr	r2, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80106ae:	b2d2      	uxtb	r2, r2
 80106b0:	2a0c      	cmp	r2, #12
 80106b2:	d144      	bne.n	801073e <SDMMC_CmdStopTransfer+0x102>
  return (*(__IO uint32_t *) tmp);
 80106b4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80106b6:	4965      	ldr	r1, [pc, #404]	; (801084c <SDMMC_CmdStopTransfer+0x210>)
 80106b8:	4011      	ands	r1, r2
 80106ba:	2900      	cmp	r1, #0
 80106bc:	d038      	beq.n	8010730 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80106be:	2a00      	cmp	r2, #0
 80106c0:	db36      	blt.n	8010730 <SDMMC_CmdStopTransfer+0xf4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80106c2:	0055      	lsls	r5, r2, #1
 80106c4:	d448      	bmi.n	8010758 <SDMMC_CmdStopTransfer+0x11c>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80106c6:	0094      	lsls	r4, r2, #2
 80106c8:	d44c      	bmi.n	8010764 <SDMMC_CmdStopTransfer+0x128>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80106ca:	00d1      	lsls	r1, r2, #3
 80106cc:	d450      	bmi.n	8010770 <SDMMC_CmdStopTransfer+0x134>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80106ce:	0113      	lsls	r3, r2, #4
 80106d0:	d455      	bmi.n	801077e <SDMMC_CmdStopTransfer+0x142>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80106d2:	0155      	lsls	r5, r2, #5
 80106d4:	d45a      	bmi.n	801078c <SDMMC_CmdStopTransfer+0x150>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80106d6:	01d4      	lsls	r4, r2, #7
 80106d8:	d466      	bmi.n	80107a8 <SDMMC_CmdStopTransfer+0x16c>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80106da:	0211      	lsls	r1, r2, #8
 80106dc:	d45d      	bmi.n	801079a <SDMMC_CmdStopTransfer+0x15e>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80106de:	0253      	lsls	r3, r2, #9
 80106e0:	d470      	bmi.n	80107c4 <SDMMC_CmdStopTransfer+0x188>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80106e2:	0295      	lsls	r5, r2, #10
 80106e4:	d467      	bmi.n	80107b6 <SDMMC_CmdStopTransfer+0x17a>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80106e6:	02d4      	lsls	r4, r2, #11
 80106e8:	f100 8081 	bmi.w	80107ee <SDMMC_CmdStopTransfer+0x1b2>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80106ec:	0351      	lsls	r1, r2, #13
 80106ee:	d477      	bmi.n	80107e0 <SDMMC_CmdStopTransfer+0x1a4>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80106f0:	0393      	lsls	r3, r2, #14
 80106f2:	d46e      	bmi.n	80107d2 <SDMMC_CmdStopTransfer+0x196>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80106f4:	03d5      	lsls	r5, r2, #15
 80106f6:	f100 8096 	bmi.w	8010826 <SDMMC_CmdStopTransfer+0x1ea>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80106fa:	0414      	lsls	r4, r2, #16
 80106fc:	f100 8085 	bmi.w	801080a <SDMMC_CmdStopTransfer+0x1ce>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010700:	0451      	lsls	r1, r2, #17
 8010702:	d47b      	bmi.n	80107fc <SDMMC_CmdStopTransfer+0x1c0>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010704:	0493      	lsls	r3, r2, #18
 8010706:	f100 8087 	bmi.w	8010818 <SDMMC_CmdStopTransfer+0x1dc>
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 801070a:	f012 0f08 	tst.w	r2, #8
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801070e:	68c2      	ldr	r2, [r0, #12]
 8010710:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8010714:	bf14      	ite	ne
 8010716:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801071a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801071e:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010720:	e7b8      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010722:	2201      	movs	r2, #1
 8010724:	6382      	str	r2, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010726:	68c2      	ldr	r2, [r0, #12]
 8010728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801072c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801072e:	e7b1      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010730:	68c2      	ldr	r2, [r0, #12]
 8010732:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010736:	60c2      	str	r2, [r0, #12]
}
 8010738:	4618      	mov	r0, r3
 801073a:	bc30      	pop	{r4, r5}
 801073c:	4770      	bx	lr
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801073e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010740:	2301      	movs	r3, #1
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010742:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010746:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010748:	e7a4      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801074a:	2304      	movs	r3, #4
 801074c:	6383      	str	r3, [r0, #56]	; 0x38
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801074e:	68c2      	ldr	r2, [r0, #12]
 8010750:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010754:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010756:	e79d      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010758:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ADDR_MISALIGNED;
 801075a:	2340      	movs	r3, #64	; 0x40
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801075c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010760:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010762:	e797      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010764:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010766:	2380      	movs	r3, #128	; 0x80
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010768:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801076c:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801076e:	e791      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010770:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010772:	f44f 7380 	mov.w	r3, #256	; 0x100
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801077a:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801077c:	e78a      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801077e:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010780:	f44f 7300 	mov.w	r3, #512	; 0x200
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010788:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 801078a:	e783      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801078c:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801078e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010796:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010798:	e77c      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801079a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_COM_CRC_FAILED;
 801079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107a4:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107a6:	e775      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107a8:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80107aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107b2:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107b4:	e76e      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107b6:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80107b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107c0:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107c2:	e767      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107c4:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ILLEGAL_CMD;
 80107c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107ce:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107d0:	e760      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107d2:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80107d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107dc:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107de:	e759      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107e0:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80107e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107ea:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107ec:	e752      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107ee:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CC_ERR;
 80107f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80107f8:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80107fa:	e74b      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80107fc:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80107fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010802:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010806:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010808:	e744      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801080a:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801080c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010810:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010814:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010816:	e73d      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010818:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_ERASE_RESET;
 801081a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801081e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010822:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010824:	e736      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8010826:	68c2      	ldr	r2, [r0, #12]
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010828:	f44f 2300 	mov.w	r3, #524288	; 0x80000
  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 801082c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8010830:	60c2      	str	r2, [r0, #12]
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8010832:	e72f      	b.n	8010694 <SDMMC_CmdStopTransfer+0x58>
 8010834:	20000728 	.word	0x20000728
 8010838:	10624dd3 	.word	0x10624dd3
 801083c:	fffee0c0 	.word	0xfffee0c0
 8010840:	05f5e100 	.word	0x05f5e100
 8010844:	00200045 	.word	0x00200045
 8010848:	002000c5 	.word	0x002000c5
 801084c:	fdffe008 	.word	0xfdffe008

08010850 <SDMMC_CmdSelDesel>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010850:	4a4c      	ldr	r2, [pc, #304]	; (8010984 <SDMMC_CmdSelDesel+0x134>)
 8010852:	4b4d      	ldr	r3, [pc, #308]	; (8010988 <SDMMC_CmdSelDesel+0x138>)
{
 8010854:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010856:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010858:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801085a:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801085e:	68c1      	ldr	r1, [r0, #12]
 8010860:	4c4a      	ldr	r4, [pc, #296]	; (801098c <SDMMC_CmdSelDesel+0x13c>)
 8010862:	f241 1307 	movw	r3, #4359	; 0x1107
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010866:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010868:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801086a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801086e:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010870:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010874:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010876:	b14a      	cbz	r2, 801088c <SDMMC_CmdSelDesel+0x3c>
 8010878:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801087a:	4945      	ldr	r1, [pc, #276]	; (8010990 <SDMMC_CmdSelDesel+0x140>)
    sta_reg = SDMMCx->STA;
 801087c:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 801087e:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010880:	420a      	tst	r2, r1
 8010882:	d001      	beq.n	8010888 <SDMMC_CmdSelDesel+0x38>
 8010884:	0492      	lsls	r2, r2, #18
 8010886:	d507      	bpl.n	8010898 <SDMMC_CmdSelDesel+0x48>
    if (count-- == 0U)
 8010888:	1c5c      	adds	r4, r3, #1
 801088a:	d1f7      	bne.n	801087c <SDMMC_CmdSelDesel+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801088c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010890:	4618      	mov	r0, r3
 8010892:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010896:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010898:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801089a:	075c      	lsls	r4, r3, #29
 801089c:	d43d      	bmi.n	801091a <SDMMC_CmdSelDesel+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801089e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80108a0:	f013 0301 	ands.w	r3, r3, #1
 80108a4:	d134      	bne.n	8010910 <SDMMC_CmdSelDesel+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80108a6:	4b3b      	ldr	r3, [pc, #236]	; (8010994 <SDMMC_CmdSelDesel+0x144>)
 80108a8:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80108aa:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80108ac:	b2db      	uxtb	r3, r3
 80108ae:	2b07      	cmp	r3, #7
 80108b0:	d131      	bne.n	8010916 <SDMMC_CmdSelDesel+0xc6>
  return (*(__IO uint32_t *) tmp);
 80108b2:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80108b4:	4b38      	ldr	r3, [pc, #224]	; (8010998 <SDMMC_CmdSelDesel+0x148>)
 80108b6:	4013      	ands	r3, r2
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d0e9      	beq.n	8010890 <SDMMC_CmdSelDesel+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80108bc:	2a00      	cmp	r2, #0
 80108be:	db30      	blt.n	8010922 <SDMMC_CmdSelDesel+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80108c0:	0051      	lsls	r1, r2, #1
 80108c2:	d431      	bmi.n	8010928 <SDMMC_CmdSelDesel+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80108c4:	0094      	lsls	r4, r2, #2
 80108c6:	d431      	bmi.n	801092c <SDMMC_CmdSelDesel+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80108c8:	00d0      	lsls	r0, r2, #3
 80108ca:	d431      	bmi.n	8010930 <SDMMC_CmdSelDesel+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80108cc:	0111      	lsls	r1, r2, #4
 80108ce:	d432      	bmi.n	8010936 <SDMMC_CmdSelDesel+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80108d0:	0154      	lsls	r4, r2, #5
 80108d2:	d433      	bmi.n	801093c <SDMMC_CmdSelDesel+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80108d4:	01d0      	lsls	r0, r2, #7
 80108d6:	d434      	bmi.n	8010942 <SDMMC_CmdSelDesel+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80108d8:	0211      	lsls	r1, r2, #8
 80108da:	d435      	bmi.n	8010948 <SDMMC_CmdSelDesel+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80108dc:	0254      	lsls	r4, r2, #9
 80108de:	d436      	bmi.n	801094e <SDMMC_CmdSelDesel+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80108e0:	0290      	lsls	r0, r2, #10
 80108e2:	d440      	bmi.n	8010966 <SDMMC_CmdSelDesel+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80108e4:	02d1      	lsls	r1, r2, #11
 80108e6:	d43b      	bmi.n	8010960 <SDMMC_CmdSelDesel+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80108e8:	0354      	lsls	r4, r2, #13
 80108ea:	d436      	bmi.n	801095a <SDMMC_CmdSelDesel+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80108ec:	0390      	lsls	r0, r2, #14
 80108ee:	d431      	bmi.n	8010954 <SDMMC_CmdSelDesel+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80108f0:	03d1      	lsls	r1, r2, #15
 80108f2:	d444      	bmi.n	801097e <SDMMC_CmdSelDesel+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80108f4:	0414      	lsls	r4, r2, #16
 80108f6:	d43f      	bmi.n	8010978 <SDMMC_CmdSelDesel+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80108f8:	0450      	lsls	r0, r2, #17
 80108fa:	d43a      	bmi.n	8010972 <SDMMC_CmdSelDesel+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80108fc:	0491      	lsls	r1, r2, #18
 80108fe:	d435      	bmi.n	801096c <SDMMC_CmdSelDesel+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010900:	f012 0f08 	tst.w	r2, #8
 8010904:	bf14      	ite	ne
 8010906:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 801090a:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801090e:	e7bf      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010910:	2201      	movs	r2, #1
 8010912:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010914:	e7bc      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010916:	2301      	movs	r3, #1
 8010918:	e7ba      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801091a:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801091c:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801091e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010920:	e7b6      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010922:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010926:	e7b3      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010928:	2340      	movs	r3, #64	; 0x40
 801092a:	e7b1      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801092c:	2380      	movs	r3, #128	; 0x80
 801092e:	e7af      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010934:	e7ac      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010936:	f44f 7300 	mov.w	r3, #512	; 0x200
 801093a:	e7a9      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801093c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010940:	e7a6      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010942:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010946:	e7a3      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801094c:	e7a0      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801094e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010952:	e79d      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010958:	e79a      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801095a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801095e:	e797      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010960:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010964:	e794      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010966:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801096a:	e791      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 801096c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010970:	e78e      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010972:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010976:	e78b      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010978:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801097c:	e788      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801097e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010982:	e785      	b.n	8010890 <SDMMC_CmdSelDesel+0x40>
 8010984:	20000728 	.word	0x20000728
 8010988:	10624dd3 	.word	0x10624dd3
 801098c:	fffee0c0 	.word	0xfffee0c0
 8010990:	00200045 	.word	0x00200045
 8010994:	002000c5 	.word	0x002000c5
 8010998:	fdffe008 	.word	0xfdffe008

0801099c <SDMMC_CmdGoIdleState>:
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 801099c:	4b11      	ldr	r3, [pc, #68]	; (80109e4 <SDMMC_CmdGoIdleState+0x48>)
{
 801099e:	4601      	mov	r1, r0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80109a0:	4a11      	ldr	r2, [pc, #68]	; (80109e8 <SDMMC_CmdGoIdleState+0x4c>)
{
 80109a2:	b430      	push	{r4, r5}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109a4:	4c11      	ldr	r4, [pc, #68]	; (80109ec <SDMMC_CmdGoIdleState+0x50>)
  SDMMCx->ARG = Command->Argument;
 80109a6:	2500      	movs	r5, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109a8:	681b      	ldr	r3, [r3, #0]
  SDMMCx->ARG = Command->Argument;
 80109aa:	6085      	str	r5, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109ac:	fba4 0303 	umull	r0, r3, r4, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80109b0:	68cc      	ldr	r4, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109b2:	f241 3088 	movw	r0, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80109b6:	4022      	ands	r2, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109b8:	0a5b      	lsrs	r3, r3, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80109ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109be:	fb00 f303 	mul.w	r3, r0, r3
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80109c2:	60ca      	str	r2, [r1, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109c4:	e002      	b.n	80109cc <SDMMC_CmdGoIdleState+0x30>
    if (count-- == 0U)
    {
      return SDMMC_ERROR_TIMEOUT;
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80109c6:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 80109c8:	0612      	lsls	r2, r2, #24
 80109ca:	d405      	bmi.n	80109d8 <SDMMC_CmdGoIdleState+0x3c>
    if (count-- == 0U)
 80109cc:	3b01      	subs	r3, #1
 80109ce:	d2fa      	bcs.n	80109c6 <SDMMC_CmdGoIdleState+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 80109d0:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 80109d4:	bc30      	pop	{r4, r5}
 80109d6:	4770      	bx	lr

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80109d8:	4b05      	ldr	r3, [pc, #20]	; (80109f0 <SDMMC_CmdGoIdleState+0x54>)

  return SDMMC_ERROR_NONE;
 80109da:	2000      	movs	r0, #0
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80109dc:	638b      	str	r3, [r1, #56]	; 0x38
}
 80109de:	bc30      	pop	{r4, r5}
 80109e0:	4770      	bx	lr
 80109e2:	bf00      	nop
 80109e4:	20000728 	.word	0x20000728
 80109e8:	fffee0c0 	.word	0xfffee0c0
 80109ec:	10624dd3 	.word	0x10624dd3
 80109f0:	002000c5 	.word	0x002000c5

080109f4 <SDMMC_CmdOperCond>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80109f4:	4a1c      	ldr	r2, [pc, #112]	; (8010a68 <SDMMC_CmdOperCond+0x74>)
{
 80109f6:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 80109f8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80109fc:	481b      	ldr	r0, [pc, #108]	; (8010a6c <SDMMC_CmdOperCond+0x78>)
{
 80109fe:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a00:	4c1b      	ldr	r4, [pc, #108]	; (8010a70 <SDMMC_CmdOperCond+0x7c>)
 8010a02:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010a04:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a06:	f241 1308 	movw	r3, #4360	; 0x1108
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a0a:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a0e:	68cc      	ldr	r4, [r1, #12]
 8010a10:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a12:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a14:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010a16:	f241 3088 	movw	r0, #5000	; 0x1388
 8010a1a:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a1e:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8010a20:	b14a      	cbz	r2, 8010a36 <SDMMC_CmdOperCond+0x42>
 8010a22:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8010a24:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8010a26:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010a28:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010a2c:	d001      	beq.n	8010a32 <SDMMC_CmdOperCond+0x3e>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010a2e:	0490      	lsls	r0, r2, #18
 8010a30:	d506      	bpl.n	8010a40 <SDMMC_CmdOperCond+0x4c>
    if (count-- == 0U)
 8010a32:	1c5c      	adds	r4, r3, #1
 8010a34:	d1f6      	bne.n	8010a24 <SDMMC_CmdOperCond+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010a36:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010a3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010a3e:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010a40:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010a42:	075a      	lsls	r2, r3, #29
 8010a44:	d40c      	bmi.n	8010a60 <SDMMC_CmdOperCond+0x6c>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010a46:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010a48:	f010 0001 	ands.w	r0, r0, #1
 8010a4c:	d105      	bne.n	8010a5a <SDMMC_CmdOperCond+0x66>
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8010a4e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010a50:	065b      	lsls	r3, r3, #25
 8010a52:	d5f2      	bpl.n	8010a3a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8010a54:	2340      	movs	r3, #64	; 0x40
 8010a56:	638b      	str	r3, [r1, #56]	; 0x38
 8010a58:	e7ef      	b.n	8010a3a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010a5a:	2301      	movs	r3, #1
 8010a5c:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010a5e:	e7ec      	b.n	8010a3a <SDMMC_CmdOperCond+0x46>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a60:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a62:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010a64:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010a66:	e7e8      	b.n	8010a3a <SDMMC_CmdOperCond+0x46>
 8010a68:	20000728 	.word	0x20000728
 8010a6c:	fffee0c0 	.word	0xfffee0c0
 8010a70:	10624dd3 	.word	0x10624dd3

08010a74 <SDMMC_CmdAppCommand>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a74:	4a4c      	ldr	r2, [pc, #304]	; (8010ba8 <SDMMC_CmdAppCommand+0x134>)
 8010a76:	4b4d      	ldr	r3, [pc, #308]	; (8010bac <SDMMC_CmdAppCommand+0x138>)
{
 8010a78:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a7a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010a7c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a7e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a82:	68c1      	ldr	r1, [r0, #12]
 8010a84:	4c4a      	ldr	r4, [pc, #296]	; (8010bb0 <SDMMC_CmdAppCommand+0x13c>)
 8010a86:	f241 1337 	movw	r3, #4407	; 0x1137
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a8a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a8c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a8e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a92:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010a94:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010a98:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010a9a:	b14a      	cbz	r2, 8010ab0 <SDMMC_CmdAppCommand+0x3c>
 8010a9c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010a9e:	4945      	ldr	r1, [pc, #276]	; (8010bb4 <SDMMC_CmdAppCommand+0x140>)
    sta_reg = SDMMCx->STA;
 8010aa0:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010aa2:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010aa4:	420a      	tst	r2, r1
 8010aa6:	d001      	beq.n	8010aac <SDMMC_CmdAppCommand+0x38>
 8010aa8:	0492      	lsls	r2, r2, #18
 8010aaa:	d507      	bpl.n	8010abc <SDMMC_CmdAppCommand+0x48>
    if (count-- == 0U)
 8010aac:	1c5c      	adds	r4, r3, #1
 8010aae:	d1f7      	bne.n	8010aa0 <SDMMC_CmdAppCommand+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010ab0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010aba:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010abc:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010abe:	075c      	lsls	r4, r3, #29
 8010ac0:	d43d      	bmi.n	8010b3e <SDMMC_CmdAppCommand+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010ac4:	f013 0301 	ands.w	r3, r3, #1
 8010ac8:	d134      	bne.n	8010b34 <SDMMC_CmdAppCommand+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010aca:	4b3b      	ldr	r3, [pc, #236]	; (8010bb8 <SDMMC_CmdAppCommand+0x144>)
 8010acc:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010ace:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010ad0:	b2db      	uxtb	r3, r3
 8010ad2:	2b37      	cmp	r3, #55	; 0x37
 8010ad4:	d131      	bne.n	8010b3a <SDMMC_CmdAppCommand+0xc6>
  return (*(__IO uint32_t *) tmp);
 8010ad6:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010ad8:	4b38      	ldr	r3, [pc, #224]	; (8010bbc <SDMMC_CmdAppCommand+0x148>)
 8010ada:	4013      	ands	r3, r2
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d0e9      	beq.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ae0:	2a00      	cmp	r2, #0
 8010ae2:	db30      	blt.n	8010b46 <SDMMC_CmdAppCommand+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010ae4:	0051      	lsls	r1, r2, #1
 8010ae6:	d431      	bmi.n	8010b4c <SDMMC_CmdAppCommand+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010ae8:	0094      	lsls	r4, r2, #2
 8010aea:	d431      	bmi.n	8010b50 <SDMMC_CmdAppCommand+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010aec:	00d0      	lsls	r0, r2, #3
 8010aee:	d431      	bmi.n	8010b54 <SDMMC_CmdAppCommand+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010af0:	0111      	lsls	r1, r2, #4
 8010af2:	d432      	bmi.n	8010b5a <SDMMC_CmdAppCommand+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010af4:	0154      	lsls	r4, r2, #5
 8010af6:	d433      	bmi.n	8010b60 <SDMMC_CmdAppCommand+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010af8:	01d0      	lsls	r0, r2, #7
 8010afa:	d434      	bmi.n	8010b66 <SDMMC_CmdAppCommand+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010afc:	0211      	lsls	r1, r2, #8
 8010afe:	d435      	bmi.n	8010b6c <SDMMC_CmdAppCommand+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010b00:	0254      	lsls	r4, r2, #9
 8010b02:	d436      	bmi.n	8010b72 <SDMMC_CmdAppCommand+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010b04:	0290      	lsls	r0, r2, #10
 8010b06:	d440      	bmi.n	8010b8a <SDMMC_CmdAppCommand+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010b08:	02d1      	lsls	r1, r2, #11
 8010b0a:	d43b      	bmi.n	8010b84 <SDMMC_CmdAppCommand+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010b0c:	0354      	lsls	r4, r2, #13
 8010b0e:	d436      	bmi.n	8010b7e <SDMMC_CmdAppCommand+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010b10:	0390      	lsls	r0, r2, #14
 8010b12:	d431      	bmi.n	8010b78 <SDMMC_CmdAppCommand+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010b14:	03d1      	lsls	r1, r2, #15
 8010b16:	d444      	bmi.n	8010ba2 <SDMMC_CmdAppCommand+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010b18:	0414      	lsls	r4, r2, #16
 8010b1a:	d43f      	bmi.n	8010b9c <SDMMC_CmdAppCommand+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010b1c:	0450      	lsls	r0, r2, #17
 8010b1e:	d43a      	bmi.n	8010b96 <SDMMC_CmdAppCommand+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010b20:	0491      	lsls	r1, r2, #18
 8010b22:	d435      	bmi.n	8010b90 <SDMMC_CmdAppCommand+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010b24:	f012 0f08 	tst.w	r2, #8
 8010b28:	bf14      	ite	ne
 8010b2a:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010b2e:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010b32:	e7bf      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010b34:	2201      	movs	r2, #1
 8010b36:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b38:	e7bc      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e7ba      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b3e:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b40:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010b42:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010b44:	e7b6      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010b4a:	e7b3      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010b4c:	2340      	movs	r3, #64	; 0x40
 8010b4e:	e7b1      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010b50:	2380      	movs	r3, #128	; 0x80
 8010b52:	e7af      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010b54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010b58:	e7ac      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010b5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010b5e:	e7a9      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010b64:	e7a6      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010b66:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010b6a:	e7a3      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010b6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010b70:	e7a0      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010b72:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010b76:	e79d      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010b78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010b7c:	e79a      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010b7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010b82:	e797      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010b84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010b88:	e794      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010b8a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010b8e:	e791      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010b90:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010b94:	e78e      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010b96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010b9a:	e78b      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010b9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010ba0:	e788      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010ba2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010ba6:	e785      	b.n	8010ab4 <SDMMC_CmdAppCommand+0x40>
 8010ba8:	20000728 	.word	0x20000728
 8010bac:	10624dd3 	.word	0x10624dd3
 8010bb0:	fffee0c0 	.word	0xfffee0c0
 8010bb4:	00200045 	.word	0x00200045
 8010bb8:	002000c5 	.word	0x002000c5
 8010bbc:	fdffe008 	.word	0xfdffe008

08010bc0 <SDMMC_CmdAppOperCommand>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bc0:	4a18      	ldr	r2, [pc, #96]	; (8010c24 <SDMMC_CmdAppOperCommand+0x64>)
 8010bc2:	4b19      	ldr	r3, [pc, #100]	; (8010c28 <SDMMC_CmdAppOperCommand+0x68>)
{
 8010bc4:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bc6:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010bc8:	6081      	str	r1, [r0, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bca:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010bce:	68c1      	ldr	r1, [r0, #12]
 8010bd0:	4c16      	ldr	r4, [pc, #88]	; (8010c2c <SDMMC_CmdAppOperCommand+0x6c>)
 8010bd2:	f241 1329 	movw	r3, #4393	; 0x1129
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bd6:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010bd8:	400c      	ands	r4, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010bda:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010bde:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010be0:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010be4:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010be6:	b14a      	cbz	r2, 8010bfc <SDMMC_CmdAppOperCommand+0x3c>
 8010be8:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8010bea:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010bec:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010bee:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010bf2:	d001      	beq.n	8010bf8 <SDMMC_CmdAppOperCommand+0x38>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010bf4:	0492      	lsls	r2, r2, #18
 8010bf6:	d507      	bpl.n	8010c08 <SDMMC_CmdAppOperCommand+0x48>
    if (count-- == 0U)
 8010bf8:	1c59      	adds	r1, r3, #1
 8010bfa:	d1f6      	bne.n	8010bea <SDMMC_CmdAppOperCommand+0x2a>
      return SDMMC_ERROR_TIMEOUT;
 8010bfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c06:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c08:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c0a:	f013 0304 	ands.w	r3, r3, #4
 8010c0e:	d105      	bne.n	8010c1c <SDMMC_CmdAppOperCommand+0x5c>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c10:	4a07      	ldr	r2, [pc, #28]	; (8010c30 <SDMMC_CmdAppOperCommand+0x70>)
 8010c12:	6382      	str	r2, [r0, #56]	; 0x38
}
 8010c14:	4618      	mov	r0, r3
 8010c16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c1a:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c1c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c1e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010c20:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010c22:	e7ed      	b.n	8010c00 <SDMMC_CmdAppOperCommand+0x40>
 8010c24:	20000728 	.word	0x20000728
 8010c28:	10624dd3 	.word	0x10624dd3
 8010c2c:	fffee0c0 	.word	0xfffee0c0
 8010c30:	002000c5 	.word	0x002000c5

08010c34 <SDMMC_CmdBusWidth>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c34:	4a4c      	ldr	r2, [pc, #304]	; (8010d68 <SDMMC_CmdBusWidth+0x134>)
 8010c36:	4b4d      	ldr	r3, [pc, #308]	; (8010d6c <SDMMC_CmdBusWidth+0x138>)
{
 8010c38:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c3a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010c3c:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c3e:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c42:	68c1      	ldr	r1, [r0, #12]
 8010c44:	4c4a      	ldr	r4, [pc, #296]	; (8010d70 <SDMMC_CmdBusWidth+0x13c>)
 8010c46:	f241 1306 	movw	r3, #4358	; 0x1106
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c4a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c4c:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c4e:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c52:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010c54:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010c58:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010c5a:	b14a      	cbz	r2, 8010c70 <SDMMC_CmdBusWidth+0x3c>
 8010c5c:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010c5e:	4945      	ldr	r1, [pc, #276]	; (8010d74 <SDMMC_CmdBusWidth+0x140>)
    sta_reg = SDMMCx->STA;
 8010c60:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010c62:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010c64:	420a      	tst	r2, r1
 8010c66:	d001      	beq.n	8010c6c <SDMMC_CmdBusWidth+0x38>
 8010c68:	0492      	lsls	r2, r2, #18
 8010c6a:	d507      	bpl.n	8010c7c <SDMMC_CmdBusWidth+0x48>
    if (count-- == 0U)
 8010c6c:	1c5c      	adds	r4, r3, #1
 8010c6e:	d1f7      	bne.n	8010c60 <SDMMC_CmdBusWidth+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 8010c70:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010c74:	4618      	mov	r0, r3
 8010c76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010c7a:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010c7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c7e:	075c      	lsls	r4, r3, #29
 8010c80:	d43d      	bmi.n	8010cfe <SDMMC_CmdBusWidth+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010c82:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010c84:	f013 0301 	ands.w	r3, r3, #1
 8010c88:	d134      	bne.n	8010cf4 <SDMMC_CmdBusWidth+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010c8a:	4b3b      	ldr	r3, [pc, #236]	; (8010d78 <SDMMC_CmdBusWidth+0x144>)
 8010c8c:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010c8e:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010c90:	b2db      	uxtb	r3, r3
 8010c92:	2b06      	cmp	r3, #6
 8010c94:	d131      	bne.n	8010cfa <SDMMC_CmdBusWidth+0xc6>
  return (*(__IO uint32_t *) tmp);
 8010c96:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010c98:	4b38      	ldr	r3, [pc, #224]	; (8010d7c <SDMMC_CmdBusWidth+0x148>)
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d0e9      	beq.n	8010c74 <SDMMC_CmdBusWidth+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010ca0:	2a00      	cmp	r2, #0
 8010ca2:	db30      	blt.n	8010d06 <SDMMC_CmdBusWidth+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010ca4:	0051      	lsls	r1, r2, #1
 8010ca6:	d431      	bmi.n	8010d0c <SDMMC_CmdBusWidth+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010ca8:	0094      	lsls	r4, r2, #2
 8010caa:	d431      	bmi.n	8010d10 <SDMMC_CmdBusWidth+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010cac:	00d0      	lsls	r0, r2, #3
 8010cae:	d431      	bmi.n	8010d14 <SDMMC_CmdBusWidth+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010cb0:	0111      	lsls	r1, r2, #4
 8010cb2:	d432      	bmi.n	8010d1a <SDMMC_CmdBusWidth+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010cb4:	0154      	lsls	r4, r2, #5
 8010cb6:	d433      	bmi.n	8010d20 <SDMMC_CmdBusWidth+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010cb8:	01d0      	lsls	r0, r2, #7
 8010cba:	d434      	bmi.n	8010d26 <SDMMC_CmdBusWidth+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010cbc:	0211      	lsls	r1, r2, #8
 8010cbe:	d435      	bmi.n	8010d2c <SDMMC_CmdBusWidth+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010cc0:	0254      	lsls	r4, r2, #9
 8010cc2:	d436      	bmi.n	8010d32 <SDMMC_CmdBusWidth+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010cc4:	0290      	lsls	r0, r2, #10
 8010cc6:	d440      	bmi.n	8010d4a <SDMMC_CmdBusWidth+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010cc8:	02d1      	lsls	r1, r2, #11
 8010cca:	d43b      	bmi.n	8010d44 <SDMMC_CmdBusWidth+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010ccc:	0354      	lsls	r4, r2, #13
 8010cce:	d436      	bmi.n	8010d3e <SDMMC_CmdBusWidth+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010cd0:	0390      	lsls	r0, r2, #14
 8010cd2:	d431      	bmi.n	8010d38 <SDMMC_CmdBusWidth+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010cd4:	03d1      	lsls	r1, r2, #15
 8010cd6:	d444      	bmi.n	8010d62 <SDMMC_CmdBusWidth+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010cd8:	0414      	lsls	r4, r2, #16
 8010cda:	d43f      	bmi.n	8010d5c <SDMMC_CmdBusWidth+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010cdc:	0450      	lsls	r0, r2, #17
 8010cde:	d43a      	bmi.n	8010d56 <SDMMC_CmdBusWidth+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010ce0:	0491      	lsls	r1, r2, #18
 8010ce2:	d435      	bmi.n	8010d50 <SDMMC_CmdBusWidth+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010ce4:	f012 0f08 	tst.w	r2, #8
 8010ce8:	bf14      	ite	ne
 8010cea:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010cee:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010cf2:	e7bf      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010cf4:	2201      	movs	r2, #1
 8010cf6:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cf8:	e7bc      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010cfa:	2301      	movs	r3, #1
 8010cfc:	e7ba      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010cfe:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d00:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010d02:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010d04:	e7b6      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010d06:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010d0a:	e7b3      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010d0c:	2340      	movs	r3, #64	; 0x40
 8010d0e:	e7b1      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010d10:	2380      	movs	r3, #128	; 0x80
 8010d12:	e7af      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010d14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010d18:	e7ac      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010d1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010d1e:	e7a9      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010d20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010d24:	e7a6      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010d26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010d2a:	e7a3      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010d30:	e7a0      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010d32:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010d36:	e79d      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010d3c:	e79a      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010d3e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010d42:	e797      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CC_ERR;
 8010d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010d48:	e794      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010d4e:	e791      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8010d50:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010d54:	e78e      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010d56:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010d5a:	e78b      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010d5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010d60:	e788      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010d62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010d66:	e785      	b.n	8010c74 <SDMMC_CmdBusWidth+0x40>
 8010d68:	20000728 	.word	0x20000728
 8010d6c:	10624dd3 	.word	0x10624dd3
 8010d70:	fffee0c0 	.word	0xfffee0c0
 8010d74:	00200045 	.word	0x00200045
 8010d78:	002000c5 	.word	0x002000c5
 8010d7c:	fdffe008 	.word	0xfdffe008

08010d80 <SDMMC_CmdSendSCR>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d80:	4a4d      	ldr	r2, [pc, #308]	; (8010eb8 <SDMMC_CmdSendSCR+0x138>)
  SDMMCx->ARG = Command->Argument;
 8010d82:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d84:	494d      	ldr	r1, [pc, #308]	; (8010ebc <SDMMC_CmdSendSCR+0x13c>)
{
 8010d86:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d88:	4c4d      	ldr	r4, [pc, #308]	; (8010ec0 <SDMMC_CmdSendSCR+0x140>)
 8010d8a:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010d8c:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d8e:	f241 1333 	movw	r3, #4403	; 0x1133
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d92:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d96:	68c4      	ldr	r4, [r0, #12]
 8010d98:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d9a:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010d9c:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8010d9e:	f241 3188 	movw	r1, #5000	; 0x1388
 8010da2:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010da6:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 8010da8:	b14a      	cbz	r2, 8010dbe <SDMMC_CmdSendSCR+0x3e>
 8010daa:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8010dac:	4945      	ldr	r1, [pc, #276]	; (8010ec4 <SDMMC_CmdSendSCR+0x144>)
    sta_reg = SDMMCx->STA;
 8010dae:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010db0:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010db2:	420a      	tst	r2, r1
 8010db4:	d001      	beq.n	8010dba <SDMMC_CmdSendSCR+0x3a>
 8010db6:	0492      	lsls	r2, r2, #18
 8010db8:	d507      	bpl.n	8010dca <SDMMC_CmdSendSCR+0x4a>
    if (count-- == 0U)
 8010dba:	1c5c      	adds	r4, r3, #1
 8010dbc:	d1f7      	bne.n	8010dae <SDMMC_CmdSendSCR+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8010dbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dc8:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010dca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010dcc:	075c      	lsls	r4, r3, #29
 8010dce:	d43d      	bmi.n	8010e4c <SDMMC_CmdSendSCR+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010dd0:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010dd2:	f013 0301 	ands.w	r3, r3, #1
 8010dd6:	d134      	bne.n	8010e42 <SDMMC_CmdSendSCR+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010dd8:	4b3b      	ldr	r3, [pc, #236]	; (8010ec8 <SDMMC_CmdSendSCR+0x148>)
 8010dda:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8010ddc:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8010dde:	b2db      	uxtb	r3, r3
 8010de0:	2b33      	cmp	r3, #51	; 0x33
 8010de2:	d131      	bne.n	8010e48 <SDMMC_CmdSendSCR+0xc8>
  return (*(__IO uint32_t *) tmp);
 8010de4:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8010de6:	4b39      	ldr	r3, [pc, #228]	; (8010ecc <SDMMC_CmdSendSCR+0x14c>)
 8010de8:	4013      	ands	r3, r2
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d0e9      	beq.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8010dee:	2a00      	cmp	r2, #0
 8010df0:	db30      	blt.n	8010e54 <SDMMC_CmdSendSCR+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8010df2:	0051      	lsls	r1, r2, #1
 8010df4:	d431      	bmi.n	8010e5a <SDMMC_CmdSendSCR+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8010df6:	0094      	lsls	r4, r2, #2
 8010df8:	d431      	bmi.n	8010e5e <SDMMC_CmdSendSCR+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8010dfa:	00d0      	lsls	r0, r2, #3
 8010dfc:	d431      	bmi.n	8010e62 <SDMMC_CmdSendSCR+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8010dfe:	0111      	lsls	r1, r2, #4
 8010e00:	d432      	bmi.n	8010e68 <SDMMC_CmdSendSCR+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8010e02:	0154      	lsls	r4, r2, #5
 8010e04:	d433      	bmi.n	8010e6e <SDMMC_CmdSendSCR+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8010e06:	01d0      	lsls	r0, r2, #7
 8010e08:	d434      	bmi.n	8010e74 <SDMMC_CmdSendSCR+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8010e0a:	0211      	lsls	r1, r2, #8
 8010e0c:	d435      	bmi.n	8010e7a <SDMMC_CmdSendSCR+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8010e0e:	0254      	lsls	r4, r2, #9
 8010e10:	d436      	bmi.n	8010e80 <SDMMC_CmdSendSCR+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8010e12:	0290      	lsls	r0, r2, #10
 8010e14:	d440      	bmi.n	8010e98 <SDMMC_CmdSendSCR+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8010e16:	02d1      	lsls	r1, r2, #11
 8010e18:	d43b      	bmi.n	8010e92 <SDMMC_CmdSendSCR+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8010e1a:	0354      	lsls	r4, r2, #13
 8010e1c:	d436      	bmi.n	8010e8c <SDMMC_CmdSendSCR+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8010e1e:	0390      	lsls	r0, r2, #14
 8010e20:	d431      	bmi.n	8010e86 <SDMMC_CmdSendSCR+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8010e22:	03d1      	lsls	r1, r2, #15
 8010e24:	d444      	bmi.n	8010eb0 <SDMMC_CmdSendSCR+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8010e26:	0414      	lsls	r4, r2, #16
 8010e28:	d43f      	bmi.n	8010eaa <SDMMC_CmdSendSCR+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8010e2a:	0450      	lsls	r0, r2, #17
 8010e2c:	d43a      	bmi.n	8010ea4 <SDMMC_CmdSendSCR+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8010e2e:	0491      	lsls	r1, r2, #18
 8010e30:	d435      	bmi.n	8010e9e <SDMMC_CmdSendSCR+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8010e32:	f012 0f08 	tst.w	r2, #8
 8010e36:	bf14      	ite	ne
 8010e38:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8010e3c:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8010e40:	e7bf      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010e42:	2201      	movs	r2, #1
 8010e44:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e46:	e7bc      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8010e48:	2301      	movs	r3, #1
 8010e4a:	e7ba      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e4c:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e4e:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010e50:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010e52:	e7b6      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8010e54:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8010e58:	e7b3      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8010e5a:	2340      	movs	r3, #64	; 0x40
 8010e5c:	e7b1      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8010e5e:	2380      	movs	r3, #128	; 0x80
 8010e60:	e7af      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8010e62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8010e66:	e7ac      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8010e68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010e6c:	e7a9      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8010e6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010e72:	e7a6      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8010e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8010e78:	e7a3      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8010e7a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8010e7e:	e7a0      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 8010e80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8010e84:	e79d      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8010e86:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8010e8a:	e79a      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8010e8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8010e90:	e797      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CC_ERR;
 8010e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e96:	e794      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8010e98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8010e9c:	e791      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 8010e9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8010ea2:	e78e      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8010ea4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8010ea8:	e78b      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8010eaa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8010eae:	e788      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8010eb0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8010eb4:	e785      	b.n	8010dc2 <SDMMC_CmdSendSCR+0x42>
 8010eb6:	bf00      	nop
 8010eb8:	20000728 	.word	0x20000728
 8010ebc:	fffee0c0 	.word	0xfffee0c0
 8010ec0:	10624dd3 	.word	0x10624dd3
 8010ec4:	00200045 	.word	0x00200045
 8010ec8:	002000c5 	.word	0x002000c5
 8010ecc:	fdffe008 	.word	0xfdffe008

08010ed0 <SDMMC_CmdSendCID>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ed0:	4a1a      	ldr	r2, [pc, #104]	; (8010f3c <SDMMC_CmdSendCID+0x6c>)
{
 8010ed2:	4601      	mov	r1, r0
  SDMMCx->ARG = Command->Argument;
 8010ed4:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ed6:	481a      	ldr	r0, [pc, #104]	; (8010f40 <SDMMC_CmdSendCID+0x70>)
{
 8010ed8:	b410      	push	{r4}
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010eda:	4c1a      	ldr	r4, [pc, #104]	; (8010f44 <SDMMC_CmdSendCID+0x74>)
 8010edc:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010ede:	608b      	str	r3, [r1, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ee0:	f241 3302 	movw	r3, #4866	; 0x1302
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ee4:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ee8:	68cc      	ldr	r4, [r1, #12]
 8010eea:	4020      	ands	r0, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010eec:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010eee:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010ef0:	f241 3088 	movw	r0, #5000	; 0x1388
 8010ef4:	fb00 f202 	mul.w	r2, r0, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010ef8:	60cb      	str	r3, [r1, #12]
    if (count-- == 0U)
 8010efa:	b14a      	cbz	r2, 8010f10 <SDMMC_CmdSendCID+0x40>
 8010efc:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8010efe:	6b4a      	ldr	r2, [r1, #52]	; 0x34
    if (count-- == 0U)
 8010f00:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f02:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010f06:	d001      	beq.n	8010f0c <SDMMC_CmdSendCID+0x3c>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f08:	0492      	lsls	r2, r2, #18
 8010f0a:	d506      	bpl.n	8010f1a <SDMMC_CmdSendCID+0x4a>
    if (count-- == 0U)
 8010f0c:	1c58      	adds	r0, r3, #1
 8010f0e:	d1f6      	bne.n	8010efe <SDMMC_CmdSendCID+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8010f10:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010f14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f18:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f1a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8010f1c:	075b      	lsls	r3, r3, #29
 8010f1e:	d409      	bmi.n	8010f34 <SDMMC_CmdSendCID+0x64>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f20:	6b48      	ldr	r0, [r1, #52]	; 0x34
 8010f22:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010f26:	bf14      	ite	ne
 8010f28:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010f2a:	4b07      	ldreq	r3, [pc, #28]	; (8010f48 <SDMMC_CmdSendCID+0x78>)
 8010f2c:	638b      	str	r3, [r1, #56]	; 0x38
}
 8010f2e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f32:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f34:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f36:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010f38:	638b      	str	r3, [r1, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010f3a:	e7eb      	b.n	8010f14 <SDMMC_CmdSendCID+0x44>
 8010f3c:	20000728 	.word	0x20000728
 8010f40:	fffee0c0 	.word	0xfffee0c0
 8010f44:	10624dd3 	.word	0x10624dd3
 8010f48:	002000c5 	.word	0x002000c5

08010f4c <SDMMC_CmdSendCSD>:
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f4c:	4a1b      	ldr	r2, [pc, #108]	; (8010fbc <SDMMC_CmdSendCSD+0x70>)
{
 8010f4e:	4684      	mov	ip, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f50:	4b1b      	ldr	r3, [pc, #108]	; (8010fc0 <SDMMC_CmdSendCSD+0x74>)
 8010f52:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8010f54:	f8cc 1008 	str.w	r1, [ip, #8]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f58:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f5c:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8010f60:	4818      	ldr	r0, [pc, #96]	; (8010fc4 <SDMMC_CmdSendCSD+0x78>)
 8010f62:	f241 3309 	movw	r3, #4873	; 0x1309
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f66:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f68:	4008      	ands	r0, r1
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f6a:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f6e:	4303      	orrs	r3, r0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010f70:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010f74:	f8cc 300c 	str.w	r3, [ip, #12]
    if (count-- == 0U)
 8010f78:	1e53      	subs	r3, r2, #1
 8010f7a:	b14a      	cbz	r2, 8010f90 <SDMMC_CmdSendCSD+0x44>
    sta_reg = SDMMCx->STA;
 8010f7c:	f8dc 2034 	ldr.w	r2, [ip, #52]	; 0x34
    if (count-- == 0U)
 8010f80:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010f82:	f012 0f45 	tst.w	r2, #69	; 0x45
 8010f86:	d001      	beq.n	8010f8c <SDMMC_CmdSendCSD+0x40>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8010f88:	0492      	lsls	r2, r2, #18
 8010f8a:	d504      	bpl.n	8010f96 <SDMMC_CmdSendCSD+0x4a>
    if (count-- == 0U)
 8010f8c:	1c59      	adds	r1, r3, #1
 8010f8e:	d1f5      	bne.n	8010f7c <SDMMC_CmdSendCSD+0x30>
      return SDMMC_ERROR_TIMEOUT;
 8010f90:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
}
 8010f94:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8010f96:	f8dc 3034 	ldr.w	r3, [ip, #52]	; 0x34
 8010f9a:	075b      	lsls	r3, r3, #29
 8010f9c:	d409      	bmi.n	8010fb2 <SDMMC_CmdSendCSD+0x66>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8010f9e:	f8dc 0034 	ldr.w	r0, [ip, #52]	; 0x34
 8010fa2:	f010 0001 	ands.w	r0, r0, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8010fa6:	bf14      	ite	ne
 8010fa8:	2301      	movne	r3, #1
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8010faa:	4b07      	ldreq	r3, [pc, #28]	; (8010fc8 <SDMMC_CmdSendCSD+0x7c>)
 8010fac:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
  return SDMMC_ERROR_NONE;
 8010fb0:	4770      	bx	lr
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fb2:	2304      	movs	r3, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fb4:	4618      	mov	r0, r3
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8010fb6:	f8cc 3038 	str.w	r3, [ip, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8010fba:	4770      	bx	lr
 8010fbc:	20000728 	.word	0x20000728
 8010fc0:	10624dd3 	.word	0x10624dd3
 8010fc4:	fffee0c0 	.word	0xfffee0c0
 8010fc8:	002000c5 	.word	0x002000c5

08010fcc <SDMMC_CmdSetRelAdd>:
  SDMMCx->ARG = Command->Argument;
 8010fcc:	2300      	movs	r3, #0
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fce:	4a27      	ldr	r2, [pc, #156]	; (801106c <SDMMC_CmdSetRelAdd+0xa0>)
{
 8010fd0:	b410      	push	{r4}
  SDMMCx->ARG = Command->Argument;
 8010fd2:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010fd4:	4c26      	ldr	r4, [pc, #152]	; (8011070 <SDMMC_CmdSetRelAdd+0xa4>)
 8010fd6:	68c3      	ldr	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fd8:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010fda:	401c      	ands	r4, r3
 8010fdc:	f241 1303 	movw	r3, #4355	; 0x1103
 8010fe0:	4323      	orrs	r3, r4
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fe2:	4c24      	ldr	r4, [pc, #144]	; (8011074 <SDMMC_CmdSetRelAdd+0xa8>)
 8010fe4:	fba4 4202 	umull	r4, r2, r4, r2
 8010fe8:	f241 3488 	movw	r4, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8010fec:	60c3      	str	r3, [r0, #12]
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8010fee:	0a52      	lsrs	r2, r2, #9
 8010ff0:	fb04 f202 	mul.w	r2, r4, r2
    if (count-- == 0U)
 8010ff4:	b14a      	cbz	r2, 801100a <SDMMC_CmdSetRelAdd+0x3e>
 8010ff6:	1e53      	subs	r3, r2, #1
    sta_reg = SDMMCx->STA;
 8010ff8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 8010ffa:	3b01      	subs	r3, #1
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8010ffc:	f012 0f45 	tst.w	r2, #69	; 0x45
 8011000:	d001      	beq.n	8011006 <SDMMC_CmdSetRelAdd+0x3a>
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011002:	0492      	lsls	r2, r2, #18
 8011004:	d507      	bpl.n	8011016 <SDMMC_CmdSetRelAdd+0x4a>
    if (count-- == 0U)
 8011006:	1c5c      	adds	r4, r3, #1
 8011008:	d1f6      	bne.n	8010ff8 <SDMMC_CmdSetRelAdd+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 801100a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801100e:	4618      	mov	r0, r3
 8011010:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011014:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011016:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011018:	075c      	lsls	r4, r3, #29
 801101a:	d41c      	bmi.n	8011056 <SDMMC_CmdSetRelAdd+0x8a>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 801101c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801101e:	f013 0301 	ands.w	r3, r3, #1
 8011022:	d113      	bne.n	801104c <SDMMC_CmdSetRelAdd+0x80>
  return (uint8_t)(SDMMCx->RESPCMD);
 8011024:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011026:	b2db      	uxtb	r3, r3
 8011028:	2b03      	cmp	r3, #3
 801102a:	d112      	bne.n	8011052 <SDMMC_CmdSetRelAdd+0x86>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801102c:	4b12      	ldr	r3, [pc, #72]	; (8011078 <SDMMC_CmdSetRelAdd+0xac>)
 801102e:	6383      	str	r3, [r0, #56]	; 0x38
  return (*(__IO uint32_t *) tmp);
 8011030:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8011032:	f412 4360 	ands.w	r3, r2, #57344	; 0xe000
 8011036:	d015      	beq.n	8011064 <SDMMC_CmdSetRelAdd+0x98>
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011038:	0451      	lsls	r1, r2, #17
 801103a:	d410      	bmi.n	801105e <SDMMC_CmdSetRelAdd+0x92>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801103c:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8011040:	bf14      	ite	ne
 8011042:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 8011046:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801104a:	e7e0      	b.n	801100e <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801104c:	2201      	movs	r2, #1
 801104e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011050:	e7dd      	b.n	801100e <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011052:	2301      	movs	r3, #1
 8011054:	e7db      	b.n	801100e <SDMMC_CmdSetRelAdd+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011056:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011058:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801105a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801105c:	e7d7      	b.n	801100e <SDMMC_CmdSetRelAdd+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801105e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011062:	e7d4      	b.n	801100e <SDMMC_CmdSetRelAdd+0x42>
    *pRCA = (uint16_t)(response_r1 >> 16);
 8011064:	0c12      	lsrs	r2, r2, #16
 8011066:	800a      	strh	r2, [r1, #0]
    return SDMMC_ERROR_NONE;
 8011068:	e7d1      	b.n	801100e <SDMMC_CmdSetRelAdd+0x42>
 801106a:	bf00      	nop
 801106c:	20000728 	.word	0x20000728
 8011070:	fffee0c0 	.word	0xfffee0c0
 8011074:	10624dd3 	.word	0x10624dd3
 8011078:	002000c5 	.word	0x002000c5

0801107c <SDMMC_CmdSendStatus>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801107c:	4a4c      	ldr	r2, [pc, #304]	; (80111b0 <SDMMC_CmdSendStatus+0x134>)
 801107e:	4b4d      	ldr	r3, [pc, #308]	; (80111b4 <SDMMC_CmdSendStatus+0x138>)
{
 8011080:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011082:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 8011084:	6081      	str	r1, [r0, #8]
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011086:	fba3 3202 	umull	r3, r2, r3, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801108a:	68c1      	ldr	r1, [r0, #12]
 801108c:	4c4a      	ldr	r4, [pc, #296]	; (80111b8 <SDMMC_CmdSendStatus+0x13c>)
 801108e:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011092:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8011094:	400c      	ands	r4, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8011096:	f241 3188 	movw	r1, #5000	; 0x1388
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801109a:	4323      	orrs	r3, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 801109c:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80110a0:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80110a2:	b14a      	cbz	r2, 80110b8 <SDMMC_CmdSendStatus+0x3c>
 80110a4:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80110a6:	4945      	ldr	r1, [pc, #276]	; (80111bc <SDMMC_CmdSendStatus+0x140>)
    sta_reg = SDMMCx->STA;
 80110a8:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80110aa:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80110ac:	420a      	tst	r2, r1
 80110ae:	d001      	beq.n	80110b4 <SDMMC_CmdSendStatus+0x38>
 80110b0:	0492      	lsls	r2, r2, #18
 80110b2:	d507      	bpl.n	80110c4 <SDMMC_CmdSendStatus+0x48>
    if (count-- == 0U)
 80110b4:	1c5c      	adds	r4, r3, #1
 80110b6:	d1f7      	bne.n	80110a8 <SDMMC_CmdSendStatus+0x2c>
      return SDMMC_ERROR_TIMEOUT;
 80110b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80110bc:	4618      	mov	r0, r3
 80110be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80110c2:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80110c4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110c6:	075c      	lsls	r4, r3, #29
 80110c8:	d43d      	bmi.n	8011146 <SDMMC_CmdSendStatus+0xca>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80110ca:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80110cc:	f013 0301 	ands.w	r3, r3, #1
 80110d0:	d134      	bne.n	801113c <SDMMC_CmdSendStatus+0xc0>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80110d2:	4b3b      	ldr	r3, [pc, #236]	; (80111c0 <SDMMC_CmdSendStatus+0x144>)
 80110d4:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 80110d6:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80110d8:	b2db      	uxtb	r3, r3
 80110da:	2b0d      	cmp	r3, #13
 80110dc:	d131      	bne.n	8011142 <SDMMC_CmdSendStatus+0xc6>
  return (*(__IO uint32_t *) tmp);
 80110de:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80110e0:	4b38      	ldr	r3, [pc, #224]	; (80111c4 <SDMMC_CmdSendStatus+0x148>)
 80110e2:	4013      	ands	r3, r2
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d0e9      	beq.n	80110bc <SDMMC_CmdSendStatus+0x40>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80110e8:	2a00      	cmp	r2, #0
 80110ea:	db30      	blt.n	801114e <SDMMC_CmdSendStatus+0xd2>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80110ec:	0051      	lsls	r1, r2, #1
 80110ee:	d431      	bmi.n	8011154 <SDMMC_CmdSendStatus+0xd8>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80110f0:	0094      	lsls	r4, r2, #2
 80110f2:	d431      	bmi.n	8011158 <SDMMC_CmdSendStatus+0xdc>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80110f4:	00d0      	lsls	r0, r2, #3
 80110f6:	d431      	bmi.n	801115c <SDMMC_CmdSendStatus+0xe0>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80110f8:	0111      	lsls	r1, r2, #4
 80110fa:	d432      	bmi.n	8011162 <SDMMC_CmdSendStatus+0xe6>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80110fc:	0154      	lsls	r4, r2, #5
 80110fe:	d433      	bmi.n	8011168 <SDMMC_CmdSendStatus+0xec>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8011100:	01d0      	lsls	r0, r2, #7
 8011102:	d434      	bmi.n	801116e <SDMMC_CmdSendStatus+0xf2>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011104:	0211      	lsls	r1, r2, #8
 8011106:	d435      	bmi.n	8011174 <SDMMC_CmdSendStatus+0xf8>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011108:	0254      	lsls	r4, r2, #9
 801110a:	d436      	bmi.n	801117a <SDMMC_CmdSendStatus+0xfe>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801110c:	0290      	lsls	r0, r2, #10
 801110e:	d440      	bmi.n	8011192 <SDMMC_CmdSendStatus+0x116>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011110:	02d1      	lsls	r1, r2, #11
 8011112:	d43b      	bmi.n	801118c <SDMMC_CmdSendStatus+0x110>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011114:	0354      	lsls	r4, r2, #13
 8011116:	d436      	bmi.n	8011186 <SDMMC_CmdSendStatus+0x10a>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011118:	0390      	lsls	r0, r2, #14
 801111a:	d431      	bmi.n	8011180 <SDMMC_CmdSendStatus+0x104>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801111c:	03d1      	lsls	r1, r2, #15
 801111e:	d444      	bmi.n	80111aa <SDMMC_CmdSendStatus+0x12e>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011120:	0414      	lsls	r4, r2, #16
 8011122:	d43f      	bmi.n	80111a4 <SDMMC_CmdSendStatus+0x128>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011124:	0450      	lsls	r0, r2, #17
 8011126:	d43a      	bmi.n	801119e <SDMMC_CmdSendStatus+0x122>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011128:	0491      	lsls	r1, r2, #18
 801112a:	d435      	bmi.n	8011198 <SDMMC_CmdSendStatus+0x11c>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801112c:	f012 0f08 	tst.w	r2, #8
 8011130:	bf14      	ite	ne
 8011132:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011136:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 801113a:	e7bf      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801113c:	2201      	movs	r2, #1
 801113e:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011140:	e7bc      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011142:	2301      	movs	r3, #1
 8011144:	e7ba      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011146:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011148:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801114a:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801114c:	e7b6      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801114e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011152:	e7b3      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8011154:	2340      	movs	r3, #64	; 0x40
 8011156:	e7b1      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8011158:	2380      	movs	r3, #128	; 0x80
 801115a:	e7af      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801115c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011160:	e7ac      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8011162:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011166:	e7a9      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8011168:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801116c:	e7a6      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801116e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011172:	e7a3      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011174:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011178:	e7a0      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ILLEGAL_CMD;
 801117a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801117e:	e79d      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8011180:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011184:	e79a      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8011186:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801118a:	e797      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CC_ERR;
 801118c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011190:	e794      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8011192:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011196:	e791      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_ERASE_RESET;
 8011198:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801119c:	e78e      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801119e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80111a2:	e78b      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80111a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80111a8:	e788      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80111aa:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80111ae:	e785      	b.n	80110bc <SDMMC_CmdSendStatus+0x40>
 80111b0:	20000728 	.word	0x20000728
 80111b4:	10624dd3 	.word	0x10624dd3
 80111b8:	fffee0c0 	.word	0xfffee0c0
 80111bc:	00200045 	.word	0x00200045
 80111c0:	002000c5 	.word	0x002000c5
 80111c4:	fdffe008 	.word	0xfdffe008

080111c8 <SDMMC_CmdStatusRegister>:
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80111c8:	4a4d      	ldr	r2, [pc, #308]	; (8011300 <SDMMC_CmdStatusRegister+0x138>)
  SDMMCx->ARG = Command->Argument;
 80111ca:	2300      	movs	r3, #0
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111cc:	494d      	ldr	r1, [pc, #308]	; (8011304 <SDMMC_CmdStatusRegister+0x13c>)
{
 80111ce:	b410      	push	{r4}
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80111d0:	4c4d      	ldr	r4, [pc, #308]	; (8011308 <SDMMC_CmdStatusRegister+0x140>)
 80111d2:	6812      	ldr	r2, [r2, #0]
  SDMMCx->ARG = Command->Argument;
 80111d4:	6083      	str	r3, [r0, #8]
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111d6:	f241 130d 	movw	r3, #4365	; 0x110d
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80111da:	fba4 4202 	umull	r4, r2, r4, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111de:	68c4      	ldr	r4, [r0, #12]
 80111e0:	4021      	ands	r1, r4
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80111e2:	0a52      	lsrs	r2, r2, #9
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111e4:	430b      	orrs	r3, r1
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80111e6:	f241 3188 	movw	r1, #5000	; 0x1388
 80111ea:	fb01 f202 	mul.w	r2, r1, r2
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80111ee:	60c3      	str	r3, [r0, #12]
    if (count-- == 0U)
 80111f0:	b14a      	cbz	r2, 8011206 <SDMMC_CmdStatusRegister+0x3e>
 80111f2:	1e53      	subs	r3, r2, #1
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 80111f4:	4945      	ldr	r1, [pc, #276]	; (801130c <SDMMC_CmdStatusRegister+0x144>)
    sta_reg = SDMMCx->STA;
 80111f6:	6b42      	ldr	r2, [r0, #52]	; 0x34
    if (count-- == 0U)
 80111f8:	3b01      	subs	r3, #1
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80111fa:	420a      	tst	r2, r1
 80111fc:	d001      	beq.n	8011202 <SDMMC_CmdStatusRegister+0x3a>
 80111fe:	0492      	lsls	r2, r2, #18
 8011200:	d507      	bpl.n	8011212 <SDMMC_CmdStatusRegister+0x4a>
    if (count-- == 0U)
 8011202:	1c5c      	adds	r4, r3, #1
 8011204:	d1f7      	bne.n	80111f6 <SDMMC_CmdStatusRegister+0x2e>
      return SDMMC_ERROR_TIMEOUT;
 8011206:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 801120a:	4618      	mov	r0, r3
 801120c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011210:	4770      	bx	lr
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011212:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8011214:	075c      	lsls	r4, r3, #29
 8011216:	d43d      	bmi.n	8011294 <SDMMC_CmdStatusRegister+0xcc>
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011218:	6b43      	ldr	r3, [r0, #52]	; 0x34
 801121a:	f013 0301 	ands.w	r3, r3, #1
 801121e:	d134      	bne.n	801128a <SDMMC_CmdStatusRegister+0xc2>
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011220:	4b3b      	ldr	r3, [pc, #236]	; (8011310 <SDMMC_CmdStatusRegister+0x148>)
 8011222:	6383      	str	r3, [r0, #56]	; 0x38
  return (uint8_t)(SDMMCx->RESPCMD);
 8011224:	6903      	ldr	r3, [r0, #16]
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011226:	b2db      	uxtb	r3, r3
 8011228:	2b0d      	cmp	r3, #13
 801122a:	d131      	bne.n	8011290 <SDMMC_CmdStatusRegister+0xc8>
  return (*(__IO uint32_t *) tmp);
 801122c:	6942      	ldr	r2, [r0, #20]
  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801122e:	4b39      	ldr	r3, [pc, #228]	; (8011314 <SDMMC_CmdStatusRegister+0x14c>)
 8011230:	4013      	ands	r3, r2
 8011232:	2b00      	cmp	r3, #0
 8011234:	d0e9      	beq.n	801120a <SDMMC_CmdStatusRegister+0x42>
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8011236:	2a00      	cmp	r2, #0
 8011238:	db30      	blt.n	801129c <SDMMC_CmdStatusRegister+0xd4>
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801123a:	0051      	lsls	r1, r2, #1
 801123c:	d431      	bmi.n	80112a2 <SDMMC_CmdStatusRegister+0xda>
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 801123e:	0094      	lsls	r4, r2, #2
 8011240:	d431      	bmi.n	80112a6 <SDMMC_CmdStatusRegister+0xde>
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8011242:	00d0      	lsls	r0, r2, #3
 8011244:	d431      	bmi.n	80112aa <SDMMC_CmdStatusRegister+0xe2>
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8011246:	0111      	lsls	r1, r2, #4
 8011248:	d432      	bmi.n	80112b0 <SDMMC_CmdStatusRegister+0xe8>
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 801124a:	0154      	lsls	r4, r2, #5
 801124c:	d433      	bmi.n	80112b6 <SDMMC_CmdStatusRegister+0xee>
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 801124e:	01d0      	lsls	r0, r2, #7
 8011250:	d434      	bmi.n	80112bc <SDMMC_CmdStatusRegister+0xf4>
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8011252:	0211      	lsls	r1, r2, #8
 8011254:	d435      	bmi.n	80112c2 <SDMMC_CmdStatusRegister+0xfa>
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011256:	0254      	lsls	r4, r2, #9
 8011258:	d436      	bmi.n	80112c8 <SDMMC_CmdStatusRegister+0x100>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 801125a:	0290      	lsls	r0, r2, #10
 801125c:	d440      	bmi.n	80112e0 <SDMMC_CmdStatusRegister+0x118>
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 801125e:	02d1      	lsls	r1, r2, #11
 8011260:	d43b      	bmi.n	80112da <SDMMC_CmdStatusRegister+0x112>
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011262:	0354      	lsls	r4, r2, #13
 8011264:	d436      	bmi.n	80112d4 <SDMMC_CmdStatusRegister+0x10c>
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011266:	0390      	lsls	r0, r2, #14
 8011268:	d431      	bmi.n	80112ce <SDMMC_CmdStatusRegister+0x106>
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 801126a:	03d1      	lsls	r1, r2, #15
 801126c:	d444      	bmi.n	80112f8 <SDMMC_CmdStatusRegister+0x130>
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 801126e:	0414      	lsls	r4, r2, #16
 8011270:	d43f      	bmi.n	80112f2 <SDMMC_CmdStatusRegister+0x12a>
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011272:	0450      	lsls	r0, r2, #17
 8011274:	d43a      	bmi.n	80112ec <SDMMC_CmdStatusRegister+0x124>
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011276:	0491      	lsls	r1, r2, #18
 8011278:	d435      	bmi.n	80112e6 <SDMMC_CmdStatusRegister+0x11e>
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801127a:	f012 0f08 	tst.w	r2, #8
 801127e:	bf14      	ite	ne
 8011280:	f44f 0300 	movne.w	r3, #8388608	; 0x800000
 8011284:	f44f 3380 	moveq.w	r3, #65536	; 0x10000
 8011288:	e7bf      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801128a:	2201      	movs	r2, #1
 801128c:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801128e:	e7bc      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011290:	2301      	movs	r3, #1
 8011292:	e7ba      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011294:	2204      	movs	r2, #4
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011296:	4613      	mov	r3, r2
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011298:	6382      	str	r2, [r0, #56]	; 0x38
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801129a:	e7b6      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 801129c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80112a0:	e7b3      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80112a2:	2340      	movs	r3, #64	; 0x40
 80112a4:	e7b1      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80112a6:	2380      	movs	r3, #128	; 0x80
 80112a8:	e7af      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80112aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112ae:	e7ac      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80112b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80112b4:	e7a9      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80112b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80112ba:	e7a6      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80112bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80112c0:	e7a3      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_COM_CRC_FAILED;
 80112c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112c6:	e7a0      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ILLEGAL_CMD;
 80112c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80112cc:	e79d      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80112ce:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80112d2:	e79a      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80112d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80112d8:	e797      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CC_ERR;
 80112da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80112de:	e794      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80112e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80112e4:	e791      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_ERASE_RESET;
 80112e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80112ea:	e78e      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80112ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80112f0:	e78b      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80112f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80112f6:	e788      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80112f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80112fc:	e785      	b.n	801120a <SDMMC_CmdStatusRegister+0x42>
 80112fe:	bf00      	nop
 8011300:	20000728 	.word	0x20000728
 8011304:	fffee0c0 	.word	0xfffee0c0
 8011308:	10624dd3 	.word	0x10624dd3
 801130c:	00200045 	.word	0x00200045
 8011310:	002000c5 	.word	0x002000c5
 8011314:	fdffe008 	.word	0xfdffe008

08011318 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8011318:	b508      	push	{r3, lr}
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 801131a:	4903      	ldr	r1, [pc, #12]	; (8011328 <MX_FATFS_Init+0x10>)
 801131c:	4803      	ldr	r0, [pc, #12]	; (801132c <MX_FATFS_Init+0x14>)
 801131e:	f003 f94f 	bl	80145c0 <FATFS_LinkDriver>
 8011322:	4b03      	ldr	r3, [pc, #12]	; (8011330 <MX_FATFS_Init+0x18>)
 8011324:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8011326:	bd08      	pop	{r3, pc}
 8011328:	20019bf0 	.word	0x20019bf0
 801132c:	0801fa8c 	.word	0x0801fa8c
 8011330:	20019bf4 	.word	0x20019bf4

08011334 <get_fattime>:
DWORD get_fattime(void)
{
  /* USER CODE BEGIN get_fattime */
  return 0;
  /* USER CODE END get_fattime */
}
 8011334:	2000      	movs	r0, #0
 8011336:	4770      	bx	lr

08011338 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8011338:	b510      	push	{r4, lr}
 801133a:	4694      	mov	ip, r2
 801133c:	b082      	sub	sp, #8
 801133e:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011340:	460a      	mov	r2, r1
 8011342:	4663      	mov	r3, ip
 8011344:	4601      	mov	r1, r0
 8011346:	9400      	str	r4, [sp, #0]
 8011348:	4803      	ldr	r0, [pc, #12]	; (8011358 <BSP_SD_ReadBlocks+0x20>)
 801134a:	f7fd f8fb 	bl	800e544 <HAL_SD_ReadBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 801134e:	3800      	subs	r0, #0
 8011350:	bf18      	it	ne
 8011352:	2001      	movne	r0, #1
 8011354:	b002      	add	sp, #8
 8011356:	bd10      	pop	{r4, pc}
 8011358:	20019394 	.word	0x20019394

0801135c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 801135c:	b510      	push	{r4, lr}
 801135e:	4694      	mov	ip, r2
 8011360:	b082      	sub	sp, #8
 8011362:	461c      	mov	r4, r3
  uint8_t sd_state = MSD_OK;

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8011364:	460a      	mov	r2, r1
 8011366:	4663      	mov	r3, ip
 8011368:	4601      	mov	r1, r0
 801136a:	9400      	str	r4, [sp, #0]
 801136c:	4803      	ldr	r0, [pc, #12]	; (801137c <BSP_SD_WriteBlocks+0x20>)
 801136e:	f7fd f9f1 	bl	800e754 <HAL_SD_WriteBlocks>
  {
    sd_state = MSD_ERROR;
  }

  return sd_state;
}
 8011372:	3800      	subs	r0, #0
 8011374:	bf18      	it	ne
 8011376:	2001      	movne	r0, #1
 8011378:	b002      	add	sp, #8
 801137a:	bd10      	pop	{r4, pc}
 801137c:	20019394 	.word	0x20019394

08011380 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8011380:	b508      	push	{r3, lr}
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8011382:	4803      	ldr	r0, [pc, #12]	; (8011390 <BSP_SD_GetCardState+0x10>)
 8011384:	f7fd fe54 	bl	800f030 <HAL_SD_GetCardState>
}
 8011388:	3804      	subs	r0, #4
 801138a:	bf18      	it	ne
 801138c:	2001      	movne	r0, #1
 801138e:	bd08      	pop	{r3, pc}
 8011390:	20019394 	.word	0x20019394

08011394 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8011394:	4601      	mov	r1, r0
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8011396:	4801      	ldr	r0, [pc, #4]	; (801139c <BSP_SD_GetCardInfo+0x8>)
 8011398:	f7fd bcfa 	b.w	800ed90 <HAL_SD_GetCardInfo>
 801139c:	20019394 	.word	0x20019394

080113a0 <BSP_SD_WriteCpltCallback>:
 80113a0:	4770      	bx	lr
 80113a2:	bf00      	nop

080113a4 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80113a4:	b508      	push	{r3, lr}
  BSP_SD_WriteCpltCallback();
 80113a6:	f7ff fffb 	bl	80113a0 <BSP_SD_WriteCpltCallback>
}
 80113aa:	bd08      	pop	{r3, pc}

080113ac <BSP_SD_ReadCpltCallback>:
 80113ac:	4770      	bx	lr
 80113ae:	bf00      	nop

080113b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80113b0:	b508      	push	{r3, lr}
  BSP_SD_ReadCpltCallback();
 80113b2:	f7ff fffb 	bl	80113ac <BSP_SD_ReadCpltCallback>
}
 80113b6:	bd08      	pop	{r3, pc}

080113b8 <BSP_SD_Init>:
{
 80113b8:	b508      	push	{r3, lr}
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80113ba:	f7f4 fd4b 	bl	8005e54 <BSP_SD_IsDetected>
 80113be:	2801      	cmp	r0, #1
 80113c0:	d001      	beq.n	80113c6 <BSP_SD_Init+0xe>
    return MSD_ERROR_SD_NOT_PRESENT;
 80113c2:	2002      	movs	r0, #2
}
 80113c4:	bd08      	pop	{r3, pc}
  sd_state = HAL_SD_Init(&hsd1);
 80113c6:	4807      	ldr	r0, [pc, #28]	; (80113e4 <BSP_SD_Init+0x2c>)
 80113c8:	f7fd fdca 	bl	800ef60 <HAL_SD_Init>
  if (sd_state == MSD_OK)
 80113cc:	2800      	cmp	r0, #0
 80113ce:	d1f9      	bne.n	80113c4 <BSP_SD_Init+0xc>
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80113d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80113d4:	4803      	ldr	r0, [pc, #12]	; (80113e4 <BSP_SD_Init+0x2c>)
 80113d6:	f7fd fcef 	bl	800edb8 <HAL_SD_ConfigWideBusOperation>
    return MSD_ERROR_SD_NOT_PRESENT;
 80113da:	3800      	subs	r0, #0
 80113dc:	bf18      	it	ne
 80113de:	2001      	movne	r0, #1
}
 80113e0:	bd08      	pop	{r3, pc}
 80113e2:	bf00      	nop
 80113e4:	20019394 	.word	0x20019394

080113e8 <BSP_PlatformIsDetected>:
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
    uint8_t status = SD_PRESENT;
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80113e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80113ec:	4803      	ldr	r0, [pc, #12]	; (80113fc <BSP_PlatformIsDetected+0x14>)
uint8_t	BSP_PlatformIsDetected(void) {
 80113ee:	b508      	push	{r3, lr}
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80113f0:	f7f9 fbc0 	bl	800ab74 <HAL_GPIO_ReadPin>
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
}
 80113f4:	fab0 f080 	clz	r0, r0
 80113f8:	0940      	lsrs	r0, r0, #5
 80113fa:	bd08      	pop	{r3, pc}
 80113fc:	58020800 	.word	0x58020800

08011400 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8011400:	b538      	push	{r3, r4, r5, lr}
Stat = STA_NOINIT;
 8011402:	4c0a      	ldr	r4, [pc, #40]	; (801142c <SD_initialize+0x2c>)
 8011404:	2501      	movs	r5, #1
 8011406:	7025      	strb	r5, [r4, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8011408:	f7ff ffd6 	bl	80113b8 <BSP_SD_Init>
 801140c:	b108      	cbz	r0, 8011412 <SD_initialize+0x12>

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 801140e:	7820      	ldrb	r0, [r4, #0]
}
 8011410:	bd38      	pop	{r3, r4, r5, pc}
  Stat = STA_NOINIT;
 8011412:	7025      	strb	r5, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8011414:	f7ff ffb4 	bl	8011380 <BSP_SD_GetCardState>
 8011418:	b918      	cbnz	r0, 8011422 <SD_initialize+0x22>
    Stat &= ~STA_NOINIT;
 801141a:	7823      	ldrb	r3, [r4, #0]
 801141c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8011420:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011422:	7823      	ldrb	r3, [r4, #0]
 8011424:	b2db      	uxtb	r3, r3
    Stat = SD_CheckStatus(lun);
 8011426:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011428:	7820      	ldrb	r0, [r4, #0]
}
 801142a:	bd38      	pop	{r3, r4, r5, pc}
 801142c:	20000738 	.word	0x20000738

08011430 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8011430:	b510      	push	{r4, lr}
  Stat = STA_NOINIT;
 8011432:	2301      	movs	r3, #1
 8011434:	4c05      	ldr	r4, [pc, #20]	; (801144c <SD_status+0x1c>)
 8011436:	7023      	strb	r3, [r4, #0]
  if(BSP_SD_GetCardState() == MSD_OK)
 8011438:	f7ff ffa2 	bl	8011380 <BSP_SD_GetCardState>
 801143c:	b918      	cbnz	r0, 8011446 <SD_status+0x16>
    Stat &= ~STA_NOINIT;
 801143e:	7823      	ldrb	r3, [r4, #0]
 8011440:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8011444:	7023      	strb	r3, [r4, #0]
  return Stat;
 8011446:	7820      	ldrb	r0, [r4, #0]
  return SD_CheckStatus(lun);
}
 8011448:	bd10      	pop	{r4, pc}
 801144a:	bf00      	nop
 801144c:	20000738 	.word	0x20000738

08011450 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8011450:	b508      	push	{r3, lr}
 8011452:	4608      	mov	r0, r1
 8011454:	4611      	mov	r1, r2
 8011456:	461a      	mov	r2, r3
  DRESULT res = RES_ERROR;

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8011458:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801145c:	f7ff ff6c 	bl	8011338 <BSP_SD_ReadBlocks>
 8011460:	b108      	cbz	r0, 8011466 <SD_read+0x16>
  DRESULT res = RES_ERROR;
 8011462:	2001      	movs	r0, #1
    }
    res = RES_OK;
  }

  return res;
}
 8011464:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 8011466:	f7ff ff8b 	bl	8011380 <BSP_SD_GetCardState>
 801146a:	2800      	cmp	r0, #0
 801146c:	d0fa      	beq.n	8011464 <SD_read+0x14>
 801146e:	f7ff ff87 	bl	8011380 <BSP_SD_GetCardState>
 8011472:	2800      	cmp	r0, #0
 8011474:	d1f7      	bne.n	8011466 <SD_read+0x16>
 8011476:	e7f5      	b.n	8011464 <SD_read+0x14>

08011478 <SD_ioctl>:
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
  DRESULT res = RES_ERROR;
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011478:	4b18      	ldr	r3, [pc, #96]	; (80114dc <SD_ioctl+0x64>)
{
 801147a:	b530      	push	{r4, r5, lr}
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 801147c:	7818      	ldrb	r0, [r3, #0]
{
 801147e:	b08b      	sub	sp, #44	; 0x2c
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011480:	f010 0401 	ands.w	r4, r0, #1
 8011484:	d106      	bne.n	8011494 <SD_ioctl+0x1c>
 8011486:	4615      	mov	r5, r2

  switch (cmd)
 8011488:	2903      	cmp	r1, #3
 801148a:	d824      	bhi.n	80114d6 <SD_ioctl+0x5e>
 801148c:	e8df f001 	tbb	[pc, r1]
 8011490:	1a120a06 	.word	0x1a120a06
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8011494:	2403      	movs	r4, #3
  default:
    res = RES_PARERR;
  }

  return res;
}
 8011496:	4620      	mov	r0, r4
 8011498:	b00b      	add	sp, #44	; 0x2c
 801149a:	bd30      	pop	{r4, r5, pc}
    res = RES_OK;
 801149c:	460c      	mov	r4, r1
}
 801149e:	4620      	mov	r0, r4
 80114a0:	b00b      	add	sp, #44	; 0x2c
 80114a2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80114a4:	a801      	add	r0, sp, #4
 80114a6:	f7ff ff75 	bl	8011394 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80114aa:	9b07      	ldr	r3, [sp, #28]
}
 80114ac:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80114ae:	602b      	str	r3, [r5, #0]
}
 80114b0:	b00b      	add	sp, #44	; 0x2c
 80114b2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80114b4:	a801      	add	r0, sp, #4
 80114b6:	f7ff ff6d 	bl	8011394 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80114ba:	9b08      	ldr	r3, [sp, #32]
}
 80114bc:	4620      	mov	r0, r4
    *(WORD*)buff = CardInfo.LogBlockSize;
 80114be:	802b      	strh	r3, [r5, #0]
}
 80114c0:	b00b      	add	sp, #44	; 0x2c
 80114c2:	bd30      	pop	{r4, r5, pc}
    BSP_SD_GetCardInfo(&CardInfo);
 80114c4:	a801      	add	r0, sp, #4
 80114c6:	f7ff ff65 	bl	8011394 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80114ca:	9b08      	ldr	r3, [sp, #32]
}
 80114cc:	4620      	mov	r0, r4
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80114ce:	0a5b      	lsrs	r3, r3, #9
 80114d0:	602b      	str	r3, [r5, #0]
}
 80114d2:	b00b      	add	sp, #44	; 0x2c
 80114d4:	bd30      	pop	{r4, r5, pc}
  switch (cmd)
 80114d6:	2404      	movs	r4, #4
 80114d8:	e7dd      	b.n	8011496 <SD_ioctl+0x1e>
 80114da:	bf00      	nop
 80114dc:	20000738 	.word	0x20000738

080114e0 <SD_write>:
{
 80114e0:	b508      	push	{r3, lr}
 80114e2:	4608      	mov	r0, r1
 80114e4:	4611      	mov	r1, r2
 80114e6:	461a      	mov	r2, r3
  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80114e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80114ec:	f7ff ff36 	bl	801135c <BSP_SD_WriteBlocks>
 80114f0:	b108      	cbz	r0, 80114f6 <SD_write+0x16>
  DRESULT res = RES_ERROR;
 80114f2:	2001      	movs	r0, #1
}
 80114f4:	bd08      	pop	{r3, pc}
    while(BSP_SD_GetCardState()!= MSD_OK)
 80114f6:	f7ff ff43 	bl	8011380 <BSP_SD_GetCardState>
 80114fa:	2800      	cmp	r0, #0
 80114fc:	d0fa      	beq.n	80114f4 <SD_write+0x14>
 80114fe:	f7ff ff3f 	bl	8011380 <BSP_SD_GetCardState>
 8011502:	2800      	cmp	r0, #0
 8011504:	d1f7      	bne.n	80114f6 <SD_write+0x16>
 8011506:	e7f5      	b.n	80114f4 <SD_write+0x14>

08011508 <disk_status>:
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011508:	4b03      	ldr	r3, [pc, #12]	; (8011518 <disk_status+0x10>)
 801150a:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 801150e:	4403      	add	r3, r0
 8011510:	6852      	ldr	r2, [r2, #4]
 8011512:	7a18      	ldrb	r0, [r3, #8]
 8011514:	6853      	ldr	r3, [r2, #4]
 8011516:	4718      	bx	r3
 8011518:	20019e20 	.word	0x20019e20

0801151c <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;

  if(disk.is_initialized[pdrv] == 0)
 801151c:	4b07      	ldr	r3, [pc, #28]	; (801153c <disk_initialize+0x20>)
 801151e:	5c1a      	ldrb	r2, [r3, r0]
 8011520:	b952      	cbnz	r2, 8011538 <disk_initialize+0x1c>
  {
    disk.is_initialized[pdrv] = 1;
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011522:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 8011526:	1819      	adds	r1, r3, r0
    disk.is_initialized[pdrv] = 1;
 8011528:	f04f 0c01 	mov.w	ip, #1
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 801152c:	6852      	ldr	r2, [r2, #4]
    disk.is_initialized[pdrv] = 1;
 801152e:	f803 c000 	strb.w	ip, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011532:	7a08      	ldrb	r0, [r1, #8]
 8011534:	6813      	ldr	r3, [r2, #0]
 8011536:	4718      	bx	r3
  }
  return stat;
}
 8011538:	2000      	movs	r0, #0
 801153a:	4770      	bx	lr
 801153c:	20019e20 	.word	0x20019e20

08011540 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011540:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011542:	4c05      	ldr	r4, [pc, #20]	; (8011558 <disk_read+0x18>)
 8011544:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8011548:	4404      	add	r4, r0
 801154a:	686d      	ldr	r5, [r5, #4]
 801154c:	7a20      	ldrb	r0, [r4, #8]
 801154e:	68ac      	ldr	r4, [r5, #8]
 8011550:	46a4      	mov	ip, r4
  return res;
}
 8011552:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011554:	4760      	bx	ip
 8011556:	bf00      	nop
 8011558:	20019e20 	.word	0x20019e20

0801155c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801155c:	b430      	push	{r4, r5}
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801155e:	4c05      	ldr	r4, [pc, #20]	; (8011574 <disk_write+0x18>)
 8011560:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8011564:	4404      	add	r4, r0
 8011566:	686d      	ldr	r5, [r5, #4]
 8011568:	7a20      	ldrb	r0, [r4, #8]
 801156a:	68ec      	ldr	r4, [r5, #12]
 801156c:	46a4      	mov	ip, r4
  return res;
}
 801156e:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011570:	4760      	bx	ip
 8011572:	bf00      	nop
 8011574:	20019e20 	.word	0x20019e20

08011578 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011578:	4b04      	ldr	r3, [pc, #16]	; (801158c <disk_ioctl+0x14>)
 801157a:	eb03 0c00 	add.w	ip, r3, r0
 801157e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	f89c 0008 	ldrb.w	r0, [ip, #8]
 8011588:	691b      	ldr	r3, [r3, #16]
 801158a:	4718      	bx	r3
 801158c:	20019e20 	.word	0x20019e20

08011590 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->obj.fs &&
 8011590:	4b26      	ldr	r3, [pc, #152]	; (801162c <inc_lock+0x9c>)
{
 8011592:	b4f0      	push	{r4, r5, r6, r7}
		if (Files[i].fs == dp->obj.fs &&
 8011594:	681a      	ldr	r2, [r3, #0]
 8011596:	6805      	ldr	r5, [r0, #0]
 8011598:	4295      	cmp	r5, r2
 801159a:	d01b      	beq.n	80115d4 <inc_lock+0x44>
 801159c:	691c      	ldr	r4, [r3, #16]
 801159e:	42ac      	cmp	r4, r5
 80115a0:	d006      	beq.n	80115b0 <inc_lock+0x20>
			Files[i].clu == dp->obj.sclust &&
			Files[i].ofs == dp->dptr) break;
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80115a2:	b30a      	cbz	r2, 80115e8 <inc_lock+0x58>
 80115a4:	2c00      	cmp	r4, #0
 80115a6:	d036      	beq.n	8011616 <inc_lock+0x86>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80115a8:	2400      	movs	r4, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */

	return i + 1;
}
 80115aa:	4620      	mov	r0, r4
 80115ac:	bcf0      	pop	{r4, r5, r6, r7}
 80115ae:	4770      	bx	lr
		if (Files[i].fs == dp->obj.fs &&
 80115b0:	695e      	ldr	r6, [r3, #20]
 80115b2:	6887      	ldr	r7, [r0, #8]
 80115b4:	42be      	cmp	r6, r7
 80115b6:	d1f4      	bne.n	80115a2 <inc_lock+0x12>
			Files[i].clu == dp->obj.sclust &&
 80115b8:	699e      	ldr	r6, [r3, #24]
 80115ba:	6947      	ldr	r7, [r0, #20]
 80115bc:	42be      	cmp	r6, r7
 80115be:	d1f0      	bne.n	80115a2 <inc_lock+0x12>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80115c0:	2201      	movs	r2, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80115c2:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 80115c6:	bb49      	cbnz	r1, 801161c <inc_lock+0x8c>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80115c8:	0111      	lsls	r1, r2, #4
	return i + 1;
 80115ca:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80115cc:	8982      	ldrh	r2, [r0, #12]
 80115ce:	3201      	adds	r2, #1
 80115d0:	b292      	uxth	r2, r2
 80115d2:	e01b      	b.n	801160c <inc_lock+0x7c>
		if (Files[i].fs == dp->obj.fs &&
 80115d4:	6884      	ldr	r4, [r0, #8]
 80115d6:	685e      	ldr	r6, [r3, #4]
 80115d8:	42a6      	cmp	r6, r4
 80115da:	d1df      	bne.n	801159c <inc_lock+0xc>
			Files[i].clu == dp->obj.sclust &&
 80115dc:	689c      	ldr	r4, [r3, #8]
 80115de:	6946      	ldr	r6, [r0, #20]
 80115e0:	42a6      	cmp	r6, r4
 80115e2:	d1db      	bne.n	801159c <inc_lock+0xc>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80115e4:	2200      	movs	r2, #0
 80115e6:	e7ec      	b.n	80115c2 <inc_lock+0x32>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80115e8:	2401      	movs	r4, #1
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80115ea:	2900      	cmp	r1, #0
		Files[i].fs = dp->obj.fs;
 80115ec:	ea4f 1102 	mov.w	r1, r2, lsl #4
 80115f0:	eb03 1202 	add.w	r2, r3, r2, lsl #4
 80115f4:	505d      	str	r5, [r3, r1]
		Files[i].clu = dp->obj.sclust;
 80115f6:	6945      	ldr	r5, [r0, #20]
 80115f8:	6880      	ldr	r0, [r0, #8]
 80115fa:	e9c2 0501 	strd	r0, r5, [r2, #4]
		Files[i].ctr = 0;
 80115fe:	f04f 0000 	mov.w	r0, #0
 8011602:	8190      	strh	r0, [r2, #12]
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8011604:	bf14      	ite	ne
 8011606:	f44f 7280 	movne.w	r2, #256	; 0x100
 801160a:	2201      	moveq	r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 801160c:	440b      	add	r3, r1
}
 801160e:	4620      	mov	r0, r4
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011610:	819a      	strh	r2, [r3, #12]
}
 8011612:	bcf0      	pop	{r4, r5, r6, r7}
 8011614:	4770      	bx	lr
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8011616:	2402      	movs	r4, #2
 8011618:	2201      	movs	r2, #1
 801161a:	e7e6      	b.n	80115ea <inc_lock+0x5a>
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801161c:	8980      	ldrh	r0, [r0, #12]
 801161e:	0111      	lsls	r1, r2, #4
 8011620:	2800      	cmp	r0, #0
 8011622:	d1c1      	bne.n	80115a8 <inc_lock+0x18>
	return i + 1;
 8011624:	1c54      	adds	r4, r2, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8011626:	f44f 7280 	mov.w	r2, #256	; 0x100
 801162a:	e7ef      	b.n	801160c <inc_lock+0x7c>
 801162c:	20019bfc 	.word	0x20019bfc

08011630 <pattern_matching>:
	const TCHAR* pat,	/* Matching pattern */
	const TCHAR* nam,	/* String to be tested */
	int skip,			/* Number of pre-skip chars (number of ?s) */
	int inf				/* Infinite search (* specified) */
)
{
 8011630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011634:	440a      	add	r2, r1
 8011636:	460d      	mov	r5, r1
 8011638:	4606      	mov	r6, r0
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 801163a:	4f37      	ldr	r7, [pc, #220]	; (8011718 <pattern_matching+0xe8>)
	const TCHAR *pp, *np;
	WCHAR pc, nc;
	int nm, nx;


	while (skip--) {				/* Pre-skip name chars */
 801163c:	42aa      	cmp	r2, r5
 801163e:	d012      	beq.n	8011666 <pattern_matching+0x36>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011640:	f815 cb01 	ldrb.w	ip, [r5], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011644:	f1ac 0161 	sub.w	r1, ip, #97	; 0x61
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011648:	eb07 000c 	add.w	r0, r7, ip
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801164c:	fa1f f48c 	uxth.w	r4, ip
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011650:	2919      	cmp	r1, #25
 8011652:	d9f3      	bls.n	801163c <pattern_matching+0xc>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011654:	2c7f      	cmp	r4, #127	; 0x7f
 8011656:	bf88      	it	hi
 8011658:	f810 4c80 	ldrbhi.w	r4, [r0, #-128]
		if (!get_achar(&nam)) return 0;	/* Branch mismatched if less name chars */
 801165c:	2c00      	cmp	r4, #0
 801165e:	d1ed      	bne.n	801163c <pattern_matching+0xc>
 8011660:	2000      	movs	r0, #0
		}
		get_achar(&nam);			/* nam++ */
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */

	return 0;
}
 8011662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!*pat && inf) return 1;		/* (short circuit) */
 8011666:	1e1f      	subs	r7, r3, #0
 8011668:	f896 8000 	ldrb.w	r8, [r6]
 801166c:	bf18      	it	ne
 801166e:	2701      	movne	r7, #1
 8011670:	f1b8 0f00 	cmp.w	r8, #0
 8011674:	d100      	bne.n	8011678 <pattern_matching+0x48>
 8011676:	bb8f      	cbnz	r7, 80116dc <pattern_matching+0xac>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8011678:	4c27      	ldr	r4, [pc, #156]	; (8011718 <pattern_matching+0xe8>)
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801167a:	4630      	mov	r0, r6
{
 801167c:	4643      	mov	r3, r8
		pp = pat; np = nam;			/* Top of pattern and name to match */
 801167e:	46a9      	mov	r9, r5
 8011680:	e010      	b.n	80116a4 <pattern_matching+0x74>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011682:	3a20      	subs	r2, #32
 8011684:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8011686:	f819 1b01 	ldrb.w	r1, [r9], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801168a:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801168e:	b28b      	uxth	r3, r1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8011690:	f1bc 0f19 	cmp.w	ip, #25
 8011694:	d815      	bhi.n	80116c2 <pattern_matching+0x92>
 8011696:	3b20      	subs	r3, #32
 8011698:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 801169a:	4293      	cmp	r3, r2
 801169c:	d118      	bne.n	80116d0 <pattern_matching+0xa0>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 801169e:	b1eb      	cbz	r3, 80116dc <pattern_matching+0xac>
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80116a0:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80116a4:	2b3f      	cmp	r3, #63	; 0x3f
 80116a6:	d01c      	beq.n	80116e2 <pattern_matching+0xb2>
 80116a8:	2b2a      	cmp	r3, #42	; 0x2a
 80116aa:	d01a      	beq.n	80116e2 <pattern_matching+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80116ac:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80116b0:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80116b2:	2919      	cmp	r1, #25
 80116b4:	d9e5      	bls.n	8011682 <pattern_matching+0x52>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80116b6:	2a7f      	cmp	r2, #127	; 0x7f
 80116b8:	d9e5      	bls.n	8011686 <pattern_matching+0x56>
 80116ba:	4423      	add	r3, r4
 80116bc:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 80116c0:	e7e1      	b.n	8011686 <pattern_matching+0x56>
 80116c2:	2b7f      	cmp	r3, #127	; 0x7f
 80116c4:	d9e9      	bls.n	801169a <pattern_matching+0x6a>
 80116c6:	4421      	add	r1, r4
 80116c8:	f811 3c80 	ldrb.w	r3, [r1, #-128]
			if (pc != nc) break;	/* Branch mismatched? */
 80116cc:	4293      	cmp	r3, r2
 80116ce:	d0e6      	beq.n	801169e <pattern_matching+0x6e>
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80116d0:	3501      	adds	r5, #1
	} while (inf && nc);			/* Retry until end of name if infinite search is specified */
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d0c4      	beq.n	8011660 <pattern_matching+0x30>
 80116d6:	2f00      	cmp	r7, #0
 80116d8:	d1cf      	bne.n	801167a <pattern_matching+0x4a>
 80116da:	e7c1      	b.n	8011660 <pattern_matching+0x30>
	if (!*pat && inf) return 1;		/* (short circuit) */
 80116dc:	2001      	movs	r0, #1
}
 80116de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116e2:	4601      	mov	r1, r0
				nm = nx = 0;
 80116e4:	2300      	movs	r3, #0
 80116e6:	f811 cb01 	ldrb.w	ip, [r1], #1
 80116ea:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 80116ec:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 80116f0:	4608      	mov	r0, r1
				} while (*pp == '?' || *pp == '*');
 80116f2:	f811 cb01 	ldrb.w	ip, [r1], #1
					if (*pp++ == '?') nm++; else nx = 1;
 80116f6:	bf0c      	ite	eq
 80116f8:	3201      	addeq	r2, #1
 80116fa:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 80116fc:	f1bc 0f2a 	cmp.w	ip, #42	; 0x2a
 8011700:	d0f4      	beq.n	80116ec <pattern_matching+0xbc>
 8011702:	f1bc 0f3f 	cmp.w	ip, #63	; 0x3f
 8011706:	d0f1      	beq.n	80116ec <pattern_matching+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8011708:	4649      	mov	r1, r9
 801170a:	f7ff ff91 	bl	8011630 <pattern_matching>
 801170e:	2800      	cmp	r0, #0
 8011710:	d1e4      	bne.n	80116dc <pattern_matching+0xac>
				nc = *np; break;	/* Branch mismatched */
 8011712:	f899 3000 	ldrb.w	r3, [r9]
 8011716:	e7db      	b.n	80116d0 <pattern_matching+0xa0>
 8011718:	0801fab4 	.word	0x0801fab4

0801171c <get_fileinfo>:
	fno->fname[0] = 0;		/* Invaidate file info */
 801171c:	2300      	movs	r3, #0
{
 801171e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	FATFS *fs = dp->obj.fs;
 8011722:	f8d0 8000 	ldr.w	r8, [r0]
	fno->fname[0] = 0;		/* Invaidate file info */
 8011726:	758b      	strb	r3, [r1, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011728:	69c2      	ldr	r2, [r0, #28]
 801172a:	2a00      	cmp	r2, #0
 801172c:	d063      	beq.n	80117f6 <get_fileinfo+0xda>
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 801172e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8011730:	4604      	mov	r4, r0
 8011732:	460d      	mov	r5, r1
 8011734:	3201      	adds	r2, #1
 8011736:	d01f      	beq.n	8011778 <get_fileinfo+0x5c>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011738:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801173c:	8818      	ldrh	r0, [r3, #0]
 801173e:	2800      	cmp	r0, #0
 8011740:	d063      	beq.n	801180a <get_fileinfo+0xee>
 8011742:	f101 0715 	add.w	r7, r1, #21
 8011746:	2601      	movs	r6, #1
 8011748:	e000      	b.n	801174c <get_fileinfo+0x30>
 801174a:	461e      	mov	r6, r3
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 801174c:	2100      	movs	r1, #0
 801174e:	f002 ff5b 	bl	8014608 <ff_convert>
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011752:	1c73      	adds	r3, r6, #1
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8011754:	2800      	cmp	r0, #0
 8011756:	d058      	beq.n	801180a <get_fileinfo+0xee>
 8011758:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 801175c:	d055      	beq.n	801180a <get_fileinfo+0xee>
				fno->fname[i++] = (TCHAR)w;
 801175e:	f807 0f01 	strb.w	r0, [r7, #1]!
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8011762:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8011766:	f832 0016 	ldrh.w	r0, [r2, r6, lsl #1]
 801176a:	2800      	cmp	r0, #0
 801176c:	d1ed      	bne.n	801174a <get_fileinfo+0x2e>
			fno->fname[i] = 0;	/* Terminate the LFN */
 801176e:	442e      	add	r6, r5
 8011770:	2300      	movs	r3, #0
 8011772:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011774:	7da8      	ldrb	r0, [r5, #22]
 8011776:	e000      	b.n	801177a <get_fileinfo+0x5e>
 8011778:	4618      	mov	r0, r3
	i = j = 0;
 801177a:	f04f 0c00 	mov.w	ip, #0
			fno->altname[j++] = '.';
 801177e:	272e      	movs	r7, #46	; 0x2e
	i = j = 0;
 8011780:	4662      	mov	r2, ip
		c = (TCHAR)dp->dir[i++];
 8011782:	6a21      	ldr	r1, [r4, #32]
 8011784:	5c8b      	ldrb	r3, [r1, r2]
 8011786:	3201      	adds	r2, #1
		if (c == ' ') continue;				/* Skip padding spaces */
 8011788:	2b20      	cmp	r3, #32
 801178a:	d01b      	beq.n	80117c4 <get_fileinfo+0xa8>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801178c:	2b05      	cmp	r3, #5
 801178e:	bf08      	it	eq
 8011790:	23e5      	moveq	r3, #229	; 0xe5
		if (i == 9) {						/* Insert a . if extension is exist */
 8011792:	2a09      	cmp	r2, #9
 8011794:	d031      	beq.n	80117fa <get_fileinfo+0xde>
		fno->altname[j] = c;
 8011796:	eb05 010c 	add.w	r1, r5, ip
 801179a:	724b      	strb	r3, [r1, #9]
		if (!lfv) {
 801179c:	b980      	cbnz	r0, 80117c0 <get_fileinfo+0xa4>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 801179e:	f1a3 0641 	sub.w	r6, r3, #65	; 0x41
 80117a2:	2e19      	cmp	r6, #25
 80117a4:	d80b      	bhi.n	80117be <get_fileinfo+0xa2>
 80117a6:	6a26      	ldr	r6, [r4, #32]
 80117a8:	2a08      	cmp	r2, #8
 80117aa:	f896 e00c 	ldrb.w	lr, [r6, #12]
 80117ae:	bf8c      	ite	hi
 80117b0:	2610      	movhi	r6, #16
 80117b2:	2608      	movls	r6, #8
 80117b4:	ea1e 0f06 	tst.w	lr, r6
 80117b8:	d001      	beq.n	80117be <get_fileinfo+0xa2>
				c += 0x20;			/* To lower */
 80117ba:	3320      	adds	r3, #32
 80117bc:	b2db      	uxtb	r3, r3
			fno->fname[j] = c;
 80117be:	758b      	strb	r3, [r1, #22]
		j++;
 80117c0:	f10c 0c01 	add.w	ip, ip, #1
	while (i < 11) {		/* Copy name body and extension */
 80117c4:	2a0b      	cmp	r2, #11
 80117c6:	d1dc      	bne.n	8011782 <get_fileinfo+0x66>
		fno->fname[j] = 0;
 80117c8:	eb05 010c 	add.w	r1, r5, ip
	if (!lfv) {
 80117cc:	b928      	cbnz	r0, 80117da <get_fileinfo+0xbe>
		fno->fname[j] = 0;
 80117ce:	7588      	strb	r0, [r1, #22]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80117d0:	6a23      	ldr	r3, [r4, #32]
 80117d2:	7b1b      	ldrb	r3, [r3, #12]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	bf08      	it	eq
 80117d8:	4629      	moveq	r1, r5
	fno->altname[j] = 0;	/* Terminate the SFN */
 80117da:	2300      	movs	r3, #0
 80117dc:	724b      	strb	r3, [r1, #9]
	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80117de:	6a23      	ldr	r3, [r4, #32]
 80117e0:	7adb      	ldrb	r3, [r3, #11]
 80117e2:	722b      	strb	r3, [r5, #8]
	rv = rv << 8 | ptr[0];
 80117e4:	6a23      	ldr	r3, [r4, #32]
 80117e6:	69db      	ldr	r3, [r3, #28]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80117e8:	602b      	str	r3, [r5, #0]
	rv = rv << 8 | ptr[0];
 80117ea:	6a23      	ldr	r3, [r4, #32]
 80117ec:	f8d3 3016 	ldr.w	r3, [r3, #22]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80117f0:	0c1a      	lsrs	r2, r3, #16
 80117f2:	80eb      	strh	r3, [r5, #6]
 80117f4:	80aa      	strh	r2, [r5, #4]
}
 80117f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!lfv) fno->fname[j] = '.';
 80117fa:	eb05 010c 	add.w	r1, r5, ip
 80117fe:	b900      	cbnz	r0, 8011802 <get_fileinfo+0xe6>
 8011800:	758f      	strb	r7, [r1, #22]
			fno->altname[j++] = '.';
 8011802:	f10c 0c01 	add.w	ip, ip, #1
 8011806:	724f      	strb	r7, [r1, #9]
 8011808:	e7c5      	b.n	8011796 <get_fileinfo+0x7a>
			i = j = 0;
 801180a:	2600      	movs	r6, #0
			fno->fname[i] = 0;	/* Terminate the LFN */
 801180c:	2300      	movs	r3, #0
 801180e:	442e      	add	r6, r5
 8011810:	75b3      	strb	r3, [r6, #22]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011812:	7da8      	ldrb	r0, [r5, #22]
 8011814:	e7b1      	b.n	801177a <get_fileinfo+0x5e>
 8011816:	bf00      	nop

08011818 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011818:	b570      	push	{r4, r5, r6, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801181a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 801181e:	2300      	movs	r3, #0
{
 8011820:	4604      	mov	r4, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011822:	42b1      	cmp	r1, r6
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011824:	70c3      	strb	r3, [r0, #3]
 8011826:	6306      	str	r6, [r0, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011828:	d00c      	beq.n	8011844 <check_fs+0x2c>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 801182a:	460d      	mov	r5, r1
 801182c:	460a      	mov	r2, r1
 801182e:	2301      	movs	r3, #1
 8011830:	f100 0134 	add.w	r1, r0, #52	; 0x34
 8011834:	7840      	ldrb	r0, [r0, #1]
 8011836:	f7ff fe83 	bl	8011540 <disk_read>
 801183a:	b110      	cbz	r0, 8011842 <check_fs+0x2a>
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 801183c:	2004      	movs	r0, #4
			fs->winsect = sector;
 801183e:	6326      	str	r6, [r4, #48]	; 0x30
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
}
 8011840:	bd70      	pop	{r4, r5, r6, pc}
			fs->winsect = sector;
 8011842:	6325      	str	r5, [r4, #48]	; 0x30
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011844:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011848:	f8b4 2232 	ldrh.w	r2, [r4, #562]	; 0x232
 801184c:	429a      	cmp	r2, r3
 801184e:	d11a      	bne.n	8011886 <check_fs+0x6e>
	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011850:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8011854:	2be9      	cmp	r3, #233	; 0xe9
 8011856:	d007      	beq.n	8011868 <check_fs+0x50>
 8011858:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801185a:	4a0d      	ldr	r2, [pc, #52]	; (8011890 <check_fs+0x78>)
 801185c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 8011860:	4293      	cmp	r3, r2
 8011862:	d001      	beq.n	8011868 <check_fs+0x50>
	return 2;
 8011864:	2002      	movs	r0, #2
}
 8011866:	bd70      	pop	{r4, r5, r6, pc}
	rv = rv << 8 | ptr[0];
 8011868:	f8d4 306a 	ldr.w	r3, [r4, #106]	; 0x6a
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801186c:	4a09      	ldr	r2, [pc, #36]	; (8011894 <check_fs+0x7c>)
 801186e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011872:	4293      	cmp	r3, r2
 8011874:	d009      	beq.n	801188a <check_fs+0x72>
	rv = rv << 8 | ptr[0];
 8011876:	f8d4 0086 	ldr.w	r0, [r4, #134]	; 0x86
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801187a:	4b07      	ldr	r3, [pc, #28]	; (8011898 <check_fs+0x80>)
 801187c:	4298      	cmp	r0, r3
 801187e:	bf14      	ite	ne
 8011880:	2002      	movne	r0, #2
 8011882:	2000      	moveq	r0, #0
}
 8011884:	bd70      	pop	{r4, r5, r6, pc}
	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011886:	2003      	movs	r0, #3
}
 8011888:	bd70      	pop	{r4, r5, r6, pc}
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801188a:	2000      	movs	r0, #0
}
 801188c:	bd70      	pop	{r4, r5, r6, pc}
 801188e:	bf00      	nop
 8011890:	009000eb 	.word	0x009000eb
 8011894:	00544146 	.word	0x00544146
 8011898:	33544146 	.word	0x33544146

0801189c <move_window.part.0>:
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 801189c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801189e:	78c3      	ldrb	r3, [r0, #3]
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
 80118a0:	b083      	sub	sp, #12
 80118a2:	4604      	mov	r4, r0
 80118a4:	460d      	mov	r5, r1
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80118a6:	b973      	cbnz	r3, 80118c6 <move_window.part.0+0x2a>
 80118a8:	f100 0134 	add.w	r1, r0, #52	; 0x34
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80118ac:	2301      	movs	r3, #1
 80118ae:	462a      	mov	r2, r5
 80118b0:	7860      	ldrb	r0, [r4, #1]
 80118b2:	f7ff fe45 	bl	8011540 <disk_read>
 80118b6:	b910      	cbnz	r0, 80118be <move_window.part.0+0x22>
			fs->winsect = sector;
 80118b8:	6325      	str	r5, [r4, #48]	; 0x30
}
 80118ba:	b003      	add	sp, #12
 80118bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				res = FR_DISK_ERR;
 80118be:	2001      	movs	r0, #1
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80118c0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80118c4:	e7f8      	b.n	80118b8 <move_window.part.0+0x1c>
		wsect = fs->winsect;	/* Current sector number */
 80118c6:	6b06      	ldr	r6, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80118c8:	f100 0134 	add.w	r1, r0, #52	; 0x34
 80118cc:	2301      	movs	r3, #1
 80118ce:	7840      	ldrb	r0, [r0, #1]
 80118d0:	4632      	mov	r2, r6
 80118d2:	9101      	str	r1, [sp, #4]
 80118d4:	f7ff fe42 	bl	801155c <disk_write>
 80118d8:	b9b8      	cbnz	r0, 801190a <move_window.part.0+0x6e>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80118da:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80118dc:	69e3      	ldr	r3, [r4, #28]
 80118de:	1ab2      	subs	r2, r6, r2
 80118e0:	9901      	ldr	r1, [sp, #4]
			fs->wflag = 0;
 80118e2:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80118e4:	429a      	cmp	r2, r3
 80118e6:	d2e1      	bcs.n	80118ac <move_window.part.0+0x10>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80118e8:	78a7      	ldrb	r7, [r4, #2]
 80118ea:	2f01      	cmp	r7, #1
 80118ec:	d801      	bhi.n	80118f2 <move_window.part.0+0x56>
 80118ee:	e7dd      	b.n	80118ac <move_window.part.0+0x10>
					wsect += fs->fsize;
 80118f0:	69e3      	ldr	r3, [r4, #28]
 80118f2:	441e      	add	r6, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80118f4:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80118f6:	2301      	movs	r3, #1
 80118f8:	7860      	ldrb	r0, [r4, #1]
 80118fa:	4632      	mov	r2, r6
 80118fc:	9101      	str	r1, [sp, #4]
 80118fe:	f7ff fe2d 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8011902:	2f01      	cmp	r7, #1
 8011904:	9901      	ldr	r1, [sp, #4]
 8011906:	d1f3      	bne.n	80118f0 <move_window.part.0+0x54>
 8011908:	e7d0      	b.n	80118ac <move_window.part.0+0x10>
			res = FR_DISK_ERR;
 801190a:	2001      	movs	r0, #1
}
 801190c:	b003      	add	sp, #12
 801190e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011910 <find_volume>:
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011910:	2300      	movs	r3, #0
{
 8011912:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	*rfs = 0;
 8011916:	600b      	str	r3, [r1, #0]
	if (*path) {	/* If the pointer is not a null */
 8011918:	6804      	ldr	r4, [r0, #0]
 801191a:	b18c      	cbz	r4, 8011940 <find_volume+0x30>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801191c:	7825      	ldrb	r5, [r4, #0]
 801191e:	2d1f      	cmp	r5, #31
 8011920:	d912      	bls.n	8011948 <find_volume+0x38>
 8011922:	2d3a      	cmp	r5, #58	; 0x3a
 8011924:	d010      	beq.n	8011948 <find_volume+0x38>
 8011926:	46a4      	mov	ip, r4
 8011928:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 801192c:	2b1f      	cmp	r3, #31
 801192e:	d90d      	bls.n	801194c <find_volume+0x3c>
 8011930:	2b3a      	cmp	r3, #58	; 0x3a
 8011932:	d1f9      	bne.n	8011928 <find_volume+0x18>
			i = *tp++ - '0';
 8011934:	3401      	adds	r4, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011936:	45a4      	cmp	ip, r4
 8011938:	d102      	bne.n	8011940 <find_volume+0x30>
 801193a:	2d30      	cmp	r5, #48	; 0x30
 801193c:	f000 80da 	beq.w	8011af4 <find_volume+0x1e4>
	vol = get_ldnumber(path);
	if (vol < 0) return FR_INVALID_DRIVE;
 8011940:	240b      	movs	r4, #11
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
#endif
	return FR_OK;
}
 8011942:	4620      	mov	r0, r4
 8011944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011948:	462b      	mov	r3, r5
 801194a:	46a4      	mov	ip, r4
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801194c:	2b3a      	cmp	r3, #58	; 0x3a
 801194e:	d0f1      	beq.n	8011934 <find_volume+0x24>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011950:	4ba6      	ldr	r3, [pc, #664]	; (8011bec <find_volume+0x2dc>)
 8011952:	681d      	ldr	r5, [r3, #0]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011954:	2d00      	cmp	r5, #0
 8011956:	f000 80c9 	beq.w	8011aec <find_volume+0x1dc>
	*rfs = fs;							/* Return pointer to the file system object */
 801195a:	600d      	str	r5, [r1, #0]
	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801195c:	f002 04fe 	and.w	r4, r2, #254	; 0xfe
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011960:	782b      	ldrb	r3, [r5, #0]
 8011962:	b17b      	cbz	r3, 8011984 <find_volume+0x74>
		stat = disk_status(fs->drv);
 8011964:	7868      	ldrb	r0, [r5, #1]
 8011966:	f7ff fdcf 	bl	8011508 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801196a:	07c1      	lsls	r1, r0, #31
 801196c:	d40a      	bmi.n	8011984 <find_volume+0x74>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 801196e:	2c00      	cmp	r4, #0
 8011970:	f000 80ab 	beq.w	8011aca <find_volume+0x1ba>
 8011974:	f010 0404 	ands.w	r4, r0, #4
 8011978:	f000 80a7 	beq.w	8011aca <find_volume+0x1ba>
				return FR_WRITE_PROTECTED;
 801197c:	240a      	movs	r4, #10
}
 801197e:	4620      	mov	r0, r4
 8011980:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8011984:	2000      	movs	r0, #0
 8011986:	8028      	strh	r0, [r5, #0]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011988:	f7ff fdc8 	bl	801151c <disk_initialize>
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801198c:	07c2      	lsls	r2, r0, #31
 801198e:	f100 809f 	bmi.w	8011ad0 <find_volume+0x1c0>
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011992:	b10c      	cbz	r4, 8011998 <find_volume+0x88>
 8011994:	0743      	lsls	r3, r0, #29
 8011996:	d4f1      	bmi.n	801197c <find_volume+0x6c>
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011998:	2100      	movs	r1, #0
 801199a:	4628      	mov	r0, r5
 801199c:	f7ff ff3c 	bl	8011818 <check_fs>
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80119a0:	2802      	cmp	r0, #2
 80119a2:	d077      	beq.n	8011a94 <find_volume+0x184>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80119a4:	2804      	cmp	r0, #4
 80119a6:	f000 809f 	beq.w	8011ae8 <find_volume+0x1d8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80119aa:	2801      	cmp	r0, #1
 80119ac:	f200 808c 	bhi.w	8011ac8 <find_volume+0x1b8>
	bsect = 0;
 80119b0:	2400      	movs	r4, #0
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80119b2:	f8b5 303f 	ldrh.w	r3, [r5, #63]	; 0x3f
 80119b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80119ba:	f040 8085 	bne.w	8011ac8 <find_volume+0x1b8>
		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80119be:	f8b5 204a 	ldrh.w	r2, [r5, #74]	; 0x4a
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80119c2:	b902      	cbnz	r2, 80119c6 <find_volume+0xb6>
	rv = rv << 8 | ptr[0];
 80119c4:	6daa      	ldr	r2, [r5, #88]	; 0x58
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80119c6:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
		fs->fsize = fasize;
 80119ca:	61ea      	str	r2, [r5, #28]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80119cc:	1e59      	subs	r1, r3, #1
		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80119ce:	70ab      	strb	r3, [r5, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80119d0:	2901      	cmp	r1, #1
 80119d2:	d879      	bhi.n	8011ac8 <find_volume+0x1b8>
		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80119d4:	f895 1041 	ldrb.w	r1, [r5, #65]	; 0x41
 80119d8:	b288      	uxth	r0, r1
 80119da:	8168      	strh	r0, [r5, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80119dc:	2800      	cmp	r0, #0
 80119de:	d073      	beq.n	8011ac8 <find_volume+0x1b8>
 80119e0:	1e48      	subs	r0, r1, #1
 80119e2:	4208      	tst	r0, r1
 80119e4:	d170      	bne.n	8011ac8 <find_volume+0x1b8>
	rv = ptr[1];
 80119e6:	f8b5 c045 	ldrh.w	ip, [r5, #69]	; 0x45
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80119ea:	f01c 0f0f 	tst.w	ip, #15
		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80119ee:	f8a5 c008 	strh.w	ip, [r5, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80119f2:	d169      	bne.n	8011ac8 <find_volume+0x1b8>
		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80119f4:	f8b5 0047 	ldrh.w	r0, [r5, #71]	; 0x47
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80119f8:	b900      	cbnz	r0, 80119fc <find_volume+0xec>
	rv = rv << 8 | ptr[0];
 80119fa:	6d68      	ldr	r0, [r5, #84]	; 0x54
	rv = ptr[1];
 80119fc:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011a00:	2f00      	cmp	r7, #0
 8011a02:	d061      	beq.n	8011ac8 <find_volume+0x1b8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011a04:	fb02 f303 	mul.w	r3, r2, r3
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011a08:	eb07 161c 	add.w	r6, r7, ip, lsr #4
 8011a0c:	441e      	add	r6, r3
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011a0e:	42b0      	cmp	r0, r6
 8011a10:	d35a      	bcc.n	8011ac8 <find_volume+0x1b8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011a12:	eba0 0e06 	sub.w	lr, r0, r6
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011a16:	458e      	cmp	lr, r1
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011a18:	fbbe f0f1 	udiv	r0, lr, r1
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011a1c:	d354      	bcc.n	8011ac8 <find_volume+0x1b8>
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011a1e:	f64f 71f5 	movw	r1, #65525	; 0xfff5
 8011a22:	4288      	cmp	r0, r1
 8011a24:	f200 8084 	bhi.w	8011b30 <find_volume+0x220>
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011a28:	f640 71f5 	movw	r1, #4085	; 0xff5
 8011a2c:	4288      	cmp	r0, r1
 8011a2e:	f200 80a3 	bhi.w	8011b78 <find_volume+0x268>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011a32:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011a34:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8011a36:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8011a38:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011a3a:	61a8      	str	r0, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8011a3c:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011a3e:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011a40:	f1bc 0f00 	cmp.w	ip, #0
 8011a44:	d040      	beq.n	8011ac8 <find_volume+0x1b8>
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011a46:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8011a4a:	f000 0001 	and.w	r0, r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011a4e:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011a50:	eb00 0151 	add.w	r1, r0, r1, lsr #1
 8011a54:	2001      	movs	r0, #1
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011a56:	62ab      	str	r3, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011a58:	f201 11ff 	addw	r1, r1, #511	; 0x1ff
 8011a5c:	ebb2 2f51 	cmp.w	r2, r1, lsr #9
 8011a60:	d332      	bcc.n	8011ac8 <find_volume+0x1b8>
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011a62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 8011a66:	2280      	movs	r2, #128	; 0x80
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011a68:	e9c5 3304 	strd	r3, r3, [r5, #16]
		fs->fsi_flag = 0x80;
 8011a6c:	712a      	strb	r2, [r5, #4]
	fs->id = ++Fsid;		/* File system mount ID */
 8011a6e:	4960      	ldr	r1, [pc, #384]	; (8011bf0 <find_volume+0x2e0>)
	fs->fs_type = fmt;		/* FAT sub-type */
 8011a70:	7028      	strb	r0, [r5, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011a72:	880b      	ldrh	r3, [r1, #0]
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011a74:	485f      	ldr	r0, [pc, #380]	; (8011bf4 <find_volume+0x2e4>)
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a76:	4a60      	ldr	r2, [pc, #384]	; (8011bf8 <find_volume+0x2e8>)
	fs->id = ++Fsid;		/* File system mount ID */
 8011a78:	3301      	adds	r3, #1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8011a7a:	60e8      	str	r0, [r5, #12]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a7c:	6810      	ldr	r0, [r2, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011a7e:	b29b      	uxth	r3, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a80:	42a8      	cmp	r0, r5
	fs->id = ++Fsid;		/* File system mount ID */
 8011a82:	800b      	strh	r3, [r1, #0]
 8011a84:	80eb      	strh	r3, [r5, #6]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011a86:	f000 8086 	beq.w	8011b96 <find_volume+0x286>
 8011a8a:	6913      	ldr	r3, [r2, #16]
 8011a8c:	429d      	cmp	r5, r3
 8011a8e:	d06f      	beq.n	8011b70 <find_volume+0x260>
	return FR_OK;
 8011a90:	2400      	movs	r4, #0
 8011a92:	e01a      	b.n	8011aca <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011a94:	f895 61f6 	ldrb.w	r6, [r5, #502]	; 0x1f6
 8011a98:	b10e      	cbz	r6, 8011a9e <find_volume+0x18e>
	rv = rv << 8 | ptr[0];
 8011a9a:	f8d5 61fa 	ldr.w	r6, [r5, #506]	; 0x1fa
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011a9e:	f895 4206 	ldrb.w	r4, [r5, #518]	; 0x206
 8011aa2:	b10c      	cbz	r4, 8011aa8 <find_volume+0x198>
	rv = rv << 8 | ptr[0];
 8011aa4:	f8d5 420a 	ldr.w	r4, [r5, #522]	; 0x20a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011aa8:	f895 3216 	ldrb.w	r3, [r5, #534]	; 0x216
 8011aac:	b303      	cbz	r3, 8011af0 <find_volume+0x1e0>
	rv = rv << 8 | ptr[0];
 8011aae:	f8d5 821a 	ldr.w	r8, [r5, #538]	; 0x21a
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011ab2:	f895 7226 	ldrb.w	r7, [r5, #550]	; 0x226
 8011ab6:	b10f      	cbz	r7, 8011abc <find_volume+0x1ac>
	rv = rv << 8 | ptr[0];
 8011ab8:	f8d5 722a 	ldr.w	r7, [r5, #554]	; 0x22a
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011abc:	b9f6      	cbnz	r6, 8011afc <find_volume+0x1ec>
 8011abe:	bb2c      	cbnz	r4, 8011b0c <find_volume+0x1fc>
 8011ac0:	f1b8 0f00 	cmp.w	r8, #0
 8011ac4:	d12c      	bne.n	8011b20 <find_volume+0x210>
 8011ac6:	b93f      	cbnz	r7, 8011ad8 <find_volume+0x1c8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011ac8:	240d      	movs	r4, #13
}
 8011aca:	4620      	mov	r0, r4
 8011acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011ad0:	2403      	movs	r4, #3
}
 8011ad2:	4620      	mov	r0, r4
 8011ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011ad8:	4639      	mov	r1, r7
 8011ada:	4628      	mov	r0, r5
 8011adc:	f7ff fe9c 	bl	8011818 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011ae0:	2801      	cmp	r0, #1
 8011ae2:	d95b      	bls.n	8011b9c <find_volume+0x28c>
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011ae4:	2804      	cmp	r0, #4
 8011ae6:	d1ef      	bne.n	8011ac8 <find_volume+0x1b8>
 8011ae8:	2401      	movs	r4, #1
 8011aea:	e7ee      	b.n	8011aca <find_volume+0x1ba>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011aec:	240c      	movs	r4, #12
 8011aee:	e7ec      	b.n	8011aca <find_volume+0x1ba>
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011af0:	4698      	mov	r8, r3
 8011af2:	e7de      	b.n	8011ab2 <find_volume+0x1a2>
					*path = ++tt;
 8011af4:	f10c 0301 	add.w	r3, ip, #1
 8011af8:	6003      	str	r3, [r0, #0]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011afa:	e729      	b.n	8011950 <find_volume+0x40>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011afc:	4631      	mov	r1, r6
 8011afe:	4628      	mov	r0, r5
 8011b00:	f7ff fe8a 	bl	8011818 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011b04:	2801      	cmp	r0, #1
 8011b06:	d8da      	bhi.n	8011abe <find_volume+0x1ae>
 8011b08:	4634      	mov	r4, r6
 8011b0a:	e752      	b.n	80119b2 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b0c:	4621      	mov	r1, r4
 8011b0e:	4628      	mov	r0, r5
 8011b10:	f7ff fe82 	bl	8011818 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011b14:	2801      	cmp	r0, #1
 8011b16:	f67f af4c 	bls.w	80119b2 <find_volume+0xa2>
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011b1a:	f1b8 0f00 	cmp.w	r8, #0
 8011b1e:	d0d2      	beq.n	8011ac6 <find_volume+0x1b6>
 8011b20:	4641      	mov	r1, r8
 8011b22:	4628      	mov	r0, r5
 8011b24:	f7ff fe78 	bl	8011818 <check_fs>
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011b28:	2801      	cmp	r0, #1
 8011b2a:	d8cc      	bhi.n	8011ac6 <find_volume+0x1b6>
 8011b2c:	4644      	mov	r4, r8
 8011b2e:	e740      	b.n	80119b2 <find_volume+0xa2>
	rv = rv << 8 | ptr[0];
 8011b30:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011b34:	3002      	adds	r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011b36:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8011b38:	4426      	add	r6, r4
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011b3a:	ea53 030c 	orrs.w	r3, r3, ip
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011b3e:	61a8      	str	r0, [r5, #24]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011b40:	626f      	str	r7, [r5, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8011b42:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->volbase = bsect;							/* Volume start sector */
 8011b44:	622c      	str	r4, [r5, #32]
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011b46:	d1bf      	bne.n	8011ac8 <find_volume+0x1b8>
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011b48:	0080      	lsls	r0, r0, #2
	rv = rv << 8 | ptr[0];
 8011b4a:	6e29      	ldr	r1, [r5, #96]	; 0x60
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011b4c:	f200 13ff 	addw	r3, r0, #511	; 0x1ff
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011b50:	62a9      	str	r1, [r5, #40]	; 0x28
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011b52:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
 8011b56:	d3b7      	bcc.n	8011ac8 <find_volume+0x1b8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011b58:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011b5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		fs->fsi_flag = 0x80;
 8011b60:	2180      	movs	r1, #128	; 0x80
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011b62:	2a01      	cmp	r2, #1
		fs->fsi_flag = 0x80;
 8011b64:	7129      	strb	r1, [r5, #4]
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011b66:	e9c5 3304 	strd	r3, r3, [r5, #16]
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011b6a:	d019      	beq.n	8011ba0 <find_volume+0x290>
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011b6c:	2003      	movs	r0, #3
 8011b6e:	e77e      	b.n	8011a6e <find_volume+0x15e>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b70:	2300      	movs	r3, #0
	return FR_OK;
 8011b72:	461c      	mov	r4, r3
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b74:	6113      	str	r3, [r2, #16]
 8011b76:	e7a8      	b.n	8011aca <find_volume+0x1ba>
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011b78:	1c81      	adds	r1, r0, #2
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011b7a:	4427      	add	r7, r4
		fs->database = bsect + sysect;					/* Data start sector */
 8011b7c:	4426      	add	r6, r4
		fs->volbase = bsect;							/* Volume start sector */
 8011b7e:	622c      	str	r4, [r5, #32]
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011b80:	61a9      	str	r1, [r5, #24]
		fs->database = bsect + sysect;					/* Data start sector */
 8011b82:	62ee      	str	r6, [r5, #44]	; 0x2c
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011b84:	626f      	str	r7, [r5, #36]	; 0x24
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011b86:	f1bc 0f00 	cmp.w	ip, #0
 8011b8a:	d09d      	beq.n	8011ac8 <find_volume+0x1b8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011b8c:	443b      	add	r3, r7
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011b8e:	0049      	lsls	r1, r1, #1
 8011b90:	2002      	movs	r0, #2
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011b92:	62ab      	str	r3, [r5, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011b94:	e760      	b.n	8011a58 <find_volume+0x148>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8011b96:	2300      	movs	r3, #0
 8011b98:	6013      	str	r3, [r2, #0]
 8011b9a:	e776      	b.n	8011a8a <find_volume+0x17a>
 8011b9c:	463c      	mov	r4, r7
 8011b9e:	e708      	b.n	80119b2 <find_volume+0xa2>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011ba0:	1c61      	adds	r1, r4, #1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011ba2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8011ba4:	4299      	cmp	r1, r3
 8011ba6:	d004      	beq.n	8011bb2 <find_volume+0x2a2>
 8011ba8:	4628      	mov	r0, r5
 8011baa:	f7ff fe77 	bl	801189c <move_window.part.0>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011bae:	2800      	cmp	r0, #0
 8011bb0:	d1dc      	bne.n	8011b6c <find_volume+0x25c>
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011bb2:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011bb6:	f8b5 2232 	ldrh.w	r2, [r5, #562]	; 0x232
			fs->fsi_flag = 0;
 8011bba:	2100      	movs	r1, #0
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011bbc:	429a      	cmp	r2, r3
			fs->fsi_flag = 0;
 8011bbe:	7129      	strb	r1, [r5, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011bc0:	d1d4      	bne.n	8011b6c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8011bc2:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011bc4:	4b0d      	ldr	r3, [pc, #52]	; (8011bfc <find_volume+0x2ec>)
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d1d0      	bne.n	8011b6c <find_volume+0x25c>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011bca:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
	rv = rv << 8 | ptr[0];
 8011bce:	f8d5 2218 	ldr.w	r2, [r5, #536]	; 0x218
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011bd2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8011bd6:	3320      	adds	r3, #32
 8011bd8:	429a      	cmp	r2, r3
 8011bda:	d1c7      	bne.n	8011b6c <find_volume+0x25c>
	rv = rv << 8 | ptr[0];
 8011bdc:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011be0:	2003      	movs	r0, #3
 8011be2:	f8d5 2220 	ldr.w	r2, [r5, #544]	; 0x220
 8011be6:	e9c5 2304 	strd	r2, r3, [r5, #16]
 8011bea:	e740      	b.n	8011a6e <find_volume+0x15e>
 8011bec:	20019bf8 	.word	0x20019bf8
 8011bf0:	20019c1c 	.word	0x20019c1c
 8011bf4:	20019c20 	.word	0x20019c20
 8011bf8:	20019bfc 	.word	0x20019bfc
 8011bfc:	41615252 	.word	0x41615252

08011c00 <put_fat.part.0>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8011c00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		switch (fs->fs_type) {
 8011c04:	7803      	ldrb	r3, [r0, #0]
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
 8011c06:	4604      	mov	r4, r0
 8011c08:	460d      	mov	r5, r1
 8011c0a:	4616      	mov	r6, r2
		switch (fs->fs_type) {
 8011c0c:	2b02      	cmp	r3, #2
 8011c0e:	d006      	beq.n	8011c1e <put_fat.part.0+0x1e>
 8011c10:	2b03      	cmp	r3, #3
 8011c12:	d052      	beq.n	8011cba <put_fat.part.0+0xba>
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d01b      	beq.n	8011c50 <put_fat.part.0+0x50>
 8011c18:	2002      	movs	r0, #2
}
 8011c1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c1e:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c20:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011c22:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c26:	4299      	cmp	r1, r3
 8011c28:	d003      	beq.n	8011c32 <put_fat.part.0+0x32>
 8011c2a:	f7ff fe37 	bl	801189c <move_window.part.0>
			if (res != FR_OK) break;
 8011c2e:	2800      	cmp	r0, #0
 8011c30:	d1f3      	bne.n	8011c1a <put_fat.part.0+0x1a>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c32:	006d      	lsls	r5, r5, #1
 8011c34:	f104 0334 	add.w	r3, r4, #52	; 0x34
	*ptr++ = (BYTE)val; val >>= 8;
 8011c38:	f3c6 2207 	ubfx	r2, r6, #8, #8
			break;
 8011c3c:	2000      	movs	r0, #0
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c3e:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
	*ptr++ = (BYTE)val; val >>= 8;
 8011c42:	555e      	strb	r6, [r3, r5]
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011c44:	1959      	adds	r1, r3, r5
			fs->wflag = 1;
 8011c46:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val;
 8011c48:	704a      	strb	r2, [r1, #1]
			fs->wflag = 1;
 8011c4a:	70e3      	strb	r3, [r4, #3]
}
 8011c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			bc = (UINT)clst; bc += bc / 2;
 8011c50:	eb01 0751 	add.w	r7, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c54:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c56:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c58:	eb01 2157 	add.w	r1, r1, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c5c:	4299      	cmp	r1, r3
 8011c5e:	d003      	beq.n	8011c68 <put_fat.part.0+0x68>
 8011c60:	f7ff fe1c 	bl	801189c <move_window.part.0>
			if (res != FR_OK) break;
 8011c64:	2800      	cmp	r0, #0
 8011c66:	d1d8      	bne.n	8011c1a <put_fat.part.0+0x1a>
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011c68:	07eb      	lsls	r3, r5, #31
			p = fs->win + bc++ % SS(fs);
 8011c6a:	f107 0801 	add.w	r8, r7, #1
 8011c6e:	f104 0934 	add.w	r9, r4, #52	; 0x34
 8011c72:	f3c7 0708 	ubfx	r7, r7, #0, #9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011c76:	d542      	bpl.n	8011cfe <put_fat.part.0+0xfe>
 8011c78:	f819 3007 	ldrb.w	r3, [r9, r7]
 8011c7c:	f003 030f 	and.w	r3, r3, #15
 8011c80:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8011c84:	f809 3007 	strb.w	r3, [r9, r7]
			fs->wflag = 1;
 8011c88:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8011c8c:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011c8e:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011c92:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011c94:	4299      	cmp	r1, r3
 8011c96:	d004      	beq.n	8011ca2 <put_fat.part.0+0xa2>
 8011c98:	4620      	mov	r0, r4
 8011c9a:	f7ff fdff 	bl	801189c <move_window.part.0>
			if (res != FR_OK) break;
 8011c9e:	2800      	cmp	r0, #0
 8011ca0:	d1bb      	bne.n	8011c1a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8011ca2:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011ca6:	f3c6 1207 	ubfx	r2, r6, #4, #8
			p = fs->win + bc % SS(fs);
 8011caa:	44c8      	add	r8, r9
			fs->wflag = 1;
 8011cac:	2301      	movs	r3, #1
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011cae:	f888 2000 	strb.w	r2, [r8]
			break;
 8011cb2:	2000      	movs	r0, #0
			fs->wflag = 1;
 8011cb4:	70e3      	strb	r3, [r4, #3]
}
 8011cb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011cba:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cbc:	6b03      	ldr	r3, [r0, #48]	; 0x30
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011cbe:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011cc2:	4299      	cmp	r1, r3
 8011cc4:	d003      	beq.n	8011cce <put_fat.part.0+0xce>
 8011cc6:	f7ff fde9 	bl	801189c <move_window.part.0>
			if (res != FR_OK) break;
 8011cca:	2800      	cmp	r0, #0
 8011ccc:	d1a5      	bne.n	8011c1a <put_fat.part.0+0x1a>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011cce:	00ad      	lsls	r5, r5, #2
 8011cd0:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8011cd4:	f026 4270 	bic.w	r2, r6, #4026531840	; 0xf0000000
 8011cd8:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8011cdc:	5943      	ldr	r3, [r0, r5]
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011cde:	1941      	adds	r1, r0, r5
 8011ce0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011ce4:	431a      	orrs	r2, r3
	*ptr++ = (BYTE)val; val >>= 8;
 8011ce6:	0c13      	lsrs	r3, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8011ce8:	5542      	strb	r2, [r0, r5]
 8011cea:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8011cec:	708b      	strb	r3, [r1, #2]
 8011cee:	0e12      	lsrs	r2, r2, #24
			fs->wflag = 1;
 8011cf0:	2301      	movs	r3, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8011cf2:	7048      	strb	r0, [r1, #1]
	*ptr++ = (BYTE)val;
 8011cf4:	70ca      	strb	r2, [r1, #3]
			break;
 8011cf6:	2000      	movs	r0, #0
			fs->wflag = 1;
 8011cf8:	70e3      	strb	r3, [r4, #3]
}
 8011cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011cfe:	f809 6007 	strb.w	r6, [r9, r7]
			fs->wflag = 1;
 8011d02:	2301      	movs	r3, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d04:	6a61      	ldr	r1, [r4, #36]	; 0x24
			fs->wflag = 1;
 8011d06:	70e3      	strb	r3, [r4, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011d08:	eb01 2158 	add.w	r1, r1, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d0c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8011d0e:	4299      	cmp	r1, r3
 8011d10:	d005      	beq.n	8011d1e <put_fat.part.0+0x11e>
 8011d12:	4620      	mov	r0, r4
 8011d14:	f7ff fdc2 	bl	801189c <move_window.part.0>
			if (res != FR_OK) break;
 8011d18:	2800      	cmp	r0, #0
 8011d1a:	f47f af7e 	bne.w	8011c1a <put_fat.part.0+0x1a>
			p = fs->win + bc % SS(fs);
 8011d1e:	f3c8 0808 	ubfx	r8, r8, #0, #9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011d22:	f3c6 2203 	ubfx	r2, r6, #8, #4
			p = fs->win + bc % SS(fs);
 8011d26:	44c8      	add	r8, r9
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8011d28:	f898 3000 	ldrb.w	r3, [r8]
 8011d2c:	f023 060f 	bic.w	r6, r3, #15
 8011d30:	4332      	orrs	r2, r6
 8011d32:	e7bb      	b.n	8011cac <put_fat.part.0+0xac>

08011d34 <get_fat.isra.0>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d34:	2901      	cmp	r1, #1
 8011d36:	d90e      	bls.n	8011d56 <get_fat.isra.0+0x22>
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
 8011d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8011d3a:	6983      	ldr	r3, [r0, #24]
 8011d3c:	460c      	mov	r4, r1
 8011d3e:	4605      	mov	r5, r0
 8011d40:	4299      	cmp	r1, r3
 8011d42:	d206      	bcs.n	8011d52 <get_fat.isra.0+0x1e>
		switch (fs->fs_type) {
 8011d44:	7803      	ldrb	r3, [r0, #0]
 8011d46:	2b02      	cmp	r3, #2
 8011d48:	d03e      	beq.n	8011dc8 <get_fat.isra.0+0x94>
 8011d4a:	2b03      	cmp	r3, #3
 8011d4c:	d02b      	beq.n	8011da6 <get_fat.isra.0+0x72>
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d003      	beq.n	8011d5a <get_fat.isra.0+0x26>
 8011d52:	2001      	movs	r0, #1
}
 8011d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		val = 1;	/* Internal error */
 8011d56:	2001      	movs	r0, #1
}
 8011d58:	4770      	bx	lr
			bc = (UINT)clst; bc += bc / 2;
 8011d5a:	eb01 0651 	add.w	r6, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d5e:	6a43      	ldr	r3, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d60:	6b02      	ldr	r2, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d62:	eb03 2156 	add.w	r1, r3, r6, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d66:	4291      	cmp	r1, r2
 8011d68:	d004      	beq.n	8011d74 <get_fat.isra.0+0x40>
 8011d6a:	f7ff fd97 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d6e:	bba0      	cbnz	r0, 8011dda <get_fat.isra.0+0xa6>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d70:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d72:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8011d74:	1c77      	adds	r7, r6, #1
 8011d76:	f3c6 0608 	ubfx	r6, r6, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d7a:	eb03 2157 	add.w	r1, r3, r7, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8011d7e:	442e      	add	r6, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d80:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8011d82:	f896 6034 	ldrb.w	r6, [r6, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011d86:	d003      	beq.n	8011d90 <get_fat.isra.0+0x5c>
 8011d88:	4628      	mov	r0, r5
 8011d8a:	f7ff fd87 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8011d8e:	bb20      	cbnz	r0, 8011dda <get_fat.isra.0+0xa6>
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d90:	f3c7 0708 	ubfx	r7, r7, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011d94:	07e3      	lsls	r3, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 8011d96:	443d      	add	r5, r7
 8011d98:	f895 0034 	ldrb.w	r0, [r5, #52]	; 0x34
 8011d9c:	ea46 2000 	orr.w	r0, r6, r0, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011da0:	d524      	bpl.n	8011dec <get_fat.isra.0+0xb8>
 8011da2:	0900      	lsrs	r0, r0, #4
}
 8011da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011da6:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011da8:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011daa:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011dae:	4299      	cmp	r1, r3
 8011db0:	d002      	beq.n	8011db8 <get_fat.isra.0+0x84>
 8011db2:	f7ff fd73 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8011db6:	b980      	cbnz	r0, 8011dda <get_fat.isra.0+0xa6>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011db8:	00a4      	lsls	r4, r4, #2
 8011dba:	f404 74fe 	and.w	r4, r4, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8011dbe:	4425      	add	r5, r4
 8011dc0:	6b68      	ldr	r0, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8011dc2:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
}
 8011dc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011dc8:	6a41      	ldr	r1, [r0, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011dca:	6b03      	ldr	r3, [r0, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011dcc:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011dd0:	4299      	cmp	r1, r3
 8011dd2:	d005      	beq.n	8011de0 <get_fat.isra.0+0xac>
 8011dd4:	f7ff fd62 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8011dd8:	b110      	cbz	r0, 8011de0 <get_fat.isra.0+0xac>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8011dda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 8011dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8011de0:	0064      	lsls	r4, r4, #1
 8011de2:	f404 74ff 	and.w	r4, r4, #510	; 0x1fe
 8011de6:	4425      	add	r5, r4
 8011de8:	8ea8      	ldrh	r0, [r5, #52]	; 0x34
}
 8011dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8011dec:	f3c0 000b 	ubfx	r0, r0, #0, #12
}
 8011df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011df2:	bf00      	nop

08011df4 <dir_next.constprop.0>:
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
 8011df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011df8:	6945      	ldr	r5, [r0, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011dfa:	69c3      	ldr	r3, [r0, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011dfc:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011dfe:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8011e02:	d22d      	bcs.n	8011e60 <dir_next.constprop.0+0x6c>
 8011e04:	b363      	cbz	r3, 8011e60 <dir_next.constprop.0+0x6c>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e06:	f3c5 0708 	ubfx	r7, r5, #0, #9
 8011e0a:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8011e0c:	6806      	ldr	r6, [r0, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011e0e:	b137      	cbz	r7, 8011e1e <dir_next.constprop.0+0x2a>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011e10:	3634      	adds	r6, #52	; 0x34
	return FR_OK;
 8011e12:	2000      	movs	r0, #0
	dp->dptr = ofs;						/* Current entry */
 8011e14:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011e16:	443e      	add	r6, r7
 8011e18:	6226      	str	r6, [r4, #32]
}
 8011e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		dp->sect++;				/* Next sector */
 8011e1e:	3301      	adds	r3, #1
		if (!dp->clust) {		/* Static table */
 8011e20:	6981      	ldr	r1, [r0, #24]
		dp->sect++;				/* Next sector */
 8011e22:	61c3      	str	r3, [r0, #28]
		if (!dp->clust) {		/* Static table */
 8011e24:	b1f9      	cbz	r1, 8011e66 <dir_next.constprop.0+0x72>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011e26:	8973      	ldrh	r3, [r6, #10]
 8011e28:	3b01      	subs	r3, #1
 8011e2a:	ea13 2855 	ands.w	r8, r3, r5, lsr #9
 8011e2e:	d1ef      	bne.n	8011e10 <dir_next.constprop.0+0x1c>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011e30:	4630      	mov	r0, r6
 8011e32:	f7ff ff7f 	bl	8011d34 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e36:	2801      	cmp	r0, #1
 8011e38:	d91d      	bls.n	8011e76 <dir_next.constprop.0+0x82>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e3a:	1c43      	adds	r3, r0, #1
 8011e3c:	d01d      	beq.n	8011e7a <dir_next.constprop.0+0x86>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011e3e:	69b3      	ldr	r3, [r6, #24]
 8011e40:	4298      	cmp	r0, r3
 8011e42:	d214      	bcs.n	8011e6e <dir_next.constprop.0+0x7a>
				dp->clust = clst;		/* Initialize data for new cluster */
 8011e44:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8011e46:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8011e48:	69b3      	ldr	r3, [r6, #24]
 8011e4a:	3b02      	subs	r3, #2
 8011e4c:	4298      	cmp	r0, r3
 8011e4e:	d204      	bcs.n	8011e5a <dir_next.constprop.0+0x66>
	return clst * fs->csize + fs->database;
 8011e50:	f8b6 800a 	ldrh.w	r8, [r6, #10]
 8011e54:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8011e56:	fb00 3808 	mla	r8, r0, r8, r3
				dp->sect = clust2sect(fs, clst);
 8011e5a:	f8c4 801c 	str.w	r8, [r4, #28]
 8011e5e:	e7d7      	b.n	8011e10 <dir_next.constprop.0+0x1c>
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011e60:	2004      	movs	r0, #4
}
 8011e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011e66:	8933      	ldrh	r3, [r6, #8]
 8011e68:	ebb3 1f55 	cmp.w	r3, r5, lsr #5
 8011e6c:	d8d0      	bhi.n	8011e10 <dir_next.constprop.0+0x1c>
				dp->sect = 0; return FR_NO_FILE;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	2004      	movs	r0, #4
 8011e72:	61e3      	str	r3, [r4, #28]
 8011e74:	e7d1      	b.n	8011e1a <dir_next.constprop.0+0x26>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011e76:	2002      	movs	r0, #2
 8011e78:	e7cf      	b.n	8011e1a <dir_next.constprop.0+0x26>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011e7a:	2001      	movs	r0, #1
 8011e7c:	e7cd      	b.n	8011e1a <dir_next.constprop.0+0x26>
 8011e7e:	bf00      	nop

08011e80 <dir_read>:
{
 8011e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	while (dp->sect) {
 8011e84:	69c6      	ldr	r6, [r0, #28]
{
 8011e86:	b083      	sub	sp, #12
 8011e88:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 8011e8a:	6807      	ldr	r7, [r0, #0]
	while (dp->sect) {
 8011e8c:	2e00      	cmp	r6, #0
 8011e8e:	d064      	beq.n	8011f5a <dir_read+0xda>
	BYTE ord = 0xFF, sum = 0xFF;
 8011e90:	23ff      	movs	r3, #255	; 0xff
 8011e92:	468a      	mov	sl, r1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8011e94:	f107 0934 	add.w	r9, r7, #52	; 0x34
	BYTE ord = 0xFF, sum = 0xFF;
 8011e98:	4698      	mov	r8, r3
 8011e9a:	9300      	str	r3, [sp, #0]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8011e9c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 8011e9e:	42b5      	cmp	r5, r6
 8011ea0:	d014      	beq.n	8011ecc <dir_read+0x4c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8011ea2:	78fb      	ldrb	r3, [r7, #3]
 8011ea4:	2b00      	cmp	r3, #0
 8011ea6:	f040 80d2 	bne.w	801204e <dir_read+0x1ce>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8011eaa:	2301      	movs	r3, #1
 8011eac:	4632      	mov	r2, r6
 8011eae:	4649      	mov	r1, r9
 8011eb0:	7878      	ldrb	r0, [r7, #1]
 8011eb2:	f7ff fb45 	bl	8011540 <disk_read>
 8011eb6:	b140      	cbz	r0, 8011eca <dir_read+0x4a>
			fs->winsect = sector;
 8011eb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8011ebc:	2001      	movs	r0, #1
			fs->winsect = sector;
 8011ebe:	633b      	str	r3, [r7, #48]	; 0x30
	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	61e3      	str	r3, [r4, #28]
}
 8011ec4:	b003      	add	sp, #12
 8011ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8011eca:	633e      	str	r6, [r7, #48]	; 0x30
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8011ecc:	6a21      	ldr	r1, [r4, #32]
 8011ece:	780a      	ldrb	r2, [r1, #0]
		if (c == 0) {
 8011ed0:	2a00      	cmp	r2, #0
 8011ed2:	d042      	beq.n	8011f5a <dir_read+0xda>
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011ed4:	7acb      	ldrb	r3, [r1, #11]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011ed6:	2ae5      	cmp	r2, #229	; 0xe5
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8011ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011edc:	71a3      	strb	r3, [r4, #6]
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8011ede:	d00a      	beq.n	8011ef6 <dir_read+0x76>
 8011ee0:	2a2e      	cmp	r2, #46	; 0x2e
 8011ee2:	d008      	beq.n	8011ef6 <dir_read+0x76>
 8011ee4:	f023 0020 	bic.w	r0, r3, #32
 8011ee8:	f1a0 0008 	sub.w	r0, r0, #8
 8011eec:	fab0 f080 	clz	r0, r0
 8011ef0:	0940      	lsrs	r0, r0, #5
 8011ef2:	4550      	cmp	r0, sl
 8011ef4:	d038      	beq.n	8011f68 <dir_read+0xe8>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011ef6:	f04f 08ff 	mov.w	r8, #255	; 0xff
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011efa:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011efc:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011efe:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8011f00:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 8011f04:	d229      	bcs.n	8011f5a <dir_read+0xda>
 8011f06:	b346      	cbz	r6, 8011f5a <dir_read+0xda>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011f08:	f3c5 0208 	ubfx	r2, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8011f0c:	6823      	ldr	r3, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011f0e:	bb32      	cbnz	r2, 8011f5e <dir_read+0xde>
		dp->sect++;				/* Next sector */
 8011f10:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 8011f12:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 8011f14:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8011f16:	b961      	cbnz	r1, 8011f32 <dir_read+0xb2>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011f18:	891a      	ldrh	r2, [r3, #8]
 8011f1a:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 8011f1e:	d91c      	bls.n	8011f5a <dir_read+0xda>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f20:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8011f22:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f24:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 8011f26:	2e00      	cmp	r6, #0
 8011f28:	d1b8      	bne.n	8011e9c <dir_read+0x1c>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8011f2a:	2000      	movs	r0, #0
}
 8011f2c:	b003      	add	sp, #12
 8011f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011f32:	895a      	ldrh	r2, [r3, #10]
 8011f34:	3a01      	subs	r2, #1
 8011f36:	ea12 2b55 	ands.w	fp, r2, r5, lsr #9
 8011f3a:	d1f1      	bne.n	8011f20 <dir_read+0xa0>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	9301      	str	r3, [sp, #4]
 8011f40:	f7ff fef8 	bl	8011d34 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8011f44:	2801      	cmp	r0, #1
 8011f46:	f240 80b6 	bls.w	80120b6 <dir_read+0x236>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8011f4a:	1c43      	adds	r3, r0, #1
 8011f4c:	f000 8086 	beq.w	801205c <dir_read+0x1dc>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8011f50:	9b01      	ldr	r3, [sp, #4]
 8011f52:	699a      	ldr	r2, [r3, #24]
 8011f54:	4290      	cmp	r0, r2
 8011f56:	f0c0 80a2 	bcc.w	801209e <dir_read+0x21e>
	FRESULT res = FR_NO_FILE;
 8011f5a:	2004      	movs	r0, #4
 8011f5c:	e7b0      	b.n	8011ec0 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f5e:	3334      	adds	r3, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8011f60:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011f62:	441a      	add	r2, r3
 8011f64:	6222      	str	r2, [r4, #32]
	while (dp->sect) {
 8011f66:	e799      	b.n	8011e9c <dir_read+0x1c>
				if (a == AM_LFN) {			/* An LFN entry is found */
 8011f68:	2b0f      	cmp	r3, #15
 8011f6a:	f040 80ac 	bne.w	80120c6 <dir_read+0x246>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8011f6e:	0650      	lsls	r0, r2, #25
 8011f70:	d576      	bpl.n	8012060 <dir_read+0x1e0>
						sum = dp->dir[LDIR_Chksum];
 8011f72:	7b4b      	ldrb	r3, [r1, #13]
						c &= (BYTE)~LLEF; ord = c;
 8011f74:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8011f78:	9300      	str	r3, [sp, #0]
						dp->blk_ofs = dp->dptr;
 8011f7a:	6963      	ldr	r3, [r4, #20]
 8011f7c:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011f7e:	7b4b      	ldrb	r3, [r1, #13]
 8011f80:	9800      	ldr	r0, [sp, #0]
 8011f82:	4283      	cmp	r3, r0
 8011f84:	d1b7      	bne.n	8011ef6 <dir_read+0x76>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8011f86:	8b4b      	ldrh	r3, [r1, #26]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d1b4      	bne.n	8011ef6 <dir_read+0x76>
	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8011f8c:	780b      	ldrb	r3, [r1, #0]
 8011f8e:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 8011f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011f96:	3b01      	subs	r3, #1
 8011f98:	eb03 0543 	add.w	r5, r3, r3, lsl #1
 8011f9c:	eb03 0385 	add.w	r3, r3, r5, lsl #2
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8011fa0:	2bfe      	cmp	r3, #254	; 0xfe
 8011fa2:	d8a8      	bhi.n	8011ef6 <dir_read+0x76>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8011fa4:	68fd      	ldr	r5, [r7, #12]
			lfnbuf[i++] = wc = uc;			/* Store it */
 8011fa6:	f103 0801 	add.w	r8, r3, #1
 8011faa:	f825 0013 	strh.w	r0, [r5, r3, lsl #1]
 8011fae:	f8b1 6003 	ldrh.w	r6, [r1, #3]
		if (wc) {
 8011fb2:	2800      	cmp	r0, #0
 8011fb4:	f040 8090 	bne.w	80120d8 <dir_read+0x258>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fbc:	429e      	cmp	r6, r3
 8011fbe:	d19a      	bne.n	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8011fc0:	f8b1 e005 	ldrh.w	lr, [r1, #5]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011fc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fc8:	459e      	cmp	lr, r3
 8011fca:	d194      	bne.n	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8011fcc:	f8b1 c007 	ldrh.w	ip, [r1, #7]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fd4:	459c      	cmp	ip, r3
 8011fd6:	d18e      	bne.n	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8011fd8:	f8b1 6009 	ldrh.w	r6, [r1, #9]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011fdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fe0:	429e      	cmp	r6, r3
 8011fe2:	d188      	bne.n	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8011fe4:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011fec:	459c      	cmp	ip, r3
 8011fee:	d182      	bne.n	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8011ff0:	f8b1 e010 	ldrh.w	lr, [r1, #16]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8011ff4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011ff8:	459e      	cmp	lr, r3
 8011ffa:	f47f af7c 	bne.w	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8011ffe:	8a4e      	ldrh	r6, [r1, #18]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012004:	429e      	cmp	r6, r3
 8012006:	f47f af76 	bne.w	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 801200a:	f8b1 c014 	ldrh.w	ip, [r1, #20]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801200e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012012:	459c      	cmp	ip, r3
 8012014:	f47f af6f 	bne.w	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8012018:	8ace      	ldrh	r6, [r1, #22]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801201a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801201e:	429e      	cmp	r6, r3
 8012020:	f47f af69 	bne.w	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8012024:	f8b1 c018 	ldrh.w	ip, [r1, #24]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801202c:	459c      	cmp	ip, r3
 801202e:	f47f af62 	bne.w	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 8012032:	8b8e      	ldrh	r6, [r1, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012038:	429e      	cmp	r6, r3
 801203a:	f47f af5c 	bne.w	8011ef6 <dir_read+0x76>
	rv = ptr[1];
 801203e:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012046:	459c      	cmp	ip, r3
 8012048:	f000 80df 	beq.w	801220a <dir_read+0x38a>
 801204c:	e753      	b.n	8011ef6 <dir_read+0x76>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801204e:	2301      	movs	r3, #1
 8012050:	462a      	mov	r2, r5
 8012052:	4649      	mov	r1, r9
 8012054:	7878      	ldrb	r0, [r7, #1]
 8012056:	f7ff fa81 	bl	801155c <disk_write>
 801205a:	b128      	cbz	r0, 8012068 <dir_read+0x1e8>
	FRESULT res = FR_NO_FILE;
 801205c:	2001      	movs	r0, #1
 801205e:	e72f      	b.n	8011ec0 <dir_read+0x40>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012060:	4590      	cmp	r8, r2
 8012062:	f47f af48 	bne.w	8011ef6 <dir_read+0x76>
 8012066:	e78a      	b.n	8011f7e <dir_read+0xfe>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
			fs->wflag = 0;
 801206a:	70f8      	strb	r0, [r7, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801206c:	1aea      	subs	r2, r5, r3
 801206e:	69fb      	ldr	r3, [r7, #28]
 8012070:	429a      	cmp	r2, r3
 8012072:	f4bf af1a 	bcs.w	8011eaa <dir_read+0x2a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012076:	f897 b002 	ldrb.w	fp, [r7, #2]
 801207a:	f1bb 0f01 	cmp.w	fp, #1
 801207e:	d801      	bhi.n	8012084 <dir_read+0x204>
 8012080:	e713      	b.n	8011eaa <dir_read+0x2a>
					wsect += fs->fsize;
 8012082:	69fb      	ldr	r3, [r7, #28]
 8012084:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012086:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
					disk_write(fs->drv, fs->win, wsect, 1);
 801208a:	2301      	movs	r3, #1
 801208c:	4649      	mov	r1, r9
 801208e:	462a      	mov	r2, r5
 8012090:	7878      	ldrb	r0, [r7, #1]
 8012092:	f7ff fa63 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012096:	f1bb 0f01 	cmp.w	fp, #1
 801209a:	d1f2      	bne.n	8012082 <dir_read+0x202>
 801209c:	e705      	b.n	8011eaa <dir_read+0x2a>
				dp->clust = clst;		/* Initialize data for new cluster */
 801209e:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 80120a0:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80120a2:	699a      	ldr	r2, [r3, #24]
 80120a4:	3a02      	subs	r2, #2
 80120a6:	4290      	cmp	r0, r2
 80120a8:	d207      	bcs.n	80120ba <dir_read+0x23a>
	return clst * fs->csize + fs->database;
 80120aa:	895a      	ldrh	r2, [r3, #10]
 80120ac:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 80120ae:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 80120b2:	61e6      	str	r6, [r4, #28]
 80120b4:	e734      	b.n	8011f20 <dir_read+0xa0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80120b6:	2002      	movs	r0, #2
 80120b8:	e702      	b.n	8011ec0 <dir_read+0x40>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80120ba:	3334      	adds	r3, #52	; 0x34
				dp->sect = clust2sect(fs, clst);
 80120bc:	f8c4 b01c 	str.w	fp, [r4, #28]
	dp->dptr = ofs;						/* Current entry */
 80120c0:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80120c2:	6223      	str	r3, [r4, #32]
	while (dp->sect) {
 80120c4:	e731      	b.n	8011f2a <dir_read+0xaa>
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80120c6:	f1b8 0f00 	cmp.w	r8, #0
 80120ca:	f000 80ac 	beq.w	8012226 <dir_read+0x3a6>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80120ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120d2:	2000      	movs	r0, #0
 80120d4:	6323      	str	r3, [r4, #48]	; 0x30
 80120d6:	e6f5      	b.n	8011ec4 <dir_read+0x44>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80120d8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80120dc:	f43f af0d 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80120e0:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 80120e4:	ea4f 0048 	mov.w	r0, r8, lsl #1
 80120e8:	f8b1 e005 	ldrh.w	lr, [r1, #5]
 80120ec:	f103 0802 	add.w	r8, r3, #2
		if (wc) {
 80120f0:	2e00      	cmp	r6, #0
 80120f2:	f43f af67 	beq.w	8011fc4 <dir_read+0x144>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80120f6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80120fa:	f43f aefe 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80120fe:	4428      	add	r0, r5
 8012100:	f103 0803 	add.w	r8, r3, #3
 8012104:	f8a0 e002 	strh.w	lr, [r0, #2]
 8012108:	f8b1 c007 	ldrh.w	ip, [r1, #7]
		if (wc) {
 801210c:	f1be 0f00 	cmp.w	lr, #0
 8012110:	f43f af5e 	beq.w	8011fd0 <dir_read+0x150>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012114:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012118:	f43f aeef 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801211c:	f8a0 c004 	strh.w	ip, [r0, #4]
 8012120:	f103 0804 	add.w	r8, r3, #4
	rv = ptr[1];
 8012124:	f8b1 6009 	ldrh.w	r6, [r1, #9]
		if (wc) {
 8012128:	f1bc 0f00 	cmp.w	ip, #0
 801212c:	f43f af56 	beq.w	8011fdc <dir_read+0x15c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012130:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012134:	f43f aee1 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012138:	80c6      	strh	r6, [r0, #6]
 801213a:	f103 0805 	add.w	r8, r3, #5
	rv = ptr[1];
 801213e:	f8b1 c00e 	ldrh.w	ip, [r1, #14]
		if (wc) {
 8012142:	2e00      	cmp	r6, #0
 8012144:	f43f af50 	beq.w	8011fe8 <dir_read+0x168>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012148:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801214c:	f43f aed5 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012150:	f8a0 c008 	strh.w	ip, [r0, #8]
 8012154:	f103 0806 	add.w	r8, r3, #6
	rv = ptr[1];
 8012158:	f8b1 e010 	ldrh.w	lr, [r1, #16]
		if (wc) {
 801215c:	f1bc 0f00 	cmp.w	ip, #0
 8012160:	f43f af48 	beq.w	8011ff4 <dir_read+0x174>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012164:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012168:	f43f aec7 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801216c:	f8a0 e00a 	strh.w	lr, [r0, #10]
 8012170:	f103 0807 	add.w	r8, r3, #7
	rv = ptr[1];
 8012174:	8a4e      	ldrh	r6, [r1, #18]
		if (wc) {
 8012176:	f1be 0f00 	cmp.w	lr, #0
 801217a:	f43f af41 	beq.w	8012000 <dir_read+0x180>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 801217e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012182:	f43f aeba 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012186:	8186      	strh	r6, [r0, #12]
 8012188:	f103 0808 	add.w	r8, r3, #8
	rv = ptr[1];
 801218c:	f8b1 c014 	ldrh.w	ip, [r1, #20]
		if (wc) {
 8012190:	2e00      	cmp	r6, #0
 8012192:	f43f af3c 	beq.w	801200e <dir_read+0x18e>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8012196:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801219a:	f43f aeae 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 801219e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80121a2:	f103 0809 	add.w	r8, r3, #9
	rv = ptr[1];
 80121a6:	8ace      	ldrh	r6, [r1, #22]
		if (wc) {
 80121a8:	f1bc 0f00 	cmp.w	ip, #0
 80121ac:	f43f af35 	beq.w	801201a <dir_read+0x19a>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80121b0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80121b4:	f43f aea1 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80121b8:	8206      	strh	r6, [r0, #16]
 80121ba:	f103 080a 	add.w	r8, r3, #10
	rv = ptr[1];
 80121be:	f8b1 c018 	ldrh.w	ip, [r1, #24]
		if (wc) {
 80121c2:	2e00      	cmp	r6, #0
 80121c4:	f43f af30 	beq.w	8012028 <dir_read+0x1a8>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80121c8:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80121cc:	f43f ae95 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80121d0:	f8a0 c012 	strh.w	ip, [r0, #18]
 80121d4:	f103 080b 	add.w	r8, r3, #11
	rv = ptr[1];
 80121d8:	8b8e      	ldrh	r6, [r1, #28]
		if (wc) {
 80121da:	f1bc 0f00 	cmp.w	ip, #0
 80121de:	f43f af29 	beq.w	8012034 <dir_read+0x1b4>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80121e2:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80121e6:	f43f ae88 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 80121ea:	8286      	strh	r6, [r0, #20]
 80121ec:	f103 080c 	add.w	r8, r3, #12
	rv = ptr[1];
 80121f0:	f8b1 c01e 	ldrh.w	ip, [r1, #30]
		if (wc) {
 80121f4:	2e00      	cmp	r6, #0
 80121f6:	f43f af24 	beq.w	8012042 <dir_read+0x1c2>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 80121fa:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80121fe:	f43f ae7c 	beq.w	8011efa <dir_read+0x7a>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8012202:	f103 080d 	add.w	r8, r3, #13
 8012206:	f8a0 c016 	strh.w	ip, [r0, #22]
	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 801220a:	780b      	ldrb	r3, [r1, #0]
 801220c:	0659      	lsls	r1, r3, #25
 801220e:	d506      	bpl.n	801221e <dir_read+0x39e>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8012210:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8012214:	f43f ae71 	beq.w	8011efa <dir_read+0x7a>
		lfnbuf[i] = 0;
 8012218:	2300      	movs	r3, #0
 801221a:	f825 3018 	strh.w	r3, [r5, r8, lsl #1]
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801221e:	3a01      	subs	r2, #1
 8012220:	fa5f f882 	uxtb.w	r8, r2
 8012224:	e669      	b.n	8011efa <dir_read+0x7a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8012226:	780a      	ldrb	r2, [r1, #0]
 8012228:	01d3      	lsls	r3, r2, #7
 801222a:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
 801222e:	784a      	ldrb	r2, [r1, #1]
 8012230:	441a      	add	r2, r3
 8012232:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012236:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801223a:	788a      	ldrb	r2, [r1, #2]
 801223c:	fa52 f283 	uxtab	r2, r2, r3
 8012240:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012244:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012248:	78ca      	ldrb	r2, [r1, #3]
 801224a:	fa52 f283 	uxtab	r2, r2, r3
 801224e:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012252:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012256:	790a      	ldrb	r2, [r1, #4]
 8012258:	fa52 f283 	uxtab	r2, r2, r3
 801225c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012260:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012264:	794a      	ldrb	r2, [r1, #5]
 8012266:	fa52 f283 	uxtab	r2, r2, r3
 801226a:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801226e:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012272:	798a      	ldrb	r2, [r1, #6]
 8012274:	fa52 f283 	uxtab	r2, r2, r3
 8012278:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801227c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8012280:	79ca      	ldrb	r2, [r1, #7]
 8012282:	fa52 f283 	uxtab	r2, r2, r3
 8012286:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801228a:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801228e:	7a0a      	ldrb	r2, [r1, #8]
 8012290:	fa52 f283 	uxtab	r2, r2, r3
 8012294:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8012298:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801229c:	7a4a      	ldrb	r2, [r1, #9]
 801229e:	7a89      	ldrb	r1, [r1, #10]
 80122a0:	fa52 f283 	uxtab	r2, r2, r3
 80122a4:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80122a8:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80122ac:	9a00      	ldr	r2, [sp, #0]
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80122ae:	fa51 f383 	uxtab	r3, r1, r3
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80122b2:	b2db      	uxtb	r3, r3
 80122b4:	429a      	cmp	r2, r3
 80122b6:	f47f af0a 	bne.w	80120ce <dir_read+0x24e>
 80122ba:	e636      	b.n	8011f2a <dir_read+0xaa>

080122bc <sync_fs>:
{
 80122bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80122be:	78c3      	ldrb	r3, [r0, #3]
{
 80122c0:	4604      	mov	r4, r0
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80122c2:	b95b      	cbnz	r3, 80122dc <sync_fs+0x20>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80122c4:	7823      	ldrb	r3, [r4, #0]
 80122c6:	2b03      	cmp	r3, #3
 80122c8:	d029      	beq.n	801231e <sync_fs+0x62>
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80122ca:	2200      	movs	r2, #0
 80122cc:	7860      	ldrb	r0, [r4, #1]
 80122ce:	4611      	mov	r1, r2
 80122d0:	f7ff f952 	bl	8011578 <disk_ioctl>
			res = FR_DISK_ERR;
 80122d4:	3800      	subs	r0, #0
 80122d6:	bf18      	it	ne
 80122d8:	2001      	movne	r0, #1
}
 80122da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		wsect = fs->winsect;	/* Current sector number */
 80122dc:	6b05      	ldr	r5, [r0, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80122de:	f100 0734 	add.w	r7, r0, #52	; 0x34
 80122e2:	2301      	movs	r3, #1
 80122e4:	7840      	ldrb	r0, [r0, #1]
 80122e6:	462a      	mov	r2, r5
 80122e8:	4639      	mov	r1, r7
 80122ea:	f7ff f937 	bl	801155c <disk_write>
 80122ee:	2800      	cmp	r0, #0
 80122f0:	d150      	bne.n	8012394 <sync_fs+0xd8>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80122f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80122f4:	69e3      	ldr	r3, [r4, #28]
 80122f6:	1aaa      	subs	r2, r5, r2
			fs->wflag = 0;
 80122f8:	70e0      	strb	r0, [r4, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d2e2      	bcs.n	80122c4 <sync_fs+0x8>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80122fe:	78a6      	ldrb	r6, [r4, #2]
 8012300:	2e01      	cmp	r6, #1
 8012302:	d801      	bhi.n	8012308 <sync_fs+0x4c>
 8012304:	e7de      	b.n	80122c4 <sync_fs+0x8>
					wsect += fs->fsize;
 8012306:	69e3      	ldr	r3, [r4, #28]
 8012308:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801230a:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 801230c:	2301      	movs	r3, #1
 801230e:	4639      	mov	r1, r7
 8012310:	462a      	mov	r2, r5
 8012312:	7860      	ldrb	r0, [r4, #1]
 8012314:	f7ff f922 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012318:	2e01      	cmp	r6, #1
 801231a:	d1f4      	bne.n	8012306 <sync_fs+0x4a>
 801231c:	e7d2      	b.n	80122c4 <sync_fs+0x8>
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801231e:	7925      	ldrb	r5, [r4, #4]
 8012320:	2d01      	cmp	r5, #1
 8012322:	d1d2      	bne.n	80122ca <sync_fs+0xe>
			mem_set(fs->win, 0, SS(fs));
 8012324:	f104 0634 	add.w	r6, r4, #52	; 0x34
		*d++ = (BYTE)val;
 8012328:	f44f 7200 	mov.w	r2, #512	; 0x200
 801232c:	2100      	movs	r1, #0
 801232e:	4630      	mov	r0, r6
 8012330:	f00b f8d0 	bl	801d4d4 <memset>
	*ptr++ = (BYTE)val; val >>= 8;
 8012334:	f64a 2055 	movw	r0, #43605	; 0xaa55
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012338:	6962      	ldr	r2, [r4, #20]
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 801233a:	462b      	mov	r3, r5
	*ptr++ = (BYTE)val; val >>= 8;
 801233c:	f8a4 0232 	strh.w	r0, [r4, #562]	; 0x232
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012340:	4631      	mov	r1, r6
	*ptr++ = (BYTE)val; val >>= 8;
 8012342:	4815      	ldr	r0, [pc, #84]	; (8012398 <sync_fs+0xdc>)
 8012344:	f884 221c 	strb.w	r2, [r4, #540]	; 0x21c
 8012348:	6360      	str	r0, [r4, #52]	; 0x34
 801234a:	f100 50ff 	add.w	r0, r0, #534773760	; 0x1fe00000
 801234e:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
 8012352:	3020      	adds	r0, #32
 8012354:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
 8012358:	0a10      	lsrs	r0, r2, #8
	*ptr++ = (BYTE)val; val >>= 8;
 801235a:	f884 021d 	strb.w	r0, [r4, #541]	; 0x21d
 801235e:	0c10      	lsrs	r0, r2, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8012360:	0e12      	lsrs	r2, r2, #24
 8012362:	f884 021e 	strb.w	r0, [r4, #542]	; 0x21e
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8012366:	6920      	ldr	r0, [r4, #16]
	*ptr++ = (BYTE)val;
 8012368:	f884 221f 	strb.w	r2, [r4, #543]	; 0x21f
	*ptr++ = (BYTE)val; val >>= 8;
 801236c:	0a05      	lsrs	r5, r0, #8
			fs->winsect = fs->volbase + 1;
 801236e:	6a22      	ldr	r2, [r4, #32]
	*ptr++ = (BYTE)val; val >>= 8;
 8012370:	f884 0220 	strb.w	r0, [r4, #544]	; 0x220
			fs->winsect = fs->volbase + 1;
 8012374:	3201      	adds	r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8012376:	f884 5221 	strb.w	r5, [r4, #545]	; 0x221
 801237a:	0c05      	lsrs	r5, r0, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801237c:	0e00      	lsrs	r0, r0, #24
			fs->winsect = fs->volbase + 1;
 801237e:	6322      	str	r2, [r4, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8012380:	f884 5222 	strb.w	r5, [r4, #546]	; 0x222
	*ptr++ = (BYTE)val;
 8012384:	f884 0223 	strb.w	r0, [r4, #547]	; 0x223
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8012388:	7860      	ldrb	r0, [r4, #1]
 801238a:	f7ff f8e7 	bl	801155c <disk_write>
			fs->fsi_flag = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	7123      	strb	r3, [r4, #4]
 8012392:	e79a      	b.n	80122ca <sync_fs+0xe>
			res = FR_DISK_ERR;
 8012394:	2001      	movs	r0, #1
}
 8012396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012398:	41615252 	.word	0x41615252

0801239c <create_chain>:
{
 801239c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123a0:	4682      	mov	sl, r0
	if (clst == 0) {	/* Create a new chain */
 80123a2:	4688      	mov	r8, r1
	FATFS *fs = obj->fs;
 80123a4:	f8d0 9000 	ldr.w	r9, [r0]
	if (clst == 0) {	/* Create a new chain */
 80123a8:	2900      	cmp	r1, #0
 80123aa:	f040 80b4 	bne.w	8012516 <create_chain+0x17a>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80123ae:	f8d9 6010 	ldr.w	r6, [r9, #16]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80123b2:	f8d9 3018 	ldr.w	r3, [r9, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80123b6:	b9ce      	cbnz	r6, 80123ec <create_chain+0x50>
 80123b8:	2601      	movs	r6, #1
		ncl = scl;	/* Start cluster */
 80123ba:	4634      	mov	r4, r6
			ncl++;							/* Next cluster */
 80123bc:	3401      	adds	r4, #1
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80123be:	429c      	cmp	r4, r3
 80123c0:	d318      	bcc.n	80123f4 <create_chain+0x58>
				if (ncl > scl) return 0;	/* No free cluster */
 80123c2:	2e01      	cmp	r6, #1
 80123c4:	f000 80a3 	beq.w	801250e <create_chain+0x172>
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80123c8:	f8da 5000 	ldr.w	r5, [sl]
				ncl = 2;
 80123cc:	2402      	movs	r4, #2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80123ce:	69ab      	ldr	r3, [r5, #24]
 80123d0:	42a3      	cmp	r3, r4
 80123d2:	d907      	bls.n	80123e4 <create_chain+0x48>
		switch (fs->fs_type) {
 80123d4:	782b      	ldrb	r3, [r5, #0]
 80123d6:	2b02      	cmp	r3, #2
 80123d8:	f000 8088 	beq.w	80124ec <create_chain+0x150>
 80123dc:	2b03      	cmp	r3, #3
 80123de:	d044      	beq.n	801246a <create_chain+0xce>
 80123e0:	2b01      	cmp	r3, #1
 80123e2:	d00c      	beq.n	80123fe <create_chain+0x62>
 80123e4:	2401      	movs	r4, #1
}
 80123e6:	4620      	mov	r0, r4
 80123e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80123ec:	42b3      	cmp	r3, r6
 80123ee:	bf98      	it	ls
 80123f0:	2601      	movls	r6, #1
 80123f2:	e7e2      	b.n	80123ba <create_chain+0x1e>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80123f4:	2c01      	cmp	r4, #1
 80123f6:	f8da 5000 	ldr.w	r5, [sl]
 80123fa:	d9f3      	bls.n	80123e4 <create_chain+0x48>
 80123fc:	e7e7      	b.n	80123ce <create_chain+0x32>
			bc = (UINT)clst; bc += bc / 2;
 80123fe:	eb04 0754 	add.w	r7, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012402:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012404:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012406:	eb03 2157 	add.w	r1, r3, r7, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801240a:	4291      	cmp	r1, r2
 801240c:	d005      	beq.n	801241a <create_chain+0x7e>
 801240e:	4628      	mov	r0, r5
 8012410:	f7ff fa44 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012414:	bb20      	cbnz	r0, 8012460 <create_chain+0xc4>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012416:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012418:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801241a:	f107 0b01 	add.w	fp, r7, #1
 801241e:	f3c7 0708 	ubfx	r7, r7, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012422:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8012426:	442f      	add	r7, r5
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012428:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 801242a:	f897 7034 	ldrb.w	r7, [r7, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 801242e:	d003      	beq.n	8012438 <create_chain+0x9c>
 8012430:	4628      	mov	r0, r5
 8012432:	f7ff fa33 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012436:	b998      	cbnz	r0, 8012460 <create_chain+0xc4>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012438:	f3cb 0b08 	ubfx	fp, fp, #0, #9
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 801243c:	07e2      	lsls	r2, r4, #31
			wc |= fs->win[bc % SS(fs)] << 8;
 801243e:	445d      	add	r5, fp
 8012440:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 8012444:	ea47 2303 	orr.w	r3, r7, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012448:	d575      	bpl.n	8012536 <create_chain+0x19a>
 801244a:	091b      	lsrs	r3, r3, #4
			if (cs == 0) break;				/* Found a free cluster */
 801244c:	b30b      	cbz	r3, 8012492 <create_chain+0xf6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 801244e:	2b01      	cmp	r3, #1
 8012450:	d0c8      	beq.n	80123e4 <create_chain+0x48>
			if (ncl == scl) return 0;		/* No free cluster */
 8012452:	42a6      	cmp	r6, r4
 8012454:	d05b      	beq.n	801250e <create_chain+0x172>
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012456:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801245a:	e7af      	b.n	80123bc <create_chain+0x20>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 801245c:	2801      	cmp	r0, #1
 801245e:	d1c1      	bne.n	80123e4 <create_chain+0x48>
 8012460:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
 8012464:	4620      	mov	r0, r4
 8012466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801246a:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801246c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801246e:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012472:	4299      	cmp	r1, r3
 8012474:	d004      	beq.n	8012480 <create_chain+0xe4>
 8012476:	4628      	mov	r0, r5
 8012478:	f7ff fa10 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801247c:	2800      	cmp	r0, #0
 801247e:	d1ef      	bne.n	8012460 <create_chain+0xc4>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012480:	00a3      	lsls	r3, r4, #2
 8012482:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8012486:	441d      	add	r5, r3
 8012488:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801248a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
			if (cs == 0) break;				/* Found a free cluster */
 801248e:	2b00      	cmp	r3, #0
 8012490:	d1dd      	bne.n	801244e <create_chain+0xb2>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012492:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8012496:	42a3      	cmp	r3, r4
 8012498:	d9a4      	bls.n	80123e4 <create_chain+0x48>
 801249a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801249e:	4621      	mov	r1, r4
 80124a0:	4648      	mov	r0, r9
 80124a2:	f7ff fbad 	bl	8011c00 <put_fat.part.0>
		if (res == FR_OK && clst != 0) {
 80124a6:	b970      	cbnz	r0, 80124c6 <create_chain+0x12a>
 80124a8:	f1b8 0f00 	cmp.w	r8, #0
 80124ac:	d00b      	beq.n	80124c6 <create_chain+0x12a>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80124ae:	f1b8 0f01 	cmp.w	r8, #1
 80124b2:	d097      	beq.n	80123e4 <create_chain+0x48>
 80124b4:	f8d9 3018 	ldr.w	r3, [r9, #24]
 80124b8:	4598      	cmp	r8, r3
 80124ba:	d293      	bcs.n	80123e4 <create_chain+0x48>
 80124bc:	4622      	mov	r2, r4
 80124be:	4641      	mov	r1, r8
 80124c0:	4648      	mov	r0, r9
 80124c2:	f7ff fb9d 	bl	8011c00 <put_fat.part.0>
	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80124c6:	2800      	cmp	r0, #0
 80124c8:	d1c8      	bne.n	801245c <create_chain+0xc0>
		fs->last_clst = ncl;
 80124ca:	f8c9 4010 	str.w	r4, [r9, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80124ce:	e9d9 2305 	ldrd	r2, r3, [r9, #20]
 80124d2:	3b02      	subs	r3, #2
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d802      	bhi.n	80124de <create_chain+0x142>
 80124d8:	3a01      	subs	r2, #1
 80124da:	f8c9 2014 	str.w	r2, [r9, #20]
		fs->fsi_flag |= 1;
 80124de:	f899 3004 	ldrb.w	r3, [r9, #4]
 80124e2:	f043 0301 	orr.w	r3, r3, #1
 80124e6:	f889 3004 	strb.w	r3, [r9, #4]
 80124ea:	e77c      	b.n	80123e6 <create_chain+0x4a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80124ec:	6a69      	ldr	r1, [r5, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 80124ee:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80124f0:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 80124f4:	4299      	cmp	r1, r3
 80124f6:	d004      	beq.n	8012502 <create_chain+0x166>
 80124f8:	4628      	mov	r0, r5
 80124fa:	f7ff f9cf 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80124fe:	2800      	cmp	r0, #0
 8012500:	d1ae      	bne.n	8012460 <create_chain+0xc4>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012502:	0063      	lsls	r3, r4, #1
 8012504:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012508:	441d      	add	r5, r3
 801250a:	8eab      	ldrh	r3, [r5, #52]	; 0x34
			break;
 801250c:	e79e      	b.n	801244c <create_chain+0xb0>
				if (ncl > scl) return 0;	/* No free cluster */
 801250e:	2400      	movs	r4, #0
}
 8012510:	4620      	mov	r0, r4
 8012512:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012516:	4648      	mov	r0, r9
 8012518:	f7ff fc0c 	bl	8011d34 <get_fat.isra.0>
		if (cs < 2) return 1;				/* Invalid FAT value */
 801251c:	2801      	cmp	r0, #1
		cs = get_fat(obj, clst);			/* Check the cluster status */
 801251e:	4604      	mov	r4, r0
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012520:	f67f af60 	bls.w	80123e4 <create_chain+0x48>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012524:	1c41      	adds	r1, r0, #1
 8012526:	d09b      	beq.n	8012460 <create_chain+0xc4>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012528:	f8d9 3018 	ldr.w	r3, [r9, #24]
 801252c:	4283      	cmp	r3, r0
 801252e:	f63f af5a 	bhi.w	80123e6 <create_chain+0x4a>
 8012532:	4646      	mov	r6, r8
 8012534:	e741      	b.n	80123ba <create_chain+0x1e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801253a:	e787      	b.n	801244c <create_chain+0xb0>

0801253c <dir_sdi>:
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801253c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8012540:	d274      	bcs.n	801262c <dir_sdi+0xf0>
 8012542:	06ca      	lsls	r2, r1, #27
{
 8012544:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012548:	460c      	mov	r4, r1
	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 801254a:	d151      	bne.n	80125f0 <dir_sdi+0xb4>
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801254c:	6885      	ldr	r5, [r0, #8]
 801254e:	4606      	mov	r6, r0
	FATFS *fs = dp->obj.fs;
 8012550:	f8d0 8000 	ldr.w	r8, [r0]
	dp->dptr = ofs;				/* Set current offset */
 8012554:	6141      	str	r1, [r0, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012556:	2d00      	cmp	r5, #0
 8012558:	d04d      	beq.n	80125f6 <dir_sdi+0xba>
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 801255a:	f8b8 300a 	ldrh.w	r3, [r8, #10]
		while (ofs >= csz) {				/* Follow cluster chain */
 801255e:	ebb4 2f43 	cmp.w	r4, r3, lsl #9
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012562:	ea4f 2943 	mov.w	r9, r3, lsl #9
		while (ofs >= csz) {				/* Follow cluster chain */
 8012566:	f0c0 808e 	bcc.w	8012686 <dir_sdi+0x14a>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801256a:	2d01      	cmp	r5, #1
 801256c:	d040      	beq.n	80125f0 <dir_sdi+0xb4>
 801256e:	4647      	mov	r7, r8
 8012570:	e03b      	b.n	80125ea <dir_sdi+0xae>
		switch (fs->fs_type) {
 8012572:	783b      	ldrb	r3, [r7, #0]
 8012574:	2b02      	cmp	r3, #2
 8012576:	d073      	beq.n	8012660 <dir_sdi+0x124>
 8012578:	2b03      	cmp	r3, #3
 801257a:	d05f      	beq.n	801263c <dir_sdi+0x100>
 801257c:	2b01      	cmp	r3, #1
 801257e:	d137      	bne.n	80125f0 <dir_sdi+0xb4>
			bc = (UINT)clst; bc += bc / 2;
 8012580:	eb05 0a55 	add.w	sl, r5, r5, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012588:	eb03 215a 	add.w	r1, r3, sl, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 801258c:	4291      	cmp	r1, r2
 801258e:	d006      	beq.n	801259e <dir_sdi+0x62>
 8012590:	4638      	mov	r0, r7
 8012592:	f7ff f983 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012596:	2800      	cmp	r0, #0
 8012598:	d172      	bne.n	8012680 <dir_sdi+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 801259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801259c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 801259e:	f10a 0b01 	add.w	fp, sl, #1
 80125a2:	f3ca 0a08 	ubfx	sl, sl, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80125a6:	eb03 215b 	add.w	r1, r3, fp, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 80125aa:	44ba      	add	sl, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 80125ac:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 80125ae:	f89a a034 	ldrb.w	sl, [sl, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 80125b2:	d004      	beq.n	80125be <dir_sdi+0x82>
 80125b4:	4638      	mov	r0, r7
 80125b6:	f7ff f971 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80125ba:	2800      	cmp	r0, #0
 80125bc:	d160      	bne.n	8012680 <dir_sdi+0x144>
			wc |= fs->win[bc % SS(fs)] << 8;
 80125be:	f3cb 0b08 	ubfx	fp, fp, #0, #9
 80125c2:	445f      	add	r7, fp
 80125c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80125c8:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80125cc:	07eb      	lsls	r3, r5, #31
 80125ce:	d568      	bpl.n	80126a2 <dir_sdi+0x166>
 80125d0:	ea4f 151a 	mov.w	r5, sl, lsr #4
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80125d4:	2d01      	cmp	r5, #1
 80125d6:	d90b      	bls.n	80125f0 <dir_sdi+0xb4>
 80125d8:	f8d8 3018 	ldr.w	r3, [r8, #24]
 80125dc:	42ab      	cmp	r3, r5
 80125de:	d907      	bls.n	80125f0 <dir_sdi+0xb4>
			ofs -= csz;
 80125e0:	eba4 0409 	sub.w	r4, r4, r9
		while (ofs >= csz) {				/* Follow cluster chain */
 80125e4:	45a1      	cmp	r9, r4
 80125e6:	d850      	bhi.n	801268a <dir_sdi+0x14e>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80125e8:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	42ab      	cmp	r3, r5
 80125ee:	d8c0      	bhi.n	8012572 <dir_sdi+0x36>
		switch (fs->fs_type) {
 80125f0:	2002      	movs	r0, #2
}
 80125f2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80125f6:	f898 3000 	ldrb.w	r3, [r8]
 80125fa:	2b02      	cmp	r3, #2
 80125fc:	d818      	bhi.n	8012630 <dir_sdi+0xf4>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80125fe:	f8b8 3008 	ldrh.w	r3, [r8, #8]
 8012602:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8012606:	d9f3      	bls.n	80125f0 <dir_sdi+0xb4>
		dp->sect = fs->dirbase;
 8012608:	f8d8 2028 	ldr.w	r2, [r8, #40]	; 0x28
 801260c:	61f2      	str	r2, [r6, #28]
	dp->clust = clst;					/* Current cluster# */
 801260e:	61b5      	str	r5, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012610:	2a00      	cmp	r2, #0
 8012612:	d0ed      	beq.n	80125f0 <dir_sdi+0xb4>
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012614:	f108 0834 	add.w	r8, r8, #52	; 0x34
 8012618:	f3c4 0308 	ubfx	r3, r4, #0, #9
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 801261c:	eb02 2254 	add.w	r2, r2, r4, lsr #9
	return FR_OK;
 8012620:	2000      	movs	r0, #0
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012622:	4443      	add	r3, r8
 8012624:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8012628:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return FR_INT_ERR;
 801262c:	2002      	movs	r0, #2
}
 801262e:	4770      	bx	lr
		clst = fs->dirbase;
 8012630:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012634:	2b00      	cmp	r3, #0
 8012636:	d0e2      	beq.n	80125fe <dir_sdi+0xc2>
 8012638:	461d      	mov	r5, r3
 801263a:	e78e      	b.n	801255a <dir_sdi+0x1e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801263c:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 801263e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012640:	eb01 11d5 	add.w	r1, r1, r5, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012644:	4299      	cmp	r1, r3
 8012646:	d003      	beq.n	8012650 <dir_sdi+0x114>
 8012648:	4638      	mov	r0, r7
 801264a:	f7ff f927 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801264e:	b9b8      	cbnz	r0, 8012680 <dir_sdi+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012650:	00ad      	lsls	r5, r5, #2
 8012652:	f405 75fe 	and.w	r5, r5, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8012656:	442f      	add	r7, r5
 8012658:	6b7d      	ldr	r5, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801265a:	f025 4570 	bic.w	r5, r5, #4026531840	; 0xf0000000
			break;
 801265e:	e7b9      	b.n	80125d4 <dir_sdi+0x98>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012660:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012664:	eb01 2115 	add.w	r1, r1, r5, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012668:	4299      	cmp	r1, r3
 801266a:	d003      	beq.n	8012674 <dir_sdi+0x138>
 801266c:	4638      	mov	r0, r7
 801266e:	f7ff f915 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012672:	b928      	cbnz	r0, 8012680 <dir_sdi+0x144>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012674:	006d      	lsls	r5, r5, #1
 8012676:	f405 75ff 	and.w	r5, r5, #510	; 0x1fe
 801267a:	442f      	add	r7, r5
 801267c:	8ebd      	ldrh	r5, [r7, #52]	; 0x34
			break;
 801267e:	e7a9      	b.n	80125d4 <dir_sdi+0x98>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012680:	2001      	movs	r0, #1
}
 8012682:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012686:	f8d8 3018 	ldr.w	r3, [r8, #24]
 801268a:	3b02      	subs	r3, #2
	clst -= 2;
 801268c:	1ea9      	subs	r1, r5, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801268e:	4299      	cmp	r1, r3
 8012690:	d20a      	bcs.n	80126a8 <dir_sdi+0x16c>
	return clst * fs->csize + fs->database;
 8012692:	f8b8 300a 	ldrh.w	r3, [r8, #10]
 8012696:	f8d8 202c 	ldr.w	r2, [r8, #44]	; 0x2c
 801269a:	fb01 2203 	mla	r2, r1, r3, r2
		dp->sect = clust2sect(fs, clst);
 801269e:	61f2      	str	r2, [r6, #28]
 80126a0:	e7b5      	b.n	801260e <dir_sdi+0xd2>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80126a2:	f3ca 050b 	ubfx	r5, sl, #0, #12
 80126a6:	e795      	b.n	80125d4 <dir_sdi+0x98>
		dp->sect = clust2sect(fs, clst);
 80126a8:	2300      	movs	r3, #0
 80126aa:	e9c6 5306 	strd	r5, r3, [r6, #24]
	if (!dp->sect) return FR_INT_ERR;
 80126ae:	e79f      	b.n	80125f0 <dir_sdi+0xb4>

080126b0 <dir_find>:
{
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126b4:	2100      	movs	r1, #0
{
 80126b6:	b085      	sub	sp, #20
 80126b8:	4604      	mov	r4, r0
	FATFS *fs = dp->obj.fs;
 80126ba:	f8d0 8000 	ldr.w	r8, [r0]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80126be:	f7ff ff3d 	bl	801253c <dir_sdi>
	if (res != FR_OK) return res;
 80126c2:	4607      	mov	r7, r0
 80126c4:	b9e8      	cbnz	r0, 8012702 <dir_find+0x52>
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80126c6:	f04f 09ff 	mov.w	r9, #255	; 0xff
 80126ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		res = move_window(fs, dp->sect);
 80126ce:	69e6      	ldr	r6, [r4, #28]
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80126d0:	46ca      	mov	sl, r9
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80126d2:	6323      	str	r3, [r4, #48]	; 0x30
	if (sector != fs->winsect) {	/* Window offset changed? */
 80126d4:	f8d8 5030 	ldr.w	r5, [r8, #48]	; 0x30
 80126d8:	42b5      	cmp	r5, r6
 80126da:	d018      	beq.n	801270e <dir_find+0x5e>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80126dc:	f898 3003 	ldrb.w	r3, [r8, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80126e0:	f108 0134 	add.w	r1, r8, #52	; 0x34
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	f040 8088 	bne.w	80127fa <dir_find+0x14a>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80126ea:	2301      	movs	r3, #1
 80126ec:	4632      	mov	r2, r6
 80126ee:	f898 0001 	ldrb.w	r0, [r8, #1]
 80126f2:	f7fe ff25 	bl	8011540 <disk_read>
 80126f6:	b140      	cbz	r0, 801270a <dir_find+0x5a>
			fs->winsect = sector;
 80126f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 80126fc:	2701      	movs	r7, #1
			fs->winsect = sector;
 80126fe:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8012702:	4638      	mov	r0, r7
 8012704:	b005      	add	sp, #20
 8012706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 801270a:	f8c8 6030 	str.w	r6, [r8, #48]	; 0x30
		c = dp->dir[DIR_Name];
 801270e:	6a26      	ldr	r6, [r4, #32]
 8012710:	7835      	ldrb	r5, [r6, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012712:	b34d      	cbz	r5, 8012768 <dir_find+0xb8>
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012714:	7af2      	ldrb	r2, [r6, #11]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8012716:	2de5      	cmp	r5, #229	; 0xe5
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8012718:	f002 033f 	and.w	r3, r2, #63	; 0x3f
 801271c:	71a3      	strb	r3, [r4, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 801271e:	d004      	beq.n	801272a <dir_find+0x7a>
 8012720:	0717      	lsls	r7, r2, #28
 8012722:	d526      	bpl.n	8012772 <dir_find+0xc2>
 8012724:	2b0f      	cmp	r3, #15
 8012726:	f000 8094 	beq.w	8012852 <dir_find+0x1a2>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801272a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801272e:	f04f 0aff 	mov.w	sl, #255	; 0xff
 8012732:	6323      	str	r3, [r4, #48]	; 0x30
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012734:	6965      	ldr	r5, [r4, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012736:	69e6      	ldr	r6, [r4, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012738:	3520      	adds	r5, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801273a:	f5b5 1f00 	cmp.w	r5, #2097152	; 0x200000
 801273e:	d213      	bcs.n	8012768 <dir_find+0xb8>
 8012740:	b196      	cbz	r6, 8012768 <dir_find+0xb8>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012742:	f3c5 0308 	ubfx	r3, r5, #0, #9
	FATFS *fs = dp->obj.fs;
 8012746:	6827      	ldr	r7, [r4, #0]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012748:	b94b      	cbnz	r3, 801275e <dir_find+0xae>
		dp->sect++;				/* Next sector */
 801274a:	3601      	adds	r6, #1
		if (!dp->clust) {		/* Static table */
 801274c:	69a1      	ldr	r1, [r4, #24]
		dp->sect++;				/* Next sector */
 801274e:	61e6      	str	r6, [r4, #28]
		if (!dp->clust) {		/* Static table */
 8012750:	2900      	cmp	r1, #0
 8012752:	d15e      	bne.n	8012812 <dir_find+0x162>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012754:	893a      	ldrh	r2, [r7, #8]
 8012756:	ebb2 1f55 	cmp.w	r2, r5, lsr #5
 801275a:	f240 8134 	bls.w	80129c6 <dir_find+0x316>
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 801275e:	3734      	adds	r7, #52	; 0x34
	dp->dptr = ofs;						/* Current entry */
 8012760:	6165      	str	r5, [r4, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012762:	443b      	add	r3, r7
 8012764:	6223      	str	r3, [r4, #32]
	} while (res == FR_OK);
 8012766:	e7b5      	b.n	80126d4 <dir_find+0x24>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8012768:	2704      	movs	r7, #4
}
 801276a:	4638      	mov	r0, r7
 801276c:	b005      	add	sp, #20
 801276e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (a == AM_LFN) {			/* An LFN entry is found */
 8012772:	2b0f      	cmp	r3, #15
 8012774:	d06d      	beq.n	8012852 <dir_find+0x1a2>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8012776:	f1ba 0f00 	cmp.w	sl, #0
 801277a:	f000 80d6 	beq.w	801292a <dir_find+0x27a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 801277e:	f894 a02f 	ldrb.w	sl, [r4, #47]	; 0x2f
 8012782:	f01a 0a01 	ands.w	sl, sl, #1
 8012786:	d1d0      	bne.n	801272a <dir_find+0x7a>
	} while (--cnt && r == 0);
 8012788:	7832      	ldrb	r2, [r6, #0]
 801278a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 801278e:	429a      	cmp	r2, r3
 8012790:	d1cb      	bne.n	801272a <dir_find+0x7a>
 8012792:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8012796:	7873      	ldrb	r3, [r6, #1]
 8012798:	429a      	cmp	r2, r3
 801279a:	d1c6      	bne.n	801272a <dir_find+0x7a>
 801279c:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 80127a0:	78b3      	ldrb	r3, [r6, #2]
 80127a2:	429a      	cmp	r2, r3
 80127a4:	d1c1      	bne.n	801272a <dir_find+0x7a>
 80127a6:	78f2      	ldrb	r2, [r6, #3]
 80127a8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d1bc      	bne.n	801272a <dir_find+0x7a>
 80127b0:	7932      	ldrb	r2, [r6, #4]
 80127b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80127b6:	429a      	cmp	r2, r3
 80127b8:	d1b7      	bne.n	801272a <dir_find+0x7a>
 80127ba:	7972      	ldrb	r2, [r6, #5]
 80127bc:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
 80127c0:	429a      	cmp	r2, r3
 80127c2:	d1b2      	bne.n	801272a <dir_find+0x7a>
 80127c4:	79b2      	ldrb	r2, [r6, #6]
 80127c6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 80127ca:	429a      	cmp	r2, r3
 80127cc:	d1ad      	bne.n	801272a <dir_find+0x7a>
 80127ce:	79f2      	ldrb	r2, [r6, #7]
 80127d0:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
 80127d4:	429a      	cmp	r2, r3
 80127d6:	d1a8      	bne.n	801272a <dir_find+0x7a>
 80127d8:	7a32      	ldrb	r2, [r6, #8]
 80127da:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80127de:	429a      	cmp	r2, r3
 80127e0:	d1a3      	bne.n	801272a <dir_find+0x7a>
 80127e2:	7a72      	ldrb	r2, [r6, #9]
 80127e4:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80127e8:	429a      	cmp	r2, r3
 80127ea:	d19e      	bne.n	801272a <dir_find+0x7a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80127ec:	7ab2      	ldrb	r2, [r6, #10]
 80127ee:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80127f2:	429a      	cmp	r2, r3
 80127f4:	d199      	bne.n	801272a <dir_find+0x7a>
 80127f6:	4657      	mov	r7, sl
 80127f8:	e783      	b.n	8012702 <dir_find+0x52>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80127fa:	2301      	movs	r3, #1
 80127fc:	462a      	mov	r2, r5
 80127fe:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012802:	9100      	str	r1, [sp, #0]
 8012804:	f7fe feaa 	bl	801155c <disk_write>
 8012808:	9900      	ldr	r1, [sp, #0]
 801280a:	2800      	cmp	r0, #0
 801280c:	d06d      	beq.n	80128ea <dir_find+0x23a>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 801280e:	2701      	movs	r7, #1
 8012810:	e777      	b.n	8012702 <dir_find+0x52>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012812:	897a      	ldrh	r2, [r7, #10]
 8012814:	3a01      	subs	r2, #1
 8012816:	ea12 2255 	ands.w	r2, r2, r5, lsr #9
 801281a:	d1a0      	bne.n	801275e <dir_find+0xae>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 801281c:	4638      	mov	r0, r7
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	f7ff fa88 	bl	8011d34 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012824:	2801      	cmp	r0, #1
 8012826:	f240 80d2 	bls.w	80129ce <dir_find+0x31e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 801282a:	1c43      	adds	r3, r0, #1
 801282c:	d0ef      	beq.n	801280e <dir_find+0x15e>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801282e:	69ba      	ldr	r2, [r7, #24]
 8012830:	4290      	cmp	r0, r2
 8012832:	f080 80c8 	bcs.w	80129c6 <dir_find+0x316>
				dp->clust = clst;		/* Initialize data for new cluster */
 8012836:	61a0      	str	r0, [r4, #24]
	clst -= 2;
 8012838:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801283a:	69ba      	ldr	r2, [r7, #24]
 801283c:	9b00      	ldr	r3, [sp, #0]
 801283e:	3a02      	subs	r2, #2
 8012840:	4290      	cmp	r0, r2
 8012842:	f080 80c6 	bcs.w	80129d2 <dir_find+0x322>
	return clst * fs->csize + fs->database;
 8012846:	897a      	ldrh	r2, [r7, #10]
 8012848:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 801284a:	fb00 6602 	mla	r6, r0, r2, r6
				dp->sect = clust2sect(fs, clst);
 801284e:	61e6      	str	r6, [r4, #28]
 8012850:	e785      	b.n	801275e <dir_find+0xae>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8012852:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8012856:	0658      	lsls	r0, r3, #25
 8012858:	f53f af6c 	bmi.w	8012734 <dir_find+0x84>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801285c:	0669      	lsls	r1, r5, #25
 801285e:	d53f      	bpl.n	80128e0 <dir_find+0x230>
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8012860:	6963      	ldr	r3, [r4, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8012862:	f005 05bf 	and.w	r5, r5, #191	; 0xbf
						sum = dp->dir[LDIR_Chksum];
 8012866:	f896 900d 	ldrb.w	r9, [r6, #13]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801286a:	6323      	str	r3, [r4, #48]	; 0x30
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801286c:	7b73      	ldrb	r3, [r6, #13]
 801286e:	454b      	cmp	r3, r9
 8012870:	d138      	bne.n	80128e4 <dir_find+0x234>
	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012872:	8b73      	ldrh	r3, [r6, #26]
 8012874:	bbb3      	cbnz	r3, 80128e4 <dir_find+0x234>
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012876:	7837      	ldrb	r7, [r6, #0]
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012878:	2101      	movs	r1, #1
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 801287a:	f8d8 200c 	ldr.w	r2, [r8, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801287e:	f007 073f 	and.w	r7, r7, #63	; 0x3f
 8012882:	f8df a178 	ldr.w	sl, [pc, #376]	; 80129fc <dir_find+0x34c>
 8012886:	9502      	str	r5, [sp, #8]
 8012888:	4615      	mov	r5, r2
 801288a:	3f01      	subs	r7, #1
 801288c:	f10a 0b0d 	add.w	fp, sl, #13
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8012890:	9203      	str	r2, [sp, #12]
	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012892:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8012896:	f8cd 8000 	str.w	r8, [sp]
 801289a:	9401      	str	r4, [sp, #4]
 801289c:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80128a0:	e010      	b.n	80128c4 <dir_find+0x214>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80128a2:	2ffe      	cmp	r7, #254	; 0xfe
 80128a4:	4620      	mov	r0, r4
 80128a6:	d816      	bhi.n	80128d6 <dir_find+0x226>
 80128a8:	f001 fecc 	bl	8014644 <ff_wtoupper>
 80128ac:	4680      	mov	r8, r0
 80128ae:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
 80128b2:	3701      	adds	r7, #1
 80128b4:	f001 fec6 	bl	8014644 <ff_wtoupper>
 80128b8:	4580      	cmp	r8, r0
 80128ba:	4621      	mov	r1, r4
 80128bc:	d10b      	bne.n	80128d6 <dir_find+0x226>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80128be:	45d3      	cmp	fp, sl
 80128c0:	f000 8089 	beq.w	80129d6 <dir_find+0x326>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80128c4:	f81a 3b01 	ldrb.w	r3, [sl], #1
	rv = ptr[1];
 80128c8:	5af4      	ldrh	r4, [r6, r3]
		if (wc) {
 80128ca:	2900      	cmp	r1, #0
 80128cc:	d1e9      	bne.n	80128a2 <dir_find+0x1f2>
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80128ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80128d2:	429c      	cmp	r4, r3
 80128d4:	d0f3      	beq.n	80128be <dir_find+0x20e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80128d6:	e9dd 8400 	ldrd	r8, r4, [sp]
 80128da:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80128de:	e729      	b.n	8012734 <dir_find+0x84>
 80128e0:	45aa      	cmp	sl, r5
 80128e2:	d0c3      	beq.n	801286c <dir_find+0x1bc>
 80128e4:	f04f 0aff 	mov.w	sl, #255	; 0xff
 80128e8:	e724      	b.n	8012734 <dir_find+0x84>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80128ea:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 80128ee:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80128f2:	1aea      	subs	r2, r5, r3
 80128f4:	f8d8 301c 	ldr.w	r3, [r8, #28]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	f4bf aef6 	bcs.w	80126ea <dir_find+0x3a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80128fe:	f898 7002 	ldrb.w	r7, [r8, #2]
 8012902:	2f01      	cmp	r7, #1
 8012904:	f67f aef1 	bls.w	80126ea <dir_find+0x3a>
 8012908:	468b      	mov	fp, r1
 801290a:	e001      	b.n	8012910 <dir_find+0x260>
					wsect += fs->fsize;
 801290c:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8012910:	441d      	add	r5, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012912:	3f01      	subs	r7, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8012914:	2301      	movs	r3, #1
 8012916:	4659      	mov	r1, fp
 8012918:	462a      	mov	r2, r5
 801291a:	f898 0001 	ldrb.w	r0, [r8, #1]
 801291e:	f7fe fe1d 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012922:	2f01      	cmp	r7, #1
 8012924:	d1f2      	bne.n	801290c <dir_find+0x25c>
 8012926:	4659      	mov	r1, fp
 8012928:	e6df      	b.n	80126ea <dir_find+0x3a>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801292a:	7830      	ldrb	r0, [r6, #0]
 801292c:	7872      	ldrb	r2, [r6, #1]
 801292e:	01c1      	lsls	r1, r0, #7
 8012930:	78b3      	ldrb	r3, [r6, #2]
 8012932:	f896 b003 	ldrb.w	fp, [r6, #3]
 8012936:	ea41 0150 	orr.w	r1, r1, r0, lsr #1
 801293a:	7937      	ldrb	r7, [r6, #4]
 801293c:	f896 e005 	ldrb.w	lr, [r6, #5]
 8012940:	4411      	add	r1, r2
 8012942:	f896 c006 	ldrb.w	ip, [r6, #6]
 8012946:	7a32      	ldrb	r2, [r6, #8]
 8012948:	f3c1 0046 	ubfx	r0, r1, #1, #7
 801294c:	7a75      	ldrb	r5, [r6, #9]
 801294e:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8012952:	fa53 f180 	uxtab	r1, r3, r0
 8012956:	79f3      	ldrb	r3, [r6, #7]
 8012958:	f3c1 0046 	ubfx	r0, r1, #1, #7
 801295c:	ea40 10c1 	orr.w	r0, r0, r1, lsl #7
 8012960:	7ab1      	ldrb	r1, [r6, #10]
 8012962:	fa5b fb80 	uxtab	fp, fp, r0
 8012966:	f3cb 0046 	ubfx	r0, fp, #1, #7
 801296a:	ea40 10cb 	orr.w	r0, r0, fp, lsl #7
 801296e:	fa57 f780 	uxtab	r7, r7, r0
 8012972:	f3c7 0046 	ubfx	r0, r7, #1, #7
 8012976:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 801297a:	fa5e f080 	uxtab	r0, lr, r0
 801297e:	f3c0 0746 	ubfx	r7, r0, #1, #7
 8012982:	ea47 10c0 	orr.w	r0, r7, r0, lsl #7
 8012986:	fa5c f780 	uxtab	r7, ip, r0
 801298a:	f3c7 0046 	ubfx	r0, r7, #1, #7
 801298e:	ea40 10c7 	orr.w	r0, r0, r7, lsl #7
 8012992:	fa53 f080 	uxtab	r0, r3, r0
 8012996:	f3c0 0346 	ubfx	r3, r0, #1, #7
 801299a:	ea43 13c0 	orr.w	r3, r3, r0, lsl #7
 801299e:	fa52 f383 	uxtab	r3, r2, r3
 80129a2:	f3c3 0246 	ubfx	r2, r3, #1, #7
 80129a6:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 80129aa:	fa55 f283 	uxtab	r2, r5, r3
 80129ae:	f3c2 0346 	ubfx	r3, r2, #1, #7
 80129b2:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 80129b6:	fa51 f383 	uxtab	r3, r1, r3
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80129ba:	b2db      	uxtb	r3, r3
 80129bc:	4599      	cmp	r9, r3
 80129be:	f47f aede 	bne.w	801277e <dir_find+0xce>
 80129c2:	4657      	mov	r7, sl
 80129c4:	e69d      	b.n	8012702 <dir_find+0x52>
				dp->sect = 0; return FR_NO_FILE;
 80129c6:	2300      	movs	r3, #0
 80129c8:	2704      	movs	r7, #4
 80129ca:	61e3      	str	r3, [r4, #28]
	} while (res == FR_OK);
 80129cc:	e699      	b.n	8012702 <dir_find+0x52>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80129ce:	2702      	movs	r7, #2
 80129d0:	e697      	b.n	8012702 <dir_find+0x52>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80129d2:	461e      	mov	r6, r3
 80129d4:	e73b      	b.n	801284e <dir_find+0x19e>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80129d6:	7833      	ldrb	r3, [r6, #0]
 80129d8:	f8dd 8000 	ldr.w	r8, [sp]
 80129dc:	065a      	lsls	r2, r3, #25
 80129de:	e9dd 4501 	ldrd	r4, r5, [sp, #4]
 80129e2:	d500      	bpl.n	80129e6 <dir_find+0x336>
 80129e4:	b919      	cbnz	r1, 80129ee <dir_find+0x33e>
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80129e6:	3d01      	subs	r5, #1
 80129e8:	fa5f fa85 	uxtb.w	sl, r5
 80129ec:	e6a2      	b.n	8012734 <dir_find+0x84>
	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80129ee:	9b03      	ldr	r3, [sp, #12]
 80129f0:	f833 3017 	ldrh.w	r3, [r3, r7, lsl #1]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d0f6      	beq.n	80129e6 <dir_find+0x336>
 80129f8:	e774      	b.n	80128e4 <dir_find+0x234>
 80129fa:	bf00      	nop
 80129fc:	0801fb34 	.word	0x0801fb34

08012a00 <follow_path>:
{
 8012a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a04:	780b      	ldrb	r3, [r1, #0]
{
 8012a06:	b083      	sub	sp, #12
 8012a08:	4688      	mov	r8, r1
 8012a0a:	4607      	mov	r7, r0
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a0c:	2b2f      	cmp	r3, #47	; 0x2f
	FATFS *fs = obj->fs;
 8012a0e:	f8d0 b000 	ldr.w	fp, [r0]
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8012a12:	d103      	bne.n	8012a1c <follow_path+0x1c>
 8012a14:	f818 3f01 	ldrb.w	r3, [r8, #1]!
 8012a18:	2b2f      	cmp	r3, #47	; 0x2f
 8012a1a:	d0fb      	beq.n	8012a14 <follow_path+0x14>
 8012a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8012a1e:	d0f9      	beq.n	8012a14 <follow_path+0x14>
		obj->sclust = 0;					/* Start from root directory */
 8012a20:	2100      	movs	r1, #0
 8012a22:	60b9      	str	r1, [r7, #8]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8012a24:	f898 3000 	ldrb.w	r3, [r8]
 8012a28:	2b1f      	cmp	r3, #31
 8012a2a:	f240 8148 	bls.w	8012cbe <follow_path+0x2be>
 8012a2e:	465a      	mov	r2, fp
		if (w < ' ') break;				/* Break if end of the path name */
 8012a30:	2b1f      	cmp	r3, #31
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012a32:	68d5      	ldr	r5, [r2, #12]
		w = p[si++];					/* Get a character */
 8012a34:	b298      	uxth	r0, r3
		if (w < ' ') break;				/* Break if end of the path name */
 8012a36:	d929      	bls.n	8012a8c <follow_path+0x8c>
 8012a38:	f1a5 0902 	sub.w	r9, r5, #2
 8012a3c:	4646      	mov	r6, r8
		w = p[si++];					/* Get a character */
 8012a3e:	2401      	movs	r4, #1
 8012a40:	e008      	b.n	8012a54 <follow_path+0x54>
		lfn[di++] = w;					/* Store the Unicode character */
 8012a42:	f829 0f02 	strh.w	r0, [r9, #2]!
		w = p[si++];					/* Get a character */
 8012a46:	1c63      	adds	r3, r4, #1
 8012a48:	f816 0f01 	ldrb.w	r0, [r6, #1]!
		if (w < ' ') break;				/* Break if end of the path name */
 8012a4c:	281f      	cmp	r0, #31
 8012a4e:	f240 80f7 	bls.w	8012c40 <follow_path+0x240>
		w = p[si++];					/* Get a character */
 8012a52:	461c      	mov	r4, r3
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8012a54:	282f      	cmp	r0, #47	; 0x2f
 8012a56:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8012a5a:	d01d      	beq.n	8012a98 <follow_path+0x98>
 8012a5c:	285c      	cmp	r0, #92	; 0x5c
 8012a5e:	d01b      	beq.n	8012a98 <follow_path+0x98>
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8012a60:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
 8012a64:	d00e      	beq.n	8012a84 <follow_path+0x84>
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8012a66:	2101      	movs	r1, #1
 8012a68:	f001 fdce 	bl	8014608 <ff_convert>
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8012a6c:	b150      	cbz	r0, 8012a84 <follow_path+0x84>
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8012a6e:	287f      	cmp	r0, #127	; 0x7f
 8012a70:	d8e7      	bhi.n	8012a42 <follow_path+0x42>
	while (*str && *str != chr) str++;
 8012a72:	2322      	movs	r3, #34	; 0x22
 8012a74:	4aa5      	ldr	r2, [pc, #660]	; (8012d0c <follow_path+0x30c>)
 8012a76:	e003      	b.n	8012a80 <follow_path+0x80>
 8012a78:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d0e0      	beq.n	8012a42 <follow_path+0x42>
 8012a80:	4298      	cmp	r0, r3
 8012a82:	d1f9      	bne.n	8012a78 <follow_path+0x78>
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012a84:	2006      	movs	r0, #6
}
 8012a86:	b003      	add	sp, #12
 8012a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	lfn[di] = 0;						/* LFN is created */
 8012a8c:	2300      	movs	r3, #0
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8012a8e:	2006      	movs	r0, #6
	lfn[di] = 0;						/* LFN is created */
 8012a90:	802b      	strh	r3, [r5, #0]
}
 8012a92:	b003      	add	sp, #12
 8012a94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012a98:	f818 3004 	ldrb.w	r3, [r8, r4]
 8012a9c:	eb08 0204 	add.w	r2, r8, r4
 8012aa0:	2b5c      	cmp	r3, #92	; 0x5c
 8012aa2:	d002      	beq.n	8012aaa <follow_path+0xaa>
 8012aa4:	2b2f      	cmp	r3, #47	; 0x2f
 8012aa6:	f040 811f 	bne.w	8012ce8 <follow_path+0x2e8>
 8012aaa:	1c63      	adds	r3, r4, #1
 8012aac:	4443      	add	r3, r8
 8012aae:	4698      	mov	r8, r3
 8012ab0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012ab4:	2a2f      	cmp	r2, #47	; 0x2f
 8012ab6:	d0fa      	beq.n	8012aae <follow_path+0xae>
 8012ab8:	2a5c      	cmp	r2, #92	; 0x5c
 8012aba:	d0f8      	beq.n	8012aae <follow_path+0xae>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012abc:	f1ba 0f00 	cmp.w	sl, #0
 8012ac0:	d0e4      	beq.n	8012a8c <follow_path+0x8c>
 8012ac2:	2603      	movs	r6, #3
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012ac4:	2400      	movs	r4, #0
 8012ac6:	eb05 024a 	add.w	r2, r5, sl, lsl #1
 8012aca:	e002      	b.n	8012ad2 <follow_path+0xd2>
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8012acc:	f1ba 0a01 	subs.w	sl, sl, #1
 8012ad0:	d0dc      	beq.n	8012a8c <follow_path+0x8c>
		w = lfn[di - 1];
 8012ad2:	f832 3d02 	ldrh.w	r3, [r2, #-2]!
		if (w != ' ' && w != '.') break;
 8012ad6:	2b20      	cmp	r3, #32
 8012ad8:	d0f8      	beq.n	8012acc <follow_path+0xcc>
 8012ada:	2b2e      	cmp	r3, #46	; 0x2e
 8012adc:	d0f6      	beq.n	8012acc <follow_path+0xcc>
		*d++ = (BYTE)val;
 8012ade:	2320      	movs	r3, #32
 8012ae0:	f04f 3220 	mov.w	r2, #538976288	; 0x20202020
	lfn[di] = 0;						/* LFN is created */
 8012ae4:	2100      	movs	r1, #0
 8012ae6:	f825 101a 	strh.w	r1, [r5, sl, lsl #1]
		*d++ = (BYTE)val;
 8012aea:	627a      	str	r2, [r7, #36]	; 0x24
 8012aec:	62ba      	str	r2, [r7, #40]	; 0x28
 8012aee:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8012af2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8012af6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012afa:	8828      	ldrh	r0, [r5, #0]
 8012afc:	282e      	cmp	r0, #46	; 0x2e
 8012afe:	d002      	beq.n	8012b06 <follow_path+0x106>
 8012b00:	4298      	cmp	r0, r3
 8012b02:	f040 80e5 	bne.w	8012cd0 <follow_path+0x2d0>
 8012b06:	462a      	mov	r2, r5
 8012b08:	2300      	movs	r3, #0
 8012b0a:	f832 0f02 	ldrh.w	r0, [r2, #2]!
 8012b0e:	461c      	mov	r4, r3
 8012b10:	3301      	adds	r3, #1
 8012b12:	2820      	cmp	r0, #32
 8012b14:	d0f9      	beq.n	8012b0a <follow_path+0x10a>
 8012b16:	282e      	cmp	r0, #46	; 0x2e
 8012b18:	d0f7      	beq.n	8012b0a <follow_path+0x10a>
		w = lfn[si++];					/* Get an LFN character */
 8012b1a:	3402      	adds	r4, #2
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8012b1c:	eb05 034a 	add.w	r3, r5, sl, lsl #1
 8012b20:	f833 2d02 	ldrh.w	r2, [r3, #-2]!
 8012b24:	2a2e      	cmp	r2, #46	; 0x2e
 8012b26:	d002      	beq.n	8012b2e <follow_path+0x12e>
 8012b28:	f1ba 0a01 	subs.w	sl, sl, #1
 8012b2c:	d1f8      	bne.n	8012b20 <follow_path+0x120>
		if (!w) break;					/* Break on end of the LFN */
 8012b2e:	b3b0      	cbz	r0, 8012b9e <follow_path+0x19e>
 8012b30:	2208      	movs	r2, #8
 8012b32:	4641      	mov	r1, r8
 8012b34:	2300      	movs	r3, #0
 8012b36:	46b8      	mov	r8, r7
 8012b38:	462f      	mov	r7, r5
 8012b3a:	4615      	mov	r5, r2
 8012b3c:	4699      	mov	r9, r3
 8012b3e:	460a      	mov	r2, r1
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8012b40:	2820      	cmp	r0, #32
 8012b42:	d003      	beq.n	8012b4c <follow_path+0x14c>
 8012b44:	282e      	cmp	r0, #46	; 0x2e
 8012b46:	d14d      	bne.n	8012be4 <follow_path+0x1e4>
 8012b48:	45a2      	cmp	sl, r4
 8012b4a:	d04b      	beq.n	8012be4 <follow_path+0x1e4>
			cf |= NS_LOSS | NS_LFN; continue;
 8012b4c:	f046 0603 	orr.w	r6, r6, #3
 8012b50:	b2f6      	uxtb	r6, r6
		w = lfn[si++];					/* Get an LFN character */
 8012b52:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 8012b56:	3401      	adds	r4, #1
		if (!w) break;					/* Break on end of the LFN */
 8012b58:	2800      	cmp	r0, #0
 8012b5a:	d1f1      	bne.n	8012b40 <follow_path+0x140>
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012b5c:	4647      	mov	r7, r8
 8012b5e:	4690      	mov	r8, r2
 8012b60:	462a      	mov	r2, r5
 8012b62:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 8012b66:	29e5      	cmp	r1, #229	; 0xe5
 8012b68:	d102      	bne.n	8012b70 <follow_path+0x170>
 8012b6a:	2105      	movs	r1, #5
 8012b6c:	f887 1024 	strb.w	r1, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8012b70:	2a08      	cmp	r2, #8
 8012b72:	f000 8093 	beq.w	8012c9c <follow_path+0x29c>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012b76:	f003 020c 	and.w	r2, r3, #12
 8012b7a:	2a0c      	cmp	r2, #12
 8012b7c:	d065      	beq.n	8012c4a <follow_path+0x24a>
 8012b7e:	f003 0303 	and.w	r3, r3, #3
 8012b82:	2b03      	cmp	r3, #3
 8012b84:	d061      	beq.n	8012c4a <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012b86:	07b1      	lsls	r1, r6, #30
 8012b88:	d409      	bmi.n	8012b9e <follow_path+0x19e>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8012b8a:	2b01      	cmp	r3, #1
 8012b8c:	d102      	bne.n	8012b94 <follow_path+0x194>
 8012b8e:	f046 0610 	orr.w	r6, r6, #16
 8012b92:	b2f6      	uxtb	r6, r6
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8012b94:	2a04      	cmp	r2, #4
 8012b96:	d102      	bne.n	8012b9e <follow_path+0x19e>
 8012b98:	f046 0608 	orr.w	r6, r6, #8
 8012b9c:	b2f6      	uxtb	r6, r6
			res = dir_find(dp);				/* Find an object with the segment name */
 8012b9e:	4638      	mov	r0, r7
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012ba0:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8012ba4:	f7ff fd84 	bl	80126b0 <dir_find>
			ns = dp->fn[NSFLAG];
 8012ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8012bac:	2800      	cmp	r0, #0
 8012bae:	d158      	bne.n	8012c62 <follow_path+0x262>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8012bb0:	075a      	lsls	r2, r3, #29
 8012bb2:	f53f af68 	bmi.w	8012a86 <follow_path+0x86>
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8012bb6:	79bb      	ldrb	r3, [r7, #6]
 8012bb8:	06db      	lsls	r3, r3, #27
 8012bba:	f140 8097 	bpl.w	8012cec <follow_path+0x2ec>
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bbe:	697a      	ldr	r2, [r7, #20]
 8012bc0:	f10b 0334 	add.w	r3, fp, #52	; 0x34
	if (fs->fs_type == FS_FAT32) {
 8012bc4:	f89b 1000 	ldrb.w	r1, [fp]
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
	if (fs->fs_type == FS_FAT32) {
 8012bcc:	2903      	cmp	r1, #3
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bce:	4413      	add	r3, r2
	cl = ld_word(dir + DIR_FstClusLO);
 8012bd0:	8b5a      	ldrh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8012bd2:	d102      	bne.n	8012bda <follow_path+0x1da>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012bd4:	8a9b      	ldrh	r3, [r3, #20]
 8012bd6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8012bda:	60ba      	str	r2, [r7, #8]
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8012bdc:	683a      	ldr	r2, [r7, #0]
		w = p[si++];					/* Get a character */
 8012bde:	f898 3000 	ldrb.w	r3, [r8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8012be2:	e725      	b.n	8012a30 <follow_path+0x30>
		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8012be4:	454d      	cmp	r5, r9
 8012be6:	d91c      	bls.n	8012c22 <follow_path+0x222>
 8012be8:	ebaa 0104 	sub.w	r1, sl, r4
 8012bec:	fab1 f181 	clz	r1, r1
 8012bf0:	0949      	lsrs	r1, r1, #5
 8012bf2:	b9b1      	cbnz	r1, 8012c22 <follow_path+0x222>
		if (w >= 0x80) {				/* Non ASCII character */
 8012bf4:	287f      	cmp	r0, #127	; 0x7f
 8012bf6:	d83c      	bhi.n	8012c72 <follow_path+0x272>
	while (*str && *str != chr) str++;
 8012bf8:	212b      	movs	r1, #43	; 0x2b
 8012bfa:	f8df c118 	ldr.w	ip, [pc, #280]	; 8012d14 <follow_path+0x314>
 8012bfe:	e003      	b.n	8012c08 <follow_path+0x208>
 8012c00:	f81c 1f01 	ldrb.w	r1, [ip, #1]!
 8012c04:	2900      	cmp	r1, #0
 8012c06:	d052      	beq.n	8012cae <follow_path+0x2ae>
 8012c08:	4281      	cmp	r1, r0
 8012c0a:	d1f9      	bne.n	8012c00 <follow_path+0x200>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8012c0c:	f046 0603 	orr.w	r6, r6, #3
 8012c10:	205f      	movs	r0, #95	; 0x5f
 8012c12:	b2f6      	uxtb	r6, r6
		dp->fn[i++] = (BYTE)w;
 8012c14:	eb08 0109 	add.w	r1, r8, r9
 8012c18:	f109 0901 	add.w	r9, r9, #1
 8012c1c:	f881 0024 	strb.w	r0, [r1, #36]	; 0x24
 8012c20:	e797      	b.n	8012b52 <follow_path+0x152>
			if (ni == 11) {				/* Long extension */
 8012c22:	2d0b      	cmp	r5, #11
 8012c24:	d064      	beq.n	8012cf0 <follow_path+0x2f0>
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8012c26:	45a2      	cmp	sl, r4
 8012c28:	d003      	beq.n	8012c32 <follow_path+0x232>
 8012c2a:	f046 0603 	orr.w	r6, r6, #3
 8012c2e:	b2f6      	uxtb	r6, r6
			if (si > di) break;			/* No extension */
 8012c30:	d394      	bcc.n	8012b5c <follow_path+0x15c>
			b <<= 2; continue;
 8012c32:	009b      	lsls	r3, r3, #2
 8012c34:	4654      	mov	r4, sl
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8012c36:	250b      	movs	r5, #11
 8012c38:	f04f 0908 	mov.w	r9, #8
			b <<= 2; continue;
 8012c3c:	b2db      	uxtb	r3, r3
 8012c3e:	e788      	b.n	8012b52 <follow_path+0x152>
	*path = &p[si];						/* Return pointer to the next segment */
 8012c40:	46a2      	mov	sl, r4
 8012c42:	4498      	add	r8, r3
 8012c44:	2607      	movs	r6, #7
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8012c46:	2404      	movs	r4, #4
 8012c48:	e73d      	b.n	8012ac6 <follow_path+0xc6>
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012c4a:	f046 0602 	orr.w	r6, r6, #2
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c4e:	4638      	mov	r0, r7
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012c50:	b2f6      	uxtb	r6, r6
	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8012c52:	f887 602f 	strb.w	r6, [r7, #47]	; 0x2f
			res = dir_find(dp);				/* Find an object with the segment name */
 8012c56:	f7ff fd2b 	bl	80126b0 <dir_find>
			ns = dp->fn[NSFLAG];
 8012c5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) {				/* Failed to find the object */
 8012c5e:	2800      	cmp	r0, #0
 8012c60:	d0a6      	beq.n	8012bb0 <follow_path+0x1b0>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8012c62:	2804      	cmp	r0, #4
 8012c64:	f47f af0f 	bne.w	8012a86 <follow_path+0x86>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012c68:	f013 0f04 	tst.w	r3, #4
 8012c6c:	bf08      	it	eq
 8012c6e:	2005      	moveq	r0, #5
 8012c70:	e709      	b.n	8012a86 <follow_path+0x86>
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8012c72:	e9cd 3200 	strd	r3, r2, [sp]
 8012c76:	f001 fcc7 	bl	8014608 <ff_convert>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c7a:	e9dd 3200 	ldrd	r3, r2, [sp]
 8012c7e:	b918      	cbnz	r0, 8012c88 <follow_path+0x288>
			cf |= NS_LFN;				/* Force create LFN entry */
 8012c80:	f046 0602 	orr.w	r6, r6, #2
 8012c84:	b2f6      	uxtb	r6, r6
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012c86:	e7c1      	b.n	8012c0c <follow_path+0x20c>
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c88:	4921      	ldr	r1, [pc, #132]	; (8012d10 <follow_path+0x310>)
			cf |= NS_LFN;				/* Force create LFN entry */
 8012c8a:	f046 0602 	orr.w	r6, r6, #2
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c8e:	4401      	add	r1, r0
			cf |= NS_LFN;				/* Force create LFN entry */
 8012c90:	b2f6      	uxtb	r6, r6
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8012c92:	f811 0c80 	ldrb.w	r0, [r1, #-128]
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8012c96:	2800      	cmp	r0, #0
 8012c98:	d0b8      	beq.n	8012c0c <follow_path+0x20c>
 8012c9a:	e7ad      	b.n	8012bf8 <follow_path+0x1f8>
	if (ni == 8) b <<= 2;
 8012c9c:	009b      	lsls	r3, r3, #2
 8012c9e:	f003 020c 	and.w	r2, r3, #12
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8012ca2:	2a0c      	cmp	r2, #12
 8012ca4:	d0d1      	beq.n	8012c4a <follow_path+0x24a>
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8012ca6:	07b0      	lsls	r0, r6, #30
 8012ca8:	f57f af74 	bpl.w	8012b94 <follow_path+0x194>
 8012cac:	e777      	b.n	8012b9e <follow_path+0x19e>
				if (IsUpper(w)) {		/* ASCII large capital */
 8012cae:	f1a0 0141 	sub.w	r1, r0, #65	; 0x41
 8012cb2:	2919      	cmp	r1, #25
 8012cb4:	d80f      	bhi.n	8012cd6 <follow_path+0x2d6>
					b |= 2;
 8012cb6:	f043 0302 	orr.w	r3, r3, #2
		dp->fn[i++] = (BYTE)w;
 8012cba:	b2c0      	uxtb	r0, r0
 8012cbc:	e7aa      	b.n	8012c14 <follow_path+0x214>
		dp->fn[NSFLAG] = NS_NONAME;
 8012cbe:	2380      	movs	r3, #128	; 0x80
		res = dir_sdi(dp, 0);
 8012cc0:	4638      	mov	r0, r7
		dp->fn[NSFLAG] = NS_NONAME;
 8012cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
}
 8012cc6:	b003      	add	sp, #12
 8012cc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		res = dir_sdi(dp, 0);
 8012ccc:	f7ff bc36 	b.w	801253c <dir_sdi>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8012cd0:	4626      	mov	r6, r4
 8012cd2:	2401      	movs	r4, #1
 8012cd4:	e722      	b.n	8012b1c <follow_path+0x11c>
					if (IsLower(w)) {	/* ASCII small capital */
 8012cd6:	f1a0 0161 	sub.w	r1, r0, #97	; 0x61
 8012cda:	2919      	cmp	r1, #25
						b |= 1; w -= 0x20;
 8012cdc:	bf9c      	itt	ls
 8012cde:	3820      	subls	r0, #32
 8012ce0:	f043 0301 	orrls.w	r3, r3, #1
		dp->fn[i++] = (BYTE)w;
 8012ce4:	b2c0      	uxtb	r0, r0
 8012ce6:	e795      	b.n	8012c14 <follow_path+0x214>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8012ce8:	4690      	mov	r8, r2
 8012cea:	e6e7      	b.n	8012abc <follow_path+0xbc>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8012cec:	2005      	movs	r0, #5
 8012cee:	e6ca      	b.n	8012a86 <follow_path+0x86>
				cf |= NS_LOSS | NS_LFN; break;
 8012cf0:	4647      	mov	r7, r8
 8012cf2:	4690      	mov	r8, r2
 8012cf4:	f046 0603 	orr.w	r6, r6, #3
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012cf8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
				cf |= NS_LOSS | NS_LFN; break;
 8012cfc:	b2f6      	uxtb	r6, r6
	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8012cfe:	2ae5      	cmp	r2, #229	; 0xe5
 8012d00:	f47f af39 	bne.w	8012b76 <follow_path+0x176>
 8012d04:	2205      	movs	r2, #5
 8012d06:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
	if (ni == 8) b <<= 2;
 8012d0a:	e734      	b.n	8012b76 <follow_path+0x176>
 8012d0c:	0801faa0 	.word	0x0801faa0
 8012d10:	0801fab4 	.word	0x0801fab4
 8012d14:	0801faac 	.word	0x0801faac

08012d18 <remove_chain>:
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d18:	2901      	cmp	r1, #1
{
 8012d1a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012d1e:	460c      	mov	r4, r1
	FATFS *fs = obj->fs;
 8012d20:	6805      	ldr	r5, [r0, #0]
	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012d22:	d90f      	bls.n	8012d44 <remove_chain+0x2c>
 8012d24:	69ab      	ldr	r3, [r5, #24]
 8012d26:	428b      	cmp	r3, r1
 8012d28:	d90c      	bls.n	8012d44 <remove_chain+0x2c>
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012d2a:	4606      	mov	r6, r0
 8012d2c:	4611      	mov	r1, r2
 8012d2e:	b962      	cbnz	r2, 8012d4a <remove_chain+0x32>
 8012d30:	462f      	mov	r7, r5
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012d32:	429c      	cmp	r4, r3
 8012d34:	d206      	bcs.n	8012d44 <remove_chain+0x2c>
		switch (fs->fs_type) {
 8012d36:	783b      	ldrb	r3, [r7, #0]
 8012d38:	2b02      	cmp	r3, #2
 8012d3a:	d072      	beq.n	8012e22 <remove_chain+0x10a>
 8012d3c:	2b03      	cmp	r3, #3
 8012d3e:	d05d      	beq.n	8012dfc <remove_chain+0xe4>
 8012d40:	2b01      	cmp	r3, #1
 8012d42:	d010      	beq.n	8012d66 <remove_chain+0x4e>
 8012d44:	2002      	movs	r0, #2
}
 8012d46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012d4a:	4293      	cmp	r3, r2
 8012d4c:	d9fa      	bls.n	8012d44 <remove_chain+0x2c>
 8012d4e:	2a01      	cmp	r2, #1
 8012d50:	d0f8      	beq.n	8012d44 <remove_chain+0x2c>
 8012d52:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012d56:	4628      	mov	r0, r5
 8012d58:	f7fe ff52 	bl	8011c00 <put_fat.part.0>
		if (res != FR_OK) return res;
 8012d5c:	2800      	cmp	r0, #0
 8012d5e:	d1f2      	bne.n	8012d46 <remove_chain+0x2e>
 8012d60:	6837      	ldr	r7, [r6, #0]
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012d62:	69bb      	ldr	r3, [r7, #24]
 8012d64:	e7e5      	b.n	8012d32 <remove_chain+0x1a>
			bc = (UINT)clst; bc += bc / 2;
 8012d66:	eb04 0854 	add.w	r8, r4, r4, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d6e:	eb03 2158 	add.w	r1, r3, r8, lsr #9
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d72:	4291      	cmp	r1, r2
 8012d74:	d006      	beq.n	8012d84 <remove_chain+0x6c>
 8012d76:	4638      	mov	r0, r7
 8012d78:	f7fe fd90 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d7c:	2800      	cmp	r0, #0
 8012d7e:	d161      	bne.n	8012e44 <remove_chain+0x12c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
			wc = fs->win[bc++ % SS(fs)];
 8012d84:	f108 0901 	add.w	r9, r8, #1
 8012d88:	f3c8 0808 	ubfx	r8, r8, #0, #9
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012d8c:	eb03 2159 	add.w	r1, r3, r9, lsr #9
			wc = fs->win[bc++ % SS(fs)];
 8012d90:	44b8      	add	r8, r7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d92:	4291      	cmp	r1, r2
			wc = fs->win[bc++ % SS(fs)];
 8012d94:	f898 8034 	ldrb.w	r8, [r8, #52]	; 0x34
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012d98:	d004      	beq.n	8012da4 <remove_chain+0x8c>
 8012d9a:	4638      	mov	r0, r7
 8012d9c:	f7fe fd7e 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d14f      	bne.n	8012e44 <remove_chain+0x12c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8012da4:	f3c9 0908 	ubfx	r9, r9, #0, #9
 8012da8:	444f      	add	r7, r9
 8012daa:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8012dae:	ea48 2803 	orr.w	r8, r8, r3, lsl #8
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012db2:	07e3      	lsls	r3, r4, #31
 8012db4:	d548      	bpl.n	8012e48 <remove_chain+0x130>
 8012db6:	ea4f 1818 	mov.w	r8, r8, lsr #4
		if (nxt == 0) break;				/* Empty cluster? */
 8012dba:	f1b8 0f00 	cmp.w	r8, #0
 8012dbe:	d046      	beq.n	8012e4e <remove_chain+0x136>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012dc0:	f1b8 0f01 	cmp.w	r8, #1
 8012dc4:	d0be      	beq.n	8012d44 <remove_chain+0x2c>
	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8012dc6:	69ab      	ldr	r3, [r5, #24]
 8012dc8:	42a3      	cmp	r3, r4
 8012dca:	d9bb      	bls.n	8012d44 <remove_chain+0x2c>
 8012dcc:	2200      	movs	r2, #0
 8012dce:	4621      	mov	r1, r4
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	f7fe ff15 	bl	8011c00 <put_fat.part.0>
			if (res != FR_OK) return res;
 8012dd6:	2800      	cmp	r0, #0
 8012dd8:	d1b5      	bne.n	8012d46 <remove_chain+0x2e>
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012dda:	e9d5 3205 	ldrd	r3, r2, [r5, #20]
 8012dde:	1e91      	subs	r1, r2, #2
 8012de0:	428b      	cmp	r3, r1
 8012de2:	d205      	bcs.n	8012df0 <remove_chain+0xd8>
			fs->free_clst++;
 8012de4:	3301      	adds	r3, #1
 8012de6:	616b      	str	r3, [r5, #20]
			fs->fsi_flag |= 1;
 8012de8:	792b      	ldrb	r3, [r5, #4]
 8012dea:	f043 0301 	orr.w	r3, r3, #1
 8012dee:	712b      	strb	r3, [r5, #4]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8012df0:	4542      	cmp	r2, r8
 8012df2:	d92c      	bls.n	8012e4e <remove_chain+0x136>
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8012df4:	6837      	ldr	r7, [r6, #0]
 8012df6:	4644      	mov	r4, r8
 8012df8:	69bb      	ldr	r3, [r7, #24]
 8012dfa:	e79a      	b.n	8012d32 <remove_chain+0x1a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012dfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e00:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e04:	4299      	cmp	r1, r3
 8012e06:	d003      	beq.n	8012e10 <remove_chain+0xf8>
 8012e08:	4638      	mov	r0, r7
 8012e0a:	f7fe fd47 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8012e0e:	b9c8      	cbnz	r0, 8012e44 <remove_chain+0x12c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012e10:	00a3      	lsls	r3, r4, #2
 8012e12:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
	rv = rv << 8 | ptr[0];
 8012e16:	441f      	add	r7, r3
 8012e18:	f8d7 8034 	ldr.w	r8, [r7, #52]	; 0x34
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8012e1c:	f028 4870 	bic.w	r8, r8, #4026531840	; 0xf0000000
			break;
 8012e20:	e7cb      	b.n	8012dba <remove_chain+0xa2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012e26:	eb01 2114 	add.w	r1, r1, r4, lsr #8
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e2a:	4299      	cmp	r1, r3
 8012e2c:	d003      	beq.n	8012e36 <remove_chain+0x11e>
 8012e2e:	4638      	mov	r0, r7
 8012e30:	f7fe fd34 	bl	801189c <move_window.part.0>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012e34:	b930      	cbnz	r0, 8012e44 <remove_chain+0x12c>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012e36:	0063      	lsls	r3, r4, #1
 8012e38:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8012e3c:	441f      	add	r7, r3
 8012e3e:	f8b7 8034 	ldrh.w	r8, [r7, #52]	; 0x34
			break;
 8012e42:	e7ba      	b.n	8012dba <remove_chain+0xa2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012e44:	2001      	movs	r0, #1
 8012e46:	e77e      	b.n	8012d46 <remove_chain+0x2e>
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012e48:	f3c8 080b 	ubfx	r8, r8, #0, #12
 8012e4c:	e7b5      	b.n	8012dba <remove_chain+0xa2>
	return FR_OK;
 8012e4e:	2000      	movs	r0, #0
 8012e50:	e779      	b.n	8012d46 <remove_chain+0x2e>
 8012e52:	bf00      	nop

08012e54 <dir_alloc>:
{
 8012e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e58:	460b      	mov	r3, r1
	res = dir_sdi(dp, 0);
 8012e5a:	2100      	movs	r1, #0
{
 8012e5c:	4681      	mov	r9, r0
 8012e5e:	ed2d 8b02 	vpush	{d8}
 8012e62:	b089      	sub	sp, #36	; 0x24
	FATFS *fs = dp->obj.fs;
 8012e64:	f8d0 8000 	ldr.w	r8, [r0]
{
 8012e68:	9303      	str	r3, [sp, #12]
	res = dir_sdi(dp, 0);
 8012e6a:	f7ff fb67 	bl	801253c <dir_sdi>
	if (res == FR_OK) {
 8012e6e:	9002      	str	r0, [sp, #8]
 8012e70:	b150      	cbz	r0, 8012e88 <dir_alloc+0x34>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012e72:	9b02      	ldr	r3, [sp, #8]
 8012e74:	2b04      	cmp	r3, #4
 8012e76:	d101      	bne.n	8012e7c <dir_alloc+0x28>
 8012e78:	2307      	movs	r3, #7
 8012e7a:	9302      	str	r3, [sp, #8]
}
 8012e7c:	9802      	ldr	r0, [sp, #8]
 8012e7e:	b009      	add	sp, #36	; 0x24
 8012e80:	ecbd 8b02 	vpop	{d8}
 8012e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			res = move_window(fs, dp->sect);
 8012e88:	f8d9 b01c 	ldr.w	fp, [r9, #28]
 8012e8c:	4607      	mov	r7, r0
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012e8e:	f108 0a34 	add.w	sl, r8, #52	; 0x34
 8012e92:	465d      	mov	r5, fp
	if (sector != fs->winsect) {	/* Window offset changed? */
 8012e94:	f8d8 4030 	ldr.w	r4, [r8, #48]	; 0x30
 8012e98:	42ac      	cmp	r4, r5
 8012e9a:	d019      	beq.n	8012ed0 <dir_alloc+0x7c>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012e9c:	f898 3003 	ldrb.w	r3, [r8, #3]
 8012ea0:	2b00      	cmp	r3, #0
 8012ea2:	d148      	bne.n	8012f36 <dir_alloc+0xe2>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8012ea4:	2301      	movs	r3, #1
 8012ea6:	462a      	mov	r2, r5
 8012ea8:	4651      	mov	r1, sl
 8012eaa:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012eae:	f7fe fb47 	bl	8011540 <disk_read>
 8012eb2:	b158      	cbz	r0, 8012ecc <dir_alloc+0x78>
				res = FR_DISK_ERR;
 8012eb4:	2201      	movs	r2, #1
			fs->winsect = sector;
 8012eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				res = FR_DISK_ERR;
 8012eba:	9202      	str	r2, [sp, #8]
}
 8012ebc:	9802      	ldr	r0, [sp, #8]
			fs->winsect = sector;
 8012ebe:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
}
 8012ec2:	b009      	add	sp, #36	; 0x24
 8012ec4:	ecbd 8b02 	vpop	{d8}
 8012ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			fs->winsect = sector;
 8012ecc:	f8c8 5030 	str.w	r5, [r8, #48]	; 0x30
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012ed0:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012ed4:	781b      	ldrb	r3, [r3, #0]
 8012ed6:	2be5      	cmp	r3, #229	; 0xe5
 8012ed8:	d028      	beq.n	8012f2c <dir_alloc+0xd8>
 8012eda:	fab3 f283 	clz	r2, r3
 8012ede:	0952      	lsrs	r2, r2, #5
 8012ee0:	b323      	cbz	r3, 8012f2c <dir_alloc+0xd8>
				n = 0;					/* Not a blank entry. Restart to search */
 8012ee2:	4617      	mov	r7, r2
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012ee4:	f8d9 4014 	ldr.w	r4, [r9, #20]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012ee8:	f8d9 501c 	ldr.w	r5, [r9, #28]
	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012eec:	3420      	adds	r4, #32
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012eee:	f5b4 1f00 	cmp.w	r4, #2097152	; 0x200000
 8012ef2:	d2c1      	bcs.n	8012e78 <dir_alloc+0x24>
 8012ef4:	2d00      	cmp	r5, #0
 8012ef6:	d0bf      	beq.n	8012e78 <dir_alloc+0x24>
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012ef8:	f3c4 0b08 	ubfx	fp, r4, #0, #9
	FATFS *fs = dp->obj.fs;
 8012efc:	f8d9 6000 	ldr.w	r6, [r9]
	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012f00:	f1bb 0f00 	cmp.w	fp, #0
 8012f04:	d109      	bne.n	8012f1a <dir_alloc+0xc6>
		dp->sect++;				/* Next sector */
 8012f06:	3501      	adds	r5, #1
		if (!dp->clust) {		/* Static table */
 8012f08:	f8d9 1018 	ldr.w	r1, [r9, #24]
		dp->sect++;				/* Next sector */
 8012f0c:	f8c9 501c 	str.w	r5, [r9, #28]
		if (!dp->clust) {		/* Static table */
 8012f10:	bba9      	cbnz	r1, 8012f7e <dir_alloc+0x12a>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012f12:	8933      	ldrh	r3, [r6, #8]
 8012f14:	ebb3 1f54 	cmp.w	r3, r4, lsr #5
 8012f18:	d95b      	bls.n	8012fd2 <dir_alloc+0x17e>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012f1a:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8012f1e:	9301      	str	r3, [sp, #4]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012f20:	445b      	add	r3, fp
	dp->dptr = ofs;						/* Current entry */
 8012f22:	f8c9 4014 	str.w	r4, [r9, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012f26:	f8c9 3020 	str.w	r3, [r9, #32]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012f2a:	e7b3      	b.n	8012e94 <dir_alloc+0x40>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012f2c:	3701      	adds	r7, #1
 8012f2e:	9b03      	ldr	r3, [sp, #12]
 8012f30:	429f      	cmp	r7, r3
 8012f32:	d1d7      	bne.n	8012ee4 <dir_alloc+0x90>
 8012f34:	e7a2      	b.n	8012e7c <dir_alloc+0x28>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012f36:	2301      	movs	r3, #1
 8012f38:	4622      	mov	r2, r4
 8012f3a:	4651      	mov	r1, sl
 8012f3c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012f40:	f7fe fb0c 	bl	801155c <disk_write>
 8012f44:	bb48      	cbnz	r0, 8012f9a <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012f46:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
			fs->wflag = 0;
 8012f4a:	f888 0003 	strb.w	r0, [r8, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8012f4e:	1ae2      	subs	r2, r4, r3
 8012f50:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8012f54:	429a      	cmp	r2, r3
 8012f56:	d2a5      	bcs.n	8012ea4 <dir_alloc+0x50>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012f58:	f898 6002 	ldrb.w	r6, [r8, #2]
 8012f5c:	2e01      	cmp	r6, #1
 8012f5e:	d802      	bhi.n	8012f66 <dir_alloc+0x112>
 8012f60:	e7a0      	b.n	8012ea4 <dir_alloc+0x50>
					wsect += fs->fsize;
 8012f62:	f8d8 301c 	ldr.w	r3, [r8, #28]
 8012f66:	441c      	add	r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012f68:	3e01      	subs	r6, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8012f6a:	2301      	movs	r3, #1
 8012f6c:	4651      	mov	r1, sl
 8012f6e:	4622      	mov	r2, r4
 8012f70:	f898 0001 	ldrb.w	r0, [r8, #1]
 8012f74:	f7fe faf2 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8012f78:	2e01      	cmp	r6, #1
 8012f7a:	d1f2      	bne.n	8012f62 <dir_alloc+0x10e>
 8012f7c:	e792      	b.n	8012ea4 <dir_alloc+0x50>
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012f7e:	8973      	ldrh	r3, [r6, #10]
 8012f80:	3b01      	subs	r3, #1
 8012f82:	ea13 2354 	ands.w	r3, r3, r4, lsr #9
 8012f86:	d1c8      	bne.n	8012f1a <dir_alloc+0xc6>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012f88:	4630      	mov	r0, r6
 8012f8a:	f7fe fed3 	bl	8011d34 <get_fat.isra.0>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012f8e:	2801      	cmp	r0, #1
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012f90:	9004      	str	r0, [sp, #16]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012f92:	f240 8082 	bls.w	801309a <dir_alloc+0x246>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012f96:	1c43      	adds	r3, r0, #1
 8012f98:	d102      	bne.n	8012fa0 <dir_alloc+0x14c>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012f9a:	2301      	movs	r3, #1
 8012f9c:	9302      	str	r3, [sp, #8]
 8012f9e:	e76d      	b.n	8012e7c <dir_alloc+0x28>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012fa0:	69b3      	ldr	r3, [r6, #24]
 8012fa2:	4298      	cmp	r0, r3
 8012fa4:	d21a      	bcs.n	8012fdc <dir_alloc+0x188>
	clst -= 2;
 8012fa6:	1e83      	subs	r3, r0, #2
 8012fa8:	9305      	str	r3, [sp, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012faa:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	4603      	mov	r3, r0
				dp->clust = clst;		/* Initialize data for new cluster */
 8012fb2:	f8c9 3018 	str.w	r3, [r9, #24]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012fb6:	69b3      	ldr	r3, [r6, #24]
 8012fb8:	9a05      	ldr	r2, [sp, #20]
 8012fba:	3b02      	subs	r3, #2
 8012fbc:	4293      	cmp	r3, r2
 8012fbe:	f240 809e 	bls.w	80130fe <dir_alloc+0x2aa>
	return clst * fs->csize + fs->database;
 8012fc2:	8973      	ldrh	r3, [r6, #10]
 8012fc4:	6af5      	ldr	r5, [r6, #44]	; 0x2c
 8012fc6:	fb02 5503 	mla	r5, r2, r3, r5
 8012fca:	9b01      	ldr	r3, [sp, #4]
				dp->sect = clust2sect(fs, clst);
 8012fcc:	f8c9 501c 	str.w	r5, [r9, #28]
 8012fd0:	e7a6      	b.n	8012f20 <dir_alloc+0xcc>
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012fd2:	2307      	movs	r3, #7
				dp->sect = 0; return FR_NO_FILE;
 8012fd4:	f8c9 101c 	str.w	r1, [r9, #28]
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012fd8:	9302      	str	r3, [sp, #8]
 8012fda:	e74f      	b.n	8012e7c <dir_alloc+0x28>
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012fdc:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8012fe0:	4648      	mov	r0, r9
 8012fe2:	f7ff f9db 	bl	801239c <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012fe6:	4603      	mov	r3, r0
 8012fe8:	9004      	str	r0, [sp, #16]
 8012fea:	2800      	cmp	r0, #0
 8012fec:	f43f af44 	beq.w	8012e78 <dir_alloc+0x24>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012ff0:	2801      	cmp	r0, #1
 8012ff2:	d052      	beq.n	801309a <dir_alloc+0x246>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012ff4:	3301      	adds	r3, #1
 8012ff6:	d0d0      	beq.n	8012f9a <dir_alloc+0x146>
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012ff8:	78f3      	ldrb	r3, [r6, #3]
 8012ffa:	2b00      	cmp	r3, #0
 8012ffc:	d150      	bne.n	80130a0 <dir_alloc+0x24c>
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012ffe:	f106 0334 	add.w	r3, r6, #52	; 0x34
 8013002:	9301      	str	r3, [sp, #4]
		*d++ = (BYTE)val;
 8013004:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013008:	2100      	movs	r1, #0
 801300a:	9801      	ldr	r0, [sp, #4]
 801300c:	f00a fa62 	bl	801d4d4 <memset>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013010:	69b3      	ldr	r3, [r6, #24]
	clst -= 2;
 8013012:	9a04      	ldr	r2, [sp, #16]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013014:	3b02      	subs	r3, #2
	clst -= 2;
 8013016:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013018:	429a      	cmp	r2, r3
	clst -= 2;
 801301a:	9205      	str	r2, [sp, #20]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801301c:	d27c      	bcs.n	8013118 <dir_alloc+0x2c4>
	return clst * fs->csize + fs->database;
 801301e:	4611      	mov	r1, r2
 8013020:	8973      	ldrh	r3, [r6, #10]
 8013022:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8013024:	fb01 2203 	mla	r2, r1, r3, r2
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013028:	6332      	str	r2, [r6, #48]	; 0x30
 801302a:	2b00      	cmp	r3, #0
 801302c:	d071      	beq.n	8013112 <dir_alloc+0x2be>
 801302e:	2300      	movs	r3, #0
 8013030:	ee08 aa10 	vmov	s16, sl
 8013034:	9706      	str	r7, [sp, #24]
 8013036:	4692      	mov	sl, r2
 8013038:	f8cd 901c 	str.w	r9, [sp, #28]
 801303c:	46a1      	mov	r9, r4
 801303e:	9f01      	ldr	r7, [sp, #4]
 8013040:	461c      	mov	r4, r3
						fs->wflag = 1;
 8013042:	f04f 0301 	mov.w	r3, #1
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8013046:	4652      	mov	r2, sl
 8013048:	4639      	mov	r1, r7
 801304a:	7870      	ldrb	r0, [r6, #1]
						fs->wflag = 1;
 801304c:	70f3      	strb	r3, [r6, #3]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801304e:	2301      	movs	r3, #1
 8013050:	f7fe fa84 	bl	801155c <disk_write>
 8013054:	2800      	cmp	r0, #0
 8013056:	d1a0      	bne.n	8012f9a <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8013058:	6a73      	ldr	r3, [r6, #36]	; 0x24
			fs->wflag = 0;
 801305a:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801305c:	ebaa 0203 	sub.w	r2, sl, r3
 8013060:	69f3      	ldr	r3, [r6, #28]
 8013062:	429a      	cmp	r2, r3
 8013064:	d20e      	bcs.n	8013084 <dir_alloc+0x230>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013066:	78b5      	ldrb	r5, [r6, #2]
 8013068:	2d01      	cmp	r5, #1
 801306a:	d801      	bhi.n	8013070 <dir_alloc+0x21c>
 801306c:	e00a      	b.n	8013084 <dir_alloc+0x230>
					wsect += fs->fsize;
 801306e:	69f3      	ldr	r3, [r6, #28]
 8013070:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013072:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 8013074:	2301      	movs	r3, #1
 8013076:	4639      	mov	r1, r7
 8013078:	4652      	mov	r2, sl
 801307a:	7870      	ldrb	r0, [r6, #1]
 801307c:	f7fe fa6e 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8013080:	2d01      	cmp	r5, #1
 8013082:	d1f4      	bne.n	801306e <dir_alloc+0x21a>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8013084:	6b31      	ldr	r1, [r6, #48]	; 0x30
 8013086:	1c63      	adds	r3, r4, #1
 8013088:	8972      	ldrh	r2, [r6, #10]
 801308a:	f101 0a01 	add.w	sl, r1, #1
 801308e:	4293      	cmp	r3, r2
 8013090:	f8c6 a030 	str.w	sl, [r6, #48]	; 0x30
 8013094:	d235      	bcs.n	8013102 <dir_alloc+0x2ae>
 8013096:	461c      	mov	r4, r3
 8013098:	e7d3      	b.n	8013042 <dir_alloc+0x1ee>
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 801309a:	2302      	movs	r3, #2
 801309c:	9302      	str	r3, [sp, #8]
 801309e:	e6ed      	b.n	8012e7c <dir_alloc+0x28>
		wsect = fs->winsect;	/* Current sector number */
 80130a0:	6b32      	ldr	r2, [r6, #48]	; 0x30
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80130a2:	f106 0134 	add.w	r1, r6, #52	; 0x34
 80130a6:	2301      	movs	r3, #1
 80130a8:	7870      	ldrb	r0, [r6, #1]
 80130aa:	9205      	str	r2, [sp, #20]
 80130ac:	9101      	str	r1, [sp, #4]
 80130ae:	f7fe fa55 	bl	801155c <disk_write>
 80130b2:	2800      	cmp	r0, #0
 80130b4:	f47f af71 	bne.w	8012f9a <dir_alloc+0x146>
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80130b8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80130ba:	9a05      	ldr	r2, [sp, #20]
			fs->wflag = 0;
 80130bc:	70f0      	strb	r0, [r6, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80130be:	1ad1      	subs	r1, r2, r3
 80130c0:	69f3      	ldr	r3, [r6, #28]
 80130c2:	4299      	cmp	r1, r3
 80130c4:	d29e      	bcs.n	8013004 <dir_alloc+0x1b0>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130c6:	78b5      	ldrb	r5, [r6, #2]
 80130c8:	2d01      	cmp	r5, #1
 80130ca:	d99b      	bls.n	8013004 <dir_alloc+0x1b0>
 80130cc:	ee08 aa10 	vmov	s16, sl
 80130d0:	f8cd 9014 	str.w	r9, [sp, #20]
 80130d4:	4692      	mov	sl, r2
 80130d6:	46a1      	mov	r9, r4
 80130d8:	9c01      	ldr	r4, [sp, #4]
 80130da:	e000      	b.n	80130de <dir_alloc+0x28a>
					wsect += fs->fsize;
 80130dc:	69f3      	ldr	r3, [r6, #28]
 80130de:	449a      	add	sl, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130e0:	3d01      	subs	r5, #1
					disk_write(fs->drv, fs->win, wsect, 1);
 80130e2:	2301      	movs	r3, #1
 80130e4:	4621      	mov	r1, r4
 80130e6:	4652      	mov	r2, sl
 80130e8:	7870      	ldrb	r0, [r6, #1]
 80130ea:	f7fe fa37 	bl	801155c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80130ee:	2d01      	cmp	r5, #1
 80130f0:	d1f4      	bne.n	80130dc <dir_alloc+0x288>
 80130f2:	464c      	mov	r4, r9
 80130f4:	ee18 aa10 	vmov	sl, s16
 80130f8:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80130fc:	e782      	b.n	8013004 <dir_alloc+0x1b0>
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80130fe:	2500      	movs	r5, #0
 8013100:	e763      	b.n	8012fca <dir_alloc+0x176>
					fs->winsect -= n;							/* Restore window offset */
 8013102:	4623      	mov	r3, r4
 8013104:	9f06      	ldr	r7, [sp, #24]
 8013106:	464c      	mov	r4, r9
 8013108:	ee18 aa10 	vmov	sl, s16
 801310c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8013110:	1aca      	subs	r2, r1, r3
 8013112:	9b04      	ldr	r3, [sp, #16]
 8013114:	6332      	str	r2, [r6, #48]	; 0x30
 8013116:	e74c      	b.n	8012fb2 <dir_alloc+0x15e>
	return clst * fs->csize + fs->database;
 8013118:	8973      	ldrh	r3, [r6, #10]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801311a:	2200      	movs	r2, #0
 801311c:	e784      	b.n	8013028 <dir_alloc+0x1d4>
 801311e:	bf00      	nop

08013120 <dir_register>:
{
 8013120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8013124:	f890 302f 	ldrb.w	r3, [r0, #47]	; 0x2f
{
 8013128:	b093      	sub	sp, #76	; 0x4c
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801312a:	f013 0ba0 	ands.w	fp, r3, #160	; 0xa0
 801312e:	930a      	str	r3, [sp, #40]	; 0x28
 8013130:	f040 8450 	bne.w	80139d4 <dir_register+0x8b4>
	FATFS *fs = dp->obj.fs;
 8013134:	f8d0 9000 	ldr.w	r9, [r0]
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8013138:	4604      	mov	r4, r0
 801313a:	f8d9 300c 	ldr.w	r3, [r9, #12]
 801313e:	881a      	ldrh	r2, [r3, #0]
 8013140:	2a00      	cmp	r2, #0
 8013142:	f000 844b 	beq.w	80139dc <dir_register+0x8bc>
 8013146:	f833 2f02 	ldrh.w	r2, [r3, #2]!
 801314a:	f10b 0b01 	add.w	fp, fp, #1
 801314e:	2a00      	cmp	r2, #0
 8013150:	d1f9      	bne.n	8013146 <dir_register+0x26>
	mem_cpy(sn, dp->fn, 12);
 8013152:	f104 0624 	add.w	r6, r4, #36	; 0x24
			*d++ = *s++;
 8013156:	ab12      	add	r3, sp, #72	; 0x48
 8013158:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 801315c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013160:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013162:	07d8      	lsls	r0, r3, #31
 8013164:	f140 818b 	bpl.w	801347e <dir_register+0x35e>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013168:	2340      	movs	r3, #64	; 0x40
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801316a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
			*d++ = *s++;
 801316e:	f89d a046 	ldrb.w	sl, [sp, #70]	; 0x46
		for (n = 1; n < 100; n++) {
 8013172:	2701      	movs	r7, #1
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8013174:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013178:	f04f 0820 	mov.w	r8, #32
			*d++ = *s++;
 801317c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
				if (sr & 0x10000) sr ^= 0x11021;
 8013180:	4dba      	ldr	r5, [pc, #744]	; (801346c <dir_register+0x34c>)
			*d++ = *s++;
 8013182:	9301      	str	r3, [sp, #4]
 8013184:	f89d 303d 	ldrb.w	r3, [sp, #61]	; 0x3d
 8013188:	9302      	str	r3, [sp, #8]
 801318a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 801318e:	9305      	str	r3, [sp, #20]
 8013190:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8013194:	9304      	str	r3, [sp, #16]
 8013196:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801319a:	9303      	str	r3, [sp, #12]
 801319c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80131a0:	9308      	str	r3, [sp, #32]
 80131a2:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 80131a6:	9307      	str	r3, [sp, #28]
 80131a8:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
 80131ac:	9306      	str	r3, [sp, #24]
 80131ae:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 80131b2:	9309      	str	r3, [sp, #36]	; 0x24
 80131b4:	f89d 3045 	ldrb.w	r3, [sp, #69]	; 0x45
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131b8:	469b      	mov	fp, r3
			*d++ = *s++;
 80131ba:	9b01      	ldr	r3, [sp, #4]
 80131bc:	2100      	movs	r1, #0
 80131be:	2200      	movs	r2, #0
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80131c0:	2f05      	cmp	r7, #5
			*d++ = *s++;
 80131c2:	f363 0107 	bfi	r1, r3, #0, #8
 80131c6:	9b02      	ldr	r3, [sp, #8]
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80131c8:	f8d9 000c 	ldr.w	r0, [r9, #12]
			*d++ = *s++;
 80131cc:	f363 210f 	bfi	r1, r3, #8, #8
 80131d0:	9b05      	ldr	r3, [sp, #20]
 80131d2:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
 80131d6:	f363 4117 	bfi	r1, r3, #16, #8
 80131da:	9b04      	ldr	r3, [sp, #16]
 80131dc:	f884 a02e 	strb.w	sl, [r4, #46]	; 0x2e
 80131e0:	f363 611f 	bfi	r1, r3, #24, #8
 80131e4:	9b03      	ldr	r3, [sp, #12]
 80131e6:	f363 0207 	bfi	r2, r3, #0, #8
 80131ea:	9b08      	ldr	r3, [sp, #32]
 80131ec:	f363 220f 	bfi	r2, r3, #8, #8
 80131f0:	9b07      	ldr	r3, [sp, #28]
 80131f2:	f363 4217 	bfi	r2, r3, #16, #8
 80131f6:	9b06      	ldr	r3, [sp, #24]
 80131f8:	f363 621f 	bfi	r2, r3, #24, #8
 80131fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80131fe:	e9c4 1209 	strd	r1, r2, [r4, #36]	; 0x24
 8013202:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8013206:	f240 8304 	bls.w	8013812 <dir_register+0x6f2>
		while (*lfn) {	/* Create a CRC */
 801320a:	8802      	ldrh	r2, [r0, #0]
 801320c:	2a00      	cmp	r2, #0
 801320e:	f000 8300 	beq.w	8013812 <dir_register+0x6f2>
				sr = (sr << 1) + (wc & 1);
 8013212:	f002 0101 	and.w	r1, r2, #1
 8013216:	4684      	mov	ip, r0
				wc >>= 1;
 8013218:	0850      	lsrs	r0, r2, #1
				sr = (sr << 1) + (wc & 1);
 801321a:	eb01 0147 	add.w	r1, r1, r7, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801321e:	e009      	b.n	8013234 <dir_register+0x114>
				sr = (sr << 1) + (wc & 1);
 8013220:	f002 0101 	and.w	r1, r2, #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013224:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				wc >>= 1;
 8013228:	ea4f 0052 	mov.w	r0, r2, lsr #1
				sr = (sr << 1) + (wc & 1);
 801322c:	eb01 014e 	add.w	r1, r1, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013230:	bf18      	it	ne
 8013232:	4069      	eorne	r1, r5
				sr = (sr << 1) + (wc & 1);
 8013234:	f000 0e01 	and.w	lr, r0, #1
				wc >>= 1;
 8013238:	0893      	lsrs	r3, r2, #2
 801323a:	08d0      	lsrs	r0, r2, #3
				sr = (sr << 1) + (wc & 1);
 801323c:	eb0e 0e41 	add.w	lr, lr, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013240:	0409      	lsls	r1, r1, #16
				sr = (sr << 1) + (wc & 1);
 8013242:	f003 0301 	and.w	r3, r3, #1
 8013246:	f000 0001 	and.w	r0, r0, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801324a:	bf48      	it	mi
 801324c:	ea8e 0e05 	eormi.w	lr, lr, r5
				wc >>= 1;
 8013250:	0911      	lsrs	r1, r2, #4
				sr = (sr << 1) + (wc & 1);
 8013252:	eb03 034e 	add.w	r3, r3, lr, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013256:	f41e 4f00 	tst.w	lr, #32768	; 0x8000
				sr = (sr << 1) + (wc & 1);
 801325a:	f001 0101 	and.w	r1, r1, #1
				if (sr & 0x10000) sr ^= 0x11021;
 801325e:	bf18      	it	ne
 8013260:	406b      	eorne	r3, r5
				sr = (sr << 1) + (wc & 1);
 8013262:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013266:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 8013268:	ea4f 1352 	mov.w	r3, r2, lsr #5
				if (sr & 0x10000) sr ^= 0x11021;
 801326c:	bf48      	it	mi
 801326e:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 8013270:	f003 0301 	and.w	r3, r3, #1
 8013274:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013278:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 801327a:	ea4f 1092 	mov.w	r0, r2, lsr #6
				if (sr & 0x10000) sr ^= 0x11021;
 801327e:	bf48      	it	mi
 8013280:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8013282:	f000 0001 	and.w	r0, r0, #1
 8013286:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801328a:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 801328c:	ea4f 11d2 	mov.w	r1, r2, lsr #7
				if (sr & 0x10000) sr ^= 0x11021;
 8013290:	bf48      	it	mi
 8013292:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8013294:	f001 0101 	and.w	r1, r1, #1
 8013298:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801329c:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 801329e:	ea4f 2312 	mov.w	r3, r2, lsr #8
				if (sr & 0x10000) sr ^= 0x11021;
 80132a2:	bf48      	it	mi
 80132a4:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80132a6:	f003 0301 	and.w	r3, r3, #1
 80132aa:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80132ae:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80132b0:	ea4f 2052 	mov.w	r0, r2, lsr #9
				if (sr & 0x10000) sr ^= 0x11021;
 80132b4:	bf48      	it	mi
 80132b6:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80132b8:	f000 0001 	and.w	r0, r0, #1
 80132bc:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80132c0:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80132c2:	ea4f 2192 	mov.w	r1, r2, lsr #10
				if (sr & 0x10000) sr ^= 0x11021;
 80132c6:	bf48      	it	mi
 80132c8:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 80132ca:	f001 0101 	and.w	r1, r1, #1
 80132ce:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80132d2:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 80132d4:	ea4f 23d2 	mov.w	r3, r2, lsr #11
				if (sr & 0x10000) sr ^= 0x11021;
 80132d8:	bf48      	it	mi
 80132da:	4068      	eormi	r0, r5
				sr = (sr << 1) + (wc & 1);
 80132dc:	f003 0301 	and.w	r3, r3, #1
 80132e0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80132e4:	0400      	lsls	r0, r0, #16
				wc >>= 1;
 80132e6:	ea4f 3012 	mov.w	r0, r2, lsr #12
				if (sr & 0x10000) sr ^= 0x11021;
 80132ea:	bf48      	it	mi
 80132ec:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 80132ee:	f000 0001 	and.w	r0, r0, #1
 80132f2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 80132f6:	0409      	lsls	r1, r1, #16
				wc >>= 1;
 80132f8:	ea4f 3152 	mov.w	r1, r2, lsr #13
				if (sr & 0x10000) sr ^= 0x11021;
 80132fc:	bf48      	it	mi
 80132fe:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 8013300:	f001 0101 	and.w	r1, r1, #1
 8013304:	eb00 0043 	add.w	r0, r0, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013308:	041b      	lsls	r3, r3, #16
				wc >>= 1;
 801330a:	ea4f 3392 	mov.w	r3, r2, lsr #14
				if (sr & 0x10000) sr ^= 0x11021;
 801330e:	bf48      	it	mi
 8013310:	4068      	eormi	r0, r5
				wc >>= 1;
 8013312:	0bd2      	lsrs	r2, r2, #15
				sr = (sr << 1) + (wc & 1);
 8013314:	f003 0301 	and.w	r3, r3, #1
 8013318:	eb01 0140 	add.w	r1, r1, r0, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 801331c:	0400      	lsls	r0, r0, #16
 801331e:	bf48      	it	mi
 8013320:	4069      	eormi	r1, r5
				sr = (sr << 1) + (wc & 1);
 8013322:	eb03 0341 	add.w	r3, r3, r1, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013326:	0409      	lsls	r1, r1, #16
 8013328:	bf48      	it	mi
 801332a:	406b      	eormi	r3, r5
				sr = (sr << 1) + (wc & 1);
 801332c:	eb02 0e43 	add.w	lr, r2, r3, lsl #1
				if (sr & 0x10000) sr ^= 0x11021;
 8013330:	041a      	lsls	r2, r3, #16
		while (*lfn) {	/* Create a CRC */
 8013332:	f83c 2f02 	ldrh.w	r2, [ip, #2]!
				if (sr & 0x10000) sr ^= 0x11021;
 8013336:	bf48      	it	mi
 8013338:	ea8e 0e05 	eormi.w	lr, lr, r5
		while (*lfn) {	/* Create a CRC */
 801333c:	2a00      	cmp	r2, #0
 801333e:	f47f af6f 	bne.w	8013220 <dir_register+0x100>
		c = (BYTE)((seq % 16) + '0');
 8013342:	f00e 010f 	and.w	r1, lr, #15
 8013346:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 801334a:	2a39      	cmp	r2, #57	; 0x39
 801334c:	bf88      	it	hi
 801334e:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8013352:	f1be 0f0f 	cmp.w	lr, #15
		seq /= 16;
 8013356:	ea4f 111e 	mov.w	r1, lr, lsr #4
		ns[i--] = c;
 801335a:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	} while (seq);
 801335e:	f240 830c 	bls.w	801397a <dir_register+0x85a>
		c = (BYTE)((seq % 16) + '0');
 8013362:	f001 000f 	and.w	r0, r1, #15
 8013366:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 801336a:	2a39      	cmp	r2, #57	; 0x39
 801336c:	bf88      	it	hi
 801336e:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 8013372:	290f      	cmp	r1, #15
		seq /= 16;
 8013374:	ea4f 201e 	mov.w	r0, lr, lsr #8
		ns[i--] = c;
 8013378:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	} while (seq);
 801337c:	f240 8303 	bls.w	8013986 <dir_register+0x866>
		c = (BYTE)((seq % 16) + '0');
 8013380:	f000 010f 	and.w	r1, r0, #15
 8013384:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8013388:	2a39      	cmp	r2, #57	; 0x39
 801338a:	bf88      	it	hi
 801338c:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8013390:	280f      	cmp	r0, #15
		seq /= 16;
 8013392:	ea4f 311e 	mov.w	r1, lr, lsr #12
		ns[i--] = c;
 8013396:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	} while (seq);
 801339a:	f240 82fa 	bls.w	8013992 <dir_register+0x872>
		c = (BYTE)((seq % 16) + '0');
 801339e:	f001 000f 	and.w	r0, r1, #15
 80133a2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 80133a6:	2a39      	cmp	r2, #57	; 0x39
 80133a8:	bf88      	it	hi
 80133aa:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80133ae:	290f      	cmp	r1, #15
		seq /= 16;
 80133b0:	ea4f 401e 	mov.w	r0, lr, lsr #16
		ns[i--] = c;
 80133b4:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	} while (seq);
 80133b8:	f240 82fa 	bls.w	80139b0 <dir_register+0x890>
		c = (BYTE)((seq % 16) + '0');
 80133bc:	f000 010f 	and.w	r1, r0, #15
 80133c0:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 80133c4:	2a39      	cmp	r2, #57	; 0x39
 80133c6:	bf88      	it	hi
 80133c8:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 80133cc:	280f      	cmp	r0, #15
		seq /= 16;
 80133ce:	ea4f 511e 	mov.w	r1, lr, lsr #20
		ns[i--] = c;
 80133d2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	} while (seq);
 80133d6:	f240 82f1 	bls.w	80139bc <dir_register+0x89c>
		c = (BYTE)((seq % 16) + '0');
 80133da:	f001 000f 	and.w	r0, r1, #15
		seq /= 16;
 80133de:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
		c = (BYTE)((seq % 16) + '0');
 80133e2:	f100 0230 	add.w	r2, r0, #48	; 0x30
		if (c > '9') c += 7;
 80133e6:	2a39      	cmp	r2, #57	; 0x39
 80133e8:	bf88      	it	hi
 80133ea:	f100 0237 	addhi.w	r2, r0, #55	; 0x37
	} while (seq);
 80133ee:	290f      	cmp	r1, #15
		ns[i--] = c;
 80133f0:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	} while (seq);
 80133f4:	f240 82e8 	bls.w	80139c8 <dir_register+0x8a8>
		c = (BYTE)((seq % 16) + '0');
 80133f8:	f00e 010f 	and.w	r1, lr, #15
 80133fc:	f101 0230 	add.w	r2, r1, #48	; 0x30
		if (c > '9') c += 7;
 8013400:	2a39      	cmp	r2, #57	; 0x39
 8013402:	bf88      	it	hi
 8013404:	f101 0237 	addhi.w	r2, r1, #55	; 0x37
	} while (seq);
 8013408:	f1be 0f0f 	cmp.w	lr, #15
		ns[i--] = c;
 801340c:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	} while (seq);
 8013410:	f240 82c5 	bls.w	801399e <dir_register+0x87e>
		ns[i--] = c;
 8013414:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8013418:	f104 0123 	add.w	r1, r4, #35	; 0x23
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801341c:	2200      	movs	r2, #0
 801341e:	e002      	b.n	8013426 <dir_register+0x306>
 8013420:	3201      	adds	r2, #1
 8013422:	4562      	cmp	r2, ip
 8013424:	d003      	beq.n	801342e <dir_register+0x30e>
 8013426:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801342a:	2b20      	cmp	r3, #32
 801342c:	d1f8      	bne.n	8013420 <dir_register+0x300>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801342e:	f1bc 0f07 	cmp.w	ip, #7
 8013432:	f240 81f3 	bls.w	801381c <dir_register+0x6fc>
 8013436:	1c50      	adds	r0, r2, #1
 8013438:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 801343c:	2807      	cmp	r0, #7
 801343e:	d809      	bhi.n	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013440:	1c42      	adds	r2, r0, #1
 8013442:	2120      	movs	r1, #32
 8013444:	2a08      	cmp	r2, #8
 8013446:	f1c0 0208 	rsb	r2, r0, #8
 801344a:	4430      	add	r0, r6
 801344c:	bf88      	it	hi
 801344e:	2201      	movhi	r2, #1
 8013450:	f00a f840 	bl	801d4d4 <memset>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8013454:	4620      	mov	r0, r4
 8013456:	f7ff f92b 	bl	80126b0 <dir_find>
			if (res != FR_OK) break;
 801345a:	b948      	cbnz	r0, 8013470 <dir_register+0x350>
		for (n = 1; n < 100; n++) {
 801345c:	3701      	adds	r7, #1
 801345e:	2f64      	cmp	r7, #100	; 0x64
 8013460:	f47f aeab 	bne.w	80131ba <dir_register+0x9a>
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013464:	2007      	movs	r0, #7
}
 8013466:	b013      	add	sp, #76	; 0x4c
 8013468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801346c:	00011021 	.word	0x00011021
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8013470:	2804      	cmp	r0, #4
 8013472:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 8013476:	d1f6      	bne.n	8013466 <dir_register+0x346>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8013478:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801347a:	f884 302f 	strb.w	r3, [r4, #47]	; 0x2f
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801347e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013480:	079b      	lsls	r3, r3, #30
 8013482:	f140 818e 	bpl.w	80137a2 <dir_register+0x682>
 8013486:	f10b 0b0c 	add.w	fp, fp, #12
 801348a:	4de3      	ldr	r5, [pc, #908]	; (8013818 <dir_register+0x6f8>)
	res = dir_alloc(dp, nent);		/* Allocate entries */
 801348c:	4620      	mov	r0, r4
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 801348e:	fba5 350b 	umull	r3, r5, r5, fp
 8013492:	08ad      	lsrs	r5, r5, #2
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8013494:	1c69      	adds	r1, r5, #1
 8013496:	f7ff fcdd 	bl	8012e54 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 801349a:	2800      	cmp	r0, #0
 801349c:	d1e3      	bne.n	8013466 <dir_register+0x346>
 801349e:	f1bb 0f0c 	cmp.w	fp, #12
 80134a2:	f000 8185 	beq.w	80137b0 <dir_register+0x690>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80134a6:	6961      	ldr	r1, [r4, #20]
 80134a8:	4620      	mov	r0, r4
 80134aa:	eba1 1145 	sub.w	r1, r1, r5, lsl #5
 80134ae:	f7ff f845 	bl	801253c <dir_sdi>
		if (res == FR_OK) {
 80134b2:	2800      	cmp	r0, #0
 80134b4:	d1d7      	bne.n	8013466 <dir_register+0x346>
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80134b6:	f894 7024 	ldrb.w	r7, [r4, #36]	; 0x24
	dir[LDIR_Type] = 0;
 80134ba:	4680      	mov	r8, r0
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80134bc:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 80134c0:	01fb      	lsls	r3, r7, #7
 80134c2:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 80134c6:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
 80134ca:	ea43 0357 	orr.w	r3, r3, r7, lsr #1
 80134ce:	f894 a028 	ldrb.w	sl, [r4, #40]	; 0x28
 80134d2:	f894 e02a 	ldrb.w	lr, [r4, #42]	; 0x2a
 80134d6:	189f      	adds	r7, r3, r2
 80134d8:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 80134dc:	f894 c02b 	ldrb.w	ip, [r4, #43]	; 0x2b
 80134e0:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80134e4:	f894 602c 	ldrb.w	r6, [r4, #44]	; 0x2c
 80134e8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 80134ec:	fa50 f783 	uxtab	r7, r0, r3
 80134f0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 80134f4:	f3c7 0346 	ubfx	r3, r7, #1, #7
 80134f8:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
 80134fc:	fa51 f783 	uxtab	r7, r1, r3
 8013500:	f894 102e 	ldrb.w	r1, [r4, #46]	; 0x2e
 8013504:	f3c7 0346 	ubfx	r3, r7, #1, #7
 8013508:	ea43 13c7 	orr.w	r3, r3, r7, lsl #7
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801350c:	f64f 77fd 	movw	r7, #65533	; 0xfffd
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013510:	fa5a fa83 	uxtab	sl, sl, r3
 8013514:	f3ca 0346 	ubfx	r3, sl, #1, #7
 8013518:	ea43 13ca 	orr.w	r3, r3, sl, lsl #7
 801351c:	fa52 f283 	uxtab	r2, r2, r3
 8013520:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8013524:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013528:	fa5e f283 	uxtab	r2, lr, r3
 801352c:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8013530:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013534:	fa5c f283 	uxtab	r2, ip, r3
 8013538:	f3c2 0346 	ubfx	r3, r2, #1, #7
 801353c:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 8013540:	fa56 f283 	uxtab	r2, r6, r3
 8013544:	f3c2 0346 	ubfx	r3, r2, #1, #7
 8013548:	ea43 13c2 	orr.w	r3, r3, r2, lsl #7
 801354c:	fa50 f383 	uxtab	r3, r0, r3
 8013550:	f3c3 0246 	ubfx	r2, r3, #1, #7
 8013554:	ea42 13c3 	orr.w	r3, r2, r3, lsl #7
 8013558:	fa51 f183 	uxtab	r1, r1, r3
 801355c:	b2ce      	uxtb	r6, r1
	} while (--n);
 801355e:	e036      	b.n	80135ce <dir_register+0x4ae>
	*ptr++ = (BYTE)val; val >>= 8;
 8013560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013564:	f8a3 2003 	strh.w	r2, [r3, #3]
 8013568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801356c:	f8a3 2005 	strh.w	r2, [r3, #5]
 8013570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013574:	f8a3 2007 	strh.w	r2, [r3, #7]
 8013578:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801357c:	f8a3 2009 	strh.w	r2, [r3, #9]
 8013580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013584:	81da      	strh	r2, [r3, #14]
 8013586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801358a:	821a      	strh	r2, [r3, #16]
 801358c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013590:	825a      	strh	r2, [r3, #18]
 8013592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013596:	829a      	strh	r2, [r3, #20]
 8013598:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801359c:	82da      	strh	r2, [r3, #22]
 801359e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135a2:	831a      	strh	r2, [r3, #24]
 80135a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135a8:	839a      	strh	r2, [r3, #28]
 80135aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80135ae:	83da      	strh	r2, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80135b0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80135b4:	7018      	strb	r0, [r3, #0]
				fs->wflag = 1;
 80135b6:	2301      	movs	r3, #1
				res = dir_next(dp, 0);	/* Next entry */
 80135b8:	4620      	mov	r0, r4
				fs->wflag = 1;
 80135ba:	f889 3003 	strb.w	r3, [r9, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80135be:	f7fe fc19 	bl	8011df4 <dir_next.constprop.0>
			} while (res == FR_OK && --nent);
 80135c2:	2800      	cmp	r0, #0
 80135c4:	f47f af4f 	bne.w	8013466 <dir_register+0x346>
 80135c8:	3d01      	subs	r5, #1
 80135ca:	f000 80f1 	beq.w	80137b0 <dir_register+0x690>
				res = move_window(fs, dp->sect);
 80135ce:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80135d0:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80135d4:	4299      	cmp	r1, r3
 80135d6:	d005      	beq.n	80135e4 <dir_register+0x4c4>
 80135d8:	4648      	mov	r0, r9
 80135da:	f7fe f95f 	bl	801189c <move_window.part.0>
				if (res != FR_OK) break;
 80135de:	2800      	cmp	r0, #0
 80135e0:	f47f af41 	bne.w	8013466 <dir_register+0x346>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80135e4:	6a23      	ldr	r3, [r4, #32]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80135e6:	f04f 020f 	mov.w	r2, #15
 80135ea:	b2e8      	uxtb	r0, r5
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80135ec:	f8d9 100c 	ldr.w	r1, [r9, #12]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80135f0:	72da      	strb	r2, [r3, #11]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80135f2:	1e42      	subs	r2, r0, #1
	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80135f4:	735e      	strb	r6, [r3, #13]
	dir[LDIR_Type] = 0;
 80135f6:	f883 800c 	strb.w	r8, [r3, #12]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80135fa:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
	*ptr++ = (BYTE)val; val >>= 8;
 80135fe:	f883 801a 	strb.w	r8, [r3, #26]
	*ptr++ = (BYTE)val;
 8013602:	f883 801b 	strb.w	r8, [r3, #27]
	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8013606:	eb02 028c 	add.w	r2, r2, ip, lsl #2
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801360a:	f831 c012 	ldrh.w	ip, [r1, r2, lsl #1]
 801360e:	f10c 3eff 	add.w	lr, ip, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013612:	f883 c001 	strb.w	ip, [r3, #1]
 8013616:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801361a:	fa1f fe8e 	uxth.w	lr, lr
	*ptr++ = (BYTE)val;
 801361e:	f883 c002 	strb.w	ip, [r3, #2]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013622:	ea4f 0c42 	mov.w	ip, r2, lsl #1
 8013626:	45be      	cmp	lr, r7
 8013628:	d89a      	bhi.n	8013560 <dir_register+0x440>
 801362a:	3201      	adds	r2, #1
 801362c:	f831 a012 	ldrh.w	sl, [r1, r2, lsl #1]
 8013630:	0052      	lsls	r2, r2, #1
	*ptr++ = (BYTE)val; val >>= 8;
 8013632:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 8013636:	f883 a003 	strb.w	sl, [r3, #3]
	*ptr++ = (BYTE)val;
 801363a:	f883 e004 	strb.w	lr, [r3, #4]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801363e:	f1ba 0f00 	cmp.w	sl, #0
 8013642:	d091      	beq.n	8013568 <dir_register+0x448>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013644:	f64f 7eff 	movw	lr, #65535	; 0xffff
 8013648:	45f2      	cmp	sl, lr
 801364a:	d08d      	beq.n	8013568 <dir_register+0x448>
 801364c:	440a      	add	r2, r1
 801364e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8013652:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8013656:	f883 a005 	strb.w	sl, [r3, #5]
	*ptr++ = (BYTE)val;
 801365a:	f883 b006 	strb.w	fp, [r3, #6]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801365e:	f1ba 0f00 	cmp.w	sl, #0
 8013662:	f000 81be 	beq.w	80139e2 <dir_register+0x8c2>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013666:	45f2      	cmp	sl, lr
 8013668:	d082      	beq.n	8013570 <dir_register+0x450>
 801366a:	f8b2 a004 	ldrh.w	sl, [r2, #4]
	*ptr++ = (BYTE)val; val >>= 8;
 801366e:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8013672:	f883 a007 	strb.w	sl, [r3, #7]
	*ptr++ = (BYTE)val;
 8013676:	f883 b008 	strb.w	fp, [r3, #8]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801367a:	f1ba 0f00 	cmp.w	sl, #0
 801367e:	f000 81c5 	beq.w	8013a0c <dir_register+0x8ec>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013682:	45f2      	cmp	sl, lr
 8013684:	f43f af78 	beq.w	8013578 <dir_register+0x458>
 8013688:	f8b2 a006 	ldrh.w	sl, [r2, #6]
	*ptr++ = (BYTE)val; val >>= 8;
 801368c:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 8013690:	f883 a009 	strb.w	sl, [r3, #9]
	*ptr++ = (BYTE)val;
 8013694:	f883 b00a 	strb.w	fp, [r3, #10]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013698:	f1ba 0f00 	cmp.w	sl, #0
 801369c:	f000 81b3 	beq.w	8013a06 <dir_register+0x8e6>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80136a0:	45f2      	cmp	sl, lr
 80136a2:	f43f af6d 	beq.w	8013580 <dir_register+0x460>
 80136a6:	f8b2 a008 	ldrh.w	sl, [r2, #8]
	*ptr++ = (BYTE)val; val >>= 8;
 80136aa:	ea4f 2e1a 	mov.w	lr, sl, lsr #8
 80136ae:	f883 a00e 	strb.w	sl, [r3, #14]
	*ptr++ = (BYTE)val;
 80136b2:	f883 e00f 	strb.w	lr, [r3, #15]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80136b6:	f1ba 0f00 	cmp.w	sl, #0
 80136ba:	f43f af64 	beq.w	8013586 <dir_register+0x466>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80136be:	f64f 7eff 	movw	lr, #65535	; 0xffff
 80136c2:	45f2      	cmp	sl, lr
 80136c4:	f43f af5f 	beq.w	8013586 <dir_register+0x466>
 80136c8:	f8b2 a00a 	ldrh.w	sl, [r2, #10]
	*ptr++ = (BYTE)val; val >>= 8;
 80136cc:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80136d0:	f883 a010 	strb.w	sl, [r3, #16]
	*ptr++ = (BYTE)val;
 80136d4:	f883 b011 	strb.w	fp, [r3, #17]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80136d8:	f1ba 0f00 	cmp.w	sl, #0
 80136dc:	f000 8190 	beq.w	8013a00 <dir_register+0x8e0>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80136e0:	45f2      	cmp	sl, lr
 80136e2:	f43f af53 	beq.w	801358c <dir_register+0x46c>
 80136e6:	f8b2 a00c 	ldrh.w	sl, [r2, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 80136ea:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 80136ee:	f883 a012 	strb.w	sl, [r3, #18]
	*ptr++ = (BYTE)val;
 80136f2:	f883 b013 	strb.w	fp, [r3, #19]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80136f6:	f1ba 0f00 	cmp.w	sl, #0
 80136fa:	f000 817e 	beq.w	80139fa <dir_register+0x8da>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80136fe:	45f2      	cmp	sl, lr
 8013700:	f43f af47 	beq.w	8013592 <dir_register+0x472>
 8013704:	f8b2 a00e 	ldrh.w	sl, [r2, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8013708:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 801370c:	f883 a014 	strb.w	sl, [r3, #20]
	*ptr++ = (BYTE)val;
 8013710:	f883 b015 	strb.w	fp, [r3, #21]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013714:	f1ba 0f00 	cmp.w	sl, #0
 8013718:	f000 816c 	beq.w	80139f4 <dir_register+0x8d4>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801371c:	45f2      	cmp	sl, lr
 801371e:	f43f af3b 	beq.w	8013598 <dir_register+0x478>
 8013722:	f8b2 a010 	ldrh.w	sl, [r2, #16]
	*ptr++ = (BYTE)val; val >>= 8;
 8013726:	ea4f 2b1a 	mov.w	fp, sl, lsr #8
 801372a:	f883 a016 	strb.w	sl, [r3, #22]
	*ptr++ = (BYTE)val;
 801372e:	f883 b017 	strb.w	fp, [r3, #23]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013732:	f1ba 0f00 	cmp.w	sl, #0
 8013736:	f000 815a 	beq.w	80139ee <dir_register+0x8ce>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801373a:	45f2      	cmp	sl, lr
 801373c:	f43f af2f 	beq.w	801359e <dir_register+0x47e>
 8013740:	f8b2 e012 	ldrh.w	lr, [r2, #18]
	*ptr++ = (BYTE)val; val >>= 8;
 8013744:	ea4f 2a1e 	mov.w	sl, lr, lsr #8
 8013748:	f883 e018 	strb.w	lr, [r3, #24]
	*ptr++ = (BYTE)val;
 801374c:	f883 a019 	strb.w	sl, [r3, #25]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013750:	f1be 0f00 	cmp.w	lr, #0
 8013754:	f43f af26 	beq.w	80135a4 <dir_register+0x484>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013758:	f64f 7aff 	movw	sl, #65535	; 0xffff
 801375c:	45d6      	cmp	lr, sl
 801375e:	f43f af21 	beq.w	80135a4 <dir_register+0x484>
 8013762:	f8b2 e014 	ldrh.w	lr, [r2, #20]
	*ptr++ = (BYTE)val; val >>= 8;
 8013766:	ea4f 2b1e 	mov.w	fp, lr, lsr #8
 801376a:	f883 e01c 	strb.w	lr, [r3, #28]
	*ptr++ = (BYTE)val;
 801376e:	f883 b01d 	strb.w	fp, [r3, #29]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013772:	f1be 0f00 	cmp.w	lr, #0
 8013776:	f000 8137 	beq.w	80139e8 <dir_register+0x8c8>
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 801377a:	45d6      	cmp	lr, sl
 801377c:	f43f af15 	beq.w	80135aa <dir_register+0x48a>
 8013780:	8ad2      	ldrh	r2, [r2, #22]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8013782:	f102 3eff 	add.w	lr, r2, #4294967295	; 0xffffffff
	*ptr++ = (BYTE)val; val >>= 8;
 8013786:	779a      	strb	r2, [r3, #30]
 8013788:	0a12      	lsrs	r2, r2, #8
	*ptr++ = (BYTE)val;
 801378a:	77da      	strb	r2, [r3, #31]
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 801378c:	fa1f f28e 	uxth.w	r2, lr
 8013790:	42ba      	cmp	r2, r7
 8013792:	f63f af0d 	bhi.w	80135b0 <dir_register+0x490>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8013796:	4461      	add	r1, ip
 8013798:	8b4a      	ldrh	r2, [r1, #26]
 801379a:	2a00      	cmp	r2, #0
 801379c:	f47f af0a 	bne.w	80135b4 <dir_register+0x494>
 80137a0:	e706      	b.n	80135b0 <dir_register+0x490>
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80137a2:	2101      	movs	r1, #1
 80137a4:	4620      	mov	r0, r4
 80137a6:	f7ff fb55 	bl	8012e54 <dir_alloc>
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80137aa:	2800      	cmp	r0, #0
 80137ac:	f47f ae5b 	bne.w	8013466 <dir_register+0x346>
		res = move_window(fs, dp->sect);
 80137b0:	69e1      	ldr	r1, [r4, #28]
	if (sector != fs->winsect) {	/* Window offset changed? */
 80137b2:	f8d9 3030 	ldr.w	r3, [r9, #48]	; 0x30
 80137b6:	4299      	cmp	r1, r3
 80137b8:	d005      	beq.n	80137c6 <dir_register+0x6a6>
 80137ba:	4648      	mov	r0, r9
 80137bc:	f7fe f86e 	bl	801189c <move_window.part.0>
		if (res == FR_OK) {
 80137c0:	2800      	cmp	r0, #0
 80137c2:	f47f ae50 	bne.w	8013466 <dir_register+0x346>
		*d++ = (BYTE)val;
 80137c6:	2220      	movs	r2, #32
 80137c8:	2100      	movs	r1, #0
 80137ca:	6a20      	ldr	r0, [r4, #32]
 80137cc:	f009 fe82 	bl	801d4d4 <memset>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80137d0:	6a23      	ldr	r3, [r4, #32]
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80137d2:	f104 0225 	add.w	r2, r4, #37	; 0x25
 80137d6:	1a9a      	subs	r2, r3, r2
 80137d8:	2a02      	cmp	r2, #2
 80137da:	f240 811a 	bls.w	8013a12 <dir_register+0x8f2>
			*d++ = *s++;
 80137de:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80137e0:	601a      	str	r2, [r3, #0]
 80137e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80137e4:	605a      	str	r2, [r3, #4]
 80137e6:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
			fs->wflag = 1;
 80137ea:	2000      	movs	r0, #0
			*d++ = *s++;
 80137ec:	721a      	strb	r2, [r3, #8]
 80137ee:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80137f2:	725a      	strb	r2, [r3, #9]
 80137f4:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80137f8:	729a      	strb	r2, [r3, #10]
			fs->wflag = 1;
 80137fa:	2201      	movs	r2, #1
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80137fc:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8013800:	6a21      	ldr	r1, [r4, #32]
 8013802:	f003 0318 	and.w	r3, r3, #24
 8013806:	730b      	strb	r3, [r1, #12]
			fs->wflag = 1;
 8013808:	f889 2003 	strb.w	r2, [r9, #3]
}
 801380c:	b013      	add	sp, #76	; 0x4c
 801380e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013812:	46be      	mov	lr, r7
 8013814:	e595      	b.n	8013342 <dir_register+0x222>
 8013816:	bf00      	nop
 8013818:	4ec4ec4f 	.word	0x4ec4ec4f
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801381c:	f10c 0348 	add.w	r3, ip, #72	; 0x48
 8013820:	f10c 0c01 	add.w	ip, ip, #1
 8013824:	eb0d 0103 	add.w	r1, sp, r3
 8013828:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801382c:	54b1      	strb	r1, [r6, r2]
 801382e:	3201      	adds	r2, #1
	} while (j < 8);
 8013830:	2a07      	cmp	r2, #7
 8013832:	f63f ae0f 	bhi.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013836:	f1bc 0f08 	cmp.w	ip, #8
 801383a:	d067      	beq.n	801390c <dir_register+0x7ec>
 801383c:	f10c 0348 	add.w	r3, ip, #72	; 0x48
	} while (j < 8);
 8013840:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013842:	f102 0001 	add.w	r0, r2, #1
 8013846:	eb0d 0103 	add.w	r1, sp, r3
 801384a:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801384e:	54b1      	strb	r1, [r6, r2]
 8013850:	f10c 0101 	add.w	r1, ip, #1
	} while (j < 8);
 8013854:	f43f adfe 	beq.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013858:	2908      	cmp	r1, #8
 801385a:	d05f      	beq.n	801391c <dir_register+0x7fc>
 801385c:	f10c 0349 	add.w	r3, ip, #73	; 0x49
	} while (j < 8);
 8013860:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013862:	eb0d 0103 	add.w	r1, sp, r3
 8013866:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801386a:	5431      	strb	r1, [r6, r0]
 801386c:	f10c 0102 	add.w	r1, ip, #2
 8013870:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8013874:	f43f adee 	beq.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013878:	2908      	cmp	r1, #8
 801387a:	d057      	beq.n	801392c <dir_register+0x80c>
 801387c:	f10c 034a 	add.w	r3, ip, #74	; 0x4a
	} while (j < 8);
 8013880:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013882:	eb0d 0103 	add.w	r1, sp, r3
 8013886:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 801388a:	5431      	strb	r1, [r6, r0]
 801388c:	f10c 0103 	add.w	r1, ip, #3
 8013890:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8013894:	f43f adde 	beq.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013898:	2908      	cmp	r1, #8
 801389a:	d04f      	beq.n	801393c <dir_register+0x81c>
 801389c:	f10c 034b 	add.w	r3, ip, #75	; 0x4b
	} while (j < 8);
 80138a0:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138a2:	eb0d 0103 	add.w	r1, sp, r3
 80138a6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80138aa:	5431      	strb	r1, [r6, r0]
 80138ac:	f10c 0104 	add.w	r1, ip, #4
 80138b0:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 80138b4:	f43f adce 	beq.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138b8:	2908      	cmp	r1, #8
 80138ba:	d047      	beq.n	801394c <dir_register+0x82c>
 80138bc:	f10c 034c 	add.w	r3, ip, #76	; 0x4c
	} while (j < 8);
 80138c0:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138c2:	eb0d 0103 	add.w	r1, sp, r3
 80138c6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80138ca:	5431      	strb	r1, [r6, r0]
 80138cc:	f10c 0105 	add.w	r1, ip, #5
 80138d0:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 80138d4:	f43f adbe 	beq.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138d8:	2908      	cmp	r1, #8
 80138da:	d03f      	beq.n	801395c <dir_register+0x83c>
 80138dc:	f10c 034d 	add.w	r3, ip, #77	; 0x4d
	} while (j < 8);
 80138e0:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138e2:	eb0d 0103 	add.w	r1, sp, r3
 80138e6:	f811 1c14 	ldrb.w	r1, [r1, #-20]
 80138ea:	5431      	strb	r1, [r6, r0]
 80138ec:	f102 0106 	add.w	r1, r2, #6
	} while (j < 8);
 80138f0:	f43f adb0 	beq.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80138f4:	f1bc 0f01 	cmp.w	ip, #1
 80138f8:	d138      	bne.n	801396c <dir_register+0x84c>
 80138fa:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
	} while (j < 8);
 80138fe:	2906      	cmp	r1, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013900:	5472      	strb	r2, [r6, r1]
	} while (j < 8);
 8013902:	f47f ada7 	bne.w	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8013906:	f884 802b 	strb.w	r8, [r4, #43]	; 0x2b
	} while (j < 8);
 801390a:	e5a3      	b.n	8013454 <dir_register+0x334>
 801390c:	2a07      	cmp	r2, #7
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801390e:	f102 0001 	add.w	r0, r2, #1
 8013912:	f806 8002 	strb.w	r8, [r6, r2]
	} while (j < 8);
 8013916:	f47f ad93 	bne.w	8013440 <dir_register+0x320>
 801391a:	e59b      	b.n	8013454 <dir_register+0x334>
 801391c:	2a06      	cmp	r2, #6
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801391e:	f806 8000 	strb.w	r8, [r6, r0]
 8013922:	f102 0002 	add.w	r0, r2, #2
	} while (j < 8);
 8013926:	f47f ad8b 	bne.w	8013440 <dir_register+0x320>
 801392a:	e593      	b.n	8013454 <dir_register+0x334>
 801392c:	2a05      	cmp	r2, #5
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801392e:	f806 8000 	strb.w	r8, [r6, r0]
 8013932:	f102 0003 	add.w	r0, r2, #3
	} while (j < 8);
 8013936:	f47f ad83 	bne.w	8013440 <dir_register+0x320>
 801393a:	e58b      	b.n	8013454 <dir_register+0x334>
 801393c:	2a04      	cmp	r2, #4
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801393e:	f806 8000 	strb.w	r8, [r6, r0]
 8013942:	f102 0004 	add.w	r0, r2, #4
	} while (j < 8);
 8013946:	f47f ad7b 	bne.w	8013440 <dir_register+0x320>
 801394a:	e583      	b.n	8013454 <dir_register+0x334>
 801394c:	2a03      	cmp	r2, #3
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801394e:	f806 8000 	strb.w	r8, [r6, r0]
 8013952:	f102 0005 	add.w	r0, r2, #5
	} while (j < 8);
 8013956:	f47f ad73 	bne.w	8013440 <dir_register+0x320>
 801395a:	e57b      	b.n	8013454 <dir_register+0x334>
 801395c:	2a02      	cmp	r2, #2
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801395e:	f806 8000 	strb.w	r8, [r6, r0]
 8013962:	f102 0006 	add.w	r0, r2, #6
	} while (j < 8);
 8013966:	f47f ad6b 	bne.w	8013440 <dir_register+0x320>
 801396a:	e573      	b.n	8013454 <dir_register+0x334>
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 801396c:	f806 8001 	strb.w	r8, [r6, r1]
	} while (j < 8);
 8013970:	2a00      	cmp	r2, #0
 8013972:	f47f ad6f 	bne.w	8013454 <dir_register+0x334>
 8013976:	2007      	movs	r0, #7
 8013978:	e562      	b.n	8013440 <dir_register+0x320>
	ns[i] = '~';
 801397a:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 801397c:	f04f 0c06 	mov.w	ip, #6
	ns[i] = '~';
 8013980:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013984:	e548      	b.n	8013418 <dir_register+0x2f8>
	ns[i] = '~';
 8013986:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8013988:	f04f 0c05 	mov.w	ip, #5
	ns[i] = '~';
 801398c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8013990:	e542      	b.n	8013418 <dir_register+0x2f8>
	ns[i] = '~';
 8013992:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 8013994:	f04f 0c04 	mov.w	ip, #4
	ns[i] = '~';
 8013998:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	for (j = 0; j < i && dst[j] != ' '; j++) {
 801399c:	e53c      	b.n	8013418 <dir_register+0x2f8>
	ns[i] = '~';
 801399e:	227e      	movs	r2, #126	; 0x7e
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80139a0:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 80139a4:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80139a8:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80139ac:	4662      	mov	r2, ip
 80139ae:	e745      	b.n	801383c <dir_register+0x71c>
	ns[i] = '~';
 80139b0:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80139b2:	f04f 0c03 	mov.w	ip, #3
	ns[i] = '~';
 80139b6:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80139ba:	e52d      	b.n	8013418 <dir_register+0x2f8>
	ns[i] = '~';
 80139bc:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80139be:	f04f 0c02 	mov.w	ip, #2
	ns[i] = '~';
 80139c2:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80139c6:	e527      	b.n	8013418 <dir_register+0x2f8>
	ns[i] = '~';
 80139c8:	227e      	movs	r2, #126	; 0x7e
		ns[i--] = c;
 80139ca:	f04f 0c01 	mov.w	ip, #1
	ns[i] = '~';
 80139ce:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80139d2:	e521      	b.n	8013418 <dir_register+0x2f8>
	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80139d4:	2006      	movs	r0, #6
}
 80139d6:	b013      	add	sp, #76	; 0x4c
 80139d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80139dc:	4693      	mov	fp, r2
 80139de:	f7ff bbb8 	b.w	8013152 <dir_register+0x32>
	*ptr++ = (BYTE)val; val >>= 8;
 80139e2:	f8a3 e007 	strh.w	lr, [r3, #7]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80139e6:	e5c7      	b.n	8013578 <dir_register+0x458>
	*ptr++ = (BYTE)val; val >>= 8;
 80139e8:	f8a3 a01e 	strh.w	sl, [r3, #30]
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80139ec:	e5e0      	b.n	80135b0 <dir_register+0x490>
	*ptr++ = (BYTE)val; val >>= 8;
 80139ee:	f8a3 e018 	strh.w	lr, [r3, #24]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80139f2:	e5d7      	b.n	80135a4 <dir_register+0x484>
	*ptr++ = (BYTE)val; val >>= 8;
 80139f4:	f8a3 e016 	strh.w	lr, [r3, #22]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80139f8:	e5d1      	b.n	801359e <dir_register+0x47e>
	*ptr++ = (BYTE)val; val >>= 8;
 80139fa:	f8a3 e014 	strh.w	lr, [r3, #20]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80139fe:	e5cb      	b.n	8013598 <dir_register+0x478>
	*ptr++ = (BYTE)val; val >>= 8;
 8013a00:	f8a3 e012 	strh.w	lr, [r3, #18]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013a04:	e5c5      	b.n	8013592 <dir_register+0x472>
	*ptr++ = (BYTE)val; val >>= 8;
 8013a06:	f8a3 e00e 	strh.w	lr, [r3, #14]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013a0a:	e5bc      	b.n	8013586 <dir_register+0x466>
	*ptr++ = (BYTE)val; val >>= 8;
 8013a0c:	f8a3 e009 	strh.w	lr, [r3, #9]
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013a10:	e5b6      	b.n	8013580 <dir_register+0x460>
			*d++ = *s++;
 8013a12:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8013a16:	701a      	strb	r2, [r3, #0]
 8013a18:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
 8013a1c:	705a      	strb	r2, [r3, #1]
 8013a1e:	f894 2026 	ldrb.w	r2, [r4, #38]	; 0x26
 8013a22:	709a      	strb	r2, [r3, #2]
 8013a24:	f894 2027 	ldrb.w	r2, [r4, #39]	; 0x27
 8013a28:	70da      	strb	r2, [r3, #3]
 8013a2a:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8013a2e:	711a      	strb	r2, [r3, #4]
 8013a30:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8013a34:	715a      	strb	r2, [r3, #5]
 8013a36:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8013a3a:	719a      	strb	r2, [r3, #6]
 8013a3c:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
 8013a40:	71da      	strb	r2, [r3, #7]
 8013a42:	e6d0      	b.n	80137e6 <dir_register+0x6c6>

08013a44 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8013a44:	b510      	push	{r4, lr}
 8013a46:	b082      	sub	sp, #8
 8013a48:	e9cd 1000 	strd	r1, r0, [sp]
	if (*path) {	/* If the pointer is not a null */
 8013a4c:	b1a1      	cbz	r1, 8013a78 <f_mount+0x34>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013a4e:	f891 c000 	ldrb.w	ip, [r1]
 8013a52:	f1bc 0f1f 	cmp.w	ip, #31
 8013a56:	d912      	bls.n	8013a7e <f_mount+0x3a>
 8013a58:	f1bc 0f3a 	cmp.w	ip, #58	; 0x3a
 8013a5c:	d00f      	beq.n	8013a7e <f_mount+0x3a>
 8013a5e:	4608      	mov	r0, r1
 8013a60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8013a64:	2b1f      	cmp	r3, #31
 8013a66:	d90c      	bls.n	8013a82 <f_mount+0x3e>
 8013a68:	2b3a      	cmp	r3, #58	; 0x3a
 8013a6a:	d1f9      	bne.n	8013a60 <f_mount+0x1c>
			i = *tp++ - '0';
 8013a6c:	3101      	adds	r1, #1
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013a6e:	4288      	cmp	r0, r1
 8013a70:	d102      	bne.n	8013a78 <f_mount+0x34>
 8013a72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8013a76:	d006      	beq.n	8013a86 <f_mount+0x42>
	const TCHAR *rp = path;


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
	if (vol < 0) return FR_INVALID_DRIVE;
 8013a78:	200b      	movs	r0, #11

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
	LEAVE_FF(fs, res);
}
 8013a7a:	b002      	add	sp, #8
 8013a7c:	bd10      	pop	{r4, pc}
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013a7e:	4663      	mov	r3, ip
 8013a80:	4608      	mov	r0, r1
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013a82:	2b3a      	cmp	r3, #58	; 0x3a
 8013a84:	d0f2      	beq.n	8013a6c <f_mount+0x28>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8013a86:	4916      	ldr	r1, [pc, #88]	; (8013ae0 <f_mount+0x9c>)
 8013a88:	680b      	ldr	r3, [r1, #0]
	if (cfs) {
 8013a8a:	b143      	cbz	r3, 8013a9e <f_mount+0x5a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013a8c:	4815      	ldr	r0, [pc, #84]	; (8013ae4 <f_mount+0xa0>)
 8013a8e:	6804      	ldr	r4, [r0, #0]
 8013a90:	42a3      	cmp	r3, r4
 8013a92:	d01c      	beq.n	8013ace <f_mount+0x8a>
 8013a94:	6904      	ldr	r4, [r0, #16]
 8013a96:	429c      	cmp	r4, r3
 8013a98:	d016      	beq.n	8013ac8 <f_mount+0x84>
		cfs->fs_type = 0;				/* Clear old fs object */
 8013a9a:	2000      	movs	r0, #0
 8013a9c:	7018      	strb	r0, [r3, #0]
	if (fs) {
 8013a9e:	9b01      	ldr	r3, [sp, #4]
 8013aa0:	b173      	cbz	r3, 8013ac0 <f_mount+0x7c>
		fs->fs_type = 0;				/* Clear new fs object */
 8013aa2:	2000      	movs	r0, #0
 8013aa4:	7018      	strb	r0, [r3, #0]
	FatFs[vol] = fs;					/* Register new fs object */
 8013aa6:	9b01      	ldr	r3, [sp, #4]
 8013aa8:	600b      	str	r3, [r1, #0]
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013aaa:	b1b3      	cbz	r3, 8013ada <f_mount+0x96>
 8013aac:	3a01      	subs	r2, #1
 8013aae:	bf18      	it	ne
 8013ab0:	2201      	movne	r2, #1
 8013ab2:	b992      	cbnz	r2, 8013ada <f_mount+0x96>
	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8013ab4:	a901      	add	r1, sp, #4
 8013ab6:	4668      	mov	r0, sp
 8013ab8:	f7fd ff2a 	bl	8011910 <find_volume>
}
 8013abc:	b002      	add	sp, #8
 8013abe:	bd10      	pop	{r4, pc}
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013ac0:	4618      	mov	r0, r3
	FatFs[vol] = fs;					/* Register new fs object */
 8013ac2:	600b      	str	r3, [r1, #0]
}
 8013ac4:	b002      	add	sp, #8
 8013ac6:	bd10      	pop	{r4, pc}
		if (Files[i].fs == fs) Files[i].fs = 0;
 8013ac8:	2400      	movs	r4, #0
 8013aca:	6104      	str	r4, [r0, #16]
 8013acc:	e7e5      	b.n	8013a9a <f_mount+0x56>
 8013ace:	2400      	movs	r4, #0
 8013ad0:	6004      	str	r4, [r0, #0]
 8013ad2:	6904      	ldr	r4, [r0, #16]
 8013ad4:	429c      	cmp	r4, r3
 8013ad6:	d1e0      	bne.n	8013a9a <f_mount+0x56>
 8013ad8:	e7f6      	b.n	8013ac8 <f_mount+0x84>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8013ada:	2000      	movs	r0, #0
}
 8013adc:	b002      	add	sp, #8
 8013ade:	bd10      	pop	{r4, pc}
 8013ae0:	20019bf8 	.word	0x20019bf8
 8013ae4:	20019bfc 	.word	0x20019bfc

08013ae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8013ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013aec:	b092      	sub	sp, #72	; 0x48
 8013aee:	9101      	str	r1, [sp, #4]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8013af0:	2800      	cmp	r0, #0
 8013af2:	f000 80a1 	beq.w	8013c38 <f_open+0x150>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8013af6:	f002 073f 	and.w	r7, r2, #63	; 0x3f
	res = find_volume(&path, &fs, mode);
 8013afa:	4616      	mov	r6, r2
 8013afc:	4604      	mov	r4, r0
 8013afe:	a903      	add	r1, sp, #12
 8013b00:	a801      	add	r0, sp, #4
 8013b02:	463a      	mov	r2, r7
 8013b04:	f7fd ff04 	bl	8011910 <find_volume>
	if (res == FR_OK) {
 8013b08:	4605      	mov	r5, r0
 8013b0a:	b128      	cbz	r0, 8013b18 <f_open+0x30>
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8013b0c:	2300      	movs	r3, #0
 8013b0e:	6023      	str	r3, [r4, #0]

	LEAVE_FF(fs, res);
}
 8013b10:	4628      	mov	r0, r5
 8013b12:	b012      	add	sp, #72	; 0x48
 8013b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		dj.obj.fs = fs;
 8013b18:	9b03      	ldr	r3, [sp, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013b1a:	a804      	add	r0, sp, #16
 8013b1c:	9901      	ldr	r1, [sp, #4]
		dj.obj.fs = fs;
 8013b1e:	9304      	str	r3, [sp, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8013b20:	f7fe ff6e 	bl	8012a00 <follow_path>
		if (res == FR_OK) {
 8013b24:	bb00      	cbnz	r0, 8013b68 <f_open+0x80>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8013b26:	f99d 303f 	ldrsb.w	r3, [sp, #63]	; 0x3f
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	f2c0 808b 	blt.w	8013c46 <f_open+0x15e>
		if (Files[i].fs) {	/* Existing entry */
 8013b30:	4ba7      	ldr	r3, [pc, #668]	; (8013dd0 <f_open+0x2e8>)
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013b32:	f027 0201 	bic.w	r2, r7, #1
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013b36:	9804      	ldr	r0, [sp, #16]
		if (Files[i].fs) {	/* Existing entry */
 8013b38:	f8d3 8000 	ldr.w	r8, [r3]
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013b3c:	4611      	mov	r1, r2
				Files[i].clu == dp->obj.sclust &&
 8013b3e:	f8dd c018 	ldr.w	ip, [sp, #24]
				Files[i].ofs == dp->dptr) break;
 8013b42:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
		if (Files[i].fs) {	/* Existing entry */
 8013b46:	f1b8 0f00 	cmp.w	r8, #0
 8013b4a:	f000 80fe 	beq.w	8013d4a <f_open+0x262>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013b4e:	4580      	cmp	r8, r0
 8013b50:	d07b      	beq.n	8013c4a <f_open+0x162>
		if (Files[i].fs) {	/* Existing entry */
 8013b52:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8013b56:	f1b8 0f00 	cmp.w	r8, #0
 8013b5a:	f000 808e 	beq.w	8013c7a <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013b5e:	4580      	cmp	r8, r0
 8013b60:	f000 8103 	beq.w	8013d6a <f_open+0x282>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013b64:	2512      	movs	r5, #18
 8013b66:	e7d1      	b.n	8013b0c <f_open+0x24>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013b68:	f016 0f1c 	tst.w	r6, #28
 8013b6c:	d069      	beq.n	8013c42 <f_open+0x15a>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8013b6e:	2804      	cmp	r0, #4
 8013b70:	d167      	bne.n	8013c42 <f_open+0x15a>
	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8013b72:	4b97      	ldr	r3, [pc, #604]	; (8013dd0 <f_open+0x2e8>)
 8013b74:	681a      	ldr	r2, [r3, #0]
 8013b76:	b112      	cbz	r2, 8013b7e <f_open+0x96>
 8013b78:	691b      	ldr	r3, [r3, #16]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d1f2      	bne.n	8013b64 <f_open+0x7c>
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013b7e:	a804      	add	r0, sp, #16
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8013b80:	f047 0708 	orr.w	r7, r7, #8
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8013b84:	f7ff facc 	bl	8013120 <dir_register>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013b88:	2800      	cmp	r0, #0
 8013b8a:	d15a      	bne.n	8013c42 <f_open+0x15a>
				dw = GET_FATTIME();
 8013b8c:	f7fd fbd2 	bl	8011334 <get_fattime>
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8013b90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8013b92:	f3c0 2607 	ubfx	r6, r0, #8, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013b96:	f3c0 4207 	ubfx	r2, r0, #16, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8013b9a:	fa5f fc80 	uxtb.w	ip, r0
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013b9e:	f04f 0e20 	mov.w	lr, #32
	*ptr++ = (BYTE)val;
 8013ba2:	0e00      	lsrs	r0, r0, #24
	*ptr++ = (BYTE)val; val >>= 8;
 8013ba4:	73de      	strb	r6, [r3, #15]
	*ptr++ = (BYTE)val; val >>= 8;
 8013ba6:	f883 c00e 	strb.w	ip, [r3, #14]
	*ptr++ = (BYTE)val; val >>= 8;
 8013baa:	741a      	strb	r2, [r3, #16]
	*ptr++ = (BYTE)val;
 8013bac:	7458      	strb	r0, [r3, #17]
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8013bae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013bb0:	9903      	ldr	r1, [sp, #12]
	*ptr++ = (BYTE)val; val >>= 8;
 8013bb2:	75de      	strb	r6, [r3, #23]
	*ptr++ = (BYTE)val; val >>= 8;
 8013bb4:	f883 c016 	strb.w	ip, [r3, #22]
	*ptr++ = (BYTE)val; val >>= 8;
 8013bb8:	761a      	strb	r2, [r3, #24]
	*ptr++ = (BYTE)val;
 8013bba:	7658      	strb	r0, [r3, #25]
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8013bbc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013bbe:	f883 e00b 	strb.w	lr, [r3, #11]
	if (fs->fs_type == FS_FAT32) {
 8013bc2:	780a      	ldrb	r2, [r1, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8013bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8013bc6:	2a03      	cmp	r2, #3
	cl = ld_word(dir + DIR_FstClusLO);
 8013bc8:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8013bca:	d102      	bne.n	8013bd2 <f_open+0xea>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013bcc:	8a9a      	ldrh	r2, [r3, #20]
 8013bce:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
	*ptr++ = (BYTE)val; val >>= 8;
 8013bd2:	2200      	movs	r2, #0
 8013bd4:	835a      	strh	r2, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8013bd6:	7808      	ldrb	r0, [r1, #0]
 8013bd8:	2803      	cmp	r0, #3
 8013bda:	d100      	bne.n	8013bde <f_open+0xf6>
	*ptr++ = (BYTE)val; val >>= 8;
 8013bdc:	829a      	strh	r2, [r3, #20]
					st_dword(dj.dir + DIR_FileSize, 0);
 8013bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	*ptr++ = (BYTE)val; val >>= 8;
 8013be0:	2200      	movs	r2, #0
 8013be2:	61da      	str	r2, [r3, #28]
					fs->wflag = 1;
 8013be4:	2301      	movs	r3, #1
 8013be6:	70cb      	strb	r3, [r1, #3]
						dw = fs->winsect;
 8013be8:	9b03      	ldr	r3, [sp, #12]
					if (cl) {							/* Remove the cluster chain if exist */
 8013bea:	b19e      	cbz	r6, 8013c14 <f_open+0x12c>
						res = remove_chain(&dj.obj, cl, 0);
 8013bec:	4631      	mov	r1, r6
 8013bee:	a804      	add	r0, sp, #16
						dw = fs->winsect;
 8013bf0:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
						res = remove_chain(&dj.obj, cl, 0);
 8013bf4:	f7ff f890 	bl	8012d18 <remove_chain>
						if (res == FR_OK) {
 8013bf8:	bb18      	cbnz	r0, 8013c42 <f_open+0x15a>
							res = move_window(fs, dw);
 8013bfa:	9b03      	ldr	r3, [sp, #12]
	if (sector != fs->winsect) {	/* Window offset changed? */
 8013bfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013bfe:	4590      	cmp	r8, r2
 8013c00:	f000 80e3 	beq.w	8013dca <f_open+0x2e2>
 8013c04:	4618      	mov	r0, r3
 8013c06:	4641      	mov	r1, r8
 8013c08:	f7fd fe48 	bl	801189c <move_window.part.0>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013c0c:	3e01      	subs	r6, #1
 8013c0e:	9b03      	ldr	r3, [sp, #12]
 8013c10:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8013c12:	b9b0      	cbnz	r0, 8013c42 <f_open+0x15a>
				mode |= FA_MODIFIED;
 8013c14:	f047 0740 	orr.w	r7, r7, #64	; 0x40
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013c18:	f027 0101 	bic.w	r1, r7, #1
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013c1e:	3900      	subs	r1, #0
 8013c20:	a804      	add	r0, sp, #16
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013c22:	6263      	str	r3, [r4, #36]	; 0x24
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013c24:	bf18      	it	ne
 8013c26:	2101      	movne	r1, #1
			fp->dir_ptr = dj.dir;
 8013c28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013c2a:	62a3      	str	r3, [r4, #40]	; 0x28
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013c2c:	f7fd fcb0 	bl	8011590 <inc_lock>
 8013c30:	6120      	str	r0, [r4, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8013c32:	bb70      	cbnz	r0, 8013c92 <f_open+0x1aa>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8013c34:	2502      	movs	r5, #2
 8013c36:	e769      	b.n	8013b0c <f_open+0x24>
	if (!fp) return FR_INVALID_OBJECT;
 8013c38:	2509      	movs	r5, #9
}
 8013c3a:	4628      	mov	r0, r5
 8013c3c:	b012      	add	sp, #72	; 0x48
 8013c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c42:	4605      	mov	r5, r0
 8013c44:	e762      	b.n	8013b0c <f_open+0x24>
				res = FR_INVALID_NAME;
 8013c46:	2506      	movs	r5, #6
 8013c48:	e760      	b.n	8013b0c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013c4a:	6858      	ldr	r0, [r3, #4]
 8013c4c:	4560      	cmp	r0, ip
 8013c4e:	f000 8095 	beq.w	8013d7c <f_open+0x294>
		if (Files[i].fs) {	/* Existing entry */
 8013c52:	6918      	ldr	r0, [r3, #16]
 8013c54:	b188      	cbz	r0, 8013c7a <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013c56:	4540      	cmp	r0, r8
 8013c58:	d184      	bne.n	8013b64 <f_open+0x7c>
 8013c5a:	6958      	ldr	r0, [r3, #20]
 8013c5c:	4560      	cmp	r0, ip
 8013c5e:	d181      	bne.n	8013b64 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8013c60:	6998      	ldr	r0, [r3, #24]
 8013c62:	4570      	cmp	r0, lr
 8013c64:	f47f af7e 	bne.w	8013b64 <f_open+0x7c>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013c68:	2001      	movs	r0, #1
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013c6a:	2a00      	cmp	r2, #0
 8013c6c:	d164      	bne.n	8013d38 <f_open+0x250>
 8013c6e:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8013c72:	899b      	ldrh	r3, [r3, #12]
 8013c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013c78:	d05e      	beq.n	8013d38 <f_open+0x250>
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8013c7a:	f016 0f1c 	tst.w	r6, #28
 8013c7e:	d04b      	beq.n	8013d18 <f_open+0x230>
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8013c80:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013c84:	f013 0f11 	tst.w	r3, #17
 8013c88:	d15d      	bne.n	8013d46 <f_open+0x25e>
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8013c8a:	0773      	lsls	r3, r6, #29
 8013c8c:	d556      	bpl.n	8013d3c <f_open+0x254>
 8013c8e:	2508      	movs	r5, #8
 8013c90:	e73c      	b.n	8013b0c <f_open+0x24>
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013c92:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8013c96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	if (fs->fs_type == FS_FAT32) {
 8013c98:	f899 2000 	ldrb.w	r2, [r9]
	cl = ld_word(dir + DIR_FstClusLO);
 8013c9c:	8b5e      	ldrh	r6, [r3, #26]
	if (fs->fs_type == FS_FAT32) {
 8013c9e:	2a03      	cmp	r2, #3
 8013ca0:	d102      	bne.n	8013ca8 <f_open+0x1c0>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8013ca2:	8a9a      	ldrh	r2, [r3, #20]
 8013ca4:	ea46 4602 	orr.w	r6, r6, r2, lsl #16
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013ca8:	2100      	movs	r1, #0
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8013caa:	60a6      	str	r6, [r4, #8]
	rv = rv << 8 | ptr[0];
 8013cac:	f8d3 801c 	ldr.w	r8, [r3, #28]
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8013cb0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
			fp->cltbl = 0;			/* Disable fast seek mode */
 8013cb4:	62e1      	str	r1, [r4, #44]	; 0x2c
		*d++ = (BYTE)val;
 8013cb6:	f44f 7200 	mov.w	r2, #512	; 0x200
			fp->obj.fs = fs;	 	/* Validate the file object */
 8013cba:	f8c4 9000 	str.w	r9, [r4]
		*d++ = (BYTE)val;
 8013cbe:	4650      	mov	r0, sl
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8013cc0:	f8c4 800c 	str.w	r8, [r4, #12]
			fp->obj.id = fs->id;
 8013cc4:	f8b9 3006 	ldrh.w	r3, [r9, #6]
			fp->err = 0;			/* Clear error flag */
 8013cc8:	7561      	strb	r1, [r4, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8013cca:	6221      	str	r1, [r4, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8013ccc:	61a1      	str	r1, [r4, #24]
			fp->obj.id = fs->id;
 8013cce:	80a3      	strh	r3, [r4, #4]
			fp->flag = mode;		/* Set file access mode */
 8013cd0:	7527      	strb	r7, [r4, #20]
		*d++ = (BYTE)val;
 8013cd2:	f009 fbff 	bl	801d4d4 <memset>
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8013cd6:	06b9      	lsls	r1, r7, #26
 8013cd8:	f57f af1a 	bpl.w	8013b10 <f_open+0x28>
 8013cdc:	f1b8 0f00 	cmp.w	r8, #0
 8013ce0:	f43f af16 	beq.w	8013b10 <f_open+0x28>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8013ce4:	f8c4 8018 	str.w	r8, [r4, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013ce8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013cec:	ebb8 2f43 	cmp.w	r8, r3, lsl #9
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8013cf0:	ea4f 2743 	mov.w	r7, r3, lsl #9
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013cf4:	d804      	bhi.n	8013d00 <f_open+0x218>
 8013cf6:	e047      	b.n	8013d88 <f_open+0x2a0>
 8013cf8:	1c42      	adds	r2, r0, #1
 8013cfa:	d06b      	beq.n	8013dd4 <f_open+0x2ec>
 8013cfc:	4547      	cmp	r7, r8
 8013cfe:	d269      	bcs.n	8013dd4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8013d00:	4631      	mov	r1, r6
 8013d02:	6820      	ldr	r0, [r4, #0]
 8013d04:	f7fe f816 	bl	8011d34 <get_fat.isra.0>
					if (clst <= 1) res = FR_INT_ERR;
 8013d08:	2801      	cmp	r0, #1
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8013d0a:	eba8 0807 	sub.w	r8, r8, r7
					clst = get_fat(&fp->obj, clst);
 8013d0e:	4606      	mov	r6, r0
					if (clst <= 1) res = FR_INT_ERR;
 8013d10:	d8f2      	bhi.n	8013cf8 <f_open+0x210>
 8013d12:	2502      	movs	r5, #2
				fp->clust = clst;
 8013d14:	61e0      	str	r0, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013d16:	e6f9      	b.n	8013b0c <f_open+0x24>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8013d18:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8013d1c:	06d9      	lsls	r1, r3, #27
 8013d1e:	d422      	bmi.n	8013d66 <f_open+0x27e>
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8013d20:	07b1      	lsls	r1, r6, #30
 8013d22:	d501      	bpl.n	8013d28 <f_open+0x240>
 8013d24:	07d8      	lsls	r0, r3, #31
 8013d26:	d40e      	bmi.n	8013d46 <f_open+0x25e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013d28:	f006 0608 	and.w	r6, r6, #8
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013d2c:	9b03      	ldr	r3, [sp, #12]
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8013d2e:	2e00      	cmp	r6, #0
 8013d30:	f47f af70 	bne.w	8013c14 <f_open+0x12c>
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8013d34:	4611      	mov	r1, r2
 8013d36:	e771      	b.n	8013c1c <f_open+0x134>
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8013d38:	2510      	movs	r5, #16
 8013d3a:	e6e7      	b.n	8013b0c <f_open+0x24>
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8013d3c:	0730      	lsls	r0, r6, #28
 8013d3e:	f53f af25 	bmi.w	8013b8c <f_open+0xa4>
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8013d42:	9b03      	ldr	r3, [sp, #12]
 8013d44:	e76a      	b.n	8013c1c <f_open+0x134>
						res = FR_DENIED;
 8013d46:	2507      	movs	r5, #7
 8013d48:	e6e0      	b.n	8013b0c <f_open+0x24>
		if (Files[i].fs) {	/* Existing entry */
 8013d4a:	f8d3 8010 	ldr.w	r8, [r3, #16]
 8013d4e:	f1b8 0f00 	cmp.w	r8, #0
 8013d52:	d092      	beq.n	8013c7a <f_open+0x192>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013d54:	4540      	cmp	r0, r8
 8013d56:	d190      	bne.n	8013c7a <f_open+0x192>
 8013d58:	6958      	ldr	r0, [r3, #20]
 8013d5a:	4560      	cmp	r0, ip
 8013d5c:	d18d      	bne.n	8013c7a <f_open+0x192>
				Files[i].clu == dp->obj.sclust &&
 8013d5e:	6998      	ldr	r0, [r3, #24]
 8013d60:	4586      	cmp	lr, r0
 8013d62:	d18a      	bne.n	8013c7a <f_open+0x192>
 8013d64:	e780      	b.n	8013c68 <f_open+0x180>
					res = FR_NO_FILE;
 8013d66:	2504      	movs	r5, #4
 8013d68:	e6d0      	b.n	8013b0c <f_open+0x24>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8013d6a:	6958      	ldr	r0, [r3, #20]
 8013d6c:	4560      	cmp	r0, ip
 8013d6e:	f47f aef9 	bne.w	8013b64 <f_open+0x7c>
				Files[i].clu == dp->obj.sclust &&
 8013d72:	6998      	ldr	r0, [r3, #24]
 8013d74:	4586      	cmp	lr, r0
 8013d76:	f47f aef5 	bne.w	8013b64 <f_open+0x7c>
 8013d7a:	e775      	b.n	8013c68 <f_open+0x180>
 8013d7c:	6898      	ldr	r0, [r3, #8]
 8013d7e:	4570      	cmp	r0, lr
 8013d80:	f47f af67 	bne.w	8013c52 <f_open+0x16a>
	for (i = be = 0; i < _FS_LOCK; i++) {
 8013d84:	4628      	mov	r0, r5
 8013d86:	e770      	b.n	8013c6a <f_open+0x182>
				fp->clust = clst;
 8013d88:	61e6      	str	r6, [r4, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013d8a:	f3c8 0308 	ubfx	r3, r8, #0, #9
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f43f aebe 	beq.w	8013b10 <f_open+0x28>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013d94:	9803      	ldr	r0, [sp, #12]
	clst -= 2;
 8013d96:	3e02      	subs	r6, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013d98:	6983      	ldr	r3, [r0, #24]
 8013d9a:	3b02      	subs	r3, #2
 8013d9c:	429e      	cmp	r6, r3
 8013d9e:	f4bf af49 	bcs.w	8013c34 <f_open+0x14c>
	return clst * fs->csize + fs->database;
 8013da2:	8942      	ldrh	r2, [r0, #10]
 8013da4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8013da6:	fb06 3202 	mla	r2, r6, r2, r3
					if ((sc = clust2sect(fs, clst)) == 0) {
 8013daa:	2a00      	cmp	r2, #0
 8013dac:	f43f af42 	beq.w	8013c34 <f_open+0x14c>
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013db0:	eb02 2258 	add.w	r2, r2, r8, lsr #9
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013db4:	4651      	mov	r1, sl
 8013db6:	2301      	movs	r3, #1
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8013db8:	6222      	str	r2, [r4, #32]
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8013dba:	7840      	ldrb	r0, [r0, #1]
 8013dbc:	f7fd fbc0 	bl	8011540 <disk_read>
 8013dc0:	2800      	cmp	r0, #0
 8013dc2:	f43f aea5 	beq.w	8013b10 <f_open+0x28>
 8013dc6:	2501      	movs	r5, #1
 8013dc8:	e6a0      	b.n	8013b0c <f_open+0x24>
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8013dca:	3e01      	subs	r6, #1
 8013dcc:	611e      	str	r6, [r3, #16]
		if (res == FR_OK) {
 8013dce:	e721      	b.n	8013c14 <f_open+0x12c>
 8013dd0:	20019bfc 	.word	0x20019bfc
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013dd4:	1c70      	adds	r0, r6, #1
				fp->clust = clst;
 8013dd6:	61e6      	str	r6, [r4, #28]
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013dd8:	bf0c      	ite	eq
 8013dda:	2301      	moveq	r3, #1
 8013ddc:	2300      	movne	r3, #0
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8013dde:	d1d4      	bne.n	8013d8a <f_open+0x2a2>
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8013de0:	461d      	mov	r5, r3
 8013de2:	e693      	b.n	8013b0c <f_open+0x24>

08013de4 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8013de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013de8:	461e      	mov	r6, r3
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;


	*br = 0;	/* Clear read byte counter */
 8013dea:	2300      	movs	r3, #0
{
 8013dec:	b085      	sub	sp, #20
	*br = 0;	/* Clear read byte counter */
 8013dee:	6033      	str	r3, [r6, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8013df0:	b150      	cbz	r0, 8013e08 <f_read+0x24>
 8013df2:	6803      	ldr	r3, [r0, #0]
 8013df4:	4604      	mov	r4, r0
 8013df6:	b13b      	cbz	r3, 8013e08 <f_read+0x24>
 8013df8:	4617      	mov	r7, r2
 8013dfa:	781a      	ldrb	r2, [r3, #0]
 8013dfc:	b122      	cbz	r2, 8013e08 <f_read+0x24>
 8013dfe:	460d      	mov	r5, r1
 8013e00:	88da      	ldrh	r2, [r3, #6]
 8013e02:	8881      	ldrh	r1, [r0, #4]
 8013e04:	4291      	cmp	r1, r2
 8013e06:	d005      	beq.n	8013e14 <f_read+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 8013e08:	f04f 0809 	mov.w	r8, #9
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
	}

	LEAVE_FF(fs, FR_OK);
}
 8013e0c:	4640      	mov	r0, r8
 8013e0e:	b005      	add	sp, #20
 8013e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8013e14:	7858      	ldrb	r0, [r3, #1]
 8013e16:	f7fd fb77 	bl	8011508 <disk_status>
 8013e1a:	07c2      	lsls	r2, r0, #31
 8013e1c:	d4f4      	bmi.n	8013e08 <f_read+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8013e1e:	f894 8015 	ldrb.w	r8, [r4, #21]
 8013e22:	f1b8 0f00 	cmp.w	r8, #0
 8013e26:	d1f1      	bne.n	8013e0c <f_read+0x28>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013e28:	7d23      	ldrb	r3, [r4, #20]
 8013e2a:	f013 0301 	ands.w	r3, r3, #1
 8013e2e:	9300      	str	r3, [sp, #0]
 8013e30:	f000 80d8 	beq.w	8013fe4 <f_read+0x200>
	remain = fp->obj.objsize - fp->fptr;
 8013e34:	69a1      	ldr	r1, [r4, #24]
 8013e36:	68e3      	ldr	r3, [r4, #12]
 8013e38:	1a5b      	subs	r3, r3, r1
 8013e3a:	429f      	cmp	r7, r3
 8013e3c:	bf28      	it	cs
 8013e3e:	461f      	movcs	r7, r3
	for ( ;  btr;								/* Repeat until all data read */
 8013e40:	2f00      	cmp	r7, #0
 8013e42:	d0e3      	beq.n	8013e0c <f_read+0x28>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013e44:	f104 0331 	add.w	r3, r4, #49	; 0x31
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013e48:	46a2      	mov	sl, r4
 8013e4a:	f8cd 8008 	str.w	r8, [sp, #8]
 8013e4e:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013e50:	f3c1 0308 	ubfx	r3, r1, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8013e54:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d142      	bne.n	8013ee2 <f_read+0xfe>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8013e5c:	f8b9 200a 	ldrh.w	r2, [r9, #10]
 8013e60:	0a4b      	lsrs	r3, r1, #9
 8013e62:	3a01      	subs	r2, #1
			if (csect == 0) {					/* On the cluster boundary? */
 8013e64:	ea12 2251 	ands.w	r2, r2, r1, lsr #9
 8013e68:	d06d      	beq.n	8013f46 <f_read+0x162>
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8013e6a:	69e0      	ldr	r0, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013e6c:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8013e70:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013e72:	3b02      	subs	r3, #2
 8013e74:	4298      	cmp	r0, r3
 8013e76:	d273      	bcs.n	8013f60 <f_read+0x17c>
	return clst * fs->csize + fs->database;
 8013e78:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8013e7c:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8013e80:	fb01 3000 	mla	r0, r1, r0, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 8013e84:	2800      	cmp	r0, #0
 8013e86:	d06b      	beq.n	8013f60 <f_read+0x17c>
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013e88:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
			sect += csect;
 8013e8c:	eb02 0b00 	add.w	fp, r2, r0
			if (cc) {							/* Read maximum contiguous sectors directly */
 8013e90:	d36d      	bcc.n	8013f6e <f_read+0x18a>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013e92:	eb02 2057 	add.w	r0, r2, r7, lsr #9
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8013e96:	ea4f 2857 	mov.w	r8, r7, lsr #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8013e9a:	4288      	cmp	r0, r1
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013e9c:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8013ea0:	bf88      	it	hi
 8013ea2:	eba1 0802 	subhi.w	r8, r1, r2
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ea6:	465a      	mov	r2, fp
 8013ea8:	4629      	mov	r1, r5
 8013eaa:	4643      	mov	r3, r8
 8013eac:	f7fd fb48 	bl	8011540 <disk_read>
 8013eb0:	2800      	cmp	r0, #0
 8013eb2:	f040 8085 	bne.w	8013fc0 <f_read+0x1dc>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8013eb6:	f994 2014 	ldrsb.w	r2, [r4, #20]
 8013eba:	2a00      	cmp	r2, #0
 8013ebc:	f2c0 80a9 	blt.w	8014012 <f_read+0x22e>
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8013ec0:	ea4f 2148 	mov.w	r1, r8, lsl #9
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013ec4:	69a3      	ldr	r3, [r4, #24]
	for ( ;  btr;								/* Repeat until all data read */
 8013ec6:	1a7f      	subs	r7, r7, r1
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8013ec8:	440d      	add	r5, r1
 8013eca:	440b      	add	r3, r1
 8013ecc:	61a3      	str	r3, [r4, #24]
 8013ece:	6833      	ldr	r3, [r6, #0]
 8013ed0:	440b      	add	r3, r1
 8013ed2:	6033      	str	r3, [r6, #0]
	for ( ;  btr;								/* Repeat until all data read */
 8013ed4:	f000 80b3 	beq.w	801403e <f_read+0x25a>
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8013ed8:	69a1      	ldr	r1, [r4, #24]
 8013eda:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8013ede:	2b00      	cmp	r3, #0
 8013ee0:	d0bc      	beq.n	8013e5c <f_read+0x78>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013ee2:	1c58      	adds	r0, r3, #1
 8013ee4:	f5c3 7100 	rsb	r1, r3, #512	; 0x200
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8013ee8:	4453      	add	r3, sl
 8013eea:	4450      	add	r0, sl
 8013eec:	42b9      	cmp	r1, r7
 8013eee:	eba5 0000 	sub.w	r0, r5, r0
 8013ef2:	bf28      	it	cs
 8013ef4:	4639      	movcs	r1, r7
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8013ef6:	2802      	cmp	r0, #2
 8013ef8:	f101 3bff 	add.w	fp, r1, #4294967295	; 0xffffffff
 8013efc:	d968      	bls.n	8013fd0 <f_read+0x1ec>
 8013efe:	f1bb 0f07 	cmp.w	fp, #7
 8013f02:	d965      	bls.n	8013fd0 <f_read+0x1ec>
 8013f04:	f021 0e03 	bic.w	lr, r1, #3
 8013f08:	461a      	mov	r2, r3
 8013f0a:	4628      	mov	r0, r5
 8013f0c:	449e      	add	lr, r3
			*d++ = *s++;
 8013f0e:	f852 cb04 	ldr.w	ip, [r2], #4
 8013f12:	4596      	cmp	lr, r2
 8013f14:	f840 cb04 	str.w	ip, [r0], #4
		} while (--cnt);
 8013f18:	d1f9      	bne.n	8013f0e <f_read+0x12a>
 8013f1a:	f021 0203 	bic.w	r2, r1, #3
 8013f1e:	4291      	cmp	r1, r2
 8013f20:	eb05 0002 	add.w	r0, r5, r2
 8013f24:	eb03 0c02 	add.w	ip, r3, r2
 8013f28:	d0cc      	beq.n	8013ec4 <f_read+0xe0>
			*d++ = *s++;
 8013f2a:	5c9b      	ldrb	r3, [r3, r2]
 8013f2c:	54ab      	strb	r3, [r5, r2]
		} while (--cnt);
 8013f2e:	ebbb 0202 	subs.w	r2, fp, r2
 8013f32:	d0c7      	beq.n	8013ec4 <f_read+0xe0>
			*d++ = *s++;
 8013f34:	f89c 3001 	ldrb.w	r3, [ip, #1]
		} while (--cnt);
 8013f38:	2a01      	cmp	r2, #1
			*d++ = *s++;
 8013f3a:	7043      	strb	r3, [r0, #1]
		} while (--cnt);
 8013f3c:	d0c2      	beq.n	8013ec4 <f_read+0xe0>
			*d++ = *s++;
 8013f3e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8013f42:	7083      	strb	r3, [r0, #2]
		} while (--cnt);
 8013f44:	e7be      	b.n	8013ec4 <f_read+0xe0>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8013f46:	bb39      	cbnz	r1, 8013f98 <f_read+0x1b4>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8013f48:	68a0      	ldr	r0, [r4, #8]
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013f4a:	2801      	cmp	r0, #1
 8013f4c:	d908      	bls.n	8013f60 <f_read+0x17c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013f4e:	1c43      	adds	r3, r0, #1
 8013f50:	d036      	beq.n	8013fc0 <f_read+0x1dc>
				fp->clust = clst;				/* Update current cluster */
 8013f52:	61e0      	str	r0, [r4, #28]
	clst -= 2;
 8013f54:	3802      	subs	r0, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8013f56:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8013f5a:	3b02      	subs	r3, #2
 8013f5c:	4298      	cmp	r0, r3
 8013f5e:	d38b      	bcc.n	8013e78 <f_read+0x94>
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8013f60:	2302      	movs	r3, #2
 8013f62:	4698      	mov	r8, r3
 8013f64:	7563      	strb	r3, [r4, #21]
}
 8013f66:	4640      	mov	r0, r8
 8013f68:	b005      	add	sp, #20
 8013f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8013f6e:	6a22      	ldr	r2, [r4, #32]
 8013f70:	455a      	cmp	r2, fp
 8013f72:	d00b      	beq.n	8013f8c <f_read+0x1a8>
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8013f74:	f994 3014 	ldrsb.w	r3, [r4, #20]
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	db3d      	blt.n	8013ff8 <f_read+0x214>
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8013f7c:	2301      	movs	r3, #1
 8013f7e:	465a      	mov	r2, fp
 8013f80:	4651      	mov	r1, sl
 8013f82:	f899 0001 	ldrb.w	r0, [r9, #1]
 8013f86:	f7fd fadb 	bl	8011540 <disk_read>
 8013f8a:	b9c8      	cbnz	r0, 8013fc0 <f_read+0x1dc>
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013f8c:	69a3      	ldr	r3, [r4, #24]
			fp->sect = sect;
 8013f8e:	f8c4 b020 	str.w	fp, [r4, #32]
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8013f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013f96:	e7a4      	b.n	8013ee2 <f_read+0xfe>
					if (fp->cltbl) {
 8013f98:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8013f9a:	b330      	cbz	r0, 8013fea <f_read+0x206>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013f9c:	6821      	ldr	r1, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8013f9e:	3004      	adds	r0, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8013fa0:	8949      	ldrh	r1, [r1, #10]
 8013fa2:	fbb3 f3f1 	udiv	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013fa6:	6801      	ldr	r1, [r0, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013fa8:	b929      	cbnz	r1, 8013fb6 <f_read+0x1d2>
 8013faa:	e7d9      	b.n	8013f60 <f_read+0x17c>
		cl -= ncl; tbl++;		/* Next fragment */
 8013fac:	1a5b      	subs	r3, r3, r1
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8013fae:	f850 1f08 	ldr.w	r1, [r0, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8013fb2:	2900      	cmp	r1, #0
 8013fb4:	d0d4      	beq.n	8013f60 <f_read+0x17c>
		if (cl < ncl) break;	/* In this fragment? */
 8013fb6:	4299      	cmp	r1, r3
 8013fb8:	d9f8      	bls.n	8013fac <f_read+0x1c8>
	return cl + *tbl;	/* Return the cluster number */
 8013fba:	6840      	ldr	r0, [r0, #4]
 8013fbc:	4418      	add	r0, r3
 8013fbe:	e7c4      	b.n	8013f4a <f_read+0x166>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013fc0:	f8dd 8000 	ldr.w	r8, [sp]
 8013fc4:	2301      	movs	r3, #1
}
 8013fc6:	4640      	mov	r0, r8
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8013fc8:	7563      	strb	r3, [r4, #21]
}
 8013fca:	b005      	add	sp, #20
 8013fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013fd0:	1e6a      	subs	r2, r5, #1
 8013fd2:	eb03 0c01 	add.w	ip, r3, r1
			*d++ = *s++;
 8013fd6:	f813 0b01 	ldrb.w	r0, [r3], #1
		} while (--cnt);
 8013fda:	4563      	cmp	r3, ip
			*d++ = *s++;
 8013fdc:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8013fe0:	d1f9      	bne.n	8013fd6 <f_read+0x1f2>
 8013fe2:	e76f      	b.n	8013ec4 <f_read+0xe0>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8013fe4:	f04f 0807 	mov.w	r8, #7
 8013fe8:	e710      	b.n	8013e0c <f_read+0x28>
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8013fea:	69e1      	ldr	r1, [r4, #28]
 8013fec:	6820      	ldr	r0, [r4, #0]
 8013fee:	9203      	str	r2, [sp, #12]
 8013ff0:	f7fd fea0 	bl	8011d34 <get_fat.isra.0>
 8013ff4:	9a03      	ldr	r2, [sp, #12]
 8013ff6:	e7a8      	b.n	8013f4a <f_read+0x166>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8013ff8:	2301      	movs	r3, #1
 8013ffa:	4651      	mov	r1, sl
 8013ffc:	f899 0001 	ldrb.w	r0, [r9, #1]
 8014000:	f7fd faac 	bl	801155c <disk_write>
 8014004:	2800      	cmp	r0, #0
 8014006:	d1db      	bne.n	8013fc0 <f_read+0x1dc>
					fp->flag &= (BYTE)~FA_DIRTY;
 8014008:	7d23      	ldrb	r3, [r4, #20]
 801400a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801400e:	7523      	strb	r3, [r4, #20]
 8014010:	e7b4      	b.n	8013f7c <f_read+0x198>
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8014012:	6a22      	ldr	r2, [r4, #32]
 8014014:	eba2 0b0b 	sub.w	fp, r2, fp
 8014018:	45c3      	cmp	fp, r8
 801401a:	f4bf af51 	bcs.w	8013ec0 <f_read+0xdc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 801401e:	eb05 224b 	add.w	r2, r5, fp, lsl #9
 8014022:	9b01      	ldr	r3, [sp, #4]
 8014024:	4651      	mov	r1, sl
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8014026:	1ad0      	subs	r0, r2, r3
 8014028:	2802      	cmp	r0, #2
 801402a:	d90b      	bls.n	8014044 <f_read+0x260>
 801402c:	f502 7c00 	add.w	ip, r2, #512	; 0x200
			*d++ = *s++;
 8014030:	f851 3b04 	ldr.w	r3, [r1], #4
 8014034:	f842 3b04 	str.w	r3, [r2], #4
		} while (--cnt);
 8014038:	4562      	cmp	r2, ip
 801403a:	d1f9      	bne.n	8014030 <f_read+0x24c>
 801403c:	e740      	b.n	8013ec0 <f_read+0xdc>
 801403e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8014042:	e6e3      	b.n	8013e0c <f_read+0x28>
 8014044:	3a01      	subs	r2, #1
 8014046:	f504 7c0c 	add.w	ip, r4, #560	; 0x230
			*d++ = *s++;
 801404a:	f811 3b01 	ldrb.w	r3, [r1], #1
		} while (--cnt);
 801404e:	458c      	cmp	ip, r1
			*d++ = *s++;
 8014050:	f802 3f01 	strb.w	r3, [r2, #1]!
		} while (--cnt);
 8014054:	d1f9      	bne.n	801404a <f_read+0x266>
 8014056:	e733      	b.n	8013ec0 <f_read+0xdc>

08014058 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8014058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801405c:	461f      	mov	r7, r3
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;


	*bw = 0;	/* Clear write byte counter */
 801405e:	2300      	movs	r3, #0
{
 8014060:	b085      	sub	sp, #20
	*bw = 0;	/* Clear write byte counter */
 8014062:	603b      	str	r3, [r7, #0]
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014064:	b150      	cbz	r0, 801407c <f_write+0x24>
 8014066:	6803      	ldr	r3, [r0, #0]
 8014068:	4604      	mov	r4, r0
 801406a:	b13b      	cbz	r3, 801407c <f_write+0x24>
 801406c:	4616      	mov	r6, r2
 801406e:	781a      	ldrb	r2, [r3, #0]
 8014070:	b122      	cbz	r2, 801407c <f_write+0x24>
 8014072:	460d      	mov	r5, r1
 8014074:	88da      	ldrh	r2, [r3, #6]
 8014076:	8881      	ldrh	r1, [r0, #4]
 8014078:	4291      	cmp	r1, r2
 801407a:	d005      	beq.n	8014088 <f_write+0x30>
	FRESULT res = FR_INVALID_OBJECT;
 801407c:	f04f 0809 	mov.w	r8, #9
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */

	LEAVE_FF(fs, FR_OK);
}
 8014080:	4640      	mov	r0, r8
 8014082:	b005      	add	sp, #20
 8014084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014088:	7858      	ldrb	r0, [r3, #1]
 801408a:	f7fd fa3d 	bl	8011508 <disk_status>
 801408e:	07c1      	lsls	r1, r0, #31
 8014090:	d4f4      	bmi.n	801407c <f_write+0x24>
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8014092:	f894 8015 	ldrb.w	r8, [r4, #21]
 8014096:	f1b8 0f00 	cmp.w	r8, #0
 801409a:	d1f1      	bne.n	8014080 <f_write+0x28>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801409c:	7d23      	ldrb	r3, [r4, #20]
 801409e:	079a      	lsls	r2, r3, #30
 80140a0:	f140 80f4 	bpl.w	801428c <f_write+0x234>
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80140a4:	69a2      	ldr	r2, [r4, #24]
 80140a6:	42f2      	cmn	r2, r6
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80140a8:	bf28      	it	cs
 80140aa:	43d6      	mvncs	r6, r2
	for ( ;  btw;							/* Repeat until all data written */
 80140ac:	2e00      	cmp	r6, #0
 80140ae:	f000 80cb 	beq.w	8014248 <f_write+0x1f0>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80140b2:	f504 730c 	add.w	r3, r4, #560	; 0x230
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80140b6:	46a2      	mov	sl, r4
 80140b8:	9301      	str	r3, [sp, #4]
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80140ba:	f3c2 0308 	ubfx	r3, r2, #0, #9
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80140be:	f85a 9b30 	ldr.w	r9, [sl], #48
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80140c2:	2b00      	cmp	r3, #0
 80140c4:	d160      	bne.n	8014188 <f_write+0x130>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80140c6:	f8b9 b00a 	ldrh.w	fp, [r9, #10]
 80140ca:	0a53      	lsrs	r3, r2, #9
 80140cc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
			if (csect == 0) {				/* On the cluster boundary? */
 80140d0:	ea1b 2b52 	ands.w	fp, fp, r2, lsr #9
 80140d4:	d110      	bne.n	80140f8 <f_write+0xa0>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80140d6:	2a00      	cmp	r2, #0
 80140d8:	f040 809f 	bne.w	801421a <f_write+0x1c2>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80140dc:	68a0      	ldr	r0, [r4, #8]
					if (clst == 0) {		/* If no cluster is allocated, */
 80140de:	2800      	cmp	r0, #0
 80140e0:	f000 80df 	beq.w	80142a2 <f_write+0x24a>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80140e4:	2801      	cmp	r0, #1
 80140e6:	f000 8086 	beq.w	80141f6 <f_write+0x19e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80140ea:	1c43      	adds	r3, r0, #1
 80140ec:	f000 80bd 	beq.w	801426a <f_write+0x212>
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80140f0:	68a3      	ldr	r3, [r4, #8]
				fp->clust = clst;			/* Update current cluster */
 80140f2:	61e0      	str	r0, [r4, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80140f4:	b903      	cbnz	r3, 80140f8 <f_write+0xa0>
 80140f6:	60a0      	str	r0, [r4, #8]
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80140f8:	f994 3014 	ldrsb.w	r3, [r4, #20]
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	f2c0 80a7 	blt.w	8014250 <f_write+0x1f8>
	clst -= 2;
 8014102:	69e2      	ldr	r2, [r4, #28]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8014104:	f8d9 3018 	ldr.w	r3, [r9, #24]
	clst -= 2;
 8014108:	3a02      	subs	r2, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 801410a:	3b02      	subs	r3, #2
 801410c:	429a      	cmp	r2, r3
 801410e:	d272      	bcs.n	80141f6 <f_write+0x19e>
	return clst * fs->csize + fs->database;
 8014110:	f8b9 100a 	ldrh.w	r1, [r9, #10]
 8014114:	f8d9 302c 	ldr.w	r3, [r9, #44]	; 0x2c
 8014118:	fb01 3202 	mla	r2, r1, r2, r3
			if (!sect) ABORT(fs, FR_INT_ERR);
 801411c:	2a00      	cmp	r2, #0
 801411e:	d06a      	beq.n	80141f6 <f_write+0x19e>
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014120:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
			sect += csect;
 8014124:	445a      	add	r2, fp
			if (cc) {						/* Write maximum contiguous sectors directly */
 8014126:	d36d      	bcc.n	8014204 <f_write+0x1ac>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8014128:	eb0b 2056 	add.w	r0, fp, r6, lsr #9
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801412c:	0a73      	lsrs	r3, r6, #9
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801412e:	4288      	cmp	r0, r1
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014130:	f899 0001 	ldrb.w	r0, [r9, #1]
					cc = fs->csize - csect;
 8014134:	bf88      	it	hi
 8014136:	eba1 030b 	subhi.w	r3, r1, fp
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801413a:	4629      	mov	r1, r5
 801413c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8014140:	f7fd fa0c 	bl	801155c <disk_write>
 8014144:	2800      	cmp	r0, #0
 8014146:	f040 8090 	bne.w	801426a <f_write+0x212>
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801414a:	6a21      	ldr	r1, [r4, #32]
 801414c:	9a02      	ldr	r2, [sp, #8]
 801414e:	9b03      	ldr	r3, [sp, #12]
 8014150:	1a8a      	subs	r2, r1, r2
 8014152:	429a      	cmp	r2, r3
 8014154:	f0c0 80b9 	bcc.w	80142ca <f_write+0x272>
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8014158:	eb05 2243 	add.w	r2, r5, r3, lsl #9
 801415c:	ea4f 2c43 	mov.w	ip, r3, lsl #9
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014160:	69a3      	ldr	r3, [r4, #24]
 8014162:	4615      	mov	r5, r2
 8014164:	68e2      	ldr	r2, [r4, #12]
 8014166:	4463      	add	r3, ip
 8014168:	4293      	cmp	r3, r2
 801416a:	61a3      	str	r3, [r4, #24]
 801416c:	bf38      	it	cc
 801416e:	4613      	movcc	r3, r2
	for ( ;  btw;							/* Repeat until all data written */
 8014170:	ebb6 060c 	subs.w	r6, r6, ip
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8014174:	60e3      	str	r3, [r4, #12]
 8014176:	683b      	ldr	r3, [r7, #0]
 8014178:	4463      	add	r3, ip
 801417a:	603b      	str	r3, [r7, #0]
	for ( ;  btw;							/* Repeat until all data written */
 801417c:	d063      	beq.n	8014246 <f_write+0x1ee>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801417e:	69a2      	ldr	r2, [r4, #24]
 8014180:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8014184:	2b00      	cmp	r3, #0
 8014186:	d09e      	beq.n	80140c6 <f_write+0x6e>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014188:	f5c3 7c00 	rsb	ip, r3, #512	; 0x200
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801418c:	1c6a      	adds	r2, r5, #1
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801418e:	4453      	add	r3, sl
 8014190:	45b4      	cmp	ip, r6
 8014192:	eba3 0202 	sub.w	r2, r3, r2
 8014196:	bf28      	it	cs
 8014198:	46b4      	movcs	ip, r6
void mem_cpy (void* dst, const void* src, UINT cnt) {
 801419a:	2a02      	cmp	r2, #2
 801419c:	f10c 3bff 	add.w	fp, ip, #4294967295	; 0xffffffff
 80141a0:	d96a      	bls.n	8014278 <f_write+0x220>
 80141a2:	f1bb 0f07 	cmp.w	fp, #7
 80141a6:	d967      	bls.n	8014278 <f_write+0x220>
 80141a8:	f02c 0e03 	bic.w	lr, ip, #3
 80141ac:	461a      	mov	r2, r3
 80141ae:	4629      	mov	r1, r5
 80141b0:	449e      	add	lr, r3
			*d++ = *s++;
 80141b2:	f851 0b04 	ldr.w	r0, [r1], #4
 80141b6:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80141ba:	4596      	cmp	lr, r2
 80141bc:	d1f9      	bne.n	80141b2 <f_write+0x15a>
 80141be:	f02c 0103 	bic.w	r1, ip, #3
 80141c2:	458c      	cmp	ip, r1
 80141c4:	eb03 0001 	add.w	r0, r3, r1
 80141c8:	eb05 0201 	add.w	r2, r5, r1
 80141cc:	d00e      	beq.n	80141ec <f_write+0x194>
			*d++ = *s++;
 80141ce:	f815 e001 	ldrb.w	lr, [r5, r1]
 80141d2:	f803 e001 	strb.w	lr, [r3, r1]
		} while (--cnt);
 80141d6:	ebbb 0101 	subs.w	r1, fp, r1
 80141da:	d005      	beq.n	80141e8 <f_write+0x190>
			*d++ = *s++;
 80141dc:	7853      	ldrb	r3, [r2, #1]
		} while (--cnt);
 80141de:	2901      	cmp	r1, #1
			*d++ = *s++;
 80141e0:	7043      	strb	r3, [r0, #1]
 80141e2:	bf1c      	itt	ne
 80141e4:	7893      	ldrbne	r3, [r2, #2]
 80141e6:	7083      	strbne	r3, [r0, #2]
		} while (--cnt);
 80141e8:	eb05 020c 	add.w	r2, r5, ip
		fp->flag |= FA_DIRTY;
 80141ec:	7d23      	ldrb	r3, [r4, #20]
 80141ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80141f2:	7523      	strb	r3, [r4, #20]
 80141f4:	e7b4      	b.n	8014160 <f_write+0x108>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80141f6:	2302      	movs	r3, #2
 80141f8:	4698      	mov	r8, r3
 80141fa:	7563      	strb	r3, [r4, #21]
}
 80141fc:	4640      	mov	r0, r8
 80141fe:	b005      	add	sp, #20
 8014200:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8014204:	6a23      	ldr	r3, [r4, #32]
 8014206:	4293      	cmp	r3, r2
				fp->fptr < fp->obj.objsize &&
 8014208:	69a3      	ldr	r3, [r4, #24]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801420a:	d002      	beq.n	8014212 <f_write+0x1ba>
 801420c:	68e1      	ldr	r1, [r4, #12]
 801420e:	428b      	cmp	r3, r1
 8014210:	d34f      	bcc.n	80142b2 <f_write+0x25a>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8014212:	f3c3 0308 	ubfx	r3, r3, #0, #9
			fp->sect = sect;
 8014216:	6222      	str	r2, [r4, #32]
 8014218:	e7b6      	b.n	8014188 <f_write+0x130>
					if (fp->cltbl) {
 801421a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801421c:	2900      	cmp	r1, #0
 801421e:	d038      	beq.n	8014292 <f_write+0x23a>
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014220:	6822      	ldr	r2, [r4, #0]
	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8014222:	3104      	adds	r1, #4
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8014224:	8952      	ldrh	r2, [r2, #10]
 8014226:	fbb3 f3f2 	udiv	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801422a:	680a      	ldr	r2, [r1, #0]
		if (ncl == 0) return 0;	/* End of table? (error) */
 801422c:	b922      	cbnz	r2, 8014238 <f_write+0x1e0>
 801422e:	e00a      	b.n	8014246 <f_write+0x1ee>
		cl -= ncl; tbl++;		/* Next fragment */
 8014230:	1a9b      	subs	r3, r3, r2
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8014232:	f851 2f08 	ldr.w	r2, [r1, #8]!
		if (ncl == 0) return 0;	/* End of table? (error) */
 8014236:	b132      	cbz	r2, 8014246 <f_write+0x1ee>
		if (cl < ncl) break;	/* In this fragment? */
 8014238:	4293      	cmp	r3, r2
 801423a:	d2f9      	bcs.n	8014230 <f_write+0x1d8>
	return cl + *tbl;	/* Return the cluster number */
 801423c:	6848      	ldr	r0, [r1, #4]
 801423e:	4418      	add	r0, r3
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8014240:	2800      	cmp	r0, #0
 8014242:	f47f af4f 	bne.w	80140e4 <f_write+0x8c>
	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8014246:	7d23      	ldrb	r3, [r4, #20]
 8014248:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801424c:	7523      	strb	r3, [r4, #20]
	LEAVE_FF(fs, FR_OK);
 801424e:	e717      	b.n	8014080 <f_write+0x28>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8014250:	2301      	movs	r3, #1
 8014252:	6a22      	ldr	r2, [r4, #32]
 8014254:	4651      	mov	r1, sl
 8014256:	f899 0001 	ldrb.w	r0, [r9, #1]
 801425a:	f7fd f97f 	bl	801155c <disk_write>
 801425e:	b920      	cbnz	r0, 801426a <f_write+0x212>
				fp->flag &= (BYTE)~FA_DIRTY;
 8014260:	7d23      	ldrb	r3, [r4, #20]
 8014262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014266:	7523      	strb	r3, [r4, #20]
 8014268:	e74b      	b.n	8014102 <f_write+0xaa>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801426a:	2301      	movs	r3, #1
 801426c:	4698      	mov	r8, r3
 801426e:	7563      	strb	r3, [r4, #21]
}
 8014270:	4640      	mov	r0, r8
 8014272:	b005      	add	sp, #20
 8014274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014278:	3b01      	subs	r3, #1
 801427a:	eb05 020c 	add.w	r2, r5, ip
			*d++ = *s++;
 801427e:	f815 1b01 	ldrb.w	r1, [r5], #1
		} while (--cnt);
 8014282:	4295      	cmp	r5, r2
			*d++ = *s++;
 8014284:	f803 1f01 	strb.w	r1, [r3, #1]!
		} while (--cnt);
 8014288:	d1f9      	bne.n	801427e <f_write+0x226>
 801428a:	e7af      	b.n	80141ec <f_write+0x194>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801428c:	f04f 0807 	mov.w	r8, #7
 8014290:	e6f6      	b.n	8014080 <f_write+0x28>
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8014292:	69e1      	ldr	r1, [r4, #28]
 8014294:	4620      	mov	r0, r4
 8014296:	f7fe f881 	bl	801239c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801429a:	2800      	cmp	r0, #0
 801429c:	f47f af22 	bne.w	80140e4 <f_write+0x8c>
 80142a0:	e7d1      	b.n	8014246 <f_write+0x1ee>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80142a2:	4659      	mov	r1, fp
 80142a4:	4620      	mov	r0, r4
 80142a6:	f7fe f879 	bl	801239c <create_chain>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80142aa:	2800      	cmp	r0, #0
 80142ac:	f47f af1a 	bne.w	80140e4 <f_write+0x8c>
 80142b0:	e7c9      	b.n	8014246 <f_write+0x1ee>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80142b2:	2301      	movs	r3, #1
 80142b4:	4651      	mov	r1, sl
 80142b6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80142ba:	9202      	str	r2, [sp, #8]
 80142bc:	f7fd f940 	bl	8011540 <disk_read>
				fp->fptr < fp->obj.objsize &&
 80142c0:	2800      	cmp	r0, #0
 80142c2:	d1d2      	bne.n	801426a <f_write+0x212>
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80142c4:	69a3      	ldr	r3, [r4, #24]
 80142c6:	9a02      	ldr	r2, [sp, #8]
 80142c8:	e7a3      	b.n	8014212 <f_write+0x1ba>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80142ca:	eb05 2042 	add.w	r0, r5, r2, lsl #9
 80142ce:	1c42      	adds	r2, r0, #1
 80142d0:	4601      	mov	r1, r0
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80142d2:	ebaa 0202 	sub.w	r2, sl, r2
 80142d6:	2a02      	cmp	r2, #2
 80142d8:	d90d      	bls.n	80142f6 <f_write+0x29e>
 80142da:	4652      	mov	r2, sl
 80142dc:	f8dd c004 	ldr.w	ip, [sp, #4]
			*d++ = *s++;
 80142e0:	f851 0b04 	ldr.w	r0, [r1], #4
 80142e4:	f842 0b04 	str.w	r0, [r2], #4
		} while (--cnt);
 80142e8:	4562      	cmp	r2, ip
 80142ea:	d1f9      	bne.n	80142e0 <f_write+0x288>
					fp->flag &= (BYTE)~FA_DIRTY;
 80142ec:	7d22      	ldrb	r2, [r4, #20]
 80142ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80142f2:	7522      	strb	r2, [r4, #20]
 80142f4:	e730      	b.n	8014158 <f_write+0x100>
 80142f6:	f104 022f 	add.w	r2, r4, #47	; 0x2f
 80142fa:	f500 7c00 	add.w	ip, r0, #512	; 0x200
			*d++ = *s++;
 80142fe:	f811 0b01 	ldrb.w	r0, [r1], #1
		} while (--cnt);
 8014302:	458c      	cmp	ip, r1
			*d++ = *s++;
 8014304:	f802 0f01 	strb.w	r0, [r2, #1]!
		} while (--cnt);
 8014308:	d1f9      	bne.n	80142fe <f_write+0x2a6>
 801430a:	e7ef      	b.n	80142ec <f_write+0x294>

0801430c <f_close>:
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801430c:	b158      	cbz	r0, 8014326 <f_close+0x1a>
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801430e:	b570      	push	{r4, r5, r6, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014310:	6803      	ldr	r3, [r0, #0]
 8014312:	4604      	mov	r4, r0
 8014314:	b12b      	cbz	r3, 8014322 <f_close+0x16>
 8014316:	781a      	ldrb	r2, [r3, #0]
 8014318:	b11a      	cbz	r2, 8014322 <f_close+0x16>
 801431a:	8881      	ldrh	r1, [r0, #4]
 801431c:	88da      	ldrh	r2, [r3, #6]
 801431e:	4291      	cmp	r1, r2
 8014320:	d003      	beq.n	801432a <f_close+0x1e>
	FRESULT res = FR_INVALID_OBJECT;
 8014322:	2009      	movs	r0, #9
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
}
 8014324:	bd70      	pop	{r4, r5, r6, pc}
	FRESULT res = FR_INVALID_OBJECT;
 8014326:	2009      	movs	r0, #9
}
 8014328:	4770      	bx	lr
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801432a:	7858      	ldrb	r0, [r3, #1]
 801432c:	f7fd f8ec 	bl	8011508 <disk_status>
 8014330:	07c1      	lsls	r1, r0, #31
 8014332:	d4f6      	bmi.n	8014322 <f_close+0x16>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014334:	7d23      	ldrb	r3, [r4, #20]
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8014336:	6825      	ldr	r5, [r4, #0]
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8014338:	065a      	lsls	r2, r3, #25
 801433a:	d53c      	bpl.n	80143b6 <f_close+0xaa>
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801433c:	061b      	lsls	r3, r3, #24
 801433e:	d45d      	bmi.n	80143fc <f_close+0xf0>
			tm = GET_FATTIME();				/* Modified time */
 8014340:	f7fc fff8 	bl	8011334 <get_fattime>
				res = move_window(fs, fp->dir_sect);
 8014344:	6a61      	ldr	r1, [r4, #36]	; 0x24
	if (sector != fs->winsect) {	/* Window offset changed? */
 8014346:	6b2b      	ldr	r3, [r5, #48]	; 0x30
			tm = GET_FATTIME();				/* Modified time */
 8014348:	4606      	mov	r6, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 801434a:	4299      	cmp	r1, r3
 801434c:	d004      	beq.n	8014358 <f_close+0x4c>
 801434e:	4628      	mov	r0, r5
 8014350:	f7fd faa4 	bl	801189c <move_window.part.0>
				if (res == FR_OK) {
 8014354:	2800      	cmp	r0, #0
 8014356:	d1e5      	bne.n	8014324 <f_close+0x18>
					dir = fp->dir_ptr;
 8014358:	6aa2      	ldr	r2, [r4, #40]	; 0x28
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801435a:	7ad3      	ldrb	r3, [r2, #11]
 801435c:	f043 0320 	orr.w	r3, r3, #32
 8014360:	72d3      	strb	r3, [r2, #11]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014362:	68a3      	ldr	r3, [r4, #8]
 8014364:	6821      	ldr	r1, [r4, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8014366:	f3c3 2007 	ubfx	r0, r3, #8, #8
 801436a:	7693      	strb	r3, [r2, #26]
	*ptr++ = (BYTE)val;
 801436c:	76d0      	strb	r0, [r2, #27]
	if (fs->fs_type == FS_FAT32) {
 801436e:	7809      	ldrb	r1, [r1, #0]
 8014370:	2903      	cmp	r1, #3
 8014372:	d103      	bne.n	801437c <f_close+0x70>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8014374:	0c1b      	lsrs	r3, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014376:	7513      	strb	r3, [r2, #20]
 8014378:	0a1b      	lsrs	r3, r3, #8
	*ptr++ = (BYTE)val;
 801437a:	7553      	strb	r3, [r2, #21]
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801437c:	68e3      	ldr	r3, [r4, #12]
					res = sync_fs(fs);					/* Restore it to the directory */
 801437e:	4628      	mov	r0, r5
	*ptr++ = (BYTE)val; val >>= 8;
 8014380:	7596      	strb	r6, [r2, #22]
 8014382:	0a19      	lsrs	r1, r3, #8
 8014384:	7713      	strb	r3, [r2, #28]
	*ptr++ = (BYTE)val; val >>= 8;
 8014386:	7751      	strb	r1, [r2, #29]
 8014388:	0c19      	lsrs	r1, r3, #16
	*ptr++ = (BYTE)val; val >>= 8;
 801438a:	0e1b      	lsrs	r3, r3, #24
 801438c:	7791      	strb	r1, [r2, #30]
	*ptr++ = (BYTE)val;
 801438e:	77d3      	strb	r3, [r2, #31]
	*ptr++ = (BYTE)val; val >>= 8;
 8014390:	0a33      	lsrs	r3, r6, #8
	*ptr++ = (BYTE)val; val >>= 8;
 8014392:	75d3      	strb	r3, [r2, #23]
 8014394:	0c33      	lsrs	r3, r6, #16
	*ptr++ = (BYTE)val; val >>= 8;
 8014396:	0e36      	lsrs	r6, r6, #24
 8014398:	7613      	strb	r3, [r2, #24]
	*ptr++ = (BYTE)val; val >>= 8;
 801439a:	2300      	movs	r3, #0
	*ptr++ = (BYTE)val;
 801439c:	7656      	strb	r6, [r2, #25]
	*ptr++ = (BYTE)val; val >>= 8;
 801439e:	8253      	strh	r3, [r2, #18]
					fs->wflag = 1;
 80143a0:	2301      	movs	r3, #1
 80143a2:	70eb      	strb	r3, [r5, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80143a4:	f7fd ff8a 	bl	80122bc <sync_fs>
					fp->flag &= (BYTE)~FA_MODIFIED;
 80143a8:	7d23      	ldrb	r3, [r4, #20]
 80143aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80143ae:	7523      	strb	r3, [r4, #20]
	if (res == FR_OK)
 80143b0:	2800      	cmp	r0, #0
 80143b2:	d1b7      	bne.n	8014324 <f_close+0x18>
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80143b4:	6825      	ldr	r5, [r4, #0]
 80143b6:	2d00      	cmp	r5, #0
 80143b8:	d0b3      	beq.n	8014322 <f_close+0x16>
 80143ba:	782b      	ldrb	r3, [r5, #0]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d0b0      	beq.n	8014322 <f_close+0x16>
 80143c0:	88a2      	ldrh	r2, [r4, #4]
 80143c2:	88eb      	ldrh	r3, [r5, #6]
 80143c4:	429a      	cmp	r2, r3
 80143c6:	d1ac      	bne.n	8014322 <f_close+0x16>
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80143c8:	7868      	ldrb	r0, [r5, #1]
 80143ca:	f7fd f89d 	bl	8011508 <disk_status>
 80143ce:	f010 0001 	ands.w	r0, r0, #1
 80143d2:	d1a6      	bne.n	8014322 <f_close+0x16>
	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80143d4:	6923      	ldr	r3, [r4, #16]
 80143d6:	3b01      	subs	r3, #1
 80143d8:	2b01      	cmp	r3, #1
 80143da:	d81c      	bhi.n	8014416 <f_close+0x10a>
		n = Files[i].ctr;
 80143dc:	4912      	ldr	r1, [pc, #72]	; (8014428 <f_close+0x11c>)
 80143de:	011d      	lsls	r5, r3, #4
 80143e0:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 80143e4:	899a      	ldrh	r2, [r3, #12]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80143e6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80143ea:	d016      	beq.n	801441a <f_close+0x10e>
		if (n > 0) n--;				/* Decrement read mode open count */
 80143ec:	b1b2      	cbz	r2, 801441c <f_close+0x110>
 80143ee:	3a01      	subs	r2, #1
 80143f0:	b292      	uxth	r2, r2
		Files[i].ctr = n;
 80143f2:	819a      	strh	r2, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80143f4:	b192      	cbz	r2, 801441c <f_close+0x110>
				fp->obj.fs = 0;			/* Invalidate file object */
 80143f6:	2300      	movs	r3, #0
 80143f8:	6023      	str	r3, [r4, #0]
}
 80143fa:	bd70      	pop	{r4, r5, r6, pc}
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80143fc:	2301      	movs	r3, #1
 80143fe:	6a22      	ldr	r2, [r4, #32]
 8014400:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8014404:	7868      	ldrb	r0, [r5, #1]
 8014406:	f7fd f8a9 	bl	801155c <disk_write>
 801440a:	b950      	cbnz	r0, 8014422 <f_close+0x116>
				fp->flag &= (BYTE)~FA_DIRTY;
 801440c:	7d23      	ldrb	r3, [r4, #20]
 801440e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014412:	7523      	strb	r3, [r4, #20]
 8014414:	e794      	b.n	8014340 <f_close+0x34>
		res = FR_INT_ERR;			/* Invalid index nunber */
 8014416:	2002      	movs	r0, #2
}
 8014418:	bd70      	pop	{r4, r5, r6, pc}
		Files[i].ctr = n;
 801441a:	8198      	strh	r0, [r3, #12]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 801441c:	2300      	movs	r3, #0
 801441e:	514b      	str	r3, [r1, r5]
			if (res == FR_OK)
 8014420:	e7e9      	b.n	80143f6 <f_close+0xea>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8014422:	2001      	movs	r0, #1
}
 8014424:	bd70      	pop	{r4, r5, r6, pc}
 8014426:	bf00      	nop
 8014428:	20019bfc 	.word	0x20019bfc

0801442c <f_findnext>:

FRESULT f_findnext (
	DIR* dp,		/* Pointer to the open directory object */
	FILINFO* fno	/* Pointer to the file information structure */
)
{
 801442c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801442e:	b150      	cbz	r0, 8014446 <f_findnext+0x1a>
 8014430:	4605      	mov	r5, r0
 8014432:	460e      	mov	r6, r1
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 8014434:	4c3a      	ldr	r4, [pc, #232]	; (8014520 <f_findnext+0xf4>)
	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8014436:	682b      	ldr	r3, [r5, #0]
 8014438:	b12b      	cbz	r3, 8014446 <f_findnext+0x1a>
 801443a:	781a      	ldrb	r2, [r3, #0]
 801443c:	b11a      	cbz	r2, 8014446 <f_findnext+0x1a>
 801443e:	88a9      	ldrh	r1, [r5, #4]
 8014440:	88da      	ldrh	r2, [r3, #6]
 8014442:	4291      	cmp	r1, r2
 8014444:	d002      	beq.n	801444c <f_findnext+0x20>
	FRESULT res = FR_INVALID_OBJECT;
 8014446:	2709      	movs	r7, #9
#if _USE_LFN != 0 && _USE_FIND == 2
		if (pattern_matching(dp->pat, fno->altname, 0, 0)) break;	/* Test for alternative name if exist */
#endif
	}
	return res;
}
 8014448:	4638      	mov	r0, r7
 801444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801444c:	7858      	ldrb	r0, [r3, #1]
 801444e:	f7fd f85b 	bl	8011508 <disk_status>
 8014452:	f010 0101 	ands.w	r1, r0, #1
 8014456:	d1f6      	bne.n	8014446 <f_findnext+0x1a>
		if (!fno) {
 8014458:	2e00      	cmp	r6, #0
 801445a:	d058      	beq.n	801450e <f_findnext+0xe2>
			res = dir_read(dp, 0);			/* Read an item */
 801445c:	4628      	mov	r0, r5
 801445e:	f7fd fd0f 	bl	8011e80 <dir_read>
			if (res == FR_OK) {				/* A valid entry is found */
 8014462:	f010 0ffb 	tst.w	r0, #251	; 0xfb
			res = dir_read(dp, 0);			/* Read an item */
 8014466:	4607      	mov	r7, r0
			if (res == FR_OK) {				/* A valid entry is found */
 8014468:	d1ee      	bne.n	8014448 <f_findnext+0x1c>
				get_fileinfo(dp, fno);		/* Get the object information */
 801446a:	4631      	mov	r1, r6
 801446c:	4628      	mov	r0, r5
 801446e:	f7fd f955 	bl	801171c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8014472:	4628      	mov	r0, r5
 8014474:	f7fd fcbe 	bl	8011df4 <dir_next.constprop.0>
		if (res != FR_OK || !fno || !fno->fname[0]) break;	/* Terminate if any error or end of directory */
 8014478:	f010 07fb 	ands.w	r7, r0, #251	; 0xfb
 801447c:	d14d      	bne.n	801451a <f_findnext+0xee>
 801447e:	7db3      	ldrb	r3, [r6, #22]
 8014480:	2b00      	cmp	r3, #0
 8014482:	d0e1      	beq.n	8014448 <f_findnext+0x1c>
		if (pattern_matching(dp->pat, fno->fname, 0, 0)) break;		/* Test for the file name */
 8014484:	f106 0116 	add.w	r1, r6, #22
	if (!*pat && inf) return 1;		/* (short circuit) */
 8014488:	f8d5 c034 	ldr.w	ip, [r5, #52]	; 0x34
 801448c:	e00f      	b.n	80144ae <f_findnext+0x82>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801448e:	3a20      	subs	r2, #32
 8014490:	b292      	uxth	r2, r2
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 8014492:	f811 0b01 	ldrb.w	r0, [r1], #1
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 8014496:	f1a0 0e61 	sub.w	lr, r0, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 801449a:	b283      	uxth	r3, r0
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 801449c:	f1be 0f19 	cmp.w	lr, #25
 80144a0:	d817      	bhi.n	80144d2 <f_findnext+0xa6>
 80144a2:	3b20      	subs	r3, #32
 80144a4:	b29b      	uxth	r3, r3
			if (pc != nc) break;	/* Branch mismatched? */
 80144a6:	4293      	cmp	r3, r2
 80144a8:	d1c5      	bne.n	8014436 <f_findnext+0xa>
			if (pc == 0) return 1;	/* Branch matched? (matched at end of both strings) */
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d0cc      	beq.n	8014448 <f_findnext+0x1c>
 80144ae:	4662      	mov	r2, ip
			if (*pp == '?' || *pp == '*') {	/* Wildcard? */
 80144b0:	f81c 3b01 	ldrb.w	r3, [ip], #1
 80144b4:	2b3f      	cmp	r3, #63	; 0x3f
 80144b6:	d012      	beq.n	80144de <f_findnext+0xb2>
 80144b8:	2b2a      	cmp	r3, #42	; 0x2a
 80144ba:	d010      	beq.n	80144de <f_findnext+0xb2>
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80144bc:	f1a3 0061 	sub.w	r0, r3, #97	; 0x61
	chr = (BYTE)*(*ptr)++;					/* Get a byte */
 80144c0:	b29a      	uxth	r2, r3
	if (IsLower(chr)) chr -= 0x20;			/* To upper ASCII char */
 80144c2:	2819      	cmp	r0, #25
 80144c4:	d9e3      	bls.n	801448e <f_findnext+0x62>
	if (chr >= 0x80) chr = ExCvt[chr - 0x80];	/* To upper SBCS extended char */
 80144c6:	2a7f      	cmp	r2, #127	; 0x7f
 80144c8:	d9e3      	bls.n	8014492 <f_findnext+0x66>
 80144ca:	4423      	add	r3, r4
 80144cc:	f813 2c80 	ldrb.w	r2, [r3, #-128]
 80144d0:	e7df      	b.n	8014492 <f_findnext+0x66>
 80144d2:	2b7f      	cmp	r3, #127	; 0x7f
 80144d4:	d9e7      	bls.n	80144a6 <f_findnext+0x7a>
 80144d6:	4420      	add	r0, r4
 80144d8:	f810 3c80 	ldrb.w	r3, [r0, #-128]
 80144dc:	e7e3      	b.n	80144a6 <f_findnext+0x7a>
 80144de:	4694      	mov	ip, r2
				nm = nx = 0;
 80144e0:	2300      	movs	r3, #0
 80144e2:	f81c eb01 	ldrb.w	lr, [ip], #1
 80144e6:	461a      	mov	r2, r3
					if (*pp++ == '?') nm++; else nx = 1;
 80144e8:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 80144ec:	4660      	mov	r0, ip
				} while (*pp == '?' || *pp == '*');
 80144ee:	f81c eb01 	ldrb.w	lr, [ip], #1
					if (*pp++ == '?') nm++; else nx = 1;
 80144f2:	bf0c      	ite	eq
 80144f4:	3201      	addeq	r2, #1
 80144f6:	2301      	movne	r3, #1
				} while (*pp == '?' || *pp == '*');
 80144f8:	f1be 0f3f 	cmp.w	lr, #63	; 0x3f
 80144fc:	d0f4      	beq.n	80144e8 <f_findnext+0xbc>
 80144fe:	f1be 0f2a 	cmp.w	lr, #42	; 0x2a
 8014502:	d0f1      	beq.n	80144e8 <f_findnext+0xbc>
				if (pattern_matching(pp, np, nm, nx)) return 1;	/* Test new branch (recurs upto number of wildcard blocks in the pattern) */
 8014504:	f7fd f894 	bl	8011630 <pattern_matching>
 8014508:	2800      	cmp	r0, #0
 801450a:	d094      	beq.n	8014436 <f_findnext+0xa>
 801450c:	e79c      	b.n	8014448 <f_findnext+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 801450e:	4631      	mov	r1, r6
 8014510:	4628      	mov	r0, r5
}
 8014512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8014516:	f7fe b811 	b.w	801253c <dir_sdi>
 801451a:	4607      	mov	r7, r0
 801451c:	e794      	b.n	8014448 <f_findnext+0x1c>
 801451e:	bf00      	nop
 8014520:	0801fab4 	.word	0x0801fab4

08014524 <f_findfirst>:
	DIR* dp,				/* Pointer to the blank directory object */
	FILINFO* fno,			/* Pointer to the file information structure */
	const TCHAR* path,		/* Pointer to the directory to open */
	const TCHAR* pattern	/* Pointer to the matching pattern */
)
{
 8014524:	b570      	push	{r4, r5, r6, lr}
 8014526:	b082      	sub	sp, #8
 8014528:	4615      	mov	r5, r2
 801452a:	4604      	mov	r4, r0
 801452c:	460e      	mov	r6, r1
	FRESULT res;


	dp->pat = pattern;		/* Save pointer to pattern string */
 801452e:	6343      	str	r3, [r0, #52]	; 0x34
	res = find_volume(&path, &fs, 0);
 8014530:	2200      	movs	r2, #0
 8014532:	a901      	add	r1, sp, #4
 8014534:	4668      	mov	r0, sp
 8014536:	9500      	str	r5, [sp, #0]
 8014538:	f7fd f9ea 	bl	8011910 <find_volume>
	if (res == FR_OK) {
 801453c:	b118      	cbz	r0, 8014546 <f_findfirst+0x22>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801453e:	2300      	movs	r3, #0
 8014540:	6023      	str	r3, [r4, #0]
	res = f_opendir(dp, path);		/* Open the target directory */
	if (res == FR_OK) {
		res = f_findnext(dp, fno);	/* Find the first item */
	}
	return res;
}
 8014542:	b002      	add	sp, #8
 8014544:	bd70      	pop	{r4, r5, r6, pc}
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8014546:	e9dd 1300 	ldrd	r1, r3, [sp]
 801454a:	4620      	mov	r0, r4
		obj->fs = fs;
 801454c:	6023      	str	r3, [r4, #0]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 801454e:	f7fe fa57 	bl	8012a00 <follow_path>
		if (res == FR_OK) {						/* Follow completed */
 8014552:	bb08      	cbnz	r0, 8014598 <f_findfirst+0x74>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8014554:	f994 302f 	ldrsb.w	r3, [r4, #47]	; 0x2f
 8014558:	2b00      	cmp	r3, #0
 801455a:	db25      	blt.n	80145a8 <f_findfirst+0x84>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 801455c:	79a3      	ldrb	r3, [r4, #6]
 801455e:	06db      	lsls	r3, r3, #27
 8014560:	d520      	bpl.n	80145a4 <f_findfirst+0x80>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014562:	9b01      	ldr	r3, [sp, #4]
 8014564:	6a21      	ldr	r1, [r4, #32]
	if (fs->fs_type == FS_FAT32) {
 8014566:	7818      	ldrb	r0, [r3, #0]
	cl = ld_word(dir + DIR_FstClusLO);
 8014568:	8b4a      	ldrh	r2, [r1, #26]
	if (fs->fs_type == FS_FAT32) {
 801456a:	2803      	cmp	r0, #3
 801456c:	d102      	bne.n	8014574 <f_findfirst+0x50>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801456e:	8a89      	ldrh	r1, [r1, #20]
 8014570:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8014574:	60a2      	str	r2, [r4, #8]
				obj->id = fs->id;
 8014576:	88db      	ldrh	r3, [r3, #6]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8014578:	2100      	movs	r1, #0
 801457a:	4620      	mov	r0, r4
				obj->id = fs->id;
 801457c:	80a3      	strh	r3, [r4, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 801457e:	f7fd ffdd 	bl	801253c <dir_sdi>
				if (res == FR_OK) {
 8014582:	b948      	cbnz	r0, 8014598 <f_findfirst+0x74>
					if (obj->sclust) {
 8014584:	68a3      	ldr	r3, [r4, #8]
 8014586:	b98b      	cbnz	r3, 80145ac <f_findfirst+0x88>
						obj->lockid = 0;	/* Root directory need not to be locked */
 8014588:	6123      	str	r3, [r4, #16]
		res = f_findnext(dp, fno);	/* Find the first item */
 801458a:	4631      	mov	r1, r6
 801458c:	4620      	mov	r0, r4
}
 801458e:	b002      	add	sp, #8
 8014590:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		res = f_findnext(dp, fno);	/* Find the first item */
 8014594:	f7ff bf4a 	b.w	801442c <f_findnext>
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8014598:	2804      	cmp	r0, #4
 801459a:	d1d0      	bne.n	801453e <f_findfirst+0x1a>
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801459c:	2300      	movs	r3, #0
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 801459e:	2005      	movs	r0, #5
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80145a0:	6023      	str	r3, [r4, #0]
	if (res == FR_OK) {
 80145a2:	e7ce      	b.n	8014542 <f_findfirst+0x1e>
					res = FR_NO_PATH;
 80145a4:	2005      	movs	r0, #5
 80145a6:	e7ca      	b.n	801453e <f_findfirst+0x1a>
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 80145a8:	9b01      	ldr	r3, [sp, #4]
 80145aa:	e7e4      	b.n	8014576 <f_findfirst+0x52>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 80145ac:	4601      	mov	r1, r0
 80145ae:	4620      	mov	r0, r4
 80145b0:	f7fc ffee 	bl	8011590 <inc_lock>
 80145b4:	6120      	str	r0, [r4, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80145b6:	2800      	cmp	r0, #0
 80145b8:	d1e7      	bne.n	801458a <f_findfirst+0x66>
 80145ba:	2012      	movs	r0, #18
 80145bc:	e7bf      	b.n	801453e <f_findfirst+0x1a>
 80145be:	bf00      	nop

080145c0 <FATFS_LinkDriver>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 80145c0:	4b10      	ldr	r3, [pc, #64]	; (8014604 <FATFS_LinkDriver+0x44>)
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80145c2:	b410      	push	{r4}
  if(disk.nbr < _VOLUMES)
 80145c4:	7a5c      	ldrb	r4, [r3, #9]
 80145c6:	b9cc      	cbnz	r4, 80145fc <FATFS_LinkDriver+0x3c>
 80145c8:	4602      	mov	r2, r0
    disk.is_initialized[disk.nbr] = 0;
 80145ca:	f004 00ff 	and.w	r0, r4, #255	; 0xff
 80145ce:	7a5c      	ldrb	r4, [r3, #9]
 80145d0:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;
 80145d2:	7a5c      	ldrb	r4, [r3, #9]
 80145d4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80145d8:	6062      	str	r2, [r4, #4]
    disk.lun[disk.nbr] = lun;
 80145da:	7a5c      	ldrb	r4, [r3, #9]
    DiskNum = disk.nbr++;
 80145dc:	7a5a      	ldrb	r2, [r3, #9]
    disk.lun[disk.nbr] = lun;
 80145de:	441c      	add	r4, r3
 80145e0:	7220      	strb	r0, [r4, #8]
    DiskNum = disk.nbr++;
 80145e2:	1c54      	adds	r4, r2, #1
    path[0] = DiskNum + '0';
 80145e4:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 80145e6:	b2e4      	uxtb	r4, r4
 80145e8:	725c      	strb	r4, [r3, #9]
    path[1] = ':';
 80145ea:	243a      	movs	r4, #58	; 0x3a
    path[2] = '/';
 80145ec:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 80145ee:	700a      	strb	r2, [r1, #0]
    path[1] = ':';
 80145f0:	704c      	strb	r4, [r1, #1]
    path[3] = 0;
 80145f2:	70c8      	strb	r0, [r1, #3]
  return FATFS_LinkDriverEx(drv, path, 0);
}
 80145f4:	f85d 4b04 	ldr.w	r4, [sp], #4
    path[2] = '/';
 80145f8:	708b      	strb	r3, [r1, #2]
}
 80145fa:	4770      	bx	lr
  uint8_t ret = 1;
 80145fc:	2001      	movs	r0, #1
}
 80145fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014602:	4770      	bx	lr
 8014604:	20019e20 	.word	0x20019e20

08014608 <ff_convert>:
)
{
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014608:	287f      	cmp	r0, #127	; 0x7f
 801460a:	d912      	bls.n	8014632 <ff_convert+0x2a>
		c = chr;

	} else {
		if (dir) {		/* OEM code to Unicode */
 801460c:	b971      	cbnz	r1, 801462c <ff_convert+0x24>
 801460e:	4b0c      	ldr	r3, [pc, #48]	; (8014640 <ff_convert+0x38>)
 8014610:	e001      	b.n	8014616 <ff_convert+0xe>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014612:	2980      	cmp	r1, #128	; 0x80
 8014614:	d00c      	beq.n	8014630 <ff_convert+0x28>
				if (chr == Tbl[c]) break;
 8014616:	f833 2b02 	ldrh.w	r2, [r3], #2
 801461a:	fa1f fc81 	uxth.w	ip, r1
			for (c = 0; c < 0x80; c++) {
 801461e:	3101      	adds	r1, #1
				if (chr == Tbl[c]) break;
 8014620:	4282      	cmp	r2, r0
 8014622:	d1f6      	bne.n	8014612 <ff_convert+0xa>
			}
			c = (c + 0x80) & 0xFF;
 8014624:	f10c 0080 	add.w	r0, ip, #128	; 0x80
 8014628:	b280      	uxth	r0, r0
 801462a:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801462c:	28ff      	cmp	r0, #255	; 0xff
 801462e:	d901      	bls.n	8014634 <ff_convert+0x2c>
 8014630:	2000      	movs	r0, #0
		}
	}

	return c;
}
 8014632:	4770      	bx	lr
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014634:	4b02      	ldr	r3, [pc, #8]	; (8014640 <ff_convert+0x38>)
 8014636:	3880      	subs	r0, #128	; 0x80
 8014638:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801463c:	4770      	bx	lr
 801463e:	bf00      	nop
 8014640:	0801fb44 	.word	0x0801fb44

08014644 <ff_wtoupper>:
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014644:	4b22      	ldr	r3, [pc, #136]	; (80146d0 <ff_wtoupper+0x8c>)
 8014646:	4a23      	ldr	r2, [pc, #140]	; (80146d4 <ff_wtoupper+0x90>)
 8014648:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
 801464c:	bf28      	it	cs
 801464e:	4613      	movcs	r3, r2
{
 8014650:	b510      	push	{r4, lr}
 8014652:	3304      	adds	r3, #4
 8014654:	e001      	b.n	801465a <ff_wtoupper+0x16>
			case 7: chr -= 80; break;				/* Shift -80 */
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
			}
			break;
		}
		if (!cmd) p += nc;
 8014656:	3304      	adds	r3, #4
 8014658:	b1da      	cbz	r2, 8014692 <ff_wtoupper+0x4e>
		bc = *p++;								/* Get block base */
 801465a:	f833 1c04 	ldrh.w	r1, [r3, #-4]
		if (!bc || chr < bc) break;
 801465e:	461c      	mov	r4, r3
 8014660:	b1b1      	cbz	r1, 8014690 <ff_wtoupper+0x4c>
 8014662:	4288      	cmp	r0, r1
 8014664:	d314      	bcc.n	8014690 <ff_wtoupper+0x4c>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014666:	f833 2c02 	ldrh.w	r2, [r3, #-2]
 801466a:	fa5f fc82 	uxtb.w	ip, r2
 801466e:	0a12      	lsrs	r2, r2, #8
		if (chr < bc + nc) {	/* In the block? */
 8014670:	eb0c 0e01 	add.w	lr, ip, r1
 8014674:	4570      	cmp	r0, lr
 8014676:	daee      	bge.n	8014656 <ff_wtoupper+0x12>
			switch (cmd) {
 8014678:	2a08      	cmp	r2, #8
 801467a:	d809      	bhi.n	8014690 <ff_wtoupper+0x4c>
 801467c:	e8df f002 	tbb	[pc, r2]
 8014680:	19161005 	.word	0x19161005
 8014684:	25221f1c 	.word	0x25221f1c
 8014688:	0c          	.byte	0x0c
 8014689:	00          	.byte	0x00
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801468a:	1a41      	subs	r1, r0, r1
 801468c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
	}

	return chr;
}
 8014690:	bd10      	pop	{r4, pc}
		if (!cmd) p += nc;
 8014692:	eb04 034c 	add.w	r3, r4, ip, lsl #1
 8014696:	e7dc      	b.n	8014652 <ff_wtoupper+0xe>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014698:	f5a0 50e3 	sub.w	r0, r0, #7264	; 0x1c60
 801469c:	b280      	uxth	r0, r0
}
 801469e:	bd10      	pop	{r4, pc}
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80146a0:	1a43      	subs	r3, r0, r1
 80146a2:	f003 0301 	and.w	r3, r3, #1
 80146a6:	1ac0      	subs	r0, r0, r3
 80146a8:	b280      	uxth	r0, r0
}
 80146aa:	bd10      	pop	{r4, pc}
			case 2: chr -= 16; break;				/* Shift -16 */
 80146ac:	3810      	subs	r0, #16
 80146ae:	b280      	uxth	r0, r0
}
 80146b0:	bd10      	pop	{r4, pc}
			case 3:	chr -= 32; break;				/* Shift -32 */
 80146b2:	3820      	subs	r0, #32
 80146b4:	b280      	uxth	r0, r0
}
 80146b6:	bd10      	pop	{r4, pc}
			case 4:	chr -= 48; break;				/* Shift -48 */
 80146b8:	3830      	subs	r0, #48	; 0x30
 80146ba:	b280      	uxth	r0, r0
}
 80146bc:	bd10      	pop	{r4, pc}
			case 5:	chr -= 26; break;				/* Shift -26 */
 80146be:	381a      	subs	r0, #26
 80146c0:	b280      	uxth	r0, r0
}
 80146c2:	bd10      	pop	{r4, pc}
			case 6:	chr += 8; break;				/* Shift +8 */
 80146c4:	3008      	adds	r0, #8
 80146c6:	b280      	uxth	r0, r0
}
 80146c8:	bd10      	pop	{r4, pc}
			case 7: chr -= 80; break;				/* Shift -80 */
 80146ca:	3850      	subs	r0, #80	; 0x50
 80146cc:	b280      	uxth	r0, r0
}
 80146ce:	bd10      	pop	{r4, pc}
 80146d0:	0801fc44 	.word	0x0801fc44
 80146d4:	0801fe38 	.word	0x0801fe38

080146d8 <tPowerFollower_initToPool>:
{
    tPowerFollower_initToPool(pf, factor, &leaf->mempool);
}

void    tPowerFollower_initToPool   (tPowerFollower* const pf, float factor, tMempool* const mp)
{
 80146d8:	b538      	push	{r3, r4, r5, lr}
 80146da:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 80146de:	680d      	ldr	r5, [r1, #0]
{
 80146e0:	4604      	mov	r4, r0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 80146e2:	2010      	movs	r0, #16
{
 80146e4:	eeb0 8a40 	vmov.f32	s16, s0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 80146e8:	4629      	mov	r1, r5
 80146ea:	f002 ffa1 	bl	8017630 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 80146ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    p->curr=0.0f;
 80146f2:	2300      	movs	r3, #0
    _tPowerFollower* p = *pf = (_tPowerFollower*) mpool_alloc(sizeof(_tPowerFollower), m);
 80146f4:	6020      	str	r0, [r4, #0]
    p->mempool = m;
 80146f6:	6005      	str	r5, [r0, #0]
    p->oneminusfactor=1.0f-factor;
 80146f8:	ee77 7ac8 	vsub.f32	s15, s15, s16
    p->curr=0.0f;
 80146fc:	60c3      	str	r3, [r0, #12]
    p->factor=factor;
 80146fe:	ed80 8a01 	vstr	s16, [r0, #4]
    p->oneminusfactor=1.0f-factor;
 8014702:	edc0 7a02 	vstr	s15, [r0, #8]
}
 8014706:	ecbd 8b02 	vpop	{d8}
 801470a:	bd38      	pop	{r3, r4, r5, pc}

0801470c <tPowerFollower_setFactor>:
    mpool_free((char*)p, p->mempool);
}

void tPowerFollower_setFactor(tPowerFollower* const pf, float factor)
{
    _tPowerFollower* p = *pf;
 801470c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014710:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801472c <tPowerFollower_setFactor+0x20>
 8014714:	6803      	ldr	r3, [r0, #0]
 8014716:	fe80 0a07 	vmaxnm.f32	s0, s0, s14
    
    if (factor<0) factor=0;
    if (factor>1) factor=1;
 801471a:	fe80 0a67 	vminnm.f32	s0, s0, s15
    p->factor=factor;
    p->oneminusfactor=1.0f-factor;
 801471e:	ee77 7ac0 	vsub.f32	s15, s15, s0
    p->factor=factor;
 8014722:	ed83 0a01 	vstr	s0, [r3, #4]
    p->oneminusfactor=1.0f-factor;
 8014726:	edc3 7a02 	vstr	s15, [r3, #8]
}
 801472a:	4770      	bx	lr
 801472c:	00000000 	.word	0x00000000

08014730 <tPowerFollower_tick>:

float tPowerFollower_tick(tPowerFollower* const pf, float input)
{
    _tPowerFollower* p = *pf;
 8014730:	6803      	ldr	r3, [r0, #0]
    p->curr = p->factor*input*input+p->oneminusfactor*p->curr;
 8014732:	ee60 7a00 	vmul.f32	s15, s0, s0
 8014736:	edd3 6a03 	vldr	s13, [r3, #12]
 801473a:	ed93 0a02 	vldr	s0, [r3, #8]
 801473e:	ed93 7a01 	vldr	s14, [r3, #4]
 8014742:	ee20 0a26 	vmul.f32	s0, s0, s13
 8014746:	eea7 0a27 	vfma.f32	s0, s14, s15
 801474a:	ed83 0a03 	vstr	s0, [r3, #12]
    return p->curr;
}
 801474e:	4770      	bx	lr

08014750 <tLinearDelay_initToPool>:
{
    tLinearDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tLinearDelay_initToPool  (tLinearDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 8014750:	b570      	push	{r4, r5, r6, lr}
 8014752:	460d      	mov	r5, r1
 8014754:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8014756:	202c      	movs	r0, #44	; 0x2c
{
 8014758:	ed2d 8b02 	vpush	{d8}
 801475c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 801475e:	6811      	ldr	r1, [r2, #0]
{
 8014760:	eeb0 8a40 	vmov.f32	s16, s0
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8014764:	9101      	str	r1, [sp, #4]
 8014766:	f002 ff63 	bl	8017630 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 801476a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 801476e:	9901      	ldr	r1, [sp, #4]
    _tLinearDelay* d = *dl = (_tLinearDelay*) mpool_alloc(sizeof(_tLinearDelay), m);
 8014770:	6030      	str	r0, [r6, #0]
 8014772:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8014774:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 8014778:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 801477a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 801477c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014784:	d550      	bpl.n	8014828 <tLinearDelay_initToPool+0xd8>
 8014786:	edc0 7a08 	vstr	s15, [r0, #32]
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801478a:	00a8      	lsls	r0, r5, #2
 801478c:	f002 ff50 	bl	8017630 <mpool_alloc>

    d->gain = 1.0f;
 8014790:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000

    d->lastIn = 0.0f;
 8014794:	ed9f 0a29 	vldr	s0, [pc, #164]	; 801483c <tLinearDelay_initToPool+0xec>
    d->lastOut = 0.0f;
    
    d->inPoint = 0;
 8014798:	2300      	movs	r3, #0
    d->gain = 1.0f;
 801479a:	6062      	str	r2, [r4, #4]
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 801479c:	60a0      	str	r0, [r4, #8]
    d->lastIn = 0.0f;
 801479e:	ed84 0a04 	vstr	s0, [r4, #16]
    d->lastOut = 0.0f;
 80147a2:	ed84 0a03 	vstr	s0, [r4, #12]

void     tLinearDelay_setDelay (tLinearDelay* const dl, float delay)
{
    _tLinearDelay* d = *dl;

    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 80147a6:	edd4 0a08 	vldr	s1, [r4, #32]
    d->outPoint = 0;
 80147aa:	e9c4 3305 	strd	r3, r3, [r4, #20]
    _tLinearDelay* d = *dl;
 80147ae:	6835      	ldr	r5, [r6, #0]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 80147b0:	edd5 7a07 	vldr	s15, [r5, #28]
 80147b4:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 80147b8:	f002 fd4a 	bl	8017250 <LEAF_clip>

    float outPointer = d->inPoint - d->delay;
 80147bc:	edd5 7a05 	vldr	s15, [r5, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 80147c0:	ed85 0a08 	vstr	s0, [r5, #32]
    float outPointer = d->inPoint - d->delay;
 80147c4:	eef8 7a67 	vcvt.f32.u32	s15, s15

    while ( outPointer < 0 )
        outPointer += d->maxDelay; // modulo maximum length
 80147c8:	69ea      	ldr	r2, [r5, #28]
    float outPointer = d->inPoint - d->delay;
 80147ca:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 80147ce:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80147d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147d6:	d50a      	bpl.n	80147ee <tLinearDelay_initToPool+0x9e>
        outPointer += d->maxDelay; // modulo maximum length
 80147d8:	ee07 2a90 	vmov	s15, r2
 80147dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80147e0:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 80147e4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80147e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ec:	d4f8      	bmi.n	80147e0 <tLinearDelay_initToPool+0x90>

    d->outPoint = (uint32_t) outPointer;   // integer part
 80147ee:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80147f2:	ee17 3a90 	vmov	r3, s15

    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
 80147f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 80147fa:	ee07 3a10 	vmov	s14, r3

    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 80147fe:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8014800:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 8014804:	61ab      	str	r3, [r5, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8014806:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801480a:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 801480e:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 8014812:	ed85 0a09 	vstr	s0, [r5, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 8014816:	edc5 7a0a 	vstr	s15, [r5, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 801481a:	d101      	bne.n	8014820 <tLinearDelay_initToPool+0xd0>
 801481c:	2300      	movs	r3, #0
 801481e:	61ab      	str	r3, [r5, #24]
}
 8014820:	b002      	add	sp, #8
 8014822:	ecbd 8b02 	vpop	{d8}
 8014826:	bd70      	pop	{r4, r5, r6, pc}
    else if (delay < 0.0f)  d->delay = 0.0f;
 8014828:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801482c:	2300      	movs	r3, #0
 801482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014832:	bf4c      	ite	mi
 8014834:	6203      	strmi	r3, [r0, #32]
    else                    d->delay = delay;
 8014836:	ed80 8a08 	vstrpl	s16, [r0, #32]
 801483a:	e7a6      	b.n	801478a <tLinearDelay_initToPool+0x3a>
 801483c:	00000000 	.word	0x00000000

08014840 <tLinearDelay_clear>:
    _tLinearDelay* d = *dl;
 8014840:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8014842:	69cb      	ldr	r3, [r1, #28]
 8014844:	b14b      	cbz	r3, 801485a <tLinearDelay_clear+0x1a>
 8014846:	2300      	movs	r3, #0
        d->buff[i] = 0;
 8014848:	2000      	movs	r0, #0
 801484a:	688a      	ldr	r2, [r1, #8]
 801484c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 8014850:	3301      	adds	r3, #1
        d->buff[i] = 0;
 8014852:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8014854:	69ca      	ldr	r2, [r1, #28]
 8014856:	429a      	cmp	r2, r3
 8014858:	d8f7      	bhi.n	801484a <tLinearDelay_clear+0xa>
}
 801485a:	4770      	bx	lr

0801485c <tLinearDelay_tickIn>:
    _tLinearDelay* d = *dl;
 801485c:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input * d->gain;
 801485e:	edd3 7a01 	vldr	s15, [r3, #4]
 8014862:	6959      	ldr	r1, [r3, #20]
 8014864:	689a      	ldr	r2, [r3, #8]
 8014866:	ee27 0a80 	vmul.f32	s0, s15, s0
 801486a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801486e:	ed82 0a00 	vstr	s0, [r2]
    if (++(d->inPoint) == d->maxDelay )    d->inPoint = 0;
 8014872:	695a      	ldr	r2, [r3, #20]
 8014874:	69d9      	ldr	r1, [r3, #28]
 8014876:	3201      	adds	r2, #1
 8014878:	428a      	cmp	r2, r1
 801487a:	615a      	str	r2, [r3, #20]
 801487c:	d101      	bne.n	8014882 <tLinearDelay_tickIn+0x26>
 801487e:	2200      	movs	r2, #0
 8014880:	615a      	str	r2, [r3, #20]
}
 8014882:	4770      	bx	lr

08014884 <tLinearDelay_tickOut>:
{
 8014884:	b410      	push	{r4}
    _tLinearDelay* d = *dl;
 8014886:	6803      	ldr	r3, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8014888:	699a      	ldr	r2, [r3, #24]
    d->lastOut = d->buff[idx] * d->omAlpha;
 801488a:	6899      	ldr	r1, [r3, #8]
 801488c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8014890:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    if ((idx + 1) < d->maxDelay)
 8014894:	69dc      	ldr	r4, [r3, #28]
 8014896:	3201      	adds	r2, #1
    d->lastOut = d->buff[idx] * d->omAlpha;
 8014898:	ed90 0a00 	vldr	s0, [r0]
    if ((idx + 1) < d->maxDelay)
 801489c:	42a2      	cmp	r2, r4
    d->lastOut = d->buff[idx] * d->omAlpha;
 801489e:	ee20 0a27 	vmul.f32	s0, s0, s15
 80148a2:	ed83 0a03 	vstr	s0, [r3, #12]
    if ((idx + 1) < d->maxDelay)
 80148a6:	d20b      	bcs.n	80148c0 <tLinearDelay_tickOut+0x3c>
        d->lastOut += d->buff[idx+1] * d->alpha;
 80148a8:	ed90 7a01 	vldr	s14, [r0, #4]
 80148ac:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80148b0:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[idx+1] * d->alpha;
 80148b2:	eea7 0a27 	vfma.f32	s0, s14, s15
 80148b6:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80148ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148be:	4770      	bx	lr
        d->lastOut += d->buff[0] * d->alpha;
 80148c0:	ed91 7a00 	vldr	s14, [r1]
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80148c4:	2200      	movs	r2, #0
        d->lastOut += d->buff[0] * d->alpha;
 80148c6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    if ( (++d->outPoint) >= d->maxDelay )   d->outPoint = 0;
 80148ca:	619a      	str	r2, [r3, #24]
        d->lastOut += d->buff[0] * d->alpha;
 80148cc:	eea7 0a27 	vfma.f32	s0, s14, s15
 80148d0:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80148d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148d8:	4770      	bx	lr
 80148da:	bf00      	nop

080148dc <tLinearDelay_setDelay>:
{
 80148dc:	b510      	push	{r4, lr}
    _tLinearDelay* d = *dl;
 80148de:	6804      	ldr	r4, [r0, #0]
{
 80148e0:	eef0 0a40 	vmov.f32	s1, s0
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 80148e4:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 801495c <tLinearDelay_setDelay+0x80>
 80148e8:	edd4 7a07 	vldr	s15, [r4, #28]
 80148ec:	eeb8 1a67 	vcvt.f32.u32	s2, s15
 80148f0:	f002 fcae 	bl	8017250 <LEAF_clip>
    float outPointer = d->inPoint - d->delay;
 80148f4:	edd4 7a05 	vldr	s15, [r4, #20]
    d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
 80148f8:	ed84 0a08 	vstr	s0, [r4, #32]
    float outPointer = d->inPoint - d->delay;
 80148fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
        outPointer += d->maxDelay; // modulo maximum length
 8014900:	69e2      	ldr	r2, [r4, #28]
    float outPointer = d->inPoint - d->delay;
 8014902:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8014906:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801490e:	d50a      	bpl.n	8014926 <tLinearDelay_setDelay+0x4a>
        outPointer += d->maxDelay; // modulo maximum length
 8014910:	ee07 2a90 	vmov	s15, r2
 8014914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014918:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 801491c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014924:	d4f8      	bmi.n	8014918 <tLinearDelay_setDelay+0x3c>
    d->outPoint = (uint32_t) outPointer;   // integer part
 8014926:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801492a:	ee17 3a90 	vmov	r3, s15
    d->omAlpha = 1.0f - d->alpha;
 801492e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8014932:	ee07 3a10 	vmov	s14, r3
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8014936:	4293      	cmp	r3, r2
    d->omAlpha = 1.0f - d->alpha;
 8014938:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint = (uint32_t) outPointer;   // integer part
 801493c:	61a3      	str	r3, [r4, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 801493e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014942:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8014946:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->alpha = outPointer - d->outPoint; // fractional part
 801494a:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    d->omAlpha = 1.0f - d->alpha;
 801494e:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8014952:	d000      	beq.n	8014956 <tLinearDelay_setDelay+0x7a>
}
 8014954:	bd10      	pop	{r4, pc}
    if ( d->outPoint == d->maxDelay ) d->outPoint = 0;
 8014956:	2300      	movs	r3, #0
 8014958:	61a3      	str	r3, [r4, #24]
}
 801495a:	bd10      	pop	{r4, pc}
 801495c:	00000000 	.word	0x00000000

08014960 <tHermiteDelay_initToPool>:
{
    tHermiteDelay_initToPool(dl, delay, maxDelay, &leaf->mempool);
}

void tHermiteDelay_initToPool  (tHermiteDelay* const dl, float delay, uint32_t maxDelay, tMempool* const mp)
{
 8014960:	b570      	push	{r4, r5, r6, lr}
 8014962:	460d      	mov	r5, r1
 8014964:	4606      	mov	r6, r0
    _tMempool* m = *mp;
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8014966:	2030      	movs	r0, #48	; 0x30
{
 8014968:	ed2d 8b02 	vpush	{d8}
 801496c:	b082      	sub	sp, #8
    _tMempool* m = *mp;
 801496e:	6811      	ldr	r1, [r2, #0]
{
 8014970:	eeb0 8a40 	vmov.f32	s16, s0
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8014974:	9101      	str	r1, [sp, #4]
 8014976:	f002 fe5b 	bl	8017630 <mpool_alloc>
    d->mempool = m;

    d->maxDelay = maxDelay;

    if (delay > maxDelay)   d->delay = maxDelay;
 801497a:	ee07 5a90 	vmov	s15, r5
    d->mempool = m;
 801497e:	9901      	ldr	r1, [sp, #4]
    _tHermiteDelay* d = *dl = (_tHermiteDelay*) mpool_alloc(sizeof(_tHermiteDelay), m);
 8014980:	6030      	str	r0, [r6, #0]
 8014982:	4604      	mov	r4, r0
    if (delay > maxDelay)   d->delay = maxDelay;
 8014984:	eef8 7a67 	vcvt.f32.u32	s15, s15
    d->mempool = m;
 8014988:	6001      	str	r1, [r0, #0]
    d->maxDelay = maxDelay;
 801498a:	61c5      	str	r5, [r0, #28]
    if (delay > maxDelay)   d->delay = maxDelay;
 801498c:	eef4 7ac8 	vcmpe.f32	s15, s16
 8014990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014994:	d558      	bpl.n	8014a48 <tHermiteDelay_initToPool+0xe8>
 8014996:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    else if (delay < 0.0f)  d->delay = 0.0f;
    else                    d->delay = delay;

    
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 801499a:	2d00      	cmp	r5, #0
 801499c:	d14f      	bne.n	8014a3e <tHermiteDelay_initToPool+0xde>
 801499e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
    else
    {
        //make the delay size into a power of 2
        maxDelay--;
        maxDelay |= maxDelay >> 1;
 80149a2:	ea43 0353 	orr.w	r3, r3, r3, lsr #1
        maxDelay |= maxDelay >> 2;
 80149a6:	ea43 0393 	orr.w	r3, r3, r3, lsr #2
        maxDelay |= maxDelay >> 4;
 80149aa:	ea43 1313 	orr.w	r3, r3, r3, lsr #4
        maxDelay |= maxDelay >> 8;
 80149ae:	ea43 2313 	orr.w	r3, r3, r3, lsr #8
        maxDelay |= maxDelay >> 16;
 80149b2:	ea43 4213 	orr.w	r2, r3, r3, lsr #16
        maxDelay++;
 80149b6:	1c55      	adds	r5, r2, #1
        d->maxDelay = maxDelay;
 80149b8:	61e5      	str	r5, [r4, #28]
        d->bufferMask = maxDelay - 1;
 80149ba:	60a2      	str	r2, [r4, #8]
    }
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 80149bc:	00a8      	lsls	r0, r5, #2
 80149be:	f002 fe37 	bl	8017630 <mpool_alloc>

    d->gain = 1.0f;

    d->lastIn = 0.0f;
 80149c2:	2300      	movs	r3, #0
    d->gain = 1.0f;
 80149c4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    d->buff = (float*) mpool_alloc(sizeof(float) * maxDelay, m);
 80149c8:	6060      	str	r0, [r4, #4]
    d->lastIn = 0.0f;
 80149ca:	6123      	str	r3, [r4, #16]
    d->lastOut = 0.0f;
 80149cc:	60e3      	str	r3, [r4, #12]

    d->inPoint = 0;
 80149ce:	2300      	movs	r3, #0
    d->gain = 1.0f;
 80149d0:	6222      	str	r2, [r4, #32]
    d->outPoint = 0;

    tHermiteDelay_setDelay(dl, d->delay);
 80149d2:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
    d->outPoint = 0;
 80149d6:	e9c4 3305 	strd	r3, r3, [r4, #20]
    return d->lastOut;
}

void tHermiteDelay_setDelay (tHermiteDelay* const dl, float delay)
{
    _tHermiteDelay* d = *dl;
 80149da:	6833      	ldr	r3, [r6, #0]
    //d->delay = LEAF_clip(0.0f, delay,  d->maxDelay);
    d->delay = delay; // not safe but faster
    float outPointer = d->inPoint - d->delay;
 80149dc:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 80149e0:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 80149e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80149e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
    while ( outPointer < 0 )
 80149ec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80149f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80149f4:	d50a      	bpl.n	8014a0c <tHermiteDelay_initToPool+0xac>
        outPointer += d->maxDelay; // modulo maximum length
 80149f6:	ed93 7a07 	vldr	s14, [r3, #28]
 80149fa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80149fe:	ee77 7a87 	vadd.f32	s15, s15, s14
    while ( outPointer < 0 )
 8014a02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a0a:	d4f8      	bmi.n	80149fe <tHermiteDelay_initToPool+0x9e>
    
    d->outPoint = (uint32_t) outPointer;   // integer part
 8014a0c:	eebc 6ae7 	vcvt.u32.f32	s12, s15
    
    d->alpha = outPointer - d->outPoint; // fractional part
    d->omAlpha = 1.0f - d->alpha;
    
    d->outPoint &= d->bufferMask;
 8014a10:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 8014a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8014a16:	eef8 6a46 	vcvt.f32.u32	s13, s12
    d->outPoint &= d->bufferMask;
 8014a1a:	ee16 1a10 	vmov	r1, s12
    d->omAlpha = 1.0f - d->alpha;
 8014a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
    d->outPoint &= d->bufferMask;
 8014a22:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 8014a24:	ee77 7ae6 	vsub.f32	s15, s15, s13
    d->omAlpha = 1.0f - d->alpha;
 8014a28:	ee37 7a26 	vadd.f32	s14, s14, s13
    d->outPoint &= d->bufferMask;
 8014a2c:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8014a2e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 8014a32:	ed83 7a0b 	vstr	s14, [r3, #44]	; 0x2c
}
 8014a36:	b002      	add	sp, #8
 8014a38:	ecbd 8b02 	vpop	{d8}
 8014a3c:	bd70      	pop	{r4, r5, r6, pc}
    if ((maxDelay != 0) && ((maxDelay & (maxDelay - 1)) == 0))
 8014a3e:	1e6b      	subs	r3, r5, #1
 8014a40:	422b      	tst	r3, r5
 8014a42:	461a      	mov	r2, r3
 8014a44:	d1ad      	bne.n	80149a2 <tHermiteDelay_initToPool+0x42>
 8014a46:	e7b8      	b.n	80149ba <tHermiteDelay_initToPool+0x5a>
    else if (delay < 0.0f)  d->delay = 0.0f;
 8014a48:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014a52:	bf4c      	ite	mi
 8014a54:	6243      	strmi	r3, [r0, #36]	; 0x24
    else                    d->delay = delay;
 8014a56:	ed80 8a09 	vstrpl	s16, [r0, #36]	; 0x24
 8014a5a:	e79e      	b.n	801499a <tHermiteDelay_initToPool+0x3a>

08014a5c <tHermiteDelay_clear>:
    _tHermiteDelay* d = *dl;
 8014a5c:	6801      	ldr	r1, [r0, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8014a5e:	69cb      	ldr	r3, [r1, #28]
 8014a60:	b14b      	cbz	r3, 8014a76 <tHermiteDelay_clear+0x1a>
 8014a62:	2300      	movs	r3, #0
        d->buff[i] = 0;
 8014a64:	2000      	movs	r0, #0
 8014a66:	684a      	ldr	r2, [r1, #4]
 8014a68:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    for (unsigned i = 0; i < d->maxDelay; i++)
 8014a6c:	3301      	adds	r3, #1
        d->buff[i] = 0;
 8014a6e:	6010      	str	r0, [r2, #0]
    for (unsigned i = 0; i < d->maxDelay; i++)
 8014a70:	69ca      	ldr	r2, [r1, #28]
 8014a72:	429a      	cmp	r2, r3
 8014a74:	d8f7      	bhi.n	8014a66 <tHermiteDelay_clear+0xa>
}
 8014a76:	4770      	bx	lr

08014a78 <tHermiteDelay_tickIn>:
    _tHermiteDelay* d = *dl;
 8014a78:	6803      	ldr	r3, [r0, #0]
    d->buff[d->inPoint] = input;
 8014a7a:	6959      	ldr	r1, [r3, #20]
 8014a7c:	685a      	ldr	r2, [r3, #4]
 8014a7e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8014a82:	ed82 0a00 	vstr	s0, [r2]
    d->inPoint = (d->inPoint + 1) & d->bufferMask;
 8014a86:	695a      	ldr	r2, [r3, #20]
 8014a88:	6899      	ldr	r1, [r3, #8]
 8014a8a:	3201      	adds	r2, #1
 8014a8c:	400a      	ands	r2, r1
 8014a8e:	615a      	str	r2, [r3, #20]
}
 8014a90:	4770      	bx	lr
 8014a92:	bf00      	nop

08014a94 <tHermiteDelay_tickOut>:
{
 8014a94:	b510      	push	{r4, lr}
    _tHermiteDelay* d = *dl;
 8014a96:	6804      	ldr	r4, [r0, #0]
    uint32_t idx = (uint32_t) d->outPoint;
 8014a98:	69a1      	ldr	r1, [r4, #24]
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014a9a:	ed94 2a0a 	vldr	s4, [r4, #40]	; 0x28
                                                d->buff[(idx + 2) & d->bufferMask],
 8014a9e:	1c8b      	adds	r3, r1, #2
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014aa0:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
                                                d->buff[(idx + 2) & d->bufferMask],
 8014aa4:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014aa6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014aaa:	edd3 1a00 	vldr	s3, [r3]
 8014aae:	69e3      	ldr	r3, [r4, #28]
 8014ab0:	440b      	add	r3, r1
 8014ab2:	3b01      	subs	r3, #1
 8014ab4:	4003      	ands	r3, r0
 8014ab6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014aba:	ed93 0a00 	vldr	s0, [r3]
                                                d->buff[(idx + 1) & d->bufferMask],
 8014abe:	1c4b      	adds	r3, r1, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014ac0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
                                                d->buff[(idx + 1) & d->bufferMask],
 8014ac4:	4003      	ands	r3, r0
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014ac6:	edd1 0a00 	vldr	s1, [r1]
 8014aca:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014ace:	ed92 1a00 	vldr	s2, [r2]
 8014ad2:	f002 fca7 	bl	8017424 <LEAF_interpolate_hermite_x>
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 8014ad6:	69a3      	ldr	r3, [r4, #24]
 8014ad8:	68a2      	ldr	r2, [r4, #8]
 8014ada:	3301      	adds	r3, #1
    d->lastOut =    LEAF_interpolate_hermite_x (d->buff[((idx - 1) + d->maxDelay) & d->bufferMask],
 8014adc:	ed84 0a03 	vstr	s0, [r4, #12]
    d->outPoint = (d->outPoint + 1) & d->bufferMask;
 8014ae0:	4013      	ands	r3, r2
 8014ae2:	61a3      	str	r3, [r4, #24]
}
 8014ae4:	bd10      	pop	{r4, pc}
 8014ae6:	bf00      	nop

08014ae8 <tHermiteDelay_setDelay>:
    _tHermiteDelay* d = *dl;
 8014ae8:	6803      	ldr	r3, [r0, #0]
    float outPointer = d->inPoint - d->delay;
 8014aea:	edd3 7a05 	vldr	s15, [r3, #20]
    d->delay = delay; // not safe but faster
 8014aee:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    float outPointer = d->inPoint - d->delay;
 8014af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014af6:	ee37 0ac0 	vsub.f32	s0, s15, s0
    while ( outPointer < 0 )
 8014afa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b02:	d50a      	bpl.n	8014b1a <tHermiteDelay_setDelay+0x32>
        outPointer += d->maxDelay; // modulo maximum length
 8014b04:	edd3 7a07 	vldr	s15, [r3, #28]
 8014b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8014b0c:	ee30 0a27 	vadd.f32	s0, s0, s15
    while ( outPointer < 0 )
 8014b10:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8014b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b18:	d4f8      	bmi.n	8014b0c <tHermiteDelay_setDelay+0x24>
    d->outPoint = (uint32_t) outPointer;   // integer part
 8014b1a:	eefc 6ac0 	vcvt.u32.f32	s13, s0
    d->outPoint &= d->bufferMask;
 8014b1e:	689a      	ldr	r2, [r3, #8]
    d->omAlpha = 1.0f - d->alpha;
 8014b20:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    d->alpha = outPointer - d->outPoint; // fractional part
 8014b24:	eeb8 7a66 	vcvt.f32.u32	s14, s13
    d->outPoint &= d->bufferMask;
 8014b28:	ee16 1a90 	vmov	r1, s13
    d->omAlpha = 1.0f - d->alpha;
 8014b2c:	ee77 7ac0 	vsub.f32	s15, s15, s0
    d->outPoint &= d->bufferMask;
 8014b30:	400a      	ands	r2, r1
    d->alpha = outPointer - d->outPoint; // fractional part
 8014b32:	ee30 0a47 	vsub.f32	s0, s0, s14
    d->omAlpha = 1.0f - d->alpha;
 8014b36:	ee77 7a87 	vadd.f32	s15, s15, s14
    d->outPoint &= d->bufferMask;
 8014b3a:	619a      	str	r2, [r3, #24]
    d->alpha = outPointer - d->outPoint; // fractional part
 8014b3c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
    d->omAlpha = 1.0f - d->alpha;
 8014b40:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8014b44:	4770      	bx	lr
 8014b46:	bf00      	nop

08014b48 <tHermiteDelay_tapOut>:

float tHermiteDelay_tapOut (tHermiteDelay* const dl, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 8014b48:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8014b4a:	43c9      	mvns	r1, r1
 8014b4c:	6958      	ldr	r0, [r3, #20]
    
    return d->buff[tap];
 8014b4e:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1) & d->bufferMask;
 8014b52:	4401      	add	r1, r0
 8014b54:	4011      	ands	r1, r2
    return d->buff[tap];
 8014b56:	eb03 0181 	add.w	r1, r3, r1, lsl #2

}
 8014b5a:	ed91 0a00 	vldr	s0, [r1]
 8014b5e:	4770      	bx	lr

08014b60 <tHermiteDelay_addTo>:
    d->buff[tap] = value;
}

float tHermiteDelay_addTo (tHermiteDelay* const dl, float value, uint32_t tapDelay)
{
    _tHermiteDelay* d = *dl;
 8014b60:	6803      	ldr	r3, [r0, #0]
    
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 8014b62:	43c9      	mvns	r1, r1
 8014b64:	6958      	ldr	r0, [r3, #20]
    
    return (d->buff[tap] += value);
 8014b66:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
    int32_t tap = (d->inPoint - tapDelay - 1)  & d->bufferMask;
 8014b6a:	4401      	add	r1, r0
 8014b6c:	4011      	ands	r1, r2
    return (d->buff[tap] += value);
 8014b6e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8014b72:	edd1 7a00 	vldr	s15, [r1]
 8014b76:	ee30 0a27 	vadd.f32	s0, s0, s15
 8014b7a:	ed81 0a00 	vstr	s0, [r1]
}
 8014b7e:	4770      	bx	lr

08014b80 <tOversampler_init>:
//============================================================================================================
// Oversampler
//============================================================================================================
// Latency is equal to the phase length (numTaps / ratio)
void tOversampler_init (tOversampler* const osr, int ratio, int extraQuality, LEAF* const leaf)
{
 8014b80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b84:	460d      	mov	r5, r1

void tOversampler_initToPool (tOversampler* const osr, int maxRatio, int extraQuality, tMempool* const mp)
{
    _tMempool* m = *mp;
    int offset = 0;
    if (extraQuality) offset = 6;
 8014b86:	1e16      	subs	r6, r2, #0
    _tMempool* m = *mp;
 8014b88:	6999      	ldr	r1, [r3, #24]
{
 8014b8a:	b082      	sub	sp, #8
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8014b8c:	f1a5 0302 	sub.w	r3, r5, #2
    if (extraQuality) offset = 6;
 8014b90:	bf0c      	ite	eq
 8014b92:	2700      	moveq	r7, #0
 8014b94:	2706      	movne	r7, #6
{
 8014b96:	4680      	mov	r8, r0
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8014b98:	2b1e      	cmp	r3, #30
 8014b9a:	d93a      	bls.n	8014c12 <tOversampler_init+0x92>
        maxRatio == 16 || maxRatio == 32 || maxRatio == 64)
 8014b9c:	2d40      	cmp	r5, #64	; 0x40
 8014b9e:	d135      	bne.n	8014c0c <tOversampler_init+0x8c>
    {
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8014ba0:	2028      	movs	r0, #40	; 0x28
 8014ba2:	9101      	str	r1, [sp, #4]
 8014ba4:	f002 fd44 	bl	8017630 <mpool_alloc>
        
        os->offset = offset;
        os->maxRatio = maxRatio;
        os->allowHighQuality = extraQuality;
        os->ratio = os->maxRatio;
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8014ba8:	ee07 5a90 	vmov	s15, r5
        os->mempool = m;
 8014bac:	9901      	ldr	r1, [sp, #4]
        _tOversampler* os = *osr = (_tOversampler*) mpool_alloc(sizeof(_tOversampler), m);
 8014bae:	4604      	mov	r4, r0
 8014bb0:	f8c8 0000 	str.w	r0, [r8]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8014bb4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
        os->mempool = m;
 8014bb8:	6001      	str	r1, [r0, #0]
        os->ratio = os->maxRatio;
 8014bba:	60c5      	str	r5, [r0, #12]
        os->offset = offset;
 8014bbc:	6107      	str	r7, [r0, #16]
        os->allowHighQuality = extraQuality;
 8014bbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8014bc2:	f009 f843 	bl	801dc4c <log2f>
 8014bc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8014bca:	4a16      	ldr	r2, [pc, #88]	; (8014c24 <tOversampler_init+0xa4>)
        os->phaseLength = os->numTaps / os->ratio;
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014bcc:	9901      	ldr	r1, [sp, #4]
        int idx = (int)(log2f(os->ratio))-1+os->offset;
 8014bce:	ee17 3a90 	vmov	r3, s15
 8014bd2:	3b01      	subs	r3, #1
 8014bd4:	443b      	add	r3, r7
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8014bd6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014bda:	edd2 7a00 	vldr	s15, [r2]
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8014bde:	4a12      	ldr	r2, [pc, #72]	; (8014c28 <tOversampler_init+0xa8>)
        os->numTaps = __leaf_tablesize_firNumTaps[idx];
 8014be0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014be4:	ee17 0a90 	vmov	r0, s15
 8014be8:	edc4 7a08 	vstr	s15, [r4, #32]
        os->phaseLength = os->numTaps / os->ratio;
 8014bec:	fb90 f5f5 	sdiv	r5, r0, r5
 8014bf0:	6265      	str	r5, [r4, #36]	; 0x24
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014bf2:	00c0      	lsls	r0, r0, #3
        os->pCoeffs = (float*) __leaf_tableref_firCoeffs[idx];
 8014bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014bf8:	6163      	str	r3, [r4, #20]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014bfa:	f002 fd19 	bl	8017630 <mpool_alloc>
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014bfe:	6a23      	ldr	r3, [r4, #32]
        os->upState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014c00:	61a0      	str	r0, [r4, #24]
        os->downState = (float*) mpool_alloc(sizeof(float) * os->numTaps * 2, m);
 8014c02:	9901      	ldr	r1, [sp, #4]
 8014c04:	00d8      	lsls	r0, r3, #3
 8014c06:	f002 fd13 	bl	8017630 <mpool_alloc>
 8014c0a:	61e0      	str	r0, [r4, #28]
}
 8014c0c:	b002      	add	sp, #8
 8014c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (maxRatio == 2 || maxRatio == 4  || maxRatio == 8 ||
 8014c12:	4a06      	ldr	r2, [pc, #24]	; (8014c2c <tOversampler_init+0xac>)
 8014c14:	fa22 f303 	lsr.w	r3, r2, r3
 8014c18:	07db      	lsls	r3, r3, #31
 8014c1a:	d4c1      	bmi.n	8014ba0 <tOversampler_init+0x20>
}
 8014c1c:	b002      	add	sp, #8
 8014c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c22:	bf00      	nop
 8014c24:	08029574 	.word	0x08029574
 8014c28:	2000073c 	.word	0x2000073c
 8014c2c:	40004045 	.word	0x40004045

08014c30 <tOversampler_upsample>:
#ifdef ITCMRAM
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_upsample(tOversampler* const osr, float input, float* output)
#else
void tOversampler_upsample(tOversampler* const osr, float input, float* output)
#endif
{
 8014c30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    _tOversampler* os = *osr;
 8014c34:	6807      	ldr	r7, [r0, #0]
    
    if (os->ratio == 1)
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	d05b      	beq.n	8014cf4 <tOversampler_upsample+0xc4>
    {
        output[0] = input;
        return;
    }
    
    float *pState = os->upState;                 /* State pointer */
 8014c3c:	69be      	ldr	r6, [r7, #24]
    float *pStateCur;
    float *ptr1;                               /* Temporary pointer for state buffer */
    float *ptr2;                               /* Temporary pointer for coefficient buffer */
    float sum0;                                /* Accumulators */
    uint32_t i, tapCnt;                    /* Loop counters */
    uint32_t phaseLen = os->phaseLength;            /* Length of each polyphase filter component */
 8014c3e:	6a7d      	ldr	r5, [r7, #36]	; 0x24
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8014c40:	f8d7 8014 	ldr.w	r8, [r7, #20]
    /* os->pState buffer contains previous frame (phaseLen - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->upState + (phaseLen - 1U);
    
    /* Copy new input sample into the state buffer */
    *pStateCur = input;
 8014c44:	eb06 0385 	add.w	r3, r6, r5, lsl #2
 8014c48:	ed03 0a01 	vstr	s0, [r3, #-4]
    
    /* Address modifier index of coefficient buffer */
    j = 1U;
    
    /* Loop over the Interpolation factor. */
    i = os->ratio;
 8014c4c:	68fc      	ldr	r4, [r7, #12]
 8014c4e:	46a1      	mov	r9, r4
    
    while (i > 0U)
 8014c50:	b3ac      	cbz	r4, 8014cbe <tOversampler_upsample+0x8e>
    j = 1U;
 8014c52:	f04f 0e01 	mov.w	lr, #1
         Repeat until we've computed numTaps-(4*os->L) coefficients. */
        
        /* Initialize tapCnt with number of samples */
        tapCnt = phaseLen;
        
        while (tapCnt > 0U)
 8014c56:	ed9f 6a29 	vldr	s12, [pc, #164]	; 8014cfc <tOversampler_upsample+0xcc>
        ptr2 = pCoeffs + (os->ratio - j);
 8014c5a:	eba4 030e 	sub.w	r3, r4, lr
 8014c5e:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 8014c62:	b325      	cbz	r5, 8014cae <tOversampler_upsample+0x7e>
 8014c64:	2c01      	cmp	r4, #1
            sum0 += *ptr1++ * *ptr2;
            
            /* Upsampling is done by stuffing L-1 zeros between each sample.
             * So instead of multiplying zeros with coefficients,
             * Increment the coefficient pointer by interpolation factor times. */
            ptr2 += os->ratio;
 8014c66:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8014c6a:	d135      	bne.n	8014cd8 <tOversampler_upsample+0xa8>
 8014c6c:	462a      	mov	r2, r5
        ptr1 = pState;
 8014c6e:	4630      	mov	r0, r6
        sum0 = 0.0f;
 8014c70:	eddf 7a22 	vldr	s15, [pc, #136]	; 8014cfc <tOversampler_upsample+0xcc>
            sum0 += *ptr1++ * *ptr2;
 8014c74:	edd3 6a00 	vldr	s13, [r3]
        while (tapCnt > 0U)
 8014c78:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8014c7a:	ecb0 7a01 	vldmia	r0!, {s14}
            ptr2 += os->ratio;
 8014c7e:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 8014c80:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8014c84:	d1f6      	bne.n	8014c74 <tOversampler_upsample+0x44>
            /* Decrement loop counter */
            tapCnt--;
        }
        
        /* The result is in the accumulator, store in the destination buffer. */
        *output++ = sum0 * os->ratio;
 8014c86:	ee07 4a10 	vmov	s14, r4
    while (i > 0U)
 8014c8a:	45f1      	cmp	r9, lr
        
        /* Increment the address modifier index of coefficient buffer */
        j++;
 8014c8c:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 8014c90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014c98:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8014c9c:	d00f      	beq.n	8014cbe <tOversampler_upsample+0x8e>
        ptr2 = pCoeffs + (os->ratio - j);
 8014c9e:	68fc      	ldr	r4, [r7, #12]
 8014ca0:	469e      	mov	lr, r3
 8014ca2:	eba4 030e 	sub.w	r3, r4, lr
 8014ca6:	eb08 0383 	add.w	r3, r8, r3, lsl #2
        while (tapCnt > 0U)
 8014caa:	2d00      	cmp	r5, #0
 8014cac:	d1da      	bne.n	8014c64 <tOversampler_upsample+0x34>
 8014cae:	eef0 7a46 	vmov.f32	s15, s12
    while (i > 0U)
 8014cb2:	45f1      	cmp	r9, lr
        j++;
 8014cb4:	f10e 0301 	add.w	r3, lr, #1
        *output++ = sum0 * os->ratio;
 8014cb8:	ece1 7a01 	vstmia	r1!, {s15}
    while (i > 0U)
 8014cbc:	d1ef      	bne.n	8014c9e <tOversampler_upsample+0x6e>
    
    /* Initialize tapCnt with number of samples */
    tapCnt = (phaseLen - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8014cbe:	1e6b      	subs	r3, r5, #1
    pState = pState + 1;
 8014cc0:	f106 0604 	add.w	r6, r6, #4
    pStateCur = os->upState;
 8014cc4:	69ba      	ldr	r2, [r7, #24]
    while (tapCnt > 0U)
 8014cc6:	d005      	beq.n	8014cd4 <tOversampler_upsample+0xa4>
    {
        *pStateCur++ = *pState++;
 8014cc8:	f856 1b04 	ldr.w	r1, [r6], #4
    while (tapCnt > 0U)
 8014ccc:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8014cce:	f842 1b04 	str.w	r1, [r2], #4
    while (tapCnt > 0U)
 8014cd2:	d1f9      	bne.n	8014cc8 <tOversampler_upsample+0x98>
        
        /* Decrement loop counter */
        tapCnt--;
    }
}
 8014cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        sum0 = 0.0f;
 8014cd8:	eddf 7a08 	vldr	s15, [pc, #32]	; 8014cfc <tOversampler_upsample+0xcc>
            ptr2 += os->ratio;
 8014cdc:	462a      	mov	r2, r5
        ptr1 = pState;
 8014cde:	4630      	mov	r0, r6
            sum0 += *ptr1++ * *ptr2;
 8014ce0:	ed93 7a00 	vldr	s14, [r3]
        while (tapCnt > 0U)
 8014ce4:	3a01      	subs	r2, #1
            sum0 += *ptr1++ * *ptr2;
 8014ce6:	ecf0 6a01 	vldmia	r0!, {s13}
            ptr2 += os->ratio;
 8014cea:	4463      	add	r3, ip
            sum0 += *ptr1++ * *ptr2;
 8014cec:	eee6 7a87 	vfma.f32	s15, s13, s14
        while (tapCnt > 0U)
 8014cf0:	d1f6      	bne.n	8014ce0 <tOversampler_upsample+0xb0>
 8014cf2:	e7c8      	b.n	8014c86 <tOversampler_upsample+0x56>
        output[0] = input;
 8014cf4:	ed81 0a00 	vstr	s0, [r1]
}
 8014cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014cfc:	00000000 	.word	0x00000000

08014d00 <tOversampler_downsample>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tOversampler_downsample(tOversampler *const osr, float* input)
#else
float tOversampler_downsample(tOversampler *const osr, float* input)
#endif
{
 8014d00:	b470      	push	{r4, r5, r6}
    _tOversampler* os = *osr;
 8014d02:	6806      	ldr	r6, [r0, #0]
    
    if (os->ratio == 1) return input[0];
 8014d04:	68f3      	ldr	r3, [r6, #12]
 8014d06:	2b01      	cmp	r3, #1
 8014d08:	d029      	beq.n	8014d5e <tOversampler_downsample+0x5e>
    float *pStateCur;                          /* Points to the current sample of the state */
    float *px0;                                /* Temporary pointer for state buffer */
    float *pb;                                 /* Temporary pointer for coefficient buffer */
    float x0, c0;                              /* Temporary variables to hold state and coefficient values */
    float acc0;                                /* Accumulator */
    uint32_t numTaps = os->numTaps;                 /* Number of filter coefficients in the filter */
 8014d0a:	6a32      	ldr	r2, [r6, #32]
    uint32_t i, tapCnt;
    float output;
    
    /* os->pState buffer contains previous frame (numTaps - 1) samples */
    /* pStateCur points to the location where the new input data should be written */
    pStateCur = os->downState + (numTaps - 1U);
 8014d0c:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
    float *pState = os->downState;                 /* State pointer */
 8014d10:	69f4      	ldr	r4, [r6, #28]
    pStateCur = os->downState + (numTaps - 1U);
 8014d12:	4410      	add	r0, r2
    float *pCoeffs = os->pCoeffs;               /* Coefficient pointer */
 8014d14:	6975      	ldr	r5, [r6, #20]
    pStateCur = os->downState + (numTaps - 1U);
 8014d16:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    /* Copy decimation factor number of new input samples into the state buffer */
    i = os->ratio;
    
    do
    {
        *pStateCur++ = *input++;
 8014d1a:	f851 cb04 	ldr.w	ip, [r1], #4
        
    } while (--i);
 8014d1e:	3b01      	subs	r3, #1
        *pStateCur++ = *input++;
 8014d20:	f840 cb04 	str.w	ip, [r0], #4
    } while (--i);
 8014d24:	d1f9      	bne.n	8014d1a <tOversampler_downsample+0x1a>
    pb = pCoeffs;
    
    /* Initialize tapCnt with number of taps */
    tapCnt = numTaps;
    
    while (tapCnt > 0U)
 8014d26:	b1f2      	cbz	r2, 8014d66 <tOversampler_downsample+0x66>
 8014d28:	4613      	mov	r3, r2
    acc0 = 0.0f;
 8014d2a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8014d78 <tOversampler_downsample+0x78>
    px0 = pState;
 8014d2e:	4621      	mov	r1, r4
        
        /* Fetch 1 state variable */
        x0 = *px0++;
        
        /* Perform the multiply-accumulate */
        acc0 += x0 * c0;
 8014d30:	ecb5 7a01 	vldmia	r5!, {s14}
    while (tapCnt > 0U)
 8014d34:	3b01      	subs	r3, #1
        acc0 += x0 * c0;
 8014d36:	ecf1 7a01 	vldmia	r1!, {s15}
 8014d3a:	eea7 0a27 	vfma.f32	s0, s14, s15
    while (tapCnt > 0U)
 8014d3e:	d1f7      	bne.n	8014d30 <tOversampler_downsample+0x30>
        tapCnt--;
    }
    
    /* Advance the state pointer by the decimation factor
     * to process the next group of decimation factor number samples */
    pState = pState + os->ratio;
 8014d40:	68f1      	ldr	r1, [r6, #12]
    
    /* Initialize tapCnt with number of taps */
    tapCnt = (numTaps - 1U);
    
    /* Copy data */
    while (tapCnt > 0U)
 8014d42:	1e53      	subs	r3, r2, #1
    pStateCur = os->downState;
 8014d44:	69f0      	ldr	r0, [r6, #28]
    pState = pState + os->ratio;
 8014d46:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 8014d4a:	d006      	beq.n	8014d5a <tOversampler_downsample+0x5a>
 8014d4c:	4602      	mov	r2, r0
    {
        *pStateCur++ = *pState++;
 8014d4e:	f851 0b04 	ldr.w	r0, [r1], #4
    while (tapCnt > 0U)
 8014d52:	3b01      	subs	r3, #1
        *pStateCur++ = *pState++;
 8014d54:	f842 0b04 	str.w	r0, [r2], #4
    while (tapCnt > 0U)
 8014d58:	d1f9      	bne.n	8014d4e <tOversampler_downsample+0x4e>
        /* Decrement loop counter */
        tapCnt--;
    }
    
    return output;
}
 8014d5a:	bc70      	pop	{r4, r5, r6}
 8014d5c:	4770      	bx	lr
    if (os->ratio == 1) return input[0];
 8014d5e:	ed91 0a00 	vldr	s0, [r1]
}
 8014d62:	bc70      	pop	{r4, r5, r6}
 8014d64:	4770      	bx	lr
    pState = pState + os->ratio;
 8014d66:	68f1      	ldr	r1, [r6, #12]
    tapCnt = (numTaps - 1U);
 8014d68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    pStateCur = os->downState;
 8014d6c:	69f0      	ldr	r0, [r6, #28]
    acc0 = 0.0f;
 8014d6e:	ed9f 0a02 	vldr	s0, [pc, #8]	; 8014d78 <tOversampler_downsample+0x78>
    pState = pState + os->ratio;
 8014d72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    while (tapCnt > 0U)
 8014d76:	e7e9      	b.n	8014d4c <tOversampler_downsample+0x4c>
 8014d78:	00000000 	.word	0x00000000

08014d7c <tCrusher_init>:
//============================================================================================================
#define SCALAR 5000.f
#define INV_SCALAR 0.0002f

void tCrusher_init (tCrusher* const cr, LEAF* const leaf)
{
 8014d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tCrusher_initToPool(cr, &leaf->mempool);
}

void tCrusher_initToPool (tCrusher* const cr, tMempool* const mp)
{
    _tMempool* m = *mp;
 8014d7e:	698f      	ldr	r7, [r1, #24]
{
 8014d80:	4606      	mov	r6, r0
 8014d82:	460d      	mov	r5, r1
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8014d84:	2020      	movs	r0, #32
 8014d86:	4639      	mov	r1, r7
 8014d88:	f002 fc52 	bl	8017630 <mpool_alloc>
    c->mempool = m;
    
    c->op = 4;
    c->div = 1.0f / SCALAR;
    c->rnd = 0.25f;
 8014d8c:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
    c->div = 1.0f / SCALAR;
 8014d90:	4a10      	ldr	r2, [pc, #64]	; (8014dd4 <tCrusher_init+0x58>)
    c->op = 4;
 8014d92:	2104      	movs	r1, #4
    _tCrusher* c = *cr = (_tCrusher*) mpool_alloc(sizeof(_tCrusher), m);
 8014d94:	6030      	str	r0, [r6, #0]
 8014d96:	4604      	mov	r4, r0
    c->op = 4;
 8014d98:	6141      	str	r1, [r0, #20]
    c->rnd = 0.25f;
 8014d9a:	6103      	str	r3, [r0, #16]
    c->srr = 0.25f;
 8014d9c:	6043      	str	r3, [r0, #4]
    c->div = 1.0f / SCALAR;
 8014d9e:	60c2      	str	r2, [r0, #12]
    c->mempool = m;
 8014da0:	6007      	str	r7, [r0, #0]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8014da2:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 8014da4:	69ad      	ldr	r5, [r5, #24]
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8014da6:	4629      	mov	r1, r5
 8014da8:	f002 fc42 	bl	8017630 <mpool_alloc>
    s->invRatio = 1.0f;
 8014dac:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    s->hold = 0.0f;
 8014db0:	2200      	movs	r2, #0
    s->count = 0;
 8014db2:	2300      	movs	r3, #0
    _tSampleReducer* s = *sr = (_tSampleReducer*) mpool_alloc(sizeof(_tSampleReducer), m);
 8014db4:	61e0      	str	r0, [r4, #28]
    tSampleReducer_initToPool(&c->sReducer, mp);
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8014db6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8014dd8 <tCrusher_init+0x5c>
    s->mempool = m;
 8014dba:	6005      	str	r5, [r0, #0]
    s->invRatio = 1.0f;
 8014dbc:	6041      	str	r1, [r0, #4]
    s->hold = 0.0f;
 8014dbe:	6082      	str	r2, [r0, #8]
    s->count = 0;
 8014dc0:	60c3      	str	r3, [r0, #12]
    c->gain = (c->div / SCALAR) * 0.7f + 0.3f;
 8014dc2:	eddf 7a06 	vldr	s15, [pc, #24]	; 8014ddc <tCrusher_init+0x60>
 8014dc6:	edd4 6a03 	vldr	s13, [r4, #12]
 8014dca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014dce:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8014dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014dd4:	3951b717 	.word	0x3951b717
 8014dd8:	3912ccf6 	.word	0x3912ccf6
 8014ddc:	3e99999a 	.word	0x3e99999a

08014de0 <tCrusher_tick>:
{
    _tCrusher* c = *cr;
    
    float sample = input;
    
    sample *= SCALAR; // SCALAR is 5000 by default
 8014de0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8014e5c <tCrusher_tick+0x7c>
 8014de4:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8014de8:	b510      	push	{r4, lr}
    
    sample = (int32_t) sample;
 8014dea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
    _tCrusher* c = *cr;
 8014dee:	6804      	ldr	r4, [r0, #0]
    
    sample *= c->div;
 8014df0:	edd4 7a03 	vldr	s15, [r4, #12]
    sample = (int32_t) sample;
 8014df4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8014df8:	6960      	ldr	r0, [r4, #20]
 8014dfa:	05c0      	lsls	r0, r0, #23
 8014dfc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e00:	f002 fa20 	bl	8017244 <LEAF_bitwise_xor>
    
    sample = LEAF_clip(-1.f, sample, 1.f);
 8014e04:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    sample = LEAF_bitwise_xor(sample, c->op << 23);
 8014e08:	eef0 0a40 	vmov.f32	s1, s0
    sample = LEAF_clip(-1.f, sample, 1.f);
 8014e0c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8014e10:	f002 fa1e 	bl	8017250 <LEAF_clip>
    
    sample = LEAF_round(sample, c->rnd);
 8014e14:	edd4 0a04 	vldr	s1, [r4, #16]
 8014e18:	f002 fa02 	bl	8017220 <LEAF_round>
    _tSampleReducer* s = *sr;
 8014e1c:	69e3      	ldr	r3, [r4, #28]
    if (s->count > s->invRatio)
 8014e1e:	68da      	ldr	r2, [r3, #12]
 8014e20:	edd3 7a01 	vldr	s15, [r3, #4]
 8014e24:	ee07 2a10 	vmov	s14, r2
 8014e28:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8014e2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e34:	dc08      	bgt.n	8014e48 <tCrusher_tick+0x68>
    s->count++;
 8014e36:	3201      	adds	r2, #1
    return s->hold;
 8014e38:	ed93 0a02 	vldr	s0, [r3, #8]
    s->count++;
 8014e3c:	60da      	str	r2, [r3, #12]
    
    sample = tSampleReducer_tick(&c->sReducer, sample);
    
    return sample * c->gain;
 8014e3e:	edd4 7a06 	vldr	s15, [r4, #24]
    
}
 8014e42:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e46:	bd10      	pop	{r4, pc}
        s->hold = input;
 8014e48:	2201      	movs	r2, #1
 8014e4a:	ed83 0a02 	vstr	s0, [r3, #8]
    s->count++;
 8014e4e:	60da      	str	r2, [r3, #12]
    return sample * c->gain;
 8014e50:	edd4 7a06 	vldr	s15, [r4, #24]
}
 8014e54:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014e58:	bd10      	pop	{r4, pc}
 8014e5a:	bf00      	nop
 8014e5c:	459c4000 	.word	0x459c4000

08014e60 <tCrusher_setSamplingRatio>:
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8014e60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->rnd = rnd;
}

void    tCrusher_setSamplingRatio (tCrusher* const cr, float ratio)
{
    _tCrusher* c = *cr;
 8014e64:	6803      	ldr	r3, [r0, #0]
    c->srr = ratio;
 8014e66:	ed83 0a01 	vstr	s0, [r3, #4]
    if ((ratio <= 1.0f) && (ratio >= 0.0f))
 8014e6a:	eeb4 0a67 	vcmp.f32	s0, s15
 8014e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e72:	d809      	bhi.n	8014e88 <tCrusher_setSamplingRatio+0x28>
 8014e74:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8014e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014e7c:	db04      	blt.n	8014e88 <tCrusher_setSamplingRatio+0x28>
        s->invRatio = 1.0f / ratio;
 8014e7e:	ee87 7a80 	vdiv.f32	s14, s15, s0
    _tSampleReducer* s = *sr;
 8014e82:	69db      	ldr	r3, [r3, #28]
        s->invRatio = 1.0f / ratio;
 8014e84:	ed83 7a01 	vstr	s14, [r3, #4]
    tSampleReducer_setRatio(&c->sReducer, ratio);
}
 8014e88:	4770      	bx	lr
 8014e8a:	bf00      	nop

08014e8c <tCompressor_tick>:
    
    mpool_free((char*)c, c->mempool);
}

float tCompressor_tick(tCompressor* const comp, float in)
{
 8014e8c:	b510      	push	{r4, lr}
 8014e8e:	ed2d 8b02 	vpush	{d8}
    _tCompressor* c = *comp;
 8014e92:	6804      	ldr	r4, [r0, #0]
{
 8014e94:	eeb0 8a40 	vmov.f32	s16, s0
    
    float slope, overshoot;
    
    float in_db = LEAF_clip(-90.0f, fasteratodb(fastabsf(in)), 0.0f);
 8014e98:	f002 f93e 	bl	8017118 <fastabsf>
 8014e9c:	f002 fb5c 	bl	8017558 <fasteratodb>
 8014ea0:	ed9f 1a2c 	vldr	s2, [pc, #176]	; 8014f54 <tCompressor_tick+0xc8>
 8014ea4:	eef0 0a40 	vmov.f32	s1, s0
 8014ea8:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 8014f58 <tCompressor_tick+0xcc>
 8014eac:	f002 f9d0 	bl	8017250 <LEAF_clip>
    
    c->y_T[1] = c->y_T[0];
    
    slope = 1.0f - c->invR; // feed-forward topology;
    
    overshoot = in_db - c->T;
 8014eb0:	ed94 7a03 	vldr	s14, [r4, #12]
    

    if (overshoot <= -(c->W))
 8014eb4:	ed94 6a05 	vldr	s12, [r4, #20]
    overshoot = in_db - c->T;
 8014eb8:	ee30 7a47 	vsub.f32	s14, s0, s14
    c->y_T[1] = c->y_T[0];
 8014ebc:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    if (overshoot <= -(c->W))
 8014ec0:	eef1 7a46 	vneg.f32	s15, s12
    c->y_T[1] = c->y_T[0];
 8014ec4:	edc4 6a10 	vstr	s13, [r4, #64]	; 0x40
    if (overshoot <= -(c->W))
 8014ec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8014ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014ed0:	db23      	blt.n	8014f1a <tCompressor_tick+0x8e>
    {
        out_db = in_db;
        c->isActive = 0;
 8014ed2:	2300      	movs	r3, #0
 8014ed4:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8014f54 <tCompressor_tick+0xc8>
 8014ed8:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * overshoot;
        c->isActive = 1;
    }
    */
    c->x_T[0] = out_db - in_db;
    if (c->x_T[0] > c->y_T[1])
 8014eda:	eef4 6ac7 	vcmpe.f32	s13, s14
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
    else
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8014ede:	ed94 0a06 	vldr	s0, [r4, #24]
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 8014ee2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    c->x_T[0] = out_db - in_db;
 8014ee6:	ed84 7a0d 	vstr	s14, [r4, #52]	; 0x34
    if (c->x_T[0] > c->y_T[1])
 8014eea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        c->y_T[0] = c->tauAttack * c->y_T[1] + (1.0f-c->tauAttack) * c->x_T[0];
 8014eee:	bf4c      	ite	mi
 8014ef0:	ed94 6a01 	vldrmi	s12, [r4, #4]
        c->y_T[0] = c->tauRelease * c->y_T[1] + (1.0f-c->tauRelease) * c->x_T[0];
 8014ef4:	ed94 6a02 	vldrpl	s12, [r4, #8]
 8014ef8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8014efc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f00:	eee6 7a86 	vfma.f32	s15, s13, s12
    float attenuation = fasterdbtoa(c->M - c->y_T[0]);
 8014f04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8014f08:	edc4 7a0f 	vstr	s15, [r4, #60]	; 0x3c
 8014f0c:	f002 fb58 	bl	80175c0 <fasterdbtoa>
    return attenuation * in;
}
 8014f10:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014f14:	ecbd 8b02 	vpop	{d8}
 8014f18:	bd10      	pop	{r4, pc}
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8014f1a:	eeb4 6ac7 	vcmpe.f32	s12, s14
    slope = 1.0f - c->invR; // feed-forward topology;
 8014f1e:	edd4 5a07 	vldr	s11, [r4, #28]
 8014f22:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8014f26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    slope = 1.0f - c->invR; // feed-forward topology;
 8014f2a:	ee77 7ae5 	vsub.f32	s15, s15, s11
    else if ((overshoot > -(c->W)) && (overshoot < (c->W)))
 8014f2e:	dd0c      	ble.n	8014f4a <tCompressor_tick+0xbe>
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8014f30:	edd4 5a08 	vldr	s11, [r4, #32]
        float squareit = (overshoot + c->W);
 8014f34:	ee36 7a07 	vadd.f32	s14, s12, s14
        c->isActive = 1;
 8014f38:	2301      	movs	r3, #1
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8014f3a:	ee67 7aa5 	vmul.f32	s15, s15, s11
        c->isActive = 1;
 8014f3e:	6463      	str	r3, [r4, #68]	; 0x44
        out_db = in_db + slope * ((squareit * squareit) * c->inv4W); // .^ 2 ???
 8014f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8014f44:	ee27 7a87 	vmul.f32	s14, s15, s14
    {
 8014f48:	e7c7      	b.n	8014eda <tCompressor_tick+0x4e>
        c->isActive = 1;
 8014f4a:	2301      	movs	r3, #1
        out_db = in_db + slope * overshoot;
 8014f4c:	ee27 7a87 	vmul.f32	s14, s15, s14
        c->isActive = 1;
 8014f50:	6463      	str	r3, [r4, #68]	; 0x44
 8014f52:	e7c2      	b.n	8014eda <tCompressor_tick+0x4e>
 8014f54:	00000000 	.word	0x00000000
 8014f58:	c2b40000 	.word	0xc2b40000

08014f5c <tFeedbackLeveler_initToPool>:
{
    tFeedbackLeveler_initToPool(fb, targetLevel, factor, strength, mode, &leaf->mempool);
}

void tFeedbackLeveler_initToPool (tFeedbackLeveler* const fb, float targetLevel, float factor, float strength, int mode, tMempool* const mp)
{
 8014f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8014f5e:	6817      	ldr	r7, [r2, #0]
{
 8014f60:	4614      	mov	r4, r2
 8014f62:	4606      	mov	r6, r0
 8014f64:	460d      	mov	r5, r1
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8014f66:	2018      	movs	r0, #24
 8014f68:	4639      	mov	r1, r7
{
 8014f6a:	ed2d 8b02 	vpush	{d8}
 8014f6e:	eef0 8a40 	vmov.f32	s17, s0
 8014f72:	b083      	sub	sp, #12
 8014f74:	eeb0 8a41 	vmov.f32	s16, s2
 8014f78:	edcd 0a01 	vstr	s1, [sp, #4]
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8014f7c:	f002 fb58 	bl	8017630 <mpool_alloc>
    p->mempool = m;
    
    p->curr=0.0f;
    p->targetLevel=targetLevel;
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014f80:	4621      	mov	r1, r4
    p->curr=0.0f;
 8014f82:	2300      	movs	r3, #0
    _tFeedbackLeveler* p = *fb = (_tFeedbackLeveler*) mpool_alloc(sizeof(_tFeedbackLeveler), m);
 8014f84:	4604      	mov	r4, r0
 8014f86:	6030      	str	r0, [r6, #0]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014f88:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014f8c:	3014      	adds	r0, #20
    p->mempool = m;
 8014f8e:	f840 7c14 	str.w	r7, [r0, #-20]
    p->targetLevel=targetLevel;
 8014f92:	ed40 8a04 	vstr	s17, [r0, #-16]
    p->curr=0.0f;
 8014f96:	6123      	str	r3, [r4, #16]
    tPowerFollower_initToPool(&p->pwrFlw, factor, mp);
 8014f98:	f7ff fb9e 	bl	80146d8 <tPowerFollower_initToPool>
    p->mode=mode;
 8014f9c:	60e5      	str	r5, [r4, #12]
    p->strength=strength;
 8014f9e:	ed84 8a02 	vstr	s16, [r4, #8]
}
 8014fa2:	b003      	add	sp, #12
 8014fa4:	ecbd 8b02 	vpop	{d8}
 8014fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014faa:	bf00      	nop

08014fac <tFeedbackLeveler_setStrength>:
}

void     tFeedbackLeveler_setStrength(tFeedbackLeveler* const fb, float strength)
{    // strength is how strongly level diff is affecting the amp ratio
    // try 0.125 for a start
    _tFeedbackLeveler* p = *fb;
 8014fac:	6803      	ldr	r3, [r0, #0]
    p->strength=strength;
 8014fae:	ed83 0a02 	vstr	s0, [r3, #8]
}
 8014fb2:	4770      	bx	lr

08014fb4 <tFeedbackLeveler_setFactor>:

void     tFeedbackLeveler_setFactor(tFeedbackLeveler* const fb, float factor)
{
    _tFeedbackLeveler* p = *fb;
    tPowerFollower_setFactor(&p->pwrFlw,factor);
 8014fb4:	6800      	ldr	r0, [r0, #0]
 8014fb6:	3014      	adds	r0, #20
 8014fb8:	f7ff bba8 	b.w	801470c <tPowerFollower_setFactor>

08014fbc <tFeedbackLeveler_setMode>:
}

void     tFeedbackLeveler_setMode(tFeedbackLeveler* const fb, int mode)
{    // 0 for decaying with upwards lev limiting, 1 for constrained absolute level (also downwards limiting)
    _tFeedbackLeveler* p = *fb;
 8014fbc:	6803      	ldr	r3, [r0, #0]
    p->mode=mode;
 8014fbe:	60d9      	str	r1, [r3, #12]
}
 8014fc0:	4770      	bx	lr
 8014fc2:	bf00      	nop

08014fc4 <tFeedbackLeveler_tick>:

float   tFeedbackLeveler_tick(tFeedbackLeveler* const fb, float input)
{
 8014fc4:	b510      	push	{r4, lr}
 8014fc6:	ed2d 8b02 	vpush	{d8}
    _tFeedbackLeveler* p = *fb;
 8014fca:	6804      	ldr	r4, [r0, #0]
{
 8014fcc:	eeb0 8a40 	vmov.f32	s16, s0
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8014fd0:	f104 0014 	add.w	r0, r4, #20
 8014fd4:	f7ff fbac 	bl	8014730 <tPowerFollower_tick>
 8014fd8:	ed94 7a01 	vldr	s14, [r4, #4]
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8014fdc:	68e3      	ldr	r3, [r4, #12]
    float levdiff=(tPowerFollower_tick(&p->pwrFlw, input)-p->targetLevel);
 8014fde:	ee30 7a47 	vsub.f32	s14, s0, s14
    if (p->mode==0 && levdiff<0.0f) levdiff=0.0f;
 8014fe2:	b91b      	cbnz	r3, 8014fec <tFeedbackLeveler_tick+0x28>
 8014fe4:	eddf 7a08 	vldr	s15, [pc, #32]	; 8015008 <tFeedbackLeveler_tick+0x44>
 8014fe8:	fe87 7a27 	vmaxnm.f32	s14, s14, s15
    p->curr=input*(1.0f-p->strength*levdiff);
 8014fec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8014ff0:	edd4 6a02 	vldr	s13, [r4, #8]
 8014ff4:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8014ff8:	ee27 0a88 	vmul.f32	s0, s15, s16
 8014ffc:	ed84 0a04 	vstr	s0, [r4, #16]
    return p->curr;
}
 8015000:	ecbd 8b02 	vpop	{d8}
 8015004:	bd10      	pop	{r4, pc}
 8015006:	bf00      	nop
 8015008:	00000000 	.word	0x00000000

0801500c <tFeedbackLeveler_setTargetLevel>:
}


void     tFeedbackLeveler_setTargetLevel   (tFeedbackLeveler* const fb, float TargetLevel)
{
    _tFeedbackLeveler* p = *fb;
 801500c:	6803      	ldr	r3, [r0, #0]
    p->targetLevel=TargetLevel;
 801500e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 8015012:	4770      	bx	lr

08015014 <tADSRT_init>:
//================================================================================

/* ADSR 4 */ // new version of our original table-based ADSR but with the table passed in by the user
// use this if the size of the big ADSR tables is too much.
void    tADSRT_init    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, LEAF* const leaf)
{
 8015014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015016:	ed2d 8b04 	vpush	{d8-d9}

//initialize with an exponential function that decays -- i.e. a call to LEAF_generate_exp(expBuffer, 0.001f, 0.0f, 1.0f, -0.0008f, EXP_BUFFER_SIZE);
//times are in ms
void    tADSRT_initToPool    (tADSRT* const adsrenv, float attack, float decay, float sustain, float release, float* expBuffer, int bufferSize, tMempool* const mp)
{
    _tMempool* m = *mp;
 801501a:	699e      	ldr	r6, [r3, #24]
{
 801501c:	4614      	mov	r4, r2
 801501e:	4607      	mov	r7, r0
 8015020:	460d      	mov	r5, r1
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8015022:	2068      	movs	r0, #104	; 0x68
 8015024:	4631      	mov	r1, r6
{
 8015026:	eef0 9a40 	vmov.f32	s19, s0
 801502a:	eeb0 9a60 	vmov.f32	s18, s1
 801502e:	eeb0 8a41 	vmov.f32	s16, s2
 8015032:	eef0 8a61 	vmov.f32	s17, s3
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 8015036:	f002 fafb 	bl	8017630 <mpool_alloc>
    adsr->exp_buff = expBuffer;
    adsr->buff_size = bufferSize;
    adsr->buff_sizeMinusOne = bufferSize - 1;

    adsr->sampleRate = leaf->sampleRate;
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801503a:	ee07 4a90 	vmov	s15, r4
    _tADSRT* adsr = *adsrenv = (_tADSRT*) mpool_alloc(sizeof(_tADSRT), m);
 801503e:	6038      	str	r0, [r7, #0]
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8015040:	1e62      	subs	r2, r4, #1
    adsr->mempool = m;
 8015042:	6006      	str	r6, [r0, #0]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8015044:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8015048:	eddf 7a22 	vldr	s15, [pc, #136]	; 80150d4 <tADSRT_init+0xc0>
    LEAF* leaf = adsr->mempool->leaf;
 801504c:	6873      	ldr	r3, [r6, #4]
    adsr->exp_buff = expBuffer;
 801504e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    adsr->buff_sizeMinusOne = bufferSize - 1;
 8015052:	60c2      	str	r2, [r0, #12]
    adsr->decay = decay;
    adsr->release = release;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 8015054:	eeb4 7a00 	vmov.f32	s14, #64	; 0x3e000000  0.125
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8015058:	ee26 6a27 	vmul.f32	s12, s12, s15
    adsr->exp_buff = expBuffer;
 801505c:	6045      	str	r5, [r0, #4]
    adsr->buff_size = bufferSize;
 801505e:	6084      	str	r4, [r0, #8]
    adsr->sampleRate = leaf->sampleRate;
 8015060:	fe88 8a66 	vminnm.f32	s16, s16, s13
 8015064:	edd3 5a00 	vldr	s11, [r3]
    adsr->whichStage = env_idle;
 8015068:	2200      	movs	r2, #0
 801506a:	ed9f 1a1b 	vldr	s2, [pc, #108]	; 80150d8 <tADSRT_init+0xc4>
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 801506e:	eec6 7a25 	vdiv.f32	s15, s12, s11
    adsr->sampleRate = leaf->sampleRate;
 8015072:	edc0 5a04 	vstr	s11, [r0, #16]
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 8015076:	fe89 0a81 	vmaxnm.f32	s0, s19, s2
 801507a:	fec9 0a01 	vmaxnm.f32	s1, s18, s2
 801507e:	fec8 1a81 	vmaxnm.f32	s3, s17, s2

    adsr->baseLeakFactor = 1.0f;
 8015082:	edc0 6a17 	vstr	s13, [r0, #92]	; 0x5c
    adsr->leakFactor = 1.0f;
 8015086:	edc0 6a18 	vstr	s13, [r0, #96]	; 0x60
    adsr->sustain = sustain;
 801508a:	fe88 8a01 	vmaxnm.f32	s16, s16, s2
    adsr->next = 0.0f;
 801508e:	ed80 1a06 	vstr	s2, [r0, #24]
    adsr->whichStage = env_idle;
 8015092:	6382      	str	r2, [r0, #56]	; 0x38
    adsr->attack = attack;
 8015094:	ed80 0a07 	vstr	s0, [r0, #28]
    adsr->sustain = sustain;
 8015098:	ed80 8a0f 	vstr	s16, [r0, #60]	; 0x3c
    adsr->decay = decay;
 801509c:	edc0 0a08 	vstr	s1, [r0, #32]
    adsr->release = release;
 80150a0:	edc0 1a09 	vstr	s3, [r0, #36]	; 0x24
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80150a4:	eec7 5a80 	vdiv.f32	s11, s15, s0
    adsr->bufferSizeDividedBySampleRateInMs = adsr->buff_size / (adsr->sampleRate * 0.001f);
 80150a8:	edc0 7a05 	vstr	s15, [r0, #20]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80150ac:	ee87 6aa0 	vdiv.f32	s12, s15, s1
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80150b0:	eec7 6aa1 	vdiv.f32	s13, s15, s3
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80150b4:	ee27 7a87 	vmul.f32	s14, s15, s14
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80150b8:	edc0 5a0a 	vstr	s11, [r0, #40]	; 0x28
    adsr->rampInc = adsr->bufferSizeDividedBySampleRateInMs / 8.0f;
 80150bc:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 80150c0:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 80150c4:	edc0 6a0c 	vstr	s13, [r0, #48]	; 0x30
    adsr->invSampleRate = leaf->invSampleRate;
 80150c8:	685b      	ldr	r3, [r3, #4]
 80150ca:	6643      	str	r3, [r0, #100]	; 0x64
}
 80150cc:	ecbd 8b04 	vpop	{d8-d9}
 80150d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80150d2:	bf00      	nop
 80150d4:	4479ffff 	.word	0x4479ffff
 80150d8:	00000000 	.word	0x00000000

080150dc <tADSRT_setAttack>:

void     tADSRT_setAttack(tADSRT* const adsrenv, float attack)
{
    _tADSRT* adsr = *adsrenv;

    if (attack < 0.0f)
 80150dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 80150e0:	6803      	ldr	r3, [r0, #0]
    {
        attack = 0.01f;
    }
    adsr->attack = attack;
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80150e2:	ed93 7a05 	vldr	s14, [r3, #20]
    if (attack < 0.0f)
 80150e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        attack = 0.01f;
 80150ea:	bf48      	it	mi
 80150ec:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8015100 <tADSRT_setAttack+0x24>
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80150f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->attack = attack;
 80150f4:	ed83 0a07 	vstr	s0, [r3, #28]
    adsr->attackInc = adsr->bufferSizeDividedBySampleRateInMs / attack;
 80150f8:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80150fc:	4770      	bx	lr
 80150fe:	bf00      	nop
 8015100:	3c23d70a 	.word	0x3c23d70a

08015104 <tADSRT_setDecay>:

void     tADSRT_setDecay(tADSRT* const adsrenv, float decay)
{
    _tADSRT* adsr = *adsrenv;

    if (decay < 0.0f)
 8015104:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 8015108:	6803      	ldr	r3, [r0, #0]
    {
        decay = 0.01f;
    }
    adsr->decay = decay;
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 801510a:	ed93 7a05 	vldr	s14, [r3, #20]
    if (decay < 0.0f)
 801510e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        decay = 0.01f;
 8015112:	bf48      	it	mi
 8015114:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 8015128 <tADSRT_setDecay+0x24>
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8015118:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->decay = decay;
 801511c:	ed83 0a08 	vstr	s0, [r3, #32]
    adsr->decayInc = adsr->bufferSizeDividedBySampleRateInMs / decay;
 8015120:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8015124:	4770      	bx	lr
 8015126:	bf00      	nop
 8015128:	3c23d70a 	.word	0x3c23d70a

0801512c <tADSRT_setSustain>:

void     tADSRT_setSustain(tADSRT* const adsrenv, float sustain)
{
    _tADSRT* adsr = *adsrenv;

    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 801512c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tADSRT* adsr = *adsrenv;
 8015130:	6803      	ldr	r3, [r0, #0]
    if (sustain > 1.0f)      adsr->sustain = 1.0f;
 8015132:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8015136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801513a:	dd02      	ble.n	8015142 <tADSRT_setSustain+0x16>
 801513c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
 8015140:	4770      	bx	lr
    else if (sustain < 0.0f) adsr->sustain = 0.0f;
 8015142:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8015146:	2200      	movs	r2, #0
 8015148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801514c:	bf4c      	ite	mi
 801514e:	63da      	strmi	r2, [r3, #60]	; 0x3c
    else                     adsr->sustain = sustain;
 8015150:	ed83 0a0f 	vstrpl	s0, [r3, #60]	; 0x3c
}
 8015154:	4770      	bx	lr
 8015156:	bf00      	nop

08015158 <tADSRT_setRelease>:

void     tADSRT_setRelease(tADSRT* const adsrenv, float release)
{
    _tADSRT* adsr = *adsrenv;

    if (release < 0.0f)
 8015158:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    _tADSRT* adsr = *adsrenv;
 801515c:	6803      	ldr	r3, [r0, #0]
    {
        release = 0.01f;
    }
    adsr->release = release;
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801515e:	ed93 7a05 	vldr	s14, [r3, #20]
    if (release < 0.0f)
 8015162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        release = 0.01f;
 8015166:	bf48      	it	mi
 8015168:	ed9f 0a04 	vldrmi	s0, [pc, #16]	; 801517c <tADSRT_setRelease+0x24>
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 801516c:	eec7 7a00 	vdiv.f32	s15, s14, s0
    adsr->release = release;
 8015170:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    adsr->releaseInc = adsr->bufferSizeDividedBySampleRateInMs / release;
 8015174:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
}
 8015178:	4770      	bx	lr
 801517a:	bf00      	nop
 801517c:	3c23d70a 	.word	0x3c23d70a

08015180 <tADSRT_setLeakFactor>:

// 0.999999 is slow leak, 0.9 is fast leak
void     tADSRT_setLeakFactor(tADSRT* const adsrenv, float leakFactor)
{
 8015180:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 8015182:	6804      	ldr	r4, [r0, #0]
    adsr->baseLeakFactor = leakFactor;
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8015184:	eddf 7a06 	vldr	s15, [pc, #24]	; 80151a0 <tADSRT_setLeakFactor+0x20>
 8015188:	edd4 0a19 	vldr	s1, [r4, #100]	; 0x64
    adsr->baseLeakFactor = leakFactor;
 801518c:	ed84 0a17 	vstr	s0, [r4, #92]	; 0x5c
    adsr->leakFactor = powf(leakFactor, 44100.0f * adsr->invSampleRate);;
 8015190:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015194:	f008 fe18 	bl	801ddc8 <powf>
 8015198:	ed84 0a18 	vstr	s0, [r4, #96]	; 0x60
}
 801519c:	bd10      	pop	{r4, pc}
 801519e:	bf00      	nop
 80151a0:	472c4400 	.word	0x472c4400

080151a4 <tADSRT_on>:

void tADSRT_on(tADSRT* const adsrenv, float velocity)
{
    _tADSRT* adsr = *adsrenv;
 80151a4:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage != env_idle) // In case ADSR retriggered while it is still happening.
 80151a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151a8:	b162      	cbz	r2, 80151c4 <tADSRT_on+0x20>
    {
        adsr->rampPhase = 0;
 80151aa:	2000      	movs	r0, #0
        adsr->whichStage = env_ramp;
        adsr->rampPeak = adsr->next;
 80151ac:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_ramp;
 80151ae:	2105      	movs	r1, #5
        adsr->rampPhase = 0;
 80151b0:	6598      	str	r0, [r3, #88]	; 0x58
        adsr->rampPeak = adsr->next;
 80151b2:	645a      	str	r2, [r3, #68]	; 0x44
    else // Normal start.
    {
        adsr->whichStage = env_attack;
    }

    adsr->attackPhase = 0;
 80151b4:	2200      	movs	r2, #0
 80151b6:	6399      	str	r1, [r3, #56]	; 0x38
    adsr->decayPhase = 0;
    adsr->releasePhase = 0;
    adsr->gain = velocity;
 80151b8:	ed83 0a10 	vstr	s0, [r3, #64]	; 0x40
    adsr->attackPhase = 0;
 80151bc:	64da      	str	r2, [r3, #76]	; 0x4c
    adsr->decayPhase = 0;
 80151be:	651a      	str	r2, [r3, #80]	; 0x50
    adsr->releasePhase = 0;
 80151c0:	655a      	str	r2, [r3, #84]	; 0x54
}
 80151c2:	4770      	bx	lr
        adsr->whichStage = env_attack;
 80151c4:	2101      	movs	r1, #1
 80151c6:	e7f5      	b.n	80151b4 <tADSRT_on+0x10>

080151c8 <tADSRT_off>:

void tADSRT_off(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 80151c8:	6803      	ldr	r3, [r0, #0]

    if (adsr->whichStage == env_idle)
 80151ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80151cc:	b11a      	cbz	r2, 80151d6 <tADSRT_off+0xe>
    {
        return;
    }
    else
    {
        adsr->whichStage = env_release;
 80151ce:	2104      	movs	r1, #4
        adsr->releasePeak = adsr->next;
 80151d0:	699a      	ldr	r2, [r3, #24]
        adsr->whichStage = env_release;
 80151d2:	6399      	str	r1, [r3, #56]	; 0x38
        adsr->releasePeak = adsr->next;
 80151d4:	649a      	str	r2, [r3, #72]	; 0x48
    }
}
 80151d6:	4770      	bx	lr

080151d8 <tADSRT_tick>:

float   tADSRT_tick(tADSRT* const adsrenv)
{
 80151d8:	b510      	push	{r4, lr}
    _tADSRT* adsr = *adsrenv;
 80151da:	6804      	ldr	r4, [r0, #0]
{
 80151dc:	ed2d 8b02 	vpush	{d8}

    switch (adsr->whichStage)
 80151e0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80151e2:	3b01      	subs	r3, #1
 80151e4:	2b04      	cmp	r3, #4
 80151e6:	f200 8148 	bhi.w	801547a <tADSRT_tick+0x2a2>
 80151ea:	e8df f003 	tbb	[pc, r3]
 80151ee:	441f      	.short	0x441f
 80151f0:	6339      	.short	0x6339
 80151f2:	03          	.byte	0x03
 80151f3:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 80151f4:	edd4 7a03 	vldr	s15, [r4, #12]
 80151f8:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
 80151fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015200:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8015204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015208:	dd71      	ble.n	80152ee <tADSRT_tick+0x116>
            {
                adsr->whichStage = env_attack;
                adsr->next = 0.0f;
 801520a:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8015480 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_attack;
 801520e:	2301      	movs	r3, #1
 8015210:	eeb0 0a67 	vmov.f32	s0, s15
 8015214:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 8015216:	edc4 7a06 	vstr	s15, [r4, #24]
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
                }
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
            }

            adsr->rampPhase += adsr->rampInc;
 801521a:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 801521e:	ee37 1a81 	vadd.f32	s2, s15, s2
 8015222:	ed84 1a16 	vstr	s2, [r4, #88]	; 0x58
            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
            break;
    }
    return adsr->next;
}
 8015226:	ecbd 8b02 	vpop	{d8}
 801522a:	bd10      	pop	{r4, pc}
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 801522c:	edd4 7a03 	vldr	s15, [r4, #12]
 8015230:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
 8015234:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015238:	eeb4 1ae7 	vcmpe.f32	s2, s15
 801523c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015240:	dd7f      	ble.n	8015342 <tADSRT_tick+0x16a>
                adsr->whichStage = env_decay;
 8015242:	2302      	movs	r3, #2
                adsr->next = adsr->gain;
 8015244:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_decay;
 8015248:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain;
 801524a:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->attackPhase += adsr->attackInc;
 801524e:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8015252:	ee37 1a81 	vadd.f32	s2, s15, s2
 8015256:	ed84 1a13 	vstr	s2, [r4, #76]	; 0x4c
}
 801525a:	ecbd 8b02 	vpop	{d8}
 801525e:	bd10      	pop	{r4, pc}
            adsr->next = adsr->next * adsr->leakFactor;
 8015260:	ed94 0a06 	vldr	s0, [r4, #24]
 8015264:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8015268:	ee20 0a27 	vmul.f32	s0, s0, s15
 801526c:	ed84 0a06 	vstr	s0, [r4, #24]
}
 8015270:	ecbd 8b02 	vpop	{d8}
 8015274:	bd10      	pop	{r4, pc}
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 8015276:	edd4 7a03 	vldr	s15, [r4, #12]
 801527a:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
 801527e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015282:	eeb4 1ae7 	vcmpe.f32	s2, s15
 8015286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801528a:	f340 8088 	ble.w	801539e <tADSRT_tick+0x1c6>
                adsr->next = adsr->gain * adsr->sustain;
 801528e:	ed94 0a10 	vldr	s0, [r4, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8015292:	2303      	movs	r3, #3
                adsr->next = adsr->gain * adsr->sustain;
 8015294:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 8015298:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 801529a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801529e:	ed84 0a06 	vstr	s0, [r4, #24]
            adsr->decayPhase += adsr->decayInc;
 80152a2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 80152a6:	ee37 1a81 	vadd.f32	s2, s15, s2
 80152aa:	ed84 1a14 	vstr	s2, [r4, #80]	; 0x50
}
 80152ae:	ecbd 8b02 	vpop	{d8}
 80152b2:	bd10      	pop	{r4, pc}
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 80152b4:	edd4 7a03 	vldr	s15, [r4, #12]
 80152b8:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
 80152bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80152c0:	eeb4 1ae7 	vcmpe.f32	s2, s15
 80152c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80152c8:	f340 809e 	ble.w	8015408 <tADSRT_tick+0x230>
                adsr->next = 0.0f;
 80152cc:	eddf 7a6c 	vldr	s15, [pc, #432]	; 8015480 <tADSRT_tick+0x2a8>
                adsr->whichStage = env_idle;
 80152d0:	2300      	movs	r3, #0
 80152d2:	eeb0 0a67 	vmov.f32	s0, s15
 80152d6:	63a3      	str	r3, [r4, #56]	; 0x38
                adsr->next = 0.0f;
 80152d8:	edc4 7a06 	vstr	s15, [r4, #24]
            adsr->releasePhase += adsr->releaseInc;
 80152dc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 80152e0:	ee37 1a81 	vadd.f32	s2, s15, s2
 80152e4:	ed84 1a15 	vstr	s2, [r4, #84]	; 0x54
}
 80152e8:	ecbd 8b02 	vpop	{d8}
 80152ec:	bd10      	pop	{r4, pc}
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80152ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->rampPhase;
 80152f2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80152f6:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->rampPhase - intPart;
 80152fa:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 80152fe:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->rampPhase - intPart;
 8015302:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->rampPhase + 1.0f > adsr->buff_sizeMinusOne)
 8015306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801530a:	f100 80b2 	bmi.w	8015472 <tADSRT_tick+0x29a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801530e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8015312:	6862      	ldr	r2, [r4, #4]
 8015314:	ee17 3a90 	vmov	r3, s15
 8015318:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801531c:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 8015320:	ee16 3a90 	vmov	r3, s13
 8015324:	ed94 8a11 	vldr	s16, [r4, #68]	; 0x44
 8015328:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801532c:	ed92 0a00 	vldr	s0, [r2]
 8015330:	f002 f89a 	bl	8017468 <LEAF_interpolation_linear>
 8015334:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->rampPhase += adsr->rampInc;
 8015338:	ed94 1a16 	vldr	s2, [r4, #88]	; 0x58
                adsr->next = adsr->rampPeak * LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart);
 801533c:	ed84 0a06 	vstr	s0, [r4, #24]
 8015340:	e76b      	b.n	801521a <tADSRT_tick+0x42>
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8015342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->attackPhase;
 8015346:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 801534a:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->attackPhase - intPart;
 801534e:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 8015352:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->attackPhase - intPart;
 8015356:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->attackPhase + 1.0f > adsr->buff_sizeMinusOne)
 801535a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801535e:	f100 8084 	bmi.w	801546a <tADSRT_tick+0x292>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->attackPhase)+1)];
 8015362:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8015366:	6862      	ldr	r2, [r4, #4]
 8015368:	ee17 3a90 	vmov	r3, s15
 801536c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015370:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8015374:	ee16 3a90 	vmov	r3, s13
 8015378:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 801537c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015380:	ed92 0a00 	vldr	s0, [r2]
 8015384:	f002 f870 	bl	8017468 <LEAF_interpolation_linear>
 8015388:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            adsr->attackPhase += adsr->attackInc;
 801538c:	ed94 1a13 	vldr	s2, [r4, #76]	; 0x4c
                adsr->next = adsr->gain * (1.0f - LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // inverted and backwards to get proper rising exponential shape/perception
 8015390:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8015394:	ee20 0a08 	vmul.f32	s0, s0, s16
 8015398:	ed84 0a06 	vstr	s0, [r4, #24]
 801539c:	e757      	b.n	801524e <tADSRT_tick+0x76>
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 801539e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->decayPhase;
 80153a2:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 80153a6:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->decayPhase - intPart;
 80153aa:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 80153ae:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->decayPhase - intPart;
 80153b2:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->decayPhase + 1.0f > adsr->buff_sizeMinusOne)
 80153b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80153ba:	d452      	bmi.n	8015462 <tADSRT_tick+0x28a>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->decayPhase)+1)];
 80153bc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80153c0:	6862      	ldr	r2, [r4, #4]
 80153c2:	ee17 3a90 	vmov	r3, s15
 80153c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80153ca:	edd3 0a00 	vldr	s1, [r3]
                float interpValue = (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart));
 80153ce:	ee16 3a90 	vmov	r3, s13
 80153d2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80153d6:	ed92 0a00 	vldr	s0, [r2]
 80153da:	f002 f845 	bl	8017468 <LEAF_interpolation_linear>
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 80153de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80153e2:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 80153e6:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
 80153ea:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80153ee:	ed94 6a18 	vldr	s12, [r4, #96]	; 0x60
            adsr->decayPhase += adsr->decayInc;
 80153f2:	ed94 1a14 	vldr	s2, [r4, #80]	; 0x50
                adsr->next = (adsr->gain * (adsr->sustain + (interpValue * (1.0f - adsr->sustain)))) * adsr->leakFactor; // do interpolation !
 80153f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80153fa:	eea6 7a80 	vfma.f32	s14, s13, s0
 80153fe:	ee27 0a87 	vmul.f32	s0, s15, s14
 8015402:	ed84 0a06 	vstr	s0, [r4, #24]
 8015406:	e74c      	b.n	80152a2 <tADSRT_tick+0xca>
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8015408:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
                uint32_t intPart = (uint32_t)adsr->releasePhase;
 801540c:	eefc 6ac1 	vcvt.u32.f32	s13, s2
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8015410:	ee31 7a07 	vadd.f32	s14, s2, s14
                float floatPart = adsr->releasePhase - intPart;
 8015414:	eeb8 6a66 	vcvt.f32.u32	s12, s13
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8015418:	eef4 7ac7 	vcmpe.f32	s15, s14
                float floatPart = adsr->releasePhase - intPart;
 801541c:	ee31 1a46 	vsub.f32	s2, s2, s12
                if (adsr->releasePhase + 1.0f > adsr->buff_sizeMinusOne)
 8015420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015424:	d419      	bmi.n	801545a <tADSRT_tick+0x282>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->releasePhase)+1)];
 8015426:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801542a:	6862      	ldr	r2, [r4, #4]
 801542c:	ee17 3a90 	vmov	r3, s15
 8015430:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8015434:	edd3 0a00 	vldr	s1, [r3]
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8015438:	ee16 3a90 	vmov	r3, s13
 801543c:	ed94 8a12 	vldr	s16, [r4, #72]	; 0x48
 8015440:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8015444:	ed92 0a00 	vldr	s0, [r2]
 8015448:	f002 f80e 	bl	8017468 <LEAF_interpolation_linear>
 801544c:	ee28 0a00 	vmul.f32	s0, s16, s0
            adsr->releasePhase += adsr->releaseInc;
 8015450:	ed94 1a15 	vldr	s2, [r4, #84]	; 0x54
                adsr->next = adsr->releasePeak * (LEAF_interpolation_linear(adsr->exp_buff[intPart], secondValue, floatPart)); // do interpolation !
 8015454:	ed84 0a06 	vstr	s0, [r4, #24]
 8015458:	e740      	b.n	80152dc <tADSRT_tick+0x104>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801545a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 801545c:	eddf 0a08 	vldr	s1, [pc, #32]	; 8015480 <tADSRT_tick+0x2a8>
 8015460:	e7ea      	b.n	8015438 <tADSRT_tick+0x260>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8015462:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8015464:	eddf 0a06 	vldr	s1, [pc, #24]	; 8015480 <tADSRT_tick+0x2a8>
 8015468:	e7b1      	b.n	80153ce <tADSRT_tick+0x1f6>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 801546a:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 801546c:	eddf 0a04 	vldr	s1, [pc, #16]	; 8015480 <tADSRT_tick+0x2a8>
 8015470:	e780      	b.n	8015374 <tADSRT_tick+0x19c>
                    secondValue = adsr->exp_buff[(uint32_t)((adsr->rampPhase)+1)];
 8015472:	6862      	ldr	r2, [r4, #4]
                    secondValue = 0.0f;
 8015474:	eddf 0a02 	vldr	s1, [pc, #8]	; 8015480 <tADSRT_tick+0x2a8>
 8015478:	e752      	b.n	8015320 <tADSRT_tick+0x148>
    return adsr->next;
 801547a:	ed94 0a06 	vldr	s0, [r4, #24]
 801547e:	e6d2      	b.n	8015226 <tADSRT_tick+0x4e>
 8015480:	00000000 	.word	0x00000000

08015484 <tADSRT_tickNoInterp>:

float   tADSRT_tickNoInterp(tADSRT* const adsrenv)
{
    _tADSRT* adsr = *adsrenv;
 8015484:	6803      	ldr	r3, [r0, #0]

    switch (adsr->whichStage)
 8015486:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8015488:	3a01      	subs	r2, #1
 801548a:	2a04      	cmp	r2, #4
 801548c:	f200 80ba 	bhi.w	8015604 <tADSRT_tickNoInterp+0x180>
 8015490:	e8df f002 	tbb	[pc, r2]
 8015494:	58333c1b 	.word	0x58333c1b
 8015498:	03          	.byte	0x03
 8015499:	00          	.byte	0x00
    {
        case env_ramp:
            if (adsr->rampPhase > adsr->buff_sizeMinusOne)
 801549a:	edd3 7a03 	vldr	s15, [r3, #12]
 801549e:	edd3 6a16 	vldr	s13, [r3, #88]	; 0x58
 80154a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154a6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80154aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154ae:	dd61      	ble.n	8015574 <tADSRT_tickNoInterp+0xf0>
            {
                adsr->whichStage = env_attack;
 80154b0:	2201      	movs	r2, #1
                adsr->next = 0.0f;
 80154b2:	ed9f 0a56 	vldr	s0, [pc, #344]	; 801560c <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_attack;
 80154b6:	639a      	str	r2, [r3, #56]	; 0x38
            else
            {
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
            }

            adsr->rampPhase += adsr->rampInc;
 80154b8:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80154bc:	ed83 0a06 	vstr	s0, [r3, #24]
 80154c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154c4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
            break;
 80154c8:	4770      	bx	lr


        case env_attack:

            // If attack done, time to turn around.
            if (adsr->attackPhase > adsr->buff_sizeMinusOne)
 80154ca:	edd3 7a03 	vldr	s15, [r3, #12]
 80154ce:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 80154d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80154d6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80154da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80154de:	dd57      	ble.n	8015590 <tADSRT_tickNoInterp+0x10c>
            {
                adsr->whichStage = env_decay;
 80154e0:	2202      	movs	r2, #2
                adsr->next = adsr->gain;
 80154e2:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_decay;
 80154e6:	639a      	str	r2, [r3, #56]	; 0x38
            {
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
            }

            // Increment ADSR attack.
            adsr->attackPhase += adsr->attackInc;
 80154e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80154ec:	ed83 0a06 	vstr	s0, [r3, #24]
 80154f0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80154f4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
            break;
 80154f8:	4770      	bx	lr
            // Increment ADSR decay.
            adsr->decayPhase += adsr->decayInc;
            break;

        case env_sustain:
            adsr->next = adsr->next * adsr->leakFactor;
 80154fa:	ed93 0a06 	vldr	s0, [r3, #24]
 80154fe:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8015502:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015506:	ed83 0a06 	vstr	s0, [r3, #24]
            break;
 801550a:	4770      	bx	lr
            if (adsr->decayPhase > adsr->buff_sizeMinusOne)
 801550c:	edd3 7a03 	vldr	s15, [r3, #12]
 8015510:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8015514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015518:	eef4 6ac7 	vcmpe.f32	s13, s14
 801551c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015520:	dd48      	ble.n	80155b4 <tADSRT_tickNoInterp+0x130>
                adsr->next = adsr->gain * adsr->sustain;
 8015522:	ed93 0a10 	vldr	s0, [r3, #64]	; 0x40
                adsr->whichStage = env_sustain;
 8015526:	2203      	movs	r2, #3
                adsr->next = adsr->gain * adsr->sustain;
 8015528:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
                adsr->whichStage = env_sustain;
 801552c:	639a      	str	r2, [r3, #56]	; 0x38
                adsr->next = adsr->gain * adsr->sustain;
 801552e:	ee20 0a27 	vmul.f32	s0, s0, s15
            adsr->decayPhase += adsr->decayInc;
 8015532:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8015536:	ed83 0a06 	vstr	s0, [r3, #24]
 801553a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801553e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
            break;
 8015542:	4770      	bx	lr

        case env_release:
            // If release done, finish.
            if (adsr->releasePhase > adsr->buff_sizeMinusOne)
 8015544:	edd3 7a03 	vldr	s15, [r3, #12]
 8015548:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 801554c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8015550:	eef4 6ac7 	vcmpe.f32	s13, s14
 8015554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015558:	dd46      	ble.n	80155e8 <tADSRT_tickNoInterp+0x164>
            {
                adsr->whichStage = env_idle;
 801555a:	2200      	movs	r2, #0
                adsr->next = 0.0f;
 801555c:	ed9f 0a2b 	vldr	s0, [pc, #172]	; 801560c <tADSRT_tickNoInterp+0x188>
                adsr->whichStage = env_idle;
 8015560:	639a      	str	r2, [r3, #56]	; 0x38
            else {
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
            }

            // Increment envelope release;
            adsr->releasePhase += adsr->releaseInc;
 8015562:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8015566:	ed83 0a06 	vstr	s0, [r3, #24]
 801556a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801556e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
            break;
    }
    return adsr->next;
}
 8015572:	4770      	bx	lr
                adsr->next = adsr->rampPeak * adsr->exp_buff[(uint32_t)adsr->rampPhase];
 8015574:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8015578:	685a      	ldr	r2, [r3, #4]
 801557a:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 801557e:	ee17 1a10 	vmov	r1, s14
 8015582:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8015586:	ed92 0a00 	vldr	s0, [r2]
 801558a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801558e:	e793      	b.n	80154b8 <tADSRT_tickNoInterp+0x34>
                adsr->next = adsr->gain * (1.0f - adsr->exp_buff[(uint32_t)adsr->attackPhase]); // inverted and backwards to get proper rising exponential shape/perception
 8015590:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 8015594:	685a      	ldr	r2, [r3, #4]
 8015596:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801559a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 801559e:	ee17 1a10 	vmov	r1, s14
 80155a2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80155a6:	ed92 7a00 	vldr	s14, [r2]
 80155aa:	ee30 0a47 	vsub.f32	s0, s0, s14
 80155ae:	ee20 0a27 	vmul.f32	s0, s0, s15
 80155b2:	e799      	b.n	80154e8 <tADSRT_tickNoInterp+0x64>
                adsr->next = (adsr->gain * (adsr->sustain + (adsr->exp_buff[(uint32_t)adsr->decayPhase] * (1.0f - adsr->sustain)))) * adsr->leakFactor;
 80155b4:	eefc 5ae6 	vcvt.u32.f32	s11, s13
 80155b8:	685a      	ldr	r2, [r3, #4]
 80155ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80155be:	ed93 0a0f 	vldr	s0, [r3, #60]	; 0x3c
 80155c2:	ed93 6a18 	vldr	s12, [r3, #96]	; 0x60
 80155c6:	ee15 1a90 	vmov	r1, s11
 80155ca:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80155ce:	ee37 7a40 	vsub.f32	s14, s14, s0
 80155d2:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80155d6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80155da:	ed92 6a00 	vldr	s12, [r2]
 80155de:	eea6 0a07 	vfma.f32	s0, s12, s14
 80155e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80155e6:	e7a4      	b.n	8015532 <tADSRT_tickNoInterp+0xae>
                adsr->next = adsr->releasePeak * adsr->exp_buff[(uint32_t)adsr->releasePhase];
 80155e8:	eebc 7ae6 	vcvt.u32.f32	s14, s13
 80155ec:	685a      	ldr	r2, [r3, #4]
 80155ee:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80155f2:	ee17 1a10 	vmov	r1, s14
 80155f6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80155fa:	ed92 0a00 	vldr	s0, [r2]
 80155fe:	ee20 0a27 	vmul.f32	s0, s0, s15
 8015602:	e7ae      	b.n	8015562 <tADSRT_tickNoInterp+0xde>
    return adsr->next;
 8015604:	ed93 0a06 	vldr	s0, [r3, #24]
 8015608:	4770      	bx	lr
 801560a:	bf00      	nop
 801560c:	00000000 	.word	0x00000000

08015610 <tExpSmooth_init>:



/* Exponential Smoother */
void    tExpSmooth_init(tExpSmooth* const expsmooth, float val, float factor, LEAF* const leaf)
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8015610:	b538      	push	{r3, r4, r5, lr}
 8015612:	ed2d 8b02 	vpush	{d8}
    tExpSmooth_initToPool(expsmooth, val, factor, &leaf->mempool);
}

void    tExpSmooth_initToPool   (tExpSmooth* const expsmooth, float val, float factor, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015616:	698c      	ldr	r4, [r1, #24]
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8015618:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801561a:	201c      	movs	r0, #28
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 801561c:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8015620:	4621      	mov	r1, r4
{   // factor is usually a value between 0 and 0.1. Lower value is slower. 0.01 for example gives you a smoothing time of about 10ms
 8015622:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8015626:	f002 f803 	bl	8017630 <mpool_alloc>
 801562a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801562e:	eddf 0a0d 	vldr	s1, [pc, #52]	; 8015664 <tExpSmooth_init+0x54>
 8015632:	6028      	str	r0, [r5, #0]
 8015634:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 8015638:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->dest = val;
    if (factor < 0.0f) factor = 0.0f;
    if (factor > 1.0f) factor = 1.0f;
    smooth->baseFactor = factor;
    smooth->factor = factor;
    smooth->oneminusfactor = 1.0f - factor;
 801563c:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8015640:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 8015642:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 8015646:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 801564a:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 801564e:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 8015652:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 8015656:	6863      	ldr	r3, [r4, #4]
 8015658:	685b      	ldr	r3, [r3, #4]
 801565a:	6183      	str	r3, [r0, #24]
}
 801565c:	ecbd 8b02 	vpop	{d8}
 8015660:	bd38      	pop	{r3, r4, r5, pc}
 8015662:	bf00      	nop
 8015664:	00000000 	.word	0x00000000

08015668 <tExpSmooth_initToPool>:
{
 8015668:	b538      	push	{r3, r4, r5, lr}
 801566a:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801566e:	680c      	ldr	r4, [r1, #0]
{
 8015670:	4605      	mov	r5, r0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8015672:	201c      	movs	r0, #28
{
 8015674:	eef0 8a40 	vmov.f32	s17, s0
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 8015678:	4621      	mov	r1, r4
{
 801567a:	eeb0 8a60 	vmov.f32	s16, s1
    _tExpSmooth* smooth = *expsmooth = (_tExpSmooth*) mpool_alloc(sizeof(_tExpSmooth), m);
 801567e:	f001 ffd7 	bl	8017630 <mpool_alloc>
 8015682:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015686:	eddf 0a0d 	vldr	s1, [pc, #52]	; 80156bc <tExpSmooth_initToPool+0x54>
 801568a:	6028      	str	r0, [r5, #0]
 801568c:	fec8 0a20 	vmaxnm.f32	s1, s16, s1
    smooth->mempool = m;
 8015690:	fec0 0ae7 	vminnm.f32	s1, s1, s15
    smooth->oneminusfactor = 1.0f - factor;
 8015694:	ee77 7ae0 	vsub.f32	s15, s15, s1
    smooth->mempool = m;
 8015698:	6004      	str	r4, [r0, #0]
    smooth->curr = val;
 801569a:	edc0 8a04 	vstr	s17, [r0, #16]
    smooth->dest = val;
 801569e:	edc0 8a05 	vstr	s17, [r0, #20]
    smooth->baseFactor = factor;
 80156a2:	edc0 0a01 	vstr	s1, [r0, #4]
    smooth->factor = factor;
 80156a6:	edc0 0a02 	vstr	s1, [r0, #8]
    smooth->oneminusfactor = 1.0f - factor;
 80156aa:	edc0 7a03 	vstr	s15, [r0, #12]
    smooth->invSampleRate = smooth->mempool->leaf->invSampleRate;
 80156ae:	6863      	ldr	r3, [r4, #4]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	6183      	str	r3, [r0, #24]
}
 80156b4:	ecbd 8b02 	vpop	{d8}
 80156b8:	bd38      	pop	{r3, r4, r5, pc}
 80156ba:	bf00      	nop
 80156bc:	00000000 	.word	0x00000000

080156c0 <tExpSmooth_setDest>:
    smooth->oneminusfactor = 1.0f - factor;
}

void     tExpSmooth_setDest(tExpSmooth* const expsmooth, float dest)
{
    _tExpSmooth* smooth = *expsmooth;
 80156c0:	6803      	ldr	r3, [r0, #0]
    smooth->dest=dest;
 80156c2:	ed83 0a05 	vstr	s0, [r3, #20]
}
 80156c6:	4770      	bx	lr

080156c8 <tExpSmooth_tick>:
    smooth->dest=val;
}

float   tExpSmooth_tick(tExpSmooth* const expsmooth)
{
    _tExpSmooth* smooth = *expsmooth;
 80156c8:	6803      	ldr	r3, [r0, #0]
    smooth->curr = smooth->factor * smooth->dest + smooth->oneminusfactor * smooth->curr;
 80156ca:	edd3 6a04 	vldr	s13, [r3, #16]
 80156ce:	ed93 0a03 	vldr	s0, [r3, #12]
 80156d2:	ed93 7a02 	vldr	s14, [r3, #8]
 80156d6:	ee20 0a26 	vmul.f32	s0, s0, s13
 80156da:	edd3 7a05 	vldr	s15, [r3, #20]
 80156de:	eea7 0a27 	vfma.f32	s0, s14, s15
 80156e2:	ed83 0a04 	vstr	s0, [r3, #16]
    return smooth->curr;
}
 80156e6:	4770      	bx	lr

080156e8 <tSlide_init>:

//tSlide is based on the max/msp slide~ object
////

void    tSlide_init          (tSlide* const sl, float upSlide, float downSlide, LEAF* const leaf)
{
 80156e8:	b538      	push	{r3, r4, r5, lr}
 80156ea:	ed2d 8b02 	vpush	{d8}
    tSlide_initToPool    (sl, upSlide, downSlide, &leaf->mempool);
}

void    tSlide_initToPool    (tSlide* const sl, float upSlide, float downSlide, tMempool* const mp)
{
    _tMempool* m = *mp;
 80156ee:	698d      	ldr	r5, [r1, #24]
{
 80156f0:	4604      	mov	r4, r0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80156f2:	201c      	movs	r0, #28
{
 80156f4:	eef0 8a40 	vmov.f32	s17, s0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80156f8:	4629      	mov	r1, r5
{
 80156fa:	eeb0 8a60 	vmov.f32	s16, s1
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 80156fe:	f001 ff97 	bl	8017630 <mpool_alloc>

    if (downSlide < 1.0f)
    {
        downSlide = 1.0f;
    }
    s->invUpSlide = 1.0f / upSlide;
 8015702:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    s->prevIn = 0.0f;
 8015706:	2300      	movs	r3, #0
    _tSlide* s = *sl = (_tSlide*) mpool_alloc(sizeof(_tSlide), m);
 8015708:	6020      	str	r0, [r4, #0]
    s->mempool = m;
 801570a:	6005      	str	r5, [r0, #0]
    s->invUpSlide = 1.0f / upSlide;
 801570c:	fe88 0aa7 	vmaxnm.f32	s0, s17, s15
    s->invDownSlide = 1.0f / downSlide;
 8015710:	fec8 0a27 	vmaxnm.f32	s1, s16, s15
    s->invUpSlide = 1.0f / upSlide;
 8015714:	eec7 6a80 	vdiv.f32	s13, s15, s0
    s->prevIn = 0.0f;
 8015718:	60c3      	str	r3, [r0, #12]
    s->currentOut = 0.0f;
 801571a:	6083      	str	r3, [r0, #8]
    s->prevOut = 0.0f;
 801571c:	6043      	str	r3, [r0, #4]
    s->dest = 0.0f;
 801571e:	6183      	str	r3, [r0, #24]
    s->invDownSlide = 1.0f / downSlide;
 8015720:	ee87 7aa0 	vdiv.f32	s14, s15, s1
    s->invUpSlide = 1.0f / upSlide;
 8015724:	edc0 6a04 	vstr	s13, [r0, #16]
    s->invDownSlide = 1.0f / downSlide;
 8015728:	ed80 7a05 	vstr	s14, [r0, #20]
}
 801572c:	ecbd 8b02 	vpop	{d8}
 8015730:	bd38      	pop	{r3, r4, r5, pc}
 8015732:	bf00      	nop

08015734 <tSlide_tick>:
    return s->currentOut;
}

float tSlide_tick(tSlide* const sl, float in)
{
    _tSlide* s = *sl;
 8015734:	6803      	ldr	r3, [r0, #0]
{
 8015736:	eeb0 7a40 	vmov.f32	s14, s0


    if (in >= s->prevOut)
 801573a:	edd3 7a01 	vldr	s15, [r3, #4]
    }
#ifdef NO_DENORMAL_CHECK
#else
    if (s->currentOut < VSF) s->currentOut = 0.0f;
#endif
    s->prevIn = in;
 801573e:	ed83 7a03 	vstr	s14, [r3, #12]
    if (in >= s->prevOut)
 8015742:	eef4 7ac0 	vcmpe.f32	s15, s0
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 8015746:	ee30 6a67 	vsub.f32	s12, s0, s15
    if (in >= s->prevOut)
 801574a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invUpSlide);
 801574e:	bf94      	ite	ls
 8015750:	edd3 6a04 	vldrls	s13, [r3, #16]
        s->currentOut = s->prevOut + ((in - s->prevOut) * s->invDownSlide);
 8015754:	edd3 6a05 	vldrhi	s13, [r3, #20]
 8015758:	eee6 7a26 	vfma.f32	s15, s12, s13
 801575c:	eeb0 0a67 	vmov.f32	s0, s15
 8015760:	edc3 7a02 	vstr	s15, [r3, #8]
    s->prevOut = s->currentOut;
 8015764:	edc3 7a01 	vstr	s15, [r3, #4]
    return s->currentOut;
}
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop

0801576c <tOnePole_initToPool>:
{
    tOnePole_initToPool(ft, freq, &leaf->mempool);
}

void    tOnePole_initToPool     (tOnePole* const ft, float freq, tMempool* const mp)
{
 801576c:	b538      	push	{r3, r4, r5, lr}
 801576e:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8015772:	680d      	ldr	r5, [r1, #0]
{
 8015774:	4604      	mov	r4, r0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
 8015776:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801577a:	2028      	movs	r0, #40	; 0x28
 801577c:	4629      	mov	r1, r5
{
 801577e:	eeb0 8a40 	vmov.f32	s16, s0
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 8015782:	f001 ff55 	bl	8017630 <mpool_alloc>
    f->a0 = 1.0;
    
    f->lastIn = 0.0f;
 8015786:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80157d0 <tOnePole_initToPool+0x64>
    _tOnePole* f = *ft = (_tOnePole*) mpool_alloc(sizeof(_tOnePole), m);
 801578a:	6020      	str	r0, [r4, #0]
{
    _tOnePole* f = *ft;
    
    f->freq = freq;
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801578c:	eeb0 1a68 	vmov.f32	s2, s17
    f->mempool = m;
 8015790:	6005      	str	r5, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8015792:	686b      	ldr	r3, [r5, #4]
    f->gain = 1.0f;
 8015794:	edc0 8a02 	vstr	s17, [r0, #8]
    f->a0 = 1.0;
 8015798:	edc0 8a03 	vstr	s17, [r0, #12]
    f->lastIn = 0.0f;
 801579c:	ed80 0a07 	vstr	s0, [r0, #28]
    f->lastOut = 0.0f;
 80157a0:	ed80 0a08 	vstr	s0, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 80157a4:	68db      	ldr	r3, [r3, #12]
 80157a6:	6243      	str	r3, [r0, #36]	; 0x24
    _tOnePole* f = *ft;
 80157a8:	6824      	ldr	r4, [r4, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80157aa:	edd4 0a09 	vldr	s1, [r4, #36]	; 0x24
    f->freq = freq;
 80157ae:	ed84 8a01 	vstr	s16, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80157b2:	ee68 0a20 	vmul.f32	s1, s16, s1
 80157b6:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80157ba:	f001 fd49 	bl	8017250 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80157be:	ee78 8ac0 	vsub.f32	s17, s17, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80157c2:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 80157c6:	edc4 8a04 	vstr	s17, [r4, #16]
}
 80157ca:	ecbd 8b02 	vpop	{d8}
 80157ce:	bd38      	pop	{r3, r4, r5, pc}
 80157d0:	00000000 	.word	0x00000000

080157d4 <tOnePole_setFreq>:
{
 80157d4:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 80157d6:	6804      	ldr	r4, [r0, #0]
{
 80157d8:	eef0 0a40 	vmov.f32	s1, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80157dc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 80157e0:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801580c <tOnePole_setFreq+0x38>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80157e4:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
    f->freq = freq;
 80157e8:	edc4 0a01 	vstr	s1, [r4, #4]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 80157ec:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80157f0:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80157f4:	f001 fd2c 	bl	8017250 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 80157f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 80157fc:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8015800:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8015804:	edc4 7a04 	vstr	s15, [r4, #16]
}
 8015808:	bd10      	pop	{r4, pc}
 801580a:	bf00      	nop
 801580c:	00000000 	.word	0x00000000

08015810 <tOnePole_tick>:
    f->gain = gain;
}

float   tOnePole_tick(tOnePole* const ft, float input)
{
    _tOnePole* f = *ft;
 8015810:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8015812:	ed93 6a08 	vldr	s12, [r3, #32]
    float in = input * f->gain;
 8015816:	ed93 7a02 	vldr	s14, [r3, #8]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 801581a:	edd3 7a04 	vldr	s15, [r3, #16]
    float in = input * f->gain;
 801581e:	ee20 7a07 	vmul.f32	s14, s0, s14
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 8015822:	edd3 6a05 	vldr	s13, [r3, #20]
 8015826:	ee27 0a86 	vmul.f32	s0, s15, s12
    
    f->lastIn = in;
 801582a:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = (f->b0 * in) + (f->a1 * f->lastOut);
 801582e:	eea6 0a87 	vfma.f32	s0, s13, s14
    f->lastOut = out;
 8015832:	ed83 0a08 	vstr	s0, [r3, #32]
    
    return out;
}
 8015836:	4770      	bx	lr

08015838 <tOnePole_setSampleRate>:

void tOnePole_setSampleRate(tOnePole* const ft, float sr)
{
    _tOnePole* f = *ft;
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8015838:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8015874 <tOnePole_setSampleRate+0x3c>
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801583c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8015840:	eec7 7a00 	vdiv.f32	s15, s14, s0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8015844:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8015878 <tOnePole_setSampleRate+0x40>
{
 8015848:	b510      	push	{r4, lr}
    _tOnePole* f = *ft;
 801584a:	6804      	ldr	r4, [r0, #0]
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 801584c:	edd4 0a01 	vldr	s1, [r4, #4]
 8015850:	ee67 0aa0 	vmul.f32	s1, s15, s1
    f->twoPiTimesInvSampleRate = (1.0f/sr) * TWO_PI;
 8015854:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    f->b0 = f->freq * f->twoPiTimesInvSampleRate;
 8015858:	edc4 0a05 	vstr	s1, [r4, #20]
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 801585c:	f001 fcf8 	bl	8017250 <LEAF_clip>
    f->a1 = 1.0f - f->b0;
 8015860:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->b0 = LEAF_clip(0.0f, f->b0, 1.0f);
 8015864:	ed84 0a05 	vstr	s0, [r4, #20]
    f->a1 = 1.0f - f->b0;
 8015868:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801586c:	edc4 7a04 	vstr	s15, [r4, #16]
}
 8015870:	bd10      	pop	{r4, pc}
 8015872:	bf00      	nop
 8015874:	40c90fdb 	.word	0x40c90fdb
 8015878:	00000000 	.word	0x00000000

0801587c <tTwoZero_initToPool>:
{
    tTwoZero_initToPool(ft, &leaf->mempool);
}

void    tTwoZero_initToPool     (tTwoZero* const ft, tMempool* const mp)
{
 801587c:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 801587e:	680c      	ldr	r4, [r1, #0]
{
 8015880:	4605      	mov	r5, r0
    _tTwoZero* f = *ft = (_tTwoZero*) mpool_alloc(sizeof(_tTwoZero), m);
 8015882:	2028      	movs	r0, #40	; 0x28
 8015884:	4621      	mov	r1, r4
 8015886:	f001 fed3 	bl	8017630 <mpool_alloc>
 801588a:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 801588c:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->gain = 1.0f;
    f->lastIn[0] = 0.0f;
 801588e:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015890:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 8015892:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015896:	68d2      	ldr	r2, [r2, #12]
    f->gain = 1.0f;
 8015898:	6041      	str	r1, [r0, #4]
    f->lastIn[0] = 0.0f;
 801589a:	61c3      	str	r3, [r0, #28]
    f->lastIn[1] = 0.0f;
 801589c:	6203      	str	r3, [r0, #32]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 801589e:	6242      	str	r2, [r0, #36]	; 0x24
}
 80158a0:	bd38      	pop	{r3, r4, r5, pc}
 80158a2:	bf00      	nop

080158a4 <tTwoZero_tick>:
    mpool_free((char*)f, f->mempool);
}

float   tTwoZero_tick(tTwoZero* const ft, float input)
{
    _tTwoZero* f = *ft;
 80158a4:	6803      	ldr	r3, [r0, #0]
    
    float in = input * f->gain;
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 80158a6:	edd3 6a07 	vldr	s13, [r3, #28]
 80158aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80158ae:	edd3 5a08 	vldr	s11, [r3, #32]
 80158b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80158b6:	ed93 5a04 	vldr	s10, [r3, #16]
    float in = input * f->gain;
 80158ba:	ed93 7a01 	vldr	s14, [r3, #4]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 80158be:	ed93 6a02 	vldr	s12, [r3, #8]
 80158c2:	eee5 7a25 	vfma.f32	s15, s10, s11
    
    f->lastIn[1] = f->lastIn[0];
 80158c6:	edc3 6a08 	vstr	s13, [r3, #32]
    float in = input * f->gain;
 80158ca:	ee20 7a07 	vmul.f32	s14, s0, s14
    f->lastIn[0] = in;
 80158ce:	ed83 7a07 	vstr	s14, [r3, #28]
    float out = f->b2 * f->lastIn[1] + f->b1 * f->lastIn[0] + f->b0 * in;
 80158d2:	eeb0 0a67 	vmov.f32	s0, s15
    
    return out;
}
 80158d6:	eea6 0a07 	vfma.f32	s0, s12, s14
 80158da:	4770      	bx	lr

080158dc <tTwoZero_setCoefficients>:
    f->b1 = b1;
}

void    tTwoZero_setCoefficients(tTwoZero* const ft, float b0, float b1, float b2)
{
    _tTwoZero* f = *ft;
 80158dc:	6803      	ldr	r3, [r0, #0]
    f->b0 = b0;
 80158de:	ed83 0a02 	vstr	s0, [r3, #8]
    f->b1 = b1;
 80158e2:	edc3 0a03 	vstr	s1, [r3, #12]
    f->b2 = b2;
 80158e6:	ed83 1a04 	vstr	s2, [r3, #16]
}
 80158ea:	4770      	bx	lr

080158ec <tBiQuad_initToPool>:
{
    tBiQuad_initToPool(ft, &leaf->mempool);
}

void    tBiQuad_initToPool     (tBiQuad* const ft, tMempool* const mp)
{
 80158ec:	b538      	push	{r3, r4, r5, lr}
    _tMempool* m = *mp;
 80158ee:	680c      	ldr	r4, [r1, #0]
{
 80158f0:	4605      	mov	r5, r0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
 80158f2:	2044      	movs	r0, #68	; 0x44
 80158f4:	4621      	mov	r1, r4
 80158f6:	f001 fe9b 	bl	8017630 <mpool_alloc>
    f->mempool = m;
    LEAF* leaf = f->mempool->leaf;
    
    f->gain = 1.0f;
    
    f->b0 = 0.0f;
 80158fa:	2300      	movs	r3, #0
    _tBiQuad* f = *ft = (_tBiQuad*) mpool_alloc(sizeof(_tBiQuad), m);
 80158fc:	6028      	str	r0, [r5, #0]
    f->gain = 1.0f;
 80158fe:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    f->mempool = m;
 8015902:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
 8015904:	6862      	ldr	r2, [r4, #4]
    f->gain = 1.0f;
 8015906:	6041      	str	r1, [r0, #4]
    f->b0 = 0.0f;
 8015908:	6143      	str	r3, [r0, #20]
    f->a0 = 0.0f;
 801590a:	6083      	str	r3, [r0, #8]
    
    f->lastIn[0] = 0.0f;
 801590c:	6203      	str	r3, [r0, #32]
    f->lastIn[1] = 0.0f;
 801590e:	6243      	str	r3, [r0, #36]	; 0x24
    f->lastOut[0] = 0.0f;
 8015910:	6283      	str	r3, [r0, #40]	; 0x28
    f->lastOut[1] = 0.0f;
 8015912:	62c3      	str	r3, [r0, #44]	; 0x2c
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015914:	68d3      	ldr	r3, [r2, #12]
 8015916:	6403      	str	r3, [r0, #64]	; 0x40
}
 8015918:	bd38      	pop	{r3, r4, r5, pc}
 801591a:	bf00      	nop

0801591c <tBiQuad_setSampleRate>:
void    tBiQuad_setSampleRate(tBiQuad* const ft, float sr)
{
    _tBiQuad* f = *ft;
    
    f->sampleRate = sr;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
 801591c:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8015988 <tBiQuad_setSampleRate+0x6c>
 8015920:	ee87 7a80 	vdiv.f32	s14, s15, s0
{
 8015924:	b510      	push	{r4, lr}
    _tBiQuad* f = *ft;
 8015926:	6804      	ldr	r4, [r0, #0]
{
 8015928:	ed2d 8b02 	vpush	{d8}
    
    f->a2 = f->radius * f->radius;
 801592c:	ed94 8a0d 	vldr	s16, [r4, #52]	; 0x34
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015930:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
    f->a2 = f->radius * f->radius;
 8015934:	ee68 8a08 	vmul.f32	s17, s16, s16
    f->sampleRate = sr;
 8015938:	ed84 0a0f 	vstr	s0, [r4, #60]	; 0x3c
    f->a2 = f->radius * f->radius;
 801593c:	edc4 8a04 	vstr	s17, [r4, #16]
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015940:	ee27 0a27 	vmul.f32	s0, s14, s15
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/f->sampleRate);
 8015944:	ed84 7a10 	vstr	s14, [r4, #64]	; 0x40
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015948:	f007 fe5e 	bl	801d608 <cosf>
 801594c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
    
    if (f->normalize)
 8015950:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    f->a1 = -2.0f * f->radius * cosf(f->frequency * f->twoPiTimesInvSampleRate);
 8015952:	ee28 8a27 	vmul.f32	s16, s16, s15
 8015956:	ee28 8a00 	vmul.f32	s16, s16, s0
 801595a:	ed84 8a03 	vstr	s16, [r4, #12]
    if (f->normalize)
 801595e:	b17b      	cbz	r3, 8015980 <tBiQuad_setSampleRate+0x64>
    {
        f->b0 = 0.5f - 0.5f * f->a2;
 8015960:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        f->b1 = 0.0f;
 8015964:	2300      	movs	r3, #0
        f->b0 = 0.5f - 0.5f * f->a2;
 8015966:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
        f->b1 = 0.0f;
 801596a:	61a3      	str	r3, [r4, #24]
        f->b0 = 0.5f - 0.5f * f->a2;
 801596c:	ee77 7ae8 	vsub.f32	s15, s15, s17
 8015970:	ee67 7a87 	vmul.f32	s15, s15, s14
        f->b2 = -f->b0;
 8015974:	eeb1 7a67 	vneg.f32	s14, s15
        f->b0 = 0.5f - 0.5f * f->a2;
 8015978:	edc4 7a05 	vstr	s15, [r4, #20]
        f->b2 = -f->b0;
 801597c:	ed84 7a07 	vstr	s14, [r4, #28]
    }
}
 8015980:	ecbd 8b02 	vpop	{d8}
 8015984:	bd10      	pop	{r4, pc}
 8015986:	bf00      	nop
 8015988:	40c90fdb 	.word	0x40c90fdb

0801598c <tSVF_init>:

// Less efficient, more accurate version of SVF, in which cutoff frequency is taken as floating point Hz value and tanf
// is calculated when frequency changes.
void tSVF_init(tSVF* const svff, SVFType type, float freq, float Q, LEAF* const leaf)
{
 801598c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801598e:	ed2d 8b02 	vpush	{d8}
     */
}

void    tSVF_initToPool     (tSVF* const svff, SVFType type, float freq, float Q, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015992:	6996      	ldr	r6, [r2, #24]
{
 8015994:	4607      	mov	r7, r0
 8015996:	460d      	mov	r5, r1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 8015998:	2044      	movs	r0, #68	; 0x44
 801599a:	4631      	mov	r1, r6
{
 801599c:	eef0 8a40 	vmov.f32	s17, s0
 80159a0:	eeb0 8a60 	vmov.f32	s16, s1
    _tSVF* svf = *svff = (_tSVF*) mpool_alloc(sizeof(_tSVF), m);
 80159a4:	f001 fe44 	bl	8017630 <mpool_alloc>
 80159a8:	6038      	str	r0, [r7, #0]
 80159aa:	4604      	mov	r4, r0
    svf->mempool = m;
 80159ac:	6006      	str	r6, [r0, #0]
    
    LEAF* leaf = svf->mempool->leaf;
 80159ae:	6873      	ldr	r3, [r6, #4]
    svf->sampleRate = leaf->sampleRate;
    svf->invSampleRate = leaf->invSampleRate;
    
    svf->type = type;
    
    svf->ic1eq = 0;
 80159b0:	2600      	movs	r6, #0
    svf->ic2eq = 0;
    svf->Q = Q;
    svf->cutoff = freq;
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80159b2:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 8015a64 <tSVF_init+0xd8>
    svf->sampleRate = leaf->sampleRate;
 80159b6:	681a      	ldr	r2, [r3, #0]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80159b8:	ee28 0a80 	vmul.f32	s0, s17, s0
    svf->sampleRate = leaf->sampleRate;
 80159bc:	63c2      	str	r2, [r0, #60]	; 0x3c
    svf->invSampleRate = leaf->invSampleRate;
 80159be:	edd3 7a01 	vldr	s15, [r3, #4]
    svf->type = type;
 80159c2:	7105      	strb	r5, [r0, #4]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80159c4:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->invSampleRate = leaf->invSampleRate;
 80159c8:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
    svf->ic1eq = 0;
 80159cc:	6106      	str	r6, [r0, #16]
    svf->ic2eq = 0;
 80159ce:	6146      	str	r6, [r0, #20]
    svf->Q = Q;
 80159d0:	ed80 8a03 	vstr	s16, [r0, #12]
    svf->cutoff = freq;
 80159d4:	edc0 8a02 	vstr	s17, [r0, #8]
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80159d8:	f008 fb56 	bl	801e088 <tanf>
    svf->k = 1.0f/Q;
 80159dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    svf->g = tanf(PI * freq * svf->invSampleRate);
 80159e0:	ed84 0a06 	vstr	s0, [r4, #24]
    svf->cH = 0.0f;
    svf->cB = 0.0f;
    svf->cBK = 0.0f;
    svf->cL = 1.0f;
    
    if (type == SVFTypeLowpass)
 80159e4:	2d01      	cmp	r5, #1
    svf->cH = 0.0f;
 80159e6:	62e6      	str	r6, [r4, #44]	; 0x2c
    svf->k = 1.0f/Q;
 80159e8:	ee87 7a88 	vdiv.f32	s14, s15, s16
    svf->cB = 0.0f;
 80159ec:	6326      	str	r6, [r4, #48]	; 0x30
    svf->cBK = 0.0f;
 80159ee:	63a6      	str	r6, [r4, #56]	; 0x38
    svf->cL = 1.0f;
 80159f0:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80159f4:	ee70 6a07 	vadd.f32	s13, s0, s14
    svf->k = 1.0f/Q;
 80159f8:	ed84 7a07 	vstr	s14, [r4, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 80159fc:	eeb0 7a67 	vmov.f32	s14, s15
 8015a00:	eea0 7a26 	vfma.f32	s14, s0, s13
 8015a04:	eec7 6a87 	vdiv.f32	s13, s15, s14
    svf->a2 = svf->g*svf->a1;
 8015a08:	ee20 7a26 	vmul.f32	s14, s0, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015a0c:	edc4 6a08 	vstr	s13, [r4, #32]
    svf->a3 = svf->g*svf->a2;
 8015a10:	ee20 0a07 	vmul.f32	s0, s0, s14
    svf->a2 = svf->g*svf->a1;
 8015a14:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    svf->a3 = svf->g*svf->a2;
 8015a18:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    if (type == SVFTypeLowpass)
 8015a1c:	d007      	beq.n	8015a2e <tSVF_init+0xa2>
        svf->cH = 0.0f;
        svf->cB = 0.0f;
        svf->cBK = 0.0f;
        svf->cL = 1.0f;
    }
    else if (type == SVFTypeBandpass)
 8015a1e:	2d02      	cmp	r5, #2
 8015a20:	d008      	beq.n	8015a34 <tSVF_init+0xa8>
        svf->cB = 1.0f;
        svf->cBK = 0.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypeHighpass)
 8015a22:	b96d      	cbnz	r5, 8015a40 <tSVF_init+0xb4>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8015a24:	4b10      	ldr	r3, [pc, #64]	; (8015a68 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8015a26:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8015a2a:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = -1.0f;
 8015a2c:	6363      	str	r3, [r4, #52]	; 0x34
}
 8015a2e:	ecbd 8b02 	vpop	{d8}
 8015a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        svf->cB = 1.0f;
 8015a34:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
        svf->cL = 0.0f;
 8015a38:	6366      	str	r6, [r4, #52]	; 0x34
}
 8015a3a:	ecbd 8b02 	vpop	{d8}
 8015a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    
    else if (type == SVFTypeNotch)
 8015a40:	2d03      	cmp	r5, #3
 8015a42:	d009      	beq.n	8015a58 <tSVF_init+0xcc>
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
        svf->cL = 0.0f;
    }
    
    else if (type == SVFTypePeak)
 8015a44:	2d04      	cmp	r5, #4
 8015a46:	d1f2      	bne.n	8015a2e <tSVF_init+0xa2>
    {
        svf->cH = 1.0f;
        svf->cB = 0.0f;
        svf->cBK = -1.0f;
 8015a48:	4a07      	ldr	r2, [pc, #28]	; (8015a68 <tSVF_init+0xdc>)
        svf->cL = -2.0f;
 8015a4a:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
        svf->cH = 1.0f;
 8015a4e:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cBK = -1.0f;
 8015a52:	63a2      	str	r2, [r4, #56]	; 0x38
        svf->cL = -2.0f;
 8015a54:	6363      	str	r3, [r4, #52]	; 0x34
}
 8015a56:	e7ea      	b.n	8015a2e <tSVF_init+0xa2>
        svf->cBK = -1.0f;
 8015a58:	4b03      	ldr	r3, [pc, #12]	; (8015a68 <tSVF_init+0xdc>)
        svf->cH = 1.0f;
 8015a5a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
        svf->cL = 0.0f;
 8015a5e:	6366      	str	r6, [r4, #52]	; 0x34
        svf->cBK = -1.0f;
 8015a60:	63a3      	str	r3, [r4, #56]	; 0x38
        svf->cL = 0.0f;
 8015a62:	e7e4      	b.n	8015a2e <tSVF_init+0xa2>
 8015a64:	40490fdb 	.word	0x40490fdb
 8015a68:	bf800000 	.word	0xbf800000

08015a6c <tSVF_tick>:
    mpool_free((char*)svf, svf->mempool);
}

float   tSVF_tick(tSVF* const svff, float v0)
{
    _tSVF* svf = *svff;
 8015a6c:	6803      	ldr	r3, [r0, #0]
    
    float v1,v2,v3;
    v3 = v0 - svf->ic2eq;
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8015a6e:	eef0 4a00 	vmov.f32	s9, #0	; 0x40000000  2.0
    v3 = v0 - svf->ic2eq;
 8015a72:	edd3 6a05 	vldr	s13, [r3, #20]
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8015a76:	ed93 6a04 	vldr	s12, [r3, #16]
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8015a7a:	eef0 5a66 	vmov.f32	s11, s13
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8015a7e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
    v3 = v0 - svf->ic2eq;
 8015a82:	ee30 4a66 	vsub.f32	s8, s0, s13
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8015a86:	ed93 3a0a 	vldr	s6, [r3, #40]	; 0x28
 8015a8a:	edd3 3a0e 	vldr	s7, [r3, #56]	; 0x38
 8015a8e:	eee6 5a27 	vfma.f32	s11, s12, s15
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8015a92:	edd3 2a08 	vldr	s5, [r3, #32]
 8015a96:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015a9a:	ed93 2a07 	vldr	s4, [r3, #28]
 8015a9e:	ed93 5a0c 	vldr	s10, [r3, #48]	; 0x30
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
    
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8015aa2:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8015aa6:	eea2 5a23 	vfma.f32	s10, s4, s7
 8015aaa:	edd3 3a0b 	vldr	s7, [r3, #44]	; 0x2c
    v1 = (svf->a1 * svf->ic1eq) + (svf->a2 * v3);
 8015aae:	eee2 7a86 	vfma.f32	s15, s5, s12
    v2 = svf->ic2eq + (svf->a2 * svf->ic1eq) + (svf->a3 * v3);
 8015ab2:	eee3 5a04 	vfma.f32	s11, s6, s8
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8015ab6:	ee97 6aa4 	vfnms.f32	s12, s15, s9
    return (v0 * svf->cH) + (v1 * svf->cB) + (svf->k * v1 * svf->cBK) + (v2 * svf->cL);
 8015aba:	ee25 7a87 	vmul.f32	s14, s11, s14
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8015abe:	eed5 6aa4 	vfnms.f32	s13, s11, s9
 8015ac2:	eea7 7a85 	vfma.f32	s14, s15, s10
    svf->ic1eq = (2.0f * v1) - svf->ic1eq;
 8015ac6:	ed83 6a04 	vstr	s12, [r3, #16]
    svf->ic2eq = (2.0f * v2) - svf->ic2eq;
 8015aca:	edc3 6a05 	vstr	s13, [r3, #20]
}
 8015ace:	eea3 7a80 	vfma.f32	s14, s7, s0
 8015ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8015ad6:	4770      	bx	lr

08015ad8 <tSVF_setFreqFast>:
}

void    tSVF_setFreqFast     (tSVF* const vf, float cutoff)
{
	_tSVF* svf = *vf;
    int intVer = (int)cutoff;
 8015ad8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015adc:	4a18      	ldr	r2, [pc, #96]	; (8015b40 <tSVF_setFreqFast+0x68>)
 8015ade:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tSVF* svf = *vf;
 8015ae2:	6803      	ldr	r3, [r0, #0]
    int intVer = (int)cutoff;
 8015ae4:	ee17 1a10 	vmov	r1, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015ae8:	ed93 7a07 	vldr	s14, [r3, #28]
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015aec:	ee77 6ac0 	vsub.f32	s13, s15, s0
    float floatVer = cutoff - (float)intVer;
 8015af0:	ee06 1a10 	vmov	s12, r1
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015af4:	eb02 0081 	add.w	r0, r2, r1, lsl #2
    float floatVer = cutoff - (float)intVer;
 8015af8:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015afc:	edd0 5a01 	vldr	s11, [r0, #4]
    float floatVer = cutoff - (float)intVer;
 8015b00:	ee30 0a46 	vsub.f32	s0, s0, s12
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b04:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015b08:	ed90 6a00 	vldr	s12, [r0]
 8015b0c:	ee20 0a25 	vmul.f32	s0, s0, s11
 8015b10:	eea6 0a26 	vfma.f32	s0, s12, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b14:	eef0 6a67 	vmov.f32	s13, s15
 8015b18:	ee30 7a07 	vadd.f32	s14, s0, s14
    svf->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8015b1c:	ed83 0a06 	vstr	s0, [r3, #24]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b20:	eee0 6a07 	vfma.f32	s13, s0, s14
 8015b24:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    svf->a2 = svf->g * svf->a1;
 8015b28:	ee60 7a07 	vmul.f32	s15, s0, s14
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b2c:	ed83 7a08 	vstr	s14, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8015b30:	ee20 0a27 	vmul.f32	s0, s0, s15
    svf->a2 = svf->g * svf->a1;
 8015b34:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8015b38:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
}
 8015b3c:	4770      	bx	lr
 8015b3e:	bf00      	nop
 8015b40:	0801fef4 	.word	0x0801fef4

08015b44 <tSVF_setQ>:

void     tSVF_setQ(tSVF* const svff, float Q)
{
    _tSVF* svf = *svff;
    svf->Q = Q;
    svf->k = 1.0f/Q;
 8015b44:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    _tSVF* svf = *svff;
 8015b48:	6803      	ldr	r3, [r0, #0]
    
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b4a:	edd3 7a06 	vldr	s15, [r3, #24]
    svf->k = 1.0f/Q;
 8015b4e:	eec7 6a00 	vdiv.f32	s13, s14, s0
    svf->Q = Q;
 8015b52:	ed83 0a03 	vstr	s0, [r3, #12]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b56:	eeb0 6a47 	vmov.f32	s12, s14
 8015b5a:	ee76 5aa7 	vadd.f32	s11, s13, s15
    svf->k = 1.0f/Q;
 8015b5e:	edc3 6a07 	vstr	s13, [r3, #28]
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b62:	eea7 6aa5 	vfma.f32	s12, s15, s11
 8015b66:	eec7 6a06 	vdiv.f32	s13, s14, s12
    svf->a2 = svf->g * svf->a1;
 8015b6a:	ee27 7aa6 	vmul.f32	s14, s15, s13
    svf->a1 = 1.0f/(1.0f + svf->g * (svf->g + svf->k));
 8015b6e:	edc3 6a08 	vstr	s13, [r3, #32]
    svf->a3 = svf->g * svf->a2;
 8015b72:	ee67 7a87 	vmul.f32	s15, s15, s14
    svf->a2 = svf->g * svf->a1;
 8015b76:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    svf->a3 = svf->g * svf->a2;
 8015b7a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 8015b7e:	4770      	bx	lr

08015b80 <tHighpass_init>:
}
#endif // LEAF_INCLUDE_FILTERTAN_TABLE

/* Highpass */
void tHighpass_init(tHighpass* const ft, float freq, LEAF* const leaf)
{
 8015b80:	b538      	push	{r3, r4, r5, lr}
 8015b82:	ed2d 8b02 	vpush	{d8}
    tHighpass_initToPool(ft, freq, &leaf->mempool);
}

void tHighpass_initToPool    (tHighpass* const ft, float freq, tMempool* const mp)
{
    _tMempool* m = *mp;
 8015b86:	698c      	ldr	r4, [r1, #24]
{
 8015b88:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8015b8a:	2018      	movs	r0, #24
{
 8015b8c:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8015b90:	4621      	mov	r1, r4
 8015b92:	f001 fdb1 	bl	80176f8 <mpool_calloc>
 8015b96:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8015b98:	6004      	str	r4, [r0, #0]
    LEAF* leaf = f->mempool->leaf;
    
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015b9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015b9e:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8015ba0:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015ba2:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8015ba6:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015ba8:	eee8 7a47 	vfms.f32	s15, s16, s14
    f->xs = 0.0f;
 8015bac:	6043      	str	r3, [r0, #4]
    
    f->frequency = freq;
 8015bae:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015bb2:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015bb6:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8015bba:	ecbd 8b02 	vpop	{d8}
 8015bbe:	bd38      	pop	{r3, r4, r5, pc}

08015bc0 <tHighpass_initToPool>:
{
 8015bc0:	b538      	push	{r3, r4, r5, lr}
 8015bc2:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 8015bc6:	680c      	ldr	r4, [r1, #0]
{
 8015bc8:	4605      	mov	r5, r0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8015bca:	2018      	movs	r0, #24
{
 8015bcc:	eeb0 8a40 	vmov.f32	s16, s0
    _tHighpass* f = *ft = (_tHighpass*) mpool_calloc(sizeof(_tHighpass), m);
 8015bd0:	4621      	mov	r1, r4
 8015bd2:	f001 fd91 	bl	80176f8 <mpool_calloc>
 8015bd6:	6028      	str	r0, [r5, #0]
    f->mempool = m;
 8015bd8:	6004      	str	r4, [r0, #0]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015bda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015bde:	6862      	ldr	r2, [r4, #4]
    f->ys = 0.0f;
 8015be0:	2300      	movs	r3, #0
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015be2:	ed92 7a03 	vldr	s14, [r2, #12]
    f->ys = 0.0f;
 8015be6:	6083      	str	r3, [r0, #8]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015be8:	eee7 7a48 	vfms.f32	s15, s14, s16
    f->xs = 0.0f;
 8015bec:	6043      	str	r3, [r0, #4]
    f->frequency = freq;
 8015bee:	ed80 8a04 	vstr	s16, [r0, #16]
    f->twoPiTimesInvSampleRate = leaf->twoPiTimesInvSampleRate;
 8015bf2:	ed80 7a05 	vstr	s14, [r0, #20]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015bf6:	edc0 7a03 	vstr	s15, [r0, #12]
}
 8015bfa:	ecbd 8b02 	vpop	{d8}
 8015bfe:	bd38      	pop	{r3, r4, r5, pc}

08015c00 <tHighpass_setFreq>:
    mpool_free((char*)f, f->mempool);
}

void tHighpass_setFreq(tHighpass* const ft, float freq)
{
    _tHighpass* f = *ft;
 8015c00:	6803      	ldr	r3, [r0, #0]
    
    f->frequency = freq;
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015c02:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8015c06:	ed93 7a05 	vldr	s14, [r3, #20]
    f->frequency = freq;
 8015c0a:	ed83 0a04 	vstr	s0, [r3, #16]
    f->R = (1.0f - (freq * f->twoPiTimesInvSampleRate));
 8015c0e:	eee7 7a40 	vfms.f32	s15, s14, s0
 8015c12:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8015c16:	4770      	bx	lr

08015c18 <tHighpass_tick>:
}

// From JOS DC Blocker
float tHighpass_tick(tHighpass* const ft, float x)
{
    _tHighpass* f = *ft;
 8015c18:	6803      	ldr	r3, [r0, #0]
    f->ys = x - f->xs + f->R * f->ys;
 8015c1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8015c1e:	ed93 7a02 	vldr	s14, [r3, #8]
 8015c22:	edd3 6a03 	vldr	s13, [r3, #12]
    f->xs = x;
 8015c26:	ed83 0a01 	vstr	s0, [r3, #4]
 8015c2a:	eed6 7a87 	vfnms.f32	s15, s13, s14
    f->ys = x - f->xs + f->R * f->ys;
 8015c2e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8015c32:	ed83 0a02 	vstr	s0, [r3, #8]
    return f->ys;
}
 8015c36:	4770      	bx	lr

08015c38 <tHighpass_setSampleRate>:

void tHighpass_setSampleRate(tHighpass* const ft, float sr)
{
    _tHighpass* f = *ft;
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8015c38:	eddf 6a07 	vldr	s13, [pc, #28]	; 8015c58 <tHighpass_setSampleRate+0x20>
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8015c3c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tHighpass* f = *ft;
 8015c40:	6803      	ldr	r3, [r0, #0]
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8015c42:	ee86 7a80 	vdiv.f32	s14, s13, s0
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8015c46:	edd3 6a04 	vldr	s13, [r3, #16]
 8015c4a:	eee7 7a66 	vfms.f32	s15, s14, s13
    f->twoPiTimesInvSampleRate = TWO_PI * (1.0f/sr);
 8015c4e:	ed83 7a05 	vstr	s14, [r3, #20]
    f->R = (1.0f - (f->frequency * f->twoPiTimesInvSampleRate));
 8015c52:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8015c56:	4770      	bx	lr
 8015c58:	40c90fdb 	.word	0x40c90fdb

08015c5c <tVZFilter_tickEfficient>:
    return f->cL*yL + f->cB*yB + f->cH*yH;
}

float   tVZFilter_tickEfficient             (tVZFilter* const vf, float in)
{
    _tVZFilter* f = *vf;
 8015c5c:	6803      	ldr	r3, [r0, #0]
    
    float yL, yB, yH, v1, v2;
    
    // compute highpass output via Eq. 5.1:
    //yH = (in - f->R2*f->s1 - f->g*f->s1 - f->s2) * f->h;
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8015c5e:	edd3 6a03 	vldr	s13, [r3, #12]
 8015c62:	ed93 7a02 	vldr	s14, [r3, #8]
 8015c66:	ee70 7a66 	vsub.f32	s15, s0, s13
 8015c6a:	ed93 4a10 	vldr	s8, [r3, #64]	; 0x40
 8015c6e:	ed93 5a06 	vldr	s10, [r3, #24]
    // compute bandpass output by applying 1st integrator to highpass output:
    v1 = f->g*yH;
 8015c72:	ed93 6a04 	vldr	s12, [r3, #16]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8015c76:	eee4 7a47 	vfms.f32	s15, s8, s14
    // compute lowpass output by applying 2nd integrator to bandpass output:
    v2 = f->g*yB;
    yL = v2 + f->s2;
    f->s2 = v2 + yL; // state update in 2nd integrator
    
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8015c7a:	ed93 0a09 	vldr	s0, [r3, #36]	; 0x24
 8015c7e:	edd3 4a08 	vldr	s9, [r3, #32]
 8015c82:	edd3 5a07 	vldr	s11, [r3, #28]
    yH = (in - (f->R2Plusg*f->s1) - f->s2) * f->h;
 8015c86:	ee67 7a85 	vmul.f32	s15, s15, s10
    yB = v1 + f->s1;
 8015c8a:	eea6 7a27 	vfma.f32	s14, s12, s15
    return f->cL*yL + f->cB*yB + f->cH*yH;
 8015c8e:	ee27 0a80 	vmul.f32	s0, s15, s0
    yL = v2 + f->s2;
 8015c92:	eee6 6a07 	vfma.f32	s13, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8015c96:	eeb0 5a47 	vmov.f32	s10, s14
 8015c9a:	eea4 0a87 	vfma.f32	s0, s9, s14
 8015c9e:	eea6 5a27 	vfma.f32	s10, s12, s15
    f->s2 = v2 + yL; // state update in 2nd integrator
 8015ca2:	eef0 7a66 	vmov.f32	s15, s13
}
 8015ca6:	eea5 0aa6 	vfma.f32	s0, s11, s13
    f->s2 = v2 + yL; // state update in 2nd integrator
 8015caa:	eee6 7a07 	vfma.f32	s15, s12, s14
    f->s1 = v1 + yB; // state update in 1st integrator
 8015cae:	ed83 5a02 	vstr	s10, [r3, #8]
    f->s2 = v2 + yL; // state update in 2nd integrator
 8015cb2:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8015cb6:	4770      	bx	lr

08015cb8 <tVZFilter_calcCoeffs>:

void   tVZFilter_calcCoeffs           (tVZFilter* const vf)
{
 8015cb8:	b510      	push	{r4, lr}
    _tVZFilter* f = *vf;
 8015cba:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015cbc:	eddf 7a98 	vldr	s15, [pc, #608]	; 8015f20 <tVZFilter_calcCoeffs+0x268>
{
 8015cc0:	ed2d 8b02 	vpush	{d8}
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015cc4:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015cc8:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 8015ccc:	ee68 8a87 	vmul.f32	s17, s17, s14
 8015cd0:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8015cd4:	eeb0 0a68 	vmov.f32	s0, s17
 8015cd8:	f008 f9d6 	bl	801e088 <tanf>
    
    switch( f->type )
 8015cdc:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015cde:	eeb0 8a40 	vmov.f32	s16, s0
 8015ce2:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8015ce6:	2b0a      	cmp	r3, #10
 8015ce8:	f200 8117 	bhi.w	8015f1a <tVZFilter_calcCoeffs+0x262>
 8015cec:	e8df f013 	tbh	[pc, r3, lsl #1]
 8015cf0:	002f0026 	.word	0x002f0026
 8015cf4:	00410038 	.word	0x00410038
 8015cf8:	0056004d 	.word	0x0056004d
 8015cfc:	00a1008b 	.word	0x00a1008b
 8015d00:	010a00b7 	.word	0x010a00b7
 8015d04:	000b      	.short	0x000b
        }
            break;
        case Allpass:
        {
            //f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B); if using bandwidth instead of Q
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8015d06:	edd4 7a05 	vldr	s15, [r4, #20]
 8015d0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015d0e:	eeb1 7a67 	vneg.f32	s14, s15
 8015d12:	61e3      	str	r3, [r4, #28]
 8015d14:	6263      	str	r3, [r4, #36]	; 0x24
 8015d16:	ed84 7a08 	vstr	s14, [r4, #32]
        }
        break;
            
    }
    f->R2Plusg = f->R2+f->g;
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015d1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8015d1e:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015d22:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8015d26:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8015d2a:	eee7 6a88 	vfma.f32	s13, s15, s16
 8015d2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8015d32:	edc4 7a06 	vstr	s15, [r4, #24]
}
 8015d36:	ecbd 8b02 	vpop	{d8}
 8015d3a:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8015d42:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015d46:	61e3      	str	r3, [r4, #28]
 8015d48:	6223      	str	r3, [r4, #32]
 8015d4a:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8015d4c:	e7e5      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8015d4e:	2300      	movs	r3, #0
 8015d50:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8015d54:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8015d58:	6223      	str	r3, [r4, #32]
 8015d5a:	6263      	str	r3, [r4, #36]	; 0x24
 8015d5c:	61e2      	str	r2, [r4, #28]
            break;
 8015d5e:	e7dc      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8015d60:	2300      	movs	r3, #0
 8015d62:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8015d66:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8015d6a:	61e3      	str	r3, [r4, #28]
 8015d6c:	6263      	str	r3, [r4, #36]	; 0x24
 8015d6e:	6222      	str	r2, [r4, #32]
            break;
 8015d70:	e7d3      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8015d72:	edd4 7a05 	vldr	s15, [r4, #20]
 8015d76:	2300      	movs	r3, #0
 8015d78:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 8015d7c:	61e3      	str	r3, [r4, #28]
 8015d7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8015d82:	6263      	str	r3, [r4, #36]	; 0x24
 8015d84:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 8015d88:	e7c7      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015d8a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015d8e:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8015d90:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8015d94:	6222      	str	r2, [r4, #32]
 8015d96:	61e3      	str	r3, [r4, #28]
 8015d98:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015d9a:	e7be      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8015d9c:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015da0:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 8015da4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8015da8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015dac:	f008 f80c 	bl	801ddc8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015db0:	ee28 0a80 	vmul.f32	s0, s17, s0
 8015db4:	f008 f968 	bl	801e088 <tanf>
            float r  = f->g/wl;
 8015db8:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015dbc:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 8015dc0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015dc4:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8015dc8:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015dcc:	ed84 7a07 	vstr	s14, [r4, #28]
 8015dd0:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 8015dd4:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015dd8:	eea7 7aa7 	vfma.f32	s14, s15, s15
 8015ddc:	eef0 6a47 	vmov.f32	s13, s14
 8015de0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015de4:	ee77 7a45 	vsub.f32	s15, s14, s10
 8015de8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8015dec:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8015df0:	eef1 7ac7 	vsqrt.f32	s15, s14
 8015df4:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015df8:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8015dfc:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015e00:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8015e04:	e789      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8015e06:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015e0a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8015e0e:	edd4 7a05 	vldr	s15, [r4, #20]
 8015e12:	eef1 6ac7 	vsqrt.f32	s13, s14
 8015e16:	ed84 7a07 	vstr	s14, [r4, #28]
 8015e1a:	6263      	str	r3, [r4, #36]	; 0x24
 8015e1c:	ee27 6a27 	vmul.f32	s12, s14, s15
 8015e20:	ed84 6a08 	vstr	s12, [r4, #32]
 8015e24:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015e28:	ee80 8a07 	vdiv.f32	s16, s0, s14
 8015e2c:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8015e30:	e773      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            float A = sqrtf(f->G);
 8015e32:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015e36:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8015e3a:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015e3e:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8015e42:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8015e46:	61e3      	str	r3, [r4, #28]
 8015e48:	ee27 6a27 	vmul.f32	s12, s14, s15
 8015e4c:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8015e50:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8015e54:	ee20 8a07 	vmul.f32	s16, s0, s14
 8015e58:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 8015e5c:	e75d      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            float x  = (2.0f*f->m-1.0f);
 8015e5e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8015e62:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8015e66:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015e6a:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8015f24 <tVZFilter_calcCoeffs+0x26c>
 8015e6e:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8015e72:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015e76:	eeb0 0a48 	vmov.f32	s0, s16
 8015e7a:	eea7 0a67 	vfms.f32	s0, s14, s15
 8015e7e:	f001 fbb9 	bl	80175f4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015e82:	eddf 0a28 	vldr	s1, [pc, #160]	; 8015f24 <tVZFilter_calcCoeffs+0x26c>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8015e86:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015e8a:	eeb0 0a68 	vmov.f32	s0, s17
 8015e8e:	f001 fbb5 	bl	80175fc <minimum>
            f->cB = 1.0f-x*x;
 8015e92:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015e96:	edd4 7a05 	vldr	s15, [r4, #20]
 8015e9a:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 8015e9e:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015ea2:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 8015ea6:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 8015eaa:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015eae:	ee76 5a06 	vadd.f32	s11, s12, s12
 8015eb2:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 8015eb6:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015eba:	eee6 7a06 	vfma.f32	s15, s12, s12
 8015ebe:	eee0 7a00 	vfma.f32	s15, s0, s0
 8015ec2:	eee0 7a65 	vfms.f32	s15, s0, s11
 8015ec6:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 8015eca:	f001 f903 	bl	80170d4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015ece:	edd4 5a07 	vldr	s11, [r4, #28]
 8015ed2:	ed94 6a08 	vldr	s12, [r4, #32]
 8015ed6:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8015eda:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015ede:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8015ee2:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8015ee6:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8015eea:	ee65 5a80 	vmul.f32	s11, s11, s0
 8015eee:	ee26 6a00 	vmul.f32	s12, s12, s0
 8015ef2:	ee26 0a80 	vmul.f32	s0, s13, s0
 8015ef6:	edc4 5a07 	vstr	s11, [r4, #28]
 8015efa:	ed84 6a08 	vstr	s12, [r4, #32]
 8015efe:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8015f02:	e70a      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
            f->cL = 1.0f;
 8015f04:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8015f08:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8015f0c:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8015f0e:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8015f12:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8015f16:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8015f18:	e6ff      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
    f->R2Plusg = f->R2+f->g;
 8015f1a:	edd4 7a05 	vldr	s15, [r4, #20]
 8015f1e:	e6fc      	b.n	8015d1a <tVZFilter_calcCoeffs+0x62>
 8015f20:	40490fdb 	.word	0x40490fdb
 8015f24:	00000000 	.word	0x00000000

08015f28 <tVZFilter_initToPool>:
{
 8015f28:	b5f0      	push	{r4, r5, r6, r7, lr}
    _tMempool* m = *mp;
 8015f2a:	6817      	ldr	r7, [r2, #0]
{
 8015f2c:	4605      	mov	r5, r0
 8015f2e:	460e      	mov	r6, r1
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8015f30:	204c      	movs	r0, #76	; 0x4c
 8015f32:	4639      	mov	r1, r7
{
 8015f34:	ed2d 8b04 	vpush	{d8-d9}
 8015f38:	b083      	sub	sp, #12
 8015f3a:	eef0 8a60 	vmov.f32	s17, s1
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015f3e:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8015f42:	ed9f 8a42 	vldr	s16, [pc, #264]	; 801604c <tVZFilter_initToPool+0x124>
{
 8015f46:	ed8d 0a01 	vstr	s0, [sp, #4]
    _tVZFilter* f = *vf = (_tVZFilter*) mpool_alloc(sizeof(_tVZFilter), m);
 8015f4a:	f001 fb71 	bl	8017630 <mpool_alloc>
 8015f4e:	6028      	str	r0, [r5, #0]
 8015f50:	4604      	mov	r4, r0
    f->mempool = m;
 8015f52:	6007      	str	r7, [r0, #0]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015f54:	eeb0 0a48 	vmov.f32	s0, s16
    LEAF* leaf = f->mempool->leaf;
 8015f58:	687b      	ldr	r3, [r7, #4]
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015f5a:	eddd 0a01 	vldr	s1, [sp, #4]
    f->sampleRate = leaf->sampleRate;
 8015f5e:	ed93 1a00 	vldr	s2, [r3]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015f62:	ed9f 9a3b 	vldr	s18, [pc, #236]	; 8016050 <tVZFilter_initToPool+0x128>
    f->sampleRate = leaf->sampleRate;
 8015f66:	ed80 1a11 	vstr	s2, [r0, #68]	; 0x44
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015f6a:	ee21 1a29 	vmul.f32	s2, s2, s19
    f->invSampleRate = leaf->invSampleRate;
 8015f6e:	685b      	ldr	r3, [r3, #4]
 8015f70:	6483      	str	r3, [r0, #72]	; 0x48
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015f72:	f001 f96d 	bl	8017250 <LEAF_clip>
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8015f76:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8016054 <tVZFilter_initToPool+0x12c>
    f->R2Plusg = f->R2 + f->g;
 8015f7a:	edd4 7a04 	vldr	s15, [r4, #16]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015f7e:	ee20 6a09 	vmul.f32	s12, s0, s18
 8015f82:	edd4 6a12 	vldr	s13, [r4, #72]	; 0x48
    f->R2Plusg = f->R2 + f->g;
 8015f86:	ee77 7a87 	vadd.f32	s15, s15, s14
    f->G    = ONE_OVER_SQRT2;
 8015f8a:	4b33      	ldr	r3, [pc, #204]	; (8016058 <tVZFilter_initToPool+0x130>)
    f->invG = 1.0f/ONE_OVER_SQRT2;
 8015f8c:	ed84 7a0c 	vstr	s14, [r4, #48]	; 0x30
    f->G    = ONE_OVER_SQRT2;
 8015f90:	62e3      	str	r3, [r4, #44]	; 0x2c
    f->R2   = f->invG;
 8015f92:	ed84 7a05 	vstr	s14, [r4, #20]
    f->R2Plusg = f->R2 + f->g;
 8015f96:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->fc   = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8015f9a:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015f9e:	ee26 0a26 	vmul.f32	s0, s12, s13
    f->type = type;
 8015fa2:	7126      	strb	r6, [r4, #4]
    f->B    = bandWidth;
 8015fa4:	edc4 8a0e 	vstr	s17, [r4, #56]	; 0x38
    f->m    = 0.0f;
 8015fa8:	ed84 8a0f 	vstr	s16, [r4, #60]	; 0x3c
    f->Q    = 0.5f;
 8015fac:	edc4 9a0d 	vstr	s19, [r4, #52]	; 0x34
    f->s1    = 0.0f;
 8015fb0:	ed84 8a02 	vstr	s16, [r4, #8]
    f->s2   = 0.0f;
 8015fb4:	ed84 8a03 	vstr	s16, [r4, #12]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015fb8:	f008 f866 	bl	801e088 <tanf>
}

void   tVZFilter_setBandwidth               (tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015fbc:	ed9f 1a27 	vldr	s2, [pc, #156]	; 801605c <tVZFilter_initToPool+0x134>
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 8015fc0:	ed84 0a04 	vstr	s0, [r4, #16]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015fc4:	eef0 0a68 	vmov.f32	s1, s17
 8015fc8:	eeb0 0a48 	vmov.f32	s0, s16
    _tVZFilter* f = *vf;
 8015fcc:	682e      	ldr	r6, [r5, #0]
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015fce:	f001 f93f 	bl	8017250 <LEAF_clip>
 8015fd2:	eef0 0a40 	vmov.f32	s1, s0
}

float tVZFilter_BandwidthToR(tVZFilter* const vf, float B)
{
    _tVZFilter* f = *vf;
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8015fd6:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8015fda:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
    f->B = LEAF_clip(0.0f, B, 100.0f);
 8015fde:	edc6 0a0e 	vstr	s1, [r6, #56]	; 0x38
    _tVZFilter* f = *vf;
 8015fe2:	682c      	ldr	r4, [r5, #0]
    float fl = f->fc*powf(2.0f, -B*0.5f); // lower bandedge frequency (in Hz)
 8015fe4:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8015fe8:	f007 feee 	bl	801ddc8 <powf>
    float gl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 8015fec:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 8015ff0:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8015ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8015ff8:	ee67 7a89 	vmul.f32	s15, s15, s18
 8015ffc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8016000:	f008 f842 	bl	801e088 <tanf>
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 8016004:	ed94 6a04 	vldr	s12, [r4, #16]
    // unwarped: r = pow(2, -B/2) -> approximation for low
    // center-frequencies
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8016008:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 801600c:	4628      	mov	r0, r5
    float r  = gl/f->g;            // ratio between warped lower bandedge- and center-frequencies
 801600e:	ee80 7a06 	vdiv.f32	s14, s0, s12
    return sqrtf((1.0f-r*r)*(1.0f-r*r)/(4.0f*r*r));
 8016012:	eef5 6a00 	vmov.f32	s13, #80	; 0x3e800000  0.250
 8016016:	ee27 7a07 	vmul.f32	s14, s14, s14
 801601a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801601e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8016022:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016026:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801602a:	eef1 7ae6 	vsqrt.f32	s15, s13
    f->R2 = 2.0f*tVZFilter_BandwidthToR(vf, f->B);
 801602e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8016032:	edc6 7a05 	vstr	s15, [r6, #20]
    tVZFilter_calcCoeffs(vf);
 8016036:	f7ff fe3f 	bl	8015cb8 <tVZFilter_calcCoeffs>
    tVZFilter_calcCoeffs(vf);
 801603a:	4628      	mov	r0, r5
}
 801603c:	b003      	add	sp, #12
 801603e:	ecbd 8b04 	vpop	{d8-d9}
 8016042:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    tVZFilter_calcCoeffs(vf);
 8016046:	f7ff be37 	b.w	8015cb8 <tVZFilter_calcCoeffs>
 801604a:	bf00      	nop
 801604c:	00000000 	.word	0x00000000
 8016050:	40490fdb 	.word	0x40490fdb
 8016054:	3fb504f3 	.word	0x3fb504f3
 8016058:	3f3504f3 	.word	0x3f3504f3
 801605c:	42c80000 	.word	0x42c80000

08016060 <tVZFilter_init>:
    tVZFilter_initToPool(vf, type, freq, bandWidth, &leaf->mempool);
 8016060:	3218      	adds	r2, #24
 8016062:	f7ff bf61 	b.w	8015f28 <tVZFilter_initToPool>
 8016066:	bf00      	nop

08016068 <tVZFilter_setFreq>:
{
 8016068:	b538      	push	{r3, r4, r5, lr}
    _tVZFilter* f = *vf;
 801606a:	6805      	ldr	r5, [r0, #0]
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 801606c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 8016070:	4604      	mov	r4, r0
 8016072:	eef0 0a40 	vmov.f32	s1, s0
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8016076:	ed95 1a11 	vldr	s2, [r5, #68]	; 0x44
 801607a:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8016094 <tVZFilter_setFreq+0x2c>
 801607e:	ee21 1a27 	vmul.f32	s2, s2, s15
 8016082:	f001 f8e5 	bl	8017250 <LEAF_clip>
    tVZFilter_calcCoeffs(vf);
 8016086:	4620      	mov	r0, r4
    f->fc = LEAF_clip(0.0f, freq, 0.5f * f->sampleRate);
 8016088:	ed85 0a0a 	vstr	s0, [r5, #40]	; 0x28
}
 801608c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8016090:	f7ff be12 	b.w	8015cb8 <tVZFilter_calcCoeffs>
 8016094:	00000000 	.word	0x00000000

08016098 <tVZFilter_setFreqFast>:
    int intVer = (int)cutoff;
 8016098:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801609c:	4baa      	ldr	r3, [pc, #680]	; (8016348 <tVZFilter_setFreqFast+0x2b0>)
 801609e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    int intVer = (int)cutoff;
 80160a2:	ee17 2a10 	vmov	r2, s14
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80160a6:	ee37 7ac0 	vsub.f32	s14, s15, s0
    float floatVer = cutoff - (float)intVer;
 80160aa:	ee07 2a90 	vmov	s15, r2
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80160ae:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 80160b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80160b6:	ed91 6a01 	vldr	s12, [r1, #4]
{
 80160ba:	b510      	push	{r4, lr}
    float floatVer = cutoff - (float)intVer;
 80160bc:	ee70 7a66 	vsub.f32	s15, s0, s13
	 _tVZFilter* f = *vf;
 80160c0:	6804      	ldr	r4, [r0, #0]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80160c2:	ee37 7a26 	vadd.f32	s14, s14, s13
 80160c6:	edd1 6a00 	vldr	s13, [r1]
 80160ca:	ee67 7a86 	vmul.f32	s15, s15, s12
{
 80160ce:	ed2d 8b02 	vpush	{d8}
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80160d2:	eee6 7a87 	vfma.f32	s15, s13, s14
    switch( f->type )
 80160d6:	7922      	ldrb	r2, [r4, #4]
    f->g = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 80160d8:	edc4 7a04 	vstr	s15, [r4, #16]
    switch( f->type )
 80160dc:	2a0a      	cmp	r2, #10
 80160de:	f200 812f 	bhi.w	8016340 <tVZFilter_setFreqFast+0x2a8>
 80160e2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80160e6:	0026      	.short	0x0026
 80160e8:	0038002f 	.word	0x0038002f
 80160ec:	004d0041 	.word	0x004d0041
 80160f0:	009b0056 	.word	0x009b0056
 80160f4:	00cf00b5 	.word	0x00cf00b5
 80160f8:	000b0122 	.word	0x000b0122
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 80160fc:	ed94 7a05 	vldr	s14, [r4, #20]
 8016100:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016104:	eef1 6a47 	vneg.f32	s13, s14
 8016108:	61e3      	str	r3, [r4, #28]
 801610a:	6263      	str	r3, [r4, #36]	; 0x24
 801610c:	edc4 6a08 	vstr	s13, [r4, #32]
    f->R2Plusg = f->R2+f->g;
 8016110:	ee37 0a27 	vadd.f32	s0, s14, s15
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8016114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 8016118:	ed84 0a10 	vstr	s0, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 801611c:	eef0 6a47 	vmov.f32	s13, s14
 8016120:	eee0 6a27 	vfma.f32	s13, s0, s15
 8016124:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016128:	edc4 7a06 	vstr	s15, [r4, #24]
}
 801612c:	ecbd 8b02 	vpop	{d8}
 8016130:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8016132:	2300      	movs	r3, #0
 8016134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8016138:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801613c:	61e3      	str	r3, [r4, #28]
 801613e:	6223      	str	r3, [r4, #32]
 8016140:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 8016142:	e7e5      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8016144:	2300      	movs	r3, #0
 8016146:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 801614a:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801614e:	6223      	str	r3, [r4, #32]
 8016150:	6263      	str	r3, [r4, #36]	; 0x24
 8016152:	61e2      	str	r2, [r4, #28]
            break;
 8016154:	e7dc      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8016156:	2300      	movs	r3, #0
 8016158:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 801615c:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8016160:	61e3      	str	r3, [r4, #28]
 8016162:	6263      	str	r3, [r4, #36]	; 0x24
 8016164:	6222      	str	r2, [r4, #32]
            break;
 8016166:	e7d3      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8016168:	ed94 7a05 	vldr	s14, [r4, #20]
 801616c:	2300      	movs	r3, #0
 801616e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8016172:	61e3      	str	r3, [r4, #28]
 8016174:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016178:	6263      	str	r3, [r4, #36]	; 0x24
 801617a:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801617e:	e7c7      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 8016180:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016184:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 8016186:	ed94 7a05 	vldr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 801618a:	6222      	str	r2, [r4, #32]
 801618c:	61e3      	str	r3, [r4, #28]
 801618e:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8016190:	e7be      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 8016192:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 8016196:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 801619a:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 801619e:	ed94 8a0a 	vldr	s16, [r4, #40]	; 0x28
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80161a2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
            float fl = f->fc*fastPowf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80161a6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80161aa:	f000 ffd7 	bl	801715c <fastPowf>
            float wl =  fastertanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80161ae:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80161b2:	eddf 7a66 	vldr	s15, [pc, #408]	; 801634c <tVZFilter_setFreqFast+0x2b4>
 80161b6:	ee28 8a07 	vmul.f32	s16, s16, s14
 80161ba:	ee28 8a27 	vmul.f32	s16, s16, s15
 80161be:	ee28 0a00 	vmul.f32	s0, s16, s0
 80161c2:	f000 ff73 	bl	80170ac <fastertanf>
            float r  = f->g/wl;
 80161c6:	ed94 7a04 	vldr	s14, [r4, #16]
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80161ca:	eeb0 5a68 	vmov.f32	s10, s17
 80161ce:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
            float r  = f->g/wl;
 80161d2:	eec7 7a00 	vdiv.f32	s15, s14, s0
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80161d6:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80161da:	eeb5 6a00 	vmov.f32	s12, #80	; 0x3e800000  0.250
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80161de:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80161e2:	eea7 5aa7 	vfma.f32	s10, s15, s15
 80161e6:	ee85 7a27 	vdiv.f32	s14, s10, s15
 80161ea:	ee77 7a65 	vsub.f32	s15, s14, s11
 80161ee:	ee67 7a86 	vmul.f32	s15, s15, s12
 80161f2:	ee87 0aa6 	vdiv.f32	s0, s15, s13
 80161f6:	f000 ff6d 	bl	80170d4 <fastsqrtf>
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80161fa:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
    f->R2Plusg = f->R2+f->g;
 80161fe:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8016202:	edc4 8a07 	vstr	s17, [r4, #28]
 8016206:	edc4 8a09 	vstr	s17, [r4, #36]	; 0x24
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801620a:	ee30 7a00 	vadd.f32	s14, s0, s0
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801620e:	ee66 6a87 	vmul.f32	s13, s13, s14
            f->R2 = 2.0f*fastsqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 8016212:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8016216:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 801621a:	e779      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 801621c:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8016220:	f000 ff58 	bl	80170d4 <fastsqrtf>
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8016224:	f000 ff56 	bl	80170d4 <fastsqrtf>
 8016228:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801622c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8016230:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8016234:	eec6 7a00 	vdiv.f32	s15, s12, s0
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 8016238:	ed94 7a05 	vldr	s14, [r4, #20]
 801623c:	edc4 6a07 	vstr	s13, [r4, #28]
 8016240:	6263      	str	r3, [r4, #36]	; 0x24
 8016242:	ee66 6a87 	vmul.f32	s13, s13, s14
 8016246:	edc4 6a08 	vstr	s13, [r4, #32]
            f->g /= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801624a:	edc4 7a04 	vstr	s15, [r4, #16]
            break;
 801624e:	e75f      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            float A = fastsqrtf(f->G);
 8016250:	ed94 0a0b 	vldr	s0, [r4, #44]	; 0x2c
 8016254:	f000 ff3e 	bl	80170d4 <fastsqrtf>
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8016258:	f000 ff3c 	bl	80170d4 <fastsqrtf>
 801625c:	ed94 6a04 	vldr	s12, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8016260:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8016264:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016268:	ed94 7a05 	vldr	s14, [r4, #20]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801626c:	ee60 7a06 	vmul.f32	s15, s0, s12
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8016270:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
 8016274:	ee67 6a26 	vmul.f32	s13, s14, s13
 8016278:	61e3      	str	r3, [r4, #28]
            f->g *= fastsqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801627a:	edc4 7a04 	vstr	s15, [r4, #16]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 801627e:	edc4 6a08 	vstr	s13, [r4, #32]
            break;
 8016282:	e745      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            float x  = (2.0f*f->m-1.0f);
 8016284:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016288:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 801628c:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8016290:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8016350 <tVZFilter_setFreqFast+0x2b8>
 8016294:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8016298:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 801629c:	eeb0 0a48 	vmov.f32	s0, s16
 80162a0:	eea7 0a67 	vfms.f32	s0, s14, s15
 80162a4:	f001 f9a6 	bl	80175f4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80162a8:	eddf 0a29 	vldr	s1, [pc, #164]	; 8016350 <tVZFilter_setFreqFast+0x2b8>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80162ac:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80162b0:	eeb0 0a68 	vmov.f32	s0, s17
 80162b4:	f001 f9a2 	bl	80175fc <minimum>
            f->cB = 1.0f-x*x;
 80162b8:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80162bc:	edd4 7a05 	vldr	s15, [r4, #20]
 80162c0:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80162c4:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80162c8:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80162cc:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80162d0:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80162d4:	ee76 5a06 	vadd.f32	s11, s12, s12
 80162d8:	ee38 8a08 	vadd.f32	s16, s16, s16
 80162dc:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80162e0:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80162e4:	eee6 7a06 	vfma.f32	s15, s12, s12
 80162e8:	eee0 7a00 	vfma.f32	s15, s0, s0
 80162ec:	eee0 7a65 	vfms.f32	s15, s0, s11
 80162f0:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80162f4:	f000 feee 	bl	80170d4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80162f8:	edd4 5a07 	vldr	s11, [r4, #28]
 80162fc:	ed94 6a08 	vldr	s12, [r4, #32]
 8016300:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 8016304:	ed94 7a05 	vldr	s14, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016308:	ee28 0a00 	vmul.f32	s0, s16, s0
    f->R2Plusg = f->R2+f->g;
 801630c:	edd4 7a04 	vldr	s15, [r4, #16]
            f->cL *= s; f->cB *= s; f->cH *= s;
 8016310:	ee65 5a80 	vmul.f32	s11, s11, s0
 8016314:	ee26 6a00 	vmul.f32	s12, s12, s0
 8016318:	ee26 0a80 	vmul.f32	s0, s13, s0
 801631c:	edc4 5a07 	vstr	s11, [r4, #28]
 8016320:	ed84 6a08 	vstr	s12, [r4, #32]
 8016324:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8016328:	e6f2      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
            f->cL = 1.0f;
 801632a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 801632e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
            f->cL = 1.0f;
 8016332:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 8016334:	ed84 7a05 	vstr	s14, [r4, #20]
            f->cB = f->R2;
 8016338:	ed84 7a08 	vstr	s14, [r4, #32]
            f->cH = 1.0f;
 801633c:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 801633e:	e6e7      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
    f->R2Plusg = f->R2+f->g;
 8016340:	ed94 7a05 	vldr	s14, [r4, #20]
 8016344:	e6e4      	b.n	8016110 <tVZFilter_setFreqFast+0x78>
 8016346:	bf00      	nop
 8016348:	0801fef4 	.word	0x0801fef4
 801634c:	40490fdb 	.word	0x40490fdb
 8016350:	00000000 	.word	0x00000000

08016354 <tVZFilter_setGain>:
{
 8016354:	b538      	push	{r3, r4, r5, lr}
 8016356:	eef0 0a40 	vmov.f32	s1, s0
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 801635a:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8016384 <tVZFilter_setGain+0x30>
 801635e:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8016388 <tVZFilter_setGain+0x34>
{
 8016362:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 8016364:	6805      	ldr	r5, [r0, #0]
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8016366:	f000 ff73 	bl	8017250 <LEAF_clip>
    f->invG = 1.0f/f->G;
 801636a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 801636e:	4620      	mov	r0, r4
    f->G = LEAF_clip(0.000001f, gain, 4000.0f);
 8016370:	ed85 0a0b 	vstr	s0, [r5, #44]	; 0x2c
    f->invG = 1.0f/f->G;
 8016374:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016378:	edc5 7a0c 	vstr	s15, [r5, #48]	; 0x30
}
 801637c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 8016380:	f7ff bc9a 	b.w	8015cb8 <tVZFilter_calcCoeffs>
 8016384:	457a0000 	.word	0x457a0000
 8016388:	358637bd 	.word	0x358637bd

0801638c <tVZFilter_setResonance>:
{
 801638c:	b538      	push	{r3, r4, r5, lr}
 801638e:	eef0 0a40 	vmov.f32	s1, s0
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 8016392:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 80163bc <tVZFilter_setResonance+0x30>
 8016396:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80163c0 <tVZFilter_setResonance+0x34>
{
 801639a:	4604      	mov	r4, r0
    _tVZFilter* f = *vf;
 801639c:	6805      	ldr	r5, [r0, #0]
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 801639e:	f000 ff57 	bl	8017250 <LEAF_clip>
    f->R2 = 1.0f / f->Q;
 80163a2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    tVZFilter_calcCoeffs(vf);
 80163a6:	4620      	mov	r0, r4
    f->Q = LEAF_clip(0.01f, res, 100.0f);
 80163a8:	ed85 0a0d 	vstr	s0, [r5, #52]	; 0x34
    f->R2 = 1.0f / f->Q;
 80163ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80163b0:	edc5 7a05 	vstr	s15, [r5, #20]
}
 80163b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    tVZFilter_calcCoeffs(vf);
 80163b8:	f7ff bc7e 	b.w	8015cb8 <tVZFilter_calcCoeffs>
 80163bc:	42c80000 	.word	0x42c80000
 80163c0:	3c23d70a 	.word	0x3c23d70a

080163c4 <tVZFilter_setSampleRate>:

void    tVZFilter_setSampleRate  (tVZFilter* const vf, float sr)
{
    _tVZFilter* f = *vf;
    f->sampleRate = sr;
    f->invSampleRate = 1.0f/f->sampleRate;
 80163c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    _tVZFilter* f = *vf;
 80163c8:	6803      	ldr	r3, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80163ca:	eddf 7a9d 	vldr	s15, [pc, #628]	; 8016640 <tVZFilter_setSampleRate+0x27c>
    f->invSampleRate = 1.0f/f->sampleRate;
 80163ce:	ee86 7a80 	vdiv.f32	s14, s13, s0
{
 80163d2:	b510      	push	{r4, lr}
 80163d4:	ed2d 8b02 	vpush	{d8}
    f->sampleRate = sr;
 80163d8:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
    f->invSampleRate = 1.0f/f->sampleRate;
 80163dc:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    _tVZFilter* f = *vf;
 80163e0:	6804      	ldr	r4, [r0, #0]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80163e2:	ed94 7a12 	vldr	s14, [r4, #72]	; 0x48
 80163e6:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
 80163ea:	ee68 8a87 	vmul.f32	s17, s17, s14
 80163ee:	ee68 8aa7 	vmul.f32	s17, s17, s15
 80163f2:	eeb0 0a68 	vmov.f32	s0, s17
 80163f6:	f007 fe47 	bl	801e088 <tanf>
    switch( f->type )
 80163fa:	7923      	ldrb	r3, [r4, #4]
    f->g = tanf(PI * f->fc * f->invSampleRate);  // embedded integrator gain (Fig 3.11)
 80163fc:	eeb0 8a40 	vmov.f32	s16, s0
 8016400:	ed84 0a04 	vstr	s0, [r4, #16]
    switch( f->type )
 8016404:	2b0a      	cmp	r3, #10
 8016406:	f200 8117 	bhi.w	8016638 <tVZFilter_setSampleRate+0x274>
 801640a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801640e:	0026      	.short	0x0026
 8016410:	0038002f 	.word	0x0038002f
 8016414:	004d0041 	.word	0x004d0041
 8016418:	008b0056 	.word	0x008b0056
 801641c:	00b700a1 	.word	0x00b700a1
 8016420:	000b010a 	.word	0x000b010a
            f->cL = 1.0f; f->cB = -f->R2; f->cH = 1.0f;
 8016424:	edd4 7a05 	vldr	s15, [r4, #20]
 8016428:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 801642c:	eeb1 7a67 	vneg.f32	s14, s15
 8016430:	61e3      	str	r3, [r4, #28]
 8016432:	6263      	str	r3, [r4, #36]	; 0x24
 8016434:	ed84 7a08 	vstr	s14, [r4, #32]
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8016438:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    f->R2Plusg = f->R2+f->g;
 801643c:	ee77 7a88 	vadd.f32	s15, s15, s16
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8016440:	eef0 6a47 	vmov.f32	s13, s14
    f->R2Plusg = f->R2+f->g;
 8016444:	edc4 7a10 	vstr	s15, [r4, #64]	; 0x40
    f->h = 1.0f / (1.0f + (f->R2*f->g) + (f->g*f->g));  // factor for feedback precomputation
 8016448:	eee7 6a88 	vfma.f32	s13, s15, s16
 801644c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8016450:	edc4 7a06 	vstr	s15, [r4, #24]
    tVZFilter_calcCoeffs(vf);
}
 8016454:	ecbd 8b02 	vpop	{d8}
 8016458:	bd10      	pop	{r4, pc}
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 801645a:	2300      	movs	r3, #0
 801645c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8016460:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 0.0f; f->cH = 1.0f;
 8016464:	61e3      	str	r3, [r4, #28]
 8016466:	6223      	str	r3, [r4, #32]
 8016468:	6262      	str	r2, [r4, #36]	; 0x24
            break;
 801646a:	e7e5      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 801646c:	2300      	movs	r3, #0
 801646e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8016472:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 0.0f;
 8016476:	6223      	str	r3, [r4, #32]
 8016478:	6263      	str	r3, [r4, #36]	; 0x24
 801647a:	61e2      	str	r2, [r4, #28]
            break;
 801647c:	e7dc      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 801647e:	2300      	movs	r3, #0
 8016480:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->R2Plusg = f->R2+f->g;
 8016484:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 0.0f; f->cB = 1.0f; f->cH = 0.0f;
 8016488:	61e3      	str	r3, [r4, #28]
 801648a:	6263      	str	r3, [r4, #36]	; 0x24
 801648c:	6222      	str	r2, [r4, #32]
            break;
 801648e:	e7d3      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            f->cL = 0.0f; f->cB = f->G * f->R2; f->cH = 0.0f;
 8016490:	edd4 7a05 	vldr	s15, [r4, #20]
 8016494:	2300      	movs	r3, #0
 8016496:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
 801649a:	61e3      	str	r3, [r4, #28]
 801649c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80164a0:	6263      	str	r3, [r4, #36]	; 0x24
 80164a2:	ed84 7a08 	vstr	s14, [r4, #32]
            break;
 80164a6:	e7c7      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80164a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80164ac:	2200      	movs	r2, #0
    f->R2Plusg = f->R2+f->g;
 80164ae:	edd4 7a05 	vldr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = 0.0f; f->cH = 1.0f;
 80164b2:	6222      	str	r2, [r4, #32]
 80164b4:	61e3      	str	r3, [r4, #28]
 80164b6:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 80164b8:	e7be      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            float fl = f->fc*powf(2.0f, (-f->B)*0.5f); // lower bandedge frequency (in Hz)
 80164ba:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80164be:	edd4 0a0e 	vldr	s1, [r4, #56]	; 0x38
 80164c2:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80164c6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80164ca:	f007 fc7d 	bl	801ddc8 <powf>
            float wl = tanf(PI*fl*f->invSampleRate);   // warped radian lower bandedge frequency /(2*fs)
 80164ce:	ee28 0a80 	vmul.f32	s0, s17, s0
 80164d2:	f007 fdd9 	bl	801e088 <tanf>
            float r  = f->g/wl;
 80164d6:	eec8 7a00 	vdiv.f32	s15, s16, s0
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80164da:	ed94 6a0b 	vldr	s12, [r4, #44]	; 0x2c
 80164de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80164e2:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 80164e6:	eef5 5a00 	vmov.f32	s11, #80	; 0x3e800000  0.250
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 80164ea:	ed84 7a07 	vstr	s14, [r4, #28]
 80164ee:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
            r *= r;    // warped frequency ratio wu/wl == (wc/wl)^2 where wu is the
 80164f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 80164f6:	eea7 7aa7 	vfma.f32	s14, s15, s15
 80164fa:	eef0 6a47 	vmov.f32	s13, s14
 80164fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8016502:	ee77 7a45 	vsub.f32	s15, s14, s10
 8016506:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801650a:	ee87 7a86 	vdiv.f32	s14, s15, s12
 801650e:	eef1 7ac7 	vsqrt.f32	s15, s14
 8016512:	ee77 7aa7 	vadd.f32	s15, s15, s15
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 8016516:	ee26 6a27 	vmul.f32	s12, s12, s15
            f->R2 = 2.0f*sqrtf(((r*r+1.0f)/r-2.0f)/(4.0f*f->G));
 801651a:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = 1.0f;
 801651e:	ed84 6a08 	vstr	s12, [r4, #32]
            break;
 8016522:	e789      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8016524:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8016528:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->cL = f->G; f->cB = f->R2*f->G; f->cH = 1.0f;
 801652c:	edd4 7a05 	vldr	s15, [r4, #20]
 8016530:	eef1 6ac7 	vsqrt.f32	s13, s14
 8016534:	ed84 7a07 	vstr	s14, [r4, #28]
 8016538:	6263      	str	r3, [r4, #36]	; 0x24
 801653a:	ee27 6a27 	vmul.f32	s12, s14, s15
 801653e:	ed84 6a08 	vstr	s12, [r4, #32]
 8016542:	eeb1 7ae6 	vsqrt.f32	s14, s13
            f->g /= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 8016546:	ee80 8a07 	vdiv.f32	s16, s0, s14
 801654a:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801654e:	e773      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            float A = sqrtf(f->G);
 8016550:	ed94 7a0b 	vldr	s14, [r4, #44]	; 0x2c
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8016554:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8016558:	edd4 7a05 	vldr	s15, [r4, #20]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801655c:	eef1 6ac7 	vsqrt.f32	s13, s14
            f->cL = 1.0f; f->cB = f->R2*f->G; f->cH = f->G;
 8016560:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
 8016564:	61e3      	str	r3, [r4, #28]
 8016566:	ee27 6a27 	vmul.f32	s12, s14, s15
 801656a:	ed84 6a08 	vstr	s12, [r4, #32]
            f->g *= sqrtf(A);               // scale SVF-cutoff frequency for shelvers
 801656e:	eeb1 7ae6 	vsqrt.f32	s14, s13
 8016572:	ee20 8a07 	vmul.f32	s16, s0, s14
 8016576:	ed84 8a04 	vstr	s16, [r4, #16]
            break;
 801657a:	e75d      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            float x  = (2.0f*f->m-1.0f);
 801657c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8016580:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8016584:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8016588:	eddf 0a2e 	vldr	s1, [pc, #184]	; 8016644 <tVZFilter_setSampleRate+0x280>
 801658c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
            float x  = (2.0f*f->m-1.0f);
 8016590:	eee7 8a27 	vfma.f32	s17, s14, s15
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 8016594:	eeb0 0a48 	vmov.f32	s0, s16
 8016598:	eea7 0a67 	vfms.f32	s0, s14, s15
 801659c:	f001 f82a 	bl	80175f4 <maximum>
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80165a0:	eddf 0a28 	vldr	s1, [pc, #160]	; 8016644 <tVZFilter_setSampleRate+0x280>
            f->cL = maximum(-x, 0.0f); /*cL *= cL;*/
 80165a4:	ed84 0a07 	vstr	s0, [r4, #28]
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80165a8:	eeb0 0a68 	vmov.f32	s0, s17
 80165ac:	f001 f826 	bl	80175fc <minimum>
            f->cB = 1.0f-x*x;
 80165b0:	eeb0 7a48 	vmov.f32	s14, s16
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80165b4:	edd4 7a05 	vldr	s15, [r4, #20]
 80165b8:	ed94 6a07 	vldr	s12, [r4, #28]
            f->cB = 1.0f-x*x;
 80165bc:	eea8 7ae8 	vfms.f32	s14, s17, s17
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80165c0:	ed94 8a0b 	vldr	s16, [r4, #44]	; 0x2c
 80165c4:	ee67 6aa7 	vmul.f32	s13, s15, s15
            f->cH = minimum( x, 0.0f); /*cH *= cH;*/
 80165c8:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80165cc:	ee76 5a06 	vadd.f32	s11, s12, s12
 80165d0:	ee67 7a07 	vmul.f32	s15, s14, s14
            f->cB = 1.0f-x*x;
 80165d4:	ed84 7a08 	vstr	s14, [r4, #32]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80165d8:	eee6 7a06 	vfma.f32	s15, s12, s12
 80165dc:	eee0 7a00 	vfma.f32	s15, s0, s0
 80165e0:	eee0 7a65 	vfms.f32	s15, s0, s11
 80165e4:	ee86 0aa7 	vdiv.f32	s0, s13, s15
 80165e8:	f000 fd74 	bl	80170d4 <fastsqrtf>
            f->cL *= s; f->cB *= s; f->cH *= s;
 80165ec:	edd4 5a07 	vldr	s11, [r4, #28]
 80165f0:	ed94 6a08 	vldr	s12, [r4, #32]
 80165f4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
    f->R2Plusg = f->R2+f->g;
 80165f8:	edd4 7a05 	vldr	s15, [r4, #20]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 80165fc:	ee38 7a08 	vadd.f32	s14, s16, s16
    f->R2Plusg = f->R2+f->g;
 8016600:	ed94 8a04 	vldr	s16, [r4, #16]
            float s = f->G * fastsqrtf((f->R2*f->R2) / (f->cL*f->cL + f->cB*f->cB + f->cH*f->cH - 2.0f*f->cL*f->cH)) * 2.0f;
 8016604:	ee27 0a00 	vmul.f32	s0, s14, s0
            f->cL *= s; f->cB *= s; f->cH *= s;
 8016608:	ee65 5a80 	vmul.f32	s11, s11, s0
 801660c:	ee26 6a00 	vmul.f32	s12, s12, s0
 8016610:	ee26 0a80 	vmul.f32	s0, s13, s0
 8016614:	edc4 5a07 	vstr	s11, [r4, #28]
 8016618:	ed84 6a08 	vstr	s12, [r4, #32]
 801661c:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
        break;
 8016620:	e70a      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
            f->cL = 1.0f;
 8016622:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
            f->R2 = f->invG;
 8016626:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
            f->cL = 1.0f;
 801662a:	61e3      	str	r3, [r4, #28]
            f->R2 = f->invG;
 801662c:	edc4 7a05 	vstr	s15, [r4, #20]
            f->cB = f->R2;
 8016630:	edc4 7a08 	vstr	s15, [r4, #32]
            f->cH = 1.0f;
 8016634:	6263      	str	r3, [r4, #36]	; 0x24
            break;
 8016636:	e6ff      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
    f->R2Plusg = f->R2+f->g;
 8016638:	edd4 7a05 	vldr	s15, [r4, #20]
 801663c:	e6fc      	b.n	8016438 <tVZFilter_setSampleRate+0x74>
 801663e:	bf00      	nop
 8016640:	40490fdb 	.word	0x40490fdb
 8016644:	00000000 	.word	0x00000000

08016648 <tDiodeFilter_init>:

//taken from Ivan C's model of the EMS diode ladder, based on mystran's code from KVR forums
//https://www.kvraudio.com/forum/viewtopic.php?f=33&t=349859&start=255

void    tDiodeFilter_init           (tDiodeFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8016648:	b570      	push	{r4, r5, r6, lr}
 801664a:	ed2d 8b02 	vpush	{d8}
    tDiodeFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tDiodeFilter_initToPool     (tDiodeFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 801664e:	698d      	ldr	r5, [r1, #24]
{
 8016650:	eeb0 8a40 	vmov.f32	s16, s0
 8016654:	4606      	mov	r6, r0
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8016656:	2040      	movs	r0, #64	; 0x40
 8016658:	4629      	mov	r1, r5
{
 801665a:	eef0 8a60 	vmov.f32	s17, s1
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 801665e:	f000 ffe7 	bl	8017630 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    // initialization (the resonance factor is between 0 and 8 according to the article)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8016662:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80166dc <tDiodeFilter_init+0x94>
    _tDiodeFilter* f = *vf = (_tDiodeFilter*) mpool_alloc(sizeof(_tDiodeFilter), m);
 8016666:	6030      	str	r0, [r6, #0]
 8016668:	4604      	mov	r4, r0
    f->mempool = m;
 801666a:	6005      	str	r5, [r0, #0]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801666c:	ee68 7a27 	vmul.f32	s15, s16, s15
    f->invSampleRate = leaf->invSampleRate;
 8016670:	686b      	ldr	r3, [r5, #4]
 8016672:	ed93 7a01 	vldr	s14, [r3, #4]
    f->cutoff = cutoff;
 8016676:	ed80 8a01 	vstr	s16, [r0, #4]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 801667a:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->invSampleRate = leaf->invSampleRate;
 801667e:	ed80 7a0f 	vstr	s14, [r0, #60]	; 0x3c
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 8016682:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8016686:	f007 f9cb 	bl	801da20 <tan>
    f->r = (7.f * resonance + 0.5f);
 801668a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801668e:	eef1 6a0c 	vmov.f32	s13, #28	; 0x40e00000  7.0
    f->Vt = 0.5f;
    f->n = 1.836f;
 8016692:	4913      	ldr	r1, [pc, #76]	; (80166e0 <tDiodeFilter_init+0x98>)
    f->zi = 0.0f; //previous input value
    f->gamma = f->Vt*f->n;
 8016694:	4b13      	ldr	r3, [pc, #76]	; (80166e4 <tDiodeFilter_init+0x9c>)
    f->s0 = 0.01f;
    f->s1 = 0.02f;
    f->s2 = 0.03f;
    f->s3 = 0.04f;
    f->g0inv = 1.f/(2.f*f->Vt);
 8016696:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->r = (7.f * resonance + 0.5f);
 801669a:	eeb0 7a67 	vmov.f32	s14, s15
    f->zi = 0.0f; //previous input value
 801669e:	2000      	movs	r0, #0
    f->n = 1.836f;
 80166a0:	6161      	str	r1, [r4, #20]
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80166a2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->s0 = 0.01f;
 80166a6:	4910      	ldr	r1, [pc, #64]	; (80166e8 <tDiodeFilter_init+0xa0>)
    f->r = (7.f * resonance + 0.5f);
 80166a8:	eea8 7aa6 	vfma.f32	s14, s17, s13
    f->gamma = f->Vt*f->n;
 80166ac:	61a3      	str	r3, [r4, #24]
    f->s1 = 0.02f;
 80166ae:	4b0f      	ldr	r3, [pc, #60]	; (80166ec <tDiodeFilter_init+0xa4>)
    f->zi = 0.0f; //previous input value
 80166b0:	61e0      	str	r0, [r4, #28]
    f->s0 = 0.01f;
 80166b2:	62e1      	str	r1, [r4, #44]	; 0x2c
    f->g0inv = 1.f/(2.f*f->Vt);
 80166b4:	6222      	str	r2, [r4, #32]
    f->s1 = 0.02f;
 80166b6:	6323      	str	r3, [r4, #48]	; 0x30
    f->s2 = 0.03f;
 80166b8:	480d      	ldr	r0, [pc, #52]	; (80166f0 <tDiodeFilter_init+0xa8>)
    f->g1inv = 1.f/(2.f*f->gamma);
 80166ba:	490e      	ldr	r1, [pc, #56]	; (80166f4 <tDiodeFilter_init+0xac>)
    f->g2inv = 1.f/(6.f*f->gamma);
 80166bc:	4a0e      	ldr	r2, [pc, #56]	; (80166f8 <tDiodeFilter_init+0xb0>)
    f->s3 = 0.04f;
 80166be:	4b0f      	ldr	r3, [pc, #60]	; (80166fc <tDiodeFilter_init+0xb4>)
    f->f = (float)tan((double)(PI * cutoff * f->invSampleRate));
 80166c0:	ed84 0a02 	vstr	s0, [r4, #8]
    f->Vt = 0.5f;
 80166c4:	edc4 7a04 	vstr	s15, [r4, #16]
    f->r = (7.f * resonance + 0.5f);
 80166c8:	ed84 7a03 	vstr	s14, [r4, #12]
    f->s2 = 0.03f;
 80166cc:	6360      	str	r0, [r4, #52]	; 0x34
    f->g1inv = 1.f/(2.f*f->gamma);
 80166ce:	6261      	str	r1, [r4, #36]	; 0x24
    f->g2inv = 1.f/(6.f*f->gamma);
 80166d0:	62a2      	str	r2, [r4, #40]	; 0x28
    f->s3 = 0.04f;
 80166d2:	63a3      	str	r3, [r4, #56]	; 0x38
}
 80166d4:	ecbd 8b02 	vpop	{d8}
 80166d8:	bd70      	pop	{r4, r5, r6, pc}
 80166da:	bf00      	nop
 80166dc:	40490fdb 	.word	0x40490fdb
 80166e0:	3feb020c 	.word	0x3feb020c
 80166e4:	3f6b020c 	.word	0x3f6b020c
 80166e8:	3c23d70a 	.word	0x3c23d70a
 80166ec:	3ca3d70a 	.word	0x3ca3d70a
 80166f0:	3cf5c28f 	.word	0x3cf5c28f
 80166f4:	3f0b6efd 	.word	0x3f0b6efd
 80166f8:	3e39e952 	.word	0x3e39e952
 80166fc:	3d23d70a 	.word	0x3d23d70a

08016700 <tDiodeFilter_tick>:

volatile int errorCheckCheck = 0;
//#define SAFE_FILTER
float   tDiodeFilter_tick               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8016700:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);
    
    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016702:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016706:	ed9f 2aba 	vldr	s4, [pc, #744]	; 80169f0 <tDiodeFilter_tick+0x2f0>
 801670a:	eddf 7aba 	vldr	s15, [pc, #744]	; 80169f4 <tDiodeFilter_tick+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801670e:	eddf 0aba 	vldr	s1, [pc, #744]	; 80169f8 <tDiodeFilter_tick+0x2f8>
 8016712:	eeb0 1a67 	vmov.f32	s2, s15
{
 8016716:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801671a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801671e:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016722:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016726:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 801672a:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801672e:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016732:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8016736:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 801673a:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801673e:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8016742:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016746:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801674a:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 801674e:	eea4 7a84 	vfma.f32	s14, s9, s8
 8016752:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016756:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 801675a:	ee73 5ac3 	vsub.f32	s11, s7, s6
 801675e:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016762:	ee27 7a22 	vmul.f32	s14, s14, s5
 8016766:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 801676a:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801676e:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016772:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016776:	ee77 4a20 	vadd.f32	s9, s14, s1
 801677a:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801677e:	eef0 4a67 	vmov.f32	s9, s15
 8016782:	eee7 4a04 	vfma.f32	s9, s14, s8
 8016786:	eeb0 7a42 	vmov.f32	s14, s4
 801678a:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801678e:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8016792:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8016796:	eeb0 1a67 	vmov.f32	s2, s15
 801679a:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 801679e:	eef0 4a67 	vmov.f32	s9, s15
 80167a2:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80167a6:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 80167aa:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80167ae:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80167b2:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 80167b6:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80167ba:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 80167be:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 80167c2:	ee24 4a06 	vmul.f32	s8, s8, s12
 80167c6:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 80167ca:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 80167ce:	ee25 5a25 	vmul.f32	s10, s10, s11
 80167d2:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 80167d6:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80167da:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 80167de:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80167e2:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 80167e6:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 80167ea:	eee5 9a88 	vfma.f32	s19, s11, s16
 80167ee:	eeb0 8a67 	vmov.f32	s16, s15
 80167f2:	eee1 8a09 	vfma.f32	s17, s2, s18
 80167f6:	eeb0 9a67 	vmov.f32	s18, s15
 80167fa:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 80167fe:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016802:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016806:	ee75 9aa0 	vadd.f32	s19, s11, s1
 801680a:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801680e:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016812:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8016816:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 801681a:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801681e:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016822:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016826:	eea1 9a25 	vfma.f32	s18, s2, s11
 801682a:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801682e:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8016832:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016836:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801683a:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 801683e:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8016842:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8016846:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801684a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801684e:	ee31 1a20 	vadd.f32	s2, s2, s1
 8016852:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016856:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801685a:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 801685e:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016862:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016866:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 801686a:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801686e:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8016872:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016876:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801687a:	eeaa aa87 	vfma.f32	s20, s21, s14
 801687e:	ee68 aa07 	vmul.f32	s21, s16, s14
 8016882:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016886:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 801688a:	eeea 5a82 	vfma.f32	s11, s21, s4
 801688e:	eeb0 1a65 	vmov.f32	s2, s11
 8016892:	eef0 5a45 	vmov.f32	s11, s10
 8016896:	eeea 5a89 	vfma.f32	s11, s21, s18
 801689a:	eee1 5a27 	vfma.f32	s11, s2, s15
 801689e:	ee35 1a09 	vadd.f32	s2, s10, s18
 80168a2:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80168a6:	ee66 9a87 	vmul.f32	s19, s13, s14
 80168aa:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80168ae:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80168b2:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80168b6:	eee1 5a06 	vfma.f32	s11, s2, s12
 80168ba:	eeb0 1a66 	vmov.f32	s2, s13
 80168be:	eea9 1a89 	vfma.f32	s2, s19, s18
 80168c2:	eea2 1a27 	vfma.f32	s2, s4, s15
 80168c6:	ee34 2a04 	vadd.f32	s4, s8, s8
 80168ca:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 80168ce:	eeb0 2a41 	vmov.f32	s4, s2
 80168d2:	eea0 4aa7 	vfma.f32	s8, s1, s15
 80168d6:	eea4 2a06 	vfma.f32	s4, s8, s12
    if (isnan(tempy3denom))
    {
        errorCheck = 2;
    }
#endif
    if (tempy3denom == 0.0f)
 80168da:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 80168de:	eef4 5a44 	vcmp.f32	s11, s8
 80168e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 80168e6:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 80168ea:	bf14      	ite	ne
 80168ec:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 80168f0:	eddf 5a42 	vldreq	s11, [pc, #264]	; 80169fc <tDiodeFilter_tick+0x2fc>
    if (t1 == 0.0f)
 80168f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 80168f8:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 80168fc:	d069      	beq.n	80169d2 <tDiodeFilter_tick+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 80168fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016902:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8016906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801690a:	ee37 2a02 	vadd.f32	s4, s14, s4
 801690e:	d069      	beq.n	80169e4 <tDiodeFilter_tick+0x2e4>
 8016910:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016914:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8016918:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
    
    f->zi = in;
 801691c:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016920:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8016924:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8016928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 801692c:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8016930:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8016934:	bf08      	it	eq
 8016936:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 80169fc <tDiodeFilter_tick+0x2fc>
    return tanhf(y3*f->r);
 801693a:	eeb0 0a61 	vmov.f32	s0, s3
 801693e:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016942:	ee38 4a06 	vadd.f32	s8, s16, s12
 8016946:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 801694a:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 801694e:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8016952:	eea6 8a20 	vfma.f32	s16, s12, s1
 8016956:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 801695a:	ee95 8a84 	vfnms.f32	s16, s11, s8
 801695e:	eee7 1a84 	vfma.f32	s3, s15, s8
 8016962:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016966:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801696a:	ee35 2ac4 	vsub.f32	s4, s11, s8
 801696e:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016972:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016976:	ee74 1a60 	vsub.f32	s3, s8, s1
 801697a:	ee61 1a86 	vmul.f32	s3, s3, s12
 801697e:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016982:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016986:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 801698a:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801698e:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016992:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8016996:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 801699a:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 801699e:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80169a2:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80169a6:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80169aa:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80169ae:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 80169b2:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80169b6:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80169ba:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 80169be:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 80169c2:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 80169c6:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 80169ca:	ecbd 8b06 	vpop	{d8-d10}
    return tanhf(y3*f->r);
 80169ce:	f007 bb87 	b.w	801e0e0 <tanhf>
    if (t2 == 0.0f)
 80169d2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80169d6:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8016a00 <tDiodeFilter_tick+0x300>
        t1 = 0.000001f;
 80169da:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80169fc <tDiodeFilter_tick+0x2fc>
    if (t2 == 0.0f)
 80169de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80169e2:	d195      	bne.n	8016910 <tDiodeFilter_tick+0x210>
 80169e4:	eddf 5a06 	vldr	s11, [pc, #24]	; 8016a00 <tDiodeFilter_tick+0x300>
        t2 = 0.000001f;
 80169e8:	eddf 7a04 	vldr	s15, [pc, #16]	; 80169fc <tDiodeFilter_tick+0x2fc>
 80169ec:	e794      	b.n	8016918 <tDiodeFilter_tick+0x218>
 80169ee:	bf00      	nop
 80169f0:	43d20000 	.word	0x43d20000
 80169f4:	446c4000 	.word	0x446c4000
 80169f8:	42d20000 	.word	0x42d20000
 80169fc:	358637bd 	.word	0x358637bd
 8016a00:	3f800008 	.word	0x3f800008

08016a04 <tDiodeFilter_tickEfficient>:

//#define SAFE_FILTER
float   tDiodeFilter_tickEfficient               (tDiodeFilter* const vf, float in)
{
    _tDiodeFilter* f = *vf;
 8016a04:	6803      	ldr	r3, [r0, #0]
    // the input x[n+1] is given by 'in', and x[n] by zi
    // input with half delay
    float ih = 0.5f * (in + f->zi);

    // evaluate the non-linear factors
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016a06:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a0a:	ed9f 2aba 	vldr	s4, [pc, #744]	; 8016cf4 <tDiodeFilter_tickEfficient+0x2f0>
 8016a0e:	eddf 7aba 	vldr	s15, [pc, #744]	; 8016cf8 <tDiodeFilter_tickEfficient+0x2f4>
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016a12:	eddf 0aba 	vldr	s1, [pc, #744]	; 8016cfc <tDiodeFilter_tickEfficient+0x2f8>
 8016a16:	eeb0 1a67 	vmov.f32	s2, s15
{
 8016a1a:	ed2d 8b06 	vpush	{d8-d10}
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016a1e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a22:	eeb2 8a0e 	vmov.f32	s16, #46	; 0x41700000  15.0
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016a26:	edd3 1a03 	vldr	s3, [r3, #12]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a2a:	eeb0 9a42 	vmov.f32	s18, s4
    float ih = 0.5f * (in + f->zi);
 8016a2e:	edd3 4a07 	vldr	s9, [r3, #28]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a32:	eef0 9a42 	vmov.f32	s19, s4
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016a36:	ee26 7ae1 	vnmul.f32	s14, s13, s3
 8016a3a:	edd3 2a08 	vldr	s5, [r3, #32]
    float ih = 0.5f * (in + f->zi);
 8016a3e:	ee70 4a24 	vadd.f32	s9, s0, s9
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016a42:	edd3 3a0c 	vldr	s7, [r3, #48]	; 0x30
 8016a46:	ed93 3a0b 	vldr	s6, [r3, #44]	; 0x2c
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a4a:	eef0 8a67 	vmov.f32	s17, s15
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016a4e:	ed93 6a09 	vldr	s12, [r3, #36]	; 0x24
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016a52:	eea4 7a84 	vfma.f32	s14, s9, s8
 8016a56:	ed93 5a02 	vldr	s10, [r3, #8]
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a5a:	eeb0 4a42 	vmov.f32	s8, s4
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016a5e:	ee73 5ac3 	vsub.f32	s11, s7, s6
 8016a62:	ee65 5a86 	vmul.f32	s11, s11, s12
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016a66:	ee27 7a22 	vmul.f32	s14, s14, s5
 8016a6a:	ee65 2a22 	vmul.f32	s5, s10, s5
    float a = x*x;
 8016a6e:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8016a72:	ee27 7a07 	vmul.f32	s14, s14, s14
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a76:	eea7 4a08 	vfma.f32	s8, s14, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016a7a:	ee77 4a20 	vadd.f32	s9, s14, s1
 8016a7e:	eea7 1a24 	vfma.f32	s2, s14, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016a82:	eef0 4a67 	vmov.f32	s9, s15
 8016a86:	eee7 4a04 	vfma.f32	s9, s14, s8
 8016a8a:	eeb0 7a42 	vmov.f32	s14, s4
 8016a8e:	eea5 7a88 	vfma.f32	s14, s11, s16
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016a92:	ee81 4a24 	vdiv.f32	s8, s2, s9
 8016a96:	ee75 4aa0 	vadd.f32	s9, s11, s1
 8016a9a:	eeb0 1a67 	vmov.f32	s2, s15
 8016a9e:	eea5 1aa4 	vfma.f32	s2, s11, s9
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016aa2:	eef0 4a67 	vmov.f32	s9, s15
 8016aa6:	eee5 4a87 	vfma.f32	s9, s11, s14
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8016aaa:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
    float t0 = f->f*tanhXdX((ih - f->r * f->s3)*f->g0inv)*f->g0inv;
 8016aae:	ee64 2a22 	vmul.f32	s5, s8, s5
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016ab2:	ee81 7a24 	vdiv.f32	s14, s2, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016ab6:	edd3 4a0d 	vldr	s9, [r3, #52]	; 0x34
 8016aba:	ee34 1ae3 	vsub.f32	s2, s9, s7
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8016abe:	ee36 4ae4 	vsub.f32	s8, s13, s9
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016ac2:	ee21 1a06 	vmul.f32	s2, s2, s12
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8016ac6:	ee24 4a06 	vmul.f32	s8, s8, s12
 8016aca:	ee25 6a06 	vmul.f32	s12, s10, s12
    float a = x*x;
 8016ace:	ee21 1a01 	vmul.f32	s2, s2, s2
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8016ad2:	ee25 5a25 	vmul.f32	s10, s10, s11
 8016ad6:	ee66 5aa5 	vmul.f32	s11, s13, s11
    float a = x*x;
 8016ada:	ee24 4a04 	vmul.f32	s8, s8, s8
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016ade:	eea1 9a08 	vfma.f32	s18, s2, s16
    float a = x*x;
 8016ae2:	ee65 5aa5 	vmul.f32	s11, s11, s11
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016ae6:	eea4 2a08 	vfma.f32	s4, s8, s16
    float t1 = f->f*tanhXdX((f->s1-f->s0)*f->g1inv)*f->g1inv;
 8016aea:	ee27 7a06 	vmul.f32	s14, s14, s12
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016aee:	eee5 9a88 	vfma.f32	s19, s11, s16
 8016af2:	eeb0 8a67 	vmov.f32	s16, s15
 8016af6:	eee1 8a09 	vfma.f32	s17, s2, s18
 8016afa:	eeb0 9a67 	vmov.f32	s18, s15
 8016afe:	eea4 8a02 	vfma.f32	s16, s8, s4
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b02:	eeb0 2a67 	vmov.f32	s4, s15
    float testVal = ((15.0f*a + 420.0f)*a + 945.0f);
 8016b06:	eea9 9aa5 	vfma.f32	s18, s19, s11
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b0a:	ee75 9aa0 	vadd.f32	s19, s11, s1
 8016b0e:	eea5 2aa9 	vfma.f32	s4, s11, s19
    if (isnan(y3))
    {
        errorCheck = 1;
    }
#endif
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b12:	eef1 9a00 	vmov.f32	s19, #16	; 0x40800000  4.0
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b16:	eec2 5a09 	vdiv.f32	s11, s4, s18
 8016b1a:	eeb0 9a67 	vmov.f32	s18, s15
    float t4 = f->f*tanhXdX((f->s3)*f->g2inv)*f->g2inv;
 8016b1e:	ee25 5a85 	vmul.f32	s10, s11, s10
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b22:	ee71 5a20 	vadd.f32	s11, s2, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b26:	ee75 aa29 	vadd.f32	s21, s10, s19
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b2a:	eea1 9a25 	vfma.f32	s18, s2, s11
 8016b2e:	ee74 5a20 	vadd.f32	s11, s8, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b32:	eee1 aaa2 	vfma.f32	s21, s3, s5
 8016b36:	ee76 0aa3 	vadd.f32	s1, s13, s7
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b3a:	eee4 7a25 	vfma.f32	s15, s8, s11
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b3e:	ee33 1a24 	vadd.f32	s2, s6, s9
    return ((a + 105.0f)*a + 945.0f) / testVal;
 8016b42:	ee89 2a28 	vdiv.f32	s4, s18, s17
 8016b46:	eec7 5a88 	vdiv.f32	s11, s15, s16
 8016b4a:	eeb0 9a00 	vmov.f32	s18, #0	; 0x40000000  2.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b4e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b52:	ee31 1a20 	vadd.f32	s2, s2, s1
 8016b56:	ee74 0aa0 	vadd.f32	s1, s9, s1
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b5a:	ee35 8a28 	vadd.f32	s16, s10, s17
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b5e:	eea0 1a22 	vfma.f32	s2, s0, s5
    float t2 = f->f*tanhXdX((f->s2-f->s1)*f->g1inv)*f->g1inv;
 8016b62:	ee62 7a06 	vmul.f32	s15, s4, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b66:	eeb0 2a08 	vmov.f32	s4, #8	; 0x40400000  3.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b6a:	eee5 9a09 	vfma.f32	s19, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b6e:	ee36 4aa4 	vadd.f32	s8, s13, s9
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b72:	ee35 aa02 	vadd.f32	s20, s10, s4
    float t3 = f->f*tanhXdX((f->s3-f->s2)*f->g1inv)*f->g1inv;
 8016b76:	ee25 6a86 	vmul.f32	s12, s11, s12
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b7a:	eef0 5a49 	vmov.f32	s11, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b7e:	eeaa aa87 	vfma.f32	s20, s21, s14
 8016b82:	ee68 aa07 	vmul.f32	s21, s16, s14
 8016b86:	eee5 5a09 	vfma.f32	s11, s10, s18
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016b8a:	eee1 0a07 	vfma.f32	s1, s2, s14
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016b8e:	eeea 5a82 	vfma.f32	s11, s21, s4
 8016b92:	eeb0 1a65 	vmov.f32	s2, s11
 8016b96:	eef0 5a45 	vmov.f32	s11, s10
 8016b9a:	eeea 5a89 	vfma.f32	s11, s21, s18
 8016b9e:	eee1 5a27 	vfma.f32	s11, s2, s15
 8016ba2:	ee35 1a09 	vadd.f32	s2, s10, s18
 8016ba6:	eea9 1a87 	vfma.f32	s2, s19, s14
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016baa:	ee66 9a87 	vmul.f32	s19, s13, s14
 8016bae:	ee29 2a82 	vmul.f32	s4, s19, s4
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016bb2:	eeaa 1a27 	vfma.f32	s2, s20, s15
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016bb6:	eea6 2a89 	vfma.f32	s4, s13, s18
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016bba:	eee1 5a06 	vfma.f32	s11, s2, s12
 8016bbe:	eeb0 1a66 	vmov.f32	s2, s13
 8016bc2:	eea9 1a89 	vfma.f32	s2, s19, s18
 8016bc6:	eea2 1a27 	vfma.f32	s2, s4, s15
 8016bca:	ee34 2a04 	vadd.f32	s4, s8, s8
 8016bce:	eea7 4a02 	vfma.f32	s8, s14, s4
    float y3 = (f->s2 + f->s3 + t2*(f->s1 + f->s2 + f->s3 + t1*(f->s0 + f->s1 + f->s2 + f->s3 + t0*in)) + t1*(2.0f*f->s2 + 2.0f*f->s3))*t3 + f->s3 + 2.0f*f->s3*t1 + t2*(2.0f*f->s3 + 3.0f*f->s3*t1);
 8016bd2:	eeb0 2a41 	vmov.f32	s4, s2
 8016bd6:	eea0 4aa7 	vfma.f32	s8, s1, s15
 8016bda:	eea4 2a06 	vfma.f32	s4, s8, s12
    {
        errorCheck = 2;
    }

#endif
    if (tempy3denom == 0.0f)
 8016bde:	eebf 4a00 	vmov.f32	s8, #240	; 0xbf800000 -1.0
 8016be2:	eef4 5a44 	vcmp.f32	s11, s8
 8016be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (isnan(y3))
    {
        errorCheck = 3;
    }
#endif
    if (t1 == 0.0f)
 8016bea:	eeb5 7a40 	vcmp.f32	s14, #0.0
    float tempy3denom = (t4 + t1*(2.0f*t4 + 4.0f) + t2*(t4 + t1*(t4 + f->r*t0 + 4.0f) + 3.0f) + 2.0f)*t3 + t4 + t1*(2.0f*t4 + 2.0f) + t2*(2.0f*t4 + t1*(3.0f*t4 + 3.0f) + 2.0f) + 1.0f;
 8016bee:	bf14      	ite	ne
 8016bf0:	ee75 5aa8 	vaddne.f32	s11, s11, s17
        tempy3denom = 0.000001f;
 8016bf4:	eddf 5a42 	vldreq	s11, [pc, #264]	; 8016d00 <tDiodeFilter_tickEfficient+0x2fc>
    if (t1 == 0.0f)
 8016bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    y3 = y3 / tempy3denom;
 8016bfc:	eec2 0a25 	vdiv.f32	s1, s4, s11
    if (t1 == 0.0f)
 8016c00:	d069      	beq.n	8016cd6 <tDiodeFilter_tickEfficient+0x2d2>
    {
        t1 = 0.000001f;
    }
    if (t2 == 0.0f)
 8016c02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016c06:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 8016c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016c0e:	ee37 2a02 	vadd.f32	s4, s14, s4
 8016c12:	d069      	beq.n	8016ce8 <tDiodeFilter_tickEfficient+0x2e4>
 8016c14:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8016c18:	ee77 5aa5 	vadd.f32	s11, s15, s11
    {
        t2 = 0.000001f;
    }
    if (t3 == 0.0f)
 8016c1c:	eeb5 6a40 	vcmp.f32	s12, #0.0
#endif
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));

    f->zi = in;
 8016c20:	ed83 0a07 	vstr	s0, [r3, #28]
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016c24:	eef0 8a66 	vmov.f32	s17, s13
    float xx = (in - f->r*y3);
 8016c28:	ee61 1aa0 	vmul.f32	s3, s3, s1
    if (t3 == 0.0f)
 8016c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016c30:	ee37 2a82 	vadd.f32	s4, s15, s4
    float xx = (in - f->r*y3);
 8016c34:	ee30 1a61 	vsub.f32	s2, s0, s3
        t3 = 0.000001f;
 8016c38:	bf08      	it	eq
 8016c3a:	ed9f 6a31 	vldreq	s12, [pc, #196]	; 8016d00 <tDiodeFilter_tickEfficient+0x2fc>
    return LEAF_tanh(y3*f->r);
 8016c3e:	eeb0 0a61 	vmov.f32	s0, s3
 8016c42:	eef0 1a63 	vmov.f32	s3, s7
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016c46:	ee38 4a06 	vadd.f32	s8, s16, s12
 8016c4a:	eeb0 8a64 	vmov.f32	s16, s9
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8016c4e:	ee76 5a25 	vadd.f32	s11, s12, s11
    float y2 = (f->s3 - (1+t4+t3)*y3) / (-t3);
 8016c52:	eed4 8a20 	vfnms.f32	s17, s8, s1
 8016c56:	eea6 8a20 	vfma.f32	s16, s12, s1
 8016c5a:	ee88 4a86 	vdiv.f32	s8, s17, s12
    float y1 = (f->s2 - (1+t3+t2)*y2 + t3*y3) / (-t2);
 8016c5e:	ee95 8a84 	vfnms.f32	s16, s11, s8
 8016c62:	eee7 1a84 	vfma.f32	s3, s15, s8
 8016c66:	eec8 5a27 	vdiv.f32	s11, s16, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016c6a:	eed2 1a25 	vfnms.f32	s3, s4, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016c6e:	ee35 2ac4 	vsub.f32	s4, s11, s8
 8016c72:	ee22 2a27 	vmul.f32	s4, s4, s15
    float y0 = (f->s1 - (1+t2+t1)*y1 + t2*y2) / (-t1);
 8016c76:	ee81 8a87 	vdiv.f32	s16, s3, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016c7a:	ee74 1a60 	vsub.f32	s3, s8, s1
 8016c7e:	ee61 1a86 	vmul.f32	s3, s3, s12
 8016c82:	eee5 1a60 	vfms.f32	s3, s10, s1
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016c86:	ee30 5ac4 	vsub.f32	s10, s1, s8
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016c8a:	ee34 4a65 	vsub.f32	s8, s8, s11
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016c8e:	eea5 2a06 	vfma.f32	s4, s10, s12
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016c92:	ee38 6a65 	vsub.f32	s12, s16, s11
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016c96:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8016c9a:	eeb0 5a00 	vmov.f32	s10, #0	; 0x40000000  2.0
 8016c9e:	ee65 5a87 	vmul.f32	s11, s11, s14
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016ca2:	ee26 7a07 	vmul.f32	s14, s12, s14
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016ca6:	eee1 6a85 	vfma.f32	s13, s3, s10
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016caa:	eee2 5a81 	vfma.f32	s11, s5, s2
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016cae:	eea4 7a27 	vfma.f32	s14, s8, s15
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016cb2:	eee2 4a05 	vfma.f32	s9, s4, s10
    f->s3 += 2.0f * (-t4*(y3) - t3*(y3-y2));
 8016cb6:	edc3 6a0e 	vstr	s13, [r3, #56]	; 0x38
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016cba:	eea5 3a85 	vfma.f32	s6, s11, s10
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016cbe:	eee7 3a05 	vfma.f32	s7, s14, s10
    f->s2 += 2.0f * (t3*(y3-y2) - t2*(y2-y1));
 8016cc2:	edc3 4a0d 	vstr	s9, [r3, #52]	; 0x34
    f->s0 += 2.0f * (t0*xx + t1*(y1-y0));
 8016cc6:	ed83 3a0b 	vstr	s6, [r3, #44]	; 0x2c
    f->s1 += 2.0f * (t2*(y2-y1) - t1*(y1-y0));
 8016cca:	edc3 3a0c 	vstr	s7, [r3, #48]	; 0x30
}
 8016cce:	ecbd 8b06 	vpop	{d8-d10}
    return LEAF_tanh(y3*f->r);
 8016cd2:	f000 bad1 	b.w	8017278 <LEAF_tanh>
    if (t2 == 0.0f)
 8016cd6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8016cda:	ed9f 2a0a 	vldr	s4, [pc, #40]	; 8016d04 <tDiodeFilter_tickEfficient+0x300>
        t1 = 0.000001f;
 8016cde:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8016d00 <tDiodeFilter_tickEfficient+0x2fc>
    if (t2 == 0.0f)
 8016ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016ce6:	d195      	bne.n	8016c14 <tDiodeFilter_tickEfficient+0x210>
 8016ce8:	eddf 5a06 	vldr	s11, [pc, #24]	; 8016d04 <tDiodeFilter_tickEfficient+0x300>
        t2 = 0.000001f;
 8016cec:	eddf 7a04 	vldr	s15, [pc, #16]	; 8016d00 <tDiodeFilter_tickEfficient+0x2fc>
 8016cf0:	e794      	b.n	8016c1c <tDiodeFilter_tickEfficient+0x218>
 8016cf2:	bf00      	nop
 8016cf4:	43d20000 	.word	0x43d20000
 8016cf8:	446c4000 	.word	0x446c4000
 8016cfc:	42d20000 	.word	0x42d20000
 8016d00:	358637bd 	.word	0x358637bd
 8016d04:	3f800008 	.word	0x3f800008

08016d08 <tDiodeFilter_setFreqFast>:
}

void    tDiodeFilter_setFreqFast     (tDiodeFilter* const vf, float cutoff)
{
	_tDiodeFilter* f = *vf;
    int intVer = (int)cutoff;
 8016d08:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016d0c:	4b0d      	ldr	r3, [pc, #52]	; (8016d44 <tDiodeFilter_setFreqFast+0x3c>)
 8016d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tDiodeFilter* f = *vf;
 8016d12:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8016d14:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8016d18:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016d1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8016d20:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8016d24:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->f = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8016d28:	edd0 6a01 	vldr	s13, [r0, #4]
 8016d2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8016d30:	ed90 7a00 	vldr	s14, [r0]
 8016d34:	ee20 0a26 	vmul.f32	s0, s0, s13
 8016d38:	eea7 0a27 	vfma.f32	s0, s14, s15
 8016d3c:	ed81 0a02 	vstr	s0, [r1, #8]
}
 8016d40:	4770      	bx	lr
 8016d42:	bf00      	nop
 8016d44:	0801fef4 	.word	0x0801fef4

08016d48 <tDiodeFilter_setQ>:

void    tDiodeFilter_setQ     (tDiodeFilter* const vf, float resonance)
{
    _tDiodeFilter* f = *vf;
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8016d48:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8016d4c:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 8016d50:	eeb2 1a00 	vmov.f32	s2, #32	; 0x41000000  8.0
 8016d54:	eef0 0a67 	vmov.f32	s1, s15
{
 8016d58:	b510      	push	{r4, lr}
    _tDiodeFilter* f = *vf;
 8016d5a:	6804      	ldr	r4, [r0, #0]
    f->r = LEAF_clip(0.5f, (7.0f * resonance + 0.5f), 8.0f);
 8016d5c:	eee0 0a07 	vfma.f32	s1, s0, s14
 8016d60:	eeb0 0a67 	vmov.f32	s0, s15
 8016d64:	f000 fa74 	bl	8017250 <LEAF_clip>
 8016d68:	ed84 0a03 	vstr	s0, [r4, #12]
}
 8016d6c:	bd10      	pop	{r4, pc}
 8016d6e:	bf00      	nop

08016d70 <tLadderFilter_init>:
    f->f = tanf(PI * f->cutoff * f->invSampleRate);
}


void    tLadderFilter_init           (tLadderFilter* const vf, float cutoff, float resonance, LEAF* const leaf)
{
 8016d70:	b570      	push	{r4, r5, r6, lr}
 8016d72:	ed2d 8b02 	vpush	{d8}
    tLadderFilter_initToPool(vf, cutoff, resonance, &leaf->mempool);
}

void    tLadderFilter_initToPool     (tLadderFilter* const vf, float cutoff, float resonance, tMempool* const mp)
{
    _tMempool* m = *mp;
 8016d76:	698d      	ldr	r5, [r1, #24]
{
 8016d78:	eef0 8a40 	vmov.f32	s17, s0
 8016d7c:	4606      	mov	r6, r0
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8016d7e:	2038      	movs	r0, #56	; 0x38
 8016d80:	4629      	mov	r1, r5
{
 8016d82:	eeb0 8a60 	vmov.f32	s16, s1
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8016d86:	f000 fc53 	bl	8017630 <mpool_alloc>
    LEAF* leaf = f->mempool->leaf;
    
    f->invSampleRate = leaf->invSampleRate;
    f->cutoff = cutoff;
    f->oversampling = 1;
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016d8a:	eddf 7a18 	vldr	s15, [pc, #96]	; 8016dec <tLadderFilter_init+0x7c>
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8016d8e:	6030      	str	r0, [r6, #0]
    f->oversampling = 1;
 8016d90:	2301      	movs	r3, #1
    f->mempool = m;
 8016d92:	6005      	str	r5, [r0, #0]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016d94:	ee68 7aa7 	vmul.f32	s15, s17, s15
    f->invSampleRate = leaf->invSampleRate;
 8016d98:	686a      	ldr	r2, [r5, #4]
    _tLadderFilter* f = *vf = (_tLadderFilter*) mpool_alloc(sizeof(_tLadderFilter), m);
 8016d9a:	4604      	mov	r4, r0
    f->invSampleRate = leaf->invSampleRate;
 8016d9c:	ed92 7a01 	vldr	s14, [r2, #4]
    f->cutoff = cutoff;
 8016da0:	edc0 8a01 	vstr	s17, [r0, #4]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016da4:	ee27 0a87 	vmul.f32	s0, s15, s14
    f->oversampling = 1;
 8016da8:	60c3      	str	r3, [r0, #12]
    f->invSampleRate = leaf->invSampleRate;
 8016daa:	ed80 7a02 	vstr	s14, [r0, #8]
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016dae:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 8016db2:	f006 fe35 	bl	801da20 <tan>
 8016db6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    f->c2 = 2.0f * f->c;
    //resonance / feedback is from 0 to 4 for 100%, further "drives" feedback
    f->fb = (resonance * 8.0f);
 8016dba:	eef2 0a00 	vmov.f32	s1, #32	; 0x41000000  8.0

    // shaper coefficients, offset, scale, shape
    // very quick approximation, close enough for me to tanh
    // yet far more flexible
    f->a = 2.0f;
 8016dbe:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    f->s = 0.1f;
    f->d = 1.0f;
 8016dc2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    f->s = 0.1f;
 8016dc6:	490a      	ldr	r1, [pc, #40]	; (8016df0 <tLadderFilter_init+0x80>)
    f->c2 = 2.0f * f->c;
 8016dc8:	ee70 7a00 	vadd.f32	s15, s0, s0
    
    
    f->b[0] = 0.01f;
    f->b[0] = 0.02f;
    f->b[0] = 0.03f;
    f->b[0] = 0.04f;
 8016dcc:	4b09      	ldr	r3, [pc, #36]	; (8016df4 <tLadderFilter_init+0x84>)
    f->fb = (resonance * 8.0f);
 8016dce:	ee28 8a20 	vmul.f32	s16, s16, s1
    f->c = (float)tan((double)(PI * (cutoff/(float)f->oversampling)* f->invSampleRate));
 8016dd2:	ed84 0a04 	vstr	s0, [r4, #16]
    f->a = 2.0f;
 8016dd6:	61e0      	str	r0, [r4, #28]
    f->s = 0.1f;
 8016dd8:	6221      	str	r1, [r4, #32]
    f->d = 1.0f;
 8016dda:	6262      	str	r2, [r4, #36]	; 0x24
    f->c2 = 2.0f * f->c;
 8016ddc:	edc4 7a06 	vstr	s15, [r4, #24]
    f->fb = (resonance * 8.0f);
 8016de0:	ed84 8a05 	vstr	s16, [r4, #20]
    f->b[0] = 0.04f;
 8016de4:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8016de6:	ecbd 8b02 	vpop	{d8}
 8016dea:	bd70      	pop	{r4, r5, r6, pc}
 8016dec:	40490fdb 	.word	0x40490fdb
 8016df0:	3dcccccd 	.word	0x3dcccccd
 8016df4:	3d23d70a 	.word	0x3d23d70a

08016df8 <tLadderFilter_tick>:
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
}

float   tLadderFilter_tick               (tLadderFilter* const vf, float in)
{
    _tLadderFilter* f = *vf;
 8016df8:	6802      	ldr	r2, [r0, #0]
    
    float y3 = 0.0f;
    in += 0.015f;
 8016dfa:	eddf 7a8f 	vldr	s15, [pc, #572]	; 8017038 <tLadderFilter_tick+0x240>
{
 8016dfe:	ed2d 8b10 	vpush	{d8-d15}
    // per-sample computation
    for (int i = 0; i < f->oversampling; i++) {
 8016e02:	68d1      	ldr	r1, [r2, #12]
    in += 0.015f;
 8016e04:	ee30 0a27 	vadd.f32	s0, s0, s15
    for (int i = 0; i < f->oversampling; i++) {
 8016e08:	2900      	cmp	r1, #0
 8016e0a:	f340 8110 	ble.w	801702e <tLadderFilter_tick+0x236>
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016e0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
        
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016e12:	ed92 5a04 	vldr	s10, [r2, #16]
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8016e16:	ed92 2a09 	vldr	s4, [r2, #36]	; 0x24
    float  x2 = smoothABS (x-b, 0.01f);
 8016e1a:	eebf aa00 	vmov.f32	s20, #240	; 0xbf800000 -1.0
        float z1 = f->c*t1 / (1.0f + f->c*t1);
        float z2 = f->c*t2 / (1.0f + f->c*t2);
        float z3 = f->c*t3 / (1.0f + f->c*t3);
        
        float f3 = f->c       * t2*g3;
        float f2 = f->c*f->c     * t1*g2 * t2*g3;
 8016e1e:	ee65 8a05 	vmul.f32	s17, s10, s10
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016e22:	ed92 7a08 	vldr	s14, [r2, #32]
 8016e26:	ee72 2a27 	vadd.f32	s5, s4, s15
 8016e2a:	ed92 3a0a 	vldr	s6, [r2, #40]	; 0x28
        float estimate =
        g3 * f->b[3] +
        f3 * g2 * f->b[2] +
        f2 * g1 * f->b[1] +
        f1 * g0 * f->b[0] +
        f0 * in;
 8016e2e:	ee65 aa00 	vmul.f32	s21, s10, s0
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8016e32:	ed92 1a07 	vldr	s2, [r2, #28]
        // i believe in the original this is computed incorrectly?
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
        
        // clamp can be a hard clip, a diode + highpass is better
        // if you implement a highpass do not forget to include it in the computation of the gain coefficients!
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8016e36:	eef6 9a00 	vmov.f32	s19, #96	; 0x3f000000  0.5
 8016e3a:	edd2 3a0b 	vldr	s7, [r2, #44]	; 0x2c
        float f1 = f->c*f->c*f->c   * t0*g1 * t1*g2 * t2*g3;
 8016e3e:	ee25 9a28 	vmul.f32	s18, s10, s17
 8016e42:	ed92 4a0c 	vldr	s8, [r2, #48]	; 0x30
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016e46:	ee62 2a87 	vmul.f32	s5, s5, s14
 8016e4a:	edd2 4a0d 	vldr	s9, [r2, #52]	; 0x34
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016e4e:	edd2 0a05 	vldr	s1, [r2, #20]
    for (int i = 0; i < f->oversampling; i++) {
 8016e52:	2300      	movs	r3, #0
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
        
        // update the stored state
        f->b[0] += f->c2 * (xx - y0);
 8016e54:	edd2 1a06 	vldr	s3, [r2, #24]
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016e58:	ed9f 8a78 	vldr	s16, [pc, #480]	; 801703c <tLadderFilter_tick+0x244>
        float t0 = tanhd(f->b[0] + f->a, f->d, f->s);
 8016e5c:	ee71 5a03 	vadd.f32	s11, s2, s6
    for (int i = 0; i < f->oversampling; i++) {
 8016e60:	3301      	adds	r3, #1
        float t1 = tanhd(f->b[1] + f->a, f->d, f->s);
 8016e62:	ee31 6a23 	vadd.f32	s12, s2, s7
        float t2 = tanhd(f->b[2] + f->a, f->d, f->s);
 8016e66:	ee71 6a04 	vadd.f32	s13, s2, s8
    for (int i = 0; i < f->oversampling; i++) {
 8016e6a:	428b      	cmp	r3, r1
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016e6c:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8016e70:	ee26 6a06 	vmul.f32	s12, s12, s12
 8016e74:	ee66 6aa6 	vmul.f32	s13, s13, s13
 8016e78:	ee22 baa5 	vmul.f32	s22, s5, s11
 8016e7c:	ee26 ca22 	vmul.f32	s24, s12, s5
 8016e80:	ee72 5a25 	vadd.f32	s11, s4, s11
 8016e84:	ee32 6a06 	vadd.f32	s12, s4, s12
 8016e88:	ee66 baa2 	vmul.f32	s23, s13, s5
 8016e8c:	eecb ea25 	vdiv.f32	s29, s22, s11
 8016e90:	ee8c ba06 	vdiv.f32	s22, s24, s12
 8016e94:	ee72 6a26 	vadd.f32	s13, s4, s13
        float t3 = tanhd(f->b[3] + f->a, f->d, f->s);
 8016e98:	ee31 7a24 	vadd.f32	s14, s2, s9
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016e9c:	ee8b 6aa6 	vdiv.f32	s12, s23, s13
 8016ea0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8016ea4:	ee77 eaee 	vsub.f32	s29, s15, s29
 8016ea8:	ee77 6acb 	vsub.f32	s13, s15, s22
 8016eac:	ee62 5a87 	vmul.f32	s11, s5, s14
 8016eb0:	ee32 7a07 	vadd.f32	s14, s4, s14
        float g1 = 1.0f / (1.0f + f->c*t1);
 8016eb4:	ee25 ea26 	vmul.f32	s28, s10, s13
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016eb8:	ee85 ca87 	vdiv.f32	s24, s11, s14
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016ebc:	ee65 5a2e 	vmul.f32	s11, s10, s29
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016ec0:	ee37 7ac6 	vsub.f32	s14, s15, s12
        float g1 = 1.0f / (1.0f + f->c*t1);
 8016ec4:	ee3e da27 	vadd.f32	s26, s28, s15
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016ec8:	ee35 6aa7 	vadd.f32	s12, s11, s15
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016ecc:	ee65 ca07 	vmul.f32	s25, s10, s14
        float z0 = f->c*t0 / (1.0f + f->c*t0);
 8016ed0:	eec5 ba86 	vdiv.f32	s23, s11, s12
        float z1 = f->c*t1 / (1.0f + f->c*t1);
 8016ed4:	eece 5a0d 	vdiv.f32	s11, s28, s26
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016ed8:	ee7c daa7 	vadd.f32	s27, s25, s15
    return 1.0f - s * (d + 1.0f) * x*x / (d + x*x);
 8016edc:	ee37 cacc 	vsub.f32	s24, s15, s24
        float g0 = 1.0f / (1.0f + f->c*t0);
 8016ee0:	ee87 fa86 	vdiv.f32	s30, s15, s12
        float z2 = f->c*t2 / (1.0f + f->c*t2);
 8016ee4:	ee8c eaad 	vdiv.f32	s28, s25, s27
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016ee8:	ee25 ba0c 	vmul.f32	s22, s10, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016eec:	ee6b baa5 	vmul.f32	s23, s23, s11
        float g1 = 1.0f / (1.0f + f->c*t1);
 8016ef0:	ee87 6a8d 	vdiv.f32	s12, s15, s26
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016ef4:	ee7b 5a27 	vadd.f32	s11, s22, s15
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016ef8:	ee6b baa0 	vmul.f32	s23, s23, s1
        float g2 = 1.0f / (1.0f + f->c*t2);
 8016efc:	ee87 daad 	vdiv.f32	s26, s15, s27
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016f00:	ee6b ba8e 	vmul.f32	s23, s23, s28
        float z3 = f->c*t3 / (1.0f + f->c*t3);
 8016f04:	eecb da25 	vdiv.f32	s27, s22, s11
        float g3 = 1.0f / (1.0f + f->c*t3);
 8016f08:	ee87 eaa5 	vdiv.f32	s28, s15, s11
        float estimate =
 8016f0c:	ee73 5a2a 	vadd.f32	s11, s6, s21
 8016f10:	ee27 ba26 	vmul.f32	s22, s14, s13
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016f14:	ee66 6a26 	vmul.f32	s13, s12, s13
 8016f18:	ee65 5a89 	vmul.f32	s11, s11, s18
 8016f1c:	ee2b ba06 	vmul.f32	s22, s22, s12
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8016f20:	ee2f 6a2e 	vmul.f32	s12, s30, s29
 8016f24:	ee65 5aae 	vmul.f32	s11, s11, s29
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016f28:	ee2d 7a07 	vmul.f32	s14, s26, s14
 8016f2c:	ee65 5a8f 	vmul.f32	s11, s11, s30
 8016f30:	ee60 ea8e 	vmul.f32	s29, s1, s28
 8016f34:	eee3 5aa8 	vfma.f32	s11, s7, s17
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016f38:	ee2e ca0c 	vmul.f32	s24, s28, s24
        float cgfbr = 1.0f / (1.0f + f->fb * z0*z1*z2*z3);
 8016f3c:	eeb0 ea67 	vmov.f32	s28, s15
 8016f40:	eeab eaad 	vfma.f32	s28, s23, s27
 8016f44:	ee6b 5a25 	vmul.f32	s11, s22, s11
    float  x1 = smoothABS (x-a, 0.01f);
 8016f48:	eeb0 ba67 	vmov.f32	s22, s15
 8016f4c:	eeec 5a84 	vfma.f32	s11, s25, s8
 8016f50:	eef0 ca64 	vmov.f32	s25, s9
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8016f54:	eec9 ba8e 	vdiv.f32	s23, s19, s28
 8016f58:	eeed ca25 	vfma.f32	s25, s26, s11
    float  x2 = smoothABS (x-b, 0.01f);
 8016f5c:	eef0 5a4a 	vmov.f32	s11, s20
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016f60:	eeb0 da48 	vmov.f32	s26, s16
    float  x1 = smoothABS (x-a, 0.01f);
 8016f64:	eeac baae 	vfma.f32	s22, s25, s29
    float  x2 = smoothABS (x-b, 0.01f);
 8016f68:	eeec 5aae 	vfma.f32	s11, s25, s29
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016f6c:	eef0 ca48 	vmov.f32	s25, s16
 8016f70:	eeab da0b 	vfma.f32	s26, s22, s22
 8016f74:	eee5 caa5 	vfma.f32	s25, s11, s11
 8016f78:	eef1 5acd 	vsqrt.f32	s11, s26
 8016f7c:	eeb1 baec 	vsqrt.f32	s22, s25
        float xx = in - smoothclip(f->fb * estimate, -1.0f, 1.0f) * cgfbr;
 8016f80:	ee3b ba65 	vsub.f32	s22, s22, s11
 8016f84:	eef0 5a40 	vmov.f32	s11, s0
 8016f88:	eeeb 5a2b 	vfma.f32	s11, s22, s23
        float y0 = t0 * g0 * (f->b[0] + f->c * xx);
 8016f8c:	eeb0 ba43 	vmov.f32	s22, s6
 8016f90:	eea5 ba25 	vfma.f32	s22, s10, s11
 8016f94:	ee26 6a0b 	vmul.f32	s12, s12, s22
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016f98:	eeb0 ba63 	vmov.f32	s22, s7
        f->b[0] += f->c2 * (xx - y0);
 8016f9c:	ee75 5ac6 	vsub.f32	s11, s11, s12
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016fa0:	eea5 ba06 	vfma.f32	s22, s10, s12
        f->b[0] += f->c2 * (xx - y0);
 8016fa4:	eea1 3aa5 	vfma.f32	s6, s3, s11
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016fa8:	eef0 5a44 	vmov.f32	s11, s8
        float y1 = t1 * g1 * (f->b[1] + f->c * y0);
 8016fac:	ee66 6a8b 	vmul.f32	s13, s13, s22
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016fb0:	eee5 5a26 	vfma.f32	s11, s10, s13
        f->b[1] += f->c2 * (y0 - y1);
 8016fb4:	ee36 6a66 	vsub.f32	s12, s12, s13
 8016fb8:	eee1 3a86 	vfma.f32	s7, s3, s12
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016fbc:	eeb0 6a64 	vmov.f32	s12, s9
        float y2 = t2 * g2 * (f->b[2] + f->c * y1);
 8016fc0:	ee27 7a25 	vmul.f32	s14, s14, s11
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016fc4:	eea5 6a07 	vfma.f32	s12, s10, s14
        f->b[2] += f->c2 * (y1 - y2);
 8016fc8:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8016fcc:	eea1 4aa6 	vfma.f32	s8, s3, s13
        y3 = t3 * g3 * (f->b[3] + f->c * y2);
 8016fd0:	ee2c ca06 	vmul.f32	s24, s24, s12
        f->b[3] += f->c2 * (y2 - y3);
 8016fd4:	ee37 7a4c 	vsub.f32	s14, s14, s24
 8016fd8:	eee1 4a87 	vfma.f32	s9, s3, s14
    for (int i = 0; i < f->oversampling; i++) {
 8016fdc:	f47f af3e 	bne.w	8016e5c <tLadderFilter_tick+0x64>
 8016fe0:	ed82 3a0a 	vstr	s6, [r2, #40]	; 0x28
 8016fe4:	edc2 3a0b 	vstr	s7, [r2, #44]	; 0x2c
 8016fe8:	ed82 4a0c 	vstr	s8, [r2, #48]	; 0x30
 8016fec:	edc2 4a0d 	vstr	s9, [r2, #52]	; 0x34
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016ff0:	ed9f 7a12 	vldr	s14, [pc, #72]	; 801703c <tLadderFilter_tick+0x244>
    float  x2 = smoothABS (x-b, 0.01f);
 8016ff4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
    }
    
    // you must limit the compensation if feedback is clamped
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8016ff8:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8016ffc:	eef0 5a47 	vmov.f32	s11, s14
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8017000:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 8017004:	eee0 5aa0 	vfma.f32	s11, s1, s1
    float  x2 = smoothABS (x-b, 0.01f);
 8017008:	ee70 0ae6 	vsub.f32	s1, s1, s13
		return (sqrtf((x * x)  + y)) - sqrtf(y);
 801700c:	eea0 7aa0 	vfma.f32	s14, s1, s1
 8017010:	eef1 7ae5 	vsqrt.f32	s15, s11
 8017014:	eef1 5ac7 	vsqrt.f32	s11, s14
    x = x - x2;
 8017018:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801701c:	ee77 7ae5 	vsub.f32	s15, s15, s11
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 8017020:	eea7 0a86 	vfma.f32	s0, s15, s12
    return y3 * compensation;
}
 8017024:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8017028:	ecbd 8b10 	vpop	{d8-d15}
 801702c:	4770      	bx	lr
    float compensation = 1.0f + smoothclip(f->fb, 0.0f, 4.0f);
 801702e:	edd2 0a05 	vldr	s1, [r2, #20]
    float y3 = 0.0f;
 8017032:	ed9f ca03 	vldr	s24, [pc, #12]	; 8017040 <tLadderFilter_tick+0x248>
 8017036:	e7db      	b.n	8016ff0 <tLadderFilter_tick+0x1f8>
 8017038:	3c75c28f 	.word	0x3c75c28f
 801703c:	3c23d70a 	.word	0x3c23d70a
 8017040:	00000000 	.word	0x00000000

08017044 <tLadderFilter_setFreqFast>:
}

void    tLadderFilter_setFreqFast     (tLadderFilter* const vf, float cutoff)
{
    _tLadderFilter* f = *vf;
    int intVer = (int)cutoff;
 8017044:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    float floatVer = cutoff - (float)intVer;

    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8017048:	4b0f      	ldr	r3, [pc, #60]	; (8017088 <tLadderFilter_setFreqFast+0x44>)
 801704a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tLadderFilter* f = *vf;
 801704e:	6801      	ldr	r1, [r0, #0]
    int intVer = (int)cutoff;
 8017050:	ee17 2a10 	vmov	r2, s14
    float floatVer = cutoff - (float)intVer;
 8017054:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8017058:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801705c:	eb03 0082 	add.w	r0, r3, r2, lsl #2
    float floatVer = cutoff - (float)intVer;
 8017060:	ee30 0a47 	vsub.f32	s0, s0, s14
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 8017064:	edd0 6a01 	vldr	s13, [r0, #4]
 8017068:	ee77 7a87 	vadd.f32	s15, s15, s14
 801706c:	ed90 7a00 	vldr	s14, [r0]
 8017070:	ee20 0a26 	vmul.f32	s0, s0, s13
 8017074:	eea7 0a27 	vfma.f32	s0, s14, s15
    f->c2 = 2.0f * f->c;
 8017078:	ee70 7a00 	vadd.f32	s15, s0, s0
    f->c = (__leaf_table_filtertan[intVer] * (1.0f - floatVer)) + (__leaf_table_filtertan[intVer+1] * floatVer);
 801707c:	ed81 0a04 	vstr	s0, [r1, #16]
    f->c2 = 2.0f * f->c;
 8017080:	edc1 7a06 	vstr	s15, [r1, #24]
}
 8017084:	4770      	bx	lr
 8017086:	bf00      	nop
 8017088:	0801fef4 	.word	0x0801fef4

0801708c <tLadderFilter_setQ>:

void    tLadderFilter_setQ     (tLadderFilter* const vf, float resonance)
{
 801708c:	b510      	push	{r4, lr}
    _tLadderFilter* f = *vf;
 801708e:	6804      	ldr	r4, [r0, #0]
{
 8017090:	eef0 0a40 	vmov.f32	s1, s0
    f->fb = LEAF_clip(0.2f, resonance, 24.0f);
 8017094:	eeb3 1a08 	vmov.f32	s2, #56	; 0x41c00000  24.0
 8017098:	ed9f 0a03 	vldr	s0, [pc, #12]	; 80170a8 <tLadderFilter_setQ+0x1c>
 801709c:	f000 f8d8 	bl	8017250 <LEAF_clip>
 80170a0:	ed84 0a05 	vstr	s0, [r4, #20]
}
 80170a4:	bd10      	pop	{r4, pc}
 80170a6:	bf00      	nop
 80170a8:	3e4ccccd 	.word	0x3e4ccccd

080170ac <fastertanf>:
    return fResult;
}

float fastertanf(float fAngle)
{
    float fASqr = fAngle*fAngle;
 80170ac:	ee60 6a00 	vmul.f32	s13, s0, s0
    float fResult = 2.033e-01f;
    fResult *= fASqr;
    fResult += 3.1755e-01f;
 80170b0:	ed9f 6a06 	vldr	s12, [pc, #24]	; 80170cc <fastertanf+0x20>
 80170b4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80170d0 <fastertanf+0x24>
    fResult *= fASqr;
    fResult += 1.0f;
 80170b8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    fResult += 3.1755e-01f;
 80170bc:	eea6 7a86 	vfma.f32	s14, s13, s12
    fResult += 1.0f;
 80170c0:	eee6 7a87 	vfma.f32	s15, s13, s14
    fResult *= fAngle;
    return fResult;
}
 80170c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80170c8:	4770      	bx	lr
 80170ca:	bf00      	nop
 80170cc:	3e502de0 	.word	0x3e502de0
 80170d0:	3ea295ea 	.word	0x3ea295ea

080170d4 <fastsqrtf>:
// from Heng Li, a combination of inverse square root (see wiki) and inversion: https://bits.stephan-brumme.com/inverse.html
float fastsqrtf(float x)
{
	union { float f; uint32_t i; } z = { x };
	z.i  = 0x5f3759df - (z.i >> 1);
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80170d4:	ee10 2a10 	vmov	r2, s0
 80170d8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
	z.i  = 0x5f3759df - (z.i >> 1);
 80170dc:	4b0d      	ldr	r3, [pc, #52]	; (8017114 <fastsqrtf+0x40>)
	z.f *= (1.5f - (x * 0.5f * z.f * z.f));
 80170de:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 80170e2:	eba3 0352 	sub.w	r3, r3, r2, lsr #1
 80170e6:	ee60 7a27 	vmul.f32	s15, s0, s15
 80170ea:	ee00 3a10 	vmov	s0, r3
 80170ee:	ee67 7a80 	vmul.f32	s15, s15, s0
 80170f2:	eea0 7a67 	vfms.f32	s14, s0, s15
 80170f6:	ee20 0a07 	vmul.f32	s0, s0, s14
	z.i = 0x7EEEEEEE - z.i;
	return z.f;
 80170fa:	ee10 3a10 	vmov	r3, s0
 80170fe:	f1c3 43fd 	rsb	r3, r3, #2122317824	; 0x7e800000
 8017102:	f503 03dd 	add.w	r3, r3, #7241728	; 0x6e8000
 8017106:	f503 43dd 	add.w	r3, r3, #28288	; 0x6e80
 801710a:	336e      	adds	r3, #110	; 0x6e
}
 801710c:	ee00 3a10 	vmov	s0, r3
 8017110:	4770      	bx	lr
 8017112:	bf00      	nop
 8017114:	5f3759df 	.word	0x5f3759df

08017118 <fastabsf>:
        unsigned int ui;
    }alias;
    
    alias.f = f;
    alias.ui &= 0x7fffffff;
    return alias.f;
 8017118:	ee10 3a10 	vmov	r3, s0
 801711c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017120:	ee00 3a10 	vmov	s0, r3
}
 8017124:	4770      	bx	lr
 8017126:	bf00      	nop

08017128 <fasterexpf>:
    x *= x; x *= x; x *= x; x *= x;
    return x;
}

inline float fasterexpf(float x) {
    x = 1.0f + (x * 0.00390625f);
 8017128:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801712c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8017158 <fasterexpf+0x30>
 8017130:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 8017134:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8017138:	ee20 0a00 	vmul.f32	s0, s0, s0
 801713c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017140:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 8017144:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017148:	ee20 0a00 	vmul.f32	s0, s0, s0
 801714c:	ee20 0a00 	vmul.f32	s0, s0, s0
    return x;
}
 8017150:	ee20 0a00 	vmul.f32	s0, s0, s0
 8017154:	4770      	bx	lr
 8017156:	bf00      	nop
 8017158:	3b800000 	.word	0x3b800000

0801715c <fastPowf>:
    { 
        float d; int x; 
    } 
    u = { a };

    u.x = (int)(b * (u.x - 1064866805) + 1064866805);
 801715c:	ee10 3a10 	vmov	r3, s0
 8017160:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8017184 <fastPowf+0x28>
 8017164:	f103 4340 	add.w	r3, r3, #3221225472	; 0xc0000000
 8017168:	f503 0307 	add.w	r3, r3, #8847360	; 0x870000
 801716c:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8017170:	330b      	adds	r3, #11
 8017172:	ee07 3a90 	vmov	s15, r3
 8017176:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801717a:	eea7 7aa0 	vfma.f32	s14, s15, s1
    return u.d;
 801717e:	eebd 0ac7 	vcvt.s32.f32	s0, s14
}
 8017182:	4770      	bx	lr
 8017184:	4e7de250 	.word	0x4e7de250

08017188 <LEAF_shaper>:
    if (min > max)
    {
        tempmin = max;
        tempmax = min;
    }
    if (val < tempmin)
 8017188:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8017208 <LEAF_shaper+0x80>
 801718c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017194:	d406      	bmi.n	80171a4 <LEAF_shaper+0x1c>
    {
        return tempmin;
    }
    else if (val > tempmax)
 8017196:	eddf 7a1d 	vldr	s15, [pc, #116]	; 801720c <LEAF_shaper+0x84>
 801719a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801719e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80171a2:	dd02      	ble.n	80171aa <LEAF_shaper+0x22>
 80171a4:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8017210 <LEAF_shaper+0x88>
}
 80171a8:	4770      	bx	lr
    float fx = input * 2.0f;    // prescale
 80171aa:	ee30 0a00 	vadd.f32	s0, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80171ae:	ed9f 5a19 	vldr	s10, [pc, #100]	; 8017214 <LEAF_shaper+0x8c>
    c = 0.5f*fx*(3.0f - (xc2));
 80171b2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    shaperOut *= 0.5f;    // post_scale
 80171b6:	ed9f 4a18 	vldr	s8, [pc, #96]	; 8017218 <LEAF_shaper+0x90>
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80171ba:	eef6 4a08 	vmov.f32	s9, #104	; 0x3f400000  0.750
    xc2 = xc*xc;
 80171be:	ee60 6a00 	vmul.f32	s13, s0, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80171c2:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
    c = 0.5f*fx*(3.0f - (xc2));
 80171c6:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80171ca:	ee20 0a25 	vmul.f32	s0, s0, s11
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80171ce:	eddf 5a13 	vldr	s11, [pc, #76]	; 801721c <LEAF_shaper+0x94>
 80171d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
    c = 0.5f*fx*(3.0f - (xc2));
 80171d6:	ee77 7ae6 	vsub.f32	s15, s15, s13
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80171da:	ee66 4aa6 	vmul.f32	s9, s13, s13
 80171de:	ee27 7a66 	vnmul.f32	s14, s14, s13
    c = 0.5f*fx*(3.0f - (xc2));
 80171e2:	ee27 0a80 	vmul.f32	s0, s15, s0
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80171e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80171ea:	eea4 7a85 	vfma.f32	s14, s9, s10
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80171ee:	eef0 7a40 	vmov.f32	s15, s0
    shaperOut *= 0.5f;    // post_scale
 80171f2:	ee60 0a84 	vmul.f32	s1, s1, s8
    float shaperOut = w*(c+ 0.05f*xc2)*(m_drive + 0.75f);
 80171f6:	eee6 7aa5 	vfma.f32	s15, s13, s11
    w = (1.0f - xc2*0.25f + xc4*0.015625f) * WSCALE;
 80171fa:	ee37 0a06 	vadd.f32	s0, s14, s12
    shaperOut *= 0.5f;    // post_scale
 80171fe:	ee20 0a80 	vmul.f32	s0, s1, s0
 8017202:	ee20 0a27 	vmul.f32	s0, s0, s15
    {
        return tempmax;
    }
    else
    {
        return val;
 8017206:	4770      	bx	lr
 8017208:	bfb504f3 	.word	0xbfb504f3
 801720c:	3fb504f3 	.word	0x3fb504f3
 8017210:	00000000 	.word	0x00000000
 8017214:	3c800000 	.word	0x3c800000
 8017218:	3f272f05 	.word	0x3f272f05
 801721c:	3d4ccccd 	.word	0x3d4ccccd

08017220 <LEAF_round>:
    rnd = fabsf(rnd);
 8017220:	eef0 0ae0 	vabs.f32	s1, s1
    if (rnd <= 0.0000001f) return input;
 8017224:	eddf 7a06 	vldr	s15, [pc, #24]	; 8017240 <LEAF_round+0x20>
 8017228:	eef4 0ae7 	vcmpe.f32	s1, s15
 801722c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017230:	d905      	bls.n	801723e <LEAF_round+0x1e>
    return roundf(input * scale) * rnd;
 8017232:	eec0 7a20 	vdiv.f32	s15, s0, s1
 8017236:	feb8 0a67 	vrinta.f32	s0, s15
 801723a:	ee20 0a20 	vmul.f32	s0, s0, s1
}
 801723e:	4770      	bx	lr
 8017240:	33d6bf95 	.word	0x33d6bf95

08017244 <LEAF_bitwise_xor>:
    return unholy.f;
 8017244:	ee10 3a10 	vmov	r3, s0
 8017248:	4043      	eors	r3, r0
 801724a:	ee00 3a10 	vmov	s0, r3
}
 801724e:	4770      	bx	lr

08017250 <LEAF_clip>:
    if (min > max)
 8017250:	eeb4 0ac1 	vcmpe.f32	s0, s2
 8017254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017258:	dd05      	ble.n	8017266 <LEAF_clip+0x16>
 801725a:	eef0 7a40 	vmov.f32	s15, s0
        tempmin = max;
 801725e:	eeb0 0a41 	vmov.f32	s0, s2
        tempmax = min;
 8017262:	eeb0 1a67 	vmov.f32	s2, s15
    if (val < tempmin)
 8017266:	eeb4 0ae0 	vcmpe.f32	s0, s1
 801726a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801726e:	dc01      	bgt.n	8017274 <LEAF_clip+0x24>
    else if (val > tempmax)
 8017270:	fe81 0a60 	vminnm.f32	s0, s2, s1
    }
}
 8017274:	4770      	bx	lr
 8017276:	bf00      	nop

08017278 <LEAF_tanh>:

// Adapted from MusicDSP: http://www.musicdsp.org/showone.php?id=238
float LEAF_tanh(float x)
{
    
    if( x < -3.0f )
 8017278:	eef8 7a08 	vmov.f32	s15, #136	; 0xc0400000 -3.0
 801727c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017284:	d418      	bmi.n	80172b8 <LEAF_tanh+0x40>
        return -1.0f;
    else if( x > 3.0f )
 8017286:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 801728a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801728e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017292:	dd02      	ble.n	801729a <LEAF_tanh+0x22>
        return 1.0f;
 8017294:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
    else
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
}
 8017298:	4770      	bx	lr
        return x * ( 27.0f + x * x ) / ( 27.0f + 9.0f * x * x );
 801729a:	ee60 6a00 	vmul.f32	s13, s0, s0
 801729e:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
 80172a2:	eeb2 6a02 	vmov.f32	s12, #34	; 0x41100000  9.0
 80172a6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80172aa:	eee6 7a86 	vfma.f32	s15, s13, s12
 80172ae:	ee27 7a00 	vmul.f32	s14, s14, s0
 80172b2:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80172b6:	4770      	bx	lr
        return -1.0f;
 80172b8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 80172bc:	4770      	bx	lr
 80172be:	bf00      	nop

080172c0 <LEAF_generate_exp>:
}


//0.001 base gives a good curve that goes from 1 to near zero
void LEAF_generate_exp(float* buffer, float base, float start, float end, float offset, int size)
{
 80172c0:	b538      	push	{r3, r4, r5, lr}
    float increment = (end - start) / (float)(size-1);
 80172c2:	1e4b      	subs	r3, r1, #1
 80172c4:	ee31 1a60 	vsub.f32	s2, s2, s1
    float x = start;
    for (int i = 0; i < size; i++)
 80172c8:	2900      	cmp	r1, #0
    float increment = (end - start) / (float)(size-1);
 80172ca:	ee07 3a90 	vmov	s15, r3
 80172ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 80172d2:	ed2d 8b04 	vpush	{d8-d9}
    float increment = (end - start) / (float)(size-1);
 80172d6:	eec1 9a27 	vdiv.f32	s19, s2, s15
    for (int i = 0; i < size; i++)
 80172da:	dd16      	ble.n	801730a <LEAF_generate_exp+0x4a>
 80172dc:	4604      	mov	r4, r0
 80172de:	eb00 0581 	add.w	r5, r0, r1, lsl #2
 80172e2:	eeb0 8a60 	vmov.f32	s16, s1
 80172e6:	eef0 8a40 	vmov.f32	s17, s0
 80172ea:	eeb0 9a61 	vmov.f32	s18, s3
    {
        buffer[i] = powf(base, x) + offset;
 80172ee:	eef0 0a48 	vmov.f32	s1, s16
 80172f2:	eeb0 0a68 	vmov.f32	s0, s17
 80172f6:	f006 fd67 	bl	801ddc8 <powf>
 80172fa:	ee70 7a09 	vadd.f32	s15, s0, s18
        x += increment;
 80172fe:	ee38 8a29 	vadd.f32	s16, s16, s19
        buffer[i] = powf(base, x) + offset;
 8017302:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8017306:	42a5      	cmp	r5, r4
 8017308:	d1f1      	bne.n	80172ee <LEAF_generate_exp+0x2e>
    }
}
 801730a:	ecbd 8b04 	vpop	{d8-d9}
 801730e:	bd38      	pop	{r3, r4, r5, pc}

08017310 <LEAF_generate_table_skew_non_sym>:
    }
}


void LEAF_generate_table_skew_non_sym(float* buffer, float start, float end, float center, int size)
{
 8017310:	b538      	push	{r3, r4, r5, lr}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8017312:	ee31 1a40 	vsub.f32	s2, s2, s0
{
 8017316:	460d      	mov	r5, r1
 8017318:	4604      	mov	r4, r0
 801731a:	ed2d 8b06 	vpush	{d8-d10}
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 801731e:	ee70 9ac0 	vsub.f32	s19, s1, s0
{
 8017322:	eef0 8a40 	vmov.f32	s17, s0
    float skew = logf (0.5) / logf ((center - start) / (end - start));
 8017326:	ee81 0a29 	vdiv.f32	s0, s2, s19
 801732a:	f006 fc29 	bl	801db80 <logf>
    float increment = 1.0 / (float)(size-1);
 801732e:	1e6b      	subs	r3, r5, #1
    float x = 0.0;
    float proportion = 0.0;
    for (int i = 0; i < size; i++)
 8017330:	2d00      	cmp	r5, #0
    float increment = 1.0 / (float)(size-1);
 8017332:	ee07 3a90 	vmov	s15, r3
 8017336:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801733a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801733e:	ee87 aa27 	vdiv.f32	s20, s14, s15
    for (int i = 0; i < size; i++)
 8017342:	dd19      	ble.n	8017378 <LEAF_generate_table_skew_non_sym+0x68>
 8017344:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 8017380 <LEAF_generate_table_skew_non_sym+0x70>
 8017348:	eb04 0585 	add.w	r5, r4, r5, lsl #2
    float x = 0.0;
 801734c:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8017384 <LEAF_generate_table_skew_non_sym+0x74>
 8017350:	ee20 9a09 	vmul.f32	s18, s0, s18
    {
        proportion = expf (logf(x) / skew);
 8017354:	eeb0 0a48 	vmov.f32	s0, s16
 8017358:	f006 fc12 	bl	801db80 <logf>
 801735c:	ee20 0a09 	vmul.f32	s0, s0, s18
 8017360:	f006 fb92 	bl	801da88 <expf>
        buffer[i] = (float)(start + (end - start) * proportion);
 8017364:	eef0 7a68 	vmov.f32	s15, s17
        x += increment;
 8017368:	ee38 8a0a 	vadd.f32	s16, s16, s20
        buffer[i] = (float)(start + (end - start) * proportion);
 801736c:	eee9 7a80 	vfma.f32	s15, s19, s0
 8017370:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 8017374:	42a5      	cmp	r5, r4
 8017376:	d1ed      	bne.n	8017354 <LEAF_generate_table_skew_non_sym+0x44>
    }
}
 8017378:	ecbd 8b06 	vpop	{d8-d10}
 801737c:	bd38      	pop	{r3, r4, r5, pc}
 801737e:	bf00      	nop
 8017380:	bfb8aa3b 	.word	0xbfb8aa3b
 8017384:	00000000 	.word	0x00000000

08017388 <LEAF_generate_mtof>:
    }
}


void LEAF_generate_mtof(float* buffer, float startMIDI, float endMIDI, int size)
{
 8017388:	b538      	push	{r3, r4, r5, lr}
    float increment = 1.0f / (float)(size-1);
 801738a:	1e4b      	subs	r3, r1, #1
 801738c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float x = 0.0f;
    float scalar = (endMIDI-startMIDI);
    for (int i = 0; i < size; i++)
 8017390:	2900      	cmp	r1, #0
    float increment = 1.0f / (float)(size-1);
 8017392:	ee07 3a90 	vmov	s15, r3
 8017396:	eef8 7ae7 	vcvt.f32.s32	s15, s15
{
 801739a:	ed2d 8b0a 	vpush	{d8-d12}
    float increment = 1.0f / (float)(size-1);
 801739e:	eec7 aa27 	vdiv.f32	s21, s14, s15
    float scalar = (endMIDI-startMIDI);
 80173a2:	ee30 aac0 	vsub.f32	s20, s1, s0
    for (int i = 0; i < size; i++)
 80173a6:	dd29      	ble.n	80173fc <LEAF_generate_mtof+0x74>
    float x = 0.0f;
 80173a8:	ed9f 9a19 	vldr	s18, [pc, #100]	; 8017410 <LEAF_generate_mtof+0x88>
 80173ac:	eef0 9a40 	vmov.f32	s19, s0
 80173b0:	4604      	mov	r4, r0

#define LOGTEN 2.302585092994

float mtof(float f)
{
    if (f <= -1500.0f) return(0);
 80173b2:	eddf 8a18 	vldr	s17, [pc, #96]	; 8017414 <LEAF_generate_mtof+0x8c>
 80173b6:	eeb0 ba49 	vmov.f32	s22, s18
    else if (f > 1499.0f) return(mtof(1499.0f));
 80173ba:	ed9f 8a17 	vldr	s16, [pc, #92]	; 8017418 <LEAF_generate_mtof+0x90>
 80173be:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    else return (8.17579891564f * expf(0.0577622650f * f));
 80173c2:	ed9f ca16 	vldr	s24, [pc, #88]	; 801741c <LEAF_generate_mtof+0x94>
 80173c6:	eddf ba16 	vldr	s23, [pc, #88]	; 8017420 <LEAF_generate_mtof+0x98>
        float midiVal = (x * scalar) + startMIDI;
 80173ca:	eeb0 0a69 	vmov.f32	s0, s19
 80173ce:	eeaa 0a09 	vfma.f32	s0, s20, s18
float mtof(float f)
 80173d2:	e006      	b.n	80173e2 <LEAF_generate_mtof+0x5a>
    else if (f > 1499.0f) return(mtof(1499.0f));
 80173d4:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80173d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173dc:	dd11      	ble.n	8017402 <LEAF_generate_mtof+0x7a>
 80173de:	eeb0 0a48 	vmov.f32	s0, s16
    if (f <= -1500.0f) return(0);
 80173e2:	eeb4 0ae8 	vcmpe.f32	s0, s17
 80173e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80173ea:	d8f3      	bhi.n	80173d4 <LEAF_generate_mtof+0x4c>
 80173ec:	eef0 7a4b 	vmov.f32	s15, s22
        buffer[i] = mtof(midiVal);
 80173f0:	ece4 7a01 	vstmia	r4!, {s15}
    for (int i = 0; i < size; i++)
 80173f4:	42a5      	cmp	r5, r4
        x += increment;
 80173f6:	ee39 9a2a 	vadd.f32	s18, s18, s21
    for (int i = 0; i < size; i++)
 80173fa:	d1e6      	bne.n	80173ca <LEAF_generate_mtof+0x42>
}
 80173fc:	ecbd 8b0a 	vpop	{d8-d12}
 8017400:	bd38      	pop	{r3, r4, r5, pc}
    else return (8.17579891564f * expf(0.0577622650f * f));
 8017402:	ee20 0a0c 	vmul.f32	s0, s0, s24
 8017406:	f006 fb3f 	bl	801da88 <expf>
 801740a:	ee60 7a2b 	vmul.f32	s15, s0, s23
 801740e:	e7ef      	b.n	80173f0 <LEAF_generate_mtof+0x68>
 8017410:	00000000 	.word	0x00000000
 8017414:	c4bb8000 	.word	0xc4bb8000
 8017418:	44bb6000 	.word	0x44bb6000
 801741c:	3d6c9820 	.word	0x3d6c9820
 8017420:	4102d013 	.word	0x4102d013

08017424 <LEAF_interpolate_hermite_x>:
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8017424:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8017428:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    float c1 = 0.5f * (yy2 - yy0);
 801742c:	ee31 6a40 	vsub.f32	s12, s2, s0
    float c3 = (yy1 - yy2) + 0.5f * (yy3 - y0my1 - yy2);
 8017430:	ee71 1aa0 	vadd.f32	s3, s3, s1
 8017434:	eef0 7a60 	vmov.f32	s15, s1
 8017438:	ee30 7ac1 	vsub.f32	s14, s1, s2
 801743c:	ee71 1ac1 	vsub.f32	s3, s3, s2
 8017440:	eed6 7a26 	vfnms.f32	s15, s12, s13
 8017444:	eea1 7aa6 	vfma.f32	s14, s3, s13
    float c2 = y0my1 + c1 - c3;
 8017448:	ee70 7a27 	vadd.f32	s15, s0, s15
 801744c:	ee77 7ac7 	vsub.f32	s15, s15, s14
    return ((c3 * xx + c2) * xx + c1) * xx + c0;
 8017450:	eee7 7a02 	vfma.f32	s15, s14, s4
 8017454:	ee67 7a82 	vmul.f32	s15, s15, s4
 8017458:	eee6 7a26 	vfma.f32	s15, s12, s13
}
 801745c:	eee7 0a82 	vfma.f32	s1, s15, s4
 8017460:	eeb0 0a60 	vmov.f32	s0, s1
 8017464:	4770      	bx	lr
 8017466:	bf00      	nop

08017468 <LEAF_interpolation_linear>:
    alpha = LEAF_clip(0.0f, alpha, 1.0f);
 8017468:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    if (val < tempmin)
 801746c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 801748c <LEAF_interpolation_linear+0x24>
 8017470:	fe81 1a67 	vminnm.f32	s2, s2, s15
 8017474:	fe81 1a07 	vmaxnm.f32	s2, s2, s14
    float omAlpha = 1.0f - alpha;
 8017478:	ee77 7ac1 	vsub.f32	s15, s15, s2
    out += B * alpha;
 801747c:	ee61 0a20 	vmul.f32	s1, s2, s1
}
 8017480:	eee7 0a80 	vfma.f32	s1, s15, s0
 8017484:	eeb0 0a60 	vmov.f32	s0, s1
 8017488:	4770      	bx	lr
 801748a:	bf00      	nop
 801748c:	00000000 	.word	0x00000000

08017490 <mtof>:
    if (f <= -1500.0f) return(0);
 8017490:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80174d0 <mtof+0x40>
    else if (f > 1499.0f) return(mtof(1499.0f));
 8017494:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80174d4 <mtof+0x44>
 8017498:	e006      	b.n	80174a8 <mtof+0x18>
 801749a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801749e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174a2:	dd09      	ble.n	80174b8 <mtof+0x28>
 80174a4:	eeb0 0a67 	vmov.f32	s0, s15
    if (f <= -1500.0f) return(0);
 80174a8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80174ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80174b0:	d8f3      	bhi.n	801749a <mtof+0xa>
 80174b2:	ed9f 0a09 	vldr	s0, [pc, #36]	; 80174d8 <mtof+0x48>
}
 80174b6:	4770      	bx	lr
    else return (8.17579891564f * expf(0.0577622650f * f));
 80174b8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80174dc <mtof+0x4c>
{
 80174bc:	b508      	push	{r3, lr}
    else return (8.17579891564f * expf(0.0577622650f * f));
 80174be:	ee20 0a27 	vmul.f32	s0, s0, s15
 80174c2:	f006 fae1 	bl	801da88 <expf>
 80174c6:	eddf 7a06 	vldr	s15, [pc, #24]	; 80174e0 <mtof+0x50>
 80174ca:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 80174ce:	bd08      	pop	{r3, pc}
 80174d0:	c4bb8000 	.word	0xc4bb8000
 80174d4:	44bb6000 	.word	0x44bb6000
 80174d8:	00000000 	.word	0x00000000
 80174dc:	3d6c9820 	.word	0x3d6c9820
 80174e0:	4102d013 	.word	0x4102d013

080174e4 <faster_mtof>:
    x = 1.0f + (x * 0.00390625f);
 80174e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80174e8:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801751c <faster_mtof+0x38>
    return (8.17579891564f * fastexpf(0.0577622650f * f));
}

float faster_mtof(float f)
{
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 80174ec:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8017520 <faster_mtof+0x3c>
    x = 1.0f + (x * 0.00390625f);
 80174f0:	eee0 7a26 	vfma.f32	s15, s0, s13
    x *= x; x *= x; x *= x; x *= x;
 80174f4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80174f8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80174fc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017500:	ee67 7aa7 	vmul.f32	s15, s15, s15
    x *= x; x *= x; x *= x; x *= x;
 8017504:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8017508:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801750c:	ee67 7aa7 	vmul.f32	s15, s15, s15
    return (8.17579891564f * fasterexpf(0.0577622650f * f));
 8017510:	ee67 7aa7 	vmul.f32	s15, s15, s15
}
 8017514:	ee27 0a87 	vmul.f32	s0, s15, s14
 8017518:	4770      	bx	lr
 801751a:	bf00      	nop
 801751c:	396c9820 	.word	0x396c9820
 8017520:	4102d013 	.word	0x4102d013

08017524 <ftom>:

float ftom(float f)
{
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8017524:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8017528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801752c:	dd0b      	ble.n	8017546 <ftom+0x22>
 801752e:	eddf 7a07 	vldr	s15, [pc, #28]	; 801754c <ftom+0x28>
{
 8017532:	b508      	push	{r3, lr}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8017534:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017538:	f006 fb22 	bl	801db80 <logf>
 801753c:	eddf 7a04 	vldr	s15, [pc, #16]	; 8017550 <ftom+0x2c>
 8017540:	ee20 0a27 	vmul.f32	s0, s0, s15
}
 8017544:	bd08      	pop	{r3, pc}
    return (f > 0 ? 17.3123405046f * logf(.12231220585f * f) : -1500.0f);
 8017546:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8017554 <ftom+0x30>
}
 801754a:	4770      	bx	lr
 801754c:	3dfa7ed2 	.word	0x3dfa7ed2
 8017550:	418a7fac 	.word	0x418a7fac
 8017554:	c4bb8000 	.word	0xc4bb8000

08017558 <fasteratodb>:
float atodb(float a)
{
    return 20.0f*log10f(a);
}
float fasteratodb(float a)
{
 8017558:	b500      	push	{lr}
 801755a:	b083      	sub	sp, #12
    F = frexpf(fabsf(X), &E);
 801755c:	eeb0 0ac0 	vabs.f32	s0, s0
 8017560:	a801      	add	r0, sp, #4
 8017562:	f005 ffbf 	bl	801d4e4 <frexpf>
    Y += -4.11852516267426f;
 8017566:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801759c <fasteratodb+0x44>
 801756a:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80175a0 <fasteratodb+0x48>
    Y += 6.02197014179219f;
 801756e:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80175a4 <fasteratodb+0x4c>
    Y += -4.11852516267426f;
 8017572:	eee0 6a27 	vfma.f32	s13, s0, s15
    Y += E;
 8017576:	eddd 7a01 	vldr	s15, [sp, #4]
 801757a:	eddf 5a0b 	vldr	s11, [pc, #44]	; 80175a8 <fasteratodb+0x50>
 801757e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return 20.0f*log10f_fast(a);
 8017582:	ed9f 6a0a 	vldr	s12, [pc, #40]	; 80175ac <fasteratodb+0x54>
    Y += E;
 8017586:	ee77 7ae5 	vsub.f32	s15, s15, s11
    Y += 6.02197014179219f;
 801758a:	eea0 7a26 	vfma.f32	s14, s0, s13
    Y += E;
 801758e:	eee0 7a07 	vfma.f32	s15, s0, s14
}
 8017592:	ee27 0a86 	vmul.f32	s0, s15, s12
 8017596:	b003      	add	sp, #12
 8017598:	f85d fb04 	ldr.w	pc, [sp], #4
 801759c:	3f9da1a8 	.word	0x3f9da1a8
 80175a0:	c083caf5 	.word	0xc083caf5
 80175a4:	40c0b3fb 	.word	0x40c0b3fb
 80175a8:	404892e0 	.word	0x404892e0
 80175ac:	40c0a8c2 	.word	0x40c0a8c2

080175b0 <fastdbtoa>:


float fastdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return expf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
 80175b0:	eddf 7a02 	vldr	s15, [pc, #8]	; 80175bc <fastdbtoa+0xc>
 80175b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80175b8:	f006 ba66 	b.w	801da88 <expf>
 80175bc:	3debc8e3 	.word	0x3debc8e3

080175c0 <fasterdbtoa>:
    x = 1.0f + (x * 0.00390625f);
 80175c0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80175c4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80175f0 <fasterdbtoa+0x30>
 80175c8:	eee0 7a07 	vfma.f32	s15, s0, s14
    x *= x; x *= x; x *= x; x *= x;
 80175cc:	ee27 0aa7 	vmul.f32	s0, s15, s15
 80175d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80175d4:	ee20 0a00 	vmul.f32	s0, s0, s0
 80175d8:	ee20 0a00 	vmul.f32	s0, s0, s0
    x *= x; x *= x; x *= x; x *= x;
 80175dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80175e0:	ee20 0a00 	vmul.f32	s0, s0, s0
 80175e4:	ee20 0a00 	vmul.f32	s0, s0, s0

float fasterdbtoa(float db)
{
    //return powf(10.0f, db * 0.05f);
    return fasterexpf(0.115129254649702f * db); //faster version from http://openaudio.blogspot.com/2017/02/faster-log10-and-pow.html
}
 80175e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80175ec:	4770      	bx	lr
 80175ee:	bf00      	nop
 80175f0:	39ebc8e3 	.word	0x39ebc8e3

080175f4 <maximum>:


float maximum (float num1, float num2)
{
    return (num1 > num2 ) ? num1 : num2;
}
 80175f4:	fe80 0a80 	vmaxnm.f32	s0, s1, s0
 80175f8:	4770      	bx	lr
 80175fa:	bf00      	nop

080175fc <minimum>:

float minimum (float num1, float num2)
{
    return (num1 < num2 ) ? num1 : num2;
}
 80175fc:	fe80 0ac0 	vminnm.f32	s0, s1, s0
 8017600:	4770      	bx	lr
 8017602:	bf00      	nop

08017604 <leaf_pool_init>:
/**
 * create memory pool
 */
void mpool_create (char* memory, size_t size, _tMempool* pool)
{
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017604:	6a03      	ldr	r3, [r0, #32]
    */
    //is zeroing out the memory necessary? This takes a long time on large pools - JS
}

void leaf_pool_init(LEAF* const leaf, char* memory, size_t size)
{
 8017606:	b430      	push	{r4, r5}
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017608:	2510      	movs	r5, #16
    pool->usize  = 0;
 801760a:	2400      	movs	r4, #0
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801760c:	635d      	str	r5, [r3, #52]	; 0x34
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801760e:	6a03      	ldr	r3, [r0, #32]
    pool->msize  = size;
 8017610:	62c2      	str	r2, [r0, #44]	; 0x2c
    pool->usize  = 0;
 8017612:	e9c0 1409 	strd	r1, r4, [r0, #36]	; 0x24
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017616:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017618:	1ad2      	subs	r2, r2, r3
}

static inline mpool_node_t* create_node(char* block_location, mpool_node_t* next, mpool_node_t* prev, size_t size, size_t header_size)
{
    mpool_node_t* node = (mpool_node_t*)block_location;
    node->pool = block_location + header_size;
 801761a:	440b      	add	r3, r1
 801761c:	600b      	str	r3, [r1, #0]
    mpool_create(memory, size, &leaf->_internal_mempool);
 801761e:	f100 031c 	add.w	r3, r0, #28
    node->next = next;
    node->prev = prev;
    node->size = size;
 8017622:	60ca      	str	r2, [r1, #12]
    node->prev = prev;
 8017624:	e9c1 4401 	strd	r4, r4, [r1, #4]
}
 8017628:	bc30      	pop	{r4, r5}
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 801762a:	6301      	str	r1, [r0, #48]	; 0x30
    leaf->mempool = &leaf->_internal_mempool;
 801762c:	6183      	str	r3, [r0, #24]
}
 801762e:	4770      	bx	lr

08017630 <mpool_alloc>:
{
 8017630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 8017632:	684a      	ldr	r2, [r1, #4]
{
 8017634:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 8017636:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8017638:	3301      	adds	r3, #1
 801763a:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 801763c:	694b      	ldr	r3, [r1, #20]
 801763e:	2b00      	cmp	r3, #0
 8017640:	d04a      	beq.n	80176d8 <mpool_alloc+0xa8>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 8017642:	1dc4      	adds	r4, r0, #7
 8017644:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8017648:	e002      	b.n	8017650 <mpool_alloc+0x20>
        node_to_alloc = node_to_alloc->next;
 801764a:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 801764c:	2b00      	cmp	r3, #0
 801764e:	d043      	beq.n	80176d8 <mpool_alloc+0xa8>
    while (node_to_alloc->size < size_to_alloc)
 8017650:	68da      	ldr	r2, [r3, #12]
 8017652:	42a2      	cmp	r2, r4
 8017654:	d3f9      	bcc.n	801764a <mpool_alloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 8017656:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8017658:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 801765a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801765e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017660:	4281      	cmp	r1, r0
 8017662:	d246      	bcs.n	80176f2 <mpool_alloc+0xc2>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017664:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017668:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 801766a:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801766c:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 801766e:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8017670:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 8017672:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 8017676:	4429      	add	r1, r5
 8017678:	5111      	str	r1, [r2, r4]
    node->size = size;
 801767a:	60e8      	str	r0, [r5, #12]
    node->next = next;
 801767c:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8017680:	f8dc 2014 	ldr.w	r2, [ip, #20]
 8017684:	429a      	cmp	r2, r3
        pool->head = new_node;
 8017686:	bf08      	it	eq
 8017688:	f8cc 5014 	streq.w	r5, [ip, #20]
}

static inline void delink_node(mpool_node_t* node)
{
    // If there is a node after the node to remove
    if (node->next != NULL)
 801768c:	685a      	ldr	r2, [r3, #4]
 801768e:	b10a      	cbz	r2, 8017694 <mpool_alloc+0x64>
    {
        // Close the link
        node->next->prev = node->prev;
 8017690:	6899      	ldr	r1, [r3, #8]
 8017692:	6091      	str	r1, [r2, #8]
    }
    // If there is a node before the node to remove
    if (node->prev != NULL)
 8017694:	689a      	ldr	r2, [r3, #8]
 8017696:	b10a      	cbz	r2, 801769c <mpool_alloc+0x6c>
    {
        // Close the link
        node->prev->next = node->next;
 8017698:	6859      	ldr	r1, [r3, #4]
 801769a:	6051      	str	r1, [r2, #4]
    }
    
    node->next = NULL;
 801769c:	2500      	movs	r5, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801769e:	68d8      	ldr	r0, [r3, #12]
    node->prev = NULL;
 80176a0:	e9c3 5501 	strd	r5, r5, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 80176a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80176a8:	f8dc 200c 	ldr.w	r2, [ip, #12]
 80176ac:	6b4c      	ldr	r4, [r1, #52]	; 0x34
 80176ae:	4422      	add	r2, r4
 80176b0:	4402      	add	r2, r0
 80176b2:	f8cc 200c 	str.w	r2, [ip, #12]
    if (pool->leaf->clearOnAllocation > 0)
 80176b6:	694a      	ldr	r2, [r1, #20]
 80176b8:	42aa      	cmp	r2, r5
 80176ba:	dd0b      	ble.n	80176d4 <mpool_alloc+0xa4>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80176bc:	68da      	ldr	r2, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 80176be:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 80176c0:	b14a      	cbz	r2, 80176d6 <mpool_alloc+0xa6>
 80176c2:	1e41      	subs	r1, r0, #1
 80176c4:	460a      	mov	r2, r1
 80176c6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80176ca:	68dc      	ldr	r4, [r3, #12]
 80176cc:	3202      	adds	r2, #2
 80176ce:	1a12      	subs	r2, r2, r0
 80176d0:	4294      	cmp	r4, r2
 80176d2:	d8f7      	bhi.n	80176c4 <mpool_alloc+0x94>
    return node_to_alloc->pool;
 80176d4:	6818      	ldr	r0, [r3, #0]
}
 80176d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 80176d8:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 80176dc:	1a9b      	subs	r3, r3, r2
 80176de:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80176e0:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80176e4:	bf8c      	ite	hi
 80176e6:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80176e8:	2100      	movls	r1, #0
 80176ea:	f005 fe57 	bl	801d39c <LEAF_internalErrorCallback>
        return NULL;
 80176ee:	2000      	movs	r0, #0
}
 80176f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80176f2:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80176f4:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80176f6:	e7c3      	b.n	8017680 <mpool_alloc+0x50>

080176f8 <mpool_calloc>:
{
 80176f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    pool->leaf->allocCount++;
 80176fa:	684a      	ldr	r2, [r1, #4]
{
 80176fc:	468c      	mov	ip, r1
    pool->leaf->allocCount++;
 80176fe:	6c93      	ldr	r3, [r2, #72]	; 0x48
 8017700:	3301      	adds	r3, #1
 8017702:	6493      	str	r3, [r2, #72]	; 0x48
    if (pool->head == NULL)
 8017704:	694b      	ldr	r3, [r1, #20]
 8017706:	2b00      	cmp	r3, #0
 8017708:	d044      	beq.n	8017794 <mpool_calloc+0x9c>
    return (size + (MPOOL_ALIGN_SIZE - 1)) & ~(MPOOL_ALIGN_SIZE - 1);
 801770a:	1dc4      	adds	r4, r0, #7
 801770c:	f024 0407 	bic.w	r4, r4, #7
    while (node_to_alloc->size < size_to_alloc)
 8017710:	e002      	b.n	8017718 <mpool_calloc+0x20>
        node_to_alloc = node_to_alloc->next;
 8017712:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 8017714:	2b00      	cmp	r3, #0
 8017716:	d03d      	beq.n	8017794 <mpool_calloc+0x9c>
    while (node_to_alloc->size < size_to_alloc)
 8017718:	68da      	ldr	r2, [r3, #12]
 801771a:	42a2      	cmp	r2, r4
 801771c:	d3f9      	bcc.n	8017712 <mpool_calloc+0x1a>
    node_to_alloc->size = size_to_alloc;
 801771e:	60dc      	str	r4, [r3, #12]
    size_t leftover = node_to_alloc->size - size_to_alloc;
 8017720:	1b10      	subs	r0, r2, r4
    if (leftover > pool->leaf->header_size)
 8017722:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8017726:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017728:	4281      	cmp	r1, r0
 801772a:	d240      	bcs.n	80177ae <mpool_calloc+0xb6>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 801772c:	f8dc 2008 	ldr.w	r2, [ip, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017730:	440c      	add	r4, r1
        new_node = create_node(&pool->mpool[offset],
 8017732:	1a40      	subs	r0, r0, r1
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 8017734:	1a9d      	subs	r5, r3, r2
        offset += pool->leaf->header_size + node_to_alloc->size;
 8017736:	442c      	add	r4, r5
        new_node = create_node(&pool->mpool[offset],
 8017738:	1915      	adds	r5, r2, r4
                               node_to_alloc->next,
 801773a:	e9d3 7601 	ldrd	r7, r6, [r3, #4]
    node->pool = block_location + header_size;
 801773e:	4429      	add	r1, r5
 8017740:	5111      	str	r1, [r2, r4]
    node->size = size;
 8017742:	60e8      	str	r0, [r5, #12]
    node->next = next;
 8017744:	e9c5 7601 	strd	r7, r6, [r5, #4]
    if (pool->head == node_to_alloc)
 8017748:	f8dc 2014 	ldr.w	r2, [ip, #20]
 801774c:	429a      	cmp	r2, r3
        pool->head = new_node;
 801774e:	bf08      	it	eq
 8017750:	f8cc 5014 	streq.w	r5, [ip, #20]
    if (node->next != NULL)
 8017754:	685a      	ldr	r2, [r3, #4]
 8017756:	b10a      	cbz	r2, 801775c <mpool_calloc+0x64>
        node->next->prev = node->prev;
 8017758:	6899      	ldr	r1, [r3, #8]
 801775a:	6091      	str	r1, [r2, #8]
    if (node->prev != NULL)
 801775c:	689a      	ldr	r2, [r3, #8]
 801775e:	b10a      	cbz	r2, 8017764 <mpool_calloc+0x6c>
        node->prev->next = node->next;
 8017760:	6859      	ldr	r1, [r3, #4]
 8017762:	6051      	str	r1, [r2, #4]
    node->next = NULL;
 8017764:	2200      	movs	r2, #0
    node->prev = NULL;
 8017766:	e9c3 2201 	strd	r2, r2, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801776a:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801776e:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8017772:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8017774:	4401      	add	r1, r0
 8017776:	68d8      	ldr	r0, [r3, #12]
 8017778:	4401      	add	r1, r0
 801777a:	f8cc 100c 	str.w	r1, [ip, #12]
    for (int i = 0; i < node_to_alloc->size; i++) node_to_alloc->pool[i] = 0;
 801777e:	68d9      	ldr	r1, [r3, #12]
 8017780:	b131      	cbz	r1, 8017790 <mpool_calloc+0x98>
 8017782:	4610      	mov	r0, r2
 8017784:	6819      	ldr	r1, [r3, #0]
 8017786:	5488      	strb	r0, [r1, r2]
 8017788:	3201      	adds	r2, #1
 801778a:	68d9      	ldr	r1, [r3, #12]
 801778c:	4291      	cmp	r1, r2
 801778e:	d8f9      	bhi.n	8017784 <mpool_calloc+0x8c>
    return node_to_alloc->pool;
 8017790:	6818      	ldr	r0, [r3, #0]
}
 8017792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pool->msize - pool->usize) > asize)
 8017794:	e9dc 2303 	ldrd	r2, r3, [ip, #12]
 8017798:	1a9b      	subs	r3, r3, r2
 801779a:	4283      	cmp	r3, r0
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801779c:	f8dc 0004 	ldr.w	r0, [ip, #4]
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80177a0:	bf8c      	ite	hi
 80177a2:	2101      	movhi	r1, #1
            LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80177a4:	2100      	movls	r1, #0
 80177a6:	f005 fdf9 	bl	801d39c <LEAF_internalErrorCallback>
        return NULL;
 80177aa:	2000      	movs	r0, #0
}
 80177ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        new_node = node_to_alloc->next;
 80177ae:	685d      	ldr	r5, [r3, #4]
        node_to_alloc->size += leftover;
 80177b0:	60da      	str	r2, [r3, #12]
        new_node = node_to_alloc->next;
 80177b2:	e7c9      	b.n	8017748 <mpool_calloc+0x50>

080177b4 <tMempool_init>:
}

void tMempool_init(tMempool* const mp, char* memory, size_t size, LEAF* const leaf)
{
 80177b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    mpool_free((char*)m, m->mempool);
}

void    tMempool_initToPool     (tMempool* const mp, char* memory, size_t size, tMempool* const mem)
{
    _tMempool* mm = *mem;
 80177b8:	699d      	ldr	r5, [r3, #24]
{
 80177ba:	4682      	mov	sl, r0
    pool->leaf->allocCount++;
 80177bc:	6868      	ldr	r0, [r5, #4]
 80177be:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80177c0:	3301      	adds	r3, #1
 80177c2:	6483      	str	r3, [r0, #72]	; 0x48
    if (pool->head == NULL)
 80177c4:	696b      	ldr	r3, [r5, #20]
 80177c6:	b91b      	cbnz	r3, 80177d0 <tMempool_init+0x1c>
 80177c8:	e063      	b.n	8017892 <tMempool_init+0xde>
        node_to_alloc = node_to_alloc->next;
 80177ca:	685b      	ldr	r3, [r3, #4]
        if (node_to_alloc == NULL)
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d060      	beq.n	8017892 <tMempool_init+0xde>
    while (node_to_alloc->size < size_to_alloc)
 80177d0:	68dc      	ldr	r4, [r3, #12]
 80177d2:	2c17      	cmp	r4, #23
 80177d4:	d9f9      	bls.n	80177ca <tMempool_init+0x16>
    node_to_alloc->size = size_to_alloc;
 80177d6:	2018      	movs	r0, #24
    size_t leftover = node_to_alloc->size - size_to_alloc;
 80177d8:	f1a4 0718 	sub.w	r7, r4, #24
    node_to_alloc->size = size_to_alloc;
 80177dc:	60d8      	str	r0, [r3, #12]
    if (leftover > pool->leaf->header_size)
 80177de:	6868      	ldr	r0, [r5, #4]
 80177e0:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80177e2:	4287      	cmp	r7, r0
 80177e4:	d952      	bls.n	801788c <tMempool_init+0xd8>
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80177e6:	f8d5 e008 	ldr.w	lr, [r5, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80177ea:	f100 0c18 	add.w	ip, r0, #24
 80177ee:	f8d3 9004 	ldr.w	r9, [r3, #4]
        new_node = create_node(&pool->mpool[offset],
 80177f2:	1a3f      	subs	r7, r7, r0
        long offset = (char*) node_to_alloc - (char*) pool->mpool;
 80177f4:	eba3 040e 	sub.w	r4, r3, lr
                               node_to_alloc->next,
 80177f8:	f8d3 8008 	ldr.w	r8, [r3, #8]
        offset += pool->leaf->header_size + node_to_alloc->size;
 80177fc:	44a4      	add	ip, r4
        new_node = create_node(&pool->mpool[offset],
 80177fe:	eb0e 040c 	add.w	r4, lr, ip
    node->pool = block_location + header_size;
 8017802:	4420      	add	r0, r4
 8017804:	f84e 000c 	str.w	r0, [lr, ip]
    node->size = size;
 8017808:	60e7      	str	r7, [r4, #12]
    node->next = next;
 801780a:	e9c4 9801 	strd	r9, r8, [r4, #4]
    if (pool->head == node_to_alloc)
 801780e:	6968      	ldr	r0, [r5, #20]
 8017810:	4283      	cmp	r3, r0
        pool->head = new_node;
 8017812:	bf08      	it	eq
 8017814:	616c      	streq	r4, [r5, #20]
    if (node->next != NULL)
 8017816:	6858      	ldr	r0, [r3, #4]
 8017818:	b108      	cbz	r0, 801781e <tMempool_init+0x6a>
        node->next->prev = node->prev;
 801781a:	689c      	ldr	r4, [r3, #8]
 801781c:	6084      	str	r4, [r0, #8]
    if (node->prev != NULL)
 801781e:	6898      	ldr	r0, [r3, #8]
 8017820:	b108      	cbz	r0, 8017826 <tMempool_init+0x72>
        node->prev->next = node->next;
 8017822:	685c      	ldr	r4, [r3, #4]
 8017824:	6044      	str	r4, [r0, #4]
    node->next = NULL;
 8017826:	2700      	movs	r7, #0
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 8017828:	68dc      	ldr	r4, [r3, #12]
    node->prev = NULL;
 801782a:	e9c3 7701 	strd	r7, r7, [r3, #4]
    pool->usize += pool->leaf->header_size + node_to_alloc->size;
 801782e:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8017832:	68e8      	ldr	r0, [r5, #12]
 8017834:	f8dc 6034 	ldr.w	r6, [ip, #52]	; 0x34
 8017838:	4430      	add	r0, r6
 801783a:	4404      	add	r4, r0
 801783c:	60ec      	str	r4, [r5, #12]
    if (pool->leaf->clearOnAllocation > 0)
 801783e:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8017842:	42b8      	cmp	r0, r7
 8017844:	dd0c      	ble.n	8017860 <tMempool_init+0xac>
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 8017846:	68dc      	ldr	r4, [r3, #12]
        char* new_pool = (char*)node_to_alloc->pool;
 8017848:	6818      	ldr	r0, [r3, #0]
        for (int i = 0; i < node_to_alloc->size; i++) new_pool[i] = 0;
 801784a:	b154      	cbz	r4, 8017862 <tMempool_init+0xae>
 801784c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8017850:	4664      	mov	r4, ip
 8017852:	f80c 7f01 	strb.w	r7, [ip, #1]!
 8017856:	68de      	ldr	r6, [r3, #12]
 8017858:	3402      	adds	r4, #2
 801785a:	1a24      	subs	r4, r4, r0
 801785c:	42a6      	cmp	r6, r4
 801785e:	d8f7      	bhi.n	8017850 <tMempool_init+0x9c>
    return node_to_alloc->pool;
 8017860:	6818      	ldr	r0, [r3, #0]
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 8017862:	f8ca 0000 	str.w	r0, [sl]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 8017866:	2410      	movs	r4, #16
    m->leaf = mm->leaf;
 8017868:	686b      	ldr	r3, [r5, #4]
 801786a:	6043      	str	r3, [r0, #4]
    pool->leaf->header_size = mpool_align(sizeof(mpool_node_t));
 801786c:	635c      	str	r4, [r3, #52]	; 0x34
    pool->usize  = 0;
 801786e:	2400      	movs	r4, #0
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017870:	6843      	ldr	r3, [r0, #4]
    pool->mpool = (char*)memory;
 8017872:	6081      	str	r1, [r0, #8]
    pool->usize  = 0;
 8017874:	e9c0 4203 	strd	r4, r2, [r0, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801787a:	1ad2      	subs	r2, r2, r3
    node->pool = block_location + header_size;
 801787c:	440b      	add	r3, r1
    node->prev = prev;
 801787e:	e9c1 4401 	strd	r4, r4, [r1, #4]
    node->pool = block_location + header_size;
 8017882:	600b      	str	r3, [r1, #0]
    node->size = size;
 8017884:	60ca      	str	r2, [r1, #12]
    pool->head = create_node(pool->mpool, NULL, NULL, pool->msize - pool->leaf->header_size, pool->leaf->header_size);
 8017886:	6141      	str	r1, [r0, #20]
}
 8017888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        node_to_alloc->size += leftover;
 801788c:	60dc      	str	r4, [r3, #12]
        new_node = node_to_alloc->next;
 801788e:	685c      	ldr	r4, [r3, #4]
 8017890:	e7bd      	b.n	801780e <tMempool_init+0x5a>
            if ((pool->msize - pool->usize) > asize)
 8017892:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 8017896:	6868      	ldr	r0, [r5, #4]
            if ((pool->msize - pool->usize) > asize)
 8017898:	1a52      	subs	r2, r2, r1
 801789a:	2a18      	cmp	r2, #24
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 801789c:	bf94      	ite	ls
 801789e:	4619      	movls	r1, r3
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolFragmentation);
 80178a0:	2101      	movhi	r1, #1
                LEAF_internalErrorCallback(pool->leaf, LEAFMempoolOverrun);
 80178a2:	f005 fd7b 	bl	801d39c <LEAF_internalErrorCallback>
    _tMempool* m = *mp = (_tMempool*) mpool_alloc(sizeof(_tMempool), mm);
 80178a6:	2300      	movs	r3, #0
 80178a8:	f8ca 3000 	str.w	r3, [sl]
    m->leaf = mm->leaf;
 80178ac:	686a      	ldr	r2, [r5, #4]
 80178ae:	605a      	str	r2, [r3, #4]
 80178b0:	deff      	udf	#255	; 0xff
 80178b2:	bf00      	nop

080178b4 <tCycle_init>:


#if LEAF_INCLUDE_SINE_TABLE
// Cycle
void    tCycle_init(tCycle* const cy, LEAF* const leaf)
{
 80178b4:	b538      	push	{r3, r4, r5, lr}
    tCycle_initToPool(cy, &leaf->mempool);
}

void    tCycle_initToPool   (tCycle* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 80178b6:	698c      	ldr	r4, [r1, #24]
{
 80178b8:	4605      	mov	r5, r0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80178ba:	2018      	movs	r0, #24
 80178bc:	4621      	mov	r1, r4
 80178be:	f7ff feb7 	bl	8017630 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 80178c2:	2300      	movs	r3, #0
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 80178c4:	6028      	str	r0, [r5, #0]
    c->phase    =  0;
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
    c->mask = SINE_TABLE_SIZE - 1;
 80178c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
    c->mempool = m;
 80178ca:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 80178cc:	6861      	ldr	r1, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80178ce:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80178e8 <tCycle_init+0x34>
    c->phase    =  0;
 80178d2:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80178d6:	edd1 7a01 	vldr	s15, [r1, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 80178da:	6142      	str	r2, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 80178dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80178e0:	edc0 7a04 	vstr	s15, [r0, #16]
}
 80178e4:	bd38      	pop	{r3, r4, r5, pc}
 80178e6:	bf00      	nop
 80178e8:	4f800000 	.word	0x4f800000

080178ec <tCycle_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tCycle_tick(tCycle* const cy)
{
    _tCycle* c = *cy;
 80178ec:	6800      	ldr	r0, [r0, #0]
    c->phase += c->inc;
    // Wavetable synthesis
    idx = c->phase >> 21; //11 bit table 
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
    
    samp0 = __leaf_table_sinewave[idx];
 80178ee:	4910      	ldr	r1, [pc, #64]	; (8017930 <tCycle_tick+0x44>)
    idx = (idx + 1) & c->mask;
    samp1 = __leaf_table_sinewave[idx];
    
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 80178f0:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8017934 <tCycle_tick+0x48>
    c->phase += c->inc;
 80178f4:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 80178f8:	4413      	add	r3, r2
    idx = c->phase >> 21; //11 bit table 
 80178fa:	0d5a      	lsrs	r2, r3, #21
    c->phase += c->inc;
 80178fc:	6043      	str	r3, [r0, #4]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 80178fe:	f3c3 0314 	ubfx	r3, r3, #0, #21
    idx = (idx + 1) & c->mask;
 8017902:	6940      	ldr	r0, [r0, #20]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 8017904:	ee07 3a90 	vmov	s15, r3
    samp0 = __leaf_table_sinewave[idx];
 8017908:	eb01 0382 	add.w	r3, r1, r2, lsl #2
    idx = (idx + 1) & c->mask;
 801790c:	3201      	adds	r2, #1
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801790e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    samp0 = __leaf_table_sinewave[idx];
 8017912:	ed93 0a00 	vldr	s0, [r3]
    idx = (idx + 1) & c->mask;
 8017916:	4002      	ands	r2, r0
    samp1 = __leaf_table_sinewave[idx];
 8017918:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801791c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8017920:	ed92 7a00 	vldr	s14, [r2]
 8017924:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 8017928:	eea7 0a27 	vfma.f32	s0, s14, s15
 801792c:	4770      	bx	lr
 801792e:	bf00      	nop
 8017930:	08027574 	.word	0x08027574
 8017934:	35000004 	.word	0x35000004

08017938 <tCycle_setFreq>:

void     tCycle_setFreq(tCycle* const cy, float freq)
{
    _tCycle* c = *cy;
 8017938:	6803      	ldr	r3, [r0, #0]
    
    //if (!isfinite(freq)) return;
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801793a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 801793e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 8017942:	ee20 0a27 	vmul.f32	s0, s0, s15
 8017946:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801794a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801794e:	4770      	bx	lr

08017950 <tCycle_setPhase>:

void    tCycle_setPhase(tCycle* const cy, float phase)
{
    _tCycle* c = *cy;
    
    int i = phase;
 8017950:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 8017954:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8017970 <tCycle_setPhase+0x20>
    _tCycle* c = *cy;
 8017958:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801795a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801795e:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 8017962:	ee20 0a07 	vmul.f32	s0, s0, s14
 8017966:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801796a:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801796e:	4770      	bx	lr
 8017970:	4f800000 	.word	0x4f800000

08017974 <tNoise_init>:
};

//========================================================================
/* Noise */
void    tNoise_init(tNoise* const ns, NoiseType type, LEAF* const leaf)
{
 8017974:	b570      	push	{r4, r5, r6, lr}
    tNoise_initToPool(ns, type, &leaf->mempool);
}

void    tNoise_initToPool   (tNoise* const ns, NoiseType type, tMempool* const mp)
{
    _tMempool* m = *mp;
 8017976:	6995      	ldr	r5, [r2, #24]
{
 8017978:	4606      	mov	r6, r0
 801797a:	460c      	mov	r4, r1
    _tNoise* n = *ns = (_tNoise*) mpool_alloc(sizeof(_tNoise), m);
 801797c:	2018      	movs	r0, #24
 801797e:	4629      	mov	r1, r5
 8017980:	f7ff fe56 	bl	8017630 <mpool_alloc>
 8017984:	6030      	str	r0, [r6, #0]
    n->mempool = m;
 8017986:	6005      	str	r5, [r0, #0]
    LEAF* leaf = n->mempool->leaf;
 8017988:	686b      	ldr	r3, [r5, #4]
    
    n->type = type;
 801798a:	7104      	strb	r4, [r0, #4]
    n->rand = leaf->random;
 801798c:	691b      	ldr	r3, [r3, #16]
 801798e:	6143      	str	r3, [r0, #20]
}
 8017990:	bd70      	pop	{r4, r5, r6, pc}
 8017992:	bf00      	nop

08017994 <tNoise_tick>:
    
    mpool_free((char*)n, n->mempool);
}

float   tNoise_tick(tNoise* const ns)
{
 8017994:	b510      	push	{r4, lr}
    _tNoise* n = *ns;
 8017996:	6804      	ldr	r4, [r0, #0]
    
    float rand = (n->rand() * 2.0f) - 1.0f;
 8017998:	6963      	ldr	r3, [r4, #20]
 801799a:	4798      	blx	r3
    
    if (n->type == PinkNoise)
 801799c:	7923      	ldrb	r3, [r4, #4]
    float rand = (n->rand() * 2.0f) - 1.0f;
 801799e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80179a2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
    if (n->type == PinkNoise)
 80179a6:	2b01      	cmp	r3, #1
    float rand = (n->rand() * 2.0f) - 1.0f;
 80179a8:	eee0 7a07 	vfma.f32	s15, s0, s14
    if (n->type == PinkNoise)
 80179ac:	d12f      	bne.n	8017a0e <tNoise_tick+0x7a>
    {
        float tmp;
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80179ae:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8017a14 <tNoise_tick+0x80>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80179b2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8017a18 <tNoise_tick+0x84>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80179b6:	ee27 6a86 	vmul.f32	s12, s15, s12
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80179ba:	ed94 5a03 	vldr	s10, [r4, #12]
 80179be:	ee67 6aa6 	vmul.f32	s13, s15, s13
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80179c2:	edd4 3a02 	vldr	s7, [r4, #8]
 80179c6:	eddf 4a15 	vldr	s9, [pc, #84]	; 8017a1c <tNoise_tick+0x88>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80179ca:	eddf 5a15 	vldr	s11, [pc, #84]	; 8017a20 <tNoise_tick+0x8c>
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80179ce:	eea3 6aa4 	vfma.f32	s12, s7, s9
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80179d2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8017a24 <tNoise_tick+0x90>
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80179d6:	eee5 6a25 	vfma.f32	s13, s10, s11
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80179da:	ed94 4a04 	vldr	s8, [r4, #16]
 80179de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80179e2:	eddf 4a11 	vldr	s9, [pc, #68]	; 8017a28 <tNoise_tick+0x94>
 80179e6:	ed9f 5a11 	vldr	s10, [pc, #68]	; 8017a2c <tNoise_tick+0x98>
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
        return (tmp * 0.05f);
 80179ea:	eddf 5a11 	vldr	s11, [pc, #68]	; 8017a30 <tNoise_tick+0x9c>
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80179ee:	eea4 7a24 	vfma.f32	s14, s8, s9
        n->pinkb0 = 0.99765f * n->pinkb0 + rand * 0.0990460f;
 80179f2:	ed84 6a02 	vstr	s12, [r4, #8]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 80179f6:	ee36 0a26 	vadd.f32	s0, s12, s13
        n->pinkb1 = 0.96300f * n->pinkb1 + rand * 0.2965164f;
 80179fa:	edc4 6a03 	vstr	s13, [r4, #12]
        n->pinkb2 = 0.57000f * n->pinkb2 + rand * 1.0526913f;
 80179fe:	eea7 0a85 	vfma.f32	s0, s15, s10
 8017a02:	ed84 7a04 	vstr	s14, [r4, #16]
        tmp = n->pinkb0 + n->pinkb1 + n->pinkb2 + rand * 0.1848f;
 8017a06:	ee77 7a00 	vadd.f32	s15, s14, s0
        return (tmp * 0.05f);
 8017a0a:	ee67 7aa5 	vmul.f32	s15, s15, s11
    }
    else // WhiteNoise
    {
        return rand;
    }
}
 8017a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8017a12:	bd10      	pop	{r4, pc}
 8017a14:	3dcad8a1 	.word	0x3dcad8a1
 8017a18:	3e97d0ff 	.word	0x3e97d0ff
 8017a1c:	3f7f65fe 	.word	0x3f7f65fe
 8017a20:	3f76872b 	.word	0x3f76872b
 8017a24:	3f86be97 	.word	0x3f86be97
 8017a28:	3f11eb85 	.word	0x3f11eb85
 8017a2c:	3e3d3c36 	.word	0x3e3d3c36
 8017a30:	3d4ccccd 	.word	0x3d4ccccd

08017a34 <tMBPulse_init>:
}

//----------------------------------------------------------------------------------------------------------

void tMBPulse_init(tMBPulse* const osc, LEAF* const leaf)
{
 8017a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBPulse_initToPool(osc, &leaf->mempool);
}
                          
void tMBPulse_initToPool(tMBPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 8017a36:	698e      	ldr	r6, [r1, #24]
{
 8017a38:	4607      	mov	r7, r0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8017a3a:	f44f 703b 	mov.w	r0, #748	; 0x2ec

    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8017a3e:	2500      	movs	r5, #0
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8017a40:	4631      	mov	r1, r6
 8017a42:	f7ff fdf5 	bl	8017630 <mpool_alloc>
 8017a46:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8017a48:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8017a4a:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8017a4c:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8017a4e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8017a52:	ed9f 6a19 	vldr	s12, [pc, #100]	; 8017ab8 <tMBPulse_init+0x84>
    _tMBPulse* c = *osc = (_tMBPulse*) mpool_alloc(sizeof(_tMBPulse), m);
 8017a56:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8017a58:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017a5c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->freq = 440.f;
 8017a60:	eddf 7a16 	vldr	s15, [pc, #88]	; 8017abc <tMBPulse_init+0x88>
    c->_inv_w = 1.0f / c->_w;
 8017a64:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8017a68:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8017a6a:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8017a6e:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8017a70:	6181      	str	r1, [r0, #24]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017a72:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 8017a74:	ed80 7aba 	vstr	s14, [r0, #744]	; 0x2e8
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017a78:	f44f 5090 	mov.w	r0, #4608	; 0x1200
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017a7c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8017a80:	62a2      	str	r2, [r4, #40]	; 0x28
    c->_x = 0.5f;  /* temporary output variable */
 8017a82:	62e2      	str	r2, [r4, #44]	; 0x2c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017a84:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8017a86:	f8a4 0064 	strh.w	r0, [r4, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017a8a:	f104 0066 	add.w	r0, r4, #102	; 0x66
    c->softsync = 0;
 8017a8e:	61e5      	str	r5, [r4, #28]
    c->waveform = 0.0f;
 8017a90:	60e3      	str	r3, [r4, #12]
    c->_z = 0.0f;
 8017a92:	6323      	str	r3, [r4, #48]	; 0x30
    c->_j = 0;
 8017a94:	63a5      	str	r5, [r4, #56]	; 0x38
    c->_p = 0.0f;  /* phase [0, 1) */
 8017a96:	6223      	str	r3, [r4, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8017a98:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017a9c:	63e5      	str	r5, [r4, #60]	; 0x3c
    c->numBLEPs = 0;
 8017a9e:	6625      	str	r5, [r4, #96]	; 0x60
    c->_inv_w = 1.0f / c->_w;
 8017aa0:	edc4 6a0d 	vstr	s13, [r4, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8017aa4:	f005 fd16 	bl	801d4d4 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8017aa8:	4629      	mov	r1, r5
 8017aaa:	f104 0040 	add.w	r0, r4, #64	; 0x40
 8017aae:	2220      	movs	r2, #32
}
 8017ab0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8017ab4:	f005 bd0e 	b.w	801d4d4 <memset>
 8017ab8:	3b14f209 	.word	0x3b14f209
 8017abc:	43dc0000 	.word	0x43dc0000

08017ac0 <tMBPulse_tick>:
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}


float tMBPulse_tick(tMBPulse* const osc)
{
 8017ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ac4:	ed2d 8b0c 	vpush	{d8-d13}
    _tMBPulse* c = *osc;
 8017ac8:	6804      	ldr	r4, [r0, #0]
{
 8017aca:	b083      	sub	sp, #12
 8017acc:	4605      	mov	r5, r0
    
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    
    sync = c->sync;
 8017ace:	ed94 8a05 	vldr	s16, [r4, #20]


    p = c->_p;  /* phase [0, 1) */
 8017ad2:	ed94 7a08 	vldr	s14, [r4, #32]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017ad6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    w = c->_w;  /* phase increment */
 8017ada:	ed94 aa09 	vldr	s20, [r4, #36]	; 0x24
    b = c->_b;  /* duty cycle (0, 1) */
 8017ade:	edd4 aa0a 	vldr	s21, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 8017ae2:	edd4 5a0b 	vldr	s11, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    z = c->_z;  /* low pass filter state */
 8017aea:	edd4 9a0c 	vldr	s19, [r4, #48]	; 0x30
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017aee:	e9d4 670e 	ldrd	r6, r7, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017af2:	f340 80f9 	ble.w	8017ce8 <tMBPulse_tick+0x228>
 8017af6:	f8d4 901c 	ldr.w	r9, [r4, #28]
 8017afa:	f1b9 0f00 	cmp.w	r9, #0
 8017afe:	f340 80bd 	ble.w	8017c7c <tMBPulse_tick+0x1bc>
 8017b02:	edd4 6a06 	vldr	s13, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 8017b06:	ed94 9a0d 	vldr	s18, [r4, #52]	; 0x34
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b0a:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 8017b0e:	ee66 7a8a 	vmul.f32	s15, s13, s20
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8017b12:	edc4 6a06 	vstr	s13, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017b16:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 8017b1a:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017b1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8017b22:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017b26:	ee37 8a48 	vsub.f32	s16, s14, s16
                x = 0.5f;
            }
        }
    } else if (!k) {  /* normal operation, signal currently high */
        
        if (sw > 0)
 8017b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    } else if (!k) {  /* normal operation, signal currently high */
 8017b2e:	2f00      	cmp	r7, #0
 8017b30:	f040 80ef 	bne.w	8017d12 <tMBPulse_tick+0x252>
        if (sw > 0)
 8017b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b38:	f340 81a4 	ble.w	8017e84 <tMBPulse_tick+0x3c4>
        {
            if (p >= b) {
 8017b3c:	eef4 aac8 	vcmpe.f32	s21, s16
 8017b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b44:	f240 8162 	bls.w	8017e0c <tMBPulse_tick+0x34c>
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8017b48:	463b      	mov	r3, r7
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
                k = 1;
                x = -0.5f;
            }
            if (p >= 1.0f) {
 8017b4a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017b4e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017b52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b56:	f280 8276 	bge.w	8018046 <tMBPulse_tick+0x586>
 8017b5a:	461f      	mov	r7, r3
                x = -0.5f;
            }
        }
    }

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8017b5c:	1d33      	adds	r3, r6, #4
 8017b5e:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 8017b62:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8017b66:	edc3 5a10 	vstr	s11, [r3, #64]	; 0x40

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8017b6a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 8017b6e:	f88d 3005 	strb.w	r3, [sp, #5]
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017b72:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	f000 8229 	beq.w	8017fce <tMBPulse_tick+0x50e>
 8017b7c:	eb04 0986 	add.w	r9, r4, r6, lsl #2
	{
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017b80:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

		//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017b84:	f8b4 e064 	ldrh.w	lr, [r4, #100]	; 0x64
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017b88:	f04f 0c00 	mov.w	ip, #0
 8017b8c:	ed99 7a10 	vldr	s14, [r9, #64]	; 0x40
 8017b90:	4db9      	ldr	r5, [pc, #740]	; (8017e78 <tMBPulse_tick+0x3b8>)
		volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8017b92:	eba8 030c 	sub.w	r3, r8, ip
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	f8ad 3006 	strh.w	r3, [sp, #6]
		whichBLEP &= 63;
 8017b9c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8017ba0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ba4:	f8ad 3006 	strh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017ba8:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 8017bac:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8017bb0:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8017bb4:	b289      	uxth	r1, r1
 8017bb6:	f8bd a006 	ldrh.w	sl, [sp, #6]
 8017bba:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017bbc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017bc0:	b280      	uxth	r0, r0
 8017bc2:	fa1f fa8a 	uxth.w	sl, sl
 8017bc6:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8017bca:	eb04 0a4a 	add.w	sl, r4, sl, lsl #1
 8017bce:	f8b2 b066 	ldrh.w	fp, [r2, #102]	; 0x66
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017bd2:	b29b      	uxth	r3, r3
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017bd4:	f8ba a066 	ldrh.w	sl, [sl, #102]	; 0x66
 8017bd8:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8017bdc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017be0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017be4:	eb05 0bcb 	add.w	fp, r5, fp, lsl #3
 8017be8:	ed90 6a3a 	vldr	s12, [r0, #232]	; 0xe8
 8017bec:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017bf0:	f8b3 0066 	ldrh.w	r0, [r3, #102]	; 0x66
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017bf4:	eddb 7a00 	vldr	s15, [fp]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017bf8:	b292      	uxth	r2, r2
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017bfa:	edda 6a01 	vldr	s13, [sl, #4]
 8017bfe:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017c02:	3040      	adds	r0, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017c04:	eb04 0242 	add.w	r2, r4, r2, lsl #1
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017c08:	eee6 7a26 	vfma.f32	s15, s12, s13
 8017c0c:	edd1 6a3b 	vldr	s13, [r1, #236]	; 0xec
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8017c10:	f8a3 0066 	strh.w	r0, [r3, #102]	; 0x66
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017c14:	f8b2 3066 	ldrh.w	r3, [r2, #102]	; 0x66
 8017c18:	4573      	cmp	r3, lr
		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8017c1a:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8017c1e:	f0c0 80e8 	bcc.w	8017df2 <tMBPulse_tick+0x332>
		{
			c->numBLEPs--;
 8017c22:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017c26:	f10c 0c01 	add.w	ip, ip, #1
 8017c2a:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 8017c2e:	3b01      	subs	r3, #1
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017c30:	4594      	cmp	ip, r2
			c->numBLEPs--;
 8017c32:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017c36:	dbac      	blt.n	8017b92 <tMBPulse_tick+0xd2>
 8017c38:	ed89 7a10 	vstr	s14, [r9, #64]	; 0x40
		}

	}

    z += 0.5f * (c->_f[j] - z);
 8017c3c:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;

    j = (j+1) & 7;
 8017c40:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z);
 8017c42:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 8017c46:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8017c4a:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7;
 8017c4e:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 8017c52:	ed84 aa09 	vstr	s20, [r4, #36]	; 0x24
    c->_b = b;
 8017c56:	edc4 aa0a 	vstr	s21, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8017c5a:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 8017c5e:	edc4 5a0b 	vstr	s11, [r4, #44]	; 0x2c
    c->_z = z;
    c->_j = j;
 8017c62:	e9c4 670e 	strd	r6, r7, [r4, #56]	; 0x38
    c->_k = k;
    
    return -c->out;
 8017c66:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8017c6a:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8017c6e:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 8017c72:	b003      	add	sp, #12
 8017c74:	ecbd 8b0c 	vpop	{d8-d13}
 8017c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    sw = w * c->syncdir;
 8017c7c:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017c80:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8017c84:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8017c88:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8017c8c:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 8017c90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8017c94:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 8017c98:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8017c9c:	f040 8457 	bne.w	801854e <tMBPulse_tick+0xa8e>
        if (sw > 0) p = eof_offset;
 8017ca0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8017ca4:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8017ca6:	ee28 8a27 	vmul.f32	s16, s16, s15
        if (sw > 0) p = eof_offset;
 8017caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8017cae:	ee38 bac8 	vsub.f32	s22, s17, s16
        if (sw > 0) p = eof_offset;
 8017cb2:	f340 80a6 	ble.w	8017e02 <tMBPulse_tick+0x342>
        if (!k) {
 8017cb6:	2f00      	cmp	r7, #0
 8017cb8:	f040 818e 	bne.w	8017fd8 <tMBPulse_tick+0x518>
                if (p_at_reset >= b) {
 8017cbc:	eef4 aacb 	vcmpe.f32	s21, s22
 8017cc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cc4:	f240 8310 	bls.w	80182e8 <tMBPulse_tick+0x828>
                if (p_at_reset >= 1.0f) {
 8017cc8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8017ccc:	eeb4 bae7 	vcmpe.f32	s22, s15
 8017cd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cd4:	f280 81f1 	bge.w	80180ba <tMBPulse_tick+0x5fa>
            if (p >= b) {
 8017cd8:	eef4 aac8 	vcmpe.f32	s21, s16
 8017cdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ce0:	f240 81e1 	bls.w	80180a6 <tMBPulse_tick+0x5e6>
 8017ce4:	464f      	mov	r7, r9
 8017ce6:	e739      	b.n	8017b5c <tMBPulse_tick+0x9c>
    sw = w * c->syncdir;
 8017ce8:	ed94 9a06 	vldr	s18, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8017cec:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
    sw = w * c->syncdir;
 8017cf0:	ee6a 7a09 	vmul.f32	s15, s20, s18
    float inv_sw = c->_inv_w * c->syncdir;
 8017cf4:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 8017cf8:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 8017cfc:	ee37 7a87 	vadd.f32	s14, s15, s14
        if (sw > 0)
 8017d00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 8017d04:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8017d08:	ee37 8a48 	vsub.f32	s16, s14, s16
    } else if (!k) {  /* normal operation, signal currently high */
 8017d0c:	2f00      	cmp	r7, #0
 8017d0e:	f43f af11 	beq.w	8017b34 <tMBPulse_tick+0x74>
        if (sw > 0)
 8017d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d16:	f340 8129 	ble.w	8017f6c <tMBPulse_tick+0x4ac>
            if (p >= 1.0f) {
 8017d1a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017d1e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d26:	f6ff af19 	blt.w	8017b5c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017d2a:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8017d2e:	eddf 7a54 	vldr	s15, [pc, #336]	; 8017e80 <tMBPulse_tick+0x3c0>
                p -= 1.0f;
 8017d32:	ee38 8a68 	vsub.f32	s16, s16, s17
	_tMBPulse* c = *osc;
 8017d36:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017d38:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8017d3c:	eeb0 0a4b 	vmov.f32	s0, s22
 8017d40:	eea8 0a09 	vfma.f32	s0, s16, s18
 8017d44:	f005 ffe8 	bl	801dd18 <lrintf>
	r -= (float)i;
 8017d48:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d4c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017d50:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d58:	3301      	adds	r3, #1
            if (!k && p >= b) {
 8017d5a:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d5e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017d62:	eed8 7a09 	vfnms.f32	s15, s16, s18
            if (!k && p >= b) {
 8017d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d6a:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017d6e:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017d72:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017d76:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 8017d7a:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017d7e:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017d82:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8017d86:	f103 0301 	add.w	r3, r3, #1
 8017d8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017d8e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
            if (!k && p >= b) {
 8017d92:	f200 8306 	bhi.w	80183a2 <tMBPulse_tick+0x8e2>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8017d96:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 8017d9a:	682d      	ldr	r5, [r5, #0]
	i = lrintf(r - 0.5f);
 8017d9c:	eeb0 0a4b 	vmov.f32	s0, s22
 8017da0:	eea8 0a89 	vfma.f32	s0, s17, s18
 8017da4:	f005 ffb8 	bl	801dd18 <lrintf>
	r -= (float)i;
 8017da8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dac:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
                x = -0.5f;
 8017db0:	eef0 5a4b 	vmov.f32	s11, s22
	r -= (float)i;
 8017db4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017db8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dbc:	3301      	adds	r3, #1
	r -= (float)i;
 8017dbe:	eed8 7a89 	vfnms.f32	s15, s17, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017dc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dc6:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017dca:	eb05 0143 	add.w	r1, r5, r3, lsl #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017dce:	4a2b      	ldr	r2, [pc, #172]	; (8017e7c <tMBPulse_tick+0x3bc>)
                k = 1;
 8017dd0:	2701      	movs	r7, #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017dd2:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017dd6:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 8017dda:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017dde:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017de2:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017de6:	443b      	add	r3, r7
 8017de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dec:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017df0:	e6b4      	b.n	8017b5c <tMBPulse_tick+0x9c>
	for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8017df2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8017df6:	f10c 0c01 	add.w	ip, ip, #1
 8017dfa:	4563      	cmp	r3, ip
 8017dfc:	f73f aec9 	bgt.w	8017b92 <tMBPulse_tick+0xd2>
 8017e00:	e71a      	b.n	8017c38 <tMBPulse_tick+0x178>
        else if (sw < 0) p = 1.0f - eof_offset;
 8017e02:	f100 81be 	bmi.w	8018182 <tMBPulse_tick+0x6c2>
    p += sw - (int)sw;
 8017e06:	eeb0 8a68 	vmov.f32	s16, s17
 8017e0a:	e6a7      	b.n	8017b5c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017e0c:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8017e10:	eddf 8a1b 	vldr	s17, [pc, #108]	; 8017e80 <tMBPulse_tick+0x3c0>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 8017e14:	ee38 ba6a 	vsub.f32	s22, s16, s21
	_tMBPulse* c = *osc;
 8017e18:	f8d5 8000 	ldr.w	r8, [r5]
	r = MINBLEP_PHASES * phase * inv_w;
 8017e1c:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017e20:	eeb0 0a6b 	vmov.f32	s0, s23
 8017e24:	eeab 0a28 	vfma.f32	s0, s22, s17
 8017e28:	f005 ff76 	bl	801dd18 <lrintf>
	r -= (float)i;
 8017e2c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e30:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017e34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017e3c:	4a0f      	ldr	r2, [pc, #60]	; (8017e7c <tMBPulse_tick+0x3bc>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e3e:	3301      	adds	r3, #1
                x = -0.5f;
 8017e40:	eef0 5a6b 	vmov.f32	s11, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017e48:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e4c:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017e50:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017e54:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017e58:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017e5c:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017e60:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017e64:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017e68:	3301      	adds	r3, #1
 8017e6a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017e6e:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                k = 1;
 8017e72:	2301      	movs	r3, #1
}
 8017e74:	e669      	b.n	8017b4a <tMBPulse_tick+0x8a>
 8017e76:	bf00      	nop
 8017e78:	0802dcf8 	.word	0x0802dcf8
 8017e7c:	bf800000 	.word	0xbf800000
 8017e80:	42800000 	.word	0x42800000
            if (p < 0.0f) {
 8017e84:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e8c:	f57f ae66 	bpl.w	8017b5c <tMBPulse_tick+0x9c>
 8017e90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8017e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017e98:	f57f ae60 	bpl.w	8017b5c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017e9c:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 8017ea0:	ed5f 8a09 	vldr	s17, [pc, #-36]	; 8017e80 <tMBPulse_tick+0x3c0>
	r = MINBLEP_PHASES * phase * inv_w;
 8017ea4:	ee28 ca09 	vmul.f32	s24, s16, s18
	_tMBPulse* c = *osc;
 8017ea8:	f8d5 8000 	ldr.w	r8, [r5]
                p += 1.0f;
 8017eac:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017eb0:	eeb0 0a6b 	vmov.f32	s0, s23
                p += 1.0f;
 8017eb4:	ee38 8a0b 	vadd.f32	s16, s16, s22
	i = lrintf(r - 0.5f);
 8017eb8:	eeac 0a28 	vfma.f32	s0, s24, s17
 8017ebc:	f005 ff2c 	bl	801dd18 <lrintf>
	r -= (float)i;
 8017ec0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ec4:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017ec8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ed0:	4ad0      	ldr	r2, [pc, #832]	; (8018214 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ed2:	3301      	adds	r3, #1
            if (k && p < b) {
 8017ed4:	eef4 aac8 	vcmpe.f32	s21, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017edc:	eedc 7a28 	vfnms.f32	s15, s24, s17
            if (k && p < b) {
 8017ee0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017ee4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017ee8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017eec:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017ef0:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 8017ef4:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017ef8:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017efc:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8017f00:	f103 0301 	add.w	r3, r3, #1
 8017f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f08:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (k && p < b) {
 8017f0c:	f340 8323 	ble.w	8018556 <tMBPulse_tick+0xa96>
	_tMBPulse* c = *osc;
 8017f10:	ee38 ca6a 	vsub.f32	s24, s16, s21
 8017f14:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8017f16:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 8017f1a:	eeb0 0a6b 	vmov.f32	s0, s23
 8017f1e:	eea8 0a8c 	vfma.f32	s0, s17, s24
 8017f22:	f005 fef9 	bl	801dd18 <lrintf>
	r -= (float)i;
 8017f26:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f2a:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017f2e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017f32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f36:	3301      	adds	r3, #1
                x = 0.5f;
 8017f38:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017f40:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f44:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017f48:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8017f4c:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8017f50:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 8017f54:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8017f58:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8017f5c:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 8017f60:	3301      	adds	r3, #1
 8017f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017f66:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8017f6a:	e5f7      	b.n	8017b5c <tMBPulse_tick+0x9c>
        else if (sw < 0)
 8017f6c:	f57f adf6 	bpl.w	8017b5c <tMBPulse_tick+0x9c>
            if (p < b) {
 8017f70:	eef4 aac8 	vcmpe.f32	s21, s16
 8017f74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f78:	f300 80d0 	bgt.w	801811c <tMBPulse_tick+0x65c>
            if (p < 0.0f) {
 8017f7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f84:	f57f adea 	bpl.w	8017b5c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8017f88:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
 8017f8c:	eddf 8aa2 	vldr	s17, [pc, #648]	; 8018218 <tMBPulse_tick+0x758>
	r = MINBLEP_PHASES * phase * inv_w;
 8017f90:	ee28 9a09 	vmul.f32	s18, s16, s18
	_tMBPulse* c = *osc;
 8017f94:	682d      	ldr	r5, [r5, #0]
                p += 1.0f;
 8017f96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8017f9a:	eeb0 0a4b 	vmov.f32	s0, s22
                p += 1.0f;
 8017f9e:	ee38 8a27 	vadd.f32	s16, s16, s15
	i = lrintf(r - 0.5f);
 8017fa2:	eea9 0a28 	vfma.f32	s0, s18, s17
 8017fa6:	f005 feb7 	bl	801dd18 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017faa:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	r -= (float)i;
 8017fae:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 8017fb2:	eef0 5a4b 	vmov.f32	s11, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fb6:	3301      	adds	r3, #1
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8017fb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8017fbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8017fc4:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8017fc8:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
 8017fcc:	e6fd      	b.n	8017dca <tMBPulse_tick+0x30a>
    z += 0.5f * (c->_f[j] - z);
 8017fce:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017fd2:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8017fd6:	e631      	b.n	8017c3c <tMBPulse_tick+0x17c>
                if (p_at_reset >= 1.0f) {
 8017fd8:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8017fdc:	eeb4 bae8 	vcmpe.f32	s22, s17
 8017fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017fe4:	f280 811a 	bge.w	801821c <tMBPulse_tick+0x75c>
 8017fe8:	eddf ba8b 	vldr	s23, [pc, #556]	; 8018218 <tMBPulse_tick+0x758>
 8017fec:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 8017ff0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8017ff4:	eea8 0a2b 	vfma.f32	s0, s16, s23
 8017ff8:	f005 fe8e 	bl	801dd18 <lrintf>
	r -= (float)i;
 8017ffc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018000:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018004:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801800c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018010:	3301      	adds	r3, #1
                x = 0.5f;
 8018012:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801801a:	eed8 7a2b 	vfnms.f32	s15, s16, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 801801e:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018022:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018026:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801802a:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 801802e:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018032:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018036:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 801803a:	3301      	adds	r3, #1
 801803c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018040:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
}
 8018044:	e648      	b.n	8017cd8 <tMBPulse_tick+0x218>
                p -= 1.0f;
 8018046:	eddf 7a74 	vldr	s15, [pc, #464]	; 8018218 <tMBPulse_tick+0x758>
 801804a:	ee38 8a68 	vsub.f32	s16, s16, s17
	i = lrintf(r - 0.5f);
 801804e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8018052:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 8018054:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 8018058:	eea9 0a08 	vfma.f32	s0, s18, s16
 801805c:	f005 fe5c 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018060:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018064:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018068:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801806c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018070:	3301      	adds	r3, #1
                x = 0.5f;
 8018072:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801807a:	eed9 7a08 	vfnms.f32	s15, s18, s16
	c->BLEPindices[c->mostRecentBLEP] = i;
 801807e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018082:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018086:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801808a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801808e:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018092:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018096:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801809a:	3301      	adds	r3, #1
 801809c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80180a0:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 80180a4:	e55a      	b.n	8017b5c <tMBPulse_tick+0x9c>
            	tMBPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f);
 80180a6:	eddf 7a5c 	vldr	s15, [pc, #368]	; 8018218 <tMBPulse_tick+0x758>
 80180aa:	ee78 8a6a 	vsub.f32	s17, s16, s21
	i = lrintf(r - 0.5f);
 80180ae:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 80180b2:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80180b4:	ee29 9a27 	vmul.f32	s18, s18, s15
	i = lrintf(r - 0.5f);
 80180b8:	e670      	b.n	8017d9c <tMBPulse_tick+0x2dc>
 80180ba:	eddf ba57 	vldr	s23, [pc, #348]	; 8018218 <tMBPulse_tick+0x758>
 80180be:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 80180c2:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 80180c6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 80180ca:	ee78 8acb 	vsub.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 80180ce:	eea8 0aab 	vfma.f32	s0, s17, s23
 80180d2:	f005 fe21 	bl	801dd18 <lrintf>
	r -= (float)i;
 80180d6:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180da:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80180de:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80180e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180e6:	3301      	adds	r3, #1
                    x = 0.5f;
 80180e8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80180f0:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 80180f4:	eb08 0243 	add.w	r2, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80180f8:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80180fc:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018100:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8018104:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018108:	ed82 ba3b 	vstr	s22, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801810c:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8018110:	3301      	adds	r3, #1
 8018112:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018116:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
        if (sw > 0)
 801811a:	e5dd      	b.n	8017cd8 <tMBPulse_tick+0x218>
	_tMBPulse* c = *osc;
 801811c:	eddf 8a3e 	vldr	s17, [pc, #248]	; 8018218 <tMBPulse_tick+0x758>
 8018120:	ee38 ba6a 	vsub.f32	s22, s16, s21
	i = lrintf(r - 0.5f);
 8018124:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 8018128:	682f      	ldr	r7, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801812a:	ee69 8a28 	vmul.f32	s17, s18, s17
	i = lrintf(r - 0.5f);
 801812e:	eeab 0a28 	vfma.f32	s0, s22, s17
 8018132:	f005 fdf1 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018136:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801813a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801813e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018146:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801814a:	3301      	adds	r3, #1
                x = 0.5f;
 801814c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018150:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018154:	eedb 7a28 	vfnms.f32	s15, s22, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018158:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801815c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018160:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018164:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 8018168:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801816c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018170:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8018174:	3301      	adds	r3, #1
 8018176:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801817a:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
                k = 0;
 801817e:	2700      	movs	r7, #0
}
 8018180:	e6fc      	b.n	8017f7c <tMBPulse_tick+0x4bc>
        else if (sw < 0) p = 1.0f - eof_offset;
 8018182:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8018186:	ee3c da48 	vsub.f32	s26, s24, s16
        if (!k) {
 801818a:	2f00      	cmp	r7, #0
 801818c:	f040 80e5 	bne.w	801835a <tMBPulse_tick+0x89a>
                if (p_at_reset < 0.0f) {
 8018190:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 8018194:	eddf ba20 	vldr	s23, [pc, #128]	; 8018218 <tMBPulse_tick+0x758>
 8018198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801819c:	f100 813c 	bmi.w	8018418 <tMBPulse_tick+0x958>
 80181a0:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 80181a4:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                k = 1;
 80181a8:	2701      	movs	r7, #1
 80181aa:	eeb1 ba48 	vneg.f32	s22, s16
	i = lrintf(r - 0.5f);
 80181ae:	eeb0 0a68 	vmov.f32	s0, s17
 80181b2:	eea8 0a6b 	vfms.f32	s0, s16, s23
 80181b6:	f005 fdaf 	bl	801dd18 <lrintf>
	r -= (float)i;
 80181ba:	ee07 0a90 	vmov	s15, r0
                x = -0.5f;
 80181be:	eef0 5a68 	vmov.f32	s11, s17
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80181c2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80181c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80181ca:	eedb 7a2b 	vfnms.f32	s15, s22, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181ce:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80181d2:	4a10      	ldr	r2, [pc, #64]	; (8018214 <tMBPulse_tick+0x754>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181d4:	443b      	add	r3, r7
 80181d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80181da:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80181de:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80181e2:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80181e6:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
 80181ea:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80181ee:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80181f2:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 80181f6:	443b      	add	r3, r7
 80181f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80181fc:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
            if (p < b) {
 8018200:	eef4 aacd 	vcmpe.f32	s21, s26
 8018204:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018208:	f300 80d0 	bgt.w	80183ac <tMBPulse_tick+0x8ec>
 801820c:	eeb0 8a4d 	vmov.f32	s16, s26
 8018210:	e4a4      	b.n	8017b5c <tMBPulse_tick+0x9c>
 8018212:	bf00      	nop
 8018214:	bf800000 	.word	0xbf800000
 8018218:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 801821c:	ee3b ba68 	vsub.f32	s22, s22, s17
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 8018220:	ed5f ba03 	vldr	s23, [pc, #-12]	; 8018218 <tMBPulse_tick+0x758>
	i = lrintf(r - 0.5f);
 8018224:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8018228:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801822c:	ee38 ca0b 	vadd.f32	s24, s16, s22
	i = lrintf(r - 0.5f);
 8018230:	eeb0 0a6c 	vmov.f32	s0, s25
 8018234:	eeac 0a2b 	vfma.f32	s0, s24, s23
 8018238:	f005 fd6e 	bl	801dd18 <lrintf>
	r -= (float)i;
 801823c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018240:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018244:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801824c:	3301      	adds	r3, #1
                if (!k && p_at_reset >= b) {
 801824e:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018256:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (!k && p_at_reset >= b) {
 801825a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801825e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018262:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018266:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801826a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801826e:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018272:	edc2 8a3b 	vstr	s17, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018276:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 801827a:	f103 0301 	add.w	r3, r3, #1
 801827e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018282:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (!k && p_at_reset >= b) {
 8018286:	f200 815e 	bhi.w	8018546 <tMBPulse_tick+0xa86>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 801828a:	ee78 8a6a 	vsub.f32	s17, s16, s21
	_tMBPulse* c = *osc;
 801828e:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 8018290:	eeb0 0a6c 	vmov.f32	s0, s25
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 8018294:	ee78 8a8b 	vadd.f32	s17, s17, s22
	i = lrintf(r - 0.5f);
 8018298:	eea8 0aab 	vfma.f32	s0, s17, s23
 801829c:	f005 fd3c 	bl	801dd18 <lrintf>
	r -= (float)i;
 80182a0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182a4:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80182a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80182ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80182b0:	4aad      	ldr	r2, [pc, #692]	; (8018568 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182b2:	3301      	adds	r3, #1
	r -= (float)i;
 80182b4:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80182bc:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80182c0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80182c4:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80182c8:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 80182cc:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80182d0:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80182d4:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80182d8:	3301      	adds	r3, #1
 80182da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80182de:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        if (sw > 0)
 80182e2:	f8d5 8000 	ldr.w	r8, [r5]
 80182e6:	e683      	b.n	8017ff0 <tMBPulse_tick+0x530>
                	tMBPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f);
 80182e8:	eddf baa0 	vldr	s23, [pc, #640]	; 801856c <tMBPulse_tick+0xaac>
 80182ec:	ee38 caea 	vsub.f32	s24, s17, s21
	i = lrintf(r - 0.5f);
 80182f0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80182f4:	ee69 ba2b 	vmul.f32	s23, s18, s23
 80182f8:	eeac 0a2b 	vfma.f32	s0, s24, s23
 80182fc:	f005 fd0c 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018300:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018304:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018308:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801830c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018310:	4a95      	ldr	r2, [pc, #596]	; (8018568 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018312:	3301      	adds	r3, #1
                if (p_at_reset >= 1.0f) {
 8018314:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801831c:	eedc 7a2b 	vfnms.f32	s15, s24, s23
                if (p_at_reset >= 1.0f) {
 8018320:	eeb4 bac7 	vcmpe.f32	s22, s14
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018324:	eb08 0143 	add.w	r1, r8, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018328:	f8a8 3062 	strh.w	r3, [r8, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801832c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018330:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
                if (p_at_reset >= 1.0f) {
 8018334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018338:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801833c:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018340:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
 8018344:	f103 0301 	add.w	r3, r3, #1
 8018348:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801834c:	f8a8 3060 	strh.w	r3, [r8, #96]	; 0x60
                if (p_at_reset >= 1.0f) {
 8018350:	f8d5 8000 	ldr.w	r8, [r5]
 8018354:	f6ff ae4c 	blt.w	8017ff0 <tMBPulse_tick+0x530>
 8018358:	e6b3      	b.n	80180c2 <tMBPulse_tick+0x602>
                if (p_at_reset < b) {
 801835a:	eef4 aacb 	vcmpe.f32	s21, s22
 801835e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018362:	f300 80ba 	bgt.w	80184da <tMBPulse_tick+0xa1a>
                if (p_at_reset < 0.0f) {
 8018366:	eeb5 bac0 	vcmpe.f32	s22, #0.0
 801836a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801836e:	f57f af47 	bpl.w	8018200 <tMBPulse_tick+0x740>
 8018372:	eddf ba7e 	vldr	s23, [pc, #504]	; 801856c <tMBPulse_tick+0xaac>
 8018376:	ee69 ba2b 	vmul.f32	s23, s18, s23
	i = lrintf(r - 0.5f);
 801837a:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
                    k = 1;
 801837e:	2701      	movs	r7, #1
	i = lrintf(r - 0.5f);
 8018380:	eeb0 0a48 	vmov.f32	s0, s16
 8018384:	eea8 0aab 	vfma.f32	s0, s17, s23
 8018388:	f005 fcc6 	bl	801dd18 <lrintf>
	r -= (float)i;
 801838c:	ee07 0a90 	vmov	s15, r0
                    x = -0.5f;
 8018390:	eef0 5a48 	vmov.f32	s11, s16
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018394:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018398:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801839c:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183a0:	e715      	b.n	80181ce <tMBPulse_tick+0x70e>
                x = 0.5f;
 80183a2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
                k = 0;
 80183a6:	2700      	movs	r7, #0
 80183a8:	f7ff bbd8 	b.w	8017b5c <tMBPulse_tick+0x9c>
	_tMBPulse* c = *osc;
 80183ac:	eddf 7a6f 	vldr	s15, [pc, #444]	; 801856c <tMBPulse_tick+0xaac>
 80183b0:	ee7d 8a6a 	vsub.f32	s17, s26, s21
	i = lrintf(r - 0.5f);
 80183b4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBPulse* c = *osc;
 80183b8:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 80183ba:	ee29 9a27 	vmul.f32	s18, s18, s15
                k = 0;
 80183be:	464f      	mov	r7, r9
}
 80183c0:	eeb0 8a4d 	vmov.f32	s16, s26
	i = lrintf(r - 0.5f);
 80183c4:	eea9 0a28 	vfma.f32	s0, s18, s17
 80183c8:	f005 fca6 	bl	801dd18 <lrintf>
	r -= (float)i;
 80183cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183d0:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80183d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80183d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80183dc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183e0:	3301      	adds	r3, #1
                x = 0.5f;
 80183e2:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80183ea:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 80183ee:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80183f2:	f8a5 3062 	strh.w	r3, [r5, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80183f6:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80183fa:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 80183fe:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018402:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018406:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
 801840a:	3301      	adds	r3, #1
 801840c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018410:	f8a5 3060 	strh.w	r3, [r5, #96]	; 0x60
}
 8018414:	f7ff bba2 	b.w	8017b5c <tMBPulse_tick+0x9c>
	i = lrintf(r - 0.5f);
 8018418:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 801841c:	ee69 ba2b 	vmul.f32	s23, s18, s23
                    p_at_reset += 1.0f;
 8018420:	ee3b ba0c 	vadd.f32	s22, s22, s24
	i = lrintf(r - 0.5f);
 8018424:	eeb0 0a6c 	vmov.f32	s0, s25
 8018428:	eea8 0aab 	vfma.f32	s0, s17, s23
 801842c:	f005 fc74 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018430:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018434:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018438:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801843c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018440:	4a49      	ldr	r2, [pc, #292]	; (8018568 <tMBPulse_tick+0xaa8>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018442:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 8018444:	eef4 aacb 	vcmpe.f32	s21, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801844c:	eed8 7aab 	vfnms.f32	s15, s17, s23
                if (k && p_at_reset < b) {
 8018450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018454:	eb04 0143 	add.w	r1, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018458:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801845c:	f8a1 0066 	strh.w	r0, [r1, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018460:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 8018464:	edc1 7a3a 	vstr	s15, [r1, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018468:	f8c1 20ec 	str.w	r2, [r1, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801846c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8018470:	f103 0301 	add.w	r3, r3, #1
 8018474:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018478:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (k && p_at_reset < b) {
 801847c:	dd70      	ble.n	8018560 <tMBPulse_tick+0xaa0>
	_tMBPulse* c = *osc;
 801847e:	ee78 8a6a 	vsub.f32	s17, s16, s21
 8018482:	682f      	ldr	r7, [r5, #0]
	i = lrintf(r - 0.5f);
 8018484:	eeb0 0a6c 	vmov.f32	s0, s25
 8018488:	ee78 8a8b 	vadd.f32	s17, s17, s22
 801848c:	eea8 0aab 	vfma.f32	s0, s17, s23
 8018490:	f005 fc42 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018494:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018498:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801849c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80184a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184a4:	3301      	adds	r3, #1
	r -= (float)i;
 80184a6:	eed8 7aab 	vfnms.f32	s15, s17, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 80184ae:	eb07 0243 	add.w	r2, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184b2:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 80184b6:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80184ba:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
 80184be:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80184c2:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80184c6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 80184ca:	3301      	adds	r3, #1
 80184cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80184d0:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
        else if (sw < 0)
 80184d4:	f8d5 8000 	ldr.w	r8, [r5]
 80184d8:	e664      	b.n	80181a4 <tMBPulse_tick+0x6e4>
	r = MINBLEP_PHASES * phase * inv_w;
 80184da:	eddf ba24 	vldr	s23, [pc, #144]	; 801856c <tMBPulse_tick+0xaac>
 80184de:	ee78 caea 	vsub.f32	s25, s17, s21
	i = lrintf(r - 0.5f);
 80184e2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80184e6:	ee69 ba2b 	vmul.f32	s23, s18, s23
 80184ea:	eeac 0aab 	vfma.f32	s0, s25, s23
 80184ee:	f005 fc13 	bl	801dd18 <lrintf>
	r -= (float)i;
 80184f2:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80184f6:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80184fa:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80184fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018502:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 8018504:	eeb5 bac0 	vcmpe.f32	s22, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018508:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801850c:	eedc 7aab 	vfnms.f32	s15, s25, s23
                if (p_at_reset < 0.0f) {
 8018510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018514:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018518:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	c->BLEPindices[c->mostRecentBLEP] = i;
 801851c:	f8a2 0066 	strh.w	r0, [r2, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018520:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 8018524:	edc2 7a3a 	vstr	s15, [r2, #232]	; 0xe8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018528:	ed82 ca3b 	vstr	s24, [r2, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801852c:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
 8018530:	f103 0301 	add.w	r3, r3, #1
 8018534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018538:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
                if (p_at_reset < 0.0f) {
 801853c:	f8d5 8000 	ldr.w	r8, [r5]
 8018540:	f57f ae30 	bpl.w	80181a4 <tMBPulse_tick+0x6e4>
 8018544:	e719      	b.n	801837a <tMBPulse_tick+0x8ba>
                    x = 0.5f;
 8018546:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801854a:	f7ff bbc5 	b.w	8017cd8 <tMBPulse_tick+0x218>
    p += sw - (int)sw;
 801854e:	eeb0 8a68 	vmov.f32	s16, s17
 8018552:	f7ff baea 	b.w	8017b2a <tMBPulse_tick+0x6a>
                x = -0.5f;
 8018556:	eef0 5a6b 	vmov.f32	s11, s23
                k = 1;
 801855a:	2701      	movs	r7, #1
 801855c:	f7ff bafe 	b.w	8017b5c <tMBPulse_tick+0x9c>
                    x = -0.5f;
 8018560:	eef0 5a6c 	vmov.f32	s11, s25
                    k = 1;
 8018564:	2701      	movs	r7, #1
 8018566:	e64b      	b.n	8018200 <tMBPulse_tick+0x740>
 8018568:	bf800000 	.word	0xbf800000
 801856c:	42800000 	.word	0x42800000

08018570 <tMBPulse_setFreq>:

void tMBPulse_setFreq(tMBPulse* const osc, float f)
{
    _tMBPulse* c = *osc;
 8018570:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8018572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018576:	edd3 7aba 	vldr	s15, [r3, #744]	; 0x2e8
    c->freq = f;
 801857a:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801857e:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8018582:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018586:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801858a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
}
 801858e:	4770      	bx	lr

08018590 <tMBPulse_setWidth>:

void tMBPulse_setWidth(tMBPulse* const osc, float w)
{
    _tMBPulse* c = *osc;
    c->waveform = w;
    c->_b = 0.5f * (1.0f + c->waveform);
 8018590:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    _tMBPulse* c = *osc;
 8018594:	6803      	ldr	r3, [r0, #0]
    c->_b = 0.5f * (1.0f + c->waveform);
 8018596:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    c->waveform = w;
 801859a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->_b = 0.5f * (1.0f + c->waveform);
 801859e:	ee70 7a27 	vadd.f32	s15, s0, s15
 80185a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80185a6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 80185aa:	4770      	bx	lr

080185ac <tMBPulse_sync>:

float tMBPulse_sync(tMBPulse* const osc, float value)
{
    _tMBPulse* c = *osc;
 80185ac:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80185ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 80185b2:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 80185b6:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 80185ba:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80185be:	eef1 7a67 	vneg.f32	s15, s15
 80185c2:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80185c6:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80185ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ce:	eef4 6ac7 	vcmpe.f32	s13, s14
 80185d2:	bfcc      	ite	gt
 80185d4:	2201      	movgt	r2, #1
 80185d6:	2200      	movle	r2, #0
 80185d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185dc:	f002 0201 	and.w	r2, r2, #1
 80185e0:	bf88      	it	hi
 80185e2:	2200      	movhi	r2, #0
 80185e4:	b122      	cbz	r2, 80185f0 <tMBPulse_sync+0x44>
 80185e6:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80185ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185ee:	da04      	bge.n	80185fa <tMBPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80185f0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8018608 <tMBPulse_sync+0x5c>
 80185f4:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 80185f8:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80185fa:	ee37 7a66 	vsub.f32	s14, s14, s13
 80185fe:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018602:	ed83 7a05 	vstr	s14, [r3, #20]
}
 8018606:	4770      	bx	lr
 8018608:	00000000 	.word	0x00000000

0801860c <tMBTriangle_init>:

//==========================================================================================================
//==========================================================================================================

void tMBTriangle_init(tMBTriangle* const osc, LEAF* const leaf)
{
 801860c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBTriangle_initToPool(osc, &leaf->mempool);
}

void tMBTriangle_initToPool(tMBTriangle* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801860e:	698e      	ldr	r6, [r1, #24]
{
 8018610:	4607      	mov	r7, r0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8018612:	f44f 707c 	mov.w	r0, #1008	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8018616:	2500      	movs	r5, #0
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 8018618:	4631      	mov	r1, r6
 801861a:	f7ff f809 	bl	8017630 <mpool_alloc>
 801861e:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 8018620:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 8018622:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8018624:	6872      	ldr	r2, [r6, #4]
    c->syncdir = 1.0f;
 8018626:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->_j = 0;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801862a:	ed9f 6a18 	vldr	s12, [pc, #96]	; 801868c <tMBTriangle_init+0x80>
    _tMBTriangle* c = *osc = (_tMBTriangle*) mpool_alloc(sizeof(_tMBTriangle), m);
 801862e:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 8018630:	ed92 7a01 	vldr	s14, [r2, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8018634:	f04f 527a 	mov.w	r2, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8018638:	eddf 7a15 	vldr	s15, [pc, #84]	; 8018690 <tMBTriangle_init+0x84>
    c->_inv_w = 1.0f / c->_w;
 801863c:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 8018640:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 8018642:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8018646:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8018648:	6181      	str	r1, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801864a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 801864e:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8018650:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 8018654:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8018656:	4b0f      	ldr	r3, [pc, #60]	; (8018694 <tMBTriangle_init+0x88>)
    c->softsync = 0;
 8018658:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 801865a:	6345      	str	r5, [r0, #52]	; 0x34
    c->_p = 0.25f;  /* phase [0, 1) */
 801865c:	6202      	str	r2, [r0, #32]
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801865e:	2280      	movs	r2, #128	; 0x80
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8018660:	6281      	str	r1, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018662:	4629      	mov	r1, r5
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8018664:	6385      	str	r5, [r0, #56]	; 0x38
    c->invSampleRate = leaf->invSampleRate;
 8018666:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801866a:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801866e:	e9c0 5319 	strd	r5, r3, [r0, #100]	; 0x64
    c->_inv_w = 1.0f / c->_w;
 8018672:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8018676:	306c      	adds	r0, #108	; 0x6c
 8018678:	f004 ff2c 	bl	801d4d4 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801867c:	4629      	mov	r1, r5
 801867e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8018682:	2220      	movs	r2, #32
}
 8018684:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8018688:	f004 bf24 	b.w	801d4d4 <memset>
 801868c:	3b14f209 	.word	0x3b14f209
 8018690:	43dc0000 	.word	0x43dc0000
 8018694:	11c01200 	.word	0x11c01200

08018698 <tMBTriangle_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBTriangle_tick(tMBTriangle* const osc)
{
 8018698:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801869c:	ed2d 8b10 	vpush	{d8-d15}
    _tMBTriangle* c = *osc;
 80186a0:	6804      	ldr	r4, [r0, #0]
    sync = c->sync;

    p = c->_p;  /* phase [0, 1) */
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 80186a2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
    
    

    b = 0.5f * (1.0f + c->waveform);
 80186a6:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
{
 80186aa:	b085      	sub	sp, #20
    b = 0.5f * (1.0f + c->waveform);
 80186ac:	ed94 7a03 	vldr	s14, [r4, #12]
{
 80186b0:	4607      	mov	r7, r0
    sync = c->sync;
 80186b2:	ed94 8a05 	vldr	s16, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 80186b6:	ee37 7a28 	vadd.f32	s14, s14, s17
    invB = 1.0f / b;
 80186ba:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80186be:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    p = c->_p;  /* phase [0, 1) */
 80186c2:	edd4 6a08 	vldr	s13, [r4, #32]
    invB = 1.0f / b;
 80186c6:	ee88 daa7 	vdiv.f32	s26, s17, s15
    w = c->_w;  /* phase increment */
 80186ca:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 80186ce:	ed94 aa0b 	vldr	s20, [r4, #44]	; 0x2c
    j = c->_j;  /* index into buffer _f */
 80186d2:	6b65      	ldr	r5, [r4, #52]	; 0x34
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80186d4:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    b = 0.5f * (1.0f + c->waveform);
 80186d6:	ee67 9a0b 	vmul.f32	s19, s14, s22
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80186da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80186de:	ee78 7ae9 	vsub.f32	s15, s17, s19
    invB1 = 1.0f / b1;
 80186e2:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80186e6:	f340 8181 	ble.w	80189ec <tMBTriangle_tick+0x354>
 80186ea:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80186ee:	f1b9 0f00 	cmp.w	r9, #0
 80186f2:	f340 8138 	ble.w	8018966 <tMBTriangle_tick+0x2ce>
 80186f6:	edd4 7a06 	vldr	s15, [r4, #24]
    
    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 80186fa:	ed94 ca0f 	vldr	s24, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80186fe:	eef1 7a67 	vneg.f32	s15, s15
    sw = w * c->syncdir;
 8018702:	ee67 baaa 	vmul.f32	s23, s15, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8018706:	edc4 7a06 	vstr	s15, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801870a:	ee27 ca8c 	vmul.f32	s24, s15, s24
    p += sw - (int)sw;
 801870e:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8018712:	ee76 6aab 	vadd.f32	s13, s13, s23
 8018716:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801871a:	ee36 8ac8 	vsub.f32	s16, s13, s16
                x = -0.5f + p * invB;
                tMBTriangle_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 801871e:	2e00      	cmp	r6, #0
 8018720:	f040 8177 	bne.w	8018a12 <tMBTriangle_tick+0x37a>
        
        x = -0.5f + p * invB;
 8018724:	eebe 9a00 	vmov.f32	s18, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8018728:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = -0.5f + p * invB;
 801872c:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8018730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8018734:	eee8 8a0d 	vfma.f32	s17, s16, s26
        if (sw > 0)
 8018738:	f340 8252 	ble.w	8018be0 <tMBTriangle_tick+0x548>
        {
            if (p >= b) {
 801873c:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018744:	f280 820c 	bge.w	8018b60 <tMBTriangle_tick+0x4c8>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8018748:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 801874a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801874e:	eeb4 8ac9 	vcmpe.f32	s16, s18
 8018752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018756:	f280 837b 	bge.w	8018e50 <tMBTriangle_tick+0x7b8>
 801875a:	461e      	mov	r6, r3
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
                k = 1;
            }
        }
    }
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801875c:	1d2b      	adds	r3, r5, #4
 801875e:	f003 0307 	and.w	r3, r3, #7
    
    c->_f[currentSamp] = x;
 8018762:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018766:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801876a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 801876e:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018772:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018776:	2b00      	cmp	r3, #0
 8018778:	f000 80d3 	beq.w	8018922 <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
    	whichBLEP &= 63;

    	//use the scale and r values from the BLEPproperties array to compute the current state of each active BLEP and add it to the output value

    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 801877c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018780:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018784:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 8018786:	48ea      	ldr	r0, [pc, #936]	; (8018b30 <tMBTriangle_tick+0x498>)
 8018788:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801878c:	4fe9      	ldr	r7, [pc, #932]	; (8018b34 <tMBTriangle_tick+0x49c>)
 801878e:	e053      	b.n	8018838 <tMBTriangle_tick+0x1a0>
 8018790:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8018794:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 8018798:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801879c:	fa1f fe8e 	uxth.w	lr, lr
 80187a0:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80187a4:	fa1f f989 	uxth.w	r9, r9
 80187a8:	b29b      	uxth	r3, r3
 80187aa:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 80187ae:	fa1f f888 	uxth.w	r8, r8
 80187b2:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 80187b6:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 80187ba:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80187be:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80187c2:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 80187c6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80187ca:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80187ce:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 80187d2:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 80187d6:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 80187da:	ed99 7a00 	vldr	s14, [r9]
 80187de:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80187e2:	edd3 5a01 	vldr	s11, [r3, #4]
 80187e6:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 80187ea:	eea5 7a25 	vfma.f32	s14, s10, s11
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80187ee:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80187f2:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80187f6:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80187f8:	fa1f fe8e 	uxth.w	lr, lr
 80187fc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8018800:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8018804:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018808:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801880c:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 8018810:	f108 0840 	add.w	r8, r8, #64	; 0x40
 8018814:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8018818:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 801881c:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8018820:	459e      	cmp	lr, r3
 8018822:	d304      	bcc.n	801882e <tMBTriangle_tick+0x196>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 8018824:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 8018828:	3b01      	subs	r3, #1
 801882a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801882e:	f89d 300d 	ldrb.w	r3, [sp, #13]
 8018832:	3201      	adds	r2, #1
 8018834:	4293      	cmp	r3, r2
 8018836:	dd74      	ble.n	8018922 <tMBTriangle_tick+0x28a>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 8018838:	ebac 0302 	sub.w	r3, ip, r2
 801883c:	b29b      	uxth	r3, r3
 801883e:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 8018842:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018846:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801884a:	f8ad 300e 	strh.w	r3, [sp, #14]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 801884e:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 8018852:	b29b      	uxth	r3, r3
 8018854:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018858:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801885c:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 8018860:	eef4 7ac6 	vcmpe.f32	s15, s12
 8018864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018868:	d492      	bmi.n	8018790 <tMBTriangle_tick+0xf8>
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 801886a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801886e:	f8bd e00e 	ldrh.w	lr, [sp, #14]
 8018872:	b29b      	uxth	r3, r3
 8018874:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 8018878:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 801887c:	fa1f fe8e 	uxth.w	lr, lr
 8018880:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018884:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8018888:	fa1f f989 	uxth.w	r9, r9
 801888c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8018890:	fa1f f888 	uxth.w	r8, r8
 8018894:	edd3 5a3c 	vldr	s11, [r3, #240]	; 0xf0
 8018898:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801889c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80188a0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80188a4:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 80188a8:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 80188ac:	b29b      	uxth	r3, r3
 80188ae:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 80188b2:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80188b6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80188ba:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 80188be:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 80188c2:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80188c6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80188ca:	edd8 6a01 	vldr	s13, [r8, #4]
 80188ce:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80188d2:	ed9e 7a00 	vldr	s14, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80188d6:	f8bd e00e 	ldrh.w	lr, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80188da:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80188de:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80188e2:	f8bd 800e 	ldrh.w	r8, [sp, #14]
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80188e6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80188ea:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80188ee:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80188f2:	eea5 7a26 	vfma.f32	s14, s10, s13
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 80188f6:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]));
 80188fa:	eee5 7a87 	vfma.f32	s15, s11, s14
 80188fe:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8018902:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8018906:	3340      	adds	r3, #64	; 0x40
 8018908:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 801890c:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8018910:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8018914:	459e      	cmp	lr, r3
 8018916:	d285      	bcs.n	8018824 <tMBTriangle_tick+0x18c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8018918:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801891c:	3201      	adds	r2, #1
 801891e:	4293      	cmp	r3, r2
 8018920:	dc8a      	bgt.n	8018838 <tMBTriangle_tick+0x1a0>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8018922:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8018926:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801892a:	eef0 7a4a 	vmov.f32	s15, s20
    c->out = z;
    j = (j+1) & 7;
 801892e:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8018930:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8018934:	f005 0507 	and.w	r5, r5, #7
    c->_p = p;
 8018938:	ed84 8a08 	vstr	s16, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 801893c:	ee37 7a4a 	vsub.f32	s14, s14, s20
    c->_w = w;
 8018940:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 8018944:	edc4 9a0a 	vstr	s19, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z);
 8018948:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801894c:	e9c4 560d 	strd	r5, r6, [r4, #52]	; 0x34
    
    return -c->out;
 8018950:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 8018954:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 8018958:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
}
 801895c:	b005      	add	sp, #20
 801895e:	ecbd 8b10 	vpop	{d8-d15}
 8018962:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 8018966:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 801896a:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801896e:	ee6a ba8c 	vmul.f32	s23, s21, s24
    float inv_sw = c->_inv_w * c->syncdir;
 8018972:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 8018976:	eefd caeb 	vcvt.s32.f32	s25, s23
 801897a:	ee36 9aab 	vadd.f32	s18, s13, s23
 801897e:	eef8 caec 	vcvt.f32.s32	s25, s25
 8018982:	ee39 ea6c 	vsub.f32	s28, s18, s25
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8018986:	f040 863f 	bne.w	8019608 <tMBTriangle_tick+0xf70>
        if (sw > 0) p = eof_offset;
 801898a:	eef5 bac0 	vcmpe.f32	s23, #0.0
 801898e:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8018990:	ee28 8a2b 	vmul.f32	s16, s16, s23
        if (sw > 0) p = eof_offset;
 8018994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8018998:	ee7e ea48 	vsub.f32	s29, s28, s16
        if (sw > 0) p = eof_offset;
 801899c:	f340 80ce 	ble.w	8018b3c <tMBTriangle_tick+0x4a4>
        if (!k) {
 80189a0:	2e00      	cmp	r6, #0
 80189a2:	f040 81e1 	bne.w	8018d68 <tMBTriangle_tick+0x6d0>
                if (p_at_reset >= b) {
 80189a6:	eef4 9aee 	vcmpe.f32	s19, s29
 80189aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ae:	f240 8449 	bls.w	8019244 <tMBTriangle_tick+0xbac>
                if (p_at_reset >= 1.0f) {
 80189b2:	eef4 eae8 	vcmpe.f32	s29, s17
 80189b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ba:	f280 82bf 	bge.w	8018f3c <tMBTriangle_tick+0x8a4>
 80189be:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8018b38 <tMBTriangle_tick+0x4a0>
            x = -0.5f + p_at_reset * invB;
 80189c2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80189c6:	ee2c ca27 	vmul.f32	s24, s24, s15
 80189ca:	eef0 ca40 	vmov.f32	s25, s0
	i = lrintf(r - 0.5f);
 80189ce:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80189d2:	f005 f9a1 	bl	801dd18 <lrintf>
	r -= (float)i;
 80189d6:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 80189da:	eeed ca2e 	vfma.f32	s25, s26, s29
	c->BLEPindices[c->mostRecentBLEP] = i;
 80189de:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 80189e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80189e6:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 80189ea:	e203      	b.n	8018df4 <tMBTriangle_tick+0x75c>
    sw = w * c->syncdir;
 80189ec:	ed94 ca06 	vldr	s24, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 80189f0:	edd4 7a0f 	vldr	s15, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 80189f4:	ee6c ba2a 	vmul.f32	s23, s24, s21
    float inv_sw = c->_inv_w * c->syncdir;
 80189f8:	ee2c ca27 	vmul.f32	s24, s24, s15
    p += sw - (int)sw;
 80189fc:	eebd 8aeb 	vcvt.s32.f32	s16, s23
 8018a00:	ee7b 6aa6 	vadd.f32	s13, s23, s13
 8018a04:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 8018a08:	ee36 8ac8 	vsub.f32	s16, s13, s16
    } else if (!k) {  /* normal operation, slope currently up */
 8018a0c:	2e00      	cmp	r6, #0
 8018a0e:	f43f ae89 	beq.w	8018724 <tMBTriangle_tick+0x8c>
        x = 0.5f - (p - b) * invB1;
 8018a12:	eeb6 9a00 	vmov.f32	s18, #96	; 0x3f000000  0.5
        if (sw > 0)
 8018a16:	eef5 bac0 	vcmpe.f32	s23, #0.0
        x = 0.5f - (p - b) * invB1;
 8018a1a:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8018a1e:	eef0 8a49 	vmov.f32	s17, s18
        if (sw > 0)
 8018a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8018a26:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8018a2a:	f340 815a 	ble.w	8018ce2 <tMBTriangle_tick+0x64a>
            if (p >= 1.0f) {
 8018a2e:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 8018a32:	eeb4 8acb 	vcmpe.f32	s16, s22
 8018a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a3a:	f6ff ae8f 	blt.w	801875c <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8018a3e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8018a42:	eddf 7a3d 	vldr	s15, [pc, #244]	; 8018b38 <tMBTriangle_tick+0x4a0>
                p -= 1.0f;
 8018a46:	ee78 ca4b 	vsub.f32	s25, s16, s22
	_tMBTriangle* c = *osc;
 8018a4a:	683e      	ldr	r6, [r7, #0]
 8018a4c:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8018a50:	eeb0 0a68 	vmov.f32	s0, s17
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8018a54:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8018a58:	eeac 0a8c 	vfma.f32	s0, s25, s24
	scale *= w;
 8018a5c:	ee6b baa7 	vmul.f32	s23, s23, s15
	i = lrintf(r - 0.5f);
 8018a60:	f005 f95a 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018a64:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a68:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018a6c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8018a70:	eef4 9aec 	vcmpe.f32	s19, s25
	r -= (float)i;
 8018a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a78:	3301      	adds	r3, #1
 8018a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8018a7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8018a82:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018a86:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018a8e:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8018a92:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018a96:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8018a9a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018a9e:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018aa2:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018aa6:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8018aaa:	f103 0301 	add.w	r3, r3, #1
 8018aae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ab2:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8018ab6:	f200 843e 	bhi.w	8019336 <tMBTriangle_tick+0xc9e>
                x = 0.5f - (p - b) * invB1;
 8018aba:	ee79 7a8b 	vadd.f32	s15, s19, s22
	_tMBTriangle* c = *osc;
 8018abe:	683f      	ldr	r7, [r7, #0]
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8018ac0:	ee3c dae9 	vsub.f32	s26, s25, s19
	i = lrintf(r - 0.5f);
 8018ac4:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8018ac8:	ee77 7ac8 	vsub.f32	s15, s15, s16
 8018acc:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8018ad0:	eead 0a0c 	vfma.f32	s0, s26, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018ad4:	eef1 ba6b 	vneg.f32	s23, s23
                x = 0.5f - (p - b) * invB1;
 8018ad8:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8018adc:	f005 f91c 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018ae0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ae4:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018ae8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p -= 1.0f;
 8018aec:	eeb0 8a6c 	vmov.f32	s16, s25
	r -= (float)i;
 8018af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018af4:	3301      	adds	r3, #1
 8018af6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018afa:	eedd 7a0c 	vfnms.f32	s15, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018afe:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b02:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018b06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018b0a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b0e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b12:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018b16:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018b1a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018b1e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8018b22:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018b24:	4433      	add	r3, r6
 8018b26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018b2a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8018b2e:	e615      	b.n	801875c <tMBTriangle_tick+0xc4>
 8018b30:	080295f4 	.word	0x080295f4
 8018b34:	0802dcf8 	.word	0x0802dcf8
 8018b38:	42800000 	.word	0x42800000
        else if (sw < 0) p = 1.0f - eof_offset;
 8018b3c:	f100 828a 	bmi.w	8019054 <tMBTriangle_tick+0x9bc>
        if (!k) {
 8018b40:	2e00      	cmp	r6, #0
 8018b42:	f000 81f4 	beq.w	8018f2e <tMBTriangle_tick+0x896>
            x = 0.5f - (p_at_reset - b) * invB1;
 8018b46:	ee79 7a88 	vadd.f32	s15, s19, s16
 8018b4a:	ee7c 6ac9 	vsub.f32	s13, s25, s18
 8018b4e:	eef0 8a4b 	vmov.f32	s17, s22
    p += sw - (int)sw;
 8018b52:	eeb0 8a4e 	vmov.f32	s16, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 8018b56:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8018b5a:	eeed 8aa6 	vfma.f32	s17, s27, s13
        else if (sw < 0)
 8018b5e:	e5fd      	b.n	801875c <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;;
 8018b60:	ed5f ca0b 	vldr	s25, [pc, #-44]	; 8018b38 <tMBTriangle_tick+0x4a0>
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8018b64:	ee38 ea69 	vsub.f32	s28, s16, s19
	i = lrintf(r - 0.5f);
 8018b68:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8018b6c:	f8d7 8000 	ldr.w	r8, [r7]
 8018b70:	ee6c ca2c 	vmul.f32	s25, s24, s25
                x = 0.5f - (p - b) * invB1;;
 8018b74:	ee79 7ac8 	vsub.f32	s15, s19, s16
 8018b78:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8018b7c:	eeae 0a2c 	vfma.f32	s0, s28, s25
 8018b80:	ee3d ba2d 	vadd.f32	s22, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8018b84:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8018b88:	f005 f8c6 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018b8c:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018b90:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018b94:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018b98:	ee6b 7acb 	vnmul.f32	s15, s23, s22
	r -= (float)i;
 8018b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ba0:	3301      	adds	r3, #1
 8018ba2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018ba6:	ee9e 7a2c 	vfnms.f32	s14, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018baa:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018bae:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018bb2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018bb6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018bba:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018bbe:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018bc2:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018bc6:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018bca:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018bce:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018bd2:	3301      	adds	r3, #1
 8018bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018bd8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8018bdc:	2301      	movs	r3, #1
}
 8018bde:	e5b4      	b.n	801874a <tMBTriangle_tick+0xb2>
            if (p < 0.0f) {
 8018be0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018be8:	f57f adb8 	bpl.w	801875c <tMBTriangle_tick+0xc4>
 8018bec:	eef5 ba40 	vcmp.f32	s23, #0.0
 8018bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018bf4:	f57f adb2 	bpl.w	801875c <tMBTriangle_tick+0xc4>
	r = MINBLEP_PHASES * phase * inv_w;
 8018bf8:	ee6c ca08 	vmul.f32	s25, s24, s16
	i = lrintf(r - 0.5f);
 8018bfc:	ed5f 8a32 	vldr	s17, [pc, #-200]	; 8018b38 <tMBTriangle_tick+0x4a0>
 8018c00:	eeb0 0a49 	vmov.f32	s0, s18
	_tMBTriangle* c = *osc;
 8018c04:	f8d7 8000 	ldr.w	r8, [r7]
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8018c08:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8018c0c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8018c10:	eeac 0aa8 	vfma.f32	s0, s25, s17
 8018c14:	ee67 baab 	vmul.f32	s23, s15, s23
 8018c18:	f005 f87e 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018c1c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c20:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018c24:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8018c28:	ee38 8a0b 	vadd.f32	s16, s16, s22
	r -= (float)i;
 8018c2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c30:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018c32:	eeb1 7a6b 	vneg.f32	s14, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8018c3a:	eef4 9ac8 	vcmpe.f32	s19, s16
	r -= (float)i;
 8018c3e:	eedc 7aa8 	vfnms.f32	s15, s25, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c42:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018c46:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018c4a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8018c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018c52:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018c56:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018c5a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018c5e:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018c62:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018c66:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018c6a:	f103 0301 	add.w	r3, r3, #1
 8018c6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018c72:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8018c76:	f340 84cb 	ble.w	8019610 <tMBTriangle_tick+0xf78>
                x = -0.5f + p * invB;
 8018c7a:	ee2c ca28 	vmul.f32	s24, s24, s17
	_tMBTriangle* c = *osc;
 8018c7e:	683f      	ldr	r7, [r7, #0]
 8018c80:	ee78 ca69 	vsub.f32	s25, s16, s19
	i = lrintf(r - 0.5f);
 8018c84:	eeb0 0a49 	vmov.f32	s0, s18
                x = -0.5f + p * invB;
 8018c88:	eef0 8a49 	vmov.f32	s17, s18
	i = lrintf(r - 0.5f);
 8018c8c:	eeac 0a8c 	vfma.f32	s0, s25, s24
 8018c90:	f005 f842 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018c94:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018c98:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018c9c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ca4:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8018ca6:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018cae:	eedc 7a8c 	vfnms.f32	s15, s25, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018cb2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018cb6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018cba:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018cbe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018cc2:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8018cc6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018cca:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018cce:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018cd2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018cd6:	3301      	adds	r3, #1
 8018cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018cdc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8018ce0:	e53c      	b.n	801875c <tMBTriangle_tick+0xc4>
        else if (sw < 0)
 8018ce2:	f57f ad3b 	bpl.w	801875c <tMBTriangle_tick+0xc4>
            if (p < b) {
 8018ce6:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8018cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cee:	f100 8174 	bmi.w	8018fda <tMBTriangle_tick+0x942>
            if (p < 0.0f) {
 8018cf2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8018cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018cfa:	f57f ad2f 	bpl.w	801875c <tMBTriangle_tick+0xc4>
                p += 1.0f;
 8018cfe:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8018d02:	ed1f ba73 	vldr	s22, [pc, #-460]	; 8018b38 <tMBTriangle_tick+0x4a0>
	r = MINBLEP_PHASES * phase * inv_w;
 8018d06:	ee2c ca08 	vmul.f32	s24, s24, s16
	_tMBTriangle* c = *osc;
 8018d0a:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8018d0c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8018d10:	ee38 8a09 	vadd.f32	s16, s16, s18
                x = 0.5f - (p - b) * invB1;
 8018d14:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8018d18:	eeac 0a0b 	vfma.f32	s0, s24, s22
                x = 0.5f - (p - b) * invB1;
 8018d1c:	ee79 7ac8 	vsub.f32	s15, s19, s16
                tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8018d20:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8018d24:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8018d28:	f004 fff6 	bl	801dd18 <lrintf>
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	r -= (float)i;
 8018d30:	ee07 0a90 	vmov	s15, r0
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018d34:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018d38:	ee2d da6b 	vnmul.f32	s26, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d3c:	3301      	adds	r3, #1
	r -= (float)i;
 8018d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018d46:	eedc 7a0b 	vfnms.f32	s15, s24, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018d4a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018d4e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018d52:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018d56:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018d5a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018d5e:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018d62:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
 8018d66:	e6d8      	b.n	8018b1a <tMBTriangle_tick+0x482>
            x = 0.5f - (p_at_reset - b) * invB1;
 8018d68:	ee3c 9ac9 	vsub.f32	s18, s25, s18
 8018d6c:	ee79 7a88 	vadd.f32	s15, s19, s16
                if (p_at_reset >= 1.0f) {
 8018d70:	eef4 eae8 	vcmpe.f32	s29, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8018d74:	eef0 ca4b 	vmov.f32	s25, s22
 8018d78:	ee77 7a89 	vadd.f32	s15, s15, s18
                if (p_at_reset >= 1.0f) {
 8018d7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8018d80:	eeed caa7 	vfma.f32	s25, s27, s15
                if (p_at_reset >= 1.0f) {
 8018d84:	f280 81e1 	bge.w	801914a <tMBTriangle_tick+0xab2>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018d88:	ee3d ea2d 	vadd.f32	s28, s26, s27
 8018d8c:	ed5f 7a96 	vldr	s15, [pc, #-600]	; 8018b38 <tMBTriangle_tick+0x4a0>
 8018d90:	ee2c ca27 	vmul.f32	s24, s24, s15
 8018d94:	ee2e ea2b 	vmul.f32	s28, s28, s23
	i = lrintf(r - 0.5f);
 8018d98:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018d9c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8018da0:	f004 ffba 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018da4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018da8:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018dac:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8018db0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018db4:	3301      	adds	r3, #1
	r -= (float)i;
 8018db6:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018dba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018dbe:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018dc2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018dc6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018dca:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018dce:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018dd2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018dd6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018dda:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018dde:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018de2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018de6:	3301      	adds	r3, #1
 8018de8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018dec:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8018df0:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018df4:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8018df8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            if (p >= b) {
 8018dfc:	eef4 9ac8 	vcmpe.f32	s19, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e00:	3301      	adds	r3, #1
            tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, -0.5f - x, 0.0f, sw);
 8018e02:	ee78 caec 	vsub.f32	s25, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8018e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e0e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e12:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018e16:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	scale *= w;
 8018e1a:	ee6c caab 	vmul.f32	s25, s25, s23
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018e1e:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e22:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018e26:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e2a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018e2e:	edc3 ca3c 	vstr	s25, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018e32:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018e36:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018e3a:	f103 0301 	add.w	r3, r3, #1
 8018e3e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018e42:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8018e46:	d93d      	bls.n	8018ec4 <tMBTriangle_tick+0x82c>
            x = -0.5f + p * invB;
 8018e48:	eeed 8a08 	vfma.f32	s17, s26, s16
            k = 0;
 8018e4c:	464e      	mov	r6, r9
 8018e4e:	e485      	b.n	801875c <tMBTriangle_tick+0xc4>
                p -= 1.0f;
 8018e50:	ed5f 7ac7 	vldr	s15, [pc, #-796]	; 8018b38 <tMBTriangle_tick+0x4a0>
 8018e54:	ee38 8a49 	vsub.f32	s16, s16, s18
                x = -0.5f + p * invB;
 8018e58:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8018e5c:	683f      	ldr	r7, [r7, #0]
 8018e5e:	ee2c ca27 	vmul.f32	s24, s24, s15
                tMBTriangle_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8018e62:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 8018e66:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8018e6a:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8018e6e:	f004 ff53 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018e72:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e76:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018e7a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018e7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e82:	3301      	adds	r3, #1
	scale *= w;
 8018e84:	ee6d daab 	vmul.f32	s27, s27, s23
                x = -0.5f + p * invB;
 8018e88:	eeed 8a08 	vfma.f32	s17, s26, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018e90:	eed8 7a0c 	vfnms.f32	s15, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018e94:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018e98:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018e9c:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018ea0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018ea4:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8018ea8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018eac:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018eb0:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018eb4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8018eb8:	3301      	adds	r3, #1
 8018eba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018ebe:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8018ec2:	e44b      	b.n	801875c <tMBTriangle_tick+0xc4>
                x = 0.5f - (p - b) * invB1;
 8018ec4:	ee39 7ac8 	vsub.f32	s14, s19, s16
	_tMBTriangle* c = *osc;
 8018ec8:	683f      	ldr	r7, [r7, #0]
                x = 0.5f - (p - b) * invB1;
 8018eca:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
                tMBTriangle_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8018ece:	ee38 9a69 	vsub.f32	s18, s16, s19
	i = lrintf(r - 0.5f);
 8018ed2:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8018ed6:	eee7 7a2d 	vfma.f32	s15, s14, s27
 8018eda:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8018ede:	eea9 0a0c 	vfma.f32	s0, s18, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018ee2:	ee2b dacd 	vnmul.f32	s26, s23, s26
                x = 0.5f - (p - b) * invB1;
 8018ee6:	eef0 8a67 	vmov.f32	s17, s15
	i = lrintf(r - 0.5f);
 8018eea:	f004 ff15 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018eee:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ef2:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018ef6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018efa:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	r -= (float)i;
 8018efe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f02:	3301      	adds	r3, #1
 8018f04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8018f08:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f0c:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018f10:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018f14:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8018f18:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018f1c:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8018f20:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018f24:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018f28:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018f2c:	e5f7      	b.n	8018b1e <tMBTriangle_tick+0x486>
            x = -0.5f + p_at_reset * invB;
 8018f2e:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    p += sw - (int)sw;
 8018f32:	eeb0 8a4e 	vmov.f32	s16, s28
            x = -0.5f + p_at_reset * invB;
 8018f36:	eeed 8a2e 	vfma.f32	s17, s26, s29
            else if (sw < 0)
 8018f3a:	e40f      	b.n	801875c <tMBTriangle_tick+0xc4>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8018f3c:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8018f40:	ed9f 7ae6 	vldr	s14, [pc, #920]	; 80192dc <tMBTriangle_tick+0xc44>
 8018f44:	ee2c ca07 	vmul.f32	s24, s24, s14
 8018f48:	ee27 faab 	vmul.f32	s30, s15, s23
                    p_at_reset -= 1.0f;
 8018f4c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 8018f50:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 8018f54:	ee7e eac9 	vsub.f32	s29, s29, s18
	i = lrintf(r - 0.5f);
 8018f58:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 8018f5c:	eef0 ca68 	vmov.f32	s25, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8018f60:	ee38 ba2e 	vadd.f32	s22, s16, s29
                    x = -0.5f + p_at_reset * invB;
 8018f64:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 8018f68:	eeab 0a0c 	vfma.f32	s0, s22, s24
 8018f6c:	f004 fed4 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018f70:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f74:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8018f78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8018f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f80:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 8018f82:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 8018f86:	eedb 7a0c 	vfnms.f32	s15, s22, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f8a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 8018f8e:	eea8 0a0c 	vfma.f32	s0, s16, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018f92:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018f96:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018f9a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8018f9e:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8018fa2:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8018fa6:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8018faa:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8018fae:	ed83 9a3d 	vstr	s18, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8018fb2:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8018fb6:	3301      	adds	r3, #1
 8018fb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018fbc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 8018fc0:	f004 feaa 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018fc4:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8018fc8:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 8018fcc:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8018fd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018fd4:	eed8 7a0c 	vfnms.f32	s15, s16, s24
 8018fd8:	e70c      	b.n	8018df4 <tMBTriangle_tick+0x75c>
                x = -0.5f + p * invB;
 8018fda:	ed9f 9ac0 	vldr	s18, [pc, #768]	; 80192dc <tMBTriangle_tick+0xc44>
 8018fde:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8018fe2:	ee38 ba69 	vsub.f32	s22, s16, s19
	_tMBTriangle* c = *osc;
 8018fe6:	683e      	ldr	r6, [r7, #0]
 8018fe8:	ee2c 9a09 	vmul.f32	s18, s24, s18
                x = -0.5f + p * invB;
 8018fec:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 8018ff0:	eeab 0a09 	vfma.f32	s0, s22, s18
 8018ff4:	f004 fe90 	bl	801dd18 <lrintf>
	r -= (float)i;
 8018ff8:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8018ffc:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 8019000:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 8019004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019008:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801900c:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 801900e:	eee8 8a0d 	vfma.f32	s17, s16, s26
	scale *= w;
 8019012:	ee67 7aab 	vmul.f32	s15, s15, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801901a:	ee9b 7a09 	vfnms.f32	s14, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801901e:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019022:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019026:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801902a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801902e:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019032:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019036:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801903a:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801903e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019042:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019046:	3301      	adds	r3, #1
 8019048:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801904c:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 8019050:	2600      	movs	r6, #0
}
 8019052:	e64e      	b.n	8018cf2 <tMBTriangle_tick+0x65a>
        else if (sw < 0) p = 1.0f - eof_offset;
 8019054:	ee38 fac8 	vsub.f32	s30, s17, s16
        if (!k) {
 8019058:	2e00      	cmp	r6, #0
 801905a:	f040 8141 	bne.w	80192e0 <tMBTriangle_tick+0xc48>
                if (p_at_reset < 0.0f) {
 801905e:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8019062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019066:	f100 81ac 	bmi.w	80193c2 <tMBTriangle_tick+0xd2a>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801906a:	ee3d 9a2d 	vadd.f32	s18, s26, s27
 801906e:	eddf 7a9b 	vldr	s15, [pc, #620]	; 80192dc <tMBTriangle_tick+0xc44>
            x = -0.5f + p_at_reset * invB;
 8019072:	ee6d ea2e 	vmul.f32	s29, s26, s29
 8019076:	ee2c ca27 	vmul.f32	s24, s24, s15
 801907a:	ee2b 9ac9 	vnmul.f32	s18, s23, s18
	i = lrintf(r - 0.5f);
 801907e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019082:	eef1 8a48 	vneg.f32	s17, s16
 8019086:	eea8 0a4c 	vfms.f32	s0, s16, s24
 801908a:	f004 fe45 	bl	801dd18 <lrintf>
	r -= (float)i;
 801908e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019092:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019096:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 801909a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801909e:	3301      	adds	r3, #1
	r -= (float)i;
 80190a0:	eed8 7a8c 	vfnms.f32	s15, s17, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80190a8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190ac:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80190b0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80190b4:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190b8:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80190bc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190c0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80190c4:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80190c8:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80190cc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80190d0:	3301      	adds	r3, #1
 80190d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80190d6:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 80190da:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190de:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 80190e2:	ee6b eaae 	vmul.f32	s29, s23, s29
            if (p < b) {
 80190e6:	eef4 9acf 	vcmpe.f32	s19, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190ea:	3301      	adds	r3, #1
 80190ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 80190f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80190f4:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80190f8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80190fc:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019100:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019104:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019108:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801910c:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019110:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019114:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019118:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801911c:	f103 0301 	add.w	r3, r3, #1
 8019120:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019124:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 8019128:	f300 810c 	bgt.w	8019344 <tMBTriangle_tick+0xcac>
            x = 0.5f - (p - b) * invB1;
 801912c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
            k = 1;
 8019130:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 8019132:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 8019136:	ee78 7a67 	vsub.f32	s15, s16, s15
 801913a:	eeb0 8a4f 	vmov.f32	s16, s30
 801913e:	ee77 7aa9 	vadd.f32	s15, s15, s19
 8019142:	eee7 8aad 	vfma.f32	s17, s15, s27
 8019146:	f7ff bb09 	b.w	801875c <tMBTriangle_tick+0xc4>
                    p_at_reset -= 1.0f;
 801914a:	ee7e eae8 	vsub.f32	s29, s29, s17
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801914e:	eddf 7a63 	vldr	s15, [pc, #396]	; 80192dc <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 8019152:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 8019156:	ee2c ca27 	vmul.f32	s24, s24, s15
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801915a:	ee38 fa2e 	vadd.f32	s30, s16, s29
	i = lrintf(r - 0.5f);
 801915e:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 8019162:	ee3d ea2d 	vadd.f32	s28, s26, s27
	i = lrintf(r - 0.5f);
 8019166:	eeac 0a0f 	vfma.f32	s0, s24, s30
 801916a:	f004 fdd5 	bl	801dd18 <lrintf>
	r -= (float)i;
 801916e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019172:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019176:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801917a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801917e:	3301      	adds	r3, #1
	scale *= w;
 8019180:	ee2e ea2b 	vmul.f32	s28, s28, s23
                if (!k && p_at_reset >= b) {
 8019184:	eef4 9aee 	vcmpe.f32	s19, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801918c:	eedc 7a0f 	vfnms.f32	s15, s24, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019190:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019194:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019198:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 801919c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80191a0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80191a4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80191a8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80191ac:	ed83 ea3c 	vstr	s28, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80191b0:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80191b4:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80191b8:	f103 0301 	add.w	r3, r3, #1
 80191bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80191c0:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 80191c4:	f200 81b5 	bhi.w	8019532 <tMBTriangle_tick+0xe9a>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80191c8:	ee78 7a69 	vsub.f32	s15, s16, s19
	_tMBTriangle* c = *osc;
 80191cc:	683e      	ldr	r6, [r7, #0]
                    x = 0.5f - (p_at_reset - b) * invB1;
 80191ce:	ee39 7aa8 	vadd.f32	s14, s19, s17
	i = lrintf(r - 0.5f);
 80191d2:	eeb0 0a6c 	vmov.f32	s0, s25
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 80191d6:	ee77 eaae 	vadd.f32	s29, s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 80191da:	ee37 7a08 	vadd.f32	s14, s14, s16
	i = lrintf(r - 0.5f);
 80191de:	eeac 0a2e 	vfma.f32	s0, s24, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 80191e2:	ee37 9a09 	vadd.f32	s18, s14, s18
	i = lrintf(r - 0.5f);
 80191e6:	f004 fd97 	bl	801dd18 <lrintf>
	r -= (float)i;
 80191ea:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191ee:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80191f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80191f6:	eef1 7a4e 	vneg.f32	s15, s28
	r -= (float)i;
 80191fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80191fe:	3301      	adds	r3, #1
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019200:	eea9 ba2d 	vfma.f32	s22, s18, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019208:	ee9c 7a2e 	vfnms.f32	s14, s24, s29
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801920c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019210:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019214:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019218:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801921c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019220:	eef0 ca4b 	vmov.f32	s25, s22
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019224:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019228:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801922c:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019230:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019234:	3301      	adds	r3, #1
 8019236:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801923a:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 801923e:	f8d7 8000 	ldr.w	r8, [r7]
 8019242:	e5a9      	b.n	8018d98 <tMBTriangle_tick+0x700>
                    tMBTriangle_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 8019244:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80192dc <tMBTriangle_tick+0xc44>
 8019248:	ee3e fa69 	vsub.f32	s30, s28, s19
	i = lrintf(r - 0.5f);
 801924c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019250:	ee2c ca07 	vmul.f32	s24, s24, s14
 8019254:	ee7d 7a2d 	vadd.f32	s15, s26, s27
 8019258:	eeaf 0a0c 	vfma.f32	s0, s30, s24
 801925c:	ee27 eaab 	vmul.f32	s28, s15, s23
 8019260:	f004 fd5a 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019264:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019268:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801926c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 8019270:	eef4 eae8 	vcmpe.f32	s29, s17
	r -= (float)i;
 8019274:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019278:	3301      	adds	r3, #1
 801927a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
                if (p_at_reset >= 1.0f) {
 801927e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8019282:	eedf 7a0c 	vfnms.f32	s15, s30, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019286:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801928a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801928e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019292:	eeb0 fa4e 	vmov.f32	s30, s28
 8019296:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801929a:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801929e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80192a2:	eef1 7a4e 	vneg.f32	s15, s28
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80192a6:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80192aa:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80192ae:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80192b2:	f103 0301 	add.w	r3, r3, #1
 80192b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80192ba:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 80192be:	da7d      	bge.n	80193bc <tMBTriangle_tick+0xd24>
                    x = 0.5f - (p_at_reset - b) * invB1;
 80192c0:	ee79 6a88 	vadd.f32	s13, s19, s16
 80192c4:	f8d7 8000 	ldr.w	r8, [r7]
 80192c8:	ee76 6aac 	vadd.f32	s13, s13, s25
 80192cc:	ee76 6ac9 	vsub.f32	s13, s13, s18
 80192d0:	eea6 baad 	vfma.f32	s22, s13, s27
 80192d4:	eef0 ca4b 	vmov.f32	s25, s22
 80192d8:	e55e      	b.n	8018d98 <tMBTriangle_tick+0x700>
 80192da:	bf00      	nop
 80192dc:	42800000 	.word	0x42800000
            x = 0.5f - (p_at_reset - b) * invB1;
 80192e0:	ee39 7a88 	vadd.f32	s14, s19, s16
 80192e4:	ee3c 9ac9 	vsub.f32	s18, s25, s18
                if (p_at_reset < b) {
 80192e8:	eef4 9aee 	vcmpe.f32	s19, s29
            x = 0.5f - (p_at_reset - b) * invB1;
 80192ec:	ee37 7a09 	vadd.f32	s14, s14, s18
                if (p_at_reset < b) {
 80192f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 80192f4:	ee6d 7a87 	vmul.f32	s15, s27, s14
                if (p_at_reset < b) {
 80192f8:	f300 80da 	bgt.w	80194b0 <tMBTriangle_tick+0xe18>
                if (p_at_reset < 0.0f) {
 80192fc:	eef5 eac0 	vcmpe.f32	s29, #0.0
 8019300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019304:	f100 8128 	bmi.w	8019558 <tMBTriangle_tick+0xec0>
        else if (sw < 0)
 8019308:	ed1f 7a0c 	vldr	s14, [pc, #-48]	; 80192dc <tMBTriangle_tick+0xc44>
	i = lrintf(r - 0.5f);
 801930c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019310:	ee77 eaa8 	vadd.f32	s29, s15, s17
 8019314:	ee2c ca07 	vmul.f32	s24, s24, s14
 8019318:	eef1 8a48 	vneg.f32	s17, s16
 801931c:	eea8 0a4c 	vfms.f32	s0, s16, s24
 8019320:	f004 fcfa 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019324:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019328:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 801932c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019330:	eedc 7a28 	vfnms.f32	s15, s24, s17
 8019334:	e6d3      	b.n	80190de <tMBTriangle_tick+0xa46>
                x = -0.5f + p * invB;
 8019336:	eeed 8a2c 	vfma.f32	s17, s26, s25
                k = 0;
 801933a:	2600      	movs	r6, #0
                p -= 1.0f;
 801933c:	eeb0 8a6c 	vmov.f32	s16, s25
 8019340:	f7ff ba0c 	b.w	801875c <tMBTriangle_tick+0xc4>
                x = -0.5f + p * invB;
 8019344:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBTriangle* c = *osc;
 8019348:	683f      	ldr	r7, [r7, #0]
 801934a:	ee3f 9a69 	vsub.f32	s18, s30, s19
                k = 0;
 801934e:	464e      	mov	r6, r9
}
 8019350:	eeb0 8a4f 	vmov.f32	s16, s30
	i = lrintf(r - 0.5f);
 8019354:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 8019358:	eeed 8a0f 	vfma.f32	s17, s26, s30
	scale *= w;
 801935c:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 8019360:	eea9 0a0c 	vfma.f32	s0, s18, s24
 8019364:	f004 fcd8 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019368:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801936c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019370:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019374:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019378:	3301      	adds	r3, #1
	scale *= w;
 801937a:	ee6d ba2b 	vmul.f32	s23, s26, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801937e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019382:	eed9 7a0c 	vfnms.f32	s15, s18, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019386:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801938a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801938e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019392:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019396:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801939a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801939e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80193a2:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80193a6:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80193aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80193ae:	3301      	adds	r3, #1
 80193b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80193b4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 80193b8:	f7ff b9d0 	b.w	801875c <tMBTriangle_tick+0xc4>
 80193bc:	f8d7 8000 	ldr.w	r8, [r7]
 80193c0:	e5c4      	b.n	8018f4c <tMBTriangle_tick+0x8b4>
	i = lrintf(r - 0.5f);
 80193c2:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 80193c6:	ed1f 7a3b 	vldr	s14, [pc, #-236]	; 80192dc <tMBTriangle_tick+0xc44>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 80193ca:	ee3d ba2d 	vadd.f32	s22, s26, s27
 80193ce:	ee2c ca07 	vmul.f32	s24, s24, s14
	i = lrintf(r - 0.5f);
 80193d2:	eeb0 0a67 	vmov.f32	s0, s15
 80193d6:	edcd 7a01 	vstr	s15, [sp, #4]
 80193da:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    p_at_reset += 1.0f;
 80193de:	ee7e faa8 	vadd.f32	s31, s29, s17
	i = lrintf(r - 0.5f);
 80193e2:	eeac 0a0e 	vfma.f32	s0, s24, s28
 80193e6:	f004 fc97 	bl	801dd18 <lrintf>
	r -= (float)i;
 80193ea:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193ee:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80193f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80193f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
                if (k && p_at_reset < b) {
 80193fa:	eddd 7a01 	vldr	s15, [sp, #4]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80193fe:	3301      	adds	r3, #1
 8019400:	eeb1 9a4b 	vneg.f32	s18, s22
                if (k && p_at_reset < b) {
 8019404:	eef4 9aef 	vcmpe.f32	s19, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019408:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801940c:	ee9c 7a0e 	vfnms.f32	s14, s24, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019410:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019414:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019418:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 801941c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019420:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019424:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019428:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801942c:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019430:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019434:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019438:	f103 0301 	add.w	r3, r3, #1
 801943c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019440:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 8019444:	f340 80ed 	ble.w	8019622 <tMBTriangle_tick+0xf8a>
                    x = -0.5f + p_at_reset * invB;
 8019448:	ee78 ca69 	vsub.f32	s25, s16, s19
	_tMBTriangle* c = *osc;
 801944c:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 801944e:	ee6d ea2f 	vmul.f32	s29, s26, s31
	r = MINBLEP_PHASES * phase * inv_w;
 8019452:	ee7c caaf 	vadd.f32	s25, s25, s31
	i = lrintf(r - 0.5f);
 8019456:	eeec 7a2c 	vfma.f32	s15, s24, s25
 801945a:	eeb0 0a67 	vmov.f32	s0, s15
 801945e:	f004 fc5b 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019462:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019466:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801946a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801946e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019472:	3301      	adds	r3, #1
	r -= (float)i;
 8019474:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801947c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019480:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019484:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019488:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801948c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8019490:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019494:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019498:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801949c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 80194a0:	3301      	adds	r3, #1
 80194a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80194a6:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 80194aa:	f8d7 8000 	ldr.w	r8, [r7]
 80194ae:	e5e6      	b.n	801907e <tMBTriangle_tick+0x9e6>
	r = MINBLEP_PHASES * phase * inv_w;
 80194b0:	ed5f 7a76 	vldr	s15, [pc, #-472]	; 80192dc <tMBTriangle_tick+0xc44>
 80194b4:	ee78 ca47 	vsub.f32	s25, s16, s14
	i = lrintf(r - 0.5f);
 80194b8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 80194bc:	ee2c ca27 	vmul.f32	s24, s24, s15
	scale *= w;
 80194c0:	ee3d ba2d 	vadd.f32	s22, s26, s27
	i = lrintf(r - 0.5f);
 80194c4:	eeac 0a2c 	vfma.f32	s0, s24, s25
 80194c8:	f004 fc26 	bl	801dd18 <lrintf>
	r -= (float)i;
 80194cc:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194d0:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 80194d4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 80194d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194dc:	3301      	adds	r3, #1
	scale *= w;
 80194de:	ee2b ba2b 	vmul.f32	s22, s22, s23
                if (p_at_reset < 0.0f) {
 80194e2:	eef5 eac0 	vcmpe.f32	s29, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 80194ea:	eedc 7a2c 	vfnms.f32	s15, s24, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80194ee:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80194f2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80194f6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 80194fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 80194fe:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019502:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019506:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801950a:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801950e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019512:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019516:	f103 0301 	add.w	r3, r3, #1
 801951a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801951e:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 8019522:	d46e      	bmi.n	8019602 <tMBTriangle_tick+0xf6a>
                    x = -0.5f + p_at_reset * invB;
 8019524:	ee6d ea2e 	vmul.f32	s29, s26, s29
        else if (sw < 0)
 8019528:	f8d7 8000 	ldr.w	r8, [r7]
 801952c:	eeb1 9a4b 	vneg.f32	s18, s22
 8019530:	e5a5      	b.n	801907e <tMBTriangle_tick+0x9e6>
	i = lrintf(r - 0.5f);
 8019532:	eeb0 0a6c 	vmov.f32	s0, s25
                    x = -0.5f + p_at_reset * invB;
 8019536:	eeed ca2e 	vfma.f32	s25, s26, s29
	i = lrintf(r - 0.5f);
 801953a:	eeac 0a08 	vfma.f32	s0, s24, s16
 801953e:	f004 fbeb 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019542:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019546:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 801954a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801954e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019552:	eedc 7a08 	vfnms.f32	s15, s24, s16
 8019556:	e44d      	b.n	8018df4 <tMBTriangle_tick+0x75c>
                    tMBTriangle_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019558:	ee3d ba2d 	vadd.f32	s22, s26, s27
 801955c:	ed5f 7aa1 	vldr	s15, [pc, #-644]	; 80192dc <tMBTriangle_tick+0xc44>
 8019560:	ee2c ca27 	vmul.f32	s24, s24, s15
 8019564:	ee2b ba2b 	vmul.f32	s22, s22, s23
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019568:	eef7 fa00 	vmov.f32	s31, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801956c:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019570:	ee39 9a08 	vadd.f32	s18, s18, s16
 8019574:	ee79 7aef 	vsub.f32	s15, s19, s31
	i = lrintf(r - 0.5f);
 8019578:	eeb0 0a6c 	vmov.f32	s0, s25
 801957c:	eef0 ea6f 	vmov.f32	s29, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 8019580:	ee79 7a27 	vadd.f32	s15, s18, s15
	i = lrintf(r - 0.5f);
 8019584:	eeae 0a0c 	vfma.f32	s0, s28, s24
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019588:	eeb1 9a4b 	vneg.f32	s18, s22
 801958c:	eee7 eaad 	vfma.f32	s29, s15, s27
	i = lrintf(r - 0.5f);
 8019590:	f004 fbc2 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019594:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019598:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801959c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80195a0:	eeb0 0a6c 	vmov.f32	s0, s25
	r -= (float)i;
 80195a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80195a8:	3301      	adds	r3, #1
 80195aa:	eef1 8a48 	vneg.f32	s17, s16
 80195ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 80195b2:	eea8 0a4c 	vfms.f32	s0, s16, s24
	r -= (float)i;
 80195b6:	eede 7a0c 	vfnms.f32	s15, s28, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 80195ba:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80195be:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 80195c2:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 80195c6:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 80195ca:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 80195ce:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 80195d2:	ed83 9a3c 	vstr	s18, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 80195d6:	edc3 fa3d 	vstr	s31, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 80195da:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 80195de:	3301      	adds	r3, #1
 80195e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80195e4:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 80195e8:	f004 fb96 	bl	801dd18 <lrintf>
	r -= (float)i;
 80195ec:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 80195f0:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 80195f4:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 80195f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80195fc:	eedc 7a28 	vfnms.f32	s15, s24, s17
 8019600:	e56d      	b.n	80190de <tMBTriangle_tick+0xa46>
 8019602:	f8d7 8000 	ldr.w	r8, [r7]
 8019606:	e7af      	b.n	8019568 <tMBTriangle_tick+0xed0>
    p += sw - (int)sw;
 8019608:	eeb0 8a4e 	vmov.f32	s16, s28
 801960c:	f7ff b887 	b.w	801871e <tMBTriangle_tick+0x86>
                x = 0.5f - (p - b) * invB1;
 8019610:	ee79 7ac8 	vsub.f32	s15, s19, s16
                k = 1;
 8019614:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 8019616:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801961a:	eee7 8aad 	vfma.f32	s17, s15, s27
 801961e:	f7ff b89d 	b.w	801875c <tMBTriangle_tick+0xc4>
	i = lrintf(r - 0.5f);
 8019622:	eee8 7a4c 	vfms.f32	s15, s16, s24
                    x = 0.5f - (p_at_reset - b)  * invB1;
 8019626:	ee79 caef 	vsub.f32	s25, s19, s31
 801962a:	eeb1 9a48 	vneg.f32	s18, s16
 801962e:	eeec 8aad 	vfma.f32	s17, s25, s27
	i = lrintf(r - 0.5f);
 8019632:	eeb0 0a67 	vmov.f32	s0, s15
 8019636:	f004 fb6f 	bl	801dd18 <lrintf>
	r -= (float)i;
 801963a:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801963e:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 8019642:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 8019646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801964a:	eef0 ea68 	vmov.f32	s29, s17
 801964e:	eedc 7a09 	vfnms.f32	s15, s24, s18
 8019652:	e544      	b.n	80190de <tMBTriangle_tick+0xa46>

08019654 <tMBTriangle_setFreq>:

void tMBTriangle_setFreq(tMBTriangle* const osc, float f)
{
    _tMBTriangle* c = *osc;
 8019654:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 8019656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801965a:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 801965e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019662:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 8019666:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801966a:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801966e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 8019672:	4770      	bx	lr

08019674 <tMBTriangle_setWidth>:

void tMBTriangle_setWidth(tMBTriangle* const osc, float w)
{
 8019674:	b510      	push	{r4, lr}
    _tMBTriangle* c = *osc;
 8019676:	6804      	ldr	r4, [r0, #0]
{
 8019678:	eef0 0a40 	vmov.f32	s1, s0
    w = LEAF_clip(0.0f, w, 0.99f);
 801967c:	ed9f 1a04 	vldr	s2, [pc, #16]	; 8019690 <tMBTriangle_setWidth+0x1c>
 8019680:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8019694 <tMBTriangle_setWidth+0x20>
 8019684:	f7fd fde4 	bl	8017250 <LEAF_clip>
    c->waveform = w;
 8019688:	ed84 0a03 	vstr	s0, [r4, #12]
}
 801968c:	bd10      	pop	{r4, pc}
 801968e:	bf00      	nop
 8019690:	3f7d70a4 	.word	0x3f7d70a4
 8019694:	00000000 	.word	0x00000000

08019698 <tMBTriangle_sync>:

float tMBTriangle_sync(tMBTriangle* const osc, float value)
{
    _tMBTriangle* c = *osc;
 8019698:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801969a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801969e:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 80196a2:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 80196a6:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 80196aa:	eef1 7a67 	vneg.f32	s15, s15
 80196ae:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 80196b2:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80196b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ba:	eef4 6ac7 	vcmpe.f32	s13, s14
 80196be:	bfcc      	ite	gt
 80196c0:	2201      	movgt	r2, #1
 80196c2:	2200      	movle	r2, #0
 80196c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196c8:	f002 0201 	and.w	r2, r2, #1
 80196cc:	bf88      	it	hi
 80196ce:	2200      	movhi	r2, #0
 80196d0:	b122      	cbz	r2, 80196dc <tMBTriangle_sync+0x44>
 80196d2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80196d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196da:	da04      	bge.n	80196e6 <tMBTriangle_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 80196dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80196f4 <tMBTriangle_sync+0x5c>
 80196e0:	ed83 7a05 	vstr	s14, [r3, #20]
    
    return value;
}
 80196e4:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 80196e6:	ee37 7a66 	vsub.f32	s14, s14, s13
 80196ea:	ee27 7a06 	vmul.f32	s14, s14, s12
 80196ee:	ed83 7a05 	vstr	s14, [r3, #20]
}
 80196f2:	4770      	bx	lr
 80196f4:	00000000 	.word	0x00000000

080196f8 <tMBSineTri_init>:


//==========================================================================================================

void tMBSineTri_init(tMBSineTri* const osc, LEAF* const leaf)
{
 80196f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSineTri_initToPool(osc, &leaf->mempool);
}

void tMBSineTri_initToPool(tMBSineTri* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 80196fa:	698e      	ldr	r6, [r1, #24]
{
 80196fc:	4607      	mov	r7, r0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 80196fe:	f44f 707d 	mov.w	r0, #1012	; 0x3f4
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 8019702:	2500      	movs	r5, #0
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 8019704:	4631      	mov	r1, r6
 8019706:	f7fd ff93 	bl	8017630 <mpool_alloc>
 801970a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 801970c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 801970e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 8019710:	6871      	ldr	r1, [r6, #4]
    c->syncdir = 1.0f;
 8019712:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->_sinPhase = 0.0f;
    c->_p = 0.25f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 8019716:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8019784 <tMBSineTri_init+0x8c>
    _tMBSineTri* c = *osc = (_tMBSineTri*) mpool_alloc(sizeof(_tMBSineTri), m);
 801971a:	4604      	mov	r4, r0
    c->invSampleRate = leaf->invSampleRate;
 801971c:	ed91 7a01 	vldr	s14, [r1, #4]
    c->_p = 0.25f;  /* phase [0, 1) */
 8019720:	f04f 517a 	mov.w	r1, #1048576000	; 0x3e800000
    c->freq = 440.f;
 8019724:	eddf 7a18 	vldr	s15, [pc, #96]	; 8019788 <tMBSineTri_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 8019728:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 801972c:	6103      	str	r3, [r0, #16]
    c->freq = 440.f;
 801972e:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 8019732:	6143      	str	r3, [r0, #20]
    c->syncdir = 1.0f;
 8019734:	6182      	str	r2, [r0, #24]
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8019736:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->waveform = 0.0f;
 801973a:	60c3      	str	r3, [r0, #12]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801973c:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->shape = 0.0f;
 8019740:	6343      	str	r3, [r0, #52]	; 0x34
    c->_z = 0.0f;
 8019742:	62c3      	str	r3, [r0, #44]	; 0x2c
    c->_sinPhase = 0.0f;
 8019744:	6303      	str	r3, [r0, #48]	; 0x30
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
    c->maxBLEPphaseSlope = MINBLEP_PHASES * SLOPE_DD_PULSE_LENGTH;
    c->sineMask = 2047;
 8019746:	f240 73ff 	movw	r3, #2047	; 0x7ff
    c->_p = 0.25f;  /* phase [0, 1) */
 801974a:	6201      	str	r1, [r0, #32]
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801974c:	490f      	ldr	r1, [pc, #60]	; (801978c <tMBSineTri_init+0x94>)
    c->softsync = 0;
 801974e:	61c5      	str	r5, [r0, #28]
    c->_j = 0;
 8019750:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 8019752:	6282      	str	r2, [r0, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 8019754:	2280      	movs	r2, #128	; 0x80
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 8019756:	63c5      	str	r5, [r0, #60]	; 0x3c
    c->sineMask = 2047;
 8019758:	f8c0 33f0 	str.w	r3, [r0, #1008]	; 0x3f0
    c->invSampleRate = leaf->invSampleRate;
 801975c:	ed80 7afb 	vstr	s14, [r0, #1004]	; 0x3ec
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 8019760:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 8019764:	edc0 6a10 	vstr	s13, [r0, #64]	; 0x40
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 8019768:	e9c0 5119 	strd	r5, r1, [r0, #100]	; 0x64
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801976c:	4629      	mov	r1, r5
 801976e:	306c      	adds	r0, #108	; 0x6c
 8019770:	f003 feb0 	bl	801d4d4 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 8019774:	4629      	mov	r1, r5
 8019776:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801977a:	2220      	movs	r2, #32
}
 801977c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 8019780:	f003 bea8 	b.w	801d4d4 <memset>
 8019784:	3b14f209 	.word	0x3b14f209
 8019788:	43dc0000 	.word	0x43dc0000
 801978c:	11c01200 	.word	0x11c01200

08019790 <tMBSineTri_tick>:
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
    c->numBLEPs = (c->numBLEPs + 1) & 63;
}

float tMBSineTri_tick(tMBSineTri* const osc)
{
 8019790:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019794:	ed2d 8b10 	vpush	{d8-d15}
    _tMBSineTri* c = *osc;
 8019798:	6804      	ldr	r4, [r0, #0]

    p = c->_p;  /* phase [0, 1) */
    sinPhase = c->_sinPhase;
    w = c->_w;  /* phase increment */
    b = c->_b;  /* duty cycle (0, 1) */
    invB = 1.0f / b;
 801979a:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */



    b = 0.5f * (1.0f + c->waveform);
 801979e:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
{
 80197a2:	b083      	sub	sp, #12
    b = 0.5f * (1.0f + c->waveform);
 80197a4:	ed94 9a03 	vldr	s18, [r4, #12]
{
 80197a8:	4607      	mov	r7, r0
    sync = c->sync;
 80197aa:	ed94 7a05 	vldr	s14, [r4, #20]
    b = 0.5f * (1.0f + c->waveform);
 80197ae:	ee39 9a28 	vadd.f32	s18, s18, s17
    invB = 1.0f / b;
 80197b2:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
    b1 = 1.0f - b;
    invB1 = 1.0f / b1;
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80197b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    p = c->_p;  /* phase [0, 1) */
 80197ba:	ed94 aa08 	vldr	s20, [r4, #32]
    invB = 1.0f / b;
 80197be:	ee88 daa7 	vdiv.f32	s26, s17, s15
    sinPhase = c->_sinPhase;
 80197c2:	ed94 8a0c 	vldr	s16, [r4, #48]	; 0x30
    w = c->_w;  /* phase increment */
 80197c6:	edd4 aa09 	vldr	s21, [r4, #36]	; 0x24
    z = c->_z;  /* low pass filter state */
 80197ca:	edd4 9a0b 	vldr	s19, [r4, #44]	; 0x2c
    b = 0.5f * (1.0f + c->waveform);
 80197ce:	ee29 9a2b 	vmul.f32	s18, s18, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80197d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b1 = 1.0f - b;
 80197d6:	ee78 7ac9 	vsub.f32	s15, s17, s18
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 80197da:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
    invB1 = 1.0f / b1;
 80197de:	eec8 daa7 	vdiv.f32	s27, s17, s15
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80197e2:	f340 81d8 	ble.w	8019b96 <tMBSineTri_tick+0x406>
 80197e6:	f8d4 901c 	ldr.w	r9, [r4, #28]
 80197ea:	f1b9 0f00 	cmp.w	r9, #0
 80197ee:	f340 8189 	ble.w	8019b04 <tMBSineTri_tick+0x374>
 80197f2:	ed94 7a06 	vldr	s14, [r4, #24]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 80197f6:	edd4 ca10 	vldr	s25, [r4, #64]	; 0x40
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 80197fa:	eeb1 7a47 	vneg.f32	s14, s14
    sw = w * c->syncdir;
 80197fe:	ee27 ca2a 	vmul.f32	s24, s14, s21
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 8019802:	ed84 7a06 	vstr	s14, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8019806:	ee67 ca2c 	vmul.f32	s25, s14, s25
    float inc_amount = sw - (int)sw;
 801980a:	eefd 7acc 	vcvt.s32.f32	s15, s24
 801980e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019812:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8019816:	ee37 aa8a 	vadd.f32	s20, s15, s20
    sinPhase += inc_amount;
 801981a:	ee37 8a88 	vadd.f32	s16, s15, s16
                x = -0.5f + p * invB;
                tMBSineTri_place_dd_noBuffer(osc, j, b - p, -inv_sw, -invB1 - invB, 1.0f, -sw);
                k = 0;
            }
        }
    } else if (!k) {  /* normal operation, slope currently up */
 801981e:	2e00      	cmp	r6, #0
 8019820:	f040 81cc 	bne.w	8019bbc <tMBSineTri_tick+0x42c>

        x = -0.5f + p * invB;
 8019824:	eebe ba00 	vmov.f32	s22, #224	; 0xbf000000 -0.5
        if (sw > 0)
 8019828:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = -0.5f + p * invB;
 801982c:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8019830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = -0.5f + p * invB;
 8019834:	eeea 8a0d 	vfma.f32	s17, s20, s26
        if (sw > 0)
 8019838:	f340 82a1 	ble.w	8019d7e <tMBSineTri_tick+0x5ee>
        {
            if (p >= b) {
 801983c:	eeb4 aac9 	vcmpe.f32	s20, s18
 8019840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019844:	f280 825b 	bge.w	8019cfe <tMBSineTri_tick+0x56e>
    k = c->_k;  /* output state, 0 = positive slope, 1 = negative slope */
 8019848:	4633      	mov	r3, r6
                x = 0.5f - (p - b) * invB1;;
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
                k = 1;
            }
            if (p >= 1.0f) {
 801984a:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801984e:	eeb4 aacb 	vcmpe.f32	s20, s22
 8019852:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019856:	f280 83c8 	bge.w	8019fea <tMBSineTri_tick+0x85a>
 801985a:	461e      	mov	r6, r3
    uint32_t idx;
    float samp0;
    float samp1;

    // Wavetable synthesis
    while (sinPhase >= 1.0f)
 801985c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8019860:	1d2b      	adds	r3, r5, #4
    c->_f[currentSamp] = x * c->shape; //add the triangle
 8019862:	ed94 4a0d 	vldr	s8, [r4, #52]	; 0x34
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 8019866:	f003 0307 	and.w	r3, r3, #7
    while (sinPhase >= 1.0f)
 801986a:	eeb4 8ac7 	vcmpe.f32	s16, s14
    c->_f[currentSamp] = x * c->shape; //add the triangle
 801986e:	ee64 8a28 	vmul.f32	s17, s8, s17
    while (sinPhase >= 1.0f)
 8019872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019876:	db0a      	blt.n	801988e <tMBSineTri_tick+0xfe>
 8019878:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
    {
    	sinPhase -= 1.0f;
 801987c:	eef0 7a48 	vmov.f32	s15, s16
 8019880:	ee38 8a47 	vsub.f32	s16, s16, s14
    while (sinPhase >= 1.0f)
 8019884:	eef4 7ae6 	vcmpe.f32	s15, s13
 8019888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801988c:	daf6      	bge.n	801987c <tMBSineTri_tick+0xec>
    }

    while (sinPhase < 0.0f)
 801988e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8019892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019896:	d50c      	bpl.n	80198b2 <tMBSineTri_tick+0x122>
    {
    	sinPhase += 1.0f;
 8019898:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    while (sinPhase < 0.0f)
 801989c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
    	sinPhase += 1.0f;
 80198a0:	eef0 7a48 	vmov.f32	s15, s16
 80198a4:	ee38 8a26 	vadd.f32	s16, s16, s13
    while (sinPhase < 0.0f)
 80198a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80198ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80198b0:	d4f6      	bmi.n	80198a0 <tMBSineTri_tick+0x110>
    }
    float tempPhase = (sinPhase * 2048.0f);
 80198b2:	eddf 7abd 	vldr	s15, [pc, #756]	; 8019ba8 <tMBSineTri_tick+0x418>
    idx = (idx + 1) & c->sineMask;
    samp1 = __leaf_table_sinewave[idx];

    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151

    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80198b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    idx = (idx + 1) & c->sineMask;
 80198ba:	f8d4 03f0 	ldr.w	r0, [r4, #1008]	; 0x3f0
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80198be:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
    float tempPhase = (sinPhase * 2048.0f);
 80198c2:	ee68 7a27 	vmul.f32	s15, s16, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80198c6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80198ca:	ee37 7a44 	vsub.f32	s14, s14, s8
    idx = (uint32_t)tempPhase; //11 bit table
 80198ce:	eefc 6ae7 	vcvt.u32.f32	s13, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 80198d2:	ee27 7a25 	vmul.f32	s14, s14, s11
    idx = (uint32_t)tempPhase; //11 bit table
 80198d6:	ee16 2a90 	vmov	r2, s13
    tempFrac = tempPhase - idx;
 80198da:	eef8 6a66 	vcvt.f32.u32	s13, s13
    idx = (idx + 1) & c->sineMask;
 80198de:	1c51      	adds	r1, r2, #1
    tempFrac = tempPhase - idx;
 80198e0:	ee77 7ae6 	vsub.f32	s15, s15, s13
    idx = (idx + 1) & c->sineMask;
 80198e4:	4008      	ands	r0, r1
    samp0 = __leaf_table_sinewave[idx];
 80198e6:	49b1      	ldr	r1, [pc, #708]	; (8019bac <tMBSineTri_tick+0x41c>)
 80198e8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    samp1 = __leaf_table_sinewave[idx];
 80198ec:	eb01 0180 	add.w	r1, r1, r0, lsl #2
    samp0 = __leaf_table_sinewave[idx];
 80198f0:	edd2 6a00 	vldr	s13, [r2]
    float sinOut = (samp0 + (samp1 - samp0) * tempFrac) * 0.5f; // 1/2097151
 80198f4:	ed91 6a00 	vldr	s12, [r1]
 80198f8:	ee36 6a66 	vsub.f32	s12, s12, s13
 80198fc:	eee6 6a27 	vfma.f32	s13, s12, s15
    c->_f[currentSamp] += sinOut * (1.0f - c->shape); //add the sine
 8019900:	eee7 8a26 	vfma.f32	s17, s14, s13
 8019904:	edc3 8a11 	vstr	s17, [r3, #68]	; 0x44


    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 8019908:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
 801990c:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019910:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019914:	2b00      	cmp	r3, #0
 8019916:	f000 80d3 	beq.w	8019ac0 <tMBSineTri_tick+0x330>
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801991a:	f8b4 c066 	ldrh.w	ip, [r4, #102]	; 0x66
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801991e:	2200      	movs	r2, #0
    			c->numBLEPs--;
    		}
    	}
    	else  // slope blep
    	{
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019920:	48a3      	ldr	r0, [pc, #652]	; (8019bb0 <tMBSineTri_tick+0x420>)
 8019922:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 8019926:	4fa3      	ldr	r7, [pc, #652]	; (8019bb4 <tMBSineTri_tick+0x424>)
 8019928:	e053      	b.n	80199d2 <tMBSineTri_tick+0x242>
 801992a:	f8bd e006 	ldrh.w	lr, [sp, #6]
 801992e:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8019932:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019936:	fa1f fe8e 	uxth.w	lr, lr
 801993a:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 801993e:	fa1f f989 	uxth.w	r9, r9
 8019942:	b29b      	uxth	r3, r3
 8019944:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8019948:	fa1f f888 	uxth.w	r8, r8
 801994c:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8019950:	eb04 0848 	add.w	r8, r4, r8, lsl #1
 8019954:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019958:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 801995c:	f8b8 806c 	ldrh.w	r8, [r8, #108]	; 0x6c
 8019960:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8019964:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019968:	eb07 09c9 	add.w	r9, r7, r9, lsl #3
 801996c:	ed93 5a3b 	vldr	s10, [r3, #236]	; 0xec
 8019970:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
 8019974:	ed99 7a00 	vldr	s14, [r9]
 8019978:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 801997c:	ed93 6a01 	vldr	s12, [r3, #4]
 8019980:	edde 6a3c 	vldr	s13, [lr, #240]	; 0xf0
 8019984:	eea5 7a06 	vfma.f32	s14, s10, s12
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019988:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801998c:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019990:	b29b      	uxth	r3, r3
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 8019992:	fa1f fe8e 	uxth.w	lr, lr
 8019996:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801999a:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801999e:	eee6 7a87 	vfma.f32	s15, s13, s14
 80199a2:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 80199a6:	f8b3 806c 	ldrh.w	r8, [r3, #108]	; 0x6c
 80199aa:	f108 0840 	add.w	r8, r8, #64	; 0x40
 80199ae:	f8a3 806c 	strh.w	r8, [r3, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 80199b2:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 80199b6:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 80199ba:	459e      	cmp	lr, r3
 80199bc:	d304      	bcc.n	80199c8 <tMBSineTri_tick+0x238>
        	//increment the position in the BLEP table
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
    		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
    		{
    			c->numBLEPs--;
 80199be:	f8b4 3064 	ldrh.w	r3, [r4, #100]	; 0x64
 80199c2:	3b01      	subs	r3, #1
 80199c4:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 80199c8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80199cc:	3201      	adds	r2, #1
 80199ce:	4293      	cmp	r3, r2
 80199d0:	dd76      	ble.n	8019ac0 <tMBSineTri_tick+0x330>
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 80199d2:	ebac 0302 	sub.w	r3, ip, r2
 80199d6:	b29b      	uxth	r3, r3
 80199d8:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 80199dc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80199e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80199e4:	f8ad 3006 	strh.w	r3, [sp, #6]
    	if (c->BLEPproperties[whichBLEP][2] < 0.5f) //step blep
 80199e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80199ec:	b29b      	uxth	r3, r3
 80199ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80199f2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80199f6:	edd3 7a3d 	vldr	s15, [r3, #244]	; 0xf4
 80199fa:	eef4 7ae5 	vcmpe.f32	s15, s11
 80199fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019a02:	d492      	bmi.n	801992a <tMBSineTri_tick+0x19a>
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019a04:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019a08:	f8bd e006 	ldrh.w	lr, [sp, #6]
 8019a0c:	b29b      	uxth	r3, r3
 8019a0e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 8019a12:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8019a16:	fa1f fe8e 	uxth.w	lr, lr
 8019a1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019a1e:	edd1 7a11 	vldr	s15, [r1, #68]	; 0x44
 8019a22:	fa1f f989 	uxth.w	r9, r9
 8019a26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8019a2a:	fa1f f888 	uxth.w	r8, r8
 8019a2e:	ed93 7a3c 	vldr	s14, [r3, #240]	; 0xf0
 8019a32:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 8019a36:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8019a3a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019a3e:	f8b9 906c 	ldrh.w	r9, [r9, #108]	; 0x6c
 8019a42:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
 8019a46:	b29b      	uxth	r3, r3
 8019a48:	ee24 7a07 	vmul.f32	s14, s8, s14
 8019a4c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8019a50:	f8be e06c 	ldrh.w	lr, [lr, #108]	; 0x6c
 8019a54:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8019a58:	ed98 5a3b 	vldr	s10, [r8, #236]	; 0xec
 8019a5c:	eb00 0889 	add.w	r8, r0, r9, lsl #2
 8019a60:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 8019a64:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8019a68:	ed98 6a01 	vldr	s12, [r8, #4]
 8019a6c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8019a70:	edde 6a00 	vldr	s13, [lr]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019a74:	f8bd e006 	ldrh.w	lr, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019a78:	edd3 4a00 	vldr	s9, [r3]
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019a7c:	fa1f fe8e 	uxth.w	lr, lr
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8019a80:	f8bd 8006 	ldrh.w	r8, [sp, #6]
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019a84:	ee36 6a64 	vsub.f32	s12, s12, s9
 8019a88:	eb04 0e4e 	add.w	lr, r4, lr, lsl #1
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8019a8c:	fa1f f888 	uxth.w	r8, r8
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019a90:	eee5 6a06 	vfma.f32	s13, s10, s12
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8019a94:	eb04 0848 	add.w	r8, r4, r8, lsl #1
    		c->_f[j] += (c->BLEPproperties[whichBLEP][1] * (slope_dd_table[c->BLEPindices[whichBLEP]] + c->BLEPproperties[whichBLEP][0] * (slope_dd_table[c->BLEPindices[whichBLEP]+1] - slope_dd_table[c->BLEPindices[whichBLEP]]))) * c->shape;
 8019a98:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019a9c:	edc1 7a11 	vstr	s15, [r1, #68]	; 0x44
    		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 8019aa0:	f8be 306c 	ldrh.w	r3, [lr, #108]	; 0x6c
 8019aa4:	3340      	adds	r3, #64	; 0x40
 8019aa6:	f8ae 306c 	strh.w	r3, [lr, #108]	; 0x6c
    		if (c->BLEPindices[whichBLEP] >= (c->maxBLEPphaseSlope)) //slope bleps are 71 length instead of 72 length so subtract 1
 8019aaa:	f8b8 e06c 	ldrh.w	lr, [r8, #108]	; 0x6c
 8019aae:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8019ab2:	459e      	cmp	lr, r3
 8019ab4:	d283      	bcs.n	80199be <tMBSineTri_tick+0x22e>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 8019ab6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8019aba:	3201      	adds	r2, #1
 8019abc:	4293      	cmp	r3, r2
 8019abe:	dc88      	bgt.n	80199d2 <tMBSineTri_tick+0x242>
    		}
    	}
    }

    z += 0.5f * (c->_f[j] - z);
 8019ac0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019ac4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 8019ac8:	3501      	adds	r5, #1
    z += 0.5f * (c->_f[j] - z);
 8019aca:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
    j = (j+1) & 7;
 8019ace:	f005 0507 	and.w	r5, r5, #7
    c->out = z;
    c->_p = p;
 8019ad2:	ed84 aa08 	vstr	s20, [r4, #32]
    z += 0.5f * (c->_f[j] - z);
 8019ad6:	ee77 7ae9 	vsub.f32	s15, s15, s19
    c->_w = w;
 8019ada:	edc4 aa09 	vstr	s21, [r4, #36]	; 0x24
    c->_b = b;
 8019ade:	ed84 9a0a 	vstr	s18, [r4, #40]	; 0x28
    c->_z = z;
    c->_j = j;
    c->_k = k;
    c->_sinPhase = sinPhase;
 8019ae2:	ed84 8a0c 	vstr	s16, [r4, #48]	; 0x30
    z += 0.5f * (c->_f[j] - z);
 8019ae6:	eee7 9a87 	vfma.f32	s19, s15, s14
    c->_k = k;
 8019aea:	e9c4 560e 	strd	r5, r6, [r4, #56]	; 0x38

    return -c->out;
 8019aee:	eeb1 0a69 	vneg.f32	s0, s19
    c->out = z;
 8019af2:	edc4 9a01 	vstr	s19, [r4, #4]
    c->_z = z;
 8019af6:	edc4 9a0b 	vstr	s19, [r4, #44]	; 0x2c
}
 8019afa:	b003      	add	sp, #12
 8019afc:	ecbd 8b10 	vpop	{d8-d15}
 8019b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    sw = w * c->syncdir;
 8019b04:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8019b08:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8019b0c:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8019b10:	ee6c caa7 	vmul.f32	s25, s25, s15
    float inc_amount = sw - (int)sw;
 8019b14:	eefd 7acc 	vcvt.s32.f32	s15, s24
 8019b18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b1c:	ee7c 7a67 	vsub.f32	s15, s24, s15
    p += inc_amount;
 8019b20:	ee37 ba8a 	vadd.f32	s22, s15, s20
    sinPhase += inc_amount;
 8019b24:	ee77 7a88 	vadd.f32	s15, s15, s16
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 8019b28:	f040 8644 	bne.w	801a7b4 <tMBSineTri_tick+0x1024>
        if (sw > 0)
 8019b2c:	eeb5 cac0 	vcmpe.f32	s24, #0.0
 8019b30:	46a0      	mov	r8, r4
        float eof_offset = sync * sw;
 8019b32:	ee2c 8a07 	vmul.f32	s16, s24, s14
        if (sw > 0)
 8019b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 8019b3a:	ee3b ea48 	vsub.f32	s28, s22, s16
        if (sw > 0)
 8019b3e:	f340 80cc 	ble.w	8019cda <tMBSineTri_tick+0x54a>
        	p = eof_offset + 0.25f;
 8019b42:	eeb5 aa00 	vmov.f32	s20, #80	; 0x3e800000  0.250
 8019b46:	ee38 aa0a 	vadd.f32	s20, s16, s20
        if (!k) {
 8019b4a:	2e00      	cmp	r6, #0
 8019b4c:	f040 81dd 	bne.w	8019f0a <tMBSineTri_tick+0x77a>
                if (p_at_reset >= b) {
 8019b50:	eeb4 9ace 	vcmpe.f32	s18, s28
 8019b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b58:	f240 844d 	bls.w	801a3f6 <tMBSineTri_tick+0xc66>
                if (p_at_reset >= 1.0f) {
 8019b5c:	eeb4 eae8 	vcmpe.f32	s28, s17
 8019b60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019b64:	f280 82b9 	bge.w	801a0da <tMBSineTri_tick+0x94a>
 8019b68:	eddf 7a13 	vldr	s15, [pc, #76]	; 8019bb8 <tMBSineTri_tick+0x428>
            x = -0.5f + p_at_reset * invB;
 8019b6c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019b70:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019b74:	eef0 fa40 	vmov.f32	s31, s0
	i = lrintf(r - 0.5f);
 8019b78:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8019b7c:	f004 f8cc 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019b80:	ee07 0a90 	vmov	s15, r0
            x = -0.5f + p_at_reset * invB;
 8019b84:	eeed fa0e 	vfma.f32	s31, s26, s28
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019b88:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8019b8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019b90:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 8019b94:	e1fd      	b.n	8019f92 <tMBSineTri_tick+0x802>
    sw = w * c->syncdir;
 8019b96:	edd4 ca06 	vldr	s25, [r4, #24]
    float inv_sw = c->_inv_w * c->syncdir;
 8019b9a:	edd4 7a10 	vldr	s15, [r4, #64]	; 0x40
    sw = w * c->syncdir;
 8019b9e:	ee2a caac 	vmul.f32	s24, s21, s25
    float inv_sw = c->_inv_w * c->syncdir;
 8019ba2:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019ba6:	e630      	b.n	801980a <tMBSineTri_tick+0x7a>
 8019ba8:	45000000 	.word	0x45000000
 8019bac:	08027574 	.word	0x08027574
 8019bb0:	080295f4 	.word	0x080295f4
 8019bb4:	0802dcf8 	.word	0x0802dcf8
 8019bb8:	42800000 	.word	0x42800000
        x = 0.5f - (p - b) * invB1;
 8019bbc:	eeb6 ba00 	vmov.f32	s22, #96	; 0x3f000000  0.5
        if (sw > 0)
 8019bc0:	eeb5 cac0 	vcmpe.f32	s24, #0.0
        x = 0.5f - (p - b) * invB1;
 8019bc4:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8019bc8:	eef0 8a4b 	vmov.f32	s17, s22
        if (sw > 0)
 8019bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        x = 0.5f - (p - b) * invB1;
 8019bd0:	eee7 8aad 	vfma.f32	s17, s15, s27
        if (sw > 0)
 8019bd4:	f340 8154 	ble.w	8019e80 <tMBSineTri_tick+0x6f0>
            if (p >= 1.0f) {
 8019bd8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
 8019bdc:	eeb4 aaeb 	vcmpe.f32	s20, s23
 8019be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019be4:	f6ff ae3a 	blt.w	801985c <tMBSineTri_tick+0xcc>
	i = lrintf(r - 0.5f);
 8019be8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
 8019bec:	ed5f 7a0e 	vldr	s15, [pc, #-56]	; 8019bb8 <tMBSineTri_tick+0x428>
                p -= 1.0f;
 8019bf0:	ee3a ea6b 	vsub.f32	s28, s20, s23
	_tMBSineTri* c = *osc;
 8019bf4:	683e      	ldr	r6, [r7, #0]
 8019bf6:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 8019bfa:	eeb0 0a68 	vmov.f32	s0, s17
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8019bfe:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	i = lrintf(r - 0.5f);
 8019c02:	eeae 0a2c 	vfma.f32	s0, s28, s25
	scale *= w;
 8019c06:	ee2c ca27 	vmul.f32	s24, s24, s15
	i = lrintf(r - 0.5f);
 8019c0a:	f004 f885 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019c0e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c12:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019c16:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            if (!k && p >= b) {
 8019c1a:	eeb4 9ace 	vcmpe.f32	s18, s28
	r -= (float)i;
 8019c1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c22:	3301      	adds	r3, #1
 8019c24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (!k && p >= b) {
 8019c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	r -= (float)i;
 8019c2c:	eede 7a2c 	vfnms.f32	s15, s28, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c30:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019c34:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019c38:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 8019c3c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019c40:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 8019c44:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019c48:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019c4c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019c50:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 8019c54:	f103 0301 	add.w	r3, r3, #1
 8019c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019c5c:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
            if (!k && p >= b) {
 8019c60:	f200 843b 	bhi.w	801a4da <tMBSineTri_tick+0xd4a>
                x = 0.5f - (p - b) * invB1;
 8019c64:	ee79 7a2b 	vadd.f32	s15, s18, s23
	_tMBSineTri* c = *osc;
 8019c68:	683f      	ldr	r7, [r7, #0]
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8019c6a:	ee3e da49 	vsub.f32	s26, s28, s18
	i = lrintf(r - 0.5f);
 8019c6e:	eeb0 0a68 	vmov.f32	s0, s17
                x = 0.5f - (p - b) * invB1;
 8019c72:	ee77 7aca 	vsub.f32	s15, s15, s20
 8019c76:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8019c7a:	eead 0a2c 	vfma.f32	s0, s26, s25
                p -= 1.0f;
 8019c7e:	eeb0 aa4e 	vmov.f32	s20, s28
                x = 0.5f - (p - b) * invB1;
 8019c82:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8019c86:	f004 f847 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019c8a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c8e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019c92:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019c96:	eef1 7a4c 	vneg.f32	s15, s24
	r -= (float)i;
 8019c9a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019c9e:	3301      	adds	r3, #1
 8019ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019ca4:	ee9d 7a2c 	vfnms.f32	s14, s26, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ca8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019cac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019cb0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019cb4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019cb8:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019cbc:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019cc0:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019cc4:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019cc8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
                k = 1;
 8019ccc:	2601      	movs	r6, #1
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019cce:	4433      	add	r3, r6
 8019cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019cd4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8019cd8:	e5c0      	b.n	801985c <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8019cda:	f100 828a 	bmi.w	801a1f2 <tMBSineTri_tick+0xa62>
        if (!k) {
 8019cde:	2e00      	cmp	r6, #0
 8019ce0:	f000 81f1 	beq.w	801a0c6 <tMBSineTri_tick+0x936>
            x = 0.5f - (p_at_reset - b) * invB1;
 8019ce4:	ee39 7a08 	vadd.f32	s14, s18, s16
    p += inc_amount;
 8019ce8:	eeb0 aa4b 	vmov.f32	s20, s22
            x = 0.5f - (p_at_reset - b) * invB1;
 8019cec:	eef0 8a6b 	vmov.f32	s17, s23
 8019cf0:	ee37 ba4b 	vsub.f32	s22, s14, s22
    sinPhase += inc_amount;
 8019cf4:	eeb0 8a67 	vmov.f32	s16, s15
            x = 0.5f - (p_at_reset - b) * invB1;
 8019cf8:	eeed 8a8b 	vfma.f32	s17, s27, s22
            if (sw > 0)
 8019cfc:	e5ae      	b.n	801985c <tMBSineTri_tick+0xcc>
                x = 0.5f - (p - b) * invB1;;
 8019cfe:	ed1f ea52 	vldr	s28, [pc, #-328]	; 8019bb8 <tMBSineTri_tick+0x428>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 8019d02:	ee7a ea49 	vsub.f32	s29, s20, s18
	i = lrintf(r - 0.5f);
 8019d06:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8019d0a:	f8d7 8000 	ldr.w	r8, [r7]
 8019d0e:	ee2c ea8e 	vmul.f32	s28, s25, s28
                x = 0.5f - (p - b) * invB1;;
 8019d12:	ee79 7a4a 	vsub.f32	s15, s18, s20
 8019d16:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8019d1a:	eeae 0a8e 	vfma.f32	s0, s29, s28
 8019d1e:	ee7d ba2d 	vadd.f32	s23, s26, s27
                x = 0.5f - (p - b) * invB1;;
 8019d22:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8019d26:	f003 fff7 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019d2a:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d2e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019d32:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019d36:	ee6b 7acc 	vnmul.f32	s15, s23, s24
	r -= (float)i;
 8019d3a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d3e:	3301      	adds	r3, #1
 8019d40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019d44:	ee9e 7a8e 	vfnms.f32	s14, s29, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019d48:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019d4c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019d50:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019d54:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019d58:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019d5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019d60:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019d64:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019d68:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019d6c:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019d70:	3301      	adds	r3, #1
 8019d72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019d76:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                k = 1;
 8019d7a:	2301      	movs	r3, #1
}
 8019d7c:	e565      	b.n	801984a <tMBSineTri_tick+0xba>
            if (p < 0.0f) {
 8019d7e:	eeb5 aa40 	vcmp.f32	s20, #0.0
 8019d82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d86:	f57f ad69 	bpl.w	801985c <tMBSineTri_tick+0xcc>
 8019d8a:	eeb5 ca40 	vcmp.f32	s24, #0.0
 8019d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d92:	f57f ad63 	bpl.w	801985c <tMBSineTri_tick+0xcc>
	r = MINBLEP_PHASES * phase * inv_w;
 8019d96:	ee2c ea8a 	vmul.f32	s28, s25, s20
	i = lrintf(r - 0.5f);
 8019d9a:	ed5f 8a79 	vldr	s17, [pc, #-484]	; 8019bb8 <tMBSineTri_tick+0x428>
 8019d9e:	eeb0 0a4b 	vmov.f32	s0, s22
	_tMBSineTri* c = *osc;
 8019da2:	f8d7 8000 	ldr.w	r8, [r7]
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8019da6:	ee7d 7a2d 	vadd.f32	s15, s26, s27
                p += 1.0f;
 8019daa:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8019dae:	eeae 0a28 	vfma.f32	s0, s28, s17
 8019db2:	ee2c ca27 	vmul.f32	s24, s24, s15
 8019db6:	f003 ffaf 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019dba:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019dbe:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019dc2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
                p += 1.0f;
 8019dc6:	ee3a aa2b 	vadd.f32	s20, s20, s23
	r -= (float)i;
 8019dca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019dce:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019dd0:	eeb1 7a4c 	vneg.f32	s14, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (k && p < b) {
 8019dd8:	eeb4 9aca 	vcmpe.f32	s18, s20
	r -= (float)i;
 8019ddc:	eede 7a28 	vfnms.f32	s15, s28, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019de0:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019de4:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019de8:	eb08 0343 	add.w	r3, r8, r3, lsl #1
            if (k && p < b) {
 8019dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019df0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019df4:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 8019df8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019dfc:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019e00:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019e04:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019e08:	f103 0301 	add.w	r3, r3, #1
 8019e0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e10:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (k && p < b) {
 8019e14:	f340 84d4 	ble.w	801a7c0 <tMBSineTri_tick+0x1030>
                x = -0.5f + p * invB;
 8019e18:	ee6c caa8 	vmul.f32	s25, s25, s17
	_tMBSineTri* c = *osc;
 8019e1c:	683f      	ldr	r7, [r7, #0]
 8019e1e:	ee7a da49 	vsub.f32	s27, s20, s18
	i = lrintf(r - 0.5f);
 8019e22:	eeb0 0a4b 	vmov.f32	s0, s22
                x = -0.5f + p * invB;
 8019e26:	eef0 8a4b 	vmov.f32	s17, s22
	i = lrintf(r - 0.5f);
 8019e2a:	eeac 0aad 	vfma.f32	s0, s25, s27
 8019e2e:	f003 ff73 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019e32:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e36:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019e3a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 8019e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e42:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 8019e44:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019e4c:	eedc 7aad 	vfnms.f32	s15, s25, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019e50:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019e54:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019e58:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019e5c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019e60:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 8019e64:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019e68:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019e6c:	edc3 ba3d 	vstr	s23, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019e70:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8019e74:	3301      	adds	r3, #1
 8019e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019e7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 8019e7e:	e4ed      	b.n	801985c <tMBSineTri_tick+0xcc>
        else if (sw < 0)
 8019e80:	f57f acec 	bpl.w	801985c <tMBSineTri_tick+0xcc>
            if (p < b) {
 8019e84:	eeb4 aac9 	vcmpe.f32	s20, s18
 8019e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e8c:	f100 8174 	bmi.w	801a178 <tMBSineTri_tick+0x9e8>
            if (p < 0.0f) {
 8019e90:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 8019e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e98:	f57f ace0 	bpl.w	801985c <tMBSineTri_tick+0xcc>
                p += 1.0f;
 8019e9c:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 8019ea0:	ed5f babb 	vldr	s23, [pc, #-748]	; 8019bb8 <tMBSineTri_tick+0x428>
	r = MINBLEP_PHASES * phase * inv_w;
 8019ea4:	ee6c ca8a 	vmul.f32	s25, s25, s20
	_tMBSineTri* c = *osc;
 8019ea8:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 8019eaa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                p += 1.0f;
 8019eae:	ee3a aa0b 	vadd.f32	s20, s20, s22
                x = 0.5f - (p - b) * invB1;
 8019eb2:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 8019eb6:	eeac 0aab 	vfma.f32	s0, s25, s23
                x = 0.5f - (p - b) * invB1;
 8019eba:	ee79 7a4a 	vsub.f32	s15, s18, s20
                tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, invB + invB1, 1.0f, -sw);
 8019ebe:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 8019ec2:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 8019ec6:	f003 ff27 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019eca:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ece:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 8019ed2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019ed6:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 8019eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ede:	3301      	adds	r3, #1
 8019ee0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 8019ee4:	eedc 7aab 	vfnms.f32	s15, s25, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019ee8:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019eec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019ef0:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8019ef4:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019ef8:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019efc:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019f00:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f04:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
 8019f08:	e6de      	b.n	8019cc8 <tMBSineTri_tick+0x538>
            x = 0.5f - (p_at_reset - b) * invB1;
 8019f0a:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset >= 1.0f) {
 8019f0e:	eeb4 eae8 	vcmpe.f32	s28, s17
            x = 0.5f - (p_at_reset - b) * invB1;
 8019f12:	eef0 fa6b 	vmov.f32	s31, s23
 8019f16:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset >= 1.0f) {
 8019f1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 8019f1e:	eeed faa7 	vfma.f32	s31, s27, s15
                if (p_at_reset >= 1.0f) {
 8019f22:	f280 81eb 	bge.w	801a2fc <tMBSineTri_tick+0xb6c>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 8019f26:	ee7d ea2d 	vadd.f32	s29, s26, s27
 8019f2a:	ed5f 7add 	vldr	s15, [pc, #-884]	; 8019bb8 <tMBSineTri_tick+0x428>
 8019f2e:	ee6c caa7 	vmul.f32	s25, s25, s15
 8019f32:	ee6e ea8c 	vmul.f32	s29, s29, s24
	i = lrintf(r - 0.5f);
 8019f36:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 8019f3a:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 8019f3e:	f003 feeb 	bl	801dd18 <lrintf>
	r -= (float)i;
 8019f42:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f46:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019f4a:	f000 013f 	and.w	r1, r0, #63	; 0x3f
	r -= (float)i;
 8019f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f52:	3301      	adds	r3, #1
	r -= (float)i;
 8019f54:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f5c:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f60:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019f64:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019f68:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f6c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019f70:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019f74:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019f78:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019f7c:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019f80:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019f84:	3301      	adds	r3, #1
 8019f86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019f8a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 8019f8e:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f92:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019f96:	ee2f 7acc 	vnmul.f32	s14, s31, s24
            if (p >= b) {
 8019f9a:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019f9e:	3301      	adds	r3, #1
 8019fa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p >= b) {
 8019fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 8019fa8:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019fac:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 8019fb0:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 8019fb4:	f8a3 106c 	strh.w	r1, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019fb8:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019fbc:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 8019fc0:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 8019fc4:	ed83 7a3c 	vstr	s14, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 8019fc8:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 8019fcc:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 8019fd0:	f103 0301 	add.w	r3, r3, #1
 8019fd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019fd8:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p >= b) {
 8019fdc:	d940      	bls.n	801a060 <tMBSineTri_tick+0x8d0>
            x = -0.5f + p * invB;
 8019fde:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
            k = 0;
 8019fe2:	464e      	mov	r6, r9
            x = -0.5f + p * invB;
 8019fe4:	eeed 8a0a 	vfma.f32	s17, s26, s20
 8019fe8:	e438      	b.n	801985c <tMBSineTri_tick+0xcc>
                p -= 1.0f;
 8019fea:	eddf 7ac3 	vldr	s15, [pc, #780]	; 801a2f8 <tMBSineTri_tick+0xb68>
 8019fee:	ee3a aa4b 	vsub.f32	s20, s20, s22
                x = -0.5f + p * invB;
 8019ff2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 8019ff6:	683f      	ldr	r7, [r7, #0]
 8019ff8:	ee6c caa7 	vmul.f32	s25, s25, s15
                tMBSineTri_place_dd_noBuffer(osc, j, p, inv_sw, invB + invB1, 1.0f, sw);
 8019ffc:	ee7d da2d 	vadd.f32	s27, s26, s27
                x = -0.5f + p * invB;
 801a000:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 801a004:	eeaa 0a2c 	vfma.f32	s0, s20, s25
 801a008:	f003 fe86 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a00c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a010:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a014:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a018:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a01c:	3301      	adds	r3, #1
	scale *= w;
 801a01e:	ee6c da2d 	vmul.f32	s27, s24, s27
                x = -0.5f + p * invB;
 801a022:	eeed 8a0a 	vfma.f32	s17, s26, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a026:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a02a:	eeda 7a2c 	vfnms.f32	s15, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a02e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a032:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a036:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a03a:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a03e:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 801a042:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a046:	edc3 da3c 	vstr	s27, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a04a:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a04e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a052:	3301      	adds	r3, #1
 801a054:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a058:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 801a05c:	f7ff bbfe 	b.w	801985c <tMBSineTri_tick+0xcc>
                tMBSineTri_place_dd_noBuffer(osc, j, p - b, inv_sw, -invB1 - invB, 1.0f, sw);
 801a060:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 801a064:	683f      	ldr	r7, [r7, #0]
	i = lrintf(r - 0.5f);
 801a066:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
                x = 0.5f - (p - b) * invB1;
 801a06a:	ee79 7a4a 	vsub.f32	s15, s18, s20
 801a06e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
	i = lrintf(r - 0.5f);
 801a072:	eeab 0a2c 	vfma.f32	s0, s22, s25
 801a076:	ee3d da2d 	vadd.f32	s26, s26, s27
                x = 0.5f - (p - b) * invB1;
 801a07a:	eee7 8aad 	vfma.f32	s17, s15, s27
	i = lrintf(r - 0.5f);
 801a07e:	f003 fe4b 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a082:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a086:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a08a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a08e:	ee2d da4c 	vnmul.f32	s26, s26, s24
	r -= (float)i;
 801a092:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a096:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a098:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a09c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a0a0:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a0a4:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a0a8:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a0ac:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a0b0:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a0b4:	eb07 0382 	add.w	r3, r7, r2, lsl #2
 801a0b8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a0bc:	ed83 da3c 	vstr	s26, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a0c0:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a0c4:	e600      	b.n	8019cc8 <tMBSineTri_tick+0x538>
            x = -0.5f + p_at_reset * invB;
 801a0c6:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
    sinPhase += inc_amount;
 801a0ca:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 801a0ce:	eeb0 aa4b 	vmov.f32	s20, s22
            x = -0.5f + p_at_reset * invB;
 801a0d2:	eeed 8a0e 	vfma.f32	s17, s26, s28
            else if (sw < 0)
 801a0d6:	f7ff bbc1 	b.w	801985c <tMBSineTri_tick+0xcc>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801a0da:	ee7d ea2d 	vadd.f32	s29, s26, s27
 801a0de:	eddf 7a86 	vldr	s15, [pc, #536]	; 801a2f8 <tMBSineTri_tick+0xb68>
 801a0e2:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a0e6:	ee2c fa2e 	vmul.f32	s30, s24, s29
                    p_at_reset -= 1.0f;
 801a0ea:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
                    x = -0.5f + p_at_reset * invB;
 801a0ee:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
                    p_at_reset -= 1.0f;
 801a0f2:	ee3e ea4b 	vsub.f32	s28, s28, s22
	i = lrintf(r - 0.5f);
 801a0f6:	eeb0 0a68 	vmov.f32	s0, s17
                    x = -0.5f + p_at_reset * invB;
 801a0fa:	eef0 fa68 	vmov.f32	s31, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801a0fe:	ee78 ba0e 	vadd.f32	s23, s16, s28
                    x = -0.5f + p_at_reset * invB;
 801a102:	eeed fa0e 	vfma.f32	s31, s26, s28
	i = lrintf(r - 0.5f);
 801a106:	eeab 0aac 	vfma.f32	s0, s23, s25
 801a10a:	f003 fe05 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a10e:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a112:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a116:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a11a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a11e:	3301      	adds	r3, #1
	i = lrintf(r - 0.5f);
 801a120:	eeb0 0a68 	vmov.f32	s0, s17
	r -= (float)i;
 801a124:	eedb 7aac 	vfnms.f32	s15, s23, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a128:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 801a12c:	eeaa 0a2c 	vfma.f32	s0, s20, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a130:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a134:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a138:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801a13c:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a140:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801a144:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a148:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a14c:	ed83 ba3d 	vstr	s22, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a150:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a154:	3301      	adds	r3, #1
 801a156:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a15a:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 801a15e:	f003 fddb 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a162:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a166:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 801a16a:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801a16e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a172:	eeda 7a2c 	vfnms.f32	s15, s20, s25
 801a176:	e70c      	b.n	8019f92 <tMBSineTri_tick+0x802>
                x = -0.5f + p * invB;
 801a178:	eddf ba5f 	vldr	s23, [pc, #380]	; 801a2f8 <tMBSineTri_tick+0xb68>
 801a17c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a180:	ee3a ba49 	vsub.f32	s22, s20, s18
	_tMBSineTri* c = *osc;
 801a184:	683e      	ldr	r6, [r7, #0]
 801a186:	ee6c baab 	vmul.f32	s23, s25, s23
                x = -0.5f + p * invB;
 801a18a:	eef0 8a40 	vmov.f32	s17, s0
	i = lrintf(r - 0.5f);
 801a18e:	eeab 0a8b 	vfma.f32	s0, s23, s22
 801a192:	f003 fdc1 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a196:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a19a:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	scale *= w;
 801a19e:	ee7d 7a2d 	vadd.f32	s15, s26, s27
	r -= (float)i;
 801a1a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a1a6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a1aa:	3301      	adds	r3, #1
                x = -0.5f + p * invB;
 801a1ac:	eeea 8a0d 	vfma.f32	s17, s20, s26
	scale *= w;
 801a1b0:	ee67 7a8c 	vmul.f32	s15, s15, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a1b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a1b8:	ee9b 7a8b 	vfnms.f32	s14, s23, s22
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a1bc:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a1c0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a1c4:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801a1c8:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a1cc:	eb06 0382 	add.w	r3, r6, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a1d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a1d4:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a1d8:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a1dc:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a1e0:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801a1e4:	3301      	adds	r3, #1
 801a1e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a1ea:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
                k = 0;
 801a1ee:	2600      	movs	r6, #0
}
 801a1f0:	e64e      	b.n	8019e90 <tMBSineTri_tick+0x700>
        	p = (1.0f - eof_offset) + 0.25f;
 801a1f2:	eeb7 aa04 	vmov.f32	s20, #116	; 0x3fa00000  1.250
        	sinPhase = (1.0f - eof_offset);
 801a1f6:	ee78 eac8 	vsub.f32	s29, s17, s16
        	p = (1.0f - eof_offset) + 0.25f;
 801a1fa:	ee3a aa48 	vsub.f32	s20, s20, s16
        if (!k) {
 801a1fe:	2e00      	cmp	r6, #0
 801a200:	f040 8142 	bne.w	801a488 <tMBSineTri_tick+0xcf8>
                if (p_at_reset < 0.0f) {
 801a204:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 801a208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a20c:	f100 81ab 	bmi.w	801a566 <tMBSineTri_tick+0xdd6>
            x = -0.5f + p_at_reset * invB;
 801a210:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801a214:	eddf 7a38 	vldr	s15, [pc, #224]	; 801a2f8 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801a218:	ee3d ba2d 	vadd.f32	s22, s26, s27
 801a21c:	ee6c caa7 	vmul.f32	s25, s25, s15
            x = -0.5f + p_at_reset * invB;
 801a220:	eeed ba0e 	vfma.f32	s23, s26, s28
 801a224:	ee2c ba4b 	vnmul.f32	s22, s24, s22
	r = MINBLEP_PHASES * phase * inv_w;
 801a228:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
	i = lrintf(r - 0.5f);
 801a22c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a230:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801a234:	eea8 0aac 	vfma.f32	s0, s17, s25
 801a238:	f003 fd6e 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a23c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a240:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a244:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 801a248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a24c:	3301      	adds	r3, #1
	r -= (float)i;
 801a24e:	eed8 7aac 	vfnms.f32	s15, s17, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a252:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a256:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a25a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a25e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801a262:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a266:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a26a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a26e:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a272:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a276:	f8c3 10f4 	str.w	r1, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a27a:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a27e:	3301      	adds	r3, #1
 801a280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a284:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
 801a288:	f8d7 8000 	ldr.w	r8, [r7]
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a28c:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	scale *= w;
 801a290:	ee6c ba2b 	vmul.f32	s23, s24, s23
            if (p < b) {
 801a294:	eeb4 9aca 	vcmpe.f32	s18, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a298:	3301      	adds	r3, #1
 801a29a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
            if (p < b) {
 801a29e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a2a2:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a2a6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a2aa:	eb08 0343 	add.w	r3, r8, r3, lsl #1
 801a2ae:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a2b2:	eb08 0381 	add.w	r3, r8, r1, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a2b6:	f04f 0200 	mov.w	r2, #0
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a2ba:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a2be:	edc3 ba3c 	vstr	s23, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a2c2:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a2c6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a2ca:	f103 0301 	add.w	r3, r3, #1
 801a2ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a2d2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
            if (p < b) {
 801a2d6:	f300 8107 	bgt.w	801a4e8 <tMBSineTri_tick+0xd58>
            x = 0.5f - (p - b) * invB1;
 801a2da:	eef7 7a04 	vmov.f32	s15, #116	; 0x3fa00000  1.250
            k = 1;
 801a2de:	2601      	movs	r6, #1
            x = 0.5f - (p - b) * invB1;
 801a2e0:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801a2e4:	ee78 7a67 	vsub.f32	s15, s16, s15
 801a2e8:	eeb0 8a6e 	vmov.f32	s16, s29
 801a2ec:	ee77 7a89 	vadd.f32	s15, s15, s18
 801a2f0:	eee7 8aad 	vfma.f32	s17, s15, s27
 801a2f4:	f7ff bab2 	b.w	801985c <tMBSineTri_tick+0xcc>
 801a2f8:	42800000 	.word	0x42800000
                    p_at_reset -= 1.0f;
 801a2fc:	ee3e ea68 	vsub.f32	s28, s28, s17
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801a300:	ed5f 7a03 	vldr	s15, [pc, #-12]	; 801a2f8 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 801a304:	eebe fa00 	vmov.f32	s30, #224	; 0xbf000000 -0.5
 801a308:	ee6c caa7 	vmul.f32	s25, s25, s15
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801a30c:	ee78 fa0e 	vadd.f32	s31, s16, s28
	i = lrintf(r - 0.5f);
 801a310:	eeb0 0a4f 	vmov.f32	s0, s30
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, invB + invB1, 1.0f, sw);
 801a314:	ee7d ea2d 	vadd.f32	s29, s26, s27
	i = lrintf(r - 0.5f);
 801a318:	eeac 0aaf 	vfma.f32	s0, s25, s31
 801a31c:	f003 fcfc 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a320:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a324:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a328:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a32c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a330:	3301      	adds	r3, #1
	scale *= w;
 801a332:	ee6e ea8c 	vmul.f32	s29, s29, s24
                if (!k && p_at_reset >= b) {
 801a336:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a33a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a33e:	eedc 7aaf 	vfnms.f32	s15, s25, s31
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a342:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a346:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a34a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (!k && p_at_reset >= b) {
 801a34e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a352:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a356:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a35a:	edc3 ea3c 	vstr	s29, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a35e:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a362:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a366:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a36a:	f103 0301 	add.w	r3, r3, #1
 801a36e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a372:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (!k && p_at_reset >= b) {
 801a376:	f200 81ae 	bhi.w	801a6d6 <tMBSineTri_tick+0xf46>
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a37a:	ee79 7a28 	vadd.f32	s15, s18, s17
	_tMBSineTri* c = *osc;
 801a37e:	683e      	ldr	r6, [r7, #0]
	i = lrintf(r - 0.5f);
 801a380:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a384:	ee77 7a88 	vadd.f32	s15, s15, s16
 801a388:	ee37 bacb 	vsub.f32	s22, s15, s22
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801a38c:	ee78 7a49 	vsub.f32	s15, s16, s18
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a390:	eeeb ba2d 	vfma.f32	s23, s22, s27
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801a394:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 801a398:	eeac 0a8e 	vfma.f32	s0, s25, s28
 801a39c:	f003 fcbc 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a3a0:	ee07 0a10 	vmov	s14, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3a4:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a3a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a3ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3b0:	3301      	adds	r3, #1
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a3b2:	eef1 7a6e 	vneg.f32	s15, s29
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a3b6:	eef0 fa6b 	vmov.f32	s31, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a3be:	ee9c 7a8e 	vfnms.f32	s14, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a3c2:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a3c6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a3ca:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801a3ce:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a3d2:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801a3d6:	ed83 7a3b 	vstr	s14, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a3da:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a3de:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a3e2:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801a3e6:	3301      	adds	r3, #1
 801a3e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a3ec:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        if (sw > 0)
 801a3f0:	f8d7 8000 	ldr.w	r8, [r7]
 801a3f4:	e59f      	b.n	8019f36 <tMBSineTri_tick+0x7a6>
                    tMBSineTri_place_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -invB1 - invB, 1.0f, sw);
 801a3f6:	ed5f 7a40 	vldr	s15, [pc, #-256]	; 801a2f8 <tMBSineTri_tick+0xb68>
 801a3fa:	ee3b fa49 	vsub.f32	s30, s22, s18
	i = lrintf(r - 0.5f);
 801a3fe:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a402:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a406:	ee7d ea2d 	vadd.f32	s29, s26, s27
 801a40a:	eeaf 0a2c 	vfma.f32	s0, s30, s25
 801a40e:	f003 fc83 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a412:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a416:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a41a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a41e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a422:	3301      	adds	r3, #1
 801a424:	ee6c ea2e 	vmul.f32	s29, s24, s29
                if (p_at_reset >= 1.0f) {
 801a428:	eeb4 eae8 	vcmpe.f32	s28, s17
	r -= (float)i;
 801a42c:	eedf 7a2c 	vfnms.f32	s15, s30, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a434:	eeb0 fa6e 	vmov.f32	s30, s29
 801a438:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a43c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a440:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset >= 1.0f) {
 801a444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a448:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a44c:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801a450:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a454:	eef1 7a6e 	vneg.f32	s15, s29
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a458:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a45c:	edc3 7a3c 	vstr	s15, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a460:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a464:	f103 0301 	add.w	r3, r3, #1
 801a468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a46c:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset >= 1.0f) {
 801a470:	da76      	bge.n	801a560 <tMBSineTri_tick+0xdd0>
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a472:	ee79 7a08 	vadd.f32	s15, s18, s16
 801a476:	f8d7 8000 	ldr.w	r8, [r7]
 801a47a:	ee37 bacb 	vsub.f32	s22, s15, s22
 801a47e:	eeeb ba2d 	vfma.f32	s23, s22, s27
 801a482:	eef0 fa6b 	vmov.f32	s31, s23
 801a486:	e556      	b.n	8019f36 <tMBSineTri_tick+0x7a6>
            x = 0.5f - (p_at_reset - b) * invB1;
 801a488:	ee79 7a08 	vadd.f32	s15, s18, s16
                if (p_at_reset < b) {
 801a48c:	eeb4 9ace 	vcmpe.f32	s18, s28
            x = 0.5f - (p_at_reset - b) * invB1;
 801a490:	ee77 7acb 	vsub.f32	s15, s15, s22
                if (p_at_reset < b) {
 801a494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
            x = 0.5f - (p_at_reset - b) * invB1;
 801a498:	eeed baa7 	vfma.f32	s23, s27, s15
                if (p_at_reset < b) {
 801a49c:	f300 80d8 	bgt.w	801a650 <tMBSineTri_tick+0xec0>
                if (p_at_reset < 0.0f) {
 801a4a0:	eeb5 eac0 	vcmpe.f32	s28, #0.0
 801a4a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4a8:	f100 812a 	bmi.w	801a700 <tMBSineTri_tick+0xf70>
        else if (sw < 0)
 801a4ac:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
 801a4b0:	ed5f 7a6f 	vldr	s15, [pc, #-444]	; 801a2f8 <tMBSineTri_tick+0xb68>
	i = lrintf(r - 0.5f);
 801a4b4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801a4b8:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a4bc:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801a4c0:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801a4c4:	f003 fc28 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a4c8:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a4cc:	f000 023f 	and.w	r2, r0, #63	; 0x3f
	r -= (float)i;
 801a4d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a4d4:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 801a4d8:	e6d8      	b.n	801a28c <tMBSineTri_tick+0xafc>
                x = -0.5f + p * invB;
 801a4da:	eeed 8a0e 	vfma.f32	s17, s26, s28
                k = 0;
 801a4de:	2600      	movs	r6, #0
                p -= 1.0f;
 801a4e0:	eeb0 aa4e 	vmov.f32	s20, s28
 801a4e4:	f7ff b9ba 	b.w	801985c <tMBSineTri_tick+0xcc>
                x = -0.5f + p * invB;
 801a4e8:	eefe 8a00 	vmov.f32	s17, #224	; 0xbf000000 -0.5
	_tMBSineTri* c = *osc;
 801a4ec:	683f      	ldr	r7, [r7, #0]
 801a4ee:	ee3a ba49 	vsub.f32	s22, s20, s18
                k = 0;
 801a4f2:	464e      	mov	r6, r9
}
 801a4f4:	eeb0 8a6e 	vmov.f32	s16, s29
	i = lrintf(r - 0.5f);
 801a4f8:	eeb0 0a68 	vmov.f32	s0, s17
                x = -0.5f + p * invB;
 801a4fc:	eeed 8a0a 	vfma.f32	s17, s26, s20
	scale *= w;
 801a500:	ee3d da2d 	vadd.f32	s26, s26, s27
	i = lrintf(r - 0.5f);
 801a504:	eeab 0a2c 	vfma.f32	s0, s22, s25
 801a508:	f003 fc06 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a50c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a510:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a514:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a51c:	3301      	adds	r3, #1
	scale *= w;
 801a51e:	ee2d ca0c 	vmul.f32	s24, s26, s24
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a522:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a526:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a52a:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a52e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a532:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 801a536:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a53a:	eb07 0382 	add.w	r3, r7, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a53e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a542:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a546:	ed83 ca3c 	vstr	s24, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a54a:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a54e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 801a552:	3301      	adds	r3, #1
 801a554:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a558:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
}
 801a55c:	f7ff b97e 	b.w	801985c <tMBSineTri_tick+0xcc>
 801a560:	f8d7 8000 	ldr.w	r8, [r7]
 801a564:	e5c1      	b.n	801a0ea <tMBSineTri_tick+0x95a>
	i = lrintf(r - 0.5f);
 801a566:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
 801a56a:	ed5f 7a9d 	vldr	s15, [pc, #-628]	; 801a2f8 <tMBSineTri_tick+0xb68>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801a56e:	ee3d fa2d 	vadd.f32	s30, s26, s27
 801a572:	ee6c caa7 	vmul.f32	s25, s25, s15
	i = lrintf(r - 0.5f);
 801a576:	eeb0 0a6f 	vmov.f32	s0, s31
 801a57a:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    p_at_reset += 1.0f;
 801a57e:	ee3e ea28 	vadd.f32	s28, s28, s17
	i = lrintf(r - 0.5f);
 801a582:	eeac 0a8b 	vfma.f32	s0, s25, s22
 801a586:	f003 fbc7 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a58a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a58e:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a592:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a596:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a59a:	3301      	adds	r3, #1
                if (k && p_at_reset < b) {
 801a59c:	eeb4 9ace 	vcmpe.f32	s18, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a5a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a5a4:	eedc 7a8b 	vfnms.f32	s15, s25, s22
	scale *= w;
 801a5a8:	eeb1 ba4f 	vneg.f32	s22, s30
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a5ac:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a5b0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a5b4:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (k && p_at_reset < b) {
 801a5b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a5bc:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a5c0:	eb08 0382 	add.w	r3, r8, r2, lsl #2
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a5c4:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a5c8:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a5cc:	ed83 ba3c 	vstr	s22, [r3, #240]	; 0xf0
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a5d0:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a5d4:	f103 0301 	add.w	r3, r3, #1
 801a5d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a5dc:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (k && p_at_reset < b) {
 801a5e0:	f340 80f7 	ble.w	801a7d2 <tMBSineTri_tick+0x1042>
                    x = -0.5f + p_at_reset * invB;
 801a5e4:	ee78 7a49 	vsub.f32	s15, s16, s18
	_tMBSineTri* c = *osc;
 801a5e8:	683e      	ldr	r6, [r7, #0]
                    x = -0.5f + p_at_reset * invB;
 801a5ea:	eef0 ba6f 	vmov.f32	s23, s31
	i = lrintf(r - 0.5f);
 801a5ee:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = -0.5f + p_at_reset * invB;
 801a5f2:	eeed ba0e 	vfma.f32	s23, s26, s28
	r = MINBLEP_PHASES * phase * inv_w;
 801a5f6:	ee37 ea8e 	vadd.f32	s28, s15, s28
	i = lrintf(r - 0.5f);
 801a5fa:	eeac 0a8e 	vfma.f32	s0, s25, s28
 801a5fe:	f003 fb8b 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a602:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a606:	f8b6 3066 	ldrh.w	r3, [r6, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a60a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a60e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a612:	3301      	adds	r3, #1
	r -= (float)i;
 801a614:	eedc 7a8e 	vfnms.f32	s15, s25, s28
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a61c:	f8a6 3066 	strh.w	r3, [r6, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a620:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a624:	eb06 0343 	add.w	r3, r6, r3, lsl #1
 801a628:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a62c:	eb06 0382 	add.w	r3, r6, r2, lsl #2
 801a630:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a634:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a638:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a63c:	f8b6 3064 	ldrh.w	r3, [r6, #100]	; 0x64
 801a640:	3301      	adds	r3, #1
 801a642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a646:	f8a6 3064 	strh.w	r3, [r6, #100]	; 0x64
        else if (sw < 0)
 801a64a:	f8d7 8000 	ldr.w	r8, [r7]
 801a64e:	e5eb      	b.n	801a228 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 801a650:	eefe ba00 	vmov.f32	s23, #224	; 0xbf000000 -0.5
 801a654:	ed5f 7ad8 	vldr	s15, [pc, #-864]	; 801a2f8 <tMBSineTri_tick+0xb68>
 801a658:	ee3b fa49 	vsub.f32	s30, s22, s18
 801a65c:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a660:	eeb0 0a6b 	vmov.f32	s0, s23
 801a664:	eeac 0a8f 	vfma.f32	s0, s25, s30
 801a668:	f003 fb56 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a66c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a670:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a674:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801a678:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a67c:	3301      	adds	r3, #1
                if (p_at_reset < 0.0f) {
 801a67e:	eeb5 eac0 	vcmpe.f32	s28, #0.0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	r -= (float)i;
 801a686:	eedc 7a8f 	vfnms.f32	s15, s25, s30
	scale *= w;
 801a68a:	ee3d fa2d 	vadd.f32	s30, s26, s27
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a68e:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a692:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a696:	eb08 0343 	add.w	r3, r8, r3, lsl #1
                if (p_at_reset < 0.0f) {
 801a69a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	scale *= w;
 801a69e:	ee2f fa0c 	vmul.f32	s30, s30, s24
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a6a2:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a6a6:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801a6aa:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a6ae:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a6b2:	edc3 8a3d 	vstr	s17, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a6b6:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a6ba:	f103 0301 	add.w	r3, r3, #1
 801a6be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a6c2:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
                if (p_at_reset < 0.0f) {
 801a6c6:	d472      	bmi.n	801a7ae <tMBSineTri_tick+0x101e>
                    x = -0.5f + p_at_reset * invB;
 801a6c8:	eeed ba0e 	vfma.f32	s23, s26, s28
        else if (sw < 0)
 801a6cc:	f8d7 8000 	ldr.w	r8, [r7]
 801a6d0:	eeb1 ba4f 	vneg.f32	s22, s30
 801a6d4:	e5a8      	b.n	801a228 <tMBSineTri_tick+0xa98>
	i = lrintf(r - 0.5f);
 801a6d6:	eeb0 0a4f 	vmov.f32	s0, s30
                    x = -0.5f + p_at_reset * invB;
 801a6da:	eead fa0e 	vfma.f32	s30, s26, s28
	i = lrintf(r - 0.5f);
 801a6de:	eeac 0a8a 	vfma.f32	s0, s25, s20
 801a6e2:	f003 fb19 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a6e6:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a6ea:	f000 013f 	and.w	r1, r0, #63	; 0x3f
 801a6ee:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801a6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
                    x = -0.5f + p_at_reset * invB;
 801a6f6:	eef0 fa4f 	vmov.f32	s31, s30
	r -= (float)i;
 801a6fa:	eedc 7a8a 	vfnms.f32	s15, s25, s20
 801a6fe:	e448      	b.n	8019f92 <tMBSineTri_tick+0x802>
                    tMBSineTri_place_dd_noBuffer(osc, j, 1.0f - p_at_reset - eof_offset, -inv_sw, invB + invB1, 1.0f, -sw);
 801a700:	ee3d fa2d 	vadd.f32	s30, s26, s27
 801a704:	eddf 7a39 	vldr	s15, [pc, #228]	; 801a7ec <tMBSineTri_tick+0x105c>
 801a708:	ee6c caa7 	vmul.f32	s25, s25, s15
 801a70c:	ee2f fa0c 	vmul.f32	s30, s30, s24
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a710:	eeb7 ea00 	vmov.f32	s28, #112	; 0x3f800000  1.0
	i = lrintf(r - 0.5f);
 801a714:	eefe fa00 	vmov.f32	s31, #224	; 0xbf000000 -0.5
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a718:	ee78 7a4b 	vsub.f32	s15, s16, s22
 801a71c:	ee39 7a4e 	vsub.f32	s14, s18, s28
	i = lrintf(r - 0.5f);
 801a720:	eeb0 0a6f 	vmov.f32	s0, s31
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a724:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
 801a728:	ee77 7a87 	vadd.f32	s15, s15, s14
	i = lrintf(r - 0.5f);
 801a72c:	eeab 0a2c 	vfma.f32	s0, s22, s25
 801a730:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b) * invB1;
 801a734:	eee7 baad 	vfma.f32	s23, s15, s27
	i = lrintf(r - 0.5f);
 801a738:	f003 faee 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a73c:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a740:	f8b8 3066 	ldrh.w	r3, [r8, #102]	; 0x66
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801a744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a748:	eeb1 fa4f 	vneg.f32	s30, s30
	r -= (float)i;
 801a74c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a750:	3301      	adds	r3, #1
 801a752:	ee78 8ac8 	vsub.f32	s17, s17, s16
 801a756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	i = lrintf(r - 0.5f);
 801a75a:	eeb0 0a6f 	vmov.f32	s0, s31
	r -= (float)i;
 801a75e:	eedb 7a2c 	vfnms.f32	s15, s22, s25
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801a762:	f8a8 3066 	strh.w	r3, [r8, #102]	; 0x66
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a766:	eb03 0243 	add.w	r2, r3, r3, lsl #1
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a76a:	eb08 0343 	add.w	r3, r8, r3, lsl #1
	i = lrintf(r - 0.5f);
 801a76e:	eeac 0aa8 	vfma.f32	s0, s25, s17
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a772:	f8a3 006c 	strh.w	r0, [r3, #108]	; 0x6c
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801a776:	eb08 0382 	add.w	r3, r8, r2, lsl #2
 801a77a:	edc3 7a3b 	vstr	s15, [r3, #236]	; 0xec
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801a77e:	ed83 fa3c 	vstr	s30, [r3, #240]	; 0xf0
    c->BLEPproperties[c->mostRecentBLEP][2] = stepOrSlope;
 801a782:	ed83 ea3d 	vstr	s28, [r3, #244]	; 0xf4
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801a786:	f8b8 3064 	ldrh.w	r3, [r8, #100]	; 0x64
 801a78a:	3301      	adds	r3, #1
 801a78c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a790:	f8a8 3064 	strh.w	r3, [r8, #100]	; 0x64
	i = lrintf(r - 0.5f);
 801a794:	f003 fac0 	bl	801dd18 <lrintf>
	r -= (float)i;
 801a798:	ee07 0a90 	vmov	s15, r0
	c->BLEPindices[c->mostRecentBLEP] = i;
 801a79c:	f000 023f 	and.w	r2, r0, #63	; 0x3f
 801a7a0:	f8d7 8000 	ldr.w	r8, [r7]
	r -= (float)i;
 801a7a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a7a8:	eedc 7aa8 	vfnms.f32	s15, s25, s17
 801a7ac:	e56e      	b.n	801a28c <tMBSineTri_tick+0xafc>
 801a7ae:	f8d7 8000 	ldr.w	r8, [r7]
 801a7b2:	e7ad      	b.n	801a710 <tMBSineTri_tick+0xf80>
    sinPhase += inc_amount;
 801a7b4:	eeb0 8a67 	vmov.f32	s16, s15
    p += inc_amount;
 801a7b8:	eeb0 aa4b 	vmov.f32	s20, s22
 801a7bc:	f7ff b82f 	b.w	801981e <tMBSineTri_tick+0x8e>
                x = 0.5f - (p - b) * invB1;
 801a7c0:	ee79 7a4a 	vsub.f32	s15, s18, s20
                k = 1;
 801a7c4:	2601      	movs	r6, #1
                x = 0.5f - (p - b) * invB1;
 801a7c6:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 801a7ca:	eee7 8aad 	vfma.f32	s17, s15, s27
 801a7ce:	f7ff b845 	b.w	801985c <tMBSineTri_tick+0xcc>
 801a7d2:	eef5 8a00 	vmov.f32	s17, #80	; 0x3e800000  0.250
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801a7d6:	ee39 ea4e 	vsub.f32	s28, s18, s28
	i = lrintf(r - 0.5f);
 801a7da:	eeb0 0a6f 	vmov.f32	s0, s31
 801a7de:	ee78 8ac8 	vsub.f32	s17, s17, s16
                    x = 0.5f - (p_at_reset - b)  * invB1;
 801a7e2:	eeee ba2d 	vfma.f32	s23, s28, s27
	i = lrintf(r - 0.5f);
 801a7e6:	eeac 0aa8 	vfma.f32	s0, s25, s17
 801a7ea:	e7d3      	b.n	801a794 <tMBSineTri_tick+0x1004>
 801a7ec:	42800000 	.word	0x42800000

0801a7f0 <tMBSineTri_setFreq>:

void tMBSineTri_setFreq(tMBSineTri* const osc, float f)
{
    _tMBSineTri* c = *osc;
 801a7f0:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801a7f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a7f6:	edd3 7afb 	vldr	s15, [r3, #1004]	; 0x3ec
    c->freq = f;
 801a7fa:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a7fe:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801a802:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a806:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801a80a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    //c->quarterwaveoffset = c->_w * 0.25f;
}
 801a80e:	4770      	bx	lr

0801a810 <tMBSineTri_sync>:
    c->waveform = w;
}

float tMBSineTri_sync(tMBSineTri* const osc, float value)
{
    _tMBSineTri* c = *osc;
 801a810:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a812:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801a816:	edd3 7a04 	vldr	s15, [r3, #16]
    c->lastsyncin = value;
 801a81a:	ed83 0a04 	vstr	s0, [r3, #16]
    float delta = value - last;
 801a81e:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801a822:	eef1 7a67 	vneg.f32	s15, s15
 801a826:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801a82a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801a82e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a832:	eef4 6ac7 	vcmpe.f32	s13, s14
 801a836:	bfcc      	ite	gt
 801a838:	2201      	movgt	r2, #1
 801a83a:	2200      	movle	r2, #0
 801a83c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a840:	f002 0201 	and.w	r2, r2, #1
 801a844:	bf88      	it	hi
 801a846:	2200      	movhi	r2, #0
 801a848:	b122      	cbz	r2, 801a854 <tMBSineTri_sync+0x44>
 801a84a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801a84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a852:	da04      	bge.n	801a85e <tMBSineTri_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801a854:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801a86c <tMBSineTri_sync+0x5c>
 801a858:	ed83 7a05 	vstr	s14, [r3, #20]

    return value;
}
 801a85c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801a85e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801a862:	ee27 7a06 	vmul.f32	s14, s14, s12
 801a866:	ed83 7a05 	vstr	s14, [r3, #20]
}
 801a86a:	4770      	bx	lr
 801a86c:	00000000 	.word	0x00000000

0801a870 <tMBSineTri_setShape>:
    c->_p = phase;
}

void tMBSineTri_setShape(tMBSineTri* const osc, float shape)
{
    _tMBSineTri* c = *osc;
 801a870:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801a872:	ed83 0a0d 	vstr	s0, [r3, #52]	; 0x34
}
 801a876:	4770      	bx	lr

0801a878 <tMBSaw_init>:
}
//==================================================================================================
//==================================================================================================

void tMBSaw_init(tMBSaw* const osc, LEAF* const leaf)
{
 801a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    tMBSaw_initToPool(osc, &leaf->mempool);
}

void tMBSaw_initToPool(tMBSaw* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801a87a:	698e      	ldr	r6, [r1, #24]
{
 801a87c:	4607      	mov	r7, r0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801a87e:	f44f 7037 	mov.w	r0, #732	; 0x2dc
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801a882:	2500      	movs	r5, #0
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801a884:	4631      	mov	r1, r6
 801a886:	f7fc fed3 	bl	8017630 <mpool_alloc>
 801a88a:	6038      	str	r0, [r7, #0]
    c->mempool = m;
 801a88c:	6006      	str	r6, [r0, #0]
    c->lastsyncin = 0.0f;
 801a88e:	2300      	movs	r3, #0
    c->invSampleRate = leaf->invSampleRate;
 801a890:	6871      	ldr	r1, [r6, #4]
    _tMBSaw* c = *osc = (_tMBSaw*) mpool_alloc(sizeof(_tMBSaw), m);
 801a892:	4604      	mov	r4, r0
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801a894:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801a8f0 <tMBSaw_init+0x78>
    c->syncdir = 1.0f;
 801a898:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
    c->invSampleRate = leaf->invSampleRate;
 801a89c:	ed91 7a01 	vldr	s14, [r1, #4]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a8a0:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->freq = 440.f;
 801a8a4:	eddf 7a13 	vldr	s15, [pc, #76]	; 801a8f4 <tMBSaw_init+0x7c>
    c->_inv_w = 1.0f / c->_w;
 801a8a8:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->lastsyncin = 0.0f;
 801a8ac:	60c3      	str	r3, [r0, #12]
    c->freq = 440.f;
 801a8ae:	edc0 7a02 	vstr	s15, [r0, #8]
    c->sync = 0.0f;
 801a8b2:	6103      	str	r3, [r0, #16]
    c->syncdir = 1.0f;
 801a8b4:	6142      	str	r2, [r0, #20]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a8b6:	2280      	movs	r2, #128	; 0x80
    c->softsync = 0;
 801a8b8:	6185      	str	r5, [r0, #24]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a8ba:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_z = 0.0f;
 801a8be:	6243      	str	r3, [r0, #36]	; 0x24
    c->_j = 0;
 801a8c0:	62c5      	str	r5, [r0, #44]	; 0x2c
    c->_p = 0.0f;  /* phase [0, 1) */
 801a8c2:	61c3      	str	r3, [r0, #28]
    c->numBLEPs = 0;
 801a8c4:	6505      	str	r5, [r0, #80]	; 0x50
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801a8c6:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a8ca:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801a8cc:	ed80 7ab6 	vstr	s14, [r0, #728]	; 0x2d8
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801a8d0:	edc0 7a08 	vstr	s15, [r0, #32]
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a8d4:	3056      	adds	r0, #86	; 0x56
    c->_inv_w = 1.0f / c->_w;
 801a8d6:	edc4 6a0a 	vstr	s13, [r4, #40]	; 0x28
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801a8da:	f002 fdfb 	bl	801d4d4 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801a8de:	4629      	mov	r1, r5
 801a8e0:	f104 0030 	add.w	r0, r4, #48	; 0x30
 801a8e4:	2220      	movs	r2, #32
}
 801a8e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801a8ea:	f002 bdf3 	b.w	801d4d4 <memset>
 801a8ee:	bf00      	nop
 801a8f0:	3b14f209 	.word	0x3b14f209
 801a8f4:	43dc0000 	.word	0x43dc0000

0801a8f8 <tMBSaw_tick>:
}



float tMBSaw_tick(tMBSaw* const osc)
{
 801a8f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a8fc:	ed2d 8b08 	vpush	{d8-d11}
    _tMBSaw* c = *osc;
 801a900:	6804      	ldr	r4, [r0, #0]
{
 801a902:	b082      	sub	sp, #8
 801a904:	4605      	mov	r5, r0

    int    j;
    float  sync;
    float  p, sw, z;

    sync = c->sync;
 801a906:	ed94 7a04 	vldr	s14, [r4, #16]


    p = c->_p;  /* phase [0, 1) */
 801a90a:	edd4 7a07 	vldr	s15, [r4, #28]
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */


    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a90e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
    z = c->_z;  /* low pass filter state */
 801a912:	edd4 9a09 	vldr	s19, [r4, #36]	; 0x24
    j = c->_j;  /* index into buffer _f */
 801a916:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a91c:	f340 813d 	ble.w	801ab9a <tMBSaw_tick+0x2a2>
 801a920:	69a3      	ldr	r3, [r4, #24]
 801a922:	2b00      	cmp	r3, #0
 801a924:	f340 80b1 	ble.w	801aa8a <tMBSaw_tick+0x192>
 801a928:	edd4 6a05 	vldr	s13, [r4, #20]
    sw = c->_w * c->syncdir;
 801a92c:	ed94 7a08 	vldr	s14, [r4, #32]
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a930:	eef1 6a66 	vneg.f32	s13, s13
    float inv_sw = c->_inv_w * c->syncdir;
 801a934:	edd4 8a0a 	vldr	s17, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801a938:	ee26 7a87 	vmul.f32	s14, s13, s14
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801a93c:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801a940:	ee66 8aa8 	vmul.f32	s17, s13, s17
    p += sw - (int)sw;
 801a944:	eefd 6ac7 	vcvt.s32.f32	s13, s14
 801a948:	ee37 8a27 	vadd.f32	s16, s14, s15
 801a94c:	eef8 7ae6 	vcvt.f32.s32	s15, s13
 801a950:	ee38 8a67 	vsub.f32	s16, s16, s15
        if (sw > 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset);
        else if (sw < 0)
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);

    } else if (p >= 1.0f) {  /* normal phase reset */
 801a954:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 801a958:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801a95c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a960:	f280 8135 	bge.w	801abce <tMBSaw_tick+0x2d6>
        p -= 1.0f;
        tMBSaw_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);

    } else if (p < 0.0f) {
 801a964:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801a968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a96c:	f100 8193 	bmi.w	801ac96 <tMBSaw_tick+0x39e>

    //construct the current output sample based on the state of the active BLEPs

    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;

    c->_f[currentSamp] = 0.5f - p;
 801a970:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801a974:	1d33      	adds	r3, r6, #4
 801a976:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = 0.5f - p;
 801a97a:	ee37 7a48 	vsub.f32	s14, s14, s16
 801a97e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a982:	ed83 7a0c 	vstr	s14, [r3, #48]	; 0x30

    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801a986:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 801a98a:	f88d 3005 	strb.w	r3, [sp, #5]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a98e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801a992:	2b00      	cmp	r3, #0
 801a994:	f000 817a 	beq.w	801ac8c <tMBSaw_tick+0x394>
 801a998:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    {
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801a99c:	f8b4 e052 	ldrh.w	lr, [r4, #82]	; 0x52
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);

    	//increment the position in the BLEP table
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
		//check if this BLEP is finished and if so mark it as inactive so it isn't computed anymore.
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801a9a0:	f8b4 c054 	ldrh.w	ip, [r4, #84]	; 0x54
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801a9a4:	2000      	movs	r0, #0
 801a9a6:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 801a9aa:	4deb      	ldr	r5, [pc, #940]	; (801ad58 <tMBSaw_tick+0x460>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801a9ac:	ebae 0300 	sub.w	r3, lr, r0
 801a9b0:	b29b      	uxth	r3, r3
 801a9b2:	f8ad 3006 	strh.w	r3, [sp, #6]
    	whichBLEP &= 63;
 801a9b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801a9ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a9be:	f8ad 3006 	strh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a9c2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 801a9c6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801a9ca:	f8bd 8006 	ldrh.w	r8, [sp, #6]
 801a9ce:	b289      	uxth	r1, r1
 801a9d0:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 801a9d4:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a9d6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a9da:	fa1f f888 	uxth.w	r8, r8
 801a9de:	fa1f f989 	uxth.w	r9, r9
 801a9e2:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801a9e6:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801a9ea:	f8b2 a056 	ldrh.w	sl, [r2, #86]	; 0x56
 801a9ee:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 801a9f2:	f8b9 9056 	ldrh.w	r9, [r9, #86]	; 0x56
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801a9f6:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801a9f8:	ed98 6a36 	vldr	s12, [r8, #216]	; 0xd8
 801a9fc:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 801aa00:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801aa04:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801aa08:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 801aa0c:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801aa10:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801aa12:	f8b3 8056 	ldrh.w	r8, [r3, #86]	; 0x56
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801aa16:	edd9 6a01 	vldr	s13, [r9, #4]
 801aa1a:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801aa1e:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801aa22:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801aa26:	eee6 7a26 	vfma.f32	s15, s12, s13
 801aa2a:	edd1 6a37 	vldr	s13, [r1, #220]	; 0xdc
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801aa2e:	f8a3 8056 	strh.w	r8, [r3, #86]	; 0x56
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801aa32:	f8b2 3056 	ldrh.w	r3, [r2, #86]	; 0x56
 801aa36:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801aa38:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801aa3c:	f0c0 80a6 	bcc.w	801ab8c <tMBSaw_tick+0x294>
		{
			c->numBLEPs--;
 801aa40:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801aa44:	3001      	adds	r0, #1
 801aa46:	f89d 2005 	ldrb.w	r2, [sp, #5]
			c->numBLEPs--;
 801aa4a:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801aa4c:	4290      	cmp	r0, r2
			c->numBLEPs--;
 801aa4e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801aa52:	dbab      	blt.n	801a9ac <tMBSaw_tick+0xb4>
 801aa54:	ed87 7a0c 	vstr	s14, [r7, #48]	; 0x30
		}

    }

    z += 0.5f * (c->_f[j] - z); // LP filtering
 801aa58:	ee37 7a69 	vsub.f32	s14, s14, s19
    c->out = z;
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 801aa5c:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801aa5e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5

    c->_p = p;
 801aa62:	ed84 8a07 	vstr	s16, [r4, #28]
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801aa66:	eef0 7a69 	vmov.f32	s15, s19
    j = (j+1) & 7; //don't need 128 sample buffer just for lowpass, so only using the first 16 values before wrapping around (probably only need 4 or 8)
 801aa6a:	f006 0607 	and.w	r6, r6, #7
    c->_z = z;
    c->_j = j;
 801aa6e:	62e6      	str	r6, [r4, #44]	; 0x2c
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801aa70:	eee7 7a26 	vfma.f32	s15, s14, s13


    return -c->out;
 801aa74:	eeb1 0a67 	vneg.f32	s0, s15
    c->out = z;
 801aa78:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 801aa7c:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
}
 801aa80:	b002      	add	sp, #8
 801aa82:	ecbd 8b08 	vpop	{d8-d11}
 801aa86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    sw = c->_w * c->syncdir;
 801aa8a:	edd4 8a05 	vldr	s17, [r4, #20]
 801aa8e:	ed94 aa08 	vldr	s20, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801aa92:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801aa96:	ee28 aa8a 	vmul.f32	s20, s17, s20
    float inv_sw = c->_inv_w * c->syncdir;
 801aa9a:	ee68 8aa6 	vmul.f32	s17, s17, s13
    p += sw - (int)sw;
 801aa9e:	eebd 9aca 	vcvt.s32.f32	s18, s20
 801aaa2:	ee77 7a8a 	vadd.f32	s15, s15, s20
 801aaa6:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 801aaaa:	ee37 9ac9 	vsub.f32	s18, s15, s18
    if (sync > 0.0f && c->softsync == 0) {  /* sync to master */
 801aaae:	f040 815e 	bne.w	801ad6e <tMBSaw_tick+0x476>
        if (sw > 0) p = eof_offset;
 801aab2:	eeb5 aac0 	vcmpe.f32	s20, #0.0
        float eof_offset = sync * sw;
 801aab6:	ee27 7a0a 	vmul.f32	s14, s14, s20
        if (sw > 0) p = eof_offset;
 801aaba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801aabe:	ee79 aa47 	vsub.f32	s21, s18, s14
        if (sw > 0) p = eof_offset;
 801aac2:	f340 80b2 	ble.w	801ac2a <tMBSaw_tick+0x332>
 801aac6:	eeb0 8a47 	vmov.f32	s16, s14
        if (p_at_reset >= 1.0f) {
 801aaca:	eeb7 ba00 	vmov.f32	s22, #112	; 0x3f800000  1.0
 801aace:	eef4 aacb 	vcmpe.f32	s21, s22
 801aad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aad6:	db2d      	blt.n	801ab34 <tMBSaw_tick+0x23c>
            p_at_reset -= 1.0f;
 801aad8:	ee7a aacb 	vsub.f32	s21, s21, s22
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801aadc:	eddf ba9f 	vldr	s23, [pc, #636]	; 801ad5c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801aae0:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801aae4:	ee68 baab 	vmul.f32	s23, s17, s23
            tMBSaw_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801aae8:	ee37 9a2a 	vadd.f32	s18, s14, s21
	i = lrintf(r - 0.5f);
 801aaec:	eea9 0a2b 	vfma.f32	s0, s18, s23
 801aaf0:	f003 f912 	bl	801dd18 <lrintf>
	r -= (float)i;
 801aaf4:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801aaf8:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801aafc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801ab00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab04:	3301      	adds	r3, #1
	r -= (float)i;
 801ab06:	eed9 7a2b 	vfnms.f32	s15, s18, s23
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ab0e:	eb04 0243 	add.w	r2, r4, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab12:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ab16:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ab1a:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801ab1e:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ab22:	ed82 ba37 	vstr	s22, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ab26:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 801ab2a:	3301      	adds	r3, #1
 801ab2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab30:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
        if (p_at_reset < 0.0f) {
 801ab34:	eef5 aac0 	vcmpe.f32	s21, #0.0
 801ab38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab3c:	f100 80da 	bmi.w	801acf4 <tMBSaw_tick+0x3fc>
        if (sw > 0)
 801ab40:	eeb5 aac0 	vcmpe.f32	s20, #0.0
 801ab44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ab48:	dc74      	bgt.n	801ac34 <tMBSaw_tick+0x33c>
        else if (sw < 0)
 801ab4a:	f57f af11 	bpl.w	801a970 <tMBSaw_tick+0x78>
	_tMBSaw* c = *osc;
 801ab4e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ab52:	ed9f 9a82 	vldr	s18, [pc, #520]	; 801ad5c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801ab56:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801ab5a:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801ab5c:	ee28 9a89 	vmul.f32	s18, s17, s18
 801ab60:	ee78 8a67 	vsub.f32	s17, s16, s15
        	tMBSaw_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset);
 801ab64:	eef1 aa6a 	vneg.f32	s21, s21
	i = lrintf(r - 0.5f);
 801ab68:	eea9 0a28 	vfma.f32	s0, s18, s17
 801ab6c:	f003 f8d4 	bl	801dd18 <lrintf>
	r -= (float)i;
 801ab70:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab74:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ab78:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801ab7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab80:	3301      	adds	r3, #1
	r -= (float)i;
 801ab82:	eed9 7a28 	vfnms.f32	s15, s18, s17
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ab86:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ab8a:	e06b      	b.n	801ac64 <tMBSaw_tick+0x36c>
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801ab8c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 801ab90:	3001      	adds	r0, #1
 801ab92:	4283      	cmp	r3, r0
 801ab94:	f73f af0a 	bgt.w	801a9ac <tMBSaw_tick+0xb4>
 801ab98:	e75c      	b.n	801aa54 <tMBSaw_tick+0x15c>
    sw = c->_w * c->syncdir;
 801ab9a:	edd4 8a05 	vldr	s17, [r4, #20]
    } else if (p >= 1.0f) {  /* normal phase reset */
 801ab9e:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
    sw = c->_w * c->syncdir;
 801aba2:	ed94 8a08 	vldr	s16, [r4, #32]
    float inv_sw = c->_inv_w * c->syncdir;
 801aba6:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
    sw = c->_w * c->syncdir;
 801abaa:	ee28 8a88 	vmul.f32	s16, s17, s16
    float inv_sw = c->_inv_w * c->syncdir;
 801abae:	ee68 8a87 	vmul.f32	s17, s17, s14
    p += sw - (int)sw;
 801abb2:	eebd 7ac8 	vcvt.s32.f32	s14, s16
 801abb6:	ee77 7a88 	vadd.f32	s15, s15, s16
 801abba:	eeb8 8ac7 	vcvt.f32.s32	s16, s14
 801abbe:	ee37 8ac8 	vsub.f32	s16, s15, s16
    } else if (p >= 1.0f) {  /* normal phase reset */
 801abc2:	eeb4 8ac9 	vcmpe.f32	s16, s18
 801abc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abca:	f6ff aecb 	blt.w	801a964 <tMBSaw_tick+0x6c>
        p -= 1.0f;
 801abce:	eddf 7a63 	vldr	s15, [pc, #396]	; 801ad5c <tMBSaw_tick+0x464>
 801abd2:	ee38 8a49 	vsub.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 801abd6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801abda:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801abdc:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 801abe0:	eea8 0a88 	vfma.f32	s0, s17, s16
 801abe4:	f003 f898 	bl	801dd18 <lrintf>
	r -= (float)i;
 801abe8:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801abec:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801abf0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801abf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801abf8:	3301      	adds	r3, #1
	r -= (float)i;
 801abfa:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801abfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ac02:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac06:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ac0a:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ac0e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ac12:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ac16:	ed82 9a37 	vstr	s18, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ac1a:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801ac1e:	3301      	adds	r3, #1
 801ac20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac24:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801ac28:	e6a2      	b.n	801a970 <tMBSaw_tick+0x78>
        else if (sw < 0) p = 1.0f - eof_offset;
 801ac2a:	f100 809b 	bmi.w	801ad64 <tMBSaw_tick+0x46c>
    p += sw - (int)sw;
 801ac2e:	eeb0 8a49 	vmov.f32	s16, s18
 801ac32:	e74a      	b.n	801aaca <tMBSaw_tick+0x1d2>
	_tMBSaw* c = *osc;
 801ac34:	eddf 7a49 	vldr	s15, [pc, #292]	; 801ad5c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801ac38:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801ac3c:	682d      	ldr	r5, [r5, #0]
	r = MINBLEP_PHASES * phase * inv_w;
 801ac3e:	ee68 8aa7 	vmul.f32	s17, s17, s15
	i = lrintf(r - 0.5f);
 801ac42:	eea8 0a88 	vfma.f32	s0, s17, s16
 801ac46:	f003 f867 	bl	801dd18 <lrintf>
	r -= (float)i;
 801ac4a:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac4e:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ac52:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801ac56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac5a:	3301      	adds	r3, #1
	r -= (float)i;
 801ac5c:	eed8 7a88 	vfnms.f32	s15, s17, s16
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ac64:	eb05 0243 	add.w	r2, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ac68:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ac6c:	f8a2 0056 	strh.w	r0, [r2, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ac70:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801ac74:	edc2 7a36 	vstr	s15, [r2, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ac78:	edc2 aa37 	vstr	s21, [r2, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ac7c:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801ac80:	3301      	adds	r3, #1
 801ac82:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ac86:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801ac8a:	e671      	b.n	801a970 <tMBSaw_tick+0x78>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801ac8c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ac90:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 801ac94:	e6e0      	b.n	801aa58 <tMBSaw_tick+0x160>
	r = MINBLEP_PHASES * phase * inv_w;
 801ac96:	ee68 8a88 	vmul.f32	s17, s17, s16
	i = lrintf(r - 0.5f);
 801ac9a:	ed9f aa30 	vldr	s20, [pc, #192]	; 801ad5c <tMBSaw_tick+0x464>
 801ac9e:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
	_tMBSaw* c = *osc;
 801aca2:	682d      	ldr	r5, [r5, #0]
        p += 1.0f;
 801aca4:	ee38 8a09 	vadd.f32	s16, s16, s18
	i = lrintf(r - 0.5f);
 801aca8:	eea8 0a8a 	vfma.f32	s0, s17, s20
 801acac:	f003 f834 	bl	801dd18 <lrintf>
	r -= (float)i;
 801acb0:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acb4:	f8b5 3052 	ldrh.w	r3, [r5, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801acb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801acbc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801acc0:	4a27      	ldr	r2, [pc, #156]	; (801ad60 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acc2:	3301      	adds	r3, #1
	r -= (float)i;
 801acc4:	eed8 7a8a 	vfnms.f32	s15, s17, s20
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801accc:	eb05 0143 	add.w	r1, r5, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801acd0:	f8a5 3052 	strh.w	r3, [r5, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801acd4:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801acd8:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801acdc:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ace0:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ace4:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 801ace8:	3301      	adds	r3, #1
 801acea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801acee:	f8a5 3050 	strh.w	r3, [r5, #80]	; 0x50
}
 801acf2:	e63d      	b.n	801a970 <tMBSaw_tick+0x78>
            p_at_reset += 1.0f;
 801acf4:	ed9f ba19 	vldr	s22, [pc, #100]	; 801ad5c <tMBSaw_tick+0x464>
	i = lrintf(r - 0.5f);
 801acf8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
            p_at_reset += 1.0f;
 801acfc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
	_tMBSaw* c = *osc;
 801ad00:	682f      	ldr	r7, [r5, #0]
 801ad02:	ee28 ba8b 	vmul.f32	s22, s17, s22
            p_at_reset += 1.0f;
 801ad06:	ee7a aaa7 	vadd.f32	s21, s21, s15
	i = lrintf(r - 0.5f);
 801ad0a:	eeab 0a09 	vfma.f32	s0, s22, s18
 801ad0e:	f003 f803 	bl	801dd18 <lrintf>
	r -= (float)i;
 801ad12:	ee07 0a90 	vmov	s15, r0
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad16:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
	i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801ad1a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
	r -= (float)i;
 801ad1e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ad22:	4a0f      	ldr	r2, [pc, #60]	; (801ad60 <tMBSaw_tick+0x468>)
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad24:	3301      	adds	r3, #1
	r -= (float)i;
 801ad26:	eedb 7a09 	vfnms.f32	s15, s22, s18
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ad2e:	eb07 0143 	add.w	r1, r7, r3, lsl #1
	c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801ad32:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	c->BLEPindices[c->mostRecentBLEP] = i;
 801ad36:	f8a1 0056 	strh.w	r0, [r1, #86]	; 0x56
    c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801ad3a:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
 801ad3e:	edc1 7a36 	vstr	s15, [r1, #216]	; 0xd8
    c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801ad42:	f8c1 20dc 	str.w	r2, [r1, #220]	; 0xdc
    c->numBLEPs = (c->numBLEPs + 1) & 63;
 801ad46:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 801ad4a:	3301      	adds	r3, #1
 801ad4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801ad50:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
}
 801ad54:	e6f4      	b.n	801ab40 <tMBSaw_tick+0x248>
 801ad56:	bf00      	nop
 801ad58:	0802dcf8 	.word	0x0802dcf8
 801ad5c:	42800000 	.word	0x42800000
 801ad60:	bf800000 	.word	0xbf800000
        else if (sw < 0) p = 1.0f - eof_offset;
 801ad64:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 801ad68:	ee38 8a47 	vsub.f32	s16, s16, s14
 801ad6c:	e6ad      	b.n	801aaca <tMBSaw_tick+0x1d2>
    p += sw - (int)sw;
 801ad6e:	eeb0 8a49 	vmov.f32	s16, s18
 801ad72:	e5ef      	b.n	801a954 <tMBSaw_tick+0x5c>

0801ad74 <tMBSaw_setFreq>:

void tMBSaw_setFreq(tMBSaw* const osc, float f)
{
    _tMBSaw* c = *osc;
 801ad74:	6803      	ldr	r3, [r0, #0]
    c->freq = f;

    c->_w = c->freq * c->invSampleRate;
    c->_inv_w = 1.0f / c->_w;
 801ad76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->_w = c->freq * c->invSampleRate;
 801ad7a:	edd3 7ab6 	vldr	s15, [r3, #728]	; 0x2d8
    c->freq = f;
 801ad7e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;
 801ad82:	ee20 0a27 	vmul.f32	s0, s0, s15
    c->_inv_w = 1.0f / c->_w;
 801ad86:	eec7 7a00 	vdiv.f32	s15, s14, s0
    c->_w = c->freq * c->invSampleRate;
 801ad8a:	ed83 0a08 	vstr	s0, [r3, #32]
    c->_inv_w = 1.0f / c->_w;
 801ad8e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
}
 801ad92:	4770      	bx	lr

0801ad94 <tMBSaw_sync>:

float tMBSaw_sync(tMBSaw* const osc, float value)
{
    _tMBSaw* c = *osc;
 801ad94:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801ad96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801ad9a:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 801ad9e:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 801ada2:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801ada6:	eef1 7a67 	vneg.f32	s15, s15
 801adaa:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801adae:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801adb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adb6:	eef4 6ac7 	vcmpe.f32	s13, s14
 801adba:	bfcc      	ite	gt
 801adbc:	2201      	movgt	r2, #1
 801adbe:	2200      	movle	r2, #0
 801adc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801adc4:	f002 0201 	and.w	r2, r2, #1
 801adc8:	bf88      	it	hi
 801adca:	2200      	movhi	r2, #0
 801adcc:	b122      	cbz	r2, 801add8 <tMBSaw_sync+0x44>
 801adce:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801add2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801add6:	da04      	bge.n	801ade2 <tMBSaw_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801add8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801adf0 <tMBSaw_sync+0x5c>
 801addc:	ed83 7a04 	vstr	s14, [r3, #16]
    
    return value;
}
 801ade0:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801ade2:	ee37 7a66 	vsub.f32	s14, s14, s13
 801ade6:	ee27 7a06 	vmul.f32	s14, s14, s12
 801adea:	ed83 7a04 	vstr	s14, [r3, #16]
}
 801adee:	4770      	bx	lr
 801adf0:	00000000 	.word	0x00000000

0801adf4 <tMBSawPulse_init>:


//==================================================================================================

void tMBSawPulse_init(tMBSawPulse* const osc, LEAF* const leaf)
{
 801adf4:	b570      	push	{r4, r5, r6, lr}
    tMBSawPulse_initToPool(osc, &leaf->mempool);
}

void tMBSawPulse_initToPool(tMBSawPulse* const osc, tMempool* const pool)
{
    _tMempool* m = *pool;
 801adf6:	698d      	ldr	r5, [r1, #24]
{
 801adf8:	4606      	mov	r6, r0
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801adfa:	f44f 703e 	mov.w	r0, #760	; 0x2f8
 801adfe:	4629      	mov	r1, r5
 801ae00:	f7fc fc16 	bl	8017630 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    c->gain = 1.0f;
 801ae04:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801ae08:	6030      	str	r0, [r6, #0]
    c->active = 1;
 801ae0a:	2201      	movs	r2, #1
    c->mempool = m;
 801ae0c:	6005      	str	r5, [r0, #0]
    _tMBSawPulse* c = *osc = (_tMBSawPulse*) mpool_alloc(sizeof(_tMBSawPulse), m);
 801ae0e:	4604      	mov	r4, r0
    LEAF* leaf = c->mempool->leaf;
 801ae10:	686b      	ldr	r3, [r5, #4]
    c->invSampleRate = leaf->invSampleRate;
    c->freq = 440.f;
    c->lastsyncin = 0.0f;
    c->sync = 0.0f;
    c->syncdir = 1.0f;
    c->softsync = 0;
 801ae12:	2500      	movs	r5, #0
    c->gain = 1.0f;
 801ae14:	f8c0 12f0 	str.w	r1, [r0, #752]	; 0x2f0
    c->active = 1;
 801ae18:	f8c0 22f4 	str.w	r2, [r0, #756]	; 0x2f4
    c->waveform = 0.0f;
    c->_z = 0.0f;
    c->_j = 0;
    c->_p = 0.0f;  /* phase [0, 1) */
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801ae1c:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
    c->invSampleRate = leaf->invSampleRate;
 801ae20:	ed93 7a01 	vldr	s14, [r3, #4]
    c->lastsyncin = 0.0f;
 801ae24:	2300      	movs	r3, #0
    c->_x = 0.5f;  /* temporary output variable */
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
    c->_inv_w = 1.0f / c->_w;
 801ae26:	ed9f 6a16 	vldr	s12, [pc, #88]	; 801ae80 <tMBSawPulse_init+0x8c>
    c->freq = 440.f;
 801ae2a:	eddf 7a16 	vldr	s15, [pc, #88]	; 801ae84 <tMBSawPulse_init+0x90>
    c->_inv_w = 1.0f / c->_w;
 801ae2e:	eec6 6a07 	vdiv.f32	s13, s12, s14
    c->syncdir = 1.0f;
 801ae32:	6141      	str	r1, [r0, #20]
    c->freq = 440.f;
 801ae34:	edc0 7a02 	vstr	s15, [r0, #8]
    c->numBLEPs = 0;
    c->mostRecentBLEP = 0;
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801ae38:	f44f 5190 	mov.w	r1, #4608	; 0x1200
    c->softsync = 0;
 801ae3c:	6185      	str	r5, [r0, #24]
    c->_j = 0;
 801ae3e:	6385      	str	r5, [r0, #56]	; 0x38
    c->_b = 0.5f * (1.0f + c->waveform);  /* duty cycle (0, 1) */
 801ae40:	6282      	str	r2, [r0, #40]	; 0x28
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801ae42:	ee67 7a27 	vmul.f32	s15, s14, s15
    c->_x = 0.5f;  /* temporary output variable */
 801ae46:	62c2      	str	r2, [r0, #44]	; 0x2c
    c->numBLEPs = 0;
 801ae48:	6685      	str	r5, [r0, #104]	; 0x68
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801ae4a:	2280      	movs	r2, #128	; 0x80
    c->maxBLEPphase = MINBLEP_PHASES * STEP_DD_PULSE_LENGTH;
 801ae4c:	f8a0 106c 	strh.w	r1, [r0, #108]	; 0x6c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801ae50:	4629      	mov	r1, r5
    c->invSampleRate = leaf->invSampleRate;
 801ae52:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    c->lastsyncin = 0.0f;
 801ae56:	60c3      	str	r3, [r0, #12]
    c->sync = 0.0f;
 801ae58:	6103      	str	r3, [r0, #16]
    c->waveform = 0.0f;
 801ae5a:	61c3      	str	r3, [r0, #28]
    c->_z = 0.0f;
 801ae5c:	6303      	str	r3, [r0, #48]	; 0x30
    c->_p = 0.0f;  /* phase [0, 1) */
 801ae5e:	6203      	str	r3, [r0, #32]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801ae60:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
    c->_k = 0.0f;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801ae64:	6343      	str	r3, [r0, #52]	; 0x34
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801ae66:	306e      	adds	r0, #110	; 0x6e
    c->_inv_w = 1.0f / c->_w;
 801ae68:	edc4 6a0f 	vstr	s13, [r4, #60]	; 0x3c
    memset (c->BLEPindices, 0, 64 * sizeof (uint16_t));
 801ae6c:	f002 fb32 	bl	801d4d4 <memset>
    memset (c->_f, 0, 8 * sizeof (float));
 801ae70:	4629      	mov	r1, r5
 801ae72:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801ae76:	2220      	movs	r2, #32
}
 801ae78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memset (c->_f, 0, 8 * sizeof (float));
 801ae7c:	f002 bb2a 	b.w	801d4d4 <memset>
 801ae80:	3b14f209 	.word	0x3b14f209
 801ae84:	43dc0000 	.word	0x43dc0000

0801ae88 <tMBSawPulse_tick>:
#ifdef ITCMRAM
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32))) tMBSawPulse_tick(tMBSawPulse* const osc)
#else
float tMBSawPulse_tick(tMBSawPulse* const osc)
#endif
{
 801ae88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae8c:	ed2d 8b0e 	vpush	{d8-d14}
    _tMBSawPulse* c = *osc;
 801ae90:	6804      	ldr	r4, [r0, #0]
    int    j, k;
    float  sync;
    float  b, p, w, x, z, sw;
    float shape = c->shape;
    float sawShape = 1.0f - c->shape;
 801ae92:	eef7 9a00 	vmov.f32	s19, #112	; 0x3f800000  1.0
{
 801ae96:	b084      	sub	sp, #16
 801ae98:	4607      	mov	r7, r0
    sync = c->sync;
 801ae9a:	ed94 8a04 	vldr	s16, [r4, #16]
    float shape = c->shape;
 801ae9e:	ed94 ca11 	vldr	s24, [r4, #68]	; 0x44
    x = c->_x;  /* temporary output variable */
    z = c->_z;  /* low pass filter state */
    j = c->_j;  /* index into buffer _f */
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */

    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801aea2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801aea6:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
    float sawShape = 1.0f - c->shape;
 801aeaa:	ee39 dacc 	vsub.f32	s26, s19, s24
    p = c->_p;  /* phase [0, 1) */
 801aeae:	ed94 7a08 	vldr	s14, [r4, #32]
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801aeb2:	eefd cae5 	vcvt.s32.f32	s25, s11
    w = c->_w;  /* phase increment */
 801aeb6:	edd4 ba09 	vldr	s23, [r4, #36]	; 0x24
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801aeba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    b = c->_b;  /* duty cycle (0, 1) */
 801aebe:	ed94 ba0a 	vldr	s22, [r4, #40]	; 0x28
    x = c->_x;  /* temporary output variable */
 801aec2:	edd4 aa0b 	vldr	s21, [r4, #44]	; 0x2c
    z = c->_z;  /* low pass filter state */
 801aec6:	ed94 aa0c 	vldr	s20, [r4, #48]	; 0x30
    j = c->_j;  /* index into buffer _f */
 801aeca:	6ba6      	ldr	r6, [r4, #56]	; 0x38
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801aecc:	f340 80d8 	ble.w	801b080 <tMBSawPulse_tick+0x1f8>
 801aed0:	69a3      	ldr	r3, [r4, #24]
 801aed2:	2b00      	cmp	r3, #0
 801aed4:	dd65      	ble.n	801afa2 <tMBSawPulse_tick+0x11a>
 801aed6:	edd4 6a05 	vldr	s13, [r4, #20]

    sw = w * c->syncdir;
    float inv_sw = c->_inv_w * c->syncdir;
 801aeda:	ed94 9a0f 	vldr	s18, [r4, #60]	; 0x3c
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801aede:	eef1 6a66 	vneg.f32	s13, s13
    sw = w * c->syncdir;
 801aee2:	ee66 7aab 	vmul.f32	s15, s13, s23
    if (sync > 0.0f && c->softsync > 0) c->syncdir = -c->syncdir;
 801aee6:	edc4 6a05 	vstr	s13, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801aeea:	ee26 9a89 	vmul.f32	s18, s13, s18
    p += sw - (int)sw;
 801aeee:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801aef2:	ee37 7a27 	vadd.f32	s14, s14, s15
 801aef6:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801aefa:	ee37 8a48 	vsub.f32	s16, s14, s16


    }


    else if (!k)
 801aefe:	ee1c 3a90 	vmov	r3, s25
    {  /* normal operation for pulse, signal currently high */

		if (sw > 0)
 801af02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    else if (!k)
 801af06:	2b00      	cmp	r3, #0
 801af08:	f040 80d1 	bne.w	801b0ae <tMBSawPulse_tick+0x226>
		if (sw > 0)
 801af0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af10:	f340 8210 	ble.w	801b334 <tMBSawPulse_tick+0x4ac>
		{
			if (p >= b) {
 801af14:	eeb4 8acb 	vcmpe.f32	s16, s22
 801af18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af1c:	f280 81cc 	bge.w	801b2b8 <tMBSawPulse_tick+0x430>
 801af20:	eddf 5ae3 	vldr	s11, [pc, #908]	; 801b2b0 <tMBSawPulse_tick+0x428>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
				k = 1;
				x = -0.5f;
			}
			if (p >= 1.0f) {
 801af24:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801af28:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801af2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801af30:	f2c0 80cb 	blt.w	801b0ca <tMBSawPulse_tick+0x242>
    _tMBSawPulse* c = *osc;
 801af34:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 801af36:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801af3a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801af3e:	2b00      	cmp	r3, #0
 801af40:	f000 81f3 	beq.w	801b32a <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 801af44:	eddf 7adb 	vldr	s15, [pc, #876]	; 801b2b4 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801af48:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, 1.0f);
				k = 0;
				x = 0.5f;
 801af4c:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801af50:	ee29 9a27 	vmul.f32	s18, s18, s15
		i = lrintf(r - 0.5f);
 801af54:	eea9 0a08 	vfma.f32	s0, s18, s16
 801af58:	f002 fede 	bl	801dd18 <lrintf>
		r -= (float)i;
 801af5c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af60:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801af64:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801af68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801af6c:	eddf 5ad0 	vldr	s11, [pc, #832]	; 801b2b0 <tMBSawPulse_tick+0x428>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af70:	3301      	adds	r3, #1
		r -= (float)i;
 801af72:	eed9 7a08 	vfnms.f32	s15, s18, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af7a:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801af7e:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801af82:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801af86:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801af8a:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801af8e:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801af92:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801af96:	3301      	adds	r3, #1
 801af98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801af9c:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801afa0:	e093      	b.n	801b0ca <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 801afa2:	ed94 9a05 	vldr	s18, [r4, #20]
    float inv_sw = c->_inv_w * c->syncdir;
 801afa6:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801afaa:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801afae:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801afb2:	eefd 8ae7 	vcvt.s32.f32	s17, s15
 801afb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801afba:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 801afbe:	ee77 8a68 	vsub.f32	s17, s14, s17
    if (sync > 0.0f && c->softsync == 0)
 801afc2:	f040 8639 	bne.w	801bc38 <tMBSawPulse_tick+0xdb0>
        if (sw > 0) p = eof_offset;
 801afc6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801afca:	4625      	mov	r5, r4
        float eof_offset = sync * sw;
 801afcc:	ee27 8a88 	vmul.f32	s16, s15, s16
        if (sw > 0) p = eof_offset;
 801afd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        float p_at_reset = p - eof_offset;
 801afd4:	ee78 dac8 	vsub.f32	s27, s17, s16
        if (sw > 0) p = eof_offset;
 801afd8:	f340 8117 	ble.w	801b20a <tMBSawPulse_tick+0x382>
		 if (!k)
 801afdc:	ee1c 2a90 	vmov	r2, s25
 801afe0:	2a00      	cmp	r2, #0
 801afe2:	f040 8274 	bne.w	801b4ce <tMBSawPulse_tick+0x646>
				 if (p_at_reset >= b)
 801afe6:	eeb4 baed 	vcmpe.f32	s22, s27
 801afea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801afee:	f240 83c0 	bls.w	801b772 <tMBSawPulse_tick+0x8ea>
    _tMBSawPulse* c = *osc;
 801aff2:	46a0      	mov	r8, r4
    if (c->active)
 801aff4:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
    k = c->_k;  /* output state, 0 = high (0.5f), 1 = low (-0.5f) */
 801aff8:	ee1c 9a90 	vmov	r9, s25
				 if (p_at_reset >= 1.0f)
 801affc:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b000:	eef4 dae8 	vcmpe.f32	s27, s17
 801b004:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b008:	f280 82ad 	bge.w	801b566 <tMBSawPulse_tick+0x6de>
    if (c->active)
 801b00c:	b35a      	cbz	r2, 801b066 <tMBSawPulse_tick+0x1de>
		r = MINBLEP_PHASES * phase * inv_w;
 801b00e:	eddf 8aa9 	vldr	s17, [pc, #676]	; 801b2b4 <tMBSawPulse_tick+0x42c>
		i = lrintf(r - 0.5f);
 801b012:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
			tMBSawPulse_place_step_dd_noBuffer(osc, j, p, inv_sw, p_at_reset * sawShape);
 801b016:	ee6d da8d 	vmul.f32	s27, s27, s26
 801b01a:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801b01e:	eea8 0a28 	vfma.f32	s0, s16, s17
 801b022:	f002 fe79 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b026:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b02a:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b02e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b032:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b036:	3301      	adds	r3, #1
		r -= (float)i;
 801b038:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b03c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b040:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b044:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b048:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b04c:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b050:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b054:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b058:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801b05c:	3301      	adds	r3, #1
 801b05e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b062:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
            if (k) {
 801b066:	f1b9 0f00 	cmp.w	r9, #0
 801b06a:	f040 8419 	bne.w	801b8a0 <tMBSawPulse_tick+0xa18>
			if (p >= b) {
 801b06e:	eeb4 bac8 	vcmpe.f32	s22, s16
 801b072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b076:	f240 80df 	bls.w	801b238 <tMBSawPulse_tick+0x3b0>
		 if (!k)
 801b07a:	eddf 5a8d 	vldr	s11, [pc, #564]	; 801b2b0 <tMBSawPulse_tick+0x428>
 801b07e:	e024      	b.n	801b0ca <tMBSawPulse_tick+0x242>
    sw = w * c->syncdir;
 801b080:	ed94 9a05 	vldr	s18, [r4, #20]
    else if (!k)
 801b084:	ee1c 3a90 	vmov	r3, s25
    float inv_sw = c->_inv_w * c->syncdir;
 801b088:	edd4 6a0f 	vldr	s13, [r4, #60]	; 0x3c
    sw = w * c->syncdir;
 801b08c:	ee6b 7a89 	vmul.f32	s15, s23, s18
    float inv_sw = c->_inv_w * c->syncdir;
 801b090:	ee29 9a26 	vmul.f32	s18, s18, s13
    p += sw - (int)sw;
 801b094:	eebd 8ae7 	vcvt.s32.f32	s16, s15
 801b098:	ee37 7a27 	vadd.f32	s14, s14, s15
		if (sw > 0)
 801b09c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    p += sw - (int)sw;
 801b0a0:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
 801b0a4:	ee37 8a48 	vsub.f32	s16, s14, s16
    else if (!k)
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	f43f af2f 	beq.w	801af0c <tMBSawPulse_tick+0x84>
			}
		}

	} else {  /* normal operation, signal currently low */

		if (sw > 0)
 801b0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0b2:	f340 81bd 	ble.w	801b430 <tMBSawPulse_tick+0x5a8>
		{
			if (p >= 1.0f) {
 801b0b6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b0ba:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801b0be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b0c2:	f280 80ac 	bge.w	801b21e <tMBSawPulse_tick+0x396>
    c->_w = w;
    c->_b = b;
    c->_x = x;
    c->_z = z;
    c->_j = j;
    c->_k = k;
 801b0c6:	eef8 5aec 	vcvt.f32.s32	s11, s25
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 801b0ca:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801b0ce:	1d33      	adds	r3, r6, #4
    c->_f[currentSamp] += (x * shape);//pulse
 801b0d0:	ee2a 7a8c 	vmul.f32	s14, s21, s24
    int currentSamp = (j + DD_SAMPLE_DELAY) & 7;
 801b0d4:	f003 0307 	and.w	r3, r3, #7
    c->_f[currentSamp] = ((0.5f - p) * sawShape); //saw
 801b0d8:	ee76 6ac8 	vsub.f32	s13, s13, s16
    c->_f[currentSamp] += (x * shape);//pulse
 801b0dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b0e0:	eea6 7a8d 	vfma.f32	s14, s13, s26
 801b0e4:	ed83 7a12 	vstr	s14, [r3, #72]	; 0x48
    volatile uint8_t numBLEPsAtLoopStart = c->numBLEPs;
 801b0e8:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
 801b0ec:	f88d 300d 	strb.w	r3, [sp, #13]
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801b0f0:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801b0f4:	2b00      	cmp	r3, #0
 801b0f6:	f000 81e5 	beq.w	801b4c4 <tMBSawPulse_tick+0x63c>
 801b0fa:	eb04 0786 	add.w	r7, r4, r6, lsl #2
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801b0fe:	f8b4 e06a 	ldrh.w	lr, [r4, #106]	; 0x6a
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801b102:	f8b4 c06c 	ldrh.w	ip, [r4, #108]	; 0x6c
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801b106:	2000      	movs	r0, #0
 801b108:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 801b10c:	4d67      	ldr	r5, [pc, #412]	; (801b2ac <tMBSawPulse_tick+0x424>)
    	volatile uint16_t whichBLEP = (c->mostRecentBLEP - i);
 801b10e:	ebae 0300 	sub.w	r3, lr, r0
 801b112:	b29b      	uxth	r3, r3
 801b114:	f8ad 300e 	strh.w	r3, [sp, #14]
    	whichBLEP &= 63;
 801b118:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801b11c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b120:	f8ad 300e 	strh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b124:	f8bd 100e 	ldrh.w	r1, [sp, #14]
 801b128:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801b12c:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 801b130:	b289      	uxth	r1, r1
 801b132:	f8bd 900e 	ldrh.w	r9, [sp, #14]
 801b136:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801b138:	f8bd 300e 	ldrh.w	r3, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b13c:	fa1f f888 	uxth.w	r8, r8
 801b140:	fa1f f989 	uxth.w	r9, r9
 801b144:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 801b148:	eb04 0949 	add.w	r9, r4, r9, lsl #1
 801b14c:	f8b2 a06e 	ldrh.w	sl, [r2, #110]	; 0x6e
 801b150:	eb04 08c8 	add.w	r8, r4, r8, lsl #3
 801b154:	f8b9 906e 	ldrh.w	r9, [r9, #110]	; 0x6e
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801b158:	b29b      	uxth	r3, r3
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b15a:	ed98 6a3c 	vldr	s12, [r8, #240]	; 0xf0
 801b15e:	eb05 08ca 	add.w	r8, r5, sl, lsl #3
 801b162:	eb04 0343 	add.w	r3, r4, r3, lsl #1
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801b166:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b16a:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 801b16e:	edd8 7a00 	vldr	s15, [r8]
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801b172:	b292      	uxth	r2, r2
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801b174:	f8b3 806e 	ldrh.w	r8, [r3, #110]	; 0x6e
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b178:	edd9 6a01 	vldr	s13, [r9, #4]
 801b17c:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801b180:	f108 0840 	add.w	r8, r8, #64	; 0x40
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801b184:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b188:	eee6 7a26 	vfma.f32	s15, s12, s13
 801b18c:	edd1 6a3d 	vldr	s13, [r1, #244]	; 0xf4
		c->BLEPindices[whichBLEP] += MINBLEP_PHASES;
 801b190:	f8a3 806e 	strh.w	r8, [r3, #110]	; 0x6e
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801b194:	f8b2 306e 	ldrh.w	r3, [r2, #110]	; 0x6e
 801b198:	4563      	cmp	r3, ip
    	c->_f[j] += c->BLEPproperties[whichBLEP][1] * (step_dd_table[c->BLEPindices[whichBLEP]].value + c->BLEPproperties[whichBLEP][0] * step_dd_table[c->BLEPindices[whichBLEP]].delta);
 801b19a:	eea6 7aa7 	vfma.f32	s14, s13, s15
		if (c->BLEPindices[whichBLEP] >= c->maxBLEPphase)
 801b19e:	d32e      	bcc.n	801b1fe <tMBSawPulse_tick+0x376>
			c->numBLEPs--;
 801b1a0:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801b1a4:	3001      	adds	r0, #1
 801b1a6:	f89d 200d 	ldrb.w	r2, [sp, #13]
			c->numBLEPs--;
 801b1aa:	3b01      	subs	r3, #1
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801b1ac:	4282      	cmp	r2, r0
			c->numBLEPs--;
 801b1ae:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801b1b2:	dcac      	bgt.n	801b10e <tMBSawPulse_tick+0x286>
 801b1b4:	ed87 7a12 	vstr	s14, [r7, #72]	; 0x48
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801b1b8:	ee37 7a4a 	vsub.f32	s14, s14, s20

    return -c->out * c->gain;
 801b1bc:	ed94 0abc 	vldr	s0, [r4, #752]	; 0x2f0
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801b1c0:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
    j = (j+1) & 7;
 801b1c4:	3601      	adds	r6, #1
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801b1c6:	eef0 7a4a 	vmov.f32	s15, s20
    c->_p = p;
 801b1ca:	ed84 8a08 	vstr	s16, [r4, #32]
    j = (j+1) & 7;
 801b1ce:	f006 0607 	and.w	r6, r6, #7
    c->_w = w;
 801b1d2:	edc4 ba09 	vstr	s23, [r4, #36]	; 0x24
    c->_b = b;
 801b1d6:	ed84 ba0a 	vstr	s22, [r4, #40]	; 0x28
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801b1da:	eee7 7a26 	vfma.f32	s15, s14, s13
    c->_x = x;
 801b1de:	edc4 aa0b 	vstr	s21, [r4, #44]	; 0x2c
    c->_j = j;
 801b1e2:	63a6      	str	r6, [r4, #56]	; 0x38
    c->_k = k;
 801b1e4:	edc4 5a0d 	vstr	s11, [r4, #52]	; 0x34
    return -c->out * c->gain;
 801b1e8:	ee20 0a67 	vnmul.f32	s0, s0, s15
    c->out = z;
 801b1ec:	edc4 7a01 	vstr	s15, [r4, #4]
    c->_z = z;
 801b1f0:	edc4 7a0c 	vstr	s15, [r4, #48]	; 0x30
}
 801b1f4:	b004      	add	sp, #16
 801b1f6:	ecbd 8b0e 	vpop	{d8-d14}
 801b1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for (int i = 0; i < numBLEPsAtLoopStart; i++)
 801b1fe:	f89d 300d 	ldrb.w	r3, [sp, #13]
 801b202:	3001      	adds	r0, #1
 801b204:	4283      	cmp	r3, r0
 801b206:	dc82      	bgt.n	801b10e <tMBSawPulse_tick+0x286>
 801b208:	e7d4      	b.n	801b1b4 <tMBSawPulse_tick+0x32c>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b20a:	f100 8229 	bmi.w	801b660 <tMBSawPulse_tick+0x7d8>
		 if (!k)
 801b20e:	ee1c 2a90 	vmov	r2, s25
 801b212:	2a00      	cmp	r2, #0
 801b214:	f040 8197 	bne.w	801b546 <tMBSawPulse_tick+0x6be>
    p += sw - (int)sw;
 801b218:	eeb0 8a68 	vmov.f32	s16, s17
 801b21c:	e72d      	b.n	801b07a <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 801b21e:	683d      	ldr	r5, [r7, #0]
				p -= 1.0f;
 801b220:	ee38 8a68 	vsub.f32	s16, s16, s17
    if (c->active)
 801b224:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b228:	2b00      	cmp	r3, #0
 801b22a:	f040 8161 	bne.w	801b4f0 <tMBSawPulse_tick+0x668>
			if (!k && p >= b) {
 801b22e:	eeb4 bac8 	vcmpe.f32	s22, s16
 801b232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b236:	d878      	bhi.n	801b32a <tMBSawPulse_tick+0x4a2>
    _tMBSawPulse* c = *osc;
 801b238:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b23a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b23e:	2b00      	cmp	r3, #0
 801b240:	f000 8151 	beq.w	801b4e6 <tMBSawPulse_tick+0x65e>
		r = MINBLEP_PHASES * phase * inv_w;
 801b244:	eddf 7a1b 	vldr	s15, [pc, #108]	; 801b2b4 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801b248:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801b24c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b250:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = -0.5f;
 801b254:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801b258:	eea8 0a89 	vfma.f32	s0, s17, s18
 801b25c:	f002 fd5c 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b260:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b264:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b268:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b26c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b270:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801b272:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b276:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b27a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b27e:	ee98 7a89 	vfnms.f32	s14, s17, s18
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b282:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b286:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b28a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b28e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b292:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b296:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b29a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b29e:	3301      	adds	r3, #1
 801b2a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b2a4:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b2a8:	e70f      	b.n	801b0ca <tMBSawPulse_tick+0x242>
 801b2aa:	bf00      	nop
 801b2ac:	0802dcf8 	.word	0x0802dcf8
 801b2b0:	00000000 	.word	0x00000000
 801b2b4:	42800000 	.word	0x42800000
    _tMBSawPulse* c = *osc;
 801b2b8:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b2ba:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b2be:	2b00      	cmp	r3, #0
 801b2c0:	f000 814c 	beq.w	801b55c <tMBSawPulse_tick+0x6d4>
		r = MINBLEP_PHASES * phase * inv_w;
 801b2c4:	ed5f 9a05 	vldr	s19, [pc, #-20]	; 801b2b4 <tMBSawPulse_tick+0x42c>
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801b2c8:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801b2cc:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b2d0:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = -0.5f;
 801b2d4:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801b2d8:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801b2dc:	f002 fd1c 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b2e0:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b2e4:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b2e8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b2ec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b2f0:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, p - b, inv_sw, -1.0f * shape);
 801b2f2:	eef1 7a4c 	vneg.f32	s15, s24
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b2f6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b2fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b2fe:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b302:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b306:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b30a:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b30e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b312:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b316:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b31a:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b31e:	3301      	adds	r3, #1
 801b320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b324:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b328:	e5fc      	b.n	801af24 <tMBSawPulse_tick+0x9c>
				x = 0.5f;
 801b32a:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
			if (p < b) {
 801b32e:	ed5f 5a20 	vldr	s11, [pc, #-128]	; 801b2b0 <tMBSawPulse_tick+0x428>
 801b332:	e6ca      	b.n	801b0ca <tMBSawPulse_tick+0x242>
			if (p < 0.0f) {
 801b334:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801b338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b33c:	f57f ae9d 	bpl.w	801b07a <tMBSawPulse_tick+0x1f2>
 801b340:	eef5 7a40 	vcmp.f32	s15, #0.0
 801b344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b348:	f57f ae97 	bpl.w	801b07a <tMBSawPulse_tick+0x1f2>
    _tMBSawPulse* c = *osc;
 801b34c:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 801b34e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801b352:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801b356:	ee78 8a28 	vadd.f32	s17, s16, s17
    if (c->active)
 801b35a:	b353      	cbz	r3, 801b3b2 <tMBSawPulse_tick+0x52a>
		r = MINBLEP_PHASES * phase * inv_w;
 801b35c:	ee29 8a08 	vmul.f32	s16, s18, s16
		i = lrintf(r - 0.5f);
 801b360:	ed5f 9a2c 	vldr	s19, [pc, #-176]	; 801b2b4 <tMBSawPulse_tick+0x42c>
 801b364:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b368:	eea8 0a29 	vfma.f32	s0, s16, s19
 801b36c:	f002 fcd4 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b370:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b374:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b378:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b37c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b380:	4ab2      	ldr	r2, [pc, #712]	; (801b64c <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b382:	3301      	adds	r3, #1
		r -= (float)i;
 801b384:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b38c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b390:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b394:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b398:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801b39c:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b3a0:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b3a4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b3a8:	3301      	adds	r3, #1
 801b3aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b3ae:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (k && p < b) {
 801b3b2:	eeb4 bae8 	vcmpe.f32	s22, s17
 801b3b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b3ba:	f340 8446 	ble.w	801bc4a <tMBSawPulse_tick+0xdc2>
    _tMBSawPulse* c = *osc;
 801b3be:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b3c0:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b3c4:	2b00      	cmp	r3, #0
 801b3c6:	f000 8327 	beq.w	801ba18 <tMBSawPulse_tick+0xb90>
		r = MINBLEP_PHASES * phase * inv_w;
 801b3ca:	eddf 7aa4 	vldr	s15, [pc, #656]	; 801b65c <tMBSawPulse_tick+0x7d4>
 801b3ce:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801b3d2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b3d6:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 801b3da:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b3de:	eeb0 8a68 	vmov.f32	s16, s17
		i = lrintf(r - 0.5f);
 801b3e2:	eea9 0a29 	vfma.f32	s0, s18, s19
 801b3e6:	f002 fc97 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b3ea:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3ee:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b3f2:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b3f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b3fa:	eddf 5a97 	vldr	s11, [pc, #604]	; 801b658 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b3fe:	3301      	adds	r3, #1
		r -= (float)i;
 801b400:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b404:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b408:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b40c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b410:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b414:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b418:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b41c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b420:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b424:	3301      	adds	r3, #1
 801b426:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b42a:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b42e:	e64c      	b.n	801b0ca <tMBSawPulse_tick+0x242>
		else if (sw < 0)
 801b430:	f57f ae49 	bpl.w	801b0c6 <tMBSawPulse_tick+0x23e>
			if (p < b) {
 801b434:	eeb4 8acb 	vcmpe.f32	s16, s22
 801b438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b43c:	f100 80cd 	bmi.w	801b5da <tMBSawPulse_tick+0x752>
			if (p < 0.0f) {
 801b440:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801b444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b448:	f57f ae3d 	bpl.w	801b0c6 <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 801b44c:	683d      	ldr	r5, [r7, #0]
				p += 1.0f;
 801b44e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
    if (c->active)
 801b452:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				p += 1.0f;
 801b456:	ee78 7a28 	vadd.f32	s15, s16, s17
    if (c->active)
 801b45a:	2b00      	cmp	r3, #0
 801b45c:	f000 8302 	beq.w	801ba64 <tMBSawPulse_tick+0xbdc>
		i = lrintf(r - 0.5f);
 801b460:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b464:	eddf 9a7d 	vldr	s19, [pc, #500]	; 801b65c <tMBSawPulse_tick+0x7d4>
		r = MINBLEP_PHASES * phase * inv_w;
 801b468:	ee29 9a08 	vmul.f32	s18, s18, s16
				p += 1.0f;
 801b46c:	eeb0 8a67 	vmov.f32	s16, s15
		i = lrintf(r - 0.5f);
 801b470:	eeb0 0a6a 	vmov.f32	s0, s21
 801b474:	eea9 0a29 	vfma.f32	s0, s18, s19
 801b478:	f002 fc4e 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b47c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b480:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b484:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b48c:	4a6f      	ldr	r2, [pc, #444]	; (801b64c <tMBSawPulse_tick+0x7c4>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b48e:	3301      	adds	r3, #1
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b490:	eef0 5a68 	vmov.f32	s11, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b494:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b498:	eed9 7a29 	vfnms.f32	s15, s18, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b49c:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b4a0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b4a4:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b4a8:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801b4ac:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b4b0:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b4b4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b4b8:	3301      	adds	r3, #1
 801b4ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b4be:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b4c2:	e602      	b.n	801b0ca <tMBSawPulse_tick+0x242>
    z += 0.5f * (c->_f[j] - z); // LP filtering
 801b4c4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801b4c8:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 801b4cc:	e674      	b.n	801b1b8 <tMBSawPulse_tick+0x330>
				 if (p_at_reset >= 1.0f)
 801b4ce:	eef4 dae9 	vcmpe.f32	s27, s19
 801b4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b4d6:	f280 8159 	bge.w	801b78c <tMBSawPulse_tick+0x904>
    _tMBSawPulse* c = *osc;
 801b4da:	46a0      	mov	r8, r4
    if (c->active)
 801b4dc:	f8d4 22f4 	ldr.w	r2, [r4, #756]	; 0x2f4
 801b4e0:	ee1c 9a90 	vmov	r9, s25
 801b4e4:	e592      	b.n	801b00c <tMBSawPulse_tick+0x184>
 801b4e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801b4ea:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b4ee:	e5ec      	b.n	801b0ca <tMBSawPulse_tick+0x242>
		r = MINBLEP_PHASES * phase * inv_w;
 801b4f0:	eddf 9a5a 	vldr	s19, [pc, #360]	; 801b65c <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801b4f4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b4f8:	ee69 9a29 	vmul.f32	s19, s18, s19
 801b4fc:	eea9 0a88 	vfma.f32	s0, s19, s16
 801b500:	f002 fc0a 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b504:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b508:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b50c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b510:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b514:	3301      	adds	r3, #1
		r -= (float)i;
 801b516:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b51a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b51e:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b522:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b526:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b52a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b52e:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b532:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b536:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b53a:	3301      	adds	r3, #1
 801b53c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b540:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b544:	e673      	b.n	801b22e <tMBSawPulse_tick+0x3a6>
			 else if (sw < 0)
 801b546:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b54a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b54e:	f100 815b 	bmi.w	801b808 <tMBSawPulse_tick+0x980>
    c->_k = k;
 801b552:	eef8 5aec 	vcvt.f32.s32	s11, s25
    p += sw - (int)sw;
 801b556:	eeb0 8a68 	vmov.f32	s16, s17
 801b55a:	e5b6      	b.n	801b0ca <tMBSawPulse_tick+0x242>
 801b55c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801b560:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801b564:	e4de      	b.n	801af24 <tMBSawPulse_tick+0x9c>
					 p_at_reset -= 1.0f;
 801b566:	ee7d dae8 	vsub.f32	s27, s27, s17
    if (c->active)
 801b56a:	2a00      	cmp	r2, #0
 801b56c:	f000 810b 	beq.w	801b786 <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 801b570:	eddf 9a3a 	vldr	s19, [pc, #232]	; 801b65c <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801b574:	ee78 ca2d 	vadd.f32	s25, s16, s27
		i = lrintf(r - 0.5f);
 801b578:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 801b57c:	f04f 0900 	mov.w	r9, #0
 801b580:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = 0.5f;
 801b584:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801b588:	eeac 0aa9 	vfma.f32	s0, s25, s19
 801b58c:	f002 fbc4 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b590:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b594:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b598:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b59c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5a0:	3301      	adds	r3, #1
		r -= (float)i;
 801b5a2:	eedc 7aa9 	vfnms.f32	s15, s25, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b5aa:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b5ae:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b5b2:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b5b6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b5ba:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b5be:	edc2 8a3d 	vstr	s17, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b5c2:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801b5c6:	3301      	adds	r3, #1
 801b5c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b5cc:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b5d0:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801b5d4:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801b5d8:	e518      	b.n	801b00c <tMBSawPulse_tick+0x184>
    _tMBSawPulse* c = *osc;
 801b5da:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b5dc:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801b5e0:	ee1c 3a90 	vmov	r3, s25
 801b5e4:	2b00      	cmp	r3, #0
 801b5e6:	f000 820d 	beq.w	801ba04 <tMBSawPulse_tick+0xb7c>
		r = MINBLEP_PHASES * phase * inv_w;
 801b5ea:	eddf 9a1c 	vldr	s19, [pc, #112]	; 801b65c <tMBSawPulse_tick+0x7d4>
 801b5ee:	ee78 8a4b 	vsub.f32	s17, s16, s22
		i = lrintf(r - 0.5f);
 801b5f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 0;
 801b5f6:	eddf ca16 	vldr	s25, [pc, #88]	; 801b650 <tMBSawPulse_tick+0x7c8>
 801b5fa:	ee69 9a29 	vmul.f32	s19, s18, s19
				x = 0.5f;
 801b5fe:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801b602:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801b606:	f002 fb87 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b60a:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b60e:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b612:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b61a:	3301      	adds	r3, #1
		r -= (float)i;
 801b61c:	eed9 7aa8 	vfnms.f32	s15, s19, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b620:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b624:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b628:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b62c:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b630:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b634:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b638:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b63c:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b640:	3301      	adds	r3, #1
 801b642:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b646:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b64a:	e6f9      	b.n	801b440 <tMBSawPulse_tick+0x5b8>
 801b64c:	bf800000 	.word	0xbf800000
 801b650:	00000000 	.word	0x00000000
 801b654:	00000001 	.word	0x00000001
 801b658:	00000000 	.word	0x00000000
 801b65c:	42800000 	.word	0x42800000
		 if (!k)
 801b660:	ee1c 2a90 	vmov	r2, s25
        else if (sw < 0) p = 1.0f - eof_offset;
 801b664:	ee39 eac8 	vsub.f32	s28, s19, s16
		 if (!k)
 801b668:	2a00      	cmp	r2, #0
 801b66a:	f040 80cf 	bne.w	801b80c <tMBSawPulse_tick+0x984>
				 if (p_at_reset < 0.0f)
 801b66e:	eef5 da40 	vcmp.f32	s27, #0.0
 801b672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b676:	d571      	bpl.n	801b75c <tMBSawPulse_tick+0x8d4>
    if (c->active)
 801b678:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
					 p_at_reset += 1.0f;
 801b67c:	ee7d daa9 	vadd.f32	s27, s27, s19
    if (c->active)
 801b680:	2b00      	cmp	r3, #0
 801b682:	f040 8231 	bne.w	801bae8 <tMBSawPulse_tick+0xc60>
				 if (k && p_at_reset < b)
 801b686:	eeb4 baed 	vcmpe.f32	s22, s27
 801b68a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b68e:	f340 82d7 	ble.w	801bc40 <tMBSawPulse_tick+0xdb8>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b692:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801b696:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	f000 81d6 	beq.w	801ba4c <tMBSawPulse_tick+0xbc4>
		r = MINBLEP_PHASES * phase * inv_w;
 801b6a0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b6a4:	ed5f 9a13 	vldr	s19, [pc, #-76]	; 801b65c <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801b6a8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				k = 1;
 801b6ac:	ed5f ca17 	vldr	s25, [pc, #-92]	; 801b654 <tMBSawPulse_tick+0x7cc>
 801b6b0:	ee69 9a29 	vmul.f32	s19, s18, s19
 801b6b4:	ee7e 8a68 	vsub.f32	s17, s28, s17
				x = -0.5f;
 801b6b8:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801b6bc:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801b6c0:	f002 fb2a 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b6c4:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b6c8:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b6cc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b6d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b6d4:	3301      	adds	r3, #1
				tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -1.0f * shape);
 801b6d6:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b6de:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b6e2:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b6e6:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b6ea:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b6ee:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b6f2:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b6f6:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b6fa:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b6fe:	3301      	adds	r3, #1
 801b700:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b704:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (p < b) {
 801b708:	eeb4 bace 	vcmpe.f32	s22, s28
 801b70c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b710:	f77f acd9 	ble.w	801b0c6 <tMBSawPulse_tick+0x23e>
    _tMBSawPulse* c = *osc;
 801b714:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801b716:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	f43f ae05 	beq.w	801b32a <tMBSawPulse_tick+0x4a2>
		r = MINBLEP_PHASES * phase * inv_w;
 801b720:	ed5f 7a32 	vldr	s15, [pc, #-200]	; 801b65c <tMBSawPulse_tick+0x7d4>
 801b724:	ee3e ea4b 	vsub.f32	s28, s28, s22
		i = lrintf(r - 0.5f);
 801b728:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b72c:	ee29 9a27 	vmul.f32	s18, s18, s15
				x = 0.5f;
 801b730:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801b734:	eea9 0a0e 	vfma.f32	s0, s18, s28
 801b738:	f002 faee 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b73c:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b740:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b744:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b74c:	ed5f 5a3e 	vldr	s11, [pc, #-248]	; 801b658 <tMBSawPulse_tick+0x7d0>
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b750:	3301      	adds	r3, #1
		r -= (float)i;
 801b752:	eed9 7a0e 	vfnms.f32	s15, s18, s28
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b75a:	e655      	b.n	801b408 <tMBSawPulse_tick+0x580>
		else if (sw < 0)
 801b75c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801b760:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b764:	f100 814b 	bmi.w	801b9fe <tMBSawPulse_tick+0xb76>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b768:	eeb0 8a4e 	vmov.f32	s16, s28
 801b76c:	ed5f 5a46 	vldr	s11, [pc, #-280]	; 801b658 <tMBSawPulse_tick+0x7d0>
 801b770:	e4ab      	b.n	801b0ca <tMBSawPulse_tick+0x242>
    if (c->active)
 801b772:	f8d4 32f4 	ldr.w	r3, [r4, #756]	; 0x2f4
 801b776:	2b00      	cmp	r3, #0
 801b778:	f040 8109 	bne.w	801b98e <tMBSawPulse_tick+0xb06>
				 if (p_at_reset >= 1.0f)
 801b77c:	eef4 dae9 	vcmpe.f32	s27, s19
 801b780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b784:	db0f      	blt.n	801b7a6 <tMBSawPulse_tick+0x91e>
				x = 0.5f;
 801b786:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b78a:	e470      	b.n	801b06e <tMBSawPulse_tick+0x1e6>
    if (c->active)
 801b78c:	f8d4 92f4 	ldr.w	r9, [r4, #756]	; 0x2f4
					 p_at_reset -= 1.0f;
 801b790:	ee7d dae9 	vsub.f32	s27, s27, s19
    if (c->active)
 801b794:	f1b9 0f00 	cmp.w	r9, #0
 801b798:	f040 8084 	bne.w	801b8a4 <tMBSawPulse_tick+0xa1c>
				 if (!k && p_at_reset >= b)
 801b79c:	eeb4 baed 	vcmpe.f32	s22, s27
 801b7a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b7a4:	d8ef      	bhi.n	801b786 <tMBSawPulse_tick+0x8fe>
    if (c->active)
 801b7a6:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d0eb      	beq.n	801b786 <tMBSawPulse_tick+0x8fe>
		r = MINBLEP_PHASES * phase * inv_w;
 801b7ae:	ed5f 8a55 	vldr	s17, [pc, #-340]	; 801b65c <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801b7b2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
				x = 0.5f;
 801b7b6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801b7ba:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801b7be:	eea8 0a28 	vfma.f32	s0, s16, s17
 801b7c2:	f002 faa9 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b7c6:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b7ca:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b7ce:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b7d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b7d6:	3301      	adds	r3, #1
		r -= (float)i;
 801b7d8:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b7dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b7e0:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b7e4:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b7e8:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b7ec:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b7f0:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b7f4:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b7f8:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b7fc:	3301      	adds	r3, #1
 801b7fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b802:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
 801b806:	e432      	b.n	801b06e <tMBSawPulse_tick+0x1e6>
    p += sw - (int)sw;
 801b808:	eeb0 ea68 	vmov.f32	s28, s17
				 if (p_at_reset < b)
 801b80c:	eeb4 baed 	vcmpe.f32	s22, s27
 801b810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b814:	f300 8108 	bgt.w	801ba28 <tMBSawPulse_tick+0xba0>
				 if (p_at_reset < 0.0f)
 801b818:	eef5 dac0 	vcmpe.f32	s27, #0.0
    if (c->active)
 801b81c:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (p_at_reset < 0.0f)
 801b820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b824:	f100 8126 	bmi.w	801ba74 <tMBSawPulse_tick+0xbec>
        else if (sw < 0) p = 1.0f - eof_offset;
 801b828:	eeb0 8a4e 	vmov.f32	s16, s28
    if (c->active)
 801b82c:	b38b      	cbz	r3, 801b892 <tMBSawPulse_tick+0xa0a>
		r = MINBLEP_PHASES * phase * inv_w;
 801b82e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 801b832:	ed5f 9a76 	vldr	s19, [pc, #-472]	; 801b65c <tMBSawPulse_tick+0x7d4>
		i = lrintf(r - 0.5f);
 801b836:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801b83a:	ee69 9a29 	vmul.f32	s19, s18, s19
 801b83e:	ee7e ea68 	vsub.f32	s29, s28, s17
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801b842:	ee7c 8a68 	vsub.f32	s17, s24, s17
		i = lrintf(r - 0.5f);
 801b846:	eea9 0aae 	vfma.f32	s0, s19, s29
 801b84a:	f002 fa65 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b84e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b852:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b856:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b85a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b85e:	3301      	adds	r3, #1
			tMBSawPulse_place_step_dd_noBuffer(osc, j, 1.0f - p, -inv_sw, -p_at_reset * sawShape);
 801b860:	ee68 daad 	vmul.f32	s27, s17, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b864:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b868:	eed9 7aae 	vfnms.f32	s15, s19, s29
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b86c:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b870:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b874:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b878:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801b87c:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b880:	edc2 da3d 	vstr	s27, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b884:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801b888:	3301      	adds	r3, #1
 801b88a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b88e:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
			if (!k) {
 801b892:	ee1c 3a90 	vmov	r3, s25
 801b896:	2b00      	cmp	r3, #0
 801b898:	f47f af36 	bne.w	801b708 <tMBSawPulse_tick+0x880>
 801b89c:	683d      	ldr	r5, [r7, #0]
 801b89e:	e6fa      	b.n	801b696 <tMBSawPulse_tick+0x80e>
 801b8a0:	683d      	ldr	r5, [r7, #0]
 801b8a2:	e780      	b.n	801b7a6 <tMBSawPulse_tick+0x91e>
		i = lrintf(r - 0.5f);
 801b8a4:	eefe ca00 	vmov.f32	s25, #224	; 0xbf000000 -0.5
 801b8a8:	ed5f 8a94 	vldr	s17, [pc, #-592]	; 801b65c <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset + eof_offset, inv_sw, 1.0f);
 801b8ac:	ee78 aa2d 	vadd.f32	s21, s16, s27
 801b8b0:	9301      	str	r3, [sp, #4]
 801b8b2:	ee69 8a28 	vmul.f32	s17, s18, s17
		i = lrintf(r - 0.5f);
 801b8b6:	eeb0 0a6c 	vmov.f32	s0, s25
 801b8ba:	eeaa 0aa8 	vfma.f32	s0, s21, s17
 801b8be:	f002 fa2b 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b8c2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b8c6:	f8b4 206a 	ldrh.w	r2, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b8ca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b8ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
				 if (!k && p_at_reset >= b)
 801b8d2:	9b01      	ldr	r3, [sp, #4]
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b8d4:	3201      	adds	r2, #1
				 if (!k && p_at_reset >= b)
 801b8d6:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b8da:	f002 023f 	and.w	r2, r2, #63	; 0x3f
		r -= (float)i;
 801b8de:	eeda 7aa8 	vfnms.f32	s15, s21, s17
				 if (!k && p_at_reset >= b)
 801b8e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b8e6:	eb04 0142 	add.w	r1, r4, r2, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b8ea:	f8a4 206a 	strh.w	r2, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b8ee:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b8f2:	eb04 01c2 	add.w	r1, r4, r2, lsl #3
 801b8f6:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b8fa:	edc1 9a3d 	vstr	s19, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b8fe:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 801b902:	f102 0201 	add.w	r2, r2, #1
 801b906:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 801b90a:	f8a4 2068 	strh.w	r2, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b90e:	f8d7 8000 	ldr.w	r8, [r7]
 801b912:	4645      	mov	r5, r8
    if (c->active)
 801b914:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
				 if (!k && p_at_reset >= b)
 801b918:	f200 8175 	bhi.w	801bc06 <tMBSawPulse_tick+0xd7e>
    if (c->active)
 801b91c:	2a00      	cmp	r2, #0
 801b91e:	f43f af42 	beq.w	801b7a6 <tMBSawPulse_tick+0x91e>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b922:	ee78 9a4b 	vsub.f32	s19, s16, s22
					 k = 1;
 801b926:	f04f 0901 	mov.w	r9, #1
		i = lrintf(r - 0.5f);
 801b92a:	eeb0 0a6c 	vmov.f32	s0, s25
					 x = -0.5f;
 801b92e:	eef0 aa6c 	vmov.f32	s21, s25
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b932:	ee79 9aad 	vadd.f32	s19, s19, s27
		i = lrintf(r - 0.5f);
 801b936:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801b93a:	f002 f9ed 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b93e:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b942:	f8b8 306a 	ldrh.w	r3, [r8, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b946:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b94a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b94e:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b950:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b954:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b958:	ee99 7aa8 	vfnms.f32	s14, s19, s17
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b95c:	eb08 0243 	add.w	r2, r8, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b960:	f8a8 306a 	strh.w	r3, [r8, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b964:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b968:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 801b96c:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b970:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b974:	f8b8 3068 	ldrh.w	r3, [r8, #104]	; 0x68
 801b978:	444b      	add	r3, r9
 801b97a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b97e:	f8a8 3068 	strh.w	r3, [r8, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b982:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801b986:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801b98a:	f7ff bb3f 	b.w	801b00c <tMBSawPulse_tick+0x184>
		r = MINBLEP_PHASES * phase * inv_w;
 801b98e:	ed5f 9acd 	vldr	s19, [pc, #-820]	; 801b65c <tMBSawPulse_tick+0x7d4>
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b992:	ee78 8acb 	vsub.f32	s17, s17, s22
		i = lrintf(r - 0.5f);
 801b996:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 801b99a:	f04f 0901 	mov.w	r9, #1
 801b99e:	ee69 9a29 	vmul.f32	s19, s18, s19
					 x = -0.5f;
 801b9a2:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801b9a6:	eea8 0aa9 	vfma.f32	s0, s17, s19
 801b9aa:	f002 f9b5 	bl	801dd18 <lrintf>
		r -= (float)i;
 801b9ae:	ee07 0a10 	vmov	s14, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b9b2:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801b9b6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801b9ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b9be:	444b      	add	r3, r9
					 tMBSawPulse_place_step_dd_noBuffer(osc, j, p_at_reset - b + eof_offset, inv_sw, -1.0f * shape);
 801b9c0:	eef1 7a4c 	vneg.f32	s15, s24
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b9c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801b9c8:	ee98 7aa9 	vfnms.f32	s14, s17, s19
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b9cc:	eb04 0243 	add.w	r2, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801b9d0:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801b9d4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801b9d8:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
 801b9dc:	ed82 7a3c 	vstr	s14, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801b9e0:	edc2 7a3d 	vstr	s15, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801b9e4:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801b9e8:	444b      	add	r3, r9
 801b9ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b9ee:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801b9f2:	f8d7 8000 	ldr.w	r8, [r7]
    if (c->active)
 801b9f6:	f8d8 22f4 	ldr.w	r2, [r8, #756]	; 0x2f4
 801b9fa:	f7ff baff 	b.w	801affc <tMBSawPulse_tick+0x174>
 801b9fe:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801ba02:	e711      	b.n	801b828 <tMBSawPulse_tick+0x9a0>
			if (p < 0.0f) {
 801ba04:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801ba08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba0c:	f100 8100 	bmi.w	801bc10 <tMBSawPulse_tick+0xd88>
				x = 0.5f;
 801ba10:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801ba14:	f7ff bb57 	b.w	801b0c6 <tMBSawPulse_tick+0x23e>
				x = 0.5f;
 801ba18:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801ba1c:	eddf 5a8f 	vldr	s11, [pc, #572]	; 801bc5c <tMBSawPulse_tick+0xdd4>
 801ba20:	eeb0 8a68 	vmov.f32	s16, s17
 801ba24:	f7ff bb51 	b.w	801b0ca <tMBSawPulse_tick+0x242>
    if (c->active)
 801ba28:	edd5 cabd 	vldr	s25, [r5, #756]	; 0x2f4
 801ba2c:	ee1c 2a90 	vmov	r2, s25
 801ba30:	2a00      	cmp	r2, #0
 801ba32:	f040 80b6 	bne.w	801bba2 <tMBSawPulse_tick+0xd1a>
				 if (p_at_reset < 0.0f)
 801ba36:	eef5 dac0 	vcmpe.f32	s27, #0.0
 801ba3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba3e:	f100 80ef 	bmi.w	801bc20 <tMBSawPulse_tick+0xd98>
					 x = 0.5f;
 801ba42:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
        else if (sw < 0) p = 1.0f - eof_offset;
 801ba46:	eeb0 8a4e 	vmov.f32	s16, s28
 801ba4a:	e722      	b.n	801b892 <tMBSawPulse_tick+0xa0a>
			if (p < b) {
 801ba4c:	eeb4 bace 	vcmpe.f32	s22, s28
 801ba50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ba54:	f73f ac69 	bgt.w	801b32a <tMBSawPulse_tick+0x4a2>
				x = -0.5f;
 801ba58:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				k = 1;
 801ba5c:	eddf ca80 	vldr	s25, [pc, #512]	; 801bc60 <tMBSawPulse_tick+0xdd8>
 801ba60:	f7ff bb31 	b.w	801b0c6 <tMBSawPulse_tick+0x23e>
				x = -0.5f;
 801ba64:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 801ba68:	eeb0 8a67 	vmov.f32	s16, s15
 801ba6c:	eef0 5a68 	vmov.f32	s11, s17
 801ba70:	f7ff bb2b 	b.w	801b0ca <tMBSawPulse_tick+0x242>
					 p_at_reset += 1.0f;
 801ba74:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801ba78:	ee7d daa7 	vadd.f32	s27, s27, s15
    if (c->active)
 801ba7c:	2b00      	cmp	r3, #0
 801ba7e:	f000 80cf 	beq.w	801bc20 <tMBSawPulse_tick+0xd98>
		r = MINBLEP_PHASES * phase * inv_w;
 801ba82:	ed9f 8a78 	vldr	s16, [pc, #480]	; 801bc64 <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 801ba86:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 1;
 801ba8a:	eddf ca75 	vldr	s25, [pc, #468]	; 801bc60 <tMBSawPulse_tick+0xdd8>
 801ba8e:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = -0.5f;
 801ba92:	eef0 aa40 	vmov.f32	s21, s0
		i = lrintf(r - 0.5f);
 801ba96:	eea8 0a28 	vfma.f32	s0, s16, s17
 801ba9a:	f002 f93d 	bl	801dd18 <lrintf>
		r -= (float)i;
 801ba9e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801baa2:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801baa6:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801baaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801baae:	4a6e      	ldr	r2, [pc, #440]	; (801bc68 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bab0:	3301      	adds	r3, #1
		r -= (float)i;
 801bab2:	eed8 7a28 	vfnms.f32	s15, s16, s17
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801baba:	eb05 0143 	add.w	r1, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801babe:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bac2:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801bac6:	eb05 01c3 	add.w	r1, r5, r3, lsl #3
 801baca:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801bace:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801bad2:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801bad6:	3301      	adds	r3, #1
 801bad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801badc:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801bae0:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801bae2:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
 801bae6:	e69f      	b.n	801b828 <tMBSawPulse_tick+0x9a0>
		r = MINBLEP_PHASES * phase * inv_w;
 801bae8:	eddf 9a5e 	vldr	s19, [pc, #376]	; 801bc64 <tMBSawPulse_tick+0xddc>
		i = lrintf(r - 0.5f);
 801baec:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801baf0:	ee69 9a29 	vmul.f32	s19, s18, s19
 801baf4:	eea9 0aa8 	vfma.f32	s0, s19, s17
 801baf8:	f002 f90e 	bl	801dd18 <lrintf>
		r -= (float)i;
 801bafc:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb00:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801bb04:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801bb08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801bb0c:	4a56      	ldr	r2, [pc, #344]	; (801bc68 <tMBSawPulse_tick+0xde0>)
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb0e:	3301      	adds	r3, #1
				 if (k && p_at_reset < b)
 801bb10:	eeb4 baed 	vcmpe.f32	s22, s27
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		r -= (float)i;
 801bb18:	eed9 7aa8 	vfnms.f32	s15, s19, s17
				 if (k && p_at_reset < b)
 801bb1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bb20:	eb04 0143 	add.w	r1, r4, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb24:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bb28:	f8a1 006e 	strh.w	r0, [r1, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801bb2c:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
 801bb30:	edc1 7a3c 	vstr	s15, [r1, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801bb34:	f8c1 20f4 	str.w	r2, [r1, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801bb38:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 801bb3c:	f103 0301 	add.w	r3, r3, #1
 801bb40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bb44:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801bb48:	683d      	ldr	r5, [r7, #0]
    if (c->active)
 801bb4a:	f8d5 32f4 	ldr.w	r3, [r5, #756]	; 0x2f4
				 if (k && p_at_reset < b)
 801bb4e:	dd6e      	ble.n	801bc2e <tMBSawPulse_tick+0xda6>
    if (c->active)
 801bb50:	2b00      	cmp	r3, #0
 801bb52:	f43f ad9e 	beq.w	801b692 <tMBSawPulse_tick+0x80a>
		r = MINBLEP_PHASES * phase * inv_w;
 801bb56:	ee38 8a4b 	vsub.f32	s16, s16, s22
		i = lrintf(r - 0.5f);
 801bb5a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 x = 0.5f;
 801bb5e:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801bb62:	ee38 8a2d 	vadd.f32	s16, s16, s27
		i = lrintf(r - 0.5f);
 801bb66:	eea8 0a29 	vfma.f32	s0, s16, s19
 801bb6a:	f002 f8d5 	bl	801dd18 <lrintf>
		r -= (float)i;
 801bb6e:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb72:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801bb76:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801bb7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb7e:	3301      	adds	r3, #1
		r -= (float)i;
 801bb80:	eed8 7a29 	vfnms.f32	s15, s16, s19
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bb88:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bb8c:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bb90:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801bb94:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801bb98:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801bb9c:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801bba0:	e797      	b.n	801bad2 <tMBSawPulse_tick+0xc4a>
		r = MINBLEP_PHASES * phase * inv_w;
 801bba2:	ed9f 8a30 	vldr	s16, [pc, #192]	; 801bc64 <tMBSawPulse_tick+0xddc>
 801bba6:	ee78 9acb 	vsub.f32	s19, s17, s22
		i = lrintf(r - 0.5f);
 801bbaa:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
					 k = 0;
 801bbae:	ee0c 3a90 	vmov	s25, r3
 801bbb2:	ee29 8a08 	vmul.f32	s16, s18, s16
					 x = 0.5f;
 801bbb6:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
		i = lrintf(r - 0.5f);
 801bbba:	eea9 0a88 	vfma.f32	s0, s19, s16
 801bbbe:	f002 f8ab 	bl	801dd18 <lrintf>
		r -= (float)i;
 801bbc2:	ee07 0a90 	vmov	s15, r0
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bbc6:	f8b5 306a 	ldrh.w	r3, [r5, #106]	; 0x6a
		i &= MINBLEP_PHASE_MASK;  /* extreme modulation can cause i to be out-of-range */
 801bbca:	f000 003f 	and.w	r0, r0, #63	; 0x3f
		r -= (float)i;
 801bbce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bbd2:	3301      	adds	r3, #1
		r -= (float)i;
 801bbd4:	eed9 7a88 	vfnms.f32	s15, s19, s16
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bbd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bbdc:	eb05 0243 	add.w	r2, r5, r3, lsl #1
		c->mostRecentBLEP = (c->mostRecentBLEP + 1) & 63;
 801bbe0:	f8a5 306a 	strh.w	r3, [r5, #106]	; 0x6a
		c->BLEPindices[c->mostRecentBLEP] = i;
 801bbe4:	f8a2 006e 	strh.w	r0, [r2, #110]	; 0x6e
		c->BLEPproperties[c->mostRecentBLEP][0] = r;
 801bbe8:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
 801bbec:	edc2 7a3c 	vstr	s15, [r2, #240]	; 0xf0
		c->BLEPproperties[c->mostRecentBLEP][1] = scale;
 801bbf0:	ed82 ca3d 	vstr	s24, [r2, #244]	; 0xf4
		c->numBLEPs = (c->numBLEPs + 1) & 63;
 801bbf4:	f8b5 3068 	ldrh.w	r3, [r5, #104]	; 0x68
 801bbf8:	3301      	adds	r3, #1
 801bbfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801bbfe:	f8a5 3068 	strh.w	r3, [r5, #104]	; 0x68
    _tMBSawPulse* c = *osc;
 801bc02:	683d      	ldr	r5, [r7, #0]
 801bc04:	e608      	b.n	801b818 <tMBSawPulse_tick+0x990>
 801bc06:	eef6 aa00 	vmov.f32	s21, #96	; 0x3f000000  0.5
 801bc0a:	4699      	mov	r9, r3
 801bc0c:	f7ff b9fe 	b.w	801b00c <tMBSawPulse_tick+0x184>
				p += 1.0f;
 801bc10:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
				x = -0.5f;
 801bc14:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
				p += 1.0f;
 801bc18:	ee38 8a25 	vadd.f32	s16, s16, s11
    if (c->active)
 801bc1c:	f7ff ba55 	b.w	801b0ca <tMBSawPulse_tick+0x242>
        else if (sw < 0) p = 1.0f - eof_offset;
 801bc20:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801bc24:	eddf ca0e 	vldr	s25, [pc, #56]	; 801bc60 <tMBSawPulse_tick+0xdd8>
 801bc28:	eeb0 8a4e 	vmov.f32	s16, s28
 801bc2c:	e56c      	b.n	801b708 <tMBSawPulse_tick+0x880>
 801bc2e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801bc32:	eddf ca0b 	vldr	s25, [pc, #44]	; 801bc60 <tMBSawPulse_tick+0xdd8>
		else if (sw < 0)
 801bc36:	e5f7      	b.n	801b828 <tMBSawPulse_tick+0x9a0>
    p += sw - (int)sw;
 801bc38:	eeb0 8a68 	vmov.f32	s16, s17
 801bc3c:	f7ff b95f 	b.w	801aefe <tMBSawPulse_tick+0x76>
				 if (k && p_at_reset < b)
 801bc40:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801bc44:	eddf ca06 	vldr	s25, [pc, #24]	; 801bc60 <tMBSawPulse_tick+0xdd8>
 801bc48:	e6fd      	b.n	801ba46 <tMBSawPulse_tick+0xbbe>
 801bc4a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801bc4e:	eefe aa00 	vmov.f32	s21, #224	; 0xbf000000 -0.5
 801bc52:	eeb0 8a68 	vmov.f32	s16, s17
 801bc56:	f7ff ba38 	b.w	801b0ca <tMBSawPulse_tick+0x242>
 801bc5a:	bf00      	nop
 801bc5c:	00000000 	.word	0x00000000
 801bc60:	00000001 	.word	0x00000001
 801bc64:	42800000 	.word	0x42800000
 801bc68:	bf800000 	.word	0xbf800000

0801bc6c <tMBSawPulse_setFreq>:
void __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#else
void tMBSawPulse_setFreq(tMBSawPulse* const osc, float f)
#endif
{
    _tMBSawPulse* c = *osc;
 801bc6c:	6803      	ldr	r3, [r0, #0]
    c->freq = f;
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
    c->_inv_w = 1.0f / c->_w;
 801bc6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    if ((f > 6000.0f) || (f < -6000.0f))
 801bc72:	eddf 6a14 	vldr	s13, [pc, #80]	; 801bcc4 <tMBSawPulse_setFreq+0x58>
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801bc76:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
    if ((f > 6000.0f) || (f < -6000.0f))
 801bc7a:	eeb4 0ae6 	vcmpe.f32	s0, s13
    c->freq = f;
 801bc7e:	ed83 0a02 	vstr	s0, [r3, #8]
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801bc82:	ee60 7a27 	vmul.f32	s15, s0, s15
    if ((f > 6000.0f) || (f < -6000.0f))
 801bc86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c->_inv_w = 1.0f / c->_w;
 801bc8a:	ee87 6a27 	vdiv.f32	s12, s14, s15
    c->_w = c->freq * c->invSampleRate;  /* phase increment */
 801bc8e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    c->_inv_w = 1.0f / c->_w;
 801bc92:	ed83 6a0f 	vstr	s12, [r3, #60]	; 0x3c
    if ((f > 6000.0f) || (f < -6000.0f))
 801bc96:	dc0c      	bgt.n	801bcb2 <tMBSawPulse_setFreq+0x46>
 801bc98:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801bcc8 <tMBSawPulse_setFreq+0x5c>
 801bc9c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801bca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bca4:	d405      	bmi.n	801bcb2 <tMBSawPulse_setFreq+0x46>
    	c->active = 0;
    	c->gain = 0.0f;
    }
    else
    {
    	c->active = 1;
 801bca6:	2201      	movs	r2, #1
 801bca8:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 801bcac:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
    	c->gain = 1.0f;
    }
}
 801bcb0:	4770      	bx	lr
    	c->gain = 0.0f;
 801bcb2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801bccc <tMBSawPulse_setFreq+0x60>
    	c->active = 0;
 801bcb6:	2200      	movs	r2, #0
 801bcb8:	ed83 7abc 	vstr	s14, [r3, #752]	; 0x2f0
 801bcbc:	f8c3 22f4 	str.w	r2, [r3, #756]	; 0x2f4
}
 801bcc0:	4770      	bx	lr
 801bcc2:	bf00      	nop
 801bcc4:	45bb8000 	.word	0x45bb8000
 801bcc8:	c5bb8000 	.word	0xc5bb8000
 801bccc:	00000000 	.word	0x00000000

0801bcd0 <tMBSawPulse_sync>:
float __attribute__ ((section(".itcmram"))) __attribute__ ((aligned (32)))  tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#else
float tMBSawPulse_sync(tMBSawPulse* const osc, float value)
#endif
{
    _tMBSawPulse* c = *osc;
 801bcd0:	6803      	ldr	r3, [r0, #0]
    //based on https://github.com/VCVRack/Fundamental/blob/5799ee2a9b21492b42ebcb9b65d5395ef5c1cbe2/src/VCO.cpp#L123
    float last = c->lastsyncin;
    float delta = value - last;
    float crossing = -last / delta;
    c->lastsyncin = value;
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801bcd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    float last = c->lastsyncin;
 801bcd6:	edd3 7a03 	vldr	s15, [r3, #12]
    c->lastsyncin = value;
 801bcda:	ed83 0a03 	vstr	s0, [r3, #12]
    float delta = value - last;
 801bcde:	ee30 6a67 	vsub.f32	s12, s0, s15
    float crossing = -last / delta;
 801bce2:	eef1 7a67 	vneg.f32	s15, s15
 801bce6:	eec7 6a86 	vdiv.f32	s13, s15, s12
    if ((0.f < crossing) && (crossing <= 1.f) && (value >= 0.f))
 801bcea:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801bcee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bcf2:	eef4 6ac7 	vcmpe.f32	s13, s14
 801bcf6:	bfcc      	ite	gt
 801bcf8:	2201      	movgt	r2, #1
 801bcfa:	2200      	movle	r2, #0
 801bcfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd00:	f002 0201 	and.w	r2, r2, #1
 801bd04:	bf88      	it	hi
 801bd06:	2200      	movhi	r2, #0
 801bd08:	b122      	cbz	r2, 801bd14 <tMBSawPulse_sync+0x44>
 801bd0a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801bd0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd12:	da04      	bge.n	801bd1e <tMBSawPulse_sync+0x4e>
        c->sync = (1.f - crossing) * delta;
    else c->sync = 0.f;
 801bd14:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801bd2c <tMBSawPulse_sync+0x5c>
 801bd18:	ed83 7a04 	vstr	s14, [r3, #16]

    return value;
}
 801bd1c:	4770      	bx	lr
        c->sync = (1.f - crossing) * delta;
 801bd1e:	ee37 7a66 	vsub.f32	s14, s14, s13
 801bd22:	ee27 7a06 	vmul.f32	s14, s14, s12
 801bd26:	ed83 7a04 	vstr	s14, [r3, #16]
}
 801bd2a:	4770      	bx	lr
 801bd2c:	00000000 	.word	0x00000000

0801bd30 <tMBSawPulse_setShape>:
    c->_p = phase;
}

void tMBSawPulse_setShape(tMBSawPulse* const osc, float shape)
{
    _tMBSawPulse* c = *osc;
 801bd30:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801bd32:	ed83 0a11 	vstr	s0, [r3, #68]	; 0x44
}
 801bd36:	4770      	bx	lr

0801bd38 <tIntPhasor_init>:


//beep boop adding intphasro
// Cycle
void    tIntPhasor_init(tIntPhasor* const cy, LEAF* const leaf)
{
 801bd38:	b538      	push	{r3, r4, r5, lr}
    tIntPhasor_initToPool(cy, &leaf->mempool);
}

void    tIntPhasor_initToPool   (tIntPhasor* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801bd3a:	698c      	ldr	r4, [r1, #24]
{
 801bd3c:	4605      	mov	r5, r0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801bd3e:	201c      	movs	r0, #28
 801bd40:	4621      	mov	r1, r4
 801bd42:	f7fb fc75 	bl	8017630 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->phase    =  0;
 801bd46:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801bd48:	6028      	str	r0, [r5, #0]
    c->mempool = m;
 801bd4a:	6004      	str	r4, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801bd4c:	6863      	ldr	r3, [r4, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bd4e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 801bd64 <tIntPhasor_init+0x2c>
    c->phase    =  0;
 801bd52:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bd54:	edd3 7a01 	vldr	s15, [r3, #4]
 801bd58:	ee67 7a87 	vmul.f32	s15, s15, s14
 801bd5c:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801bd60:	bd38      	pop	{r3, r4, r5, pc}
 801bd62:	bf00      	nop
 801bd64:	4f800000 	.word	0x4f800000

0801bd68 <tIntPhasor_tick>:
}

//need to check bounds and wrap table properly to allow through-zero FM
float   tIntPhasor_tick(tIntPhasor* const cy)
{
    _tIntPhasor* c = *cy;
 801bd68:	6802      	ldr	r2, [r0, #0]
    // Phasor increment
    c->phase = (c->phase + c->inc);
    
    return c->phase * INV_TWO_TO_32; 
 801bd6a:	eddf 7a06 	vldr	s15, [pc, #24]	; 801bd84 <tIntPhasor_tick+0x1c>
    c->phase = (c->phase + c->inc);
 801bd6e:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
 801bd72:	440b      	add	r3, r1
    return c->phase * INV_TWO_TO_32; 
 801bd74:	ee07 3a10 	vmov	s14, r3
    c->phase = (c->phase + c->inc);
 801bd78:	6053      	str	r3, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801bd7a:	eeb8 0a47 	vcvt.f32.u32	s0, s14
}
 801bd7e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bd82:	4770      	bx	lr
 801bd84:	2f80000d 	.word	0x2f80000d

0801bd88 <tIntPhasor_setFreq>:

void     tIntPhasor_setFreq(tIntPhasor* const cy, float freq)
{
    _tIntPhasor* c = *cy;
 801bd88:	6803      	ldr	r3, [r0, #0]
    
    c->freq  = freq;
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bd8a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801bd8e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bd92:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bd96:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bd9a:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801bd9e:	4770      	bx	lr

0801bda0 <tIntPhasor_setPhase>:

void    tIntPhasor_setPhase(tIntPhasor* const cy, float phase)
{
    _tIntPhasor* c = *cy;
    
    int i = phase;
 801bda0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
    c->phase = phase * TWO_TO_32;
 801bda4:	ed9f 7a06 	vldr	s14, [pc, #24]	; 801bdc0 <tIntPhasor_setPhase+0x20>
    _tIntPhasor* c = *cy;
 801bda8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801bdaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bdae:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801bdb2:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bdb6:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bdba:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801bdbe:	4770      	bx	lr
 801bdc0:	4f800000 	.word	0x4f800000

0801bdc4 <tSquareLFO_init>:
    tIntPhasor_setFreq(cy, c->freq);
}

//////SQUARE(PUSHER)LFO
void    tSquareLFO_init(tSquareLFO* const cy, LEAF* const leaf)
{
 801bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdc6:	ed2d 8b02 	vpush	{d8}
    tSquareLFO_initToPool(cy, &leaf->mempool);
}

void    tSquareLFO_initToPool   (tSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801bdca:	698f      	ldr	r7, [r1, #24]
{
 801bdcc:	4606      	mov	r6, r0
 801bdce:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801bdd0:	2010      	movs	r0, #16
 801bdd2:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bdd4:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801be5c <tSquareLFO_init+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801bdd8:	f7fb fc2a 	bl	8017630 <mpool_alloc>
 801bddc:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801bdde:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801bde0:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801bde2:	69af      	ldr	r7, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801bde4:	201c      	movs	r0, #28
 801bde6:	4639      	mov	r1, r7
 801bde8:	f7fb fc22 	bl	8017630 <mpool_alloc>
 801bdec:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801bdee:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801bdf0:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 801bdf2:	2700      	movs	r7, #0
 801bdf4:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bdf6:	edd3 7a01 	vldr	s15, [r3, #4]
 801bdfa:	ee67 7a88 	vmul.f32	s15, s15, s16
 801bdfe:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801be02:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801be04:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801be06:	4629      	mov	r1, r5
 801be08:	f7fb fc12 	bl	8017630 <mpool_alloc>
 801be0c:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801be0e:	6005      	str	r5, [r0, #0]

void tSquareLFO_setPulseWidth(tSquareLFO* const cy, float pw)
{
    _tSquareLFO *c = *cy;

    c->pulsewidth = pw;
 801be10:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801be14:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801be16:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801be18:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801be1c:	eddf 6a10 	vldr	s13, [pc, #64]	; 801be60 <tSquareLFO_init+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801be20:	ee27 7a08 	vmul.f32	s14, s14, s16
 801be24:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 801be28:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801be2a:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801be2c:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801be30:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801be34:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801be36:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801be3a:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801be3e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801be42:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801be46:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801be4a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801be4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801be52:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801be56:	ecbd 8b02 	vpop	{d8}
 801be5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801be5c:	4f800000 	.word	0x4f800000
 801be60:	2f80000d 	.word	0x2f80000d

0801be64 <tSquareLFO_initToPool>:
{
 801be64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be66:	ed2d 8b02 	vpush	{d8}
    _tMempool* m = *mp;
 801be6a:	680f      	ldr	r7, [r1, #0]
{
 801be6c:	4606      	mov	r6, r0
 801be6e:	460d      	mov	r5, r1
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801be70:	2010      	movs	r0, #16
 801be72:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801be74:	ed9f 8a21 	vldr	s16, [pc, #132]	; 801befc <tSquareLFO_initToPool+0x98>
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801be78:	f7fb fbda 	bl	8017630 <mpool_alloc>
 801be7c:	6030      	str	r0, [r6, #0]
    c->mempool = m;
 801be7e:	6007      	str	r7, [r0, #0]
    _tSquareLFO* c = *cy = (_tSquareLFO*) mpool_alloc(sizeof(_tSquareLFO), m);
 801be80:	4604      	mov	r4, r0
    _tMempool* m = *mp;
 801be82:	682f      	ldr	r7, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801be84:	201c      	movs	r0, #28
 801be86:	4639      	mov	r1, r7
 801be88:	f7fb fbd2 	bl	8017630 <mpool_alloc>
 801be8c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801be8e:	6007      	str	r7, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801be90:	687b      	ldr	r3, [r7, #4]
    c->phase    =  0;
 801be92:	2700      	movs	r7, #0
 801be94:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801be96:	edd3 7a01 	vldr	s15, [r3, #4]
 801be9a:	ee67 7a88 	vmul.f32	s15, s15, s16
 801be9e:	edc0 7a06 	vstr	s15, [r0, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801bea2:	201c      	movs	r0, #28
    _tMempool* m = *mp;
 801bea4:	682d      	ldr	r5, [r5, #0]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801bea6:	4629      	mov	r1, r5
 801bea8:	f7fb fbc2 	bl	8017630 <mpool_alloc>
 801beac:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801beae:	6005      	str	r5, [r0, #0]
    c->pulsewidth = pw;
 801beb0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    LEAF* leaf = c->mempool->leaf;
 801beb4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801beb6:	6047      	str	r7, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801beb8:	ed92 7a01 	vldr	s14, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bebc:	eddf 6a10 	vldr	s13, [pc, #64]	; 801bf00 <tSquareLFO_initToPool+0x9c>
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801bec0:	ee27 7a08 	vmul.f32	s14, s14, s16
 801bec4:	ed80 7a06 	vstr	s14, [r0, #24]
    _tSquareLFO *c = *cy;
 801bec8:	6833      	ldr	r3, [r6, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801beca:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801becc:	edc3 7a01 	vstr	s15, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bed0:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801bed4:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bed6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801beda:	eee7 7a26 	vfma.f32	s15, s14, s13
    int i = phase;
 801bede:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801bee2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bee6:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801beea:	ee67 7a88 	vmul.f32	s15, s15, s16
 801beee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bef2:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801bef6:	ecbd 8b02 	vpop	{d8}
 801befa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801befc:	4f800000 	.word	0x4f800000
 801bf00:	2f80000d 	.word	0x2f80000d

0801bf04 <tSquareLFO_tick>:
    _tSquareLFO* c = *cy;
 801bf04:	6802      	ldr	r2, [r0, #0]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801bf06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801bf0a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801bf48 <tSquareLFO_tick+0x44>
    _tIntPhasor* c = *cy;
 801bf0e:	6891      	ldr	r1, [r2, #8]
    c->phase = (c->phase + c->inc);
 801bf10:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801bf14:	4403      	add	r3, r0
 801bf16:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 801bf18:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801bf1c:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801bf1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801bf22:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801bf26:	4403      	add	r3, r0
    return c->phase * INV_TWO_TO_32; 
 801bf28:	ee06 3a10 	vmov	s12, r3
    c->phase = (c->phase + c->inc);
 801bf2c:	604b      	str	r3, [r1, #4]
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801bf2e:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801bf32:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801bf36:	ee30 0a66 	vsub.f32	s0, s0, s13
 801bf3a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801bf3e:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801bf42:	ee30 0a00 	vadd.f32	s0, s0, s0
 801bf46:	4770      	bx	lr
 801bf48:	2f80000d 	.word	0x2f80000d

0801bf4c <tSquareLFO_setFreq>:
    _tSquareLFO* c = *cy;
 801bf4c:	6802      	ldr	r2, [r0, #0]
    _tIntPhasor* c = *cy;
 801bf4e:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bf50:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801bf54:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bf58:	ee60 7a27 	vmul.f32	s15, s0, s15
 801bf5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801bf60:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801bf64:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bf66:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801bf6a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801bf6e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801bf72:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bf76:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801bf7a:	4770      	bx	lr

0801bf7c <tSquareLFO_setPulseWidth>:
    _tSquareLFO *c = *cy;
 801bf7c:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bf7e:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801bfb4 <tSquareLFO_setPulseWidth+0x38>
 801bf82:	689a      	ldr	r2, [r3, #8]
    c->pulsewidth = pw;
 801bf84:	ed83 0a01 	vstr	s0, [r3, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bf88:	edd2 7a01 	vldr	s15, [r2, #4]
    c->phase = phase * TWO_TO_32;
 801bf8c:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801bfb8 <tSquareLFO_setPulseWidth+0x3c>
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bf90:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 801bf94:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bf96:	eea7 0aa6 	vfma.f32	s0, s15, s13
    int i = phase;
 801bf9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    phase -= i;
 801bf9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801bfa2:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32;
 801bfa6:	ee20 0a07 	vmul.f32	s0, s0, s14
 801bfaa:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bfae:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801bfb2:	4770      	bx	lr
 801bfb4:	2f80000d 	.word	0x2f80000d
 801bfb8:	4f800000 	.word	0x4f800000

0801bfbc <tSquareLFO_setPhase>:
    int i = phase;
 801bfbc:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 801bfc0:	eddf 6a13 	vldr	s13, [pc, #76]	; 801c010 <tSquareLFO_setPhase+0x54>

void tSquareLFO_setPhase(tSquareLFO* const cy, float phase)
{
    _tSquareLFO *c = *cy;
 801bfc4:	6803      	ldr	r3, [r0, #0]
    tIntPhasor_setPhase(&c->phasor, phase);
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bfc6:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801c014 <tSquareLFO_setPhase+0x58>
    phase -= i;
 801bfca:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tIntPhasor* c = *cy;
 801bfce:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801bfd0:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 801bfd4:	ee20 0a26 	vmul.f32	s0, s0, s13
 801bfd8:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801bfdc:	ed82 0a01 	vstr	s0, [r2, #4]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bfe0:	689a      	ldr	r2, [r3, #8]
 801bfe2:	edd3 7a01 	vldr	s15, [r3, #4]
 801bfe6:	ed92 7a01 	vldr	s14, [r2, #4]
    _tIntPhasor* c = *cy;
 801bfea:	68db      	ldr	r3, [r3, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801bfec:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801bff0:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801bff4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801bff8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801bffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801c000:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c008:	edc3 7a01 	vstr	s15, [r3, #4]
}
 801c00c:	4770      	bx	lr
 801c00e:	bf00      	nop
 801c010:	4f800000 	.word	0x4f800000
 801c014:	2f80000d 	.word	0x2f80000d

0801c018 <tSawSquareLFO_init>:

void    tSawSquareLFO_init        (tSawSquareLFO* const cy, LEAF* const leaf)
{
 801c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

}

void    tSawSquareLFO_initToPool  (tSawSquareLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801c01a:	460c      	mov	r4, r1
{
 801c01c:	4606      	mov	r6, r0
 801c01e:	460d      	mov	r5, r1
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801c020:	2010      	movs	r0, #16
    _tMempool* m = *mp;
 801c022:	f854 7f18 	ldr.w	r7, [r4, #24]!
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801c026:	4639      	mov	r1, r7
 801c028:	f7fb fb02 	bl	8017630 <mpool_alloc>
    c->mempool = m;
    tSquareLFO_initToPool(&c->square,mp);
 801c02c:	4621      	mov	r1, r4
    _tSawSquareLFO* c = *cy = (_tSawSquareLFO*) mpool_alloc(sizeof(_tSawSquareLFO), m);
 801c02e:	6030      	str	r0, [r6, #0]
 801c030:	4604      	mov	r4, r0
    c->mempool = m;
 801c032:	f840 7b0c 	str.w	r7, [r0], #12
    tSquareLFO_initToPool(&c->square,mp);
 801c036:	f7ff ff15 	bl	801be64 <tSquareLFO_initToPool>
    _tMempool* m = *mp;
 801c03a:	69ad      	ldr	r5, [r5, #24]
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801c03c:	201c      	movs	r0, #28
 801c03e:	4629      	mov	r1, r5
 801c040:	f7fb faf6 	bl	8017630 <mpool_alloc>
    c->phase    =  0;
 801c044:	2200      	movs	r2, #0
    _tIntPhasor* c = *cy = (_tIntPhasor*) mpool_alloc(sizeof(_tIntPhasor), m);
 801c046:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801c048:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801c04a:	686b      	ldr	r3, [r5, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801c04c:	ed9f 7a04 	vldr	s14, [pc, #16]	; 801c060 <tSawSquareLFO_init+0x48>
    c->phase    =  0;
 801c050:	6042      	str	r2, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801c052:	edd3 7a01 	vldr	s15, [r3, #4]
 801c056:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c05a:	edc0 7a06 	vstr	s15, [r0, #24]
}
 801c05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c060:	4f800000 	.word	0x4f800000

0801c064 <tSawSquareLFO_tick>:
    tSquareLFO_free(&c->square);
    mpool_free((char*)c, c->mempool);
}
    
float   tSawSquareLFO_tick        (tSawSquareLFO* const cy)
{
 801c064:	b410      	push	{r4}
    _tSawSquareLFO* c = *cy;
 801c066:	6802      	ldr	r2, [r0, #0]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801c068:	eebe 6a00 	vmov.f32	s12, #224	; 0xbf000000 -0.5
 801c06c:	eddf 5a1d 	vldr	s11, [pc, #116]	; 801c0e4 <tSawSquareLFO_tick+0x80>
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801c070:	eeb6 5a00 	vmov.f32	s10, #96	; 0x3f000000  0.5
    _tIntPhasor* c = *cy;
 801c074:	6891      	ldr	r1, [r2, #8]
    float b = tSquareLFO_tick(&c->square);
    return  (1 - c->shape) * a + c->shape * b; 
 801c076:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    c->phase = (c->phase + c->inc);
 801c07a:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801c07e:	4403      	add	r3, r0
 801c080:	604b      	str	r3, [r1, #4]
    return c->phase * INV_TWO_TO_32; 
 801c082:	ee07 3a90 	vmov	s15, r3
    _tSquareLFO* c = *cy;
 801c086:	68d1      	ldr	r1, [r2, #12]
    return c->phase * INV_TWO_TO_32; 
 801c088:	eef8 7a67 	vcvt.f32.u32	s15, s15
    _tIntPhasor* c = *cy;
 801c08c:	6888      	ldr	r0, [r1, #8]
    c->phase = (c->phase + c->inc);
 801c08e:	6843      	ldr	r3, [r0, #4]
    float a = (tIntPhasor_tick(&c->saw) - 0.5f ) * 2.0f;
 801c090:	eea7 6aa5 	vfma.f32	s12, s15, s11
    c->phase = (c->phase + c->inc);
 801c094:	6884      	ldr	r4, [r0, #8]
 801c096:	4423      	add	r3, r4
 801c098:	6043      	str	r3, [r0, #4]
    return c->phase * INV_TWO_TO_32; 
 801c09a:	ee07 3a90 	vmov	s15, r3
    _tIntPhasor* c = *cy;
 801c09e:	68c8      	ldr	r0, [r1, #12]
    return c->phase * INV_TWO_TO_32; 
 801c0a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
    c->phase = (c->phase + c->inc);
 801c0a4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801c0a8:	4423      	add	r3, r4
    return c->phase * INV_TWO_TO_32; 
 801c0aa:	ee06 3a90 	vmov	s13, r3
    c->phase = (c->phase + c->inc);
 801c0ae:	6043      	str	r3, [r0, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801c0b0:	ed92 0a01 	vldr	s0, [r2, #4]
    return c->phase * INV_TWO_TO_32; 
 801c0b4:	eef8 4a66 	vcvt.f32.u32	s9, s13
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801c0b8:	edd1 6a01 	vldr	s13, [r1, #4]
    return  (1 - c->shape) * a + c->shape * b; 
 801c0bc:	ee37 7a40 	vsub.f32	s14, s14, s0
}
 801c0c0:	f85d 4b04 	ldr.w	r4, [sp], #4
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801c0c4:	ee76 6ac5 	vsub.f32	s13, s13, s10
 801c0c8:	ee77 7ae4 	vsub.f32	s15, s15, s9
    return  (1 - c->shape) * a + c->shape * b; 
 801c0cc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c0d0:	ee37 7a07 	vadd.f32	s14, s14, s14
    float tmp = ((a - b)) + c->pulsewidth - 0.5f;
 801c0d4:	eee7 6aa5 	vfma.f32	s13, s15, s11
    return  (1 - c->shape) * a + c->shape * b; 
 801c0d8:	ee20 0a26 	vmul.f32	s0, s0, s13
}
 801c0dc:	eea6 0a07 	vfma.f32	s0, s12, s14
 801c0e0:	4770      	bx	lr
 801c0e2:	bf00      	nop
 801c0e4:	2f80000d 	.word	0x2f80000d

0801c0e8 <tSawSquareLFO_setFreq>:
void    tSawSquareLFO_setFreq     (tSawSquareLFO* const cy, float freq)
{
    _tSawSquareLFO* c = *cy;
 801c0e8:	6802      	ldr	r2, [r0, #0]
    _tSquareLFO* c = *cy;
 801c0ea:	68d1      	ldr	r1, [r2, #12]
    _tIntPhasor* c = *cy;
 801c0ec:	688b      	ldr	r3, [r1, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c0ee:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801c0f2:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c0f6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c0fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c0fe:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801c102:	68cb      	ldr	r3, [r1, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c104:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801c108:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c10c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c110:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c114:	edc3 7a02 	vstr	s15, [r3, #8]
    _tIntPhasor* c = *cy;
 801c118:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c11a:	edd3 7a06 	vldr	s15, [r3, #24]
    c->freq  = freq;
 801c11e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c122:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c126:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 801c12a:	ed83 0a02 	vstr	s0, [r3, #8]
    tSquareLFO_setFreq(&c->square, freq);
    tIntPhasor_setFreq(&c->saw, freq);
}
 801c12e:	4770      	bx	lr

0801c130 <tSawSquareLFO_setPhase>:
    int i = phase;
 801c130:	eebd 7ac0 	vcvt.s32.f32	s14, s0
    c->phase = phase * TWO_TO_32;
 801c134:	eddf 6a15 	vldr	s13, [pc, #84]	; 801c18c <tSawSquareLFO_setPhase+0x5c>
    tSquareLFO_setSampleRate(&c->square, sr);
    tIntPhasor_setSampleRate(&c->saw, sr);
}
void    tSawSquareLFO_setPhase (tSawSquareLFO* const cy, float phase)
{
    _tSawSquareLFO* c = *cy;
 801c138:	6801      	ldr	r1, [r0, #0]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801c13a:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801c190 <tSawSquareLFO_setPhase+0x60>
    phase -= i;
 801c13e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    _tSquareLFO *c = *cy;
 801c142:	68ca      	ldr	r2, [r1, #12]
    _tIntPhasor* c = *cy;
 801c144:	6890      	ldr	r0, [r2, #8]
    phase -= i;
 801c146:	ee30 0a47 	vsub.f32	s0, s0, s14
    c->phase = phase * TWO_TO_32;
 801c14a:	ee20 0a26 	vmul.f32	s0, s0, s13
 801c14e:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 801c152:	edc0 7a01 	vstr	s15, [r0, #4]
 801c156:	ee17 3a90 	vmov	r3, s15
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801c15a:	6890      	ldr	r0, [r2, #8]
 801c15c:	edd2 7a01 	vldr	s15, [r2, #4]
 801c160:	ed90 7a01 	vldr	s14, [r0, #4]
    _tIntPhasor* c = *cy;
 801c164:	68d2      	ldr	r2, [r2, #12]
    tIntPhasor_setPhase(&c->invPhasor, c->pulsewidth + (c->phasor->phase * INV_TWO_TO_32));
 801c166:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 801c16a:	eee7 7a06 	vfma.f32	s15, s14, s12
    int i = phase;
 801c16e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
    phase -= i;
 801c172:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801c176:	ee77 7ac7 	vsub.f32	s15, s15, s14
    c->phase = phase * TWO_TO_32;
 801c17a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c17e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c182:	edc2 7a01 	vstr	s15, [r2, #4]
    _tIntPhasor* c = *cy;
 801c186:	688a      	ldr	r2, [r1, #8]
    c->phase = phase * TWO_TO_32;
 801c188:	6053      	str	r3, [r2, #4]
    tSquareLFO_setPhase(&c->square, phase);
    tIntPhasor_setPhase(&c->saw, phase);
}
 801c18a:	4770      	bx	lr
 801c18c:	4f800000 	.word	0x4f800000
 801c190:	2f80000d 	.word	0x2f80000d

0801c194 <tSawSquareLFO_setShape>:


void    tSawSquareLFO_setShape (tSawSquareLFO* const cy, float shape)
{
    _tSawSquareLFO* c = *cy;
 801c194:	6803      	ldr	r3, [r0, #0]
    c->shape = shape; 
 801c196:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801c19a:	4770      	bx	lr

0801c19c <tTriLFO_init>:



///tri
void    tTriLFO_init(tTriLFO* const cy, LEAF* const leaf)
{
 801c19c:	b538      	push	{r3, r4, r5, lr}
    tTriLFO_initToPool(cy, &leaf->mempool);
}

void    tTriLFO_initToPool   (tTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801c19e:	698d      	ldr	r5, [r1, #24]
{
 801c1a0:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801c1a2:	2018      	movs	r0, #24
 801c1a4:	4629      	mov	r1, r5
 801c1a6:	f7fb fa43 	bl	8017630 <mpool_alloc>
    c->mempool = m;
    LEAF* leaf = c->mempool->leaf;
    
    c->inc      =  0;
 801c1aa:	2300      	movs	r3, #0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801c1ac:	6020      	str	r0, [r4, #0]
    c->mempool = m;
 801c1ae:	6005      	str	r5, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801c1b0:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
    c->invSampleRate = leaf->invSampleRate;
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801c1b2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 801c1e8 <tTriLFO_init+0x4c>

void     tTriLFO_setFreq(tTriLFO* const cy, float freq)
{
    _tTriLFO* c = *cy;
    
    c->freq  = freq;
 801c1b6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 801c1ec <tTriLFO_init+0x50>
    c->phase    =  0;
 801c1ba:	e9c0 3301 	strd	r3, r3, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801c1be:	edd2 7a01 	vldr	s15, [r2, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801c1c2:	ee27 7a87 	vmul.f32	s14, s15, s14
    c->invSampleRate = leaf->invSampleRate;
 801c1c6:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801c1ca:	ed80 7a05 	vstr	s14, [r0, #20]
    _tTriLFO* c = *cy;
 801c1ce:	6823      	ldr	r3, [r4, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c1d0:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801c1d4:	edc3 6a03 	vstr	s13, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c1d8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801c1dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c1e0:	edc3 7a02 	vstr	s15, [r3, #8]
}
 801c1e4:	bd38      	pop	{r3, r4, r5, pc}
 801c1e6:	bf00      	nop
 801c1e8:	4f800000 	.word	0x4f800000
 801c1ec:	435c0000 	.word	0x435c0000

0801c1f0 <tTriLFO_tick>:
    _tTriLFO* c = *cy;
 801c1f0:	6803      	ldr	r3, [r0, #0]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801c1f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801c1f6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 801c220 <tTriLFO_tick+0x30>
    c->phase += c->inc;
 801c1fa:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
 801c1fe:	440a      	add	r2, r1
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801c200:	f102 4180 	add.w	r1, r2, #1073741824	; 0x40000000
    c->phase += c->inc;
 801c204:	605a      	str	r2, [r3, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801c206:	eb01 73e1 	add.w	r3, r1, r1, asr #31
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801c20a:	ea83 73e1 	eor.w	r3, r3, r1, asr #31
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801c20e:	ee07 3a90 	vmov	s15, r3
 801c212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c216:	eea7 0a87 	vfma.f32	s0, s15, s14
}
 801c21a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801c21e:	4770      	bx	lr
 801c220:	2ffffff6 	.word	0x2ffffff6

0801c224 <tTriLFO_setFreq>:
    _tTriLFO* c = *cy;
 801c224:	6803      	ldr	r3, [r0, #0]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c226:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801c22a:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c22e:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c232:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c236:	ed83 0a02 	vstr	s0, [r3, #8]
}
 801c23a:	4770      	bx	lr

0801c23c <tTriLFO_setPhase>:

void    tTriLFO_setPhase(tTriLFO* const cy, float phase)
{
    _tTriLFO* c = *cy;
    int i = phase;
 801c23c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    _tTriLFO* c = *cy;
 801c240:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801c242:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c246:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801c24a:	eebe 0ac0 	vcvt.s32.f32	s0, s0, #32
 801c24e:	ed83 0a01 	vstr	s0, [r3, #4]
}
 801c252:	4770      	bx	lr

0801c254 <tSineTriLFO_init>:
    tTriLFO_setFreq(cy, c->freq);
}
///sinetri

void    tSineTriLFO_init        (tSineTriLFO* const cy, LEAF* const leaf)
{
 801c254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c256:	ed2d 8b02 	vpush	{d8}
    tSineTriLFO_initToPool(cy, &leaf->mempool);
}

void    tSineTriLFO_initToPool  (tSineTriLFO* const cy, tMempool* const mp)
{
    _tMempool* m = *mp;
 801c25a:	698f      	ldr	r7, [r1, #24]
{
 801c25c:	4606      	mov	r6, r0
 801c25e:	460d      	mov	r5, r1
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801c260:	2010      	movs	r0, #16
 801c262:	4639      	mov	r1, r7
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801c264:	ed9f 8a1e 	vldr	s16, [pc, #120]	; 801c2e0 <tSineTriLFO_init+0x8c>
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801c268:	f7fb f9e2 	bl	8017630 <mpool_alloc>
 801c26c:	4604      	mov	r4, r0
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801c26e:	2018      	movs	r0, #24
    _tSineTriLFO* c = *cy = (_tSineTriLFO*) mpool_alloc(sizeof(_tSineTriLFO), m);
 801c270:	6034      	str	r4, [r6, #0]
    c->mempool = m;
 801c272:	6027      	str	r7, [r4, #0]
    _tMempool* m = *mp;
 801c274:	69ae      	ldr	r6, [r5, #24]
    _tTriLFO* c = *cy = (_tTriLFO*) mpool_alloc(sizeof(_tTriLFO), m);
 801c276:	4631      	mov	r1, r6
 801c278:	f7fb f9da 	bl	8017630 <mpool_alloc>
 801c27c:	60a0      	str	r0, [r4, #8]
    c->mempool = m;
 801c27e:	6006      	str	r6, [r0, #0]
    LEAF* leaf = c->mempool->leaf;
 801c280:	6873      	ldr	r3, [r6, #4]
    c->inc      =  0;
 801c282:	2600      	movs	r6, #0
    c->freq  = freq;
 801c284:	ed9f 7a17 	vldr	s14, [pc, #92]	; 801c2e4 <tSineTriLFO_init+0x90>
    c->phase    =  0;
 801c288:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRate = leaf->invSampleRate;
 801c28c:	edd3 7a01 	vldr	s15, [r3, #4]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801c290:	ee67 6a88 	vmul.f32	s13, s15, s16
    c->invSampleRate = leaf->invSampleRate;
 801c294:	edc0 7a04 	vstr	s15, [r0, #16]
    c->invSampleRateTimesTwoTo32 = (c->invSampleRate * TWO_TO_32);
 801c298:	edc0 6a05 	vstr	s13, [r0, #20]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801c29c:	2018      	movs	r0, #24
    _tTriLFO* c = *cy;
 801c29e:	68a3      	ldr	r3, [r4, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c2a0:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801c2a4:	ed83 7a03 	vstr	s14, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c2a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 801c2ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c2b0:	edc3 7a02 	vstr	s15, [r3, #8]
    _tMempool* m = *mp;
 801c2b4:	69ad      	ldr	r5, [r5, #24]
    _tCycle* c = *cy = (_tCycle*) mpool_alloc(sizeof(_tCycle), m);
 801c2b6:	4629      	mov	r1, r5
 801c2b8:	f7fb f9ba 	bl	8017630 <mpool_alloc>
 801c2bc:	60e0      	str	r0, [r4, #12]
    c->mempool = m;
 801c2be:	6005      	str	r5, [r0, #0]
    c->mask = SINE_TABLE_SIZE - 1;
 801c2c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
    LEAF* leaf = c->mempool->leaf;
 801c2c4:	686a      	ldr	r2, [r5, #4]
    c->phase    =  0;
 801c2c6:	e9c0 6601 	strd	r6, r6, [r0, #4]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801c2ca:	edd2 7a01 	vldr	s15, [r2, #4]
    c->mask = SINE_TABLE_SIZE - 1;
 801c2ce:	6143      	str	r3, [r0, #20]
    c->invSampleRateTimesTwoTo32 = (leaf->invSampleRate * TWO_TO_32);
 801c2d0:	ee67 7a88 	vmul.f32	s15, s15, s16
 801c2d4:	edc0 7a04 	vstr	s15, [r0, #16]
}
 801c2d8:	ecbd 8b02 	vpop	{d8}
 801c2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2de:	bf00      	nop
 801c2e0:	4f800000 	.word	0x4f800000
 801c2e4:	435c0000 	.word	0x435c0000

0801c2e8 <tSineTriLFO_tick>:
    tTriLFO_free(&c->tri);
    mpool_free((char*)c, c->mempool);
}
    
float   tSineTriLFO_tick        (tSineTriLFO* const cy)
{
 801c2e8:	b470      	push	{r4, r5, r6}
    _tSineTriLFO* c = *cy;
 801c2ea:	6804      	ldr	r4, [r0, #0]
    float a = tCycle_tick(&c->sine);
    float b = tTriLFO_tick(&c->tri);
    return  (1.0f - c->shape) * a + c->shape * b;
 801c2ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
    samp0 = __leaf_table_sinewave[idx];
 801c2f0:	4a20      	ldr	r2, [pc, #128]	; (801c374 <tSineTriLFO_tick+0x8c>)
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801c2f2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
    _tCycle* c = *cy;
 801c2f6:	68e1      	ldr	r1, [r4, #12]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801c2f8:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801c378 <tSineTriLFO_tick+0x90>
    idx = (idx + 1) & c->mask;
 801c2fc:	694e      	ldr	r6, [r1, #20]
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801c2fe:	eddf 4a1f 	vldr	s9, [pc, #124]	; 801c37c <tSineTriLFO_tick+0x94>
    c->phase += c->inc;
 801c302:	e9d1 3001 	ldrd	r3, r0, [r1, #4]
 801c306:	4403      	add	r3, r0
 801c308:	604b      	str	r3, [r1, #4]
    idx = c->phase >> 21; //11 bit table 
 801c30a:	0d58      	lsrs	r0, r3, #21
    _tTriLFO* c = *cy;
 801c30c:	68a5      	ldr	r5, [r4, #8]
    tempFrac = (c->phase & 2097151); //(2^21 - 1) all the lower bits i.e. the remainder of a division by 2^21  (2097151 is the 21 bits after the 11 bits that represent the main index) 
 801c30e:	f3c3 0314 	ubfx	r3, r3, #0, #21
 801c312:	ee07 3a90 	vmov	s15, r3
    c->phase += c->inc;
 801c316:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801c31a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    c->phase += c->inc;
 801c31e:	440b      	add	r3, r1
    idx = (idx + 1) & c->mask;
 801c320:	1c41      	adds	r1, r0, #1
    samp0 = __leaf_table_sinewave[idx];
 801c322:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    c->phase += c->inc;
 801c326:	606b      	str	r3, [r5, #4]
    idx = (idx + 1) & c->mask;
 801c328:	4031      	ands	r1, r6
    int32_t shiftedPhase = c->phase + 1073741824; // offset by 1/4" wave by adding 2^30 to get things in phase with the other LFO oscillators
 801c32a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801c32e:	ee67 7a87 	vmul.f32	s15, s15, s14
    samp1 = __leaf_table_sinewave[idx];
 801c332:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    return  (1.0f - c->shape) * a + c->shape * b;
 801c336:	ed94 7a01 	vldr	s14, [r4, #4]
    shiftedPhase = shiftedPhase + mask; // add 1 if negative, zero if positive, to balance
 801c33a:	eb03 72e3 	add.w	r2, r3, r3, asr #31
    samp0 = __leaf_table_sinewave[idx];
 801c33e:	edd0 6a00 	vldr	s13, [r0]
    return  (1.0f - c->shape) * a + c->shape * b;
 801c342:	ee37 6a07 	vadd.f32	s12, s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801c346:	ed91 5a00 	vldr	s10, [r1]
    shiftedPhase = shiftedPhase ^ mask; //invert the value to get absolute value of integer
 801c34a:	ea82 73e3 	eor.w	r3, r2, r3, asr #31
    return  (1.0f - c->shape) * a + c->shape * b;
 801c34e:	ee75 5ac7 	vsub.f32	s11, s11, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801c352:	ee35 5a66 	vsub.f32	s10, s10, s13
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801c356:	ee07 3a10 	vmov	s14, r3
 801c35a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    return (samp0 + (samp1 - samp0) * ((float)tempFrac * 0.000000476837386f)); // 1/2097151 
 801c35e:	eee7 6a85 	vfma.f32	s13, s15, s10
    float output = (((float)shiftedPhase * INV_TWO_TO_31) - 0.5f) * 2.0f; //scale it to -1.0f to 1.0f float
 801c362:	eea7 0a24 	vfma.f32	s0, s14, s9
}
 801c366:	bc70      	pop	{r4, r5, r6}
    return  (1.0f - c->shape) * a + c->shape * b;
 801c368:	ee26 0a00 	vmul.f32	s0, s12, s0
}
 801c36c:	eea5 0aa6 	vfma.f32	s0, s11, s13
 801c370:	4770      	bx	lr
 801c372:	bf00      	nop
 801c374:	08027574 	.word	0x08027574
 801c378:	35000004 	.word	0x35000004
 801c37c:	2ffffff6 	.word	0x2ffffff6

0801c380 <tSineTriLFO_setFreq>:
void    tSineTriLFO_setFreq     (tSineTriLFO* const cy, float freq)
{
    _tSineTriLFO* c = *cy;
 801c380:	6802      	ldr	r2, [r0, #0]
    _tTriLFO* c = *cy;
 801c382:	6893      	ldr	r3, [r2, #8]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c384:	edd3 7a05 	vldr	s15, [r3, #20]
    c->freq  = freq;
 801c388:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c38c:	ee60 7a27 	vmul.f32	s15, s0, s15
 801c390:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c394:	edc3 7a02 	vstr	s15, [r3, #8]
    _tCycle* c = *cy;
 801c398:	68d3      	ldr	r3, [r2, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c39a:	edd3 7a04 	vldr	s15, [r3, #16]
    c->freq  = freq;
 801c39e:	ed83 0a03 	vstr	s0, [r3, #12]
    c->inc = freq * c->invSampleRateTimesTwoTo32;
 801c3a2:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c3a6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801c3aa:	ed83 0a02 	vstr	s0, [r3, #8]
    tTriLFO_setFreq(&c->tri, freq);
    tCycle_setFreq(&c->sine, freq);
}
 801c3ae:	4770      	bx	lr

0801c3b0 <tSineTriLFO_setPhase>:
    int i = phase;
 801c3b0:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32_INT;
 801c3b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 801c3dc <tSineTriLFO_setPhase+0x2c>
    tTriLFO_setSampleRate(&c->tri, sr);
    tCycle_setSampleRate(&c->sine, sr);
}
void    tSineTriLFO_setPhase (tSineTriLFO* const cy, float phase)
{
    _tSineTriLFO* c = *cy;
 801c3b8:	6803      	ldr	r3, [r0, #0]
    phase -= i;
 801c3ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    _tTriLFO* c = *cy;
 801c3be:	689a      	ldr	r2, [r3, #8]
    phase -= i;
 801c3c0:	ee30 0a67 	vsub.f32	s0, s0, s15
    c->phase = phase * TWO_TO_32_INT;
 801c3c4:	ee20 0a07 	vmul.f32	s0, s0, s14
 801c3c8:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    c->phase = phase * TWO_TO_32;
 801c3cc:	eebc 0ac0 	vcvt.u32.f32	s0, s0
    c->phase = phase * TWO_TO_32_INT;
 801c3d0:	edc2 7a01 	vstr	s15, [r2, #4]
    _tCycle* c = *cy;
 801c3d4:	68db      	ldr	r3, [r3, #12]
    c->phase = phase * TWO_TO_32;
 801c3d6:	ed83 0a01 	vstr	s0, [r3, #4]
    tTriLFO_setPhase(&c->tri, phase);
    tCycle_setPhase(&c->sine, phase);
}
 801c3da:	4770      	bx	lr
 801c3dc:	4f800000 	.word	0x4f800000

0801c3e0 <tSineTriLFO_setShape>:

 void    tSineTriLFO_setShape (tSineTriLFO* const cy, float shape)
 {
    _tSineTriLFO* c = *cy;
 801c3e0:	6803      	ldr	r3, [r0, #0]
    c->shape = shape;
 801c3e2:	ed83 0a01 	vstr	s0, [r3, #4]

 }
 801c3e6:	4770      	bx	lr

0801c3e8 <tSimpleLivingString3_initToPool>:
}

void    tSimpleLivingString3_initToPool  (tSimpleLivingString3* const pl, int oversampling, float freq, float dampFreq,
                                         float decay, float targetLev, float levSmoothFactor,
                                         float levStrength, int levMode, tMempool* const mp)
{
 801c3e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3ec:	ed2d 8b08 	vpush	{d8-d11}
    _tMempool* m = *mp;
 801c3f0:	f8d3 9000 	ldr.w	r9, [r3]
{
 801c3f4:	b083      	sub	sp, #12
 801c3f6:	460e      	mov	r6, r1
 801c3f8:	4680      	mov	r8, r0
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801c3fa:	4649      	mov	r1, r9
 801c3fc:	2064      	movs	r0, #100	; 0x64
{
 801c3fe:	461d      	mov	r5, r3
 801c400:	eeb0 8a40 	vmov.f32	s16, s0
 801c404:	eeb0 9a41 	vmov.f32	s18, s2
 801c408:	4617      	mov	r7, r2
 801c40a:	eef0 9a61 	vmov.f32	s19, s3
 801c40e:	eeb0 aa42 	vmov.f32	s20, s4
 801c412:	eef0 aa62 	vmov.f32	s21, s5
 801c416:	eef0 8a60 	vmov.f32	s17, s1
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801c41a:	f7fb f909 	bl	8017630 <mpool_alloc>
 801c41e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;
    p->oversampling = oversampling;
    p->sampleRate = leaf->sampleRate * oversampling;
 801c422:	ee07 6a90 	vmov	s15, r6
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801c426:	f8c8 0000 	str.w	r0, [r8]
    p->curr=0.0f;
    p->maxLength = 2400 * oversampling;
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c42a:	eef6 ba00 	vmov.f32	s23, #96	; 0x3f000000  0.5
    p->mempool = m;
 801c42e:	f8c0 9000 	str.w	r9, [r0]
    p->sampleRate = leaf->sampleRate * oversampling;
 801c432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c436:	ee87 ba08 	vdiv.f32	s22, s14, s16
    LEAF* leaf = p->mempool->leaf;
 801c43a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    p->oversampling = oversampling;
 801c43e:	65c6      	str	r6, [r0, #92]	; 0x5c
    p->maxLength = 2400 * oversampling;
 801c440:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->sampleRate = leaf->sampleRate * oversampling;
 801c444:	ed93 0a00 	vldr	s0, [r3]
    _tSimpleLivingString3* p = *pl = (_tSimpleLivingString3*) mpool_alloc(sizeof(_tSimpleLivingString3), m);
 801c448:	4604      	mov	r4, r0
    p->curr=0.0f;
 801c44a:	2300      	movs	r3, #0
    p->maxLength = 2400 * oversampling;
 801c44c:	fb01 f606 	mul.w	r6, r1, r6
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c450:	f100 0a58 	add.w	sl, r0, #88	; 0x58
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801c454:	f100 0b34 	add.w	fp, r0, #52	; 0x34
    p->sampleRate = leaf->sampleRate * oversampling;
 801c458:	ee67 7a80 	vmul.f32	s15, s15, s0
    p->curr=0.0f;
 801c45c:	6243      	str	r3, [r0, #36]	; 0x24
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c45e:	eddf 0a82 	vldr	s1, [pc, #520]	; 801c668 <tSimpleLivingString3_initToPool+0x280>
 801c462:	4629      	mov	r1, r5
    p->maxLength = 2400 * oversampling;
 801c464:	6306      	str	r6, [r0, #48]	; 0x30
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801c466:	f104 0938 	add.w	r9, r4, #56	; 0x38
    p->sampleRate = leaf->sampleRate * oversampling;
 801c46a:	edc0 7a18 	vstr	s15, [r0, #96]	; 0x60
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq/2.0f, 0.01f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801c46e:	4650      	mov	r0, sl
 801c470:	ee2b 0a2b 	vmul.f32	s0, s22, s23
 801c474:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c478:	f7f9 f8f6 	bl	8015668 <tExpSmooth_initToPool>
    tLinearDelay_initToPool(&p->delayLineU,p->waveLengthInSamples, p->maxLength, mp);
 801c47c:	ed94 0a02 	vldr	s0, [r4, #8]
 801c480:	462a      	mov	r2, r5
 801c482:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c484:	4658      	mov	r0, fp
 801c486:	f7f8 f963 	bl	8014750 <tLinearDelay_initToPool>
    tLinearDelay_initToPool(&p->delayLineL,p->waveLengthInSamples, p->maxLength, mp);
 801c48a:	ed94 0a02 	vldr	s0, [r4, #8]
 801c48e:	462a      	mov	r2, r5
 801c490:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801c492:	4648      	mov	r0, r9
 801c494:	f7f8 f95c 	bl	8014750 <tLinearDelay_initToPool>
    mpool_free((char*)p, p->mempool);
}

void     tSimpleLivingString3_setFreq(tSimpleLivingString3* const pl, float freq)
{
    _tSimpleLivingString3* p = *pl;
 801c498:	f8d8 6000 	ldr.w	r6, [r8]
    p->freq = freq;
    float waveLength = (p->sampleRate/freq);
 801c49c:	edd6 7a18 	vldr	s15, [r6, #96]	; 0x60
    p->freq = freq;
 801c4a0:	ed86 8a01 	vstr	s16, [r6, #4]
    float waveLength = (p->sampleRate/freq);
 801c4a4:	ee2b 0a27 	vmul.f32	s0, s22, s15
    if (waveLength<4.8) waveLength=4.8f;
 801c4a8:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 801c658 <tSimpleLivingString3_initToPool+0x270>
 801c4ac:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801c4b0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801c4b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c4b8:	f100 80c7 	bmi.w	801c64a <tSimpleLivingString3_initToPool+0x262>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c4bc:	6b33      	ldr	r3, [r6, #48]	; 0x30
 801c4be:	005b      	lsls	r3, r3, #1
 801c4c0:	ee07 3a90 	vmov	s15, r3
 801c4c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c4c8:	fec7 7ac0 	vminnm.f32	s15, s15, s0
 801c4cc:	ee27 0aab 	vmul.f32	s0, s15, s23
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c4d0:	f106 0058 	add.w	r0, r6, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c4d4:	ed86 0a02 	vstr	s0, [r6, #8]
    //float decay = p->userDecay;

    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c4d8:	eef7 ba00 	vmov.f32	s23, #112	; 0x3f800000  1.0
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c4dc:	f7f9 f8f0 	bl	80156c0 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c4e0:	ed96 7a05 	vldr	s14, [r6, #20]
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
 801c4e4:	f104 0840 	add.w	r8, r4, #64	; 0x40
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c4e8:	eddf 7a60 	vldr	s15, [pc, #384]	; 801c66c <tSimpleLivingString3_initToPool+0x284>
 801c4ec:	ee37 7a2b 	vadd.f32	s14, s14, s23
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c4f0:	ed96 6a01 	vldr	s12, [r6, #4]
 801c4f4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c4f8:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c4fc:	ed9f 0b58 	vldr	d0, [pc, #352]	; 801c660 <tSimpleLivingString3_initToPool+0x278>
 801c500:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c504:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c508:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c50c:	f001 f920 	bl	801d750 <exp>
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801c510:	4658      	mov	r0, fp
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c512:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c516:	ed86 0a04 	vstr	s0, [r6, #16]
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801c51a:	f104 0650 	add.w	r6, r4, #80	; 0x50
    tLinearDelay_setDelay(&p->delayLineU, p->waveLengthInSamples);
 801c51e:	ed94 0a02 	vldr	s0, [r4, #8]
 801c522:	f7f8 f9db 	bl	80148dc <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, p->waveLengthInSamples);
 801c526:	ed94 0a02 	vldr	s0, [r4, #8]
 801c52a:	4648      	mov	r0, r9
 801c52c:	f7f8 f9d6 	bl	80148dc <tLinearDelay_setDelay>
    tLinearDelay_clear(&p->delayLineU);
 801c530:	4658      	mov	r0, fp
 801c532:	f7f8 f985 	bl	8014840 <tLinearDelay_clear>
    tLinearDelay_clear(&p->delayLineL);
 801c536:	4648      	mov	r0, r9
 801c538:	f7f8 f982 	bl	8014840 <tLinearDelay_clear>
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 801c53c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 801c540:	4629      	mov	r1, r5
 801c542:	eeb0 0a68 	vmov.f32	s0, s17
 801c546:	4618      	mov	r0, r3
    p->dampFreq = dampFreq;
 801c548:	edc4 8a03 	vstr	s17, [r4, #12]
    tOnePole_initToPool(&p->bridgeFilter, dampFreq, mp);
 801c54c:	9301      	str	r3, [sp, #4]
 801c54e:	f7f9 f90d 	bl	801576c <tOnePole_initToPool>
    tOnePole_setSampleRate(&p->bridgeFilter, p->sampleRate);
 801c552:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801c556:	9801      	ldr	r0, [sp, #4]
 801c558:	f7f9 f96e 	bl	8015838 <tOnePole_setSampleRate>
    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 801c55c:	eeb0 0a68 	vmov.f32	s0, s17
 801c560:	9801      	ldr	r0, [sp, #4]
 801c562:	f7f9 f937 	bl	80157d4 <tOnePole_setFreq>
    tBiQuad_initToPool(&p->bridgeFilter2, mp);
 801c566:	4629      	mov	r1, r5
 801c568:	4640      	mov	r0, r8
 801c56a:	f8cd 8004 	str.w	r8, [sp, #4]
 801c56e:	f7f9 f9bd 	bl	80158ec <tBiQuad_initToPool>
    tBiQuad_setSampleRate(&p->bridgeFilter2, p->sampleRate);
 801c572:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801c576:	9801      	ldr	r0, [sp, #4]
 801c578:	f7f9 f9d0 	bl	801591c <tBiQuad_setSampleRate>
    tHighpass_initToPool(&p->DCblocker,13, mp);
 801c57c:	4629      	mov	r1, r5
 801c57e:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801c582:	4630      	mov	r0, r6
 801c584:	9601      	str	r6, [sp, #4]
 801c586:	f7f9 fb1b 	bl	8015bc0 <tHighpass_initToPool>
    tHighpass_setSampleRate(&p->DCblocker,p->sampleRate);
 801c58a:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
 801c58e:	9801      	ldr	r0, [sp, #4]
 801c590:	f7f9 fb52 	bl	8015c38 <tHighpass_setSampleRate>
    tHighpass_setFreq(&p->DCblocker,13);
 801c594:	eeb2 0a0a 	vmov.f32	s0, #42	; 0x41500000  13.0
 801c598:	9801      	ldr	r0, [sp, #4]
 801c59a:	f7f9 fb31 	bl	8015c00 <tHighpass_setFreq>
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c59e:	eeb0 0a69 	vmov.f32	s0, s19
 801c5a2:	eeb0 1a6a 	vmov.f32	s2, s21
 801c5a6:	462a      	mov	r2, r5
 801c5a8:	eef0 0a4a 	vmov.f32	s1, s20
 801c5ac:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801c5b0:	4639      	mov	r1, r7
    p->userDecay = decay;
 801c5b2:	ed84 9a05 	vstr	s18, [r4, #20]
    tFeedbackLeveler_initToPool(&p->fbLev, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801c5b6:	f7f8 fcd1 	bl	8014f5c <tFeedbackLeveler_initToPool>
    float waveLength = (p->sampleRate/freq);
 801c5ba:	ed94 0a18 	vldr	s0, [r4, #96]	; 0x60
    p->levMode=levMode;
 801c5be:	6227      	str	r7, [r4, #32]
    float waveLength = (p->sampleRate/freq);
 801c5c0:	ee2b ba00 	vmul.f32	s22, s22, s0
    p->changeGainCompensator = 1.0f;
 801c5c4:	edc4 ba07 	vstr	s23, [r4, #28]
    p->freq = freq;
 801c5c8:	ed84 8a01 	vstr	s16, [r4, #4]
    if (waveLength<4.8) waveLength=4.8f;
 801c5cc:	ed9f 7b22 	vldr	d7, [pc, #136]	; 801c658 <tSimpleLivingString3_initToPool+0x270>
 801c5d0:	eeb7 6acb 	vcvt.f64.f32	d6, s22
 801c5d4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801c5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c5dc:	d438      	bmi.n	801c650 <tSimpleLivingString3_initToPool+0x268>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c5de:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c5e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c5e4:	005b      	lsls	r3, r3, #1
 801c5e6:	ee00 3a10 	vmov	s0, r3
 801c5ea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c5ee:	fe80 0a4b 	vminnm.f32	s0, s0, s22
 801c5f2:	ee20 0a27 	vmul.f32	s0, s0, s15
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c5f6:	4650      	mov	r0, sl
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c5f8:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c5fc:	f7f9 f860 	bl	80156c0 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c600:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c604:	ed94 7a05 	vldr	s14, [r4, #20]
 801c608:	eddf 7a18 	vldr	s15, [pc, #96]	; 801c66c <tSimpleLivingString3_initToPool+0x284>
 801c60c:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c610:	ed94 6a01 	vldr	s12, [r4, #4]
 801c614:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c618:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c61c:	ed9f 0b10 	vldr	d0, [pc, #64]	; 801c660 <tSimpleLivingString3_initToPool+0x278>
 801c620:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c624:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c628:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c62c:	f001 f890 	bl	801d750 <exp>
    p->pickupPoint = 0.9f;
 801c630:	4a0f      	ldr	r2, [pc, #60]	; (801c670 <tSimpleLivingString3_initToPool+0x288>)
    p->prevDelayLength = p->waveLengthInSamples;
 801c632:	68a3      	ldr	r3, [r4, #8]
    p->pickupPoint = 0.9f;
 801c634:	64e2      	str	r2, [r4, #76]	; 0x4c
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c636:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
    p->prevDelayLength = p->waveLengthInSamples;
 801c63a:	61a3      	str	r3, [r4, #24]
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c63c:	ed84 0a04 	vstr	s0, [r4, #16]
}
 801c640:	b003      	add	sp, #12
 801c642:	ecbd 8b08 	vpop	{d8-d11}
 801c646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c64a:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 801c674 <tSimpleLivingString3_initToPool+0x28c>
 801c64e:	e73f      	b.n	801c4d0 <tSimpleLivingString3_initToPool+0xe8>
 801c650:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801c674 <tSimpleLivingString3_initToPool+0x28c>
 801c654:	e7cf      	b.n	801c5f6 <tSimpleLivingString3_initToPool+0x20e>
 801c656:	bf00      	nop
 801c658:	33333333 	.word	0x33333333
 801c65c:	40133333 	.word	0x40133333
 801c660:	0a3d70a4 	.word	0x0a3d70a4
 801c664:	c01ba3d7 	.word	0xc01ba3d7
 801c668:	3c23d70a 	.word	0x3c23d70a
 801c66c:	3d8d78c4 	.word	0x3d8d78c4
 801c670:	3f666666 	.word	0x3f666666
 801c674:	4019999a 	.word	0x4019999a

0801c678 <tSimpleLivingString3_setFreq>:
{
 801c678:	b510      	push	{r4, lr}
    _tSimpleLivingString3* p = *pl;
 801c67a:	6804      	ldr	r4, [r0, #0]
    float waveLength = (p->sampleRate/freq);
 801c67c:	ed94 7a18 	vldr	s14, [r4, #96]	; 0x60
    p->freq = freq;
 801c680:	ed84 0a01 	vstr	s0, [r4, #4]
    float waveLength = (p->sampleRate/freq);
 801c684:	eec7 7a00 	vdiv.f32	s15, s14, s0
    if (waveLength<4.8) waveLength=4.8f;
 801c688:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 801c700 <tSimpleLivingString3_setFreq+0x88>
 801c68c:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
 801c690:	eeb4 5bc6 	vcmpe.f64	d5, d6
 801c694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801c698:	d42e      	bmi.n	801c6f8 <tSimpleLivingString3_setFreq+0x80>
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c69a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c69c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    else if (waveLength>p->maxLength*2) waveLength=p->maxLength*2;
 801c6a0:	005b      	lsls	r3, r3, #1
 801c6a2:	ee00 3a10 	vmov	s0, r3
 801c6a6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c6aa:	fe80 0a67 	vminnm.f32	s0, s0, s15
 801c6ae:	ee20 0a07 	vmul.f32	s0, s0, s14
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c6b2:	f104 0058 	add.w	r0, r4, #88	; 0x58
    p->waveLengthInSamples =  waveLength * 0.5f;
 801c6b6:	ed84 0a02 	vstr	s0, [r4, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801c6ba:	f7f9 f801 	bl	80156c0 <tExpSmooth_setDest>
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c6be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c6c2:	ed94 7a05 	vldr	s14, [r4, #20]
 801c6c6:	eddf 7a12 	vldr	s15, [pc, #72]	; 801c710 <tSimpleLivingString3_setFreq+0x98>
 801c6ca:	ee37 7a26 	vadd.f32	s14, s14, s13
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c6ce:	ed94 6a01 	vldr	s12, [r4, #4]
 801c6d2:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
    float temp = ((p->userDecay * 0.01f) + 0.01f) * 6.9078f;
 801c6d6:	ee27 7a27 	vmul.f32	s14, s14, s15
    p->decay = exp(-6.91 * ((1.0 / p->freq)  / temp));
 801c6da:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 801c708 <tSimpleLivingString3_setFreq+0x90>
 801c6de:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c6e2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c6e6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 801c6ea:	f001 f831 	bl	801d750 <exp>
 801c6ee:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c6f2:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);

    //p->decay=powf(0.001f,1.0f/(p->freq*p->userDecay));
}
 801c6f6:	bd10      	pop	{r4, pc}
 801c6f8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801c714 <tSimpleLivingString3_setFreq+0x9c>
 801c6fc:	e7d9      	b.n	801c6b2 <tSimpleLivingString3_setFreq+0x3a>
 801c6fe:	bf00      	nop
 801c700:	33333333 	.word	0x33333333
 801c704:	40133333 	.word	0x40133333
 801c708:	0a3d70a4 	.word	0x0a3d70a4
 801c70c:	c01ba3d7 	.word	0xc01ba3d7
 801c710:	3d8d78c4 	.word	0x3d8d78c4
 801c714:	4019999a 	.word	0x4019999a

0801c718 <tSimpleLivingString3_setDampFreq>:
    _tSimpleLivingString3* p = *pl;
    //p->temp1 = (1.0f - brightness) * 0.25f * p->decay;
    //p->temp2 = (1.0f + brightness) * 0.5f * p->decay;
    //tBiQuad_setCoefficients(&p->bridgeFilter2, p->temp1 , p->temp2, p->temp1 , 0.0f, 0.0f);

    tOnePole_setFreq(&p->bridgeFilter, dampFreq);
 801c718:	6800      	ldr	r0, [r0, #0]
 801c71a:	303c      	adds	r0, #60	; 0x3c
 801c71c:	f7f9 b85a 	b.w	80157d4 <tOnePole_setFreq>

0801c720 <tSimpleLivingString3_setDecay>:
void     tSimpleLivingString3_setDecay(tSimpleLivingString3* const pl, float decay)
{
    _tSimpleLivingString3* p = *pl;
    p->userDecay = decay;

    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801c720:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801c724:	eddf 6a10 	vldr	s13, [pc, #64]	; 801c768 <tSimpleLivingString3_setDecay+0x48>
{
 801c728:	b510      	push	{r4, lr}
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801c72a:	ee30 7a27 	vadd.f32	s14, s0, s15
    _tSimpleLivingString3* p = *pl;
 801c72e:	6804      	ldr	r4, [r0, #0]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801c730:	ed94 6a01 	vldr	s12, [r4, #4]
    float temp = ((decay * 0.01f) + 0.01f) * 6.9078f;
 801c734:	ee27 7a26 	vmul.f32	s14, s14, s13
    p->userDecay = decay;
 801c738:	ed84 0a05 	vstr	s0, [r4, #20]
    p->decay = exp(-6.9078 * ((1.0 / p->freq)  / temp));
 801c73c:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
 801c740:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801c744:	ed9f 5b06 	vldr	d5, [pc, #24]	; 801c760 <tSimpleLivingString3_setDecay+0x40>
 801c748:	ee27 7b06 	vmul.f64	d7, d7, d6
 801c74c:	ee85 0b07 	vdiv.f64	d0, d5, d7
 801c750:	f000 fffe 	bl	801d750 <exp>
 801c754:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801c758:	ed84 0a04 	vstr	s0, [r4, #16]
    //tBiQuad_setCoefficients(&p->bridgeFilter2,p->temp1,p->temp2, p->temp1, 0.0f, 0.0f);
    //p->decay=powf(0.001f,1.0f/(p->freq*decay));
}
 801c75c:	bd10      	pop	{r4, pc}
 801c75e:	bf00      	nop
 801c760:	52bd3c36 	.word	0x52bd3c36
 801c764:	c01ba196 	.word	0xc01ba196
 801c768:	3d8d78c4 	.word	0x3d8d78c4

0801c76c <tSimpleLivingString3_setTargetLev>:

void     tSimpleLivingString3_setTargetLev(tSimpleLivingString3* const pl, float targetLev)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setTargetLevel(&p->fbLev, targetLev);
 801c76c:	6800      	ldr	r0, [r0, #0]
 801c76e:	3054      	adds	r0, #84	; 0x54
 801c770:	f7f8 bc4c 	b.w	801500c <tFeedbackLeveler_setTargetLevel>

0801c774 <tSimpleLivingString3_setLevSmoothFactor>:
}

void     tSimpleLivingString3_setLevSmoothFactor(tSimpleLivingString3* const pl, float levSmoothFactor)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setFactor(&p->fbLev, levSmoothFactor);
 801c774:	6800      	ldr	r0, [r0, #0]
 801c776:	3054      	adds	r0, #84	; 0x54
 801c778:	f7f8 bc1c 	b.w	8014fb4 <tFeedbackLeveler_setFactor>

0801c77c <tSimpleLivingString3_setLevStrength>:
}

void     tSimpleLivingString3_setLevStrength(tSimpleLivingString3* const pl, float levStrength)
{
    _tSimpleLivingString3* p = *pl;
    tFeedbackLeveler_setStrength(&p->fbLev, levStrength);
 801c77c:	6800      	ldr	r0, [r0, #0]
 801c77e:	3054      	adds	r0, #84	; 0x54
 801c780:	f7f8 bc14 	b.w	8014fac <tFeedbackLeveler_setStrength>

0801c784 <tSimpleLivingString3_setLevMode>:
}

void     tSimpleLivingString3_setLevMode(tSimpleLivingString3* const pl, int levMode)
{
 801c784:	b538      	push	{r3, r4, r5, lr}
    _tSimpleLivingString3* p = *pl;
 801c786:	6805      	ldr	r5, [r0, #0]
{
 801c788:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLev, levMode);
 801c78a:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801c78e:	f7f8 fc15 	bl	8014fbc <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801c792:	622c      	str	r4, [r5, #32]
}
 801c794:	bd38      	pop	{r3, r4, r5, pc}
 801c796:	bf00      	nop

0801c798 <tSimpleLivingString3_pluck>:

void   tSimpleLivingString3_pluck(tSimpleLivingString3* const pl, float input, float position)
{
 801c798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    _tSimpleLivingString3* p = *pl;
 801c79c:	6801      	ldr	r1, [r0, #0]
{
 801c79e:	b082      	sub	sp, #8
    int length = p->waveLengthInSamples;
 801c7a0:	edd1 7a02 	vldr	s15, [r1, #8]
 801c7a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801c7a8:	ee17 0a90 	vmov	r0, s15
    int pluckPoint = (int)(length * position);
 801c7ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7b0:	ee67 0aa0 	vmul.f32	s1, s15, s1
 801c7b4:	eefd 7ae0 	vcvt.s32.f32	s15, s1
 801c7b8:	ee17 3a90 	vmov	r3, s15
    if (pluckPoint < 1)
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	f340 8081 	ble.w	801c8c4 <tSimpleLivingString3_pluck+0x12c>
    {
    	pluckPoint = 1;
    }
    else if (pluckPoint > (length-1))
 801c7c2:	4298      	cmp	r0, r3
 801c7c4:	dc0f      	bgt.n	801c7e6 <tSimpleLivingString3_pluck+0x4e>
    {
    	pluckPoint = length-1;
 801c7c6:	1e47      	subs	r7, r0, #1
    }
    int remainder = length-pluckPoint;
    for (int i = 0; i < length; i++)
 801c7c8:	2800      	cmp	r0, #0
    	pluckPoint = length-1;
 801c7ca:	463b      	mov	r3, r7
    for (int i = 0; i < length; i++)
 801c7cc:	dd77      	ble.n	801c8be <tSimpleLivingString3_pluck+0x126>
    {
        float val = 0.0f;
        if (i <= pluckPoint)
        {
            val = input * ((float)i/(float)pluckPoint);
 801c7ce:	ee07 7a90 	vmov	s15, r7
 801c7d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801c7d6:	2f00      	cmp	r7, #0
 801c7d8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c7dc:	ee86 7a86 	vdiv.f32	s14, s13, s12
 801c7e0:	da0f      	bge.n	801c802 <tSimpleLivingString3_pluck+0x6a>
 801c7e2:	2300      	movs	r3, #0
 801c7e4:	e02b      	b.n	801c83e <tSimpleLivingString3_pluck+0xa6>
    int remainder = length-pluckPoint;
 801c7e6:	1ac2      	subs	r2, r0, r3
            val = input * ((float)i/(float)pluckPoint);
 801c7e8:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 801c7ec:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801c7f0:	1e47      	subs	r7, r0, #1
        }
        else
        {
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c7f2:	ee07 2a90 	vmov	s15, r2
 801c7f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c7fa:	ee85 7a86 	vdiv.f32	s14, s11, s12
 801c7fe:	eec5 6aa7 	vdiv.f32	s13, s11, s15
 801c802:	429f      	cmp	r7, r3
 801c804:	bfa8      	it	ge
 801c806:	461f      	movge	r7, r3
    for (int i = 0; i < length; i++)
 801c808:	2300      	movs	r3, #0
 801c80a:	ee20 7a07 	vmul.f32	s14, s0, s14
                                 
        }
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c80e:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * ((float)i/(float)pluckPoint);
 801c810:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c814:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * ((float)i/(float)pluckPoint);
 801c818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801c81c:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c81e:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801c820:	3301      	adds	r3, #1
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c822:	fbb2 f6f5 	udiv	r6, r2, r5
 801c826:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * ((float)i/(float)pluckPoint);
 801c82a:	ee67 7a87 	vmul.f32	s15, s15, s14
    for (int i = 0; i < length; i++)
 801c82e:	42bb      	cmp	r3, r7
        p->delayLineU->buff[bufWritePoint] = val;
 801c830:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c834:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 801c838:	dde9      	ble.n	801c80e <tSimpleLivingString3_pluck+0x76>
 801c83a:	4298      	cmp	r0, r3
 801c83c:	dd1d      	ble.n	801c87a <tSimpleLivingString3_pluck+0xe2>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c83e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 801c842:	ee07 3a90 	vmov	s15, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c846:	6b4c      	ldr	r4, [r1, #52]	; 0x34
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801c84c:	eef0 7a65 	vmov.f32	s15, s11
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c850:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c854:	ee36 7a47 	vsub.f32	s14, s12, s14
        p->delayLineU->buff[bufWritePoint] = val;
 801c858:	68a4      	ldr	r4, [r4, #8]
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c85a:	441a      	add	r2, r3
    for (int i = 0; i < length; i++)
 801c85c:	3301      	adds	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c85e:	eee6 7a87 	vfma.f32	s15, s13, s14
    for (int i = 0; i < length; i++)
 801c862:	4298      	cmp	r0, r3
        int bufWritePoint = (i+p->delayLineU->outPoint)%p->delayLineU->maxDelay;
 801c864:	fbb2 f6f5 	udiv	r6, r2, r5
 801c868:	fb05 2216 	mls	r2, r5, r6, r2
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c86c:	ee60 7a27 	vmul.f32	s15, s0, s15
        p->delayLineU->buff[bufWritePoint] = val;
 801c870:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801c874:	edc2 7a00 	vstr	s15, [r2]
    for (int i = 0; i < length; i++)
 801c878:	dce3      	bgt.n	801c842 <tSimpleLivingString3_pluck+0xaa>
            val = input * ((float)i/(float)pluckPoint);
 801c87a:	f04f 0c00 	mov.w	ip, #0
    }
    for (int i = 0; i < length; i++)
    {
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801c87e:	eba0 020c 	sub.w	r2, r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c882:	e9d1 540d 	ldrd	r5, r4, [r1, #52]	; 0x34
 801c886:	69a3      	ldr	r3, [r4, #24]
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801c888:	69ef      	ldr	r7, [r5, #28]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c88a:	9301      	str	r3, [sp, #4]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801c88c:	69ab      	ldr	r3, [r5, #24]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c88e:	69e6      	ldr	r6, [r4, #28]
        int currentBufReadPoint = ((length-i)+p->delayLineU->outPoint);
 801c890:	441a      	add	r2, r3
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c892:	9b01      	ldr	r3, [sp, #4]
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801c894:	68ad      	ldr	r5, [r5, #8]
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c896:	4463      	add	r3, ip
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801c898:	68a4      	ldr	r4, [r4, #8]
    for (int i = 0; i < length; i++)
 801c89a:	f10c 0c01 	add.w	ip, ip, #1
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801c89e:	fbb2 f8f7 	udiv	r8, r2, r7
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c8a2:	fbb3 fef6 	udiv	lr, r3, r6
        int currentBufReadPointMod = currentBufReadPoint % p->delayLineU->maxDelay;
 801c8a6:	fb07 2218 	mls	r2, r7, r8, r2
    for (int i = 0; i < length; i++)
 801c8aa:	4560      	cmp	r0, ip
        int currentBufWritePoint = (i+p->delayLineL->outPoint) % p->delayLineL->maxDelay;
 801c8ac:	fb06 331e 	mls	r3, r6, lr, r3
        p->delayLineL->buff[currentBufWritePoint] = p->delayLineU->buff[currentBufReadPointMod];
 801c8b0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 801c8b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c8b8:	6812      	ldr	r2, [r2, #0]
 801c8ba:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < length; i++)
 801c8bc:	d1df      	bne.n	801c87e <tSimpleLivingString3_pluck+0xe6>
    }
}
 801c8be:	b002      	add	sp, #8
 801c8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for (int i = 0; i < length; i++)
 801c8c4:	2800      	cmp	r0, #0
 801c8c6:	f100 37ff 	add.w	r7, r0, #4294967295	; 0xffffffff
 801c8ca:	ddf8      	ble.n	801c8be <tSimpleLivingString3_pluck+0x126>
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c8cc:	ee07 7a10 	vmov	s14, r7
 801c8d0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    	pluckPoint = 1;
 801c8d4:	2301      	movs	r3, #1
            val = input * (1.0f - (((float)i-(float)pluckPoint)/(float)remainder));
 801c8d6:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
 801c8da:	eeb0 7a67 	vmov.f32	s14, s15
 801c8de:	eec7 6a86 	vdiv.f32	s13, s15, s12
            val = input * ((float)i/(float)pluckPoint);
 801c8e2:	eeb0 6a67 	vmov.f32	s12, s15
 801c8e6:	e78c      	b.n	801c802 <tSimpleLivingString3_pluck+0x6a>

0801c8e8 <tSimpleLivingString3_tick>:

float   tSimpleLivingString3_tick(tSimpleLivingString3* const pl, float input)
{
 801c8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c8ec:	ed2d 8b02 	vpush	{d8}
    _tSimpleLivingString3* p = *pl;
 801c8f0:	6804      	ldr	r4, [r0, #0]
{
 801c8f2:	b083      	sub	sp, #12

    //p->changeGainCompensator = 1.0f;
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801c8f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
    //float changeInDelayTime = wl - p->prevDelayLength;
    //if (changeInDelayTime < 0.0f)
    {
    //	p->changeGainCompensator = sqrtf(1.0f - changeInDelayTime);
    }
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801c8f8:	f104 0634 	add.w	r6, r4, #52	; 0x34
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801c8fc:	f7f8 fee4 	bl	80156c8 <tExpSmooth_tick>
 801c900:	eeb0 8a40 	vmov.f32	s16, s0
    tLinearDelay_setDelay(&p->delayLineL, wl);
 801c904:	f104 0738 	add.w	r7, r4, #56	; 0x38
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801c908:	4630      	mov	r0, r6
    float wl = tExpSmooth_tick(&p->wlSmooth);
 801c90a:	ed8d 0a01 	vstr	s0, [sp, #4]
    tLinearDelay_setDelay(&p->delayLineU, wl);
 801c90e:	f7f7 ffe5 	bl	80148dc <tLinearDelay_setDelay>
    tLinearDelay_setDelay(&p->delayLineL, wl);
 801c912:	eeb0 0a48 	vmov.f32	s0, s16
 801c916:	4638      	mov	r0, r7
 801c918:	f7f7 ffe0 	bl	80148dc <tLinearDelay_setDelay>
    
    for (int i = 0; i < p->oversampling; i++)
 801c91c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c91e:	2b00      	cmp	r3, #0
 801c920:	dd3c      	ble.n	801c99c <tSimpleLivingString3_tick+0xb4>
    {
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c922:	f104 093c 	add.w	r9, r4, #60	; 0x3c
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c926:	f104 0854 	add.w	r8, r4, #84	; 0x54
    for (int i = 0; i < p->oversampling; i++)
 801c92a:	2500      	movs	r5, #0
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c92c:	4630      	mov	r0, r6
    for (int i = 0; i < p->oversampling; i++)
 801c92e:	3501      	adds	r5, #1
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c930:	f7f7 ffa8 	bl	8014884 <tLinearDelay_tickOut>
 801c934:	4648      	mov	r0, r9
 801c936:	f7f8 ff6b 	bl	8015810 <tOnePole_tick>
 801c93a:	edd4 7a04 	vldr	s15, [r4, #16]
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c93e:	4640      	mov	r0, r8
		p->Uout = tOnePole_tick(&p->bridgeFilter,tLinearDelay_tickOut(&p->delayLineU))* p->decay;
 801c940:	ee20 0a27 	vmul.f32	s0, s0, s15
 801c944:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c948:	f7f8 fb3c 	bl	8014fc4 <tFeedbackLeveler_tick>
 801c94c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c950:	eef0 0a40 	vmov.f32	s1, s0
 801c954:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c958:	f7fa fc7a 	bl	8017250 <LEAF_clip>
    	//p->Uout = tLinearDelay_tickOut(&p->delayLineU) * p->decay;
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801c95c:	4638      	mov	r0, r7
		p->Uout = LEAF_clip(-1.0f, tFeedbackLeveler_tick(&p->fbLev, p->Uout), 1.0f);
 801c95e:	ed84 0a0a 	vstr	s0, [r4, #40]	; 0x28
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801c962:	f7f7 ff8f 	bl	8014884 <tLinearDelay_tickOut>
 801c966:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801c96a:	eef0 0a40 	vmov.f32	s1, s0
 801c96e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801c972:	f7fa fc6d 	bl	8017250 <LEAF_clip>
 801c976:	eef0 7a40 	vmov.f32	s15, s0

		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
 801c97a:	4630      	mov	r0, r6
 801c97c:	eeb1 0a40 	vneg.f32	s0, s0
		p->Lout = LEAF_clip(-1.0f, tLinearDelay_tickOut(&p->delayLineL), 1.0f);
 801c980:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
		tLinearDelay_tickIn(&p->delayLineU, -1.0f * p->Lout);
 801c984:	f7f7 ff6a 	bl	801485c <tLinearDelay_tickIn>
		tLinearDelay_tickIn(&p->delayLineL, -1.0f * p->Uout);
 801c988:	ed94 0a0a 	vldr	s0, [r4, #40]	; 0x28
 801c98c:	4638      	mov	r0, r7
 801c98e:	eeb1 0a40 	vneg.f32	s0, s0
 801c992:	f7f7 ff63 	bl	801485c <tLinearDelay_tickIn>
    for (int i = 0; i < p->oversampling; i++)
 801c996:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 801c998:	42ab      	cmp	r3, r5
 801c99a:	dcc7      	bgt.n	801c92c <tSimpleLivingString3_tick+0x44>
    }
    
    //calculate pickup point
    float point = wl * p->pickupPoint;
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801c99c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
    float point = wl * p->pickupPoint;
 801c9a0:	edd4 6a13 	vldr	s13, [r4, #76]	; 0x4c
    int32_t whichPoint = ((int32_t)roundf(point));
    float floatPart = point - whichPoint;

    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801c9a4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);

    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801c9a6:	eef6 4a00 	vmov.f32	s9, #96	; 0x3f000000  0.5
    float point = wl * p->pickupPoint;
 801c9aa:	ee66 5a88 	vmul.f32	s11, s13, s16
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c9ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801c9b0:	ee77 6ae6 	vsub.f32	s13, s15, s13
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c9b4:	689d      	ldr	r5, [r3, #8]
    int32_t whichPoint = ((int32_t)roundf(point));
 801c9b6:	feb8 6a65 	vrinta.f32	s12, s11
 801c9ba:	eebd 6ac6 	vcvt.s32.f32	s12, s12
    float reversePoint = wl * (1.0f - p->pickupPoint);
 801c9be:	ee66 6a88 	vmul.f32	s13, s13, s16
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c9c2:	ee37 5ae5 	vsub.f32	s10, s15, s11
    whichPoint = (int32_t)roundf(reversePoint);
 801c9c6:	feb8 7a66 	vrinta.f32	s14, s13
 801c9ca:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c9ce:	ee37 0ae6 	vsub.f32	s0, s15, s13
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801c9d2:	e9d3 2706 	ldrd	r2, r7, [r3, #24]
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801c9d6:	ee16 3a10 	vmov	r3, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c9da:	ee17 0a10 	vmov	r0, s14
    float floatPart = point - whichPoint;
 801c9de:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
    int32_t outpointplus =((int32_t)p->delayLineU->outPoint + whichPoint);
 801c9e2:	441a      	add	r2, r3
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c9e4:	698b      	ldr	r3, [r1, #24]
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801c9e6:	fb92 f6f7 	sdiv	r6, r2, r7
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c9ea:	4418      	add	r0, r3
    int32_t outpointmod = outpointplus % (int32_t)p->delayLineU->maxDelay;
 801c9ec:	fb07 2216 	mls	r2, r7, r6, r2
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801c9f0:	ee75 7a06 	vadd.f32	s15, s10, s12
    outpointplus =(((int32_t)p->delayLineL->outPoint) + whichPoint);
 801c9f4:	4603      	mov	r3, r0
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801c9f6:	69c8      	ldr	r0, [r1, #28]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801c9f8:	6889      	ldr	r1, [r1, #8]
    float floatPart = point - whichPoint;
 801c9fa:	ee35 6ac6 	vsub.f32	s12, s11, s12
    floatPart = reversePoint - whichPoint;
 801c9fe:	eef8 5ac7 	vcvt.f32.s32	s11, s14
    outpointmod = outpointplus % (int32_t)p->delayLineL->maxDelay;
 801ca02:	fb93 f6f0 	sdiv	r6, r3, r0
 801ca06:	fb00 3316 	mls	r3, r0, r6, r3
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801ca0a:	1c56      	adds	r6, r2, #1
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801ca0c:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    floatPart = reversePoint - whichPoint;
 801ca10:	ee76 6ae5 	vsub.f32	s13, s13, s11
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801ca14:	ee30 0a25 	vadd.f32	s0, s0, s11
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801ca18:	ed92 7a00 	vldr	s14, [r2]
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801ca1c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801ca20:	3301      	adds	r3, #1
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801ca22:	edd2 5a00 	vldr	s11, [r2]
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801ca26:	fb96 f2f7 	sdiv	r2, r6, r7
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801ca2a:	ee20 0a25 	vmul.f32	s0, s0, s11
    int32_t outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineU->maxDelay;
 801ca2e:	fb07 6612 	mls	r6, r7, r2, r6
    //p->curr = p->Uout;

    p->prevDelayLength = p->waveLengthInSamples;
 801ca32:	68a2      	ldr	r2, [r4, #8]
    float sampleBitOne = (p->delayLineU->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineU->buff[outpointmod2] * floatPart);
 801ca34:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 801ca38:	eea7 0a27 	vfma.f32	s0, s14, s15
 801ca3c:	edd5 7a00 	vldr	s15, [r5]
    outpointmod2 = (outpointmod + 1) % (int32_t)p->delayLineL->maxDelay;
 801ca40:	fb93 f5f0 	sdiv	r5, r3, r0
 801ca44:	eea7 0a86 	vfma.f32	s0, s15, s12
 801ca48:	fb00 3315 	mls	r3, r0, r5, r3
    float sampleBitTwo = (p->delayLineL->buff[outpointmod] * (1.0f - floatPart)) + (p->delayLineL->buff[outpointmod2] * floatPart);
 801ca4c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801ca50:	edd3 7a00 	vldr	s15, [r3]
    p->prevDelayLength = p->waveLengthInSamples;
 801ca54:	61a2      	str	r2, [r4, #24]
    p->curr = 0.5f * (sampleBitOne + sampleBitTwo);
 801ca56:	eea7 0aa6 	vfma.f32	s0, s15, s13
 801ca5a:	ee20 0a24 	vmul.f32	s0, s0, s9
 801ca5e:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    //float stringInput=tHighpass_tick(&p->DCblocker, tFeedbackLeveler_tick(&p->fbLev, (p->levMode==0?p->decay*stringOut:stringOut)+input));
    //tLinearDelay_tickIn(&p->delayLine, stringInput);
    //tLinearDelay_setDelay(&p->delayLine, tExpSmooth_tick(&p->wlSmooth));
    //p->curr = d1 + d2;
    return p->curr;
}
 801ca62:	b003      	add	sp, #12
 801ca64:	ecbd 8b02 	vpop	{d8}
 801ca68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0801ca6c <tSimpleLivingString3_setPickupPoint>:


void   tSimpleLivingString3_setPickupPoint(tSimpleLivingString3* const pl, float pickupPoint)
{
    _tSimpleLivingString3* p = *pl;
 801ca6c:	6803      	ldr	r3, [r0, #0]
    p->pickupPoint = pickupPoint;
 801ca6e:	ed83 0a13 	vstr	s0, [r3, #76]	; 0x4c
}
 801ca72:	4770      	bx	lr

0801ca74 <tLivingString2_initToPool>:
}

void    tLivingString2_initToPool    (tLivingString2* const pl, float freq, float pickPos, float prepPos, float pickupPos, float prepIndex,
                                     float brightness, float decay, float targetLev, float levSmoothFactor,
                                     float levStrength, int levMode, tMempool* const mp)
{
 801ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca78:	ed2d 8b0c 	vpush	{d8-d13}
    _tMempool* m = *mp;
 801ca7c:	f8d2 8000 	ldr.w	r8, [r2]
{
 801ca80:	4606      	mov	r6, r0
 801ca82:	b083      	sub	sp, #12
 801ca84:	460f      	mov	r7, r1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 801ca86:	2070      	movs	r0, #112	; 0x70
 801ca88:	4641      	mov	r1, r8
{
 801ca8a:	eef0 ca61 	vmov.f32	s25, s3
 801ca8e:	4615      	mov	r5, r2
 801ca90:	eeb0 8a42 	vmov.f32	s16, s4
    p->mempool = m;
    LEAF* leaf = p->mempool->leaf;

    p->sampleRate = leaf->sampleRate;
    p->curr=0.0f;
 801ca94:	ed9f da99 	vldr	s26, [pc, #612]	; 801ccfc <tLivingString2_initToPool+0x288>
{
 801ca98:	eef0 9a62 	vmov.f32	s19, s5
 801ca9c:	eef0 aa63 	vmov.f32	s21, s7
 801caa0:	eef0 ba44 	vmov.f32	s23, s8
 801caa4:	eeb0 ca64 	vmov.f32	s24, s9
 801caa8:	eeb0 ba43 	vmov.f32	s22, s6
 801caac:	eef0 8a41 	vmov.f32	s17, s2
 801cab0:	eeb0 aa40 	vmov.f32	s20, s0
 801cab4:	eeb0 9a60 	vmov.f32	s18, s1
    _tLivingString2* p = *pl = (_tLivingString2*) mpool_alloc(sizeof(_tLivingString2), m);
 801cab8:	f7fa fdba 	bl	8017630 <mpool_alloc>
 801cabc:	6030      	str	r0, [r6, #0]
 801cabe:	4604      	mov	r4, r0
    p->mempool = m;
 801cac0:	f8c0 8000 	str.w	r8, [r0]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801cac4:	4629      	mov	r1, r5
    p->sampleRate = leaf->sampleRate;
 801cac6:	f8d8 3004 	ldr.w	r3, [r8, #4]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801caca:	305c      	adds	r0, #92	; 0x5c
 801cacc:	eddf 0a8c 	vldr	s1, [pc, #560]	; 801cd00 <tLivingString2_initToPool+0x28c>
    
    if (freq<20.f) freq=20.f;
    else if (freq>10000.f) freq=10000.f;
    freq = freq*2;
    p->freq = freq;
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cad0:	eef7 da00 	vmov.f32	s27, #112	; 0x3f800000  1.0
    p->sampleRate = leaf->sampleRate;
 801cad4:	edd3 7a00 	vldr	s15, [r3]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801cad8:	f104 0b2c 	add.w	fp, r4, #44	; 0x2c
    p->curr=0.0f;
 801cadc:	ed00 da0d 	vstr	s26, [r0, #-52]	; 0xffffffcc
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 801cae0:	f104 0a30 	add.w	sl, r4, #48	; 0x30
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801cae4:	ee87 0a8a 	vdiv.f32	s0, s15, s20
    p->sampleRate = leaf->sampleRate;
 801cae8:	edc0 7a04 	vstr	s15, [r0, #16]
    tExpSmooth_initToPool(&p->wlSmooth, p->sampleRate/freq, 0.1f, mp); // smoother for string wavelength (not freq, to avoid expensive divisions)
 801caec:	f7f8 fdbc 	bl	8015668 <tExpSmooth_initToPool>
    _tLivingString2* p = *pl;
 801caf0:	eddf 7a84 	vldr	s15, [pc, #528]	; 801cd04 <tLivingString2_initToPool+0x290>
 801caf4:	6830      	ldr	r0, [r6, #0]
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 801caf6:	f104 0934 	add.w	r9, r4, #52	; 0x34
 801cafa:	feca 7a67 	vminnm.f32	s15, s20, s15
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 801cafe:	f104 0838 	add.w	r8, r4, #56	; 0x38
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801cb02:	305c      	adds	r0, #92	; 0x5c
 801cb04:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 801cb08:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
    freq = freq*2;
 801cb0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cb10:	ed90 7a04 	vldr	s14, [r0, #16]
 801cb14:	ee87 0a27 	vdiv.f32	s0, s14, s15
    p->freq = freq;
 801cb18:	ed40 7a16 	vstr	s15, [r0, #-88]	; 0xffffffa8
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cb1c:	ee30 0a6d 	vsub.f32	s0, s0, s27
 801cb20:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801cb24:	f7f8 fdcc 	bl	80156c0 <tExpSmooth_setDest>
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 801cb28:	eddf 0a77 	vldr	s1, [pc, #476]	; 801cd08 <tLivingString2_initToPool+0x294>
 801cb2c:	eeb0 0a49 	vmov.f32	s0, s18
 801cb30:	f104 0060 	add.w	r0, r4, #96	; 0x60
 801cb34:	4629      	mov	r1, r5
    p->freq = freq;
 801cb36:	ed84 aa01 	vstr	s20, [r4, #4]
    p->prepPos = prepPos;
 801cb3a:	edc4 8a04 	vstr	s17, [r4, #16]
    tExpSmooth_initToPool(&p->ppSmooth, pickPos, 0.01f, mp); // smoother for pick position
 801cb3e:	edcd 0a00 	vstr	s1, [sp]
 801cb42:	f7f8 fd91 	bl	8015668 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->prpSmooth, prepPos, 0.01f, mp); // smoother for prep position
 801cb46:	eeb0 0a68 	vmov.f32	s0, s17
 801cb4a:	4629      	mov	r1, r5
 801cb4c:	eddd 0a00 	vldr	s1, [sp]
 801cb50:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801cb54:	f7f8 fd88 	bl	8015668 <tExpSmooth_initToPool>
    tExpSmooth_initToPool(&p->puSmooth, pickupPos, 0.01f, mp); // smoother for pickup position
 801cb58:	eddd 0a00 	vldr	s1, [sp]
 801cb5c:	4629      	mov	r1, r5
 801cb5e:	eeb0 0a6c 	vmov.f32	s0, s25
 801cb62:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801cb66:	f7f8 fd7f 	bl	8015668 <tExpSmooth_initToPool>
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
}

void     tLivingString2_setPickPos(tLivingString2* const pl, float pickPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 801cb6a:	6830      	ldr	r0, [r6, #0]
    if (pickPos<0.f) pickPos=0.f;
 801cb6c:	fe89 0a6d 	vminnm.f32	s0, s18, s27
 801cb70:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (pickPos>1.f) pickPos=1.f;
    p->pickPos = pickPos;
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801cb74:	3060      	adds	r0, #96	; 0x60
    p->pickPos = pickPos;
 801cb76:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801cb7a:	f7f8 fda1 	bl	80156c0 <tExpSmooth_setDest>
}

void     tLivingString2_setPrepPos(tLivingString2* const pl, float prepPos)
{    // between 0 and 1
    _tLivingString2* p = *pl;
 801cb7e:	6830      	ldr	r0, [r6, #0]
    if (prepPos<0.f) prepPos=0.f;
 801cb80:	fe88 0aed 	vminnm.f32	s0, s17, s27
 801cb84:	fe80 0a0d 	vmaxnm.f32	s0, s0, s26
    else if (prepPos>1.f) prepPos=1.f;
    p->prepPos = prepPos;
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801cb88:	3064      	adds	r0, #100	; 0x64
    p->prepPos = prepPos;
 801cb8a:	ed00 0a15 	vstr	s0, [r0, #-84]	; 0xffffffac
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801cb8e:	f7f8 fd97 	bl	80156c0 <tExpSmooth_setDest>
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801cb92:	ed94 0a02 	vldr	s0, [r4, #8]
 801cb96:	462a      	mov	r2, r5
 801cb98:	4658      	mov	r0, fp
 801cb9a:	f44f 6116 	mov.w	r1, #2400	; 0x960
    p->prepIndex = prepIndex;
 801cb9e:	ed84 8a06 	vstr	s16, [r4, #24]
    p->pickupPos = pickupPos;
 801cba2:	edc4 ca05 	vstr	s25, [r4, #20]
    tHermiteDelay_initToPool(&p->delLF,p->waveLengthInSamples, 2400, mp);
 801cba6:	f7f7 fedb 	bl	8014960 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUF,p->waveLengthInSamples, 2400, mp);
 801cbaa:	ed94 0a02 	vldr	s0, [r4, #8]
 801cbae:	462a      	mov	r2, r5
 801cbb0:	4650      	mov	r0, sl
 801cbb2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801cbb6:	f7f7 fed3 	bl	8014960 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delUB,p->waveLengthInSamples, 2400, mp);
 801cbba:	ed94 0a02 	vldr	s0, [r4, #8]
 801cbbe:	462a      	mov	r2, r5
 801cbc0:	4648      	mov	r0, r9
 801cbc2:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801cbc6:	f7f7 fecb 	bl	8014960 <tHermiteDelay_initToPool>
    tHermiteDelay_initToPool(&p->delLB,p->waveLengthInSamples, 2400, mp);
 801cbca:	462a      	mov	r2, r5
 801cbcc:	ed94 0a02 	vldr	s0, [r4, #8]
 801cbd0:	f44f 6116 	mov.w	r1, #2400	; 0x960
 801cbd4:	4640      	mov	r0, r8
 801cbd6:	f7f7 fec3 	bl	8014960 <tHermiteDelay_initToPool>
    tHermiteDelay_clear(&p->delLF);
 801cbda:	4658      	mov	r0, fp
 801cbdc:	f7f7 ff3e 	bl	8014a5c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUF);
 801cbe0:	4650      	mov	r0, sl
 801cbe2:	f7f7 ff3b 	bl	8014a5c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delUB);
 801cbe6:	4648      	mov	r0, r9
 801cbe8:	f7f7 ff38 	bl	8014a5c <tHermiteDelay_clear>
    tHermiteDelay_clear(&p->delLB);
 801cbec:	4640      	mov	r0, r8
 801cbee:	f7f7 ff35 	bl	8014a5c <tHermiteDelay_clear>
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 801cbf2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801cbf6:	4629      	mov	r1, r5
    p->brightness = brightness;
 801cbf8:	edc4 9a09 	vstr	s19, [r4, #36]	; 0x24
    tTwoZero_initToPool(&p->bridgeFilter, mp);
 801cbfc:	f7f8 fe3e 	bl	801587c <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->nutFilter, mp);
 801cc00:	4629      	mov	r1, r5
 801cc02:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801cc06:	f7f8 fe39 	bl	801587c <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterU, mp);
 801cc0a:	4629      	mov	r1, r5
 801cc0c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801cc10:	f7f8 fe34 	bl	801587c <tTwoZero_initToPool>
    tTwoZero_initToPool(&p->prepFilterL, mp);
 801cc14:	4629      	mov	r1, r5
 801cc16:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801cc1a:	f7f8 fe2f 	bl	801587c <tTwoZero_initToPool>
}

void     tLivingString2_setBrightness(tLivingString2* const pl, float brightness)
{
    _tLivingString2* p = *pl;
    float h0=(1.0 + brightness) * 0.5f;
 801cc1e:	eeb7 5ae9 	vcvt.f64.f32	d5, s19
 801cc22:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    _tLivingString2* p = *pl;
 801cc26:	6836      	ldr	r6, [r6, #0]
    float h0=(1.0 + brightness) * 0.5f;
 801cc28:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 801cc2c:	eeb5 0b00 	vmov.f64	d0, #80	; 0x3e800000  0.250

    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801cc30:	f106 003c 	add.w	r0, r6, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 801cc34:	ee05 6b06 	vmla.f64	d6, d5, d6
    float h1=(1.0 - brightness) * 0.25f;
 801cc38:	ee37 7b45 	vsub.f64	d7, d7, d5
 801cc3c:	ee27 7b00 	vmul.f64	d7, d7, d0
    float h0=(1.0 + brightness) * 0.5f;
 801cc40:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 801cc44:	eeb7 1bc7 	vcvt.f32.f64	s2, d7
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801cc48:	edcd 0a00 	vstr	s1, [sp]
 801cc4c:	eeb0 0a41 	vmov.f32	s0, s2
 801cc50:	ed8d 1a01 	vstr	s2, [sp, #4]
 801cc54:	f7f8 fe42 	bl	80158dc <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 801cc58:	ed9d 1a01 	vldr	s2, [sp, #4]
 801cc5c:	eddd 0a00 	vldr	s1, [sp]
 801cc60:	f106 0040 	add.w	r0, r6, #64	; 0x40
 801cc64:	eeb0 0a41 	vmov.f32	s0, s2
 801cc68:	ed8d 1a00 	vstr	s2, [sp]
 801cc6c:	edcd 0a01 	vstr	s1, [sp, #4]
 801cc70:	f7f8 fe34 	bl	80158dc <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 801cc74:	ed9d 1a00 	vldr	s2, [sp]
 801cc78:	f106 0044 	add.w	r0, r6, #68	; 0x44
 801cc7c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cc80:	eeb0 0a41 	vmov.f32	s0, s2
 801cc84:	f7f8 fe2a 	bl	80158dc <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801cc88:	ed9d 1a00 	vldr	s2, [sp]
 801cc8c:	eddd 0a01 	vldr	s1, [sp, #4]
 801cc90:	f106 0048 	add.w	r0, r6, #72	; 0x48
 801cc94:	eeb0 0a41 	vmov.f32	s0, s2
 801cc98:	f7f8 fe20 	bl	80158dc <tTwoZero_setCoefficients>
    tHighpass_initToPool(&p->DCblockerU,8, mp);
 801cc9c:	4629      	mov	r1, r5
 801cc9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801cca2:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801cca6:	f7f8 ff8b 	bl	8015bc0 <tHighpass_initToPool>
    tHighpass_initToPool(&p->DCblockerL,8, mp);
 801ccaa:	4629      	mov	r1, r5
 801ccac:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801ccb0:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 801ccb4:	f7f8 ff84 	bl	8015bc0 <tHighpass_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801ccb8:	eeb0 1a4c 	vmov.f32	s2, s24
 801ccbc:	eef0 0a6b 	vmov.f32	s1, s23
 801ccc0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801ccc4:	eeb0 0a6a 	vmov.f32	s0, s21
 801ccc8:	462a      	mov	r2, r5
 801ccca:	4639      	mov	r1, r7
    p->decay=decay;
 801cccc:	ed84 ba07 	vstr	s22, [r4, #28]
    p->prepIndex = prepIndex;
 801ccd0:	ed84 8a06 	vstr	s16, [r4, #24]
    tFeedbackLeveler_initToPool(&p->fbLevU, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801ccd4:	f7f8 f942 	bl	8014f5c <tFeedbackLeveler_initToPool>
    tFeedbackLeveler_initToPool(&p->fbLevL, targetLev, levSmoothFactor, levStrength, levMode, mp);
 801ccd8:	eeb0 1a4c 	vmov.f32	s2, s24
 801ccdc:	eef0 0a6b 	vmov.f32	s1, s23
 801cce0:	462a      	mov	r2, r5
 801cce2:	eeb0 0a6a 	vmov.f32	s0, s21
 801cce6:	4639      	mov	r1, r7
 801cce8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801ccec:	f7f8 f936 	bl	8014f5c <tFeedbackLeveler_initToPool>
    p->levMode=levMode;
 801ccf0:	6227      	str	r7, [r4, #32]
}
 801ccf2:	b003      	add	sp, #12
 801ccf4:	ecbd 8b0c 	vpop	{d8-d13}
 801ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ccfc:	00000000 	.word	0x00000000
 801cd00:	3dcccccd 	.word	0x3dcccccd
 801cd04:	461c4000 	.word	0x461c4000
 801cd08:	3c23d70a 	.word	0x3c23d70a

0801cd0c <tLivingString2_setFreq>:
    _tLivingString2* p = *pl;
 801cd0c:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 801cd10:	eddf 6a0c 	vldr	s13, [pc, #48]	; 801cd44 <tLivingString2_setFreq+0x38>
 801cd14:	6803      	ldr	r3, [r0, #0]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cd16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd1a:	fe80 0a66 	vminnm.f32	s0, s0, s13
 801cd1e:	fec0 7a27 	vmaxnm.f32	s15, s0, s15
    freq = freq*2;
 801cd22:	ee77 7aa7 	vadd.f32	s15, s15, s15
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cd26:	edd3 6a1b 	vldr	s13, [r3, #108]	; 0x6c
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801cd2a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cd2e:	ee86 0aa7 	vdiv.f32	s0, s13, s15
    p->freq = freq;
 801cd32:	edc3 7a01 	vstr	s15, [r3, #4]
    p->waveLengthInSamples = (p->sampleRate/p->freq) - 1;
 801cd36:	ee30 0a47 	vsub.f32	s0, s0, s14
 801cd3a:	ed83 0a02 	vstr	s0, [r3, #8]
    tExpSmooth_setDest(&p->wlSmooth, p->waveLengthInSamples);
 801cd3e:	f7f8 bcbf 	b.w	80156c0 <tExpSmooth_setDest>
 801cd42:	bf00      	nop
 801cd44:	461c4000 	.word	0x461c4000

0801cd48 <tLivingString2_setPickPos>:
    _tLivingString2* p = *pl;
 801cd48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd4c:	6803      	ldr	r3, [r0, #0]
    if (pickPos<0.f) pickPos=0.f;
 801cd4e:	eddf 7a06 	vldr	s15, [pc, #24]	; 801cd68 <tLivingString2_setPickPos+0x20>
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801cd52:	f103 0060 	add.w	r0, r3, #96	; 0x60
 801cd56:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801cd5a:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickPos = pickPos;
 801cd5e:	ed83 0a03 	vstr	s0, [r3, #12]
    tExpSmooth_setDest(&p->ppSmooth, p->pickPos);
 801cd62:	f7f8 bcad 	b.w	80156c0 <tExpSmooth_setDest>
 801cd66:	bf00      	nop
 801cd68:	00000000 	.word	0x00000000

0801cd6c <tLivingString2_setPrepPos>:
    _tLivingString2* p = *pl;
 801cd6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd70:	6803      	ldr	r3, [r0, #0]
    if (prepPos<0.f) prepPos=0.f;
 801cd72:	eddf 7a06 	vldr	s15, [pc, #24]	; 801cd8c <tLivingString2_setPrepPos+0x20>
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801cd76:	f103 0064 	add.w	r0, r3, #100	; 0x64
 801cd7a:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801cd7e:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->prepPos = prepPos;
 801cd82:	ed83 0a04 	vstr	s0, [r3, #16]
    tExpSmooth_setDest(&p->prpSmooth, p->prepPos);
 801cd86:	f7f8 bc9b 	b.w	80156c0 <tExpSmooth_setDest>
 801cd8a:	bf00      	nop
 801cd8c:	00000000 	.word	0x00000000

0801cd90 <tLivingString2_setPickupPos>:
    _tLivingString2* p = *pl;
 801cd90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801cd94:	6803      	ldr	r3, [r0, #0]
    if (pickupPos<0.f) pickupPos=0.f;
 801cd96:	eddf 7a06 	vldr	s15, [pc, #24]	; 801cdb0 <tLivingString2_setPickupPos+0x20>
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 801cd9a:	f103 0068 	add.w	r0, r3, #104	; 0x68
 801cd9e:	fe80 0a47 	vminnm.f32	s0, s0, s14
 801cda2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
    p->pickupPos = pickupPos;
 801cda6:	ed83 0a05 	vstr	s0, [r3, #20]
    tExpSmooth_setDest(&p->puSmooth, p->pickupPos);
 801cdaa:	f7f8 bc89 	b.w	80156c0 <tExpSmooth_setDest>
 801cdae:	bf00      	nop
 801cdb0:	00000000 	.word	0x00000000

0801cdb4 <tLivingString2_setPrepIndex>:
    _tLivingString2* p = *pl;
 801cdb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    p->prepIndex = prepIndex;
 801cdb8:	eddf 7a04 	vldr	s15, [pc, #16]	; 801cdcc <tLivingString2_setPrepIndex+0x18>
    _tLivingString2* p = *pl;
 801cdbc:	6803      	ldr	r3, [r0, #0]
    if (prepIndex<0.f) prepIndex=0.f;
 801cdbe:	fe80 0a47 	vminnm.f32	s0, s0, s14
    p->prepIndex = prepIndex;
 801cdc2:	fe80 0a27 	vmaxnm.f32	s0, s0, s15
 801cdc6:	ed83 0a06 	vstr	s0, [r3, #24]
}
 801cdca:	4770      	bx	lr
 801cdcc:	00000000 	.word	0x00000000

0801cdd0 <tLivingString2_setBrightness>:
    float h0=(1.0 + brightness) * 0.5f;
 801cdd0:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 801cdd4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 801cdd8:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    float h1=(1.0 - brightness) * 0.25f;
 801cddc:	eeb5 1b00 	vmov.f64	d1, #80	; 0x3e800000  0.250
    float h0=(1.0 + brightness) * 0.5f;
 801cde0:	ee00 6b06 	vmla.f64	d6, d0, d6
    float h1=(1.0 - brightness) * 0.25f;
 801cde4:	ee37 7b40 	vsub.f64	d7, d7, d0
{
 801cde8:	b510      	push	{r4, lr}
    float h1=(1.0 - brightness) * 0.25f;
 801cdea:	ee27 1b01 	vmul.f64	d1, d7, d1
    _tLivingString2* p = *pl;
 801cdee:	6804      	ldr	r4, [r0, #0]
{
 801cdf0:	b082      	sub	sp, #8
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801cdf2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    float h0=(1.0 + brightness) * 0.5f;
 801cdf6:	eef7 0bc6 	vcvt.f32.f64	s1, d6
    float h1=(1.0 - brightness) * 0.25f;
 801cdfa:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
    tTwoZero_setCoefficients(&p->bridgeFilter, h1, h0, h1);
 801cdfe:	edcd 0a00 	vstr	s1, [sp]
 801ce02:	eeb0 0a41 	vmov.f32	s0, s2
 801ce06:	ed8d 1a01 	vstr	s2, [sp, #4]
 801ce0a:	f7f8 fd67 	bl	80158dc <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->nutFilter, h1, h0, h1);
 801ce0e:	ed9d 1a01 	vldr	s2, [sp, #4]
 801ce12:	eddd 0a00 	vldr	s1, [sp]
 801ce16:	f104 0040 	add.w	r0, r4, #64	; 0x40
 801ce1a:	eeb0 0a41 	vmov.f32	s0, s2
 801ce1e:	ed8d 1a00 	vstr	s2, [sp]
 801ce22:	edcd 0a01 	vstr	s1, [sp, #4]
 801ce26:	f7f8 fd59 	bl	80158dc <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterU, h1, h0, h1);
 801ce2a:	ed9d 1a00 	vldr	s2, [sp]
 801ce2e:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801ce32:	eddd 0a01 	vldr	s1, [sp, #4]
 801ce36:	eeb0 0a41 	vmov.f32	s0, s2
 801ce3a:	f7f8 fd4f 	bl	80158dc <tTwoZero_setCoefficients>
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801ce3e:	ed9d 1a00 	vldr	s2, [sp]
 801ce42:	eddd 0a01 	vldr	s1, [sp, #4]
 801ce46:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801ce4a:	eeb0 0a41 	vmov.f32	s0, s2
}
 801ce4e:	b002      	add	sp, #8
 801ce50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tTwoZero_setCoefficients(&p->prepFilterL, h1, h0, h1);
 801ce54:	f7f8 bd42 	b.w	80158dc <tTwoZero_setCoefficients>

0801ce58 <tLivingString2_setDecay>:

void     tLivingString2_setDecay(tLivingString2* const pl, float decay)
{
 801ce58:	b510      	push	{r4, lr}
    _tLivingString2* p = *pl;
 801ce5a:	6804      	ldr	r4, [r0, #0]
{
 801ce5c:	eef0 7a40 	vmov.f32	s15, s0
    p->decay=powf(0.001f,1.0f/(p->freq*decay));
 801ce60:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 801ce64:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801ce80 <tLivingString2_setDecay+0x28>
 801ce68:	ed94 7a01 	vldr	s14, [r4, #4]
 801ce6c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801ce70:	eec0 0aa7 	vdiv.f32	s1, s1, s15
 801ce74:	f000 ffa8 	bl	801ddc8 <powf>
 801ce78:	ed84 0a07 	vstr	s0, [r4, #28]
}
 801ce7c:	bd10      	pop	{r4, pc}
 801ce7e:	bf00      	nop
 801ce80:	3a83126f 	.word	0x3a83126f

0801ce84 <tLivingString2_setTargetLev>:

void     tLivingString2_setTargetLev(tLivingString2* const pl, float targetLev)
{
 801ce84:	b510      	push	{r4, lr}
 801ce86:	ed2d 8b02 	vpush	{d8}
 801ce8a:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801ce8e:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setTargetLevel(&p->fbLevU, targetLev);
 801ce90:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801ce94:	f7f8 f8ba 	bl	801500c <tFeedbackLeveler_setTargetLevel>
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 801ce98:	eeb0 0a48 	vmov.f32	s0, s16
 801ce9c:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801cea0:	ecbd 8b02 	vpop	{d8}
 801cea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setTargetLevel(&p->fbLevL, targetLev);
 801cea8:	f7f8 b8b0 	b.w	801500c <tFeedbackLeveler_setTargetLevel>

0801ceac <tLivingString2_setLevSmoothFactor>:

void     tLivingString2_setLevSmoothFactor(tLivingString2* const pl, float levSmoothFactor)
{
 801ceac:	b510      	push	{r4, lr}
 801ceae:	ed2d 8b02 	vpush	{d8}
 801ceb2:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801ceb6:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setFactor(&p->fbLevU, levSmoothFactor);
 801ceb8:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801cebc:	f7f8 f87a 	bl	8014fb4 <tFeedbackLeveler_setFactor>
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 801cec0:	eeb0 0a48 	vmov.f32	s0, s16
 801cec4:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801cec8:	ecbd 8b02 	vpop	{d8}
 801cecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setFactor(&p->fbLevL, levSmoothFactor);
 801ced0:	f7f8 b870 	b.w	8014fb4 <tFeedbackLeveler_setFactor>

0801ced4 <tLivingString2_setLevStrength>:

void     tLivingString2_setLevStrength(tLivingString2* const pl, float levStrength)
{
 801ced4:	b510      	push	{r4, lr}
 801ced6:	ed2d 8b02 	vpush	{d8}
 801ceda:	eeb0 8a40 	vmov.f32	s16, s0
    _tLivingString2* p = *pl;
 801cede:	6804      	ldr	r4, [r0, #0]
    tFeedbackLeveler_setStrength(&p->fbLevU, levStrength);
 801cee0:	f104 0054 	add.w	r0, r4, #84	; 0x54
 801cee4:	f7f8 f862 	bl	8014fac <tFeedbackLeveler_setStrength>
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 801cee8:	eeb0 0a48 	vmov.f32	s0, s16
 801ceec:	f104 0058 	add.w	r0, r4, #88	; 0x58
}
 801cef0:	ecbd 8b02 	vpop	{d8}
 801cef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    tFeedbackLeveler_setStrength(&p->fbLevL, levStrength);
 801cef8:	f7f8 b858 	b.w	8014fac <tFeedbackLeveler_setStrength>

0801cefc <tLivingString2_setLevMode>:

void     tLivingString2_setLevMode(tLivingString2* const pl, int levMode)
{
 801cefc:	b538      	push	{r3, r4, r5, lr}
    _tLivingString2* p = *pl;
 801cefe:	6805      	ldr	r5, [r0, #0]
{
 801cf00:	460c      	mov	r4, r1
    tFeedbackLeveler_setMode(&p->fbLevU, levMode);
 801cf02:	f105 0054 	add.w	r0, r5, #84	; 0x54
 801cf06:	f7f8 f859 	bl	8014fbc <tFeedbackLeveler_setMode>
    tFeedbackLeveler_setMode(&p->fbLevL, levMode);
 801cf0a:	4621      	mov	r1, r4
 801cf0c:	f105 0058 	add.w	r0, r5, #88	; 0x58
 801cf10:	f7f8 f854 	bl	8014fbc <tFeedbackLeveler_setMode>
    p->levMode=levMode;
 801cf14:	622c      	str	r4, [r5, #32]
}
 801cf16:	bd38      	pop	{r3, r4, r5, pc}

0801cf18 <tLivingString2_tick>:

float   tLivingString2_tick(tLivingString2* const pl, float input)
{
 801cf18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    _tLivingString2* p = *pl;

    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 801cf1c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
{
 801cf20:	ed2d 8b0a 	vpush	{d8-d12}
    _tLivingString2* p = *pl;
 801cf24:	6804      	ldr	r4, [r0, #0]
    input = input * 0.5f; // drop gain by half since we'll be equally adding it at half amplitude to forward and backward waveguides
 801cf26:	ee60 aa27 	vmul.f32	s21, s0, s15
    //float pickupPos=tExpSmooth_tick(&p->puSmooth);

    //need to determine which delay line to put it into (should be half amplitude into forward and backward lines for the correct portion of string)
    float prepP=tExpSmooth_tick(&p->prpSmooth);
    float lowLen=prepP*wLen;
    float upLen=(1.0f-prepP)*wLen;
 801cf2a:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 801cf2e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cf32:	f7f8 fbc9 	bl	80156c8 <tExpSmooth_tick>
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 801cf36:	f104 0060 	add.w	r0, r4, #96	; 0x60
    float wLen=tExpSmooth_tick(&p->wlSmooth);
 801cf3a:	eef0 8a40 	vmov.f32	s17, s0
    float pickP=tExpSmooth_tick(&p->ppSmooth);
 801cf3e:	f7f8 fbc3 	bl	80156c8 <tExpSmooth_tick>
 801cf42:	eeb0 8a40 	vmov.f32	s16, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 801cf46:	f104 0064 	add.w	r0, r4, #100	; 0x64
 801cf4a:	f7f8 fbbd 	bl	80156c8 <tExpSmooth_tick>
    float upLen=(1.0f-prepP)*wLen;
 801cf4e:	ee7c 9ac0 	vsub.f32	s19, s25, s0
    float prepP=tExpSmooth_tick(&p->prpSmooth);
 801cf52:	eeb0 aa40 	vmov.f32	s20, s0
    uint32_t pickPInt;

    if (pickP > prepP)
 801cf56:	eeb4 8ac0 	vcmpe.f32	s16, s0
    float lowLen=prepP*wLen;
 801cf5a:	ee28 9a80 	vmul.f32	s18, s17, s0
    float upLen=(1.0f-prepP)*wLen;
 801cf5e:	ee69 9aa8 	vmul.f32	s19, s19, s17
    if (pickP > prepP)
 801cf62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801cf66:	f340 8170 	ble.w	801d24a <tLivingString2_tick+0x332>
    {
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 801cf6a:	eef0 6a49 	vmov.f32	s13, s18
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801cf6e:	f104 0930 	add.w	r9, r4, #48	; 0x30
 801cf72:	ee79 ba2c 	vadd.f32	s23, s18, s25
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801cf76:	f104 0834 	add.w	r8, r4, #52	; 0x34
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801cf7a:	4648      	mov	r0, r9
    {
         float fullPickPoint =  pickP * wLen;
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
        float pickPFloat = fullPickPoint - pickPInt;

        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801cf7c:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        float fullPickPoint =  ((pickP*wLen) - lowLen);
 801cf80:	eed8 6a88 	vfnms.f32	s13, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801cf84:	f104 0638 	add.w	r6, r4, #56	; 0x38
 801cf88:	eee8 bac8 	vfms.f32	s23, s17, s16
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
 801cf8c:	eebc bae6 	vcvt.u32.f32	s22, s13
        float pickPFloat = fullPickPoint - pickPInt;
 801cf90:	eeb8 7a4b 	vcvt.f32.u32	s14, s22
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801cf94:	ee1b 1a10 	vmov	r1, s22
 801cf98:	ee77 ba2b 	vadd.f32	s23, s14, s23
        float pickPFloat = fullPickPoint - pickPInt;
 801cf9c:	ee36 cac7 	vsub.f32	s24, s13, s14
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801cfa0:	ee39 8ac7 	vsub.f32	s16, s19, s14
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801cfa4:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 801cfa8:	ee6a aa8c 	vmul.f32	s21, s21, s24
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801cfac:	eeb0 0a6b 	vmov.f32	s0, s23
 801cfb0:	f7f7 fdd6 	bl	8014b60 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUF, input * pickPFloat, pickPInt + 1);
 801cfb4:	ee1b 1a10 	vmov	r1, s22
 801cfb8:	4648      	mov	r0, r9
 801cfba:	eeb0 0a6a 	vmov.f32	s0, s21
 801cfbe:	3101      	adds	r1, #1
 801cfc0:	f7f7 fdce 	bl	8014b60 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801cfc4:	eefc 7ac8 	vcvt.u32.f32	s15, s16
 801cfc8:	4640      	mov	r0, r8
 801cfca:	eeb0 0a6b 	vmov.f32	s0, s23
 801cfce:	ee17 1a90 	vmov	r1, s15
 801cfd2:	f7f7 fdc5 	bl	8014b60 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delUB, input * pickPFloat, (uint32_t) (upLen - pickPInt - 1));
 801cfd6:	ee38 7a6c 	vsub.f32	s14, s16, s25
 801cfda:	eeb0 0a6a 	vmov.f32	s0, s21
 801cfde:	4640      	mov	r0, r8
 801cfe0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 801cfe4:	ee17 1a90 	vmov	r1, s15
 801cfe8:	f7f7 fdba 	bl	8014b60 <tHermiteDelay_addTo>

        tHermiteDelay_addTo(&p->delLF, input, pickPInt);
        tHermiteDelay_addTo(&p->delLB, input, (uint32_t) (lowLen - pickPInt));
    }
*/
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801cfec:	4638      	mov	r0, r7
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);

    // into upper half of string, from bridge, going backwards
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801cfee:	f104 0554 	add.w	r5, r4, #84	; 0x54
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801cff2:	f7f7 fd4f 	bl	8014a94 <tHermiteDelay_tickOut>
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801cff6:	4648      	mov	r0, r9
    float fromLF=tHermiteDelay_tickOut(&p->delLF);
 801cff8:	eef0 aa40 	vmov.f32	s21, s0
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801cffc:	f7f7 fd4a 	bl	8014a94 <tHermiteDelay_tickOut>
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 801d000:	4640      	mov	r0, r8
    float fromUF=tHermiteDelay_tickOut(&p->delUF);
 801d002:	eeb0 8a40 	vmov.f32	s16, s0
    float fromUB=tHermiteDelay_tickOut(&p->delUB);
 801d006:	f7f7 fd45 	bl	8014a94 <tHermiteDelay_tickOut>
 801d00a:	eeb0 ba40 	vmov.f32	s22, s0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 801d00e:	4630      	mov	r0, r6
 801d010:	f7f7 fd40 	bl	8014a94 <tHermiteDelay_tickOut>
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801d014:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    float fromLB=tHermiteDelay_tickOut(&p->delLB);
 801d018:	eef0 0a40 	vmov.f32	s1, s0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801d01c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d020:	f7fa f916 	bl	8017250 <LEAF_clip>
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801d024:	eef0 0a4b 	vmov.f32	s1, s22
 801d028:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromLB = LEAF_clip(-1.0f, fromLB, 1.0f);
 801d02c:	eeb0 ca40 	vmov.f32	s24, s0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801d030:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d034:	f7fa f90c 	bl	8017250 <LEAF_clip>
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801d038:	eef0 0a48 	vmov.f32	s1, s16
 801d03c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
    fromUB = LEAF_clip(-1.0f, fromUB, 1.0f);
 801d040:	eef0 ba40 	vmov.f32	s23, s0
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801d044:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d048:	f7fa f902 	bl	8017250 <LEAF_clip>
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801d04c:	eef0 0a6a 	vmov.f32	s1, s21
    fromUF = LEAF_clip(-1.0f, fromUF, 1.0f);
 801d050:	eeb0 8a40 	vmov.f32	s16, s0
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801d054:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 801d058:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d05c:	f7fa f8f8 	bl	8017250 <LEAF_clip>
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801d060:	6a23      	ldr	r3, [r4, #32]
    fromLF = LEAF_clip(-1.0f, fromLF, 1.0f);
 801d062:	eeb0 ba40 	vmov.f32	s22, s0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801d066:	2b00      	cmp	r3, #0
 801d068:	f040 80ec 	bne.w	801d244 <tLivingString2_tick+0x32c>
 801d06c:	edd4 ca07 	vldr	s25, [r4, #28]
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
    // into lower half of string, from prepPoint, going backwards
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801d070:	eef7 aa00 	vmov.f32	s21, #112	; 0x3f800000  1.0
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801d074:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 801d078:	eeb0 0a48 	vmov.f32	s0, s16
 801d07c:	f7f8 fc12 	bl	80158a4 <tTwoZero_tick>
 801d080:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801d084:	f7f8 fdc8 	bl	8015c18 <tHighpass_tick>
 801d088:	4628      	mov	r0, r5
 801d08a:	ee20 0a2c 	vmul.f32	s0, s0, s25
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
    tHermiteDelay_tickIn(&p->delLB, intoLower);
    // into lower half of string, from nut
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801d08e:	f104 0558 	add.w	r5, r4, #88	; 0x58
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801d092:	f7f7 ff97 	bl	8014fc4 <tFeedbackLeveler_tick>
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
 801d096:	eeb0 1a6a 	vmov.f32	s2, s21
 801d09a:	eef1 0a40 	vneg.f32	s1, s0
 801d09e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d0a2:	f7fa f8d5 	bl	8017250 <LEAF_clip>
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 801d0a6:	4640      	mov	r0, r8
    fromBridge = LEAF_clip(-1.0f, fromBridge, 1.0f);
 801d0a8:	eeb0 8a40 	vmov.f32	s16, s0
    tHermiteDelay_tickIn(&p->delUB, fromBridge);
 801d0ac:	f7f7 fce4 	bl	8014a78 <tHermiteDelay_tickIn>
    float fromLowerPrep=-tTwoZero_tick(&p->prepFilterL, fromLF);
 801d0b0:	f104 0048 	add.w	r0, r4, #72	; 0x48
 801d0b4:	eeb0 0a4b 	vmov.f32	s0, s22
 801d0b8:	f7f8 fbf4 	bl	80158a4 <tTwoZero_tick>
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
 801d0bc:	eeb0 1a6a 	vmov.f32	s2, s21
 801d0c0:	eef1 0a40 	vneg.f32	s1, s0
 801d0c4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d0c8:	f7fa f8c2 	bl	8017250 <LEAF_clip>
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801d0cc:	edd4 7a06 	vldr	s15, [r4, #24]
    fromLowerPrep = LEAF_clip(-1.0f, fromLowerPrep, 1.0f);
 801d0d0:	eeb0 7a40 	vmov.f32	s14, s0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801d0d4:	ee7a 0ae7 	vsub.f32	s1, s21, s15
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
 801d0d8:	eeb0 1a6a 	vmov.f32	s2, s21
 801d0dc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoLower=p->prepIndex*fromLowerPrep+(1.0f - p->prepIndex)*fromUB; //used to add input here
 801d0e0:	ee60 0aab 	vmul.f32	s1, s1, s23
    intoLower = LEAF_clip(-1.0f, intoLower, 1.0f);
 801d0e4:	eee7 0a87 	vfma.f32	s1, s15, s14
 801d0e8:	f7fa f8b2 	bl	8017250 <LEAF_clip>
    tHermiteDelay_tickIn(&p->delLB, intoLower);
 801d0ec:	4630      	mov	r0, r6
 801d0ee:	f7f7 fcc3 	bl	8014a78 <tHermiteDelay_tickIn>
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801d0f2:	6a23      	ldr	r3, [r4, #32]
 801d0f4:	b90b      	cbnz	r3, 801d0fa <tLivingString2_tick+0x1e2>
 801d0f6:	edd4 aa07 	vldr	s21, [r4, #28]
 801d0fa:	eeb0 0a4c 	vmov.f32	s0, s24
 801d0fe:	f104 0040 	add.w	r0, r4, #64	; 0x40
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
    tHermiteDelay_tickIn(&p->delLF, fromNut);
    // into upper half of string, from prepPoint, going forwards/upwards
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801d102:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
    float fromNut=-tFeedbackLeveler_tick(&p->fbLevL, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerL, tTwoZero_tick(&p->nutFilter, fromLB)));
 801d106:	f7f8 fbcd 	bl	80158a4 <tTwoZero_tick>
 801d10a:	f104 004c 	add.w	r0, r4, #76	; 0x4c
 801d10e:	f7f8 fd83 	bl	8015c18 <tHighpass_tick>
 801d112:	4628      	mov	r0, r5
 801d114:	ee20 0a2a 	vmul.f32	s0, s0, s21
 801d118:	f7f7 ff54 	bl	8014fc4 <tFeedbackLeveler_tick>
    fromNut = LEAF_clip(-1.0f, fromNut, 1.0f);
 801d11c:	eeb0 1a4c 	vmov.f32	s2, s24
 801d120:	eef1 0a40 	vneg.f32	s1, s0
 801d124:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d128:	f7fa f892 	bl	8017250 <LEAF_clip>
    tHermiteDelay_tickIn(&p->delLF, fromNut);
 801d12c:	4638      	mov	r0, r7
 801d12e:	f7f7 fca3 	bl	8014a78 <tHermiteDelay_tickIn>
    float fromUpperPrep=-tTwoZero_tick(&p->prepFilterU, fromUB);
 801d132:	f104 0044 	add.w	r0, r4, #68	; 0x44
 801d136:	eeb0 0a6b 	vmov.f32	s0, s23
 801d13a:	f7f8 fbb3 	bl	80158a4 <tTwoZero_tick>
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
 801d13e:	eeb0 1a4c 	vmov.f32	s2, s24
 801d142:	eef1 0a40 	vneg.f32	s1, s0
 801d146:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801d14a:	f7fa f881 	bl	8017250 <LEAF_clip>
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801d14e:	edd4 7a06 	vldr	s15, [r4, #24]
    fromUpperPrep = LEAF_clip(-1.0f, fromUpperPrep, 1.0f);
 801d152:	eeb0 7a40 	vmov.f32	s14, s0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801d156:	ee7c 0a67 	vsub.f32	s1, s24, s15
    //intoUpper = tanhf(intoUpper);
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
 801d15a:	eeb0 1a4c 	vmov.f32	s2, s24
 801d15e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
    float intoUpper=p->prepIndex*fromUpperPrep+(1.0f - p->prepIndex)*fromLF;
 801d162:	ee60 0a8b 	vmul.f32	s1, s1, s22
    intoUpper = LEAF_clip(-1.0f, intoUpper, 1.0f);
 801d166:	eee7 0a87 	vfma.f32	s1, s15, s14
 801d16a:	f7fa f871 	bl	8017250 <LEAF_clip>
    tHermiteDelay_tickIn(&p->delUF, intoUpper);
 801d16e:	4648      	mov	r0, r9
 801d170:	f7f7 fc82 	bl	8014a78 <tHermiteDelay_tickIn>
    // update all delay lengths

    tHermiteDelay_setDelay(&p->delLF, lowLen);
 801d174:	eeb0 0a49 	vmov.f32	s0, s18
 801d178:	4638      	mov	r0, r7
 801d17a:	f7f7 fcb5 	bl	8014ae8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delLB, lowLen);
 801d17e:	eeb0 0a49 	vmov.f32	s0, s18
 801d182:	4630      	mov	r0, r6
 801d184:	f7f7 fcb0 	bl	8014ae8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUF, upLen);
 801d188:	eeb0 0a69 	vmov.f32	s0, s19
 801d18c:	4648      	mov	r0, r9
 801d18e:	f7f7 fcab 	bl	8014ae8 <tHermiteDelay_setDelay>
    tHermiteDelay_setDelay(&p->delUB, upLen);
 801d192:	eeb0 0a69 	vmov.f32	s0, s19
 801d196:	4640      	mov	r0, r8
 801d198:	f7f7 fca6 	bl	8014ae8 <tHermiteDelay_setDelay>
    
    uint32_t PUPInt;
    float pickupOut = 0.0f;
    float pupos = tExpSmooth_tick(&p->puSmooth);
 801d19c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d1a0:	f7f8 fa92 	bl	80156c8 <tExpSmooth_tick>
    if (pupos < 0.9999f)
 801d1a4:	eddf 7a66 	vldr	s15, [pc, #408]	; 801d340 <tLivingString2_tick+0x428>
    float pupos = tExpSmooth_tick(&p->puSmooth);
 801d1a8:	eef0 aa40 	vmov.f32	s21, s0
    if (pupos < 0.9999f)
 801d1ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801d1b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1b4:	d53e      	bpl.n	801d234 <tLivingString2_tick+0x31c>
    {
        if (pupos > prepP)
 801d1b6:	eeb4 aac0 	vcmpe.f32	s20, s0
 801d1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d1be:	f140 8082 	bpl.w	801d2c6 <tLivingString2_tick+0x3ae>
        {
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 801d1c2:	eeb0 8a49 	vmov.f32	s16, s18
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
            float PUPFloat = fullPUPoint - PUPInt;

            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801d1c6:	4648      	mov	r0, r9
 801d1c8:	ee39 9a0c 	vadd.f32	s18, s18, s24
            float fullPUPoint =  ((pupos*wLen) - lowLen);
 801d1cc:	ee98 8a80 	vfnms.f32	s16, s17, s0
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
 801d1d0:	eea8 9aea 	vfms.f32	s18, s17, s21
 801d1d4:	eebc aac8 	vcvt.u32.f32	s20, s16
            float PUPFloat = fullPUPoint - PUPInt;
 801d1d8:	eeb8 ba4a 	vcvt.f32.u32	s22, s20
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801d1dc:	ee1a 1a10 	vmov	r1, s20
 801d1e0:	f7f7 fcb2 	bl	8014b48 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801d1e4:	ee1a 1a10 	vmov	r1, s20
 801d1e8:	4648      	mov	r0, r9
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801d1ea:	eeb0 aa40 	vmov.f32	s20, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801d1ee:	ee79 9acb 	vsub.f32	s19, s19, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801d1f2:	3101      	adds	r1, #1
 801d1f4:	f7f7 fca8 	bl	8014b48 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801d1f8:	4640      	mov	r0, r8
            float PUPFloat = fullPUPoint - PUPInt;
 801d1fa:	ee78 ba4b 	vsub.f32	s23, s16, s22
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801d1fe:	eefc 7ae9 	vcvt.u32.f32	s15, s19
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
 801d202:	ee79 9acc 	vsub.f32	s19, s19, s24
            pickupOut += tHermiteDelay_tapOut(&p->delUF, PUPInt + 1) * PUPFloat;
 801d206:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801d20a:	ee17 1a90 	vmov	r1, s15
            pickupOut = tHermiteDelay_tapOut(&p->delUF, PUPInt) * (1.0f - PUPFloat);
 801d20e:	ee3b ba09 	vadd.f32	s22, s22, s18
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt)) * (1.0f - PUPFloat);
 801d212:	f7f7 fc99 	bl	8014b48 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delUB, (uint32_t) (upLen - PUPInt - 1))  * PUPFloat;
 801d216:	eefc 7ae9 	vcvt.u32.f32	s15, s19
 801d21a:	4640      	mov	r0, r8
 801d21c:	ee3a aa00 	vadd.f32	s20, s20, s0
 801d220:	ee17 1a90 	vmov	r1, s15
 801d224:	f7f7 fc90 	bl	8014b48 <tHermiteDelay_tapOut>
 801d228:	ee38 8a00 	vadd.f32	s16, s16, s0
 801d22c:	ee28 8a2b 	vmul.f32	s16, s16, s23
 801d230:	eeab 8a0a 	vfma.f32	s16, s22, s20

    //p->curr = fromBridge;
    //p->curr += fromNut;

    return p->curr;
}
 801d234:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
 801d238:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 801d23c:	ecbd 8b0a 	vpop	{d8-d12}
 801d240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    float fromBridge=-tFeedbackLeveler_tick(&p->fbLevU, (p->levMode==0?p->decay:1.0f)*tHighpass_tick(&p->DCblockerU, tTwoZero_tick(&p->bridgeFilter, fromUF)));
 801d244:	eef7 ca00 	vmov.f32	s25, #112	; 0x3f800000  1.0
 801d248:	e712      	b.n	801d070 <tLivingString2_tick+0x158>
         float fullPickPoint =  pickP * wLen;
 801d24a:	ee28 8a88 	vmul.f32	s16, s17, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801d24e:	f104 072c 	add.w	r7, r4, #44	; 0x2c
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801d252:	f104 0638 	add.w	r6, r4, #56	; 0x38
        tHermiteDelay_addTo(&p->delUF, input * (1.0f - pickPFloat), pickPInt);
 801d256:	f104 0930 	add.w	r9, r4, #48	; 0x30
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801d25a:	4638      	mov	r0, r7
        tHermiteDelay_addTo(&p->delUB, input * (1.0f - pickPFloat), (uint32_t) (upLen - pickPInt));
 801d25c:	f104 0834 	add.w	r8, r4, #52	; 0x34
        pickPInt = (uint32_t) fullPickPoint; // where does the input go? that's the pick point
 801d260:	eebc cac8 	vcvt.u32.f32	s24, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801d264:	ee7c bac8 	vsub.f32	s23, s25, s16
        float pickPFloat = fullPickPoint - pickPInt;
 801d268:	eef8 7a4c 	vcvt.f32.u32	s15, s24
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801d26c:	ee1c 1a10 	vmov	r1, s24
 801d270:	ee7b baa7 	vadd.f32	s23, s23, s15
        float pickPFloat = fullPickPoint - pickPInt;
 801d274:	ee38 8a67 	vsub.f32	s16, s16, s15
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801d278:	ee39 ba67 	vsub.f32	s22, s18, s15
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801d27c:	ee6b baaa 	vmul.f32	s23, s23, s21
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 801d280:	ee2a 8a88 	vmul.f32	s16, s21, s16
        tHermiteDelay_addTo(&p->delLF, input * (1.0f - pickPFloat), pickPInt);
 801d284:	eeb0 0a6b 	vmov.f32	s0, s23
 801d288:	f7f7 fc6a 	bl	8014b60 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLF, input * pickPFloat, pickPInt + 1);
 801d28c:	ee1c 1a10 	vmov	r1, s24
 801d290:	4638      	mov	r0, r7
 801d292:	eeb0 0a48 	vmov.f32	s0, s16
 801d296:	3101      	adds	r1, #1
 801d298:	f7f7 fc62 	bl	8014b60 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * (1.0f - pickPFloat), (uint32_t) (lowLen - pickPInt));
 801d29c:	eefc 7acb 	vcvt.u32.f32	s15, s22
 801d2a0:	4630      	mov	r0, r6
 801d2a2:	eeb0 0a6b 	vmov.f32	s0, s23
 801d2a6:	ee17 1a90 	vmov	r1, s15
 801d2aa:	f7f7 fc59 	bl	8014b60 <tHermiteDelay_addTo>
        tHermiteDelay_addTo(&p->delLB, input * pickPFloat, (uint32_t) (lowLen - pickPInt - 1));
 801d2ae:	ee7b 7a6c 	vsub.f32	s15, s22, s25
 801d2b2:	eeb0 0a48 	vmov.f32	s0, s16
 801d2b6:	4630      	mov	r0, r6
 801d2b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d2bc:	ee17 1a90 	vmov	r1, s15
 801d2c0:	f7f7 fc4e 	bl	8014b60 <tHermiteDelay_addTo>
 801d2c4:	e692      	b.n	801cfec <tLivingString2_tick+0xd4>
             float fullPUPoint =  pupos * wLen;
 801d2c6:	ee68 8a80 	vmul.f32	s17, s17, s0
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801d2ca:	4638      	mov	r0, r7
            PUPInt = (uint32_t) fullPUPoint; // where does the input go? that's the pick point
 801d2cc:	eefc 9ae8 	vcvt.u32.f32	s19, s17
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801d2d0:	ee3c aa68 	vsub.f32	s20, s24, s17
            float PUPFloat = fullPUPoint - PUPInt;
 801d2d4:	eeb8 8a69 	vcvt.f32.u32	s16, s19
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801d2d8:	ee19 1a90 	vmov	r1, s19
 801d2dc:	f7f7 fc34 	bl	8014b48 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801d2e0:	ee19 1a90 	vmov	r1, s19
 801d2e4:	4638      	mov	r0, r7
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801d2e6:	eef0 9a40 	vmov.f32	s19, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801d2ea:	ee39 9a48 	vsub.f32	s18, s18, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801d2ee:	3101      	adds	r1, #1
 801d2f0:	f7f7 fc2a 	bl	8014b48 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801d2f4:	4630      	mov	r0, r6
            float PUPFloat = fullPUPoint - PUPInt;
 801d2f6:	ee78 8ac8 	vsub.f32	s17, s17, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801d2fa:	eefc 7ac9 	vcvt.u32.f32	s15, s18
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
 801d2fe:	ee39 9a4c 	vsub.f32	s18, s18, s24
            pickupOut = tHermiteDelay_tapOut(&p->delLF, PUPInt) * (1.0f - PUPFloat);
 801d302:	ee3a aa08 	vadd.f32	s20, s20, s16
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801d306:	ee17 1a90 	vmov	r1, s15
            pickupOut += tHermiteDelay_tapOut(&p->delLF,  PUPInt + 1) * PUPFloat;
 801d30a:	eeb0 8a40 	vmov.f32	s16, s0
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt)) * (1.0f - PUPFloat);
 801d30e:	f7f7 fc1b 	bl	8014b48 <tHermiteDelay_tapOut>
            pickupOut += tHermiteDelay_tapOut(&p->delLB, (uint32_t) (lowLen - PUPInt - 1)) * PUPFloat;
 801d312:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 801d316:	4630      	mov	r0, r6
 801d318:	ee79 9a80 	vadd.f32	s19, s19, s0
 801d31c:	ee17 1a90 	vmov	r1, s15
 801d320:	f7f7 fc12 	bl	8014b48 <tHermiteDelay_tapOut>
 801d324:	ee38 8a00 	vadd.f32	s16, s16, s0
 801d328:	ee28 8a28 	vmul.f32	s16, s16, s17
 801d32c:	eeaa 8a29 	vfma.f32	s16, s20, s19
}
 801d330:	eeb0 0a48 	vmov.f32	s0, s16
        p->curr = fromBridge;
 801d334:	ed84 8a0a 	vstr	s16, [r4, #40]	; 0x28
}
 801d338:	ecbd 8b0a 	vpop	{d8-d12}
 801d33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d340:	3f7ff972 	.word	0x3f7ff972

0801d344 <LEAF_defaultErrorCallback>:

void LEAF_defaultErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
    // Not sure what this should do if anything
    // Maybe fine as a placeholder
}
 801d344:	4770      	bx	lr
 801d346:	bf00      	nop

0801d348 <LEAF_init>:
{
 801d348:	b538      	push	{r3, r4, r5, lr}
    leaf->_internal_mempool.leaf = leaf;
 801d34a:	6200      	str	r0, [r0, #32]
{
 801d34c:	4604      	mov	r4, r0
 801d34e:	461d      	mov	r5, r3
 801d350:	ed2d 8b02 	vpush	{d8}
 801d354:	eeb0 8a40 	vmov.f32	s16, s0
    leaf_pool_init(leaf, memory, memorysize);
 801d358:	f7fa f954 	bl	8017604 <leaf_pool_init>
    leaf->invSampleRate = 1.0f/sr;
 801d35c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801d360:	eddf 7a0c 	vldr	s15, [pc, #48]	; 801d394 <LEAF_init+0x4c>
    leaf->clearOnAllocation = 0;
 801d364:	2200      	movs	r2, #0
    leaf->errorCallback = &LEAF_defaultErrorCallback;
 801d366:	4b0c      	ldr	r3, [pc, #48]	; (801d398 <LEAF_init+0x50>)
    leaf->sampleRate = sr;
 801d368:	ed84 8a00 	vstr	s16, [r4]
    leaf->invSampleRate = 1.0f/sr;
 801d36c:	ee86 7a88 	vdiv.f32	s14, s13, s16
    leaf->random = random;
 801d370:	6125      	str	r5, [r4, #16]
    leaf->clearOnAllocation = 0;
 801d372:	6162      	str	r2, [r4, #20]
        leaf->errorState[i] = 0;
 801d374:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 801d378:	e9c4 2210 	strd	r2, r2, [r4, #64]	; 0x40
    leaf->freeCount = 0;
 801d37c:	e9c4 2212 	strd	r2, r2, [r4, #72]	; 0x48
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801d380:	ee67 7a27 	vmul.f32	s15, s14, s15
    leaf->invSampleRate = 1.0f/sr;
 801d384:	ed84 7a01 	vstr	s14, [r4, #4]
    leaf->twoPiTimesInvSampleRate = leaf->invSampleRate * TWO_PI;
 801d388:	edc4 7a03 	vstr	s15, [r4, #12]
}
 801d38c:	ecbd 8b02 	vpop	{d8}
 801d390:	bd38      	pop	{r3, r4, r5, pc}
 801d392:	bf00      	nop
 801d394:	40c90fdb 	.word	0x40c90fdb
 801d398:	0801d345 	.word	0x0801d345

0801d39c <LEAF_internalErrorCallback>:

void LEAF_internalErrorCallback(LEAF* const leaf, LEAFErrorType whichone)
{
 801d39c:	b410      	push	{r4}
    leaf->errorState[whichone] = 1;
 801d39e:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 801d3a2:	2401      	movs	r4, #1
 801d3a4:	63d4      	str	r4, [r2, #60]	; 0x3c
    leaf->errorCallback(leaf, whichone);
}
 801d3a6:	f85d 4b04 	ldr.w	r4, [sp], #4
    leaf->errorCallback(leaf, whichone);
 801d3aa:	6b83      	ldr	r3, [r0, #56]	; 0x38
 801d3ac:	4718      	bx	r3
 801d3ae:	bf00      	nop

0801d3b0 <arm_sin_f32>:
 801d3b0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801d430 <arm_sin_f32+0x80>
 801d3b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 801d3b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801d3bc:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801d3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d3c4:	d504      	bpl.n	801d3d0 <arm_sin_f32+0x20>
 801d3c6:	ee17 3a90 	vmov	r3, s15
 801d3ca:	3b01      	subs	r3, #1
 801d3cc:	ee07 3a90 	vmov	s15, r3
 801d3d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801d3d4:	eddf 6a17 	vldr	s13, [pc, #92]	; 801d434 <arm_sin_f32+0x84>
 801d3d8:	ee70 7a67 	vsub.f32	s15, s0, s15
 801d3dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801d3e0:	eebc 7ae7 	vcvt.u32.f32	s14, s15
 801d3e4:	ee17 3a10 	vmov	r3, s14
 801d3e8:	b29b      	uxth	r3, r3
 801d3ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801d3ee:	d21a      	bcs.n	801d426 <arm_sin_f32+0x76>
 801d3f0:	ee07 3a10 	vmov	s14, r3
 801d3f4:	1c59      	adds	r1, r3, #1
 801d3f6:	eeb8 0a47 	vcvt.f32.u32	s0, s14
 801d3fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801d3fe:	4a0e      	ldr	r2, [pc, #56]	; (801d438 <arm_sin_f32+0x88>)
 801d400:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d404:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d408:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 801d40c:	ee30 0a67 	vsub.f32	s0, s0, s15
 801d410:	edd3 6a00 	vldr	s13, [r3]
 801d414:	ed92 7a00 	vldr	s14, [r2]
 801d418:	ee20 0a26 	vmul.f32	s0, s0, s13
 801d41c:	ee67 7a87 	vmul.f32	s15, s15, s14
 801d420:	ee30 0a27 	vadd.f32	s0, s0, s15
 801d424:	4770      	bx	lr
 801d426:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801d42a:	2101      	movs	r1, #1
 801d42c:	2300      	movs	r3, #0
 801d42e:	e7e6      	b.n	801d3fe <arm_sin_f32+0x4e>
 801d430:	3e22f983 	.word	0x3e22f983
 801d434:	44000000 	.word	0x44000000
 801d438:	08036d00 	.word	0x08036d00

0801d43c <__libc_init_array>:
 801d43c:	b570      	push	{r4, r5, r6, lr}
 801d43e:	4d0d      	ldr	r5, [pc, #52]	; (801d474 <__libc_init_array+0x38>)
 801d440:	4c0d      	ldr	r4, [pc, #52]	; (801d478 <__libc_init_array+0x3c>)
 801d442:	1b64      	subs	r4, r4, r5
 801d444:	10a4      	asrs	r4, r4, #2
 801d446:	2600      	movs	r6, #0
 801d448:	42a6      	cmp	r6, r4
 801d44a:	d109      	bne.n	801d460 <__libc_init_array+0x24>
 801d44c:	4d0b      	ldr	r5, [pc, #44]	; (801d47c <__libc_init_array+0x40>)
 801d44e:	4c0c      	ldr	r4, [pc, #48]	; (801d480 <__libc_init_array+0x44>)
 801d450:	f002 fafa 	bl	801fa48 <_init>
 801d454:	1b64      	subs	r4, r4, r5
 801d456:	10a4      	asrs	r4, r4, #2
 801d458:	2600      	movs	r6, #0
 801d45a:	42a6      	cmp	r6, r4
 801d45c:	d105      	bne.n	801d46a <__libc_init_array+0x2e>
 801d45e:	bd70      	pop	{r4, r5, r6, pc}
 801d460:	f855 3b04 	ldr.w	r3, [r5], #4
 801d464:	4798      	blx	r3
 801d466:	3601      	adds	r6, #1
 801d468:	e7ee      	b.n	801d448 <__libc_init_array+0xc>
 801d46a:	f855 3b04 	ldr.w	r3, [r5], #4
 801d46e:	4798      	blx	r3
 801d470:	3601      	adds	r6, #1
 801d472:	e7f2      	b.n	801d45a <__libc_init_array+0x1e>
 801d474:	08038940 	.word	0x08038940
 801d478:	08038940 	.word	0x08038940
 801d47c:	08038940 	.word	0x08038940
 801d480:	08038944 	.word	0x08038944

0801d484 <__itoa>:
 801d484:	1e93      	subs	r3, r2, #2
 801d486:	2b22      	cmp	r3, #34	; 0x22
 801d488:	b510      	push	{r4, lr}
 801d48a:	460c      	mov	r4, r1
 801d48c:	d904      	bls.n	801d498 <__itoa+0x14>
 801d48e:	2300      	movs	r3, #0
 801d490:	700b      	strb	r3, [r1, #0]
 801d492:	461c      	mov	r4, r3
 801d494:	4620      	mov	r0, r4
 801d496:	bd10      	pop	{r4, pc}
 801d498:	2a0a      	cmp	r2, #10
 801d49a:	d109      	bne.n	801d4b0 <__itoa+0x2c>
 801d49c:	2800      	cmp	r0, #0
 801d49e:	da07      	bge.n	801d4b0 <__itoa+0x2c>
 801d4a0:	232d      	movs	r3, #45	; 0x2d
 801d4a2:	700b      	strb	r3, [r1, #0]
 801d4a4:	4240      	negs	r0, r0
 801d4a6:	2101      	movs	r1, #1
 801d4a8:	4421      	add	r1, r4
 801d4aa:	f000 f841 	bl	801d530 <__utoa>
 801d4ae:	e7f1      	b.n	801d494 <__itoa+0x10>
 801d4b0:	2100      	movs	r1, #0
 801d4b2:	e7f9      	b.n	801d4a8 <__itoa+0x24>

0801d4b4 <itoa>:
 801d4b4:	f7ff bfe6 	b.w	801d484 <__itoa>

0801d4b8 <memcpy>:
 801d4b8:	440a      	add	r2, r1
 801d4ba:	4291      	cmp	r1, r2
 801d4bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801d4c0:	d100      	bne.n	801d4c4 <memcpy+0xc>
 801d4c2:	4770      	bx	lr
 801d4c4:	b510      	push	{r4, lr}
 801d4c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d4ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d4ce:	4291      	cmp	r1, r2
 801d4d0:	d1f9      	bne.n	801d4c6 <memcpy+0xe>
 801d4d2:	bd10      	pop	{r4, pc}

0801d4d4 <memset>:
 801d4d4:	4402      	add	r2, r0
 801d4d6:	4603      	mov	r3, r0
 801d4d8:	4293      	cmp	r3, r2
 801d4da:	d100      	bne.n	801d4de <memset+0xa>
 801d4dc:	4770      	bx	lr
 801d4de:	f803 1b01 	strb.w	r1, [r3], #1
 801d4e2:	e7f9      	b.n	801d4d8 <memset+0x4>

0801d4e4 <frexpf>:
 801d4e4:	ee10 3a10 	vmov	r3, s0
 801d4e8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d4ec:	2100      	movs	r1, #0
 801d4ee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801d4f2:	6001      	str	r1, [r0, #0]
 801d4f4:	da19      	bge.n	801d52a <frexpf+0x46>
 801d4f6:	b1c2      	cbz	r2, 801d52a <frexpf+0x46>
 801d4f8:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801d4fc:	d10a      	bne.n	801d514 <frexpf+0x30>
 801d4fe:	eddf 7a0b 	vldr	s15, [pc, #44]	; 801d52c <frexpf+0x48>
 801d502:	ee60 7a27 	vmul.f32	s15, s0, s15
 801d506:	f06f 0118 	mvn.w	r1, #24
 801d50a:	ee17 3a90 	vmov	r3, s15
 801d50e:	6001      	str	r1, [r0, #0]
 801d510:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801d514:	6801      	ldr	r1, [r0, #0]
 801d516:	15d2      	asrs	r2, r2, #23
 801d518:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801d51c:	3a7e      	subs	r2, #126	; 0x7e
 801d51e:	f043 537c 	orr.w	r3, r3, #1056964608	; 0x3f000000
 801d522:	440a      	add	r2, r1
 801d524:	ee00 3a10 	vmov	s0, r3
 801d528:	6002      	str	r2, [r0, #0]
 801d52a:	4770      	bx	lr
 801d52c:	4c000000 	.word	0x4c000000

0801d530 <__utoa>:
 801d530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d532:	4c1f      	ldr	r4, [pc, #124]	; (801d5b0 <__utoa+0x80>)
 801d534:	b08b      	sub	sp, #44	; 0x2c
 801d536:	4605      	mov	r5, r0
 801d538:	460b      	mov	r3, r1
 801d53a:	466e      	mov	r6, sp
 801d53c:	f104 0c20 	add.w	ip, r4, #32
 801d540:	6820      	ldr	r0, [r4, #0]
 801d542:	6861      	ldr	r1, [r4, #4]
 801d544:	4637      	mov	r7, r6
 801d546:	c703      	stmia	r7!, {r0, r1}
 801d548:	3408      	adds	r4, #8
 801d54a:	4564      	cmp	r4, ip
 801d54c:	463e      	mov	r6, r7
 801d54e:	d1f7      	bne.n	801d540 <__utoa+0x10>
 801d550:	7921      	ldrb	r1, [r4, #4]
 801d552:	7139      	strb	r1, [r7, #4]
 801d554:	1e91      	subs	r1, r2, #2
 801d556:	6820      	ldr	r0, [r4, #0]
 801d558:	6038      	str	r0, [r7, #0]
 801d55a:	2922      	cmp	r1, #34	; 0x22
 801d55c:	f04f 0100 	mov.w	r1, #0
 801d560:	d904      	bls.n	801d56c <__utoa+0x3c>
 801d562:	7019      	strb	r1, [r3, #0]
 801d564:	460b      	mov	r3, r1
 801d566:	4618      	mov	r0, r3
 801d568:	b00b      	add	sp, #44	; 0x2c
 801d56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d56c:	1e58      	subs	r0, r3, #1
 801d56e:	4684      	mov	ip, r0
 801d570:	fbb5 f7f2 	udiv	r7, r5, r2
 801d574:	fb02 5617 	mls	r6, r2, r7, r5
 801d578:	3628      	adds	r6, #40	; 0x28
 801d57a:	446e      	add	r6, sp
 801d57c:	460c      	mov	r4, r1
 801d57e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 801d582:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801d586:	462e      	mov	r6, r5
 801d588:	42b2      	cmp	r2, r6
 801d58a:	f101 0101 	add.w	r1, r1, #1
 801d58e:	463d      	mov	r5, r7
 801d590:	d9ee      	bls.n	801d570 <__utoa+0x40>
 801d592:	2200      	movs	r2, #0
 801d594:	545a      	strb	r2, [r3, r1]
 801d596:	1919      	adds	r1, r3, r4
 801d598:	1aa5      	subs	r5, r4, r2
 801d59a:	42aa      	cmp	r2, r5
 801d59c:	dae3      	bge.n	801d566 <__utoa+0x36>
 801d59e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 801d5a2:	780e      	ldrb	r6, [r1, #0]
 801d5a4:	7006      	strb	r6, [r0, #0]
 801d5a6:	3201      	adds	r2, #1
 801d5a8:	f801 5901 	strb.w	r5, [r1], #-1
 801d5ac:	e7f4      	b.n	801d598 <__utoa+0x68>
 801d5ae:	bf00      	nop
 801d5b0:	08037504 	.word	0x08037504

0801d5b4 <sinf_poly>:
 801d5b4:	07cb      	lsls	r3, r1, #31
 801d5b6:	d412      	bmi.n	801d5de <sinf_poly+0x2a>
 801d5b8:	ee21 5b00 	vmul.f64	d5, d1, d0
 801d5bc:	ed90 6b1a 	vldr	d6, [r0, #104]	; 0x68
 801d5c0:	ed90 7b18 	vldr	d7, [r0, #96]	; 0x60
 801d5c4:	eea6 7b01 	vfma.f64	d7, d6, d1
 801d5c8:	ed90 6b16 	vldr	d6, [r0, #88]	; 0x58
 801d5cc:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d5d0:	eea6 0b05 	vfma.f64	d0, d6, d5
 801d5d4:	eea7 0b01 	vfma.f64	d0, d7, d1
 801d5d8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801d5dc:	4770      	bx	lr
 801d5de:	ed90 6b14 	vldr	d6, [r0, #80]	; 0x50
 801d5e2:	ee21 5b01 	vmul.f64	d5, d1, d1
 801d5e6:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
 801d5ea:	ed90 0b0c 	vldr	d0, [r0, #48]	; 0x30
 801d5ee:	eea1 7b06 	vfma.f64	d7, d1, d6
 801d5f2:	ed90 6b0e 	vldr	d6, [r0, #56]	; 0x38
 801d5f6:	eea1 0b06 	vfma.f64	d0, d1, d6
 801d5fa:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 801d5fe:	ee21 1b05 	vmul.f64	d1, d1, d5
 801d602:	eea5 0b06 	vfma.f64	d0, d5, d6
 801d606:	e7e5      	b.n	801d5d4 <sinf_poly+0x20>

0801d608 <cosf>:
 801d608:	b538      	push	{r3, r4, r5, lr}
 801d60a:	ee10 4a10 	vmov	r4, s0
 801d60e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801d612:	f5b3 7f7d 	cmp.w	r3, #1012	; 0x3f4
 801d616:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 801d61a:	d21f      	bcs.n	801d65c <cosf+0x54>
 801d61c:	ee27 0b07 	vmul.f64	d0, d7, d7
 801d620:	f5b3 7f66 	cmp.w	r3, #920	; 0x398
 801d624:	f0c0 8088 	bcc.w	801d738 <cosf+0x130>
 801d628:	ee20 4b00 	vmul.f64	d4, d0, d0
 801d62c:	4b46      	ldr	r3, [pc, #280]	; (801d748 <cosf+0x140>)
 801d62e:	ed93 5b14 	vldr	d5, [r3, #80]	; 0x50
 801d632:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 801d636:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 801d63a:	eea0 6b05 	vfma.f64	d6, d0, d5
 801d63e:	ed93 5b0e 	vldr	d5, [r3, #56]	; 0x38
 801d642:	eea0 7b05 	vfma.f64	d7, d0, d5
 801d646:	ed93 5b10 	vldr	d5, [r3, #64]	; 0x40
 801d64a:	ee20 0b04 	vmul.f64	d0, d0, d4
 801d64e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801d652:	eea6 7b00 	vfma.f64	d7, d6, d0
 801d656:	eeb7 0bc7 	vcvt.f32.f64	s0, d7
 801d65a:	bd38      	pop	{r3, r4, r5, pc}
 801d65c:	f240 422e 	movw	r2, #1070	; 0x42e
 801d660:	4293      	cmp	r3, r2
 801d662:	d82b      	bhi.n	801d6bc <cosf+0xb4>
 801d664:	4b38      	ldr	r3, [pc, #224]	; (801d748 <cosf+0x140>)
 801d666:	ed93 6b08 	vldr	d6, [r3, #32]
 801d66a:	ee27 6b06 	vmul.f64	d6, d7, d6
 801d66e:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 801d672:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d676:	ee16 1a90 	vmov	r1, s13
 801d67a:	f501 0100 	add.w	r1, r1, #8388608	; 0x800000
 801d67e:	1609      	asrs	r1, r1, #24
 801d680:	ee06 1a90 	vmov	s13, r1
 801d684:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 801d688:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 801d68c:	f001 0203 	and.w	r2, r1, #3
 801d690:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d694:	eea5 7b46 	vfms.f64	d7, d5, d6
 801d698:	eeb0 0b47 	vmov.f64	d0, d7
 801d69c:	ed92 7b00 	vldr	d7, [r2]
 801d6a0:	ee20 1b00 	vmul.f64	d1, d0, d0
 801d6a4:	f011 0f02 	tst.w	r1, #2
 801d6a8:	bf08      	it	eq
 801d6aa:	4618      	moveq	r0, r3
 801d6ac:	f081 0101 	eor.w	r1, r1, #1
 801d6b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d6b4:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d6b8:	f7ff bf7c 	b.w	801d5b4 <sinf_poly>
 801d6bc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801d6c0:	d236      	bcs.n	801d730 <cosf+0x128>
 801d6c2:	4a22      	ldr	r2, [pc, #136]	; (801d74c <cosf+0x144>)
 801d6c4:	f3c4 6183 	ubfx	r1, r4, #26, #4
 801d6c8:	eb02 0581 	add.w	r5, r2, r1, lsl #2
 801d6cc:	f3c4 0316 	ubfx	r3, r4, #0, #23
 801d6d0:	f3c4 50c2 	ubfx	r0, r4, #23, #3
 801d6d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801d6d8:	4083      	lsls	r3, r0
 801d6da:	6a28      	ldr	r0, [r5, #32]
 801d6dc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801d6e0:	fba3 1000 	umull	r1, r0, r3, r0
 801d6e4:	6929      	ldr	r1, [r5, #16]
 801d6e6:	435a      	muls	r2, r3
 801d6e8:	fbe3 0201 	umlal	r0, r2, r3, r1
 801d6ec:	f102 5100 	add.w	r1, r2, #536870912	; 0x20000000
 801d6f0:	0f8d      	lsrs	r5, r1, #30
 801d6f2:	f001 4140 	and.w	r1, r1, #3221225472	; 0xc0000000
 801d6f6:	1a51      	subs	r1, r2, r1
 801d6f8:	f7e2 ff84 	bl	8000604 <__aeabi_l2d>
 801d6fc:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 801d700:	4b11      	ldr	r3, [pc, #68]	; (801d748 <cosf+0x140>)
 801d702:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 801d740 <cosf+0x138>
 801d706:	ec41 0b16 	vmov	d6, r0, r1
 801d70a:	f004 0203 	and.w	r2, r4, #3
 801d70e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801d712:	f014 0f02 	tst.w	r4, #2
 801d716:	f103 0070 	add.w	r0, r3, #112	; 0x70
 801d71a:	ee26 7b07 	vmul.f64	d7, d6, d7
 801d71e:	ed92 0b00 	vldr	d0, [r2]
 801d722:	ee27 1b07 	vmul.f64	d1, d7, d7
 801d726:	f085 0101 	eor.w	r1, r5, #1
 801d72a:	bf08      	it	eq
 801d72c:	4618      	moveq	r0, r3
 801d72e:	e7bf      	b.n	801d6b0 <cosf+0xa8>
 801d730:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d734:	f000 b964 	b.w	801da00 <__math_invalidf>
 801d738:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d73c:	e78d      	b.n	801d65a <cosf+0x52>
 801d73e:	bf00      	nop
 801d740:	54442d18 	.word	0x54442d18
 801d744:	3c1921fb 	.word	0x3c1921fb
 801d748:	080382b8 	.word	0x080382b8
 801d74c:	08038258 	.word	0x08038258

0801d750 <exp>:
 801d750:	b4ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7}
 801d752:	ee10 3a90 	vmov	r3, s1
 801d756:	f46f 7272 	mvn.w	r2, #968	; 0x3c8
 801d75a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 801d75e:	18a2      	adds	r2, r4, r2
 801d760:	2a3e      	cmp	r2, #62	; 0x3e
 801d762:	ee10 1a10 	vmov	r1, s0
 801d766:	d922      	bls.n	801d7ae <exp+0x5e>
 801d768:	2a00      	cmp	r2, #0
 801d76a:	da06      	bge.n	801d77a <exp+0x2a>
 801d76c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801d770:	ee30 0b07 	vadd.f64	d0, d0, d7
 801d774:	b004      	add	sp, #16
 801d776:	bcf0      	pop	{r4, r5, r6, r7}
 801d778:	4770      	bx	lr
 801d77a:	f5b4 6f81 	cmp.w	r4, #1032	; 0x408
 801d77e:	f04f 0000 	mov.w	r0, #0
 801d782:	d913      	bls.n	801d7ac <exp+0x5c>
 801d784:	f513 1f80 	cmn.w	r3, #1048576	; 0x100000
 801d788:	bf08      	it	eq
 801d78a:	4281      	cmpeq	r1, r0
 801d78c:	f000 80a0 	beq.w	801d8d0 <exp+0x180>
 801d790:	f240 72ff 	movw	r2, #2047	; 0x7ff
 801d794:	4294      	cmp	r4, r2
 801d796:	d0e9      	beq.n	801d76c <exp+0x1c>
 801d798:	4283      	cmp	r3, r0
 801d79a:	da03      	bge.n	801d7a4 <exp+0x54>
 801d79c:	b004      	add	sp, #16
 801d79e:	bcf0      	pop	{r4, r5, r6, r7}
 801d7a0:	f000 b8c6 	b.w	801d930 <__math_uflow>
 801d7a4:	b004      	add	sp, #16
 801d7a6:	bcf0      	pop	{r4, r5, r6, r7}
 801d7a8:	f000 b8ca 	b.w	801d940 <__math_oflow>
 801d7ac:	4604      	mov	r4, r0
 801d7ae:	4950      	ldr	r1, [pc, #320]	; (801d8f0 <exp+0x1a0>)
 801d7b0:	ed91 6b02 	vldr	d6, [r1, #8]
 801d7b4:	ed91 5b00 	vldr	d5, [r1]
 801d7b8:	eeb0 7b46 	vmov.f64	d7, d6
 801d7bc:	eea5 7b00 	vfma.f64	d7, d5, d0
 801d7c0:	ee17 5a10 	vmov	r5, s14
 801d7c4:	ee37 7b46 	vsub.f64	d7, d7, d6
 801d7c8:	ed91 6b04 	vldr	d6, [r1, #16]
 801d7cc:	f005 037f 	and.w	r3, r5, #127	; 0x7f
 801d7d0:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d7d4:	ed91 6b06 	vldr	d6, [r1, #24]
 801d7d8:	18d8      	adds	r0, r3, r3
 801d7da:	f100 030f 	add.w	r3, r0, #15
 801d7de:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 801d7e2:	eea6 0b07 	vfma.f64	d0, d6, d7
 801d7e6:	ed91 4b0a 	vldr	d4, [r1, #40]	; 0x28
 801d7ea:	ee20 7b00 	vmul.f64	d7, d0, d0
 801d7ee:	ed90 6b1c 	vldr	d6, [r0, #112]	; 0x70
 801d7f2:	ed91 5b08 	vldr	d5, [r1, #32]
 801d7f6:	ee30 6b06 	vadd.f64	d6, d0, d6
 801d7fa:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 801d7fe:	eea4 5b00 	vfma.f64	d5, d4, d0
 801d802:	ed91 4b0e 	vldr	d4, [r1, #56]	; 0x38
 801d806:	eea5 6b07 	vfma.f64	d6, d5, d7
 801d80a:	ee27 7b07 	vmul.f64	d7, d7, d7
 801d80e:	ed91 5b0c 	vldr	d5, [r1, #48]	; 0x30
 801d812:	f851 7033 	ldr.w	r7, [r1, r3, lsl #3]
 801d816:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801d81a:	eea4 5b00 	vfma.f64	d5, d4, d0
 801d81e:	2600      	movs	r6, #0
 801d820:	19f2      	adds	r2, r6, r7
 801d822:	eb0c 3345 	add.w	r3, ip, r5, lsl #13
 801d826:	eea7 6b05 	vfma.f64	d6, d7, d5
 801d82a:	2c00      	cmp	r4, #0
 801d82c:	d14b      	bne.n	801d8c6 <exp+0x176>
 801d82e:	42b5      	cmp	r5, r6
 801d830:	db10      	blt.n	801d854 <exp+0x104>
 801d832:	f103 4140 	add.w	r1, r3, #3221225472	; 0xc0000000
 801d836:	ed9f 7b28 	vldr	d7, [pc, #160]	; 801d8d8 <exp+0x188>
 801d83a:	f501 0170 	add.w	r1, r1, #15728640	; 0xf00000
 801d83e:	4610      	mov	r0, r2
 801d840:	ec41 0b10 	vmov	d0, r0, r1
 801d844:	eea6 0b00 	vfma.f64	d0, d6, d0
 801d848:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d84c:	b004      	add	sp, #16
 801d84e:	bcf0      	pop	{r4, r5, r6, r7}
 801d850:	f000 b88a 	b.w	801d968 <__math_check_oflow>
 801d854:	f103 517f 	add.w	r1, r3, #1069547520	; 0x3fc00000
 801d858:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 801d85c:	4610      	mov	r0, r2
 801d85e:	ec41 0b17 	vmov	d7, r0, r1
 801d862:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801d866:	ee26 6b07 	vmul.f64	d6, d6, d7
 801d86a:	ee37 5b06 	vadd.f64	d5, d7, d6
 801d86e:	eeb4 5bc4 	vcmpe.f64	d5, d4
 801d872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d876:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 801d8e0 <exp+0x190>
 801d87a:	d51e      	bpl.n	801d8ba <exp+0x16a>
 801d87c:	ee35 3b04 	vadd.f64	d3, d5, d4
 801d880:	ee37 7b45 	vsub.f64	d7, d7, d5
 801d884:	ee37 7b06 	vadd.f64	d7, d7, d6
 801d888:	ee34 6b43 	vsub.f64	d6, d4, d3
 801d88c:	ee36 5b05 	vadd.f64	d5, d6, d5
 801d890:	ee35 5b07 	vadd.f64	d5, d5, d7
 801d894:	ee35 5b03 	vadd.f64	d5, d5, d3
 801d898:	ee35 5b44 	vsub.f64	d5, d5, d4
 801d89c:	eeb5 5b40 	vcmp.f64	d5, #0.0
 801d8a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d8a4:	d101      	bne.n	801d8aa <exp+0x15a>
 801d8a6:	ed9f 5b10 	vldr	d5, [pc, #64]	; 801d8e8 <exp+0x198>
 801d8aa:	ed8d 0b00 	vstr	d0, [sp]
 801d8ae:	ed9d 7b00 	vldr	d7, [sp]
 801d8b2:	ee27 7b00 	vmul.f64	d7, d7, d0
 801d8b6:	ed8d 7b02 	vstr	d7, [sp, #8]
 801d8ba:	ee25 0b00 	vmul.f64	d0, d5, d0
 801d8be:	b004      	add	sp, #16
 801d8c0:	bcf0      	pop	{r4, r5, r6, r7}
 801d8c2:	f000 b845 	b.w	801d950 <__math_check_uflow>
 801d8c6:	ec43 2b10 	vmov	d0, r2, r3
 801d8ca:	eea6 0b00 	vfma.f64	d0, d6, d0
 801d8ce:	e751      	b.n	801d774 <exp+0x24>
 801d8d0:	ed9f 0b05 	vldr	d0, [pc, #20]	; 801d8e8 <exp+0x198>
 801d8d4:	e74e      	b.n	801d774 <exp+0x24>
 801d8d6:	bf00      	nop
 801d8d8:	00000000 	.word	0x00000000
 801d8dc:	7f000000 	.word	0x7f000000
 801d8e0:	00000000 	.word	0x00000000
 801d8e4:	00100000 	.word	0x00100000
	...
 801d8f0:	08037530 	.word	0x08037530

0801d8f4 <with_errno>:
 801d8f4:	b513      	push	{r0, r1, r4, lr}
 801d8f6:	4604      	mov	r4, r0
 801d8f8:	ed8d 0b00 	vstr	d0, [sp]
 801d8fc:	f002 f89e 	bl	801fa3c <__errno>
 801d900:	ed9d 0b00 	vldr	d0, [sp]
 801d904:	6004      	str	r4, [r0, #0]
 801d906:	b002      	add	sp, #8
 801d908:	bd10      	pop	{r4, pc}

0801d90a <xflow>:
 801d90a:	b082      	sub	sp, #8
 801d90c:	b158      	cbz	r0, 801d926 <xflow+0x1c>
 801d90e:	eeb1 7b40 	vneg.f64	d7, d0
 801d912:	ed8d 7b00 	vstr	d7, [sp]
 801d916:	ed9d 7b00 	vldr	d7, [sp]
 801d91a:	2022      	movs	r0, #34	; 0x22
 801d91c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801d920:	b002      	add	sp, #8
 801d922:	f7ff bfe7 	b.w	801d8f4 <with_errno>
 801d926:	eeb0 7b40 	vmov.f64	d7, d0
 801d92a:	e7f2      	b.n	801d912 <xflow+0x8>
 801d92c:	0000      	movs	r0, r0
	...

0801d930 <__math_uflow>:
 801d930:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d938 <__math_uflow+0x8>
 801d934:	f7ff bfe9 	b.w	801d90a <xflow>
 801d938:	00000000 	.word	0x00000000
 801d93c:	10000000 	.word	0x10000000

0801d940 <__math_oflow>:
 801d940:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801d948 <__math_oflow+0x8>
 801d944:	f7ff bfe1 	b.w	801d90a <xflow>
 801d948:	00000000 	.word	0x00000000
 801d94c:	70000000 	.word	0x70000000

0801d950 <__math_check_uflow>:
 801d950:	eeb5 0b40 	vcmp.f64	d0, #0.0
 801d954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d958:	d102      	bne.n	801d960 <__math_check_uflow+0x10>
 801d95a:	2022      	movs	r0, #34	; 0x22
 801d95c:	f7ff bfca 	b.w	801d8f4 <with_errno>
 801d960:	4770      	bx	lr
 801d962:	0000      	movs	r0, r0
 801d964:	0000      	movs	r0, r0
	...

0801d968 <__math_check_oflow>:
 801d968:	ed9f 6b07 	vldr	d6, [pc, #28]	; 801d988 <__math_check_oflow+0x20>
 801d96c:	eeb0 7bc0 	vabs.f64	d7, d0
 801d970:	eeb4 7b46 	vcmp.f64	d7, d6
 801d974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801d978:	dd02      	ble.n	801d980 <__math_check_oflow+0x18>
 801d97a:	2022      	movs	r0, #34	; 0x22
 801d97c:	f7ff bfba 	b.w	801d8f4 <with_errno>
 801d980:	4770      	bx	lr
 801d982:	bf00      	nop
 801d984:	f3af 8000 	nop.w
 801d988:	ffffffff 	.word	0xffffffff
 801d98c:	7fefffff 	.word	0x7fefffff

0801d990 <with_errnof>:
 801d990:	b513      	push	{r0, r1, r4, lr}
 801d992:	4604      	mov	r4, r0
 801d994:	ed8d 0a01 	vstr	s0, [sp, #4]
 801d998:	f002 f850 	bl	801fa3c <__errno>
 801d99c:	ed9d 0a01 	vldr	s0, [sp, #4]
 801d9a0:	6004      	str	r4, [r0, #0]
 801d9a2:	b002      	add	sp, #8
 801d9a4:	bd10      	pop	{r4, pc}

0801d9a6 <xflowf>:
 801d9a6:	b130      	cbz	r0, 801d9b6 <xflowf+0x10>
 801d9a8:	eef1 7a40 	vneg.f32	s15, s0
 801d9ac:	ee27 0a80 	vmul.f32	s0, s15, s0
 801d9b0:	2022      	movs	r0, #34	; 0x22
 801d9b2:	f7ff bfed 	b.w	801d990 <with_errnof>
 801d9b6:	eef0 7a40 	vmov.f32	s15, s0
 801d9ba:	e7f7      	b.n	801d9ac <xflowf+0x6>

0801d9bc <__math_uflowf>:
 801d9bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d9c4 <__math_uflowf+0x8>
 801d9c0:	f7ff bff1 	b.w	801d9a6 <xflowf>
 801d9c4:	10000000 	.word	0x10000000

0801d9c8 <__math_may_uflowf>:
 801d9c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d9d0 <__math_may_uflowf+0x8>
 801d9cc:	f7ff bfeb 	b.w	801d9a6 <xflowf>
 801d9d0:	1a200000 	.word	0x1a200000

0801d9d4 <__math_oflowf>:
 801d9d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801d9dc <__math_oflowf+0x8>
 801d9d8:	f7ff bfe5 	b.w	801d9a6 <xflowf>
 801d9dc:	70000000 	.word	0x70000000

0801d9e0 <__math_divzerof>:
 801d9e0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801d9e4:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801d9e8:	2800      	cmp	r0, #0
 801d9ea:	fe40 7a27 	vseleq.f32	s15, s0, s15
 801d9ee:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801d9fc <__math_divzerof+0x1c>
 801d9f2:	2022      	movs	r0, #34	; 0x22
 801d9f4:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801d9f8:	f7ff bfca 	b.w	801d990 <with_errnof>
 801d9fc:	00000000 	.word	0x00000000

0801da00 <__math_invalidf>:
 801da00:	eef0 7a40 	vmov.f32	s15, s0
 801da04:	ee30 7a40 	vsub.f32	s14, s0, s0
 801da08:	eef4 7a67 	vcmp.f32	s15, s15
 801da0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801da10:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801da14:	d602      	bvs.n	801da1c <__math_invalidf+0x1c>
 801da16:	2021      	movs	r0, #33	; 0x21
 801da18:	f7ff bfba 	b.w	801d990 <with_errnof>
 801da1c:	4770      	bx	lr
	...

0801da20 <tan>:
 801da20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801da22:	eeb0 7b40 	vmov.f64	d7, d0
 801da26:	ee17 3a90 	vmov	r3, s15
 801da2a:	4a15      	ldr	r2, [pc, #84]	; (801da80 <tan+0x60>)
 801da2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801da30:	4293      	cmp	r3, r2
 801da32:	dc07      	bgt.n	801da44 <tan+0x24>
 801da34:	ed9f 1b10 	vldr	d1, [pc, #64]	; 801da78 <tan+0x58>
 801da38:	2001      	movs	r0, #1
 801da3a:	b005      	add	sp, #20
 801da3c:	f85d eb04 	ldr.w	lr, [sp], #4
 801da40:	f001 b8ba 	b.w	801ebb8 <__kernel_tan>
 801da44:	4a0f      	ldr	r2, [pc, #60]	; (801da84 <tan+0x64>)
 801da46:	4293      	cmp	r3, r2
 801da48:	dd04      	ble.n	801da54 <tan+0x34>
 801da4a:	ee30 0b40 	vsub.f64	d0, d0, d0
 801da4e:	b005      	add	sp, #20
 801da50:	f85d fb04 	ldr.w	pc, [sp], #4
 801da54:	4668      	mov	r0, sp
 801da56:	f000 fb97 	bl	801e188 <__ieee754_rem_pio2>
 801da5a:	0040      	lsls	r0, r0, #1
 801da5c:	f000 0002 	and.w	r0, r0, #2
 801da60:	ed9d 1b02 	vldr	d1, [sp, #8]
 801da64:	ed9d 0b00 	vldr	d0, [sp]
 801da68:	f1c0 0001 	rsb	r0, r0, #1
 801da6c:	f001 f8a4 	bl	801ebb8 <__kernel_tan>
 801da70:	e7ed      	b.n	801da4e <tan+0x2e>
 801da72:	bf00      	nop
 801da74:	f3af 8000 	nop.w
	...
 801da80:	3fe921fb 	.word	0x3fe921fb
 801da84:	7fefffff 	.word	0x7fefffff

0801da88 <expf>:
 801da88:	ee10 2a10 	vmov	r2, s0
 801da8c:	f240 412a 	movw	r1, #1066	; 0x42a
 801da90:	f3c2 530a 	ubfx	r3, r2, #20, #11
 801da94:	428b      	cmp	r3, r1
 801da96:	b430      	push	{r4, r5}
 801da98:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 801da9c:	d92a      	bls.n	801daf4 <expf+0x6c>
 801da9e:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 801daa2:	d058      	beq.n	801db56 <expf+0xce>
 801daa4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 801daa8:	d303      	bcc.n	801dab2 <expf+0x2a>
 801daaa:	ee30 0a00 	vadd.f32	s0, s0, s0
 801daae:	bc30      	pop	{r4, r5}
 801dab0:	4770      	bx	lr
 801dab2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801db5c <expf+0xd4>
 801dab6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801daba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dabe:	dd03      	ble.n	801dac8 <expf+0x40>
 801dac0:	bc30      	pop	{r4, r5}
 801dac2:	2000      	movs	r0, #0
 801dac4:	f7ff bf86 	b.w	801d9d4 <__math_oflowf>
 801dac8:	eddf 7a25 	vldr	s15, [pc, #148]	; 801db60 <expf+0xd8>
 801dacc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dad4:	d503      	bpl.n	801dade <expf+0x56>
 801dad6:	bc30      	pop	{r4, r5}
 801dad8:	2000      	movs	r0, #0
 801dada:	f7ff bf6f 	b.w	801d9bc <__math_uflowf>
 801dade:	eddf 7a21 	vldr	s15, [pc, #132]	; 801db64 <expf+0xdc>
 801dae2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801dae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801daea:	d503      	bpl.n	801daf4 <expf+0x6c>
 801daec:	bc30      	pop	{r4, r5}
 801daee:	2000      	movs	r0, #0
 801daf0:	f7ff bf6a 	b.w	801d9c8 <__math_may_uflowf>
 801daf4:	4b1c      	ldr	r3, [pc, #112]	; (801db68 <expf+0xe0>)
 801daf6:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801dafa:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 801dafe:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 801db02:	eeb0 7b44 	vmov.f64	d7, d4
 801db06:	eea5 7b06 	vfma.f64	d7, d5, d6
 801db0a:	ee17 0a10 	vmov	r0, s14
 801db0e:	ee37 7b44 	vsub.f64	d7, d7, d4
 801db12:	f000 021f 	and.w	r2, r0, #31
 801db16:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801db1a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 801db1e:	ee27 4b07 	vmul.f64	d4, d7, d7
 801db22:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 801db26:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 801db2a:	eea5 6b07 	vfma.f64	d6, d5, d7
 801db2e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 801db32:	684d      	ldr	r5, [r1, #4]
 801db34:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 801db38:	2100      	movs	r1, #0
 801db3a:	190a      	adds	r2, r1, r4
 801db3c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801db40:	eea5 0b07 	vfma.f64	d0, d5, d7
 801db44:	ec43 2b17 	vmov	d7, r2, r3
 801db48:	eea6 0b04 	vfma.f64	d0, d6, d4
 801db4c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801db50:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801db54:	e7ab      	b.n	801daae <expf+0x26>
 801db56:	ed9f 0a05 	vldr	s0, [pc, #20]	; 801db6c <expf+0xe4>
 801db5a:	e7a8      	b.n	801daae <expf+0x26>
 801db5c:	42b17217 	.word	0x42b17217
 801db60:	c2cff1b4 	.word	0xc2cff1b4
 801db64:	c2ce8ecf 	.word	0xc2ce8ecf
 801db68:	08037da0 	.word	0x08037da0
 801db6c:	00000000 	.word	0x00000000

0801db70 <fabsf>:
 801db70:	ee10 3a10 	vmov	r3, s0
 801db74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801db78:	ee00 3a10 	vmov	s0, r3
 801db7c:	4770      	bx	lr
	...

0801db80 <logf>:
 801db80:	ee10 3a10 	vmov	r3, s0
 801db84:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801db88:	b410      	push	{r4}
 801db8a:	d055      	beq.n	801dc38 <logf+0xb8>
 801db8c:	f5a3 0200 	sub.w	r2, r3, #8388608	; 0x800000
 801db90:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 801db94:	d31a      	bcc.n	801dbcc <logf+0x4c>
 801db96:	005a      	lsls	r2, r3, #1
 801db98:	d104      	bne.n	801dba4 <logf+0x24>
 801db9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801db9e:	2001      	movs	r0, #1
 801dba0:	f7ff bf1e 	b.w	801d9e0 <__math_divzerof>
 801dba4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801dba8:	d043      	beq.n	801dc32 <logf+0xb2>
 801dbaa:	2b00      	cmp	r3, #0
 801dbac:	db02      	blt.n	801dbb4 <logf+0x34>
 801dbae:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801dbb2:	d303      	bcc.n	801dbbc <logf+0x3c>
 801dbb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dbb8:	f7ff bf22 	b.w	801da00 <__math_invalidf>
 801dbbc:	eddf 7a20 	vldr	s15, [pc, #128]	; 801dc40 <logf+0xc0>
 801dbc0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dbc4:	ee10 3a10 	vmov	r3, s0
 801dbc8:	f1a3 6338 	sub.w	r3, r3, #192937984	; 0xb800000
 801dbcc:	f103 4240 	add.w	r2, r3, #3221225472	; 0xc0000000
 801dbd0:	491c      	ldr	r1, [pc, #112]	; (801dc44 <logf+0xc4>)
 801dbd2:	eebf 0b00 	vmov.f64	d0, #240	; 0xbf800000 -1.0
 801dbd6:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801dbda:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 801dbde:	0dd4      	lsrs	r4, r2, #23
 801dbe0:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801dbe4:	05e4      	lsls	r4, r4, #23
 801dbe6:	ed90 6b00 	vldr	d6, [r0]
 801dbea:	1b1b      	subs	r3, r3, r4
 801dbec:	ee07 3a90 	vmov	s15, r3
 801dbf0:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801dbf4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801dbf8:	15d2      	asrs	r2, r2, #23
 801dbfa:	eea6 0b07 	vfma.f64	d0, d6, d7
 801dbfe:	ed90 6b02 	vldr	d6, [r0, #8]
 801dc02:	ee20 4b00 	vmul.f64	d4, d0, d0
 801dc06:	ee07 2a90 	vmov	s15, r2
 801dc0a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801dc0e:	eea7 6b05 	vfma.f64	d6, d7, d5
 801dc12:	ed91 5b44 	vldr	d5, [r1, #272]	; 0x110
 801dc16:	ed91 7b46 	vldr	d7, [r1, #280]	; 0x118
 801dc1a:	eea5 7b00 	vfma.f64	d7, d5, d0
 801dc1e:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801dc22:	ee30 0b06 	vadd.f64	d0, d0, d6
 801dc26:	eea5 7b04 	vfma.f64	d7, d5, d4
 801dc2a:	eea4 0b07 	vfma.f64	d0, d4, d7
 801dc2e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801dc32:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc36:	4770      	bx	lr
 801dc38:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801dc48 <logf+0xc8>
 801dc3c:	e7f9      	b.n	801dc32 <logf+0xb2>
 801dc3e:	bf00      	nop
 801dc40:	4b000000 	.word	0x4b000000
 801dc44:	08038008 	.word	0x08038008
 801dc48:	00000000 	.word	0x00000000

0801dc4c <log2f>:
 801dc4c:	ee10 2a10 	vmov	r2, s0
 801dc50:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801dc54:	b410      	push	{r4}
 801dc56:	d055      	beq.n	801dd04 <log2f+0xb8>
 801dc58:	f5a2 0300 	sub.w	r3, r2, #8388608	; 0x800000
 801dc5c:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801dc60:	d31a      	bcc.n	801dc98 <log2f+0x4c>
 801dc62:	0053      	lsls	r3, r2, #1
 801dc64:	d104      	bne.n	801dc70 <log2f+0x24>
 801dc66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc6a:	2001      	movs	r0, #1
 801dc6c:	f7ff beb8 	b.w	801d9e0 <__math_divzerof>
 801dc70:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801dc74:	d043      	beq.n	801dcfe <log2f+0xb2>
 801dc76:	2a00      	cmp	r2, #0
 801dc78:	db02      	blt.n	801dc80 <log2f+0x34>
 801dc7a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801dc7e:	d303      	bcc.n	801dc88 <log2f+0x3c>
 801dc80:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dc84:	f7ff bebc 	b.w	801da00 <__math_invalidf>
 801dc88:	eddf 7a20 	vldr	s15, [pc, #128]	; 801dd0c <log2f+0xc0>
 801dc8c:	ee20 0a27 	vmul.f32	s0, s0, s15
 801dc90:	ee10 3a10 	vmov	r3, s0
 801dc94:	f1a3 6238 	sub.w	r2, r3, #192937984	; 0xb800000
 801dc98:	f102 4340 	add.w	r3, r2, #3221225472	; 0xc0000000
 801dc9c:	491c      	ldr	r1, [pc, #112]	; (801dd10 <log2f+0xc4>)
 801dc9e:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801dca2:	f503 034d 	add.w	r3, r3, #13434880	; 0xcd0000
 801dca6:	f3c3 40c3 	ubfx	r0, r3, #19, #4
 801dcaa:	0ddc      	lsrs	r4, r3, #23
 801dcac:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 801dcb0:	05e4      	lsls	r4, r4, #23
 801dcb2:	ed90 5b00 	vldr	d5, [r0]
 801dcb6:	1b12      	subs	r2, r2, r4
 801dcb8:	ee07 2a90 	vmov	s15, r2
 801dcbc:	15db      	asrs	r3, r3, #23
 801dcbe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801dcc2:	eea5 6b07 	vfma.f64	d6, d5, d7
 801dcc6:	ed90 7b02 	vldr	d7, [r0, #8]
 801dcca:	ee26 4b06 	vmul.f64	d4, d6, d6
 801dcce:	ee00 3a10 	vmov	s0, r3
 801dcd2:	ed91 5b42 	vldr	d5, [r1, #264]	; 0x108
 801dcd6:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 801dcda:	ee30 0b07 	vadd.f64	d0, d0, d7
 801dcde:	ed91 7b44 	vldr	d7, [r1, #272]	; 0x110
 801dce2:	eea5 7b06 	vfma.f64	d7, d5, d6
 801dce6:	ed91 5b40 	vldr	d5, [r1, #256]	; 0x100
 801dcea:	eea5 7b04 	vfma.f64	d7, d5, d4
 801dcee:	ed91 5b46 	vldr	d5, [r1, #280]	; 0x118
 801dcf2:	eea5 0b06 	vfma.f64	d0, d5, d6
 801dcf6:	eea4 0b07 	vfma.f64	d0, d4, d7
 801dcfa:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801dcfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 801dd02:	4770      	bx	lr
 801dd04:	ed9f 0a03 	vldr	s0, [pc, #12]	; 801dd14 <log2f+0xc8>
 801dd08:	e7f9      	b.n	801dcfe <log2f+0xb2>
 801dd0a:	bf00      	nop
 801dd0c:	4b000000 	.word	0x4b000000
 801dd10:	08037ee8 	.word	0x08037ee8
 801dd14:	00000000 	.word	0x00000000

0801dd18 <lrintf>:
 801dd18:	ee10 3a10 	vmov	r3, s0
 801dd1c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801dd20:	f1a2 007f 	sub.w	r0, r2, #127	; 0x7f
 801dd24:	281e      	cmp	r0, #30
 801dd26:	b082      	sub	sp, #8
 801dd28:	dc2e      	bgt.n	801dd88 <lrintf+0x70>
 801dd2a:	1c41      	adds	r1, r0, #1
 801dd2c:	da02      	bge.n	801dd34 <lrintf+0x1c>
 801dd2e:	2000      	movs	r0, #0
 801dd30:	b002      	add	sp, #8
 801dd32:	4770      	bx	lr
 801dd34:	2816      	cmp	r0, #22
 801dd36:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 801dd3a:	dd09      	ble.n	801dd50 <lrintf+0x38>
 801dd3c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801dd40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801dd44:	3a96      	subs	r2, #150	; 0x96
 801dd46:	4090      	lsls	r0, r2
 801dd48:	2900      	cmp	r1, #0
 801dd4a:	d0f1      	beq.n	801dd30 <lrintf+0x18>
 801dd4c:	4240      	negs	r0, r0
 801dd4e:	e7ef      	b.n	801dd30 <lrintf+0x18>
 801dd50:	4b10      	ldr	r3, [pc, #64]	; (801dd94 <lrintf+0x7c>)
 801dd52:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801dd56:	ed93 7a00 	vldr	s14, [r3]
 801dd5a:	ee37 0a00 	vadd.f32	s0, s14, s0
 801dd5e:	ed8d 0a01 	vstr	s0, [sp, #4]
 801dd62:	eddd 7a01 	vldr	s15, [sp, #4]
 801dd66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801dd6a:	ee17 3a90 	vmov	r3, s15
 801dd6e:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801dd72:	d0dc      	beq.n	801dd2e <lrintf+0x16>
 801dd74:	f3c3 0016 	ubfx	r0, r3, #0, #23
 801dd78:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801dd7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 801dd80:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801dd84:	40d8      	lsrs	r0, r3
 801dd86:	e7df      	b.n	801dd48 <lrintf+0x30>
 801dd88:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801dd8c:	ee17 0a90 	vmov	r0, s15
 801dd90:	e7ce      	b.n	801dd30 <lrintf+0x18>
 801dd92:	bf00      	nop
 801dd94:	08038128 	.word	0x08038128

0801dd98 <checkint>:
 801dd98:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801dd9c:	2b7e      	cmp	r3, #126	; 0x7e
 801dd9e:	dd10      	ble.n	801ddc2 <checkint+0x2a>
 801dda0:	2b96      	cmp	r3, #150	; 0x96
 801dda2:	dc0c      	bgt.n	801ddbe <checkint+0x26>
 801dda4:	2201      	movs	r2, #1
 801dda6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 801ddaa:	fa02 f303 	lsl.w	r3, r2, r3
 801ddae:	1e5a      	subs	r2, r3, #1
 801ddb0:	4202      	tst	r2, r0
 801ddb2:	d106      	bne.n	801ddc2 <checkint+0x2a>
 801ddb4:	4203      	tst	r3, r0
 801ddb6:	bf0c      	ite	eq
 801ddb8:	2002      	moveq	r0, #2
 801ddba:	2001      	movne	r0, #1
 801ddbc:	4770      	bx	lr
 801ddbe:	2002      	movs	r0, #2
 801ddc0:	4770      	bx	lr
 801ddc2:	2000      	movs	r0, #0
 801ddc4:	4770      	bx	lr
	...

0801ddc8 <powf>:
 801ddc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ddca:	ee10 1a10 	vmov	r1, s0
 801ddce:	ee10 4a90 	vmov	r4, s1
 801ddd2:	f5a1 0300 	sub.w	r3, r1, #8388608	; 0x800000
 801ddd6:	0062      	lsls	r2, r4, #1
 801ddd8:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801dddc:	eef0 7a40 	vmov.f32	s15, s0
 801dde0:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
 801dde4:	f06f 7380 	mvn.w	r3, #16777216	; 0x1000000
 801dde8:	d252      	bcs.n	801de90 <powf+0xc8>
 801ddea:	4298      	cmp	r0, r3
 801ddec:	d252      	bcs.n	801de94 <powf+0xcc>
 801ddee:	2000      	movs	r0, #0
 801ddf0:	f101 4240 	add.w	r2, r1, #3221225472	; 0xc0000000
 801ddf4:	4ca0      	ldr	r4, [pc, #640]	; (801e078 <powf+0x2b0>)
 801ddf6:	eebf 5b00 	vmov.f64	d5, #240	; 0xbf800000 -1.0
 801ddfa:	f502 024d 	add.w	r2, r2, #13434880	; 0xcd0000
 801ddfe:	f3c2 45c3 	ubfx	r5, r2, #19, #4
 801de02:	0dd2      	lsrs	r2, r2, #23
 801de04:	05d2      	lsls	r2, r2, #23
 801de06:	eb04 1505 	add.w	r5, r4, r5, lsl #4
 801de0a:	1a8b      	subs	r3, r1, r2
 801de0c:	ed95 6b00 	vldr	d6, [r5]
 801de10:	ee07 3a90 	vmov	s15, r3
 801de14:	15d2      	asrs	r2, r2, #23
 801de16:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 801de1a:	eea6 5b07 	vfma.f64	d5, d6, d7
 801de1e:	ed95 6b02 	vldr	d6, [r5, #8]
 801de22:	ee25 2b05 	vmul.f64	d2, d5, d5
 801de26:	ee22 1b02 	vmul.f64	d1, d2, d2
 801de2a:	ee07 2a90 	vmov	s15, r2
 801de2e:	ed94 3b42 	vldr	d3, [r4, #264]	; 0x108
 801de32:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801de36:	ee37 7b06 	vadd.f64	d7, d7, d6
 801de3a:	ed94 6b40 	vldr	d6, [r4, #256]	; 0x100
 801de3e:	ed94 4b44 	vldr	d4, [r4, #272]	; 0x110
 801de42:	eea5 3b06 	vfma.f64	d3, d5, d6
 801de46:	ed94 6b46 	vldr	d6, [r4, #280]	; 0x118
 801de4a:	eea5 6b04 	vfma.f64	d6, d5, d4
 801de4e:	ed94 4b48 	vldr	d4, [r4, #288]	; 0x120
 801de52:	eeb7 0ae0 	vcvt.f64.f32	d0, s1
 801de56:	eea5 7b04 	vfma.f64	d7, d5, d4
 801de5a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801de5e:	eea3 7b01 	vfma.f64	d7, d3, d1
 801de62:	ee20 0b07 	vmul.f64	d0, d0, d7
 801de66:	ee10 3a90 	vmov	r3, s1
 801de6a:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801de6e:	f248 03bf 	movw	r3, #32959	; 0x80bf
 801de72:	429a      	cmp	r2, r3
 801de74:	f0c0 80b1 	bcc.w	801dfda <powf+0x212>
 801de78:	ed9f 7b77 	vldr	d7, [pc, #476]	; 801e058 <powf+0x290>
 801de7c:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801de80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801de84:	dd79      	ble.n	801df7a <powf+0x1b2>
 801de86:	b003      	add	sp, #12
 801de88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de8c:	f7ff bda2 	b.w	801d9d4 <__math_oflowf>
 801de90:	4298      	cmp	r0, r3
 801de92:	d32d      	bcc.n	801def0 <powf+0x128>
 801de94:	b952      	cbnz	r2, 801deac <powf+0xe4>
 801de96:	f481 0380 	eor.w	r3, r1, #4194304	; 0x400000
 801de9a:	005b      	lsls	r3, r3, #1
 801de9c:	f513 0f00 	cmn.w	r3, #8388608	; 0x800000
 801dea0:	f240 80c9 	bls.w	801e036 <powf+0x26e>
 801dea4:	ee37 0aa0 	vadd.f32	s0, s15, s1
 801dea8:	b003      	add	sp, #12
 801deaa:	bd30      	pop	{r4, r5, pc}
 801deac:	f1b1 5f7e 	cmp.w	r1, #1065353216	; 0x3f800000
 801deb0:	d105      	bne.n	801debe <powf+0xf6>
 801deb2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 801deb6:	0064      	lsls	r4, r4, #1
 801deb8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 801debc:	e7f0      	b.n	801dea0 <powf+0xd8>
 801debe:	004b      	lsls	r3, r1, #1
 801dec0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
 801dec4:	d8ee      	bhi.n	801dea4 <powf+0xdc>
 801dec6:	f1b2 4f7f 	cmp.w	r2, #4278190080	; 0xff000000
 801deca:	d1eb      	bne.n	801dea4 <powf+0xdc>
 801decc:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801ded0:	f000 80b1 	beq.w	801e036 <powf+0x26e>
 801ded4:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 801ded8:	ea6f 0404 	mvn.w	r4, r4
 801dedc:	bf34      	ite	cc
 801dede:	2300      	movcc	r3, #0
 801dee0:	2301      	movcs	r3, #1
 801dee2:	0fe4      	lsrs	r4, r4, #31
 801dee4:	42a3      	cmp	r3, r4
 801dee6:	f040 80a9 	bne.w	801e03c <powf+0x274>
 801deea:	ee20 0aa0 	vmul.f32	s0, s1, s1
 801deee:	e7db      	b.n	801dea8 <powf+0xe0>
 801def0:	004d      	lsls	r5, r1, #1
 801def2:	1e6a      	subs	r2, r5, #1
 801def4:	429a      	cmp	r2, r3
 801def6:	d31c      	bcc.n	801df32 <powf+0x16a>
 801def8:	2900      	cmp	r1, #0
 801defa:	ee20 0a00 	vmul.f32	s0, s0, s0
 801defe:	da0f      	bge.n	801df20 <powf+0x158>
 801df00:	ee10 0a90 	vmov	r0, s1
 801df04:	f7ff ff48 	bl	801dd98 <checkint>
 801df08:	2801      	cmp	r0, #1
 801df0a:	d109      	bne.n	801df20 <powf+0x158>
 801df0c:	eeb1 0a40 	vneg.f32	s0, s0
 801df10:	b945      	cbnz	r5, 801df24 <powf+0x15c>
 801df12:	2c00      	cmp	r4, #0
 801df14:	dac8      	bge.n	801dea8 <powf+0xe0>
 801df16:	b003      	add	sp, #12
 801df18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df1c:	f7ff bd60 	b.w	801d9e0 <__math_divzerof>
 801df20:	2000      	movs	r0, #0
 801df22:	e7f5      	b.n	801df10 <powf+0x148>
 801df24:	2c00      	cmp	r4, #0
 801df26:	dabf      	bge.n	801dea8 <powf+0xe0>
 801df28:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801df2c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801df30:	e7ba      	b.n	801dea8 <powf+0xe0>
 801df32:	2900      	cmp	r1, #0
 801df34:	da1f      	bge.n	801df76 <powf+0x1ae>
 801df36:	ee10 0a90 	vmov	r0, s1
 801df3a:	f7ff ff2d 	bl	801dd98 <checkint>
 801df3e:	b920      	cbnz	r0, 801df4a <powf+0x182>
 801df40:	b003      	add	sp, #12
 801df42:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df46:	f7ff bd5b 	b.w	801da00 <__math_invalidf>
 801df4a:	2801      	cmp	r0, #1
 801df4c:	bf14      	ite	ne
 801df4e:	2000      	movne	r0, #0
 801df50:	f44f 3080 	moveq.w	r0, #65536	; 0x10000
 801df54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801df58:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 801df5c:	f4bf af48 	bcs.w	801ddf0 <powf+0x28>
 801df60:	ed9f 0a46 	vldr	s0, [pc, #280]	; 801e07c <powf+0x2b4>
 801df64:	ee27 0a80 	vmul.f32	s0, s15, s0
 801df68:	ee10 3a10 	vmov	r3, s0
 801df6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801df70:	f1a3 6138 	sub.w	r1, r3, #192937984	; 0xb800000
 801df74:	e73c      	b.n	801ddf0 <powf+0x28>
 801df76:	2000      	movs	r0, #0
 801df78:	e7ee      	b.n	801df58 <powf+0x190>
 801df7a:	ed9f 7b39 	vldr	d7, [pc, #228]	; 801e060 <powf+0x298>
 801df7e:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801df82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df86:	dd10      	ble.n	801dfaa <powf+0x1e2>
 801df88:	f04f 534c 	mov.w	r3, #855638016	; 0x33000000
 801df8c:	2800      	cmp	r0, #0
 801df8e:	d158      	bne.n	801e042 <powf+0x27a>
 801df90:	9300      	str	r3, [sp, #0]
 801df92:	eddd 7a00 	vldr	s15, [sp]
 801df96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801df9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801df9e:	eef4 7a47 	vcmp.f32	s15, s14
 801dfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfa6:	f47f af6e 	bne.w	801de86 <powf+0xbe>
 801dfaa:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801e068 <powf+0x2a0>
 801dfae:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801dfb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfb6:	d804      	bhi.n	801dfc2 <powf+0x1fa>
 801dfb8:	b003      	add	sp, #12
 801dfba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dfbe:	f7ff bcfd 	b.w	801d9bc <__math_uflowf>
 801dfc2:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801e070 <powf+0x2a8>
 801dfc6:	eeb4 0bc7 	vcmpe.f64	d0, d7
 801dfca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801dfce:	d504      	bpl.n	801dfda <powf+0x212>
 801dfd0:	b003      	add	sp, #12
 801dfd2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801dfd6:	f7ff bcf7 	b.w	801d9c8 <__math_may_uflowf>
 801dfda:	4b29      	ldr	r3, [pc, #164]	; (801e080 <powf+0x2b8>)
 801dfdc:	ed93 7b40 	vldr	d7, [r3, #256]	; 0x100
 801dfe0:	ee30 6b07 	vadd.f64	d6, d0, d7
 801dfe4:	ee16 2a10 	vmov	r2, s12
 801dfe8:	ee36 7b47 	vsub.f64	d7, d6, d7
 801dfec:	f002 011f 	and.w	r1, r2, #31
 801dff0:	ed93 5b42 	vldr	d5, [r3, #264]	; 0x108
 801dff4:	ee30 7b47 	vsub.f64	d7, d0, d7
 801dff8:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801dffc:	ed93 6b44 	vldr	d6, [r3, #272]	; 0x110
 801e000:	ee27 4b07 	vmul.f64	d4, d7, d7
 801e004:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801e008:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801e00c:	eea7 6b05 	vfma.f64	d6, d7, d5
 801e010:	686d      	ldr	r5, [r5, #4]
 801e012:	ed93 5b46 	vldr	d5, [r3, #280]	; 0x118
 801e016:	1882      	adds	r2, r0, r2
 801e018:	2300      	movs	r3, #0
 801e01a:	1918      	adds	r0, r3, r4
 801e01c:	eb05 31c2 	add.w	r1, r5, r2, lsl #15
 801e020:	eea7 0b05 	vfma.f64	d0, d7, d5
 801e024:	ec41 0b17 	vmov	d7, r0, r1
 801e028:	eea6 0b04 	vfma.f64	d0, d6, d4
 801e02c:	ee20 0b07 	vmul.f64	d0, d0, d7
 801e030:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801e034:	e738      	b.n	801dea8 <powf+0xe0>
 801e036:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e03a:	e735      	b.n	801dea8 <powf+0xe0>
 801e03c:	ed9f 0a11 	vldr	s0, [pc, #68]	; 801e084 <powf+0x2bc>
 801e040:	e732      	b.n	801dea8 <powf+0xe0>
 801e042:	9301      	str	r3, [sp, #4]
 801e044:	eddd 7a01 	vldr	s15, [sp, #4]
 801e048:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801e04c:	ee77 7a67 	vsub.f32	s15, s14, s15
 801e050:	e7a5      	b.n	801df9e <powf+0x1d6>
 801e052:	bf00      	nop
 801e054:	f3af 8000 	nop.w
 801e058:	ffd1d571 	.word	0xffd1d571
 801e05c:	405fffff 	.word	0x405fffff
 801e060:	ffa3aae2 	.word	0xffa3aae2
 801e064:	405fffff 	.word	0x405fffff
 801e068:	00000000 	.word	0x00000000
 801e06c:	c062c000 	.word	0xc062c000
 801e070:	00000000 	.word	0x00000000
 801e074:	c062a000 	.word	0xc062a000
 801e078:	08038130 	.word	0x08038130
 801e07c:	4b000000 	.word	0x4b000000
 801e080:	08037da0 	.word	0x08037da0
 801e084:	00000000 	.word	0x00000000

0801e088 <tanf>:
 801e088:	ee10 3a10 	vmov	r3, s0
 801e08c:	b507      	push	{r0, r1, r2, lr}
 801e08e:	4a12      	ldr	r2, [pc, #72]	; (801e0d8 <tanf+0x50>)
 801e090:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801e094:	4293      	cmp	r3, r2
 801e096:	dc07      	bgt.n	801e0a8 <tanf+0x20>
 801e098:	eddf 0a10 	vldr	s1, [pc, #64]	; 801e0dc <tanf+0x54>
 801e09c:	2001      	movs	r0, #1
 801e09e:	b003      	add	sp, #12
 801e0a0:	f85d eb04 	ldr.w	lr, [sp], #4
 801e0a4:	f001 b916 	b.w	801f2d4 <__kernel_tanf>
 801e0a8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e0ac:	db04      	blt.n	801e0b8 <tanf+0x30>
 801e0ae:	ee30 0a40 	vsub.f32	s0, s0, s0
 801e0b2:	b003      	add	sp, #12
 801e0b4:	f85d fb04 	ldr.w	pc, [sp], #4
 801e0b8:	4668      	mov	r0, sp
 801e0ba:	f000 f9a9 	bl	801e410 <__ieee754_rem_pio2f>
 801e0be:	0040      	lsls	r0, r0, #1
 801e0c0:	f000 0002 	and.w	r0, r0, #2
 801e0c4:	eddd 0a01 	vldr	s1, [sp, #4]
 801e0c8:	ed9d 0a00 	vldr	s0, [sp]
 801e0cc:	f1c0 0001 	rsb	r0, r0, #1
 801e0d0:	f001 f900 	bl	801f2d4 <__kernel_tanf>
 801e0d4:	e7ed      	b.n	801e0b2 <tanf+0x2a>
 801e0d6:	bf00      	nop
 801e0d8:	3f490fda 	.word	0x3f490fda
 801e0dc:	00000000 	.word	0x00000000

0801e0e0 <tanhf>:
 801e0e0:	b510      	push	{r4, lr}
 801e0e2:	ee10 4a10 	vmov	r4, s0
 801e0e6:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801e0ea:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801e0ee:	ed2d 8b02 	vpush	{d8}
 801e0f2:	eeb0 7a40 	vmov.f32	s14, s0
 801e0f6:	db0c      	blt.n	801e112 <tanhf+0x32>
 801e0f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e0fc:	eec0 7a07 	vdiv.f32	s15, s0, s14
 801e100:	2c00      	cmp	r4, #0
 801e102:	bfac      	ite	ge
 801e104:	ee37 0a80 	vaddge.f32	s0, s15, s0
 801e108:	ee37 0ac0 	vsublt.f32	s0, s15, s0
 801e10c:	ecbd 8b02 	vpop	{d8}
 801e110:	bd10      	pop	{r4, pc}
 801e112:	4a1b      	ldr	r2, [pc, #108]	; (801e180 <tanhf+0xa0>)
 801e114:	4293      	cmp	r3, r2
 801e116:	dc30      	bgt.n	801e17a <tanhf+0x9a>
 801e118:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 801e11c:	da06      	bge.n	801e12c <tanhf+0x4c>
 801e11e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801e122:	ee70 7a27 	vadd.f32	s15, s0, s15
 801e126:	ee27 0a80 	vmul.f32	s0, s15, s0
 801e12a:	e7ef      	b.n	801e10c <tanhf+0x2c>
 801e12c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801e130:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 801e134:	db12      	blt.n	801e15c <tanhf+0x7c>
 801e136:	f7ff fd1b 	bl	801db70 <fabsf>
 801e13a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801e13e:	f001 fab1 	bl	801f6a4 <expm1f>
 801e142:	ee30 0a08 	vadd.f32	s0, s0, s16
 801e146:	eec8 7a00 	vdiv.f32	s15, s16, s0
 801e14a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e14e:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e152:	2c00      	cmp	r4, #0
 801e154:	bfb8      	it	lt
 801e156:	eeb1 0a40 	vneglt.f32	s0, s0
 801e15a:	e7d7      	b.n	801e10c <tanhf+0x2c>
 801e15c:	f7ff fd08 	bl	801db70 <fabsf>
 801e160:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 801e164:	ee20 0a27 	vmul.f32	s0, s0, s15
 801e168:	f001 fa9c 	bl	801f6a4 <expm1f>
 801e16c:	ee70 7a08 	vadd.f32	s15, s0, s16
 801e170:	eeb1 7a40 	vneg.f32	s14, s0
 801e174:	ee87 0a27 	vdiv.f32	s0, s14, s15
 801e178:	e7eb      	b.n	801e152 <tanhf+0x72>
 801e17a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801e17e:	e7e8      	b.n	801e152 <tanhf+0x72>
 801e180:	41afffff 	.word	0x41afffff
 801e184:	00000000 	.word	0x00000000

0801e188 <__ieee754_rem_pio2>:
 801e188:	b570      	push	{r4, r5, r6, lr}
 801e18a:	eeb0 7b40 	vmov.f64	d7, d0
 801e18e:	ee17 5a90 	vmov	r5, s15
 801e192:	4b99      	ldr	r3, [pc, #612]	; (801e3f8 <__ieee754_rem_pio2+0x270>)
 801e194:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801e198:	429e      	cmp	r6, r3
 801e19a:	b088      	sub	sp, #32
 801e19c:	4604      	mov	r4, r0
 801e19e:	dc07      	bgt.n	801e1b0 <__ieee754_rem_pio2+0x28>
 801e1a0:	2200      	movs	r2, #0
 801e1a2:	2300      	movs	r3, #0
 801e1a4:	ed84 0b00 	vstr	d0, [r4]
 801e1a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 801e1ac:	2000      	movs	r0, #0
 801e1ae:	e01b      	b.n	801e1e8 <__ieee754_rem_pio2+0x60>
 801e1b0:	4b92      	ldr	r3, [pc, #584]	; (801e3fc <__ieee754_rem_pio2+0x274>)
 801e1b2:	429e      	cmp	r6, r3
 801e1b4:	dc3b      	bgt.n	801e22e <__ieee754_rem_pio2+0xa6>
 801e1b6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 801e1ba:	2d00      	cmp	r5, #0
 801e1bc:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 801e3b8 <__ieee754_rem_pio2+0x230>
 801e1c0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 801e1c4:	dd19      	ble.n	801e1fa <__ieee754_rem_pio2+0x72>
 801e1c6:	ee30 7b46 	vsub.f64	d7, d0, d6
 801e1ca:	429e      	cmp	r6, r3
 801e1cc:	d00e      	beq.n	801e1ec <__ieee754_rem_pio2+0x64>
 801e1ce:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 801e3c0 <__ieee754_rem_pio2+0x238>
 801e1d2:	ee37 5b46 	vsub.f64	d5, d7, d6
 801e1d6:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e1da:	ed84 5b00 	vstr	d5, [r4]
 801e1de:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e1e2:	ed84 7b02 	vstr	d7, [r4, #8]
 801e1e6:	2001      	movs	r0, #1
 801e1e8:	b008      	add	sp, #32
 801e1ea:	bd70      	pop	{r4, r5, r6, pc}
 801e1ec:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801e3c8 <__ieee754_rem_pio2+0x240>
 801e1f0:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e1f4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 801e3d0 <__ieee754_rem_pio2+0x248>
 801e1f8:	e7eb      	b.n	801e1d2 <__ieee754_rem_pio2+0x4a>
 801e1fa:	429e      	cmp	r6, r3
 801e1fc:	ee30 7b06 	vadd.f64	d7, d0, d6
 801e200:	d00e      	beq.n	801e220 <__ieee754_rem_pio2+0x98>
 801e202:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 801e3c0 <__ieee754_rem_pio2+0x238>
 801e206:	ee37 5b06 	vadd.f64	d5, d7, d6
 801e20a:	ee37 7b45 	vsub.f64	d7, d7, d5
 801e20e:	ed84 5b00 	vstr	d5, [r4]
 801e212:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e216:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e21a:	ed84 7b02 	vstr	d7, [r4, #8]
 801e21e:	e7e3      	b.n	801e1e8 <__ieee754_rem_pio2+0x60>
 801e220:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801e3c8 <__ieee754_rem_pio2+0x240>
 801e224:	ee37 7b06 	vadd.f64	d7, d7, d6
 801e228:	ed9f 6b69 	vldr	d6, [pc, #420]	; 801e3d0 <__ieee754_rem_pio2+0x248>
 801e22c:	e7eb      	b.n	801e206 <__ieee754_rem_pio2+0x7e>
 801e22e:	4b74      	ldr	r3, [pc, #464]	; (801e400 <__ieee754_rem_pio2+0x278>)
 801e230:	429e      	cmp	r6, r3
 801e232:	dc70      	bgt.n	801e316 <__ieee754_rem_pio2+0x18e>
 801e234:	f001 f92e 	bl	801f494 <fabs>
 801e238:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e23c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801e3d8 <__ieee754_rem_pio2+0x250>
 801e240:	eea0 7b06 	vfma.f64	d7, d0, d6
 801e244:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 801e248:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 801e24c:	ee17 0a90 	vmov	r0, s15
 801e250:	eeb1 4b45 	vneg.f64	d4, d5
 801e254:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801e3b8 <__ieee754_rem_pio2+0x230>
 801e258:	eea5 0b47 	vfms.f64	d0, d5, d7
 801e25c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 801e3c0 <__ieee754_rem_pio2+0x238>
 801e260:	281f      	cmp	r0, #31
 801e262:	ee25 7b07 	vmul.f64	d7, d5, d7
 801e266:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e26a:	dc08      	bgt.n	801e27e <__ieee754_rem_pio2+0xf6>
 801e26c:	4b65      	ldr	r3, [pc, #404]	; (801e404 <__ieee754_rem_pio2+0x27c>)
 801e26e:	1e42      	subs	r2, r0, #1
 801e270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e274:	42b3      	cmp	r3, r6
 801e276:	d002      	beq.n	801e27e <__ieee754_rem_pio2+0xf6>
 801e278:	ed84 6b00 	vstr	d6, [r4]
 801e27c:	e026      	b.n	801e2cc <__ieee754_rem_pio2+0x144>
 801e27e:	ee16 3a90 	vmov	r3, s13
 801e282:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e286:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 801e28a:	2b10      	cmp	r3, #16
 801e28c:	ea4f 5226 	mov.w	r2, r6, asr #20
 801e290:	ddf2      	ble.n	801e278 <__ieee754_rem_pio2+0xf0>
 801e292:	eeb0 6b40 	vmov.f64	d6, d0
 801e296:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 801e3c8 <__ieee754_rem_pio2+0x240>
 801e29a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801e3d0 <__ieee754_rem_pio2+0x248>
 801e29e:	eea4 6b07 	vfma.f64	d6, d4, d7
 801e2a2:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e2a6:	eea4 0b07 	vfma.f64	d0, d4, d7
 801e2aa:	eeb0 7b40 	vmov.f64	d7, d0
 801e2ae:	ee95 7b03 	vfnms.f64	d7, d5, d3
 801e2b2:	ee36 3b47 	vsub.f64	d3, d6, d7
 801e2b6:	ee13 3a90 	vmov	r3, s7
 801e2ba:	f3c3 530a 	ubfx	r3, r3, #20, #11
 801e2be:	1ad3      	subs	r3, r2, r3
 801e2c0:	2b31      	cmp	r3, #49	; 0x31
 801e2c2:	dc17      	bgt.n	801e2f4 <__ieee754_rem_pio2+0x16c>
 801e2c4:	eeb0 0b46 	vmov.f64	d0, d6
 801e2c8:	ed84 3b00 	vstr	d3, [r4]
 801e2cc:	ed94 6b00 	vldr	d6, [r4]
 801e2d0:	2d00      	cmp	r5, #0
 801e2d2:	ee30 0b46 	vsub.f64	d0, d0, d6
 801e2d6:	ee30 0b47 	vsub.f64	d0, d0, d7
 801e2da:	ed84 0b02 	vstr	d0, [r4, #8]
 801e2de:	da83      	bge.n	801e1e8 <__ieee754_rem_pio2+0x60>
 801e2e0:	eeb1 6b46 	vneg.f64	d6, d6
 801e2e4:	eeb1 0b40 	vneg.f64	d0, d0
 801e2e8:	ed84 6b00 	vstr	d6, [r4]
 801e2ec:	ed84 0b02 	vstr	d0, [r4, #8]
 801e2f0:	4240      	negs	r0, r0
 801e2f2:	e779      	b.n	801e1e8 <__ieee754_rem_pio2+0x60>
 801e2f4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 801e3e0 <__ieee754_rem_pio2+0x258>
 801e2f8:	eeb0 0b46 	vmov.f64	d0, d6
 801e2fc:	eea4 0b03 	vfma.f64	d0, d4, d3
 801e300:	ee36 7b40 	vsub.f64	d7, d6, d0
 801e304:	ed9f 6b38 	vldr	d6, [pc, #224]	; 801e3e8 <__ieee754_rem_pio2+0x260>
 801e308:	eea4 7b03 	vfma.f64	d7, d4, d3
 801e30c:	ee95 7b06 	vfnms.f64	d7, d5, d6
 801e310:	ee30 6b47 	vsub.f64	d6, d0, d7
 801e314:	e7b0      	b.n	801e278 <__ieee754_rem_pio2+0xf0>
 801e316:	4b3c      	ldr	r3, [pc, #240]	; (801e408 <__ieee754_rem_pio2+0x280>)
 801e318:	429e      	cmp	r6, r3
 801e31a:	dd06      	ble.n	801e32a <__ieee754_rem_pio2+0x1a2>
 801e31c:	ee30 7b40 	vsub.f64	d7, d0, d0
 801e320:	ed80 7b02 	vstr	d7, [r0, #8]
 801e324:	ed80 7b00 	vstr	d7, [r0]
 801e328:	e740      	b.n	801e1ac <__ieee754_rem_pio2+0x24>
 801e32a:	1532      	asrs	r2, r6, #20
 801e32c:	ee10 0a10 	vmov	r0, s0
 801e330:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 801e334:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 801e338:	ec41 0b17 	vmov	d7, r0, r1
 801e33c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e340:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 801e3f0 <__ieee754_rem_pio2+0x268>
 801e344:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e348:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e34c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801e350:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e354:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 801e358:	a902      	add	r1, sp, #8
 801e35a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 801e35e:	ee37 7b46 	vsub.f64	d7, d7, d6
 801e362:	ed8d 6b04 	vstr	d6, [sp, #16]
 801e366:	ee27 7b05 	vmul.f64	d7, d7, d5
 801e36a:	ed8d 7b06 	vstr	d7, [sp, #24]
 801e36e:	2603      	movs	r6, #3
 801e370:	4608      	mov	r0, r1
 801e372:	ed91 7b04 	vldr	d7, [r1, #16]
 801e376:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e37e:	4633      	mov	r3, r6
 801e380:	f1a1 0108 	sub.w	r1, r1, #8
 801e384:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff
 801e388:	d0f3      	beq.n	801e372 <__ieee754_rem_pio2+0x1ea>
 801e38a:	4920      	ldr	r1, [pc, #128]	; (801e40c <__ieee754_rem_pio2+0x284>)
 801e38c:	9101      	str	r1, [sp, #4]
 801e38e:	2102      	movs	r1, #2
 801e390:	9100      	str	r1, [sp, #0]
 801e392:	4621      	mov	r1, r4
 801e394:	f000 f978 	bl	801e688 <__kernel_rem_pio2>
 801e398:	2d00      	cmp	r5, #0
 801e39a:	f6bf af25 	bge.w	801e1e8 <__ieee754_rem_pio2+0x60>
 801e39e:	ed94 7b00 	vldr	d7, [r4]
 801e3a2:	eeb1 7b47 	vneg.f64	d7, d7
 801e3a6:	ed84 7b00 	vstr	d7, [r4]
 801e3aa:	ed94 7b02 	vldr	d7, [r4, #8]
 801e3ae:	eeb1 7b47 	vneg.f64	d7, d7
 801e3b2:	ed84 7b02 	vstr	d7, [r4, #8]
 801e3b6:	e79b      	b.n	801e2f0 <__ieee754_rem_pio2+0x168>
 801e3b8:	54400000 	.word	0x54400000
 801e3bc:	3ff921fb 	.word	0x3ff921fb
 801e3c0:	1a626331 	.word	0x1a626331
 801e3c4:	3dd0b461 	.word	0x3dd0b461
 801e3c8:	1a600000 	.word	0x1a600000
 801e3cc:	3dd0b461 	.word	0x3dd0b461
 801e3d0:	2e037073 	.word	0x2e037073
 801e3d4:	3ba3198a 	.word	0x3ba3198a
 801e3d8:	6dc9c883 	.word	0x6dc9c883
 801e3dc:	3fe45f30 	.word	0x3fe45f30
 801e3e0:	2e000000 	.word	0x2e000000
 801e3e4:	3ba3198a 	.word	0x3ba3198a
 801e3e8:	252049c1 	.word	0x252049c1
 801e3ec:	397b839a 	.word	0x397b839a
 801e3f0:	00000000 	.word	0x00000000
 801e3f4:	41700000 	.word	0x41700000
 801e3f8:	3fe921fb 	.word	0x3fe921fb
 801e3fc:	4002d97b 	.word	0x4002d97b
 801e400:	413921fb 	.word	0x413921fb
 801e404:	08038398 	.word	0x08038398
 801e408:	7fefffff 	.word	0x7fefffff
 801e40c:	08038418 	.word	0x08038418

0801e410 <__ieee754_rem_pio2f>:
 801e410:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e412:	ee10 6a10 	vmov	r6, s0
 801e416:	4b8e      	ldr	r3, [pc, #568]	; (801e650 <__ieee754_rem_pio2f+0x240>)
 801e418:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 801e41c:	429d      	cmp	r5, r3
 801e41e:	b087      	sub	sp, #28
 801e420:	eef0 7a40 	vmov.f32	s15, s0
 801e424:	4604      	mov	r4, r0
 801e426:	dc05      	bgt.n	801e434 <__ieee754_rem_pio2f+0x24>
 801e428:	2300      	movs	r3, #0
 801e42a:	ed80 0a00 	vstr	s0, [r0]
 801e42e:	6043      	str	r3, [r0, #4]
 801e430:	2000      	movs	r0, #0
 801e432:	e01a      	b.n	801e46a <__ieee754_rem_pio2f+0x5a>
 801e434:	4b87      	ldr	r3, [pc, #540]	; (801e654 <__ieee754_rem_pio2f+0x244>)
 801e436:	429d      	cmp	r5, r3
 801e438:	dc46      	bgt.n	801e4c8 <__ieee754_rem_pio2f+0xb8>
 801e43a:	2e00      	cmp	r6, #0
 801e43c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 801e658 <__ieee754_rem_pio2f+0x248>
 801e440:	4b86      	ldr	r3, [pc, #536]	; (801e65c <__ieee754_rem_pio2f+0x24c>)
 801e442:	f025 050f 	bic.w	r5, r5, #15
 801e446:	dd1f      	ble.n	801e488 <__ieee754_rem_pio2f+0x78>
 801e448:	429d      	cmp	r5, r3
 801e44a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e44e:	d00e      	beq.n	801e46e <__ieee754_rem_pio2f+0x5e>
 801e450:	ed9f 7a83 	vldr	s14, [pc, #524]	; 801e660 <__ieee754_rem_pio2f+0x250>
 801e454:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801e458:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e45c:	ed80 0a00 	vstr	s0, [r0]
 801e460:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e464:	2001      	movs	r0, #1
 801e466:	edc4 7a01 	vstr	s15, [r4, #4]
 801e46a:	b007      	add	sp, #28
 801e46c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e46e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 801e664 <__ieee754_rem_pio2f+0x254>
 801e472:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 801e668 <__ieee754_rem_pio2f+0x258>
 801e476:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e47a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801e47e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e482:	edc0 6a00 	vstr	s13, [r0]
 801e486:	e7eb      	b.n	801e460 <__ieee754_rem_pio2f+0x50>
 801e488:	429d      	cmp	r5, r3
 801e48a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e48e:	d00e      	beq.n	801e4ae <__ieee754_rem_pio2f+0x9e>
 801e490:	ed9f 7a73 	vldr	s14, [pc, #460]	; 801e660 <__ieee754_rem_pio2f+0x250>
 801e494:	ee37 0a87 	vadd.f32	s0, s15, s14
 801e498:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801e49c:	ed80 0a00 	vstr	s0, [r0]
 801e4a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801e4a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801e4a8:	edc4 7a01 	vstr	s15, [r4, #4]
 801e4ac:	e7dd      	b.n	801e46a <__ieee754_rem_pio2f+0x5a>
 801e4ae:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 801e664 <__ieee754_rem_pio2f+0x254>
 801e4b2:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 801e668 <__ieee754_rem_pio2f+0x258>
 801e4b6:	ee77 7a80 	vadd.f32	s15, s15, s0
 801e4ba:	ee77 6a87 	vadd.f32	s13, s15, s14
 801e4be:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801e4c2:	edc0 6a00 	vstr	s13, [r0]
 801e4c6:	e7eb      	b.n	801e4a0 <__ieee754_rem_pio2f+0x90>
 801e4c8:	4b68      	ldr	r3, [pc, #416]	; (801e66c <__ieee754_rem_pio2f+0x25c>)
 801e4ca:	429d      	cmp	r5, r3
 801e4cc:	dc72      	bgt.n	801e5b4 <__ieee754_rem_pio2f+0x1a4>
 801e4ce:	f7ff fb4f 	bl	801db70 <fabsf>
 801e4d2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801e670 <__ieee754_rem_pio2f+0x260>
 801e4d6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801e4da:	eee0 7a07 	vfma.f32	s15, s0, s14
 801e4de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801e4e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801e4e6:	ee17 0a90 	vmov	r0, s15
 801e4ea:	eddf 7a5b 	vldr	s15, [pc, #364]	; 801e658 <__ieee754_rem_pio2f+0x248>
 801e4ee:	eea7 0a67 	vfms.f32	s0, s14, s15
 801e4f2:	281f      	cmp	r0, #31
 801e4f4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 801e660 <__ieee754_rem_pio2f+0x250>
 801e4f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e4fc:	eeb1 6a47 	vneg.f32	s12, s14
 801e500:	ee70 6a67 	vsub.f32	s13, s0, s15
 801e504:	ee16 2a90 	vmov	r2, s13
 801e508:	dc1c      	bgt.n	801e544 <__ieee754_rem_pio2f+0x134>
 801e50a:	495a      	ldr	r1, [pc, #360]	; (801e674 <__ieee754_rem_pio2f+0x264>)
 801e50c:	1e47      	subs	r7, r0, #1
 801e50e:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 801e512:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 801e516:	428b      	cmp	r3, r1
 801e518:	d014      	beq.n	801e544 <__ieee754_rem_pio2f+0x134>
 801e51a:	6022      	str	r2, [r4, #0]
 801e51c:	ed94 7a00 	vldr	s14, [r4]
 801e520:	ee30 0a47 	vsub.f32	s0, s0, s14
 801e524:	2e00      	cmp	r6, #0
 801e526:	ee30 0a67 	vsub.f32	s0, s0, s15
 801e52a:	ed84 0a01 	vstr	s0, [r4, #4]
 801e52e:	da9c      	bge.n	801e46a <__ieee754_rem_pio2f+0x5a>
 801e530:	eeb1 7a47 	vneg.f32	s14, s14
 801e534:	eeb1 0a40 	vneg.f32	s0, s0
 801e538:	ed84 7a00 	vstr	s14, [r4]
 801e53c:	ed84 0a01 	vstr	s0, [r4, #4]
 801e540:	4240      	negs	r0, r0
 801e542:	e792      	b.n	801e46a <__ieee754_rem_pio2f+0x5a>
 801e544:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e548:	15eb      	asrs	r3, r5, #23
 801e54a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 801e54e:	2d08      	cmp	r5, #8
 801e550:	dde3      	ble.n	801e51a <__ieee754_rem_pio2f+0x10a>
 801e552:	eddf 7a44 	vldr	s15, [pc, #272]	; 801e664 <__ieee754_rem_pio2f+0x254>
 801e556:	eddf 5a44 	vldr	s11, [pc, #272]	; 801e668 <__ieee754_rem_pio2f+0x258>
 801e55a:	eef0 6a40 	vmov.f32	s13, s0
 801e55e:	eee6 6a27 	vfma.f32	s13, s12, s15
 801e562:	ee30 0a66 	vsub.f32	s0, s0, s13
 801e566:	eea6 0a27 	vfma.f32	s0, s12, s15
 801e56a:	eef0 7a40 	vmov.f32	s15, s0
 801e56e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801e572:	ee76 5ae7 	vsub.f32	s11, s13, s15
 801e576:	ee15 2a90 	vmov	r2, s11
 801e57a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 801e57e:	1a5b      	subs	r3, r3, r1
 801e580:	2b19      	cmp	r3, #25
 801e582:	dc04      	bgt.n	801e58e <__ieee754_rem_pio2f+0x17e>
 801e584:	edc4 5a00 	vstr	s11, [r4]
 801e588:	eeb0 0a66 	vmov.f32	s0, s13
 801e58c:	e7c6      	b.n	801e51c <__ieee754_rem_pio2f+0x10c>
 801e58e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 801e678 <__ieee754_rem_pio2f+0x268>
 801e592:	eeb0 0a66 	vmov.f32	s0, s13
 801e596:	eea6 0a25 	vfma.f32	s0, s12, s11
 801e59a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 801e59e:	eddf 6a37 	vldr	s13, [pc, #220]	; 801e67c <__ieee754_rem_pio2f+0x26c>
 801e5a2:	eee6 7a25 	vfma.f32	s15, s12, s11
 801e5a6:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801e5aa:	ee30 7a67 	vsub.f32	s14, s0, s15
 801e5ae:	ed84 7a00 	vstr	s14, [r4]
 801e5b2:	e7b3      	b.n	801e51c <__ieee754_rem_pio2f+0x10c>
 801e5b4:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 801e5b8:	db06      	blt.n	801e5c8 <__ieee754_rem_pio2f+0x1b8>
 801e5ba:	ee70 7a40 	vsub.f32	s15, s0, s0
 801e5be:	edc0 7a01 	vstr	s15, [r0, #4]
 801e5c2:	edc0 7a00 	vstr	s15, [r0]
 801e5c6:	e733      	b.n	801e430 <__ieee754_rem_pio2f+0x20>
 801e5c8:	15ea      	asrs	r2, r5, #23
 801e5ca:	3a86      	subs	r2, #134	; 0x86
 801e5cc:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801e5d0:	ee07 3a90 	vmov	s15, r3
 801e5d4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e5d8:	eddf 6a29 	vldr	s13, [pc, #164]	; 801e680 <__ieee754_rem_pio2f+0x270>
 801e5dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e5e4:	ed8d 7a03 	vstr	s14, [sp, #12]
 801e5e8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e5ec:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801e5f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801e5f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801e5f8:	ed8d 7a04 	vstr	s14, [sp, #16]
 801e5fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801e600:	eef5 7a40 	vcmp.f32	s15, #0.0
 801e604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e608:	edcd 7a05 	vstr	s15, [sp, #20]
 801e60c:	d11e      	bne.n	801e64c <__ieee754_rem_pio2f+0x23c>
 801e60e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801e612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e616:	bf14      	ite	ne
 801e618:	2302      	movne	r3, #2
 801e61a:	2301      	moveq	r3, #1
 801e61c:	4919      	ldr	r1, [pc, #100]	; (801e684 <__ieee754_rem_pio2f+0x274>)
 801e61e:	9101      	str	r1, [sp, #4]
 801e620:	2102      	movs	r1, #2
 801e622:	9100      	str	r1, [sp, #0]
 801e624:	a803      	add	r0, sp, #12
 801e626:	4621      	mov	r1, r4
 801e628:	f000 fbde 	bl	801ede8 <__kernel_rem_pio2f>
 801e62c:	2e00      	cmp	r6, #0
 801e62e:	f6bf af1c 	bge.w	801e46a <__ieee754_rem_pio2f+0x5a>
 801e632:	edd4 7a00 	vldr	s15, [r4]
 801e636:	eef1 7a67 	vneg.f32	s15, s15
 801e63a:	edc4 7a00 	vstr	s15, [r4]
 801e63e:	edd4 7a01 	vldr	s15, [r4, #4]
 801e642:	eef1 7a67 	vneg.f32	s15, s15
 801e646:	edc4 7a01 	vstr	s15, [r4, #4]
 801e64a:	e779      	b.n	801e540 <__ieee754_rem_pio2f+0x130>
 801e64c:	2303      	movs	r3, #3
 801e64e:	e7e5      	b.n	801e61c <__ieee754_rem_pio2f+0x20c>
 801e650:	3f490fd8 	.word	0x3f490fd8
 801e654:	4016cbe3 	.word	0x4016cbe3
 801e658:	3fc90f80 	.word	0x3fc90f80
 801e65c:	3fc90fd0 	.word	0x3fc90fd0
 801e660:	37354443 	.word	0x37354443
 801e664:	37354400 	.word	0x37354400
 801e668:	2e85a308 	.word	0x2e85a308
 801e66c:	43490f80 	.word	0x43490f80
 801e670:	3f22f984 	.word	0x3f22f984
 801e674:	08038520 	.word	0x08038520
 801e678:	2e85a300 	.word	0x2e85a300
 801e67c:	248d3132 	.word	0x248d3132
 801e680:	43800000 	.word	0x43800000
 801e684:	080385a0 	.word	0x080385a0

0801e688 <__kernel_rem_pio2>:
 801e688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e68c:	ed2d 8b06 	vpush	{d8-d10}
 801e690:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 801e694:	460f      	mov	r7, r1
 801e696:	9002      	str	r0, [sp, #8]
 801e698:	49c5      	ldr	r1, [pc, #788]	; (801e9b0 <__kernel_rem_pio2+0x328>)
 801e69a:	98a2      	ldr	r0, [sp, #648]	; 0x288
 801e69c:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 801e6a0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 801e6a4:	9301      	str	r3, [sp, #4]
 801e6a6:	f112 0f14 	cmn.w	r2, #20
 801e6aa:	bfa8      	it	ge
 801e6ac:	2018      	movge	r0, #24
 801e6ae:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 801e6b2:	bfb8      	it	lt
 801e6b4:	2000      	movlt	r0, #0
 801e6b6:	f06f 0417 	mvn.w	r4, #23
 801e6ba:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 801e998 <__kernel_rem_pio2+0x310>
 801e6be:	bfa4      	itt	ge
 801e6c0:	f1a2 0a03 	subge.w	sl, r2, #3
 801e6c4:	fb9a f0f0 	sdivge	r0, sl, r0
 801e6c8:	fb00 4404 	mla	r4, r0, r4, r4
 801e6cc:	1a46      	subs	r6, r0, r1
 801e6ce:	4414      	add	r4, r2
 801e6d0:	eb09 0c01 	add.w	ip, r9, r1
 801e6d4:	ad1a      	add	r5, sp, #104	; 0x68
 801e6d6:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 801e6da:	2200      	movs	r2, #0
 801e6dc:	4562      	cmp	r2, ip
 801e6de:	dd10      	ble.n	801e702 <__kernel_rem_pio2+0x7a>
 801e6e0:	9a01      	ldr	r2, [sp, #4]
 801e6e2:	ab1a      	add	r3, sp, #104	; 0x68
 801e6e4:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 801e6e8:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 801e6ec:	f04f 0c00 	mov.w	ip, #0
 801e6f0:	45cc      	cmp	ip, r9
 801e6f2:	dc26      	bgt.n	801e742 <__kernel_rem_pio2+0xba>
 801e6f4:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 801e998 <__kernel_rem_pio2+0x310>
 801e6f8:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801e6fc:	4616      	mov	r6, r2
 801e6fe:	2500      	movs	r5, #0
 801e700:	e015      	b.n	801e72e <__kernel_rem_pio2+0xa6>
 801e702:	42d6      	cmn	r6, r2
 801e704:	d409      	bmi.n	801e71a <__kernel_rem_pio2+0x92>
 801e706:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 801e70a:	ee07 3a90 	vmov	s15, r3
 801e70e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e712:	eca5 7b02 	vstmia	r5!, {d7}
 801e716:	3201      	adds	r2, #1
 801e718:	e7e0      	b.n	801e6dc <__kernel_rem_pio2+0x54>
 801e71a:	eeb0 7b46 	vmov.f64	d7, d6
 801e71e:	e7f8      	b.n	801e712 <__kernel_rem_pio2+0x8a>
 801e720:	ecb8 5b02 	vldmia	r8!, {d5}
 801e724:	ed96 6b00 	vldr	d6, [r6]
 801e728:	3501      	adds	r5, #1
 801e72a:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e72e:	428d      	cmp	r5, r1
 801e730:	f1a6 0608 	sub.w	r6, r6, #8
 801e734:	ddf4      	ble.n	801e720 <__kernel_rem_pio2+0x98>
 801e736:	ecaa 7b02 	vstmia	sl!, {d7}
 801e73a:	f10c 0c01 	add.w	ip, ip, #1
 801e73e:	3208      	adds	r2, #8
 801e740:	e7d6      	b.n	801e6f0 <__kernel_rem_pio2+0x68>
 801e742:	ab06      	add	r3, sp, #24
 801e744:	ed9f 9b96 	vldr	d9, [pc, #600]	; 801e9a0 <__kernel_rem_pio2+0x318>
 801e748:	ed9f ab97 	vldr	d10, [pc, #604]	; 801e9a8 <__kernel_rem_pio2+0x320>
 801e74c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 801e750:	9303      	str	r3, [sp, #12]
 801e752:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 801e756:	464d      	mov	r5, r9
 801e758:	00eb      	lsls	r3, r5, #3
 801e75a:	9304      	str	r3, [sp, #16]
 801e75c:	ab92      	add	r3, sp, #584	; 0x248
 801e75e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801e762:	f10d 0b18 	add.w	fp, sp, #24
 801e766:	ab6a      	add	r3, sp, #424	; 0x1a8
 801e768:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 801e76c:	465e      	mov	r6, fp
 801e76e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 801e772:	4628      	mov	r0, r5
 801e774:	2800      	cmp	r0, #0
 801e776:	f1a2 0208 	sub.w	r2, r2, #8
 801e77a:	dc4c      	bgt.n	801e816 <__kernel_rem_pio2+0x18e>
 801e77c:	4620      	mov	r0, r4
 801e77e:	9105      	str	r1, [sp, #20]
 801e780:	f000 ff06 	bl	801f590 <scalbn>
 801e784:	eeb0 8b40 	vmov.f64	d8, d0
 801e788:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 801e78c:	ee28 0b00 	vmul.f64	d0, d8, d0
 801e790:	f000 fe8a 	bl	801f4a8 <floor>
 801e794:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 801e798:	eea0 8b47 	vfms.f64	d8, d0, d7
 801e79c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 801e7a0:	2c00      	cmp	r4, #0
 801e7a2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 801e7a6:	ee17 8a90 	vmov	r8, s15
 801e7aa:	ee38 8b40 	vsub.f64	d8, d8, d0
 801e7ae:	9905      	ldr	r1, [sp, #20]
 801e7b0:	dd43      	ble.n	801e83a <__kernel_rem_pio2+0x1b2>
 801e7b2:	1e68      	subs	r0, r5, #1
 801e7b4:	ab06      	add	r3, sp, #24
 801e7b6:	f1c4 0c18 	rsb	ip, r4, #24
 801e7ba:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 801e7be:	fa46 f20c 	asr.w	r2, r6, ip
 801e7c2:	4490      	add	r8, r2
 801e7c4:	fa02 f20c 	lsl.w	r2, r2, ip
 801e7c8:	1ab6      	subs	r6, r6, r2
 801e7ca:	f1c4 0217 	rsb	r2, r4, #23
 801e7ce:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 801e7d2:	4116      	asrs	r6, r2
 801e7d4:	2e00      	cmp	r6, #0
 801e7d6:	dd3f      	ble.n	801e858 <__kernel_rem_pio2+0x1d0>
 801e7d8:	f04f 0c00 	mov.w	ip, #0
 801e7dc:	f108 0801 	add.w	r8, r8, #1
 801e7e0:	4660      	mov	r0, ip
 801e7e2:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 801e7e6:	4565      	cmp	r5, ip
 801e7e8:	dc6e      	bgt.n	801e8c8 <__kernel_rem_pio2+0x240>
 801e7ea:	2c00      	cmp	r4, #0
 801e7ec:	dd04      	ble.n	801e7f8 <__kernel_rem_pio2+0x170>
 801e7ee:	2c01      	cmp	r4, #1
 801e7f0:	d07f      	beq.n	801e8f2 <__kernel_rem_pio2+0x26a>
 801e7f2:	2c02      	cmp	r4, #2
 801e7f4:	f000 8087 	beq.w	801e906 <__kernel_rem_pio2+0x27e>
 801e7f8:	2e02      	cmp	r6, #2
 801e7fa:	d12d      	bne.n	801e858 <__kernel_rem_pio2+0x1d0>
 801e7fc:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801e800:	ee30 8b48 	vsub.f64	d8, d0, d8
 801e804:	b340      	cbz	r0, 801e858 <__kernel_rem_pio2+0x1d0>
 801e806:	4620      	mov	r0, r4
 801e808:	9105      	str	r1, [sp, #20]
 801e80a:	f000 fec1 	bl	801f590 <scalbn>
 801e80e:	9905      	ldr	r1, [sp, #20]
 801e810:	ee38 8b40 	vsub.f64	d8, d8, d0
 801e814:	e020      	b.n	801e858 <__kernel_rem_pio2+0x1d0>
 801e816:	ee20 7b09 	vmul.f64	d7, d0, d9
 801e81a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e81e:	3801      	subs	r0, #1
 801e820:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801e824:	eea7 0b4a 	vfms.f64	d0, d7, d10
 801e828:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e82c:	eca6 0a01 	vstmia	r6!, {s0}
 801e830:	ed92 0b00 	vldr	d0, [r2]
 801e834:	ee37 0b00 	vadd.f64	d0, d7, d0
 801e838:	e79c      	b.n	801e774 <__kernel_rem_pio2+0xec>
 801e83a:	d105      	bne.n	801e848 <__kernel_rem_pio2+0x1c0>
 801e83c:	1e6a      	subs	r2, r5, #1
 801e83e:	ab06      	add	r3, sp, #24
 801e840:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801e844:	15f6      	asrs	r6, r6, #23
 801e846:	e7c5      	b.n	801e7d4 <__kernel_rem_pio2+0x14c>
 801e848:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801e84c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801e850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e854:	da36      	bge.n	801e8c4 <__kernel_rem_pio2+0x23c>
 801e856:	2600      	movs	r6, #0
 801e858:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801e85c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e860:	f040 80aa 	bne.w	801e9b8 <__kernel_rem_pio2+0x330>
 801e864:	f105 3bff 	add.w	fp, r5, #4294967295	; 0xffffffff
 801e868:	4658      	mov	r0, fp
 801e86a:	2200      	movs	r2, #0
 801e86c:	4548      	cmp	r0, r9
 801e86e:	da52      	bge.n	801e916 <__kernel_rem_pio2+0x28e>
 801e870:	2a00      	cmp	r2, #0
 801e872:	f000 8081 	beq.w	801e978 <__kernel_rem_pio2+0x2f0>
 801e876:	ab06      	add	r3, sp, #24
 801e878:	3c18      	subs	r4, #24
 801e87a:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801e87e:	2b00      	cmp	r3, #0
 801e880:	f000 8087 	beq.w	801e992 <__kernel_rem_pio2+0x30a>
 801e884:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 801e888:	4620      	mov	r0, r4
 801e88a:	f000 fe81 	bl	801f590 <scalbn>
 801e88e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 801e892:	ed9f 6b43 	vldr	d6, [pc, #268]	; 801e9a0 <__kernel_rem_pio2+0x318>
 801e896:	a96a      	add	r1, sp, #424	; 0x1a8
 801e898:	f103 0208 	add.w	r2, r3, #8
 801e89c:	1888      	adds	r0, r1, r2
 801e89e:	4659      	mov	r1, fp
 801e8a0:	2900      	cmp	r1, #0
 801e8a2:	f280 80b7 	bge.w	801ea14 <__kernel_rem_pio2+0x38c>
 801e8a6:	4659      	mov	r1, fp
 801e8a8:	2900      	cmp	r1, #0
 801e8aa:	f2c0 80d5 	blt.w	801ea58 <__kernel_rem_pio2+0x3d0>
 801e8ae:	a86a      	add	r0, sp, #424	; 0x1a8
 801e8b0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 801e8b4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 801e998 <__kernel_rem_pio2+0x310>
 801e8b8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 801e9b4 <__kernel_rem_pio2+0x32c>
 801e8bc:	2400      	movs	r4, #0
 801e8be:	ebab 0001 	sub.w	r0, fp, r1
 801e8c2:	e0be      	b.n	801ea42 <__kernel_rem_pio2+0x3ba>
 801e8c4:	2602      	movs	r6, #2
 801e8c6:	e787      	b.n	801e7d8 <__kernel_rem_pio2+0x150>
 801e8c8:	f8db 2000 	ldr.w	r2, [fp]
 801e8cc:	b958      	cbnz	r0, 801e8e6 <__kernel_rem_pio2+0x25e>
 801e8ce:	b122      	cbz	r2, 801e8da <__kernel_rem_pio2+0x252>
 801e8d0:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 801e8d4:	f8cb 2000 	str.w	r2, [fp]
 801e8d8:	2201      	movs	r2, #1
 801e8da:	f10c 0c01 	add.w	ip, ip, #1
 801e8de:	f10b 0b04 	add.w	fp, fp, #4
 801e8e2:	4610      	mov	r0, r2
 801e8e4:	e77f      	b.n	801e7e6 <__kernel_rem_pio2+0x15e>
 801e8e6:	ebae 0202 	sub.w	r2, lr, r2
 801e8ea:	f8cb 2000 	str.w	r2, [fp]
 801e8ee:	4602      	mov	r2, r0
 801e8f0:	e7f3      	b.n	801e8da <__kernel_rem_pio2+0x252>
 801e8f2:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801e8f6:	ab06      	add	r3, sp, #24
 801e8f8:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801e8fc:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801e900:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 801e904:	e778      	b.n	801e7f8 <__kernel_rem_pio2+0x170>
 801e906:	f105 3cff 	add.w	ip, r5, #4294967295	; 0xffffffff
 801e90a:	ab06      	add	r3, sp, #24
 801e90c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 801e910:	f3c2 0215 	ubfx	r2, r2, #0, #22
 801e914:	e7f4      	b.n	801e900 <__kernel_rem_pio2+0x278>
 801e916:	ab06      	add	r3, sp, #24
 801e918:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 801e91c:	3801      	subs	r0, #1
 801e91e:	431a      	orrs	r2, r3
 801e920:	e7a4      	b.n	801e86c <__kernel_rem_pio2+0x1e4>
 801e922:	f10c 0c01 	add.w	ip, ip, #1
 801e926:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 801e92a:	2800      	cmp	r0, #0
 801e92c:	d0f9      	beq.n	801e922 <__kernel_rem_pio2+0x29a>
 801e92e:	9b04      	ldr	r3, [sp, #16]
 801e930:	f503 7312 	add.w	r3, r3, #584	; 0x248
 801e934:	eb0d 0203 	add.w	r2, sp, r3
 801e938:	9b01      	ldr	r3, [sp, #4]
 801e93a:	18e8      	adds	r0, r5, r3
 801e93c:	ab1a      	add	r3, sp, #104	; 0x68
 801e93e:	1c6e      	adds	r6, r5, #1
 801e940:	3a98      	subs	r2, #152	; 0x98
 801e942:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 801e946:	4465      	add	r5, ip
 801e948:	42b5      	cmp	r5, r6
 801e94a:	f6ff af05 	blt.w	801e758 <__kernel_rem_pio2+0xd0>
 801e94e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 801e952:	f8dd e008 	ldr.w	lr, [sp, #8]
 801e956:	ee07 3a90 	vmov	s15, r3
 801e95a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801e95e:	f04f 0c00 	mov.w	ip, #0
 801e962:	eca0 7b02 	vstmia	r0!, {d7}
 801e966:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801e998 <__kernel_rem_pio2+0x310>
 801e96a:	4680      	mov	r8, r0
 801e96c:	458c      	cmp	ip, r1
 801e96e:	dd07      	ble.n	801e980 <__kernel_rem_pio2+0x2f8>
 801e970:	eca2 7b02 	vstmia	r2!, {d7}
 801e974:	3601      	adds	r6, #1
 801e976:	e7e7      	b.n	801e948 <__kernel_rem_pio2+0x2c0>
 801e978:	9a03      	ldr	r2, [sp, #12]
 801e97a:	f04f 0c01 	mov.w	ip, #1
 801e97e:	e7d2      	b.n	801e926 <__kernel_rem_pio2+0x29e>
 801e980:	ecbe 5b02 	vldmia	lr!, {d5}
 801e984:	ed38 6b02 	vldmdb	r8!, {d6}
 801e988:	f10c 0c01 	add.w	ip, ip, #1
 801e98c:	eea5 7b06 	vfma.f64	d7, d5, d6
 801e990:	e7ec      	b.n	801e96c <__kernel_rem_pio2+0x2e4>
 801e992:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801e996:	e76e      	b.n	801e876 <__kernel_rem_pio2+0x1ee>
	...
 801e9a4:	3e700000 	.word	0x3e700000
 801e9a8:	00000000 	.word	0x00000000
 801e9ac:	41700000 	.word	0x41700000
 801e9b0:	080388f8 	.word	0x080388f8
 801e9b4:	080388b8 	.word	0x080388b8
 801e9b8:	4260      	negs	r0, r4
 801e9ba:	eeb0 0b48 	vmov.f64	d0, d8
 801e9be:	f000 fde7 	bl	801f590 <scalbn>
 801e9c2:	ed9f 6b77 	vldr	d6, [pc, #476]	; 801eba0 <__kernel_rem_pio2+0x518>
 801e9c6:	eeb4 0bc6 	vcmpe.f64	d0, d6
 801e9ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e9ce:	db18      	blt.n	801ea02 <__kernel_rem_pio2+0x37a>
 801e9d0:	ed9f 7b75 	vldr	d7, [pc, #468]	; 801eba8 <__kernel_rem_pio2+0x520>
 801e9d4:	ee20 7b07 	vmul.f64	d7, d0, d7
 801e9d8:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 801e9dc:	aa06      	add	r2, sp, #24
 801e9de:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 801e9e2:	eea5 0b46 	vfms.f64	d0, d5, d6
 801e9e6:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801e9ea:	f105 0b01 	add.w	fp, r5, #1
 801e9ee:	ee10 3a10 	vmov	r3, s0
 801e9f2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801e9f6:	ee17 3a10 	vmov	r3, s14
 801e9fa:	3418      	adds	r4, #24
 801e9fc:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 801ea00:	e740      	b.n	801e884 <__kernel_rem_pio2+0x1fc>
 801ea02:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 801ea06:	aa06      	add	r2, sp, #24
 801ea08:	ee10 3a10 	vmov	r3, s0
 801ea0c:	46ab      	mov	fp, r5
 801ea0e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 801ea12:	e737      	b.n	801e884 <__kernel_rem_pio2+0x1fc>
 801ea14:	ac06      	add	r4, sp, #24
 801ea16:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 801ea1a:	9401      	str	r4, [sp, #4]
 801ea1c:	ee07 4a90 	vmov	s15, r4
 801ea20:	3901      	subs	r1, #1
 801ea22:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801ea26:	ee27 7b00 	vmul.f64	d7, d7, d0
 801ea2a:	ee20 0b06 	vmul.f64	d0, d0, d6
 801ea2e:	ed20 7b02 	vstmdb	r0!, {d7}
 801ea32:	e735      	b.n	801e8a0 <__kernel_rem_pio2+0x218>
 801ea34:	ecbc 5b02 	vldmia	ip!, {d5}
 801ea38:	ecb5 6b02 	vldmia	r5!, {d6}
 801ea3c:	3401      	adds	r4, #1
 801ea3e:	eea5 7b06 	vfma.f64	d7, d5, d6
 801ea42:	454c      	cmp	r4, r9
 801ea44:	dc01      	bgt.n	801ea4a <__kernel_rem_pio2+0x3c2>
 801ea46:	4284      	cmp	r4, r0
 801ea48:	ddf4      	ble.n	801ea34 <__kernel_rem_pio2+0x3ac>
 801ea4a:	ac42      	add	r4, sp, #264	; 0x108
 801ea4c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 801ea50:	ed80 7b00 	vstr	d7, [r0]
 801ea54:	3901      	subs	r1, #1
 801ea56:	e727      	b.n	801e8a8 <__kernel_rem_pio2+0x220>
 801ea58:	99a2      	ldr	r1, [sp, #648]	; 0x288
 801ea5a:	2902      	cmp	r1, #2
 801ea5c:	dc0a      	bgt.n	801ea74 <__kernel_rem_pio2+0x3ec>
 801ea5e:	2900      	cmp	r1, #0
 801ea60:	dc2c      	bgt.n	801eabc <__kernel_rem_pio2+0x434>
 801ea62:	d045      	beq.n	801eaf0 <__kernel_rem_pio2+0x468>
 801ea64:	f008 0007 	and.w	r0, r8, #7
 801ea68:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 801ea6c:	ecbd 8b06 	vpop	{d8-d10}
 801ea70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea74:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 801ea76:	2a03      	cmp	r2, #3
 801ea78:	d1f4      	bne.n	801ea64 <__kernel_rem_pio2+0x3dc>
 801ea7a:	aa42      	add	r2, sp, #264	; 0x108
 801ea7c:	4413      	add	r3, r2
 801ea7e:	461a      	mov	r2, r3
 801ea80:	4619      	mov	r1, r3
 801ea82:	4658      	mov	r0, fp
 801ea84:	2800      	cmp	r0, #0
 801ea86:	f1a1 0108 	sub.w	r1, r1, #8
 801ea8a:	dc54      	bgt.n	801eb36 <__kernel_rem_pio2+0x4ae>
 801ea8c:	4659      	mov	r1, fp
 801ea8e:	2901      	cmp	r1, #1
 801ea90:	f1a2 0208 	sub.w	r2, r2, #8
 801ea94:	dc5f      	bgt.n	801eb56 <__kernel_rem_pio2+0x4ce>
 801ea96:	ed9f 7b46 	vldr	d7, [pc, #280]	; 801ebb0 <__kernel_rem_pio2+0x528>
 801ea9a:	3308      	adds	r3, #8
 801ea9c:	f1bb 0f01 	cmp.w	fp, #1
 801eaa0:	dc69      	bgt.n	801eb76 <__kernel_rem_pio2+0x4ee>
 801eaa2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 801eaa6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 801eaaa:	2e00      	cmp	r6, #0
 801eaac:	d16a      	bne.n	801eb84 <__kernel_rem_pio2+0x4fc>
 801eaae:	ed87 5b00 	vstr	d5, [r7]
 801eab2:	ed87 6b02 	vstr	d6, [r7, #8]
 801eab6:	ed87 7b04 	vstr	d7, [r7, #16]
 801eaba:	e7d3      	b.n	801ea64 <__kernel_rem_pio2+0x3dc>
 801eabc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 801ebb0 <__kernel_rem_pio2+0x528>
 801eac0:	ab42      	add	r3, sp, #264	; 0x108
 801eac2:	441a      	add	r2, r3
 801eac4:	465b      	mov	r3, fp
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	da26      	bge.n	801eb18 <__kernel_rem_pio2+0x490>
 801eaca:	b35e      	cbz	r6, 801eb24 <__kernel_rem_pio2+0x49c>
 801eacc:	eeb1 7b46 	vneg.f64	d7, d6
 801ead0:	ed87 7b00 	vstr	d7, [r7]
 801ead4:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 801ead8:	aa44      	add	r2, sp, #272	; 0x110
 801eada:	2301      	movs	r3, #1
 801eadc:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eae0:	459b      	cmp	fp, r3
 801eae2:	da22      	bge.n	801eb2a <__kernel_rem_pio2+0x4a2>
 801eae4:	b10e      	cbz	r6, 801eaea <__kernel_rem_pio2+0x462>
 801eae6:	eeb1 7b47 	vneg.f64	d7, d7
 801eaea:	ed87 7b02 	vstr	d7, [r7, #8]
 801eaee:	e7b9      	b.n	801ea64 <__kernel_rem_pio2+0x3dc>
 801eaf0:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 801ebb0 <__kernel_rem_pio2+0x528>
 801eaf4:	ab42      	add	r3, sp, #264	; 0x108
 801eaf6:	441a      	add	r2, r3
 801eaf8:	f1bb 0f00 	cmp.w	fp, #0
 801eafc:	da05      	bge.n	801eb0a <__kernel_rem_pio2+0x482>
 801eafe:	b10e      	cbz	r6, 801eb04 <__kernel_rem_pio2+0x47c>
 801eb00:	eeb1 7b47 	vneg.f64	d7, d7
 801eb04:	ed87 7b00 	vstr	d7, [r7]
 801eb08:	e7ac      	b.n	801ea64 <__kernel_rem_pio2+0x3dc>
 801eb0a:	ed32 6b02 	vldmdb	r2!, {d6}
 801eb0e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801eb12:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eb16:	e7ef      	b.n	801eaf8 <__kernel_rem_pio2+0x470>
 801eb18:	ed32 7b02 	vldmdb	r2!, {d7}
 801eb1c:	3b01      	subs	r3, #1
 801eb1e:	ee36 6b07 	vadd.f64	d6, d6, d7
 801eb22:	e7d0      	b.n	801eac6 <__kernel_rem_pio2+0x43e>
 801eb24:	eeb0 7b46 	vmov.f64	d7, d6
 801eb28:	e7d2      	b.n	801ead0 <__kernel_rem_pio2+0x448>
 801eb2a:	ecb2 6b02 	vldmia	r2!, {d6}
 801eb2e:	3301      	adds	r3, #1
 801eb30:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eb34:	e7d4      	b.n	801eae0 <__kernel_rem_pio2+0x458>
 801eb36:	ed91 7b00 	vldr	d7, [r1]
 801eb3a:	ed91 5b02 	vldr	d5, [r1, #8]
 801eb3e:	3801      	subs	r0, #1
 801eb40:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eb44:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eb48:	ed81 6b00 	vstr	d6, [r1]
 801eb4c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eb50:	ed81 7b02 	vstr	d7, [r1, #8]
 801eb54:	e796      	b.n	801ea84 <__kernel_rem_pio2+0x3fc>
 801eb56:	ed92 7b00 	vldr	d7, [r2]
 801eb5a:	ed92 5b02 	vldr	d5, [r2, #8]
 801eb5e:	3901      	subs	r1, #1
 801eb60:	ee37 6b05 	vadd.f64	d6, d7, d5
 801eb64:	ee37 7b46 	vsub.f64	d7, d7, d6
 801eb68:	ed82 6b00 	vstr	d6, [r2]
 801eb6c:	ee37 7b05 	vadd.f64	d7, d7, d5
 801eb70:	ed82 7b02 	vstr	d7, [r2, #8]
 801eb74:	e78b      	b.n	801ea8e <__kernel_rem_pio2+0x406>
 801eb76:	ed33 6b02 	vldmdb	r3!, {d6}
 801eb7a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 801eb7e:	ee37 7b06 	vadd.f64	d7, d7, d6
 801eb82:	e78b      	b.n	801ea9c <__kernel_rem_pio2+0x414>
 801eb84:	eeb1 5b45 	vneg.f64	d5, d5
 801eb88:	eeb1 6b46 	vneg.f64	d6, d6
 801eb8c:	ed87 5b00 	vstr	d5, [r7]
 801eb90:	eeb1 7b47 	vneg.f64	d7, d7
 801eb94:	ed87 6b02 	vstr	d6, [r7, #8]
 801eb98:	e78d      	b.n	801eab6 <__kernel_rem_pio2+0x42e>
 801eb9a:	bf00      	nop
 801eb9c:	f3af 8000 	nop.w
 801eba0:	00000000 	.word	0x00000000
 801eba4:	41700000 	.word	0x41700000
 801eba8:	00000000 	.word	0x00000000
 801ebac:	3e700000 	.word	0x3e700000
	...

0801ebb8 <__kernel_tan>:
 801ebb8:	eeb0 7b40 	vmov.f64	d7, d0
 801ebbc:	ee17 3a90 	vmov	r3, s15
 801ebc0:	4987      	ldr	r1, [pc, #540]	; (801ede0 <__kernel_tan+0x228>)
 801ebc2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801ebc6:	428a      	cmp	r2, r1
 801ebc8:	b510      	push	{r4, lr}
 801ebca:	dc33      	bgt.n	801ec34 <__kernel_tan+0x7c>
 801ebcc:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 801ebd0:	ee16 1a90 	vmov	r1, s13
 801ebd4:	2900      	cmp	r1, #0
 801ebd6:	d143      	bne.n	801ec60 <__kernel_tan+0xa8>
 801ebd8:	ee10 4a10 	vmov	r4, s0
 801ebdc:	1c43      	adds	r3, r0, #1
 801ebde:	4323      	orrs	r3, r4
 801ebe0:	4313      	orrs	r3, r2
 801ebe2:	d108      	bne.n	801ebf6 <__kernel_tan+0x3e>
 801ebe4:	f000 fc56 	bl	801f494 <fabs>
 801ebe8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ebec:	ee86 7b00 	vdiv.f64	d7, d6, d0
 801ebf0:	eeb0 0b47 	vmov.f64	d0, d7
 801ebf4:	bd10      	pop	{r4, pc}
 801ebf6:	2801      	cmp	r0, #1
 801ebf8:	d0fa      	beq.n	801ebf0 <__kernel_tan+0x38>
 801ebfa:	ee30 6b01 	vadd.f64	d6, d0, d1
 801ebfe:	ec53 2b16 	vmov	r2, r3, d6
 801ec02:	460a      	mov	r2, r1
 801ec04:	ec43 2b15 	vmov	d5, r2, r3
 801ec08:	ee35 7b40 	vsub.f64	d7, d5, d0
 801ec0c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801ec10:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801ec14:	ee87 4b06 	vdiv.f64	d4, d7, d6
 801ec18:	ec53 2b14 	vmov	r2, r3, d4
 801ec1c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ec20:	460a      	mov	r2, r1
 801ec22:	ec43 2b17 	vmov	d7, r2, r3
 801ec26:	eea5 6b07 	vfma.f64	d6, d5, d7
 801ec2a:	eea1 6b07 	vfma.f64	d6, d1, d7
 801ec2e:	eea6 7b04 	vfma.f64	d7, d6, d4
 801ec32:	e7dd      	b.n	801ebf0 <__kernel_tan+0x38>
 801ec34:	496b      	ldr	r1, [pc, #428]	; (801ede4 <__kernel_tan+0x22c>)
 801ec36:	428a      	cmp	r2, r1
 801ec38:	dd12      	ble.n	801ec60 <__kernel_tan+0xa8>
 801ec3a:	ed9f 6b49 	vldr	d6, [pc, #292]	; 801ed60 <__kernel_tan+0x1a8>
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	bfb8      	it	lt
 801ec42:	eeb1 7b40 	vneglt.f64	d7, d0
 801ec46:	ee36 7b47 	vsub.f64	d7, d6, d7
 801ec4a:	ed9f 6b47 	vldr	d6, [pc, #284]	; 801ed68 <__kernel_tan+0x1b0>
 801ec4e:	bfb8      	it	lt
 801ec50:	eeb1 1b41 	vneglt.f64	d1, d1
 801ec54:	ee36 1b41 	vsub.f64	d1, d6, d1
 801ec58:	ee31 7b07 	vadd.f64	d7, d1, d7
 801ec5c:	ed9f 1b44 	vldr	d1, [pc, #272]	; 801ed70 <__kernel_tan+0x1b8>
 801ec60:	ee27 5b07 	vmul.f64	d5, d7, d7
 801ec64:	ee25 6b05 	vmul.f64	d6, d5, d5
 801ec68:	ed9f 3b43 	vldr	d3, [pc, #268]	; 801ed78 <__kernel_tan+0x1c0>
 801ec6c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ed80 <__kernel_tan+0x1c8>
 801ec70:	eea6 4b03 	vfma.f64	d4, d6, d3
 801ec74:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801ed88 <__kernel_tan+0x1d0>
 801ec78:	eea4 3b06 	vfma.f64	d3, d4, d6
 801ec7c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801ed90 <__kernel_tan+0x1d8>
 801ec80:	eea3 4b06 	vfma.f64	d4, d3, d6
 801ec84:	ed9f 3b44 	vldr	d3, [pc, #272]	; 801ed98 <__kernel_tan+0x1e0>
 801ec88:	eea4 3b06 	vfma.f64	d3, d4, d6
 801ec8c:	ed9f 4b44 	vldr	d4, [pc, #272]	; 801eda0 <__kernel_tan+0x1e8>
 801ec90:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801eda8 <__kernel_tan+0x1f0>
 801ec94:	eea3 4b06 	vfma.f64	d4, d3, d6
 801ec98:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801edb0 <__kernel_tan+0x1f8>
 801ec9c:	eea6 3b02 	vfma.f64	d3, d6, d2
 801eca0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801edb8 <__kernel_tan+0x200>
 801eca4:	eea3 2b06 	vfma.f64	d2, d3, d6
 801eca8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801edc0 <__kernel_tan+0x208>
 801ecac:	eea2 3b06 	vfma.f64	d3, d2, d6
 801ecb0:	ed9f 2b45 	vldr	d2, [pc, #276]	; 801edc8 <__kernel_tan+0x210>
 801ecb4:	eea3 2b06 	vfma.f64	d2, d3, d6
 801ecb8:	ed9f 3b45 	vldr	d3, [pc, #276]	; 801edd0 <__kernel_tan+0x218>
 801ecbc:	4949      	ldr	r1, [pc, #292]	; (801ede4 <__kernel_tan+0x22c>)
 801ecbe:	eea2 3b06 	vfma.f64	d3, d2, d6
 801ecc2:	ee27 2b05 	vmul.f64	d2, d7, d5
 801ecc6:	eeb0 6b44 	vmov.f64	d6, d4
 801ecca:	eeb0 4b41 	vmov.f64	d4, d1
 801ecce:	eea3 6b05 	vfma.f64	d6, d3, d5
 801ecd2:	eea6 4b02 	vfma.f64	d4, d6, d2
 801ecd6:	ed9f 6b40 	vldr	d6, [pc, #256]	; 801edd8 <__kernel_tan+0x220>
 801ecda:	eea4 1b05 	vfma.f64	d1, d4, d5
 801ecde:	428a      	cmp	r2, r1
 801ece0:	eea2 1b06 	vfma.f64	d1, d2, d6
 801ece4:	ee37 5b01 	vadd.f64	d5, d7, d1
 801ece8:	dd1d      	ble.n	801ed26 <__kernel_tan+0x16e>
 801ecea:	ee25 3b05 	vmul.f64	d3, d5, d5
 801ecee:	179b      	asrs	r3, r3, #30
 801ecf0:	ee06 0a90 	vmov	s13, r0
 801ecf4:	f003 0302 	and.w	r3, r3, #2
 801ecf8:	f1c3 0301 	rsb	r3, r3, #1
 801ecfc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801ed00:	ee35 5b06 	vadd.f64	d5, d5, d6
 801ed04:	ee83 4b05 	vdiv.f64	d4, d3, d5
 801ed08:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801ed0c:	ee34 1b41 	vsub.f64	d1, d4, d1
 801ed10:	ee37 7b41 	vsub.f64	d7, d7, d1
 801ed14:	eea7 6b45 	vfms.f64	d6, d7, d5
 801ed18:	ee07 3a10 	vmov	s14, r3
 801ed1c:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 801ed20:	ee27 7b06 	vmul.f64	d7, d7, d6
 801ed24:	e764      	b.n	801ebf0 <__kernel_tan+0x38>
 801ed26:	2801      	cmp	r0, #1
 801ed28:	d016      	beq.n	801ed58 <__kernel_tan+0x1a0>
 801ed2a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801ed2e:	ec51 0b15 	vmov	r0, r1, d5
 801ed32:	2000      	movs	r0, #0
 801ed34:	ec41 0b13 	vmov	d3, r0, r1
 801ed38:	ee33 7b47 	vsub.f64	d7, d3, d7
 801ed3c:	ee31 1b47 	vsub.f64	d1, d1, d7
 801ed40:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 801ed44:	ee87 4b05 	vdiv.f64	d4, d7, d5
 801ed48:	ec53 2b14 	vmov	r2, r3, d4
 801ed4c:	4602      	mov	r2, r0
 801ed4e:	ec43 2b17 	vmov	d7, r2, r3
 801ed52:	eea3 6b07 	vfma.f64	d6, d3, d7
 801ed56:	e768      	b.n	801ec2a <__kernel_tan+0x72>
 801ed58:	eeb0 7b45 	vmov.f64	d7, d5
 801ed5c:	e748      	b.n	801ebf0 <__kernel_tan+0x38>
 801ed5e:	bf00      	nop
 801ed60:	54442d18 	.word	0x54442d18
 801ed64:	3fe921fb 	.word	0x3fe921fb
 801ed68:	33145c07 	.word	0x33145c07
 801ed6c:	3c81a626 	.word	0x3c81a626
	...
 801ed78:	db605373 	.word	0xdb605373
 801ed7c:	bef375cb 	.word	0xbef375cb
 801ed80:	a03792a6 	.word	0xa03792a6
 801ed84:	3f147e88 	.word	0x3f147e88
 801ed88:	f2f26501 	.word	0xf2f26501
 801ed8c:	3f4344d8 	.word	0x3f4344d8
 801ed90:	c9560328 	.word	0xc9560328
 801ed94:	3f6d6d22 	.word	0x3f6d6d22
 801ed98:	8406d637 	.word	0x8406d637
 801ed9c:	3f9664f4 	.word	0x3f9664f4
 801eda0:	1110fe7a 	.word	0x1110fe7a
 801eda4:	3fc11111 	.word	0x3fc11111
 801eda8:	74bf7ad4 	.word	0x74bf7ad4
 801edac:	3efb2a70 	.word	0x3efb2a70
 801edb0:	32f0a7e9 	.word	0x32f0a7e9
 801edb4:	3f12b80f 	.word	0x3f12b80f
 801edb8:	1a8d1068 	.word	0x1a8d1068
 801edbc:	3f3026f7 	.word	0x3f3026f7
 801edc0:	fee08315 	.word	0xfee08315
 801edc4:	3f57dbc8 	.word	0x3f57dbc8
 801edc8:	e96e8493 	.word	0xe96e8493
 801edcc:	3f8226e3 	.word	0x3f8226e3
 801edd0:	1bb341fe 	.word	0x1bb341fe
 801edd4:	3faba1ba 	.word	0x3faba1ba
 801edd8:	55555563 	.word	0x55555563
 801eddc:	3fd55555 	.word	0x3fd55555
 801ede0:	3e2fffff 	.word	0x3e2fffff
 801ede4:	3fe59427 	.word	0x3fe59427

0801ede8 <__kernel_rem_pio2f>:
 801ede8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801edec:	ed2d 8b04 	vpush	{d8-d9}
 801edf0:	b0d9      	sub	sp, #356	; 0x164
 801edf2:	4688      	mov	r8, r1
 801edf4:	9002      	str	r0, [sp, #8]
 801edf6:	49bb      	ldr	r1, [pc, #748]	; (801f0e4 <__kernel_rem_pio2f+0x2fc>)
 801edf8:	9866      	ldr	r0, [sp, #408]	; 0x198
 801edfa:	9301      	str	r3, [sp, #4]
 801edfc:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801ee00:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 801ee04:	1e59      	subs	r1, r3, #1
 801ee06:	1d13      	adds	r3, r2, #4
 801ee08:	db27      	blt.n	801ee5a <__kernel_rem_pio2f+0x72>
 801ee0a:	f1b2 0b03 	subs.w	fp, r2, #3
 801ee0e:	bf48      	it	mi
 801ee10:	f102 0b04 	addmi.w	fp, r2, #4
 801ee14:	ea4f 00eb 	mov.w	r0, fp, asr #3
 801ee18:	1c45      	adds	r5, r0, #1
 801ee1a:	00ec      	lsls	r4, r5, #3
 801ee1c:	1a47      	subs	r7, r0, r1
 801ee1e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801ee22:	9403      	str	r4, [sp, #12]
 801ee24:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 801ee28:	eb0a 0c01 	add.w	ip, sl, r1
 801ee2c:	ae1c      	add	r6, sp, #112	; 0x70
 801ee2e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 801ee32:	2400      	movs	r4, #0
 801ee34:	4564      	cmp	r4, ip
 801ee36:	dd12      	ble.n	801ee5e <__kernel_rem_pio2f+0x76>
 801ee38:	9b01      	ldr	r3, [sp, #4]
 801ee3a:	ac1c      	add	r4, sp, #112	; 0x70
 801ee3c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 801ee40:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 801ee44:	f04f 0c00 	mov.w	ip, #0
 801ee48:	45d4      	cmp	ip, sl
 801ee4a:	dc27      	bgt.n	801ee9c <__kernel_rem_pio2f+0xb4>
 801ee4c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 801ee50:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801ee54:	4627      	mov	r7, r4
 801ee56:	2600      	movs	r6, #0
 801ee58:	e016      	b.n	801ee88 <__kernel_rem_pio2f+0xa0>
 801ee5a:	2000      	movs	r0, #0
 801ee5c:	e7dc      	b.n	801ee18 <__kernel_rem_pio2f+0x30>
 801ee5e:	42e7      	cmn	r7, r4
 801ee60:	bf5d      	ittte	pl
 801ee62:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 801ee66:	ee07 3a90 	vmovpl	s15, r3
 801ee6a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801ee6e:	eef0 7a47 	vmovmi.f32	s15, s14
 801ee72:	ece6 7a01 	vstmia	r6!, {s15}
 801ee76:	3401      	adds	r4, #1
 801ee78:	e7dc      	b.n	801ee34 <__kernel_rem_pio2f+0x4c>
 801ee7a:	ecf9 6a01 	vldmia	r9!, {s13}
 801ee7e:	ed97 7a00 	vldr	s14, [r7]
 801ee82:	eee6 7a87 	vfma.f32	s15, s13, s14
 801ee86:	3601      	adds	r6, #1
 801ee88:	428e      	cmp	r6, r1
 801ee8a:	f1a7 0704 	sub.w	r7, r7, #4
 801ee8e:	ddf4      	ble.n	801ee7a <__kernel_rem_pio2f+0x92>
 801ee90:	eceb 7a01 	vstmia	fp!, {s15}
 801ee94:	f10c 0c01 	add.w	ip, ip, #1
 801ee98:	3404      	adds	r4, #4
 801ee9a:	e7d5      	b.n	801ee48 <__kernel_rem_pio2f+0x60>
 801ee9c:	ab08      	add	r3, sp, #32
 801ee9e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801eea2:	eddf 8a93 	vldr	s17, [pc, #588]	; 801f0f0 <__kernel_rem_pio2f+0x308>
 801eea6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 801f0ec <__kernel_rem_pio2f+0x304>
 801eeaa:	9304      	str	r3, [sp, #16]
 801eeac:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 801eeb0:	4656      	mov	r6, sl
 801eeb2:	00b3      	lsls	r3, r6, #2
 801eeb4:	9305      	str	r3, [sp, #20]
 801eeb6:	ab58      	add	r3, sp, #352	; 0x160
 801eeb8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801eebc:	ac08      	add	r4, sp, #32
 801eebe:	ab44      	add	r3, sp, #272	; 0x110
 801eec0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 801eec4:	46a4      	mov	ip, r4
 801eec6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 801eeca:	4637      	mov	r7, r6
 801eecc:	2f00      	cmp	r7, #0
 801eece:	f1a0 0004 	sub.w	r0, r0, #4
 801eed2:	dc4f      	bgt.n	801ef74 <__kernel_rem_pio2f+0x18c>
 801eed4:	4628      	mov	r0, r5
 801eed6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801eeda:	f000 fd3f 	bl	801f95c <scalbnf>
 801eede:	eeb0 8a40 	vmov.f32	s16, s0
 801eee2:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801eee6:	ee28 0a00 	vmul.f32	s0, s16, s0
 801eeea:	f000 fcf5 	bl	801f8d8 <floorf>
 801eeee:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801eef2:	eea0 8a67 	vfms.f32	s16, s0, s15
 801eef6:	2d00      	cmp	r5, #0
 801eef8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801eefc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801ef00:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801ef04:	ee17 9a90 	vmov	r9, s15
 801ef08:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ef0c:	dd44      	ble.n	801ef98 <__kernel_rem_pio2f+0x1b0>
 801ef0e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 801ef12:	ab08      	add	r3, sp, #32
 801ef14:	f1c5 0e08 	rsb	lr, r5, #8
 801ef18:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 801ef1c:	fa47 f00e 	asr.w	r0, r7, lr
 801ef20:	4481      	add	r9, r0
 801ef22:	fa00 f00e 	lsl.w	r0, r0, lr
 801ef26:	1a3f      	subs	r7, r7, r0
 801ef28:	f1c5 0007 	rsb	r0, r5, #7
 801ef2c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 801ef30:	4107      	asrs	r7, r0
 801ef32:	2f00      	cmp	r7, #0
 801ef34:	dd3f      	ble.n	801efb6 <__kernel_rem_pio2f+0x1ce>
 801ef36:	f04f 0e00 	mov.w	lr, #0
 801ef3a:	f109 0901 	add.w	r9, r9, #1
 801ef3e:	4673      	mov	r3, lr
 801ef40:	4576      	cmp	r6, lr
 801ef42:	dc6b      	bgt.n	801f01c <__kernel_rem_pio2f+0x234>
 801ef44:	2d00      	cmp	r5, #0
 801ef46:	dd04      	ble.n	801ef52 <__kernel_rem_pio2f+0x16a>
 801ef48:	2d01      	cmp	r5, #1
 801ef4a:	d078      	beq.n	801f03e <__kernel_rem_pio2f+0x256>
 801ef4c:	2d02      	cmp	r5, #2
 801ef4e:	f000 8081 	beq.w	801f054 <__kernel_rem_pio2f+0x26c>
 801ef52:	2f02      	cmp	r7, #2
 801ef54:	d12f      	bne.n	801efb6 <__kernel_rem_pio2f+0x1ce>
 801ef56:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801ef5a:	ee30 8a48 	vsub.f32	s16, s0, s16
 801ef5e:	b353      	cbz	r3, 801efb6 <__kernel_rem_pio2f+0x1ce>
 801ef60:	4628      	mov	r0, r5
 801ef62:	e9cd 1206 	strd	r1, r2, [sp, #24]
 801ef66:	f000 fcf9 	bl	801f95c <scalbnf>
 801ef6a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801ef6e:	ee38 8a40 	vsub.f32	s16, s16, s0
 801ef72:	e020      	b.n	801efb6 <__kernel_rem_pio2f+0x1ce>
 801ef74:	ee60 7a28 	vmul.f32	s15, s0, s17
 801ef78:	3f01      	subs	r7, #1
 801ef7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801ef7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801ef82:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801ef86:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801ef8a:	ecac 0a01 	vstmia	ip!, {s0}
 801ef8e:	ed90 0a00 	vldr	s0, [r0]
 801ef92:	ee37 0a80 	vadd.f32	s0, s15, s0
 801ef96:	e799      	b.n	801eecc <__kernel_rem_pio2f+0xe4>
 801ef98:	d105      	bne.n	801efa6 <__kernel_rem_pio2f+0x1be>
 801ef9a:	1e70      	subs	r0, r6, #1
 801ef9c:	ab08      	add	r3, sp, #32
 801ef9e:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 801efa2:	11ff      	asrs	r7, r7, #7
 801efa4:	e7c5      	b.n	801ef32 <__kernel_rem_pio2f+0x14a>
 801efa6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801efaa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801efae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efb2:	da31      	bge.n	801f018 <__kernel_rem_pio2f+0x230>
 801efb4:	2700      	movs	r7, #0
 801efb6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801efba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801efbe:	f040 809b 	bne.w	801f0f8 <__kernel_rem_pio2f+0x310>
 801efc2:	1e74      	subs	r4, r6, #1
 801efc4:	46a4      	mov	ip, r4
 801efc6:	2000      	movs	r0, #0
 801efc8:	45d4      	cmp	ip, sl
 801efca:	da4a      	bge.n	801f062 <__kernel_rem_pio2f+0x27a>
 801efcc:	2800      	cmp	r0, #0
 801efce:	d07a      	beq.n	801f0c6 <__kernel_rem_pio2f+0x2de>
 801efd0:	ab08      	add	r3, sp, #32
 801efd2:	3d08      	subs	r5, #8
 801efd4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801efd8:	2b00      	cmp	r3, #0
 801efda:	f000 8081 	beq.w	801f0e0 <__kernel_rem_pio2f+0x2f8>
 801efde:	4628      	mov	r0, r5
 801efe0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801efe4:	00a5      	lsls	r5, r4, #2
 801efe6:	f000 fcb9 	bl	801f95c <scalbnf>
 801efea:	aa44      	add	r2, sp, #272	; 0x110
 801efec:	1d2b      	adds	r3, r5, #4
 801efee:	ed9f 7a40 	vldr	s14, [pc, #256]	; 801f0f0 <__kernel_rem_pio2f+0x308>
 801eff2:	18d1      	adds	r1, r2, r3
 801eff4:	4622      	mov	r2, r4
 801eff6:	2a00      	cmp	r2, #0
 801eff8:	f280 80ae 	bge.w	801f158 <__kernel_rem_pio2f+0x370>
 801effc:	4622      	mov	r2, r4
 801effe:	2a00      	cmp	r2, #0
 801f000:	f2c0 80cc 	blt.w	801f19c <__kernel_rem_pio2f+0x3b4>
 801f004:	a944      	add	r1, sp, #272	; 0x110
 801f006:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 801f00a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 801f0e8 <__kernel_rem_pio2f+0x300>
 801f00e:	eddf 7a39 	vldr	s15, [pc, #228]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801f012:	2000      	movs	r0, #0
 801f014:	1aa1      	subs	r1, r4, r2
 801f016:	e0b6      	b.n	801f186 <__kernel_rem_pio2f+0x39e>
 801f018:	2702      	movs	r7, #2
 801f01a:	e78c      	b.n	801ef36 <__kernel_rem_pio2f+0x14e>
 801f01c:	6820      	ldr	r0, [r4, #0]
 801f01e:	b94b      	cbnz	r3, 801f034 <__kernel_rem_pio2f+0x24c>
 801f020:	b118      	cbz	r0, 801f02a <__kernel_rem_pio2f+0x242>
 801f022:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801f026:	6020      	str	r0, [r4, #0]
 801f028:	2001      	movs	r0, #1
 801f02a:	f10e 0e01 	add.w	lr, lr, #1
 801f02e:	3404      	adds	r4, #4
 801f030:	4603      	mov	r3, r0
 801f032:	e785      	b.n	801ef40 <__kernel_rem_pio2f+0x158>
 801f034:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 801f038:	6020      	str	r0, [r4, #0]
 801f03a:	4618      	mov	r0, r3
 801f03c:	e7f5      	b.n	801f02a <__kernel_rem_pio2f+0x242>
 801f03e:	1e74      	subs	r4, r6, #1
 801f040:	a808      	add	r0, sp, #32
 801f042:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801f046:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 801f04a:	f10d 0c20 	add.w	ip, sp, #32
 801f04e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 801f052:	e77e      	b.n	801ef52 <__kernel_rem_pio2f+0x16a>
 801f054:	1e74      	subs	r4, r6, #1
 801f056:	a808      	add	r0, sp, #32
 801f058:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 801f05c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 801f060:	e7f3      	b.n	801f04a <__kernel_rem_pio2f+0x262>
 801f062:	ab08      	add	r3, sp, #32
 801f064:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801f068:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 801f06c:	4318      	orrs	r0, r3
 801f06e:	e7ab      	b.n	801efc8 <__kernel_rem_pio2f+0x1e0>
 801f070:	f10c 0c01 	add.w	ip, ip, #1
 801f074:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 801f078:	2c00      	cmp	r4, #0
 801f07a:	d0f9      	beq.n	801f070 <__kernel_rem_pio2f+0x288>
 801f07c:	9b05      	ldr	r3, [sp, #20]
 801f07e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801f082:	eb0d 0003 	add.w	r0, sp, r3
 801f086:	9b01      	ldr	r3, [sp, #4]
 801f088:	18f4      	adds	r4, r6, r3
 801f08a:	ab1c      	add	r3, sp, #112	; 0x70
 801f08c:	1c77      	adds	r7, r6, #1
 801f08e:	384c      	subs	r0, #76	; 0x4c
 801f090:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f094:	4466      	add	r6, ip
 801f096:	42be      	cmp	r6, r7
 801f098:	f6ff af0b 	blt.w	801eeb2 <__kernel_rem_pio2f+0xca>
 801f09c:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 801f0a0:	f8dd e008 	ldr.w	lr, [sp, #8]
 801f0a4:	ee07 3a90 	vmov	s15, r3
 801f0a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f0ac:	f04f 0c00 	mov.w	ip, #0
 801f0b0:	ece4 7a01 	vstmia	r4!, {s15}
 801f0b4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801f0b8:	46a1      	mov	r9, r4
 801f0ba:	458c      	cmp	ip, r1
 801f0bc:	dd07      	ble.n	801f0ce <__kernel_rem_pio2f+0x2e6>
 801f0be:	ece0 7a01 	vstmia	r0!, {s15}
 801f0c2:	3701      	adds	r7, #1
 801f0c4:	e7e7      	b.n	801f096 <__kernel_rem_pio2f+0x2ae>
 801f0c6:	9804      	ldr	r0, [sp, #16]
 801f0c8:	f04f 0c01 	mov.w	ip, #1
 801f0cc:	e7d2      	b.n	801f074 <__kernel_rem_pio2f+0x28c>
 801f0ce:	ecfe 6a01 	vldmia	lr!, {s13}
 801f0d2:	ed39 7a01 	vldmdb	r9!, {s14}
 801f0d6:	f10c 0c01 	add.w	ip, ip, #1
 801f0da:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f0de:	e7ec      	b.n	801f0ba <__kernel_rem_pio2f+0x2d2>
 801f0e0:	3c01      	subs	r4, #1
 801f0e2:	e775      	b.n	801efd0 <__kernel_rem_pio2f+0x1e8>
 801f0e4:	08038934 	.word	0x08038934
 801f0e8:	08038908 	.word	0x08038908
 801f0ec:	43800000 	.word	0x43800000
 801f0f0:	3b800000 	.word	0x3b800000
 801f0f4:	00000000 	.word	0x00000000
 801f0f8:	9b03      	ldr	r3, [sp, #12]
 801f0fa:	eeb0 0a48 	vmov.f32	s0, s16
 801f0fe:	1a98      	subs	r0, r3, r2
 801f100:	f000 fc2c 	bl	801f95c <scalbnf>
 801f104:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801f0ec <__kernel_rem_pio2f+0x304>
 801f108:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f10c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f110:	db19      	blt.n	801f146 <__kernel_rem_pio2f+0x35e>
 801f112:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801f0f0 <__kernel_rem_pio2f+0x308>
 801f116:	ee60 7a27 	vmul.f32	s15, s0, s15
 801f11a:	aa08      	add	r2, sp, #32
 801f11c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f120:	1c74      	adds	r4, r6, #1
 801f122:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f126:	3508      	adds	r5, #8
 801f128:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f12c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f130:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f134:	ee10 3a10 	vmov	r3, s0
 801f138:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801f13c:	ee17 3a90 	vmov	r3, s15
 801f140:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 801f144:	e74b      	b.n	801efde <__kernel_rem_pio2f+0x1f6>
 801f146:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801f14a:	aa08      	add	r2, sp, #32
 801f14c:	ee10 3a10 	vmov	r3, s0
 801f150:	4634      	mov	r4, r6
 801f152:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 801f156:	e742      	b.n	801efde <__kernel_rem_pio2f+0x1f6>
 801f158:	a808      	add	r0, sp, #32
 801f15a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 801f15e:	9001      	str	r0, [sp, #4]
 801f160:	ee07 0a90 	vmov	s15, r0
 801f164:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f168:	3a01      	subs	r2, #1
 801f16a:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f16e:	ee20 0a07 	vmul.f32	s0, s0, s14
 801f172:	ed61 7a01 	vstmdb	r1!, {s15}
 801f176:	e73e      	b.n	801eff6 <__kernel_rem_pio2f+0x20e>
 801f178:	ecfc 6a01 	vldmia	ip!, {s13}
 801f17c:	ecb6 7a01 	vldmia	r6!, {s14}
 801f180:	eee6 7a87 	vfma.f32	s15, s13, s14
 801f184:	3001      	adds	r0, #1
 801f186:	4550      	cmp	r0, sl
 801f188:	dc01      	bgt.n	801f18e <__kernel_rem_pio2f+0x3a6>
 801f18a:	4288      	cmp	r0, r1
 801f18c:	ddf4      	ble.n	801f178 <__kernel_rem_pio2f+0x390>
 801f18e:	a858      	add	r0, sp, #352	; 0x160
 801f190:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f194:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801f198:	3a01      	subs	r2, #1
 801f19a:	e730      	b.n	801effe <__kernel_rem_pio2f+0x216>
 801f19c:	9a66      	ldr	r2, [sp, #408]	; 0x198
 801f19e:	2a02      	cmp	r2, #2
 801f1a0:	dc09      	bgt.n	801f1b6 <__kernel_rem_pio2f+0x3ce>
 801f1a2:	2a00      	cmp	r2, #0
 801f1a4:	dc2a      	bgt.n	801f1fc <__kernel_rem_pio2f+0x414>
 801f1a6:	d043      	beq.n	801f230 <__kernel_rem_pio2f+0x448>
 801f1a8:	f009 0007 	and.w	r0, r9, #7
 801f1ac:	b059      	add	sp, #356	; 0x164
 801f1ae:	ecbd 8b04 	vpop	{d8-d9}
 801f1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f1b6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 801f1b8:	2b03      	cmp	r3, #3
 801f1ba:	d1f5      	bne.n	801f1a8 <__kernel_rem_pio2f+0x3c0>
 801f1bc:	ab30      	add	r3, sp, #192	; 0xc0
 801f1be:	442b      	add	r3, r5
 801f1c0:	461a      	mov	r2, r3
 801f1c2:	4619      	mov	r1, r3
 801f1c4:	4620      	mov	r0, r4
 801f1c6:	2800      	cmp	r0, #0
 801f1c8:	f1a1 0104 	sub.w	r1, r1, #4
 801f1cc:	dc51      	bgt.n	801f272 <__kernel_rem_pio2f+0x48a>
 801f1ce:	4621      	mov	r1, r4
 801f1d0:	2901      	cmp	r1, #1
 801f1d2:	f1a2 0204 	sub.w	r2, r2, #4
 801f1d6:	dc5c      	bgt.n	801f292 <__kernel_rem_pio2f+0x4aa>
 801f1d8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801f1dc:	3304      	adds	r3, #4
 801f1de:	2c01      	cmp	r4, #1
 801f1e0:	dc67      	bgt.n	801f2b2 <__kernel_rem_pio2f+0x4ca>
 801f1e2:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 801f1e6:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 801f1ea:	2f00      	cmp	r7, #0
 801f1ec:	d167      	bne.n	801f2be <__kernel_rem_pio2f+0x4d6>
 801f1ee:	edc8 6a00 	vstr	s13, [r8]
 801f1f2:	ed88 7a01 	vstr	s14, [r8, #4]
 801f1f6:	edc8 7a02 	vstr	s15, [r8, #8]
 801f1fa:	e7d5      	b.n	801f1a8 <__kernel_rem_pio2f+0x3c0>
 801f1fc:	aa30      	add	r2, sp, #192	; 0xc0
 801f1fe:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801f202:	4413      	add	r3, r2
 801f204:	4622      	mov	r2, r4
 801f206:	2a00      	cmp	r2, #0
 801f208:	da24      	bge.n	801f254 <__kernel_rem_pio2f+0x46c>
 801f20a:	b34f      	cbz	r7, 801f260 <__kernel_rem_pio2f+0x478>
 801f20c:	eef1 7a47 	vneg.f32	s15, s14
 801f210:	edc8 7a00 	vstr	s15, [r8]
 801f214:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 801f218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f21c:	aa31      	add	r2, sp, #196	; 0xc4
 801f21e:	2301      	movs	r3, #1
 801f220:	429c      	cmp	r4, r3
 801f222:	da20      	bge.n	801f266 <__kernel_rem_pio2f+0x47e>
 801f224:	b10f      	cbz	r7, 801f22a <__kernel_rem_pio2f+0x442>
 801f226:	eef1 7a67 	vneg.f32	s15, s15
 801f22a:	edc8 7a01 	vstr	s15, [r8, #4]
 801f22e:	e7bb      	b.n	801f1a8 <__kernel_rem_pio2f+0x3c0>
 801f230:	aa30      	add	r2, sp, #192	; 0xc0
 801f232:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 801f0f4 <__kernel_rem_pio2f+0x30c>
 801f236:	4413      	add	r3, r2
 801f238:	2c00      	cmp	r4, #0
 801f23a:	da05      	bge.n	801f248 <__kernel_rem_pio2f+0x460>
 801f23c:	b10f      	cbz	r7, 801f242 <__kernel_rem_pio2f+0x45a>
 801f23e:	eef1 7a67 	vneg.f32	s15, s15
 801f242:	edc8 7a00 	vstr	s15, [r8]
 801f246:	e7af      	b.n	801f1a8 <__kernel_rem_pio2f+0x3c0>
 801f248:	ed33 7a01 	vldmdb	r3!, {s14}
 801f24c:	3c01      	subs	r4, #1
 801f24e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f252:	e7f1      	b.n	801f238 <__kernel_rem_pio2f+0x450>
 801f254:	ed73 7a01 	vldmdb	r3!, {s15}
 801f258:	3a01      	subs	r2, #1
 801f25a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801f25e:	e7d2      	b.n	801f206 <__kernel_rem_pio2f+0x41e>
 801f260:	eef0 7a47 	vmov.f32	s15, s14
 801f264:	e7d4      	b.n	801f210 <__kernel_rem_pio2f+0x428>
 801f266:	ecb2 7a01 	vldmia	r2!, {s14}
 801f26a:	3301      	adds	r3, #1
 801f26c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f270:	e7d6      	b.n	801f220 <__kernel_rem_pio2f+0x438>
 801f272:	edd1 7a00 	vldr	s15, [r1]
 801f276:	edd1 6a01 	vldr	s13, [r1, #4]
 801f27a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f27e:	3801      	subs	r0, #1
 801f280:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f284:	ed81 7a00 	vstr	s14, [r1]
 801f288:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f28c:	edc1 7a01 	vstr	s15, [r1, #4]
 801f290:	e799      	b.n	801f1c6 <__kernel_rem_pio2f+0x3de>
 801f292:	edd2 7a00 	vldr	s15, [r2]
 801f296:	edd2 6a01 	vldr	s13, [r2, #4]
 801f29a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801f29e:	3901      	subs	r1, #1
 801f2a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f2a4:	ed82 7a00 	vstr	s14, [r2]
 801f2a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801f2ac:	edc2 7a01 	vstr	s15, [r2, #4]
 801f2b0:	e78e      	b.n	801f1d0 <__kernel_rem_pio2f+0x3e8>
 801f2b2:	ed33 7a01 	vldmdb	r3!, {s14}
 801f2b6:	3c01      	subs	r4, #1
 801f2b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f2bc:	e78f      	b.n	801f1de <__kernel_rem_pio2f+0x3f6>
 801f2be:	eef1 6a66 	vneg.f32	s13, s13
 801f2c2:	eeb1 7a47 	vneg.f32	s14, s14
 801f2c6:	edc8 6a00 	vstr	s13, [r8]
 801f2ca:	ed88 7a01 	vstr	s14, [r8, #4]
 801f2ce:	eef1 7a67 	vneg.f32	s15, s15
 801f2d2:	e790      	b.n	801f1f6 <__kernel_rem_pio2f+0x40e>

0801f2d4 <__kernel_tanf>:
 801f2d4:	b508      	push	{r3, lr}
 801f2d6:	ee10 3a10 	vmov	r3, s0
 801f2da:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801f2de:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801f2e2:	eef0 7a40 	vmov.f32	s15, s0
 801f2e6:	da17      	bge.n	801f318 <__kernel_tanf+0x44>
 801f2e8:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 801f2ec:	ee17 1a10 	vmov	r1, s14
 801f2f0:	bb41      	cbnz	r1, 801f344 <__kernel_tanf+0x70>
 801f2f2:	1c43      	adds	r3, r0, #1
 801f2f4:	4313      	orrs	r3, r2
 801f2f6:	d108      	bne.n	801f30a <__kernel_tanf+0x36>
 801f2f8:	f7fe fc3a 	bl	801db70 <fabsf>
 801f2fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f300:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f304:	eeb0 0a67 	vmov.f32	s0, s15
 801f308:	bd08      	pop	{r3, pc}
 801f30a:	2801      	cmp	r0, #1
 801f30c:	d0fa      	beq.n	801f304 <__kernel_tanf+0x30>
 801f30e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801f312:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f316:	e7f5      	b.n	801f304 <__kernel_tanf+0x30>
 801f318:	494c      	ldr	r1, [pc, #304]	; (801f44c <__kernel_tanf+0x178>)
 801f31a:	428a      	cmp	r2, r1
 801f31c:	db12      	blt.n	801f344 <__kernel_tanf+0x70>
 801f31e:	2b00      	cmp	r3, #0
 801f320:	bfb8      	it	lt
 801f322:	eef1 7a40 	vneglt.f32	s15, s0
 801f326:	ed9f 0a4a 	vldr	s0, [pc, #296]	; 801f450 <__kernel_tanf+0x17c>
 801f32a:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f32e:	ed9f 0a49 	vldr	s0, [pc, #292]	; 801f454 <__kernel_tanf+0x180>
 801f332:	bfb8      	it	lt
 801f334:	eef1 0a60 	vneglt.f32	s1, s1
 801f338:	ee70 0a60 	vsub.f32	s1, s0, s1
 801f33c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 801f340:	eddf 0a45 	vldr	s1, [pc, #276]	; 801f458 <__kernel_tanf+0x184>
 801f344:	eddf 5a45 	vldr	s11, [pc, #276]	; 801f45c <__kernel_tanf+0x188>
 801f348:	ed9f 6a45 	vldr	s12, [pc, #276]	; 801f460 <__kernel_tanf+0x18c>
 801f34c:	ed9f 5a45 	vldr	s10, [pc, #276]	; 801f464 <__kernel_tanf+0x190>
 801f350:	493e      	ldr	r1, [pc, #248]	; (801f44c <__kernel_tanf+0x178>)
 801f352:	ee67 6aa7 	vmul.f32	s13, s15, s15
 801f356:	428a      	cmp	r2, r1
 801f358:	ee26 7aa6 	vmul.f32	s14, s13, s13
 801f35c:	eea7 6a25 	vfma.f32	s12, s14, s11
 801f360:	eddf 5a41 	vldr	s11, [pc, #260]	; 801f468 <__kernel_tanf+0x194>
 801f364:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f368:	ed9f 6a40 	vldr	s12, [pc, #256]	; 801f46c <__kernel_tanf+0x198>
 801f36c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f370:	eddf 5a3f 	vldr	s11, [pc, #252]	; 801f470 <__kernel_tanf+0x19c>
 801f374:	eee6 5a07 	vfma.f32	s11, s12, s14
 801f378:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801f474 <__kernel_tanf+0x1a0>
 801f37c:	eea5 6a87 	vfma.f32	s12, s11, s14
 801f380:	eddf 5a3d 	vldr	s11, [pc, #244]	; 801f478 <__kernel_tanf+0x1a4>
 801f384:	eee7 5a05 	vfma.f32	s11, s14, s10
 801f388:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 801f47c <__kernel_tanf+0x1a8>
 801f38c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f390:	eddf 5a3b 	vldr	s11, [pc, #236]	; 801f480 <__kernel_tanf+0x1ac>
 801f394:	eee5 5a07 	vfma.f32	s11, s10, s14
 801f398:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801f484 <__kernel_tanf+0x1b0>
 801f39c:	eea5 5a87 	vfma.f32	s10, s11, s14
 801f3a0:	eddf 5a39 	vldr	s11, [pc, #228]	; 801f488 <__kernel_tanf+0x1b4>
 801f3a4:	eee5 5a07 	vfma.f32	s11, s10, s14
 801f3a8:	eeb0 7a46 	vmov.f32	s14, s12
 801f3ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801f3b0:	ee27 5aa6 	vmul.f32	s10, s15, s13
 801f3b4:	eeb0 6a60 	vmov.f32	s12, s1
 801f3b8:	eea7 6a05 	vfma.f32	s12, s14, s10
 801f3bc:	ed9f 7a33 	vldr	s14, [pc, #204]	; 801f48c <__kernel_tanf+0x1b8>
 801f3c0:	eee6 0a26 	vfma.f32	s1, s12, s13
 801f3c4:	eee5 0a07 	vfma.f32	s1, s10, s14
 801f3c8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 801f3cc:	db1d      	blt.n	801f40a <__kernel_tanf+0x136>
 801f3ce:	ee06 0a90 	vmov	s13, r0
 801f3d2:	eeb8 0ae6 	vcvt.f32.s32	s0, s13
 801f3d6:	ee27 6a07 	vmul.f32	s12, s14, s14
 801f3da:	ee37 7a00 	vadd.f32	s14, s14, s0
 801f3de:	179b      	asrs	r3, r3, #30
 801f3e0:	eec6 6a07 	vdiv.f32	s13, s12, s14
 801f3e4:	f003 0302 	and.w	r3, r3, #2
 801f3e8:	f1c3 0301 	rsb	r3, r3, #1
 801f3ec:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801f3f0:	ee76 0ae0 	vsub.f32	s1, s13, s1
 801f3f4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801f3f8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801f3fc:	ee07 3a90 	vmov	s15, r3
 801f400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f404:	ee67 7a80 	vmul.f32	s15, s15, s0
 801f408:	e77c      	b.n	801f304 <__kernel_tanf+0x30>
 801f40a:	2801      	cmp	r0, #1
 801f40c:	d01b      	beq.n	801f446 <__kernel_tanf+0x172>
 801f40e:	4b20      	ldr	r3, [pc, #128]	; (801f490 <__kernel_tanf+0x1bc>)
 801f410:	ee17 2a10 	vmov	r2, s14
 801f414:	401a      	ands	r2, r3
 801f416:	ee06 2a10 	vmov	s12, r2
 801f41a:	ee76 7a67 	vsub.f32	s15, s12, s15
 801f41e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801f422:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801f426:	eec7 6a87 	vdiv.f32	s13, s15, s14
 801f42a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f42e:	ee16 2a90 	vmov	r2, s13
 801f432:	4013      	ands	r3, r2
 801f434:	ee07 3a90 	vmov	s15, r3
 801f438:	eea6 7a27 	vfma.f32	s14, s12, s15
 801f43c:	eea0 7aa7 	vfma.f32	s14, s1, s15
 801f440:	eee7 7a26 	vfma.f32	s15, s14, s13
 801f444:	e75e      	b.n	801f304 <__kernel_tanf+0x30>
 801f446:	eef0 7a47 	vmov.f32	s15, s14
 801f44a:	e75b      	b.n	801f304 <__kernel_tanf+0x30>
 801f44c:	3f2ca140 	.word	0x3f2ca140
 801f450:	3f490fda 	.word	0x3f490fda
 801f454:	33222168 	.word	0x33222168
 801f458:	00000000 	.word	0x00000000
 801f45c:	b79bae5f 	.word	0xb79bae5f
 801f460:	38a3f445 	.word	0x38a3f445
 801f464:	37d95384 	.word	0x37d95384
 801f468:	3a1a26c8 	.word	0x3a1a26c8
 801f46c:	3b6b6916 	.word	0x3b6b6916
 801f470:	3cb327a4 	.word	0x3cb327a4
 801f474:	3e088889 	.word	0x3e088889
 801f478:	3895c07a 	.word	0x3895c07a
 801f47c:	398137b9 	.word	0x398137b9
 801f480:	3abede48 	.word	0x3abede48
 801f484:	3c11371f 	.word	0x3c11371f
 801f488:	3d5d0dd1 	.word	0x3d5d0dd1
 801f48c:	3eaaaaab 	.word	0x3eaaaaab
 801f490:	fffff000 	.word	0xfffff000

0801f494 <fabs>:
 801f494:	ec51 0b10 	vmov	r0, r1, d0
 801f498:	ee10 2a10 	vmov	r2, s0
 801f49c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f4a0:	ec43 2b10 	vmov	d0, r2, r3
 801f4a4:	4770      	bx	lr
	...

0801f4a8 <floor>:
 801f4a8:	ee10 1a90 	vmov	r1, s1
 801f4ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801f4b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 801f4b4:	2b13      	cmp	r3, #19
 801f4b6:	b530      	push	{r4, r5, lr}
 801f4b8:	ee10 0a10 	vmov	r0, s0
 801f4bc:	ee10 5a10 	vmov	r5, s0
 801f4c0:	dc31      	bgt.n	801f526 <floor+0x7e>
 801f4c2:	2b00      	cmp	r3, #0
 801f4c4:	da15      	bge.n	801f4f2 <floor+0x4a>
 801f4c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801f580 <floor+0xd8>
 801f4ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f4ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f4d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f4d6:	dd07      	ble.n	801f4e8 <floor+0x40>
 801f4d8:	2900      	cmp	r1, #0
 801f4da:	da4e      	bge.n	801f57a <floor+0xd2>
 801f4dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801f4e0:	4318      	orrs	r0, r3
 801f4e2:	d001      	beq.n	801f4e8 <floor+0x40>
 801f4e4:	4928      	ldr	r1, [pc, #160]	; (801f588 <floor+0xe0>)
 801f4e6:	2000      	movs	r0, #0
 801f4e8:	460b      	mov	r3, r1
 801f4ea:	4602      	mov	r2, r0
 801f4ec:	ec43 2b10 	vmov	d0, r2, r3
 801f4f0:	e020      	b.n	801f534 <floor+0x8c>
 801f4f2:	4a26      	ldr	r2, [pc, #152]	; (801f58c <floor+0xe4>)
 801f4f4:	411a      	asrs	r2, r3
 801f4f6:	ea01 0402 	and.w	r4, r1, r2
 801f4fa:	4304      	orrs	r4, r0
 801f4fc:	d01a      	beq.n	801f534 <floor+0x8c>
 801f4fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 801f580 <floor+0xd8>
 801f502:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f506:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f50a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f50e:	ddeb      	ble.n	801f4e8 <floor+0x40>
 801f510:	2900      	cmp	r1, #0
 801f512:	bfbe      	ittt	lt
 801f514:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 801f518:	fa40 f303 	asrlt.w	r3, r0, r3
 801f51c:	18c9      	addlt	r1, r1, r3
 801f51e:	ea21 0102 	bic.w	r1, r1, r2
 801f522:	2000      	movs	r0, #0
 801f524:	e7e0      	b.n	801f4e8 <floor+0x40>
 801f526:	2b33      	cmp	r3, #51	; 0x33
 801f528:	dd05      	ble.n	801f536 <floor+0x8e>
 801f52a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f52e:	d101      	bne.n	801f534 <floor+0x8c>
 801f530:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f534:	bd30      	pop	{r4, r5, pc}
 801f536:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 801f53a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801f53e:	40e2      	lsrs	r2, r4
 801f540:	4202      	tst	r2, r0
 801f542:	d0f7      	beq.n	801f534 <floor+0x8c>
 801f544:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 801f580 <floor+0xd8>
 801f548:	ee30 0b07 	vadd.f64	d0, d0, d7
 801f54c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801f550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f554:	ddc8      	ble.n	801f4e8 <floor+0x40>
 801f556:	2900      	cmp	r1, #0
 801f558:	da02      	bge.n	801f560 <floor+0xb8>
 801f55a:	2b14      	cmp	r3, #20
 801f55c:	d103      	bne.n	801f566 <floor+0xbe>
 801f55e:	3101      	adds	r1, #1
 801f560:	ea20 0002 	bic.w	r0, r0, r2
 801f564:	e7c0      	b.n	801f4e8 <floor+0x40>
 801f566:	2401      	movs	r4, #1
 801f568:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 801f56c:	fa04 f303 	lsl.w	r3, r4, r3
 801f570:	4418      	add	r0, r3
 801f572:	42a8      	cmp	r0, r5
 801f574:	bf38      	it	cc
 801f576:	1909      	addcc	r1, r1, r4
 801f578:	e7f2      	b.n	801f560 <floor+0xb8>
 801f57a:	2000      	movs	r0, #0
 801f57c:	4601      	mov	r1, r0
 801f57e:	e7b3      	b.n	801f4e8 <floor+0x40>
 801f580:	8800759c 	.word	0x8800759c
 801f584:	7e37e43c 	.word	0x7e37e43c
 801f588:	bff00000 	.word	0xbff00000
 801f58c:	000fffff 	.word	0x000fffff

0801f590 <scalbn>:
 801f590:	ee10 1a90 	vmov	r1, s1
 801f594:	b510      	push	{r4, lr}
 801f596:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801f59a:	b98c      	cbnz	r4, 801f5c0 <scalbn+0x30>
 801f59c:	ee10 3a10 	vmov	r3, s0
 801f5a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801f5a4:	430b      	orrs	r3, r1
 801f5a6:	d011      	beq.n	801f5cc <scalbn+0x3c>
 801f5a8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 801f670 <scalbn+0xe0>
 801f5ac:	4b3c      	ldr	r3, [pc, #240]	; (801f6a0 <scalbn+0x110>)
 801f5ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f5b2:	4298      	cmp	r0, r3
 801f5b4:	da0b      	bge.n	801f5ce <scalbn+0x3e>
 801f5b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 801f678 <scalbn+0xe8>
 801f5ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 801f5be:	e005      	b.n	801f5cc <scalbn+0x3c>
 801f5c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 801f5c4:	429c      	cmp	r4, r3
 801f5c6:	d107      	bne.n	801f5d8 <scalbn+0x48>
 801f5c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 801f5cc:	bd10      	pop	{r4, pc}
 801f5ce:	ee10 1a90 	vmov	r1, s1
 801f5d2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 801f5d6:	3c36      	subs	r4, #54	; 0x36
 801f5d8:	4404      	add	r4, r0
 801f5da:	f240 73fe 	movw	r3, #2046	; 0x7fe
 801f5de:	429c      	cmp	r4, r3
 801f5e0:	dd0d      	ble.n	801f5fe <scalbn+0x6e>
 801f5e2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 801f680 <scalbn+0xf0>
 801f5e6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 801f688 <scalbn+0xf8>
 801f5ea:	eeb0 6b47 	vmov.f64	d6, d7
 801f5ee:	ee10 3a90 	vmov	r3, s1
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	fe27 7b05 	vselge.f64	d7, d7, d5
 801f5f8:	ee27 0b06 	vmul.f64	d0, d7, d6
 801f5fc:	e7e6      	b.n	801f5cc <scalbn+0x3c>
 801f5fe:	2c00      	cmp	r4, #0
 801f600:	dd0a      	ble.n	801f618 <scalbn+0x88>
 801f602:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801f606:	ec53 2b10 	vmov	r2, r3, d0
 801f60a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801f60e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801f612:	ec43 2b10 	vmov	d0, r2, r3
 801f616:	e7d9      	b.n	801f5cc <scalbn+0x3c>
 801f618:	f114 0f35 	cmn.w	r4, #53	; 0x35
 801f61c:	da19      	bge.n	801f652 <scalbn+0xc2>
 801f61e:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f622:	4298      	cmp	r0, r3
 801f624:	ee10 3a90 	vmov	r3, s1
 801f628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f62c:	dd09      	ble.n	801f642 <scalbn+0xb2>
 801f62e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 801f680 <scalbn+0xf0>
 801f632:	ed9f 6b15 	vldr	d6, [pc, #84]	; 801f688 <scalbn+0xf8>
 801f636:	eeb0 7b40 	vmov.f64	d7, d0
 801f63a:	2b00      	cmp	r3, #0
 801f63c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 801f640:	e7bb      	b.n	801f5ba <scalbn+0x2a>
 801f642:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 801f678 <scalbn+0xe8>
 801f646:	ed9f 6b12 	vldr	d6, [pc, #72]	; 801f690 <scalbn+0x100>
 801f64a:	eeb0 7b40 	vmov.f64	d7, d0
 801f64e:	2b00      	cmp	r3, #0
 801f650:	e7f4      	b.n	801f63c <scalbn+0xac>
 801f652:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 801f656:	ec53 2b10 	vmov	r2, r3, d0
 801f65a:	3436      	adds	r4, #54	; 0x36
 801f65c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 801f660:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 801f664:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 801f698 <scalbn+0x108>
 801f668:	ec43 2b10 	vmov	d0, r2, r3
 801f66c:	e7a5      	b.n	801f5ba <scalbn+0x2a>
 801f66e:	bf00      	nop
 801f670:	00000000 	.word	0x00000000
 801f674:	43500000 	.word	0x43500000
 801f678:	c2f8f359 	.word	0xc2f8f359
 801f67c:	01a56e1f 	.word	0x01a56e1f
 801f680:	8800759c 	.word	0x8800759c
 801f684:	7e37e43c 	.word	0x7e37e43c
 801f688:	8800759c 	.word	0x8800759c
 801f68c:	fe37e43c 	.word	0xfe37e43c
 801f690:	c2f8f359 	.word	0xc2f8f359
 801f694:	81a56e1f 	.word	0x81a56e1f
 801f698:	00000000 	.word	0x00000000
 801f69c:	3c900000 	.word	0x3c900000
 801f6a0:	ffff3cb0 	.word	0xffff3cb0

0801f6a4 <expm1f>:
 801f6a4:	ee10 2a10 	vmov	r2, s0
 801f6a8:	497c      	ldr	r1, [pc, #496]	; (801f89c <expm1f+0x1f8>)
 801f6aa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 801f6ae:	428b      	cmp	r3, r1
 801f6b0:	d920      	bls.n	801f6f4 <expm1f+0x50>
 801f6b2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801f6b6:	d902      	bls.n	801f6be <expm1f+0x1a>
 801f6b8:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f6bc:	4770      	bx	lr
 801f6be:	d105      	bne.n	801f6cc <expm1f+0x28>
 801f6c0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 801f6c4:	2a00      	cmp	r2, #0
 801f6c6:	fe20 0a27 	vselge.f32	s0, s0, s15
 801f6ca:	4770      	bx	lr
 801f6cc:	2a00      	cmp	r2, #0
 801f6ce:	db05      	blt.n	801f6dc <expm1f+0x38>
 801f6d0:	4973      	ldr	r1, [pc, #460]	; (801f8a0 <expm1f+0x1fc>)
 801f6d2:	428b      	cmp	r3, r1
 801f6d4:	d95c      	bls.n	801f790 <expm1f+0xec>
 801f6d6:	2000      	movs	r0, #0
 801f6d8:	f7fe b97c 	b.w	801d9d4 <__math_oflowf>
 801f6dc:	eddf 7a71 	vldr	s15, [pc, #452]	; 801f8a4 <expm1f+0x200>
 801f6e0:	ee70 7a27 	vadd.f32	s15, s0, s15
 801f6e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801f6e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f6ec:	d550      	bpl.n	801f790 <expm1f+0xec>
 801f6ee:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 801f6f2:	4770      	bx	lr
 801f6f4:	496c      	ldr	r1, [pc, #432]	; (801f8a8 <expm1f+0x204>)
 801f6f6:	428b      	cmp	r3, r1
 801f6f8:	d966      	bls.n	801f7c8 <expm1f+0x124>
 801f6fa:	496c      	ldr	r1, [pc, #432]	; (801f8ac <expm1f+0x208>)
 801f6fc:	428b      	cmp	r3, r1
 801f6fe:	d847      	bhi.n	801f790 <expm1f+0xec>
 801f700:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 801f8b0 <expm1f+0x20c>
 801f704:	2a00      	cmp	r2, #0
 801f706:	bfa7      	ittee	ge
 801f708:	ee30 7a47 	vsubge.f32	s14, s0, s14
 801f70c:	eddf 7a69 	vldrge	s15, [pc, #420]	; 801f8b4 <expm1f+0x210>
 801f710:	eddf 7a69 	vldrlt	s15, [pc, #420]	; 801f8b8 <expm1f+0x214>
 801f714:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 801f718:	bfac      	ite	ge
 801f71a:	2301      	movge	r3, #1
 801f71c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801f720:	ee37 0a67 	vsub.f32	s0, s14, s15
 801f724:	ee37 7a40 	vsub.f32	s14, s14, s0
 801f728:	ee77 7a67 	vsub.f32	s15, s14, s15
 801f72c:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 801f730:	ee20 4a25 	vmul.f32	s8, s0, s11
 801f734:	ed9f 6a61 	vldr	s12, [pc, #388]	; 801f8bc <expm1f+0x218>
 801f738:	eddf 6a61 	vldr	s13, [pc, #388]	; 801f8c0 <expm1f+0x21c>
 801f73c:	ed9f 5a61 	vldr	s10, [pc, #388]	; 801f8c4 <expm1f+0x220>
 801f740:	ee20 7a04 	vmul.f32	s14, s0, s8
 801f744:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 801f748:	eee7 6a06 	vfma.f32	s13, s14, s12
 801f74c:	ed9f 6a5e 	vldr	s12, [pc, #376]	; 801f8c8 <expm1f+0x224>
 801f750:	eea6 6a87 	vfma.f32	s12, s13, s14
 801f754:	eddf 6a5d 	vldr	s13, [pc, #372]	; 801f8cc <expm1f+0x228>
 801f758:	eee6 6a07 	vfma.f32	s13, s12, s14
 801f75c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801f760:	eea6 5a87 	vfma.f32	s10, s13, s14
 801f764:	eef0 6a46 	vmov.f32	s13, s12
 801f768:	eee5 6a07 	vfma.f32	s13, s10, s14
 801f76c:	eee4 4a66 	vfms.f32	s9, s8, s13
 801f770:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 801f774:	eea0 4a64 	vfms.f32	s8, s0, s9
 801f778:	ee36 5ae4 	vsub.f32	s10, s13, s9
 801f77c:	eec5 6a04 	vdiv.f32	s13, s10, s8
 801f780:	ee66 6a87 	vmul.f32	s13, s13, s14
 801f784:	bb73      	cbnz	r3, 801f7e4 <expm1f+0x140>
 801f786:	eef0 7a47 	vmov.f32	s15, s14
 801f78a:	eed0 7a26 	vfnms.f32	s15, s0, s13
 801f78e:	e024      	b.n	801f7da <expm1f+0x136>
 801f790:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 801f794:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f798:	2a00      	cmp	r2, #0
 801f79a:	fe67 7a87 	vselge.f32	s15, s15, s14
 801f79e:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 801f8d0 <expm1f+0x22c>
 801f7a2:	eddf 6a43 	vldr	s13, [pc, #268]	; 801f8b0 <expm1f+0x20c>
 801f7a6:	ee40 7a07 	vmla.f32	s15, s0, s14
 801f7aa:	eeb0 7a40 	vmov.f32	s14, s0
 801f7ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801f7b2:	ee17 3a90 	vmov	r3, s15
 801f7b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801f7ba:	eea7 7ae6 	vfms.f32	s14, s15, s13
 801f7be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 801f8b4 <expm1f+0x210>
 801f7c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801f7c6:	e7ab      	b.n	801f720 <expm1f+0x7c>
 801f7c8:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 801f7cc:	d208      	bcs.n	801f7e0 <expm1f+0x13c>
 801f7ce:	eddf 7a41 	vldr	s15, [pc, #260]	; 801f8d4 <expm1f+0x230>
 801f7d2:	ee70 7a27 	vadd.f32	s15, s0, s15
 801f7d6:	ee77 7ae7 	vsub.f32	s15, s15, s15
 801f7da:	ee30 0a67 	vsub.f32	s0, s0, s15
 801f7de:	4770      	bx	lr
 801f7e0:	2300      	movs	r3, #0
 801f7e2:	e7a3      	b.n	801f72c <expm1f+0x88>
 801f7e4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 801f7e8:	1c5a      	adds	r2, r3, #1
 801f7ea:	eed6 7a80 	vfnms.f32	s15, s13, s0
 801f7ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f7f2:	d106      	bne.n	801f802 <expm1f+0x15e>
 801f7f4:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f7f8:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 801f7fc:	eea7 0aa5 	vfma.f32	s0, s15, s11
 801f800:	4770      	bx	lr
 801f802:	2b01      	cmp	r3, #1
 801f804:	d118      	bne.n	801f838 <expm1f+0x194>
 801f806:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 801f80a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801f80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f812:	bf5b      	ittet	pl
 801f814:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 801f818:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 801f81c:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 801f820:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 801f824:	bf43      	ittte	mi
 801f826:	ee77 7ac0 	vsubmi.f32	s15, s15, s0
 801f82a:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 801f82e:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 801f832:	eeb0 0a46 	vmovpl.f32	s0, s12
 801f836:	4770      	bx	lr
 801f838:	1c5a      	adds	r2, r3, #1
 801f83a:	2a39      	cmp	r2, #57	; 0x39
 801f83c:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 801f840:	d90b      	bls.n	801f85a <expm1f+0x1b6>
 801f842:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f846:	ee36 0a40 	vsub.f32	s0, s12, s0
 801f84a:	ee10 3a10 	vmov	r3, s0
 801f84e:	440b      	add	r3, r1
 801f850:	ee00 3a10 	vmov	s0, r3
 801f854:	ee30 0a46 	vsub.f32	s0, s0, s12
 801f858:	4770      	bx	lr
 801f85a:	2b16      	cmp	r3, #22
 801f85c:	dc11      	bgt.n	801f882 <expm1f+0x1de>
 801f85e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801f862:	fa42 f303 	asr.w	r3, r2, r3
 801f866:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 801f86a:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f86e:	ee07 3a90 	vmov	s15, r3
 801f872:	ee37 0ac0 	vsub.f32	s0, s15, s0
 801f876:	ee10 3a10 	vmov	r3, s0
 801f87a:	440b      	add	r3, r1
 801f87c:	ee00 3a10 	vmov	s0, r3
 801f880:	4770      	bx	lr
 801f882:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 801f886:	05db      	lsls	r3, r3, #23
 801f888:	ee07 3a10 	vmov	s14, r3
 801f88c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801f890:	ee70 7a67 	vsub.f32	s15, s0, s15
 801f894:	ee37 0a86 	vadd.f32	s0, s15, s12
 801f898:	e7ed      	b.n	801f876 <expm1f+0x1d2>
 801f89a:	bf00      	nop
 801f89c:	4195b843 	.word	0x4195b843
 801f8a0:	42b17217 	.word	0x42b17217
 801f8a4:	0da24260 	.word	0x0da24260
 801f8a8:	3eb17218 	.word	0x3eb17218
 801f8ac:	3f851591 	.word	0x3f851591
 801f8b0:	3f317180 	.word	0x3f317180
 801f8b4:	3717f7d1 	.word	0x3717f7d1
 801f8b8:	b717f7d1 	.word	0xb717f7d1
 801f8bc:	b457edbb 	.word	0xb457edbb
 801f8c0:	36867e54 	.word	0x36867e54
 801f8c4:	bd088889 	.word	0xbd088889
 801f8c8:	b8a670cd 	.word	0xb8a670cd
 801f8cc:	3ad00d01 	.word	0x3ad00d01
 801f8d0:	3fb8aa3b 	.word	0x3fb8aa3b
 801f8d4:	7149f2ca 	.word	0x7149f2ca

0801f8d8 <floorf>:
 801f8d8:	ee10 3a10 	vmov	r3, s0
 801f8dc:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f8e0:	3a7f      	subs	r2, #127	; 0x7f
 801f8e2:	2a16      	cmp	r2, #22
 801f8e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801f8e8:	dc2a      	bgt.n	801f940 <floorf+0x68>
 801f8ea:	2a00      	cmp	r2, #0
 801f8ec:	da11      	bge.n	801f912 <floorf+0x3a>
 801f8ee:	eddf 7a18 	vldr	s15, [pc, #96]	; 801f950 <floorf+0x78>
 801f8f2:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f8f6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f8fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f8fe:	dd05      	ble.n	801f90c <floorf+0x34>
 801f900:	2b00      	cmp	r3, #0
 801f902:	da23      	bge.n	801f94c <floorf+0x74>
 801f904:	4a13      	ldr	r2, [pc, #76]	; (801f954 <floorf+0x7c>)
 801f906:	2900      	cmp	r1, #0
 801f908:	bf18      	it	ne
 801f90a:	4613      	movne	r3, r2
 801f90c:	ee00 3a10 	vmov	s0, r3
 801f910:	4770      	bx	lr
 801f912:	4911      	ldr	r1, [pc, #68]	; (801f958 <floorf+0x80>)
 801f914:	4111      	asrs	r1, r2
 801f916:	420b      	tst	r3, r1
 801f918:	d0fa      	beq.n	801f910 <floorf+0x38>
 801f91a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 801f950 <floorf+0x78>
 801f91e:	ee30 0a27 	vadd.f32	s0, s0, s15
 801f922:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f92a:	ddef      	ble.n	801f90c <floorf+0x34>
 801f92c:	2b00      	cmp	r3, #0
 801f92e:	bfbe      	ittt	lt
 801f930:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 801f934:	fa40 f202 	asrlt.w	r2, r0, r2
 801f938:	189b      	addlt	r3, r3, r2
 801f93a:	ea23 0301 	bic.w	r3, r3, r1
 801f93e:	e7e5      	b.n	801f90c <floorf+0x34>
 801f940:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 801f944:	d3e4      	bcc.n	801f910 <floorf+0x38>
 801f946:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f94a:	4770      	bx	lr
 801f94c:	2300      	movs	r3, #0
 801f94e:	e7dd      	b.n	801f90c <floorf+0x34>
 801f950:	7149f2ca 	.word	0x7149f2ca
 801f954:	bf800000 	.word	0xbf800000
 801f958:	007fffff 	.word	0x007fffff

0801f95c <scalbnf>:
 801f95c:	ee10 3a10 	vmov	r3, s0
 801f960:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801f964:	d024      	beq.n	801f9b0 <scalbnf+0x54>
 801f966:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801f96a:	d302      	bcc.n	801f972 <scalbnf+0x16>
 801f96c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801f970:	4770      	bx	lr
 801f972:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801f976:	d121      	bne.n	801f9bc <scalbnf+0x60>
 801f978:	4b29      	ldr	r3, [pc, #164]	; (801fa20 <scalbnf+0xc4>)
 801f97a:	eddf 7a2a 	vldr	s15, [pc, #168]	; 801fa24 <scalbnf+0xc8>
 801f97e:	4298      	cmp	r0, r3
 801f980:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f984:	db15      	blt.n	801f9b2 <scalbnf+0x56>
 801f986:	ee10 3a10 	vmov	r3, s0
 801f98a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801f98e:	3a19      	subs	r2, #25
 801f990:	4402      	add	r2, r0
 801f992:	2afe      	cmp	r2, #254	; 0xfe
 801f994:	dd14      	ble.n	801f9c0 <scalbnf+0x64>
 801f996:	eddf 7a24 	vldr	s15, [pc, #144]	; 801fa28 <scalbnf+0xcc>
 801f99a:	eddf 6a24 	vldr	s13, [pc, #144]	; 801fa2c <scalbnf+0xd0>
 801f99e:	ee10 3a10 	vmov	r3, s0
 801f9a2:	eeb0 7a67 	vmov.f32	s14, s15
 801f9a6:	2b00      	cmp	r3, #0
 801f9a8:	fe67 7aa6 	vselge.f32	s15, s15, s13
 801f9ac:	ee27 0a27 	vmul.f32	s0, s14, s15
 801f9b0:	4770      	bx	lr
 801f9b2:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801fa30 <scalbnf+0xd4>
 801f9b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 801f9ba:	4770      	bx	lr
 801f9bc:	0dd2      	lsrs	r2, r2, #23
 801f9be:	e7e7      	b.n	801f990 <scalbnf+0x34>
 801f9c0:	2a00      	cmp	r2, #0
 801f9c2:	dd06      	ble.n	801f9d2 <scalbnf+0x76>
 801f9c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801f9c8:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801f9cc:	ee00 3a10 	vmov	s0, r3
 801f9d0:	4770      	bx	lr
 801f9d2:	f112 0f16 	cmn.w	r2, #22
 801f9d6:	da19      	bge.n	801fa0c <scalbnf+0xb0>
 801f9d8:	f24c 3350 	movw	r3, #50000	; 0xc350
 801f9dc:	4298      	cmp	r0, r3
 801f9de:	ee10 3a10 	vmov	r3, s0
 801f9e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801f9e6:	dd09      	ble.n	801f9fc <scalbnf+0xa0>
 801f9e8:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 801fa28 <scalbnf+0xcc>
 801f9ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 801fa2c <scalbnf+0xd0>
 801f9f0:	eef0 7a40 	vmov.f32	s15, s0
 801f9f4:	2b00      	cmp	r3, #0
 801f9f6:	fe00 0a07 	vseleq.f32	s0, s0, s14
 801f9fa:	e7dc      	b.n	801f9b6 <scalbnf+0x5a>
 801f9fc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801fa30 <scalbnf+0xd4>
 801fa00:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801fa34 <scalbnf+0xd8>
 801fa04:	eef0 7a40 	vmov.f32	s15, s0
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	e7f4      	b.n	801f9f6 <scalbnf+0x9a>
 801fa0c:	3219      	adds	r2, #25
 801fa0e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801fa12:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801fa16:	eddf 7a08 	vldr	s15, [pc, #32]	; 801fa38 <scalbnf+0xdc>
 801fa1a:	ee07 3a10 	vmov	s14, r3
 801fa1e:	e7c5      	b.n	801f9ac <scalbnf+0x50>
 801fa20:	ffff3cb0 	.word	0xffff3cb0
 801fa24:	4c000000 	.word	0x4c000000
 801fa28:	7149f2ca 	.word	0x7149f2ca
 801fa2c:	f149f2ca 	.word	0xf149f2ca
 801fa30:	0da24260 	.word	0x0da24260
 801fa34:	8da24260 	.word	0x8da24260
 801fa38:	33000000 	.word	0x33000000

0801fa3c <__errno>:
 801fa3c:	4b01      	ldr	r3, [pc, #4]	; (801fa44 <__errno+0x8>)
 801fa3e:	6818      	ldr	r0, [r3, #0]
 801fa40:	4770      	bx	lr
 801fa42:	bf00      	nop
 801fa44:	200007bc 	.word	0x200007bc

0801fa48 <_init>:
 801fa48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa4a:	bf00      	nop
 801fa4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa4e:	bc08      	pop	{r3}
 801fa50:	469e      	mov	lr, r3
 801fa52:	4770      	bx	lr

0801fa54 <_fini>:
 801fa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa56:	bf00      	nop
 801fa58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fa5a:	bc08      	pop	{r3}
 801fa5c:	469e      	mov	lr, r3
 801fa5e:	4770      	bx	lr
